[ExtensionAttribute]
public static class AutoMapper.AutoMapperExtensions : object {
    [ExtensionAttribute]
public static TDestination TryMap(IMapper mapper, object source);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.IHostExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.IHostExtensions/<InstantiateStartupServicesAsync>d__0")]
[ExtensionAttribute]
internal static ValueTask`1<IHost> InstantiateStartupServicesAsync(IHost host);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.OmniaJsonFileConfigurationBuilderExtension : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddOmniaJsonFile(IConfigurationBuilder builder, string mountPath, string subFilePath, bool reloadOnChange);
    [ExtensionAttribute]
private static IConfigurationBuilder AddOmniaJsonFile(IConfigurationBuilder builder, Action`1<OmniaJsonFileSource> configureSource);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityMigrationsServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IIdentityMigrationServiceCollection AddIdentityMigrationsComponents(IServiceCollection services);
}
public interface Microsoft.Extensions.DependencyInjection.IIdentityMigrationServiceCollection {
    public abstract virtual IIdentityMigrationServiceCollection AddPostDbContext(Guid sqlResourceId);
    public abstract virtual IIdentityMigrationServiceCollection AddFileStorageDbContext(Guid sqlResourceId);
    public abstract virtual IIdentityMigrationServiceCollection AddVersionedDataDbContext(Guid sqlResourceId);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void AddOmniaSqlDBContext(IServiceCollection serviceCollection, Guid sqlResource, DatabaseContextFactoryFunction`1<T> dbContextFactory, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static void AddOmniaSqlServerDistributedCache(IServiceCollection serviceCollection, Guid sqlResource, Action`2<SqlServiceResource, OmniaSqlServerCacheOptions> setupAction, bool purgeCacheJobEnabled);
    [ExtensionAttribute]
public static void AddOmniaDistributedLock(IServiceCollection serviceCollection, Guid sqlResourceId);
    [ExtensionAttribute]
public static IServiceCollection AddAsOption(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddAsOption(IServiceCollection serviceCollection, bool useDefaultBinderAsFallback, JsonSerializerSettings settingsUsedForSchemaCheckEtc);
    [ExtensionAttribute]
public static ISetupOmniaHub AddOmniaHub(IServiceCollection serviceCollection, bool localDev);
    [ExtensionAttribute]
internal static IServiceCollection AddFileStorageDBContext(IServiceCollection serviceCollection, Guid sqlResource);
    [ExtensionAttribute]
internal static IServiceCollection AddPostDBContext(IServiceCollection serviceCollection, Guid sqlResource);
    [ExtensionAttribute]
internal static IServiceCollection AddVersionedDataDBContext(IServiceCollection serviceCollection, Guid sqlResource);
    private static SqlServiceResource GetSqlServiceResourceForId(IServiceProvider serviceProvider, Guid sqlResource);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ILoggingBuilderExtensions : object {
    [CompilerGeneratedAttribute]
private static Nullable`1<DateTime> <LogLevelLastRead>k__BackingField;
    [CompilerGeneratedAttribute]
private static LogLevel <CurrentLogLevel>k__BackingField;
    private static Nullable`1<DateTime> LogLevelLastRead { get; private set; }
    private static LogLevel CurrentLogLevel { get; private set; }
    private static ILoggingBuilderExtensions();
    [CompilerGeneratedAttribute]
private static Nullable`1<DateTime> get_LogLevelLastRead();
    [CompilerGeneratedAttribute]
private static void set_LogLevelLastRead(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
private static LogLevel get_CurrentLogLevel();
    [CompilerGeneratedAttribute]
private static void set_CurrentLogLevel(LogLevel value);
    [ExtensionAttribute]
public static void UseOmniaLogging(ILoggingBuilder builder, bool keepConfiguredProviders);
    private static void UpdateCurrentLogLevelFromEnvironmentVariable();
}
internal class Omnia.Core.Repositories.EnterpriseProperties.EnterprisePropertyDefinitionRepository : object {
    [CompilerGeneratedAttribute]
private IMapper <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityMigrationDbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EnterprisePropertyDefinition> <DbSet>k__BackingField;
    private IMapper Mapper { get; }
    private IdentityMigrationDbContext DbContext { get; }
    private DbSet`1<EnterprisePropertyDefinition> DbSet { get; }
    public EnterprisePropertyDefinitionRepository(IdentityMigrationDbContext dbContext, IMapper mapper);
    [CompilerGeneratedAttribute]
private IMapper get_Mapper();
    [CompilerGeneratedAttribute]
private IdentityMigrationDbContext get_DbContext();
    [CompilerGeneratedAttribute]
private DbSet`1<EnterprisePropertyDefinition> get_DbSet();
    [AsyncStateMachineAttribute("Omnia.Core.Repositories.EnterpriseProperties.EnterprisePropertyDefinitionRepository/<GetAllAsync>d__10")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Core.Repositories.EnterpriseProperties.EnterprisePropertyDefinitionRepository/<GetByIdsAsync>d__11")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
}
internal interface Omnia.Core.Repositories.EnterpriseProperties.IEnterprisePropertyDefinitionRepository {
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync();
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
}
[ExtensionAttribute]
public static class Omnia.Fx.HostConfiguration.Extensions.IOmniaNetCoreConfigurationExtensions : object {
    [ExtensionAttribute]
public static T AddOmniaFxNetCore(T omniaNetStandardConfiguration, Action`1<IOmniaFxNetCoreRequiredImplementations> requiredImplementations, Action`1<IOmniaFxNetCoreOptionalImplementations> optionalImplementations);
    [ExtensionAttribute]
public static T AddOmniaFxNetCoreWithEmptyOptions(T omniaNetStandardConfiguration, Action`1<IOmniaFxNetCoreEmptyConfigurationOptions> configureOptions);
    [ExtensionAttribute]
public static T AddAppSettingsJsonFile(T config, string jsonFileName, string dirPath, bool optional);
    [ExtensionAttribute]
public static T AddAutoMapperProfiles(T config, List`1<Type> types);
}
[ExtensionAttribute]
public static class Omnia.Fx.HostConfiguration.Extensions.OmniaFxConfigurationOptionsNetCoreExtensions : object {
    [ExtensionAttribute]
public static IOmniaFxRequiredImplementations AddFxDefaultFromNetCore(IOmniaFxRequiredImplementations options, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    [ExtensionAttribute]
public static IOmniaFxEmptyConfigurationOptions AddFxDefaultFromNetCore(IOmniaFxEmptyConfigurationOptions options, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    [ExtensionAttribute]
public static IOmniaFxRequiredImplementations AddFxServiceBusFromNetCore(IOmniaFxRequiredImplementations options);
    [ExtensionAttribute]
public static IOmniaFxRequiredImplementations AddFxMessageBusFromNetCore(IOmniaFxRequiredImplementations options, Action`1<IFxNetCoreServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
    [ExtensionAttribute]
public static IOmniaFxEmptyConfigurationOptions AddFxServiceBusFromNetCore(IOmniaFxEmptyConfigurationOptions options);
    [ExtensionAttribute]
public static IOmniaFxEmptyConfigurationOptions AddFxServiceBusFromNetCore(IOmniaFxEmptyConfigurationOptions options, Action`1<IFxNetCoreServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
    private static void ConfigureFxDefault(IFxDefaultRequiredImplementations options);
    private static void ConfigureFxServiceBus(IFxServiceBusRequiredImplementations options);
    private static void ConfigureFxServiceBus(IFxServiceBusRequiredImplementations options, Action`1<IFxNetCoreServiceBusRequiredImplementations> requiredImplementations);
}
public class Omnia.Fx.NetCore.ApplicationInsights.Models.ApplicationInsightsOperationInfo : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <TrackTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentQueue`1<ITelemetry> <TelemetryItems>k__BackingField;
    public DateTimeOffset TrackTime { get; public set; }
    public ConcurrentQueue`1<ITelemetry> TelemetryItems { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_TrackTime();
    [CompilerGeneratedAttribute]
public void set_TrackTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public ConcurrentQueue`1<ITelemetry> get_TelemetryItems();
    [CompilerGeneratedAttribute]
public void set_TelemetryItems(ConcurrentQueue`1<ITelemetry> value);
}
public abstract class Omnia.Fx.NetCore.ApplicationInsights.OmniaTelemetryProcessorBase`1 : object {
    private static int TelemetryDataExpiredSeconds;
    private Timer _timer;
    private TimeSpan _timerTimeSpan;
    private List`1<string> AllLogLevels;
    [CompilerGeneratedAttribute]
private string <DefaultSevirityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryProcessor <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ApplicationInsightsOperationInfo> <ItemsByOperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, DateTimeOffset> <OperationIdsToAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, DateTimeOffset> <LastMetricTelemetry>k__BackingField;
    private string DefaultSevirityLevel { get; private set; }
    private ITelemetryProcessor Next { get; }
    private ConcurrentDictionary`2<string, ApplicationInsightsOperationInfo> ItemsByOperationId { get; }
    private ConcurrentDictionary`2<string, DateTimeOffset> OperationIdsToAdd { get; }
    private ConcurrentDictionary`2<string, DateTimeOffset> LastMetricTelemetry { get; }
    public OmniaTelemetryProcessorBase`1(ITelemetryProcessor next);
    [CompilerGeneratedAttribute]
private string get_DefaultSevirityLevel();
    [CompilerGeneratedAttribute]
private void set_DefaultSevirityLevel(string value);
    [CompilerGeneratedAttribute]
private ITelemetryProcessor get_Next();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ApplicationInsightsOperationInfo> get_ItemsByOperationId();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, DateTimeOffset> get_OperationIdsToAdd();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, DateTimeOffset> get_LastMetricTelemetry();
    public virtual void Process(ITelemetry item);
    protected virtual bool ShouldExcludeTelemetry(ITelemetry item, T options);
    protected abstract virtual T GetOptionsToUse();
    private void HandleTelemetryItem(bool exclude, ITelemetry item);
    private bool IncludeMetricTelemetry(ITelemetry item, ApplicationInsightsSharedOptions sharedOptions);
    private bool ExcludeTelemetry(ITelemetry item, ApplicationInsightsSharedOptions sharedOptions);
    private List`1<string> GetCurrentSeverityLevels(ApplicationInsightsSharedOptions sharedOptions);
    private void CleanupTelemetryData();
    private void CleanupOperationIdsToAdd(DateTimeOffset currentTime);
    private void CleanupItemsByOperationId(DateTimeOffset currentTime);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__20_0(object state);
}
public class Omnia.Fx.NetCore.ApplicationInsights.ServiceInformationTelemetry : object {
    [CompilerGeneratedAttribute]
private string <ExtensionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    private string ExtensionId { get; }
    private string ExtensionName { get; }
    private string ServiceId { get; }
    private string ServiceName { get; }
    [CompilerGeneratedAttribute]
private string get_ExtensionId();
    [CompilerGeneratedAttribute]
private string get_ExtensionName();
    [CompilerGeneratedAttribute]
private string get_ServiceId();
    [CompilerGeneratedAttribute]
private string get_ServiceName();
    public sealed virtual void Initialize(ITelemetry telemetry);
}
internal class Omnia.Fx.NetCore.Apps.AppHandlerService : object {
    [CompilerGeneratedAttribute]
private ILogger`1<AppHandlerService> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient <OmniaServiceWithUserCredential>k__BackingField;
    private ILogger`1<AppHandlerService> Logger { get; }
    private IConfiguredHttpClient OmniaServiceWithUserCredential { get; }
    public AppHandlerService(ILogger`1<AppHandlerService> logger, IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private ILogger`1<AppHandlerService> get_Logger();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient get_OmniaServiceWithUserCredential();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppHandlerService/<GetAppInstanceByTransactionIdAsync>d__7")]
public sealed virtual ValueTask`1<AppInstance> GetAppInstanceByTransactionIdAsync(Guid transactionId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppHandlerService/<CompleteAppActionAsync>d__8")]
public sealed virtual ValueTask`1<AppInstance> CompleteAppActionAsync(Guid transactionId, AppInstanceActions action, AppInstanceOutput outputInfo, AppInstanceProperties properties, string error);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppHandlerService/<CompleteAppActionHandlerAsync>d__9")]
public sealed virtual ValueTask`1<AppInstance> CompleteAppActionHandlerAsync(Guid transactionId, AppInstanceActions action, AppInstanceOutput outputInfo, AppInstanceProperties properties);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppHandlerService/<UpdateAppActionProgressAsync>d__10")]
public sealed virtual ValueTask`1<AppInstance> UpdateAppActionProgressAsync(Guid transactionId, AppInstanceActions action, string message, int percentage, AppInstanceOutput outputInfo, AppInstanceProperties properties);
}
internal class Omnia.Fx.NetCore.Apps.AppProviderHandler : object {
    [CompilerGeneratedAttribute]
private ILogger`1<AppProviderHandler> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueueBus <QueueBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IAppHandlerService> <AppHandlerService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> <DynamicScopedContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IScopedContextResolver> <ScopedContextResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IMapper> <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> <UserContextHandler>k__BackingField;
    private ILogger`1<AppProviderHandler> Logger { get; }
    private IQueueBus QueueBus { get; }
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IAppHandlerService> AppHandlerService { get; }
    private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> DynamicScopedContextProvider { get; }
    private ISingletonRefToScopedService`1<IScopedContextResolver> ScopedContextResolver { get; }
    private ISingletonRefToScopedService`1<IMapper> Mapper { get; }
    private ISingletonRefToScopedService`1<IUserContextHandler> UserContextHandler { get; }
    public AppProviderHandler(ILogger`1<AppProviderHandler> logger, IQueueBus queueBus, IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IAppHandlerService> appHandlerService, ISingletonRefToScopedService`1<IDynamicScopedContextProvider> dynamicScopedContextProvider, ISingletonRefToScopedService`1<IScopedContextResolver> scopedContextResolver, ISingletonRefToScopedService`1<IMapper> mapper, IEnumerable`1<IAppProviderMetadata> allAppMetadata, ISingletonRefToScopedService`1<IUserContextHandler> userContextHandler);
    [CompilerGeneratedAttribute]
private ILogger`1<AppProviderHandler> get_Logger();
    [CompilerGeneratedAttribute]
private IQueueBus get_QueueBus();
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IAppHandlerService> get_AppHandlerService();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> get_DynamicScopedContextProvider();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IScopedContextResolver> get_ScopedContextResolver();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IMapper> get_Mapper();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> get_UserContextHandler();
    private void RegisterQueueForAppProviders(IEnumerable`1<IAppProviderMetadata> allAppMetadata);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviderHandler/<ExecuteAppProviderAsync>d__26")]
private Task ExecuteAppProviderAsync(IAppProviderMetadata providerInfo, AppInstanceEventArg eventArg, UserMetadata metadata, bool isBeforeComplete);
    private void RegisterDequeue(IAppProviderMetadata providerInfo, bool isBeforeComplete);
    private string GetAppActionInfo(IAppProviderMetadata providerInfo, AppInstanceEventArg eventArg, bool isBeforeComplete);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviderHandler/<ExecuteHandleActionAsync>d__29")]
private ValueTask`1<ValueTuple`2<AppInstanceOutput, AppInstanceProperties>> ExecuteHandleActionAsync(IScopedServiceContext scopedContext, IAppHandlerService appHandlerService, IAppProviderMetadata providerInfo, AppInstanceEventArg eventArg, bool isBeforeComplete);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviderHandler/<CompleteAppActionAsync>d__30")]
private ValueTask CompleteAppActionAsync(IAppHandlerService appHandlerService, AppInstanceEventArg eventArg, AppInstanceOutput outputInfo, AppInstanceProperties appInstanceProperties, bool isBeforeComplete);
}
internal class Omnia.Fx.NetCore.Apps.AppProviderMetadata`1 : object {
    private AppAttribute _appAttribute;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService <ProviderReference>k__BackingField;
    private Type ProviderType { get; }
    public Guid AppDefinitionId { get; }
    public Queue`2<AppInstanceEventArg, UserMetadata> HandlerQueue { get; }
    public Queue`2<AppInstanceEventArg, UserMetadata> BeforeCompleteHandlerQueue { get; }
    public ISingletonRefToScopedService ProviderReference { get; private set; }
    protected AppAttribute AppAttribute { get; }
    public AppProviderMetadata`1(ISingletonRefToScopedService`1<T> providerRef);
    private Type get_ProviderType();
    public sealed virtual Guid get_AppDefinitionId();
    public sealed virtual Queue`2<AppInstanceEventArg, UserMetadata> get_HandlerQueue();
    public sealed virtual Queue`2<AppInstanceEventArg, UserMetadata> get_BeforeCompleteHandlerQueue();
    [CompilerGeneratedAttribute]
public sealed virtual ISingletonRefToScopedService get_ProviderReference();
    [CompilerGeneratedAttribute]
private void set_ProviderReference(ISingletonRefToScopedService value);
    protected AppAttribute get_AppAttribute();
}
internal class Omnia.Fx.NetCore.Apps.AppProviderOptions : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    private IServiceCollection ServiceCollection { get; }
    public AppProviderOptions(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
private IServiceCollection get_ServiceCollection();
    public sealed virtual void AddAppProvider();
}
public abstract class Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider : BaseAppProvider`2<Dictionary`2<string, string>, JObject> {
}
public abstract class Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2 : object {
    [CompilerGeneratedAttribute]
private IScopedContextResolver <ScopedContextResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicScopedContextProvider <DynamicScopedContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AppInstanceEventArg <EventArg>k__BackingField;
    [CompilerGeneratedAttribute]
private TContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private AppUpdateModel`1<TContext, TProperties, AppInstanceProperties> <AppInstanceProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private AppUpdateModel`1<TContext, TProperties, AppInstanceOutput> <OutputInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBeforeComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> <UpdateActionProgressCallback>k__BackingField;
    private IScopedContextResolver ScopedContextResolver { get; private set; }
    private IDynamicScopedContextProvider DynamicScopedContextProvider { get; private set; }
    protected AppInstanceEventArg EventArg { get; private set; }
    protected TContext Context { get; private set; }
    protected TProperties Properties { get; private set; }
    private AppUpdateModel`1<TContext, TProperties, AppInstanceProperties> AppInstanceProperties { get; private set; }
    private AppUpdateModel`1<TContext, TProperties, AppInstanceOutput> OutputInfo { get; private set; }
    private bool IsBeforeComplete { get; private set; }
    private Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> UpdateActionProgressCallback { get; private set; }
    [CompilerGeneratedAttribute]
private IScopedContextResolver get_ScopedContextResolver();
    [CompilerGeneratedAttribute]
private void set_ScopedContextResolver(IScopedContextResolver value);
    [CompilerGeneratedAttribute]
private IDynamicScopedContextProvider get_DynamicScopedContextProvider();
    [CompilerGeneratedAttribute]
private void set_DynamicScopedContextProvider(IDynamicScopedContextProvider value);
    [CompilerGeneratedAttribute]
protected AppInstanceEventArg get_EventArg();
    [CompilerGeneratedAttribute]
private void set_EventArg(AppInstanceEventArg value);
    [CompilerGeneratedAttribute]
protected TContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TContext value);
    [CompilerGeneratedAttribute]
protected TProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(TProperties value);
    [CompilerGeneratedAttribute]
private AppUpdateModel`1<TContext, TProperties, AppInstanceProperties> get_AppInstanceProperties();
    [CompilerGeneratedAttribute]
private void set_AppInstanceProperties(AppUpdateModel`1<TContext, TProperties, AppInstanceProperties> value);
    [CompilerGeneratedAttribute]
private AppUpdateModel`1<TContext, TProperties, AppInstanceOutput> get_OutputInfo();
    [CompilerGeneratedAttribute]
private void set_OutputInfo(AppUpdateModel`1<TContext, TProperties, AppInstanceOutput> value);
    [CompilerGeneratedAttribute]
private bool get_IsBeforeComplete();
    [CompilerGeneratedAttribute]
private void set_IsBeforeComplete(bool value);
    [CompilerGeneratedAttribute]
private Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> get_UpdateActionProgressCallback();
    [CompilerGeneratedAttribute]
private void set_UpdateActionProgressCallback(Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<HandleActionAsync>d__37")]
public virtual ValueTask`1<ValueTuple`2<AppInstanceOutput, AppInstanceProperties>> HandleActionAsync(IScopedContextResolver scopedContextResolver, IDynamicScopedContextProvider dynamicScopedContextProvider, AppInstanceEventArg eventArg, Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> updateActionProgressCallback);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<HandleActionBeforeCompleteAsync>d__38")]
public virtual ValueTask`1<ValueTuple`2<AppInstanceOutput, AppInstanceProperties>> HandleActionBeforeCompleteAsync(IScopedContextResolver scopedContextResolver, IDynamicScopedContextProvider dynamicScopedContextProvider, AppInstanceEventArg eventArg);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<InitAsync>d__39")]
protected virtual ValueTask InitAsync(IScopedContextResolver scopedContextResolver, IDynamicScopedContextProvider dynamicScopedContextProvider, AppInstanceEventArg eventArg, Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> updateActionProgressCallback, bool isBeforeComplete);
    protected virtual void SetOutputInfo(T outputInfo);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<UpdatePropertiesAsync>d__41")]
protected ValueTask UpdatePropertiesAsync(AppInstanceProperties appInstanceProperties);
    protected T ResolveOutputInfo();
    protected string GetContextParamStringValue(string contextParamName);
    protected T GetContextParamValue(string contextParamName);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<UpdateAppActionProgressAsync>d__45")]
protected ValueTask UpdateAppActionProgressAsync(string message, int percentage);
    protected TDestination ResolveProperties(TSource properties);
    protected virtual ValueTask OnBeforeCompleteCreatingInstanceAsync();
    protected virtual ValueTask OnBeforeCompleteUpdatingInstanceAsync(string fromVersion);
    protected virtual ValueTask OnBeforeCompleteRemovingInstanceAsync(string fromVersion);
    protected abstract virtual ValueTask CreateInstanceAsync();
    protected abstract virtual ValueTask UpdateInstanceAsync(string fromVersion);
    protected abstract virtual ValueTask RemoveInstanceAsync(string fromVersion);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<ResolveContextAsync>d__53")]
private ValueTask`1<TContext> ResolveContextAsync(IScopedContextResolver scopedContextResolver);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<ResolvePropertiesAsync>d__54")]
private ValueTask`1<TProperties> ResolvePropertiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProvider`2/<UpdatePropertiesAsync>d__55")]
private ValueTask UpdatePropertiesAsync(AppInstanceProperties appInstanceProperties, bool updatePendingChangeFlag);
    private void SetOutputInfo(T outputInfo, bool updatePendingChangeFlag);
}
public abstract class Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProviderWithContext`1 : BaseAppProvider`2<TContext, JObject> {
}
public abstract class Omnia.Fx.NetCore.Apps.AppProviders.BaseAppProviderWithProperties`1 : BaseAppProvider`2<Dictionary`2<string, string>, TProperties> {
}
public interface Omnia.Fx.NetCore.Apps.AppProviders.IAppProvider {
    public abstract virtual ValueTask`1<ValueTuple`2<AppInstanceOutput, AppInstanceProperties>> HandleActionAsync(IScopedContextResolver scopedContextResolver, IDynamicScopedContextProvider dynamicScopedContextProvider, AppInstanceEventArg eventArg, Func`5<string, int, AppInstanceOutput, AppInstanceProperties, ValueTask> updateActionProgressCallback);
    public abstract virtual ValueTask`1<ValueTuple`2<AppInstanceOutput, AppInstanceProperties>> HandleActionBeforeCompleteAsync(IScopedContextResolver scopedContextResolver, IDynamicScopedContextProvider dynamicScopedContextProvider, AppInstanceEventArg eventArg);
}
[AttributeUsageAttribute("4")]
public class Omnia.Fx.NetCore.Apps.Attributes.AppAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; private set; }
    public AppAttribute(string id);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
}
public interface Omnia.Fx.NetCore.Apps.IAppHandlerService {
    public abstract virtual ValueTask`1<AppInstance> GetAppInstanceByTransactionIdAsync(Guid transactionId);
    public abstract virtual ValueTask`1<AppInstance> CompleteAppActionAsync(Guid transactionId, AppInstanceActions action, AppInstanceOutput outputInfo, AppInstanceProperties properties, string error);
    public abstract virtual ValueTask`1<AppInstance> CompleteAppActionHandlerAsync(Guid transactionId, AppInstanceActions action, AppInstanceOutput outputInfo, AppInstanceProperties properties);
    public abstract virtual ValueTask`1<AppInstance> UpdateAppActionProgressAsync(Guid transactionId, AppInstanceActions action, string message, int percentage, AppInstanceOutput outputInfo, AppInstanceProperties properties);
}
public interface Omnia.Fx.NetCore.Apps.IAppProviderMetadata {
    public ISingletonRefToScopedService ProviderReference { get; }
    public Guid AppDefinitionId { get; }
    public Queue`2<AppInstanceEventArg, UserMetadata> HandlerQueue { get; }
    public Queue`2<AppInstanceEventArg, UserMetadata> BeforeCompleteHandlerQueue { get; }
    public abstract virtual ISingletonRefToScopedService get_ProviderReference();
    public abstract virtual Guid get_AppDefinitionId();
    public abstract virtual Queue`2<AppInstanceEventArg, UserMetadata> get_HandlerQueue();
    public abstract virtual Queue`2<AppInstanceEventArg, UserMetadata> get_BeforeCompleteHandlerQueue();
}
public interface Omnia.Fx.NetCore.Apps.IAppProviderOptions {
    public abstract virtual void AddAppProvider();
}
public class Omnia.Fx.NetCore.BackgroundTasks.BackgroundTaskQueue : object {
    private ConcurrentQueue`1<Func`3<IServiceProvider, CancellationToken, Task>> _workItems;
    private SemaphoreSlim _signal;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public BackgroundTaskQueue(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual void QueueBackgroundWorkItem(Func`3<IServiceProvider, CancellationToken, Task> workItem);
    public sealed virtual void QueueBackgroundWorkItemWithUserToken(OmniaToken omniaToken, Func`3<IServiceProvider, CancellationToken, Task> workItem);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.BackgroundTasks.BackgroundTaskQueue/<DequeueAsync>d__8")]
public sealed virtual Task`1<Func`2<CancellationToken, Task>> DequeueAsync(CancellationToken cancellationToken);
}
public interface Omnia.Fx.NetCore.BackgroundTasks.IBackgroundTaskQueue {
    public abstract virtual void QueueBackgroundWorkItem(Func`3<IServiceProvider, CancellationToken, Task> workItem);
    public abstract virtual void QueueBackgroundWorkItemWithUserToken(OmniaToken omniaToken, Func`3<IServiceProvider, CancellationToken, Task> workItem);
    public abstract virtual Task`1<Func`2<CancellationToken, Task>> DequeueAsync(CancellationToken cancellationToken);
}
internal class Omnia.Fx.NetCore.BackgroundTasks.QueuedHostedService : BackgroundService {
    private ILogger`1<QueuedHostedService> _logger;
    [CompilerGeneratedAttribute]
private IBackgroundTaskQueue <TaskQueue>k__BackingField;
    public IBackgroundTaskQueue TaskQueue { get; }
    public QueuedHostedService(IBackgroundTaskQueue taskQueue, ILogger`1<QueuedHostedService> logger);
    [CompilerGeneratedAttribute]
public IBackgroundTaskQueue get_TaskQueue();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.BackgroundTasks.QueuedHostedService/<ExecuteAsync>d__5")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.BackgroundTasks.QueuedHostedService/<StopAsync>d__6")]
public virtual Task StopAsync(CancellationToken stoppingToken);
    [CompilerGeneratedAttribute]
private void <ExecuteAsync>b__5_0(Exception ex);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CancellationToken cancellationToken);
}
public class Omnia.Fx.NetCore.Caching.OmniaSqlServerCacheOptions : object {
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExpiredItemsDeletionInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultSlidingExpiration>k__BackingField;
    public ISystemClock SystemClock { get; public set; }
    public Nullable`1<TimeSpan> ExpiredItemsDeletionInterval { get; public set; }
    public string ConnectionString { get; public set; }
    public string TableName { get; public set; }
    public TimeSpan DefaultSlidingExpiration { get; public set; }
    [CompilerGeneratedAttribute]
public ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
public void set_SystemClock(ISystemClock value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ExpiredItemsDeletionInterval();
    [CompilerGeneratedAttribute]
public void set_ExpiredItemsDeletionInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultSlidingExpiration();
    [CompilerGeneratedAttribute]
public void set_DefaultSlidingExpiration(TimeSpan value);
}
internal class Omnia.Fx.NetCore.Caching.OmniaSqlServerDistributedCachePurgeWorker : object {
    private static int TIMEOUT;
    private ILogger`1<OmniaSqlServerDistributedCachePurgeWorker> _logger;
    private IOptions`1<SqlServerCacheOptions> _options;
    private IHostApplicationLifetime _hostApplicationLifetime;
    public OmniaSqlServerDistributedCachePurgeWorker(ILogger`1<OmniaSqlServerDistributedCachePurgeWorker> logger, IOptions`1<SqlServerCacheOptions> options, IHostApplicationLifetime hostApplicationLifetime);
    private static OmniaSqlServerDistributedCachePurgeWorker();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Caching.OmniaSqlServerDistributedCachePurgeWorker/<PurgeAsync>d__7")]
private Task PurgeAsync(CancellationToken cancellationToken);
}
public static class Omnia.Fx.NetCore.Constants : object {
}
[AttributeUsageAttribute("4")]
public class Omnia.Fx.NetCore.DataMigrations.DataMigrationDefinition : Attribute {
    [CompilerGeneratedAttribute]
private Guid <GuidId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThresholdMinutes>k__BackingField;
    public Guid GuidId { get; }
    public string Title { get; }
    public DateTime DateTime { get; }
    public int ThresholdMinutes { get; }
    public DataMigrationDefinition(string id, string title, string dateTime, int thresholdMinutes);
    [CompilerGeneratedAttribute]
public Guid get_GuidId();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public int get_ThresholdMinutes();
}
public class Omnia.Fx.NetCore.DataMigrations.DataMigrationsHistoryHandler : object {
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDataMigrationsHistoryService> <DataMigrationsHistoryServiceRef>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> <DynamicScopedContextProviderRef>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<DataMigrationsHistoryHandler> <Logger>k__BackingField;
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IDataMigrationsHistoryService> DataMigrationsHistoryServiceRef { get; }
    private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> DynamicScopedContextProviderRef { get; }
    private ILogger`1<DataMigrationsHistoryHandler> Logger { get; }
    public DataMigrationsHistoryHandler(IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IDataMigrationsHistoryService> dataMigrationsHistoryServiceRef, ISingletonRefToScopedService`1<IDynamicScopedContextProvider> dynamicScopedContextProviderRef, ILogger`1<DataMigrationsHistoryHandler> logger);
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDataMigrationsHistoryService> get_DataMigrationsHistoryServiceRef();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> get_DynamicScopedContextProviderRef();
    [CompilerGeneratedAttribute]
private ILogger`1<DataMigrationsHistoryHandler> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.DataMigrations.DataMigrationsHistoryHandler/<MigrateData>d__14")]
protected virtual Task MigrateData();
    protected List`1<DataMigrationWithDateTime> GetSortedDataMigrationWithDateTime(List`1<Type> migrationActionTypes);
    private ValueTuple`3<DataMigrationsHistory, DateTime, int> RetrieveDataMigrationHistory(Type type);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.DataMigrations.DataMigrationsHistoryHandler/<PullMigrationId>d__17")]
protected ValueTask`1<List`1<Guid>> PullMigrationId(Guid migrationId, int thresholdMinutes, IDataMigrationsHistoryService dataMigrationsHistoryService);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.DataMigrations.DataMigrationsHistoryHandler/<<MigrateData>b__14_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <MigrateData>b__14_0();
}
public interface Omnia.Fx.NetCore.DataMigrations.IDataMigrationAction {
    public abstract virtual ValueTask MigrateAsync();
}
public interface Omnia.Fx.NetCore.DataMigrations.IDataMigrationWithResultAction {
    public abstract virtual ValueTask`1<string> MigrateWithResultAsync(string data);
    public abstract virtual bool IsCompleted(string data);
}
internal class Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler : object {
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IEnterprisePropertyFieldProvider> <EnterprisePropertyFieldProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyService> <QueryableEnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IEnterprisePropertyService> <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyMappingRepository> <EnterprisePropertyColumnMappingRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<EnterprisePropertyFieldHandler> <Logger>k__BackingField;
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IEnterprisePropertyFieldProvider> EnterprisePropertyFieldProvider { get; }
    private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyService> QueryableEnterprisePropertyService { get; }
    private ISingletonRefToScopedService`1<IEnterprisePropertyService> EnterprisePropertyService { get; }
    private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyMappingRepository> EnterprisePropertyColumnMappingRepository { get; }
    private IMessageBus MessageBus { get; }
    private ILogger`1<EnterprisePropertyFieldHandler> Logger { get; }
    public EnterprisePropertyFieldHandler(IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IEnterprisePropertyFieldProvider> enterprisePropertyFieldProvider, ISingletonRefToScopedService`1<IEnterprisePropertyService> enterprisePropertyService, ISingletonRefToScopedService`1<IQueryableEnterprisePropertyService> queryableEnterprisePropertyService, ISingletonRefToScopedService`1<IQueryableEnterprisePropertyMappingRepository> enterprisePropertyColumnMappingRepository, IMessageBus messageBus, ILogger`1<EnterprisePropertyFieldHandler> logger);
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IEnterprisePropertyFieldProvider> get_EnterprisePropertyFieldProvider();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyService> get_QueryableEnterprisePropertyService();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IEnterprisePropertyService> get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueryableEnterprisePropertyMappingRepository> get_EnterprisePropertyColumnMappingRepository();
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private ILogger`1<EnterprisePropertyFieldHandler> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<RunAsStartupAsync>d__22")]
public sealed virtual ValueTask RunAsStartupAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<EnsureQueryableEnterprisePropertiesAsync>d__23")]
private Task EnsureQueryableEnterprisePropertiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<SubscribePropertyDeletedAsync>d__24")]
private ValueTask SubscribePropertyDeletedAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<SubscribePropertyCreatedAsync>d__25")]
private ValueTask SubscribePropertyCreatedAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<EnsureMappingTableAsync>d__26")]
private ValueTask EnsureMappingTableAsync(IQueryableEnterprisePropertyMappingRepository enterprisePropertyColumnMappingRepo);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<<SubscribePropertyDeletedAsync>b__24_0>d")]
[CompilerGeneratedAttribute]
private Task <SubscribePropertyDeletedAsync>b__24_0(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldHandler/<<SubscribePropertyCreatedAsync>b__25_0>d")]
[CompilerGeneratedAttribute]
private Task <SubscribePropertyCreatedAsync>b__25_0(EnterprisePropertyDefinition property);
}
public abstract class Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePropertyServiceWithoutCache <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaAuthorizationService <AuthorizationService>k__BackingField;
    protected ILogger Logger { get; }
    protected IEnterprisePropertyServiceWithoutCache EnterprisePropertyService { get; }
    protected IOmniaAuthorizationService AuthorizationService { get; }
    protected EnterprisePropertyFieldProviderBase(ILogger logger, IEnterprisePropertyService enterprisePropertyService, IOmniaAuthorizationService authorizationService);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IEnterprisePropertyServiceWithoutCache get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
protected IOmniaAuthorizationService get_AuthorizationService();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<OnEnsureQueryableEnterprisePropertiesSyncedAsync>d__10")]
public virtual ValueTask`1<IDictionary`2<IQueryableEnterprisePropertiesEntityRepository, bool>> OnEnsureQueryableEnterprisePropertiesSyncedAsync(IList`1<EnterprisePropertyDefinition> properties, IList`1<QueryableEnterprisePropertyMapping> mappings);
    public virtual ValueTask`1<IDictionary`2<IQueryableEnterprisePropertiesEntityRepository, bool>> OnEnterprisePropertyCreatedAsync(EnterprisePropertyDefinition property, IList`1<QueryableEnterprisePropertyMapping> mappings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<GetQueryableEnterprisePropertiesAsync>d__12")]
public sealed virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetQueryableEnterprisePropertiesAsync(string tableName);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<RemoveQueryableEnterprisePropertyAsync>d__13")]
public virtual ValueTask RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping property, IList`1<EnterprisePropertyDefinition> propertyDefinitions);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<AddQueryableEnterprisePropertiesAsync>d__14")]
public virtual ValueTask AddQueryableEnterprisePropertiesAsync(QueryableEnterprisePropertyMapping[] properties, IList`1<EnterprisePropertyDefinition> propertyDefinitions);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<CanManageQueryablePropertiesAsync>d__15")]
public virtual ValueTask`1<bool> CanManageQueryablePropertiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<IsMappingTableCreatedAsync>d__16")]
public sealed virtual ValueTask`1<bool> IsMappingTableCreatedAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<OnQueryableEnterprisePropertiesAddedAsync>d__17")]
protected virtual ValueTask OnQueryableEnterprisePropertiesAddedAsync(QueryableEnterprisePropertyMapping[] properties, IList`1<EnterprisePropertyDefinition> enterprisePropertyDefinitions);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<OnQueryableEnterprisePropertyRemovedAsync>d__18")]
protected virtual ValueTask OnQueryableEnterprisePropertyRemovedAsync(QueryableEnterprisePropertyMapping property, IList`1<EnterprisePropertyDefinition> enterprisePropertyDefinitions);
    private IList`1<IQueryableEnterprisePropertiesEntityRepository> GetUsingRepositories(string tableName, bool includeObsolete);
    private IList`1<IQueryableEnterprisePropertiesEntityRepository> GetRepositoriesByTableName(string tableName, IList`1<IQueryableEnterprisePropertiesEntityRepository> repositories);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderBase/<HasTargetPropertiesMappedAsync>d__21")]
protected virtual ValueTask`1<bool> HasTargetPropertiesMappedAsync(ITargetingPropertyService targetingPropertyService, EnterprisePropertyDefinition property);
    protected abstract virtual IList`1<IQueryableEnterprisePropertiesEntityRepository> GetRepositories();
    protected virtual IList`1<IQueryableEnterprisePropertiesEntityRepository> GetObsoleteRepositories();
}
internal class Omnia.Fx.NetCore.EnterpriseProperties.EnterprisePropertyFieldProviderOptions : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireHandler>k__BackingField;
    private IServiceCollection ServiceCollection { get; }
    public bool RequireHandler { get; public set; }
    public EnterprisePropertyFieldProviderOptions(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
private IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequireHandler(bool value);
    public sealed virtual void SetProvider();
    public sealed virtual void SetDbContext();
}
public class Omnia.Fx.NetCore.EnterpriseProperties.Entities.QueryableEnterprisePropertyMapping : object {
    [CompilerGeneratedAttribute]
private Guid <EnterprisePropertyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnterprisePropertyInternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyMappingStatus <Status>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    public Guid EnterprisePropertyId { get; public set; }
    public string TableName { get; public set; }
    public string EnterprisePropertyInternalName { get; public set; }
    public DateTimeOffset CreatedAt { get; public set; }
    public EnterprisePropertyMappingStatus Status { get; public set; }
    [NullableAttribute("2")]
public string Log { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_EnterprisePropertyId();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyId(Guid value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_EnterprisePropertyInternalName();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyInternalName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public EnterprisePropertyMappingStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EnterprisePropertyMappingStatus value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Log();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Log(string value);
}
public interface Omnia.Fx.NetCore.EnterpriseProperties.IEnterprisePropertyFieldProvider {
    public abstract virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetQueryableEnterprisePropertiesAsync(string tableName);
    public abstract virtual ValueTask RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping property, IList`1<EnterprisePropertyDefinition> enterpriseProperties);
    public abstract virtual ValueTask AddQueryableEnterprisePropertiesAsync(QueryableEnterprisePropertyMapping[] properties, IList`1<EnterprisePropertyDefinition> enterpriseProperties);
    public abstract virtual ValueTask`1<IDictionary`2<IQueryableEnterprisePropertiesEntityRepository, bool>> OnEnsureQueryableEnterprisePropertiesSyncedAsync(IList`1<EnterprisePropertyDefinition> properties, IList`1<QueryableEnterprisePropertyMapping> mappings);
    public abstract virtual ValueTask`1<bool> CanManageQueryablePropertiesAsync();
    public abstract virtual ValueTask`1<IDictionary`2<IQueryableEnterprisePropertiesEntityRepository, bool>> OnEnterprisePropertyCreatedAsync(EnterprisePropertyDefinition property, IList`1<QueryableEnterprisePropertyMapping> mappings);
    public abstract virtual ValueTask`1<bool> IsMappingTableCreatedAsync();
}
public interface Omnia.Fx.NetCore.EnterpriseProperties.IEnterprisePropertyFieldProviderOptions {
    public bool RequireHandler { get; public set; }
    public abstract virtual void SetProvider();
    public abstract virtual void SetDbContext();
    public abstract virtual bool get_RequireHandler();
    public abstract virtual void set_RequireHandler(bool value);
}
public class Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository : BaseQueryableEnterprisePropertyMappingRepository {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertiesColumnName>k__BackingField;
    public string TableName { get; }
    public string PropertiesColumnName { get; }
    public IExecutionStrategy DatabaseExecutionStrategy { get; }
    public BaseQueryableEnterprisePropertiesEntityRepository(BaseDbContext dbContext, string tableName, string propertiesColumnName);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public string get_PropertiesColumnName();
    public virtual IExecutionStrategy get_DatabaseExecutionStrategy();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<RemoveQueryableEnterprisePropertyAsync>d__11")]
public virtual ValueTask RemoveQueryableEnterprisePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<RemoveQueryableEnterprisePropertyAsync>d__12")]
public virtual ValueTask RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping propertyColumnMapping);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<UpdateMappingsAsync>d__13")]
public virtual ValueTask UpdateMappingsAsync(QueryableEnterprisePropertyMapping propertyColumnMapping);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<EnsureQueryableEnterprisePropertyAsync>d__14")]
public virtual ValueTask EnsureQueryableEnterprisePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<HandleQueryableEnterprisePropertyAddedAsync>d__15")]
public virtual ValueTask HandleQueryableEnterprisePropertyAddedAsync(IList`1<EnterprisePropertyDefinition> properties);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<HandleQueryableEnterprisePropertyRemovedAsync>d__16")]
public virtual ValueTask HandleQueryableEnterprisePropertyRemovedAsync(IList`1<EnterprisePropertyDefinition> properties);
    protected virtual bool ShouldAddComputedColumn(EnterprisePropertyDefinition property);
    protected virtual bool ShouldAddComputedColumn(string propertyInternalName);
    public virtual bool ShouldAddQueryableEnterpriseProperty(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertiesEntityRepository/<GetAllMappingsAsync>d__20")]
public virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetAllMappingsAsync();
    protected virtual string GetComputedColumnName(string propertyInternalName);
    protected virtual string GetComputedColumnIndexName(string columnName);
    protected virtual string GetCreatePropertyComputedColumnCommand(string columnName, string propertyPath, string indexName, PropertyIndexedType propertyIndexedType, bool isComplex);
    protected virtual string GetRemovePropertyComputedColumnCommand(string propertyInternalName);
    protected virtual ValueTuple`2<string, IList`1<SqlParameter>> GetAddMappingCommand(EnterprisePropertyDefinition property);
    protected virtual ValueTuple`2<string, IList`1<SqlParameter>> GetRemoveMappingCommand(EnterprisePropertyDefinition property);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTuple`2<string, List`1<SqlParameter>> <>n__0(QueryableEnterprisePropertyMapping[] mappings);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> <>n__1(string tableName);
}
public abstract class Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository : object {
    [CompilerGeneratedAttribute]
private BaseDbContext <DatabaseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <MappingTableCreatedLoaded>k__BackingField;
    protected BaseDbContext DatabaseContext { get; }
    protected static bool MappingTableCreatedLoaded { get; protected set; }
    public BaseQueryableEnterprisePropertyMappingRepository(BaseDbContext dbContext);
    [CompilerGeneratedAttribute]
protected BaseDbContext get_DatabaseContext();
    [CompilerGeneratedAttribute]
protected static bool get_MappingTableCreatedLoaded();
    [CompilerGeneratedAttribute]
protected static void set_MappingTableCreatedLoaded(bool value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<IsMappingTableCreatedAsync>d__9")]
public sealed virtual ValueTask`1<bool> IsMappingTableCreatedAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<IsMappingTableColumnsCreatedV1Async>d__10")]
public sealed virtual ValueTask`1<bool> IsMappingTableColumnsCreatedV1Async();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<GetAllMappingsAsync>d__11")]
public sealed virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetAllMappingsAsync(string tableName);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<EnsureMappingsTableCreatedAsync>d__12")]
public sealed virtual ValueTask`1<int> EnsureMappingsTableCreatedAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<EnsureMappingsTableColumnsV1Async>d__13")]
public sealed virtual ValueTask`1<int> EnsureMappingsTableColumnsV1Async();
    protected int ExecuteSqlCommand(string sql, Object[] parameters);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<ExecuteSqlCommandAsync>d__15")]
protected ValueTask`1<int> ExecuteSqlCommandAsync(string sql, Object[] parameters);
    protected virtual ValueTuple`2<string, List`1<SqlParameter>> GetAddMappingsCommand(QueryableEnterprisePropertyMapping[] mappings);
    protected virtual ValueTuple`2<string, List`1<SqlParameter>> GetRemoveMappingsCommand(QueryableEnterprisePropertyMapping[] mappings);
    protected virtual ValueTuple`2<string, List`1<SqlParameter>> GetUpdateMappingsCommand(QueryableEnterprisePropertyMapping[] mappings);
    private string GetParamName(string prefix, int index);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.BaseQueryableEnterprisePropertyMappingRepository/<EnsureMappingTableAsync>d__20")]
private ValueTask EnsureMappingTableAsync();
}
public interface Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.IQueryableEnterprisePropertiesEntityRepository {
    public string TableName { get; }
    public string PropertiesColumnName { get; }
    public IExecutionStrategy DatabaseExecutionStrategy { get; }
    public abstract virtual string get_TableName();
    public abstract virtual string get_PropertiesColumnName();
    public abstract virtual IExecutionStrategy get_DatabaseExecutionStrategy();
    public abstract virtual ValueTask EnsureQueryableEnterprisePropertyAsync(EnterprisePropertyDefinition property);
    public abstract virtual ValueTask RemoveQueryableEnterprisePropertyAsync(EnterprisePropertyDefinition property);
    public abstract virtual ValueTask RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping propertyColumnMapping);
    public abstract virtual bool ShouldAddQueryableEnterpriseProperty(EnterprisePropertyDefinition property);
    public abstract virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetAllMappingsAsync();
    public abstract virtual ValueTask`1<bool> IsMappingTableCreatedAsync();
    public abstract virtual ValueTask HandleQueryableEnterprisePropertyAddedAsync(IList`1<EnterprisePropertyDefinition> properties);
    public abstract virtual ValueTask HandleQueryableEnterprisePropertyRemovedAsync(IList`1<EnterprisePropertyDefinition> properties);
    public abstract virtual ValueTask UpdateMappingsAsync(QueryableEnterprisePropertyMapping propertyColumnMapping);
}
internal interface Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.IQueryableEnterprisePropertyMappingDbContextProvider {
    public BaseDbContext DbContext { get; }
    public abstract virtual BaseDbContext get_DbContext();
}
internal interface Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.IQueryableEnterprisePropertyMappingRepository {
    public abstract virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetAllMappingsAsync(string tableName);
    public abstract virtual ValueTask`1<int> EnsureMappingsTableCreatedAsync();
    public abstract virtual ValueTask`1<bool> IsMappingTableCreatedAsync();
    public abstract virtual ValueTask`1<bool> IsMappingTableColumnsCreatedV1Async();
    public abstract virtual ValueTask`1<int> EnsureMappingsTableColumnsV1Async();
}
internal class Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.QueryableEnterprisePropertyMappingDbContextProvider : object {
    [CompilerGeneratedAttribute]
private BaseDbContext <DbContext>k__BackingField;
    public BaseDbContext DbContext { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual BaseDbContext get_DbContext();
    [CompilerGeneratedAttribute]
private void set_DbContext(BaseDbContext value);
    public void SetDbContext(BaseDbContext dbContext);
}
internal class Omnia.Fx.NetCore.EnterpriseProperties.PropertyMappings.QueryableEnterprisePropertyMappingRepository : BaseQueryableEnterprisePropertyMappingRepository {
    public QueryableEnterprisePropertyMappingRepository(BaseDbContext dbContext);
}
public class Omnia.Fx.NetCore.EnterpriseProperties.Services.HttpContract : object {
}
public interface Omnia.Fx.NetCore.EnterpriseProperties.Services.IQueryableEnterprisePropertyService {
    public abstract virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetQueryableEnterprisePropertiesAsync(string tableName, Nullable`1<Guid> serviceId);
    public abstract virtual ValueTask`1<QueryableEnterprisePropertyMapping> RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping property, Nullable`1<Guid> serviceId);
    public abstract virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> AddQueryableEnterprisePropertiesAsync(QueryableEnterprisePropertyMapping[] properties, Nullable`1<Guid> serviceId);
    public abstract virtual ValueTask`1<IList`1<EnterprisePropertyDefinition>> GetQueryableEnterprisePropertyDefinitionsAsync(string tableName, Nullable`1<Guid> serviceId);
    public abstract virtual ValueTask`1<bool> IsMappingTableCreatedAsync(Nullable`1<Guid> serviceId);
    public abstract virtual ValueTask`1<bool> CanManageQueryablePropertiesAsync();
    public abstract virtual void RefreshQueryableEnterprisePropertiesCache(Guid serviceId, string tableName);
}
internal class Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService : object {
    private static string CacheKey;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    public IOmniaServices OmniaServices { get; }
    public IServiceProvider ServiceProvider { get; }
    public IEnterprisePropertyService EnterprisePropertyService { get; }
    public IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    public IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    public QueryableEnterprisePropertyService(OmniaTargetedSynchronizedMemoryCache cache, IOmniaServices omniaServices, IServiceProvider serviceProvider, IEnterprisePropertyService enterprisePropertyService, IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory);
    private static QueryableEnterprisePropertyService();
    [CompilerGeneratedAttribute]
public IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public IEnterprisePropertyService get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
public IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
public IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<GetQueryableEnterprisePropertiesAsync>d__17")]
public sealed virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> GetQueryableEnterprisePropertiesAsync(string tableName, Nullable`1<Guid> serviceId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<RemoveQueryableEnterprisePropertyAsync>d__18")]
public sealed virtual ValueTask`1<QueryableEnterprisePropertyMapping> RemoveQueryableEnterprisePropertyAsync(QueryableEnterprisePropertyMapping property, Nullable`1<Guid> serviceId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<AddQueryableEnterprisePropertiesAsync>d__19")]
public sealed virtual ValueTask`1<IList`1<QueryableEnterprisePropertyMapping>> AddQueryableEnterprisePropertiesAsync(QueryableEnterprisePropertyMapping[] properties, Nullable`1<Guid> serviceId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<GetQueryableEnterprisePropertyDefinitionsAsync>d__20")]
public sealed virtual ValueTask`1<IList`1<EnterprisePropertyDefinition>> GetQueryableEnterprisePropertyDefinitionsAsync(string tableName, Nullable`1<Guid> serviceId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<IsMappingTableCreatedAsync>d__21")]
public sealed virtual ValueTask`1<bool> IsMappingTableCreatedAsync(Nullable`1<Guid> serviceId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<CanManageQueryablePropertiesAsync>d__22")]
public virtual ValueTask`1<bool> CanManageQueryablePropertiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.EnterpriseProperties.Services.QueryableEnterprisePropertyService/<HandleQueryablePropertiesRequestAsync>d__23")]
private ValueTask HandleQueryablePropertiesRequestAsync(Nullable`1<Guid> serviceId, Func`2<QueryablePropertyServiceHttpClient, ValueTask> externalAction, Func`2<IEnterprisePropertyFieldProvider, ValueTask> internalAction);
    private QueryablePropertyServiceHttpClient GetHttpClient(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, Guid serviceId);
    private void RemoveQueryablePropertiesCache(string tableName);
    private string GetQueryablePropertiesCacheKey(string tableName);
    public sealed virtual void RefreshQueryableEnterprisePropertiesCache(Guid serviceId, string tableName);
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Extensions.IConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static IOmniaHostingEnvironment GetOmniaHostingEnvironment(IConfigurationBuilder cfgBuilder);
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Extensions.ItemQueryResultExtensions : object {
    [ExtensionAttribute]
public static ItemQueryResult`1<ToType> MapTo(ItemQueryResult`1<FromType> source, Func`2<FromType, ToType> mapFunc);
}
[ExtensionAttribute]
internal static class Omnia.Fx.NetCore.Extensions.ServiceBusMessageExtensions : object {
    [ExtensionAttribute]
internal static void TrySetMessageSettings(ServiceBusMessage message, MessageSettings messageSettings);
}
[AttributeUsageAttribute("4")]
public class Omnia.Fx.NetCore.Features.Attributes.OmniaFeatureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; private set; }
    public OmniaFeatureAttribute(string id);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
}
internal class Omnia.Fx.NetCore.Features.FeatureHandlerService : object {
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureHandlerService> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient <OmniaServiceWithUserCredential>k__BackingField;
    private ILogger`1<FeatureHandlerService> Logger { get; }
    private IConfiguredHttpClient OmniaServiceWithUserCredential { get; }
    public FeatureHandlerService(ILogger`1<FeatureHandlerService> logger, IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureHandlerService> get_Logger();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient get_OmniaServiceWithUserCredential();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureHandlerService/<GetFeatureInstanceByTransactionIdAsync>d__7")]
public sealed virtual ValueTask`1<FeatureInstance> GetFeatureInstanceByTransactionIdAsync(Guid transactionId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureHandlerService/<CompleteFeatureActionAsync>d__8")]
public sealed virtual ValueTask`1<FeatureInstance> CompleteFeatureActionAsync(Guid transactionId, FeatureActions action, JObject outputInfo, string error, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic);
}
internal class Omnia.Fx.NetCore.Features.FeatureProviderHandler : object {
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureProviderHandler> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueueBus <QueueBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IFeatureHandlerService> <FeatureHandlerService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> <DynamicScopedContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IScopedContextResolver> <ScopedContextResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IMapper> <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> <UserContextHandler>k__BackingField;
    private ILogger`1<FeatureProviderHandler> Logger { get; }
    private IQueueBus QueueBus { get; }
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IFeatureHandlerService> FeatureHandlerService { get; }
    private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> DynamicScopedContextProvider { get; }
    private ISingletonRefToScopedService`1<IScopedContextResolver> ScopedContextResolver { get; }
    private ISingletonRefToScopedService`1<IMapper> Mapper { get; }
    private ISingletonRefToScopedService`1<IUserContextHandler> UserContextHandler { get; }
    public FeatureProviderHandler(ILogger`1<FeatureProviderHandler> logger, IQueueBus queueBus, IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IFeatureHandlerService> featureHandlerService, ISingletonRefToScopedService`1<IDynamicScopedContextProvider> dynamicScopedContextProvider, ISingletonRefToScopedService`1<IScopedContextResolver> scopedContextResolver, ISingletonRefToScopedService`1<IMapper> mapper, IEnumerable`1<IFeatureProviderMetadata> metadataProviders, ISingletonRefToScopedService`1<IUserContextHandler> userContextHandler);
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureProviderHandler> get_Logger();
    [CompilerGeneratedAttribute]
private IQueueBus get_QueueBus();
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IFeatureHandlerService> get_FeatureHandlerService();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDynamicScopedContextProvider> get_DynamicScopedContextProvider();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IScopedContextResolver> get_ScopedContextResolver();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IMapper> get_Mapper();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> get_UserContextHandler();
    private void RegisterQueueForFeatureProviders(IEnumerable`1<IFeatureProviderMetadata> metadataProviders);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviderHandler/<ExecuteFeatureProviderAsync>d__26")]
private Task ExecuteFeatureProviderAsync(IFeatureProviderMetadata providerInfo, FeatureEventArg eventArg, UserMetadata metadata);
    private string GetFeatureActionInfo(IFeatureProviderMetadata providerInfo, FeatureEventArg eventArg);
}
internal class Omnia.Fx.NetCore.Features.FeatureProviderMetadata`1 : object {
    private OmniaFeatureAttribute _featureAttribute;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService <ProviderReference>k__BackingField;
    private Type ProviderType { get; }
    public Guid FeatureId { get; }
    public Queue`2<FeatureEventArg, UserMetadata> Queue { get; }
    public ISingletonRefToScopedService ProviderReference { get; private set; }
    protected OmniaFeatureAttribute FeatureAttribute { get; }
    public FeatureProviderMetadata`1(ISingletonRefToScopedService`1<T> providerRef);
    private Type get_ProviderType();
    public sealed virtual Guid get_FeatureId();
    public sealed virtual Queue`2<FeatureEventArg, UserMetadata> get_Queue();
    [CompilerGeneratedAttribute]
public sealed virtual ISingletonRefToScopedService get_ProviderReference();
    [CompilerGeneratedAttribute]
private void set_ProviderReference(ISingletonRefToScopedService value);
    protected OmniaFeatureAttribute get_FeatureAttribute();
}
internal class Omnia.Fx.NetCore.Features.FeatureProviderOptions : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    private IServiceCollection ServiceCollection { get; }
    public FeatureProviderOptions(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
private IServiceCollection get_ServiceCollection();
    public sealed virtual void AddFeatureProvider();
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseAppFeatureProvider : BaseAppFeatureProvider`2<Dictionary`2<string, string>, JObject> {
    public BaseAppFeatureProvider(IAppService appService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseAppFeatureProvider`2 : BaseFeatureProvider {
    [CompilerGeneratedAttribute]
private IAppService <AppService>k__BackingField;
    [CompilerGeneratedAttribute]
private AppInstance <AppInstance>k__BackingField;
    protected IAppService AppService { get; }
    protected AppInstance AppInstance { get; private set; }
    public BaseAppFeatureProvider`2(IAppService appService);
    [CompilerGeneratedAttribute]
protected IAppService get_AppService();
    [CompilerGeneratedAttribute]
protected AppInstance get_AppInstance();
    [CompilerGeneratedAttribute]
private void set_AppInstance(AppInstance value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseAppFeatureProvider`2/<ResolveFeatureInfoAsync>d__8")]
protected virtual ValueTask ResolveFeatureInfoAsync(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseAppFeatureProviderWithContext`1 : BaseAppFeatureProvider`2<TContext, JObject> {
    public BaseAppFeatureProviderWithContext`1(IAppService appService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseAppFeatureProviderWithProperties`1 : BaseAppFeatureProvider`2<Dictionary`2<string, string>, TProperties> {
    public BaseAppFeatureProviderWithProperties`1(IAppService appService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseBusinessProfileFeatureProvider : BaseBusinessProfileFeatureProvider`2<Dictionary`2<string, string>, JObject> {
    public BaseBusinessProfileFeatureProvider(IBusinessProfilesService businessProfilesService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseBusinessProfileFeatureProvider`2 : BaseFeatureProvider {
    [CompilerGeneratedAttribute]
private IBusinessProfilesService <BusinessProfileService>k__BackingField;
    [CompilerGeneratedAttribute]
private BusinessProfile <BusinessProfile>k__BackingField;
    protected IBusinessProfilesService BusinessProfileService { get; }
    protected BusinessProfile BusinessProfile { get; private set; }
    public BaseBusinessProfileFeatureProvider`2(IBusinessProfilesService businessProfilesService);
    [CompilerGeneratedAttribute]
protected IBusinessProfilesService get_BusinessProfileService();
    [CompilerGeneratedAttribute]
protected BusinessProfile get_BusinessProfile();
    [CompilerGeneratedAttribute]
private void set_BusinessProfile(BusinessProfile value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseBusinessProfileFeatureProvider`2/<ResolveFeatureInfoAsync>d__8")]
protected virtual ValueTask ResolveFeatureInfoAsync(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseBusinessProfileFeatureProviderWithContext`1 : BaseBusinessProfileFeatureProvider`2<TContext, JObject> {
    public BaseBusinessProfileFeatureProviderWithContext`1(IBusinessProfilesService businessProfilesService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseBusinessProfileFeatureProviderWithProperties`1 : BaseBusinessProfileFeatureProvider`2<Dictionary`2<string, string>, TProperties> {
    public BaseBusinessProfileFeatureProviderWithProperties`1(IBusinessProfilesService businessProfilesService);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider : BaseFeatureProvider`2<Dictionary`2<string, string>, JObject> {
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider`2 : object {
    [CompilerGeneratedAttribute]
private FeatureEventArg <EventArg>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <OutputInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TProperties <Properties>k__BackingField;
    protected FeatureEventArg EventArg { get; private set; }
    protected JObject OutputInfo { get; private set; }
    protected TContext Context { get; private set; }
    protected TProperties Properties { get; private set; }
    [CompilerGeneratedAttribute]
protected FeatureEventArg get_EventArg();
    [CompilerGeneratedAttribute]
private void set_EventArg(FeatureEventArg value);
    [CompilerGeneratedAttribute]
protected JObject get_OutputInfo();
    [CompilerGeneratedAttribute]
private void set_OutputInfo(JObject value);
    [CompilerGeneratedAttribute]
protected TContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TContext value);
    [CompilerGeneratedAttribute]
protected TProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(TProperties value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider`2/<HandleActionAsync>d__16")]
public virtual ValueTask`1<JObject> HandleActionAsync(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider`2/<ResolveFeatureInfoAsync>d__17")]
protected virtual ValueTask ResolveFeatureInfoAsync(IScopedContextResolver scopedContextResolver, FeatureEventArg eventArg);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider`2/<ResolveContextAsync>d__18")]
protected virtual ValueTask`1<TContext> ResolveContextAsync(IScopedContextResolver scopedContextResolver);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProvider`2/<ResolvePropertiesAsync>d__19")]
protected virtual ValueTask`1<TProperties> ResolvePropertiesAsync();
    protected virtual void SetOutputInfo(T outputInfo);
    protected virtual T ResolveOutputInfo();
    protected string GetContextParamStringValue(string contextParamName);
    protected T GetContextParamValue(string contextParamName);
    protected abstract virtual Task ActivateAsync();
    protected abstract virtual Task UpgradeAsync(string fromVersion);
    protected abstract virtual Task DeactivateAsync(string fromVersion);
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProviderWithContext`1 : BaseFeatureProvider`2<TContext, JObject> {
}
public abstract class Omnia.Fx.NetCore.Features.FeatureProviders.BaseFeatureProviderWithProperties`1 : BaseFeatureProvider`2<Dictionary`2<string, string>, TProperties> {
}
public interface Omnia.Fx.NetCore.Features.FeatureProviders.IFeatureProvider {
    public abstract virtual ValueTask`1<JObject> HandleActionAsync(IScopedContextResolver scopedContextResolver, FeatureEventArg featureEventArg);
}
internal class Omnia.Fx.NetCore.Features.FeatureQueueService : object {
    private static TimeSpan TimeoutForEachFeature;
    [CompilerGeneratedAttribute]
private IBackgroundTaskQueue <BackgroundTaskQueue>k__BackingField;
    private IBackgroundTaskQueue BackgroundTaskQueue { get; }
    public FeatureQueueService(IBackgroundTaskQueue backgroundTaskQueue);
    private static FeatureQueueService();
    [CompilerGeneratedAttribute]
private IBackgroundTaskQueue get_BackgroundTaskQueue();
    public sealed virtual void ActivateOrUpgrade(IList`1<Guid> featureIds, IDictionary`2<string, string> contextParams, Action`1<IFeatureQueueHandler> onConfigure, OmniaToken omniaToken);
    public sealed virtual void Deactivate(IList`1<Guid> featureIds, IDictionary`2<string, string> contextParams, Action`1<IFeatureQueueHandler> onConfigure, OmniaToken omniaToken);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureQueueService/<RunAsync>d__9")]
private Task RunAsync(IServiceProvider rootServiceProvider, Queue`1<Guid> featureQueue, IDictionary`2<string, string> contextParams, FeatureQueueConfigure handler, OmniaToken omniaToken, CancellationToken cancellationToken, ActionType actionType);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.FeatureQueueService/<SafeScopedRunAsync>d__10")]
private Task SafeScopedRunAsync(IServiceProvider serviceProvider, OmniaToken omniaToken, Func`2<IServiceProvider, Task> func, Action`1<Exception> onCatch, Action onFinally);
}
public interface Omnia.Fx.NetCore.Features.IFeatureHandlerService {
    public abstract virtual ValueTask`1<FeatureInstance> GetFeatureInstanceByTransactionIdAsync(Guid transactionId);
    public abstract virtual ValueTask`1<FeatureInstance> CompleteFeatureActionAsync(Guid transactionId, FeatureActions action, JObject outputInfo, string error, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic);
}
internal interface Omnia.Fx.NetCore.Features.IFeatureProviderMetadata {
    public ISingletonRefToScopedService ProviderReference { get; }
    public Guid FeatureId { get; }
    public Queue`2<FeatureEventArg, UserMetadata> Queue { get; }
    public abstract virtual ISingletonRefToScopedService get_ProviderReference();
    public abstract virtual Guid get_FeatureId();
    public abstract virtual Queue`2<FeatureEventArg, UserMetadata> get_Queue();
}
public interface Omnia.Fx.NetCore.Features.IFeatureProviderOptions {
    public abstract virtual void AddFeatureProvider();
}
public interface Omnia.Fx.NetCore.Features.IFeatureQueueService {
    public abstract virtual void ActivateOrUpgrade(IList`1<Guid> featureIds, IDictionary`2<string, string> contextParams, Action`1<IFeatureQueueHandler> onConfigure, OmniaToken omniaToken);
    public abstract virtual void Deactivate(IList`1<Guid> featureIds, IDictionary`2<string, string> contextParams, Action`1<IFeatureQueueHandler> onConfigure, OmniaToken omniaToken);
}
internal class Omnia.Fx.NetCore.Features.TargetResolvers.AppInstanceFeatureTargetResolver : BaseFeatureTargetResolver {
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.TargetResolvers.AppInstanceFeatureTargetResolver/<GetFeatureTargetAsync>d__0")]
public virtual ValueTask`1<string> GetFeatureTargetAsync(Dictionary`2<string, string> context);
    protected virtual IDictionary`2<string, ServiceParamTypes> GetParamInfo();
    public sealed virtual Guid GetAppInstanceId(string featureTarget);
}
public abstract class Omnia.Fx.NetCore.Features.TargetResolvers.BaseFeatureTargetResolver : object {
    public sealed virtual List`1<FeatureParam> GetRequiredParams();
    public abstract virtual ValueTask`1<string> GetFeatureTargetAsync(Dictionary`2<string, string> context);
    protected abstract virtual IDictionary`2<string, ServiceParamTypes> GetParamInfo();
}
internal class Omnia.Fx.NetCore.Features.TargetResolvers.BusinessProfileFeatureTargetResolver : BaseFeatureTargetResolver {
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.TargetResolvers.BusinessProfileFeatureTargetResolver/<GetFeatureTargetAsync>d__0")]
public virtual ValueTask`1<string> GetFeatureTargetAsync(Dictionary`2<string, string> context);
    protected virtual IDictionary`2<string, ServiceParamTypes> GetParamInfo();
}
internal class Omnia.Fx.NetCore.Features.TargetResolvers.FeatureTargetResolverFactory : object {
    private static string CacheKey;
    private IDictionary`2<string, Type> _targetResolverTypeDictionary;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> <CacheHelper>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> CacheHelper { get; }
    public IDictionary`2<string, Type> TargetResolverTypeDictionary { get; }
    public FeatureTargetResolverFactory(IServiceProvider serviceProvider, IOmniaMemoryCache cache);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> get_CacheHelper();
    public IDictionary`2<string, Type> get_TargetResolverTypeDictionary();
    public sealed virtual IFeatureTargetResolver CreateTargetResolver(string targetResolverTypeFullName);
    private IDictionary`2<string, Type> GetTargetResolverTypeDictionary();
    private IFeatureTargetResolver CreateTargetResolver(Type targetResolverType);
}
public interface Omnia.Fx.NetCore.Features.TargetResolvers.IAppInstanceFeatureTargetResolver {
    public abstract virtual Guid GetAppInstanceId(string featureTarget);
}
public interface Omnia.Fx.NetCore.Features.TargetResolvers.IBusinessProfileFeatureTargetResolver {
}
public interface Omnia.Fx.NetCore.Features.TargetResolvers.IFeatureTargetResolver {
    public abstract virtual ValueTask`1<string> GetFeatureTargetAsync(Dictionary`2<string, string> context);
    public abstract virtual List`1<FeatureParam> GetRequiredParams();
}
public interface Omnia.Fx.NetCore.Features.TargetResolvers.IFeatureTargetResolverFactory {
    public abstract virtual IFeatureTargetResolver CreateTargetResolver(string targetResolverTypeFullName);
}
public interface Omnia.Fx.NetCore.Features.TargetResolvers.ITenantFeatureTargetResolver {
}
internal class Omnia.Fx.NetCore.Features.TargetResolvers.TenantFeatureTargetResolver : BaseFeatureTargetResolver {
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Features.TargetResolvers.TenantFeatureTargetResolver/<GetFeatureTargetAsync>d__0")]
public virtual ValueTask`1<string> GetFeatureTargetAsync(Dictionary`2<string, string> context);
    protected virtual IDictionary`2<string, ServiceParamTypes> GetParamInfo();
}
internal class Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1 : object {
    [CompilerGeneratedAttribute]
private static IFileOwner <CurrentOwnerService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<FileStorageInternalService`1<TFileMetadataType>> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileStorageProvider`1<TFileMetadataType> <FileStorageProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileStorageRepository`1<TFileMetadataType> <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private FileStorageValidationHelper`1<TFileMetadataType> <ValidationHelper>k__BackingField;
    private static IFileOwner CurrentOwnerService { get; private set; }
    private ILogger`1<FileStorageInternalService`1<TFileMetadataType>> Logger { get; }
    private IFileStorageProvider`1<TFileMetadataType> FileStorageProvider { get; }
    private IFileStorageRepository`1<TFileMetadataType> Repository { get; }
    private IOmniaServices OmniaServices { get; }
    private FileStorageValidationHelper`1<TFileMetadataType> ValidationHelper { get; }
    public FileStorageInternalService`1(ILogger`1<FileStorageInternalService`1<TFileMetadataType>> logger, IFileStorageProvider`1<TFileMetadataType> fileStorageProvider, IFileStorageRepository`1<TFileMetadataType> repository, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private static IFileOwner get_CurrentOwnerService();
    [CompilerGeneratedAttribute]
private static void set_CurrentOwnerService(IFileOwner value);
    [CompilerGeneratedAttribute]
private ILogger`1<FileStorageInternalService`1<TFileMetadataType>> get_Logger();
    [CompilerGeneratedAttribute]
private IFileStorageProvider`1<TFileMetadataType> get_FileStorageProvider();
    [CompilerGeneratedAttribute]
private IFileStorageRepository`1<TFileMetadataType> get_Repository();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
private FileStorageValidationHelper`1<TFileMetadataType> get_ValidationHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<CreateAsync>d__20")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> CreateAsync(TFileMetadataType metadata, Stream content);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<UpdateAsync>d__21")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<UpdateAsync>d__22")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate, Stream content);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<DeleteAsync>d__23")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> DeleteAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<MoveFilesAsync>d__24")]
public sealed virtual Task MoveFilesAsync(string sourceStorageFolderPath, string targetStorageFolderPath);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<GetFileAsync>d__25")]
public sealed virtual Task`1<Stream> GetFileAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<GetAsync>d__26")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> GetAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<GetRegisteredOwnerAsync>d__27")]
public sealed virtual ValueTask`1<IFileOwner> GetRegisteredOwnerAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<RegisterOwnerAsync>d__28")]
public sealed virtual Task RegisterOwnerAsync(IFileOwner owner);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<CheckPermissionAndGetFile>d__29")]
private Task`1<ValueTuple`2<IPersistedFile`1<TFileMetadataType>, IFileInformation>> CheckPermissionAndGetFile(IFileReference fileRef);
    private string GetFilePath(IFileInformation fileInfo);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageInternalService`1/<EnsureMetadataIsOwnedByServiceAsync>d__31")]
private Task EnsureMetadataIsOwnedByServiceAsync(IFileOwner[] owners);
}
internal class Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1 : object {
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileStorageService`1<TTargetFileMetadataType> <CorrentInterfaceForContext>k__BackingField;
    [CompilerGeneratedAttribute]
private FileStorageValidationHelper`1<TTargetFileMetadataType> <ValidationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IOmniaServices OmniaServices { get; }
    private IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    private IFileStorageService`1<TTargetFileMetadataType> CorrentInterfaceForContext { get; private set; }
    private FileStorageValidationHelper`1<TTargetFileMetadataType> ValidationHelper { get; }
    private IServiceProvider ServiceProvider { get; }
    public FileStorageRouteService`1(IOmniaServices omniaServices, IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
private IFileStorageService`1<TTargetFileMetadataType> get_CorrentInterfaceForContext();
    [CompilerGeneratedAttribute]
private void set_CorrentInterfaceForContext(IFileStorageService`1<TTargetFileMetadataType> value);
    [CompilerGeneratedAttribute]
private FileStorageValidationHelper`1<TTargetFileMetadataType> get_ValidationHelper();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<CreateAsync>d__19")]
public sealed virtual Task`1<IPersistedFile`1<TTargetFileMetadataType>> CreateAsync(TTargetFileMetadataType metadata, Stream content);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<UpdateAsync>d__20")]
public sealed virtual Task`1<IPersistedFile`1<TTargetFileMetadataType>> UpdateAsync(IPersistedFile`1<TTargetFileMetadataType> fileToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<UpdateAsync>d__21")]
public sealed virtual Task`1<IPersistedFile`1<TTargetFileMetadataType>> UpdateAsync(IPersistedFile`1<TTargetFileMetadataType> fileToUpdate, Stream content);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<DeleteAsync>d__22")]
public sealed virtual Task`1<IPersistedFile`1<TTargetFileMetadataType>> DeleteAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<MoveFilesAsync>d__23")]
public sealed virtual Task MoveFilesAsync(string sourceStorageFolderPath, string targetStorageFolderPath);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<GetFileAsync>d__24")]
public sealed virtual Task`1<Stream> GetFileAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<GetAsync>d__25")]
public sealed virtual Task`1<IPersistedFile`1<TTargetFileMetadataType>> GetAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.FileStorage.FileStorageRouteService`1/<GetCorrectInterfaceImplAsync>d__26")]
private ValueTask`1<IFileStorageService`1<TTargetFileMetadataType>> GetCorrectInterfaceImplAsync();
}
internal interface Omnia.Fx.NetCore.FileStorage.IFileStorageInternalService`1 {
    public abstract virtual ValueTask`1<IFileOwner> GetRegisteredOwnerAsync();
    public abstract virtual Task RegisterOwnerAsync(IFileOwner owner);
}
public interface Omnia.Fx.NetCore.FileStorage.IFileStorageProvider`1 {
    public abstract virtual ValueTask`1<IFileInformation> GenerateFileInformation(TFileMetadataType metadata);
    public abstract virtual ValueTask`1<FileStorageProviderResult> CanCreateAsync(TFileMetadataType metadata);
    public abstract virtual ValueTask`1<FileStorageProviderResult> CanUpdateAsync(IPersistedFile`1<TFileMetadataType> persistedFileInStorage, IPersistedFile`1<TFileMetadataType> persistedFileToUpdate);
    public abstract virtual ValueTask`1<FileStorageProviderResult> CanDeleteAsync(IPersistedFile`1<TFileMetadataType> persistedFileBeingDeleted);
    public abstract virtual ValueTask`1<FileStorageProviderResult> CanReadAsync(IPersistedFile`1<TFileMetadataType> persistedFileBeingRead);
}
public interface Omnia.Fx.NetCore.FileStorage.IFileStorageService`1 {
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> CreateAsync(TFileMetadataType metadata, Stream content);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate, Stream content);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> DeleteAsync(IFileReference fileRef);
    public abstract virtual Task MoveFilesAsync(string sourceStorageFolderPath, string targetStorageFolderPath);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> GetAsync(IFileReference fileRef);
    public abstract virtual Task`1<Stream> GetFileAsync(IFileReference fileRef);
}
internal class Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.BusinessServicesConfiguration : OmniaHostConfigurationBase {
    public BusinessServicesConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations();
    private void AddOwnServices(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddImplementations>b__1_0(IServiceCollection services);
}
internal class Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.DefaultConfiguration : OmniaHostConfigurationBase {
    internal static List`1<Type> AutoMapperProfiles;
    public DefaultConfiguration(IOmniaNetStandardConfiguration config);
    private static DefaultConfiguration();
    public void AddImplementations();
    private void AddOwnServices(IServiceCollection services);
    private void AddAppSettings(IServiceCollection services);
    private void AddApplicationInsights(IServiceCollection services);
    private static void AddOmniaServiceTelemetry(IServiceCollection services);
    private static void AddOmniaFxNetCoreHttpClients(IServiceCollection services);
    private static void AddOmniaBackgroundTaskServices(IServiceCollection services);
    private static void AddSharedDistributedCacheIfNeeded(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddImplementations>b__2_0(IServiceCollection services);
}
internal class Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.DeploymentWatcherConfiguration : OmniaHostConfigurationBase {
    public DeploymentWatcherConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations();
    private void AddOwnServices(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddImplementations>b__1_0(IServiceCollection services);
}
public interface Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.IFxNetCoreServiceBusRequiredImplementations {
    public abstract virtual IFxNetCoreServiceBusRequiredImplementations AddMessageBus(Func`2<IServiceProvider, IMessageBus> implementationFactory);
    public abstract virtual IFxNetCoreServiceBusRequiredImplementations AddMessageBus();
    public abstract virtual IFxNetCoreServiceBusRequiredImplementations AddQueueBus(Func`2<IServiceProvider, IQueueBus> implementationFactory);
    public abstract virtual IFxNetCoreServiceBusRequiredImplementations AddQueueBus();
}
internal class Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.ServiceBusConfiguration : object {
    [CompilerGeneratedAttribute]
private IFxServiceBusRequiredImplementations <Options>k__BackingField;
    private IFxServiceBusRequiredImplementations Options { get; }
    public ServiceBusConfiguration(IFxServiceBusRequiredImplementations options);
    [CompilerGeneratedAttribute]
private IFxServiceBusRequiredImplementations get_Options();
    public sealed virtual IFxNetCoreServiceBusRequiredImplementations AddMessageBus(Func`2<IServiceProvider, IMessageBus> implementationFactory);
    public sealed virtual IFxNetCoreServiceBusRequiredImplementations AddQueueBus(Func`2<IServiceProvider, IQueueBus> implementationFactory);
    private sealed virtual override IFxNetCoreServiceBusRequiredImplementations Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.IFxNetCoreServiceBusRequiredImplementations.AddMessageBus();
    private sealed virtual override IFxNetCoreServiceBusRequiredImplementations Omnia.Fx.NetCore.HostConfiguration.ConfiguredImplementations.IFxNetCoreServiceBusRequiredImplementations.AddQueueBus();
}
public class Omnia.Fx.NetCore.HostConfiguration.HostBuilderWrapper`1 : object {
    [CompilerGeneratedAttribute]
private IHostBuilder <RealHostBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<T> <Logger>k__BackingField;
    public IHostBuilder RealHostBuilder { get; }
    public ILogger`1<T> Logger { get; }
    public IDictionary`2<object, object> Properties { get; }
    public HostBuilderWrapper`1(IHostBuilder realHostBuilder, ILogger`1<T> logger);
    [CompilerGeneratedAttribute]
public IHostBuilder get_RealHostBuilder();
    [CompilerGeneratedAttribute]
public ILogger`1<T> get_Logger();
    public virtual IDictionary`2<object, object> get_Properties();
    public virtual IHost Build();
    public virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public sealed virtual IHostBuilder ConfigureHost(Action`1<IHostBuilder> hostBuilderAction);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Build>b__9_0(IConfigurationBuilder cfgBuilder);
}
internal class Omnia.Fx.NetCore.HostConfiguration.HostWrapper`1 : object {
    [CompilerGeneratedAttribute]
private IHost <RealHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<T> <Logger>k__BackingField;
    private IHost RealHost { get; }
    private ILogger`1<T> Logger { get; }
    public IServiceProvider Services { get; }
    public HostWrapper`1(IHost realHost, ILogger`1<T> logger);
    [CompilerGeneratedAttribute]
private IHost get_RealHost();
    [CompilerGeneratedAttribute]
private ILogger`1<T> get_Logger();
    public sealed virtual IServiceProvider get_Services();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.HostConfiguration.HostWrapper`1/<StartAsync>d__10")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
public interface Omnia.Fx.NetCore.HostConfiguration.IHostConfigurator {
    public abstract virtual IHostBuilder ConfigureHost(Action`1<IHostBuilder> hostBuilderAction);
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions {
    public abstract virtual IOmniaFxNetCoreEmptyConfigurationOptions AddUserContextSwitcher();
    public abstract virtual IOmniaFxNetCoreEmptyConfigurationOptions AddFxNetCoreDefault();
    public abstract virtual IOmniaFxNetCoreEmptyConfigurationOptions AddFxNetCoreBusinessServices();
    public abstract virtual IOmniaFxNetCoreEmptyConfigurationOptions AddOmniaDeploymentWatcher();
    public abstract virtual IOmniaFxNetCoreEmptyConfigurationOptions AddOmniaDataMigrationsHistory();
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyOptionsProvider`1 {
    public abstract virtual TReturn AddOmniaFxNetCore(Action`1<IOmniaFxNetCoreRequiredImplementations> requiredImplementations, Action`1<IOmniaFxNetCoreOptionalImplementations> optionalImplementations);
    public abstract virtual TReturn AddOmniaFxNetCoreWithEmptyOptions(Action`1<IOmniaFxNetCoreEmptyConfigurationOptions> configureOptions);
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementations {
    public abstract virtual IOmniaFxNetCoreOptionalImplementations AddOmniaDataMigrationsHistory();
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase`1 {
    public abstract virtual TReturn AddVersionedDataStorageCapabilities(Guid sqlResourceId);
    public abstract virtual TReturn AddPropertyPrimitiveCreator();
    public abstract virtual TReturn AddFileStorageProvider(Guid sqlResourceId);
    public abstract virtual TReturn AddPostProvider(Guid sqlResourceId);
    public abstract virtual TReturn AddPostProvider();
    public abstract virtual TReturn ReplicateOwnPermissionToLocalDatabase();
    public abstract virtual TReturn AddOmniaIdentitySynchronizationCapabilities();
    public abstract virtual TReturn AddOmniaIdentityPropertyConversionCapabilities();
    public abstract virtual TReturn AddFeatureHandlers(Action`1<IFeatureProviderOptions> configureOptions);
    public abstract virtual TReturn AddAppHandlers(Action`1<IAppProviderOptions> configureOptions);
    public abstract virtual TReturn AddEnterprisePropertyFieldProvider(Action`1<IEnterprisePropertyFieldProviderOptions> configureOptions);
    public abstract virtual TReturn SetCurrentServiceId(Guid serviceId);
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalOptionsProvider`1 {
    public abstract virtual TReturn ConfigureOmniaFxNetCore(Action`1<IOmniaFxNetCoreOptionalImplementations> optionalImplementations);
}
public interface Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreRequiredImplementations {
    public abstract virtual IOmniaFxNetCoreRequiredImplementations AddFxNetCoreAuthentication(Action`1<IFxAuthenticationRequiredImplementations> requiredImplementations);
}
public class Omnia.Fx.NetCore.HostConfiguration.OmniaFxNetCoreConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<Action`1<IOmniaFxRequiredImplementations>> <OmniaFxOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IOmniaFxOptionalImplementations>> <OmniaFxOptionalOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <OptionalOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <DefaultOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaNetStandardConfiguration <Config>k__BackingField;
    private List`1<Action`1<IOmniaFxRequiredImplementations>> OmniaFxOptions { get; }
    private List`1<Action`1<IOmniaFxOptionalImplementations>> OmniaFxOptionalOptions { get; }
    private List`1<Action> OptionalOptions { get; }
    private List`1<Action> DefaultOptions { get; }
    private IOmniaNetStandardConfiguration Config { get; }
    public OmniaFxNetCoreConfiguration(IOmniaNetStandardConfiguration config);
    [CompilerGeneratedAttribute]
private List`1<Action`1<IOmniaFxRequiredImplementations>> get_OmniaFxOptions();
    [CompilerGeneratedAttribute]
private List`1<Action`1<IOmniaFxOptionalImplementations>> get_OmniaFxOptionalOptions();
    [CompilerGeneratedAttribute]
private List`1<Action> get_OptionalOptions();
    [CompilerGeneratedAttribute]
private List`1<Action> get_DefaultOptions();
    [CompilerGeneratedAttribute]
private IOmniaNetStandardConfiguration get_Config();
    public sealed virtual IOmniaFxNetCoreRequiredImplementations AddFxNetCoreAuthentication(Action`1<IFxAuthenticationRequiredImplementations> configureOptions);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddFeatureHandlers(Action`1<IFeatureProviderOptions> configure);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddVersionedDataStorageCapabilities(Guid sqlResourceId);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddPropertyPrimitiveCreator();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddFileStorageProvider(Guid sqlResourceId);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddPostProvider(Guid sqlResourceId);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddPostProvider();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddAppHandlers(Action`1<IAppProviderOptions> configure);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations ConfigureOmniaFx(Action`1<IOmniaFxOptionalImplementations> configureOptions);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddOmniaDataMigrationsHistory();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddEnterprisePropertyFieldProvider(Action`1<IEnterprisePropertyFieldProviderOptions> configure);
    public sealed virtual IOmniaFxNetCoreOptionalImplementations SetCurrentServiceId(Guid serviceId);
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddUserContextSwitcher();
    public IOmniaFxNetCoreEmptyConfigurationOptions AddDefaultPropertyPrimitiveCreators();
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddFxNetCoreDefault();
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddFxNetCoreBusinessServices();
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddOmniaDeploymentWatcher();
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddOmniaFx(Action`1<IOmniaFxRequiredImplementations> configureOptions, Action`1<IOmniaFxOptionalImplementations> configureOptionalOptions);
    public sealed virtual IOmniaFxNetCoreEmptyConfigurationOptions AddOmniaFxWithEmptyOptions(Action`1<IOmniaFxEmptyConfigurationOptions> configureOptions);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddFeatureHandlers(Action`1<IFeatureProviderOptions> configureOptions);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddAppHandlers(Action`1<IAppProviderOptions> configureOptions);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddEnterprisePropertyFieldProvider(Action`1<IEnterprisePropertyFieldProviderOptions> configureOptions);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.SetCurrentServiceId(Guid serviceId);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions.AddOmniaDataMigrationsHistory();
    internal IOmniaNetStandardConfiguration DoDefaultConfigurations();
    internal IOmniaNetStandardConfiguration DoEmptyConfigurations();
    private void DoConfigurations();
    private void AddOmniaFxDefault();
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddVersionedDataStorageCapabilities(Guid sqlResourceId);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddPropertyPrimitiveCreator();
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddOmniaIdentitySynchronizationCapabilities();
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddOmniaIdentityPropertyConversionCapabilities();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddOmniaIdentitySynchronizationCapabilities();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations AddOmniaIdentityPropertyConversionCapabilities();
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.ReplicateOwnPermissionToLocalDatabase();
    public sealed virtual IOmniaFxNetCoreOptionalImplementations ReplicateOwnPermissionToLocalDatabase();
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddFileStorageProvider(Guid sqlResourceId);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddPostProvider(Guid sqlResourceId);
    private sealed virtual override IOmniaFxNetCoreEmptyConfigurationOptions Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreOptionalImplementationsBase<Omnia.Fx.NetCore.HostConfiguration.IOmniaFxNetCoreEmptyConfigurationOptions>.AddPostProvider();
    [CompilerGeneratedAttribute]
private void <AddPropertyPrimitiveCreator>b__19_0();
    [CompilerGeneratedAttribute]
private void <AddPropertyPrimitiveCreator>b__19_1();
    [CompilerGeneratedAttribute]
private void <AddPostProvider>b__22_0();
    [CompilerGeneratedAttribute]
private void <AddPostProvider>b__22_1();
    [CompilerGeneratedAttribute]
private void <AddOmniaDataMigrationsHistory>b__25_0();
    [CompilerGeneratedAttribute]
private void <AddOmniaDataMigrationsHistory>b__25_1(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddOmniaDataMigrationsHistory>b__25_4();
    [CompilerGeneratedAttribute]
private void <AddUserContextSwitcher>b__28_0();
    [CompilerGeneratedAttribute]
private void <AddUserContextSwitcher>b__28_1(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddDefaultPropertyPrimitiveCreators>b__29_0();
    [CompilerGeneratedAttribute]
private void <AddDefaultPropertyPrimitiveCreators>b__29_1();
    [CompilerGeneratedAttribute]
private void <AddFxNetCoreDefault>b__30_0();
    [CompilerGeneratedAttribute]
private void <AddFxNetCoreBusinessServices>b__31_0();
    [CompilerGeneratedAttribute]
private void <AddOmniaDeploymentWatcher>b__32_0();
    [CompilerGeneratedAttribute]
private void <AddOmniaFxDefault>b__43_0(IOmniaFxRequiredImplementations options);
    [CompilerGeneratedAttribute]
private void <AddOmniaFxDefault>b__43_1(IOmniaFxOptionalImplementations optionalOptions);
    [CompilerGeneratedAttribute]
private void <AddOmniaIdentitySynchronizationCapabilities>b__48_0();
    [CompilerGeneratedAttribute]
private void <AddOmniaIdentitySynchronizationCapabilities>b__48_1();
    [CompilerGeneratedAttribute]
private void <AddOmniaIdentityPropertyConversionCapabilities>b__49_0();
    [CompilerGeneratedAttribute]
private void <AddOmniaIdentityPropertyConversionCapabilities>b__49_1();
    [CompilerGeneratedAttribute]
private void <ReplicateOwnPermissionToLocalDatabase>b__51_0();
    [CompilerGeneratedAttribute]
private void <ReplicateOwnPermissionToLocalDatabase>b__51_1();
}
public interface Omnia.Fx.NetCore.Hosting.IOmniaHostingEnvironment {
    public OmniaHostingEnvironments Environment { get; }
    public abstract virtual OmniaHostingEnvironments get_Environment();
}
internal class Omnia.Fx.NetCore.Hosting.OmniaHostingEnvironment : object {
    [CompilerGeneratedAttribute]
private OmniaHostingEnvironments <Environment>k__BackingField;
    public OmniaHostingEnvironments Environment { get; }
    [CompilerGeneratedAttribute]
public sealed virtual OmniaHostingEnvironments get_Environment();
}
internal interface Omnia.Fx.NetCore.Http.IServiceHttpInstanceHandler {
    public abstract virtual HttpClient GetInstance(string clientUniqueName, string logicalHttpClientName, Boolean& newInstance);
}
internal class Omnia.Fx.NetCore.Http.ServiceHttpInstanceHandler : object {
    private ConcurrentDictionary`2<string, HttpClient> Instances;
    [CompilerGeneratedAttribute]
private IHttpClientFactory <HttpClientFactory>k__BackingField;
    public IHttpClientFactory HttpClientFactory { get; }
    public ServiceHttpInstanceHandler(IHttpClientFactory httpClientFactory);
    [CompilerGeneratedAttribute]
public IHttpClientFactory get_HttpClientFactory();
    public sealed virtual HttpClient GetInstance(string clientUniqueName, string logicalHttpClientName, Boolean& newInstance);
}
public class Omnia.Fx.NetCore.Identities.HttpContract : object {
}
public interface Omnia.Fx.NetCore.Identities.IServiceIdentitySynchronizationHandler {
    public abstract virtual ValueTask`1<ValueTuple`2<IdentitySyncChangeToken, IList`1<IdentityChange>>> GetChangesAsync();
    public abstract virtual Task CommitAsync(IdentitySyncChangeToken theNewtoken);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Constants : object {
}
internal class Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.PostHandler : GuidIdPrimaryKeyAuditingEntityHandler`1<PostEntity> {
    private ConcurrentDictionary`2<Guid, List`1<MigratableIdentity>> _mentionedUsersJson;
    public PostHandler(IIdentityMigrationHelper migrationHelper);
    protected virtual ValueTask ExecuteAsync(int totalRows, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.PostHandler/<ExtractIdentityDataAsync>d__4")]
public virtual ValueTask`1<EfMigratingIdentityData> ExtractIdentityDataAsync(PostEntity entity, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.PostHandler/<UpdateEfEntityAsync>d__5")]
public virtual ValueTask`1<bool> UpdateEfEntityAsync(PostEntity entity, IIdentityMigrationScopeHelper helper);
    private bool TryEnsureMentionedUsersJson(PostEntity entity, List`1& mentionedUsers);
    private void RemoveMentionedUsersJson(PostEntity entity);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<EfMigratingIdentityData> <>n__0(PostEntity entity, IIdentityMigrationScopeHelper helper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__1(PostEntity entity, IIdentityMigrationScopeHelper helper);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.VersionedDataHandler : IntIdPrimaryKeyAuditingEntityHandler`2<VersionedDataEntity, VersionedDataMigrationData> {
    public VersionedDataHandler(IIdentityMigrationHelper migrationHelper);
    public virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.VersionedDataHandler/<ExtractLoginNamesAsync>d__2")]
public virtual ValueTask`1<List`1<IdentityColumnInfo>> ExtractLoginNamesAsync(IdentityMigrationData migrationDataItem, IIdentityMigrationScopeHelper helper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<List`1<IdentityColumnInfo>> <>n__0(IdentityMigrationData migrationDataItem, IIdentityMigrationScopeHelper helper);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.CustomHandlers.VersionedDataMigrationData : IntPrimaryKeyAuditingMigrationData {
    [CompilerGeneratedAttribute]
private string <CheckedOutBy>k__BackingField;
    public string CheckedOutBy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CheckedOutBy();
    [CompilerGeneratedAttribute]
public void set_CheckedOutBy(string value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.EnterprisePropertyCategory : ClusteredIndexAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute]
public Guid OmniaServiceId { get; public set; }
    [ColumnAttribute]
public string Title { get; public set; }
    [ColumnAttribute]
public bool BuiltIn { get; public set; }
    [ColumnAttribute]
public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
public void set_OmniaServiceId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_BuiltIn();
    [CompilerGeneratedAttribute]
public void set_BuiltIn(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.EnterprisePropertyDataType : ClusteredIndexAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UIOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValuePropertyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyIndexedType <IndexedType>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute]
public Guid OmniaServiceId { get; public set; }
    [ColumnAttribute]
public string Title { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("500")]
public string UIOptions { get; public set; }
    [ColumnAttribute]
public string ValuePropertyPath { get; public set; }
    [ColumnAttribute]
public PropertyIndexedType IndexedType { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
public void set_OmniaServiceId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_UIOptions();
    [CompilerGeneratedAttribute]
public void set_UIOptions(string value);
    [CompilerGeneratedAttribute]
public string get_ValuePropertyPath();
    [CompilerGeneratedAttribute]
public void set_ValuePropertyPath(string value);
    [CompilerGeneratedAttribute]
public PropertyIndexedType get_IndexedType();
    [CompilerGeneratedAttribute]
public void set_IndexedType(PropertyIndexedType value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.EnterprisePropertyDefinition : ClusteredIndexAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EnterprisePropertyDataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <EnterprisePropertyCategoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SPSearchable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmniaSearchable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedPropertySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyDataType <EnterprisePropertyDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategory <EnterprisePropertyCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSSearchPropertySettings>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute]
public string InternalName { get; public set; }
    [ColumnAttribute]
public string Title { get; public set; }
    [ColumnAttribute]
public Guid EnterprisePropertyDataTypeId { get; public set; }
    [ColumnAttribute]
public string Settings { get; public set; }
    [ColumnAttribute]
public Nullable`1<Guid> EnterprisePropertyCategoryId { get; public set; }
    [ColumnAttribute]
public bool SPSearchable { get; public set; }
    [ColumnAttribute]
public bool OmniaSearchable { get; public set; }
    [ColumnAttribute]
public bool BuiltIn { get; public set; }
    [ColumnAttribute]
public string ManagedPropertySettings { get; public set; }
    public EnterprisePropertyDataType EnterprisePropertyDataType { get; public set; }
    public EnterprisePropertyCategory EnterprisePropertyCategory { get; public set; }
    public string MSSearchPropertySettings { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_InternalName();
    [CompilerGeneratedAttribute]
public void set_InternalName(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Guid get_EnterprisePropertyDataTypeId();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyDataTypeId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_EnterprisePropertyCategoryId();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyCategoryId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public bool get_SPSearchable();
    [CompilerGeneratedAttribute]
public void set_SPSearchable(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmniaSearchable();
    [CompilerGeneratedAttribute]
public void set_OmniaSearchable(bool value);
    [CompilerGeneratedAttribute]
public bool get_BuiltIn();
    [CompilerGeneratedAttribute]
public void set_BuiltIn(bool value);
    [CompilerGeneratedAttribute]
public string get_ManagedPropertySettings();
    [CompilerGeneratedAttribute]
public void set_ManagedPropertySettings(string value);
    [CompilerGeneratedAttribute]
public EnterprisePropertyDataType get_EnterprisePropertyDataType();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyDataType(EnterprisePropertyDataType value);
    [CompilerGeneratedAttribute]
public virtual EnterprisePropertyCategory get_EnterprisePropertyCategory();
    [CompilerGeneratedAttribute]
public virtual void set_EnterprisePropertyCategory(EnterprisePropertyCategory value);
    [CompilerGeneratedAttribute]
public string get_MSSearchPropertySettings();
    [CompilerGeneratedAttribute]
public void set_MSSearchPropertySettings(string value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.GetGroupUsersProcEntity : object {
    [CompilerGeneratedAttribute]
private Guid <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    public Guid GroupId { get; public set; }
    public string Identity { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityChangeLogItemEntity : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChangeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityChangeType <TypeOfChange>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PropertyDefinitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JsonLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFullRun>k__BackingField;
    [KeyAttribute]
public int Id { get; public set; }
    public Guid ChangeToken { get; public set; }
    public IdentityChangeType TypeOfChange { get; public set; }
    public Nullable`1<Guid> PropertyDefinitionId { get; public set; }
    [ColumnAttribute]
public string JsonValue { get; public set; }
    public int JsonLength { get; public set; }
    public Nullable`1<DateTimeOffset> CreatedAt { get; public set; }
    public Nullable`1<Guid> SessionId { get; public set; }
    public bool IsFullRun { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_ChangeToken();
    [CompilerGeneratedAttribute]
public void set_ChangeToken(Guid value);
    [CompilerGeneratedAttribute]
public IdentityChangeType get_TypeOfChange();
    [CompilerGeneratedAttribute]
public void set_TypeOfChange(IdentityChangeType value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_PropertyDefinitionId();
    [CompilerGeneratedAttribute]
public void set_PropertyDefinitionId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
    [CompilerGeneratedAttribute]
public int get_JsonLength();
    [CompilerGeneratedAttribute]
public void set_JsonLength(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public bool get_IsFullRun();
    [CompilerGeneratedAttribute]
public void set_IsFullRun(bool value);
}
internal enum Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityChangeType : Enum {
    public int value__;
    public static IdentityChangeType IdentityChange;
    public static IdentityChangeType PropertyConversion;
    public static IdentityChangeType PropertyUpdate;
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityDynamicGroupUserTypeMappingEntity : object {
    [CompilerGeneratedAttribute]
private Guid <DynamicGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityEntity <DynamicGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserTypeEntity <UserType>k__BackingField;
    public Guid DynamicGroupId { get; public set; }
    public Guid UserTypeId { get; public set; }
    public IdentityEntity DynamicGroup { get; public set; }
    public IdentityUserTypeEntity UserType { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_DynamicGroupId();
    [CompilerGeneratedAttribute]
public void set_DynamicGroupId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_UserTypeId();
    [CompilerGeneratedAttribute]
public void set_UserTypeId(Guid value);
    [CompilerGeneratedAttribute]
public IdentityEntity get_DynamicGroup();
    [CompilerGeneratedAttribute]
public void set_DynamicGroup(IdentityEntity value);
    [CompilerGeneratedAttribute]
public IdentityUserTypeEntity get_UserType();
    [CompilerGeneratedAttribute]
public void set_UserType(IdentityUserTypeEntity value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityEntity : AuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityTypes <IdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityPropertyValueEntity> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> <UserTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <UserTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserTypeEntity <UserType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <GroupTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PermissionEnabled>k__BackingField;
    [KeyAttribute]
public Guid Id { get; public set; }
    public IdentityTypes IdentityType { get; public set; }
    [ColumnAttribute]
public string Identity { get; public set; }
    [ColumnAttribute]
public string ProviderIdentity { get; public set; }
    public Guid ProviderId { get; public set; }
    [ColumnAttribute]
public string JsonValue { get; public set; }
    public ICollection`1<IdentityPropertyValueEntity> Properties { get; public set; }
    public ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> UserTypeMappings { get; public set; }
    public Nullable`1<Guid> UserTypeId { get; public set; }
    public IdentityUserTypeEntity UserType { get; public set; }
    public Nullable`1<Guid> GroupTypeId { get; public set; }
    [ColumnAttribute]
public string UniqueName { get; public set; }
    public bool PermissionEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public IdentityTypes get_IdentityType();
    [CompilerGeneratedAttribute]
public void set_IdentityType(IdentityTypes value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderIdentity();
    [CompilerGeneratedAttribute]
public void set_ProviderIdentity(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(Guid value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<IdentityPropertyValueEntity> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(ICollection`1<IdentityPropertyValueEntity> value);
    [CompilerGeneratedAttribute]
public ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> get_UserTypeMappings();
    [CompilerGeneratedAttribute]
public void set_UserTypeMappings(ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_UserTypeId();
    [CompilerGeneratedAttribute]
public void set_UserTypeId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public IdentityUserTypeEntity get_UserType();
    [CompilerGeneratedAttribute]
public void set_UserType(IdentityUserTypeEntity value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_GroupTypeId();
    [CompilerGeneratedAttribute]
public void set_GroupTypeId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
public void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public bool get_PermissionEnabled();
    [CompilerGeneratedAttribute]
public void set_PermissionEnabled(bool value);
}
[ExtensionAttribute]
internal static class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityEntityExtensions : object {
    [ExtensionAttribute]
internal static void SetProviderData(IdentityEntity identity, IdentityProviderData data);
    [ExtensionAttribute]
internal static IdentityProviderData GetProviderData(IdentityEntity identity);
    [ExtensionAttribute]
internal static IResolvedIdentity AsResolvedIdentity(IdentityEntity identity);
    [ExtensionAttribute]
internal static ResolvedUserIdentity AsResolvedUserIdentity(IdentityEntity identity);
    [ExtensionAttribute]
internal static ResolvedGroupIdentity AsResolvedGroupIdentity(IdentityEntity identity);
    [ExtensionAttribute]
internal static ResolvedExtensionIdentity AsResolvedExtensionIdentity(IdentityEntity identity);
    [ExtensionAttribute]
internal static ResolvedRoleIdentity AsResolvedRoleIdentity(IdentityEntity identity);
    [ExtensionAttribute]
internal static ResolvedDynamicGroupIdentity AsResolvedDynamicGroupIdentity(IdentityEntity identity);
    [ExtensionAttribute]
private static List`1<PropertyValueBinding> ExtractPropertiesAsPropertyValues(IdentityEntity matchingEntity);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityPropertyEntity : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PropertyBindingId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityTypes <IdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsQueryable>k__BackingField;
    public Guid Id { get; public set; }
    public Guid PropertyBindingId { get; public set; }
    public IdentityTypes IdentityType { get; public set; }
    public Guid OmniaServiceId { get; public set; }
    public Nullable`1<bool> IsQueryable { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PropertyBindingId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PropertyBindingId(Guid value);
    [CompilerGeneratedAttribute]
public IdentityTypes get_IdentityType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IdentityType(IdentityTypes value);
    [CompilerGeneratedAttribute]
public Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OmniaServiceId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsQueryable();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsQueryable(Nullable`1<bool> value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityPropertyQueryValueEntity : object {
    [CompilerGeneratedAttribute]
private Guid <IdentityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PropertyBindingId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityPropertyValueEntity <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DateValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <GuidValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IntValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <DecimalValue>k__BackingField;
    public Guid IdentityId { get; public set; }
    public Guid PropertyBindingId { get; public set; }
    public IdentityPropertyValueEntity PropertyValue { get; public set; }
    public string Region { get; public set; }
    public string StringValue { get; public set; }
    public Nullable`1<DateTime> DateValue { get; public set; }
    public Nullable`1<bool> BoolValue { get; public set; }
    public Nullable`1<Guid> GuidValue { get; public set; }
    public Nullable`1<int> IntValue { get; public set; }
    public Nullable`1<decimal> DecimalValue { get; public set; }
    public IdentityPropertyQueryValueEntity(PropertyQueryValue propQueryValue);
    [CompilerGeneratedAttribute]
public Guid get_IdentityId();
    [CompilerGeneratedAttribute]
public void set_IdentityId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PropertyBindingId();
    [CompilerGeneratedAttribute]
public void set_PropertyBindingId(Guid value);
    [CompilerGeneratedAttribute]
public IdentityPropertyValueEntity get_PropertyValue();
    [CompilerGeneratedAttribute]
public void set_PropertyValue(IdentityPropertyValueEntity value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
public void set_StringValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DateValue();
    [CompilerGeneratedAttribute]
public void set_DateValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BoolValue();
    [CompilerGeneratedAttribute]
public void set_BoolValue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_GuidValue();
    [CompilerGeneratedAttribute]
public void set_GuidValue(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IntValue();
    [CompilerGeneratedAttribute]
public void set_IntValue(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_DecimalValue();
    [CompilerGeneratedAttribute]
public void set_DecimalValue(Nullable`1<decimal> value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityPropertyValueEntity : object {
    [CompilerGeneratedAttribute]
private Guid <IdentityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PropertyBindingId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityEntity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceValueMd5>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IdentityPropertyQueryValueEntity> <QueryValues>k__BackingField;
    public Guid IdentityId { get; public set; }
    public Guid PropertyBindingId { get; public set; }
    public IdentityEntity Identity { get; public set; }
    [ColumnAttribute]
public string JsonValue { get; public set; }
    [ColumnAttribute]
public string SourceValueMd5 { get; public set; }
    public List`1<IdentityPropertyQueryValueEntity> QueryValues { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_IdentityId();
    [CompilerGeneratedAttribute]
public void set_IdentityId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PropertyBindingId();
    [CompilerGeneratedAttribute]
public void set_PropertyBindingId(Guid value);
    [CompilerGeneratedAttribute]
public IdentityEntity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(IdentityEntity value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
    [CompilerGeneratedAttribute]
public string get_SourceValueMd5();
    [CompilerGeneratedAttribute]
public void set_SourceValueMd5(string value);
    [CompilerGeneratedAttribute]
public List`1<IdentityPropertyQueryValueEntity> get_QueryValues();
    [CompilerGeneratedAttribute]
public void set_QueryValues(List`1<IdentityPropertyQueryValueEntity> value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityQueryEntity : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityTypes <IdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeletedAt>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    public Guid Id { get; public set; }
    public IdentityTypes IdentityType { get; public set; }
    public Guid ProviderId { get; public set; }
    public Nullable`1<Guid> TypeId { get; public set; }
    public string DisplayName { get; public set; }
    public string Username { get; public set; }
    public string Email { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTimeOffset> DeletedAt { get; public set; }
    [NullableAttribute("2")]
public string Region { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public IdentityTypes get_IdentityType();
    [CompilerGeneratedAttribute]
public void set_IdentityType(IdentityTypes value);
    [CompilerGeneratedAttribute]
public Guid get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeletedAt();
    [CompilerGeneratedAttribute]
public void set_DeletedAt(Nullable`1<DateTimeOffset> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Region();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Region(string value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Entities.IdentityUserTypeEntity : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PriorityOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplaySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityEntity> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> <DynamicGroupMappings>k__BackingField;
    [KeyAttribute]
public Guid Id { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public int PriorityOrder { get; public set; }
    [ColumnAttribute]
public string Settings { get; public set; }
    [ColumnAttribute]
public string DisplaySettings { get; public set; }
    public ICollection`1<IdentityEntity> Users { get; public set; }
    public ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> DynamicGroupMappings { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public int get_PriorityOrder();
    [CompilerGeneratedAttribute]
public void set_PriorityOrder(int value);
    [CompilerGeneratedAttribute]
public string get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(string value);
    [CompilerGeneratedAttribute]
public string get_DisplaySettings();
    [CompilerGeneratedAttribute]
public void set_DisplaySettings(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<IdentityEntity> get_Users();
    [CompilerGeneratedAttribute]
public void set_Users(ICollection`1<IdentityEntity> value);
    [CompilerGeneratedAttribute]
public ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> get_DynamicGroupMappings();
    [CompilerGeneratedAttribute]
public void set_DynamicGroupMappings(ICollection`1<IdentityDynamicGroupUserTypeMappingEntity> value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.IdentityMigrationDbContext : DbContext {
    [CompilerGeneratedAttribute]
private DbSet`1<EnterprisePropertyDataType> <EnterprisePropertyDataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EnterprisePropertyDefinition> <EnterprisePropertyDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EnterprisePropertyCategory> <EnterprisePropertyCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityEntity> <Identities>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyEntity> <IdentityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyValueEntity> <IdentityPropertyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyQueryValueEntity> <IdentityPropertyQueryValues>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityUserTypeEntity> <IdentityUserTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityDynamicGroupUserTypeMappingEntity> <IdentityDynamicGroupUserTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityQueryEntity> <IdentityQueryEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityChangeLogItemEntity> <IdentityChangeLog>k__BackingField;
    public DbSet`1<EnterprisePropertyDataType> EnterprisePropertyDataTypes { get; public set; }
    public DbSet`1<EnterprisePropertyDefinition> EnterprisePropertyDefinitions { get; public set; }
    public DbSet`1<EnterprisePropertyCategory> EnterprisePropertyCategories { get; public set; }
    public DbSet`1<IdentityEntity> Identities { get; public set; }
    private DbSet`1<IdentityPropertyEntity> IdentityProperties { get; }
    private DbSet`1<IdentityPropertyValueEntity> IdentityPropertyValues { get; }
    public DbSet`1<IdentityPropertyQueryValueEntity> IdentityPropertyQueryValues { get; public set; }
    private DbSet`1<IdentityUserTypeEntity> IdentityUserTypes { get; }
    private DbSet`1<IdentityDynamicGroupUserTypeMappingEntity> IdentityDynamicGroupUserTypeMappings { get; }
    private DbSet`1<IdentityQueryEntity> IdentityQueryEntities { get; }
    public DbSet`1<IdentityChangeLogItemEntity> IdentityChangeLog { get; public set; }
    public IdentityMigrationDbContext(DbContextOptions`1<IdentityMigrationDbContext> options);
    [CompilerGeneratedAttribute]
public DbSet`1<EnterprisePropertyDataType> get_EnterprisePropertyDataTypes();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyDataTypes(DbSet`1<EnterprisePropertyDataType> value);
    [CompilerGeneratedAttribute]
public DbSet`1<EnterprisePropertyDefinition> get_EnterprisePropertyDefinitions();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyDefinitions(DbSet`1<EnterprisePropertyDefinition> value);
    [CompilerGeneratedAttribute]
public DbSet`1<EnterprisePropertyCategory> get_EnterprisePropertyCategories();
    [CompilerGeneratedAttribute]
public void set_EnterprisePropertyCategories(DbSet`1<EnterprisePropertyCategory> value);
    [CompilerGeneratedAttribute]
public DbSet`1<IdentityEntity> get_Identities();
    [CompilerGeneratedAttribute]
public void set_Identities(DbSet`1<IdentityEntity> value);
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyEntity> get_IdentityProperties();
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyValueEntity> get_IdentityPropertyValues();
    [CompilerGeneratedAttribute]
public DbSet`1<IdentityPropertyQueryValueEntity> get_IdentityPropertyQueryValues();
    [CompilerGeneratedAttribute]
public void set_IdentityPropertyQueryValues(DbSet`1<IdentityPropertyQueryValueEntity> value);
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityUserTypeEntity> get_IdentityUserTypes();
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityDynamicGroupUserTypeMappingEntity> get_IdentityDynamicGroupUserTypeMappings();
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityQueryEntity> get_IdentityQueryEntities();
    [CompilerGeneratedAttribute]
public DbSet`1<IdentityChangeLogItemEntity> get_IdentityChangeLog();
    [CompilerGeneratedAttribute]
public void set_IdentityChangeLog(DbSet`1<IdentityChangeLogItemEntity> value);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.ExtensionIdentityRepository : IdentityRepositoryBase {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> <OmniaDeployedExtensionSettings>k__BackingField;
    private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> OmniaDeployedExtensionSettings { get; }
    public ExtensionIdentityRepository(IdentityMigrationDbContext dbContext, IOptionsMonitor`1<OmniaDeployedExtensionsSettings> omniaDeployedExtensionSettings, IOmniaContext omniaContext);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> get_OmniaDeployedExtensionSettings();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.ExtensionIdentityRepository/<GetOrCreateFromExtensionIds>d__4")]
public sealed virtual Task`1<IDictionary`2<Guid, Identity>> GetOrCreateFromExtensionIds(List`1<Guid> identifiersToHandle);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.GroupIdentityRepository : IdentityRepositoryBase {
    public GroupIdentityRepository(IdentityMigrationDbContext dbContext, IOmniaContext omniaContext);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.GroupIdentityRepository/<GetOrCreateFromOldGroupIds>d__1")]
public sealed virtual Task`1<IDictionary`2<Guid, Identity>> GetOrCreateFromOldGroupIds(List`1<Guid> identifiersToHandle);
    private IdentityEntity AddGroupIdentity(Nullable`1<Guid> groupTypeId, string providerIdentity);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.IdentityRepositoryBase : object {
    [CompilerGeneratedAttribute]
private IdentityMigrationDbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityEntity> <Identities>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityQueryEntity> <QueryEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<IdentityPropertyEntity> <IdentityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityTypes <CurrentIdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    protected IdentityMigrationDbContext DbContext { get; }
    protected DbSet`1<IdentityEntity> Identities { get; }
    protected DbSet`1<IdentityQueryEntity> QueryEntities { get; }
    protected DbSet`1<IdentityPropertyEntity> IdentityProperties { get; }
    protected IdentityTypes CurrentIdentityType { get; }
    protected IOmniaContext OmniaContext { get; }
    public IdentityRepositoryBase(IdentityTypes identityType, IdentityMigrationDbContext dbContext, IOmniaContext omniaContext);
    [CompilerGeneratedAttribute]
protected IdentityMigrationDbContext get_DbContext();
    [CompilerGeneratedAttribute]
protected DbSet`1<IdentityEntity> get_Identities();
    [CompilerGeneratedAttribute]
protected DbSet`1<IdentityQueryEntity> get_QueryEntities();
    [CompilerGeneratedAttribute]
protected DbSet`1<IdentityPropertyEntity> get_IdentityProperties();
    [CompilerGeneratedAttribute]
protected IdentityTypes get_CurrentIdentityType();
    [CompilerGeneratedAttribute]
protected IOmniaContext get_OmniaContext();
    protected void SetAuditInfo(AuditingEntityBase entity, bool setCreatedInfo);
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.IExtensionIdentityRepository {
    public abstract virtual Task`1<IDictionary`2<Guid, Identity>> GetOrCreateFromExtensionIds(List`1<Guid> identifiersToHandle);
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.IGroupIdentityRepository {
    public abstract virtual Task`1<IDictionary`2<Guid, Identity>> GetOrCreateFromOldGroupIds(List`1<Guid> identifiersToHandle);
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.IUserIdentityRepository {
    public abstract virtual Task`1<IDictionary`2<string, Identity>> GetOrCreateFromOldIdentifiersAsync(List`1<string> identifiersToHandle);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.UserIdentityRepository : IdentityRepositoryBase {
    public UserIdentityRepository(IdentityMigrationDbContext dbContext, IOmniaContext omniaContext);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.UserIdentityRepository/<GetOrCreateFromOldIdentifiersAsync>d__1")]
public sealed virtual Task`1<IDictionary`2<string, Identity>> GetOrCreateFromOldIdentifiersAsync(List`1<string> identifiersToHandle);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.UserIdentityRepository/<TryResolveWithIdentityQueryAsync>d__2")]
private ValueTask`1<Dictionary`2<string, Identity>> TryResolveWithIdentityQueryAsync(List`1<string> identifiersToHandle);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Databases.Repositories.UserIdentityRepository/<TryResolveWithIdentityAsync>d__3")]
private ValueTask`1<Dictionary`2<string, Identity>> TryResolveWithIdentityAsync(List`1<string> identifiersToHandle);
    private IdentityEntity CreateSoftDeletedEntityForMigration(string idString);
    private IdentityEntity AddUserIdentity(string providerIdentity, IdentityUserTypeEntity existingUserType);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.AuditingEntityHandler`1 : IdentityMigrationHandlerBase`1<TEntity> {
    public AuditingEntityHandler`1(string tableName, IIdentityMigrationHelper identityMigrationHelper);
    public virtual ValueTask`1<EfMigratingIdentityData> ExtractIdentityDataAsync(TEntity entity, IIdentityMigrationScopeHelper helper);
    public virtual ValueTask`1<bool> UpdateEfEntityAsync(TEntity entity, IIdentityMigrationScopeHelper helper);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.AuditingEntityHandler`2 : AuditingEntityHandler`1<TEntity> {
    public AuditingEntityHandler`2(string tableName, IIdentityMigrationHelper identityMigrationHelper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.AuditingEntityHandler`2/<ExecuteAsync>d__1")]
protected virtual ValueTask ExecuteAsync(int totalRows, IIdentityMigrationScopeHelper helper);
    public abstract virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
    public abstract virtual List`1<OrderByDbColumn> GetSQLCommandOrderByColumns(IIdentityMigrationScopeHelper helper);
    public virtual ValueTask`1<List`1<IdentityColumnInfo>> ExtractLoginNamesAsync(IdentityMigrationData migrationDataItem, IIdentityMigrationScopeHelper helper);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.AuditingMigrationData : IdentityMigrationData {
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedBy>k__BackingField;
    public string CreatedBy { get; public set; }
    public string ModifiedBy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedBy();
    [CompilerGeneratedAttribute]
public void set_ModifiedBy(string value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.ClusteredIndexAuditingEntityHandler`1 : ClusteredIndexAuditingEntityHandler`2<TEntity, ClusteredIndexAuditingMigrationData> {
    public ClusteredIndexAuditingEntityHandler`1(string tableName, IIdentityMigrationHelper identityMigrationHelper);
    public virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.ClusteredIndexAuditingEntityHandler`2 : AuditingEntityHandler`2<TEntity, TMigrationData> {
    public ClusteredIndexAuditingEntityHandler`2(string tableName, IIdentityMigrationHelper identityMigrationHelper);
    public virtual List`1<OrderByDbColumn> GetSQLCommandOrderByColumns(IIdentityMigrationScopeHelper helper);
    public sealed virtual string GetEntityKey(TEntity entity, IIdentityMigrationScopeHelper helper);
    public virtual IOrderedQueryable`1<TEntity> ApplyOrderedQueryableData(IQueryable`1<TEntity> queryable, IIdentityMigrationScopeHelper helper);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.ClusteredIndexAuditingMigrationData : AuditingMigrationData {
    [CompilerGeneratedAttribute]
private long <ClusteredId>k__BackingField;
    public long ClusteredId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ClusteredId();
    [CompilerGeneratedAttribute]
public void set_ClusteredId(long value);
    public virtual string GetKey();
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.EfMigrationThreadHandler`1 : IdentityMigrationThreadHandler {
    [CompilerGeneratedAttribute]
private IEntityFrameworkHandler`1<TEntity> <Handler>k__BackingField;
    protected int MinRowsPerThread { get; }
    protected IEntityFrameworkHandler`1<TEntity> Handler { get; }
    public EfMigrationThreadHandler`1(ITableScopedIdentityMigrationHelper helper, IEntityFrameworkHandler`1<TEntity> handler, int batchRowsCount, int totalRows);
    protected virtual int get_MinRowsPerThread();
    [CompilerGeneratedAttribute]
protected IEntityFrameworkHandler`1<TEntity> get_Handler();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.EfMigrationThreadHandler`1/<ExecuteMigrationBatchAsync>d__6")]
protected virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    private IOrderedQueryable`1<TEntity> GetOrderedQueryableAsTracking(IIdentityMigrationScopeHelper helper);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.GuidIdPrimaryKeyAuditingEntityHandler`1 : GuidIdPrimaryKeyAuditingEntityHandler`2<TEntity, GuidPrimaryKeyAuditingMigrationData> {
    public GuidIdPrimaryKeyAuditingEntityHandler`1(string tableName, IIdentityMigrationHelper userMigrationHelper);
    public virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.GuidIdPrimaryKeyAuditingEntityHandler`2 : AuditingEntityHandler`2<TEntity, TMigrationData> {
    public GuidIdPrimaryKeyAuditingEntityHandler`2(string tableName, IIdentityMigrationHelper migrationHelper);
    public virtual List`1<OrderByDbColumn> GetSQLCommandOrderByColumns(IIdentityMigrationScopeHelper helper);
    public virtual string GetEntityKey(TEntity entity, IIdentityMigrationScopeHelper helper);
    public virtual IOrderedQueryable`1<TEntity> ApplyOrderedQueryableData(IQueryable`1<TEntity> queryable, IIdentityMigrationScopeHelper helper);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.GuidPrimaryKeyAuditingMigrationData : AuditingMigrationData {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    public virtual string GetKey();
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationData : object {
    [CompilerGeneratedAttribute]
private int <RowNumber>k__BackingField;
    public int RowNumber { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowNumber();
    [CompilerGeneratedAttribute]
public void set_RowNumber(int value);
    public abstract virtual string GetKey();
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationException : Exception {
    public IdentityMigrationException(string message);
    public IdentityMigrationException(string message, Exception innerException);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1 : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITableScopedIdentityMigrationHelper <Helper>k__BackingField;
    protected static int EfBatchUpdateRowsCountDefault;
    [CompilerGeneratedAttribute]
private int <EfBatchUpdateRowsCount>k__BackingField;
    public string TableName { get; public set; }
    protected ITableScopedIdentityMigrationHelper Helper { get; }
    protected int EfBatchUpdateRowsCount { get; protected set; }
    public IdentityMigrationHandlerBase`1(string tableName, IIdentityMigrationHelper migrationHelper);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
protected ITableScopedIdentityMigrationHelper get_Helper();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<MigrateAsync>d__10")]
public sealed virtual ValueTask MigrateAsync();
    protected abstract virtual ValueTask ExecuteAsync(int totalRows, IIdentityMigrationScopeHelper helper);
    public virtual string GetHandledEntitiesWhereString(IIdentityMigrationScopeHelper helper);
    [CompilerGeneratedAttribute]
protected virtual int get_EfBatchUpdateRowsCount();
    [CompilerGeneratedAttribute]
protected virtual void set_EfBatchUpdateRowsCount(int value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<MigrateWithEfAsync>d__18")]
protected ValueTask MigrateWithEfAsync(int totalRows, IEntityFrameworkHandler`1<TEntity> handler, IIdentityMigrationScopeHelper helper);
    public virtual IQueryable`1<TEntity> GetHandledEntitiesQueryable(IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<MigrateWithSQLCommandAsync>d__20`1")]
protected ValueTask MigrateWithSQLCommandAsync(int totalRows, ISQLCommandHandler`2<TEntity, TMigrationData> handler, IIdentityMigrationScopeHelper helper);
    protected ValueTuple`2<List`1<string>, List`1<SQLCommandIdentityRowData>> MergeLoginNamesAndRows(List`1<SQLCommandExtractIdentityBatchData> extractIdentityBatchData);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<GetAllEnterprisePropertiesAsync>d__22")]
protected ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllEnterprisePropertiesAsync(IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<ExtractIdentityDataFromEnterprisePropertyValuesAsync>d__23")]
protected ValueTask ExtractIdentityDataFromEnterprisePropertyValuesAsync(EfMigratingIdentityData identityData, EnterprisePropertyDictionary enterprisePropertyValues, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<MigrateLoginNamesForEnterprisePropertyValuesAsync>d__24")]
protected ValueTask`1<bool> MigrateLoginNamesForEnterprisePropertyValuesAsync(EnterprisePropertyDictionary enterprisePropertyValues, IIdentityMigrationScopeHelper helper);
    protected void ReportStep(string message, IIdentityActionDurationReporter durationReporter);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<ExecutePreMigrationAsync>d__26")]
protected virtual ValueTask ExecutePreMigrationAsync(IIdentityMigrationScopeHelper helper);
    protected virtual string GetBeforeUpdateCommandString(IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<ExecutePostMigrationAsync>d__28")]
protected virtual ValueTask ExecutePostMigrationAsync(IIdentityMigrationScopeHelper helper);
    protected virtual string GetAfterUpdateCommandString(IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<AddAutoIncrementColumnAsync>d__30")]
protected ValueTask AddAutoIncrementColumnAsync(string columnName, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<DropColumnAsync>d__31")]
protected ValueTask DropColumnAsync(string columnName, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<CreateNonClusteredIndexAsync>d__32")]
protected ValueTask CreateNonClusteredIndexAsync(string indexName, List`1<OrderByDbColumn> indexedColumns, List`1<string> includeColumns, IIdentityMigrationScopeHelper helper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationHandlerBase`1/<DropIndexAsync>d__33")]
protected ValueTask DropIndexAsync(string indexName, IIdentityMigrationScopeHelper helper);
}
internal abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationThreadHandler : object {
    private ConcurrentDictionary`2<string, int> _completedRowsData;
    [CompilerGeneratedAttribute]
private ITableScopedIdentityMigrationHelper <Helper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchRowsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRows>k__BackingField;
    protected ITableScopedIdentityMigrationHelper Helper { get; }
    protected string TableName { get; }
    protected string ActionName { get; }
    protected string Unit { get; }
    protected int MinRowsPerThread { get; }
    protected int MaxThreadCount { get; }
    protected int BatchRowsCount { get; private set; }
    protected int TotalRows { get; private set; }
    public IdentityMigrationThreadHandler(ITableScopedIdentityMigrationHelper helper, int batchRowsCount, int totalRows, Nullable`1<int> maxThreadCount);
    [CompilerGeneratedAttribute]
protected ITableScopedIdentityMigrationHelper get_Helper();
    protected string get_TableName();
    [CompilerGeneratedAttribute]
protected virtual string get_ActionName();
    protected virtual string get_Unit();
    protected abstract virtual int get_MinRowsPerThread();
    [CompilerGeneratedAttribute]
protected int get_MaxThreadCount();
    [CompilerGeneratedAttribute]
protected int get_BatchRowsCount();
    [CompilerGeneratedAttribute]
private void set_BatchRowsCount(int value);
    [CompilerGeneratedAttribute]
protected int get_TotalRows();
    [CompilerGeneratedAttribute]
private void set_TotalRows(int value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationThreadHandler/<ExecuteWithMultiThreadsAsync>d__25")]
public sealed virtual ValueTask`1<List`1<IdentityMigrationThreadData>> ExecuteWithMultiThreadsAsync(IIdentityMigrationScopeHelper scopeHelper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationThreadHandler/<ExecuteMigrationThreadAsync>d__26")]
protected virtual Task`1<bool> ExecuteMigrationThreadAsync(IdentityMigrationThreadData threadData, IIdentityMigrationScopeHelper helper);
    protected abstract virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    protected virtual void AddCompletedRows(int thread, int completedRows);
    protected virtual double GetCompletedPercentage();
    protected virtual double GetCompletedPercentage(int completedRows, int totalRows);
    protected virtual int GetCompletedRows();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.IdentityMigrationThreadHandler/<ExecuteMigrationBatchesAsync>d__32")]
protected virtual ValueTask ExecuteMigrationBatchesAsync(IdentityMigrationThreadData threadData, IIdentityMigrationScopeHelper scopeHelper);
    protected virtual List`1<IdentityMigrationThreadData> SetupThreadData(IIdentityMigrationScopeHelper helper);
    protected virtual IdentityMigrationThreadData CreateThreadData(IIdentityMigrationScopeHelper helper, int threadIndex, int fromRow, int toRow);
    protected virtual IdentityMigrationThreadBatchData CreateThreadBatchData(int skip, int batchRowsCount);
    protected virtual ValueTuple`2<int, int> SplitRowsIntoThreads(int totalRows, int maxThreadsCount);
    protected virtual void SetupThreadBatchData(IIdentityMigrationScopeHelper helper, IdentityMigrationThreadData threadData);
    protected virtual void ReportException(Exception ex, IIdentityMigrationScopeHelper scopeHelper);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Handlers.IEntityFrameworkHandler`1 {
    public string TableName { get; public set; }
    public abstract virtual string get_TableName();
    public abstract virtual void set_TableName(string value);
    public abstract virtual IQueryable`1<TEntity> GetHandledEntitiesQueryable(IIdentityMigrationScopeHelper helper);
    public abstract virtual IOrderedQueryable`1<TEntity> ApplyOrderedQueryableData(IQueryable`1<TEntity> queryable, IIdentityMigrationScopeHelper helper);
    public abstract virtual ValueTask`1<EfMigratingIdentityData> ExtractIdentityDataAsync(TEntity entity, IIdentityMigrationScopeHelper helper);
    public abstract virtual ValueTask`1<bool> UpdateEfEntityAsync(TEntity entity, IIdentityMigrationScopeHelper helper);
    public abstract virtual string GetEntityKey(TEntity entity, IIdentityMigrationScopeHelper helper);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Handlers.IIdentityMigrationHandler {
    public abstract virtual ValueTask MigrateAsync();
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Handlers.IIdentityMigrationThreadHandler {
    public abstract virtual ValueTask`1<List`1<IdentityMigrationThreadData>> ExecuteWithMultiThreadsAsync(IIdentityMigrationScopeHelper scopeHelper);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IntIdPrimaryKeyAuditingEntityHandler`1 : IntIdPrimaryKeyAuditingEntityHandler`2<TEntity, IntPrimaryKeyAuditingMigrationData> {
    public IntIdPrimaryKeyAuditingEntityHandler`1(string tableName, IIdentityMigrationHelper migrationHelper);
    public virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
}
public abstract class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IntIdPrimaryKeyAuditingEntityHandler`2 : AuditingEntityHandler`2<TEntity, TMigrationData> {
    public IntIdPrimaryKeyAuditingEntityHandler`2(string tableName, IIdentityMigrationHelper migrationHelper);
    public virtual List`1<OrderByDbColumn> GetSQLCommandOrderByColumns(IIdentityMigrationScopeHelper helper);
    public sealed virtual string GetEntityKey(TEntity entity, IIdentityMigrationScopeHelper helper);
    public sealed virtual IOrderedQueryable`1<TEntity> ApplyOrderedQueryableData(IQueryable`1<TEntity> queryable, IIdentityMigrationScopeHelper helper);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Handlers.IntPrimaryKeyAuditingMigrationData : AuditingMigrationData {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public virtual string GetKey();
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Handlers.ISQLCommandHandler`2 {
    public string TableName { get; public set; }
    public abstract virtual string get_TableName();
    public abstract virtual void set_TableName(string value);
    public abstract virtual string GetHandledEntitiesWhereString(IIdentityMigrationScopeHelper helper);
    public abstract virtual List`1<string> GetSelectUserMigrationDataColumns(IIdentityMigrationScopeHelper helper);
    public abstract virtual ValueTask`1<List`1<IdentityColumnInfo>> ExtractLoginNamesAsync(IdentityMigrationData migrationDataItem, IIdentityMigrationScopeHelper helper);
    public abstract virtual List`1<OrderByDbColumn> GetSQLCommandOrderByColumns(IIdentityMigrationScopeHelper helper);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandEnsureIdentityThreadHandler`2 : IdentityMigrationThreadHandler {
    private static int BatchQueryCount;
    [CompilerGeneratedAttribute]
private ISQLCommandHandler`2<TEntity, TMigrationData> <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LoginNames>k__BackingField;
    protected string ActionName { get; }
    protected string Unit { get; }
    protected int MinRowsPerThread { get; }
    protected ISQLCommandHandler`2<TEntity, TMigrationData> Handler { get; }
    protected List`1<string> LoginNames { get; }
    public SQLCommandEnsureIdentityThreadHandler`2(List`1<string> loginNames, ITableScopedIdentityMigrationHelper helper, ISQLCommandHandler`2<TEntity, TMigrationData> handler);
    protected virtual string get_ActionName();
    protected virtual string get_Unit();
    protected virtual int get_MinRowsPerThread();
    [CompilerGeneratedAttribute]
protected ISQLCommandHandler`2<TEntity, TMigrationData> get_Handler();
    [CompilerGeneratedAttribute]
protected List`1<string> get_LoginNames();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandEnsureIdentityThreadHandler`2/<ExecuteMigrationBatchAsync>d__14")]
protected virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    protected virtual IdentityMigrationThreadBatchData CreateThreadBatchData(int skip, int batchRowsCount);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandExtractIdentityThreadHandler`2 : IdentityMigrationThreadHandler {
    private static int BatchQueryCount;
    [CompilerGeneratedAttribute]
private ISQLCommandHandler`2<TEntity, TMigrationData> <Handler>k__BackingField;
    protected string ActionName { get; }
    protected int MinRowsPerThread { get; }
    protected ISQLCommandHandler`2<TEntity, TMigrationData> Handler { get; }
    public SQLCommandExtractIdentityThreadHandler`2(ITableScopedIdentityMigrationHelper helper, ISQLCommandHandler`2<TEntity, TMigrationData> handler, int totalRows);
    protected virtual string get_ActionName();
    protected virtual int get_MinRowsPerThread();
    [CompilerGeneratedAttribute]
protected ISQLCommandHandler`2<TEntity, TMigrationData> get_Handler();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandExtractIdentityThreadHandler`2/<ExecuteMigrationBatchAsync>d__9")]
protected virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    protected virtual IdentityMigrationThreadBatchData CreateThreadBatchData(int skip, int batchRowsCount);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandExtractIdentityThreadHandler`2/<ExtractOldIdentitiesAsync>d__11")]
private ValueTask ExtractOldIdentitiesAsync(SQLCommandExtractIdentityBatchData data, IIdentityMigrationScopeHelper helper);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateSpecialIdentityThreadHandler`2 : IdentityMigrationThreadHandler {
    private static string UpdateTableAlias;
    private static int BatchUpdateCount;
    [CompilerGeneratedAttribute]
private ISQLCommandHandler`2<TEntity, TMigrationData> <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SQLCommandIdentityRowData> <MigratingRows>k__BackingField;
    protected string ActionName { get; }
    protected int MinRowsPerThread { get; }
    protected ISQLCommandHandler`2<TEntity, TMigrationData> Handler { get; }
    protected List`1<SQLCommandIdentityRowData> MigratingRows { get; }
    public SQLCommandUpdateSpecialIdentityThreadHandler`2(List`1<SQLCommandIdentityRowData> rows, ITableScopedIdentityMigrationHelper helper, ISQLCommandHandler`2<TEntity, TMigrationData> handler, int totalRows);
    protected SQLCommandUpdateSpecialIdentityThreadHandler`2(List`1<SQLCommandIdentityRowData> rows, ITableScopedIdentityMigrationHelper helper, ISQLCommandHandler`2<TEntity, TMigrationData> handler, int totalRows, Nullable`1<int> maxThreadCount);
    protected virtual string get_ActionName();
    protected virtual int get_MinRowsPerThread();
    [CompilerGeneratedAttribute]
protected ISQLCommandHandler`2<TEntity, TMigrationData> get_Handler();
    [CompilerGeneratedAttribute]
protected List`1<SQLCommandIdentityRowData> get_MigratingRows();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateSpecialIdentityThreadHandler`2/<ExecuteMigrationBatchAsync>d__14")]
protected virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    private Dictionary`2<string, IdentityColumnInfoResult> ExtractSpecialIdentities(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper helper);
    protected bool EnsureIdentityColumnInfoResultData(Dictionary`2<string, IdentityColumnInfoResult> identityColumnResults, IdentityColumnInfo column, Identity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateSpecialIdentityThreadHandler`2/<ExecuteUpdateCommandAsync>d__17")]
protected ValueTask ExecuteUpdateCommandAsync(IIdentityMigrationScopeHelper helper, int skip, int rowCount, string setString, string whereString);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateThreadHandler`2 : SQLCommandUpdateSpecialIdentityThreadHandler`2<TEntity, TMigrationData> {
    private static int BatchIdentitiesCount;
    protected string ActionName { get; }
    public SQLCommandUpdateThreadHandler`2(List`1<SQLCommandIdentityRowData> rows, ITableScopedIdentityMigrationHelper helper, ISQLCommandHandler`2<TEntity, TMigrationData> handler, int totalRows);
    protected virtual string get_ActionName();
    protected virtual List`1<IdentityMigrationThreadData> SetupThreadData(IIdentityMigrationScopeHelper scopeHelper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateThreadHandler`2/<ExecuteMigrationBatchesAsync>d__5")]
protected virtual ValueTask ExecuteMigrationBatchesAsync(IdentityMigrationThreadData threadData, IIdentityMigrationScopeHelper scopeHelper);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Handlers.SQLCommandUpdateThreadHandler`2/<ExecuteMigrationBatchAsync>d__6")]
protected virtual ValueTask ExecuteMigrationBatchAsync(IdentityMigrationThreadBatchData data, IIdentityMigrationScopeHelper scopeHelper);
    private List`1<string> GetUpdateCommandSetStringValues(SQLCommandUpdateBatchData batchData);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(IdentityMigrationThreadData threadData, IIdentityMigrationScopeHelper scopeHelper);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityActionDurationReporter : object {
    protected static int LongDurationThresholdSeconds;
    [CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <ReportProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LogStep> <LogStepsTracking>k__BackingField;
    private Stopwatch Stopwatch { get; }
    private Action`1<string> ReportProgress { get; }
    private string Message { get; }
    private List`1<LogStep> LogStepsTracking { get; }
    public IdentityActionDurationReporter(Action`1<string> reportProgress, string message);
    [CompilerGeneratedAttribute]
private Stopwatch get_Stopwatch();
    [CompilerGeneratedAttribute]
private Action`1<string> get_ReportProgress();
    [CompilerGeneratedAttribute]
private string get_Message();
    [CompilerGeneratedAttribute]
private List`1<LogStep> get_LogStepsTracking();
    public sealed virtual void Done(string text, bool displayInMinutes);
    public sealed virtual void ReportStep(string text, int reportThresholdSeconds);
    private void ReportWithDuration(string message, double duration, bool displayInMinutes);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationHelper : object {
    [CompilerGeneratedAttribute]
private IdentityMigrationSession <MigrationSession>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SqlResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlCommandHelper <SqlCommandHelper>k__BackingField;
    public IdentityMigrationSession MigrationSession { get; }
    public IMapper Mapper { get; }
    public Type DbContextType { get; }
    public Guid SqlResourceId { get; }
    public int MaxThreadCount { get; }
    public string SqlMaxDoPString { get; }
    public string TableName { get; }
    public ISqlCommandHelper SqlCommandHelper { get; }
    public IdentityMigrationHelper(IdentityMigrationSession migrationSession, Type dbContextType, Guid sqlResourceId);
    private IdentityMigrationHelper(IdentityMigrationSession migrationSession, Type dbContextType, Guid sqlResourceId, string tableName);
    [CompilerGeneratedAttribute]
public IdentityMigrationSession get_MigrationSession();
    public sealed virtual IMapper get_Mapper();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DbContextType();
    [CompilerGeneratedAttribute]
public Guid get_SqlResourceId();
    public sealed virtual int get_MaxThreadCount();
    public sealed virtual string get_SqlMaxDoPString();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlCommandHelper get_SqlCommandHelper();
    public sealed virtual MigratingTableRule GetRelatedTableRule(string tableName);
    public sealed virtual ITableScopedIdentityMigrationHelper ApplyTableScoped(string tableName);
    public sealed virtual IIdentityMigrationScopeHelper CreateScopeHelper();
    public sealed virtual IIdentityMigrationScopeHelper CreateScopeHelper(IdentityMigrationThreadData threadData);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationHelper/<RetryDbOperationAsync>d__27")]
public sealed virtual ValueTask`1<IIdentityMigrationScopeHelper> RetryDbOperationAsync(IIdentityMigrationScopeHelper scopeHelper, Func`2<IIdentityMigrationScopeHelper, ValueTask> executeFunc, int retryMaxCount);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationScope : object {
    private IOmniaEnterprisePropertyService _enterprisePropertyService;
    private IOmniaIdentityService _identityService;
    private ConcurrentDictionary`2<Type, bool> _isStrategyCreated;
    private ConcurrentDictionary`2<Type, DbContextWithAuditing> _dbContexts;
    private ConcurrentDictionary`2<Guid, SqlConnection> _sqlConnections;
    [CompilerGeneratedAttribute]
private IServiceScope <Scope>k__BackingField;
    public IServiceScope Scope { get; private set; }
    public IOmniaEnterprisePropertyService EnterprisePropertyService { get; }
    public IOmniaIdentityService IdentityService { get; }
    public IdentityMigrationScope(IServiceScope scope);
    [CompilerGeneratedAttribute]
public IServiceScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(IServiceScope value);
    public IOmniaEnterprisePropertyService get_EnterprisePropertyService();
    public IOmniaIdentityService get_IdentityService();
    public DbContextWithAuditing GetDbContext(Type dbContextType);
    public IDbConnection GetDbConnection(Guid sqlResourceId);
    public bool IsStrategyCreated(Type dbContextType);
    public void SetStrategyCreated(Type dbContextType);
    public sealed virtual void Dispose();
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationScopeHelper : object {
    [CompilerGeneratedAttribute]
private IdentityMigrationSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityMigrationScope <MigrationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityMigrationHelper <Helper>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityMigrationThreadData <ThreadData>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityActionDurationReporter <CurrentDurationReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <ReportProgress>k__BackingField;
    private IdentityMigrationSession Session { get; }
    private IdentityMigrationScope MigrationScope { get; }
    private IdentityMigrationHelper Helper { get; }
    private IdentityMigrationThreadData ThreadData { get; }
    public IIdentityActionDurationReporter CurrentDurationReporter { get; public set; }
    public IOmniaEnterprisePropertyService EnterprisePropertyService { get; }
    public DbContextWithAuditing DbContext { get; }
    public IDbConnection DbConnection { get; }
    public Action`1<string> ReportProgress { get; private set; }
    public IdentityMigrationScopeHelper(IdentityMigrationHelper helper);
    public IdentityMigrationScopeHelper(IdentityMigrationHelper helper, IdentityMigrationThreadData threadData);
    private IdentityMigrationScopeHelper(IdentityMigrationHelper helper, IdentityMigrationScope scope, Action`1<string> reportProgress);
    [CompilerGeneratedAttribute]
private IdentityMigrationSession get_Session();
    [CompilerGeneratedAttribute]
private IdentityMigrationScope get_MigrationScope();
    [CompilerGeneratedAttribute]
private IdentityMigrationHelper get_Helper();
    [CompilerGeneratedAttribute]
private IdentityMigrationThreadData get_ThreadData();
    [CompilerGeneratedAttribute]
public sealed virtual IIdentityActionDurationReporter get_CurrentDurationReporter();
    [CompilerGeneratedAttribute]
public void set_CurrentDurationReporter(IIdentityActionDurationReporter value);
    public sealed virtual IIdentityMigrationScopeHelper RecreateScope();
    public sealed virtual IOmniaEnterprisePropertyService get_EnterprisePropertyService();
    public sealed virtual DbContextWithAuditing get_DbContext();
    public sealed virtual IDbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_ReportProgress();
    [CompilerGeneratedAttribute]
private void set_ReportProgress(Action`1<string> value);
    public sealed virtual IIdentityActionDurationReporter InitActionDurationReporter(string text, bool reportWhenDoneOnly);
    public sealed virtual IIdentityActionDurationReporter TrackActionWithDuration(string text, bool reportWhenDoneOnly);
    public sealed virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<string> loginNames);
    public sealed virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<Guid> azureAdIds);
    public sealed virtual Identity ResolveIdentity(string loginName);
    public sealed virtual Identity ResolveIdentity(Guid azureAdId);
    private static Action`1<string> GetReportProgress(IdentityMigrationHelper identityMigrationHelper, string prefix);
    private static string GetScopedPrefix(IdentityMigrationHelper identityMigrationHelper);
    private static string GetThreadPrefix(IdentityMigrationHelper identityMigrationHelper, IdentityMigrationThreadData threadData);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationSession : object {
    [CompilerGeneratedAttribute]
private IdentityMigrationService <MigrationService>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <ReportProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<int, IdentityMigrationScope> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DbContextMigrationItem> <DbContextMigrationItems>k__BackingField;
    public IdentityMigrationService MigrationService { get; }
    public Action`1<string> ReportProgress { get; }
    private ConcurrentDictionary`2<int, IdentityMigrationScope> Scopes { get; }
    private List`1<DbContextMigrationItem> DbContextMigrationItems { get; private set; }
    public IdentityMigrationSession(IdentityMigrationService migrationService, Action`1<string> reportProgress);
    [CompilerGeneratedAttribute]
public IdentityMigrationService get_MigrationService();
    [CompilerGeneratedAttribute]
public Action`1<string> get_ReportProgress();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<int, IdentityMigrationScope> get_Scopes();
    [CompilerGeneratedAttribute]
private List`1<DbContextMigrationItem> get_DbContextMigrationItems();
    [CompilerGeneratedAttribute]
private void set_DbContextMigrationItems(List`1<DbContextMigrationItem> value);
    public sealed virtual IIdentityMigrationSession ApplyToDbContext(Guid sqlResourceId, IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> migrationHandlerCreators);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationSession/<MigrateAsync>d__15")]
public sealed virtual ValueTask MigrateAsync();
    public sealed virtual void Dispose();
    public IdentityMigrationScope GetMigrationScope(Nullable`1<int> index);
    public IdentityMigrationScope RecreateMigrationScope(Nullable`1<int> index);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationSession/<ExecuteWithRetryStrategyAsync>d__19")]
private Task ExecuteWithRetryStrategyAsync(int index);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationSession/<ExecuteWithRetryStrategyAsync>d__20")]
private Task ExecuteWithRetryStrategyAsync(DbContextMigrationItem migrationItem, Func`1<Task> actionAsync, int threadIndex);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Helpers.IdentityMigrationSession/<ExecuteWithRetryStrategyAsync>d__21")]
private Task ExecuteWithRetryStrategyAsync(DbContextWithAuditing dbContext, Func`1<Task> actionAsync);
    private static void ConfigureTransactionTimeoutCore(TimeSpan timeout);
    [CompilerGeneratedAttribute]
internal static void <ConfigureTransactionTimeoutCore>g__SetTransactionManagerField|22_0(string fieldName, object value);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.IIdentityActionDurationReporter {
    public abstract virtual void Done(string text, bool displayInMinutes);
    public abstract virtual void ReportStep(string text, int reportThresholdSeconds);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.IIdentityMigrationHelper {
    public IMapper Mapper { get; }
    public Type DbContextType { get; }
    public int MaxThreadCount { get; }
    public string SqlMaxDoPString { get; }
    public abstract virtual IMapper get_Mapper();
    public abstract virtual Type get_DbContextType();
    public abstract virtual int get_MaxThreadCount();
    public abstract virtual string get_SqlMaxDoPString();
    public abstract virtual MigratingTableRule GetRelatedTableRule(string tableName);
    public abstract virtual ITableScopedIdentityMigrationHelper ApplyTableScoped(string tableName);
    public abstract virtual IIdentityMigrationScopeHelper CreateScopeHelper();
    public abstract virtual IIdentityMigrationScopeHelper CreateScopeHelper(IdentityMigrationThreadData threadData);
    public abstract virtual ValueTask`1<IIdentityMigrationScopeHelper> RetryDbOperationAsync(IIdentityMigrationScopeHelper scopeHelper, Func`2<IIdentityMigrationScopeHelper, ValueTask> executeFunc, int retryMaxCount);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.IIdentityMigrationResolver {
    public abstract virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<string> loginNames);
    public abstract virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<Guid> azureAdIds);
    public abstract virtual Identity ResolveIdentity(string loginName);
    public abstract virtual Identity ResolveIdentity(Guid azureAdId);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.IIdentityMigrationScopeHelper {
    public IOmniaEnterprisePropertyService EnterprisePropertyService { get; }
    public DbContextWithAuditing DbContext { get; }
    public IDbConnection DbConnection { get; }
    public Action`1<string> ReportProgress { get; }
    public IIdentityActionDurationReporter CurrentDurationReporter { get; }
    public abstract virtual IOmniaEnterprisePropertyService get_EnterprisePropertyService();
    public abstract virtual DbContextWithAuditing get_DbContext();
    public abstract virtual IDbConnection get_DbConnection();
    public abstract virtual Action`1<string> get_ReportProgress();
    public abstract virtual IIdentityActionDurationReporter get_CurrentDurationReporter();
    public abstract virtual IIdentityActionDurationReporter InitActionDurationReporter(string text, bool reportWhenDoneOnly);
    public abstract virtual IIdentityActionDurationReporter TrackActionWithDuration(string text, bool reportWhenDoneOnly);
    public abstract virtual IIdentityMigrationScopeHelper RecreateScope();
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.IIdentityMigrationSession {
    public abstract virtual IIdentityMigrationSession ApplyToDbContext(Guid sqlResourceId, IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> migrationHandlerCreators);
    public abstract virtual ValueTask MigrateAsync();
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.ISqlCommandHelper {
    public string TableName { get; }
    public abstract virtual string get_TableName();
    public abstract virtual string GetCreateNonClusteredPrimaryKeyCommand(IEnumerable`1<string> primaryKeyColumns);
    public abstract virtual string GetDropPrimaryKeyCommand();
    public abstract virtual string GetAddAutoIncrementColumnCommand(string columnName);
    public abstract virtual string GetDropColumnCommand(string columnName);
    public abstract virtual string GetCreateNonClusteredIndexCommand(string indexName, IEnumerable`1<OrderByDbColumn> indexedColumns, IEnumerable`1<string> includeColumns);
    public abstract virtual string GetDropIndexCommand(string indexName);
    public abstract virtual string GetOrderColumnsString(IEnumerable`1<OrderByDbColumn> columns);
    public abstract virtual string GetColumnsString(IEnumerable`1<string> columns);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Helpers.ITableScopedIdentityMigrationHelper {
    public string TableName { get; }
    public ISqlCommandHelper SqlCommandHelper { get; }
    public abstract virtual string get_TableName();
    public abstract virtual ISqlCommandHelper get_SqlCommandHelper();
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Helpers.SqlCommandHelper : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string TableName { get; }
    public SqlCommandHelper(string tableName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    public sealed virtual string GetDropPrimaryKeyCommand();
    public sealed virtual string GetCreateNonClusteredPrimaryKeyCommand(IEnumerable`1<string> primaryKeyColumns);
    public sealed virtual string GetAddAutoIncrementColumnCommand(string columnName);
    public sealed virtual string GetDropColumnCommand(string columnName);
    public sealed virtual string GetCreateNonClusteredIndexCommand(string indexName, IEnumerable`1<OrderByDbColumn> indexedColumns, IEnumerable`1<string> includeColumns);
    public sealed virtual string GetDropIndexCommand(string indexName);
    public sealed virtual string GetOrderColumnsString(IEnumerable`1<OrderByDbColumn> columns);
    public sealed virtual string GetColumnsString(IEnumerable`1<string> columns);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.IdentityMigrationService : object {
    private static int DefaultThreadCount;
    private static int DefaultSqlMaxDoP;
    [CompilerGeneratedAttribute]
private IInternalIdentityResolver <IdentityResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IMapper <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SqlMaxDoP>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MigratingTableRule> <TableRules>k__BackingField;
    internal IInternalIdentityResolver IdentityResolver { get; }
    internal IMapper Mapper { get; }
    internal IServiceScopeFactory ServiceScopeFactory { get; }
    internal int MaxThreadCount { get; }
    internal int SqlMaxDoP { get; }
    internal List`1<MigratingTableRule> TableRules { get; }
    public IdentityMigrationService(IInternalIdentityResolver identityResolver, IMapper mapper, IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
internal IInternalIdentityResolver get_IdentityResolver();
    [CompilerGeneratedAttribute]
internal IMapper get_Mapper();
    [CompilerGeneratedAttribute]
internal IServiceScopeFactory get_ServiceScopeFactory();
    [CompilerGeneratedAttribute]
internal int get_MaxThreadCount();
    [CompilerGeneratedAttribute]
internal int get_SqlMaxDoP();
    [CompilerGeneratedAttribute]
internal List`1<MigratingTableRule> get_TableRules();
    public sealed virtual IIdentityMigrationSession InitSession(Action`1<string> reportProgress);
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Identities.Migrations.IdentityMigrationSessionExtensions : object {
    [ExtensionAttribute]
public static IIdentityMigrationSession ApplyToVersionedDataDbContext(IIdentityMigrationSession session, Guid sqlResourceId);
    [ExtensionAttribute]
public static IIdentityMigrationSession ApplyToPostDbContext(IIdentityMigrationSession session, Guid sqlResourceId);
    [ExtensionAttribute]
public static IIdentityMigrationSession ApplyToFileStorageDbContext(IIdentityMigrationSession session, Guid sqlResourceId);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.IIdentityMigrationService {
    public abstract virtual IIdentityMigrationSession InitSession(Action`1<string> reportProgress);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.IUserImageSyncService {
    public abstract virtual Task DoImageConversionAdd(CancellationToken cancellationToken);
}
[JsonConverterAttribute("Omnia.Fx.NetCore.Identities.Migrations.JsonCompatibility.MigratableIdentityJsonConverter")]
public class Omnia.Fx.NetCore.Identities.Migrations.JsonCompatibility.MigratableIdentity : object {
    [CompilerGeneratedAttribute]
private Identity <MigratedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private OldIdentity <LegacyIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyUid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <LegacyAdId>k__BackingField;
    public bool Migrated { get; }
    public Identity MigratedValue { get; }
    public OldIdentity LegacyIdentity { get; }
    public string LegacyUid { get; }
    public Nullable`1<Guid> LegacyAdId { get; }
    public MigratableIdentity(Identity migratedValue);
    public MigratableIdentity(OldIdentity legacyIdentity);
    public MigratableIdentity(string legacyUid);
    public MigratableIdentity(Guid legacyAdId);
    public bool get_Migrated();
    [CompilerGeneratedAttribute]
public Identity get_MigratedValue();
    [CompilerGeneratedAttribute]
public OldIdentity get_LegacyIdentity();
    [CompilerGeneratedAttribute]
public string get_LegacyUid();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_LegacyAdId();
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Identities.Migrations.JsonCompatibility.MigratableIdentityExtensions : object {
    [ExtensionAttribute]
public static bool TryGetLegacyAdId(MigratableIdentity item, Guid& value);
    [ExtensionAttribute]
public static bool TryGetLegacyUid(MigratableIdentity item, String& value);
    [ExtensionAttribute]
public static IEnumerable`1<Guid> GetLegacyAdIds(IEnumerable`1<MigratableIdentity> items);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetLegacyUids(IEnumerable`1<MigratableIdentity> items);
    [ExtensionAttribute]
public static Identity ToIdentity(MigratableIdentity item, IIdentityMigrationResolver helper, string exceptionMsg);
    [ExtensionAttribute]
public static IEnumerable`1<Identity> ToIdentities(IEnumerable`1<MigratableIdentity> items, IIdentityMigrationResolver helper, string exceptionMsg);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.JsonCompatibility.MigratableIdentityJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Models.DbContextMigrationItem : object {
    [CompilerGeneratedAttribute]
private Type <DbContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SqlResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> <MigrationHandlerCreators>k__BackingField;
    public Type DbContextType { get; public set; }
    public Guid SqlResourceId { get; public set; }
    public IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> MigrationHandlerCreators { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_DbContextType();
    [CompilerGeneratedAttribute]
public void set_DbContextType(Type value);
    [CompilerGeneratedAttribute]
public Guid get_SqlResourceId();
    [CompilerGeneratedAttribute]
public void set_SqlResourceId(Guid value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> get_MigrationHandlerCreators();
    [CompilerGeneratedAttribute]
public void set_MigrationHandlerCreators(IEnumerable`1<Func`2<IIdentityMigrationHelper, IIdentityMigrationHandler>> value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.EfMigratingIdentityData : object {
    private List`1<string> _loginNames;
    private List`1<Guid> _azureAdIds;
    public IReadOnlyList`1<string> LoginNames { get; }
    public IReadOnlyList`1<Guid> AzureAdIds { get; }
    public IReadOnlyList`1<string> get_LoginNames();
    public IReadOnlyList`1<Guid> get_AzureAdIds();
    public void Add(string loginName);
    public void AddRange(IEnumerable`1<string> loginNames);
    public void Add(Guid azureAdId);
    public void AddRange(IEnumerable`1<Guid> azureAdIds);
    public void Add(MigratableIdentity identity);
    public void AddRange(IEnumerable`1<MigratableIdentity> identities);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.IdentityColumnInfo : object {
    [CompilerGeneratedAttribute]
private string <LoginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public string LoginName { get; public set; }
    public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginName();
    [CompilerGeneratedAttribute]
public void set_LoginName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.IdentityColumnInfoResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Identity> <IdentitiesByLoginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public Dictionary`2<string, Identity> IdentitiesByLoginName { get; public set; }
    public string ColumnName { get; public set; }
    public IdentityColumnInfoResult(string columnName);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Identity> get_IdentitiesByLoginName();
    [CompilerGeneratedAttribute]
public void set_IdentitiesByLoginName(Dictionary`2<string, Identity> value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.IdentityMigrationThreadBatchData : object {
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsCount>k__BackingField;
    public int Skip { get; protected set; }
    public int RowsCount { get; protected set; }
    public int FromRow { get; }
    public int ToRow { get; }
    public IdentityMigrationThreadBatchData(int skip, int rowsCount);
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
protected void set_Skip(int value);
    [CompilerGeneratedAttribute]
public int get_RowsCount();
    [CompilerGeneratedAttribute]
protected void set_RowsCount(int value);
    public int get_FromRow();
    public int get_ToRow();
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.IdentityMigrationThreadData : object {
    private List`1<IdentityMigrationThreadBatchData> _batches;
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRow>k__BackingField;
    public bool IsInit { get; }
    public string Unit { get; public set; }
    public int ThreadIndex { get; private set; }
    public int TotalRows { get; private set; }
    public int Skip { get; }
    public int FromRow { get; private set; }
    public int ToRow { get; private set; }
    public int ThreadRowsCount { get; }
    public IReadOnlyList`1<IdentityMigrationThreadBatchData> Batches { get; }
    public IdentityMigrationThreadData(int threadIndex, int totalRows, int fromRow, int toRow, string unit);
    public IdentityMigrationThreadData(int threadIndex, int totalRows, int fromRow, string unit);
    public void Init(int fromRow);
    public void SetToRow(int toRow);
    public bool get_IsInit();
    [CompilerGeneratedAttribute]
public string get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(string value);
    [CompilerGeneratedAttribute]
public int get_ThreadIndex();
    [CompilerGeneratedAttribute]
private void set_ThreadIndex(int value);
    [CompilerGeneratedAttribute]
public int get_TotalRows();
    [CompilerGeneratedAttribute]
private void set_TotalRows(int value);
    public int get_Skip();
    [CompilerGeneratedAttribute]
public int get_FromRow();
    [CompilerGeneratedAttribute]
private void set_FromRow(int value);
    [CompilerGeneratedAttribute]
public int get_ToRow();
    [CompilerGeneratedAttribute]
private void set_ToRow(int value);
    public int get_ThreadRowsCount();
    public IReadOnlyList`1<IdentityMigrationThreadBatchData> get_Batches();
    internal void AddToBatches(IdentityMigrationThreadBatchData batchData);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.MigratingTableRule : object {
    private static string TableRuleAllToken;
    private List`1<string> _migratingRowRules;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireMigration>k__BackingField;
    public string TableName { get; }
    public bool RequireMigration { get; }
    public MigratingTableRule(string tableRule);
    public static MigratingTableRule GetRelatedTableRule(string tableName, List`1<MigratingTableRule> rules);
    public static List`1<MigratingTableRule> GetTableRules(string tableRulesString);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public bool get_RequireMigration();
    public bool IsTableMatched(string tableName);
    public bool ShouldSkipBatch(int fromRow, int ToRow);
    public bool ShouldSkipRow(int rowNumber);
    private ValueTuple`2<bool, string> HandleTableRule(string rule);
    private ValueTuple`2<string, List`1<string>> HandleCleanTableRule(string cleanTableRule);
    private RowMatchedResult GetRowMatchedResult(int rowNumber, string rule);
    private string TrimOutBracket(string rule);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.OrderByDbColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByDirection <Direction>k__BackingField;
    public string Name { get; public set; }
    public OrderByDirection Direction { get; public set; }
    public OrderByDbColumn(string name, OrderByDirection direction);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public OrderByDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(OrderByDirection value);
}
public enum Omnia.Fx.NetCore.Identities.Migrations.Models.OrderByDirection : Enum {
    public int value__;
    public static OrderByDirection Ascending;
    public static OrderByDirection Descending;
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.SQLCommandExtractIdentityBatchData : IdentityMigrationThreadBatchData {
    [CompilerGeneratedAttribute]
private List`1<SQLCommandIdentityRowData> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LoginNames>k__BackingField;
    public List`1<SQLCommandIdentityRowData> Rows { get; public set; }
    public List`1<string> LoginNames { get; public set; }
    public SQLCommandExtractIdentityBatchData(int skip, int rowsCount);
    [CompilerGeneratedAttribute]
public List`1<SQLCommandIdentityRowData> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(List`1<SQLCommandIdentityRowData> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LoginNames();
    [CompilerGeneratedAttribute]
public void set_LoginNames(List`1<string> value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.SQLCommandIdentityRowData : object {
    [CompilerGeneratedAttribute]
private int <RowNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IdentityColumnInfo> <IdentityColumns>k__BackingField;
    public int RowNumber { get; public set; }
    public List`1<IdentityColumnInfo> IdentityColumns { get; }
    public SQLCommandIdentityRowData(int rowNumber);
    [CompilerGeneratedAttribute]
public int get_RowNumber();
    [CompilerGeneratedAttribute]
public void set_RowNumber(int value);
    [CompilerGeneratedAttribute]
public List`1<IdentityColumnInfo> get_IdentityColumns();
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.SQLCommandUpdateBatchData : IdentityMigrationThreadBatchData {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IdentityColumnInfoResult> <NormalIdentitiies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdentitiesCount>k__BackingField;
    public Dictionary`2<string, IdentityColumnInfoResult> NormalIdentitiies { get; public set; }
    public int IdentitiesCount { get; public set; }
    public SQLCommandUpdateBatchData(int skip);
    public void SetRowsCount(int rowsCount);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IdentityColumnInfoResult> get_NormalIdentitiies();
    [CompilerGeneratedAttribute]
public void set_NormalIdentitiies(Dictionary`2<string, IdentityColumnInfoResult> value);
    [CompilerGeneratedAttribute]
public int get_IdentitiesCount();
    [CompilerGeneratedAttribute]
public void set_IdentitiesCount(int value);
}
public class Omnia.Fx.NetCore.Identities.Migrations.Models.SQLCommandUpdateThreadData : IdentityMigrationThreadData {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IdentityColumnInfoResult> <SpecialIdentitiies>k__BackingField;
    public Dictionary`2<string, IdentityColumnInfoResult> SpecialIdentitiies { get; public set; }
    public SQLCommandUpdateThreadData(int threadIndex, int totalRows, string unit, int fromRow);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IdentityColumnInfoResult> get_SpecialIdentitiies();
    [CompilerGeneratedAttribute]
public void set_SpecialIdentitiies(Dictionary`2<string, IdentityColumnInfoResult> value);
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.IdentityTypesExtensions : object {
    [ExtensionAttribute]
public static OldIdentity CreateIdentity(OldIdentityTypes type, string uid);
    [ExtensionAttribute]
internal static OldIdentity CreateIdentity(OldIdentityTypes type);
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldDynamicGroupIdentity : OldIdentity {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public string Uid { get; }
    public OldIdentityTypes Type { get; }
    public Guid Id { get; public set; }
    protected OldDynamicGroupIdentity(OldDynamicGroupIdentityTypes dynamicGroupIdentityType, string uid);
    public virtual string get_Uid();
    public virtual OldIdentityTypes get_Type();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    public static OldDynamicGroupIdentity CreateDynamicGroupIdentity(string uid);
    public static bool TryParse(string uid, OldDynamicGroupIdentity& identity);
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldDynamicGroupIdentityTypes : OldIdentityTypes {
    public static OldDynamicGroupIdentityTypes InternalUsers;
    public static OldDynamicGroupIdentityTypes ExternalUsers;
    public static OldDynamicGroupIdentityTypes InternalUsersExceptRestricted;
    protected OldDynamicGroupIdentityTypes(int value);
    private static OldDynamicGroupIdentityTypes();
    public static OldDynamicGroupIdentityTypes op_Implicit(Nullable`1<int> value);
    public static OldDynamicGroupIdentityTypes op_Implicit(int value);
    public static int op_Implicit(OldDynamicGroupIdentityTypes identity);
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldGroupIdentity : OldIdentity {
    public static OldGroupIdentity op_Implicit(string uidAndType);
    public bool IsAzureAdGroup();
    public bool IsOmniaRoleGroup();
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldGroupIdentityTypes : OldIdentityTypes {
    public static OldGroupIdentityTypes AzureAdGroup;
    public static OldGroupIdentityTypes OmniaRoleGroup;
    protected OldGroupIdentityTypes(int value);
    private static OldGroupIdentityTypes();
    public static OldGroupIdentityTypes op_Implicit(Nullable`1<int> value);
    public static OldGroupIdentityTypes op_Implicit(int value);
    public static int op_Implicit(OldGroupIdentityTypes identity);
}
[JsonConverterAttribute("Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentityJsonConverter")]
[ObsoleteAttribute("It is only used for migration purpose. Please use the new Identity model instead.")]
public abstract class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentity : object {
    [CompilerGeneratedAttribute]
private string <_Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private OldIdentityTypes <_Type>k__BackingField;
    private string _Uid { get; private set; }
    private OldIdentityTypes _Type { get; private set; }
    [JsonPropertyAttribute]
public string Uid { get; internal set; }
    public OldIdentityTypes Type { get; internal set; }
    [CompilerGeneratedAttribute]
private string get__Uid();
    [CompilerGeneratedAttribute]
private void set__Uid(string value);
    [CompilerGeneratedAttribute]
private OldIdentityTypes get__Type();
    [CompilerGeneratedAttribute]
private void set__Type(OldIdentityTypes value);
    public virtual string get_Uid();
    internal virtual void set_Uid(string value);
    public virtual OldIdentityTypes get_Type();
    internal virtual void set_Type(OldIdentityTypes value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(OldIdentity a, OldIdentity b);
    public static bool op_Inequality(OldIdentity a, OldIdentity b);
    public virtual string ToString();
    public static OldIdentity op_Implicit(string uidAndType);
    public static string op_Implicit(OldIdentity identity);
    public static bool TryParse(string uidAndType, T& identity, bool mustMatchIdentityFormat);
    protected static TExpectedType CreateFromString(string uidAndType, bool mustMatchIdentityFormat, bool throwIfFailed);
    private static string removeClaimPrefixFromLoginName(string loginName);
    protected static ValueTuple`2<OldIdentityTypes, string> GetOldIdentityResult(string uidAndType, bool mustMatchIdentityFormat, bool throwIfFailed);
    public virtual int GetHashCode();
}
internal class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentityJsonConverter : JsonConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private string GetUid(JToken jToken);
    protected Nullable`1<int> GetType(JToken jToken);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[JsonConverterAttribute("Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentityTypesConverter")]
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentityTypes : object {
    [CompilerGeneratedAttribute]
private int <InternalValue>k__BackingField;
    private static Dictionary`2<int, OldIdentityTypes> Values;
    protected int InternalValue { get; protected set; }
    protected OldIdentityTypes(int value);
    private static OldIdentityTypes();
    [CompilerGeneratedAttribute]
protected int get_InternalValue();
    [CompilerGeneratedAttribute]
protected void set_InternalValue(int value);
    public static OldIdentityTypes op_Implicit(Nullable`1<int> value);
    public static OldIdentityTypes op_Implicit(int value);
    public static int op_Implicit(OldIdentityTypes identity);
    protected static TExpectedType GetIdentityForInt(int value);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldIdentityTypesConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldUserIdentity : OldIdentity {
    public static OldUserIdentity op_Implicit(string uidAndType);
    public bool IsAzureAdUser();
    public bool IsAzureAdExternalUser();
    public bool IsAzureAdInternalUser();
    public bool IsExtension();
    public bool IsMobileLogin();
    public bool IsAnonymous();
}
public class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.OldUserIdentityTypes : OldIdentityTypes {
    public static OldUserIdentityTypes Anonymous;
    public static OldUserIdentityTypes AzureAdInternalUser;
    public static OldUserIdentityTypes AzureAdExternalUser;
    public static OldUserIdentityTypes Extension;
    public static OldUserIdentityTypes MobileLogin;
    protected OldUserIdentityTypes(int value);
    private static OldUserIdentityTypes();
    public static OldUserIdentityTypes op_Implicit(Nullable`1<int> value);
    public static OldUserIdentityTypes op_Implicit(int value);
    public static int op_Implicit(OldUserIdentityTypes identity);
}
public static class Omnia.Fx.NetCore.Identities.Migrations.OldIdentities.Utils : object {
    [ObsoleteAttribute("deprecated, uid and IdentityTypes values should be stored together, i.e. Identitytype and uid makes an identity.", "False")]
public static OldIdentityTypes ExtractIdentityTypeFromUid(string uidLegacyFormat, bool throwIfFailed);
    [ObsoleteAttribute("deprecated, uid and IdentityTypes values should be stored together, i.e. Identitytype and uid makes an identity.", "False")]
public static OldUserIdentityTypes ExtractUserIdentityTypeFromUid(string uidLegacyFormat);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Services.IdentityResolver : object {
    private static int MaxAzureAdApiRetry;
    [CompilerGeneratedAttribute]
private IAzureAdUserService <AzureAdUserService>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Identity> <IdentityByLoginNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, IAzureAdObject> <IdentityByAzureAdIds>k__BackingField;
    private IAzureAdUserService AzureAdUserService { get; }
    private ConcurrentDictionary`2<string, Identity> IdentityByLoginNames { get; private set; }
    private ConcurrentDictionary`2<Guid, IAzureAdObject> IdentityByAzureAdIds { get; private set; }
    public IdentityResolver(IAzureAdUserService azureAdUserService);
    [CompilerGeneratedAttribute]
private IAzureAdUserService get_AzureAdUserService();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Identity> get_IdentityByLoginNames();
    [CompilerGeneratedAttribute]
private void set_IdentityByLoginNames(ConcurrentDictionary`2<string, Identity> value);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, IAzureAdObject> get_IdentityByAzureAdIds();
    [CompilerGeneratedAttribute]
private void set_IdentityByAzureAdIds(ConcurrentDictionary`2<Guid, IAzureAdObject> value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.IdentityResolver/<EnsureIdentitiesAsync>d__13")]
public sealed virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<Guid> azureAdIds, IOmniaIdentityService identityService);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.IdentityResolver/<EnsureIdentitiesAsync>d__14")]
public sealed virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<string> loginNames, IOmniaIdentityService identityService);
    public sealed virtual Identity ResolveIdentity(string loginName);
    public sealed virtual Identity ResolveIdentity(Guid azureAdId);
    private bool TryResolveUnknownIdentity(string identifier, Identity& identity);
    private string GetIdentityKey(string loginName);
    private string GetAzureAdLoginName(IAzureAdObject azureAdObject);
    private bool TryParse(string identifier, Identity& identity);
    [CompilerGeneratedAttribute]
private bool <EnsureIdentitiesAsync>b__13_1(Guid x);
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Services.IInternalIdentityResolver {
    public abstract virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<string> loginNames, IOmniaIdentityService identityService);
    public abstract virtual ValueTask EnsureIdentitiesAsync(IEnumerable`1<Guid> azureAdIds, IOmniaIdentityService identityService);
    public abstract virtual Identity ResolveIdentity(string loginName);
    public abstract virtual Identity ResolveIdentity(Guid azureAdId);
}
public interface Omnia.Fx.NetCore.Identities.Migrations.Services.IOmniaEnterprisePropertyService {
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync();
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Services.IOmniaExtensionService {
    public abstract virtual ValueTask`1<IEnumerable`1<Guid>> GetTenantExtensionIds();
}
internal interface Omnia.Fx.NetCore.Identities.Migrations.Services.IOmniaIdentityService {
    public abstract virtual Task`1<IDictionary`2<string, Identity>> GetIdentityWithOldIdentifiersAsync(IEnumerable`1<string> identifiers);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaEnterprisePropertyService : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertyDefinitionRepository <EnterprisePropertyDefinitionRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> <CacheHelper>k__BackingField;
    private IEnterprisePropertyDefinitionRepository EnterprisePropertyDefinitionRepository { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> CacheHelper { get; }
    public OmniaEnterprisePropertyService(IEnterprisePropertyDefinitionRepository enterprisePropertyDefinitionRepository, IOmniaMemoryCache memoryCache);
    [CompilerGeneratedAttribute]
private IEnterprisePropertyDefinitionRepository get_EnterprisePropertyDefinitionRepository();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> get_CacheHelper();
    public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaEnterprisePropertyService/<GetByIdsAsync>d__8")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaEnterprisePropertyService/<<GetAllAsync>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<EnterprisePropertyDefinition>> <GetAllAsync>b__7_0(IOmniaCacheEntry cacheEntry);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaExtensionService : object {
    private IOptionsMonitor`1<OmniaServicesDnsSettings> _omniaServicesDnsSettings;
    private IOptionsMonitor`1<OmniaAppSettings> _omniaAppSettings;
    private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> _omniaDeployedExtensionSettings;
    private IConfiguredHttpClient`1<OmniaCloudServiceApi> _omniaCloudApiHttpClient;
    private IOmniaContext _omniaContext;
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> _cacheHelper;
    public OmniaExtensionService(IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServicesDnsSettings, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<OmniaDeployedExtensionsSettings> omniaDeployedExtensionSettings, IConfiguredHttpClient`1<OmniaCloudServiceApi> omniaCloudApiHttpClient, IOmniaContext omniaContext, IOmniaMemoryCache cache);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaExtensionService/<GetTenantExtensionIds>d__7")]
public sealed virtual ValueTask`1<IEnumerable`1<Guid>> GetTenantExtensionIds();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaExtensionService/<GetTenantClientIdsAsync>d__8")]
private ValueTask`1<IEnumerable`1<Guid>> GetTenantClientIdsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaExtensionService/<<GetTenantExtensionIds>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Guid[]> <GetTenantExtensionIds>b__7_0(IOmniaCacheEntry entry);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaIdentityService : object {
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    private IServiceScopeFactory ServiceScopeFactory { get; }
    public OmniaIdentityService(IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
private IServiceScopeFactory get_ServiceScopeFactory();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaIdentityService/<GetIdentityWithOldIdentifiersAsync>d__4")]
public sealed virtual Task`1<IDictionary`2<string, Identity>> GetIdentityWithOldIdentifiersAsync(IEnumerable`1<string> identifiers);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.Services.OmniaIdentityService/<EnsureIdentityWithOldIdentifiersAsync>d__5")]
private Task`1<IDictionary`2<string, Identity>> EnsureIdentityWithOldIdentifiersAsync(IEnumerable`1<string> identifiers, bool retry);
    private void AddToIdentifierDictionary(Dictionary`2<T, List`1<string>> dict, T guidValue, string identifier);
}
internal class Omnia.Fx.NetCore.Identities.Migrations.UserImageSyncService : object {
    private IdentityMigrationDbContext dbContext;
    private DbSet`1<IdentityChangeLogItemEntity> identityChangeLogItems;
    private DbSet`1<IdentityEntity> identities;
    private Guid sessionId;
    public UserImageSyncService(IdentityMigrationDbContext dbContext);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.Migrations.UserImageSyncService/<DoImageConversionAdd>d__5")]
public sealed virtual Task DoImageConversionAdd(CancellationToken cancellationToken);
}
internal class Omnia.Fx.NetCore.Identities.ServiceIdentitySynchronizationHandler : object {
    [CompilerGeneratedAttribute]
private OmniaServiceIdentitySynchronizationOverHttp <HttpProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private OmniaServiceIdentitySynchronizationOverHttp HttpProxy { get; }
    private IOmniaServices OmniaServices { get; }
    public ServiceIdentitySynchronizationHandler(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private OmniaServiceIdentitySynchronizationOverHttp get_HttpProxy();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.ServiceIdentitySynchronizationHandler/<GetChangesAsync>d__8")]
public sealed virtual ValueTask`1<ValueTuple`2<IdentitySyncChangeToken, IList`1<IdentityChange>>> GetChangesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Identities.ServiceIdentitySynchronizationHandler/<CommitAsync>d__9")]
public sealed virtual Task CommitAsync(IdentitySyncChangeToken theNewtoken);
}
public interface Omnia.Fx.NetCore.ImplementationDependencies.IUserdefinedLocalizationsService {
    public abstract virtual ValueTask`1<IList`1<UserdefinedLocalizationProperty>> AddOrUpdateLocalizationsAsync(List`1<UserdefinedLocalizationProperty> localizationStrings);
    public abstract virtual ValueTask`1<Dictionary`2<Guid, IEnumerable`1<UserdefinedLocalizationProperty>>> GetLocalizationAsync(List`1<Guid> OmniaServiceIds);
}
public class Omnia.Fx.NetCore.JsonConfiguration.OmniaJsonFileConfigurationProvider : ConfigurationProvider {
    private Stack`1<string> _context;
    private string _currentPath;
    [CompilerGeneratedAttribute]
private OmniaJsonFileSource <Source>k__BackingField;
    private OmniaJsonFileSource Source { get; }
    public OmniaJsonFileConfigurationProvider(OmniaJsonFileSource source);
    [CompilerGeneratedAttribute]
private OmniaJsonFileSource get_Source();
    public virtual void Load();
    private void VisitJObject(JObject jObject);
    private void VisitProperty(JProperty property);
    private void VisitToken(JToken token);
    private void VisitArray(JArray array);
    private void VisitPrimitive(JValue data);
    private void SetKeyValue(string value);
    private void EnterContext(string context);
    private void ExitContext();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public class Omnia.Fx.NetCore.JsonConfiguration.OmniaJsonFileSource : object {
    [CompilerGeneratedAttribute]
private bool <ReloadOnChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MountPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnSourceChangedAction>k__BackingField;
    private object DataLockObj;
    [CompilerGeneratedAttribute]
private string <CurrentContentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <_CurrentData>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaMountedFileSystemWatcher <Watcher>k__BackingField;
    public bool ReloadOnChange { get; public set; }
    public string MountPath { get; public set; }
    public string SubFilePath { get; public set; }
    public JObject CurrentData { get; }
    public Action OnSourceChangedAction { get; public set; }
    private string CurrentContentHash { get; private set; }
    private int ChangeCount { get; private set; }
    private JObject _CurrentData { get; private set; }
    private IOmniaMountedFileSystemWatcher Watcher { get; private set; }
    public string MountedPath { get; }
    [CompilerGeneratedAttribute]
public bool get_ReloadOnChange();
    [CompilerGeneratedAttribute]
public void set_ReloadOnChange(bool value);
    [CompilerGeneratedAttribute]
public string get_MountPath();
    [CompilerGeneratedAttribute]
public void set_MountPath(string value);
    [CompilerGeneratedAttribute]
public string get_SubFilePath();
    [CompilerGeneratedAttribute]
public void set_SubFilePath(string value);
    public JObject get_CurrentData();
    [CompilerGeneratedAttribute]
public Action get_OnSourceChangedAction();
    [CompilerGeneratedAttribute]
public void set_OnSourceChangedAction(Action value);
    [CompilerGeneratedAttribute]
private string get_CurrentContentHash();
    [CompilerGeneratedAttribute]
private void set_CurrentContentHash(string value);
    [CompilerGeneratedAttribute]
private int get_ChangeCount();
    [CompilerGeneratedAttribute]
private void set_ChangeCount(int value);
    [CompilerGeneratedAttribute]
private JObject get__CurrentData();
    [CompilerGeneratedAttribute]
private void set__CurrentData(JObject value);
    [CompilerGeneratedAttribute]
private IOmniaMountedFileSystemWatcher get_Watcher();
    [CompilerGeneratedAttribute]
private void set_Watcher(IOmniaMountedFileSystemWatcher value);
    public string get_MountedPath();
    public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
    private void HandleChange();
    [CompilerGeneratedAttribute]
private void <Build>b__38_0(IDictionary`2<FileChangeType, IList`1<string>> changes);
}
public interface Omnia.Fx.NetCore.Licensing.ILicenseService {
    public abstract virtual IEnumerable`1<License> GetLicenses();
    public abstract virtual bool HasLicense(Guid licenseId);
}
public class Omnia.Fx.NetCore.Licensing.LicenseService : object {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaLicensingSettings> <LicensingSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaLicensingSettings> <Logger>k__BackingField;
    public IOptionsMonitor`1<OmniaLicensingSettings> LicensingSettings { get; }
    public ILogger`1<OmniaLicensingSettings> Logger { get; }
    public LicenseService(IOptionsMonitor`1<OmniaLicensingSettings> licensingSettings, ILogger`1<OmniaLicensingSettings> logger);
    [CompilerGeneratedAttribute]
public IOptionsMonitor`1<OmniaLicensingSettings> get_LicensingSettings();
    [CompilerGeneratedAttribute]
public ILogger`1<OmniaLicensingSettings> get_Logger();
    public sealed virtual IEnumerable`1<License> GetLicenses();
    public sealed virtual bool HasLicense(Guid licenseId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(OmniaLicensingSettings a);
}
public interface Omnia.Fx.NetCore.Locks.IOmniaDistributedLock {
    public abstract virtual IOmniaDistributedLockAcquire WithLock(Guid lockId, string lockName);
}
public interface Omnia.Fx.NetCore.Locks.IOmniaDistributedLockAcquire {
    public abstract virtual Task AcquireAsync(Func`1<ValueTask> action, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public abstract virtual Task TryAcquireAsync(Func`1<ValueTask> action, TimeSpan timeout, CancellationToken cancellationToken);
}
internal class Omnia.Fx.NetCore.Locks.OmniaDistributedLock : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    private string ConnectionString { get; }
    public OmniaDistributedLock(string connectionString);
    [CompilerGeneratedAttribute]
private string get_ConnectionString();
    public sealed virtual IOmniaDistributedLockAcquire WithLock(Guid lockId, string lockName);
}
internal class Omnia.Fx.NetCore.Locks.OmniaDistributedLockAcquire : object {
    [CompilerGeneratedAttribute]
private SqlDistributedLock <SqlDistributedLock>k__BackingField;
    private SqlDistributedLock SqlDistributedLock { get; }
    public OmniaDistributedLockAcquire(string connectionString, Guid lockId, string lockName);
    [CompilerGeneratedAttribute]
private SqlDistributedLock get_SqlDistributedLock();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Locks.OmniaDistributedLockAcquire/<AcquireAsync>d__4")]
public sealed virtual Task AcquireAsync(Func`1<ValueTask> action, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Locks.OmniaDistributedLockAcquire/<TryAcquireAsync>d__5")]
public sealed virtual Task TryAcquireAsync(Func`1<ValueTask> action, TimeSpan timeout, CancellationToken cancellationToken);
}
public class Omnia.Fx.NetCore.Manifests.Models.ClientManifestJsonData : HashableJsonString {
    public string JavascriptJsonString { get; }
    public string get_JavascriptJsonString();
    private sealed virtual override string Omnia.Fx.NetCore.Manifests.Services.IClientManifestData.get_Json();
    private sealed virtual override string Omnia.Fx.NetCore.Manifests.Services.IClientManifestData.get_JsonHash();
}
internal class Omnia.Fx.NetCore.Manifests.Services.ClientManifestDiskWatcher : object {
    private static object _lock;
    private static object _lockLoadManifest;
    [CompilerGeneratedAttribute]
private IOmniaLogger`1<ClientManifestDiskWatcher> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogFileWriter <LogFileWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ClientServiceManifestsTargetTypes, ClientManifestsState> <ClientManifestStates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestPath>k__BackingField;
    private IOmniaLogger`1<ClientManifestDiskWatcher> Logger { get; }
    private ILogFileWriter LogFileWriter { get; }
    private Dictionary`2<ClientServiceManifestsTargetTypes, ClientManifestsState> ClientManifestStates { get; private set; }
    private string ManifestPath { get; }
    public ClientManifestDiskWatcher(IOmniaHostingEnvironment hostingEnvironment, IOmniaMountedFileSystemWatcherFactory diskResourceWatcherFactory, ILogFileService logFileService, IOmniaLogger`1<ClientManifestDiskWatcher> logger);
    private static ClientManifestDiskWatcher();
    [CompilerGeneratedAttribute]
private IOmniaLogger`1<ClientManifestDiskWatcher> get_Logger();
    [CompilerGeneratedAttribute]
private ILogFileWriter get_LogFileWriter();
    [CompilerGeneratedAttribute]
private Dictionary`2<ClientServiceManifestsTargetTypes, ClientManifestsState> get_ClientManifestStates();
    [CompilerGeneratedAttribute]
private void set_ClientManifestStates(Dictionary`2<ClientServiceManifestsTargetTypes, ClientManifestsState> value);
    [CompilerGeneratedAttribute]
private string get_ManifestPath();
    public sealed virtual IClientManifestState GetState(ClientServiceManifestsTargetTypes target);
    private void UpdateManifestsFromDisk();
    private ClientManifestsState GetClientManifestStateByTarget(ClientServiceManifestsTargetTypes target);
    private Dictionary`2<LoadableBundleManifest, List`1<LoadableBundleManifest>> CreateDependencies(Dictionary`2<Guid, ClientServiceManifests> serviceManifests);
    private void OnDiskResourcesChanged(IDictionary`2<FileChangeType, IList`1<string>> pathChangesByType);
    [CompilerGeneratedAttribute]
internal static List`1<BundleIdentity> <CreateDependencies>g__GetAllDependenciesForManifest|20_1(ILogFileWriter logWriter, BundleIdentity bundleIdentity, Dictionary`2<BundleIdentity, LoadableBundleManifest> manifestLookup, Dictionary`2<BundleIdentity, List`1<BundleIdentity>> dependenciesOnBundleIds);
}
internal class Omnia.Fx.NetCore.Manifests.Services.ClientManifestService : object {
    [CompilerGeneratedAttribute]
private IClientManifestState <PublicManifestState>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<ClientManifestService> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, Dictionary`2<Guid, LoadableBundleManifest>> <ServiceIdManifestIdToLoadableManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private IClientManifestDiskWatcher <ClientManifestDiskWatcher>k__BackingField;
    private IClientManifestState PublicManifestState { get; private set; }
    private ILogger`1<ClientManifestService> Logger { get; }
    private Dictionary`2<Guid, Dictionary`2<Guid, LoadableBundleManifest>> ServiceIdManifestIdToLoadableManifest { get; }
    private IClientManifestDiskWatcher ClientManifestDiskWatcher { get; }
    public ClientManifestService(IClientManifestDiskWatcher clientManifestDiskWatcher, ILogger`1<ClientManifestService> logger);
    [CompilerGeneratedAttribute]
private IClientManifestState get_PublicManifestState();
    [CompilerGeneratedAttribute]
private void set_PublicManifestState(IClientManifestState value);
    [CompilerGeneratedAttribute]
private ILogger`1<ClientManifestService> get_Logger();
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, Dictionary`2<Guid, LoadableBundleManifest>> get_ServiceIdManifestIdToLoadableManifest();
    [CompilerGeneratedAttribute]
private IClientManifestDiskWatcher get_ClientManifestDiskWatcher();
    public sealed virtual IClientManifestData GetManifestJson(ClientServiceManifestsTargetTypes target);
    public sealed virtual Dictionary`2<Guid, ClientServiceManifests> GetManifests();
    public sealed virtual List`1<BundleManifest> GetAuthDisabledBundleManifests(Guid serviceId);
    public sealed virtual List`1<LoadableBundleManifest> ResolveDependencyOrder(LoadableBundleManifest loadableManifest);
    public sealed virtual LoadableBundleManifest GetLoadableManifest(Guid omniaServiceId, Guid manifestId);
}
public interface Omnia.Fx.NetCore.Manifests.Services.IClientManifestData {
    public string Json { get; }
    public string JsonHash { get; }
    public abstract virtual string get_Json();
    public abstract virtual string get_JsonHash();
}
internal interface Omnia.Fx.NetCore.Manifests.Services.IClientManifestDiskWatcher {
    public abstract virtual IClientManifestState GetState(ClientServiceManifestsTargetTypes target);
}
public interface Omnia.Fx.NetCore.Manifests.Services.IClientManifestService {
    public abstract virtual IClientManifestData GetManifestJson(ClientServiceManifestsTargetTypes target);
    public abstract virtual Dictionary`2<Guid, ClientServiceManifests> GetManifests();
    public abstract virtual List`1<BundleManifest> GetAuthDisabledBundleManifests(Guid serviceId);
    public abstract virtual LoadableBundleManifest GetLoadableManifest(Guid omniaServiceId, Guid manifestId);
    public abstract virtual List`1<LoadableBundleManifest> ResolveDependencyOrder(LoadableBundleManifest loadableManifest);
}
internal interface Omnia.Fx.NetCore.Manifests.Services.IClientManifestState {
    public IClientManifestData ManifestJson { get; }
    public Dictionary`2<Guid, ClientServiceManifests> OmniaServiceManifests { get; }
    public Dictionary`2<LoadableBundleManifest, List`1<LoadableBundleManifest>> LoadableManifestDependency { get; }
    public abstract virtual IClientManifestData get_ManifestJson();
    public abstract virtual Dictionary`2<Guid, ClientServiceManifests> get_OmniaServiceManifests();
    public abstract virtual Dictionary`2<LoadableBundleManifest, List`1<LoadableBundleManifest>> get_LoadableManifestDependency();
}
public class Omnia.Fx.NetCore.Mappings.AutoMapperBindings : Profile {
    private void CreateMappingsForIdentityMigrations();
}
public class Omnia.Fx.NetCore.MediaPicker.MediaPickerUserIconsStorageProviderContext : MediaPickerStorageProviderContext {
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <StorageProviderContextId>k__BackingField;
    public Guid OmniaServiceId { get; protected set; }
    public Guid StorageProviderContextId { get; protected set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
protected virtual void set_OmniaServiceId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_StorageProviderContextId();
    [CompilerGeneratedAttribute]
protected virtual void set_StorageProviderContextId(Guid value);
}
public class Omnia.Fx.NetCore.Messaging.MessageBus : object {
    private static int MessagePublishDelayIntervalMilliseconds;
    private static int MessageSubscriptionIntervalMilliseconds;
    private static int MessageSubscriptionHaveResultIntervalMilliseconds;
    private static int MaxParallelMessagesCount;
    private static int ReceiveBatchSize;
    private static int PublishRetryCount;
    private static string DeveloperOverridesPrefixKey;
    private static string MessageNamespaceKey;
    private static string MessageNameKey;
    private static string MetadataKey;
    private CancellationTokenSource _source;
    private ConcurrentQueue`1<QueuedMessageData> _queueMessages;
    private ConcurrentDictionary`2<string, List`1<SubscriberMap>> _subscribers;
    private SemaphoreSlim _locker;
    private ServiceBusClient _serviceBusClient;
    private ServiceBusSender _sender;
    private ServiceBusReceiver _receiver;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> <DevelopmentOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaHostingEnvironment <OmniaHostingEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<MessageBus> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogFileWriter <LogWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    private IOptionsMonitor`1<DevelopmentOverrides> DevelopmentOverrides { get; }
    private IOmniaHostingEnvironment OmniaHostingEnvironment { get; }
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private ILogger`1<MessageBus> Logger { get; }
    private ILogFileWriter LogWriter { get; }
    private string ConnectionString { get; }
    private string Topic { get; }
    private CancellationToken Token { get; }
    public MessageBus(IOmniaHostingEnvironment omniaHostingEnvironment, string connectionString, string topic, IOptionsMonitor`1<DevelopmentOverrides> developmentOverrides, IHostApplicationLifetime applicationLifetime, ILogger`1<MessageBus> logger, ILogFileWriter logWriter);
    public MessageBus(string connectionString, string topic);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> get_DevelopmentOverrides();
    [CompilerGeneratedAttribute]
private IOmniaHostingEnvironment get_OmniaHostingEnvironment();
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private ILogger`1<MessageBus> get_Logger();
    [CompilerGeneratedAttribute]
private ILogFileWriter get_LogWriter();
    [CompilerGeneratedAttribute]
private string get_ConnectionString();
    [CompilerGeneratedAttribute]
private string get_Topic();
    [CompilerGeneratedAttribute]
private CancellationToken get_Token();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<PublishMessagesDelayAsync>d__45")]
private void PublishMessagesDelayAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<SubscribeTopicPollingAsync>d__46")]
private void SubscribeTopicPollingAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<PublishAsync>d__47`1")]
public sealed virtual Task PublishAsync(Topic`1<TMessage> topic, TMessage message, MessageSettings messageSettings);
    public sealed virtual Task PublishAsync(Topic`2<TMessage, TMetadata> topic, TMessage message, TMetadata metadata, MessageSettings messageSettings);
    public sealed virtual ValueTask`1<SubscriptionToken> SubscribeAsync(Topic`1<TMessage> topic, Func`2<TMessage, Task> action);
    public sealed virtual ValueTask`1<SubscriptionToken> SubscribeAsync(Topic`2<TMessage, TMetadata> topic, Func`3<TMessage, TMetadata, Task> action);
    public sealed virtual ValueTask`1<SubscriptionToken> SubscribeOnceAsync(Topic`1<TMessage> topic, Func`2<TMessage, Task> action);
    public sealed virtual ValueTask`1<SubscriptionToken> SubscribeOnceAsync(Topic`2<TMessage, TMetadata> topic, Func`3<TMessage, TMetadata, Task> action);
    public sealed virtual void Unsubscribe(SubscriptionToken token);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<PublishHeartbeat>d__54")]
public sealed virtual Task PublishHeartbeat();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<SubscribeInternalAsync>d__55`2")]
private ValueTask`1<SubscriptionToken> SubscribeInternalAsync(Topic`2<TMessage, TMetadata> topic, Func`3<TMessage, TMetadata, Task> action, bool subscribeOnce);
    private ServiceBusClient EnsureClient();
    private ServiceBusSender SetupPublisher();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<SetupReceiver>d__58")]
private Task`1<ServiceBusReceiver> SetupReceiver();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<PublishInternalAsync>d__59")]
private Task PublishInternalAsync(List`1<QueuedMessageData> messages);
    private Dictionary`2<QueuedMessageData, ServiceBusMessage> MapToServiceBusMessages(List`1<QueuedMessageData> messages);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<CreateMessageBatchAsync>d__61")]
private Task`1<ServiceBusMessageBatch> CreateMessageBatchAsync(ServiceBusSender sender, string messageTopicsString);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<PublishBatchMessagesAsync>d__62")]
private Task PublishBatchMessagesAsync(ServiceBusSender sender, ServiceBusMessageBatch currentBatch, List`1<QueuedMessageData> currentBatchMessages);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<HandleMessage>d__63")]
private Task HandleMessage(ServiceBusReceiver receiver, ServiceBusReceivedMessage message);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<ProcessMessageAsync>d__64")]
private Task ProcessMessageAsync(ServiceBusReceivedMessage message);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<ProcessMessageAsync>d__65")]
private Task ProcessMessageAsync(string prefix, string ns, string topicName, string payload, string metadata);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<DisposeAsync>d__66")]
public sealed virtual ValueTask DisposeAsync();
    private string GetTopicKey(Topic`2<TMessage, TMetadata> topic);
    private bool TryGetDeveloperOverridesPrefix(String& prefix);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<ExecuteWithExceptionHandlingAsync>d__69")]
private Task`1<bool> ExecuteWithExceptionHandlingAsync(Func`1<ValueTask> retryFunc, string actionName, string additionalMessageOnFailed);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<RetryActionAsync>d__70")]
private Task`1<bool> RetryActionAsync(Func`1<ValueTask> retryFunc, string actionName, int retry, int delay);
    private string GetQueuedMessagesString(IEnumerable`1<QueuedMessageData> messages);
    private void WriteServiceBusLog(string action, string topicValue);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBus/<<PublishMessagesDelayAsync>b__45_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <PublishMessagesDelayAsync>b__45_0();
}
public class Omnia.Fx.NetCore.Messaging.MessageBusFactory : object {
    private IHostApplicationLifetime _applicationLifetime;
    private ILoggerFactory _loggerFactory;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, MessageBusInfo> <CreatedMessageBusInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private Timer <SubscriptionHeartBeatTimer>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaHostingEnvironment <HostingEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> <DevOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<MessageBusFactory> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogFileService <LogFileService>k__BackingField;
    private ConcurrentDictionary`2<string, MessageBusInfo> CreatedMessageBusInfos { get; private set; }
    private Timer SubscriptionHeartBeatTimer { get; private set; }
    private IOmniaHostingEnvironment HostingEnvironment { get; }
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    private IOptionsMonitor`1<DevelopmentOverrides> DevOverrides { get; }
    private ILogger`1<MessageBusFactory> Logger { get; }
    private ILogFileService LogFileService { get; }
    public MessageBusFactory(IOmniaHostingEnvironment hostingEnvironment, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<DevelopmentOverrides> devOverrides, ILogger`1<MessageBusFactory> logger, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, ILogFileService logFileService);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, MessageBusInfo> get_CreatedMessageBusInfos();
    [CompilerGeneratedAttribute]
private void set_CreatedMessageBusInfos(ConcurrentDictionary`2<string, MessageBusInfo> value);
    [CompilerGeneratedAttribute]
private Timer get_SubscriptionHeartBeatTimer();
    [CompilerGeneratedAttribute]
private void set_SubscriptionHeartBeatTimer(Timer value);
    [CompilerGeneratedAttribute]
private IOmniaHostingEnvironment get_HostingEnvironment();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> get_DevOverrides();
    [CompilerGeneratedAttribute]
private ILogger`1<MessageBusFactory> get_Logger();
    [CompilerGeneratedAttribute]
private ILogFileService get_LogFileService();
    public sealed virtual IMessageBus Create(string topic);
    public sealed virtual IMessageBus Create(string connectionString, string topic);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBusFactory/<EnsureMessageBus>d__29")]
private Task`1<IMessageBus> EnsureMessageBus(string connectionString, string topic);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBusFactory/<EnsureTopicAsync>d__30")]
private Task EnsureTopicAsync(ServiceBusAdministrationClient managementClient, string topic);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBusFactory/<PublishHeartbeat>d__31")]
private Task PublishHeartbeat();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Omnia.Fx.NetCore.Messaging.MessageBusFactory/<<-ctor>b__26_0>d")]
[CompilerGeneratedAttribute]
private void <.ctor>b__26_0(object sender, ElapsedEventArgs e);
}
internal class Omnia.Fx.NetCore.Messaging.MessageBusHeartbeat : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
internal class Omnia.Fx.NetCore.Messaging.SubscriberMap : object {
    [CompilerGeneratedAttribute]
private Func`3<string, string, Task> <ActionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private SubscriptionToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Unsubscribe>k__BackingField;
    public Func`3<string, string, Task> ActionCallback { get; public set; }
    public SubscriptionToken Token { get; public set; }
    public Action Unsubscribe { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<string, string, Task> get_ActionCallback();
    [CompilerGeneratedAttribute]
public void set_ActionCallback(Func`3<string, string, Task> value);
    [CompilerGeneratedAttribute]
public SubscriptionToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(SubscriptionToken value);
    [CompilerGeneratedAttribute]
public Action get_Unsubscribe();
    [CompilerGeneratedAttribute]
public void set_Unsubscribe(Action value);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageDbContext")]
[MigrationAttribute("20220208024603_AddOmniaFileStorage")]
public class Omnia.Fx.NetCore.Migrations.FileStorageDb.AddOmniaFileStorage : Migration {
    protected virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageDbContext")]
internal class Omnia.Fx.NetCore.Migrations.FileStorageDb.FileStorageDbContextModelSnapshot : ModelSnapshot {
    protected virtual void BuildModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.VersionedData.VersionedDataDbContext")]
[MigrationAttribute("20210416033355_InitialVersionedDataDbContext")]
public class Omnia.Fx.NetCore.Migrations.InitialVersionedDataDbContext : Migration {
    protected virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.Post.PostDbContext")]
[MigrationAttribute("20220913095450_AddingReactionTypeOnPost")]
public class Omnia.Fx.NetCore.Migrations.PostDb.AddingReactionTypeOnPost : Migration {
    protected virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.Post.PostDbContext")]
[MigrationAttribute("20220406120000_InitialPostStorage")]
public class Omnia.Fx.NetCore.Migrations.PostDb.InitialPostStorage : Migration {
    protected virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.Post.PostDbContext")]
internal class Omnia.Fx.NetCore.Migrations.PostDb.PostDbContextModelSnapshot : ModelSnapshot {
    protected virtual void BuildModel(ModelBuilder modelBuilder);
}
[DbContextAttribute("Omnia.Fx.NetCore.Repositories.VersionedData.VersionedDataDbContext")]
internal class Omnia.Fx.NetCore.Migrations.VersionedDataDbContextModelSnapshot : ModelSnapshot {
    protected virtual void BuildModel(ModelBuilder modelBuilder);
}
public class Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.FileChangesFunc : MulticastDelegate {
    public FileChangesFunc(object object, IntPtr method);
    public virtual void Invoke(IDictionary`2<FileChangeType, IList`1<string>> changedPathsByType);
    public virtual IAsyncResult BeginInvoke(IDictionary`2<FileChangeType, IList`1<string>> changedPathsByType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.FileChangeType : Enum {
    public int value__;
    public static FileChangeType Changed;
    public static FileChangeType Deleted;
}
public interface Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.IOmniaMountedFileSystemWatcher {
    public string GlobPattern { get; public set; }
    public string Path { get; public set; }
    public bool IncludeSubFolders { get; public set; }
    unknown FileChangesFunc OnChanged {public set; }
    unknown bool Enable {public set; }
    public abstract virtual string get_GlobPattern();
    public abstract virtual void set_GlobPattern(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual bool get_IncludeSubFolders();
    public abstract virtual void set_IncludeSubFolders(bool value);
    public abstract virtual void set_OnChanged(FileChangesFunc value);
    public abstract virtual void set_Enable(bool value);
}
public interface Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.IOmniaMountedFileSystemWatcherFactory {
    public abstract virtual IOmniaMountedFileSystemWatcher Create();
}
internal class Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.OmniaMountedFileSystemWatcher : object {
    [CompilerGeneratedAttribute]
private static object <LockObj>k__BackingField;
    private static IList`1<OmniaMountedFileSystemWatcher> Instances;
    [CompilerGeneratedAttribute]
private static FileSystemWatcher <MountedFileWatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CurrentNotificationFileContent>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemWatcher <NoneMountedFileWatcher>k__BackingField;
    private static IList`1<OmniaMountedFileSystemWatcher> NoneMountedInstances;
    private string _GlobPatter;
    private string _Path;
    private bool _IncludeSubFolders;
    private FileChangesFunc _OnChanged;
    [CompilerGeneratedAttribute]
private IList`1<WatchedFile> <WatchedFiles>k__BackingField;
    private bool _Enabled;
    private static object LockObj { get; private set; }
    private static FileSystemWatcher MountedFileWatcher { get; private set; }
    private static string CurrentNotificationFileContent { get; private set; }
    private FileSystemWatcher NoneMountedFileWatcher { get; private set; }
    public string GlobPattern { get; public set; }
    public string Path { get; public set; }
    public bool IncludeSubFolders { get; public set; }
    private FileChangesFunc OnChanged { get; public set; }
    private IList`1<WatchedFile> WatchedFiles { get; private set; }
    unknown bool Enable {public set; }
    public OmniaMountedFileSystemWatcher(FileChangesFunc cb);
    private static OmniaMountedFileSystemWatcher();
    [CompilerGeneratedAttribute]
private static object get_LockObj();
    [CompilerGeneratedAttribute]
private static void set_LockObj(object value);
    [CompilerGeneratedAttribute]
private static FileSystemWatcher get_MountedFileWatcher();
    [CompilerGeneratedAttribute]
private static void set_MountedFileWatcher(FileSystemWatcher value);
    [CompilerGeneratedAttribute]
private static string get_CurrentNotificationFileContent();
    [CompilerGeneratedAttribute]
private static void set_CurrentNotificationFileContent(string value);
    [CompilerGeneratedAttribute]
private FileSystemWatcher get_NoneMountedFileWatcher();
    [CompilerGeneratedAttribute]
private void set_NoneMountedFileWatcher(FileSystemWatcher value);
    public sealed virtual string get_GlobPattern();
    public sealed virtual void set_GlobPattern(string value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    public sealed virtual bool get_IncludeSubFolders();
    public sealed virtual void set_IncludeSubFolders(bool value);
    private FileChangesFunc get_OnChanged();
    public sealed virtual void set_OnChanged(FileChangesFunc value);
    [CompilerGeneratedAttribute]
private IList`1<WatchedFile> get_WatchedFiles();
    [CompilerGeneratedAttribute]
private void set_WatchedFiles(IList`1<WatchedFile> value);
    public sealed virtual void set_Enable(bool value);
    private void MountedFileWatcherChanged(object sender, FileSystemEventArgs e);
    private void NoneMountedFileWatcherChanged(object sender, FileSystemEventArgs e);
    private void DoCheck();
    private void HandledFoundFile(Dictionary`2<FileChangeType, IList`1<string>> currentChanges, string path, DateTime lastWriteTime);
    private void EnsureGlobbyForFolder();
    private static void AddInstance(OmniaMountedFileSystemWatcher instance);
    private static void AddNonMountedInstance(OmniaMountedFileSystemWatcher instance);
    private void ThrowIfEnabled();
    public sealed virtual void Dispose();
}
public class Omnia.Fx.NetCore.OmniaMountedFileSystemWatcher.OmniaMountedFileSystemWatcherFactory : object {
    public static IOmniaMountedFileSystemWatcher CreateInstance();
    public sealed virtual IOmniaMountedFileSystemWatcher Create();
}
[ObsoleteAttribute("This should be removed as we can now get current service using IOmniaServices, need to fix consilidation of servicedns and easier local appsettinsg first")]
internal class Omnia.Fx.NetCore.OmniaServices.OmniaServiceDefinition : object {
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaServiceDefinition> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaManifestLoader <ManifestLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceType <ServiceType>k__BackingField;
    private ILogger`1<OmniaServiceDefinition> Logger { get; }
    private IOmniaManifestLoader ManifestLoader { get; }
    public Guid Id { get; private set; }
    public string Title { get; private set; }
    public string Description { get; private set; }
    public ServiceType ServiceType { get; private set; }
    public OmniaServiceDefinition(ILogger`1<OmniaServiceDefinition> logger, IOmniaManifestLoader omniaManifestLoader);
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaServiceDefinition> get_Logger();
    [CompilerGeneratedAttribute]
private IOmniaManifestLoader get_ManifestLoader();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceType get_ServiceType();
    [CompilerGeneratedAttribute]
private void set_ServiceType(ServiceType value);
    private ServiceDefinitionManifestBase GetServiceManifest();
    private string TryGetManifest(string dirPath);
}
public class Omnia.Fx.NetCore.OmniaServices.OmniaServiceLocator : object {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaServicesDnsSettings> <OmniaServiceDnsMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> <OmniaDeployedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaHostingEnvironment <OmniaHostingEnvironment>k__BackingField;
    public IOptionsMonitor`1<OmniaServicesDnsSettings> OmniaServiceDnsMapping { get; }
    public IOptionsMonitor`1<OmniaDeployedExtensionsSettings> OmniaDeployedExtensions { get; }
    public IOmniaHostingEnvironment OmniaHostingEnvironment { get; }
    public OmniaServiceLocator(IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServiceDnsMapping, IOptionsMonitor`1<OmniaDeployedExtensionsSettings> omniaDeployedExtensions, IOmniaHostingEnvironment omniaHostingEnvironment);
    [CompilerGeneratedAttribute]
public IOptionsMonitor`1<OmniaServicesDnsSettings> get_OmniaServiceDnsMapping();
    [CompilerGeneratedAttribute]
public IOptionsMonitor`1<OmniaDeployedExtensionsSettings> get_OmniaDeployedExtensions();
    [CompilerGeneratedAttribute]
public IOmniaHostingEnvironment get_OmniaHostingEnvironment();
    public sealed virtual string GetUrl(Guid serviceId);
    public sealed virtual string GetExternalUrl(Guid serviceId);
    public sealed virtual Nullable`1<Guid> GetExtensionIdByServiceId(Guid serviceId);
    public sealed virtual List`1<Guid> GetRelatedServiceIds(Guid extensionIdOrServiceId);
    public sealed virtual string GetToken(Guid serviceId);
    public sealed virtual string ReplaceTokenWithUrl(string content, bool useExternalUrl);
    public sealed virtual string ReplaceUrlWithToken(string content);
}
internal interface Omnia.Fx.NetCore.Post.IInternalPostStorageProvider`2 {
}
public interface Omnia.Fx.NetCore.Post.IPostEmailHandler`2 {
    public abstract virtual ValueTask SendAddedReplyEmailAsync(IPersistedPost`1<TPostType> persistedPost, IPersistedPost`1<TPostType> parentPersistedPost);
    public abstract virtual ValueTask SendMentionPostAddedEmailAsync(IPersistedPost`1<TPostType> persistedPost);
    public abstract virtual ValueTask SendMentionPostUpdatedEmailAsync(IPersistedPost`1<TPostType> persistedPost);
}
public interface Omnia.Fx.NetCore.Post.IPostService`1 {
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> CreateAsync(TPostType post);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> UpdateAsync(IPersistedPost`1<TPostType> postToUpdate);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> DeleteAsync(IPostReference postRef);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> GetAsync(IPostReference postRef);
    public abstract virtual Task`1<IList`1<IPersistedPost`1<TPostType>>> GetAsync(Guid topicId);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> ToggleLikeAsync(IPersistedPost`1<TPostType> postToToggle);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> AddOrUpdateReactionAsync(IPersistedPost`1<TPostType> postToReact, bool isReacts, ReactionType reactionType);
}
public interface Omnia.Fx.NetCore.Post.IPostStorageProvider`2 {
}
internal class Omnia.Fx.NetCore.Post.PostRouteService`1 : object {
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceInformation<TPostContext> <CorrectInstanceForPostType>k__BackingField;
    [CompilerGeneratedAttribute]
private PostValidationHelper`1<TPostContext> <ValidationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <counter>k__BackingField;
    private IOmniaServices OmniaServices { get; }
    private IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    private InstanceInformation<TPostContext> CorrectInstanceForPostType { get; private set; }
    private PostValidationHelper`1<TPostContext> ValidationHelper { get; }
    private IServiceProvider ServiceProvider { get; }
    private int counter { get; private set; }
    public PostRouteService`1(IOmniaServices omniaServices, IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
private InstanceInformation<TPostContext> get_CorrectInstanceForPostType();
    [CompilerGeneratedAttribute]
private void set_CorrectInstanceForPostType(InstanceInformation<TPostContext> value);
    [CompilerGeneratedAttribute]
private PostValidationHelper`1<TPostContext> get_ValidationHelper();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private int get_counter();
    [CompilerGeneratedAttribute]
private void set_counter(int value);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<CreateAsync>d__24`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> CreateAsync(TPostType post);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<DeleteAsync>d__25`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> DeleteAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<GetAsync>d__26`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> GetAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<GetAsync>d__27`1")]
public sealed virtual Task`1<IList`1<IPersistedPost`1<TPostType>>> GetAsync(Guid topicId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<UpdateAsync>d__28`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> UpdateAsync(IPersistedPost`1<TPostType> postToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<GetCorrectInterfaceImplAsync>d__29`1")]
private ValueTask`1<IPostService`1<TPostContext>> GetCorrectInterfaceImplAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<ToggleLikeAsync>d__30`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> ToggleLikeAsync(IPersistedPost`1<TPostType> postToToggle);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Post.PostRouteService`1/<AddOrUpdateReactionAsync>d__31`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> AddOrUpdateReactionAsync(IPersistedPost`1<TPostType> postToReact, bool isReacts, ReactionType reactionType);
}
public interface Omnia.Fx.NetCore.Properties.IPropertyBindingService {
    public abstract virtual ValueTask`1<IDictionary`2<Guid, Guid>> GetPropertyDefinitionIdAsync(IList`1<PropertyValueBinding> propertyValueBindings);
    public abstract virtual ValueTask`1<IDictionary`2<Guid, Guid>> GetOmniaOwnerServiceIdAsync(IList`1<PropertyValueBinding> propertyValueBindings);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.BirthdayPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<BirthdayPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.BooleanPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<BooleanPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.DatePropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<DatePropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.DateTimePropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<DateTimePropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.EmailPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<EmailPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.HtmlPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<HtmlPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.IdentityPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<IdentityPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.ImagePropertyValuePrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<ImagePropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.IntegerPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<IntegerPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.LanguageTagPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<LanguageTagPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.LinkPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<LinkPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.MultilineTextPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<MultilineTextPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.MultilingualTextPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<MultilingualTextPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.PhoneNumberPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<PhoneNumberPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.TagsPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<TagsPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.TextPropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<TextPropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public class Omnia.Fx.NetCore.Properties.Primitives.Creators.TimePropertyPrimitiveCreator : object {
    public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding`1<TimePropertyValue> sourceValue, IPrimitiveWriter primitiveWriter);
}
public interface Omnia.Fx.NetCore.Properties.Primitives.IPrimitiveConverterService {
    public abstract virtual Task GetPrimitivesAsync(IList`1<PropertyValueBinding> propertyValueBindings, IPrimitiveWriter writer);
}
internal interface Omnia.Fx.NetCore.Properties.Primitives.IPrimitiveCreator {
    public PropertyDefinition PropertyDefinition { get; }
    public abstract virtual PropertyDefinition get_PropertyDefinition();
    public abstract virtual Task CreatePrimitiveAsync(PropertyValueBinding sourceValue, IPrimitiveWriter primitiveWriter);
}
internal class Omnia.Fx.NetCore.Properties.Primitives.PrimitiveConverterService : object {
    [CompilerGeneratedAttribute]
private IList`1<IPrimitiveCreator> <LocalCreators>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyBindingService <PropertyBindingService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemotePrimitiveWriter <RemotePrimitiveWriter>k__BackingField;
    private IList`1<IPrimitiveCreator> LocalCreators { get; }
    private IPropertyBindingService PropertyBindingService { get; }
    private IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    private IRemotePrimitiveWriter RemotePrimitiveWriter { get; }
    public PrimitiveConverterService(IList`1<IPrimitiveCreator> localCreators, IPropertyBindingService propertyBindingService, IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, IRemotePrimitiveWriter remotePrimitiveWriter);
    [CompilerGeneratedAttribute]
private IList`1<IPrimitiveCreator> get_LocalCreators();
    [CompilerGeneratedAttribute]
private IPropertyBindingService get_PropertyBindingService();
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
private IRemotePrimitiveWriter get_RemotePrimitiveWriter();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Properties.Primitives.PrimitiveConverterService/<GetPrimitivesAsync>d__14")]
public sealed virtual Task GetPrimitivesAsync(IList`1<PropertyValueBinding> propertyValueBindings, IPrimitiveWriter writer);
}
public abstract class Omnia.Fx.NetCore.Properties.Primitives.PrimitiveWriterHelper : object {
    public abstract virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, string primitiveValue);
    public abstract virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IList`1<string> primitiveValue);
    public abstract virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<string, string> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<string, Nullable`1<int>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<string, bool> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<string, Nullable`1<DateTimeOffset>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<string, Nullable`1<Guid>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, Nullable`1<int> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IList`1<Nullable`1<int>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<int, Nullable`1<int>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<int, string> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<int, Nullable`1<DateTimeOffset>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<int, bool> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<int, Nullable`1<Guid>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, Nullable`1<bool> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IList`1<Nullable`1<bool>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, Nullable`1<DateTimeOffset> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IList`1<Nullable`1<DateTimeOffset>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<DateTimeOffset, Nullable`1<DateTimeOffset>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<DateTimeOffset, string> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<DateTimeOffset, Nullable`1<int>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<DateTimeOffset, bool> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<DateTimeOffset, Nullable`1<Guid>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, Nullable`1<Guid> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IList`1<Nullable`1<Guid>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<Guid, Nullable`1<Guid>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<Guid, string> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<Guid, Nullable`1<int>> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<Guid, bool> primitiveValue);
    public virtual Task WriteAsync(PropertyValueBinding propertyValueBinding, IDictionary`2<Guid, Nullable`1<DateTimeOffset>> primitiveValue);
}
public class Omnia.Fx.NetCore.Properties.Primitives.RemoteWriter.HttpContract : object {
}
public interface Omnia.Fx.NetCore.Properties.Primitives.RemoteWriter.IRemotePrimitiveWriter {
    public abstract virtual ValueTask`1<IList`1<RemoteRequestResult>> CreatePrimitivesAsync(IList`1<RemoteRequest> requests);
    public abstract virtual Task InvokeResultsOnWriter(IList`1<RemoteRequest> requests, IList`1<RemoteRequestResult> results, IPrimitiveWriter targetWriter);
}
internal class Omnia.Fx.NetCore.Properties.Primitives.RemoteWriter.RemotePrimitiveWriter : object {
    [CompilerGeneratedAttribute]
private IList`1<IPrimitiveCreator> <LocalCreators>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private IList`1<IPrimitiveCreator> LocalCreators { get; }
    private IOmniaServices OmniaServices { get; }
    public RemotePrimitiveWriter(IList`1<IPrimitiveCreator> localCreators, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private IList`1<IPrimitiveCreator> get_LocalCreators();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Properties.Primitives.RemoteWriter.RemotePrimitiveWriter/<CreatePrimitivesAsync>d__9")]
public sealed virtual ValueTask`1<IList`1<RemoteRequestResult>> CreatePrimitivesAsync(IList`1<RemoteRequest> requests);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Properties.Primitives.RemoteWriter.RemotePrimitiveWriter/<InvokeResultsOnWriter>d__10")]
public sealed virtual Task InvokeResultsOnWriter(IList`1<RemoteRequest> requests, IList`1<RemoteRequestResult> results, IPrimitiveWriter targetWriter);
}
internal class Omnia.Fx.NetCore.Properties.Primitives.TypedDefinitionPrimitiveCreator`2 : object {
    [CompilerGeneratedAttribute]
private IPropertyDefinitionPrimitiveCreator`2<TPropertyDefinition, TPropertyValue> <DefinitionPrimitiveCreator>k__BackingField;
    private IPropertyDefinitionPrimitiveCreator`2<TPropertyDefinition, TPropertyValue> DefinitionPrimitiveCreator { get; }
    public PropertyDefinition PropertyDefinition { get; }
    public TypedDefinitionPrimitiveCreator`2(IPropertyDefinitionPrimitiveCreator`2<TPropertyDefinition, TPropertyValue> definitionPrimitiveCreator);
    [CompilerGeneratedAttribute]
private IPropertyDefinitionPrimitiveCreator`2<TPropertyDefinition, TPropertyValue> get_DefinitionPrimitiveCreator();
    public sealed virtual PropertyDefinition get_PropertyDefinition();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Properties.Primitives.TypedDefinitionPrimitiveCreator`2/<CreatePrimitiveAsync>d__7")]
public sealed virtual Task CreatePrimitiveAsync(PropertyValueBinding sourceValue, IPrimitiveWriter primitiveWriter);
}
internal class Omnia.Fx.NetCore.Properties.PropertyBindingServiceOverHttp : object {
    public sealed virtual ValueTask`1<IDictionary`2<Guid, Guid>> GetOmniaOwnerServiceIdAsync(IList`1<PropertyValueBinding> propertyValueBindings);
    public ValueTask`1<IList`1<PropertyBinding>> GetPropertyBindingsAsync();
    public ValueTask`1<IList`1<PropertyBinding>> GetPropertyBindingsAsync();
    public sealed virtual ValueTask`1<IDictionary`2<Guid, Guid>> GetPropertyDefinitionIdAsync(IList`1<PropertyValueBinding> propertyValueBindings);
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.AdGraphImageConverter : PropertyConverterBase`2<ImageProperty, ImagePropertyValue> {
    private IMediaPickerService mediaPickerService;
    private IConfiguredHttpClient`1<Office365GraphServiceApi> graphService;
    private IMimeTypeUtilService mimeTypeUtil;
    public bool DirectConversionIsAllowed { get; }
    public AdGraphImageConverter(IMediaPickerService mediaPickerService, IConfiguredHttpClient`1<Office365GraphServiceApi> graphService, IMimeTypeUtilService mimeTypeUtil);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.AdGraphImageConverter/<ConvertAsync>d__4")]
public virtual Task`1<PropertyConversionResult`1<ImagePropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    private string GetFileExtensionFromMimeType(GraphImageInfo imageInfo);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.BirthdayConverter : PropertyConverterBase`2<BirthdayProperty, BirthdayPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.BirthdayConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<BirthdayPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.BooleanConverter : PropertyConverterBase`2<BooleanProperty, BooleanPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.BooleanConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<BooleanPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.DateConverter : PropertyConverterBase`2<DateProperty, DatePropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.DateConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<DatePropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.DateTimeConverter : PropertyConverterBase`2<DateTimeProperty, DateTimePropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.DateTimeConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<DateTimePropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.EmailConverter : PropertyConverterBase`2<EmailProperty, EmailPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.EmailConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<EmailPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.LanguageTagConverter : PropertyConverterBase`2<LanguageTagProperty, LanguageTagPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.LanguageTagConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<LanguageTagPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.PhoneNumberConverter : PropertyConverterBase`2<PhoneNumberProperty, PhoneNumberPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.PhoneNumberConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<PhoneNumberPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.TextConverter : PropertyConverterBase`2<TextProperty, TextPropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.TextConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<TextPropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public class Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.TimeConverter : PropertyConverterBase`2<TimeProperty, TimePropertyValue> {
    public bool DirectConversionIsAllowed { get; }
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.BuiltInConverters.TimeConverter/<ConvertAsync>d__0")]
public virtual Task`1<PropertyConversionResult`1<TimePropertyValue>> ConvertAsync(Guid propertyBindingId, string valueToConvert, Nullable`1<Guid> identityId);
    public virtual ValueTask`1<bool> AllowToConvertAsync();
    public virtual bool get_DirectConversionIsAllowed();
}
public interface Omnia.Fx.NetCore.PropertyConversion.IPropertyConversionHandler {
    public abstract virtual ValueTask`1<ValueTuple`2<PropertyChangeToken, IList`1<ValueTuple`2<Guid, PropertyConversionNeeded>>>> GetPropertyConversionsAsync(Guid propertyDefinitionId);
    public abstract virtual ValueTask`1<ValueTuple`2<PropertyChangeToken, IList`1<ValueTuple`2<Guid, PropertyUpdated>>>> GetPropertyUpdatesAsync(Guid propertyDefinitionId);
    public abstract virtual Task`1<PropertyChangeToken> CommitPropertyConversionsAsync(PropertyChangeToken theNewtoken, Guid completedToken, List`1<PropertyConversionResult> result);
    public abstract virtual Task CommitPropertyUpdatesAsync(PropertyChangeToken theNewtoken, List`1<PropertyUpdateResult> result);
}
public interface Omnia.Fx.NetCore.PropertyConversion.IPropertyConverterService {
    public IList`1<IPropertyConverter> Converters { get; }
    public abstract virtual IList`1<IPropertyConverter> get_Converters();
    public abstract virtual IPropertyConverter GetConverter(Guid propertyDefinitionId);
}
internal class Omnia.Fx.NetCore.PropertyConversion.PropertyConversionHandler : object {
    [CompilerGeneratedAttribute]
private IdentityPropertyConversionOverHttp <HttpProxy>k__BackingField;
    private IdentityPropertyConversionOverHttp HttpProxy { get; }
    public PropertyConversionHandler(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private IdentityPropertyConversionOverHttp get_HttpProxy();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.PropertyConversionHandler/<GetPropertyConversionsAsync>d__5")]
public sealed virtual ValueTask`1<ValueTuple`2<PropertyChangeToken, IList`1<ValueTuple`2<Guid, PropertyConversionNeeded>>>> GetPropertyConversionsAsync(Guid propertyDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.PropertyConversionHandler/<GetPropertyUpdatesAsync>d__6")]
public sealed virtual ValueTask`1<ValueTuple`2<PropertyChangeToken, IList`1<ValueTuple`2<Guid, PropertyUpdated>>>> GetPropertyUpdatesAsync(Guid propertyDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.PropertyConversionHandler/<CommitPropertyConversionsAsync>d__7")]
public sealed virtual Task`1<PropertyChangeToken> CommitPropertyConversionsAsync(PropertyChangeToken theNewtoken, Guid completedToken, List`1<PropertyConversionResult> changes);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.PropertyConversion.PropertyConversionHandler/<CommitPropertyUpdatesAsync>d__8")]
public sealed virtual Task CommitPropertyUpdatesAsync(PropertyChangeToken theNewtoken, List`1<PropertyUpdateResult> result);
}
public class Omnia.Fx.NetCore.PropertyConversion.PropertyConverterService : object {
    private ILogger`1<PropertyConverterService> logger;
    private Func`1<List`1<IPropertyConverter>> _convertResolver;
    public IList`1<IPropertyConverter> Converters { get; }
    public PropertyConverterService(ILogger`1<PropertyConverterService> logger, Func`1<List`1<IPropertyConverter>> convertResolver);
    public sealed virtual IList`1<IPropertyConverter> get_Converters();
    public sealed virtual IPropertyConverter GetConverter(Guid propertyDefinitionId);
}
public static class Omnia.Fx.NetCore.Queues.ActionQueueHandlerHelper : object {
    public static Queue`2<AuditLogEventArg, UserMetadata> GetAuditLogQueue(Guid auditLogId);
    public static Queue`2<FeatureEventArg, UserMetadata> GetFeatureQueue(Guid featureId);
    public static Queue`2<AppInstanceEventArg, UserMetadata> GetAppHandlerQueue(Guid appDefinitionId);
    public static Queue`2<AppInstanceEventArg, UserMetadata> GetAppBeforeCompleteHandlerQueue(Guid appDefinitionId);
}
internal class Omnia.Fx.NetCore.Queues.QueueBus : object {
    private IOmniaLogger`1<QueueBus> logger;
    private static int DefaultMaxConcurrentCalls;
    internal static string MetadataKey;
    private ServiceBusClient serviceBusClient;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ServiceBusSender> <SendClients>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ServiceBusProcessor> <ReceiveClients>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <Subscribers>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> <DevelopmentOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceDefinition <ServiceDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserContextSwitcher <UserContextSwitcher>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueueService> <QueueServiceScopedRef>k__BackingField;
    private ConcurrentDictionary`2<string, ServiceBusSender> SendClients { get; private set; }
    private ConcurrentDictionary`2<string, ServiceBusProcessor> ReceiveClients { get; private set; }
    private ConcurrentDictionary`2<string, string> Subscribers { get; private set; }
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    private IOptionsMonitor`1<DevelopmentOverrides> DevelopmentOverrides { get; }
    private IOmniaServiceDefinition ServiceDefinition { get; }
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private IUserContextSwitcher UserContextSwitcher { get; }
    private ISingletonRefToScopedService`1<IQueueService> QueueServiceScopedRef { get; }
    public QueueBus(IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<DevelopmentOverrides> developmentOverrides, IOmniaServiceDefinition serviceDefinition, IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IQueueService> queueServiceScopedRef, IUserContextSwitcher userContextSwitcher, IOmniaLogger`1<QueueBus> logger);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ServiceBusSender> get_SendClients();
    [CompilerGeneratedAttribute]
private void set_SendClients(ConcurrentDictionary`2<string, ServiceBusSender> value);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ServiceBusProcessor> get_ReceiveClients();
    [CompilerGeneratedAttribute]
private void set_ReceiveClients(ConcurrentDictionary`2<string, ServiceBusProcessor> value);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> get_Subscribers();
    [CompilerGeneratedAttribute]
private void set_Subscribers(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<DevelopmentOverrides> get_DevelopmentOverrides();
    [CompilerGeneratedAttribute]
private IOmniaServiceDefinition get_ServiceDefinition();
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private IUserContextSwitcher get_UserContextSwitcher();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IQueueService> get_QueueServiceScopedRef();
    private void Init();
    public sealed virtual IQueueBus DequeueAsync(Queue`1<TMessage> queue, Func`2<TMessage, Task> action);
    public sealed virtual IQueueBus DequeueAsync(Queue`2<TMessage, TMetadata> queue, Func`3<TMessage, TMetadata, Task> action);
    private Func`2<ProcessMessageEventArgs, Task> MessageHandler(Func`3<TMessage, TMetadata, Task> action);
    private Task ErrorHandler(ProcessErrorEventArgs args);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnqueueAsync>d__40`1")]
public sealed virtual ValueTask`1<Guid> EnqueueAsync(Queue`1<TMessage> queue, TMessage message, Guid extensionId, MessageSettings messageSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnqueueAsync>d__41`2")]
public sealed virtual ValueTask`1<Guid> EnqueueAsync(Queue`2<TMessage, TMetadata> queue, TMessage message, TMetadata metadata, Guid extensionId, MessageSettings messageSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnqueueAsync>d__42`1")]
public sealed virtual ValueTask`1<Guid> EnqueueAsync(Queue`1<TMessage> queue, TMessage message, MessageSettings messageSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnqueueAsync>d__43`2")]
public sealed virtual ValueTask`1<Guid> EnqueueAsync(Queue`2<TMessage, TMetadata> queue, TMessage message, TMetadata metadata, MessageSettings messageSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnqueueAsyncInternal>d__44`2")]
public ValueTask`1<Guid> EnqueueAsyncInternal(Queue`2<TMessage, TMetadata> queue, TMessage message, TMetadata metadata, Nullable`1<Guid> extensionId, MessageSettings messageSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<GetProgress>d__45")]
public sealed virtual ValueTask`1<QueueMessageProgress> GetProgress(Guid queueMessageId);
    public sealed virtual Task RunInUserContextAsync(string encryptedUserToken, Func`2<IScopedServiceContext, Task> actionToRun);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<DisposeAsync>d__47")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<EnsureQueueAsync>d__48")]
private Task EnsureQueueAsync(string fullQueueName);
    private ServiceBusClient EnsureClient();
    private ServiceBusSender EnsureSendClient(string fullQueueName);
    private ServiceBusProcessor EnsureReceiverClient(string fullQueueName);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Queues.QueueBus/<UpdateMessageStatus>d__52")]
private Task UpdateMessageStatus(Guid messageId, QueueMessageProgress progress);
    private string GetFullQueueName(Nullable`1<Guid> extensionId, string queueName);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.BaseDbContext : DbContext {
    public BaseDbContext(DbContextOptions options);
    protected void SetClusteredIndex(ModelBuilder modelBuilder, Expression`1<Func`2<T, object>> primaryKeyExpression);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.EntityFramework.BaseDbContext/<ExecuteWithDbTransactionAsync>d__2")]
protected Task ExecuteWithDbTransactionAsync(Func`1<Task> action);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.DbContextWithAuditing : BaseDbContext {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, bool> <HandleStartUpDbContexts>k__BackingField;
    private static object _lock;
    [CompilerGeneratedAttribute]
private bool <IsSystemUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    private static ConcurrentDictionary`2<string, bool> HandleStartUpDbContexts { get; private set; }
    private bool IsSystemUpdate { get; }
    protected IOmniaContext OmniaContext { get; }
    public DbContextWithAuditing(DbContextOptions options, IOmniaContext omniaContext, IOmniaScopedContext omniaScopedContext);
    private static DbContextWithAuditing();
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, bool> get_HandleStartUpDbContexts();
    [CompilerGeneratedAttribute]
private static void set_HandleStartUpDbContexts(ConcurrentDictionary`2<string, bool> value);
    [CompilerGeneratedAttribute]
private bool get_IsSystemUpdate();
    [CompilerGeneratedAttribute]
protected IOmniaContext get_OmniaContext();
    protected virtual void HandleStartup(Action handleStartupFunc);
    public virtual int SaveChanges();
    public int SystemSaveChanges();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.EntityFramework.DbContextWithAuditing/<SaveChangesAsync>d__15")]
public ValueTask`1<int> SaveChangesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.EntityFramework.DbContextWithAuditing/<SystemSaveChangesAsync>d__16")]
public ValueTask`1<int> SystemSaveChangesAsync();
    private void AddAuitInfo(bool forceSystemUpdate);
    private void ValidateIsTenantReadonlyMode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(CancellationToken cancellationToken);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.AuditingEntityBase : object {
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ModifiedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeletedAt>k__BackingField;
    public string CreatedBy { get; public set; }
    public string ModifiedBy { get; public set; }
    public DateTimeOffset CreatedAt { get; public set; }
    public DateTimeOffset ModifiedAt { get; public set; }
    public Nullable`1<DateTimeOffset> DeletedAt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedBy();
    [CompilerGeneratedAttribute]
public void set_ModifiedBy(string value);
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ModifiedAt();
    [CompilerGeneratedAttribute]
public void set_ModifiedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeletedAt();
    [CompilerGeneratedAttribute]
public void set_DeletedAt(Nullable`1<DateTimeOffset> value);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.BusinessProfileEntityBase : ClusteredIndexAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <BusinessProfileId>k__BackingField;
    public Guid BusinessProfileId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_BusinessProfileId();
    [CompilerGeneratedAttribute]
public void set_BusinessProfileId(Guid value);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.ClusteredIndexAuditingEntityBase : AuditingEntityBase {
    [CompilerGeneratedAttribute]
private long <ClusteredId>k__BackingField;
    [DatabaseGeneratedAttribute("1")]
public long ClusteredId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClusteredId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClusteredId(long value);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.ClusteredIndexUserIdentityAuditingEntityBase : UserIdentityAuditingEntityBase {
    [CompilerGeneratedAttribute]
private long <ClusteredId>k__BackingField;
    [DatabaseGeneratedAttribute("1")]
public long ClusteredId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClusteredId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClusteredId(long value);
}
[ExtensionAttribute]
public static class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.EntityBaseExtensions : object {
    [ExtensionAttribute]
public static T UpdateDeleted(T entity);
}
public class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.EntityExistedResult : object {
    [CompilerGeneratedAttribute]
private int <Result>k__BackingField;
    public int Result { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(int value);
}
public interface Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.IClusteredIndexEntity {
    public long ClusteredId { get; public set; }
    public abstract virtual long get_ClusteredId();
    public abstract virtual void set_ClusteredId(long value);
}
public interface Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.IGuidPrimaryKeyEntity {
    public Guid Id { get; public set; }
    public abstract virtual Guid get_Id();
    public abstract virtual void set_Id(Guid value);
}
public interface Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.IIntPrimaryKeyEntity {
    public int Id { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
}
public abstract class Omnia.Fx.NetCore.Repositories.EntityFramework.Entities.UserIdentityAuditingEntityBase : AuditingEntityBase {
}
public class Omnia.Fx.NetCore.Repositories.FileStorage.Entities.FileOwnerEntity : object {
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
public Guid OmniaServiceId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
public void set_OmniaServiceId(Guid value);
}
public class Omnia.Fx.NetCore.Repositories.FileStorage.Entities.FileStorageEntity : UserIdentityAuditingEntityBase {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <FileMetadataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalStorageFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataJsonValue>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
[DatabaseGeneratedAttribute("1")]
public int Id { get; public set; }
    [ColumnAttribute]
public string FileId { get; public set; }
    [ColumnAttribute]
public Guid FileMetadataTypeId { get; public set; }
    [ColumnAttribute]
public string PhysicalFileName { get; public set; }
    [ColumnAttribute]
public string PhysicalStorageFolderPath { get; public set; }
    [ColumnAttribute]
public string MetadataJsonValue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(string value);
    [CompilerGeneratedAttribute]
public Guid get_FileMetadataTypeId();
    [CompilerGeneratedAttribute]
public void set_FileMetadataTypeId(Guid value);
    [CompilerGeneratedAttribute]
public string get_PhysicalFileName();
    [CompilerGeneratedAttribute]
public void set_PhysicalFileName(string value);
    [CompilerGeneratedAttribute]
public string get_PhysicalStorageFolderPath();
    [CompilerGeneratedAttribute]
public void set_PhysicalStorageFolderPath(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataJsonValue();
    [CompilerGeneratedAttribute]
public void set_MetadataJsonValue(string value);
}
internal class Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageDbContext : DbContextWithAuditing {
    [CompilerGeneratedAttribute]
private DbSet`1<FileStorageEntity> <FileStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<FileOwnerEntity> <FileOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<FileStorageDbContext> <Logger>k__BackingField;
    public DbSet`1<FileStorageEntity> FileStorage { get; public set; }
    public DbSet`1<FileOwnerEntity> FileOwner { get; public set; }
    private ILogger`1<FileStorageDbContext> Logger { get; }
    public FileStorageDbContext(DbContextOptions`1<FileStorageDbContext> options, IOmniaContext omniaContext, IOmniaScopedContext omniaScopedContext, ILogger`1<FileStorageDbContext> logger);
    [CompilerGeneratedAttribute]
public DbSet`1<FileStorageEntity> get_FileStorage();
    [CompilerGeneratedAttribute]
public void set_FileStorage(DbSet`1<FileStorageEntity> value);
    [CompilerGeneratedAttribute]
public DbSet`1<FileOwnerEntity> get_FileOwner();
    [CompilerGeneratedAttribute]
public void set_FileOwner(DbSet`1<FileOwnerEntity> value);
    [CompilerGeneratedAttribute]
private ILogger`1<FileStorageDbContext> get_Logger();
    protected void OnStartupHandled();
    private void EnsureMigrationReset();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
internal class Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1 : object {
    [CompilerGeneratedAttribute]
private FileStorageDbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private FileStorageDbContext DbContext { get; }
    private IOmniaContext OmniaContext { get; }
    private IOmniaServices OmniaServices { get; }
    public FileStorageRepository`1(FileStorageDbContext dbContext, IOmniaContext omniaContext, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private FileStorageDbContext get_DbContext();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<CreateAsync>d__10")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> CreateAsync(IFileInformation fileInfo, TFileMetadataType metadata);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<UpdateAsync>d__11")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<GetAsync>d__12")]
public sealed virtual Task`1<ValueTuple`2<IPersistedFile`1<TFileMetadataType>, IFileInformation>> GetAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<UpdateFilesPathAsync>d__13")]
public sealed virtual Task`1<List`1<IPersistedFile`1<TFileMetadataType>>> UpdateFilesPathAsync(string oldStorageFolderPath, string newStorageFolderPath);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<DeleteAsync>d__14")]
public sealed virtual Task`1<IPersistedFile`1<TFileMetadataType>> DeleteAsync(IFileReference fileRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<GetRegisteredOwnerAsync>d__15")]
public sealed virtual Task`1<IFileOwner> GetRegisteredOwnerAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.FileStorage.FileStorageRepository`1/<RegisterOwnerAsync>d__16")]
public sealed virtual Task`1<IFileOwner> RegisterOwnerAsync(IFileOwner owner);
}
internal interface Omnia.Fx.NetCore.Repositories.FileStorage.IFileStorageRepository`1 {
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> CreateAsync(IFileInformation fileInfo, TFileMetadataType metadata);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> UpdateAsync(IPersistedFile`1<TFileMetadataType> fileToUpdate);
    public abstract virtual Task`1<ValueTuple`2<IPersistedFile`1<TFileMetadataType>, IFileInformation>> GetAsync(IFileReference fileRef);
    public abstract virtual Task`1<List`1<IPersistedFile`1<TFileMetadataType>>> UpdateFilesPathAsync(string oldStorageFolderPath, string newStorageFolderPath);
    public abstract virtual Task`1<IPersistedFile`1<TFileMetadataType>> DeleteAsync(IFileReference fileRef);
    public abstract virtual Task`1<IFileOwner> GetRegisteredOwnerAsync();
    public abstract virtual Task`1<IFileOwner> RegisterOwnerAsync(IFileOwner owner);
}
public class Omnia.Fx.NetCore.Repositories.OmniaEfHistoryRepository : SqlServerHistoryRepository {
    public static string EfMigrationTableName;
    public OmniaEfHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual void ConfigureTable(EntityTypeBuilder`1<HistoryRow> history);
    public virtual string GetInsertScript(HistoryRow row);
}
public abstract class Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2 : object {
    [CompilerGeneratedAttribute]
private IPostRepository`1<TPostContextType> <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPostEmailHandler`2<TPostType, TPostContextType> <PostEmailHandler>k__BackingField;
    private IPostRepository`1<TPostContextType> Repository { get; }
    private IPostEmailHandler`2<TPostType, TPostContextType> PostEmailHandler { get; }
    [ActivatorUtilitiesConstructorAttribute]
public DatabasePostStorageProvider`2(IPostRepository`1<TPostContextType> repository, IPostEmailHandler`2<TPostType, TPostContextType> postEmailHandler);
    [CompilerGeneratedAttribute]
private IPostRepository`1<TPostContextType> get_Repository();
    [CompilerGeneratedAttribute]
private IPostEmailHandler`2<TPostType, TPostContextType> get_PostEmailHandler();
    public abstract virtual ValueTask`1<Guid> CreateTopicId(TPostType post);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<CreateAsync>d__8`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> CreateAsync(TPostType1 post);
    private void ValidatePost(TPostType post);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<DeleteAsync>d__10`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> DeleteAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<GetAsync>d__11`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> GetAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<GetAsync>d__12`1")]
public sealed virtual Task`1<IList`1<IPersistedPost`1<TPostType1>>> GetAsync(Guid topicId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<UpdateAsync>d__13`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> UpdateAsync(IPersistedPost`1<TPostType1> postToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<CheckReadPermission>d__14`1")]
private Task`1<IPersistedPost`1<TPostType1>> CheckReadPermission(IPersistedPost`1<TPostType1> persistedPost);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<ToggleLikeAsync>d__15`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> ToggleLikeAsync(IPersistedPost`1<TPostType1> postToToggle);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.DatabasePostStorageProvider`2/<AddOrUpdateReactionAsync>d__16`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType1>> AddOrUpdateReactionAsync(IPersistedPost`1<TPostType1> postToReact, bool isReacts, ReactionType reactionType);
    public abstract virtual ValueTask HandleCreatingAsync(IPersistedPost`1<TPostType> persistedPostBeingAdded);
    public abstract virtual ValueTask`1<bool> CanCreateAsync(IPersistedPost`1<TPostType> persistedPostBeingAdded);
    public abstract virtual ValueTask`1<bool> CanUpdateAsync(IPersistedPost`1<TPostType> persistedPostInStorage, IPersistedPost`1<TPostType> persistedPostToUpdate);
    public abstract virtual ValueTask`1<bool> CanDeleteAsync(IPersistedPost`1<TPostType> persistedPostBeingDeleted);
    public abstract virtual ValueTask`1<bool> CanReadAsync(IPersistedPost`1<TPostType> persistedPostBeingRead);
}
public class Omnia.Fx.NetCore.Repositories.Post.Entities.LikeEntity : UserIdentityAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PostId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TopicId>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionType <ReactionType>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
[DatabaseGeneratedAttribute("1")]
public Guid Id { get; public set; }
    [ColumnAttribute]
public Guid PostId { get; public set; }
    [ColumnAttribute]
public Guid TopicId { get; public set; }
    public ReactionType ReactionType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PostId();
    [CompilerGeneratedAttribute]
public void set_PostId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_TopicId();
    [CompilerGeneratedAttribute]
public void set_TopicId(Guid value);
    [CompilerGeneratedAttribute]
public ReactionType get_ReactionType();
    [CompilerGeneratedAttribute]
public void set_ReactionType(ReactionType value);
}
public class Omnia.Fx.NetCore.Repositories.Post.Entities.PostEntity : UserIdentityAuditingEntityBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TopicId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PostTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostContentJsonValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletedBy>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
[DatabaseGeneratedAttribute("1")]
public Guid Id { get; public set; }
    [ColumnAttribute]
public Guid TopicId { get; public set; }
    [ColumnAttribute]
public Guid PostTypeId { get; public set; }
    [ColumnAttribute]
public string PostContentJsonValue { get; public set; }
    public string DeletedBy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_TopicId();
    [CompilerGeneratedAttribute]
public void set_TopicId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PostTypeId();
    [CompilerGeneratedAttribute]
public void set_PostTypeId(Guid value);
    [CompilerGeneratedAttribute]
public string get_PostContentJsonValue();
    [CompilerGeneratedAttribute]
public void set_PostContentJsonValue(string value);
    [CompilerGeneratedAttribute]
public string get_DeletedBy();
    [CompilerGeneratedAttribute]
public void set_DeletedBy(string value);
}
public interface Omnia.Fx.NetCore.Repositories.Post.IPostRepository`1 {
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> CreateAsync(TPostType addingPost);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> UpdateAsync(IPersistedPost`1<TPostType> updatingPost);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> GetAsync(IPostReference postRef);
    public abstract virtual Task`1<IList`1<IPersistedPost`1<TPostType>>> GetAsync(Guid topicId);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> DeleteAsync(IPostReference postRef);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> ToggleLikeAsync(IPersistedPost`1<TPostType> updatingPost);
    public abstract virtual Task`1<IPersistedPost`1<TPostType>> AddOrUpdateReactionAsync(IPersistedPost`1<TPostType> postToReact, bool isReacts, ReactionType reactionType);
}
public class Omnia.Fx.NetCore.Repositories.Post.PostDbContext : DbContextWithAuditing {
    [CompilerGeneratedAttribute]
private DbSet`1<PostEntity> <Posts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<LikeEntity> <Likes>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<PostDbContext> <Logger>k__BackingField;
    public DbSet`1<PostEntity> Posts { get; public set; }
    public DbSet`1<LikeEntity> Likes { get; public set; }
    private ILogger`1<PostDbContext> Logger { get; }
    public PostDbContext(DbContextOptions`1<PostDbContext> options, IOmniaContext omniaContext, IOmniaScopedContext omniaScopedContext, ILogger`1<PostDbContext> logger);
    [CompilerGeneratedAttribute]
public DbSet`1<PostEntity> get_Posts();
    [CompilerGeneratedAttribute]
public void set_Posts(DbSet`1<PostEntity> value);
    [CompilerGeneratedAttribute]
public DbSet`1<LikeEntity> get_Likes();
    [CompilerGeneratedAttribute]
public void set_Likes(DbSet`1<LikeEntity> value);
    [CompilerGeneratedAttribute]
private ILogger`1<PostDbContext> get_Logger();
    protected void OnStartupHandled();
    private void EnsureMigrationReset();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
internal class Omnia.Fx.NetCore.Repositories.Post.PostRepository`1 : object {
    [CompilerGeneratedAttribute]
private PostDbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private PostDbContext DbContext { get; }
    private IOmniaContext OmniaContext { get; }
    private IOmniaServices OmniaServices { get; }
    public PostRepository`1(PostDbContext dbContext, IOmniaContext omniaContext, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private PostDbContext get_DbContext();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<CreateAsync>d__10`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> CreateAsync(TPostType addingPost);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<DeleteAsync>d__11`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> DeleteAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<GetAsync>d__12`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> GetAsync(IPostReference postRef);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<GetAsync>d__13`1")]
public sealed virtual Task`1<IList`1<IPersistedPost`1<TPostType>>> GetAsync(Guid topicId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<UpdateAsync>d__14`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> UpdateAsync(IPersistedPost`1<TPostType> updatingPost);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<ToggleLikeAsync>d__15`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> ToggleLikeAsync(IPersistedPost`1<TPostType> togglingPost);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<AddOrUpdateReactionAsync>d__16`1")]
public sealed virtual Task`1<IPersistedPost`1<TPostType>> AddOrUpdateReactionAsync(IPersistedPost`1<TPostType> postToReact, bool isReacts, ReactionType reactionType);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<SetLikesInfoAsync>d__17`1")]
private Task SetLikesInfoAsync(PersistedPost`1<TPostType> post, Guid topicId);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Repositories.Post.PostRepository`1/<SetLikesInfoAsync>d__18`1")]
private Task SetLikesInfoAsync(IList`1<PersistedPost`1<TPostType>> posts, Guid topicId);
    private ValueTuple`2<IList`1<PostLike>, IList`1<UserIdentity>> GetLikesInfo(List`1<LikeEntity> likeEntities);
}
public static class Omnia.Fx.NetCore.Repositories.SchemaHelper : object {
    public static string DropDbViewTemplate(string dbView, string schema);
    public static string DropStoredProcedureTemplate(string storedProcedureName, string schema);
    public static string DropDbFunctionTemplate(string functionName, string schema);
    public static string DropDbTriggerTemplate(string dbTrigger, string schema);
    public static string DropDbType(string dbType, string schema);
    public static string EnsureReadonlySchema();
    public static string GetReadonlyDbObject(string dbObject);
    public static string GetEnsureMigrationReset(DbContext context, string firstEverMigration, string newInitialMigration, string efVersion);
}
public class Omnia.Fx.NetCore.Repositories.UserDefinedTypes : object {
}
internal class Omnia.Fx.NetCore.Repositories.VersionedData.Entities.VersionedDataEntity : UserIdentityAuditingEntityBase {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataIdentifierId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedOutBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
[DatabaseGeneratedAttribute("1")]
public int Id { get; public set; }
    [ColumnAttribute]
public string DataIdentifierId { get; public set; }
    [ColumnAttribute]
public Guid DataTypeId { get; public set; }
    [ColumnAttribute]
public int MajorVersion { get; public set; }
    [ColumnAttribute]
public int MinorVersion { get; public set; }
    [ColumnAttribute]
public string CheckedOutBy { get; public set; }
    [ColumnAttribute]
public string JsonValue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_DataIdentifierId();
    [CompilerGeneratedAttribute]
public void set_DataIdentifierId(string value);
    [CompilerGeneratedAttribute]
public Guid get_DataTypeId();
    [CompilerGeneratedAttribute]
public void set_DataTypeId(Guid value);
    [CompilerGeneratedAttribute]
public int get_MajorVersion();
    [CompilerGeneratedAttribute]
public void set_MajorVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinorVersion();
    [CompilerGeneratedAttribute]
public void set_MinorVersion(int value);
    [CompilerGeneratedAttribute]
public string get_CheckedOutBy();
    [CompilerGeneratedAttribute]
public void set_CheckedOutBy(string value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
}
internal class Omnia.Fx.NetCore.Repositories.VersionedData.Entities.VersionedDataOwnerEntity : object {
    [CompilerGeneratedAttribute]
private Guid <OmniaServiceId>k__BackingField;
    [KeyAttribute]
[ColumnAttribute]
public Guid OmniaServiceId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
public void set_OmniaServiceId(Guid value);
}
internal class Omnia.Fx.NetCore.Repositories.VersionedData.VersionedDataDbContext : DbContextWithAuditing {
    [CompilerGeneratedAttribute]
private DbSet`1<VersionedDataEntity> <VersionedData>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<VersionedDataOwnerEntity> <VersionedDataOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<VersionedDataDbContext> <Logger>k__BackingField;
    public DbSet`1<VersionedDataEntity> VersionedData { get; public set; }
    public DbSet`1<VersionedDataOwnerEntity> VersionedDataOwner { get; public set; }
    private ILogger`1<VersionedDataDbContext> Logger { get; }
    public VersionedDataDbContext(DbContextOptions`1<VersionedDataDbContext> options, IOmniaContext omniaContext, IOmniaScopedContext omniaScopedContext, ILogger`1<VersionedDataDbContext> logger);
    [CompilerGeneratedAttribute]
public DbSet`1<VersionedDataEntity> get_VersionedData();
    [CompilerGeneratedAttribute]
public void set_VersionedData(DbSet`1<VersionedDataEntity> value);
    [CompilerGeneratedAttribute]
public DbSet`1<VersionedDataOwnerEntity> get_VersionedDataOwner();
    [CompilerGeneratedAttribute]
public void set_VersionedDataOwner(DbSet`1<VersionedDataOwnerEntity> value);
    [CompilerGeneratedAttribute]
private ILogger`1<VersionedDataDbContext> get_Logger();
    protected void OnStartupHandled();
    private void EnsureMigrationReset();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
public interface Omnia.Fx.NetCore.RequestedResourceProviders.ISqlResourceProvider {
    public abstract virtual SqlServiceResource Get(Guid sqlResourceId);
}
internal class Omnia.Fx.NetCore.RequestedResourceProviders.SqlResourceProvider : object {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <AppSettingsMonitor>k__BackingField;
    private IOptionsMonitor`1<OmniaAppSettings> AppSettingsMonitor { get; }
    public SqlResourceProvider(IOptionsMonitor`1<OmniaAppSettings> appSettingsMonitor);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_AppSettingsMonitor();
    public sealed virtual SqlServiceResource Get(Guid sqlResourceId);
}
public interface Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.IPermissionsChangedListener {
}
internal class Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler : object {
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelperOverHttp <PermissionStoreChangedHelperOverHttp>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionsChangedListener <PermissionsChangedListener>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<PermissionChangedDatabaseTransactionHandler> <Logger>k__BackingField;
    private IPermissionStoreChangedHelperOverHttp PermissionStoreChangedHelperOverHttp { get; }
    private IPermissionsChangedListener PermissionsChangedListener { get; }
    private DbContext DbContext { get; }
    private ILogger`1<PermissionChangedDatabaseTransactionHandler> Logger { get; }
    public PermissionChangedDatabaseTransactionHandler(IPermissionStoreChangedHelperOverHttp permissionStoreChangedHelperOverHttp, IPermissionsChangedListener permissionsChangedListener, DbContext dbContext, ILogger`1<PermissionChangedDatabaseTransactionHandler> logger);
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelperOverHttp get_PermissionStoreChangedHelperOverHttp();
    [CompilerGeneratedAttribute]
private IPermissionsChangedListener get_PermissionsChangedListener();
    [CompilerGeneratedAttribute]
private DbContext get_DbContext();
    [CompilerGeneratedAttribute]
private ILogger`1<PermissionChangedDatabaseTransactionHandler> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler/<UpdatePermissionStateAsync>d__13")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> UpdatePermissionStateAsync(IPermissionBindingStateUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler/<AddOrUpdatePermissionsAsync>d__14")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsAsync(IPermissionBindingsUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler/<AddOrUpdatePermissionsByCurrentIdentityAsync>d__15")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsByCurrentIdentityAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext, Dictionary`2<Guid, RoleEvaluationResult> roleResources);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler/<MapPermissionInheritanceAsync>d__16")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> MapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Security.PermissionDatabaseReplication.PermissionChangedDatabaseTransactionHandler/<UnmapPermissionInheritanceAsync>d__17")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> UnmapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
}
internal interface Omnia.Fx.NetCore.Services.IConfigurationWatcher {
}
public interface Omnia.Fx.NetCore.Services.IMimeTypeUtilService {
    public abstract virtual string GetMimeTypeFromFileExtension(string fileExtension);
    public abstract virtual string GetMimeTypeFromFileName(string fileName);
    public abstract virtual List`1<string> GetFileExtensionFromMimeType(string mimeType);
}
public interface Omnia.Fx.NetCore.Services.IOmniaManifestLoader {
    public abstract virtual ServiceManifest DeserializeFile(string path);
}
internal class Omnia.Fx.NetCore.Services.MimeTypeUtilService : object {
    private static IDictionary`2<string, string> _mappings;
    private static MimeTypeUtilService();
    public sealed virtual string GetMimeTypeFromFileExtension(string fileExtension);
    public sealed virtual string GetMimeTypeFromFileName(string fileName);
    public sealed virtual List`1<string> GetFileExtensionFromMimeType(string mimeType);
}
internal class Omnia.Fx.NetCore.Services.OmniaManifestLoader : object {
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaManifestLoader> <Logger>k__BackingField;
    private ILogger`1<OmniaManifestLoader> Logger { get; }
    public OmniaManifestLoader(ILogger`1<OmniaManifestLoader> logger);
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaManifestLoader> get_Logger();
    public sealed virtual ServiceManifest DeserializeFile(string path);
}
internal class Omnia.Fx.NetCore.Tenant.DeploymentWatcher : IDeploymentWatcher {
    private object _lock;
    private bool IsStartup;
    [CompilerGeneratedAttribute]
private State <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaLogger`1<DeploymentWatcher> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaLicensingSettings> <LicensingSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDeployedOmniaExtensionsChangedListener> <ResolveScopedExtensionListerner>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDeployedOmniaServicesChangedListener> <ResolveScopedOmniaServiceListerner>k__BackingField;
    private State CurrentState { get; private set; }
    private IOmniaLogger`1<DeploymentWatcher> Logger { get; }
    public IOptionsMonitor`1<OmniaLicensingSettings> LicensingSettings { get; }
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IDeployedOmniaExtensionsChangedListener> ResolveScopedExtensionListerner { get; }
    private ISingletonRefToScopedService`1<IDeployedOmniaServicesChangedListener> ResolveScopedOmniaServiceListerner { get; }
    public DeploymentWatcher(IOmniaLogger`1<DeploymentWatcher> logger, IOptionsMonitor`1<OmniaDeployedExtensionsSettings> deployedExtensionSettings, IOptionsMonitor`1<OmniaLicensingSettings> licensingSettings, IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IDeployedOmniaExtensionsChangedListener> resolveScopedExtensionListerner, ISingletonRefToScopedService`1<IDeployedOmniaServicesChangedListener> resolveScopedServiceListerner);
    [CompilerGeneratedAttribute]
private State get_CurrentState();
    [CompilerGeneratedAttribute]
private void set_CurrentState(State value);
    [CompilerGeneratedAttribute]
private IOmniaLogger`1<DeploymentWatcher> get_Logger();
    [CompilerGeneratedAttribute]
public IOptionsMonitor`1<OmniaLicensingSettings> get_LicensingSettings();
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDeployedOmniaExtensionsChangedListener> get_ResolveScopedExtensionListerner();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IDeployedOmniaServicesChangedListener> get_ResolveScopedOmniaServiceListerner();
    private State CreateState(OmniaDeployedExtensionsSettings settingsToCreateFrom);
    private bool EqualExtensionStates(State state1, State state2);
    private bool EqualServiceStates(State state1, State state2);
    private void PublishIfChanged(State newState);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1(OmniaDeployedExtensionsSettings setting, string unknownValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_2(OmniaLicensingSettings a);
}
public interface Omnia.Fx.NetCore.Tenant.IDeployedOmniaExtensionsChangedListener {
    public abstract virtual Task OnOmniaExtensionsChangedAsync(IList`1<OmniaExtension> before, IList`1<OmniaExtension> after, bool isStartup);
}
public interface Omnia.Fx.NetCore.Tenant.IDeployedOmniaServicesChangedListener {
    public abstract virtual Task OnOmniaServicesChangedAsync(IList`1<ServiceManifest> before, IList`1<ServiceManifest> after, bool isStartup);
}
internal class Omnia.Fx.NetCore.Tenant.IDeploymentWatcher : object {
}
internal class Omnia.Fx.NetCore.Tenant.OmniaCurrentServiceProvider : object {
    [CompilerGeneratedAttribute]
private Guid <ServiceId>k__BackingField;
    public Guid ServiceId { get; public set; }
    public OmniaCurrentServiceProvider(Guid serviceId);
    [CompilerGeneratedAttribute]
public Guid get_ServiceId();
    [CompilerGeneratedAttribute]
public void set_ServiceId(Guid value);
}
internal class Omnia.Fx.NetCore.Tenant.OmniaDeploymentState : object {
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaDeploymentState> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> <DeployedExtensionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ILogger`1<OmniaDeploymentState> Logger { get; }
    private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> DeployedExtensionSettings { get; }
    private IServiceProvider ServiceProvider { get; }
    public OmniaExtension Current { get; }
    public IList`1<OmniaExtension> All { get; }
    private IOmniaServiceDefinition Omnia.Fx.Tenant.IOmniaServices.Current { get; }
    private IList`1<IOmniaServiceDefinition> Omnia.Fx.Tenant.IOmniaServices.All { get; }
    public OmniaDeploymentState(ILogger`1<OmniaDeploymentState> logger, IOptionsMonitor`1<OmniaDeployedExtensionsSettings> deployedExtensionSettings, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaDeploymentState> get_Logger();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaDeployedExtensionsSettings> get_DeployedExtensionSettings();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual OmniaExtension get_Current();
    public sealed virtual IList`1<OmniaExtension> get_All();
    private sealed virtual override IOmniaServiceDefinition Omnia.Fx.Tenant.IOmniaServices.get_Current();
    private sealed virtual override IList`1<IOmniaServiceDefinition> Omnia.Fx.Tenant.IOmniaServices.get_All();
    public sealed virtual IList`1<IOmniaServiceDefinition> GetByExtension(OmniaExtension extension);
    public sealed virtual IOmniaServiceDefinition GetById(Guid omniaServiceId);
    private Guid GetCurrentServiceId();
    private Guid GetCurrentExtensionId();
    private ValueTuple`2<Guid, Guid> InitCurrentServiceProvider(OmniaCurrentServiceProvider provider);
    private Guid GetExtensionIdByServiceId(Guid serviceId);
}
[ObsoleteAttribute("deprecated, this code is in preview and might change in minor releases. The code has not been heavily tested yet.", "False")]
public class Omnia.Fx.NetCore.TransactionScopeEnlistments.TransactionScopeEnlistment : object {
    public void InDoubt(Action inDoubtAction);
    public Task InDoubtAsync(Func`1<Task> inDoubtAsyncAction);
    public void OnCommited(Action onCommitedAction);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.TransactionScopeEnlistments.TransactionScopeEnlistment/<OnCommitedAsync>d__5")]
public Task OnCommitedAsync(Func`1<Task> onCommitedAsyncAction);
    public void OnRolledBack(Action onRolledBackAction);
    public Task OnRolledBackAsync(Func`1<Task> onRolledBackAsyncAction);
}
internal interface Omnia.Fx.NetCore.UserContextHandling.IUserContextSwitcher {
    public abstract virtual Task RunInUserContextAsync(string encryptedUserToken, Func`2<IScopedServiceContext, Task> actionToRun);
}
internal class Omnia.Fx.NetCore.UserContextHandling.UserContextSwitcher : object {
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef <ServiceScopedContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IOmniaUserTokenProvider> <SingletonRefUserTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> <SingletonRefUserContextHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<UserContextSwitcher> <Logger>k__BackingField;
    private IScopedContextFactoryForSingletonRef ServiceScopedContextFactory { get; }
    private ISingletonRefToScopedService`1<IOmniaUserTokenProvider> SingletonRefUserTokenProvider { get; }
    private ISingletonRefToScopedService`1<IUserContextHandler> SingletonRefUserContextHandler { get; }
    private ILogger`1<UserContextSwitcher> Logger { get; }
    public UserContextSwitcher(IScopedContextFactoryForSingletonRef serviceScopedContextFactory, ISingletonRefToScopedService`1<IOmniaUserTokenProvider> userTokenProvider, ISingletonRefToScopedService`1<IUserContextHandler> singletonRefUserContextHandler, ILogger`1<UserContextSwitcher> logger);
    [CompilerGeneratedAttribute]
private IScopedContextFactoryForSingletonRef get_ServiceScopedContextFactory();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IOmniaUserTokenProvider> get_SingletonRefUserTokenProvider();
    [CompilerGeneratedAttribute]
private ISingletonRefToScopedService`1<IUserContextHandler> get_SingletonRefUserContextHandler();
    [CompilerGeneratedAttribute]
private ILogger`1<UserContextSwitcher> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.UserContextHandling.UserContextSwitcher/<RunInUserContextAsync>d__13")]
public sealed virtual Task RunInUserContextAsync(string encryptedUserToken, Func`2<IScopedServiceContext, Task> actionToRun);
}
public class Omnia.Fx.NetCore.Utils.DocumentProcessing.CellPropertyInfo : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string PropertyName { get; public set; }
    public string DisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
}
public class Omnia.Fx.NetCore.Utils.DocumentProcessing.SpreadsheetDocumentUtils : object {
    private string defaultSheetName;
    private CultureInfo cultureInfo;
    private string dateFormat;
    private Nullable`1<UInt32> dateNumberFormatId;
    public string DefaultSheetName { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public string DateFormat { get; public set; }
    public UInt32 DateNumberFormatId { get; public set; }
    public SpreadsheetDocumentUtils(string defaultSheetName);
    public SpreadsheetDocumentUtils(string defaultSheetName, CultureInfo cultureInfo);
    public SpreadsheetDocumentUtils(string defaultSheetName, string dateFormat, UInt32 dateNumberFormatId);
    public string get_DefaultSheetName();
    public void set_DefaultSheetName(string value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public UInt32 get_DateNumberFormatId();
    public void set_DateNumberFormatId(UInt32 value);
    public ValueTask`1<MemoryStream> InsertDataListing(List`1<CellPropertyInfo> renderProperties, IEnumerable`1<object> listingData);
    public ValueTask`1<MemoryStream> InsertDataListing(List`1<CellPropertyInfo> renderProperties, IEnumerable`1<Dictionary`2<string, object>> listingData);
    public MemoryStream CreateEmptyDocument();
    private void AddStylesPart(SpreadsheetDocument spreadSheet);
    private void InsertListingHeaderCells(UInt32 rowIndex, Worksheet worksheet, List`1<CellPropertyInfo> renderProperties);
    private void InsertListingDataRows(UInt32 startRow, Worksheet worksheet, List`1<CellPropertyInfo> renderProperties, List`1<object> rowDataListing);
    private void InsertListingDataRows(UInt32 startRow, Worksheet worksheet, List`1<CellPropertyInfo> renderProperties, List`1<Dictionary`2<string, object>> rowDataListing);
    private Cell AppendCell(Row row, object cellValue, Type propertyType);
    private Cell AppendTableHeaderCell(Row row, string title);
    private Row AppendRow(Worksheet ws, UInt32 rowIndex);
}
public static class Omnia.Fx.NetCore.Utils.LocalAppSettings : object {
    private static string LocalAppSettingsFileName;
    [CompilerGeneratedAttribute]
private static JObject <LocalSettings>k__BackingField;
    public static JObject LocalSettings { get; }
    private static LocalAppSettings();
    [CompilerGeneratedAttribute]
public static JObject get_LocalSettings();
    public static T Get();
}
public class Omnia.Fx.NetCore.Utils.Query.InvalidFieldValueQueryException : Exception {
    public InvalidFieldValueQueryException(string message);
    public InvalidFieldValueQueryException(string message, Exception innerException);
}
public interface Omnia.Fx.NetCore.Utils.Query.ISqlParametersHandler {
    public abstract virtual ICollection`1<SqlParameter> GetParams();
    public abstract virtual DynamicParameters GetDynamicParameters();
    public abstract virtual SqlParameter EnsureParams(object paramValue);
}
public class Omnia.Fx.NetCore.Utils.Query.ItemQueryHelper : object {
    [CompilerGeneratedAttribute]
private bool <IncludeTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ItemLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QueryOrder> <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryFilterHelper <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Joins>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Select>k__BackingField;
    public bool IncludeTotal { get; }
    public Nullable`1<int> ItemLimit { get; }
    public Nullable`1<int> Skip { get; }
    public List`1<QueryOrder> OrderBy { get; }
    public QueryFilterHelper Filters { get; }
    public List`1<string> Joins { get; public set; }
    public string Select { get; public set; }
    protected string PagingString { get; }
    protected string DefaultFilter { get; }
    public ItemQueryHelper(ItemQuery itemQuery);
    [CompilerGeneratedAttribute]
public bool get_IncludeTotal();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ItemLimit();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public List`1<QueryOrder> get_OrderBy();
    [CompilerGeneratedAttribute]
public QueryFilterHelper get_Filters();
    [CompilerGeneratedAttribute]
public List`1<string> get_Joins();
    [CompilerGeneratedAttribute]
public void set_Joins(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Select();
    [CompilerGeneratedAttribute]
public void set_Select(string value);
    protected virtual string get_PagingString();
    protected virtual string get_DefaultFilter();
    [ObsoleteAttribute]
protected virtual ValueTask`1<ValueTuple`2<string, List`1<SqlParameter>>> EnsureDynamicFilterAsync();
    protected virtual ValueTask`1<string> EnsureDynamicFilterAsync(ISqlParametersHandler sqlParametersHandler);
    [ObsoleteAttribute]
protected virtual ValueTask`1<ValueTuple`2<string, List`1<SqlParameter>>> EnsureDynamicJoinAsync(string joinColumn);
    protected virtual ValueTask`1<string> EnsureDynamicJoinAsync(ISqlParametersHandler sqlParametersHandler, string joinColumn);
    public static ISqlParametersHandler CreateSqlParametersHandler();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Utils.Query.ItemQueryHelper/<GetQueryAsync>d__34")]
[ObsoleteAttribute("Please use GetQuery with ISqlParametersHandler instead.")]
public virtual ValueTask`1<ValueTuple`2<string, List`1<SqlParameter>>> GetQueryAsync(string tableName, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Utils.Query.ItemQueryHelper/<GetQueryAsync>d__35")]
public virtual ValueTask`1<string> GetQueryAsync(ISqlParametersHandler sqlParametersHandler, string tableName, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Utils.Query.ItemQueryHelper/<GetQueryWithoutSortingAndPagingAsync>d__36")]
[ObsoleteAttribute("Please use GetQuery with ISqlParametersHandler instead.")]
public virtual ValueTask`1<ValueTuple`2<string, List`1<SqlParameter>>> GetQueryWithoutSortingAndPagingAsync(string tableName, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias, int additionalParamIndex);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.Utils.Query.ItemQueryHelper/<GetQueryWithoutSortingAndPagingAsync>d__37")]
public virtual ValueTask`1<string> GetQueryWithoutSortingAndPagingAsync(ISqlParametersHandler sqlParametersHandler, string tableName, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias);
    private string CombineWhereWithDynamicFilter(string whereString, string dynamicFilter);
    private string CombineJoinsWithDynamicJoin(string joinsString, string dynamicJoin);
    protected virtual string GetQueryString(string tableName, string whereString, string alias, string dynamicFilter, string dynamicJoin);
    protected virtual string GetQueryWithoutSortingAndPagingString(string tableName, string whereString, string alias, string dynamicFilter, string dynamicJoin);
    protected virtual string GetSelectString(string tableName, string alias);
    protected virtual string GetJoinstring();
    protected virtual string GetWhereString(ISqlParametersHandler sqlParametersHandler, string tableName, QueryFilterHelper filters, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias);
    [ObsoleteAttribute]
protected virtual ValueTuple`2<string, List`1<SqlParameter>> GetWhereString(string tableName, QueryFilterHelper filters, QueryFilterHelper additionalFilters, bool excludeDeleted, string alias, int additionalParamIndex);
    protected virtual string GetWhereString(string tableName, string filterString, bool excludeDeleted, string alias);
    protected virtual string GetOrderByString(List`1<QueryOrder> orderBy, Nullable`1<int> skip, Nullable`1<int> take);
    protected virtual string GetPagingString(Nullable`1<int> skip, Nullable`1<int> take);
    [ObsoleteAttribute]
protected virtual ValueTuple`2<string, List`1<SqlParameter>> GetFiltersString(string alias, QueryFilterHelper[] filters);
    [ObsoleteAttribute]
private ValueTuple`2<string, List`1<SqlParameter>> GetFiltersString(string alias, int additionalParamIndex, QueryFilterHelper[] filters);
    protected virtual string GetFiltersString(ISqlParametersHandler sqlParametersHandler, string alias, QueryFilterHelper[] filters);
    protected string GetAliasWithDot(string alias);
}
public class Omnia.Fx.NetCore.Utils.Query.QueryFilterHelper : object {
    [CompilerGeneratedAttribute]
private string <ParameterPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterLogicalOperator <LogicalOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <FieldValues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QueryFilterHelper> <Filters>k__BackingField;
    protected string ParameterPrefix { get; }
    public FilterLogicalOperator LogicalOperator { get; public set; }
    public FilterOperator Operator { get; public set; }
    public string FieldName { get; public set; }
    public IList`1<object> FieldValues { get; public set; }
    public List`1<QueryFilterHelper> Filters { get; public set; }
    public QueryFilterHelper(QueryFilter queryFilter);
    [CompilerGeneratedAttribute]
protected string get_ParameterPrefix();
    [CompilerGeneratedAttribute]
public FilterLogicalOperator get_LogicalOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalOperator(FilterLogicalOperator value);
    [CompilerGeneratedAttribute]
public FilterOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(FilterOperator value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public IList`1<object> get_FieldValues();
    [CompilerGeneratedAttribute]
public void set_FieldValues(IList`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<QueryFilterHelper> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<QueryFilterHelper> value);
    public ValueTuple`2<string, List`1<SqlParameter>> GetFilterString(Func`1<string> getParamNameFactory, string alias);
    public string GetFilterString(ISqlParametersHandler sqlParametersHandler, string alias);
    private void Init(QueryFilter queryFilter);
    private string GetWhereExpressionString(ISqlParametersHandler sqlParametersHandler, QueryFilterHelper filter, bool appendLogicalOperator, string alias);
    private string GetWhereExpressionString(ISqlParametersHandler sqlParametersHandler, List`1<QueryFilterHelper> filters, string alias);
    private string GetSingleValueOperatorString(ISqlParametersHandler sqlParametersHandler, FilterOperator filterOperator, QueryFilterHelper filter);
    private string GetContainsOperatorString(ISqlParametersHandler sqlParametersHandler, Object[] fieldValues);
    private string GetBitwiseOperatorString(ISqlParametersHandler sqlParametersHandler, QueryFilterHelper filter);
    private String[] GetFieldValuesString(ISqlParametersHandler sqlParametersHandler, Object[] fieldValues);
    private string GetLogicalOperatorString(FilterLogicalOperator filterLogicalOperator);
    private string GetSpecialFilterString(QueryFilterHelper filter);
    private bool IsNumber(object value);
}
public class Omnia.Fx.NetCore.Utils.Query.RollupHelper : object {
    [CompilerGeneratedAttribute]
private RollupSetting <Setting>k__BackingField;
    protected RollupSetting Setting { get; protected set; }
    public RollupHelper(RollupSetting setting);
    [CompilerGeneratedAttribute]
protected void set_Setting(RollupSetting value);
    [CompilerGeneratedAttribute]
protected RollupSetting get_Setting();
    public IFilterLogicalExpression ResolveResourcesFilters(IFilterExpression source, string primaryKeyColumnName);
    public IFilterLogicalExpression ResolveCustomFilters(IFilterExpression source, string primaryKeyColumnName, bool enableWildcardSearch);
    private IFilterLogicalExpression ResolveResourceFilters(IFilterExpression source, ResourceSetting setting);
    public static IFilterLogicalExpression ResolveFilter(IFilterLogicalExpression source, RollupFilter rollupFilter, bool enableWildcardSearch);
    private static IFilterLogicalExpression ResolveTaxonomyFilterValue(IFilterExpression filterExpression, string propertyName, TaxonomyPropFilterValue taxonomyPropertyValue);
    private static IFilterLogicalExpression ResolveTextSearchesFilterValue(IFilterExpression filterExpression, RollupFilter rollupFilter, bool enableWildcardSearch);
}
internal class Omnia.Fx.NetCore.Utils.Query.SqlParametersHandler : object {
    private Dictionary`2<object, SqlParameter> _paramsDictionary;
    [CompilerGeneratedAttribute]
private Func`1<string> <GetParamNameFactory>k__BackingField;
    private Func`1<string> GetParamNameFactory { get; }
    [ObsoleteAttribute("It is only used for obsolete query. New query should just use the default constructor.")]
public SqlParametersHandler(Func`1<string> getParamNameFactory);
    [CompilerGeneratedAttribute]
private Func`1<string> get_GetParamNameFactory();
    public sealed virtual SqlParameter EnsureParams(object paramValue);
    public sealed virtual DynamicParameters GetDynamicParameters();
    public sealed virtual ICollection`1<SqlParameter> GetParams();
}
public class Omnia.Fx.NetCore.VersionedData.HttpContract : object {
}
internal interface Omnia.Fx.NetCore.VersionedData.IVersionedDataRepository`1 {
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CreateAsync(TVersionedDataType data);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> UpdateAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate, bool checkIn);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> PublishAsync(IVersionedData`1<TVersionedDataType> versionToPublish);
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CheckOutAsync(IVersionedDataIdentifier dataToCheckOut, bool takeOver);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> DiscardAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToDiscard);
    public abstract virtual ValueTask`1<IList`1<IVersionedData`1<TVersionedDataType>>> GetDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> GetDataAsync(IVersionReference versionToGetDataFor);
    public abstract virtual ValueTask`1<IList`1<IVersionInformation>> GetVersionInfoAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IDictionary`2<string, IVersionReference>> GetLatestPublishedAsync(IVersionedDataIdentifier[] dataToGetPublishedVersionFor);
    public abstract virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLatestVersionRefAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<ValueTuple`4<ICheckedoutVersionedData`1<TVersionedDataType>, ICheckedoutVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>>> GetLatestDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IList`1<IVersionInformation>> DeleteAsync(IVersionedDataIdentifier dataTodelete);
    public abstract virtual ValueTask`1<IDataOwner> GetRegisteredOwnerAsync();
    public abstract virtual ValueTask`1<IDataOwner> RegisterOwnerAsync(IDataOwner owner);
}
public interface Omnia.Fx.NetCore.VersionedData.IVersionedDataService`1 {
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CreateAsync(TVersionedDataType data);
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> UpdateAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> CheckInAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> PublishAsync(IVersionedData`1<TVersionedDataType> versionToPublish);
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CheckOutAsync(IVersionedDataIdentifier dataToCheckOut, bool takeOver);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> DiscardAsync(ICheckedoutVersionedData`1<TVersionedDataType> dataToDiscard);
    public abstract virtual ValueTask`1<IList`1<IVersionedData`1<TVersionedDataType>>> GetDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IList`1<IVersionInformation>> GetAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> GetDataAsync(IVersionReference versionToGetDataFor);
    public abstract virtual ValueTask`1<IDictionary`2<string, IVersionReference>> GetLatestPublishedAsync(IVersionedDataIdentifier[] dataToGetPublishedVersionFor);
    public abstract virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLatestAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<ValueTuple`4<ICheckedoutVersionedData`1<TVersionedDataType>, ICheckedoutVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>>> GetLatestDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    public abstract virtual ValueTask`1<IList`1<IVersionInformation>> DeleteAsync(IVersionedDataIdentifier dataTodelete);
}
internal interface Omnia.Fx.NetCore.VersionedData.IVersionedDataStorageService`1 {
    public abstract virtual ValueTask`1<IDataOwner> GetRegisteredOwnerAsync();
    public abstract virtual Task RegisterOwnerAsync(IDataOwner owner);
}
public interface Omnia.Fx.NetCore.VersionedData.IVersionedDataTypePermissionHandler`1 {
    public abstract virtual ValueTask`1<string> CanCreateAsync(TVersionedDataType newData);
    public abstract virtual ValueTask`1<bool> CanUpdateAsync(IVersionedDataIdentifier dataIdentifier, ICheckedoutVersionedData`1<TVersionedDataType> latestVersionDataInStorage, ICheckedoutVersionedData`1<TVersionedDataType> versionedDataToWrite);
    public abstract virtual ValueTask`1<bool> CanCheckOutAsync(IVersionedDataIdentifier dataIdentifier, IVersionedData`1<TVersionedDataType> latestVersionDataInStorage);
    public abstract virtual ValueTask`1<bool> CanDeleteAsync(IVersionedDataIdentifier dataIdentifier, IList`1<IVersionedData`1<TVersionedDataType>> allVersionBeingDeleted);
    public abstract virtual ValueTask`1<bool> CanPublishAsync(IVersionedDataIdentifier dataIdentifier, ICheckedoutVersionedData`1<TVersionedDataType> latestVersionDataInStorage, IVersionedData`1<TVersionedDataType> versionedDataToWrite);
    public abstract virtual ValueTask`1<bool> CanReadAsync(IVersionedDataIdentifier dataIdentifier, IList`1<IVersionedData`1<TVersionedDataType>> allVersionBeingRead);
}
internal class Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1 : object {
    [CompilerGeneratedAttribute]
private IVersionedDataStorageService`1<TVersionedDataType> <VersionedDataStorageService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaExtensions <OmniaExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionedDataService`1<TVersionedDataType> <CorrentInterfaceForContext>k__BackingField;
    [CompilerGeneratedAttribute]
private DataToVersionValidationHelper`1<TVersionedDataType> <ValidationHelper>k__BackingField;
    private IVersionedDataStorageService`1<TVersionedDataType> VersionedDataStorageService { get; }
    private IOmniaServices OmniaServices { get; }
    private IOmniaExtensions OmniaExtensions { get; }
    private IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    private IVersionedDataService`1<TVersionedDataType> CorrentInterfaceForContext { get; private set; }
    private DataToVersionValidationHelper`1<TVersionedDataType> ValidationHelper { get; }
    public VersionDataRouteService`1(ILogger`1<VersionDataRouteService`1<TVersionedDataType>> logger, IVersionedDataStorageService`1<TVersionedDataType> versionedDataStorageService, IOmniaServices omniaServices, IOmniaExtensions omniaExtensions, IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory);
    [CompilerGeneratedAttribute]
private IVersionedDataStorageService`1<TVersionedDataType> get_VersionedDataStorageService();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
private IOmniaExtensions get_OmniaExtensions();
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
private IVersionedDataService`1<TVersionedDataType> get_CorrentInterfaceForContext();
    [CompilerGeneratedAttribute]
private void set_CorrentInterfaceForContext(IVersionedDataService`1<TVersionedDataType> value);
    [CompilerGeneratedAttribute]
private DataToVersionValidationHelper`1<TVersionedDataType> get_ValidationHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<UpdateAsync>d__22")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> UpdateAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<CheckInAsync>d__23")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> CheckInAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToCheckIn);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<CheckOutAsync>d__24")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CheckOutAsync(IVersionedDataIdentifier dataToCheckOut, bool takeOver);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<CreateAsync>d__25")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CreateAsync(TVersionedDataType data);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<DeleteAsync>d__26")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> DeleteAsync(IVersionedDataIdentifier dataTodelete);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetDataAsync>d__27")]
public sealed virtual ValueTask`1<IList`1<IVersionedData`1<TVersionedDataType>>> GetDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetAsync>d__28")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> GetAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetDataAsync>d__29")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> GetDataAsync(IVersionReference versionToGetDataFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetLatestPublishedAsync>d__30")]
public sealed virtual ValueTask`1<IDictionary`2<string, IVersionReference>> GetLatestPublishedAsync(IVersionedDataIdentifier[] dataToGetPublishedVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetLatestAsync>d__31")]
public sealed virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLatestAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetLatestDataAsync>d__32")]
public sealed virtual ValueTask`1<ValueTuple`4<ICheckedoutVersionedData`1<TVersionedDataType>, ICheckedoutVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>>> GetLatestDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<PublishAsync>d__33")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> PublishAsync(IVersionedData`1<TVersionedDataType> versionToPublish);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<DiscardAsync>d__34")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> DiscardAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToDiscard);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionDataRouteService`1/<GetCorrectInterfaceImplAsync>d__35")]
private ValueTask`1<IVersionedDataService`1<TVersionedDataType>> GetCorrectInterfaceImplAsync();
}
internal class Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1 : object {
    [CompilerGeneratedAttribute]
private VersionedDataDbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionedDataTypePermissionHandler`1<TVersionedDataType> <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private VersionedDataDbContext DbContext { get; }
    private IVersionedDataTypePermissionHandler`1<TVersionedDataType> PermissionChecker { get; }
    private IOmniaContext OmniaContext { get; }
    private IOmniaServices OmniaServices { get; }
    public VersionedDataRepository`1(VersionedDataDbContext dbContext, IOmniaContext omniaContext, IVersionedDataTypePermissionHandler`1<TVersionedDataType> permissionChecker, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private VersionedDataDbContext get_DbContext();
    [CompilerGeneratedAttribute]
private IVersionedDataTypePermissionHandler`1<TVersionedDataType> get_PermissionChecker();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<CreateAsync>d__13")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CreateAsync(TVersionedDataType data);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<UpdateAsync>d__14")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> UpdateAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate, bool checkIn);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<DiscardAsync>d__15")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> DiscardAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToDiscard);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<CheckOutAsync>d__16")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CheckOutAsync(IVersionedDataIdentifier dataToCheckOut, bool takeOver);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<DeleteAsync>d__17")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> DeleteAsync(IVersionedDataIdentifier dataTodelete);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetDataAsync>d__18")]
public sealed virtual ValueTask`1<IList`1<IVersionedData`1<TVersionedDataType>>> GetDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetDataAsync>d__19")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> GetDataAsync(IVersionReference versionToGetDataFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetLatestDataAsync>d__20")]
public sealed virtual ValueTask`1<ValueTuple`4<ICheckedoutVersionedData`1<TVersionedDataType>, ICheckedoutVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>>> GetLatestDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetLatestPublishedAsync>d__21")]
public sealed virtual ValueTask`1<IDictionary`2<string, IVersionReference>> GetLatestPublishedAsync(IVersionedDataIdentifier[] dataToGetPublishedVersionFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetLatestVersionRefAsync>d__22")]
public sealed virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLatestVersionRefAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetVersionInfoAsync>d__23")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> GetVersionInfoAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<PublishAsync>d__24")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> PublishAsync(IVersionedData`1<TVersionedDataType> versionToPublish);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetRegisteredOwnerAsync>d__25")]
public sealed virtual ValueTask`1<IDataOwner> GetRegisteredOwnerAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<RegisterOwnerAsync>d__26")]
public sealed virtual ValueTask`1<IDataOwner> RegisterOwnerAsync(IDataOwner owner);
    private CheckedoutVersionedData`1<DataType> CreateCheckedoutVersion(Identity currUser, VersionedDataEntity entity);
    private ValueTask`1<VersionedData`1<DataType>> CreateVersionAsync(VersionedDataEntity entity);
    private ValueTask`1<IList`1<IVersionedData`1<DataType>>> CreateVersions(VersionedDataEntity[] versions);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<CreateVersions>d__30`1")]
private ValueTask`1<IList`1<IVersionedData`1<DataType>>> CreateVersions(List`1<VersionedDataEntity> versions);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataRepository`1/<GetAllVersionEntities>d__31")]
private Task`1<List`1<VersionedDataEntity>> GetAllVersionEntities(IVersionedDataIdentifier versionedDataIdentifier);
}
internal class Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1 : object {
    [CompilerGeneratedAttribute]
private static IDataOwner <CurrentOwnerService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<VersionedDataStorageService`1<TVersionedDataType>> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionedDataTypePermissionHandler`1<TVersionedDataType> <VersionedDataPermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionedDataRepository`1<TVersionedDataType> <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private DataToVersionValidationHelper`1<TVersionedDataType> <ValidationHelper>k__BackingField;
    private static IDataOwner CurrentOwnerService { get; private set; }
    private ILogger`1<VersionedDataStorageService`1<TVersionedDataType>> Logger { get; }
    private IVersionedDataTypePermissionHandler`1<TVersionedDataType> VersionedDataPermissionChecker { get; }
    private IVersionedDataRepository`1<TVersionedDataType> Repository { get; }
    private IOmniaServices OmniaServices { get; }
    private DataToVersionValidationHelper`1<TVersionedDataType> ValidationHelper { get; }
    public VersionedDataStorageService`1(ILogger`1<VersionedDataStorageService`1<TVersionedDataType>> logger, IVersionedDataTypePermissionHandler`1<TVersionedDataType> versionedDataPermissionChecker, IVersionedDataRepository`1<TVersionedDataType> repository, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private static IDataOwner get_CurrentOwnerService();
    [CompilerGeneratedAttribute]
private static void set_CurrentOwnerService(IDataOwner value);
    [CompilerGeneratedAttribute]
private ILogger`1<VersionedDataStorageService`1<TVersionedDataType>> get_Logger();
    [CompilerGeneratedAttribute]
private IVersionedDataTypePermissionHandler`1<TVersionedDataType> get_VersionedDataPermissionChecker();
    [CompilerGeneratedAttribute]
private IVersionedDataRepository`1<TVersionedDataType> get_Repository();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [CompilerGeneratedAttribute]
private DataToVersionValidationHelper`1<TVersionedDataType> get_ValidationHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<UpdateAsync>d__20")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> UpdateAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<CheckInAsync>d__21")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> CheckInAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<CheckOutAsync>d__22")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CheckOutAsync(IVersionedDataIdentifier dataToCheckOut, bool takeOver);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<DiscardAsync>d__23")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> DiscardAsync(ICheckedoutVersionedData`1<TVersionedDataType> versionToDiscard);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<CreateAsync>d__24")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<TVersionedDataType>> CreateAsync(TVersionedDataType data);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<DeleteAsync>d__25")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> DeleteAsync(IVersionedDataIdentifier dataTodelete);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetDataAsync>d__26")]
public sealed virtual ValueTask`1<IList`1<IVersionedData`1<TVersionedDataType>>> GetDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetAsync>d__27")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> GetAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetDataAsync>d__28")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> GetDataAsync(IVersionReference versionToGetDataFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetLatestPublishedAsync>d__29")]
public sealed virtual ValueTask`1<IDictionary`2<string, IVersionReference>> GetLatestPublishedAsync(IVersionedDataIdentifier[] dataToGetPublishedVersionFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetLatestAsync>d__30")]
public sealed virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLatestAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetLatestDataAsync>d__31")]
public sealed virtual ValueTask`1<ValueTuple`4<ICheckedoutVersionedData`1<TVersionedDataType>, ICheckedoutVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>, IVersionedData`1<TVersionedDataType>>> GetLatestDataAsync(IVersionedDataIdentifier dataToGetVersionsFor);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<PublishAsync>d__32")]
public sealed virtual ValueTask`1<IVersionedData`1<TVersionedDataType>> PublishAsync(IVersionedData`1<TVersionedDataType> versionToPublish);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<GetRegisteredOwnerAsync>d__33")]
public sealed virtual ValueTask`1<IDataOwner> GetRegisteredOwnerAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<RegisterOwnerAsync>d__34")]
public sealed virtual Task RegisterOwnerAsync(IDataOwner owner);
    [AsyncStateMachineAttribute("Omnia.Fx.NetCore.VersionedData.VersionedDataStorageService`1/<EnsureDataIsOwnedByServiceAsync>d__35")]
private Task EnsureDataIsOwnedByServiceAsync(IDataOwner[] owners);
}
internal class Omnia.Fx.Queues.EncryptedUserTokenMetaData`1 : EncryptedUserTokenMetaDataBase {
    [CompilerGeneratedAttribute]
private T <MetaData>k__BackingField;
    public T MetaData { get; public set; }
    [CompilerGeneratedAttribute]
public T get_MetaData();
    [CompilerGeneratedAttribute]
public void set_MetaData(T value);
}
internal class Omnia.Fx.Queues.EncryptedUserTokenMetaDataBase : object {
    [CompilerGeneratedAttribute]
private string <EncryptedUserToken>k__BackingField;
    public string EncryptedUserToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EncryptedUserToken();
    [CompilerGeneratedAttribute]
public void set_EncryptedUserToken(string value);
}
[ExtensionAttribute]
public static class Omnia.Fx.Queues.IQueueBusExtensions : object {
    [ExtensionAttribute]
public static IQueueBus DeQueueInProvidedUserContextAsync(IQueueBus thebus, Queue`1<TMessage> queue, Func`3<TMessage, IScopedServiceContext, Task> action);
    [ExtensionAttribute]
public static IQueueBus DeQueueInProvidedUserContextAsync(IQueueBus thebus, Queue`2<TMessage, TMetadata> queue, Func`4<TMessage, TMetadata, IScopedServiceContext, Task> action);
    [ExtensionAttribute]
public static IQueueBus IncludeCurrentUserContext(IQueueBus thebus, IEncryptionUserTokenProvider encryptedTokenProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "7.0.0.0")]
internal class OrleansCodeGen.OmniaFxNetCore.Metadata_OmniaFxNetCore : TypeManifestProviderBase {
    protected virtual void ConfigureInner(TypeManifestOptions config);
}
