[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OneOf.Functions : object {
    internal static string FormatValue(T value);
    internal static string FormatValue(object this, object base, T value);
}
[NullableContextAttribute("1")]
public interface OneOf.IOneOf {
    public object Value { get; }
    public int Index { get; }
    public abstract virtual object get_Value();
    public abstract virtual int get_Index();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`1 : ValueType {
    private T0 _value0;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public T0 AsT0 { get; }
    private OneOf`1(int index, T0 value0);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public T0 get_AsT0();
    public static OneOf`1<T0> op_Implicit(T0 t);
    public void Switch(Action`1<T0> f0);
    public TResult Match(Func`2<T0, TResult> f0);
    public static OneOf`1<T0> FromT0(T0 input);
    public OneOf`1<TResult> MapT0(Func`2<T0, TResult> mapFunc);
    private bool Equals(OneOf`1<T0> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`2 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    private OneOf`2(int index, T0 value0, T1 value1);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public static OneOf`2<T0, T1> op_Implicit(T0 t);
    public static OneOf`2<T0, T1> op_Implicit(T1 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1);
    public static OneOf`2<T0, T1> FromT0(T0 input);
    public static OneOf`2<T0, T1> FromT1(T1 input);
    public OneOf`2<TResult, T1> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`2<T0, TResult> MapT1(Func`2<T1, TResult> mapFunc);
    public bool TryPickT0(T0& value, T1& remainder);
    public bool TryPickT1(T1& value, T0& remainder);
    private bool Equals(OneOf`2<T0, T1> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`3 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    private OneOf`3(int index, T0 value0, T1 value1, T2 value2);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public static OneOf`3<T0, T1, T2> op_Implicit(T0 t);
    public static OneOf`3<T0, T1, T2> op_Implicit(T1 t);
    public static OneOf`3<T0, T1, T2> op_Implicit(T2 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2);
    public static OneOf`3<T0, T1, T2> FromT0(T0 input);
    public static OneOf`3<T0, T1, T2> FromT1(T1 input);
    public static OneOf`3<T0, T1, T2> FromT2(T2 input);
    public OneOf`3<TResult, T1, T2> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`3<T0, TResult, T2> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`3<T0, T1, TResult> MapT2(Func`2<T2, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`2& remainder);
    public bool TryPickT1(T1& value, OneOf`2& remainder);
    public bool TryPickT2(T2& value, OneOf`2& remainder);
    private bool Equals(OneOf`3<T0, T1, T2> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`4 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    private OneOf`4(int index, T0 value0, T1 value1, T2 value2, T3 value3);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public static OneOf`4<T0, T1, T2, T3> op_Implicit(T0 t);
    public static OneOf`4<T0, T1, T2, T3> op_Implicit(T1 t);
    public static OneOf`4<T0, T1, T2, T3> op_Implicit(T2 t);
    public static OneOf`4<T0, T1, T2, T3> op_Implicit(T3 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3);
    public static OneOf`4<T0, T1, T2, T3> FromT0(T0 input);
    public static OneOf`4<T0, T1, T2, T3> FromT1(T1 input);
    public static OneOf`4<T0, T1, T2, T3> FromT2(T2 input);
    public static OneOf`4<T0, T1, T2, T3> FromT3(T3 input);
    public OneOf`4<TResult, T1, T2, T3> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`4<T0, TResult, T2, T3> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`4<T0, T1, TResult, T3> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`4<T0, T1, T2, TResult> MapT3(Func`2<T3, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`3& remainder);
    public bool TryPickT1(T1& value, OneOf`3& remainder);
    public bool TryPickT2(T2& value, OneOf`3& remainder);
    public bool TryPickT3(T3& value, OneOf`3& remainder);
    private bool Equals(OneOf`4<T0, T1, T2, T3> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`5 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    private OneOf`5(int index, T0 value0, T1 value1, T2 value2, T3 value3, T4 value4);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public static OneOf`5<T0, T1, T2, T3, T4> op_Implicit(T0 t);
    public static OneOf`5<T0, T1, T2, T3, T4> op_Implicit(T1 t);
    public static OneOf`5<T0, T1, T2, T3, T4> op_Implicit(T2 t);
    public static OneOf`5<T0, T1, T2, T3, T4> op_Implicit(T3 t);
    public static OneOf`5<T0, T1, T2, T3, T4> op_Implicit(T4 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4);
    public static OneOf`5<T0, T1, T2, T3, T4> FromT0(T0 input);
    public static OneOf`5<T0, T1, T2, T3, T4> FromT1(T1 input);
    public static OneOf`5<T0, T1, T2, T3, T4> FromT2(T2 input);
    public static OneOf`5<T0, T1, T2, T3, T4> FromT3(T3 input);
    public static OneOf`5<T0, T1, T2, T3, T4> FromT4(T4 input);
    public OneOf`5<TResult, T1, T2, T3, T4> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`5<T0, TResult, T2, T3, T4> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`5<T0, T1, TResult, T3, T4> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`5<T0, T1, T2, TResult, T4> MapT3(Func`2<T3, TResult> mapFunc);
    public OneOf`5<T0, T1, T2, T3, TResult> MapT4(Func`2<T4, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`4& remainder);
    public bool TryPickT1(T1& value, OneOf`4& remainder);
    public bool TryPickT2(T2& value, OneOf`4& remainder);
    public bool TryPickT3(T3& value, OneOf`4& remainder);
    public bool TryPickT4(T4& value, OneOf`4& remainder);
    private bool Equals(OneOf`5<T0, T1, T2, T3, T4> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`6 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    private OneOf`6(int index, T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T0 t);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T1 t);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T2 t);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T3 t);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T4 t);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> op_Implicit(T5 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT0(T0 input);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT1(T1 input);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT2(T2 input);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT3(T3 input);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT4(T4 input);
    public static OneOf`6<T0, T1, T2, T3, T4, T5> FromT5(T5 input);
    public OneOf`6<TResult, T1, T2, T3, T4, T5> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`6<T0, TResult, T2, T3, T4, T5> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`6<T0, T1, TResult, T3, T4, T5> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`6<T0, T1, T2, TResult, T4, T5> MapT3(Func`2<T3, TResult> mapFunc);
    public OneOf`6<T0, T1, T2, T3, TResult, T5> MapT4(Func`2<T4, TResult> mapFunc);
    public OneOf`6<T0, T1, T2, T3, T4, TResult> MapT5(Func`2<T5, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`5& remainder);
    public bool TryPickT1(T1& value, OneOf`5& remainder);
    public bool TryPickT2(T2& value, OneOf`5& remainder);
    public bool TryPickT3(T3& value, OneOf`5& remainder);
    public bool TryPickT4(T4& value, OneOf`5& remainder);
    public bool TryPickT5(T5& value, OneOf`5& remainder);
    private bool Equals(OneOf`6<T0, T1, T2, T3, T4, T5> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`7 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    private OneOf`7(int index, T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T0 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T1 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T2 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T3 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T4 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T5 t);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> op_Implicit(T6 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT0(T0 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT1(T1 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT2(T2 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT3(T3 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT4(T4 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT5(T5 input);
    public static OneOf`7<T0, T1, T2, T3, T4, T5, T6> FromT6(T6 input);
    public OneOf`7<TResult, T1, T2, T3, T4, T5, T6> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`7<T0, TResult, T2, T3, T4, T5, T6> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`7<T0, T1, TResult, T3, T4, T5, T6> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`7<T0, T1, T2, TResult, T4, T5, T6> MapT3(Func`2<T3, TResult> mapFunc);
    public OneOf`7<T0, T1, T2, T3, TResult, T5, T6> MapT4(Func`2<T4, TResult> mapFunc);
    public OneOf`7<T0, T1, T2, T3, T4, TResult, T6> MapT5(Func`2<T5, TResult> mapFunc);
    public OneOf`7<T0, T1, T2, T3, T4, T5, TResult> MapT6(Func`2<T6, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`6& remainder);
    public bool TryPickT1(T1& value, OneOf`6& remainder);
    public bool TryPickT2(T2& value, OneOf`6& remainder);
    public bool TryPickT3(T3& value, OneOf`6& remainder);
    public bool TryPickT4(T4& value, OneOf`6& remainder);
    public bool TryPickT5(T5& value, OneOf`6& remainder);
    public bool TryPickT6(T6& value, OneOf`6& remainder);
    private bool Equals(OneOf`7<T0, T1, T2, T3, T4, T5, T6> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`8 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public bool IsT7 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    public T7 AsT7 { get; }
    private OneOf`8(int index, T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public bool get_IsT7();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public T7 get_AsT7();
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T0 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T1 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T2 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T3 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T4 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T5 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T6 t);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> op_Implicit(T7 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6, Action`1<T7> f7);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6, Func`2<T7, TResult> f7);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT0(T0 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT1(T1 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT2(T2 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT3(T3 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT4(T4 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT5(T5 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT6(T6 input);
    public static OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> FromT7(T7 input);
    public OneOf`8<TResult, T1, T2, T3, T4, T5, T6, T7> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`8<T0, TResult, T2, T3, T4, T5, T6, T7> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`8<T0, T1, TResult, T3, T4, T5, T6, T7> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`8<T0, T1, T2, TResult, T4, T5, T6, T7> MapT3(Func`2<T3, TResult> mapFunc);
    public OneOf`8<T0, T1, T2, T3, TResult, T5, T6, T7> MapT4(Func`2<T4, TResult> mapFunc);
    public OneOf`8<T0, T1, T2, T3, T4, TResult, T6, T7> MapT5(Func`2<T5, TResult> mapFunc);
    public OneOf`8<T0, T1, T2, T3, T4, T5, TResult, T7> MapT6(Func`2<T6, TResult> mapFunc);
    public OneOf`8<T0, T1, T2, T3, T4, T5, T6, TResult> MapT7(Func`2<T7, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`7& remainder);
    public bool TryPickT1(T1& value, OneOf`7& remainder);
    public bool TryPickT2(T2& value, OneOf`7& remainder);
    public bool TryPickT3(T3& value, OneOf`7& remainder);
    public bool TryPickT4(T4& value, OneOf`7& remainder);
    public bool TryPickT5(T5& value, OneOf`7& remainder);
    public bool TryPickT6(T6& value, OneOf`7& remainder);
    public bool TryPickT7(T7& value, OneOf`7& remainder);
    private bool Equals(OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class OneOf.OneOf`9 : ValueType {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public bool IsT7 { get; }
    public bool IsT8 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    public T7 AsT7 { get; }
    public T8 AsT8 { get; }
    private OneOf`9(int index, T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public bool get_IsT7();
    public bool get_IsT8();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public T7 get_AsT7();
    public T8 get_AsT8();
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T0 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T1 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T2 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T3 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T4 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T5 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T6 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T7 t);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(T8 t);
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6, Action`1<T7> f7, Action`1<T8> f8);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6, Func`2<T7, TResult> f7, Func`2<T8, TResult> f8);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT0(T0 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT1(T1 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT2(T2 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT3(T3 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT4(T4 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT5(T5 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT6(T6 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT7(T7 input);
    public static OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> FromT8(T8 input);
    public OneOf`9<TResult, T1, T2, T3, T4, T5, T6, T7, T8> MapT0(Func`2<T0, TResult> mapFunc);
    public OneOf`9<T0, TResult, T2, T3, T4, T5, T6, T7, T8> MapT1(Func`2<T1, TResult> mapFunc);
    public OneOf`9<T0, T1, TResult, T3, T4, T5, T6, T7, T8> MapT2(Func`2<T2, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, TResult, T4, T5, T6, T7, T8> MapT3(Func`2<T3, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, T3, TResult, T5, T6, T7, T8> MapT4(Func`2<T4, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, T3, T4, TResult, T6, T7, T8> MapT5(Func`2<T5, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, T3, T4, T5, TResult, T7, T8> MapT6(Func`2<T6, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, T3, T4, T5, T6, TResult, T8> MapT7(Func`2<T7, TResult> mapFunc);
    public OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, TResult> MapT8(Func`2<T8, TResult> mapFunc);
    public bool TryPickT0(T0& value, OneOf`8& remainder);
    public bool TryPickT1(T1& value, OneOf`8& remainder);
    public bool TryPickT2(T2& value, OneOf`8& remainder);
    public bool TryPickT3(T3& value, OneOf`8& remainder);
    public bool TryPickT4(T4& value, OneOf`8& remainder);
    public bool TryPickT5(T5& value, OneOf`8& remainder);
    public bool TryPickT6(T6& value, OneOf`8& remainder);
    public bool TryPickT7(T7& value, OneOf`8& remainder);
    public bool TryPickT8(T8& value, OneOf`8& remainder);
    private bool Equals(OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`1 : object {
    private T0 _value0;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public T0 AsT0 { get; }
    protected OneOfBase`1(OneOf`1<T0> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public T0 get_AsT0();
    public void Switch(Action`1<T0> f0);
    public TResult Match(Func`2<T0, TResult> f0);
    private bool Equals(OneOfBase`1<T0> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`2 : object {
    private T0 _value0;
    private T1 _value1;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    protected OneOfBase`2(OneOf`2<T0, T1> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1);
    public bool TryPickT0(T0& value, T1& remainder);
    public bool TryPickT1(T1& value, T0& remainder);
    private bool Equals(OneOfBase`2<T0, T1> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`3 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    protected OneOfBase`3(OneOf`3<T0, T1, T2> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2);
    public bool TryPickT0(T0& value, OneOf`2& remainder);
    public bool TryPickT1(T1& value, OneOf`2& remainder);
    public bool TryPickT2(T2& value, OneOf`2& remainder);
    private bool Equals(OneOfBase`3<T0, T1, T2> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`4 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    protected OneOfBase`4(OneOf`4<T0, T1, T2, T3> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3);
    public bool TryPickT0(T0& value, OneOf`3& remainder);
    public bool TryPickT1(T1& value, OneOf`3& remainder);
    public bool TryPickT2(T2& value, OneOf`3& remainder);
    public bool TryPickT3(T3& value, OneOf`3& remainder);
    private bool Equals(OneOfBase`4<T0, T1, T2, T3> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`5 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    protected OneOfBase`5(OneOf`5<T0, T1, T2, T3, T4> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4);
    public bool TryPickT0(T0& value, OneOf`4& remainder);
    public bool TryPickT1(T1& value, OneOf`4& remainder);
    public bool TryPickT2(T2& value, OneOf`4& remainder);
    public bool TryPickT3(T3& value, OneOf`4& remainder);
    public bool TryPickT4(T4& value, OneOf`4& remainder);
    private bool Equals(OneOfBase`5<T0, T1, T2, T3, T4> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`6 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    protected OneOfBase`6(OneOf`6<T0, T1, T2, T3, T4, T5> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5);
    public bool TryPickT0(T0& value, OneOf`5& remainder);
    public bool TryPickT1(T1& value, OneOf`5& remainder);
    public bool TryPickT2(T2& value, OneOf`5& remainder);
    public bool TryPickT3(T3& value, OneOf`5& remainder);
    public bool TryPickT4(T4& value, OneOf`5& remainder);
    public bool TryPickT5(T5& value, OneOf`5& remainder);
    private bool Equals(OneOfBase`6<T0, T1, T2, T3, T4, T5> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`7 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    protected OneOfBase`7(OneOf`7<T0, T1, T2, T3, T4, T5, T6> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6);
    public bool TryPickT0(T0& value, OneOf`6& remainder);
    public bool TryPickT1(T1& value, OneOf`6& remainder);
    public bool TryPickT2(T2& value, OneOf`6& remainder);
    public bool TryPickT3(T3& value, OneOf`6& remainder);
    public bool TryPickT4(T4& value, OneOf`6& remainder);
    public bool TryPickT5(T5& value, OneOf`6& remainder);
    public bool TryPickT6(T6& value, OneOf`6& remainder);
    private bool Equals(OneOfBase`7<T0, T1, T2, T3, T4, T5, T6> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`8 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public bool IsT7 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    public T7 AsT7 { get; }
    protected OneOfBase`8(OneOf`8<T0, T1, T2, T3, T4, T5, T6, T7> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public bool get_IsT7();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public T7 get_AsT7();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6, Action`1<T7> f7);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6, Func`2<T7, TResult> f7);
    public bool TryPickT0(T0& value, OneOf`7& remainder);
    public bool TryPickT1(T1& value, OneOf`7& remainder);
    public bool TryPickT2(T2& value, OneOf`7& remainder);
    public bool TryPickT3(T3& value, OneOf`7& remainder);
    public bool TryPickT4(T4& value, OneOf`7& remainder);
    public bool TryPickT5(T5& value, OneOf`7& remainder);
    public bool TryPickT6(T6& value, OneOf`7& remainder);
    public bool TryPickT7(T7& value, OneOf`7& remainder);
    private bool Equals(OneOfBase`8<T0, T1, T2, T3, T4, T5, T6, T7> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.OneOfBase`9 : object {
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private int _index;
    public object Value { get; }
    public int Index { get; }
    public bool IsT0 { get; }
    public bool IsT1 { get; }
    public bool IsT2 { get; }
    public bool IsT3 { get; }
    public bool IsT4 { get; }
    public bool IsT5 { get; }
    public bool IsT6 { get; }
    public bool IsT7 { get; }
    public bool IsT8 { get; }
    public T0 AsT0 { get; }
    public T1 AsT1 { get; }
    public T2 AsT2 { get; }
    public T3 AsT3 { get; }
    public T4 AsT4 { get; }
    public T5 AsT5 { get; }
    public T6 AsT6 { get; }
    public T7 AsT7 { get; }
    public T8 AsT8 { get; }
    protected OneOfBase`9(OneOf`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> input);
    public sealed virtual object get_Value();
    public sealed virtual int get_Index();
    public bool get_IsT0();
    public bool get_IsT1();
    public bool get_IsT2();
    public bool get_IsT3();
    public bool get_IsT4();
    public bool get_IsT5();
    public bool get_IsT6();
    public bool get_IsT7();
    public bool get_IsT8();
    public T0 get_AsT0();
    public T1 get_AsT1();
    public T2 get_AsT2();
    public T3 get_AsT3();
    public T4 get_AsT4();
    public T5 get_AsT5();
    public T6 get_AsT6();
    public T7 get_AsT7();
    public T8 get_AsT8();
    public void Switch(Action`1<T0> f0, Action`1<T1> f1, Action`1<T2> f2, Action`1<T3> f3, Action`1<T4> f4, Action`1<T5> f5, Action`1<T6> f6, Action`1<T7> f7, Action`1<T8> f8);
    public TResult Match(Func`2<T0, TResult> f0, Func`2<T1, TResult> f1, Func`2<T2, TResult> f2, Func`2<T3, TResult> f3, Func`2<T4, TResult> f4, Func`2<T5, TResult> f5, Func`2<T6, TResult> f6, Func`2<T7, TResult> f7, Func`2<T8, TResult> f8);
    public bool TryPickT0(T0& value, OneOf`8& remainder);
    public bool TryPickT1(T1& value, OneOf`8& remainder);
    public bool TryPickT2(T2& value, OneOf`8& remainder);
    public bool TryPickT3(T3& value, OneOf`8& remainder);
    public bool TryPickT4(T4& value, OneOf`8& remainder);
    public bool TryPickT5(T5& value, OneOf`8& remainder);
    public bool TryPickT6(T6& value, OneOf`8& remainder);
    public bool TryPickT7(T7& value, OneOf`8& remainder);
    public bool TryPickT8(T8& value, OneOf`8& remainder);
    private bool Equals(OneOfBase`9<T0, T1, T2, T3, T4, T5, T6, T7, T8> other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class OneOf.Types.All : ValueType {
}
public class OneOf.Types.Error : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OneOf.Types.Error`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public Error`1(T value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T get_Value();
}
public class OneOf.Types.False : ValueType {
}
public class OneOf.Types.Maybe : ValueType {
}
public class OneOf.Types.No : ValueType {
}
public class OneOf.Types.None : ValueType {
    [NullableContextAttribute("1")]
public static OneOf`2<T, None> Of(T t);
}
public class OneOf.Types.NotFound : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OneOf.Types.Result`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public Result`1(T value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T get_Value();
}
public class OneOf.Types.Some : ValueType {
}
public class OneOf.Types.Success : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OneOf.Types.Success`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public Success`1(T value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T get_Value();
}
public class OneOf.Types.True : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OneOf.Types.TrueFalseOrNull : OneOfBase`3<True, False, Null> {
    private TrueFalseOrNull(OneOf`3<True, False, Null> _);
    public static TrueFalseOrNull op_Implicit(True _);
    public static TrueFalseOrNull op_Implicit(False _);
    public static TrueFalseOrNull op_Implicit(Null _);
    public static TrueFalseOrNull op_Implicit(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OneOf.Types.TrueOrFalse : OneOfBase`2<True, False> {
    private TrueOrFalse(OneOf`2<True, False> _);
    public static TrueOrFalse op_Implicit(True _);
    public static TrueOrFalse op_Implicit(False _);
    public static TrueOrFalse op_Implicit(bool value);
}
public class OneOf.Types.Unknown : ValueType {
}
public class OneOf.Types.Yes : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OneOf.Types.YesNoOrMaybe : OneOfBase`3<Yes, No, Maybe> {
    private YesNoOrMaybe(OneOf`3<Yes, No, Maybe> _);
    public static YesNoOrMaybe op_Implicit(Yes _);
    public static YesNoOrMaybe op_Implicit(No _);
    public static YesNoOrMaybe op_Implicit(Maybe _);
    public static YesNoOrMaybe op_Implicit(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OneOf.Types.YesOrNo : OneOfBase`2<Yes, No> {
    private YesOrNo(OneOf`2<Yes, No> _);
    public static YesOrNo op_Implicit(Yes _);
    public static YesOrNo op_Implicit(No _);
    public static YesOrNo op_Implicit(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
