public class OpenCover.MSBuild.OpenCover : ToolTask {
    [CompilerGeneratedAttribute]
private bool <DefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CoverByTest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ExcludeByAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ExcludeByFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <HideSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipAutoProps>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Register>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowUnvisited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TargetWorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnTargetCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetCodeOffset>k__BackingField;
    private static string _OpenCoverRegKey;
    private static string _OpenCoverRegKeyWow6432;
    private static string _OpenCoverRegValue;
    public bool DefaultFilters { get; public set; }
    public ITaskItem[] CoverByTest { get; public set; }
    public ITaskItem[] ExcludeByAttribute { get; public set; }
    public ITaskItem[] ExcludeByFile { get; public set; }
    public ITaskItem[] Filter { get; public set; }
    public bool MergeByHash { get; public set; }
    public ITaskItem[] HideSkipped { get; public set; }
    public bool SkipAutoProps { get; public set; }
    public ITaskItem Output { get; public set; }
    public bool Register { get; public set; }
    public bool ShowUnvisited { get; public set; }
    public bool Service { get; public set; }
    [RequiredAttribute]
public ITaskItem Target { get; public set; }
    public ITaskItem TargetWorkingDir { get; public set; }
    public string TargetArgs { get; public set; }
    public bool ReturnTargetCode { get; public set; }
    public int TargetCodeOffset { get; public set; }
    protected string ToolName { get; }
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GetWorkingDirectory();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    [CompilerGeneratedAttribute]
public bool get_DefaultFilters();
    [CompilerGeneratedAttribute]
public void set_DefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CoverByTest();
    [CompilerGeneratedAttribute]
public void set_CoverByTest(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ExcludeByAttribute();
    [CompilerGeneratedAttribute]
public void set_ExcludeByAttribute(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ExcludeByFile();
    [CompilerGeneratedAttribute]
public void set_ExcludeByFile(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_MergeByHash();
    [CompilerGeneratedAttribute]
public void set_MergeByHash(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_HideSkipped();
    [CompilerGeneratedAttribute]
public void set_HideSkipped(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_SkipAutoProps();
    [CompilerGeneratedAttribute]
public void set_SkipAutoProps(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_Register();
    [CompilerGeneratedAttribute]
public void set_Register(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowUnvisited();
    [CompilerGeneratedAttribute]
public void set_ShowUnvisited(bool value);
    [CompilerGeneratedAttribute]
public bool get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TargetWorkingDir();
    [CompilerGeneratedAttribute]
public void set_TargetWorkingDir(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_TargetArgs();
    [CompilerGeneratedAttribute]
public void set_TargetArgs(string value);
    [CompilerGeneratedAttribute]
public bool get_ReturnTargetCode();
    [CompilerGeneratedAttribute]
public void set_ReturnTargetCode(bool value);
    [CompilerGeneratedAttribute]
public int get_TargetCodeOffset();
    [CompilerGeneratedAttribute]
public void set_TargetCodeOffset(int value);
    protected virtual string get_ToolName();
}
