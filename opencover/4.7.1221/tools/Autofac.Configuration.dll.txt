public class Autofac.Configuration.ConfigurationModule : Module {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationRegistrar <ConfigurationRegistrar>k__BackingField;
    public IConfiguration Configuration { get; private set; }
    public IConfigurationRegistrar ConfigurationRegistrar { get; public set; }
    public ConfigurationModule(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public IConfigurationRegistrar get_ConfigurationRegistrar();
    [CompilerGeneratedAttribute]
public void set_ConfigurationRegistrar(IConfigurationRegistrar value);
    protected virtual void Load(ContainerBuilder builder);
}
internal static class Autofac.Configuration.ConfigurationResources : object {
    private static ResourceManager _resourceManager;
    internal static string ArgumentMayNotBeEmpty { get; }
    internal static string ServiceTypeMustBeSpecified { get; }
    internal static string TypeConversionUnsupported { get; }
    internal static string TypeConverterAttributeTypeNotConverter { get; }
    internal static string TypeNotFound { get; }
    internal static string UnrecognisedBoolean { get; }
    internal static string UnrecognisedOwnership { get; }
    internal static string UnrecognisedScope { get; }
    internal static string DictionaryKeyMayNotBeNullOrEmpty { get; }
    internal static string CollectionMustBeOrderedByName { get; }
    private static ConfigurationResources();
    internal static string get_ArgumentMayNotBeEmpty();
    internal static string FormatArgumentMayNotBeEmpty(object p0);
    internal static string get_ServiceTypeMustBeSpecified();
    internal static string FormatServiceTypeMustBeSpecified(object p0);
    internal static string get_TypeConversionUnsupported();
    internal static string FormatTypeConversionUnsupported(object p0, object p1);
    internal static string get_TypeConverterAttributeTypeNotConverter();
    internal static string FormatTypeConverterAttributeTypeNotConverter(object p0);
    internal static string get_TypeNotFound();
    internal static string FormatTypeNotFound(object p0);
    internal static string get_UnrecognisedBoolean();
    internal static string FormatUnrecognisedBoolean(object p0);
    internal static string get_UnrecognisedOwnership();
    internal static string FormatUnrecognisedOwnership(object p0);
    internal static string get_UnrecognisedScope();
    internal static string get_DictionaryKeyMayNotBeNullOrEmpty();
    internal static string FormatUnrecognisedScope(object p0);
    internal static string get_CollectionMustBeOrderedByName();
    internal static string FormatCollectionMustBeOrderedByName(object p0, object p1);
    private static string GetString(string name, String[] formatterNames);
}
public class Autofac.Configuration.Core.ComponentRegistrar : object {
    public virtual void RegisterConfiguredComponents(ContainerBuilder builder, IConfiguration configuration);
    [IteratorStateMachineAttribute("Autofac.Configuration.Core.ComponentRegistrar/<EnumerateComponentServices>d__1")]
protected virtual IEnumerable`1<Service> EnumerateComponentServices(IConfiguration component, Assembly defaultAssembly);
    protected virtual void RegisterComponentMetadata(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar, Assembly defaultAssembly);
    protected virtual void RegisterComponentParameters(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
    protected virtual void RegisterComponentProperties(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
    protected virtual void RegisterComponentServices(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar, Assembly defaultAssembly);
    protected virtual void SetAutoActivate(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
    protected virtual void SetComponentOwnership(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
    protected virtual void SetInjectProperties(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
    protected virtual void SetLifetimeScope(IConfiguration component, IRegistrationBuilder`3<object, TReflectionActivatorData, TSingleRegistrationStyle> registrar);
}
[ExtensionAttribute]
public static class Autofac.Configuration.Core.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static Assembly DefaultAssembly(IConfiguration configuration);
    [ExtensionAttribute]
public static Assembly GetAssembly(IConfiguration configuration, string key);
    [IteratorStateMachineAttribute("Autofac.Configuration.Core.ConfigurationExtensions/<GetParameters>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<Parameter> GetParameters(IConfiguration configuration, string key);
    [IteratorStateMachineAttribute("Autofac.Configuration.Core.ConfigurationExtensions/<GetProperties>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<Parameter> GetProperties(IConfiguration configuration, string key);
    [ExtensionAttribute]
public static Type GetType(IConfiguration configuration, string key, Assembly defaultAssembly);
    [IteratorStateMachineAttribute("Autofac.Configuration.Core.ConfigurationExtensions/<GetOrderedSubsections>d__5")]
[ExtensionAttribute]
internal static IEnumerable`1<IConfigurationSection> GetOrderedSubsections(IConfiguration configuration, string key);
    private static object GetConfiguredParameterValue(IConfigurationSection value);
    private static string GetKeyName(string fullKey);
}
public class Autofac.Configuration.Core.ConfigurationRegistrar : object {
    [CompilerGeneratedAttribute]
private IComponentRegistrar <ComponentRegistrar>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleRegistrar <ModuleRegistrar>k__BackingField;
    public IComponentRegistrar ComponentRegistrar { get; private set; }
    public IModuleRegistrar ModuleRegistrar { get; private set; }
    public ConfigurationRegistrar(IComponentRegistrar componentRegistrar, IModuleRegistrar moduleRegistrar);
    [CompilerGeneratedAttribute]
public IComponentRegistrar get_ComponentRegistrar();
    [CompilerGeneratedAttribute]
private void set_ComponentRegistrar(IComponentRegistrar value);
    [CompilerGeneratedAttribute]
public IModuleRegistrar get_ModuleRegistrar();
    [CompilerGeneratedAttribute]
private void set_ModuleRegistrar(IModuleRegistrar value);
    public virtual void RegisterConfiguration(ContainerBuilder builder, IConfiguration configuration);
}
public class Autofac.Configuration.Core.ModuleRegistrar : object {
    public virtual void RegisterConfiguredModules(ContainerBuilder builder, IConfiguration configuration);
    private IModule CreateModule(Type type, IConfiguration moduleElement);
    private static ConstructorInfo GetMostParametersConstructor(Type type);
}
public interface Autofac.Configuration.IComponentRegistrar {
    public abstract virtual void RegisterConfiguredComponents(ContainerBuilder builder, IConfiguration configuration);
}
public interface Autofac.Configuration.IConfigurationRegistrar {
    public abstract virtual void RegisterConfiguration(ContainerBuilder builder, IConfiguration configuration);
}
public interface Autofac.Configuration.IModuleRegistrar {
    public abstract virtual void RegisterConfiguredModules(ContainerBuilder builder, IConfiguration configuration);
}
[TypeConverterAttribute("Autofac.Configuration.Util.ConfiguredDictionaryParameter/DictionaryTypeConverter")]
internal class Autofac.Configuration.Util.ConfiguredDictionaryParameter : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Dictionary>k__BackingField;
    public Dictionary`2<string, string> Dictionary { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Dictionary();
    [CompilerGeneratedAttribute]
public void set_Dictionary(Dictionary`2<string, string> value);
}
[TypeConverterAttribute("Autofac.Configuration.Util.ConfiguredListParameter/ListTypeConverter")]
internal class Autofac.Configuration.Util.ConfiguredListParameter : object {
    [CompilerGeneratedAttribute]
private String[] <List>k__BackingField;
    public String[] List { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_List();
    [CompilerGeneratedAttribute]
public void set_List(String[] value);
}
[ExtensionAttribute]
internal static class Autofac.Configuration.Util.ReflectionExtensions : object {
    [ExtensionAttribute]
public static bool TryGetDeclaringProperty(ParameterInfo pi, PropertyInfo& prop);
}
[ExtensionAttribute]
public static class Autofac.Configuration.Util.StringExtensions : object {
    [ExtensionAttribute]
public static bool ToFlexibleBoolean(string value);
}
internal class Autofac.Configuration.Util.TypeManipulation : object {
    public static object ChangeToCompatibleType(object value, Type destinationType, ParameterInfo memberInfo);
    public static object ChangeToCompatibleType(object value, Type destinationType, MemberInfo memberInfo);
    public static object ChangeToCompatibleType(object value, Type destinationType, TypeConverterAttribute converterAttribute);
    private static TypeConverter GetTypeConverterFromName(string converterTypeName);
}
