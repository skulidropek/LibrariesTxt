[EngineDependencyAttribute("Gendarme.Framework.Engines.OpCodeEngine")]
[SolutionAttribute("Either remove the field or properly initialize it.")]
[ProblemAttribute("This type has a private field whose value is always null.")]
public class Gendarme.Rules.Maintainability.AvoidAlwaysNullFieldRule : Rule {
    private HashSet`1<FieldReference> nullFields;
    private HashSet`1<FieldReference> setFields;
    private HashSet`1<FieldReference> usedFields;
    private bool usesWinForms;
    private static OpCodeBitmask LoadStoreFields;
    private static AvoidAlwaysNullFieldRule();
    private static bool CheckForNullAssignment(Instruction ins);
    private void CheckMethod(MethodDefinition method);
    public virtual void Initialize(IRunner runner);
    private void CheckMethods(TypeDefinition type);
    public sealed virtual RuleResult CheckType(TypeDefinition type);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0(object o, RunnerEventArgs e);
}
[ProblemAttribute("Methods with a large cyclomatic complexity are hard to understand and maintain.")]
[FxCopCompatibilityAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[EngineDependencyAttribute("Gendarme.Framework.Engines.OpCodeEngine")]
[SolutionAttribute("Simplify the method using refactors like Extract Method.")]
public class Gendarme.Rules.Maintainability.AvoidComplexMethodsRule : Rule {
    private static int DefaultSuccessThreshold;
    private static OpCodeBitmask ld;
    private static List`1<Instruction> targets;
    [CompilerGeneratedAttribute]
private int <SuccessThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LowThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MediumThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HighThreshold>k__BackingField;
    [DescriptionAttribute("The cyclomatic complexity at which defects are reported.")]
[DefaultValueAttribute("25")]
public int SuccessThreshold { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Methods with cyclomatic complexity less than this will be reported as low severity.")]
public int LowThreshold { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Methods with cyclomatic complexity less than this will be reported as medium severity.")]
public int MediumThreshold { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Methods with cyclomatic complexity less than this will be reported as high severity.")]
public int HighThreshold { get; public set; }
    private static AvoidComplexMethodsRule();
    public virtual void Initialize(IRunner runner);
    [CompilerGeneratedAttribute]
public int get_SuccessThreshold();
    [CompilerGeneratedAttribute]
public void set_SuccessThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_LowThreshold();
    [CompilerGeneratedAttribute]
public void set_LowThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_MediumThreshold();
    [CompilerGeneratedAttribute]
public void set_MediumThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_HighThreshold();
    [CompilerGeneratedAttribute]
public void set_HighThreshold(int value);
    public sealed virtual RuleResult CheckMethod(MethodDefinition method);
    public Severity GetCyclomaticComplexitySeverity(int cc);
    public static int GetCyclomaticComplexity(MethodDefinition method);
    private static int GetFastCyclomaticComplexity(MethodDefinition method);
    private static int GetSwitchCyclomaticComplexity(MethodDefinition method);
    private static void AccumulateSwitchTargets(Instruction ins);
    private static Instruction FindFirstUnconditionalBranchTarget(Instruction ins);
}
[FxCopCompatibilityAttribute("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
[SolutionAttribute("Refactor your class hierarchy to reduce its depth. Consider using extension methods to extend existing types.")]
[ProblemAttribute("This type has more than four base classes.")]
public class Gendarme.Rules.Maintainability.AvoidDeepInheritanceTreeRule : Rule {
    private static int DefaultMaximumDepth;
    private static bool DefaultCountExternalDepth;
    private int maximumDepth;
    private bool countExternalDepth;
    [DescriptionAttribute("Classes with more base classes than this will result in a defect.")]
[DefaultValueAttribute("4")]
public int MaximumDepth { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("If true the rule will count base classes defined outside the assemblies being analyzed.")]
public bool CountExternalDepth { get; public set; }
    public int get_MaximumDepth();
    public void set_MaximumDepth(int value);
    public bool get_CountExternalDepth();
    public void set_CountExternalDepth(bool value);
    private Severity GetSeverity(int depth);
    public sealed virtual RuleResult CheckType(TypeDefinition type);
}
[SolutionAttribute("You can apply the Extract Class or Extract Subclass refactoring.")]
[ProblemAttribute("The methods in this class lack cohesion (a higher score is better). This leads to code which is harder to understand and maintain.")]
public class Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule : Rule {
    private static double DefaultSuccessCoh;
    private static double DefaultLowCoh;
    private static double DefaultMediumCoh;
    private static int DefaultMethodMinimumCount;
    private static int DefaultFieldMinimumCount;
    private double successCoh;
    private double lowCoh;
    private double medCoh;
    private int method_minimum_count;
    private int field_minimum_count;
    private Dictionary`2<MemberReference, int> F;
    private List`1<MemberReference> Fset;
    [DescriptionAttribute("Cohesion values lower than this will result in a defect.")]
[DefaultValueAttribute("0,5")]
public double SuccessLowerLimit { get; public set; }
    [DescriptionAttribute("Defects with cohesion values greater than this will be reported at low severity.")]
[DefaultValueAttribute("0,4")]
public double LowSeverityLowerLimit { get; public set; }
    [DefaultValueAttribute("0,2")]
[DescriptionAttribute("Defects with cohesion values greater than (but less than LowSeverityLowerLimit) this will be reported at medium severity.")]
public double MediumSeverityLowerLimit { get; public set; }
    [DefaultValueAttribute("2")]
[DescriptionAttribute("The minimum number of methods a class must have to be checked.")]
public int MinimumMethodCount { get; public set; }
    [DefaultValueAttribute("1")]
[DescriptionAttribute("The minimum number of fields a class must have to be checked.")]
public int MinimumFieldCount { get; public set; }
    public sealed virtual RuleResult CheckType(TypeDefinition type);
    private bool SetField(MemberReference field, TypeReference type);
    public double GetCohesivenessForType(TypeDefinition type);
    private Severity GetCohesivenessSeverity(double coh);
    public double get_SuccessLowerLimit();
    public void set_SuccessLowerLimit(double value);
    public double get_LowSeverityLowerLimit();
    public void set_LowSeverityLowerLimit(double value);
    public double get_MediumSeverityLowerLimit();
    public void set_MediumSeverityLowerLimit(double value);
    public int get_MinimumMethodCount();
    public void set_MinimumMethodCount(int value);
    public int get_MinimumFieldCount();
    public void set_MinimumFieldCount(int value);
}
[FxCopCompatibilityAttribute("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
[ProblemAttribute("This method has a parameter whose type is more specialized than necessary. This can make it difficult to reuse the method in other contexts.")]
[SolutionAttribute("Replace the parameter type with the most general type which will work or make use of the specifics of the formal parameter type.")]
public class Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule : Rule {
    private StackEntryAnalysis sea;
    private TypeReference[] types_least;
    private Int32[] depths_least;
    private static String[] Empty;
    private static AvoidUnnecessarySpecializationRule();
    private static TypeReference GetActualType(TypeReference type);
    private static int GetActualTypeDepth(TypeReference type);
    private static int GetTypeDepth(TypeReference type);
    private static int GetTypeDepth(TypeDefinition type);
    private static bool DoesAllSignaturesMatchType(TypeReference type, IEnumerable`1<MethodSignature> signatures);
    private static TypeDefinition GetBaseImplementor(TypeReference type, IEnumerable`1<MethodSignature> signatures);
    private static TypeDefinition GetBaseImplementor(TypeDefinition type, IEnumerable`1<MethodSignature> signatures);
    private static TypeDefinition GetInterfaceImplementor(TypeDefinition type, IEnumerable`1<MethodSignature> signatures);
    private static MethodSignature GetSignature(MethodReference method);
    private static string GetReturnTypeSignature(MethodReference method);
    private static bool IsSystemObjectMethod(MethodReference method);
    private static bool IsFromNonGenericCollectionNamespace(string nameSpace);
    private static bool IsIgnoredSuggestionType(TypeReference type);
    private static List`1<MethodSignature> GetSignatures(IEnumerable`1<StackEntryUsageResult> usageResults);
    private void UpdateParameterLeastType(ParameterReference parameter, IEnumerable`1<StackEntryUsageResult> usageResults);
    private void CheckParameters(MethodDefinition method);
    private static bool IsSignatureDictated(MethodDefinition method);
    private static bool IsSignatureDictatedByOverride(IMemberDefinition method, MethodSignature sig);
    private static bool IsSignatureDictatedByInterface(IMemberDefinition method, MethodSignature sig);
    public sealed virtual RuleResult CheckMethod(MethodDefinition method);
    private void CheckParametersSpecializationDelta(MethodReference method);
    private string GetSuggestionMessage(ParameterReference parameter);
    private static TypeReference GetConstructedGenericType(MemberReference method, GenericParameter parameter);
    private static void AppendPrettyTypeName(StringBuilder sb, TypeReference type);
}
[ProblemAttribute("This method uses the difference between two DateTime.Now calls to retrieve processing time. The developer's intent may not be very clear.")]
[EngineDependencyAttribute("Gendarme.Framework.Engines.OpCodeEngine")]
[SolutionAttribute("Use the System.Diagnostics.Stopwatch type to improve code readability.")]
public class Gendarme.Rules.Maintainability.ConsiderUsingStopwatchRule : Rule {
    [CompilerGeneratedAttribute]
private static Func`2<TypeReference, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public virtual void Initialize(IRunner runner);
    private static bool AreMirrorInstructions(Instruction ld, Instruction st, MethodDefinition method);
    private static bool IsGetNow(Instruction ins);
    private static bool CheckParameters(MethodDefinition method, Instruction ins);
    private static bool CheckUsage(MethodDefinition method, Instruction ins);
    public sealed virtual RuleResult CheckMethod(MethodDefinition method);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0(object o, RunnerEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <Initialize>b__1(TypeReference tr);
}
[EngineDependencyAttribute("Gendarme.Framework.Engines.OpCodeEngine")]
[SolutionAttribute("Replace both checks with a single call to String.IsNullOrEmpty(string).")]
[ProblemAttribute("This method does both string null and length checks which can be harder on code readability/maintainability.")]
public class Gendarme.Rules.Maintainability.PreferStringIsNullOrEmptyRule : Rule {
    public virtual void Initialize(IRunner runner);
    private static string GetName(MethodDefinition method, Instruction ins);
    private static Instruction PreLengthCheck(MethodDefinition method, Instruction ins);
    private static bool PostLengthCheck(Instruction ins, Instruction branch);
    private static bool IsOperandZero(Instruction ins);
    public sealed virtual RuleResult CheckMethod(MethodDefinition method);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0(object o, RunnerEventArgs e);
}
[SolutionAttribute("Remove the dependence on obsolete code or decorate this code with the [Obsolete] attribute.")]
[ProblemAttribute("This type or method is not obsolete but depends on code decorated with [Obsolete] attribute.")]
[EngineDependencyAttribute("Gendarme.Framework.Engines.OpCodeEngine")]
public class Gendarme.Rules.Maintainability.RemoveDependenceOnObsoleteCodeRule : Rule {
    private static Dictionary`2<TypeReference, bool> types;
    private static Dictionary`2<MethodReference, bool> methods;
    private static Dictionary`2<FieldReference, bool> fields;
    private static RemoveDependenceOnObsoleteCodeRule();
    private static bool IsObsolete(TypeReference type);
    private static bool IsObsolete(MethodReference method);
    private static bool IsObsolete(FieldReference field);
    private void CheckBaseType(TypeDefinition type);
    private void CheckInterfaces(TypeDefinition type);
    private void CheckFields(TypeDefinition type);
    private void CheckProperties(TypeDefinition type);
    private void CheckEvents(TypeDefinition type);
    private static bool IsVisible(MethodReference method);
    public sealed virtual RuleResult CheckType(TypeDefinition type);
    private void CheckParameters(MethodReference method);
    private void CheckReturnType(MethodReference method);
    private void CheckVariables(MethodDefinition method);
    private void CheckTypeCreation(MethodDefinition method, Instruction ins, TypeReference type);
    private void CheckMethodCall(MethodDefinition method, Instruction ins, MethodReference call);
    private void CheckFieldAccess(MethodDefinition method, Instruction ins, FieldReference field);
    public sealed virtual RuleResult CheckMethod(MethodDefinition method);
}
[ProblemAttribute("Fields have misleading names, e.g. instance fields beginning with "s_" or static fields beginning with "m_"")]
[SolutionAttribute("Rename the fields so that their names follow convention.")]
[FxCopCompatibilityAttribute("Microsoft.Maintainability", "CA1504:ReviewMisleadingFieldNames")]
public class Gendarme.Rules.Maintainability.ReviewMisleadingFieldNamesRule : Rule {
    public sealed virtual RuleResult CheckType(TypeDefinition type);
}
[FxCopCompatibilityAttribute("Microsoft.Maintainability", "CA1500:VariableNamesShouldNotMatchFieldNames")]
[SolutionAttribute("Rename the variable/parameter or the field.")]
[ProblemAttribute("An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type.")]
public class Gendarme.Rules.Maintainability.VariableNamesShouldNotMatchFieldNamesRule : Rule {
    private HashSet`1<string> fields;
    public sealed virtual RuleResult CheckType(TypeDefinition type);
}
