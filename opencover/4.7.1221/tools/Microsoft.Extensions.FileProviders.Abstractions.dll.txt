internal class Microsoft.Extensions.FileProviders.EmptyDisposable : object {
    [CompilerGeneratedAttribute]
private static EmptyDisposable <Instance>k__BackingField;
    public static EmptyDisposable Instance { get; }
    private static EmptyDisposable();
    [CompilerGeneratedAttribute]
public static EmptyDisposable get_Instance();
    public sealed virtual void Dispose();
}
public interface Microsoft.Extensions.FileProviders.IDirectoryContents {
    public bool Exists { get; }
    public abstract virtual bool get_Exists();
}
public interface Microsoft.Extensions.FileProviders.IFileInfo {
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public abstract virtual bool get_Exists();
    public abstract virtual long get_Length();
    public abstract virtual string get_PhysicalPath();
    public abstract virtual string get_Name();
    public abstract virtual DateTimeOffset get_LastModified();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual Stream CreateReadStream();
}
public interface Microsoft.Extensions.FileProviders.IFileProvider {
    public abstract virtual IFileInfo GetFileInfo(string subpath);
    public abstract virtual IDirectoryContents GetDirectoryContents(string subpath);
    public abstract virtual IChangeToken Watch(string filter);
}
public class Microsoft.Extensions.FileProviders.NotFoundDirectoryContents : object {
    [CompilerGeneratedAttribute]
private static NotFoundDirectoryContents <Singleton>k__BackingField;
    public static NotFoundDirectoryContents Singleton { get; }
    public bool Exists { get; }
    private static NotFoundDirectoryContents();
    [CompilerGeneratedAttribute]
public static NotFoundDirectoryContents get_Singleton();
    public sealed virtual bool get_Exists();
    public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Extensions.FileProviders.NotFoundFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool Exists { get; }
    public bool IsDirectory { get; }
    public DateTimeOffset LastModified { get; }
    public long Length { get; }
    public string Name { get; }
    public string PhysicalPath { get; }
    public NotFoundFileInfo(string name);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual long get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual Stream CreateReadStream();
}
public class Microsoft.Extensions.FileProviders.NullChangeToken : object {
    [CompilerGeneratedAttribute]
private static NullChangeToken <Singleton>k__BackingField;
    public static NullChangeToken Singleton { get; }
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    private static NullChangeToken();
    [CompilerGeneratedAttribute]
public static NullChangeToken get_Singleton();
    public sealed virtual bool get_HasChanged();
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
public class Microsoft.Extensions.FileProviders.NullFileProvider : object {
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
