[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class OpenSearch.Net.ActiveHandlerTrackingEntry : object {
    private static TimerCallback TimerCallback;
    private object _lock;
    private bool _timerInitialized;
    private Timer _timer;
    private TimerCallback _callback;
    [CompilerGeneratedAttribute]
private LifetimeTrackingHttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Key>k__BackingField;
    public LifetimeTrackingHttpMessageHandler Handler { get; private set; }
    public TimeSpan Lifetime { get; }
    public int Key { get; }
    public ActiveHandlerTrackingEntry(int key, LifetimeTrackingHttpMessageHandler handler, TimeSpan lifetime);
    private static ActiveHandlerTrackingEntry();
    [CompilerGeneratedAttribute]
public LifetimeTrackingHttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(LifetimeTrackingHttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Lifetime();
    [CompilerGeneratedAttribute]
public int get_Key();
    public void StartExpiryTimer(TimerCallback callback);
    private void StartExpiryTimerSlow(TimerCallback callback);
    private void Timer_Tick();
}
public class OpenSearch.Net.ApiCallDetails : object {
    private string _debugInformation;
    [CompilerGeneratedAttribute]
private List`1<Audit> <AuditTrail>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, ThreadPoolStatistics> <ThreadPoolStats>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<TcpState, int> <TcpStats>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <DeprecationWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <OriginalException>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RequestBodyInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ResponseBodyInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionConfigurationValues <ConnectionConfiguration>k__BackingField;
    public List`1<Audit> AuditTrail { get; public set; }
    public ReadOnlyDictionary`2<string, ThreadPoolStatistics> ThreadPoolStats { get; public set; }
    public ReadOnlyDictionary`2<TcpState, int> TcpStats { get; public set; }
    public string DebugInformation { get; }
    public IEnumerable`1<string> DeprecationWarnings { get; public set; }
    public HttpMethod HttpMethod { get; public set; }
    public Nullable`1<int> HttpStatusCode { get; public set; }
    public Exception OriginalException { get; public set; }
    public Byte[] RequestBodyInBytes { get; public set; }
    public Byte[] ResponseBodyInBytes { get; public set; }
    public string ResponseMimeType { get; public set; }
    public bool Success { get; public set; }
    public bool SuccessOrKnownError { get; }
    public Uri Uri { get; public set; }
    public IConnectionConfigurationValues ConnectionConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Audit> get_AuditTrail();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuditTrail(List`1<Audit> value);
    [CompilerGeneratedAttribute]
public sealed virtual ReadOnlyDictionary`2<string, ThreadPoolStatistics> get_ThreadPoolStats();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThreadPoolStats(ReadOnlyDictionary`2<string, ThreadPoolStatistics> value);
    [CompilerGeneratedAttribute]
public sealed virtual ReadOnlyDictionary`2<TcpState, int> get_TcpStats();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TcpStats(ReadOnlyDictionary`2<TcpState, int> value);
    public sealed virtual string get_DebugInformation();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_DeprecationWarnings();
    [CompilerGeneratedAttribute]
public void set_DeprecationWarnings(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpMethod get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_OriginalException();
    [CompilerGeneratedAttribute]
public void set_OriginalException(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RequestBodyInBytes();
    [CompilerGeneratedAttribute]
public void set_RequestBodyInBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_ResponseBodyInBytes();
    [CompilerGeneratedAttribute]
public void set_ResponseBodyInBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResponseMimeType();
    [CompilerGeneratedAttribute]
public void set_ResponseMimeType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    public sealed virtual bool get_SuccessOrKnownError();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IConnectionConfigurationValues get_ConnectionConfiguration();
    [CompilerGeneratedAttribute]
public void set_ConnectionConfiguration(IConnectionConfigurationValues value);
    public virtual string ToString();
}
public class OpenSearch.Net.ApiKeyAuthenticationCredentials : object {
    [CompilerGeneratedAttribute]
private SecureString <Base64EncodedApiKey>k__BackingField;
    public SecureString Base64EncodedApiKey { get; }
    public ApiKeyAuthenticationCredentials(string id, SecureString apiKey);
    public ApiKeyAuthenticationCredentials(string id, string apiKey);
    public ApiKeyAuthenticationCredentials(string base64EncodedApiKey);
    public ApiKeyAuthenticationCredentials(SecureString base64EncodedApiKey);
    [CompilerGeneratedAttribute]
public SecureString get_Base64EncodedApiKey();
    public sealed virtual void Dispose();
}
public class OpenSearch.Net.Audit : object {
    [CompilerGeneratedAttribute]
private AuditEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Ended>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public AuditEvent Event { get; internal set; }
    public Node Node { get; internal set; }
    public string Path { get; internal set; }
    public DateTime Ended { get; internal set; }
    public DateTime Started { get; }
    public Exception Exception { get; internal set; }
    public Audit(AuditEvent type, DateTime started);
    [CompilerGeneratedAttribute]
public AuditEvent get_Event();
    [CompilerGeneratedAttribute]
internal void set_Event(AuditEvent value);
    [CompilerGeneratedAttribute]
public Node get_Node();
    [CompilerGeneratedAttribute]
internal void set_Node(Node value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Ended();
    [CompilerGeneratedAttribute]
internal void set_Ended(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    public virtual string ToString();
}
internal class OpenSearch.Net.Auditable : object {
    private Audit _audit;
    private IDisposable _activity;
    private IDateTimeProvider _dateTimeProvider;
    [CompilerGeneratedAttribute]
private static DiagnosticSource <DiagnosticSource>k__BackingField;
    private static DiagnosticSource DiagnosticSource { get; }
    unknown AuditEvent Event {public set; }
    unknown Exception Exception {public set; }
    unknown string Path {public set; }
    public Auditable(AuditEvent type, List`1<Audit> auditTrail, IDateTimeProvider dateTimeProvider, Node node);
    private static Auditable();
    [CompilerGeneratedAttribute]
private static DiagnosticSource get_DiagnosticSource();
    public void set_Event(AuditEvent value);
    public void set_Exception(Exception value);
    public void set_Path(string value);
    public void Stop();
    public sealed virtual void Dispose();
}
public enum OpenSearch.Net.AuditEvent : Enum {
    public int value__;
    public static AuditEvent SniffOnStartup;
    public static AuditEvent SniffOnFail;
    public static AuditEvent SniffOnStaleCluster;
    public static AuditEvent SniffSuccess;
    public static AuditEvent SniffFailure;
    public static AuditEvent PingSuccess;
    public static AuditEvent PingFailure;
    public static AuditEvent Resurrection;
    public static AuditEvent AllNodesDead;
    public static AuditEvent BadResponse;
    public static AuditEvent HealthyResponse;
    public static AuditEvent MaxTimeoutReached;
    public static AuditEvent MaxRetriesReached;
    public static AuditEvent BadRequest;
    public static AuditEvent NoNodesAttempted;
    public static AuditEvent CancellationRequested;
    public static AuditEvent FailedOverAllNodes;
}
[ExtensionAttribute]
internal static class OpenSearch.Net.AuditEventExtensions : object {
    [ExtensionAttribute]
public static string GetAuditDiagnosticEventName(AuditEvent event);
}
public class OpenSearch.Net.BasicAuthenticationCredentials : object {
    [CompilerGeneratedAttribute]
private SecureString <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public SecureString Password { get; public set; }
    public string Username { get; public set; }
    public BasicAuthenticationCredentials(string username, string password);
    public BasicAuthenticationCredentials(string username, SecureString password);
    [CompilerGeneratedAttribute]
public SecureString get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(SecureString value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    public sealed virtual void Dispose();
}
public class OpenSearch.Net.BulkRequestParameters : RequestParameters`1<BulkRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Pipeline { get; public set; }
    public Nullable`1<Refresh> Refresh { get; public set; }
    public Nullable`1<bool> RequireAlias { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string TypeQueryString { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Pipeline();
    public void set_Pipeline(string value);
    public Nullable`1<Refresh> get_Refresh();
    public void set_Refresh(Nullable`1<Refresh> value);
    public Nullable`1<bool> get_RequireAlias();
    public void set_RequireAlias(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_TypeQueryString();
    public void set_TypeQueryString(string value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.Bytes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Bytes B;
    [EnumMemberAttribute]
public static Bytes G;
    [EnumMemberAttribute]
public static Bytes Gb;
    [EnumMemberAttribute]
public static Bytes K;
    [EnumMemberAttribute]
public static Bytes Kb;
    [EnumMemberAttribute]
public static Bytes M;
    [EnumMemberAttribute]
public static Bytes Mb;
    [EnumMemberAttribute]
public static Bytes P;
    [EnumMemberAttribute]
public static Bytes Pb;
    [EnumMemberAttribute]
public static Bytes T;
    [EnumMemberAttribute]
public static Bytes Tb;
}
public class OpenSearch.Net.BytesResponse : OpenSearchResponse`1<Byte[]> {
    public BytesResponse(Byte[] body);
    public virtual bool TryGetServerError(ServerError& serverError);
}
public static class OpenSearch.Net.CertificateValidations : object {
    public static bool AllowAll(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors);
    public static bool DenyAll(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors);
    public static Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> AuthorityPartOfChain(X509Certificate caCertificate, bool trustRoot, X509RevocationMode revocationMode);
    public static Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> AuthorityIsRoot(X509Certificate caCertificate, bool trustRoot, X509RevocationMode revocationMode);
    private static bool ValidRootCa(X509Certificate caCertificate, X509Certificate certificate, bool trustRoot, X509RevocationMode revocationMode);
    private static bool ValidIntermediateCa(X509Certificate caCertificate, X509Certificate certificate, X509Chain chain, bool trustRoot, X509RevocationMode revocationMode);
}
public class OpenSearch.Net.ClearScrollRequestParameters : RequestParameters`1<ClearScrollRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
internal class OpenSearch.Net.ClientVersionInfo : VersionInfo {
    private static Regex VersionRegex;
    public static ClientVersionInfo Empty;
    private static ClientVersionInfo();
    public static ClientVersionInfo Create();
    private static string DetermineClientVersion(Type type);
}
public class OpenSearch.Net.CloudConnectionPool : SingleNodeConnectionPool {
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicAuthenticationCredentials <BasicCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiKeyAuthenticationCredentials <ApiKeyCredentials>k__BackingField;
    private string ClusterName { get; }
    public BasicAuthenticationCredentials BasicCredentials { get; }
    public ApiKeyAuthenticationCredentials ApiKeyCredentials { get; }
    public CloudConnectionPool(string cloudId, BasicAuthenticationCredentials credentials, IDateTimeProvider dateTimeProvider);
    public CloudConnectionPool(string cloudId, ApiKeyAuthenticationCredentials credentials, IDateTimeProvider dateTimeProvider);
    private CloudConnectionPool(ParsedCloudId parsedCloudId, IDateTimeProvider dateTimeProvider);
    [CompilerGeneratedAttribute]
private string get_ClusterName();
    [CompilerGeneratedAttribute]
public BasicAuthenticationCredentials get_BasicCredentials();
    [CompilerGeneratedAttribute]
public ApiKeyAuthenticationCredentials get_ApiKeyCredentials();
    private static ParsedCloudId ParseCloudId(string cloudId);
    protected virtual void DisposeManagedResources();
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.ClusterRerouteMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ClusterRerouteMetric Blocks;
    [EnumMemberAttribute]
public static ClusterRerouteMetric Metadata;
    [EnumMemberAttribute]
public static ClusterRerouteMetric Nodes;
    [EnumMemberAttribute]
public static ClusterRerouteMetric RoutingTable;
    [EnumMemberAttribute]
public static ClusterRerouteMetric MasterNode;
    [EnumMemberAttribute]
public static ClusterRerouteMetric Version;
    [EnumMemberAttribute]
public static ClusterRerouteMetric All;
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.ClusterStateMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ClusterStateMetric Blocks;
    [EnumMemberAttribute]
public static ClusterStateMetric Metadata;
    [EnumMemberAttribute]
public static ClusterStateMetric Nodes;
    [EnumMemberAttribute]
public static ClusterStateMetric RoutingTable;
    [EnumMemberAttribute]
public static ClusterStateMetric RoutingNodes;
    [EnumMemberAttribute]
public static ClusterStateMetric MasterNode;
    [EnumMemberAttribute]
public static ClusterStateMetric Version;
    [EnumMemberAttribute]
public static ClusterStateMetric All;
    [EnumMemberAttribute]
public static ClusterStateMetric ClusterManagerNode;
}
[StringEnumAttribute]
public enum OpenSearch.Net.Conflicts : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Conflicts Abort;
    [EnumMemberAttribute]
public static Conflicts Proceed;
}
public class OpenSearch.Net.ConnectionConfiguration : ConnectionConfiguration`1<ConnectionConfiguration> {
    public static TimeSpan DefaultPingTimeout;
    public static TimeSpan DefaultPingTimeoutOnSSL;
    public static TimeSpan DefaultTimeout;
    public static TimeSpan DefaultDnsRefreshTimeout;
    public static int DefaultConnectionLimit;
    public static string DefaultUserAgent;
    private static bool UsingCurlHandler { get; }
    public ConnectionConfiguration(Uri uri, IConnection connection);
    public ConnectionConfiguration(string cloudId, BasicAuthenticationCredentials credentials);
    public ConnectionConfiguration(string cloudId, ApiKeyAuthenticationCredentials credentials);
    public ConnectionConfiguration(IConnectionPool connectionPool);
    public ConnectionConfiguration(IConnectionPool connectionPool, IConnection connection);
    public ConnectionConfiguration(IConnectionPool connectionPool, IOpenSearchSerializer serializer);
    public ConnectionConfiguration(IConnectionPool connectionPool, IConnection connection, IOpenSearchSerializer serializer);
    private static ConnectionConfiguration();
    private static bool get_UsingCurlHandler();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract class OpenSearch.Net.ConnectionConfiguration`1 : object {
    private IConnection _connection;
    private IConnectionPool _connectionPool;
    private NameValueCollection _headers;
    private NameValueCollection _queryString;
    private SemaphoreSlim _semaphore;
    private OpenSearchUrlFormatter _urlFormatter;
    private BasicAuthenticationCredentials _basicAuthCredentials;
    private ApiKeyAuthenticationCredentials _apiKeyAuthCredentials;
    private X509CertificateCollection _clientCertificates;
    private Action`1<IApiCallDetails> _completedRequestHandler;
    private int _connectionLimit;
    private Nullable`1<TimeSpan> _deadTimeout;
    private bool _disableAutomaticProxyDetection;
    private bool _disableDirectStreaming;
    private bool _disableMetaHeader;
    private bool _disablePings;
    private bool _enableHttpCompression;
    private bool _enableHttpPipelining;
    private Nullable`1<TimeSpan> _keepAliveInterval;
    private Nullable`1<TimeSpan> _keepAliveTime;
    private Nullable`1<TimeSpan> _maxDeadTimeout;
    private Nullable`1<int> _maxRetries;
    private Nullable`1<TimeSpan> _maxRetryTimeout;
    private Func`2<Node, bool> _nodePredicate;
    private Action`1<RequestData> _onRequestDataCreated;
    private Nullable`1<TimeSpan> _pingTimeout;
    private bool _prettyJson;
    private string _proxyAddress;
    private SecureString _proxyPassword;
    private string _proxyUsername;
    private TimeSpan _requestTimeout;
    private TimeSpan _dnsRefreshTimeout;
    private Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> _serverCertificateValidationCallback;
    private IReadOnlyCollection`1<int> _skipDeserializationForStatusCodes;
    private Nullable`1<TimeSpan> _sniffLifeSpan;
    private bool _sniffOnConnectionFault;
    private bool _sniffOnStartup;
    private bool _throwExceptions;
    private bool _transferEncodingChunked;
    private IMemoryStreamFactory _memoryStreamFactory;
    private bool _enableTcpStats;
    [CompilerGeneratedAttribute]
private static IMemoryStreamFactory <DefaultMemoryStreamFactory>k__BackingField;
    private bool _enableThreadPoolStats;
    private string _userAgent;
    private Func`3<HttpMethod, int, bool> _statusCodeToResponseSuccess;
    [CompilerGeneratedAttribute]
private IOpenSearchSerializer <UseThisRequestResponseSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaHeaderProvider <OpenSearch.Net.IConnectionConfigurationValues.MetaHeaderProvider>k__BackingField;
    public static IMemoryStreamFactory DefaultMemoryStreamFactory { get; }
    protected IOpenSearchSerializer UseThisRequestResponseSerializer { get; protected set; }
    private BasicAuthenticationCredentials OpenSearch.Net.IConnectionConfigurationValues.BasicAuthenticationCredentials { get; }
    private ApiKeyAuthenticationCredentials OpenSearch.Net.IConnectionConfigurationValues.ApiKeyAuthenticationCredentials { get; }
    private SemaphoreSlim OpenSearch.Net.IConnectionConfigurationValues.BootstrapLock { get; }
    private X509CertificateCollection OpenSearch.Net.IConnectionConfigurationValues.ClientCertificates { get; }
    private IConnection OpenSearch.Net.IConnectionConfigurationValues.Connection { get; }
    private int OpenSearch.Net.IConnectionConfigurationValues.ConnectionLimit { get; }
    private IConnectionPool OpenSearch.Net.IConnectionConfigurationValues.ConnectionPool { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.DeadTimeout { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.DisableAutomaticProxyDetection { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.DisableDirectStreaming { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.DisableMetaHeader { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.DisablePings { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.EnableHttpCompression { get; }
    private NameValueCollection OpenSearch.Net.IConnectionConfigurationValues.Headers { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.HttpPipeliningEnabled { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.KeepAliveInterval { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.KeepAliveTime { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.MaxDeadTimeout { get; }
    private Nullable`1<int> OpenSearch.Net.IConnectionConfigurationValues.MaxRetries { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.MaxRetryTimeout { get; }
    private IMemoryStreamFactory OpenSearch.Net.IConnectionConfigurationValues.MemoryStreamFactory { get; }
    private Func`2<Node, bool> OpenSearch.Net.IConnectionConfigurationValues.NodePredicate { get; }
    private Action`1<IApiCallDetails> OpenSearch.Net.IConnectionConfigurationValues.OnRequestCompleted { get; }
    private Action`1<RequestData> OpenSearch.Net.IConnectionConfigurationValues.OnRequestDataCreated { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.PingTimeout { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.PrettyJson { get; }
    private string OpenSearch.Net.IConnectionConfigurationValues.ProxyAddress { get; }
    private SecureString OpenSearch.Net.IConnectionConfigurationValues.ProxyPassword { get; }
    private string OpenSearch.Net.IConnectionConfigurationValues.ProxyUsername { get; }
    private NameValueCollection OpenSearch.Net.IConnectionConfigurationValues.QueryStringParameters { get; }
    private IOpenSearchSerializer OpenSearch.Net.IConnectionConfigurationValues.RequestResponseSerializer { get; }
    private TimeSpan OpenSearch.Net.IConnectionConfigurationValues.RequestTimeout { get; }
    private TimeSpan OpenSearch.Net.IConnectionConfigurationValues.DnsRefreshTimeout { get; }
    private Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> OpenSearch.Net.IConnectionConfigurationValues.ServerCertificateValidationCallback { get; }
    private IReadOnlyCollection`1<int> OpenSearch.Net.IConnectionConfigurationValues.SkipDeserializationForStatusCodes { get; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.SniffInformationLifeSpan { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.SniffsOnConnectionFault { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.SniffsOnStartup { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.ThrowExceptions { get; }
    private OpenSearchUrlFormatter OpenSearch.Net.IConnectionConfigurationValues.UrlFormatter { get; }
    private string OpenSearch.Net.IConnectionConfigurationValues.UserAgent { get; }
    private Func`3<HttpMethod, int, bool> OpenSearch.Net.IConnectionConfigurationValues.StatusCodeToResponseSuccess { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.TransferEncodingChunked { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.EnableTcpStats { get; }
    private bool OpenSearch.Net.IConnectionConfigurationValues.EnableThreadPoolStats { get; }
    private MetaHeaderProvider OpenSearch.Net.IConnectionConfigurationValues.MetaHeaderProvider { get; }
    protected ConnectionConfiguration`1(IConnectionPool connectionPool, IConnection connection, IOpenSearchSerializer requestResponseSerializer);
    private static ConnectionConfiguration`1();
    [CompilerGeneratedAttribute]
public static IMemoryStreamFactory get_DefaultMemoryStreamFactory();
    [CompilerGeneratedAttribute]
protected IOpenSearchSerializer get_UseThisRequestResponseSerializer();
    [CompilerGeneratedAttribute]
protected void set_UseThisRequestResponseSerializer(IOpenSearchSerializer value);
    private sealed virtual override BasicAuthenticationCredentials OpenSearch.Net.IConnectionConfigurationValues.get_BasicAuthenticationCredentials();
    private sealed virtual override ApiKeyAuthenticationCredentials OpenSearch.Net.IConnectionConfigurationValues.get_ApiKeyAuthenticationCredentials();
    private sealed virtual override SemaphoreSlim OpenSearch.Net.IConnectionConfigurationValues.get_BootstrapLock();
    private sealed virtual override X509CertificateCollection OpenSearch.Net.IConnectionConfigurationValues.get_ClientCertificates();
    private sealed virtual override IConnection OpenSearch.Net.IConnectionConfigurationValues.get_Connection();
    private sealed virtual override int OpenSearch.Net.IConnectionConfigurationValues.get_ConnectionLimit();
    private sealed virtual override IConnectionPool OpenSearch.Net.IConnectionConfigurationValues.get_ConnectionPool();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_DeadTimeout();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_DisableAutomaticProxyDetection();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_DisableDirectStreaming();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_DisableMetaHeader();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_DisablePings();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_EnableHttpCompression();
    private sealed virtual override NameValueCollection OpenSearch.Net.IConnectionConfigurationValues.get_Headers();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_HttpPipeliningEnabled();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_KeepAliveInterval();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_KeepAliveTime();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_MaxDeadTimeout();
    private sealed virtual override Nullable`1<int> OpenSearch.Net.IConnectionConfigurationValues.get_MaxRetries();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_MaxRetryTimeout();
    private sealed virtual override IMemoryStreamFactory OpenSearch.Net.IConnectionConfigurationValues.get_MemoryStreamFactory();
    private sealed virtual override Func`2<Node, bool> OpenSearch.Net.IConnectionConfigurationValues.get_NodePredicate();
    private sealed virtual override Action`1<IApiCallDetails> OpenSearch.Net.IConnectionConfigurationValues.get_OnRequestCompleted();
    private sealed virtual override Action`1<RequestData> OpenSearch.Net.IConnectionConfigurationValues.get_OnRequestDataCreated();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_PingTimeout();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_PrettyJson();
    private sealed virtual override string OpenSearch.Net.IConnectionConfigurationValues.get_ProxyAddress();
    private sealed virtual override SecureString OpenSearch.Net.IConnectionConfigurationValues.get_ProxyPassword();
    private sealed virtual override string OpenSearch.Net.IConnectionConfigurationValues.get_ProxyUsername();
    private sealed virtual override NameValueCollection OpenSearch.Net.IConnectionConfigurationValues.get_QueryStringParameters();
    private sealed virtual override IOpenSearchSerializer OpenSearch.Net.IConnectionConfigurationValues.get_RequestResponseSerializer();
    private sealed virtual override TimeSpan OpenSearch.Net.IConnectionConfigurationValues.get_RequestTimeout();
    private sealed virtual override TimeSpan OpenSearch.Net.IConnectionConfigurationValues.get_DnsRefreshTimeout();
    private sealed virtual override Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> OpenSearch.Net.IConnectionConfigurationValues.get_ServerCertificateValidationCallback();
    private sealed virtual override IReadOnlyCollection`1<int> OpenSearch.Net.IConnectionConfigurationValues.get_SkipDeserializationForStatusCodes();
    private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IConnectionConfigurationValues.get_SniffInformationLifeSpan();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_SniffsOnConnectionFault();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_SniffsOnStartup();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_ThrowExceptions();
    private sealed virtual override OpenSearchUrlFormatter OpenSearch.Net.IConnectionConfigurationValues.get_UrlFormatter();
    private sealed virtual override string OpenSearch.Net.IConnectionConfigurationValues.get_UserAgent();
    private sealed virtual override Func`3<HttpMethod, int, bool> OpenSearch.Net.IConnectionConfigurationValues.get_StatusCodeToResponseSuccess();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_TransferEncodingChunked();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_EnableTcpStats();
    private sealed virtual override bool OpenSearch.Net.IConnectionConfigurationValues.get_EnableThreadPoolStats();
    [CompilerGeneratedAttribute]
private sealed virtual override MetaHeaderProvider OpenSearch.Net.IConnectionConfigurationValues.get_MetaHeaderProvider();
    private sealed virtual override void System.IDisposable.Dispose();
    private static void DefaultCompletedRequestHandler(IApiCallDetails response);
    private static void DefaultRequestDataCreated(RequestData response);
    private static bool DefaultReseedableNodePredicate(Node node);
    private static bool DefaultNodePredicate(Node node);
    protected T Assign(TValue value, Action`2<T, TValue> assigner);
    public T EnableTcpKeepAlive(TimeSpan keepAliveTime, TimeSpan keepAliveInterval);
    public T MaximumRetries(int maxRetries);
    public T ConnectionLimit(int connectionLimit);
    public T SniffOnConnectionFault(bool sniffsOnConnectionFault);
    public T SniffOnStartup(bool sniffsOnStartup);
    public T SniffLifeSpan(Nullable`1<TimeSpan> sniffLifeSpan);
    public T EnableHttpCompression(bool enabled);
    public T DisableAutomaticProxyDetection(bool disable);
    public T DisableMetaHeader(bool disable);
    public T ThrowExceptions(bool alwaysThrow);
    public T DisablePing(bool disable);
    public T GlobalQueryStringParameters(NameValueCollection queryStringParameters);
    public T GlobalHeaders(NameValueCollection headers);
    public T RequestTimeout(TimeSpan timeout);
    public T PingTimeout(TimeSpan timeout);
    public T DeadTimeout(TimeSpan timeout);
    public T MaxDeadTimeout(TimeSpan timeout);
    public T MaxRetryTimeout(TimeSpan maxRetryTimeout);
    public T DnsRefreshTimeout(TimeSpan timeout);
    public T Proxy(Uri proxyAddress, string username, string password);
    public T Proxy(Uri proxyAddress, string username, SecureString password);
    public T PrettyJson(bool b);
    public T IncludeServerStackTraceOnError(bool b);
    public T DisableDirectStreaming(bool b);
    public T OnRequestCompleted(Action`1<IApiCallDetails> handler);
    public T OnRequestDataCreated(Action`1<RequestData> handler);
    public T BasicAuthentication(string username, string password);
    public T BasicAuthentication(string username, SecureString password);
    public T ApiKeyAuthentication(string id, SecureString apiKey);
    public T ApiKeyAuthentication(string id, string apiKey);
    public T ApiKeyAuthentication(ApiKeyAuthenticationCredentials credentials);
    public T EnableHttpPipelining(bool enabled);
    public T NodePredicate(Func`2<Node, bool> predicate);
    public T EnableDebugMode(Action`1<IApiCallDetails> onRequestCompleted);
    public T ServerCertificateValidationCallback(Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> callback);
    public T ClientCertificates(X509CertificateCollection certificates);
    public T ClientCertificate(X509Certificate certificate);
    public T ClientCertificate(string certificatePath);
    public T SkipDeserializationForStatusCodes(Int32[] statusCodes);
    public T UserAgent(string userAgent);
    public T TransferEncodingChunked(bool transferEncodingChunked);
    public T MemoryStreamFactory(IMemoryStreamFactory memoryStreamFactory);
    public T EnableTcpStats(bool enableTcpStats);
    public T EnableThreadPoolStats(bool enableThreadPoolStats);
    protected virtual void DisposeManagedResources();
    protected virtual bool HttpStatusCodeClassifier(HttpMethod method, int statusCode);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__47_0(HttpMethod m, int i);
    [CompilerGeneratedAttribute]
private void <EnableDebugMode>b__184_0(T a, Action`1<IApiCallDetails> v);
}
public static class OpenSearch.Net.ConnectionInfo : object {
    public static bool UsingCurlHandler { get; }
    public static bool get_UsingCurlHandler();
}
public class OpenSearch.Net.CountRequestParameters : RequestParameters`1<CountRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreThrottled { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public Nullable`1<double> MinScore { get; public set; }
    public string Preference { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public String[] Routing { get; public set; }
    public Nullable`1<long> TerminateAfter { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreThrottled();
    public void set_IgnoreThrottled(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public Nullable`1<double> get_MinScore();
    public void set_MinScore(Nullable`1<double> value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
    public Nullable`1<long> get_TerminateAfter();
    public void set_TerminateAfter(Nullable`1<long> value);
}
public class OpenSearch.Net.CreatePitRequestParameters : RequestParameters`1<CreatePitRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowPartialPitCreation { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public TimeSpan KeepAlive { get; public set; }
    public string Preference { get; public set; }
    public String[] Routing { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowPartialPitCreation();
    public void set_AllowPartialPitCreation(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public TimeSpan get_KeepAlive();
    public void set_KeepAlive(TimeSpan value);
    public string get_Preference();
    public void set_Preference(string value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
}
public class OpenSearch.Net.CreateRequestParameters : RequestParameters`1<CreateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Pipeline { get; public set; }
    public Nullable`1<Refresh> Refresh { get; public set; }
    public string Routing { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Pipeline();
    public void set_Pipeline(string value);
    public Nullable`1<Refresh> get_Refresh();
    public void set_Refresh(Nullable`1<Refresh> value);
    public string get_Routing();
    public void set_Routing(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public abstract class OpenSearch.Net.CustomResponseBuilderBase : object {
    public abstract virtual object DeserializeResponse(IOpenSearchSerializer builtInSerializer, IApiCallDetails response, Stream stream);
    public abstract virtual Task`1<object> DeserializeResponseAsync(IOpenSearchSerializer builtInSerializer, IApiCallDetails response, Stream stream, CancellationToken ctx);
}
public class OpenSearch.Net.DateTimeProvider : object {
    public static DateTimeProvider Default;
    private static TimeSpan DefaultTimeout;
    private static TimeSpan MaximumTimeout;
    private static DateTimeProvider();
    public virtual DateTime DeadTime(int attempts, Nullable`1<TimeSpan> timeoutFactor, Nullable`1<TimeSpan> maxDeadTimeout);
    public virtual DateTime Now();
}
[StringEnumAttribute]
public enum OpenSearch.Net.DefaultOperator : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DefaultOperator And;
    [EnumMemberAttribute]
public static DefaultOperator Or;
}
public class OpenSearch.Net.DeleteAllPitsRequestParameters : RequestParameters`1<DeleteAllPitsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.DeleteByQueryRequestParameters : RequestParameters`1<DeleteByQueryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<Conflicts> Conflicts { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<long> From { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public string Preference { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public Nullable`1<bool> RequestCache { get; public set; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public String[] Routing { get; public set; }
    public TimeSpan Scroll { get; public set; }
    public Nullable`1<long> ScrollSize { get; public set; }
    public TimeSpan SearchTimeout { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<long> Slices { get; public set; }
    public String[] Sort { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] Stats { get; public set; }
    public Nullable`1<long> TerminateAfter { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> Version { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<Conflicts> get_Conflicts();
    public void set_Conflicts(Nullable`1<Conflicts> value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<long> get_From();
    public void set_From(Nullable`1<long> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public Nullable`1<bool> get_RequestCache();
    public void set_RequestCache(Nullable`1<bool> value);
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
    public TimeSpan get_Scroll();
    public void set_Scroll(TimeSpan value);
    public Nullable`1<long> get_ScrollSize();
    public void set_ScrollSize(Nullable`1<long> value);
    public TimeSpan get_SearchTimeout();
    public void set_SearchTimeout(TimeSpan value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<long> get_Slices();
    public void set_Slices(Nullable`1<long> value);
    public String[] get_Sort();
    public void set_Sort(String[] value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_Stats();
    public void set_Stats(String[] value);
    public Nullable`1<long> get_TerminateAfter();
    public void set_TerminateAfter(Nullable`1<long> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_Version();
    public void set_Version(Nullable`1<bool> value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.DeleteByQueryRethrottleRequestParameters : RequestParameters`1<DeleteByQueryRethrottleRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
}
public class OpenSearch.Net.DeletePitRequestParameters : RequestParameters`1<DeletePitRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.DeleteRequestParameters : RequestParameters`1<DeleteRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> IfPrimaryTerm { get; public set; }
    public Nullable`1<long> IfSequenceNumber { get; public set; }
    public Nullable`1<Refresh> Refresh { get; public set; }
    public string Routing { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_IfPrimaryTerm();
    public void set_IfPrimaryTerm(Nullable`1<long> value);
    public Nullable`1<long> get_IfSequenceNumber();
    public void set_IfSequenceNumber(Nullable`1<long> value);
    public Nullable`1<Refresh> get_Refresh();
    public void set_Refresh(Nullable`1<Refresh> value);
    public string get_Routing();
    public void set_Routing(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.DeleteScriptRequestParameters : RequestParameters`1<DeleteScriptRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Diagnostics.AuditDiagnosticObserver : TypedDiagnosticObserverBase`1<Audit> {
    public AuditDiagnosticObserver(Action`1<KeyValuePair`2<string, Audit>> onNext, Action`1<Exception> onError, Action onCompleted);
}
internal class OpenSearch.Net.Diagnostics.Diagnostic`1 : Diagnostic`2<TState, TState> {
    public Diagnostic`1(string operationName, DiagnosticSource source, TState state);
}
internal class OpenSearch.Net.Diagnostics.Diagnostic`2 : object {
    [CompilerGeneratedAttribute]
private static Diagnostic`2<TState, TStateEnd> <Default>k__BackingField;
    private DiagnosticSource _source;
    private bool _default;
    private Activity _activity;
    private TStateEnd _endState;
    public static Diagnostic`2<TState, TStateEnd> Default { get; }
    public TStateEnd EndState { get; internal set; }
    public Diagnostic`2(string operationName, DiagnosticSource source, TState state);
    private static Diagnostic`2();
    [CompilerGeneratedAttribute]
public static Diagnostic`2<TState, TStateEnd> get_Default();
    public TStateEnd get_EndState();
    internal void set_EndState(TStateEnd value);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class OpenSearch.Net.Diagnostics.DiagnosticSources : object {
    [CompilerGeneratedAttribute]
private static EmptyDisposable <SingletonDisposable>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuditDiagnosticKeys <AuditTrailEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private static RequestPipelineDiagnosticKeys <RequestPipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private static HttpConnectionDiagnosticKeys <HttpConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private static SerializerDiagnosticKeys <Serializer>k__BackingField;
    internal static EmptyDisposable SingletonDisposable { get; }
    public static AuditDiagnosticKeys AuditTrailEvents { get; }
    public static RequestPipelineDiagnosticKeys RequestPipeline { get; }
    public static HttpConnectionDiagnosticKeys HttpConnection { get; }
    public static SerializerDiagnosticKeys Serializer { get; }
    private static DiagnosticSources();
    [CompilerGeneratedAttribute]
internal static EmptyDisposable get_SingletonDisposable();
    [ExtensionAttribute]
internal static IDisposable Diagnose(DiagnosticSource source, string operationName, TState state);
    [ExtensionAttribute]
internal static Diagnostic`2<TState, TStateStop> Diagnose(DiagnosticSource source, string operationName, TState state);
    [ExtensionAttribute]
internal static Diagnostic`2<TState, TEndState> Diagnose(DiagnosticSource source, string operationName, TState state, TEndState endState);
    [CompilerGeneratedAttribute]
public static AuditDiagnosticKeys get_AuditTrailEvents();
    [CompilerGeneratedAttribute]
public static RequestPipelineDiagnosticKeys get_RequestPipeline();
    [CompilerGeneratedAttribute]
public static HttpConnectionDiagnosticKeys get_HttpConnection();
    [CompilerGeneratedAttribute]
public static SerializerDiagnosticKeys get_Serializer();
}
public class OpenSearch.Net.Diagnostics.HttpConnectionDiagnosticObserver : TypedDiagnosticObserverBase`2<RequestData, Nullable`1<int>> {
    public HttpConnectionDiagnosticObserver(Action`1<KeyValuePair`2<string, RequestData>> onNextStart, Action`1<KeyValuePair`2<string, Nullable`1<int>>> onNextEnd, Action`1<Exception> onError, Action onCompleted);
}
public class OpenSearch.Net.Diagnostics.RequestPipelineDiagnosticObserver : TypedDiagnosticObserverBase`2<RequestData, IApiCallDetails> {
    public RequestPipelineDiagnosticObserver(Action`1<KeyValuePair`2<string, RequestData>> onNextStart, Action`1<KeyValuePair`2<string, IApiCallDetails>> onNextEnd, Action`1<Exception> onError, Action onCompleted);
}
public class OpenSearch.Net.Diagnostics.SerializerDiagnosticObserver : TypedDiagnosticObserverBase`1<SerializerRegistrationInformation> {
    public SerializerDiagnosticObserver(Action`1<KeyValuePair`2<string, SerializerRegistrationInformation>> onNext, Action`1<Exception> onError, Action onCompleted);
}
public static class OpenSearch.Net.Diagnostics.TcpStats : object {
    private static int StateLength;
    private static ReadOnlyDictionary`2<TcpState, int> Empty;
    private static TcpStats();
    public static TcpConnectionInformation[] GetActiveTcpConnections();
    public static ReadOnlyDictionary`2<TcpState, int> GetStates();
    public static TcpStatistics GetTcpStatistics(NetworkInterfaceComponent version);
}
public class OpenSearch.Net.Diagnostics.ThreadPoolStatistics : object {
    [CompilerGeneratedAttribute]
private int <Busy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Free>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    public int Busy { get; }
    public int Free { get; }
    public int Max { get; }
    public int Min { get; }
    public ThreadPoolStatistics(int min, int max, int busy, int free);
    [CompilerGeneratedAttribute]
public int get_Busy();
    [CompilerGeneratedAttribute]
public int get_Free();
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public int get_Min();
}
public class OpenSearch.Net.Diagnostics.ThreadPoolStats : object {
    private static string WorkerThreads;
    private static string CompletionPortThreads;
    private static ThreadPoolStats();
    public static ReadOnlyDictionary`2<string, ThreadPoolStatistics> GetStats();
}
public abstract class OpenSearch.Net.Diagnostics.TypedDiagnosticObserverBase`1 : object {
    private Action`1<KeyValuePair`2<string, TOnNext>> _onNext;
    private Action`1<Exception> _onError;
    private Action _onCompleted;
    protected TypedDiagnosticObserverBase`1(Action`1<KeyValuePair`2<string, TOnNext>> onNext, Action`1<Exception> onError, Action onCompleted);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2<string, object> value);
}
public abstract class OpenSearch.Net.Diagnostics.TypedDiagnosticObserverBase`2 : object {
    private Action`1<KeyValuePair`2<string, TOnNextStart>> _onNextStart;
    private Action`1<KeyValuePair`2<string, TOnNextEnd>> _onNextEnd;
    private Action`1<Exception> _onError;
    private Action _onCompleted;
    protected TypedDiagnosticObserverBase`2(Action`1<KeyValuePair`2<string, TOnNextStart>> onNextStart, Action`1<KeyValuePair`2<string, TOnNextEnd>> onNextEnd, Action`1<Exception> onError, Action onCompleted);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2<string, object> value);
}
internal class OpenSearch.Net.DiagnosticsSerializerProxy : object {
    private IOpenSearchSerializer _serializer;
    private bool _wrapsUtf8JsonSerializer;
    private SerializerRegistrationInformation _state;
    private IJsonFormatterResolver _formatterResolver;
    [CompilerGeneratedAttribute]
private static DiagnosticSource <DiagnosticSource>k__BackingField;
    private static DiagnosticSource DiagnosticSource { get; }
    public DiagnosticsSerializerProxy(IOpenSearchSerializer serializer, string purpose);
    private static DiagnosticsSerializerProxy();
    [CompilerGeneratedAttribute]
private static DiagnosticSource get_DiagnosticSource();
    public sealed virtual bool TryGetJsonFormatter(IJsonFormatterResolver& formatterResolver);
    public sealed virtual object Deserialize(Type type, Stream stream);
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual Task`1<object> DeserializeAsync(Type type, Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual void Serialize(T data, Stream stream, SerializationFormatting formatting);
    public sealed virtual Task SerializeAsync(T data, Stream stream, SerializationFormatting formatting, CancellationToken cancellationToken);
}
public class OpenSearch.Net.DocumentExistsRequestParameters : RequestParameters`1<DocumentExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] StoredFields { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_StoredFields();
    public void set_StoredFields(String[] value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
[DefaultMemberAttribute("Item")]
[JsonFormatterAttribute("OpenSearch.Net.DynamicDictionaryFormatter")]
public class OpenSearch.Net.DynamicDictionary : DynamicObject {
    private IDictionary`2<string, DynamicValue> _backingDictionary;
    private static Regex SplitRegex;
    public int Count { get; }
    public static DynamicDictionary Empty { get; }
    public bool IsReadOnly { get; }
    public DynamicValue Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<DynamicValue> Values { get; }
    private static DynamicDictionary();
    public sealed virtual int get_Count();
    public Dictionary`2<string, object> ToDictionary();
    public static DynamicDictionary get_Empty();
    public sealed virtual bool get_IsReadOnly();
    public T Get(string path);
    public sealed virtual DynamicValue get_Item(string name);
    public sealed virtual void set_Item(string name, DynamicValue value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<DynamicValue> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, DynamicValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, DynamicValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, DynamicValue> item);
    public sealed virtual void Add(string key, DynamicValue value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, DynamicValue& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, DynamicValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,OpenSearch.Net.DynamicValue>>.GetEnumerator();
    public IEnumerable`1<KeyValuePair`2<string, DynamicValue>> GetKeyValues();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual bool Equals(DynamicDictionary other);
    public static DynamicDictionary Create(IDictionary`2<string, object> values);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static KeyValuePair`2<string, object> GetDynamicKeyValuePair(KeyValuePair`2<string, DynamicValue> item);
    private static string GetNeutralKey(string key);
}
internal class OpenSearch.Net.DynamicDictionaryFormatter : object {
    protected static DictionaryFormatter`2<string, object> DictionaryFormatter;
    protected static ArrayFormatter`1<object> ArrayFormatter;
    private static DynamicDictionaryFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, DynamicDictionary value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DynamicDictionary Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
[DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OpenSearch.Net.DynamicResponse : OpenSearchResponse`1<object> {
    [CompilerGeneratedAttribute]
private DynamicDictionary <Dictionary>k__BackingField;
    public DynamicDictionary Dictionary { get; }
    public DynamicResponse(DynamicDictionary dictionary);
    [CompilerGeneratedAttribute]
public DynamicDictionary get_Dictionary();
    public T Get(string path);
}
[DefaultMemberAttribute("Item")]
public class OpenSearch.Net.DynamicValue : DynamicObject {
    private object _value;
    [CompilerGeneratedAttribute]
private static DynamicValue <NullValue>k__BackingField;
    public bool HasValue { get; }
    public DynamicValue Item { get; }
    public static DynamicValue NullValue { get; }
    public DynamicValue Item { get; }
    public object Value { get; }
    public DynamicValue(object value);
    private static DynamicValue();
    public bool get_HasValue();
    public DynamicValue get_Item(string name);
    public T Get(string path);
    [CompilerGeneratedAttribute]
public static DynamicValue get_NullValue();
    public static DynamicValue SelfOrNew(object v);
    public DynamicValue get_Item(int i);
    public object get_Value();
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    [CLSCompliantAttribute("False")]
public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    [CLSCompliantAttribute("False")]
public sealed virtual ushort ToUInt16(IFormatProvider provider);
    [CLSCompliantAttribute("False")]
public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    [CLSCompliantAttribute("False")]
public sealed virtual ulong ToUInt64(IFormatProvider provider);
    public IDictionary`2<string, DynamicValue> ToDictionary();
    public sealed virtual bool Equals(DynamicValue compareValue);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    private bool Dispatch(Object& result, string name);
    private static object GetDynamicMember(object obj, string memberName);
    public T Default(T defaultValue);
    public T TryParse(T defaultValue);
    internal bool TryParse(object defaultValue, Type targetReturnType, object value, Object& newObject);
    public static bool op_Equality(DynamicValue dynamicValue, object compareValue);
    public static bool op_Inequality(DynamicValue dynamicValue, object compareValue);
    public virtual bool Equals(object compareValue);
    public virtual int GetHashCode();
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual string ToString();
    public static bool op_Implicit(DynamicValue dynamicValue);
    public static string op_Implicit(DynamicValue dynamicValue);
    public static int op_Implicit(DynamicValue dynamicValue);
    public static Guid op_Implicit(DynamicValue dynamicValue);
    public static DateTime op_Implicit(DynamicValue dynamicValue);
    public static TimeSpan op_Implicit(DynamicValue dynamicValue);
    public static long op_Implicit(DynamicValue dynamicValue);
    public static float op_Implicit(DynamicValue dynamicValue);
    public static decimal op_Implicit(DynamicValue dynamicValue);
    public static double op_Implicit(DynamicValue dynamicValue);
}
internal static class OpenSearch.Net.EmptyReadOnly`1 : object {
    public static IReadOnlyCollection`1<TElement> Collection;
    public static IReadOnlyList`1<TElement> List;
    private static EmptyReadOnly`1();
}
internal static class OpenSearch.Net.EmptyReadOnly`2 : object {
    public static IReadOnlyDictionary`2<TKey, TValue> Dictionary;
    private static EmptyReadOnly`2();
}
[ExtensionAttribute]
internal static class OpenSearch.Net.EmptyReadOnlyExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<T> ToReadOnlyCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<T> ToReadOnlyCollection(IList`1<T> enumerable);
}
[DataContractAttribute]
[JsonFormatterAttribute("OpenSearch.Net.ErrorFormatter")]
public class OpenSearch.Net.Error : ErrorCause {
    private static IReadOnlyDictionary`2<string, string> DefaultHeaders;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ErrorCause> <RootCause>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyDictionary`2<string, string> Headers { get; public set; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<ErrorCause> RootCause { get; public set; }
    private static Error();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ErrorCause> get_RootCause();
    [CompilerGeneratedAttribute]
public void set_RootCause(IReadOnlyCollection`1<ErrorCause> value);
    public virtual string ToString();
}
[JsonFormatterAttribute("OpenSearch.Net.ErrorCauseFormatter")]
[DataContractAttribute]
public class OpenSearch.Net.ErrorCause : object {
    private static IReadOnlyCollection`1<string> DefaultCollection;
    private static IReadOnlyDictionary`2<string, object> DefaultDictionary;
    private static IReadOnlyCollection`1<ShardFailure> DefaultFailedShards;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BytesLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BytesWanted>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorCause <CausedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ShardFailure> <FailedShards>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Grouped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexUUID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Phase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <ScriptStack>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Shard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public IReadOnlyDictionary`2<string, object> AdditionalProperties { get; internal set; }
    public Nullable`1<long> BytesLimit { get; internal set; }
    public Nullable`1<long> BytesWanted { get; internal set; }
    public ErrorCause CausedBy { get; internal set; }
    public Nullable`1<int> Column { get; internal set; }
    public IReadOnlyCollection`1<ShardFailure> FailedShards { get; internal set; }
    public Nullable`1<bool> Grouped { get; internal set; }
    public string Index { get; internal set; }
    public string IndexUUID { get; internal set; }
    public string Language { get; internal set; }
    public Nullable`1<int> Line { get; internal set; }
    public string Phase { get; internal set; }
    public string Reason { get; internal set; }
    public IReadOnlyCollection`1<string> ResourceId { get; internal set; }
    public string ResourceType { get; internal set; }
    public string Script { get; internal set; }
    public IReadOnlyCollection`1<string> ScriptStack { get; internal set; }
    public Nullable`1<int> Shard { get; internal set; }
    public string StackTrace { get; internal set; }
    public string Type { get; internal set; }
    private static ErrorCause();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
internal void set_AdditionalProperties(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BytesLimit();
    [CompilerGeneratedAttribute]
internal void set_BytesLimit(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BytesWanted();
    [CompilerGeneratedAttribute]
internal void set_BytesWanted(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public ErrorCause get_CausedBy();
    [CompilerGeneratedAttribute]
internal void set_CausedBy(ErrorCause value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ShardFailure> get_FailedShards();
    [CompilerGeneratedAttribute]
internal void set_FailedShards(IReadOnlyCollection`1<ShardFailure> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Grouped();
    [CompilerGeneratedAttribute]
internal void set_Grouped(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(string value);
    [CompilerGeneratedAttribute]
public string get_IndexUUID();
    [CompilerGeneratedAttribute]
internal void set_IndexUUID(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
internal void set_Language(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
internal void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Phase();
    [CompilerGeneratedAttribute]
internal void set_Phase(string value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_ResourceId();
    [CompilerGeneratedAttribute]
internal void set_ResourceId(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ResourceType();
    [CompilerGeneratedAttribute]
internal void set_ResourceType(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
internal void set_Script(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_ScriptStack();
    [CompilerGeneratedAttribute]
internal void set_ScriptStack(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Shard();
    [CompilerGeneratedAttribute]
internal void set_Shard(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
internal void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    public virtual string ToString();
}
internal class OpenSearch.Net.ErrorCauseFormatter : ErrorCauseFormatter`1<ErrorCause> {
}
internal class OpenSearch.Net.ErrorCauseFormatter`1 : object {
    protected virtual bool Deserialize(JsonReader& reader, ArraySegment`1& property, TErrorCause value, IJsonFormatterResolver formatterResolver);
    protected virtual void Serialize(JsonWriter& writer, Int32& count, TErrorCause value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TErrorCause Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void Serialize(JsonWriter& writer, TErrorCause value, IJsonFormatterResolver formatterResolver);
}
internal static class OpenSearch.Net.ErrorCauseFormatterStatics : object {
    public static AutomataDictionary Fields;
    public static NullableStringIntFormatter ShardFormatter;
    public static InterfaceReadOnlyCollectionSingleOrEnumerableFormatter`1<string> SingleOrEnumerableFormatter;
    public static ErrorCauseFormatter`1<ErrorCause> ErrorCausePropertyFormatter;
    private static ErrorCauseFormatterStatics();
}
internal class OpenSearch.Net.ErrorFormatter : ErrorCauseFormatter`1<Error> {
    private static AutomataDictionary Fields;
    private static ErrorFormatter();
    protected virtual void Serialize(JsonWriter& writer, Int32& count, Error value, IJsonFormatterResolver formatterResolver);
    protected virtual bool Deserialize(JsonReader& reader, ArraySegment`1& property, Error value, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.ExceptionFormatter`1 : object {
    private static List`1<Dictionary`2<string, object>> FlattenExceptions(Exception e);
    private static Dictionary`2<string, object> ToDictionary(Exception e, int depth);
    private static void WriteStructuredExceptionMethod(Dictionary`2<string, object> o, string exceptionMethodString);
    public sealed virtual void Serialize(JsonWriter& writer, TException value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TException Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.ExceptionFormatterResolver : object {
    public static ExceptionFormatterResolver Instance;
    private static ExceptionFormatterResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
public class OpenSearch.Net.ExecutePainlessScriptRequestParameters : RequestParameters`1<ExecutePainlessScriptRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.ExpandWildcards : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ExpandWildcards All;
    [EnumMemberAttribute]
public static ExpandWildcards Closed;
    [EnumMemberAttribute]
public static ExpandWildcards Hidden;
    [EnumMemberAttribute]
public static ExpandWildcards None;
    [EnumMemberAttribute]
public static ExpandWildcards Open;
}
internal class OpenSearch.Net.ExpiredHandlerTrackingEntry : object {
    private WeakReference _livenessTracker;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <InnerHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Key>k__BackingField;
    public bool CanDispose { get; }
    public HttpMessageHandler InnerHandler { get; }
    public int Key { get; }
    public ExpiredHandlerTrackingEntry(ActiveHandlerTrackingEntry other);
    public bool get_CanDispose();
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_InnerHandler();
    [CompilerGeneratedAttribute]
public int get_Key();
}
public class OpenSearch.Net.ExplainRequestParameters : RequestParameters`1<ExplainRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public string Preference { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] StoredFields { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_StoredFields();
    public void set_StoredFields(String[] value);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.ArraySegmentBytesExtensions : object {
    private static byte DateMathSeparator;
    private static byte DecimalPoint;
    private static Byte[] LongMaxValue;
    private static Byte[] LongMinValue;
    private static ArraySegmentBytesExtensions();
    [ExtensionAttribute]
public static bool IsDouble(ArraySegment`1& arraySegment);
    [ExtensionAttribute]
public static bool IsLong(ArraySegment`1& arraySegment);
    [ExtensionAttribute]
public static bool EqualsBytes(ArraySegment`1& arraySegment, Byte[] bytes);
    [ExtensionAttribute]
public static bool IsDateTime(ArraySegment`1& arraySegment, IJsonFormatterResolver formatterResolver, DateTime& dateTime);
    [ExtensionAttribute]
public static bool ContainsDateMathSeparator(ArraySegment`1& segment);
    [ExtensionAttribute]
internal static string Utf8String(ArraySegment`1& segment);
}
internal static class OpenSearch.Net.Extensions.CharUtils : object {
    internal static char HexDigit(int num);
}
internal static class OpenSearch.Net.Extensions.DateTimeUtil : object {
    public static DateTimeOffset UnixEpoch;
    private static DateTimeUtil();
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
internal static string GetStringValue(HttpMethod enumValue);
}
internal static class OpenSearch.Net.Extensions.Fluent : object {
    internal static TDescriptor Assign(TDescriptor self, TValue value, Action`2<TInterface, TValue> assign);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.NameValueCollectionExtensions : object {
    [ExtensionAttribute]
internal static string ToQueryString(NameValueCollection nv);
    [ExtensionAttribute]
internal static void UpdateFromDictionary(NameValueCollection queryString, Dictionary`2<string, object> queryStringUpdates, OpenSearchUrlFormatter provider);
}
internal static class OpenSearch.Net.Extensions.StringBuilderCache : object {
    private static int DefaultCapacity;
    private static int MaxBuilderSize;
    [ThreadStaticAttribute]
private static StringBuilder _cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.TypeExtensions : object {
    private static MethodInfo GetActivatorMethodInfo;
    private static ConcurrentDictionary`2<string, ObjectActivator`1<object>> CachedActivators;
    private static ConcurrentDictionary`2<Type, Func`1<object>> CachedDefaultValues;
    private static TypeExtensions();
    [ExtensionAttribute]
internal static object CreateInstance(Type t, Object[] args);
    private static ObjectActivator`1<T> GetActivator(ConstructorInfo ctor);
    [ExtensionAttribute]
internal static object DefaultValue(Type type);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.UtilExtensions : object {
    private static long MillisecondsInAWeek;
    private static long MillisecondsInADay;
    private static long MillisecondsInAnHour;
    private static long MillisecondsInAMinute;
    private static long MillisecondsInASecond;
    [ExtensionAttribute]
internal static string Utf8String(Byte[] bytes);
    [ExtensionAttribute]
internal static string Utf8String(MemoryStream ms);
    [ExtensionAttribute]
internal static Byte[] Utf8Bytes(string s);
    [ExtensionAttribute]
internal static void ThrowIfEmpty(IEnumerable`1<T> object, string parameterName);
    [ExtensionAttribute]
internal static bool HasAny(IEnumerable`1<T> list);
    [ExtensionAttribute]
internal static bool HasAny(IEnumerable`1<T> list, T[]& enumerated);
    [ExtensionAttribute]
internal static Exception AsAggregateOrFirst(IEnumerable`1<Exception> exceptions);
    [ExtensionAttribute]
internal static void ThrowIfNull(T value, string name);
    [ExtensionAttribute]
internal static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
internal static IEnumerable`1<T> DistinctByInternal(IEnumerable`1<T> items, Func`2<T, TKey> property);
    [ExtensionAttribute]
internal static string ToTimeUnit(TimeSpan timeSpan);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Extensions.X509CertificateExtensions : object {
    [ExtensionAttribute]
internal static string GetCertHashString(X509Certificate certificate);
    private static string EncodeHexString(Byte[] sArray);
}
public class OpenSearch.Net.FieldCapabilitiesRequestParameters : RequestParameters`1<FieldCapabilitiesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeUnmapped { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeUnmapped();
    public void set_IncludeUnmapped(Nullable`1<bool> value);
}
public class OpenSearch.Net.GetAllPitsRequestParameters : RequestParameters`1<GetAllPitsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.GetRequestParameters : RequestParameters`1<GetRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] StoredFields { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_StoredFields();
    public void set_StoredFields(String[] value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
public class OpenSearch.Net.GetScriptContextRequestParameters : RequestParameters`1<GetScriptContextRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.GetScriptLanguagesRequestParameters : RequestParameters`1<GetScriptLanguagesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.GetScriptRequestParameters : RequestParameters`1<GetScriptRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.GroupBy : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GroupBy Nodes;
    [EnumMemberAttribute]
public static GroupBy Parents;
    [EnumMemberAttribute]
public static GroupBy None;
}
[StringEnumAttribute]
public enum OpenSearch.Net.Health : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Health Green;
    [EnumMemberAttribute]
public static Health Yellow;
    [EnumMemberAttribute]
public static Health Red;
}
public class OpenSearch.Net.HttpConnection : object {
    [CompilerGeneratedAttribute]
private static DiagnosticSource <DiagnosticSource>k__BackingField;
    private static string MissingConnectionLimitMethodError;
    private static HttpMethod Patch;
    [CompilerGeneratedAttribute]
private RequestDataHttpClientFactory <HttpClientFactory>k__BackingField;
    private static DiagnosticSource DiagnosticSource { get; }
    private RequestDataHttpClientFactory HttpClientFactory { get; }
    public int InUseHandlers { get; }
    public int RemovedHandlers { get; }
    private static HttpConnection();
    [CompilerGeneratedAttribute]
private static DiagnosticSource get_DiagnosticSource();
    [CompilerGeneratedAttribute]
private RequestDataHttpClientFactory get_HttpClientFactory();
    public int get_InUseHandlers();
    public int get_RemovedHandlers();
    public virtual TResponse Request(RequestData requestData);
    [AsyncStateMachineAttribute("OpenSearch.Net.HttpConnection/<RequestAsync>d__14`1")]
public virtual Task`1<TResponse> RequestAsync(RequestData requestData, CancellationToken cancellationToken);
    private sealed virtual override void System.IDisposable.Dispose();
    private HttpClient GetClient(RequestData requestData);
    protected virtual HttpMessageHandler CreateHttpClientHandler(RequestData requestData);
    protected virtual HttpRequestMessage CreateHttpRequestMessage(RequestData requestData);
    protected virtual void SetAuthenticationIfNeeded(HttpRequestMessage requestMessage, RequestData requestData);
    protected virtual bool SetApiKeyAuthenticationIfNeeded(HttpRequestMessage requestMessage, RequestData requestData);
    protected virtual void SetBasicAuthenticationIfNeeded(HttpRequestMessage requestMessage, RequestData requestData);
    protected virtual HttpRequestMessage CreateRequestMessage(RequestData requestData);
    private static void SetContent(HttpRequestMessage message, RequestData requestData);
    [AsyncStateMachineAttribute("OpenSearch.Net.HttpConnection/<SetContentAsync>d__24")]
private static Task SetContentAsync(HttpRequestMessage message, RequestData requestData, CancellationToken cancellationToken);
    private static HttpMethod ConvertHttpMethod(HttpMethod httpMethod);
    internal static int GetClientKey(RequestData requestData);
    protected virtual void DisposeManagedResources();
    [CompilerGeneratedAttribute]
private HttpMessageHandler <.ctor>b__12_0(RequestData r);
}
public enum OpenSearch.Net.HttpMethod : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HttpMethod GET;
    [EnumMemberAttribute]
public static HttpMethod POST;
    [EnumMemberAttribute]
public static HttpMethod PUT;
    [EnumMemberAttribute]
public static HttpMethod DELETE;
    [EnumMemberAttribute]
public static HttpMethod HEAD;
    [EnumMemberAttribute]
public static HttpMethod PATCH;
}
[ObsoleteAttribute("CoreFX HttpWebRequest uses HttpClient under the covers but does not reuse HttpClient instances, do NOT use on .NET core only used as the default on Full Framework")]
public class OpenSearch.Net.HttpWebRequestConnection : object {
    [CompilerGeneratedAttribute]
private static bool <IsMono>k__BackingField;
    internal static bool IsMono { get; }
    private static HttpWebRequestConnection();
    [CompilerGeneratedAttribute]
internal static bool get_IsMono();
    public virtual TResponse Request(RequestData requestData);
    [AsyncStateMachineAttribute("OpenSearch.Net.HttpWebRequestConnection/<RequestAsync>d__5`1")]
public virtual Task`1<TResponse> RequestAsync(RequestData requestData, CancellationToken cancellationToken);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual HttpWebRequest CreateHttpWebRequest(RequestData requestData);
    protected virtual void SetClientCertificates(HttpWebRequest request, RequestData requestData);
    protected virtual void SetServerCertificateValidationCallBackIfNeeded(HttpWebRequest request, RequestData requestData);
    protected virtual HttpWebRequest CreateWebRequest(RequestData requestData);
    protected virtual void AlterServicePoint(ServicePoint requestServicePoint, RequestData requestData);
    protected virtual void SetProxyIfNeeded(HttpWebRequest request, RequestData requestData);
    protected virtual void SetAuthenticationIfNeeded(RequestData requestData, HttpWebRequest request);
    protected virtual void SetBasicAuthenticationIfNeeded(HttpWebRequest request, RequestData requestData);
    protected virtual bool SetApiKeyAuthenticationIfNeeded(HttpWebRequest request, RequestData requestData);
    private static Action RegisterApmTaskTimeout(IAsyncResult result, WebRequest request, RequestData requestData);
    private static void TimeoutCallback(object state, bool timedOut);
    private static void HandleResponse(HttpWebResponse response, Nullable`1& statusCode, Stream& responseStream, String& mimeType);
    protected virtual void DisposeManagedResources();
}
public interface OpenSearch.Net.IApiCallDetails {
    public List`1<Audit> AuditTrail { get; public set; }
    public ReadOnlyDictionary`2<string, ThreadPoolStatistics> ThreadPoolStats { get; public set; }
    public ReadOnlyDictionary`2<TcpState, int> TcpStats { get; public set; }
    public string DebugInformation { get; }
    public IConnectionConfigurationValues ConnectionConfiguration { get; }
    public IEnumerable`1<string> DeprecationWarnings { get; }
    public HttpMethod HttpMethod { get; }
    public Nullable`1<int> HttpStatusCode { get; }
    public Exception OriginalException { get; }
    [DebuggerDisplayAttribute("{RequestBodyInBytes != null ? System.Text.Encoding.UTF8.GetString(RequestBodyInBytes) : null,nq}")]
public Byte[] RequestBodyInBytes { get; }
    [DebuggerDisplayAttribute("{ResponseBodyInBytes != null ? System.Text.Encoding.UTF8.GetString(ResponseBodyInBytes) : null,nq}")]
public Byte[] ResponseBodyInBytes { get; }
    public string ResponseMimeType { get; }
    public bool Success { get; }
    public bool SuccessOrKnownError { get; }
    public Uri Uri { get; }
    public abstract virtual List`1<Audit> get_AuditTrail();
    public abstract virtual void set_AuditTrail(List`1<Audit> value);
    public abstract virtual ReadOnlyDictionary`2<string, ThreadPoolStatistics> get_ThreadPoolStats();
    public abstract virtual void set_ThreadPoolStats(ReadOnlyDictionary`2<string, ThreadPoolStatistics> value);
    public abstract virtual ReadOnlyDictionary`2<TcpState, int> get_TcpStats();
    public abstract virtual void set_TcpStats(ReadOnlyDictionary`2<TcpState, int> value);
    public abstract virtual string get_DebugInformation();
    public abstract virtual IConnectionConfigurationValues get_ConnectionConfiguration();
    public abstract virtual IEnumerable`1<string> get_DeprecationWarnings();
    public abstract virtual HttpMethod get_HttpMethod();
    public abstract virtual Nullable`1<int> get_HttpStatusCode();
    public abstract virtual Exception get_OriginalException();
    public abstract virtual Byte[] get_RequestBodyInBytes();
    public abstract virtual Byte[] get_ResponseBodyInBytes();
    public abstract virtual string get_ResponseMimeType();
    public abstract virtual bool get_Success();
    public abstract virtual bool get_SuccessOrKnownError();
    public abstract virtual Uri get_Uri();
}
public interface OpenSearch.Net.IConnection {
    public abstract virtual Task`1<TResponse> RequestAsync(RequestData requestData, CancellationToken cancellationToken);
    public abstract virtual TResponse Request(RequestData requestData);
}
public interface OpenSearch.Net.IConnectionConfigurationValues {
    public BasicAuthenticationCredentials BasicAuthenticationCredentials { get; }
    public ApiKeyAuthenticationCredentials ApiKeyAuthenticationCredentials { get; }
    public SemaphoreSlim BootstrapLock { get; }
    public X509CertificateCollection ClientCertificates { get; }
    public IConnection Connection { get; }
    public int ConnectionLimit { get; }
    public IConnectionPool ConnectionPool { get; }
    public Nullable`1<TimeSpan> DeadTimeout { get; }
    public bool DisableAutomaticProxyDetection { get; }
    public bool DisableDirectStreaming { get; }
    public bool DisableMetaHeader { get; }
    public bool DisablePings { get; }
    public bool EnableHttpCompression { get; }
    public NameValueCollection Headers { get; }
    public bool HttpPipeliningEnabled { get; }
    public Nullable`1<TimeSpan> KeepAliveInterval { get; }
    public Nullable`1<TimeSpan> KeepAliveTime { get; }
    public Nullable`1<TimeSpan> MaxDeadTimeout { get; }
    public Nullable`1<int> MaxRetries { get; }
    public Nullable`1<TimeSpan> MaxRetryTimeout { get; }
    public IMemoryStreamFactory MemoryStreamFactory { get; }
    public Func`2<Node, bool> NodePredicate { get; }
    public Action`1<IApiCallDetails> OnRequestCompleted { get; }
    public Action`1<RequestData> OnRequestDataCreated { get; }
    public Nullable`1<TimeSpan> PingTimeout { get; }
    public bool PrettyJson { get; }
    public string ProxyAddress { get; }
    public SecureString ProxyPassword { get; }
    public string ProxyUsername { get; }
    public NameValueCollection QueryStringParameters { get; }
    public IOpenSearchSerializer RequestResponseSerializer { get; }
    public TimeSpan RequestTimeout { get; }
    public Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> ServerCertificateValidationCallback { get; }
    public IReadOnlyCollection`1<int> SkipDeserializationForStatusCodes { get; }
    public Nullable`1<TimeSpan> SniffInformationLifeSpan { get; }
    public bool SniffsOnConnectionFault { get; }
    public bool SniffsOnStartup { get; }
    public bool ThrowExceptions { get; }
    public OpenSearchUrlFormatter UrlFormatter { get; }
    public string UserAgent { get; }
    public Func`3<HttpMethod, int, bool> StatusCodeToResponseSuccess { get; }
    public bool TransferEncodingChunked { get; }
    public TimeSpan DnsRefreshTimeout { get; }
    public bool EnableTcpStats { get; }
    public bool EnableThreadPoolStats { get; }
    public MetaHeaderProvider MetaHeaderProvider { get; }
    public abstract virtual BasicAuthenticationCredentials get_BasicAuthenticationCredentials();
    public abstract virtual ApiKeyAuthenticationCredentials get_ApiKeyAuthenticationCredentials();
    public abstract virtual SemaphoreSlim get_BootstrapLock();
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual IConnection get_Connection();
    public abstract virtual int get_ConnectionLimit();
    public abstract virtual IConnectionPool get_ConnectionPool();
    public abstract virtual Nullable`1<TimeSpan> get_DeadTimeout();
    public abstract virtual bool get_DisableAutomaticProxyDetection();
    public abstract virtual bool get_DisableDirectStreaming();
    public abstract virtual bool get_DisableMetaHeader();
    public abstract virtual bool get_DisablePings();
    public abstract virtual bool get_EnableHttpCompression();
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual bool get_HttpPipeliningEnabled();
    public abstract virtual Nullable`1<TimeSpan> get_KeepAliveInterval();
    public abstract virtual Nullable`1<TimeSpan> get_KeepAliveTime();
    public abstract virtual Nullable`1<TimeSpan> get_MaxDeadTimeout();
    public abstract virtual Nullable`1<int> get_MaxRetries();
    public abstract virtual Nullable`1<TimeSpan> get_MaxRetryTimeout();
    public abstract virtual IMemoryStreamFactory get_MemoryStreamFactory();
    public abstract virtual Func`2<Node, bool> get_NodePredicate();
    public abstract virtual Action`1<IApiCallDetails> get_OnRequestCompleted();
    public abstract virtual Action`1<RequestData> get_OnRequestDataCreated();
    public abstract virtual Nullable`1<TimeSpan> get_PingTimeout();
    public abstract virtual bool get_PrettyJson();
    public abstract virtual string get_ProxyAddress();
    public abstract virtual SecureString get_ProxyPassword();
    public abstract virtual string get_ProxyUsername();
    public abstract virtual NameValueCollection get_QueryStringParameters();
    public abstract virtual IOpenSearchSerializer get_RequestResponseSerializer();
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> get_ServerCertificateValidationCallback();
    public abstract virtual IReadOnlyCollection`1<int> get_SkipDeserializationForStatusCodes();
    public abstract virtual Nullable`1<TimeSpan> get_SniffInformationLifeSpan();
    public abstract virtual bool get_SniffsOnConnectionFault();
    public abstract virtual bool get_SniffsOnStartup();
    public abstract virtual bool get_ThrowExceptions();
    public abstract virtual OpenSearchUrlFormatter get_UrlFormatter();
    public abstract virtual string get_UserAgent();
    public abstract virtual Func`3<HttpMethod, int, bool> get_StatusCodeToResponseSuccess();
    public abstract virtual bool get_TransferEncodingChunked();
    public abstract virtual TimeSpan get_DnsRefreshTimeout();
    public abstract virtual bool get_EnableTcpStats();
    public abstract virtual bool get_EnableThreadPoolStats();
    public abstract virtual MetaHeaderProvider get_MetaHeaderProvider();
}
public interface OpenSearch.Net.IConnectionPool {
    public DateTime LastUpdate { get; }
    public int MaxRetries { get; }
    public IReadOnlyCollection`1<Node> Nodes { get; }
    public bool SniffedOnStartup { get; public set; }
    public bool SupportsPinging { get; }
    public bool SupportsReseeding { get; }
    public bool UsingSsl { get; }
    public abstract virtual DateTime get_LastUpdate();
    public abstract virtual int get_MaxRetries();
    public abstract virtual IReadOnlyCollection`1<Node> get_Nodes();
    public abstract virtual bool get_SniffedOnStartup();
    public abstract virtual void set_SniffedOnStartup(bool value);
    public abstract virtual bool get_SupportsPinging();
    public abstract virtual bool get_SupportsReseeding();
    public abstract virtual bool get_UsingSsl();
    public abstract virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    public abstract virtual void Reseed(IEnumerable`1<Node> nodes);
}
public interface OpenSearch.Net.IDateTimeProvider {
    public abstract virtual DateTime Now();
    public abstract virtual DateTime DeadTime(int attempts, Nullable`1<TimeSpan> timeoutFactor, Nullable`1<TimeSpan> maxDeadTimeout);
}
internal interface OpenSearch.Net.IInternalSerializer {
    public abstract virtual bool TryGetJsonFormatter(IJsonFormatterResolver& formatterResolver);
}
public interface OpenSearch.Net.IMemoryStreamFactory {
    public abstract virtual MemoryStream Create();
    public abstract virtual MemoryStream Create(Byte[] bytes);
    public abstract virtual MemoryStream Create(Byte[] bytes, int index, int count);
}
public class OpenSearch.Net.IndexRequestParameters : RequestParameters`1<IndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> IfPrimaryTerm { get; public set; }
    public Nullable`1<long> IfSequenceNumber { get; public set; }
    public Nullable`1<OpType> OpType { get; public set; }
    public string Pipeline { get; public set; }
    public Nullable`1<Refresh> Refresh { get; public set; }
    public Nullable`1<bool> RequireAlias { get; public set; }
    public string Routing { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_IfPrimaryTerm();
    public void set_IfPrimaryTerm(Nullable`1<long> value);
    public Nullable`1<long> get_IfSequenceNumber();
    public void set_IfSequenceNumber(Nullable`1<long> value);
    public Nullable`1<OpType> get_OpType();
    public void set_OpType(Nullable`1<OpType> value);
    public string get_Pipeline();
    public void set_Pipeline(string value);
    public Nullable`1<Refresh> get_Refresh();
    public void set_Refresh(Nullable`1<Refresh> value);
    public Nullable`1<bool> get_RequireAlias();
    public void set_RequireAlias(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.IndicesShardStoresStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static IndicesShardStoresStatus Green;
    [EnumMemberAttribute]
public static IndicesShardStoresStatus Yellow;
    [EnumMemberAttribute]
public static IndicesShardStoresStatus Red;
    [EnumMemberAttribute]
public static IndicesShardStoresStatus All;
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.IndicesStatsMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static IndicesStatsMetric Store;
    [EnumMemberAttribute]
public static IndicesStatsMetric Indexing;
    [EnumMemberAttribute]
public static IndicesStatsMetric Get;
    [EnumMemberAttribute]
public static IndicesStatsMetric Search;
    [EnumMemberAttribute]
public static IndicesStatsMetric Merge;
    [EnumMemberAttribute]
public static IndicesStatsMetric Flush;
    [EnumMemberAttribute]
public static IndicesStatsMetric Refresh;
    [EnumMemberAttribute]
public static IndicesStatsMetric QueryCache;
    [EnumMemberAttribute]
public static IndicesStatsMetric Fielddata;
    [EnumMemberAttribute]
public static IndicesStatsMetric Docs;
    [EnumMemberAttribute]
public static IndicesStatsMetric Warmer;
    [EnumMemberAttribute]
public static IndicesStatsMetric Completion;
    [EnumMemberAttribute]
public static IndicesStatsMetric Segments;
    [EnumMemberAttribute]
public static IndicesStatsMetric Translog;
    [EnumMemberAttribute]
public static IndicesStatsMetric RequestCache;
    [EnumMemberAttribute]
public static IndicesStatsMetric Recovery;
    [EnumMemberAttribute]
public static IndicesStatsMetric All;
}
public class OpenSearch.Net.InMemoryConnection : object {
    internal static Byte[] EmptyBody;
    private string _contentType;
    private Exception _exception;
    private Byte[] _responseBody;
    private int _statusCode;
    public InMemoryConnection(Byte[] responseBody, int statusCode, Exception exception, string contentType);
    private static InMemoryConnection();
    public virtual TResponse Request(RequestData requestData);
    public virtual Task`1<TResponse> RequestAsync(RequestData requestData, CancellationToken cancellationToken);
    private sealed virtual override void System.IDisposable.Dispose();
    protected TResponse ReturnConnectionStatus(RequestData requestData, Byte[] responseBody, Nullable`1<int> statusCode, string contentType);
    [AsyncStateMachineAttribute("OpenSearch.Net.InMemoryConnection/<ReturnConnectionStatusAsync>d__11`1")]
protected Task`1<TResponse> ReturnConnectionStatusAsync(RequestData requestData, CancellationToken cancellationToken, Byte[] responseBody, Nullable`1<int> statusCode, string contentType);
    protected virtual void DisposeManagedResources();
}
internal class OpenSearch.Net.InterfaceReadOnlyCollectionSingleOrEnumerableFormatter`1 : object {
    public sealed virtual IReadOnlyCollection`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void Serialize(JsonWriter& writer, IReadOnlyCollection`1<T> value, IJsonFormatterResolver formatterResolver);
}
public interface OpenSearch.Net.IOpenSearchLowLevelClient {
    public LowLevelDanglingIndicesNamespace DanglingIndices { get; }
    public LowLevelFeaturesNamespace Features { get; }
    public LowLevelIngestNamespace Ingest { get; }
    public LowLevelNodesNamespace Nodes { get; }
    public LowLevelSnapshotNamespace Snapshot { get; }
    public LowLevelTasksNamespace Tasks { get; }
    public LowLevelCatNamespace Cat { get; }
    public LowLevelClusterNamespace Cluster { get; }
    public LowLevelIndicesNamespace Indices { get; }
    public LowLevelHttpNamespace Http { get; }
    public abstract virtual TResponse DoRequest(HttpMethod method, string path, PostData data, IRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DoRequestAsync(HttpMethod method, string path, CancellationToken cancellationToken, PostData data, IRequestParameters requestParameters);
    public abstract virtual LowLevelDanglingIndicesNamespace get_DanglingIndices();
    public abstract virtual LowLevelFeaturesNamespace get_Features();
    public abstract virtual LowLevelIngestNamespace get_Ingest();
    public abstract virtual LowLevelNodesNamespace get_Nodes();
    public abstract virtual TResponse Bulk(PostData body, BulkRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> BulkAsync(PostData body, BulkRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Bulk(string index, PostData body, BulkRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> BulkAsync(string index, PostData body, BulkRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse ClearScroll(PostData body, ClearScrollRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ClearScrollAsync(PostData body, ClearScrollRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Count(PostData body, CountRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> CountAsync(PostData body, CountRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Count(string index, PostData body, CountRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> CountAsync(string index, PostData body, CountRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Create(string index, string id, PostData body, CreateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> CreateAsync(string index, string id, PostData body, CreateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Delete(string index, string id, DeleteRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeleteAsync(string index, string id, DeleteRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DeleteByQuery(string index, PostData body, DeleteByQueryRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeleteByQueryAsync(string index, PostData body, DeleteByQueryRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DeleteByQueryRethrottle(string taskId, DeleteByQueryRethrottleRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeleteByQueryRethrottleAsync(string taskId, DeleteByQueryRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DeleteScript(string id, DeleteScriptRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeleteScriptAsync(string id, DeleteScriptRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DocumentExists(string index, string id, DocumentExistsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DocumentExistsAsync(string index, string id, DocumentExistsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse SourceExists(string index, string id, SourceExistsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SourceExistsAsync(string index, string id, SourceExistsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Explain(string index, string id, PostData body, ExplainRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ExplainAsync(string index, string id, PostData body, ExplainRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse FieldCapabilities(PostData body, FieldCapabilitiesRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> FieldCapabilitiesAsync(PostData body, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse FieldCapabilities(string index, PostData body, FieldCapabilitiesRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> FieldCapabilitiesAsync(string index, PostData body, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Get(string index, string id, GetRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> GetAsync(string index, string id, GetRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse GetScript(string id, GetScriptRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> GetScriptAsync(string id, GetScriptRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse GetScriptContext(GetScriptContextRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> GetScriptContextAsync(GetScriptContextRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse GetScriptLanguages(GetScriptLanguagesRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> GetScriptLanguagesAsync(GetScriptLanguagesRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Source(string index, string id, SourceRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SourceAsync(string index, string id, SourceRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Index(string index, string id, PostData body, IndexRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> IndexAsync(string index, string id, PostData body, IndexRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Index(string index, PostData body, IndexRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> IndexAsync(string index, PostData body, IndexRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse RootNodeInfo(RootNodeInfoRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RootNodeInfoAsync(RootNodeInfoRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiGet(PostData body, MultiGetRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiGetAsync(PostData body, MultiGetRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiGet(string index, PostData body, MultiGetRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiGetAsync(string index, PostData body, MultiGetRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiSearch(PostData body, MultiSearchRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiSearchAsync(PostData body, MultiSearchRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiSearch(string index, PostData body, MultiSearchRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiSearchAsync(string index, PostData body, MultiSearchRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiSearchTemplate(PostData body, MultiSearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiSearchTemplateAsync(PostData body, MultiSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiSearchTemplate(string index, PostData body, MultiSearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiSearchTemplateAsync(string index, PostData body, MultiSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiTermVectors(PostData body, MultiTermVectorsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiTermVectorsAsync(PostData body, MultiTermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse MultiTermVectors(string index, PostData body, MultiTermVectorsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> MultiTermVectorsAsync(string index, PostData body, MultiTermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Ping(PingRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> PingAsync(PingRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse PutScript(string id, PostData body, PutScriptRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> PutScriptAsync(string id, PostData body, PutScriptRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse PutScript(string id, string context, PostData body, PutScriptRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> PutScriptAsync(string id, string context, PostData body, PutScriptRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse RankEval(PostData body, RankEvalRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RankEvalAsync(PostData body, RankEvalRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse RankEval(string index, PostData body, RankEvalRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RankEvalAsync(string index, PostData body, RankEvalRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse ReindexOnServer(PostData body, ReindexOnServerRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ReindexOnServerAsync(PostData body, ReindexOnServerRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse ReindexRethrottle(string taskId, ReindexRethrottleRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ReindexRethrottleAsync(string taskId, ReindexRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse RenderSearchTemplate(PostData body, RenderSearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RenderSearchTemplateAsync(PostData body, RenderSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse RenderSearchTemplate(string id, PostData body, RenderSearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RenderSearchTemplateAsync(string id, PostData body, RenderSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse ExecutePainlessScript(PostData body, ExecutePainlessScriptRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ExecutePainlessScriptAsync(PostData body, ExecutePainlessScriptRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Scroll(PostData body, ScrollRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> ScrollAsync(PostData body, ScrollRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Search(PostData body, SearchRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchAsync(PostData body, SearchRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Search(string index, PostData body, SearchRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchAsync(string index, PostData body, SearchRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse SearchShards(SearchShardsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchShardsAsync(SearchShardsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse SearchShards(string index, SearchShardsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchShardsAsync(string index, SearchShardsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse SearchTemplate(PostData body, SearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchTemplateAsync(PostData body, SearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse SearchTemplate(string index, PostData body, SearchTemplateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> SearchTemplateAsync(string index, PostData body, SearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse TermVectors(string index, string id, PostData body, TermVectorsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> TermVectorsAsync(string index, string id, PostData body, TermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse TermVectors(string index, PostData body, TermVectorsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> TermVectorsAsync(string index, PostData body, TermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse Update(string index, string id, PostData body, UpdateRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> UpdateAsync(string index, string id, PostData body, UpdateRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse UpdateByQuery(string index, PostData body, UpdateByQueryRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> UpdateByQueryAsync(string index, PostData body, UpdateByQueryRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse UpdateByQueryRethrottle(string taskId, UpdateByQueryRethrottleRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> UpdateByQueryRethrottleAsync(string taskId, UpdateByQueryRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual LowLevelSnapshotNamespace get_Snapshot();
    public abstract virtual LowLevelTasksNamespace get_Tasks();
    public abstract virtual TResponse FieldCapabilities(FieldCapabilitiesRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> FieldCapabilitiesAsync(FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse FieldCapabilities(string index, FieldCapabilitiesRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> FieldCapabilitiesAsync(string index, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual LowLevelCatNamespace get_Cat();
    public abstract virtual LowLevelClusterNamespace get_Cluster();
    public abstract virtual LowLevelIndicesNamespace get_Indices();
    public abstract virtual LowLevelHttpNamespace get_Http();
    public abstract virtual TResponse CreatePit(string index, CreatePitRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> CreatePitAsync(string index, CreatePitRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DeleteAllPits(DeleteAllPitsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeleteAllPitsAsync(DeleteAllPitsRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse DeletePit(PostData body, DeletePitRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> DeletePitAsync(PostData body, DeletePitRequestParameters requestParameters, CancellationToken ctx);
    public abstract virtual TResponse GetAllPits(GetAllPitsRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> GetAllPitsAsync(GetAllPitsRequestParameters requestParameters, CancellationToken ctx);
}
public interface OpenSearch.Net.IOpenSearchResponse {
    public IApiCallDetails ApiCall { get; public set; }
    public abstract virtual IApiCallDetails get_ApiCall();
    public abstract virtual void set_ApiCall(IApiCallDetails value);
    public abstract virtual bool TryGetServerErrorReason(String& reason);
}
public interface OpenSearch.Net.IOpenSearchSerializer {
    public abstract virtual object Deserialize(Type type, Stream stream);
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual Task`1<object> DeserializeAsync(Type type, Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual void Serialize(T data, Stream stream, SerializationFormatting formatting);
    public abstract virtual Task SerializeAsync(T data, Stream stream, SerializationFormatting formatting, CancellationToken cancellationToken);
}
public interface OpenSearch.Net.IPostData`1 {
    public abstract virtual void Write(Stream writableStream, IConnectionConfigurationValues settings);
    public abstract virtual Task WriteAsync(Stream writableStream, IConnectionConfigurationValues settings, CancellationToken token);
}
public interface OpenSearch.Net.IRequestConfiguration {
    public string Accept { get; public set; }
    public IReadOnlyCollection`1<int> AllowedStatusCodes { get; public set; }
    public BasicAuthenticationCredentials BasicAuthenticationCredentials { get; public set; }
    public ApiKeyAuthenticationCredentials ApiKeyAuthenticationCredentials { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<bool> DisableDirectStreaming { get; public set; }
    public Nullable`1<bool> DisablePing { get; public set; }
    public Nullable`1<bool> DisableSniff { get; public set; }
    public Nullable`1<bool> EnableHttpPipelining { get; public set; }
    public Uri ForceNode { get; public set; }
    public Nullable`1<int> MaxRetries { get; public set; }
    public string OpaqueId { get; public set; }
    public Nullable`1<TimeSpan> PingTimeout { get; public set; }
    public Nullable`1<TimeSpan> RequestTimeout { get; public set; }
    public string RunAs { get; public set; }
    public Nullable`1<bool> ThrowExceptions { get; public set; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public NameValueCollection Headers { get; public set; }
    public Nullable`1<bool> EnableTcpStats { get; public set; }
    public Nullable`1<bool> EnableThreadPoolStats { get; public set; }
    public RequestMetaData RequestMetaData { get; public set; }
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual IReadOnlyCollection`1<int> get_AllowedStatusCodes();
    public abstract virtual void set_AllowedStatusCodes(IReadOnlyCollection`1<int> value);
    public abstract virtual BasicAuthenticationCredentials get_BasicAuthenticationCredentials();
    public abstract virtual void set_BasicAuthenticationCredentials(BasicAuthenticationCredentials value);
    public abstract virtual ApiKeyAuthenticationCredentials get_ApiKeyAuthenticationCredentials();
    public abstract virtual void set_ApiKeyAuthenticationCredentials(ApiKeyAuthenticationCredentials value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Nullable`1<bool> get_DisableDirectStreaming();
    public abstract virtual void set_DisableDirectStreaming(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_DisablePing();
    public abstract virtual void set_DisablePing(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_DisableSniff();
    public abstract virtual void set_DisableSniff(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_EnableHttpPipelining();
    public abstract virtual void set_EnableHttpPipelining(Nullable`1<bool> value);
    public abstract virtual Uri get_ForceNode();
    public abstract virtual void set_ForceNode(Uri value);
    public abstract virtual Nullable`1<int> get_MaxRetries();
    public abstract virtual void set_MaxRetries(Nullable`1<int> value);
    public abstract virtual string get_OpaqueId();
    public abstract virtual void set_OpaqueId(string value);
    public abstract virtual Nullable`1<TimeSpan> get_PingTimeout();
    public abstract virtual void set_PingTimeout(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<TimeSpan> get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(Nullable`1<TimeSpan> value);
    public abstract virtual string get_RunAs();
    public abstract virtual void set_RunAs(string value);
    public abstract virtual Nullable`1<bool> get_ThrowExceptions();
    public abstract virtual void set_ThrowExceptions(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_TransferEncodingChunked();
    public abstract virtual void set_TransferEncodingChunked(Nullable`1<bool> value);
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual void set_Headers(NameValueCollection value);
    public abstract virtual Nullable`1<bool> get_EnableTcpStats();
    public abstract virtual void set_EnableTcpStats(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_EnableThreadPoolStats();
    public abstract virtual void set_EnableThreadPoolStats(Nullable`1<bool> value);
    public abstract virtual RequestMetaData get_RequestMetaData();
    public abstract virtual void set_RequestMetaData(RequestMetaData value);
}
public interface OpenSearch.Net.IRequestParameters {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public CustomResponseBuilderBase CustomResponseBuilder { get; public set; }
    public Dictionary`2<string, object> QueryString { get; public set; }
    public IRequestConfiguration RequestConfiguration { get; public set; }
    public abstract virtual HttpMethod get_DefaultHttpMethod();
    public abstract virtual bool get_SupportsBody();
    public abstract virtual CustomResponseBuilderBase get_CustomResponseBuilder();
    public abstract virtual void set_CustomResponseBuilder(CustomResponseBuilderBase value);
    public abstract virtual Dictionary`2<string, object> get_QueryString();
    public abstract virtual void set_QueryString(Dictionary`2<string, object> value);
    public abstract virtual IRequestConfiguration get_RequestConfiguration();
    public abstract virtual void set_RequestConfiguration(IRequestConfiguration value);
    public abstract virtual void SetQueryString(string name, object value);
    public abstract virtual bool ContainsQueryString(string name);
    public abstract virtual TOut GetQueryStringValue(string name);
    public abstract virtual string GetResolvedQueryStringValue(string n, IConnectionConfigurationValues s);
    public abstract virtual string AcceptHeaderFromFormat(string format);
}
public interface OpenSearch.Net.IRequestPipeline {
    public List`1<Audit> AuditTrail { get; }
    public bool FirstPoolUsageNeedsSniffing { get; }
    public bool IsTakingTooLong { get; }
    public int MaxRetries { get; }
    public int Retried { get; }
    public bool SniffsOnConnectionFailure { get; }
    public bool SniffsOnStaleCluster { get; }
    public bool StaleClusterState { get; }
    public DateTime StartedOn { get; }
    public abstract virtual List`1<Audit> get_AuditTrail();
    public abstract virtual bool get_FirstPoolUsageNeedsSniffing();
    public abstract virtual bool get_IsTakingTooLong();
    public abstract virtual int get_MaxRetries();
    public abstract virtual int get_Retried();
    public abstract virtual bool get_SniffsOnConnectionFailure();
    public abstract virtual bool get_SniffsOnStaleCluster();
    public abstract virtual bool get_StaleClusterState();
    public abstract virtual DateTime get_StartedOn();
    public abstract virtual TResponse CallOpenSearch(RequestData requestData);
    public abstract virtual Task`1<TResponse> CallOpenSearchAsync(RequestData requestData, CancellationToken cancellationToken);
    public abstract virtual void MarkAlive(Node node);
    public abstract virtual void MarkDead(Node node);
    public abstract virtual IEnumerable`1<Node> NextNode();
    public abstract virtual void Ping(Node node);
    public abstract virtual Task PingAsync(Node node, CancellationToken cancellationToken);
    public abstract virtual void FirstPoolUsage(SemaphoreSlim semaphore);
    public abstract virtual Task FirstPoolUsageAsync(SemaphoreSlim semaphore, CancellationToken cancellationToken);
    public abstract virtual void Sniff();
    public abstract virtual Task SniffAsync(CancellationToken cancellationToken);
    public abstract virtual void SniffOnStaleCluster();
    public abstract virtual Task SniffOnStaleClusterAsync(CancellationToken cancellationToken);
    public abstract virtual void SniffOnConnectionFailure();
    public abstract virtual Task SniffOnConnectionFailureAsync(CancellationToken cancellationToken);
    public abstract virtual void BadResponse(TResponse& response, IApiCallDetails callDetails, RequestData data, OpenSearchClientException exception);
    public abstract virtual void ThrowNoNodesAttempted(RequestData requestData, List`1<PipelineException> seenExceptions);
    public abstract virtual void AuditCancellationRequested();
    public abstract virtual OpenSearchClientException CreateClientException(TResponse response, IApiCallDetails callDetails, RequestData data, List`1<PipelineException> seenExceptions);
}
public interface OpenSearch.Net.IRequestPipelineFactory {
    public abstract virtual IRequestPipeline Create(IConnectionConfigurationValues configurationValues, IDateTimeProvider dateTimeProvider, IMemoryStreamFactory memoryStreamFactory, IRequestParameters requestParameters);
}
public interface OpenSearch.Net.ITransport`1 {
    public TConnectionSettings Settings { get; }
    public abstract virtual TConnectionSettings get_Settings();
    public abstract virtual TResponse Request(HttpMethod method, string path, PostData data, IRequestParameters requestParameters);
    public abstract virtual Task`1<TResponse> RequestAsync(HttpMethod method, string path, CancellationToken ctx, PostData data, IRequestParameters requestParameters);
}
public interface OpenSearch.Net.IUrlParameter {
    public abstract virtual string GetString(IConnectionConfigurationValues settings);
}
[ExtensionAttribute]
public static class OpenSearch.Net.KnownEnums : object {
    private static ConcurrentDictionary`2<Type, Func`2<Enum, string>> EnumStringResolvers;
    private static KnownEnums();
    private static void AddEnumStringResolver(Func`2<T, string> resolver);
    private static void RegisterEnumStringResolvers();
    [ExtensionAttribute]
public static string GetStringValue(ClusterStateMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(IndicesStatsMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(NodesInfoMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(NodesStatsMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(NodesStatsIndexMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(NodesUsageMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(DefaultOperator enumValue);
    [ExtensionAttribute]
public static string GetStringValue(SearchType enumValue);
    [ExtensionAttribute]
public static string GetStringValue(SuggestMode enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Refresh enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Health enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Size enumValue);
    [ExtensionAttribute]
public static string GetStringValue(WaitForEvents enumValue);
    [ExtensionAttribute]
public static string GetStringValue(WaitForStatus enumValue);
    [ExtensionAttribute]
public static string GetStringValue(ClusterRerouteMetric enumValue);
    [ExtensionAttribute]
public static string GetStringValue(VersionType enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Conflicts enumValue);
    [ExtensionAttribute]
public static string GetStringValue(OpType enumValue);
    [ExtensionAttribute]
public static string GetStringValue(IndicesShardStoresStatus enumValue);
    [ExtensionAttribute]
public static string GetStringValue(ThreadType enumValue);
    [ExtensionAttribute]
public static string GetStringValue(GroupBy enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Enum e);
    private static Func`2<Enum, string> GetEnumStringResolver(Type type);
    [ExtensionAttribute]
public static string GetStringValue(Bytes enumValue);
    [ExtensionAttribute]
public static string GetStringValue(ExpandWildcards enumValue);
    [ExtensionAttribute]
public static string GetStringValue(Level enumValue);
    [ExtensionAttribute]
public static string GetStringValue(TimeUnit enumValue);
}
[StringEnumAttribute]
public enum OpenSearch.Net.Level : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Level Cluster;
    [EnumMemberAttribute]
public static Level Indices;
    [EnumMemberAttribute]
public static Level Shards;
}
internal class OpenSearch.Net.LifetimeTrackingHttpMessageHandler : DelegatingHandler {
    public LifetimeTrackingHttpMessageHandler(HttpMessageHandler innerHandler);
    protected virtual void Dispose(bool disposing);
}
public class OpenSearch.Net.LowLevelRequestResponseSerializer : object {
    public static LowLevelRequestResponseSerializer Instance;
    private static LowLevelRequestResponseSerializer();
    public sealed virtual object Deserialize(Type type, Stream stream);
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual Task`1<object> DeserializeAsync(Type type, Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual void Serialize(T data, Stream writableStream, SerializationFormatting formatting);
    public sealed virtual Task SerializeAsync(T data, Stream writableStream, SerializationFormatting formatting, CancellationToken cancellationToken);
    private sealed virtual override bool OpenSearch.Net.IInternalSerializer.TryGetJsonFormatter(IJsonFormatterResolver& formatterResolver);
}
internal class OpenSearch.Net.MapsApiAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <RestSpecName>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyedCollection`2<string, string> <Parameters>k__BackingField;
    public string RestSpecName { get; }
    public KeyedCollection`2<string, string> Parameters { get; }
    public MapsApiAttribute(string restSpecName);
    public MapsApiAttribute(string restSpecName, string parametersCommaSeparated);
    [CompilerGeneratedAttribute]
public string get_RestSpecName();
    [CompilerGeneratedAttribute]
public KeyedCollection`2<string, string> get_Parameters();
}
public class OpenSearch.Net.MemoryStreamFactory : object {
    [CompilerGeneratedAttribute]
private static MemoryStreamFactory <Default>k__BackingField;
    public static MemoryStreamFactory Default { get; }
    private static MemoryStreamFactory();
    [CompilerGeneratedAttribute]
public static MemoryStreamFactory get_Default();
    public sealed virtual MemoryStream Create();
    public sealed virtual MemoryStream Create(Byte[] bytes);
    public sealed virtual MemoryStream Create(Byte[] bytes, int index, int count);
}
internal class OpenSearch.Net.MetaDataHeader : object {
    private static char _separator;
    private string _headerValue;
    private static string _httpClientIdentifier;
    [CompilerGeneratedAttribute]
private string <ServiceIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeVersion>k__BackingField;
    public string ServiceIdentifier { get; private set; }
    public string ClientVersion { get; private set; }
    public string RuntimeVersion { get; private set; }
    public MetaDataHeader(VersionInfo version, string serviceIdentifier, bool isAsync);
    private static MetaDataHeader();
    [CompilerGeneratedAttribute]
public string get_ServiceIdentifier();
    [CompilerGeneratedAttribute]
private void set_ServiceIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
private void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeVersion();
    [CompilerGeneratedAttribute]
private void set_RuntimeVersion(string value);
    public virtual string ToString();
}
public class OpenSearch.Net.MetaHeaderProvider : object {
    private static string MetaHeaderName;
    private MetaDataHeader _asyncMetaDataHeader;
    private MetaDataHeader _syncMetaDataHeader;
    public string HeaderName { get; }
    public string get_HeaderName();
    public string ProduceHeaderValue(RequestData requestData);
}
public class OpenSearch.Net.MultiGetRequestParameters : RequestParameters`1<MultiGetRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] StoredFields { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_StoredFields();
    public void set_StoredFields(String[] value);
}
public class OpenSearch.Net.MultiSearchRequestParameters : RequestParameters`1<MultiSearchRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> CcsMinimizeRoundtrips { get; public set; }
    public Nullable`1<long> MaxConcurrentSearches { get; public set; }
    public Nullable`1<long> MaxConcurrentShardRequests { get; public set; }
    public Nullable`1<long> PreFilterShardSize { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<bool> TotalHitsAsInteger { get; public set; }
    public Nullable`1<bool> TypedKeys { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_CcsMinimizeRoundtrips();
    public void set_CcsMinimizeRoundtrips(Nullable`1<bool> value);
    public Nullable`1<long> get_MaxConcurrentSearches();
    public void set_MaxConcurrentSearches(Nullable`1<long> value);
    public Nullable`1<long> get_MaxConcurrentShardRequests();
    public void set_MaxConcurrentShardRequests(Nullable`1<long> value);
    public Nullable`1<long> get_PreFilterShardSize();
    public void set_PreFilterShardSize(Nullable`1<long> value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<bool> get_TotalHitsAsInteger();
    public void set_TotalHitsAsInteger(Nullable`1<bool> value);
    public Nullable`1<bool> get_TypedKeys();
    public void set_TypedKeys(Nullable`1<bool> value);
}
public class OpenSearch.Net.MultiSearchTemplateRequestParameters : RequestParameters`1<MultiSearchTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> CcsMinimizeRoundtrips { get; public set; }
    public Nullable`1<long> MaxConcurrentSearches { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<bool> TotalHitsAsInteger { get; public set; }
    public Nullable`1<bool> TypedKeys { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_CcsMinimizeRoundtrips();
    public void set_CcsMinimizeRoundtrips(Nullable`1<bool> value);
    public Nullable`1<long> get_MaxConcurrentSearches();
    public void set_MaxConcurrentSearches(Nullable`1<long> value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<bool> get_TotalHitsAsInteger();
    public void set_TotalHitsAsInteger(Nullable`1<bool> value);
    public Nullable`1<bool> get_TypedKeys();
    public void set_TypedKeys(Nullable`1<bool> value);
}
public class OpenSearch.Net.MultiTermVectorsRequestParameters : RequestParameters`1<MultiTermVectorsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FieldStatistics { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> Offsets { get; public set; }
    public Nullable`1<bool> Payloads { get; public set; }
    public Nullable`1<bool> Positions { get; public set; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> TermStatistics { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FieldStatistics();
    public void set_FieldStatistics(Nullable`1<bool> value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_Offsets();
    public void set_Offsets(Nullable`1<bool> value);
    public Nullable`1<bool> get_Payloads();
    public void set_Payloads(Nullable`1<bool> value);
    public Nullable`1<bool> get_Positions();
    public void set_Positions(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_TermStatistics();
    public void set_TermStatistics(Nullable`1<bool> value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
public class OpenSearch.Net.NamespacedClientProxy : object {
    private OpenSearchLowLevelClient _client;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    protected string ContentType { get; }
    internal NamespacedClientProxy(OpenSearchLowLevelClient client);
    protected TResponse DoRequest(HttpMethod post, string url, PostData body, IRequestParameters params);
    protected Task`1<TResponse> DoRequestAsync(HttpMethod post, string url, CancellationToken ctx, PostData body, IRequestParameters params);
    protected string Url(FormattableString formattable);
    protected TRequestParams RequestParams(TRequestParams requestParams, string contentType);
    protected TRequestParams RequestParams(TRequestParams requestParams);
    [CompilerGeneratedAttribute]
protected virtual string get_ContentType();
}
internal static class OpenSearch.Net.NativeMethods : object {
}
public class OpenSearch.Net.Node : object {
    private static IReadOnlyDictionary`2<string, object> EmptySettings;
    [CompilerGeneratedAttribute]
private DateTime <DeadUntil>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HoldsData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IngestEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResurrected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClusterManagerEligible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public bool ClientNode { get; }
    public DateTime DeadUntil { get; private set; }
    public int FailedAttempts { get; private set; }
    public bool HoldsData { get; public set; }
    public bool HttpEnabled { get; public set; }
    public string Id { get; public set; }
    public bool IngestEnabled { get; public set; }
    public bool IsAlive { get; private set; }
    public bool IsResurrected { get; public set; }
    public bool ClusterManagerEligible { get; public set; }
    [ObsoleteAttribute("Use ClusterManagerEligible instead", "False")]
public bool MasterEligible { get; public set; }
    public bool ClusterManagerOnlyNode { get; }
    [ObsoleteAttribute("Use ClusterManagerOnlyNode instead", "False")]
public bool MasterOnlyNode { get; }
    public string Name { get; public set; }
    public IReadOnlyDictionary`2<string, object> Settings { get; public set; }
    public Uri Uri { get; }
    public Node(Uri uri);
    private static Node();
    public bool get_ClientNode();
    [CompilerGeneratedAttribute]
public DateTime get_DeadUntil();
    [CompilerGeneratedAttribute]
private void set_DeadUntil(DateTime value);
    [CompilerGeneratedAttribute]
public int get_FailedAttempts();
    [CompilerGeneratedAttribute]
private void set_FailedAttempts(int value);
    [CompilerGeneratedAttribute]
public bool get_HoldsData();
    [CompilerGeneratedAttribute]
public void set_HoldsData(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_IngestEnabled();
    [CompilerGeneratedAttribute]
public void set_IngestEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAlive();
    [CompilerGeneratedAttribute]
private void set_IsAlive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResurrected();
    [CompilerGeneratedAttribute]
public void set_IsResurrected(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClusterManagerEligible();
    [CompilerGeneratedAttribute]
public void set_ClusterManagerEligible(bool value);
    public bool get_MasterEligible();
    public void set_MasterEligible(bool value);
    public bool get_ClusterManagerOnlyNode();
    public bool get_MasterOnlyNode();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public sealed virtual bool Equals(Node other);
    public void MarkDead(DateTime untill);
    public void MarkAlive();
    public Uri CreatePath(string path);
    public Node Clone();
    public static bool op_Equality(Node left, Node right);
    public static bool op_Inequality(Node left, Node right);
    public static Node op_Implicit(Uri uri);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class OpenSearch.Net.NodeInfo : object {
    [CompilerGeneratedAttribute]
private string <build_hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <host>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeInfoHttp <http>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <roles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <transport_address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <version>k__BackingField;
    public string build_hash { get; public set; }
    public string host { get; public set; }
    public NodeInfoHttp http { get; public set; }
    public string ip { get; public set; }
    public string name { get; public set; }
    public IList`1<string> roles { get; public set; }
    public IDictionary`2<string, object> settings { get; public set; }
    public string transport_address { get; public set; }
    public string version { get; public set; }
    internal bool HoldsData { get; }
    internal bool HttpEnabled { get; }
    internal bool IngestEnabled { get; }
    internal bool ClusterManagerEligible { get; }
    [ObsoleteAttribute("Use ClusterManagerEligible instead", "False")]
internal bool MasterEligible { get; }
    [CompilerGeneratedAttribute]
public string get_build_hash();
    [CompilerGeneratedAttribute]
public void set_build_hash(string value);
    [CompilerGeneratedAttribute]
public string get_host();
    [CompilerGeneratedAttribute]
public void set_host(string value);
    [CompilerGeneratedAttribute]
public NodeInfoHttp get_http();
    [CompilerGeneratedAttribute]
public void set_http(NodeInfoHttp value);
    [CompilerGeneratedAttribute]
public string get_ip();
    [CompilerGeneratedAttribute]
public void set_ip(string value);
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_roles();
    [CompilerGeneratedAttribute]
public void set_roles(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_settings();
    [CompilerGeneratedAttribute]
public void set_settings(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_transport_address();
    [CompilerGeneratedAttribute]
public void set_transport_address(string value);
    [CompilerGeneratedAttribute]
public string get_version();
    [CompilerGeneratedAttribute]
public void set_version(string value);
    internal bool get_HoldsData();
    internal bool get_HttpEnabled();
    internal bool get_IngestEnabled();
    internal bool get_ClusterManagerEligible();
    internal bool get_MasterEligible();
}
internal class OpenSearch.Net.NodeInfoHttp : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <bound_address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <publish_address>k__BackingField;
    public IList`1<string> bound_address { get; public set; }
    public string publish_address { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_bound_address();
    [CompilerGeneratedAttribute]
public void set_bound_address(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_publish_address();
    [CompilerGeneratedAttribute]
public void set_publish_address(string value);
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.NodesInfoMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static NodesInfoMetric Settings;
    [EnumMemberAttribute]
public static NodesInfoMetric Os;
    [EnumMemberAttribute]
public static NodesInfoMetric Process;
    [EnumMemberAttribute]
public static NodesInfoMetric Jvm;
    [EnumMemberAttribute]
public static NodesInfoMetric ThreadPool;
    [EnumMemberAttribute]
public static NodesInfoMetric Transport;
    [EnumMemberAttribute]
public static NodesInfoMetric Http;
    [EnumMemberAttribute]
public static NodesInfoMetric Plugins;
    [EnumMemberAttribute]
public static NodesInfoMetric Ingest;
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.NodesStatsIndexMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Store;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Indexing;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Get;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Search;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Merge;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Flush;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Refresh;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric QueryCache;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Fielddata;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Docs;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Warmer;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Completion;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Segments;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Translog;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric RequestCache;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric Recovery;
    [EnumMemberAttribute]
public static NodesStatsIndexMetric All;
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.NodesStatsMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static NodesStatsMetric Breaker;
    [EnumMemberAttribute]
public static NodesStatsMetric Fs;
    [EnumMemberAttribute]
public static NodesStatsMetric Http;
    [EnumMemberAttribute]
public static NodesStatsMetric Indices;
    [EnumMemberAttribute]
public static NodesStatsMetric Jvm;
    [EnumMemberAttribute]
public static NodesStatsMetric Os;
    [EnumMemberAttribute]
public static NodesStatsMetric Process;
    [EnumMemberAttribute]
public static NodesStatsMetric ThreadPool;
    [EnumMemberAttribute]
public static NodesStatsMetric Transport;
    [EnumMemberAttribute]
public static NodesStatsMetric Discovery;
    [EnumMemberAttribute]
public static NodesStatsMetric IndexingPressure;
    [EnumMemberAttribute]
public static NodesStatsMetric All;
}
[FlagsAttribute]
[StringEnumAttribute]
public enum OpenSearch.Net.NodesUsageMetric : Enum {
    public int value__;
    [EnumMemberAttribute]
public static NodesUsageMetric RestActions;
    [EnumMemberAttribute]
public static NodesUsageMetric All;
}
internal static class OpenSearch.Net.NonCapturingTimer : object {
    public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal class OpenSearch.Net.NullableStringIntFormatter : object {
    public sealed virtual Nullable`1<int> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<int> value, IJsonFormatterResolver formatterResolver);
}
public class OpenSearch.Net.OpenSearchClientException : Exception {
    [CompilerGeneratedAttribute]
private List`1<Audit> <AuditTrail>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PipelineFailure> <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestData <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IApiCallDetails <Response>k__BackingField;
    public List`1<Audit> AuditTrail { get; internal set; }
    public string DebugInformation { get; }
    public Nullable`1<PipelineFailure> FailureReason { get; }
    public RequestData Request { get; internal set; }
    public IApiCallDetails Response { get; internal set; }
    public OpenSearchClientException(string message);
    public OpenSearchClientException(PipelineFailure failure, string message, Exception innerException);
    public OpenSearchClientException(PipelineFailure failure, string message, IApiCallDetails apiCall);
    [CompilerGeneratedAttribute]
public List`1<Audit> get_AuditTrail();
    [CompilerGeneratedAttribute]
internal void set_AuditTrail(List`1<Audit> value);
    public string get_DebugInformation();
    [CompilerGeneratedAttribute]
public Nullable`1<PipelineFailure> get_FailureReason();
    [CompilerGeneratedAttribute]
public RequestData get_Request();
    [CompilerGeneratedAttribute]
internal void set_Request(RequestData value);
    [CompilerGeneratedAttribute]
public IApiCallDetails get_Response();
    [CompilerGeneratedAttribute]
internal void set_Response(IApiCallDetails value);
}
public class OpenSearch.Net.OpenSearchLowLevelClient : object {
    [CompilerGeneratedAttribute]
private ITransport`1<IConnectionConfigurationValues> <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenSearchUrlFormatter <UrlFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelDanglingIndicesNamespace <DanglingIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelFeaturesNamespace <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelIngestNamespace <Ingest>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelNodesNamespace <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelSnapshotNamespace <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelTasksNamespace <Tasks>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelCatNamespace <Cat>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelClusterNamespace <Cluster>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelIndicesNamespace <Indices>k__BackingField;
    [CompilerGeneratedAttribute]
private LowLevelHttpNamespace <Http>k__BackingField;
    public IOpenSearchSerializer Serializer { get; }
    public IConnectionConfigurationValues Settings { get; }
    protected ITransport`1<IConnectionConfigurationValues> Transport { get; protected set; }
    private OpenSearchUrlFormatter UrlFormatter { get; }
    public LowLevelDanglingIndicesNamespace DanglingIndices { get; private set; }
    public LowLevelFeaturesNamespace Features { get; private set; }
    public LowLevelIngestNamespace Ingest { get; private set; }
    public LowLevelNodesNamespace Nodes { get; private set; }
    public LowLevelSnapshotNamespace Snapshot { get; private set; }
    public LowLevelTasksNamespace Tasks { get; private set; }
    public LowLevelCatNamespace Cat { get; private set; }
    public LowLevelClusterNamespace Cluster { get; private set; }
    public LowLevelIndicesNamespace Indices { get; private set; }
    public LowLevelHttpNamespace Http { get; private set; }
    public OpenSearchLowLevelClient(IConnectionConfigurationValues settings);
    public OpenSearchLowLevelClient(string cloudId, BasicAuthenticationCredentials credentials);
    public OpenSearchLowLevelClient(string cloudId, ApiKeyAuthenticationCredentials credentials);
    public OpenSearchLowLevelClient(ITransport`1<IConnectionConfigurationValues> transport);
    private void SetupNamespaces();
    private void SetupGeneratedNamespaces();
    public IOpenSearchSerializer get_Serializer();
    public IConnectionConfigurationValues get_Settings();
    [CompilerGeneratedAttribute]
protected ITransport`1<IConnectionConfigurationValues> get_Transport();
    [CompilerGeneratedAttribute]
protected void set_Transport(ITransport`1<IConnectionConfigurationValues> value);
    [CompilerGeneratedAttribute]
private OpenSearchUrlFormatter get_UrlFormatter();
    public sealed virtual TResponse DoRequest(HttpMethod method, string path, PostData data, IRequestParameters requestParameters);
    public sealed virtual Task`1<TResponse> DoRequestAsync(HttpMethod method, string path, CancellationToken cancellationToken, PostData data, IRequestParameters requestParameters);
    protected internal string Url(FormattableString formattable);
    protected internal TRequestParams RequestParams(TRequestParams requestParams, string contentType, string accept);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelDanglingIndicesNamespace get_DanglingIndices();
    [CompilerGeneratedAttribute]
private void set_DanglingIndices(LowLevelDanglingIndicesNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelFeaturesNamespace get_Features();
    [CompilerGeneratedAttribute]
private void set_Features(LowLevelFeaturesNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelIngestNamespace get_Ingest();
    [CompilerGeneratedAttribute]
private void set_Ingest(LowLevelIngestNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelNodesNamespace get_Nodes();
    [CompilerGeneratedAttribute]
private void set_Nodes(LowLevelNodesNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelSnapshotNamespace get_Snapshot();
    [CompilerGeneratedAttribute]
private void set_Snapshot(LowLevelSnapshotNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelTasksNamespace get_Tasks();
    [CompilerGeneratedAttribute]
private void set_Tasks(LowLevelTasksNamespace value);
    public sealed virtual TResponse Bulk(PostData body, BulkRequestParameters requestParameters);
    [MapsApiAttribute("bulk", "body")]
public sealed virtual Task`1<TResponse> BulkAsync(PostData body, BulkRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Bulk(string index, PostData body, BulkRequestParameters requestParameters);
    [MapsApiAttribute("bulk", "index, body")]
public sealed virtual Task`1<TResponse> BulkAsync(string index, PostData body, BulkRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse ClearScroll(PostData body, ClearScrollRequestParameters requestParameters);
    [MapsApiAttribute("clear_scroll", "body")]
public sealed virtual Task`1<TResponse> ClearScrollAsync(PostData body, ClearScrollRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Count(PostData body, CountRequestParameters requestParameters);
    [MapsApiAttribute("count", "body")]
public sealed virtual Task`1<TResponse> CountAsync(PostData body, CountRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Count(string index, PostData body, CountRequestParameters requestParameters);
    [MapsApiAttribute("count", "index, body")]
public sealed virtual Task`1<TResponse> CountAsync(string index, PostData body, CountRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Create(string index, string id, PostData body, CreateRequestParameters requestParameters);
    [MapsApiAttribute("create", "index, id, body")]
public sealed virtual Task`1<TResponse> CreateAsync(string index, string id, PostData body, CreateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Delete(string index, string id, DeleteRequestParameters requestParameters);
    [MapsApiAttribute("delete", "index, id")]
public sealed virtual Task`1<TResponse> DeleteAsync(string index, string id, DeleteRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DeleteByQuery(string index, PostData body, DeleteByQueryRequestParameters requestParameters);
    [MapsApiAttribute("delete_by_query", "index, body")]
public sealed virtual Task`1<TResponse> DeleteByQueryAsync(string index, PostData body, DeleteByQueryRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DeleteByQueryRethrottle(string taskId, DeleteByQueryRethrottleRequestParameters requestParameters);
    [MapsApiAttribute("delete_by_query_rethrottle", "task_id")]
public sealed virtual Task`1<TResponse> DeleteByQueryRethrottleAsync(string taskId, DeleteByQueryRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DeleteScript(string id, DeleteScriptRequestParameters requestParameters);
    [MapsApiAttribute("delete_script", "id")]
public sealed virtual Task`1<TResponse> DeleteScriptAsync(string id, DeleteScriptRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DocumentExists(string index, string id, DocumentExistsRequestParameters requestParameters);
    [MapsApiAttribute("exists", "index, id")]
public sealed virtual Task`1<TResponse> DocumentExistsAsync(string index, string id, DocumentExistsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse SourceExists(string index, string id, SourceExistsRequestParameters requestParameters);
    [MapsApiAttribute("exists_source", "index, id")]
public sealed virtual Task`1<TResponse> SourceExistsAsync(string index, string id, SourceExistsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Explain(string index, string id, PostData body, ExplainRequestParameters requestParameters);
    [MapsApiAttribute("explain", "index, id, body")]
public sealed virtual Task`1<TResponse> ExplainAsync(string index, string id, PostData body, ExplainRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse FieldCapabilities(PostData body, FieldCapabilitiesRequestParameters requestParameters);
    [MapsApiAttribute("field_caps", "body")]
public sealed virtual Task`1<TResponse> FieldCapabilitiesAsync(PostData body, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse FieldCapabilities(string index, PostData body, FieldCapabilitiesRequestParameters requestParameters);
    [MapsApiAttribute("field_caps", "index, body")]
public sealed virtual Task`1<TResponse> FieldCapabilitiesAsync(string index, PostData body, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Get(string index, string id, GetRequestParameters requestParameters);
    [MapsApiAttribute("get", "index, id")]
public sealed virtual Task`1<TResponse> GetAsync(string index, string id, GetRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse GetScript(string id, GetScriptRequestParameters requestParameters);
    [MapsApiAttribute("get_script", "id")]
public sealed virtual Task`1<TResponse> GetScriptAsync(string id, GetScriptRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse GetScriptContext(GetScriptContextRequestParameters requestParameters);
    [MapsApiAttribute("get_script_context", "")]
public sealed virtual Task`1<TResponse> GetScriptContextAsync(GetScriptContextRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse GetScriptLanguages(GetScriptLanguagesRequestParameters requestParameters);
    [MapsApiAttribute("get_script_languages", "")]
public sealed virtual Task`1<TResponse> GetScriptLanguagesAsync(GetScriptLanguagesRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Source(string index, string id, SourceRequestParameters requestParameters);
    [MapsApiAttribute("get_source", "index, id")]
public sealed virtual Task`1<TResponse> SourceAsync(string index, string id, SourceRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Index(string index, string id, PostData body, IndexRequestParameters requestParameters);
    [MapsApiAttribute("index", "index, id, body")]
public sealed virtual Task`1<TResponse> IndexAsync(string index, string id, PostData body, IndexRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Index(string index, PostData body, IndexRequestParameters requestParameters);
    [MapsApiAttribute("index", "index, body")]
public sealed virtual Task`1<TResponse> IndexAsync(string index, PostData body, IndexRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse RootNodeInfo(RootNodeInfoRequestParameters requestParameters);
    [MapsApiAttribute("info", "")]
public sealed virtual Task`1<TResponse> RootNodeInfoAsync(RootNodeInfoRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiGet(PostData body, MultiGetRequestParameters requestParameters);
    [MapsApiAttribute("mget", "body")]
public sealed virtual Task`1<TResponse> MultiGetAsync(PostData body, MultiGetRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiGet(string index, PostData body, MultiGetRequestParameters requestParameters);
    [MapsApiAttribute("mget", "index, body")]
public sealed virtual Task`1<TResponse> MultiGetAsync(string index, PostData body, MultiGetRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiSearch(PostData body, MultiSearchRequestParameters requestParameters);
    [MapsApiAttribute("msearch", "body")]
public sealed virtual Task`1<TResponse> MultiSearchAsync(PostData body, MultiSearchRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiSearch(string index, PostData body, MultiSearchRequestParameters requestParameters);
    [MapsApiAttribute("msearch", "index, body")]
public sealed virtual Task`1<TResponse> MultiSearchAsync(string index, PostData body, MultiSearchRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiSearchTemplate(PostData body, MultiSearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("msearch_template", "body")]
public sealed virtual Task`1<TResponse> MultiSearchTemplateAsync(PostData body, MultiSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiSearchTemplate(string index, PostData body, MultiSearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("msearch_template", "index, body")]
public sealed virtual Task`1<TResponse> MultiSearchTemplateAsync(string index, PostData body, MultiSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiTermVectors(PostData body, MultiTermVectorsRequestParameters requestParameters);
    [MapsApiAttribute("mtermvectors", "body")]
public sealed virtual Task`1<TResponse> MultiTermVectorsAsync(PostData body, MultiTermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse MultiTermVectors(string index, PostData body, MultiTermVectorsRequestParameters requestParameters);
    [MapsApiAttribute("mtermvectors", "index, body")]
public sealed virtual Task`1<TResponse> MultiTermVectorsAsync(string index, PostData body, MultiTermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Ping(PingRequestParameters requestParameters);
    [MapsApiAttribute("ping", "")]
public sealed virtual Task`1<TResponse> PingAsync(PingRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse PutScript(string id, PostData body, PutScriptRequestParameters requestParameters);
    [MapsApiAttribute("put_script", "id, body")]
public sealed virtual Task`1<TResponse> PutScriptAsync(string id, PostData body, PutScriptRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse PutScript(string id, string context, PostData body, PutScriptRequestParameters requestParameters);
    [MapsApiAttribute("put_script", "id, context, body")]
public sealed virtual Task`1<TResponse> PutScriptAsync(string id, string context, PostData body, PutScriptRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse RankEval(PostData body, RankEvalRequestParameters requestParameters);
    [MapsApiAttribute("rank_eval", "body")]
public sealed virtual Task`1<TResponse> RankEvalAsync(PostData body, RankEvalRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse RankEval(string index, PostData body, RankEvalRequestParameters requestParameters);
    [MapsApiAttribute("rank_eval", "index, body")]
public sealed virtual Task`1<TResponse> RankEvalAsync(string index, PostData body, RankEvalRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse ReindexOnServer(PostData body, ReindexOnServerRequestParameters requestParameters);
    [MapsApiAttribute("reindex", "body")]
public sealed virtual Task`1<TResponse> ReindexOnServerAsync(PostData body, ReindexOnServerRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse ReindexRethrottle(string taskId, ReindexRethrottleRequestParameters requestParameters);
    [MapsApiAttribute("reindex_rethrottle", "task_id")]
public sealed virtual Task`1<TResponse> ReindexRethrottleAsync(string taskId, ReindexRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse RenderSearchTemplate(PostData body, RenderSearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("render_search_template", "body")]
public sealed virtual Task`1<TResponse> RenderSearchTemplateAsync(PostData body, RenderSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse RenderSearchTemplate(string id, PostData body, RenderSearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("render_search_template", "id, body")]
public sealed virtual Task`1<TResponse> RenderSearchTemplateAsync(string id, PostData body, RenderSearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse ExecutePainlessScript(PostData body, ExecutePainlessScriptRequestParameters requestParameters);
    [MapsApiAttribute("scripts_painless_execute", "body")]
public sealed virtual Task`1<TResponse> ExecutePainlessScriptAsync(PostData body, ExecutePainlessScriptRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Scroll(PostData body, ScrollRequestParameters requestParameters);
    [MapsApiAttribute("scroll", "body")]
public sealed virtual Task`1<TResponse> ScrollAsync(PostData body, ScrollRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Search(PostData body, SearchRequestParameters requestParameters);
    [MapsApiAttribute("search", "body")]
public sealed virtual Task`1<TResponse> SearchAsync(PostData body, SearchRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Search(string index, PostData body, SearchRequestParameters requestParameters);
    [MapsApiAttribute("search", "index, body")]
public sealed virtual Task`1<TResponse> SearchAsync(string index, PostData body, SearchRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse SearchShards(SearchShardsRequestParameters requestParameters);
    [MapsApiAttribute("search_shards", "")]
public sealed virtual Task`1<TResponse> SearchShardsAsync(SearchShardsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse SearchShards(string index, SearchShardsRequestParameters requestParameters);
    [MapsApiAttribute("search_shards", "index")]
public sealed virtual Task`1<TResponse> SearchShardsAsync(string index, SearchShardsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse SearchTemplate(PostData body, SearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("search_template", "body")]
public sealed virtual Task`1<TResponse> SearchTemplateAsync(PostData body, SearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse SearchTemplate(string index, PostData body, SearchTemplateRequestParameters requestParameters);
    [MapsApiAttribute("search_template", "index, body")]
public sealed virtual Task`1<TResponse> SearchTemplateAsync(string index, PostData body, SearchTemplateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse TermVectors(string index, string id, PostData body, TermVectorsRequestParameters requestParameters);
    [MapsApiAttribute("termvectors", "index, id, body")]
public sealed virtual Task`1<TResponse> TermVectorsAsync(string index, string id, PostData body, TermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse TermVectors(string index, PostData body, TermVectorsRequestParameters requestParameters);
    [MapsApiAttribute("termvectors", "index, body")]
public sealed virtual Task`1<TResponse> TermVectorsAsync(string index, PostData body, TermVectorsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse Update(string index, string id, PostData body, UpdateRequestParameters requestParameters);
    [MapsApiAttribute("update", "index, id, body")]
public sealed virtual Task`1<TResponse> UpdateAsync(string index, string id, PostData body, UpdateRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse UpdateByQuery(string index, PostData body, UpdateByQueryRequestParameters requestParameters);
    [MapsApiAttribute("update_by_query", "index, body")]
public sealed virtual Task`1<TResponse> UpdateByQueryAsync(string index, PostData body, UpdateByQueryRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse UpdateByQueryRethrottle(string taskId, UpdateByQueryRethrottleRequestParameters requestParameters);
    [MapsApiAttribute("update_by_query_rethrottle", "task_id")]
public sealed virtual Task`1<TResponse> UpdateByQueryRethrottleAsync(string taskId, UpdateByQueryRethrottleRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse FieldCapabilities(FieldCapabilitiesRequestParameters requestParameters);
    public sealed virtual Task`1<TResponse> FieldCapabilitiesAsync(FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse FieldCapabilities(string index, FieldCapabilitiesRequestParameters requestParameters);
    public sealed virtual Task`1<TResponse> FieldCapabilitiesAsync(string index, FieldCapabilitiesRequestParameters requestParameters, CancellationToken ctx);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelCatNamespace get_Cat();
    [CompilerGeneratedAttribute]
private void set_Cat(LowLevelCatNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelClusterNamespace get_Cluster();
    [CompilerGeneratedAttribute]
private void set_Cluster(LowLevelClusterNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelIndicesNamespace get_Indices();
    [CompilerGeneratedAttribute]
private void set_Indices(LowLevelIndicesNamespace value);
    [CompilerGeneratedAttribute]
public sealed virtual LowLevelHttpNamespace get_Http();
    [CompilerGeneratedAttribute]
private void set_Http(LowLevelHttpNamespace value);
    public sealed virtual TResponse CreatePit(string index, CreatePitRequestParameters requestParameters);
    [MapsApiAttribute("create_pit", "index")]
public sealed virtual Task`1<TResponse> CreatePitAsync(string index, CreatePitRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DeleteAllPits(DeleteAllPitsRequestParameters requestParameters);
    [MapsApiAttribute("delete_all_pits", "")]
public sealed virtual Task`1<TResponse> DeleteAllPitsAsync(DeleteAllPitsRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse DeletePit(PostData body, DeletePitRequestParameters requestParameters);
    [MapsApiAttribute("delete_pit", "body")]
public sealed virtual Task`1<TResponse> DeletePitAsync(PostData body, DeletePitRequestParameters requestParameters, CancellationToken ctx);
    public sealed virtual TResponse GetAllPits(GetAllPitsRequestParameters requestParameters);
    [MapsApiAttribute("get_all_pits", "")]
public sealed virtual Task`1<TResponse> GetAllPitsAsync(GetAllPitsRequestParameters requestParameters, CancellationToken ctx);
}
internal class OpenSearch.Net.OpenSearchNetEnumResolver : object {
    public static IJsonFormatterResolver Instance;
    private static OpenSearchNetEnumResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.OpenSearchNetFormatterResolver : object {
    private IJsonFormatter`1<object> _fallbackFormatter;
    private InnerResolver _innerFormatterResolver;
    [CompilerGeneratedAttribute]
private static OpenSearchNetFormatterResolver <Instance>k__BackingField;
    public static OpenSearchNetFormatterResolver Instance { get; }
    private static OpenSearchNetFormatterResolver();
    [CompilerGeneratedAttribute]
public static OpenSearchNetFormatterResolver get_Instance();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
public abstract class OpenSearch.Net.OpenSearchResponse`1 : OpenSearchResponseBase {
    [CompilerGeneratedAttribute]
private T <Body>k__BackingField;
    public T Body { get; protected internal set; }
    [CompilerGeneratedAttribute]
public T get_Body();
    [CompilerGeneratedAttribute]
protected internal void set_Body(T value);
}
public abstract class OpenSearch.Net.OpenSearchResponseBase : object {
    [CompilerGeneratedAttribute]
private IApiCallDetails <ApiCall>k__BackingField;
    public IApiCallDetails ApiCall { get; public set; }
    public ReadOnlyDictionary`2<TcpState, int> TcpStats { get; public set; }
    public string DebugInformation { get; }
    public HttpMethod HttpMethod { get; }
    public List`1<Audit> AuditTrail { get; public set; }
    public ReadOnlyDictionary`2<string, ThreadPoolStatistics> ThreadPoolStats { get; public set; }
    public IEnumerable`1<string> DeprecationWarnings { get; }
    public bool SuccessOrKnownError { get; }
    public Nullable`1<int> HttpStatusCode { get; }
    public bool Success { get; }
    public Exception OriginalException { get; }
    public string ResponseMimeType { get; }
    public Uri Uri { get; }
    public IConnectionConfigurationValues ConnectionConfiguration { get; }
    public Byte[] ResponseBodyInBytes { get; }
    public Byte[] RequestBodyInBytes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IApiCallDetails get_ApiCall();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiCall(IApiCallDetails value);
    public sealed virtual ReadOnlyDictionary`2<TcpState, int> get_TcpStats();
    public sealed virtual void set_TcpStats(ReadOnlyDictionary`2<TcpState, int> value);
    public sealed virtual string get_DebugInformation();
    public sealed virtual HttpMethod get_HttpMethod();
    public sealed virtual List`1<Audit> get_AuditTrail();
    public sealed virtual void set_AuditTrail(List`1<Audit> value);
    public sealed virtual ReadOnlyDictionary`2<string, ThreadPoolStatistics> get_ThreadPoolStats();
    public sealed virtual void set_ThreadPoolStats(ReadOnlyDictionary`2<string, ThreadPoolStatistics> value);
    public sealed virtual IEnumerable`1<string> get_DeprecationWarnings();
    public sealed virtual bool get_SuccessOrKnownError();
    public sealed virtual Nullable`1<int> get_HttpStatusCode();
    public sealed virtual bool get_Success();
    public sealed virtual Exception get_OriginalException();
    public sealed virtual string get_ResponseMimeType();
    public sealed virtual Uri get_Uri();
    public sealed virtual IConnectionConfigurationValues get_ConnectionConfiguration();
    public sealed virtual Byte[] get_ResponseBodyInBytes();
    public sealed virtual Byte[] get_RequestBodyInBytes();
    private sealed virtual override bool OpenSearch.Net.IOpenSearchResponse.TryGetServerErrorReason(String& reason);
    public virtual bool TryGetServerError(ServerError& serverError);
    protected virtual bool TryGetServerErrorReason(String& reason);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class OpenSearch.Net.OpenSearchSerializerExtensions : object {
    [ExtensionAttribute]
internal static void SerializeUsingWriter(IOpenSearchSerializer serializer, JsonWriter& writer, T body, IConnectionConfigurationValues settings, SerializationFormatting formatting);
    [ExtensionAttribute]
public static Byte[] SerializeToBytes(IOpenSearchSerializer serializer, T data, SerializationFormatting formatting);
    [ExtensionAttribute]
public static Byte[] SerializeToBytes(IOpenSearchSerializer serializer, T data, IMemoryStreamFactory memoryStreamFactory, SerializationFormatting formatting);
    [ExtensionAttribute]
public static string SerializeToString(IOpenSearchSerializer serializer, T data, SerializationFormatting formatting);
    [ExtensionAttribute]
public static string SerializeToString(IOpenSearchSerializer serializer, T data, IMemoryStreamFactory memoryStreamFactory, SerializationFormatting formatting);
}
public class OpenSearch.Net.OpenSearchUrlFormatter : object {
    private IConnectionConfigurationValues _settings;
    public OpenSearchUrlFormatter(IConnectionConfigurationValues settings);
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
    public string CreateString(object value);
    public static string CreateString(object value, IConnectionConfigurationValues settings);
    private static string ResolveUrlParameterOrDefault(object value, IConnectionConfigurationValues settings);
}
[StringEnumAttribute]
public enum OpenSearch.Net.OpType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static OpType Index;
    [EnumMemberAttribute]
public static OpType Create;
}
public class OpenSearch.Net.PingRequestParameters : RequestParameters`1<PingRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.PipelineException : Exception {
    [CompilerGeneratedAttribute]
private IApiCallDetails <ApiCall>k__BackingField;
    [CompilerGeneratedAttribute]
private PipelineFailure <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private IOpenSearchResponse <Response>k__BackingField;
    public IApiCallDetails ApiCall { get; internal set; }
    public PipelineFailure FailureReason { get; }
    public bool Recoverable { get; }
    public IOpenSearchResponse Response { get; internal set; }
    public PipelineException(PipelineFailure failure);
    public PipelineException(PipelineFailure failure, Exception innerException);
    [CompilerGeneratedAttribute]
public IApiCallDetails get_ApiCall();
    [CompilerGeneratedAttribute]
internal void set_ApiCall(IApiCallDetails value);
    [CompilerGeneratedAttribute]
public PipelineFailure get_FailureReason();
    public bool get_Recoverable();
    [CompilerGeneratedAttribute]
public IOpenSearchResponse get_Response();
    [CompilerGeneratedAttribute]
internal void set_Response(IOpenSearchResponse value);
    private static string GetMessage(PipelineFailure failure);
}
public enum OpenSearch.Net.PipelineFailure : Enum {
    public int value__;
    public static PipelineFailure BadAuthentication;
    public static PipelineFailure BadResponse;
    public static PipelineFailure PingFailure;
    public static PipelineFailure SniffFailure;
    public static PipelineFailure CouldNotStartSniffOnStartup;
    public static PipelineFailure MaxTimeoutReached;
    public static PipelineFailure MaxRetriesReached;
    public static PipelineFailure Unexpected;
    public static PipelineFailure BadRequest;
    public static PipelineFailure NoNodesAttempted;
}
public abstract class OpenSearch.Net.PostData : object {
    protected static int BufferSize;
    protected static string NewLineString;
    protected static Byte[] NewLineByteArray;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableDirectStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
private PostType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WrittenBytes>k__BackingField;
    public Nullable`1<bool> DisableDirectStreaming { get; public set; }
    public PostType Type { get; protected set; }
    public Byte[] WrittenBytes { get; protected set; }
    public static PostData Empty { get; }
    private static PostData();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableDirectStreaming();
    [CompilerGeneratedAttribute]
public void set_DisableDirectStreaming(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public PostType get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(PostType value);
    [CompilerGeneratedAttribute]
public Byte[] get_WrittenBytes();
    [CompilerGeneratedAttribute]
protected void set_WrittenBytes(Byte[] value);
    public static PostData get_Empty();
    public abstract virtual void Write(Stream writableStream, IConnectionConfigurationValues settings);
    public abstract virtual Task WriteAsync(Stream writableStream, IConnectionConfigurationValues settings, CancellationToken cancellationToken);
    public static PostData op_Implicit(Byte[] byteArray);
    public static PostData op_Implicit(string literalString);
    public static SerializableData`1<T> Serializable(T o);
    public static PostData MultiJson(IEnumerable`1<string> listOfString);
    public static PostData MultiJson(IEnumerable`1<object> listOfObjects);
    public static PostData Bytes(Byte[] bytes);
    public static PostData ReadOnlyMemory(ReadOnlyMemory`1<byte> bytes);
    public static PostData String(string serializedString);
    public static PostData StreamHandler(T state, Action`2<T, Stream> syncWriter, Func`4<T, Stream, CancellationToken, Task> asyncWriter);
    protected void BufferIfNeeded(IConnectionConfigurationValues settings, MemoryStream& buffer, Stream& stream);
    protected void FinishStream(Stream writableStream, MemoryStream buffer, IConnectionConfigurationValues settings);
    [AsyncStateMachineAttribute("OpenSearch.Net.PostData/<FinishStreamAsync>d__30")]
protected ValueTask FinishStreamAsync(Stream writableStream, MemoryStream buffer, IConnectionConfigurationValues settings, CancellationToken ctx);
}
public class OpenSearch.Net.PostData`1 : PostData {
    private IEnumerable`1<object> _enumerableOfObject;
    private IEnumerable`1<string> _enumerableOfStrings;
    private string _literalString;
    private ReadOnlyMemory`1<byte> _memoryOfBytes;
    protected internal PostData`1(Byte[] item);
    protected internal PostData`1(ReadOnlyMemory`1<byte> item);
    protected internal PostData`1(string item);
    protected internal PostData`1(IEnumerable`1<string> item);
    protected internal PostData`1(IEnumerable`1<object> item);
    public virtual void Write(Stream writableStream, IConnectionConfigurationValues settings);
    [AsyncStateMachineAttribute("OpenSearch.Net.PostData`1/<WriteAsync>d__10")]
public virtual Task WriteAsync(Stream writableStream, IConnectionConfigurationValues settings, CancellationToken cancellationToken);
}
public enum OpenSearch.Net.PostType : Enum {
    public int value__;
    public static PostType ByteArray;
    public static PostType ReadOnlyMemory;
    public static PostType LiteralString;
    public static PostType EnumerableOfString;
    public static PostType EnumerableOfObject;
    public static PostType StreamHandler;
    public static PostType Serializable;
}
public class OpenSearch.Net.PutScriptRequestParameters : RequestParameters`1<PutScriptRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Context { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Context();
    public void set_Context(string value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.RankEvalRequestParameters : RequestParameters`1<RankEvalRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
}
internal class OpenSearch.Net.RecyclableMemoryStream : MemoryStream {
    private static long MaxStreamLength;
    private static Byte[] EmptyArray;
    private List`1<Byte[]> _blocks;
    private Byte[] _byteBuffer;
    private Guid _id;
    private RecyclableMemoryStreamManager _memoryManager;
    private string _tag;
    private List`1<Byte[]> _dirtyBuffers;
    private long _disposedState;
    private Byte[] _largeBuffer;
    [CompilerGeneratedAttribute]
private string <AllocationStack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisposeStack>k__BackingField;
    private int _length;
    private int _position;
    internal Guid Id { get; }
    internal string Tag { get; }
    internal RecyclableMemoryStreamManager MemoryManager { get; }
    internal string AllocationStack { get; }
    internal string DisposeStack { get; private set; }
    public int Capacity { get; public set; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    private bool Disposed { get; }
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, int requestedSize);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, int requestedSize);
    internal RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, int requestedSize, Byte[] initialLargeBuffer);
    private static RecyclableMemoryStream();
    internal Guid get_Id();
    internal string get_Tag();
    internal RecyclableMemoryStreamManager get_MemoryManager();
    [CompilerGeneratedAttribute]
internal string get_AllocationStack();
    [CompilerGeneratedAttribute]
internal string get_DisposeStack();
    [CompilerGeneratedAttribute]
private void set_DisposeStack(string value);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual Byte[] GetBuffer();
    public virtual bool TryGetBuffer(ArraySegment`1& buffer);
    [ObsoleteAttribute("This method has degraded performance vs. GetBuffer and should be avoided.")]
public virtual Byte[] ToArray();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public int SafeRead(Byte[] buffer, int offset, int count, Int32& streamPosition);
    public virtual int Read(Span`1<byte> buffer);
    public int SafeRead(Span`1<byte> buffer, Int32& streamPosition);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> source);
    public virtual string ToString();
    public virtual void WriteByte(byte value);
    public virtual int ReadByte();
    public int SafeReadByte(Int32& streamPosition);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin loc);
    public virtual void WriteTo(Stream stream);
    private bool get_Disposed();
    private void CheckDisposed();
    private int InternalRead(Byte[] buffer, int offset, int count, int fromPosition);
    private int InternalRead(Span`1<byte> buffer, int fromPosition);
    private BlockAndOffset GetBlockAndRelativeOffset(int offset);
    private void EnsureCapacity(int newCapacity);
    private void ReleaseLargeBuffer();
}
public class OpenSearch.Net.RecyclableMemoryStreamFactory : object {
    private static string TagSource;
    private RecyclableMemoryStreamManager _manager;
    [CompilerGeneratedAttribute]
private static RecyclableMemoryStreamFactory <Default>k__BackingField;
    public static RecyclableMemoryStreamFactory Default { get; }
    private static RecyclableMemoryStreamFactory();
    [CompilerGeneratedAttribute]
public static RecyclableMemoryStreamFactory get_Default();
    private static RecyclableMemoryStreamManager CreateManager(bool experimental);
    public sealed virtual MemoryStream Create();
    public sealed virtual MemoryStream Create(Byte[] bytes);
    public sealed virtual MemoryStream Create(Byte[] bytes, int index, int count);
}
internal class OpenSearch.Net.RecyclableMemoryStreamManager : object {
    public static Events EventsWriter;
    public static int DefaultBlockSize;
    public static int DefaultLargeBufferMultiple;
    public static int DefaultMaximumBufferSize;
    private Int64[] _largeBufferFreeSize;
    private Int64[] _largeBufferInUseSize;
    private ConcurrentStack`1[] _largePools;
    private ConcurrentStack`1<Byte[]> _smallPool;
    private long _smallPoolFreeSize;
    private long _smallPoolInUseSize;
    [CompilerGeneratedAttribute]
private bool <AggressiveBufferReturn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlockSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateCallStacks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeBufferMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumFreeLargePoolBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumFreeSmallPoolBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumStreamCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseExponentialLargeBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler BlockCreated;
    [CompilerGeneratedAttribute]
private EventHandler BlockDiscarded;
    [CompilerGeneratedAttribute]
private EventHandler LargeBufferCreated;
    [CompilerGeneratedAttribute]
private EventHandler StreamCreated;
    [CompilerGeneratedAttribute]
private EventHandler StreamDisposed;
    [CompilerGeneratedAttribute]
private EventHandler StreamFinalized;
    [CompilerGeneratedAttribute]
private StreamLengthReportHandler StreamLength;
    [CompilerGeneratedAttribute]
private EventHandler StreamConvertedToArray;
    [CompilerGeneratedAttribute]
private LargeBufferDiscardedEventHandler LargeBufferDiscarded;
    [CompilerGeneratedAttribute]
private UsageReportEventHandler UsageReport;
    public bool AggressiveBufferReturn { get; public set; }
    public int BlockSize { get; }
    public bool GenerateCallStacks { get; public set; }
    public int LargeBufferMultiple { get; }
    public long LargeBuffersFree { get; }
    public long LargePoolFreeSize { get; }
    public long LargePoolInUseSize { get; }
    public int MaximumBufferSize { get; }
    public long MaximumFreeLargePoolBytes { get; public set; }
    public long MaximumFreeSmallPoolBytes { get; public set; }
    public long MaximumStreamCapacity { get; public set; }
    public long SmallBlocksFree { get; }
    public long SmallPoolFreeSize { get; }
    public long SmallPoolInUseSize { get; }
    public bool UseExponentialLargeBuffer { get; }
    public bool UseMultipleLargeBuffer { get; }
    public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize);
    public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, bool useExponentialLargeBuffer);
    private static RecyclableMemoryStreamManager();
    [CompilerGeneratedAttribute]
public bool get_AggressiveBufferReturn();
    [CompilerGeneratedAttribute]
public void set_AggressiveBufferReturn(bool value);
    [CompilerGeneratedAttribute]
public int get_BlockSize();
    [CompilerGeneratedAttribute]
public bool get_GenerateCallStacks();
    [CompilerGeneratedAttribute]
public void set_GenerateCallStacks(bool value);
    [CompilerGeneratedAttribute]
public int get_LargeBufferMultiple();
    public long get_LargeBuffersFree();
    public long get_LargePoolFreeSize();
    public long get_LargePoolInUseSize();
    [CompilerGeneratedAttribute]
public int get_MaximumBufferSize();
    [CompilerGeneratedAttribute]
public long get_MaximumFreeLargePoolBytes();
    [CompilerGeneratedAttribute]
public void set_MaximumFreeLargePoolBytes(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumFreeSmallPoolBytes();
    [CompilerGeneratedAttribute]
public void set_MaximumFreeSmallPoolBytes(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumStreamCapacity();
    [CompilerGeneratedAttribute]
public void set_MaximumStreamCapacity(long value);
    public long get_SmallBlocksFree();
    public long get_SmallPoolFreeSize();
    public long get_SmallPoolInUseSize();
    [CompilerGeneratedAttribute]
public bool get_UseExponentialLargeBuffer();
    public bool get_UseMultipleLargeBuffer();
    internal Byte[] GetBlock();
    internal Byte[] GetLargeBuffer(int requiredSize, string tag);
    private int RoundToLargeBufferSize(int requiredSize);
    private bool IsLargeBufferSize(int value);
    private int GetPoolIndex(int length);
    internal void ReturnLargeBuffer(Byte[] buffer, string tag);
    internal void ReturnBlocks(ICollection`1<Byte[]> blocks, string tag);
    internal void ReportBlockCreated();
    internal void ReportBlockDiscarded();
    internal void ReportLargeBufferCreated();
    internal void ReportLargeBufferDiscarded(MemoryStreamDiscardReason reason);
    internal void ReportStreamCreated();
    internal void ReportStreamDisposed();
    internal void ReportStreamFinalized();
    internal void ReportStreamLength(long bytes);
    internal void ReportStreamToArray();
    internal void ReportUsageReport(long smallPoolInUseBytes, long smallPoolFreeBytes, long largePoolInUseBytes, long largePoolFreeBytes);
    public MemoryStream GetStream();
    public MemoryStream GetStream(Byte[] bytes);
    public MemoryStream GetStream(Guid id);
    public MemoryStream GetStream(string tag);
    public MemoryStream GetStream(Guid id, string tag);
    public MemoryStream GetStream(string tag, int requiredSize);
    public MemoryStream GetStream(Guid id, string tag, int requiredSize);
    public MemoryStream GetStream(Guid id, string tag, int requiredSize, bool asContiguousBuffer);
    public MemoryStream GetStream(string tag, int requiredSize, bool asContiguousBuffer);
    public MemoryStream GetStream(Guid id, string tag, Byte[] buffer, int offset, int count);
    public MemoryStream GetStream(string tag, Byte[] buffer, int offset, int count);
    [CompilerGeneratedAttribute]
public void add_BlockCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BlockCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_BlockDiscarded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BlockDiscarded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LargeBufferCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LargeBufferCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_StreamCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StreamCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_StreamDisposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StreamDisposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_StreamFinalized(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StreamFinalized(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_StreamLength(StreamLengthReportHandler value);
    [CompilerGeneratedAttribute]
public void remove_StreamLength(StreamLengthReportHandler value);
    [CompilerGeneratedAttribute]
public void add_StreamConvertedToArray(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StreamConvertedToArray(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LargeBufferDiscarded(LargeBufferDiscardedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LargeBufferDiscarded(LargeBufferDiscardedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UsageReport(UsageReportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UsageReport(UsageReportEventHandler value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.Refresh : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Refresh True;
    [EnumMemberAttribute]
public static Refresh False;
    [EnumMemberAttribute]
public static Refresh WaitFor;
}
public class OpenSearch.Net.ReindexOnServerRequestParameters : RequestParameters`1<ReindexOnServerRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Refresh { get; public set; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public TimeSpan Scroll { get; public set; }
    public Nullable`1<long> Slices { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
    public TimeSpan get_Scroll();
    public void set_Scroll(TimeSpan value);
    public Nullable`1<long> get_Slices();
    public void set_Slices(Nullable`1<long> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.ReindexRethrottleRequestParameters : RequestParameters`1<ReindexRethrottleRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
}
public class OpenSearch.Net.RenderSearchTemplateRequestParameters : RequestParameters`1<RenderSearchTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.RequestConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<int> <AllowedStatusCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicAuthenticationCredentials <BasicAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiKeyAuthenticationCredentials <ApiKeyAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableDirectStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisablePing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableSniff>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableHttpPipelining>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ForceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpaqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PingTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunAs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ThrowExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TransferEncodingChunked>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTcpStats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableThreadPoolStats>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMetaData <RequestMetaData>k__BackingField;
    public string Accept { get; public set; }
    public IReadOnlyCollection`1<int> AllowedStatusCodes { get; public set; }
    public BasicAuthenticationCredentials BasicAuthenticationCredentials { get; public set; }
    public ApiKeyAuthenticationCredentials ApiKeyAuthenticationCredentials { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<bool> DisableDirectStreaming { get; public set; }
    public Nullable`1<bool> DisablePing { get; public set; }
    public Nullable`1<bool> DisableSniff { get; public set; }
    public Nullable`1<bool> EnableHttpPipelining { get; public set; }
    public Uri ForceNode { get; public set; }
    public Nullable`1<int> MaxRetries { get; public set; }
    public string OpaqueId { get; public set; }
    public Nullable`1<TimeSpan> PingTimeout { get; public set; }
    public Nullable`1<TimeSpan> RequestTimeout { get; public set; }
    public string RunAs { get; public set; }
    public Nullable`1<bool> ThrowExceptions { get; public set; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public NameValueCollection Headers { get; public set; }
    public Nullable`1<bool> EnableTcpStats { get; public set; }
    public Nullable`1<bool> EnableThreadPoolStats { get; public set; }
    public RequestMetaData RequestMetaData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Accept();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accept(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<int> get_AllowedStatusCodes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedStatusCodes(IReadOnlyCollection`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual BasicAuthenticationCredentials get_BasicAuthenticationCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BasicAuthenticationCredentials(BasicAuthenticationCredentials value);
    [CompilerGeneratedAttribute]
public sealed virtual ApiKeyAuthenticationCredentials get_ApiKeyAuthenticationCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiKeyAuthenticationCredentials(ApiKeyAuthenticationCredentials value);
    [CompilerGeneratedAttribute]
public sealed virtual X509CertificateCollection get_ClientCertificates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableDirectStreaming();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDirectStreaming(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisablePing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisablePing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableSniff();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableSniff(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableHttpPipelining();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableHttpPipelining(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ForceNode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceNode(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxRetries();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OpaqueId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpaqueId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_PingTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PingTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_RequestTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RunAs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RunAs(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ThrowExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThrowExceptions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TransferEncodingChunked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransferEncodingChunked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableTcpStats();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableTcpStats(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableThreadPoolStats();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableThreadPoolStats(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestMetaData get_RequestMetaData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestMetaData(RequestMetaData value);
}
public class OpenSearch.Net.RequestConfigurationDescriptor : object {
    [CompilerGeneratedAttribute]
private string <OpenSearch.Net.IRequestConfiguration.Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<int> <OpenSearch.Net.IRequestConfiguration.AllowedStatusCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicAuthenticationCredentials <OpenSearch.Net.IRequestConfiguration.BasicAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiKeyAuthenticationCredentials <OpenSearch.Net.IRequestConfiguration.ApiKeyAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <OpenSearch.Net.IRequestConfiguration.ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenSearch.Net.IRequestConfiguration.ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.DisableDirectStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.DisablePing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.DisableSniff>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.EnableHttpPipelining>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OpenSearch.Net.IRequestConfiguration.ForceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OpenSearch.Net.IRequestConfiguration.MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenSearch.Net.IRequestConfiguration.OpaqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OpenSearch.Net.IRequestConfiguration.PingTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OpenSearch.Net.IRequestConfiguration.RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenSearch.Net.IRequestConfiguration.RunAs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.ThrowExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.TransferEncodingChunked>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <OpenSearch.Net.IRequestConfiguration.Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.EnableTcpStats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OpenSearch.Net.IRequestConfiguration.EnableThreadPoolStats>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMetaData <OpenSearch.Net.IRequestConfiguration.RequestMetaData>k__BackingField;
    private string OpenSearch.Net.IRequestConfiguration.Accept { get; private set; }
    private IReadOnlyCollection`1<int> OpenSearch.Net.IRequestConfiguration.AllowedStatusCodes { get; private set; }
    private BasicAuthenticationCredentials OpenSearch.Net.IRequestConfiguration.BasicAuthenticationCredentials { get; private set; }
    private ApiKeyAuthenticationCredentials OpenSearch.Net.IRequestConfiguration.ApiKeyAuthenticationCredentials { get; private set; }
    private X509CertificateCollection OpenSearch.Net.IRequestConfiguration.ClientCertificates { get; private set; }
    private string OpenSearch.Net.IRequestConfiguration.ContentType { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.DisableDirectStreaming { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.DisablePing { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.DisableSniff { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.EnableHttpPipelining { get; private set; }
    private Uri OpenSearch.Net.IRequestConfiguration.ForceNode { get; private set; }
    private Nullable`1<int> OpenSearch.Net.IRequestConfiguration.MaxRetries { get; private set; }
    private string OpenSearch.Net.IRequestConfiguration.OpaqueId { get; private set; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IRequestConfiguration.PingTimeout { get; private set; }
    private Nullable`1<TimeSpan> OpenSearch.Net.IRequestConfiguration.RequestTimeout { get; private set; }
    private string OpenSearch.Net.IRequestConfiguration.RunAs { get; private set; }
    private IRequestConfiguration Self { get; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.ThrowExceptions { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.TransferEncodingChunked { get; private set; }
    private NameValueCollection OpenSearch.Net.IRequestConfiguration.Headers { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.EnableTcpStats { get; private set; }
    private Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.EnableThreadPoolStats { get; private set; }
    private RequestMetaData OpenSearch.Net.IRequestConfiguration.RequestMetaData { get; private set; }
    public RequestConfigurationDescriptor(IRequestConfiguration config);
    [CompilerGeneratedAttribute]
private sealed virtual override string OpenSearch.Net.IRequestConfiguration.get_Accept();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_Accept(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<int> OpenSearch.Net.IRequestConfiguration.get_AllowedStatusCodes();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_AllowedStatusCodes(IReadOnlyCollection`1<int> value);
    [CompilerGeneratedAttribute]
private sealed virtual override BasicAuthenticationCredentials OpenSearch.Net.IRequestConfiguration.get_BasicAuthenticationCredentials();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_BasicAuthenticationCredentials(BasicAuthenticationCredentials value);
    [CompilerGeneratedAttribute]
private sealed virtual override ApiKeyAuthenticationCredentials OpenSearch.Net.IRequestConfiguration.get_ApiKeyAuthenticationCredentials();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_ApiKeyAuthenticationCredentials(ApiKeyAuthenticationCredentials value);
    [CompilerGeneratedAttribute]
private sealed virtual override X509CertificateCollection OpenSearch.Net.IRequestConfiguration.get_ClientCertificates();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
private sealed virtual override string OpenSearch.Net.IRequestConfiguration.get_ContentType();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_ContentType(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_DisableDirectStreaming();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_DisableDirectStreaming(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_DisablePing();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_DisablePing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_DisableSniff();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_DisableSniff(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_EnableHttpPipelining();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_EnableHttpPipelining(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OpenSearch.Net.IRequestConfiguration.get_ForceNode();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_ForceNode(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<int> OpenSearch.Net.IRequestConfiguration.get_MaxRetries();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_MaxRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private sealed virtual override string OpenSearch.Net.IRequestConfiguration.get_OpaqueId();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_OpaqueId(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IRequestConfiguration.get_PingTimeout();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_PingTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<TimeSpan> OpenSearch.Net.IRequestConfiguration.get_RequestTimeout();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_RequestTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
private sealed virtual override string OpenSearch.Net.IRequestConfiguration.get_RunAs();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_RunAs(string value);
    private IRequestConfiguration get_Self();
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_ThrowExceptions();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_ThrowExceptions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_TransferEncodingChunked();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_TransferEncodingChunked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override NameValueCollection OpenSearch.Net.IRequestConfiguration.get_Headers();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_EnableTcpStats();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_EnableTcpStats(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> OpenSearch.Net.IRequestConfiguration.get_EnableThreadPoolStats();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_EnableThreadPoolStats(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override RequestMetaData OpenSearch.Net.IRequestConfiguration.get_RequestMetaData();
    [CompilerGeneratedAttribute]
private sealed virtual override void OpenSearch.Net.IRequestConfiguration.set_RequestMetaData(RequestMetaData value);
    public RequestConfigurationDescriptor RunAs(string username);
    public RequestConfigurationDescriptor RequestTimeout(TimeSpan requestTimeout);
    public RequestConfigurationDescriptor OpaqueId(string opaqueId);
    public RequestConfigurationDescriptor PingTimeout(TimeSpan pingTimeout);
    public RequestConfigurationDescriptor ContentType(string contentTypeHeader);
    public RequestConfigurationDescriptor Accept(string acceptHeader);
    public RequestConfigurationDescriptor AllowedStatusCodes(IEnumerable`1<int> codes);
    public RequestConfigurationDescriptor AllowedStatusCodes(Int32[] codes);
    public RequestConfigurationDescriptor DisableSniffing(Nullable`1<bool> disable);
    public RequestConfigurationDescriptor DisablePing(Nullable`1<bool> disable);
    public RequestConfigurationDescriptor ThrowExceptions(bool throwExceptions);
    public RequestConfigurationDescriptor DisableDirectStreaming(Nullable`1<bool> disable);
    public RequestConfigurationDescriptor ForceNode(Uri uri);
    public RequestConfigurationDescriptor MaxRetries(int retry);
    public RequestConfigurationDescriptor BasicAuthentication(string userName, string password);
    public RequestConfigurationDescriptor BasicAuthentication(string userName, SecureString password);
    public RequestConfigurationDescriptor ApiKeyAuthentication(string id, string apiKey);
    public RequestConfigurationDescriptor ApiKeyAuthentication(string id, SecureString apiKey);
    public RequestConfigurationDescriptor ApiKeyAuthentication(string base64EncodedApiKey);
    public RequestConfigurationDescriptor ApiKeyAuthentication(SecureString base64EncodedApiKey);
    public RequestConfigurationDescriptor EnableHttpPipelining(bool enable);
    public RequestConfigurationDescriptor ClientCertificates(X509CertificateCollection certificates);
    public RequestConfigurationDescriptor ClientCertificate(X509Certificate certificate);
    public RequestConfigurationDescriptor ClientCertificate(string certificatePath);
    public RequestConfigurationDescriptor TransferEncodingChunked(Nullable`1<bool> transferEncodingChunked);
    public RequestConfigurationDescriptor GlobalHeaders(NameValueCollection headers);
    public RequestConfigurationDescriptor EnableTcpStats(Nullable`1<bool> enableTcpStats);
    public RequestConfigurationDescriptor EnableThreadPoolStats(Nullable`1<bool> enableThreadPoolStats);
    internal RequestConfigurationDescriptor RequestMetaData(RequestMetaData metaData);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.RequestConfigurationExtensions : object {
    [ExtensionAttribute]
internal static void SetRequestMetaData(IRequestConfiguration requestConfiguration, RequestMetaData requestMetaData);
}
public class OpenSearch.Net.RequestData : object {
    public static string MimeType;
    public static string MimeTypeTextPlain;
    public static string OpaqueIdHeader;
    public static string RunAsSecurityHeader;
    private string _path;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<int> <AllowedStatusCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiKeyAuthenticationCredentials <ApiKeyAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicAuthenticationCredentials <BasicAuthorizationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionConfigurationValues <ConnectionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomResponseBuilderBase <CustomResponseBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutomaticProxyDetection>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MadeItToResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryStreamFactory <MemoryStreamFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathAndQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PingTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pipelined>k__BackingField;
    [CompilerGeneratedAttribute]
private PostData <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <ProxyPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestMimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunAs>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<int> <SkipDeserializationForStatusCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransferEncodingChunked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TcpStats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThreadPoolStats>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DnsRefreshTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaHeaderProvider <MetaHeaderProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <RequestMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public string Accept { get; }
    public IReadOnlyCollection`1<int> AllowedStatusCodes { get; }
    public ApiKeyAuthenticationCredentials ApiKeyAuthenticationCredentials { get; }
    public BasicAuthenticationCredentials BasicAuthorizationCredentials { get; }
    public X509CertificateCollection ClientCertificates { get; }
    public IConnectionConfigurationValues ConnectionSettings { get; }
    public CustomResponseBuilderBase CustomResponseBuilder { get; }
    public bool DisableAutomaticProxyDetection { get; }
    public NameValueCollection Headers { get; }
    public bool HttpCompression { get; }
    public int KeepAliveInterval { get; }
    public int KeepAliveTime { get; }
    public bool MadeItToResponse { get; public set; }
    public IMemoryStreamFactory MemoryStreamFactory { get; }
    public HttpMethod Method { get; }
    public Node Node { get; public set; }
    public AuditEvent OnFailureAuditEvent { get; }
    public PipelineFailure OnFailurePipelineFailure { get; }
    public string PathAndQuery { get; }
    public TimeSpan PingTimeout { get; }
    public bool Pipelined { get; }
    public PostData PostData { get; }
    public string ProxyAddress { get; }
    public SecureString ProxyPassword { get; }
    public string ProxyUsername { get; }
    public string RequestMimeType { get; }
    public TimeSpan RequestTimeout { get; }
    public string RunAs { get; }
    public IReadOnlyCollection`1<int> SkipDeserializationForStatusCodes { get; }
    public bool ThrowExceptions { get; }
    public string UserAgent { get; }
    public bool TransferEncodingChunked { get; }
    public bool TcpStats { get; }
    public bool ThreadPoolStats { get; }
    public Uri Uri { get; }
    public TimeSpan DnsRefreshTimeout { get; }
    public MetaHeaderProvider MetaHeaderProvider { get; }
    public IReadOnlyDictionary`2<string, string> RequestMetaData { get; }
    public bool IsAsync { get; internal set; }
    public RequestData(HttpMethod method, string path, PostData data, IConnectionConfigurationValues global, IRequestParameters local, IMemoryStreamFactory memoryStreamFactory);
    private RequestData(HttpMethod method, PostData data, IConnectionConfigurationValues global, IRequestConfiguration local, IMemoryStreamFactory memoryStreamFactory);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<int> get_AllowedStatusCodes();
    [CompilerGeneratedAttribute]
public ApiKeyAuthenticationCredentials get_ApiKeyAuthenticationCredentials();
    [CompilerGeneratedAttribute]
public BasicAuthenticationCredentials get_BasicAuthorizationCredentials();
    [CompilerGeneratedAttribute]
public X509CertificateCollection get_ClientCertificates();
    [CompilerGeneratedAttribute]
public IConnectionConfigurationValues get_ConnectionSettings();
    [CompilerGeneratedAttribute]
public CustomResponseBuilderBase get_CustomResponseBuilder();
    [CompilerGeneratedAttribute]
public bool get_DisableAutomaticProxyDetection();
    [CompilerGeneratedAttribute]
public NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
public bool get_HttpCompression();
    [CompilerGeneratedAttribute]
public int get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public int get_KeepAliveTime();
    [CompilerGeneratedAttribute]
public bool get_MadeItToResponse();
    [CompilerGeneratedAttribute]
public void set_MadeItToResponse(bool value);
    [CompilerGeneratedAttribute]
public IMemoryStreamFactory get_MemoryStreamFactory();
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public Node get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(Node value);
    public AuditEvent get_OnFailureAuditEvent();
    public PipelineFailure get_OnFailurePipelineFailure();
    [CompilerGeneratedAttribute]
public string get_PathAndQuery();
    [CompilerGeneratedAttribute]
public TimeSpan get_PingTimeout();
    [CompilerGeneratedAttribute]
public bool get_Pipelined();
    [CompilerGeneratedAttribute]
public PostData get_PostData();
    [CompilerGeneratedAttribute]
public string get_ProxyAddress();
    [CompilerGeneratedAttribute]
public SecureString get_ProxyPassword();
    [CompilerGeneratedAttribute]
public string get_ProxyUsername();
    [CompilerGeneratedAttribute]
public string get_RequestMimeType();
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public string get_RunAs();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<int> get_SkipDeserializationForStatusCodes();
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptions();
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public bool get_TransferEncodingChunked();
    [CompilerGeneratedAttribute]
public bool get_TcpStats();
    [CompilerGeneratedAttribute]
public bool get_ThreadPoolStats();
    public Uri get_Uri();
    [CompilerGeneratedAttribute]
public TimeSpan get_DnsRefreshTimeout();
    [CompilerGeneratedAttribute]
public MetaHeaderProvider get_MetaHeaderProvider();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_RequestMetaData();
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
internal void set_IsAsync(bool value);
    public virtual string ToString();
    private string CreatePathWithQueryStrings(string path, IConnectionConfigurationValues global, IRequestParameters request);
}
internal class OpenSearch.Net.RequestDataContent : HttpContent {
    private RequestData _requestData;
    private Func`5<RequestData, CompleteTaskOnCloseStream, RequestDataContent, TransportContext, Task> _onStreamAvailable;
    public RequestDataContent(RequestData requestData);
    public RequestDataContent(RequestData requestData, CancellationToken token);
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestDataContent/<SerializeToStreamAsync>d__4")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [CompilerGeneratedAttribute]
internal static Task <.ctor>g__OnStreamAvailable|2_0(RequestData data, Stream stream, HttpContent content, TransportContext context);
}
internal class OpenSearch.Net.RequestDataHttpClientFactory : object {
    private Func`2<RequestData, HttpMessageHandler> _createHttpClientHandler;
    private static TimerCallback CleanupCallback;
    private Func`3<int, RequestData, Lazy`1<ActiveHandlerTrackingEntry>> _entryFactory;
    private TimeSpan _defaultCleanupInterval;
    private Timer _cleanupTimer;
    private object _cleanupTimerLock;
    private object _cleanupActiveLock;
    private ConcurrentDictionary`2<int, Lazy`1<ActiveHandlerTrackingEntry>> _activeHandlers;
    private int _removedHandlers;
    private ConcurrentQueue`1<ExpiredHandlerTrackingEntry> _expiredHandlers;
    private TimerCallback _expiryCallback;
    public int InUseHandlers { get; }
    public int RemovedHandlers { get; }
    public RequestDataHttpClientFactory(Func`2<RequestData, HttpMessageHandler> createHttpClientHandler);
    private static RequestDataHttpClientFactory();
    public int get_InUseHandlers();
    public int get_RemovedHandlers();
    public HttpClient CreateClient(RequestData requestData);
    private HttpMessageHandler CreateHandler(int key, RequestData requestData);
    private ActiveHandlerTrackingEntry CreateHandlerEntry(int key, RequestData requestData);
    private void ExpiryTimer_Tick(object state);
    protected virtual void StartHandlerEntryTimer(ActiveHandlerTrackingEntry entry);
    protected virtual void StartCleanupTimer();
    protected virtual void StopCleanupTimer();
    private void CleanupTimer_Tick();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Lazy`1<ActiveHandlerTrackingEntry> <.ctor>b__15_0(int key, RequestData requestData);
    [CompilerGeneratedAttribute]
private Lazy`1<ActiveHandlerTrackingEntry> <CreateHandler>b__17_0(int k, RequestData r);
}
public class OpenSearch.Net.RequestMetaData : object {
    internal static string HelperKey;
    private Dictionary`2<string, string> _metaDataItems;
    public IReadOnlyDictionary`2<string, string> Items { get; }
    internal bool TryAddMetaData(string key, string value);
    public IReadOnlyDictionary`2<string, string> get_Items();
}
public abstract class OpenSearch.Net.RequestParameters`1 : object {
    [CompilerGeneratedAttribute]
private CustomResponseBuilderBase <CustomResponseBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestConfiguration <RequestConfiguration>k__BackingField;
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public CustomResponseBuilderBase CustomResponseBuilder { get; public set; }
    public Dictionary`2<string, object> QueryString { get; public set; }
    public IRequestConfiguration RequestConfiguration { get; public set; }
    private IRequestParameters Self { get; }
    public abstract virtual HttpMethod get_DefaultHttpMethod();
    public abstract virtual bool get_SupportsBody();
    [CompilerGeneratedAttribute]
public sealed virtual CustomResponseBuilderBase get_CustomResponseBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomResponseBuilder(CustomResponseBuilderBase value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_QueryString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryString(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequestConfiguration get_RequestConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestConfiguration(IRequestConfiguration value);
    private IRequestParameters get_Self();
    public sealed virtual bool ContainsQueryString(string name);
    public sealed virtual TOut GetQueryStringValue(string name);
    public sealed virtual string GetResolvedQueryStringValue(string n, IConnectionConfigurationValues s);
    public sealed virtual void SetQueryString(string name, object value);
    protected TOut Q(string name);
    protected void Q(string name, object value);
    private void RemoveQueryString(string name);
    protected void SetAcceptHeader(string format);
    public sealed virtual string AcceptHeaderFromFormat(string format);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.RequestParametersExtensions : object {
    [ExtensionAttribute]
internal static void SetRequestMetaData(IRequestParameters parameters, RequestMetaData requestMetaData);
}
public class OpenSearch.Net.RequestPipeline : object {
    private static string NoNodesAttemptedMessage;
    private IConnection _connection;
    private IConnectionPool _connectionPool;
    private IDateTimeProvider _dateTimeProvider;
    private IMemoryStreamFactory _memoryStreamFactory;
    private IConnectionConfigurationValues _settings;
    [CompilerGeneratedAttribute]
private static DiagnosticSource <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Audit> <AuditTrail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Refresh>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Retried>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestConfiguration <RequestConfiguration>k__BackingField;
    private static DiagnosticSource DiagnosticSource { get; }
    public List`1<Audit> AuditTrail { get; }
    public bool DepletedRetries { get; }
    public bool FirstPoolUsageNeedsSniffing { get; }
    public bool IsTakingTooLong { get; }
    public int MaxRetries { get; }
    public bool Refresh { get; private set; }
    public int Retried { get; private set; }
    public IEnumerable`1<Node> SniffNodes { get; }
    public static string SniffPath { get; }
    public bool SniffsOnConnectionFailure { get; }
    public bool SniffsOnStaleCluster { get; }
    public bool StaleClusterState { get; }
    public DateTime StartedOn { get; }
    private TimeSpan PingTimeout { get; }
    private IRequestConfiguration RequestConfiguration { get; }
    private bool RequestDisabledSniff { get; }
    private TimeSpan RequestTimeout { get; }
    private NodesInfoRequestParameters SniffParameters { get; }
    public RequestPipeline(IConnectionConfigurationValues configurationValues, IDateTimeProvider dateTimeProvider, IMemoryStreamFactory memoryStreamFactory, IRequestParameters requestParameters);
    private static RequestPipeline();
    [CompilerGeneratedAttribute]
private static DiagnosticSource get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Audit> get_AuditTrail();
    public bool get_DepletedRetries();
    public sealed virtual bool get_FirstPoolUsageNeedsSniffing();
    public sealed virtual bool get_IsTakingTooLong();
    public sealed virtual int get_MaxRetries();
    [CompilerGeneratedAttribute]
public bool get_Refresh();
    [CompilerGeneratedAttribute]
private void set_Refresh(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Retried();
    [CompilerGeneratedAttribute]
private void set_Retried(int value);
    public IEnumerable`1<Node> get_SniffNodes();
    public static string get_SniffPath();
    public sealed virtual bool get_SniffsOnConnectionFailure();
    public sealed virtual bool get_SniffsOnStaleCluster();
    public sealed virtual bool get_StaleClusterState();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartedOn();
    private TimeSpan get_PingTimeout();
    [CompilerGeneratedAttribute]
private IRequestConfiguration get_RequestConfiguration();
    private bool get_RequestDisabledSniff();
    private TimeSpan get_RequestTimeout();
    private NodesInfoRequestParameters get_SniffParameters();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void AuditCancellationRequested();
    public sealed virtual void BadResponse(TResponse& response, IApiCallDetails callDetails, RequestData data, OpenSearchClientException exception);
    public sealed virtual TResponse CallOpenSearch(RequestData requestData);
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<CallOpenSearchAsync>d__57`1")]
public sealed virtual Task`1<TResponse> CallOpenSearchAsync(RequestData requestData, CancellationToken cancellationToken);
    public sealed virtual OpenSearchClientException CreateClientException(TResponse response, IApiCallDetails callDetails, RequestData data, List`1<PipelineException> pipelineExceptions);
    public sealed virtual void FirstPoolUsage(SemaphoreSlim semaphore);
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<FirstPoolUsageAsync>d__60")]
public sealed virtual Task FirstPoolUsageAsync(SemaphoreSlim semaphore, CancellationToken cancellationToken);
    public sealed virtual void MarkAlive(Node node);
    public sealed virtual void MarkDead(Node node);
    [IteratorStateMachineAttribute("OpenSearch.Net.RequestPipeline/<NextNode>d__63")]
public sealed virtual IEnumerable`1<Node> NextNode();
    public sealed virtual void Ping(Node node);
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<PingAsync>d__65")]
public sealed virtual Task PingAsync(Node node, CancellationToken cancellationToken);
    public sealed virtual void Sniff();
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<SniffAsync>d__67")]
public sealed virtual Task SniffAsync(CancellationToken cancellationToken);
    public sealed virtual void SniffOnConnectionFailure();
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<SniffOnConnectionFailureAsync>d__69")]
public sealed virtual Task SniffOnConnectionFailureAsync(CancellationToken cancellationToken);
    public sealed virtual void SniffOnStaleCluster();
    [AsyncStateMachineAttribute("OpenSearch.Net.RequestPipeline/<SniffOnStaleClusterAsync>d__71")]
public sealed virtual Task SniffOnStaleClusterAsync(CancellationToken cancellationToken);
    public sealed virtual void ThrowNoNodesAttempted(RequestData requestData, List`1<PipelineException> seenExceptions);
    private bool PingDisabled(Node node);
    private Auditable Audit(AuditEvent type, Node node);
    private RequestData CreatePingRequestData(Node node);
    private static void ThrowBadAuthPipelineExceptionWhenNeeded(IApiCallDetails details, IOpenSearchResponse response);
    private void LazyAuditable(AuditEvent e, Node n);
    private RequestData CreateSniffRequestData(Node node);
    protected virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <NextNode>b__63_0(Node node);
}
public class OpenSearch.Net.RequestPipelineFactory : object {
    public sealed virtual IRequestPipeline Create(IConnectionConfigurationValues configurationValues, IDateTimeProvider dateTimeProvider, IMemoryStreamFactory memoryStreamFactory, IRequestParameters requestParameters);
}
public static class OpenSearch.Net.ResponseBuilder : object {
    public static int BufferSize;
    private static Type[] SpecialTypes;
    private static ResponseBuilder();
    public static TResponse ToResponse(RequestData requestData, Exception ex, Nullable`1<int> statusCode, IEnumerable`1<string> warnings, Stream responseStream, string mimeType);
    [AsyncStateMachineAttribute("OpenSearch.Net.ResponseBuilder/<ToResponseAsync>d__3`1")]
public static Task`1<TResponse> ToResponseAsync(RequestData requestData, Exception ex, Nullable`1<int> statusCode, IEnumerable`1<string> warnings, Stream responseStream, string mimeType, CancellationToken cancellationToken);
    private static ApiCallDetails Initialize(RequestData requestData, Exception exception, Nullable`1<int> statusCode, IEnumerable`1<string> warnings, string mimeType);
    private static TResponse SetBody(ApiCallDetails details, RequestData requestData, Stream responseStream, string mimeType);
    [AsyncStateMachineAttribute("OpenSearch.Net.ResponseBuilder/<SetBodyAsync>d__6`1")]
private static Task`1<TResponse> SetBodyAsync(ApiCallDetails details, RequestData requestData, Stream responseStream, string mimeType, CancellationToken cancellationToken);
    private static bool SetSpecialTypes(string mimeType, Byte[] bytes, IMemoryStreamFactory memoryStreamFactory, TResponse& cs);
    private static bool NeedsToEagerReadStream();
    private static Byte[] SwapStreams(Stream& responseStream, MemoryStream& ms);
}
public static class OpenSearch.Net.ResponseStatics : object {
    private static string RequestAlreadyCaptured;
    private static string ResponseAlreadyCaptured;
    private static ResponseStatics();
    public static string DebugInformationBuilder(IApiCallDetails r, StringBuilder sb);
    public static void DebugAuditTrailExceptions(List`1<Audit> auditTrail, StringBuilder sb);
    public static void DebugAuditTrail(List`1<Audit> auditTrail, StringBuilder sb);
    private static void AuditNodeUrl(StringBuilder sb, Audit audit);
}
public class OpenSearch.Net.RootNodeInfoRequestParameters : RequestParameters`1<RootNodeInfoRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
internal class OpenSearch.Net.RuntimeVersionInfo : VersionInfo {
    public static RuntimeVersionInfo Default;
    private static bool IsRunningInContainer { get; }
    private static RuntimeVersionInfo();
    private static string GetRuntimeVersion();
    private static string GetNetCoreVersion();
    private static bool TryGetVersionFromAssemblyPath(Assembly assembly, String& runtimeVersion);
    protected virtual bool ContainsPrerelease(string version);
    private static bool TryGetVersionFromProductInfo(string productVersion, string productName, String& version);
    private static bool TryGetVersionFromFrameworkName(string frameworkName, String& runtimeVersion);
    private static bool get_IsRunningInContainer();
}
public class OpenSearch.Net.ScrollRequestParameters : RequestParameters`1<ScrollRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> TotalHitsAsInteger { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_TotalHitsAsInteger();
    public void set_TotalHitsAsInteger(Nullable`1<bool> value);
}
public class OpenSearch.Net.SearchRequestParameters : RequestParameters`1<SearchRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> AllowPartialSearchResults { get; public set; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<long> BatchedReduceSize { get; public set; }
    public Nullable`1<bool> CcsMinimizeRoundtrips { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public String[] DocValueFields { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreThrottled { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public Nullable`1<long> MaxConcurrentShardRequests { get; public set; }
    public string MinCompatibleShardNode { get; public set; }
    public Nullable`1<long> PreFilterShardSize { get; public set; }
    public string Preference { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public Nullable`1<bool> RequestCache { get; public set; }
    public String[] Routing { get; public set; }
    public TimeSpan Scroll { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<bool> SequenceNumberPrimaryTerm { get; public set; }
    public String[] Stats { get; public set; }
    public String[] StoredFields { get; public set; }
    public string SuggestField { get; public set; }
    public Nullable`1<SuggestMode> SuggestMode { get; public set; }
    public Nullable`1<long> SuggestSize { get; public set; }
    public string SuggestText { get; public set; }
    public Nullable`1<bool> TotalHitsAsInteger { get; public set; }
    public string TrackTotalHits { get; public set; }
    public Nullable`1<bool> TypedKeys { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_AllowPartialSearchResults();
    public void set_AllowPartialSearchResults(Nullable`1<bool> value);
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<long> get_BatchedReduceSize();
    public void set_BatchedReduceSize(Nullable`1<long> value);
    public Nullable`1<bool> get_CcsMinimizeRoundtrips();
    public void set_CcsMinimizeRoundtrips(Nullable`1<bool> value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public String[] get_DocValueFields();
    public void set_DocValueFields(String[] value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreThrottled();
    public void set_IgnoreThrottled(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public Nullable`1<long> get_MaxConcurrentShardRequests();
    public void set_MaxConcurrentShardRequests(Nullable`1<long> value);
    public string get_MinCompatibleShardNode();
    public void set_MinCompatibleShardNode(string value);
    public Nullable`1<long> get_PreFilterShardSize();
    public void set_PreFilterShardSize(Nullable`1<long> value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public Nullable`1<bool> get_RequestCache();
    public void set_RequestCache(Nullable`1<bool> value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
    public TimeSpan get_Scroll();
    public void set_Scroll(TimeSpan value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<bool> get_SequenceNumberPrimaryTerm();
    public void set_SequenceNumberPrimaryTerm(Nullable`1<bool> value);
    public String[] get_Stats();
    public void set_Stats(String[] value);
    public String[] get_StoredFields();
    public void set_StoredFields(String[] value);
    public string get_SuggestField();
    public void set_SuggestField(string value);
    public Nullable`1<SuggestMode> get_SuggestMode();
    public void set_SuggestMode(Nullable`1<SuggestMode> value);
    public Nullable`1<long> get_SuggestSize();
    public void set_SuggestSize(Nullable`1<long> value);
    public string get_SuggestText();
    public void set_SuggestText(string value);
    public Nullable`1<bool> get_TotalHitsAsInteger();
    public void set_TotalHitsAsInteger(Nullable`1<bool> value);
    public string get_TrackTotalHits();
    public void set_TrackTotalHits(string value);
    public Nullable`1<bool> get_TypedKeys();
    public void set_TypedKeys(Nullable`1<bool> value);
}
public class OpenSearch.Net.SearchShardsRequestParameters : RequestParameters`1<SearchShardsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public string Preference { get; public set; }
    public string Routing { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_Routing();
    public void set_Routing(string value);
}
public class OpenSearch.Net.SearchTemplateRequestParameters : RequestParameters`1<SearchTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> CcsMinimizeRoundtrips { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> Explain { get; public set; }
    public Nullable`1<bool> IgnoreThrottled { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Profile { get; public set; }
    public String[] Routing { get; public set; }
    public TimeSpan Scroll { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<bool> TotalHitsAsInteger { get; public set; }
    public Nullable`1<bool> TypedKeys { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_CcsMinimizeRoundtrips();
    public void set_CcsMinimizeRoundtrips(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_Explain();
    public void set_Explain(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreThrottled();
    public void set_IgnoreThrottled(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Profile();
    public void set_Profile(Nullable`1<bool> value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
    public TimeSpan get_Scroll();
    public void set_Scroll(TimeSpan value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<bool> get_TotalHitsAsInteger();
    public void set_TotalHitsAsInteger(Nullable`1<bool> value);
    public Nullable`1<bool> get_TypedKeys();
    public void set_TypedKeys(Nullable`1<bool> value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.SearchType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SearchType QueryThenFetch;
    [EnumMemberAttribute]
public static SearchType DfsQueryThenFetch;
}
[ExtensionAttribute]
public static class OpenSearch.Net.SecureStrings : object {
    [ExtensionAttribute]
public static string CreateString(SecureString secureString);
    [ExtensionAttribute]
public static SecureString CreateSecureString(string plainString);
}
public class OpenSearch.Net.SerializableData`1 : PostData {
    private T _serializable;
    public SerializableData`1(T item);
    public static SerializableData`1<T> op_Implicit(T serializableData);
    public virtual void Write(Stream writableStream, IConnectionConfigurationValues settings);
    [AsyncStateMachineAttribute("OpenSearch.Net.SerializableData`1/<WriteAsync>d__4")]
public virtual Task WriteAsync(Stream writableStream, IConnectionConfigurationValues settings, CancellationToken cancellationToken);
}
public enum OpenSearch.Net.SerializationFormatting : Enum {
    public int value__;
    public static SerializationFormatting None;
    public static SerializationFormatting Indented;
}
public class OpenSearch.Net.SerializerRegistrationInformation : object {
    private string _stringRepresentation;
    [CompilerGeneratedAttribute]
private Type <TypeInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Purpose>k__BackingField;
    public Type TypeInformation { get; }
    public string Purpose { get; }
    public SerializerRegistrationInformation(Type type, string purpose);
    [CompilerGeneratedAttribute]
public Type get_TypeInformation();
    [CompilerGeneratedAttribute]
public string get_Purpose();
    public virtual string ToString();
}
[DataContractAttribute]
public class OpenSearch.Net.ServerError : object {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [DataMemberAttribute]
public Error Error { get; internal set; }
    [DataMemberAttribute]
public int Status { get; internal set; }
    public ServerError(Error error, Nullable`1<int> statusCode);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(Error value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(int value);
    public static bool TryCreate(Stream stream, ServerError& serverError);
    public static ServerError Create(Stream stream);
    public static Task`1<ServerError> CreateAsync(Stream stream, CancellationToken token);
    public virtual string ToString();
}
[DataContractAttribute]
public class OpenSearch.Net.ShardFailure : object {
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorCause <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Shard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [DataMemberAttribute]
public string Index { get; public set; }
    [DataMemberAttribute]
public string Node { get; public set; }
    [DataMemberAttribute]
public ErrorCause Reason { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Shard { get; public set; }
    [DataMemberAttribute]
public string Status { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public ErrorCause get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(ErrorCause value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Shard();
    [CompilerGeneratedAttribute]
public void set_Shard(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
}
public class OpenSearch.Net.SingleNodeConnectionPool : object {
    [CompilerGeneratedAttribute]
private DateTime <LastUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Node> <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingSsl>k__BackingField;
    public DateTime LastUpdate { get; }
    public int MaxRetries { get; }
    public IReadOnlyCollection`1<Node> Nodes { get; }
    public bool SniffedOnStartup { get; public set; }
    public bool SupportsPinging { get; }
    public bool SupportsReseeding { get; }
    public bool UsingSsl { get; }
    public SingleNodeConnectionPool(Uri uri, IDateTimeProvider dateTimeProvider);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastUpdate();
    public sealed virtual int get_MaxRetries();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Node> get_Nodes();
    public sealed virtual bool get_SniffedOnStartup();
    public sealed virtual void set_SniffedOnStartup(bool value);
    public sealed virtual bool get_SupportsPinging();
    public sealed virtual bool get_SupportsReseeding();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UsingSsl();
    public sealed virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    public sealed virtual void Reseed(IEnumerable`1<Node> nodes);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void DisposeManagedResources();
}
[StringEnumAttribute]
public enum OpenSearch.Net.Size : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Size Raw;
    [EnumMemberAttribute]
public static Size K;
    [EnumMemberAttribute]
public static Size M;
    [EnumMemberAttribute]
public static Size G;
    [EnumMemberAttribute]
public static Size T;
    [EnumMemberAttribute]
public static Size P;
}
public class OpenSearch.Net.SniffingConnectionPool : StaticConnectionPool {
    private ReaderWriterLockSlim _readerWriter;
    public IReadOnlyCollection`1<Node> Nodes { get; }
    public bool SupportsPinging { get; }
    public bool SupportsReseeding { get; }
    public SniffingConnectionPool(IEnumerable`1<Uri> uris, bool randomize, IDateTimeProvider dateTimeProvider);
    public SniffingConnectionPool(IEnumerable`1<Node> nodes, bool randomize, IDateTimeProvider dateTimeProvider);
    public SniffingConnectionPool(IEnumerable`1<Node> nodes, Func`2<Node, float> nodeScorer, IDateTimeProvider dateTimeProvider);
    public virtual IReadOnlyCollection`1<Node> get_Nodes();
    public virtual bool get_SupportsPinging();
    public virtual bool get_SupportsReseeding();
    public virtual void Reseed(IEnumerable`1<Node> nodes);
    public virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    protected virtual void DisposeManagedResources();
}
public static class OpenSearch.Net.SniffParser : object {
    [CompilerGeneratedAttribute]
private static Regex <AddressRegex>k__BackingField;
    public static Regex AddressRegex { get; }
    private static SniffParser();
    [CompilerGeneratedAttribute]
public static Regex get_AddressRegex();
    public static Uri ParseToUri(string boundAddress, bool forceHttp);
}
internal class OpenSearch.Net.SniffResponse : OpenSearchResponseBase {
    [CompilerGeneratedAttribute]
private string <cluster_name>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NodeInfo> <nodes>k__BackingField;
    public string cluster_name { get; public set; }
    public Dictionary`2<string, NodeInfo> nodes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_cluster_name();
    [CompilerGeneratedAttribute]
public void set_cluster_name(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, NodeInfo> get_nodes();
    [CompilerGeneratedAttribute]
public void set_nodes(Dictionary`2<string, NodeInfo> value);
    [IteratorStateMachineAttribute("OpenSearch.Net.SniffResponse/<ToNodes>d__8")]
public IEnumerable`1<Node> ToNodes(bool forceHttp);
}
public class OpenSearch.Net.SourceExistsRequestParameters : RequestParameters`1<SourceExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
public class OpenSearch.Net.SourceRequestParameters : RequestParameters`1<SourceRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
public class OpenSearch.Net.Specification.CatApi.CatAliasesRequestParameters : RequestParameters`1<CatAliasesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatAllocationRequestParameters : RequestParameters`1<CatAllocationRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatAllPitSegmentsRequestParameters : RequestParameters`1<CatAllPitSegmentsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatClusterManagerRequestParameters : RequestParameters`1<CatClusterManagerRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatCountRequestParameters : RequestParameters`1<CatCountRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatFielddataRequestParameters : RequestParameters`1<CatFielddataRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public String[] Fields { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatHealthRequestParameters : RequestParameters`1<CatHealthRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> IncludeTimestamp { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTimestamp();
    public void set_IncludeTimestamp(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatHelpRequestParameters : RequestParameters`1<CatHelpRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
}
public class OpenSearch.Net.Specification.CatApi.CatIndicesRequestParameters : RequestParameters`1<CatIndicesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<Health> Health { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> IncludeUnloadedSegments { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<bool> Pri { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<Health> get_Health();
    public void set_Health(Nullable`1<Health> value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeUnloadedSegments();
    public void set_IncludeUnloadedSegments(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<bool> get_Pri();
    public void set_Pri(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatMasterRequestParameters : RequestParameters`1<CatMasterRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatNodeAttributesRequestParameters : RequestParameters`1<CatNodeAttributesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatNodesRequestParameters : RequestParameters`1<CatNodesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public Nullable`1<bool> FullId { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public Nullable`1<bool> get_FullId();
    public void set_FullId(Nullable`1<bool> value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatPendingTasksRequestParameters : RequestParameters`1<CatPendingTasksRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatPitSegmentsRequestParameters : RequestParameters`1<CatPitSegmentsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatPluginsRequestParameters : RequestParameters`1<CatPluginsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> IncludeBootstrap { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeBootstrap();
    public void set_IncludeBootstrap(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatRecoveryRequestParameters : RequestParameters`1<CatRecoveryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> ActiveOnly { get; public set; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public Nullable`1<bool> Detailed { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] IndexQueryString { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_ActiveOnly();
    public void set_ActiveOnly(Nullable`1<bool> value);
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public Nullable`1<bool> get_Detailed();
    public void set_Detailed(Nullable`1<bool> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_IndexQueryString();
    public void set_IndexQueryString(String[] value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatRepositoriesRequestParameters : RequestParameters`1<CatRepositoriesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatSegmentReplicationRequestParameters : RequestParameters`1<CatSegmentReplicationRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> ActiveOnly { get; public set; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public Nullable`1<bool> CompletedOnly { get; public set; }
    public Nullable`1<bool> Detailed { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> IgnoreThrottled { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public String[] Index { get; public set; }
    public String[] Shards { get; public set; }
    public String[] SortByColumns { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_ActiveOnly();
    public void set_ActiveOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public Nullable`1<bool> get_CompletedOnly();
    public void set_CompletedOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_Detailed();
    public void set_Detailed(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreThrottled();
    public void set_IgnoreThrottled(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public String[] get_Index();
    public void set_Index(String[] value);
    public String[] get_Shards();
    public void set_Shards(String[] value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatSegmentsRequestParameters : RequestParameters`1<CatSegmentsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatShardsRequestParameters : RequestParameters`1<CatShardsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<Bytes> Bytes { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<Bytes> get_Bytes();
    public void set_Bytes(Nullable`1<Bytes> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatSnapshotsRequestParameters : RequestParameters`1<CatSnapshotsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatTasksRequestParameters : RequestParameters`1<CatTasksRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public String[] Actions { get; public set; }
    public Nullable`1<bool> Detailed { get; public set; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public String[] Nodes { get; public set; }
    public string ParentTaskId { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public String[] get_Actions();
    public void set_Actions(String[] value);
    public Nullable`1<bool> get_Detailed();
    public void set_Detailed(Nullable`1<bool> value);
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public String[] get_Nodes();
    public void set_Nodes(String[] value);
    public string get_ParentTaskId();
    public void set_ParentTaskId(string value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatTemplatesRequestParameters : RequestParameters`1<CatTemplatesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.CatThreadPoolRequestParameters : RequestParameters`1<CatThreadPoolRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Format { get; public set; }
    public String[] Headers { get; public set; }
    public Nullable`1<bool> Help { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] SortByColumns { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Format();
    public void set_Format(string value);
    public String[] get_Headers();
    public void set_Headers(String[] value);
    public Nullable`1<bool> get_Help();
    public void set_Help(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_SortByColumns();
    public void set_SortByColumns(String[] value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.CatApi.LowLevelCatNamespace : NamespacedClientProxy {
    protected string ContentType { get; }
    internal LowLevelCatNamespace(OpenSearchLowLevelClient client);
    public TResponse Aliases(CatAliasesRequestParameters requestParameters);
    [MapsApiAttribute("cat.aliases", "")]
public Task`1<TResponse> AliasesAsync(CatAliasesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Aliases(string name, CatAliasesRequestParameters requestParameters);
    [MapsApiAttribute("cat.aliases", "name")]
public Task`1<TResponse> AliasesAsync(string name, CatAliasesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Allocation(CatAllocationRequestParameters requestParameters);
    [MapsApiAttribute("cat.allocation", "")]
public Task`1<TResponse> AllocationAsync(CatAllocationRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Allocation(string nodeId, CatAllocationRequestParameters requestParameters);
    [MapsApiAttribute("cat.allocation", "node_id")]
public Task`1<TResponse> AllocationAsync(string nodeId, CatAllocationRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Count(CatCountRequestParameters requestParameters);
    [MapsApiAttribute("cat.count", "")]
public Task`1<TResponse> CountAsync(CatCountRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Count(string index, CatCountRequestParameters requestParameters);
    [MapsApiAttribute("cat.count", "index")]
public Task`1<TResponse> CountAsync(string index, CatCountRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Fielddata(CatFielddataRequestParameters requestParameters);
    [MapsApiAttribute("cat.fielddata", "")]
public Task`1<TResponse> FielddataAsync(CatFielddataRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Fielddata(string fields, CatFielddataRequestParameters requestParameters);
    [MapsApiAttribute("cat.fielddata", "fields")]
public Task`1<TResponse> FielddataAsync(string fields, CatFielddataRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Health(CatHealthRequestParameters requestParameters);
    [MapsApiAttribute("cat.health", "")]
public Task`1<TResponse> HealthAsync(CatHealthRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Help(CatHelpRequestParameters requestParameters);
    [MapsApiAttribute("cat.help", "")]
public Task`1<TResponse> HelpAsync(CatHelpRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Indices(CatIndicesRequestParameters requestParameters);
    [MapsApiAttribute("cat.indices", "")]
public Task`1<TResponse> IndicesAsync(CatIndicesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Indices(string index, CatIndicesRequestParameters requestParameters);
    [MapsApiAttribute("cat.indices", "index")]
public Task`1<TResponse> IndicesAsync(string index, CatIndicesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Master(CatMasterRequestParameters requestParameters);
    [MapsApiAttribute("cat.master", "")]
public Task`1<TResponse> MasterAsync(CatMasterRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ClusterManager(CatClusterManagerRequestParameters requestParameters);
    [MapsApiAttribute("cat.cluster_manager", "")]
public Task`1<TResponse> ClusterManagerAsync(CatClusterManagerRequestParameters requestParameters, CancellationToken ctx);
    public TResponse NodeAttributes(CatNodeAttributesRequestParameters requestParameters);
    [MapsApiAttribute("cat.nodeattrs", "")]
public Task`1<TResponse> NodeAttributesAsync(CatNodeAttributesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Nodes(CatNodesRequestParameters requestParameters);
    [MapsApiAttribute("cat.nodes", "")]
public Task`1<TResponse> NodesAsync(CatNodesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PendingTasks(CatPendingTasksRequestParameters requestParameters);
    [MapsApiAttribute("cat.pending_tasks", "")]
public Task`1<TResponse> PendingTasksAsync(CatPendingTasksRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Plugins(CatPluginsRequestParameters requestParameters);
    [MapsApiAttribute("cat.plugins", "")]
public Task`1<TResponse> PluginsAsync(CatPluginsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Recovery(CatRecoveryRequestParameters requestParameters);
    [MapsApiAttribute("cat.recovery", "")]
public Task`1<TResponse> RecoveryAsync(CatRecoveryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Recovery(string index, CatRecoveryRequestParameters requestParameters);
    [MapsApiAttribute("cat.recovery", "index")]
public Task`1<TResponse> RecoveryAsync(string index, CatRecoveryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Repositories(CatRepositoriesRequestParameters requestParameters);
    [MapsApiAttribute("cat.repositories", "")]
public Task`1<TResponse> RepositoriesAsync(CatRepositoriesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Segments(CatSegmentsRequestParameters requestParameters);
    [MapsApiAttribute("cat.segments", "")]
public Task`1<TResponse> SegmentsAsync(CatSegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Segments(string index, CatSegmentsRequestParameters requestParameters);
    [MapsApiAttribute("cat.segments", "index")]
public Task`1<TResponse> SegmentsAsync(string index, CatSegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Shards(CatShardsRequestParameters requestParameters);
    [MapsApiAttribute("cat.shards", "")]
public Task`1<TResponse> ShardsAsync(CatShardsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Shards(string index, CatShardsRequestParameters requestParameters);
    [MapsApiAttribute("cat.shards", "index")]
public Task`1<TResponse> ShardsAsync(string index, CatShardsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Snapshots(CatSnapshotsRequestParameters requestParameters);
    [MapsApiAttribute("cat.snapshots", "")]
public Task`1<TResponse> SnapshotsAsync(CatSnapshotsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Snapshots(string repository, CatSnapshotsRequestParameters requestParameters);
    [MapsApiAttribute("cat.snapshots", "repository")]
public Task`1<TResponse> SnapshotsAsync(string repository, CatSnapshotsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Tasks(CatTasksRequestParameters requestParameters);
    [MapsApiAttribute("cat.tasks", "")]
public Task`1<TResponse> TasksAsync(CatTasksRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Templates(CatTemplatesRequestParameters requestParameters);
    [MapsApiAttribute("cat.templates", "")]
public Task`1<TResponse> TemplatesAsync(CatTemplatesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Templates(string name, CatTemplatesRequestParameters requestParameters);
    [MapsApiAttribute("cat.templates", "name")]
public Task`1<TResponse> TemplatesAsync(string name, CatTemplatesRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ThreadPool(CatThreadPoolRequestParameters requestParameters);
    [MapsApiAttribute("cat.thread_pool", "")]
public Task`1<TResponse> ThreadPoolAsync(CatThreadPoolRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ThreadPool(string threadPoolPatterns, CatThreadPoolRequestParameters requestParameters);
    [MapsApiAttribute("cat.thread_pool", "thread_pool_patterns")]
public Task`1<TResponse> ThreadPoolAsync(string threadPoolPatterns, CatThreadPoolRequestParameters requestParameters, CancellationToken ctx);
    protected virtual string get_ContentType();
    public TResponse AllPitSegments(CatAllPitSegmentsRequestParameters requestParameters);
    [MapsApiAttribute("cat.all_pit_segments", "")]
public Task`1<TResponse> AllPitSegmentsAsync(CatAllPitSegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PitSegments(PostData body, CatPitSegmentsRequestParameters requestParameters);
    [MapsApiAttribute("cat.pit_segments", "body")]
public Task`1<TResponse> PitSegmentsAsync(PostData body, CatPitSegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SegmentReplication(CatSegmentReplicationRequestParameters requestParameters);
    [MapsApiAttribute("cat.segment_replication", "")]
public Task`1<TResponse> SegmentReplicationAsync(CatSegmentReplicationRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SegmentReplication(string index, CatSegmentReplicationRequestParameters requestParameters);
    [MapsApiAttribute("cat.segment_replication", "index")]
public Task`1<TResponse> SegmentReplicationAsync(string index, CatSegmentReplicationRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterAllocationExplainRequestParameters : RequestParameters`1<ClusterAllocationExplainRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> IncludeDiskInfo { get; public set; }
    public Nullable`1<bool> IncludeYesDecisions { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_IncludeDiskInfo();
    public void set_IncludeDiskInfo(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeYesDecisions();
    public void set_IncludeYesDecisions(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterGetSettingsRequestParameters : RequestParameters`1<ClusterGetSettingsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IncludeDefaults { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeDefaults();
    public void set_IncludeDefaults(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterHealthRequestParameters : RequestParameters`1<ClusterHealthRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<Level> Level { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public Nullable`1<WaitForEvents> WaitForEvents { get; public set; }
    public Nullable`1<bool> WaitForNoInitializingShards { get; public set; }
    public Nullable`1<bool> WaitForNoRelocatingShards { get; public set; }
    public string WaitForNodes { get; public set; }
    public Nullable`1<WaitForStatus> WaitForStatus { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<Level> get_Level();
    public void set_Level(Nullable`1<Level> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
    public Nullable`1<WaitForEvents> get_WaitForEvents();
    public void set_WaitForEvents(Nullable`1<WaitForEvents> value);
    public Nullable`1<bool> get_WaitForNoInitializingShards();
    public void set_WaitForNoInitializingShards(Nullable`1<bool> value);
    public Nullable`1<bool> get_WaitForNoRelocatingShards();
    public void set_WaitForNoRelocatingShards(Nullable`1<bool> value);
    public string get_WaitForNodes();
    public void set_WaitForNodes(string value);
    public Nullable`1<WaitForStatus> get_WaitForStatus();
    public void set_WaitForStatus(Nullable`1<WaitForStatus> value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterPendingTasksRequestParameters : RequestParameters`1<ClusterPendingTasksRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterPutSettingsRequestParameters : RequestParameters`1<ClusterPutSettingsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterRerouteRequestParameters : RequestParameters`1<ClusterRerouteRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> DryRun { get; public set; }
    public Nullable`1<bool> Explain { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public String[] Metric { get; public set; }
    public Nullable`1<bool> RetryFailed { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    public Nullable`1<bool> get_Explain();
    public void set_Explain(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public String[] get_Metric();
    public void set_Metric(String[] value);
    public Nullable`1<bool> get_RetryFailed();
    public void set_RetryFailed(Nullable`1<bool> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterStateRequestParameters : RequestParameters`1<ClusterStateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<long> WaitForMetadataVersion { get; public set; }
    public TimeSpan WaitForTimeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<long> get_WaitForMetadataVersion();
    public void set_WaitForMetadataVersion(Nullable`1<long> value);
    public TimeSpan get_WaitForTimeout();
    public void set_WaitForTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ClusterStatsRequestParameters : RequestParameters`1<ClusterStatsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.ComponentTemplateExistsRequestParameters : RequestParameters`1<ComponentTemplateExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.DeleteComponentTemplateRequestParameters : RequestParameters`1<DeleteComponentTemplateRequestParameters> {
    [ObsoleteAttribute("Replaced by MasterTimeout")]
public TimeSpan MasterTimeSpanout { get; public set; }
    [ObsoleteAttribute("Replaced by ClusterManagerTimeout")]
public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.DeleteVotingConfigExclusionsRequestParameters : RequestParameters`1<DeleteVotingConfigExclusionsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> WaitForRemoval { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_WaitForRemoval();
    public void set_WaitForRemoval(Nullable`1<bool> value);
}
[ObsoleteAttribute("Replaced by ComponentTemplateExistsRequestParameters")]
public class OpenSearch.Net.Specification.ClusterApi.ExistsComponentTemplateRequestParameters : RequestParameters`1<ExistsComponentTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.GetComponentTemplateRequestParameters : RequestParameters`1<GetComponentTemplateRequestParameters> {
    [ObsoleteAttribute("Replaced by MasterTimeout")]
public TimeSpan MasterTimeSpanout { get; public set; }
    [ObsoleteAttribute("Replaced by ClusterManagerTimeout")]
public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.LowLevelClusterNamespace : NamespacedClientProxy {
    internal LowLevelClusterNamespace(OpenSearchLowLevelClient client);
    public TResponse AllocationExplain(PostData body, ClusterAllocationExplainRequestParameters requestParameters);
    [MapsApiAttribute("cluster.allocation_explain", "body")]
public Task`1<TResponse> AllocationExplainAsync(PostData body, ClusterAllocationExplainRequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteVotingConfigExclusions(DeleteVotingConfigExclusionsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.delete_voting_config_exclusions", "")]
public Task`1<TResponse> DeleteVotingConfigExclusionsAsync(DeleteVotingConfigExclusionsRequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by ComponentTemplateExists")]
public TResponse ExistsComponentTemplate(string name, ExistsComponentTemplateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.exists_component_template", "name")]
[ObsoleteAttribute("Replaced by ComponentTemplateExistsAsync")]
public Task`1<TResponse> ExistsComponentTemplateAsync(string name, ExistsComponentTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetSettings(ClusterGetSettingsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.get_settings", "")]
public Task`1<TResponse> GetSettingsAsync(ClusterGetSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Health(ClusterHealthRequestParameters requestParameters);
    [MapsApiAttribute("cluster.health", "")]
public Task`1<TResponse> HealthAsync(ClusterHealthRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Health(string index, ClusterHealthRequestParameters requestParameters);
    [MapsApiAttribute("cluster.health", "index")]
public Task`1<TResponse> HealthAsync(string index, ClusterHealthRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PendingTasks(ClusterPendingTasksRequestParameters requestParameters);
    [MapsApiAttribute("cluster.pending_tasks", "")]
public Task`1<TResponse> PendingTasksAsync(ClusterPendingTasksRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PostVotingConfigExclusions(PostVotingConfigExclusionsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.post_voting_config_exclusions", "")]
public Task`1<TResponse> PostVotingConfigExclusionsAsync(PostVotingConfigExclusionsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutSettings(PostData body, ClusterPutSettingsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.put_settings", "body")]
public Task`1<TResponse> PutSettingsAsync(PostData body, ClusterPutSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RemoteInfo(RemoteInfoRequestParameters requestParameters);
    [MapsApiAttribute("cluster.remote_info", "")]
public Task`1<TResponse> RemoteInfoAsync(RemoteInfoRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Reroute(PostData body, ClusterRerouteRequestParameters requestParameters);
    [MapsApiAttribute("cluster.reroute", "body")]
public Task`1<TResponse> RerouteAsync(PostData body, ClusterRerouteRequestParameters requestParameters, CancellationToken ctx);
    public TResponse State(ClusterStateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.state", "")]
public Task`1<TResponse> StateAsync(ClusterStateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse State(string metric, ClusterStateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.state", "metric")]
public Task`1<TResponse> StateAsync(string metric, ClusterStateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse State(string metric, string index, ClusterStateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.state", "metric, index")]
public Task`1<TResponse> StateAsync(string metric, string index, ClusterStateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(ClusterStatsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.stats", "")]
public Task`1<TResponse> StatsAsync(ClusterStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string nodeId, ClusterStatsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.stats", "node_id")]
public Task`1<TResponse> StatsAsync(string nodeId, ClusterStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteComponentTemplate(string name, DeleteComponentTemplateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.delete_component_template", "name")]
public Task`1<TResponse> DeleteComponentTemplateAsync(string name, DeleteComponentTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ComponentTemplateExists(string name, ComponentTemplateExistsRequestParameters requestParameters);
    [MapsApiAttribute("cluster.exists_component_template", "name")]
public Task`1<TResponse> ComponentTemplateExistsAsync(string name, ComponentTemplateExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetComponentTemplate(GetComponentTemplateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.get_component_template", "")]
public Task`1<TResponse> GetComponentTemplateAsync(GetComponentTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetComponentTemplate(string name, GetComponentTemplateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.get_component_template", "name")]
public Task`1<TResponse> GetComponentTemplateAsync(string name, GetComponentTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutComponentTemplate(string name, PostData body, PutComponentTemplateRequestParameters requestParameters);
    [MapsApiAttribute("cluster.put_component_template", "name, body")]
public Task`1<TResponse> PutComponentTemplateAsync(string name, PostData body, PutComponentTemplateRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.ClusterApi.PostVotingConfigExclusionsRequestParameters : RequestParameters`1<PostVotingConfigExclusionsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string NodeIds { get; public set; }
    public string NodeNames { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_NodeIds();
    public void set_NodeIds(string value);
    public string get_NodeNames();
    public void set_NodeNames(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.PutComponentTemplateRequestParameters : RequestParameters`1<PutComponentTemplateRequestParameters> {
    [ObsoleteAttribute("Replaced by MasterTimeout")]
public TimeSpan MasterTimeSpanout { get; public set; }
    [ObsoleteAttribute("Replaced by ClusterManagerTimeout")]
public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> Create { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.ClusterApi.RemoteInfoRequestParameters : RequestParameters`1<RemoteInfoRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.Specification.DanglingIndicesApi.DeleteDanglingIndexRequestParameters : RequestParameters`1<DeleteDanglingIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AcceptDataLoss { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AcceptDataLoss();
    public void set_AcceptDataLoss(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.DanglingIndicesApi.ImportDanglingIndexRequestParameters : RequestParameters`1<ImportDanglingIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AcceptDataLoss { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AcceptDataLoss();
    public void set_AcceptDataLoss(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.DanglingIndicesApi.ListDanglingIndicesRequestParameters : RequestParameters`1<ListDanglingIndicesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.Specification.DanglingIndicesApi.LowLevelDanglingIndicesNamespace : NamespacedClientProxy {
    internal LowLevelDanglingIndicesNamespace(OpenSearchLowLevelClient client);
    public TResponse DeleteDanglingIndex(string indexUuid, DeleteDanglingIndexRequestParameters requestParameters);
    [MapsApiAttribute("dangling_indices.delete_dangling_index", "index_uuid")]
public Task`1<TResponse> DeleteDanglingIndexAsync(string indexUuid, DeleteDanglingIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ImportDanglingIndex(string indexUuid, ImportDanglingIndexRequestParameters requestParameters);
    [MapsApiAttribute("dangling_indices.import_dangling_index", "index_uuid")]
public Task`1<TResponse> ImportDanglingIndexAsync(string indexUuid, ImportDanglingIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse List(ListDanglingIndicesRequestParameters requestParameters);
    [MapsApiAttribute("dangling_indices.list_dangling_indices", "")]
public Task`1<TResponse> ListAsync(ListDanglingIndicesRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.FeaturesApi.GetFeaturesRequestParameters : RequestParameters`1<GetFeaturesRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.FeaturesApi.LowLevelFeaturesNamespace : NamespacedClientProxy {
    internal LowLevelFeaturesNamespace(OpenSearchLowLevelClient client);
    public TResponse Get(GetFeaturesRequestParameters requestParameters);
    [MapsApiAttribute("features.get_features", "")]
public Task`1<TResponse> GetAsync(GetFeaturesRequestParameters requestParameters, CancellationToken ctx);
}
public abstract class OpenSearch.Net.Specification.HttpApi.ArbitraryHttpRequestParameters`1 : RequestParameters`1<TSelf> {
    [CompilerGeneratedAttribute]
private HttpMethod <DefaultHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsBody>k__BackingField;
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    protected ArbitraryHttpRequestParameters`1(HttpMethod method, bool supportsBody);
    [CompilerGeneratedAttribute]
public virtual HttpMethod get_DefaultHttpMethod();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.Specification.HttpApi.HttpDeleteRequestParameters : ArbitraryHttpRequestParameters`1<HttpDeleteRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.HttpGetRequestParameters : ArbitraryHttpRequestParameters`1<HttpGetRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.HttpHeadRequestParameters : ArbitraryHttpRequestParameters`1<HttpHeadRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.HttpPatchRequestParameters : ArbitraryHttpRequestParameters`1<HttpPatchRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.HttpPostRequestParameters : ArbitraryHttpRequestParameters`1<HttpPostRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.HttpPutRequestParameters : ArbitraryHttpRequestParameters`1<HttpPutRequestParameters> {
}
public class OpenSearch.Net.Specification.HttpApi.LowLevelHttpNamespace : NamespacedClientProxy {
    internal LowLevelHttpNamespace(OpenSearchLowLevelClient client);
    public TResponse Delete(FormattableString path, HttpDeleteRequestParameters parameters);
    public Task`1<TResponse> DeleteAsync(FormattableString path, HttpDeleteRequestParameters parameters, CancellationToken ctx);
    public TResponse Delete(string path, HttpDeleteRequestParameters parameters);
    public Task`1<TResponse> DeleteAsync(string path, HttpDeleteRequestParameters parameters, CancellationToken ctx);
    public TResponse Get(FormattableString path, HttpGetRequestParameters parameters);
    public Task`1<TResponse> GetAsync(FormattableString path, HttpGetRequestParameters parameters, CancellationToken ctx);
    public TResponse Get(string path, HttpGetRequestParameters parameters);
    public Task`1<TResponse> GetAsync(string path, HttpGetRequestParameters parameters, CancellationToken ctx);
    public TResponse Head(FormattableString path, HttpHeadRequestParameters parameters);
    public Task`1<TResponse> HeadAsync(FormattableString path, HttpHeadRequestParameters parameters, CancellationToken ctx);
    public TResponse Head(string path, HttpHeadRequestParameters parameters);
    public Task`1<TResponse> HeadAsync(string path, HttpHeadRequestParameters parameters, CancellationToken ctx);
    public TResponse Patch(FormattableString path, PostData body, HttpPatchRequestParameters parameters);
    public Task`1<TResponse> PatchAsync(FormattableString path, PostData body, HttpPatchRequestParameters parameters, CancellationToken ctx);
    public TResponse Patch(string path, PostData body, HttpPatchRequestParameters parameters);
    public Task`1<TResponse> PatchAsync(string path, PostData body, HttpPatchRequestParameters parameters, CancellationToken ctx);
    public TResponse Post(FormattableString path, PostData body, HttpPostRequestParameters parameters);
    public Task`1<TResponse> PostAsync(FormattableString path, PostData body, HttpPostRequestParameters parameters, CancellationToken ctx);
    public TResponse Post(string path, PostData body, HttpPostRequestParameters parameters);
    public Task`1<TResponse> PostAsync(string path, PostData body, HttpPostRequestParameters parameters, CancellationToken ctx);
    public TResponse Put(FormattableString path, PostData body, HttpPutRequestParameters parameters);
    public Task`1<TResponse> PutAsync(FormattableString path, PostData body, HttpPutRequestParameters parameters, CancellationToken ctx);
    public TResponse Put(string path, PostData body, HttpPutRequestParameters parameters);
    public Task`1<TResponse> PutAsync(string path, PostData body, HttpPutRequestParameters parameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.IndicesApi.AddIndexBlockRequestParameters : RequestParameters`1<AddIndexBlockRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.AliasExistsRequestParameters : RequestParameters`1<AliasExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.AnalyzeRequestParameters : RequestParameters`1<AnalyzeRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string IndexQueryString { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_IndexQueryString();
    public void set_IndexQueryString(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.BulkAliasRequestParameters : RequestParameters`1<BulkAliasRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.ClearCacheRequestParameters : RequestParameters`1<ClearCacheRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> Fielddata { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public String[] IndexQueryString { get; public set; }
    public Nullable`1<bool> Query { get; public set; }
    public Nullable`1<bool> Request { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_Fielddata();
    public void set_Fielddata(Nullable`1<bool> value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public String[] get_IndexQueryString();
    public void set_IndexQueryString(String[] value);
    public Nullable`1<bool> get_Query();
    public void set_Query(Nullable`1<bool> value);
    public Nullable`1<bool> get_Request();
    public void set_Request(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.CloneIndexRequestParameters : RequestParameters`1<CloneIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.CloseIndexRequestParameters : RequestParameters`1<CloseIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.ComposableIndexTemplateExistsRequestParameters : RequestParameters`1<ComposableIndexTemplateExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.CreateIndexRequestParameters : RequestParameters`1<CreateIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.DeleteAliasRequestParameters : RequestParameters`1<DeleteAliasRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.DeleteComposableIndexTemplateRequestParameters : RequestParameters`1<DeleteComposableIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.DeleteIndexRequestParameters : RequestParameters`1<DeleteIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.DeleteIndexTemplateRequestParameters : RequestParameters`1<DeleteIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
[ObsoleteAttribute("Replaced by DeleteComposableIndexTemplateRequestParameters")]
public class OpenSearch.Net.Specification.IndicesApi.DeleteIndexTemplateV2RequestParameters : RequestParameters`1<DeleteIndexTemplateV2RequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
[ObsoleteAttribute("Replaced by ComposableIndexTemplateExistsRequestParameters")]
public class OpenSearch.Net.Specification.IndicesApi.ExistsIndexTemplateRequestParameters : RequestParameters`1<ExistsIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.FlushRequestParameters : RequestParameters`1<FlushRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> WaitIfOngoing { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_WaitIfOngoing();
    public void set_WaitIfOngoing(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.ForceMergeRequestParameters : RequestParameters`1<ForceMergeRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> Flush { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<long> MaxNumSegments { get; public set; }
    public Nullable`1<bool> OnlyExpungeDeletes { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_Flush();
    public void set_Flush(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<long> get_MaxNumSegments();
    public void set_MaxNumSegments(Nullable`1<long> value);
    public Nullable`1<bool> get_OnlyExpungeDeletes();
    public void set_OnlyExpungeDeletes(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetAliasRequestParameters : RequestParameters`1<GetAliasRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetComposableIndexTemplateRequestParameters : RequestParameters`1<GetComposableIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetFieldMappingRequestParameters : RequestParameters`1<GetFieldMappingRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeDefaults { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeDefaults();
    public void set_IncludeDefaults(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetIndexRequestParameters : RequestParameters`1<GetIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeDefaults { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeDefaults();
    public void set_IncludeDefaults(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetIndexSettingsRequestParameters : RequestParameters`1<GetIndexSettingsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeDefaults { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeDefaults();
    public void set_IncludeDefaults(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetIndexTemplateRequestParameters : RequestParameters`1<GetIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
[ObsoleteAttribute("Replaced by GetComposableIndexTemplateRequestParameters")]
public class OpenSearch.Net.Specification.IndicesApi.GetIndexTemplateV2RequestParameters : RequestParameters`1<GetIndexTemplateV2RequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.GetMappingRequestParameters : RequestParameters`1<GetMappingRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.IndexExistsRequestParameters : RequestParameters`1<IndexExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeDefaults { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeDefaults();
    public void set_IncludeDefaults(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.IndexTemplateExistsRequestParameters : RequestParameters`1<IndexTemplateExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.IndicesShardStoresRequestParameters : RequestParameters`1<IndicesShardStoresRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public String[] Status { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public String[] get_Status();
    public void set_Status(String[] value);
}
public class OpenSearch.Net.Specification.IndicesApi.IndicesStatsRequestParameters : RequestParameters`1<IndicesStatsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public String[] CompletionFields { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public String[] FielddataFields { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> ForbidClosedIndices { get; public set; }
    public String[] Groups { get; public set; }
    public Nullable`1<bool> IncludeSegmentFileSizes { get; public set; }
    public Nullable`1<bool> IncludeUnloadedSegments { get; public set; }
    public Nullable`1<Level> Level { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public String[] get_CompletionFields();
    public void set_CompletionFields(String[] value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public String[] get_FielddataFields();
    public void set_FielddataFields(String[] value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_ForbidClosedIndices();
    public void set_ForbidClosedIndices(Nullable`1<bool> value);
    public String[] get_Groups();
    public void set_Groups(String[] value);
    public Nullable`1<bool> get_IncludeSegmentFileSizes();
    public void set_IncludeSegmentFileSizes(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeUnloadedSegments();
    public void set_IncludeUnloadedSegments(Nullable`1<bool> value);
    public Nullable`1<Level> get_Level();
    public void set_Level(Nullable`1<Level> value);
}
public class OpenSearch.Net.Specification.IndicesApi.LowLevelIndicesNamespace : NamespacedClientProxy {
    internal LowLevelIndicesNamespace(OpenSearchLowLevelClient client);
    public TResponse AddBlock(string index, string block, AddIndexBlockRequestParameters requestParameters);
    [MapsApiAttribute("indices.add_block", "index, block")]
public Task`1<TResponse> AddBlockAsync(string index, string block, AddIndexBlockRequestParameters requestParameters, CancellationToken ctx);
    public TResponse AnalyzeForAll(PostData body, AnalyzeRequestParameters requestParameters);
    [MapsApiAttribute("indices.analyze", "body")]
public Task`1<TResponse> AnalyzeForAllAsync(PostData body, AnalyzeRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Analyze(string index, PostData body, AnalyzeRequestParameters requestParameters);
    [MapsApiAttribute("indices.analyze", "index, body")]
public Task`1<TResponse> AnalyzeAsync(string index, PostData body, AnalyzeRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ClearCacheForAll(ClearCacheRequestParameters requestParameters);
    [MapsApiAttribute("indices.clear_cache", "")]
public Task`1<TResponse> ClearCacheForAllAsync(ClearCacheRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ClearCache(string index, ClearCacheRequestParameters requestParameters);
    [MapsApiAttribute("indices.clear_cache", "index")]
public Task`1<TResponse> ClearCacheAsync(string index, ClearCacheRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Clone(string index, string target, PostData body, CloneIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.clone", "index, target, body")]
public Task`1<TResponse> CloneAsync(string index, string target, PostData body, CloneIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Close(string index, CloseIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.close", "index")]
public Task`1<TResponse> CloseAsync(string index, CloseIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Create(string index, PostData body, CreateIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.create", "index, body")]
public Task`1<TResponse> CreateAsync(string index, PostData body, CreateIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Delete(string index, DeleteIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.delete", "index")]
public Task`1<TResponse> DeleteAsync(string index, DeleteIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteAlias(string index, string name, DeleteAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.delete_alias", "index, name")]
public Task`1<TResponse> DeleteAliasAsync(string index, string name, DeleteAliasRequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by DeleteComposableTemplateForAll")]
public TResponse DeleteTemplateV2ForAll(string name, DeleteIndexTemplateV2RequestParameters requestParameters);
    [MapsApiAttribute("indices.delete_index_template", "name")]
[ObsoleteAttribute("Replaced by DeleteComposableTemplateForAllAsync")]
public Task`1<TResponse> DeleteTemplateV2ForAllAsync(string name, DeleteIndexTemplateV2RequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteTemplateForAll(string name, DeleteIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.delete_template", "name")]
public Task`1<TResponse> DeleteTemplateForAllAsync(string name, DeleteIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Exists(string index, IndexExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists", "index")]
public Task`1<TResponse> ExistsAsync(string index, IndexExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse AliasExistsForAll(string name, AliasExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_alias", "name")]
public Task`1<TResponse> AliasExistsForAllAsync(string name, AliasExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse AliasExists(string index, string name, AliasExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_alias", "index, name")]
public Task`1<TResponse> AliasExistsAsync(string index, string name, AliasExistsRequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by ComposableTemplateExistsForAll")]
public TResponse ExistsTemplateForAll(string name, ExistsIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_index_template", "name")]
[ObsoleteAttribute("Replaced by ComposableTemplateExistsForAllAsync")]
public Task`1<TResponse> ExistsTemplateForAllAsync(string name, ExistsIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse TemplateExistsForAll(string name, IndexTemplateExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_template", "name")]
public Task`1<TResponse> TemplateExistsForAllAsync(string name, IndexTemplateExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse TypeExists(string index, string type, TypeExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_type", "index, type")]
public Task`1<TResponse> TypeExistsAsync(string index, string type, TypeExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse FlushForAll(FlushRequestParameters requestParameters);
    [MapsApiAttribute("indices.flush", "")]
public Task`1<TResponse> FlushForAllAsync(FlushRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Flush(string index, FlushRequestParameters requestParameters);
    [MapsApiAttribute("indices.flush", "index")]
public Task`1<TResponse> FlushAsync(string index, FlushRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ForceMergeForAll(ForceMergeRequestParameters requestParameters);
    [MapsApiAttribute("indices.forcemerge", "")]
public Task`1<TResponse> ForceMergeForAllAsync(ForceMergeRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ForceMerge(string index, ForceMergeRequestParameters requestParameters);
    [MapsApiAttribute("indices.forcemerge", "index")]
public Task`1<TResponse> ForceMergeAsync(string index, ForceMergeRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Get(string index, GetIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.get", "index")]
public Task`1<TResponse> GetAsync(string index, GetIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetAliasForAll(GetAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_alias", "")]
public Task`1<TResponse> GetAliasForAllAsync(GetAliasRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetAliasForAll(string name, GetAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_alias", "name")]
public Task`1<TResponse> GetAliasForAllAsync(string name, GetAliasRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetAlias(string index, string name, GetAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_alias", "index, name")]
public Task`1<TResponse> GetAliasAsync(string index, string name, GetAliasRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetAlias(string index, GetAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_alias", "index")]
public Task`1<TResponse> GetAliasAsync(string index, GetAliasRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetFieldMappingForAll(string fields, GetFieldMappingRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_field_mapping", "fields")]
public Task`1<TResponse> GetFieldMappingForAllAsync(string fields, GetFieldMappingRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetFieldMapping(string index, string fields, GetFieldMappingRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_field_mapping", "index, fields")]
public Task`1<TResponse> GetFieldMappingAsync(string index, string fields, GetFieldMappingRequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by GetComposableTemplateForAll")]
public TResponse GetTemplateV2ForAll(GetIndexTemplateV2RequestParameters requestParameters);
    [MapsApiAttribute("indices.get_index_template", "")]
[ObsoleteAttribute("Replaced by GetComposableTemplateForAllAsync")]
public Task`1<TResponse> GetTemplateV2ForAllAsync(GetIndexTemplateV2RequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by GetComposableTemplateForAll")]
public TResponse GetTemplateV2ForAll(string name, GetIndexTemplateV2RequestParameters requestParameters);
    [MapsApiAttribute("indices.get_index_template", "name")]
[ObsoleteAttribute("Replaced by GetComposableTemplateForAllAsync")]
public Task`1<TResponse> GetTemplateV2ForAllAsync(string name, GetIndexTemplateV2RequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetMappingForAll(GetMappingRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_mapping", "")]
public Task`1<TResponse> GetMappingForAllAsync(GetMappingRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetMapping(string index, GetMappingRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_mapping", "index")]
public Task`1<TResponse> GetMappingAsync(string index, GetMappingRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetSettingsForAll(GetIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_settings", "")]
public Task`1<TResponse> GetSettingsForAllAsync(GetIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetSettings(string index, GetIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_settings", "index")]
public Task`1<TResponse> GetSettingsAsync(string index, GetIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetSettings(string index, string name, GetIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_settings", "index, name")]
public Task`1<TResponse> GetSettingsAsync(string index, string name, GetIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetSettingsForAll(string name, GetIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_settings", "name")]
public Task`1<TResponse> GetSettingsForAllAsync(string name, GetIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetTemplateForAll(GetIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_template", "")]
public Task`1<TResponse> GetTemplateForAllAsync(GetIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetTemplateForAll(string name, GetIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_template", "name")]
public Task`1<TResponse> GetTemplateForAllAsync(string name, GetIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Open(string index, OpenIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.open", "index")]
public Task`1<TResponse> OpenAsync(string index, OpenIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutAlias(string index, string name, PostData body, PutAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_alias", "index, name, body")]
public Task`1<TResponse> PutAliasAsync(string index, string name, PostData body, PutAliasRequestParameters requestParameters, CancellationToken ctx);
    [ObsoleteAttribute("Replaced by PutComposableTemplateForAll")]
public TResponse PutTemplateV2ForAll(string name, PostData body, PutIndexTemplateV2RequestParameters requestParameters);
    [ObsoleteAttribute("Replaced by PutComposableTemplateForAllAsync")]
[MapsApiAttribute("indices.put_index_template", "name, body")]
public Task`1<TResponse> PutTemplateV2ForAllAsync(string name, PostData body, PutIndexTemplateV2RequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutMapping(string index, PostData body, PutMappingRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_mapping", "index, body")]
public Task`1<TResponse> PutMappingAsync(string index, PostData body, PutMappingRequestParameters requestParameters, CancellationToken ctx);
    public TResponse UpdateSettingsForAll(PostData body, UpdateIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_settings", "body")]
public Task`1<TResponse> UpdateSettingsForAllAsync(PostData body, UpdateIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse UpdateSettings(string index, PostData body, UpdateIndexSettingsRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_settings", "index, body")]
public Task`1<TResponse> UpdateSettingsAsync(string index, PostData body, UpdateIndexSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutTemplateForAll(string name, PostData body, PutIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_template", "name, body")]
public Task`1<TResponse> PutTemplateForAllAsync(string name, PostData body, PutIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RecoveryStatusForAll(RecoveryStatusRequestParameters requestParameters);
    [MapsApiAttribute("indices.recovery", "")]
public Task`1<TResponse> RecoveryStatusForAllAsync(RecoveryStatusRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RecoveryStatus(string index, RecoveryStatusRequestParameters requestParameters);
    [MapsApiAttribute("indices.recovery", "index")]
public Task`1<TResponse> RecoveryStatusAsync(string index, RecoveryStatusRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RefreshForAll(RefreshRequestParameters requestParameters);
    [MapsApiAttribute("indices.refresh", "")]
public Task`1<TResponse> RefreshForAllAsync(RefreshRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Refresh(string index, RefreshRequestParameters requestParameters);
    [MapsApiAttribute("indices.refresh", "index")]
public Task`1<TResponse> RefreshAsync(string index, RefreshRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ResolveForAll(string name, ResolveIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.resolve_index", "name")]
public Task`1<TResponse> ResolveForAllAsync(string name, ResolveIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RolloverForAll(string alias, PostData body, RolloverIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.rollover", "alias, body")]
public Task`1<TResponse> RolloverForAllAsync(string alias, PostData body, RolloverIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse RolloverForAll(string alias, string newIndex, PostData body, RolloverIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.rollover", "alias, new_index, body")]
public Task`1<TResponse> RolloverForAllAsync(string alias, string newIndex, PostData body, RolloverIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SegmentsForAll(SegmentsRequestParameters requestParameters);
    [MapsApiAttribute("indices.segments", "")]
public Task`1<TResponse> SegmentsForAllAsync(SegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Segments(string index, SegmentsRequestParameters requestParameters);
    [MapsApiAttribute("indices.segments", "index")]
public Task`1<TResponse> SegmentsAsync(string index, SegmentsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ShardStoresForAll(IndicesShardStoresRequestParameters requestParameters);
    [MapsApiAttribute("indices.shard_stores", "")]
public Task`1<TResponse> ShardStoresForAllAsync(IndicesShardStoresRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ShardStores(string index, IndicesShardStoresRequestParameters requestParameters);
    [MapsApiAttribute("indices.shard_stores", "index")]
public Task`1<TResponse> ShardStoresAsync(string index, IndicesShardStoresRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Shrink(string index, string target, PostData body, ShrinkIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.shrink", "index, target, body")]
public Task`1<TResponse> ShrinkAsync(string index, string target, PostData body, ShrinkIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SimulateIndexTemplateForAll(string name, PostData body, SimulateIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.simulate_index_template", "name, body")]
public Task`1<TResponse> SimulateIndexTemplateForAllAsync(string name, PostData body, SimulateIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SimulateTemplateForAll(PostData body, SimulateTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.simulate_template", "body")]
public Task`1<TResponse> SimulateTemplateForAllAsync(PostData body, SimulateTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SimulateTemplateForAll(string name, PostData body, SimulateTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.simulate_template", "name, body")]
public Task`1<TResponse> SimulateTemplateForAllAsync(string name, PostData body, SimulateTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Split(string index, string target, PostData body, SplitIndexRequestParameters requestParameters);
    [MapsApiAttribute("indices.split", "index, target, body")]
public Task`1<TResponse> SplitAsync(string index, string target, PostData body, SplitIndexRequestParameters requestParameters, CancellationToken ctx);
    public TResponse BulkAliasForAll(PostData body, BulkAliasRequestParameters requestParameters);
    [MapsApiAttribute("indices.update_aliases", "body")]
public Task`1<TResponse> BulkAliasForAllAsync(PostData body, BulkAliasRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ValidateQueryForAll(PostData body, ValidateQueryRequestParameters requestParameters);
    [MapsApiAttribute("indices.validate_query", "body")]
public Task`1<TResponse> ValidateQueryForAllAsync(PostData body, ValidateQueryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ValidateQuery(string index, PostData body, ValidateQueryRequestParameters requestParameters);
    [MapsApiAttribute("indices.validate_query", "index, body")]
public Task`1<TResponse> ValidateQueryAsync(string index, PostData body, ValidateQueryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteComposableTemplateForAll(string name, DeleteComposableIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.delete_index_template", "name")]
public Task`1<TResponse> DeleteComposableTemplateForAllAsync(string name, DeleteComposableIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ComposableTemplateExistsForAll(string name, ComposableIndexTemplateExistsRequestParameters requestParameters);
    [MapsApiAttribute("indices.exists_index_template", "name")]
public Task`1<TResponse> ComposableTemplateExistsForAllAsync(string name, ComposableIndexTemplateExistsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetComposableTemplateForAll(GetComposableIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_index_template", "")]
public Task`1<TResponse> GetComposableTemplateForAllAsync(GetComposableIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetComposableTemplateForAll(string name, GetComposableIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.get_index_template", "name")]
public Task`1<TResponse> GetComposableTemplateForAllAsync(string name, GetComposableIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutComposableTemplateForAll(string name, PostData body, PutComposableIndexTemplateRequestParameters requestParameters);
    [MapsApiAttribute("indices.put_index_template", "name, body")]
public Task`1<TResponse> PutComposableTemplateForAllAsync(string name, PostData body, PutComposableIndexTemplateRequestParameters requestParameters, CancellationToken ctx);
    public TResponse StatsForAll(IndicesStatsRequestParameters requestParameters);
    [MapsApiAttribute("indices.stats", "")]
public Task`1<TResponse> StatsForAllAsync(IndicesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string index, IndicesStatsRequestParameters requestParameters);
    [MapsApiAttribute("indices.stats", "index")]
public Task`1<TResponse> StatsAsync(string index, IndicesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string index, string metric, IndicesStatsRequestParameters requestParameters);
    [MapsApiAttribute("indices.stats", "index, metric")]
public Task`1<TResponse> StatsAsync(string index, string metric, IndicesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse StatsForAll(string metric, IndicesStatsRequestParameters requestParameters);
    [MapsApiAttribute("indices.stats", "metric")]
public Task`1<TResponse> StatsForAllAsync(string metric, IndicesStatsRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.IndicesApi.OpenIndexRequestParameters : RequestParameters`1<OpenIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.PutAliasRequestParameters : RequestParameters`1<PutAliasRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.PutComposableIndexTemplateRequestParameters : RequestParameters`1<PutComposableIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Cause { get; public set; }
    public TimeSpan ClusterManagerTimeout { get; public set; }
    public Nullable`1<bool> Create { get; public set; }
    [ObsoleteAttribute("Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead.")]
public TimeSpan MasterTimeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Cause();
    public void set_Cause(string value);
    public TimeSpan get_ClusterManagerTimeout();
    public void set_ClusterManagerTimeout(TimeSpan value);
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeout();
    public void set_MasterTimeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.PutIndexTemplateRequestParameters : RequestParameters`1<PutIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Create { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
[ObsoleteAttribute("Replaced by PutComposableIndexTemplateRequestParameters")]
public class OpenSearch.Net.Specification.IndicesApi.PutIndexTemplateV2RequestParameters : RequestParameters`1<PutIndexTemplateV2RequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Cause { get; public set; }
    public Nullable`1<bool> Create { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Cause();
    public void set_Cause(string value);
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.PutMappingRequestParameters : RequestParameters`1<PutMappingRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> WriteIndexOnly { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_WriteIndexOnly();
    public void set_WriteIndexOnly(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.RecoveryStatusRequestParameters : RequestParameters`1<RecoveryStatusRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> ActiveOnly { get; public set; }
    public Nullable`1<bool> Detailed { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_ActiveOnly();
    public void set_ActiveOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_Detailed();
    public void set_Detailed(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.RefreshRequestParameters : RequestParameters`1<RefreshRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.ResolveIndexRequestParameters : RequestParameters`1<ResolveIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
}
public class OpenSearch.Net.Specification.IndicesApi.RolloverIndexRequestParameters : RequestParameters`1<RolloverIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> DryRun { get; public set; }
    public Nullable`1<bool> IncludeTypeName { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeTypeName();
    public void set_IncludeTypeName(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.SegmentsRequestParameters : RequestParameters`1<SegmentsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.ShrinkIndexRequestParameters : RequestParameters`1<ShrinkIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.SimulateIndexTemplateRequestParameters : RequestParameters`1<SimulateIndexTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Cause { get; public set; }
    public Nullable`1<bool> Create { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Cause();
    public void set_Cause(string value);
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.SimulateTemplateRequestParameters : RequestParameters`1<SimulateTemplateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public string Cause { get; public set; }
    public Nullable`1<bool> Create { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public string get_Cause();
    public void set_Cause(string value);
    public Nullable`1<bool> get_Create();
    public void set_Create(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.SplitIndexRequestParameters : RequestParameters`1<SplitIndexRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
public class OpenSearch.Net.Specification.IndicesApi.SyncedFlushRequestParameters : RequestParameters`1<SyncedFlushRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.TypeExistsRequestParameters : RequestParameters`1<TypeExistsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Local { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IndicesApi.UpdateIndexSettingsRequestParameters : RequestParameters`1<UpdateIndexSettingsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<bool> PreserveExisting { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<bool> get_PreserveExisting();
    public void set_PreserveExisting(Nullable`1<bool> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IndicesApi.ValidateQueryRequestParameters : RequestParameters`1<ValidateQueryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllShards { get; public set; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<bool> Explain { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public Nullable`1<bool> Rewrite { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllShards();
    public void set_AllShards(Nullable`1<bool> value);
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<bool> get_Explain();
    public void set_Explain(Nullable`1<bool> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public Nullable`1<bool> get_Rewrite();
    public void set_Rewrite(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.IngestApi.DeletePipelineRequestParameters : RequestParameters`1<DeletePipelineRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IngestApi.GetPipelineRequestParameters : RequestParameters`1<GetPipelineRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IngestApi.GrokProcessorPatternsRequestParameters : RequestParameters`1<GrokProcessorPatternsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
}
public class OpenSearch.Net.Specification.IngestApi.LowLevelIngestNamespace : NamespacedClientProxy {
    internal LowLevelIngestNamespace(OpenSearchLowLevelClient client);
    public TResponse DeletePipeline(string id, DeletePipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.delete_pipeline", "id")]
public Task`1<TResponse> DeletePipelineAsync(string id, DeletePipelineRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetPipeline(GetPipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.get_pipeline", "")]
public Task`1<TResponse> GetPipelineAsync(GetPipelineRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetPipeline(string id, GetPipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.get_pipeline", "id")]
public Task`1<TResponse> GetPipelineAsync(string id, GetPipelineRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GrokProcessorPatterns(GrokProcessorPatternsRequestParameters requestParameters);
    [MapsApiAttribute("ingest.processor_grok", "")]
public Task`1<TResponse> GrokProcessorPatternsAsync(GrokProcessorPatternsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse PutPipeline(string id, PostData body, PutPipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.put_pipeline", "id, body")]
public Task`1<TResponse> PutPipelineAsync(string id, PostData body, PutPipelineRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SimulatePipeline(PostData body, SimulatePipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.simulate", "body")]
public Task`1<TResponse> SimulatePipelineAsync(PostData body, SimulatePipelineRequestParameters requestParameters, CancellationToken ctx);
    public TResponse SimulatePipeline(string id, PostData body, SimulatePipelineRequestParameters requestParameters);
    [MapsApiAttribute("ingest.simulate", "id, body")]
public Task`1<TResponse> SimulatePipelineAsync(string id, PostData body, SimulatePipelineRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.IngestApi.PutPipelineRequestParameters : RequestParameters`1<PutPipelineRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.IngestApi.SimulatePipelineRequestParameters : RequestParameters`1<SimulatePipelineRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.NodesApi.LowLevelNodesNamespace : NamespacedClientProxy {
    internal LowLevelNodesNamespace(OpenSearchLowLevelClient client);
    public TResponse HotThreadsForAll(NodesHotThreadsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.hot_threads", "")]
public Task`1<TResponse> HotThreadsForAllAsync(NodesHotThreadsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse HotThreads(string nodeId, NodesHotThreadsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.hot_threads", "node_id")]
public Task`1<TResponse> HotThreadsAsync(string nodeId, NodesHotThreadsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse InfoForAll(NodesInfoRequestParameters requestParameters);
    [MapsApiAttribute("nodes.info", "")]
public Task`1<TResponse> InfoForAllAsync(NodesInfoRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Info(string nodeId, NodesInfoRequestParameters requestParameters);
    [MapsApiAttribute("nodes.info", "node_id")]
public Task`1<TResponse> InfoAsync(string nodeId, NodesInfoRequestParameters requestParameters, CancellationToken ctx);
    public TResponse InfoForAll(string metric, NodesInfoRequestParameters requestParameters);
    [MapsApiAttribute("nodes.info", "metric")]
public Task`1<TResponse> InfoForAllAsync(string metric, NodesInfoRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Info(string nodeId, string metric, NodesInfoRequestParameters requestParameters);
    [MapsApiAttribute("nodes.info", "node_id, metric")]
public Task`1<TResponse> InfoAsync(string nodeId, string metric, NodesInfoRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ReloadSecureSettingsForAll(PostData body, ReloadSecureSettingsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.reload_secure_settings", "body")]
public Task`1<TResponse> ReloadSecureSettingsForAllAsync(PostData body, ReloadSecureSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ReloadSecureSettings(string nodeId, PostData body, ReloadSecureSettingsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.reload_secure_settings", "node_id, body")]
public Task`1<TResponse> ReloadSecureSettingsAsync(string nodeId, PostData body, ReloadSecureSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse StatsForAll(NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "")]
public Task`1<TResponse> StatsForAllAsync(NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string nodeId, NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "node_id")]
public Task`1<TResponse> StatsAsync(string nodeId, NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse StatsForAll(string metric, NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "metric")]
public Task`1<TResponse> StatsForAllAsync(string metric, NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string nodeId, string metric, NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "node_id, metric")]
public Task`1<TResponse> StatsAsync(string nodeId, string metric, NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse StatsForAll(string metric, string indexMetric, NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "metric, index_metric")]
public Task`1<TResponse> StatsForAllAsync(string metric, string indexMetric, NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Stats(string nodeId, string metric, string indexMetric, NodesStatsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.stats", "node_id, metric, index_metric")]
public Task`1<TResponse> StatsAsync(string nodeId, string metric, string indexMetric, NodesStatsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse UsageForAll(NodesUsageRequestParameters requestParameters);
    [MapsApiAttribute("nodes.usage", "")]
public Task`1<TResponse> UsageForAllAsync(NodesUsageRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Usage(string nodeId, NodesUsageRequestParameters requestParameters);
    [MapsApiAttribute("nodes.usage", "node_id")]
public Task`1<TResponse> UsageAsync(string nodeId, NodesUsageRequestParameters requestParameters, CancellationToken ctx);
    public TResponse UsageForAll(string metric, NodesUsageRequestParameters requestParameters);
    [MapsApiAttribute("nodes.usage", "metric")]
public Task`1<TResponse> UsageForAllAsync(string metric, NodesUsageRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Usage(string nodeId, string metric, NodesUsageRequestParameters requestParameters);
    [MapsApiAttribute("nodes.usage", "node_id, metric")]
public Task`1<TResponse> UsageAsync(string nodeId, string metric, NodesUsageRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ReloadSecureSettingsForAll(ReloadSecureSettingsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.reload_secure_settings", "")]
public Task`1<TResponse> ReloadSecureSettingsForAllAsync(ReloadSecureSettingsRequestParameters requestParameters, CancellationToken ctx);
    public TResponse ReloadSecureSettings(string nodeId, ReloadSecureSettingsRequestParameters requestParameters);
    [MapsApiAttribute("nodes.reload_secure_settings", "node_id")]
public Task`1<TResponse> ReloadSecureSettingsAsync(string nodeId, ReloadSecureSettingsRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.NodesApi.NodesHotThreadsRequestParameters : RequestParameters`1<NodesHotThreadsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> IgnoreIdleThreads { get; public set; }
    public TimeSpan Interval { get; public set; }
    public Nullable`1<long> Snapshots { get; public set; }
    public Nullable`1<ThreadType> ThreadType { get; public set; }
    public Nullable`1<long> Threads { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_IgnoreIdleThreads();
    public void set_IgnoreIdleThreads(Nullable`1<bool> value);
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    public Nullable`1<long> get_Snapshots();
    public void set_Snapshots(Nullable`1<long> value);
    public Nullable`1<ThreadType> get_ThreadType();
    public void set_ThreadType(Nullable`1<ThreadType> value);
    public Nullable`1<long> get_Threads();
    public void set_Threads(Nullable`1<long> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.NodesApi.NodesInfoRequestParameters : RequestParameters`1<NodesInfoRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FlatSettings { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FlatSettings();
    public void set_FlatSettings(Nullable`1<bool> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.NodesApi.NodesStatsRequestParameters : RequestParameters`1<NodesStatsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public String[] CompletionFields { get; public set; }
    public String[] FielddataFields { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> Groups { get; public set; }
    public Nullable`1<bool> IncludeSegmentFileSizes { get; public set; }
    public Nullable`1<Level> Level { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public String[] Types { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public String[] get_CompletionFields();
    public void set_CompletionFields(String[] value);
    public String[] get_FielddataFields();
    public void set_FielddataFields(String[] value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_Groups();
    public void set_Groups(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeSegmentFileSizes();
    public void set_IncludeSegmentFileSizes(Nullable`1<bool> value);
    public Nullable`1<Level> get_Level();
    public void set_Level(Nullable`1<Level> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public String[] get_Types();
    public void set_Types(String[] value);
}
public class OpenSearch.Net.Specification.NodesApi.NodesUsageRequestParameters : RequestParameters`1<NodesUsageRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.NodesApi.ReloadSecureSettingsRequestParameters : RequestParameters`1<ReloadSecureSettingsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.CleanupRepositoryRequestParameters : RequestParameters`1<CleanupRepositoryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.CloneSnapshotRequestParameters : RequestParameters`1<CloneSnapshotRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.CreateRepositoryRequestParameters : RequestParameters`1<CreateRepositoryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> Verify { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_Verify();
    public void set_Verify(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.SnapshotApi.DeleteRepositoryRequestParameters : RequestParameters`1<DeleteRepositoryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.DeleteSnapshotRequestParameters : RequestParameters`1<DeleteSnapshotRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.GetRepositoryRequestParameters : RequestParameters`1<GetRepositoryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> Local { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_Local();
    public void set_Local(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.GetSnapshotRequestParameters : RequestParameters`1<GetSnapshotRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.SnapshotApi.LowLevelSnapshotNamespace : NamespacedClientProxy {
    internal LowLevelSnapshotNamespace(OpenSearchLowLevelClient client);
    public TResponse CleanupRepository(string repository, PostData body, CleanupRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.cleanup_repository", "repository, body")]
public Task`1<TResponse> CleanupRepositoryAsync(string repository, PostData body, CleanupRepositoryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Clone(string repository, string snapshot, string targetSnapshot, PostData body, CloneSnapshotRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.clone", "repository, snapshot, target_snapshot, body")]
public Task`1<TResponse> CloneAsync(string repository, string snapshot, string targetSnapshot, PostData body, CloneSnapshotRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Snapshot(string repository, string snapshot, PostData body, SnapshotRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.create", "repository, snapshot, body")]
public Task`1<TResponse> SnapshotAsync(string repository, string snapshot, PostData body, SnapshotRequestParameters requestParameters, CancellationToken ctx);
    public TResponse CreateRepository(string repository, PostData body, CreateRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.create_repository", "repository, body")]
public Task`1<TResponse> CreateRepositoryAsync(string repository, PostData body, CreateRepositoryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Delete(string repository, string snapshot, DeleteSnapshotRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.delete", "repository, snapshot")]
public Task`1<TResponse> DeleteAsync(string repository, string snapshot, DeleteSnapshotRequestParameters requestParameters, CancellationToken ctx);
    public TResponse DeleteRepository(string repository, DeleteRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.delete_repository", "repository")]
public Task`1<TResponse> DeleteRepositoryAsync(string repository, DeleteRepositoryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Get(string repository, string snapshot, GetSnapshotRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.get", "repository, snapshot")]
public Task`1<TResponse> GetAsync(string repository, string snapshot, GetSnapshotRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetRepository(GetRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.get_repository", "")]
public Task`1<TResponse> GetRepositoryAsync(GetRepositoryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetRepository(string repository, GetRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.get_repository", "repository")]
public Task`1<TResponse> GetRepositoryAsync(string repository, GetRepositoryRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Restore(string repository, string snapshot, PostData body, RestoreRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.restore", "repository, snapshot, body")]
public Task`1<TResponse> RestoreAsync(string repository, string snapshot, PostData body, RestoreRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Status(SnapshotStatusRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.status", "")]
public Task`1<TResponse> StatusAsync(SnapshotStatusRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Status(string repository, SnapshotStatusRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.status", "repository")]
public Task`1<TResponse> StatusAsync(string repository, SnapshotStatusRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Status(string repository, string snapshot, SnapshotStatusRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.status", "repository, snapshot")]
public Task`1<TResponse> StatusAsync(string repository, string snapshot, SnapshotStatusRequestParameters requestParameters, CancellationToken ctx);
    public TResponse VerifyRepository(string repository, VerifyRepositoryRequestParameters requestParameters);
    [MapsApiAttribute("snapshot.verify_repository", "repository")]
public Task`1<TResponse> VerifyRepositoryAsync(string repository, VerifyRepositoryRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.Specification.SnapshotApi.RestoreRequestParameters : RequestParameters`1<RestoreRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.SnapshotApi.SnapshotRequestParameters : RequestParameters`1<SnapshotRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.SnapshotApi.SnapshotStatusRequestParameters : RequestParameters`1<SnapshotStatusRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
}
public class OpenSearch.Net.Specification.SnapshotApi.VerifyRepositoryRequestParameters : RequestParameters`1<VerifyRepositoryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan MasterTimeSpanout { get; public set; }
    public TimeSpan ClusterManagerTimeSpanout { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_MasterTimeSpanout();
    public void set_MasterTimeSpanout(TimeSpan value);
    public TimeSpan get_ClusterManagerTimeSpanout();
    public void set_ClusterManagerTimeSpanout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
}
public class OpenSearch.Net.Specification.TasksApi.CancelTasksRequestParameters : RequestParameters`1<CancelTasksRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public String[] Actions { get; public set; }
    public String[] Nodes { get; public set; }
    public string ParentTaskId { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public String[] get_Actions();
    public void set_Actions(String[] value);
    public String[] get_Nodes();
    public void set_Nodes(String[] value);
    public string get_ParentTaskId();
    public void set_ParentTaskId(string value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.TasksApi.GetTaskRequestParameters : RequestParameters`1<GetTaskRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.TasksApi.ListTasksRequestParameters : RequestParameters`1<ListTasksRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public String[] Actions { get; public set; }
    public Nullable`1<bool> Detailed { get; public set; }
    public Nullable`1<GroupBy> GroupBy { get; public set; }
    public String[] Nodes { get; public set; }
    public string ParentTaskId { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public String[] get_Actions();
    public void set_Actions(String[] value);
    public Nullable`1<bool> get_Detailed();
    public void set_Detailed(Nullable`1<bool> value);
    public Nullable`1<GroupBy> get_GroupBy();
    public void set_GroupBy(Nullable`1<GroupBy> value);
    public String[] get_Nodes();
    public void set_Nodes(String[] value);
    public string get_ParentTaskId();
    public void set_ParentTaskId(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.Specification.TasksApi.LowLevelTasksNamespace : NamespacedClientProxy {
    internal LowLevelTasksNamespace(OpenSearchLowLevelClient client);
    public TResponse Cancel(CancelTasksRequestParameters requestParameters);
    [MapsApiAttribute("tasks.cancel", "")]
public Task`1<TResponse> CancelAsync(CancelTasksRequestParameters requestParameters, CancellationToken ctx);
    public TResponse Cancel(string taskId, CancelTasksRequestParameters requestParameters);
    [MapsApiAttribute("tasks.cancel", "task_id")]
public Task`1<TResponse> CancelAsync(string taskId, CancelTasksRequestParameters requestParameters, CancellationToken ctx);
    public TResponse GetTask(string taskId, GetTaskRequestParameters requestParameters);
    [MapsApiAttribute("tasks.get", "task_id")]
public Task`1<TResponse> GetTaskAsync(string taskId, GetTaskRequestParameters requestParameters, CancellationToken ctx);
    public TResponse List(ListTasksRequestParameters requestParameters);
    [MapsApiAttribute("tasks.list", "")]
public Task`1<TResponse> ListAsync(ListTasksRequestParameters requestParameters, CancellationToken ctx);
}
public class OpenSearch.Net.StaticConnectionPool : object {
    protected int GlobalCursor;
    private Func`2<Node, float> _nodeScorer;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SniffedOnStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeProvider <DateTimeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Node> <InternalNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Randomize>k__BackingField;
    public DateTime LastUpdate { get; protected set; }
    public int MaxRetries { get; }
    public IReadOnlyCollection`1<Node> Nodes { get; }
    public bool SniffedOnStartup { get; public set; }
    public bool SupportsPinging { get; }
    public bool SupportsReseeding { get; }
    public bool UsingSsl { get; private set; }
    protected List`1<Node> AliveNodes { get; }
    protected IDateTimeProvider DateTimeProvider { get; private set; }
    protected List`1<Node> InternalNodes { get; protected set; }
    protected Random Random { get; }
    protected bool Randomize { get; }
    public StaticConnectionPool(IEnumerable`1<Uri> uris, bool randomize, IDateTimeProvider dateTimeProvider);
    public StaticConnectionPool(IEnumerable`1<Node> nodes, bool randomize, IDateTimeProvider dateTimeProvider);
    protected StaticConnectionPool(IEnumerable`1<Node> nodes, bool randomize, Nullable`1<int> randomizeSeed, IDateTimeProvider dateTimeProvider);
    protected StaticConnectionPool(IEnumerable`1<Node> nodes, Func`2<Node, float> nodeScorer, IDateTimeProvider dateTimeProvider);
    private void Initialize(IEnumerable`1<Node> nodes, IDateTimeProvider dateTimeProvider);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastUpdate();
    [CompilerGeneratedAttribute]
protected void set_LastUpdate(DateTime value);
    public sealed virtual int get_MaxRetries();
    public virtual IReadOnlyCollection`1<Node> get_Nodes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SniffedOnStartup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SniffedOnStartup(bool value);
    public virtual bool get_SupportsPinging();
    public virtual bool get_SupportsReseeding();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UsingSsl();
    [CompilerGeneratedAttribute]
private void set_UsingSsl(bool value);
    protected List`1<Node> get_AliveNodes();
    [CompilerGeneratedAttribute]
protected IDateTimeProvider get_DateTimeProvider();
    [CompilerGeneratedAttribute]
private void set_DateTimeProvider(IDateTimeProvider value);
    [CompilerGeneratedAttribute]
protected List`1<Node> get_InternalNodes();
    [CompilerGeneratedAttribute]
protected void set_InternalNodes(List`1<Node> value);
    [CompilerGeneratedAttribute]
protected Random get_Random();
    [CompilerGeneratedAttribute]
protected bool get_Randomize();
    [IteratorStateMachineAttribute("OpenSearch.Net.StaticConnectionPool/<CreateView>d__43")]
public virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    public virtual void Reseed(IEnumerable`1<Node> nodes);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual Node RetryInternalNodes(int globalCursor, Action`2<AuditEvent, Node> audit);
    [IteratorStateMachineAttribute("OpenSearch.Net.StaticConnectionPool/<SelectAliveNodes>d__47")]
protected virtual IEnumerable`1<Node> SelectAliveNodes(int cursor, List`1<Node> aliveNodes, Action`2<AuditEvent, Node> audit);
    protected IOrderedEnumerable`1<Node> SortNodes(IEnumerable`1<Node> nodes);
    protected virtual void DisposeManagedResources();
    [CompilerGeneratedAttribute]
private int <SortNodes>b__48_0(Node n);
}
public class OpenSearch.Net.StickyConnectionPool : StaticConnectionPool {
    public StickyConnectionPool(IEnumerable`1<Uri> uris, IDateTimeProvider dateTimeProvider);
    public StickyConnectionPool(IEnumerable`1<Node> nodes, IDateTimeProvider dateTimeProvider);
    [IteratorStateMachineAttribute("OpenSearch.Net.StickyConnectionPool/<CreateView>d__2")]
public virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    public virtual void Reseed(IEnumerable`1<Node> nodes);
}
public class OpenSearch.Net.StickySniffingConnectionPool : SniffingConnectionPool {
    public bool SupportsPinging { get; }
    public bool SupportsReseeding { get; }
    public StickySniffingConnectionPool(IEnumerable`1<Uri> uris, Func`2<Node, float> nodeScorer, IDateTimeProvider dateTimeProvider);
    public StickySniffingConnectionPool(IEnumerable`1<Node> nodes, Func`2<Node, float> nodeScorer, IDateTimeProvider dateTimeProvider);
    public virtual bool get_SupportsPinging();
    public virtual bool get_SupportsReseeding();
    [IteratorStateMachineAttribute("OpenSearch.Net.StickySniffingConnectionPool/<CreateView>d__6")]
public virtual IEnumerable`1<Node> CreateView(Action`2<AuditEvent, Node> audit);
    private static float DefaultNodeScore(Node node);
}
public class OpenSearch.Net.StreamableData`1 : PostData {
    private T _state;
    private Action`2<T, Stream> _syncWriter;
    private Func`4<T, Stream, CancellationToken, Task> _asyncWriter;
    public StreamableData`1(T state, Action`2<T, Stream> syncWriter, Func`4<T, Stream, CancellationToken, Task> asyncWriter);
    public virtual void Write(Stream writableStream, IConnectionConfigurationValues settings);
    [AsyncStateMachineAttribute("OpenSearch.Net.StreamableData`1/<WriteAsync>d__5")]
public virtual Task WriteAsync(Stream writableStream, IConnectionConfigurationValues settings, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("144")]
public class OpenSearch.Net.StringEnumAttribute : Attribute {
}
public class OpenSearch.Net.StringResponse : OpenSearchResponse`1<string> {
    public StringResponse(string body);
    public virtual bool TryGetServerError(ServerError& serverError);
}
[StringEnumAttribute]
public enum OpenSearch.Net.SuggestMode : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SuggestMode Missing;
    [EnumMemberAttribute]
public static SuggestMode Popular;
    [EnumMemberAttribute]
public static SuggestMode Always;
}
public class OpenSearch.Net.TermVectorsRequestParameters : RequestParameters`1<TermVectorsRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> FieldStatistics { get; public set; }
    public String[] Fields { get; public set; }
    public Nullable`1<bool> Offsets { get; public set; }
    public Nullable`1<bool> Payloads { get; public set; }
    public Nullable`1<bool> Positions { get; public set; }
    public string Preference { get; public set; }
    public Nullable`1<bool> Realtime { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> TermStatistics { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public Nullable`1<VersionType> VersionType { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_FieldStatistics();
    public void set_FieldStatistics(Nullable`1<bool> value);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public Nullable`1<bool> get_Offsets();
    public void set_Offsets(Nullable`1<bool> value);
    public Nullable`1<bool> get_Payloads();
    public void set_Payloads(Nullable`1<bool> value);
    public Nullable`1<bool> get_Positions();
    public void set_Positions(Nullable`1<bool> value);
    public string get_Preference();
    public void set_Preference(string value);
    public Nullable`1<bool> get_Realtime();
    public void set_Realtime(Nullable`1<bool> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_TermStatistics();
    public void set_TermStatistics(Nullable`1<bool> value);
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    public Nullable`1<VersionType> get_VersionType();
    public void set_VersionType(Nullable`1<VersionType> value);
}
[StringEnumAttribute]
public enum OpenSearch.Net.ThreadType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ThreadType Cpu;
    [EnumMemberAttribute]
public static ThreadType Wait;
    [EnumMemberAttribute]
public static ThreadType Block;
}
[StringEnumAttribute]
public enum OpenSearch.Net.TimeUnit : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TimeUnit D;
    [EnumMemberAttribute]
public static TimeUnit H;
    [EnumMemberAttribute]
public static TimeUnit M;
    [EnumMemberAttribute]
public static TimeUnit Micros;
    [EnumMemberAttribute]
public static TimeUnit Ms;
    [EnumMemberAttribute]
public static TimeUnit Nanos;
    [EnumMemberAttribute]
public static TimeUnit S;
}
public class OpenSearch.Net.Transport`1 : object {
    [CompilerGeneratedAttribute]
private TConnectionSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeProvider <DateTimeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryStreamFactory <MemoryStreamFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestPipelineFactory <PipelineProvider>k__BackingField;
    public TConnectionSettings Settings { get; }
    private IDateTimeProvider DateTimeProvider { get; }
    private IMemoryStreamFactory MemoryStreamFactory { get; }
    private IRequestPipelineFactory PipelineProvider { get; }
    public Transport`1(TConnectionSettings configurationValues);
    public Transport`1(TConnectionSettings configurationValues, IRequestPipelineFactory pipelineProvider, IDateTimeProvider dateTimeProvider, IMemoryStreamFactory memoryStreamFactory);
    [CompilerGeneratedAttribute]
public sealed virtual TConnectionSettings get_Settings();
    [CompilerGeneratedAttribute]
private IDateTimeProvider get_DateTimeProvider();
    [CompilerGeneratedAttribute]
private IMemoryStreamFactory get_MemoryStreamFactory();
    [CompilerGeneratedAttribute]
private IRequestPipelineFactory get_PipelineProvider();
    public sealed virtual TResponse Request(HttpMethod method, string path, PostData data, IRequestParameters requestParameters);
    [AsyncStateMachineAttribute("OpenSearch.Net.Transport`1/<RequestAsync>d__15`1")]
public sealed virtual Task`1<TResponse> RequestAsync(HttpMethod method, string path, CancellationToken cancellationToken, PostData data, IRequestParameters requestParameters);
    private static void HandlePipelineException(TResponse& response, PipelineException ex, IRequestPipeline pipeline, Node node, List`1<PipelineException> seenExceptions);
    private TResponse FinalizeResponse(RequestData requestData, IRequestPipeline pipeline, List`1<PipelineException> seenExceptions, TResponse response);
    private static IApiCallDetails GetMostRecentCallDetails(TResponse response, IEnumerable`1<PipelineException> seenExceptions);
    private void HandleOpenSearchClientException(RequestData data, Exception clientException, IOpenSearchResponse response);
    private static void Ping(IRequestPipeline pipeline, Node node);
    [AsyncStateMachineAttribute("OpenSearch.Net.Transport`1/<PingAsync>d__21")]
private static Task PingAsync(IRequestPipeline pipeline, Node node, CancellationToken cancellationToken);
}
public class OpenSearch.Net.UnexpectedOpenSearchClientException : OpenSearchClientException {
    [CompilerGeneratedAttribute]
private List`1<PipelineException> <SeenExceptions>k__BackingField;
    public List`1<PipelineException> SeenExceptions { get; public set; }
    public UnexpectedOpenSearchClientException(Exception killerException, List`1<PipelineException> seenExceptions);
    [CompilerGeneratedAttribute]
public List`1<PipelineException> get_SeenExceptions();
    [CompilerGeneratedAttribute]
public void set_SeenExceptions(List`1<PipelineException> value);
}
public class OpenSearch.Net.UpdateByQueryRequestParameters : RequestParameters`1<UpdateByQueryRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<bool> AllowNoIndices { get; public set; }
    public Nullable`1<bool> AnalyzeWildcard { get; public set; }
    public string Analyzer { get; public set; }
    public Nullable`1<Conflicts> Conflicts { get; public set; }
    public Nullable`1<DefaultOperator> DefaultOperator { get; public set; }
    public string Df { get; public set; }
    public Nullable`1<ExpandWildcards> ExpandWildcards { get; public set; }
    public Nullable`1<long> From { get; public set; }
    public Nullable`1<bool> IgnoreUnavailable { get; public set; }
    public Nullable`1<bool> Lenient { get; public set; }
    public string Pipeline { get; public set; }
    public string Preference { get; public set; }
    public string QueryOnQueryString { get; public set; }
    public Nullable`1<bool> Refresh { get; public set; }
    public Nullable`1<bool> RequestCache { get; public set; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public String[] Routing { get; public set; }
    public TimeSpan Scroll { get; public set; }
    public Nullable`1<long> ScrollSize { get; public set; }
    public TimeSpan SearchTimeout { get; public set; }
    public Nullable`1<SearchType> SearchType { get; public set; }
    public Nullable`1<long> Slices { get; public set; }
    public String[] Sort { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public String[] SourceExcludes { get; public set; }
    public String[] SourceIncludes { get; public set; }
    public String[] Stats { get; public set; }
    public Nullable`1<long> TerminateAfter { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Nullable`1<bool> Version { get; public set; }
    public Nullable`1<bool> VersionType { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public Nullable`1<bool> WaitForCompletion { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<bool> get_AllowNoIndices();
    public void set_AllowNoIndices(Nullable`1<bool> value);
    public Nullable`1<bool> get_AnalyzeWildcard();
    public void set_AnalyzeWildcard(Nullable`1<bool> value);
    public string get_Analyzer();
    public void set_Analyzer(string value);
    public Nullable`1<Conflicts> get_Conflicts();
    public void set_Conflicts(Nullable`1<Conflicts> value);
    public Nullable`1<DefaultOperator> get_DefaultOperator();
    public void set_DefaultOperator(Nullable`1<DefaultOperator> value);
    public string get_Df();
    public void set_Df(string value);
    public Nullable`1<ExpandWildcards> get_ExpandWildcards();
    public void set_ExpandWildcards(Nullable`1<ExpandWildcards> value);
    public Nullable`1<long> get_From();
    public void set_From(Nullable`1<long> value);
    public Nullable`1<bool> get_IgnoreUnavailable();
    public void set_IgnoreUnavailable(Nullable`1<bool> value);
    public Nullable`1<bool> get_Lenient();
    public void set_Lenient(Nullable`1<bool> value);
    public string get_Pipeline();
    public void set_Pipeline(string value);
    public string get_Preference();
    public void set_Preference(string value);
    public string get_QueryOnQueryString();
    public void set_QueryOnQueryString(string value);
    public Nullable`1<bool> get_Refresh();
    public void set_Refresh(Nullable`1<bool> value);
    public Nullable`1<bool> get_RequestCache();
    public void set_RequestCache(Nullable`1<bool> value);
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
    public String[] get_Routing();
    public void set_Routing(String[] value);
    public TimeSpan get_Scroll();
    public void set_Scroll(TimeSpan value);
    public Nullable`1<long> get_ScrollSize();
    public void set_ScrollSize(Nullable`1<long> value);
    public TimeSpan get_SearchTimeout();
    public void set_SearchTimeout(TimeSpan value);
    public Nullable`1<SearchType> get_SearchType();
    public void set_SearchType(Nullable`1<SearchType> value);
    public Nullable`1<long> get_Slices();
    public void set_Slices(Nullable`1<long> value);
    public String[] get_Sort();
    public void set_Sort(String[] value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public String[] get_SourceExcludes();
    public void set_SourceExcludes(String[] value);
    public String[] get_SourceIncludes();
    public void set_SourceIncludes(String[] value);
    public String[] get_Stats();
    public void set_Stats(String[] value);
    public Nullable`1<long> get_TerminateAfter();
    public void set_TerminateAfter(Nullable`1<long> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public Nullable`1<bool> get_Version();
    public void set_Version(Nullable`1<bool> value);
    public Nullable`1<bool> get_VersionType();
    public void set_VersionType(Nullable`1<bool> value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
    public Nullable`1<bool> get_WaitForCompletion();
    public void set_WaitForCompletion(Nullable`1<bool> value);
}
public class OpenSearch.Net.UpdateByQueryRethrottleRequestParameters : RequestParameters`1<UpdateByQueryRethrottleRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> RequestsPerSecond { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_RequestsPerSecond();
    public void set_RequestsPerSecond(Nullable`1<long> value);
}
public class OpenSearch.Net.UpdateRequestParameters : RequestParameters`1<UpdateRequestParameters> {
    public HttpMethod DefaultHttpMethod { get; }
    public bool SupportsBody { get; }
    public Nullable`1<long> IfPrimaryTerm { get; public set; }
    public Nullable`1<long> IfSequenceNumber { get; public set; }
    public string Lang { get; public set; }
    public Nullable`1<Refresh> Refresh { get; public set; }
    public Nullable`1<bool> RequireAlias { get; public set; }
    public Nullable`1<long> RetryOnConflict { get; public set; }
    public string Routing { get; public set; }
    public Nullable`1<bool> SourceEnabled { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string WaitForActiveShards { get; public set; }
    public virtual HttpMethod get_DefaultHttpMethod();
    public virtual bool get_SupportsBody();
    public Nullable`1<long> get_IfPrimaryTerm();
    public void set_IfPrimaryTerm(Nullable`1<long> value);
    public Nullable`1<long> get_IfSequenceNumber();
    public void set_IfSequenceNumber(Nullable`1<long> value);
    public string get_Lang();
    public void set_Lang(string value);
    public Nullable`1<Refresh> get_Refresh();
    public void set_Refresh(Nullable`1<Refresh> value);
    public Nullable`1<bool> get_RequireAlias();
    public void set_RequireAlias(Nullable`1<bool> value);
    public Nullable`1<long> get_RetryOnConflict();
    public void set_RetryOnConflict(Nullable`1<long> value);
    public string get_Routing();
    public void set_Routing(string value);
    public Nullable`1<bool> get_SourceEnabled();
    public void set_SourceEnabled(Nullable`1<bool> value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_WaitForActiveShards();
    public void set_WaitForActiveShards(string value);
}
internal class OpenSearch.Net.Utf8Json.FormatterNotRegisteredException : Exception {
    public FormatterNotRegisteredException(string message);
}
internal class OpenSearch.Net.Utf8Json.Formatters.AnonymousFormatter`1 : object {
    private JsonSerializeAction`1<T> _serialize;
    private JsonDeserializeFunc`1<T> _deserialize;
    public AnonymousFormatter`1(JsonSerializeAction`1<T> serialize, JsonDeserializeFunc`1<T> deserialize);
    public sealed virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ArrayFormatter`1 : object {
    private static ArrayPool`1<T> ArrayPool;
    private static ArrayFormatter`1();
    public sealed virtual void Serialize(JsonWriter& writer, T[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ArraySegmentFormatter`1 : object {
    private static ArrayPool`1<T> ArrayPool;
    private static ArraySegmentFormatter`1();
    public sealed virtual void Serialize(JsonWriter& writer, ArraySegment`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ArraySegment`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.BigIntegerFormatter : object {
    public static IJsonFormatter`1<BigInteger> Default;
    private static BigIntegerFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, BigInteger value, IJsonFormatterResolver formatterResolver);
    public sealed virtual BigInteger Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.BitArrayFormatter : object {
    public static IJsonFormatter`1<BitArray> Default;
    private static BitArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, BitArray value, IJsonFormatterResolver formatterResolver);
    public sealed virtual BitArray Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.BooleanArrayFormatter : object {
    public static BooleanArrayFormatter Default;
    private static BooleanArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Boolean[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Boolean[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.BooleanFormatter : object {
    public static BooleanFormatter Default;
    private static BooleanFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, bool value, IJsonFormatterResolver formatterResolver);
    public sealed virtual bool Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, bool value, IJsonFormatterResolver formatterResolver);
    public sealed virtual bool DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ByteArrayFormatter : object {
    public static IJsonFormatter`1<Byte[]> Default;
    private static ByteArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Byte[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Byte[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ByteArraySegmentFormatter : object {
    public static IJsonFormatter`1<ArraySegment`1<byte>> Default;
    private static ByteArraySegmentFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, ArraySegment`1<byte> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ArraySegment`1<byte> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ByteFormatter : object {
    public static ByteFormatter Default;
    private static ByteFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, byte value, IJsonFormatterResolver formatterResolver);
    public sealed virtual byte Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, byte value, IJsonFormatterResolver formatterResolver);
    public sealed virtual byte DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.CharArrayFormatter : object {
    public static CharArrayFormatter Default;
    private static CharArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Char[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Char[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.CharFormatter : object {
    public static CharFormatter Default;
    private static CharFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, char value, IJsonFormatterResolver formatterResolver);
    public sealed virtual char Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.CollectionFormatterBase`2 : CollectionFormatterBase`3<TElement, TCollection, TCollection> {
    protected sealed virtual TCollection Complete(TCollection& intermediateCollection);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.CollectionFormatterBase`3 : CollectionFormatterBase`4<TElement, TIntermediate, IEnumerator`1<TElement>, TCollection> {
    protected virtual IEnumerator`1<TElement> GetSourceEnumerator(TCollection source);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.CollectionFormatterBase`4 : object {
    public sealed virtual void Serialize(JsonWriter& writer, TCollection value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TCollection Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    protected abstract virtual TEnumerator GetSourceEnumerator(TCollection source);
    protected abstract virtual TIntermediate Create();
    protected abstract virtual void Add(TIntermediate& collection, int index, TElement value);
    protected abstract virtual TCollection Complete(TIntermediate& intermediateCollection);
}
internal static class OpenSearch.Net.Utf8Json.Formatters.CollectionFormatterHelper : object {
    internal static Byte[][] groupingName;
    internal static AutomataDictionary groupingAutomata;
    private static CollectionFormatterHelper();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ComplexFormatter : object {
    public static IJsonFormatter`1<Complex> Default;
    private static ComplexFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Complex value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Complex Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ConcurrentBagFormatter`1 : CollectionFormatterBase`2<T, ConcurrentBag`1<T>> {
    protected virtual void Add(ConcurrentBag`1& collection, int index, T value);
    protected virtual ConcurrentBag`1<T> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ConcurrentDictionaryFormatter`2 : DictionaryFormatterBase`3<TKey, TValue, ConcurrentDictionary`2<TKey, TValue>> {
    protected virtual void Add(ConcurrentDictionary`2& collection, int index, TKey key, TValue value);
    protected virtual ConcurrentDictionary`2<TKey, TValue> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ConcurrentQueueFormatter`1 : CollectionFormatterBase`2<T, ConcurrentQueue`1<T>> {
    protected virtual void Add(ConcurrentQueue`1& collection, int index, T value);
    protected virtual ConcurrentQueue`1<T> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ConcurrentStackFormatter`1 : CollectionFormatterBase`3<T, ArrayBuffer`1<T>, ConcurrentStack`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ArrayBuffer`1<T> Create();
    protected virtual ConcurrentStack`1<T> Complete(ArrayBuffer`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DateTimeFormatter : object {
    private string _formatString;
    public DateTimeFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, DateTime value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DateTime Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DateTimeOffsetFormatter : object {
    private string _formatString;
    public DateTimeOffsetFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, DateTimeOffset value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DateTimeOffset Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DecimalFormatter : object {
    public static IJsonFormatter`1<decimal> Default;
    private bool _serializeAsString;
    public DecimalFormatter(bool serializeAsString);
    private static DecimalFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, decimal value, IJsonFormatterResolver formatterResolver);
    public sealed virtual decimal Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DictionaryFormatter`2 : DictionaryFormatterBase`5<TKey, TValue, Dictionary`2<TKey, TValue>, Enumerator<TKey, TValue>, Dictionary`2<TKey, TValue>> {
    protected virtual void Add(Dictionary`2& collection, int index, TKey key, TValue value);
    protected virtual Dictionary`2<TKey, TValue> Complete(Dictionary`2& intermediateCollection);
    protected virtual Dictionary`2<TKey, TValue> Create();
    protected virtual Enumerator<TKey, TValue> GetSourceEnumerator(Dictionary`2<TKey, TValue> source);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.DictionaryFormatterBase`3 : DictionaryFormatterBase`4<TKey, TValue, TDictionary, TDictionary> {
    protected virtual TDictionary Complete(TDictionary& intermediateCollection);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.DictionaryFormatterBase`4 : DictionaryFormatterBase`5<TKey, TValue, TIntermediate, IEnumerator`1<KeyValuePair`2<TKey, TValue>>, TDictionary> {
    protected virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetSourceEnumerator(TDictionary source);
}
internal abstract class OpenSearch.Net.Utf8Json.Formatters.DictionaryFormatterBase`5 : object {
    protected bool SkipValue(TValue value);
    public sealed virtual void Serialize(JsonWriter& writer, TDictionary value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TDictionary Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    protected abstract virtual TEnumerator GetSourceEnumerator(TDictionary source);
    protected abstract virtual TIntermediate Create();
    protected abstract virtual void Add(TIntermediate& collection, int index, TKey key, TValue value);
    protected abstract virtual TDictionary Complete(TIntermediate& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DoubleArrayFormatter : object {
    public static DoubleArrayFormatter Default;
    private static DoubleArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Double[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Double[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DoubleFormatter : object {
    public static DoubleFormatter Default;
    private static DoubleFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, double value, IJsonFormatterResolver formatterResolver);
    public sealed virtual double Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, double value, IJsonFormatterResolver formatterResolver);
    public sealed virtual double DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.DynamicObjectTypeFallbackFormatter : object {
    private ThreadsafeTypeKeyHashTable`1<KeyValuePair`2<object, SerializeMethod>> _serializers;
    private IJsonFormatterResolver[] _innerResolvers;
    public DynamicObjectTypeFallbackFormatter(IJsonFormatterResolver[] innerResolvers);
    public sealed virtual void Serialize(JsonWriter& writer, object value, IJsonFormatterResolver formatterResolver);
    public sealed virtual object Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.EnumFormatter`1 : object {
    private static ByteArrayStringHashTable`1<T> NameValueMapping;
    private static Dictionary`2<T, string> ValueNameMapping;
    private static JsonSerializeAction`1<T> DefaultSerializeByUnderlyingValue;
    private static JsonDeserializeFunc`1<T> DefaultDeserializeByUnderlyingValue;
    private bool _serializeByName;
    private JsonSerializeAction`1<T> _serializeByUnderlyingValue;
    private JsonDeserializeFunc`1<T> _deserializeByUnderlyingValue;
    private static EnumFormatter`1();
    public EnumFormatter`1(bool serializeByName);
    public EnumFormatter`1(JsonSerializeAction`1<T> valueSerializeAction, JsonDeserializeFunc`1<T> valueDeserializeAction);
    public sealed virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
public static class OpenSearch.Net.Utf8Json.Formatters.EnumFormatterHelper : object {
    public static object GetSerializeDelegate(Type type, Boolean& isBoxed);
    public static object GetDeserializeDelegate(Type type, Boolean& isBoxed);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ExpandoObjectFormatter : object {
    public static IJsonFormatter`1<ExpandoObject> Default;
    private static ExpandoObjectFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, ExpandoObject value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ExpandoObject Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.FourDimensionalArrayFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, T[0...,0...,0...,0...] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T[0...,0...,0...,0...] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.GenericCollectionFormatter`2 : CollectionFormatterBase`2<TElement, TCollection> {
    protected virtual TCollection Create();
    protected virtual void Add(TCollection& collection, int index, TElement value);
}
internal class OpenSearch.Net.Utf8Json.Formatters.GenericDictionaryFormatter`3 : DictionaryFormatterBase`3<TKey, TValue, TDictionary> {
    protected virtual void Add(TDictionary& collection, int index, TKey key, TValue value);
    protected virtual TDictionary Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.Grouping`2 : object {
    private TKey _key;
    private IEnumerable`1<TElement> _elements;
    public TKey Key { get; }
    public Grouping`2(TKey key, IEnumerable`1<TElement> elements);
    public sealed virtual TKey get_Key();
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class OpenSearch.Net.Utf8Json.Formatters.GuidFormatter : object {
    public static IJsonFormatter`1<Guid> Default;
    private static GuidFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Guid value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Guid Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Guid value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Guid DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.HashSetFormatter`1 : CollectionFormatterBase`4<T, HashSet`1<T>, Enumerator<T>, HashSet`1<T>> {
    protected virtual void Add(HashSet`1& collection, int index, T value);
    protected virtual HashSet`1<T> Complete(HashSet`1& intermediateCollection);
    protected virtual HashSet`1<T> Create();
    protected virtual Enumerator<T> GetSourceEnumerator(HashSet`1<T> source);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int16ArrayFormatter : object {
    public static Int16ArrayFormatter Default;
    private static Int16ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Int16[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Int16[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int16Formatter : object {
    public static Int16Formatter Default;
    private static Int16Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, short value, IJsonFormatterResolver formatterResolver);
    public sealed virtual short Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, short value, IJsonFormatterResolver formatterResolver);
    public sealed virtual short DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int32ArrayFormatter : object {
    public static Int32ArrayFormatter Default;
    private static Int32ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Int32[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Int32[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int32Formatter : object {
    public static Int32Formatter Default;
    private static Int32Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, int value, IJsonFormatterResolver formatterResolver);
    public sealed virtual int Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, int value, IJsonFormatterResolver formatterResolver);
    public sealed virtual int DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int64ArrayFormatter : object {
    public static Int64ArrayFormatter Default;
    private static Int64ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Int64[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Int64[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.Int64Formatter : object {
    public static Int64Formatter Default;
    private static Int64Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, long value, IJsonFormatterResolver formatterResolver);
    public sealed virtual long Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, long value, IJsonFormatterResolver formatterResolver);
    public sealed virtual long DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceCollectionFormatter`1 : CollectionFormatterBase`3<T, List`1<T>, ICollection`1<T>> {
    protected virtual void Add(List`1& collection, int index, T value);
    protected virtual List`1<T> Create();
    protected virtual ICollection`1<T> Complete(List`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceDictionaryFormatter`2 : DictionaryFormatterBase`4<TKey, TValue, Dictionary`2<TKey, TValue>, IDictionary`2<TKey, TValue>> {
    protected virtual void Add(Dictionary`2& collection, int index, TKey key, TValue value);
    protected virtual Dictionary`2<TKey, TValue> Create();
    protected virtual IDictionary`2<TKey, TValue> Complete(Dictionary`2& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceEnumerableFormatter`1 : CollectionFormatterBase`3<T, ArrayBuffer`1<T>, IEnumerable`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ArrayBuffer`1<T> Create();
    protected virtual IEnumerable`1<T> Complete(ArrayBuffer`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceGroupingFormatter`2 : object {
    public sealed virtual void Serialize(JsonWriter& writer, IGrouping`2<TKey, TElement> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual IGrouping`2<TKey, TElement> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceListFormatter`1 : CollectionFormatterBase`3<T, List`1<T>, IList`1<T>> {
    protected virtual void Add(List`1& collection, int index, T value);
    protected virtual List`1<T> Create();
    protected virtual IList`1<T> Complete(List`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceLookupFormatter`2 : object {
    public sealed virtual void Serialize(JsonWriter& writer, ILookup`2<TKey, TElement> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ILookup`2<TKey, TElement> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceReadOnlyCollectionFormatter`1 : CollectionFormatterBase`3<T, ArrayBuffer`1<T>, IReadOnlyCollection`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ArrayBuffer`1<T> Create();
    protected virtual IReadOnlyCollection`1<T> Complete(ArrayBuffer`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceReadOnlyDictionaryFormatter`2 : DictionaryFormatterBase`4<TKey, TValue, Dictionary`2<TKey, TValue>, IReadOnlyDictionary`2<TKey, TValue>> {
    protected virtual void Add(Dictionary`2& collection, int index, TKey key, TValue value);
    protected virtual IReadOnlyDictionary`2<TKey, TValue> Complete(Dictionary`2& intermediateCollection);
    protected virtual Dictionary`2<TKey, TValue> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceReadOnlyListFormatter`1 : CollectionFormatterBase`3<T, ArrayBuffer`1<T>, IReadOnlyList`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ArrayBuffer`1<T> Create();
    protected virtual IReadOnlyList`1<T> Complete(ArrayBuffer`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.InterfaceSetFormatter`1 : CollectionFormatterBase`3<T, HashSet`1<T>, ISet`1<T>> {
    protected virtual void Add(HashSet`1& collection, int index, T value);
    protected virtual ISet`1<T> Complete(HashSet`1& intermediateCollection);
    protected virtual HashSet`1<T> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ISO8601DateTimeFormatter : object {
    public static IJsonFormatter`1<DateTime> Default;
    private static ISO8601DateTimeFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, DateTime value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DateTime Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ISO8601DateTimeOffsetFormatter : object {
    public static IJsonFormatter`1<DateTimeOffset> Default;
    private static ISO8601DateTimeOffsetFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, DateTimeOffset value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DateTimeOffset Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ISO8601TimeSpanFormatter : object {
    public static IJsonFormatter`1<TimeSpan> Default;
    private static Byte[] MinValue;
    private static ISO8601TimeSpanFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, TimeSpan value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TimeSpan Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.KeyValuePairFormatter`2 : object {
    public sealed virtual void Serialize(JsonWriter& writer, KeyValuePair`2<TKey, TValue> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual KeyValuePair`2<TKey, TValue> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.LazyFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, Lazy`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Lazy`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.LinkedListFormatter`1 : CollectionFormatterBase`4<T, LinkedList`1<T>, Enumerator<T>, LinkedList`1<T>> {
    protected virtual void Add(LinkedList`1& collection, int index, T value);
    protected virtual LinkedList`1<T> Complete(LinkedList`1& intermediateCollection);
    protected virtual LinkedList`1<T> Create();
    protected virtual Enumerator<T> GetSourceEnumerator(LinkedList`1<T> source);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ListFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, List`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual List`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
[DefaultMemberAttribute("Item")]
internal class OpenSearch.Net.Utf8Json.Formatters.Lookup`2 : object {
    private Dictionary`2<TKey, IGrouping`2<TKey, TElement>> _groupings;
    public IEnumerable`1<TElement> Item { get; }
    public int Count { get; }
    public Lookup`2(Dictionary`2<TKey, IGrouping`2<TKey, TElement>> groupings);
    public sealed virtual IEnumerable`1<TElement> get_Item(TKey key);
    public sealed virtual int get_Count();
    public sealed virtual bool Contains(TKey key);
    public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericDictionaryFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericInterfaceCollectionFormatter : object {
    public static IJsonFormatter`1<ICollection> Default;
    private static NonGenericInterfaceCollectionFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, ICollection value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ICollection Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericInterfaceDictionaryFormatter : object {
    public static IJsonFormatter`1<IDictionary> Default;
    private static NonGenericInterfaceDictionaryFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, IDictionary value, IJsonFormatterResolver formatterResolver);
    public sealed virtual IDictionary Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericInterfaceEnumerableFormatter : object {
    public static IJsonFormatter`1<IEnumerable> Default;
    private static NonGenericInterfaceEnumerableFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, IEnumerable value, IJsonFormatterResolver formatterResolver);
    public sealed virtual IEnumerable Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericInterfaceListFormatter : object {
    public static IJsonFormatter`1<IList> Default;
    private static NonGenericInterfaceListFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, IList value, IJsonFormatterResolver formatterResolver);
    public sealed virtual IList Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NonGenericListFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableBooleanFormatter : object {
    public static NullableBooleanFormatter Default;
    private static NullableBooleanFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<bool> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<bool> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<bool> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<bool> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableByteFormatter : object {
    public static NullableByteFormatter Default;
    private static NullableByteFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<byte> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<byte> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<byte> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<byte> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableCharFormatter : object {
    public static NullableCharFormatter Default;
    private static NullableCharFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<char> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<char> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableDateTimeFormatter : object {
    private DateTimeFormatter _innerFormatter;
    public NullableDateTimeFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<DateTime> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<DateTime> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableDateTimeOffsetFormatter : object {
    private DateTimeOffsetFormatter _innerFormatter;
    public NullableDateTimeOffsetFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<DateTimeOffset> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<DateTimeOffset> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableDoubleFormatter : object {
    public static NullableDoubleFormatter Default;
    private static NullableDoubleFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<double> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<double> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<double> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<double> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableInt16Formatter : object {
    public static NullableInt16Formatter Default;
    private static NullableInt16Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<short> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<short> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<short> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<short> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableInt32Formatter : object {
    public static NullableInt32Formatter Default;
    private static NullableInt32Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<int> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<int> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<int> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<int> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableInt64Formatter : object {
    public static NullableInt64Formatter Default;
    private static NullableInt64Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<long> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<long> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<long> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<long> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableSByteFormatter : object {
    public static NullableSByteFormatter Default;
    private static NullableSByteFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<sbyte> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<sbyte> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<sbyte> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<sbyte> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableSingleFormatter : object {
    public static NullableSingleFormatter Default;
    private static NullableSingleFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<float> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<float> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<float> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<float> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableStringArrayFormatter : object {
    public static NullableStringArrayFormatter Default;
    private static NullableStringArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, String[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual String[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableStringFormatter : object {
    public static IJsonFormatter`1<string> Default;
    private static NullableStringFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, string value, IJsonFormatterResolver formatterResolver);
    public sealed virtual string Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, string value, IJsonFormatterResolver formatterResolver);
    public sealed virtual string DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableTimeSpanFormatter : object {
    private TimeSpanFormatter _innerFormatter;
    public NullableTimeSpanFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<TimeSpan> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<TimeSpan> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableUInt16Formatter : object {
    public static NullableUInt16Formatter Default;
    private static NullableUInt16Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<ushort> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<ushort> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<ushort> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<ushort> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableUInt32Formatter : object {
    public static NullableUInt32Formatter Default;
    private static NullableUInt32Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<UInt32> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<UInt32> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<UInt32> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<UInt32> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.NullableUInt64Formatter : object {
    public static NullableUInt64Formatter Default;
    private static NullableUInt64Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<ulong> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<ulong> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, Nullable`1<ulong> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<ulong> DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ObservableCollectionFormatter`1 : CollectionFormatterBase`2<T, ObservableCollection`1<T>> {
    protected virtual void Add(ObservableCollection`1& collection, int index, T value);
    protected virtual ObservableCollection`1<T> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.PrimitiveObjectFormatter : object {
    public static IJsonFormatter`1<object> Default;
    private static Dictionary`2<Type, int> TypeToJumpCode;
    private static PrimitiveObjectFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, object value, IJsonFormatterResolver formatterResolver);
    public sealed virtual object Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.QueueFormatter`1 : CollectionFormatterBase`4<T, Queue`1<T>, Enumerator<T>, Queue`1<T>> {
    protected virtual void Add(Queue`1& collection, int index, T value);
    protected virtual Queue`1<T> Create();
    protected virtual Enumerator<T> GetSourceEnumerator(Queue`1<T> source);
    protected virtual Queue`1<T> Complete(Queue`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ReadOnlyCollectionFormatter`1 : CollectionFormatterBase`3<T, ArrayBuffer`1<T>, ReadOnlyCollection`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ReadOnlyCollection`1<T> Complete(ArrayBuffer`1& intermediateCollection);
    protected virtual ArrayBuffer`1<T> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ReadOnlyDictionaryFormatter`2 : DictionaryFormatterBase`4<TKey, TValue, Dictionary`2<TKey, TValue>, ReadOnlyDictionary`2<TKey, TValue>> {
    protected virtual void Add(Dictionary`2& collection, int index, TKey key, TValue value);
    protected virtual ReadOnlyDictionary`2<TKey, TValue> Complete(Dictionary`2& intermediateCollection);
    protected virtual Dictionary`2<TKey, TValue> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.ReadOnlyObservableCollectionFormatter`1 : CollectionFormatterBase`3<T, ObservableCollection`1<T>, ReadOnlyObservableCollection`1<T>> {
    protected virtual void Add(ObservableCollection`1& collection, int index, T value);
    protected virtual ObservableCollection`1<T> Create();
    protected virtual ReadOnlyObservableCollection`1<T> Complete(ObservableCollection`1& intermediateCollection);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SByteArrayFormatter : object {
    public static SByteArrayFormatter Default;
    private static SByteArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, SByte[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual SByte[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SByteFormatter : object {
    public static SByteFormatter Default;
    private static SByteFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, sbyte value, IJsonFormatterResolver formatterResolver);
    public sealed virtual sbyte Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, sbyte value, IJsonFormatterResolver formatterResolver);
    public sealed virtual sbyte DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SingleArrayFormatter : object {
    public static SingleArrayFormatter Default;
    private static SingleArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Single[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Single[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SingleFormatter : object {
    public static SingleFormatter Default;
    private static SingleFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, float value, IJsonFormatterResolver formatterResolver);
    public sealed virtual float Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, float value, IJsonFormatterResolver formatterResolver);
    public sealed virtual float DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SortedDictionaryFormatter`2 : DictionaryFormatterBase`5<TKey, TValue, SortedDictionary`2<TKey, TValue>, Enumerator<TKey, TValue>, SortedDictionary`2<TKey, TValue>> {
    protected virtual void Add(SortedDictionary`2& collection, int index, TKey key, TValue value);
    protected virtual SortedDictionary`2<TKey, TValue> Complete(SortedDictionary`2& intermediateCollection);
    protected virtual SortedDictionary`2<TKey, TValue> Create();
    protected virtual Enumerator<TKey, TValue> GetSourceEnumerator(SortedDictionary`2<TKey, TValue> source);
}
internal class OpenSearch.Net.Utf8Json.Formatters.SortedListFormatter`2 : DictionaryFormatterBase`3<TKey, TValue, SortedList`2<TKey, TValue>> {
    protected virtual void Add(SortedList`2& collection, int index, TKey key, TValue value);
    protected virtual SortedList`2<TKey, TValue> Create();
}
internal class OpenSearch.Net.Utf8Json.Formatters.StackFormatter`1 : CollectionFormatterBase`4<T, ArrayBuffer`1<T>, Enumerator<T>, Stack`1<T>> {
    protected virtual void Add(ArrayBuffer`1& collection, int index, T value);
    protected virtual ArrayBuffer`1<T> Create();
    protected virtual Enumerator<T> GetSourceEnumerator(Stack`1<T> source);
    protected virtual Stack`1<T> Complete(ArrayBuffer`1& intermediateCollection);
}
internal static class OpenSearch.Net.Utf8Json.Formatters.StandardClassLibraryFormatterHelper : object {
    internal static Byte[][] keyValuePairName;
    internal static AutomataDictionary keyValuePairAutomata;
    private static StandardClassLibraryFormatterHelper();
}
internal class OpenSearch.Net.Utf8Json.Formatters.StaticNullableFormatter`1 : object {
    private IJsonFormatter`1<T> _underlyingFormatter;
    public StaticNullableFormatter`1(IJsonFormatter`1<T> underlyingFormatter);
    public StaticNullableFormatter`1(Type formatterType, Object[] formatterArguments);
    public sealed virtual void Serialize(JsonWriter& writer, Nullable`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Nullable`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.StringBuilderFormatter : object {
    public static IJsonFormatter`1<StringBuilder> Default;
    private static StringBuilderFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, StringBuilder value, IJsonFormatterResolver formatterResolver);
    public sealed virtual StringBuilder Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TaskUnitFormatter : object {
    public static IJsonFormatter`1<Task> Default;
    private static TaskUnitFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Task value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Task Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TaskValueFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, Task`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Task`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ThreeDimensionalArrayFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, T[0...,0...,0...] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T[0...,0...,0...] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TimeSpanFormatter : object {
    private string _formatString;
    public TimeSpanFormatter(string formatString);
    public sealed virtual void Serialize(JsonWriter& writer, TimeSpan value, IJsonFormatterResolver formatterResolver);
    public sealed virtual TimeSpan Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`1 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`1();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`1<T1> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`1<T1> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`2 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`2();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`2<T1, T2> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`2<T1, T2> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`3 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`3();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`3<T1, T2, T3> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`3<T1, T2, T3> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`4 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`4();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`4<T1, T2, T3, T4> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`4<T1, T2, T3, T4> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`5 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`5();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`5<T1, T2, T3, T4, T5> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`5<T1, T2, T3, T4, T5> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`6 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`6();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`6<T1, T2, T3, T4, T5, T6> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`6<T1, T2, T3, T4, T5, T6> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`7 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`7();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`7<T1, T2, T3, T4, T5, T6, T7> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`7<T1, T2, T3, T4, T5, T6, T7> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TupleFormatter`8 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static TupleFormatter`8();
    public sealed virtual void Serialize(JsonWriter& writer, Tuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Tuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal static class OpenSearch.Net.Utf8Json.Formatters.TupleFormatterHelper : object {
    internal static Byte[][] nameCache1;
    internal static AutomataDictionary dictionary1;
    internal static Byte[][] nameCache2;
    internal static AutomataDictionary dictionary2;
    internal static Byte[][] nameCache3;
    internal static AutomataDictionary dictionary3;
    internal static Byte[][] nameCache4;
    internal static AutomataDictionary dictionary4;
    internal static Byte[][] nameCache5;
    internal static AutomataDictionary dictionary5;
    internal static Byte[][] nameCache6;
    internal static AutomataDictionary dictionary6;
    internal static Byte[][] nameCache7;
    internal static AutomataDictionary dictionary7;
    internal static Byte[][] nameCache8;
    internal static AutomataDictionary dictionary8;
    private static TupleFormatterHelper();
}
internal class OpenSearch.Net.Utf8Json.Formatters.TwoDimensionalArrayFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, T[0...,0...] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T[0...,0...] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.TypeFormatter : object {
    public static TypeFormatter Default;
    private static Regex SubtractFullNameRegex;
    private bool _serializeAssemblyQualifiedName;
    private bool _deserializeSubtractAssemblyQualifiedName;
    private bool _throwOnError;
    public TypeFormatter(bool serializeAssemblyQualifiedName, bool deserializeSubtractAssemblyQualifiedName, bool throwOnError);
    private static TypeFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Type value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Type Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt16ArrayFormatter : object {
    public static UInt16ArrayFormatter Default;
    private static UInt16ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, UInt16[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual UInt16[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt16Formatter : object {
    public static UInt16Formatter Default;
    private static UInt16Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, ushort value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ushort Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, ushort value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ushort DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt32ArrayFormatter : object {
    public static UInt32ArrayFormatter Default;
    private static UInt32ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, UInt32[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual UInt32[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt32Formatter : object {
    public static UInt32Formatter Default;
    private static UInt32Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, UInt32 value, IJsonFormatterResolver formatterResolver);
    public sealed virtual UInt32 Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, UInt32 value, IJsonFormatterResolver formatterResolver);
    public sealed virtual UInt32 DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt64ArrayFormatter : object {
    public static UInt64ArrayFormatter Default;
    private static UInt64ArrayFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, UInt64[] value, IJsonFormatterResolver formatterResolver);
    public sealed virtual UInt64[] Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UInt64Formatter : object {
    public static UInt64Formatter Default;
    private static UInt64Formatter();
    public sealed virtual void Serialize(JsonWriter& writer, ulong value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ulong Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
    public sealed virtual void SerializeToPropertyName(JsonWriter& writer, ulong value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ulong DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UnixTimestampDateTimeFormatter : object {
    public sealed virtual void Serialize(JsonWriter& writer, DateTime value, IJsonFormatterResolver formatterResolver);
    public sealed virtual DateTime Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.UriFormatter : object {
    public static IJsonFormatter`1<Uri> Default;
    private static UriFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Uri value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Uri Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTaskFormatter`1 : object {
    public sealed virtual void Serialize(JsonWriter& writer, ValueTask`1<T> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTask`1<T> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`1 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`1();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`1<T1> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`1<T1> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`2 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`2();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`2<T1, T2> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`2<T1, T2> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`3 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`3();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`3<T1, T2, T3> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`3<T1, T2, T3> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`4 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`4();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`4<T1, T2, T3, T4> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`4<T1, T2, T3, T4> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`5 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`5();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`5<T1, T2, T3, T4, T5> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`5<T1, T2, T3, T4, T5> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`6 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`6();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`6<T1, T2, T3, T4, T5, T6> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`6<T1, T2, T3, T4, T5, T6> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`7 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`7();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.ValueTupleFormatter`8 : object {
    private static Byte[][] Cache;
    private static AutomataDictionary Dictionary;
    private static ValueTupleFormatter`8();
    public sealed virtual void Serialize(JsonWriter& writer, ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> value, IJsonFormatterResolver formatterResolver);
    public sealed virtual ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.Formatters.VersionFormatter : object {
    public static IJsonFormatter`1<Version> Default;
    private static VersionFormatter();
    public sealed virtual void Serialize(JsonWriter& writer, Version value, IJsonFormatterResolver formatterResolver);
    public sealed virtual Version Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal interface OpenSearch.Net.Utf8Json.IJsonFormatter {
}
internal interface OpenSearch.Net.Utf8Json.IJsonFormatter`1 {
    public abstract virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public abstract virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal interface OpenSearch.Net.Utf8Json.IJsonFormatterResolver {
    public abstract virtual IJsonFormatter`1<T> GetFormatter();
}
internal interface OpenSearch.Net.Utf8Json.IJsonProperty {
    public string Name { get; public set; }
    public int Order { get; }
    public bool Ignore { get; public set; }
    public Nullable`1<bool> AllowPrivate { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_Order();
    public abstract virtual bool get_Ignore();
    public abstract virtual void set_Ignore(bool value);
    public abstract virtual Nullable`1<bool> get_AllowPrivate();
    public abstract virtual void set_AllowPrivate(Nullable`1<bool> value);
}
[AttributeUsageAttribute("1024")]
internal class OpenSearch.Net.Utf8Json.InterfaceDataContractAttribute : Attribute {
}
internal class OpenSearch.Net.Utf8Json.Internal.ArrayBuffer`1 : ValueType {
    public T[] Buffer;
    public int Size;
    public ArrayBuffer`1(int initialSize);
    public void Add(T value);
    public T[] ToArray();
}
internal class OpenSearch.Net.Utf8Json.Internal.ArrayPool`1 : object {
    private int _bufferLength;
    private object _gate;
    private int _index;
    private T[][] _buffers;
    public ArrayPool`1(int bufferLength);
    public T[] Rent();
    public void Return(T[] array);
}
internal class OpenSearch.Net.Utf8Json.Internal.AutomataDictionary : object {
    private AutomataNode _root;
    public void Add(string str, int value);
    public void Add(Byte[] bytes, int value);
    public bool TryGetValue(ArraySegment`1<byte> bytes, Int32& value);
    private bool TryGetValue(Byte[] bytes, int offset, int count, Int32& value);
    public bool TryGetValueSafe(ArraySegment`1<byte> key, Int32& value);
    public virtual string ToString();
    private static void ToStringCore(IEnumerable`1<AutomataNode> nexts, StringBuilder sb, int depth);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, int>> GetEnumerator();
    [IteratorStateMachineAttribute("OpenSearch.Net.Utf8Json.Internal.AutomataDictionary/<YieldCore>d__11")]
private static IEnumerable`1<KeyValuePair`2<string, int>> YieldCore(IEnumerable`1<AutomataNode> nexts);
    public void EmitMatch(ILGenerator il, LocalBuilder p, LocalBuilder rest, LocalBuilder key, Action`1<KeyValuePair`2<string, int>> onFound, Action onNotFound);
}
internal static class OpenSearch.Net.Utf8Json.Internal.AutomataKeyGen : object {
    public static MethodInfo GetKeyMethod;
    private static AutomataKeyGen();
    public static ulong GetKey(Byte*& p, Int32& rest);
    public static ulong GetKeySafe(Byte[] bytes, Int32& offset, Int32& rest);
}
internal static class OpenSearch.Net.Utf8Json.Internal.BinaryUtil : object {
    private static int ArrayMaxSize;
    public static void EnsureCapacity(Byte[]& bytes, int offset, int appendLength);
    public static void FastResize(Byte[]& array, int newSize);
    public static Byte[] FastCloneWithResize(Byte[] src, int newSize);
    public static Byte[] ToArray(ArraySegment`1& src);
}
internal static class OpenSearch.Net.Utf8Json.Internal.ByteArrayComparer : object {
    private static bool Is32Bit;
    private static ByteArrayComparer();
    public static int GetHashCode(Byte[] bytes, int offset, int count);
    public static bool Equals(Byte[] xs, int xsOffset, int xsCount, Byte[] ys);
    public static bool Equals(Byte[] xs, int xsOffset, int xsCount, Byte[] ys, int ysOffset, int ysCount);
}
internal class OpenSearch.Net.Utf8Json.Internal.ByteArrayStringHashTable`1 : object {
    private Entry[][] _buckets;
    private ulong _indexFor;
    private static bool Is32Bit;
    public ByteArrayStringHashTable`1(int capacity);
    public ByteArrayStringHashTable`1(int capacity, float loadFactor);
    private static ByteArrayStringHashTable`1();
    public void Add(string key, T value);
    public void Add(Byte[] key, T value);
    private bool TryAddInternal(Byte[] key, T value);
    public bool TryGetValue(ArraySegment`1<byte> key, T& value);
    private static ulong ByteArrayGetHashCode(Byte[] x, int offset, int count);
    private static int CalculateCapacity(int collectionSize, float loadFactor);
    [IteratorStateMachineAttribute("OpenSearch.Net.Utf8Json.Internal.ByteArrayStringHashTable`1/<GetEnumerator>d__11")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.CachedPower : ValueType {
    public ulong Significand;
    public short BinaryExponent;
    public short DecimalExponent;
    public CachedPower(ulong significand, short binaryExponent, short decimalExponent);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.DiyFp : ValueType {
    public static int KSignificandSize;
    public static ulong KUint64Msb;
    public ulong F;
    public int E;
    public DiyFp(ulong significand, int exponent);
    public void Subtract(DiyFp& other);
    public static DiyFp Minus(DiyFp& a, DiyFp& b);
    public static DiyFp op_Subtraction(DiyFp lhs, DiyFp rhs);
    public void Multiply(DiyFp& other);
    public static DiyFp Times(DiyFp& a, DiyFp& b);
    public static DiyFp op_Multiply(DiyFp lhs, DiyFp rhs);
    public void Normalize();
    public static DiyFp Normalize(DiyFp& a);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.Double : ValueType {
    private static ulong KSignMask;
    private static ulong KExponentMask;
    private static ulong KSignificandMask;
    private static ulong KHiddenBit;
    private static int KPhysicalSignificandSize;
    private static int KSignificandSize;
    private static int KExponentBias;
    private static int KDenormalExponent;
    private static int KMaxExponent;
    private static ulong KInfinity;
    private static ulong KNaN;
    private ulong _d64;
    public Double(double d);
    public Double(DiyFp d);
    public DiyFp AsDiyFp();
    public DiyFp AsNormalizedDiyFp();
    public ulong AsUint64();
    public double NextDouble();
    public double PreviousDouble();
    public int Exponent();
    public ulong Significand();
    public bool IsDenormal();
    public bool IsSpecial();
    public bool IsNan();
    public bool IsInfinite();
    public int Sign();
    public DiyFp UpperBoundary();
    public void NormalizedBoundaries(DiyFp& out_m_minus, DiyFp& out_m_plus);
    public bool LowerBoundaryIsCloser();
    public double value();
    public static int SignificandSizeForOrderOfMagnitude(int order);
    public static double Infinity();
    public static double NaN();
    public static ulong DiyFpToUint64(DiyFp diy_fp);
}
internal static class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.DoubleToStringConverter : object {
    [ThreadStaticAttribute]
private static Byte[] _decimalRepBuffer;
    [ThreadStaticAttribute]
private static Byte[] _exponentialRepBuffer;
    [ThreadStaticAttribute]
private static Byte[] _toStringBuffer;
    private static Byte[] InfinitySymbol;
    private static Byte[] NanSymbol;
    private static Flags flags_;
    private static char ExponentCharacter;
    private static int DecimalInShortestLow;
    private static int DecimalInShortestHigh;
    private static int KBase10MaximalLength;
    private static int KFastDtoaMaximalLength;
    private static int KFastDtoaMaximalSingleLength;
    private static int KMinimalTargetExponent;
    private static int KMaximalTargetExponent;
    private static UInt32[] KSmallPowersOfTen;
    private static DoubleToStringConverter();
    private static Byte[] GetDecimalRepBuffer(int size);
    private static Byte[] GetExponentialRepBuffer(int size);
    private static Byte[] GetToStringBuffer();
    public static int GetBytes(Byte[]& buffer, int offset, float value);
    public static int GetBytes(Byte[]& buffer, int offset, double value);
    private static bool RoundWeed(Byte[] buffer, int length, ulong distance_too_high_w, ulong unsafe_interval, ulong rest, ulong ten_kappa, ulong unit);
    private static void BiggestPowerTen(UInt32 number, int number_bits, UInt32& power, Int32& exponent_plus_one);
    private static bool DigitGen(DiyFp low, DiyFp w, DiyFp high, Byte[] buffer, Int32& length, Int32& kappa);
    private static bool Grisu3(double v, FastDtoaMode mode, Byte[] buffer, Int32& length, Int32& decimal_exponent);
    private static bool FastDtoa(double v, FastDtoaMode mode, Byte[] buffer, Int32& length, Int32& decimal_point);
    private static bool HandleSpecialValues(double value, InternalStringBuilder& result_builder);
    private static bool ToShortestIeeeNumber(double value, InternalStringBuilder& result_builder, DtoaMode mode);
    private static void CreateDecimalRepresentation(Byte[] decimal_digits, int length, int decimal_point, int digits_after_point, InternalStringBuilder& result_builder);
    private static void CreateExponentialRepresentation(Byte[] decimal_digits, int length, int exponent, InternalStringBuilder& result_builder);
    private static bool DoubleToAscii(double v, DtoaMode mode, int requested_digits, Byte[] vector, Boolean& sign, Int32& length, Int32& point);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.InternalStringBuilder : ValueType {
    public Byte[] Buffer;
    public int Offset;
    public InternalStringBuilder(Byte[] buffer, int position);
    public void AddCharacter(byte str);
    public void AddString(Byte[] str);
    public void AddSubstring(Byte[] str, int length);
    public void AddSubstring(Byte[] str, int start, int length);
    public void AddPadding(byte c, int count);
    public void AddStringSlow(string str);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.Iterator : ValueType {
    private Byte[] _buffer;
    private int _offset;
    public byte Value { get; }
    public Iterator(Byte[] buffer, int offset);
    public byte get_Value();
    public static Iterator op_Increment(Iterator self);
    public static Iterator op_Addition(Iterator self, int length);
    public static int op_Subtraction(Iterator lhs, Iterator rhs);
    public static bool op_Equality(Iterator lhs, Iterator rhs);
    public static bool op_Inequality(Iterator lhs, Iterator rhs);
    public static bool op_Equality(Iterator lhs, char rhs);
    public static bool op_Inequality(Iterator lhs, char rhs);
    public static bool op_Equality(Iterator lhs, byte rhs);
    public static bool op_Inequality(Iterator lhs, byte rhs);
    public static bool op_GreaterThanOrEqual(Iterator lhs, char rhs);
    public static bool op_LessThanOrEqual(Iterator lhs, char rhs);
    public static bool op_GreaterThan(Iterator lhs, char rhs);
    public static bool op_LessThan(Iterator lhs, char rhs);
}
internal static class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.PowersOfTenCache : object {
    private static CachedPower[] KCachedPowers;
    public static int KCachedPowersOffset;
    public static double KD1Log210;
    public static int KDecimalExponentDistance;
    public static int KMinDecimalExponent;
    public static int KMaxDecimalExponent;
    private static PowersOfTenCache();
    public static void GetCachedPowerForBinaryExponentRange(int minExponent, int maxExponent, DiyFp& power, Int32& decimalExponent);
    public static void GetCachedPowerForDecimalExponent(int requestedExponent, DiyFp& power, Int32& foundExponent);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.Single : ValueType {
    private static int KExponentBias;
    private static int KDenormalExponent;
    private static int KMaxExponent;
    private static UInt32 KInfinity;
    private static UInt32 KNaN;
    private static UInt32 KSignMask;
    private static UInt32 KExponentMask;
    private static UInt32 KSignificandMask;
    private static UInt32 KHiddenBit;
    private static int KPhysicalSignificandSize;
    public static int KSignificandSize;
    private UInt32 _d32;
    public Single(float f);
    public DiyFp AsDiyFp();
    public UInt32 AsUint32();
    public int Exponent();
    public UInt32 Significand();
    public bool IsDenormal();
    public bool IsSpecial();
    public bool IsNan();
    public bool IsInfinite();
    public int Sign();
    public void NormalizedBoundaries(DiyFp& out_m_minus, DiyFp& out_m_plus);
    public DiyFp UpperBoundary();
    public bool LowerBoundaryIsCloser();
    public float value();
    public static float Infinity();
    public static float NaN();
}
internal static class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.StringToDouble : object {
    [ThreadStaticAttribute]
private static Byte[] _copyBuffer;
    private static int KMaxExactDoubleIntegerDecimalDigits;
    private static int KMaxUint64DecimalDigits;
    private static int KMaxDecimalPower;
    private static int KMinDecimalPower;
    private static ulong KMaxUint64;
    private static Double[] ExactPowersOfTen;
    private static int KExactPowersOfTenSize;
    private static int KMaxSignificantDecimalDigits;
    private static StringToDouble();
    private static Byte[] GetCopyBuffer();
    private static Vector TrimLeadingZeros(Vector buffer);
    private static Vector TrimTrailingZeros(Vector buffer);
    private static void CutToMaxSignificantDigits(Vector buffer, int exponent, Byte[] significant_buffer, Int32& significant_exponent);
    private static void TrimAndCut(Vector buffer, int exponent, Byte[] buffer_copy_space, int space_size, Vector& trimmed, Int32& updated_exponent);
    private static ulong ReadUint64(Vector buffer, Int32& number_of_read_digits);
    private static void ReadDiyFp(Vector buffer, DiyFp& result, Int32& remaining_decimals);
    private static bool DoubleStrtod(Vector trimmed, int exponent, Double& result);
    private static DiyFp AdjustmentPowerOfTen(int exponent);
    private static bool DiyFpStrtod(Vector buffer, int exponent, Double& result);
    private static bool ComputeGuess(Vector trimmed, int exponent, Double& guess);
    public static Nullable`1<double> Strtod(Vector buffer, int exponent);
    public static Nullable`1<float> Strtof(Vector buffer, int exponent);
}
internal static class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.StringToDoubleConverter : object {
    [ThreadStaticAttribute]
private static Byte[] _kBuffer;
    [ThreadStaticAttribute]
private static Byte[] _fallbackBuffer;
    private static Flags flags_;
    private static double empty_string_value_;
    private static double junk_string_value_;
    private static int kMaxSignificantDigits;
    private static int kBufferSize;
    private static Byte[] infinity_symbol_;
    private static Byte[] nan_symbol_;
    private static Byte[] kWhitespaceTable7;
    private static int kWhitespaceTable7Length;
    private static UInt16[] kWhitespaceTable16;
    private static int kWhitespaceTable16Length;
    private static StringToDoubleConverter();
    private static Byte[] GetBuffer();
    private static Byte[] GetFallbackBuffer();
    public static double ToDouble(Byte[] buffer, int offset, Int32& readCount);
    public static float ToSingle(Byte[] buffer, int offset, Int32& readCount);
    private static bool IsWhitespace(int x);
    private static bool AdvanceToNonspace(Iterator& current, Iterator end);
    private static bool ConsumeSubString(Iterator& current, Iterator end, Byte[] substring);
    private static bool ConsumeFirstCharacter(Iterator& iter, Byte[] str, int offset);
    private static double SignedZero(bool sign);
    private static double StringToIeee(Iterator input, int length, bool read_as_double, Int32& processed_characters_count);
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.UnionDoubleULong : ValueType {
    public double d;
    public ulong u64;
}
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.UnionFloatUInt : ValueType {
    public float f;
    public UInt32 u32;
}
[DefaultMemberAttribute("Item")]
internal class OpenSearch.Net.Utf8Json.Internal.DoubleConversion.Vector : ValueType {
    public Byte[] Bytes;
    public int Start;
    public int Length;
    public byte Item { get; public set; }
    public Vector(Byte[] bytes, int start, int length);
    public byte get_Item(int i);
    public void set_Item(int i, byte value);
    public int length();
    public byte First();
    public byte Last();
    public bool IsEmpty();
    public Vector SubVector(int from, int to);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.ArgumentField : ValueType {
    private int _i;
    private bool _ref;
    private ILGenerator _il;
    public ArgumentField(ILGenerator il, int i, bool ref);
    public ArgumentField(ILGenerator il, int i, Type type);
    public void EmitLoad();
    public void EmitStore();
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.DynamicAssembly : object {
    private static Byte[] PublicKey;
    private ModuleBuilder _moduleBuilder;
    private object _gate;
    public DynamicAssembly(string moduleName);
    private static DynamicAssembly();
    public TypeBuilder DefineType(string name, TypeAttributes attr);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces);
}
internal static class OpenSearch.Net.Utf8Json.Internal.Emit.ExpressionUtility : object {
    private static MethodInfo GetMethodInfoCore(LambdaExpression expression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`1<T>> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Action> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`2<T, TR>> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Action`1<T>> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Action`2<TArg1, TArg2>> expression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`3<T, TArg1, TR>> expression);
    private static MemberInfo GetMemberInfoCore(Expression`1<T> source);
    public static PropertyInfo GetPropertyInfo(Expression`1<Func`2<T, TR>> expression);
    public static FieldInfo GetFieldInfo(Expression`1<Func`2<T, TR>> expression);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Utf8Json.Internal.Emit.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void EmitLdloc(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitLdloc(ILGenerator il, LocalBuilder local);
    [ExtensionAttribute]
public static void EmitStloc(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitStloc(ILGenerator il, LocalBuilder local);
    [ExtensionAttribute]
public static void EmitLdloca(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitLdloca(ILGenerator il, LocalBuilder local);
    [ExtensionAttribute]
public static void EmitTrue(ILGenerator il);
    [ExtensionAttribute]
public static void EmitFalse(ILGenerator il);
    [ExtensionAttribute]
private static void EmitBoolean(ILGenerator il, bool value);
    [ExtensionAttribute]
public static void EmitLdc_I4(ILGenerator il, int value);
    [ExtensionAttribute]
public static void EmitUnboxOrCast(ILGenerator il, Type type);
    [ExtensionAttribute]
public static void EmitBoxOrDoNothing(ILGenerator il, Type type);
    [ExtensionAttribute]
public static void EmitLdarg(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitLoadThis(ILGenerator il);
    [ExtensionAttribute]
public static void EmitLdarga(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitStarg(ILGenerator il, int index);
    [ExtensionAttribute]
public static void EmitPop(ILGenerator il, int count);
    [ExtensionAttribute]
public static void EmitCall(ILGenerator il, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void EmitLdfld(ILGenerator il, FieldInfo fieldInfo);
    [ExtensionAttribute]
public static void EmitLdsfld(ILGenerator il, FieldInfo fieldInfo);
    [ExtensionAttribute]
public static void EmitRet(ILGenerator il);
    [ExtensionAttribute]
public static void EmitIntZeroReturn(ILGenerator il);
    [ExtensionAttribute]
public static void EmitNullReturn(ILGenerator il);
    [ExtensionAttribute]
public static void EmitULong(ILGenerator il, ulong value);
    [ExtensionAttribute]
public static void EmitThrowNotimplemented(ILGenerator il);
    [ExtensionAttribute]
public static void EmitIncrementFor(ILGenerator il, LocalBuilder conditionGreater, Action`1<LocalBuilder> emitBody);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.ILStreamReader : BinaryReader {
    private static OpCode[] OneByteOpCodes;
    private static OpCode[] TwoByteOpCodes;
    private int _endPosition;
    public int CurrentPosition { get; }
    public bool EndOfStream { get; }
    private static ILStreamReader();
    public ILStreamReader(Byte[] ilByteArray);
    public int get_CurrentPosition();
    public bool get_EndOfStream();
    public OpCode ReadOpCode();
    public int ReadMetadataToken();
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.InnerExceptionMetaMember : MetaMember {
    private static MethodInfo GetInnerException;
    private static MethodInfo NonGenericSerialize;
    internal ArgumentField ArgWriter;
    internal ArgumentField ArgValue;
    internal ArgumentField ArgResolver;
    public InnerExceptionMetaMember(string name);
    private static InnerExceptionMetaMember();
    public virtual void EmitLoadValue(ILGenerator il);
    public virtual void EmitStoreValue(ILGenerator il);
    public void EmitSerializeDirectly(ILGenerator il);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.MetaMember : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWritable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadable>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldInfo <FieldInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo[] <InterfacePropertyInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ShouldSerializeMethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ShouldSerializeTypeMethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <JsonFormatter>k__BackingField;
    public string Name { get; }
    public string MemberName { get; }
    public bool IsProperty { get; }
    public bool IsField { get; }
    public bool IsWritable { get; }
    public bool IsReadable { get; }
    public Type Type { get; }
    public FieldInfo FieldInfo { get; }
    public PropertyInfo PropertyInfo { get; }
    public PropertyInfo[] InterfacePropertyInfos { get; }
    public MethodInfo ShouldSerializeMethodInfo { get; }
    public MethodInfo ShouldSerializeTypeMethodInfo { get; }
    public object JsonFormatter { get; }
    protected MetaMember(Type type, string name, string memberName, bool isWritable, bool isReadable);
    public MetaMember(FieldInfo info, string name, object jsonFormatter, bool allowPrivate);
    public MetaMember(PropertyInfo info, string name, PropertyInfo[] interfaceInfos, object jsonFormatter, bool allowPrivate);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    public bool get_IsProperty();
    public bool get_IsField();
    [CompilerGeneratedAttribute]
public bool get_IsWritable();
    [CompilerGeneratedAttribute]
public bool get_IsReadable();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldInfo();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public PropertyInfo[] get_InterfacePropertyInfos();
    [CompilerGeneratedAttribute]
public MethodInfo get_ShouldSerializeMethodInfo();
    [CompilerGeneratedAttribute]
public MethodInfo get_ShouldSerializeTypeMethodInfo();
    [CompilerGeneratedAttribute]
public object get_JsonFormatter();
    private static MethodInfo GetShouldSerialize(MemberInfo info);
    public AttributeDeclaringType`1<T> GetCustomAttribute(bool inherit);
    public virtual void EmitLoadValue(ILGenerator il);
    public virtual void EmitStoreValue(ILGenerator il);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.MetaMethodInfoComparer : object {
    public static MetaMethodInfoComparer Default;
    private static MetaMethodInfoComparer();
    public sealed virtual bool Equals(MethodInfo x, MethodInfo y);
    public sealed virtual int GetHashCode(MethodInfo obj);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.MetaType : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConcreteClass>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <BestMatchConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaMember[] <ConstructorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaMember[] <Members>k__BackingField;
    public Type Type { get; }
    public bool IsClass { get; }
    public bool IsStruct { get; }
    public bool IsConcreteClass { get; }
    public ConstructorInfo BestMatchConstructor { get; internal set; }
    public MetaMember[] ConstructorParameters { get; internal set; }
    public MetaMember[] Members { get; internal set; }
    public MetaType(Type type, Func`2<string, string> nameMutator, Func`2<MemberInfo, JsonProperty> propertyMapper, bool allowPrivate);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsClass();
    public bool get_IsStruct();
    [CompilerGeneratedAttribute]
public bool get_IsConcreteClass();
    [CompilerGeneratedAttribute]
public ConstructorInfo get_BestMatchConstructor();
    [CompilerGeneratedAttribute]
internal void set_BestMatchConstructor(ConstructorInfo value);
    [CompilerGeneratedAttribute]
public MetaMember[] get_ConstructorParameters();
    [CompilerGeneratedAttribute]
internal void set_ConstructorParameters(MetaMember[] value);
    [CompilerGeneratedAttribute]
public MetaMember[] get_Members();
    [CompilerGeneratedAttribute]
internal void set_Members(MetaMember[] value);
    private static TAttribute GetCustomAttribute(PropertyInfo propertyInfo, bool inherit, List`1<PropertyInfo> interfaceProperties);
    private static bool TryGetNextConstructor(IEnumerator`1<ConstructorInfo> ctorEnumerator, ConstructorInfo& ctor);
}
internal class OpenSearch.Net.Utf8Json.Internal.Emit.StringConstantValueMetaMember : MetaMember {
    private string _constant;
    public StringConstantValueMetaMember(string name, string constant);
    public virtual void EmitLoadValue(ILGenerator il);
    public virtual void EmitStoreValue(ILGenerator il);
}
internal static class OpenSearch.Net.Utf8Json.Internal.FarmHash : object {
    private static UInt32 C1;
    private static UInt32 C2;
    private static ulong K0;
    private static ulong K1;
    private static ulong K2;
    public static UInt32 Hash32(Byte[] bytes, int offset, int count);
    private static UInt32 Fetch32(Byte* p);
    private static UInt32 Rotate32(UInt32 val, int shift);
    private static UInt32 Fmix(UInt32 h);
    private static UInt32 Mur(UInt32 a, UInt32 h);
    private static UInt32 Hash32Len0to4(Byte[] s, int offset, UInt32 len);
    private static UInt32 Hash32Len5to12(Byte* s, UInt32 len);
    private static UInt32 Hash32Len13to24(Byte* s, UInt32 len);
    private static UInt32 Hash32(Byte* s, UInt32 len);
    public static ulong Hash64(Byte[] bytes, int offset, int count);
    private static Pair MakePair(ulong first, ulong second);
    private static void Swap(UInt64& x, UInt64& z);
    private static ulong Fetch64(Byte* p);
    private static ulong Rotate64(ulong val, int shift);
    private static ulong ShiftMix(ulong val);
    private static ulong HashLen16(ulong u, ulong v, ulong mul);
    private static ulong Hash64(Byte* s, UInt32 len);
    private static ulong HashLen0to16(Byte* s, UInt32 len);
    private static ulong HashLen17to32(Byte* s, UInt32 len);
    private static ulong H32(Byte* s, UInt32 len, ulong mul, ulong seed0, ulong seed1);
    private static ulong HashLen33to64(Byte* s, UInt32 len);
    private static ulong HashLen65to96(Byte* s, UInt32 len);
    private static Pair WeakHashLen32WithSeeds(ulong w, ulong x, ulong y, ulong z, ulong a, ulong b);
    private static Pair WeakHashLen32WithSeeds(Byte* s, ulong a, ulong b);
    private static ulong Hash64NA(Byte* s, UInt32 len);
    private static ulong H(ulong x, ulong y, ulong mul, int r);
    private static ulong Hash64UO(Byte* s, UInt32 len);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Utf8Json.Internal.FuncExtensions : object {
    [ExtensionAttribute]
public static Func`1<T> AsFunc(T value);
    [ExtensionAttribute]
public static Func`1<T> AsFuncFast(T value);
    [ExtensionAttribute]
private static T Return(T value);
    [ExtensionAttribute]
private static T ReturnBox(object value);
}
internal class OpenSearch.Net.Utf8Json.Internal.GuidBits : ValueType {
    public Guid Value;
    public byte Byte0;
    public byte Byte1;
    public byte Byte2;
    public byte Byte3;
    public byte Byte4;
    public byte Byte5;
    public byte Byte6;
    public byte Byte7;
    public byte Byte8;
    public byte Byte9;
    public byte Byte10;
    public byte Byte11;
    public byte Byte12;
    public byte Byte13;
    public byte Byte14;
    public byte Byte15;
    private static Byte[] byteToHexStringHigh;
    private static Byte[] byteToHexStringLow;
    public GuidBits(Guid& value);
    public GuidBits(ArraySegment`1& utf8string);
    private static GuidBits();
    private static byte Parse(Byte[] bytes, int highOffset);
    private static byte SwitchParse(byte b);
    public void Write(Byte[] buffer, int offset);
}
internal static class OpenSearch.Net.Utf8Json.Internal.NumberConverter : object {
    public static bool IsENotation(byte c);
    public static bool IsNumber(byte c);
    public static bool IsNumberRepresentation(byte c);
    public static sbyte ReadSByte(Byte[] bytes, int offset, Int32& readCount);
    public static short ReadInt16(Byte[] bytes, int offset, Int32& readCount);
    public static int ReadInt32(Byte[] bytes, int offset, Int32& readCount);
    public static long ReadInt64(Byte[] bytes, int offset, Int32& readCount);
    public static byte ReadByte(Byte[] bytes, int offset, Int32& readCount);
    public static ushort ReadUInt16(Byte[] bytes, int offset, Int32& readCount);
    public static UInt32 ReadUInt32(Byte[] bytes, int offset, Int32& readCount);
    public static ulong ReadUInt64(Byte[] bytes, int offset, Int32& readCount);
    public static float ReadSingle(Byte[] bytes, int offset, Int32& readCount);
    public static double ReadDouble(Byte[] bytes, int offset, Int32& readCount);
    public static int WriteByte(Byte[]& buffer, int offset, byte value);
    public static int WriteUInt16(Byte[]& buffer, int offset, ushort value);
    public static int WriteUInt32(Byte[]& buffer, int offset, UInt32 value);
    public static int WriteUInt64(Byte[]& buffer, int offset, ulong value);
    public static int WriteSByte(Byte[]& buffer, int offset, sbyte value);
    public static int WriteInt16(Byte[]& buffer, int offset, short value);
    public static int WriteInt32(Byte[]& buffer, int offset, int value);
    public static int WriteInt64(Byte[]& buffer, int offset, long value);
    public static int WriteSingle(Byte[]& bytes, int offset, float value);
    public static int WriteDouble(Byte[]& bytes, int offset, double value);
    public static bool ReadBoolean(Byte[] bytes, int offset, Int32& readCount);
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Utf8Json.Internal.ReflectionExtensions : object {
    private static ThreadsafeTypeKeyHashTable`1<MethodInfo> ShouldSerializeMethodInfo;
    private static ReflectionExtensions();
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllProperties(Type type);
    private static void GetAllPropertiesCore(Type type, Dictionary`2<string, PropertyInfo> collectedProperties);
    [ExtensionAttribute]
public static IEnumerable`1<FieldInfo> GetAllFields(Type type);
    [IteratorStateMachineAttribute("OpenSearch.Net.Utf8Json.Internal.ReflectionExtensions/<GetAllFieldsCore>d__4")]
private static IEnumerable`1<FieldInfo> GetAllFieldsCore(Type type, HashSet`1<string> nameCheck);
    [ExtensionAttribute]
private static Type GetDeclaringType(PropertyInfo propertyInfo);
    [ExtensionAttribute]
private static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetShouldSerializeMethod(Type type);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    private static bool IsHidingMember(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
private static bool IsVirtual(PropertyInfo propertyInfo);
    [IteratorStateMachineAttribute("OpenSearch.Net.Utf8Json.Internal.ReflectionExtensions/<GetDeclaredMethods>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type, string name);
    [ExtensionAttribute]
public static ConstructorInfo[] GetDeclaredConstructors(Type type);
}
internal static class OpenSearch.Net.Utf8Json.Internal.StringEncoding : object {
    public static Encoding UTF8;
    private static StringEncoding();
}
internal static class OpenSearch.Net.Utf8Json.Internal.StringMutator : object {
    public static string Original(string s);
    public static string ToCamelCase(string s);
}
internal class OpenSearch.Net.Utf8Json.Internal.ThreadsafeTypeKeyHashTable`1 : object {
    private Entry[] _buckets;
    private int _size;
    private object _writerLock;
    private float _loadFactor;
    public ThreadsafeTypeKeyHashTable`1(int capacity, float loadFactor);
    public bool TryAdd(Type key, TValue value);
    public bool TryAdd(Type key, Func`2<Type, TValue> valueFactory);
    private bool TryAddInternal(Type key, Func`2<Type, TValue> valueFactory, TValue& resultingValue);
    private bool AddToBuckets(Entry[] buckets, Type newKey, Entry<TValue> newEntryOrNull, Func`2<Type, TValue> valueFactory, TValue& resultingValue);
    public bool TryGetValue(Type key, TValue& value);
    public TValue GetOrAdd(Type key, Func`2<Type, TValue> valueFactory);
    private static int CalculateCapacity(int collectionSize, float loadFactor);
    private static void VolatileWrite(Entry& location, Entry<TValue> value);
    private static void VolatileWrite(Entry[]& location, Entry[] value);
}
internal static class OpenSearch.Net.Utf8Json.Internal.UnsafeMemory : object {
    public static bool Is32Bit;
    private static UnsafeMemory();
    public static void WriteRaw(JsonWriter& writer, MemoryStream ms);
    public static void WriteRaw(JsonWriter& writer, Byte[] src);
    public static void WriteRaw(JsonWriter& writer, Byte[] src, int length);
    public static void MemoryCopy(JsonWriter& writer, Byte[] src);
    public static void MemoryCopy(JsonWriter& writer, Byte[] src, int length);
}
internal static class OpenSearch.Net.Utf8Json.Internal.UnsafeMemory32 : object {
    public static void WriteRaw4(JsonWriter& writer, Byte[] src);
    public static void WriteRaw5(JsonWriter& writer, Byte[] src);
    public static void WriteRaw6(JsonWriter& writer, Byte[] src);
    public static void WriteRaw7(JsonWriter& writer, Byte[] src);
    public static void WriteRaw8(JsonWriter& writer, Byte[] src);
    public static void WriteRaw9(JsonWriter& writer, Byte[] src);
    public static void WriteRaw10(JsonWriter& writer, Byte[] src);
    public static void WriteRaw11(JsonWriter& writer, Byte[] src);
    public static void WriteRaw12(JsonWriter& writer, Byte[] src);
    public static void WriteRaw13(JsonWriter& writer, Byte[] src);
    public static void WriteRaw14(JsonWriter& writer, Byte[] src);
    public static void WriteRaw15(JsonWriter& writer, Byte[] src);
    public static void WriteRaw16(JsonWriter& writer, Byte[] src);
    public static void WriteRaw17(JsonWriter& writer, Byte[] src);
    public static void WriteRaw18(JsonWriter& writer, Byte[] src);
    public static void WriteRaw19(JsonWriter& writer, Byte[] src);
    public static void WriteRaw20(JsonWriter& writer, Byte[] src);
    public static void WriteRaw21(JsonWriter& writer, Byte[] src);
    public static void WriteRaw22(JsonWriter& writer, Byte[] src);
    public static void WriteRaw23(JsonWriter& writer, Byte[] src);
    public static void WriteRaw24(JsonWriter& writer, Byte[] src);
    public static void WriteRaw25(JsonWriter& writer, Byte[] src);
    public static void WriteRaw26(JsonWriter& writer, Byte[] src);
    public static void WriteRaw27(JsonWriter& writer, Byte[] src);
    public static void WriteRaw28(JsonWriter& writer, Byte[] src);
    public static void WriteRaw29(JsonWriter& writer, Byte[] src);
    public static void WriteRaw30(JsonWriter& writer, Byte[] src);
    public static void WriteRaw31(JsonWriter& writer, Byte[] src);
    public static void WriteRaw1(JsonWriter& writer, Byte[] src);
    public static void WriteRaw2(JsonWriter& writer, Byte[] src);
    public static void WriteRaw3(JsonWriter& writer, Byte[] src);
}
internal static class OpenSearch.Net.Utf8Json.Internal.UnsafeMemory64 : object {
    public static void WriteRaw8(JsonWriter& writer, Byte[] src);
    public static void WriteRaw9(JsonWriter& writer, Byte[] src);
    public static void WriteRaw10(JsonWriter& writer, Byte[] src);
    public static void WriteRaw11(JsonWriter& writer, Byte[] src);
    public static void WriteRaw12(JsonWriter& writer, Byte[] src);
    public static void WriteRaw13(JsonWriter& writer, Byte[] src);
    public static void WriteRaw14(JsonWriter& writer, Byte[] src);
    public static void WriteRaw15(JsonWriter& writer, Byte[] src);
    public static void WriteRaw16(JsonWriter& writer, Byte[] src);
    public static void WriteRaw17(JsonWriter& writer, Byte[] src);
    public static void WriteRaw18(JsonWriter& writer, Byte[] src);
    public static void WriteRaw19(JsonWriter& writer, Byte[] src);
    public static void WriteRaw20(JsonWriter& writer, Byte[] src);
    public static void WriteRaw21(JsonWriter& writer, Byte[] src);
    public static void WriteRaw22(JsonWriter& writer, Byte[] src);
    public static void WriteRaw23(JsonWriter& writer, Byte[] src);
    public static void WriteRaw24(JsonWriter& writer, Byte[] src);
    public static void WriteRaw25(JsonWriter& writer, Byte[] src);
    public static void WriteRaw26(JsonWriter& writer, Byte[] src);
    public static void WriteRaw27(JsonWriter& writer, Byte[] src);
    public static void WriteRaw28(JsonWriter& writer, Byte[] src);
    public static void WriteRaw29(JsonWriter& writer, Byte[] src);
    public static void WriteRaw30(JsonWriter& writer, Byte[] src);
    public static void WriteRaw31(JsonWriter& writer, Byte[] src);
    public static void WriteRaw1(JsonWriter& writer, Byte[] src);
    public static void WriteRaw2(JsonWriter& writer, Byte[] src);
    public static void WriteRaw3(JsonWriter& writer, Byte[] src);
    public static void WriteRaw4(JsonWriter& writer, Byte[] src);
    public static void WriteRaw5(JsonWriter& writer, Byte[] src);
    public static void WriteRaw6(JsonWriter& writer, Byte[] src);
    public static void WriteRaw7(JsonWriter& writer, Byte[] src);
}
internal interface OpenSearch.Net.Utf8Json.IObjectPropertyNameFormatter`1 {
    public abstract virtual void SerializeToPropertyName(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public abstract virtual T DeserializeFromPropertyName(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal class OpenSearch.Net.Utf8Json.JsonDeserializeFunc`1 : MulticastDelegate {
    public JsonDeserializeFunc`1(object object, IntPtr method);
    public virtual T Invoke(JsonReader& reader, IJsonFormatterResolver resolver);
    public virtual IAsyncResult BeginInvoke(JsonReader& reader, IJsonFormatterResolver resolver, AsyncCallback callback, object object);
    public virtual T EndInvoke(JsonReader& reader, IAsyncResult result);
}
[AttributeUsageAttribute("1420")]
internal class OpenSearch.Net.Utf8Json.JsonFormatterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FormatterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public Type FormatterType { get; }
    public Object[] Arguments { get; }
    public JsonFormatterAttribute(Type formatterType);
    public JsonFormatterAttribute(Type formatterType, Object[] arguments);
    [CompilerGeneratedAttribute]
public Type get_FormatterType();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[ExtensionAttribute]
internal static class OpenSearch.Net.Utf8Json.JsonFormatterResolverExtensions : object {
    private static MethodInfo GetFormatterMethod;
    private static JsonFormatterResolverExtensions();
    [ExtensionAttribute]
public static IJsonFormatter`1<T> GetFormatterWithVerify(IJsonFormatterResolver resolver);
    [ExtensionAttribute]
public static object GetFormatterDynamic(IJsonFormatterResolver resolver, Type type);
}
public class OpenSearch.Net.Utf8Json.JsonParsingException : Exception {
    private WeakReference _underlyingBytes;
    private int _limit;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualChar>k__BackingField;
    public int Offset { get; }
    public string ActualChar { get; public set; }
    public JsonParsingException(string message);
    public JsonParsingException(string message, Byte[] underlyingBytes, int offset, int limit, string actualChar);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public string get_ActualChar();
    [CompilerGeneratedAttribute]
public void set_ActualChar(string value);
    public Byte[] GetUnderlyingByteArrayUnsafe();
    public string GetUnderlyingStringUnsafe();
}
internal class OpenSearch.Net.Utf8Json.JsonProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <JsonFormatter>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; }
    public bool Ignore { get; public set; }
    public Nullable`1<bool> AllowPrivate { get; public set; }
    public object JsonFormatter { get; public set; }
    public JsonProperty(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ignore();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_AllowPrivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowPrivate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public object get_JsonFormatter();
    [CompilerGeneratedAttribute]
public void set_JsonFormatter(object value);
}
internal class OpenSearch.Net.Utf8Json.JsonReader : ValueType {
    private static ArraySegment`1<byte> NullTokenSegment;
    private static Byte[] Bom;
    private Byte[] _bytes;
    private int _offset;
    private int _initialOffset;
    private bool IsInRange { get; }
    public JsonReader(Byte[] bytes);
    public JsonReader(Byte[] bytes, int offset);
    private static JsonReader();
    private JsonParsingException CreateParsingException(string expected);
    private JsonParsingException CreateParsingExceptionMessage(string message);
    private bool get_IsInRange();
    public void AdvanceOffset(int offset);
    public void ResetOffset();
    public Byte[] GetBufferUnsafe();
    public int GetCurrentOffsetUnsafe();
    public JsonToken GetCurrentJsonToken();
    public void SkipWhiteSpace();
    public bool ReadIsNull();
    public bool ReadIsBeginArray();
    public void ReadIsBeginArrayWithVerify();
    public bool ReadIsEndArray();
    public void ReadIsEndArrayWithVerify();
    public bool ReadIsEndArrayWithSkipValueSeparator(Int32& count);
    public bool ReadIsInArray(Int32& count);
    public bool ReadIsBeginObject();
    public void ReadIsBeginObjectWithVerify();
    public bool ReadIsEndObject();
    public void ReadIsEndObjectWithVerify();
    public bool ReadIsEndObjectWithSkipValueSeparator(Int32& count);
    public bool ReadIsInObject(Int32& count);
    public bool ReadIsValueSeparator();
    public void ReadIsValueSeparatorWithVerify();
    public bool ReadIsNameSeparator();
    public void ReadIsNameSeparatorWithVerify();
    private void ReadStringSegmentCore(Byte[]& resultBytes, Int32& resultOffset, Int32& resultLength);
    private static int GetCodePoint(char a, char b, char c, char d);
    private static int ToNumber(char x);
    public ArraySegment`1<byte> ReadStringSegmentUnsafe();
    public string ReadString();
    public string ReadPropertyName();
    public ArraySegment`1<byte> ReadStringSegmentRaw();
    public ArraySegment`1<byte> ReadPropertyNameSegmentRaw();
    public bool ReadBoolean();
    private static bool IsWordBreak(byte c);
    public void ReadNext();
    private void ReadNextCore(JsonToken token);
    public void ReadNextBlock();
    public ArraySegment`1<byte> ReadNextBlockSegment();
    public sbyte ReadSByte();
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public byte ReadByte();
    public ushort ReadUInt16();
    public UInt32 ReadUInt32();
    public ulong ReadUInt64();
    public float ReadSingle();
    public double ReadDouble();
    public ArraySegment`1<byte> ReadNumberSegment();
    private static int ReadComment(Byte[] bytes, int offset);
}
internal class OpenSearch.Net.Utf8Json.JsonSerializeAction`1 : MulticastDelegate {
    public JsonSerializeAction`1(object object, IntPtr method);
    public virtual void Invoke(JsonWriter& writer, T value, IJsonFormatterResolver resolver);
    public virtual IAsyncResult BeginInvoke(JsonWriter& writer, T value, IJsonFormatterResolver resolver, AsyncCallback callback, object object);
    public virtual void EndInvoke(JsonWriter& writer, IAsyncResult result);
}
internal static class OpenSearch.Net.Utf8Json.JsonSerializer : object {
    private static IJsonFormatterResolver _defaultResolver;
    public static IJsonFormatterResolver DefaultResolver { get; }
    public static IJsonFormatterResolver get_DefaultResolver();
    public static void SetDefaultResolver(IJsonFormatterResolver resolver);
    public static Byte[] Serialize(T obj);
    public static Byte[] Serialize(T value, IJsonFormatterResolver resolver);
    public static void Serialize(JsonWriter& writer, T value);
    public static void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver resolver);
    public static void Serialize(Stream stream, T value);
    public static void Serialize(Stream stream, T value, IJsonFormatterResolver resolver);
    public static Task SerializeAsync(Stream stream, T value);
    [AsyncStateMachineAttribute("OpenSearch.Net.Utf8Json.JsonSerializer/<SerializeAsync>d__11`1")]
public static Task SerializeAsync(Stream stream, T value, IJsonFormatterResolver resolver);
    public static ArraySegment`1<byte> SerializeUnsafe(T obj);
    public static ArraySegment`1<byte> SerializeUnsafe(T value, IJsonFormatterResolver resolver);
    public static string ToJsonString(T value);
    public static string ToJsonString(T value, IJsonFormatterResolver resolver);
    public static T Deserialize(string json);
    public static T Deserialize(string json, IJsonFormatterResolver resolver);
    public static T Deserialize(Byte[] bytes);
    public static T Deserialize(Byte[] bytes, IJsonFormatterResolver resolver);
    public static T Deserialize(Byte[] bytes, int offset);
    public static T Deserialize(Byte[] bytes, int offset, IJsonFormatterResolver resolver);
    public static T Deserialize(JsonReader& reader);
    public static T Deserialize(JsonReader& reader, IJsonFormatterResolver resolver);
    public static T Deserialize(Stream stream);
    public static T Deserialize(Stream stream, IJsonFormatterResolver resolver);
    public static Task`1<T> DeserializeAsync(Stream stream);
    [AsyncStateMachineAttribute("OpenSearch.Net.Utf8Json.JsonSerializer/<DeserializeAsync>d__27`1")]
public static Task`1<T> DeserializeAsync(Stream stream, IJsonFormatterResolver resolver);
    private static int FillFromStream(Stream input, Byte[]& buffer);
}
internal enum OpenSearch.Net.Utf8Json.JsonToken : Enum {
    public byte value__;
    public static JsonToken None;
    public static JsonToken BeginObject;
    public static JsonToken EndObject;
    public static JsonToken BeginArray;
    public static JsonToken EndArray;
    public static JsonToken Number;
    public static JsonToken String;
    public static JsonToken True;
    public static JsonToken False;
    public static JsonToken Null;
    public static JsonToken ValueSeparator;
    public static JsonToken NameSeparator;
}
internal class OpenSearch.Net.Utf8Json.JsonWriter : ValueType {
    internal Byte[] Buffer;
    internal int Offset;
    public int CurrentOffset { get; }
    public JsonWriter(Byte[] initialBuffer);
    public int get_CurrentOffset();
    public void AdvanceOffset(int offset);
    public static Byte[] GetEncodedPropertyName(string propertyName);
    public static Byte[] GetEncodedPropertyNameWithPrefixValueSeparator(string propertyName);
    public static Byte[] GetEncodedPropertyNameWithBeginObject(string propertyName);
    public static Byte[] GetEncodedPropertyNameWithoutQuotation(string propertyName);
    public ArraySegment`1<byte> GetBuffer();
    public Byte[] ToUtf8ByteArray();
    public virtual string ToString();
    public void EnsureCapacity(int appendLength);
    public void WriteRaw(byte rawValue);
    public void WriteRaw(Byte[] rawValue);
    public void WriteRaw(Byte[] rawValue, int length);
    public void WriteRaw(MemoryStream ms);
    public void WriteSerialized(T value, IOpenSearchSerializer serializer, IConnectionConfigurationValues settings, SerializationFormatting formatting);
    public void WriteRawUnsafe(byte rawValue);
    public void WriteBeginArray();
    public void WriteEndArray();
    public void WriteBeginObject();
    public void WriteEndObject();
    public void WriteValueSeparator();
    public void WriteNameSeparator();
    public void WritePropertyName(string propertyName);
    public void WriteQuotation();
    public void WriteNull();
    public void WriteBoolean(bool value);
    public void WriteTrue();
    public void WriteFalse();
    public void WriteSingle(float value);
    public void WriteDouble(double value);
    public void WriteByte(byte value);
    public void WriteUInt16(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteSByte(sbyte value);
    public void WriteInt16(short value);
    public void WriteInt32(int value);
    public void WriteInt64(long value);
    public void WriteString(string value);
    private static void ToUnicode(char c, Int32& offset, Byte[] buffer);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.AnonymousJsonDeserializeFunc`1 : MulticastDelegate {
    public AnonymousJsonDeserializeFunc`1(object object, IntPtr method);
    public virtual T Invoke(Object[] customFormatters, JsonReader& reader, IJsonFormatterResolver resolver);
    public virtual IAsyncResult BeginInvoke(Object[] customFormatters, JsonReader& reader, IJsonFormatterResolver resolver, AsyncCallback callback, object object);
    public virtual T EndInvoke(JsonReader& reader, IAsyncResult result);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.AnonymousJsonSerializeAction`1 : MulticastDelegate {
    public AnonymousJsonSerializeAction`1(object object, IntPtr method);
    public virtual void Invoke(Byte[][] stringByteKeysField, Object[] customFormatters, JsonWriter& writer, T value, IJsonFormatterResolver resolver);
    public virtual IAsyncResult BeginInvoke(Byte[][] stringByteKeysField, Object[] customFormatters, JsonWriter& writer, T value, IJsonFormatterResolver resolver, AsyncCallback callback, object object);
    public virtual void EndInvoke(JsonWriter& writer, IAsyncResult result);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.AttributeFormatterResolver : object {
    public static IJsonFormatterResolver Instance;
    private static AttributeFormatterResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.BuiltinResolver : object {
    public static IJsonFormatterResolver Instance;
    private static BuiltinResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.CompositeResolver : object {
    public static CompositeResolver Instance;
    private static bool _isFrozen;
    private static IJsonFormatter[] _formatters;
    private static IJsonFormatterResolver[] _resolvers;
    private static CompositeResolver();
    public static void Register(IJsonFormatterResolver[] resolvers);
    public static void Register(IJsonFormatter[] formatters);
    public static void Register(IJsonFormatter[] formatters, IJsonFormatterResolver[] resolvers);
    public static void RegisterAndSetAsDefault(IJsonFormatterResolver[] resolvers);
    public static void RegisterAndSetAsDefault(IJsonFormatter[] formatters);
    public static void RegisterAndSetAsDefault(IJsonFormatter[] formatters, IJsonFormatterResolver[] resolvers);
    public static IJsonFormatterResolver Create(IJsonFormatter[] formatters);
    public static IJsonFormatterResolver Create(IJsonFormatterResolver[] resolvers);
    public static IJsonFormatterResolver Create(IJsonFormatter[] formatters, IJsonFormatterResolver[] resolvers);
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.CustomDynamicObjectResolver : object {
    private Func`2<MemberInfo, JsonProperty> _propertyMapper;
    private Lazy`1<Func`2<string, string>> _mutator;
    private bool _excludeNull;
    private ThreadsafeTypeKeyHashTable`1<object> _formatters;
    public CustomDynamicObjectResolver(Func`2<MemberInfo, JsonProperty> propertyMapper, Lazy`1<Func`2<string, string>> mutator, bool excludeNull);
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
    [CompilerGeneratedAttribute]
private object <GetFormatter>b__5_0(Type type);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DefaultStandardResolver : object {
    public static IJsonFormatterResolver Instance;
    private static IJsonFormatter`1<object> FallbackFormatter;
    private static DefaultStandardResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal abstract class OpenSearch.Net.Utf8Json.Resolvers.DynamicCompositeResolver : object {
    private static string ModuleName;
    private static DynamicAssembly Assembly;
    private IJsonFormatter[] _formatters;
    private IJsonFormatterResolver[] _resolvers;
    private static DynamicCompositeResolver();
    public DynamicCompositeResolver(IJsonFormatter[] formatters, IJsonFormatterResolver[] resolvers);
    public static IJsonFormatterResolver Create(IJsonFormatter[] formatters, IJsonFormatterResolver[] resolvers);
    public IJsonFormatter`1<T> GetFormatterLoop();
    public abstract virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DynamicGenericResolver : object {
    public static IJsonFormatterResolver Instance;
    private static DynamicGenericResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.DynamicGenericResolverGetFormatterHelper : object {
    private static Dictionary`2<Type, Type> FormatterMap;
    private static DynamicGenericResolverGetFormatterHelper();
    internal static object GetFormatter(Type t);
    private static object CreateInstance(Type genericType, Type[] genericTypeArguments, Object[] arguments);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DynamicMethodAnonymousFormatter`1 : object {
    private Byte[][] _stringByteKeysField;
    private Object[] _serializeCustomFormatters;
    private Object[] _deserializeCustomFormatters;
    private AnonymousJsonSerializeAction`1<T> _serialize;
    private AnonymousJsonDeserializeFunc`1<T> _deserialize;
    public DynamicMethodAnonymousFormatter`1(Byte[][] stringByteKeysField, Object[] serializeCustomFormatters, Object[] deserializeCustomFormatters, AnonymousJsonSerializeAction`1<T> serialize, AnonymousJsonDeserializeFunc`1<T> deserialize);
    public sealed virtual void Serialize(JsonWriter& writer, T value, IJsonFormatterResolver formatterResolver);
    public sealed virtual T Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver);
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.DynamicObjectResolver : object {
    public static IJsonFormatterResolver Default;
    public static IJsonFormatterResolver ExcludeNullCamelCase;
    public static IJsonFormatterResolver AllowPrivateExcludeNullCamelCase;
    private static DynamicObjectResolver();
    public static IJsonFormatterResolver Create(Func`2<MemberInfo, JsonProperty> propertyMapper, Lazy`1<Func`2<string, string>> mutator, bool excludeNull);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DynamicObjectResolverAllowPrivateFalseExcludeNullFalseNameMutateOriginal : object {
    public static IJsonFormatterResolver Instance;
    private static Func`2<string, string> NameMutator;
    private static bool ExcludeNull;
    private static string ModuleName;
    private static DynamicAssembly Assembly;
    private static DynamicObjectResolverAllowPrivateFalseExcludeNullFalseNameMutateOriginal();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DynamicObjectResolverAllowPrivateFalseExcludeNullTrueNameMutateCamelCase : object {
    public static IJsonFormatterResolver Instance;
    private static Func`2<string, string> NameMutator;
    private static bool ExcludeNull;
    private static string ModuleName;
    private static DynamicAssembly Assembly;
    private static DynamicObjectResolverAllowPrivateFalseExcludeNullTrueNameMutateCamelCase();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.DynamicObjectResolverAllowPrivateTrueExcludeNullTrueNameMutateCamelCase : object {
    public static IJsonFormatterResolver Instance;
    private static Func`2<string, string> NameMutator;
    private static bool ExcludeNull;
    private static DynamicObjectResolverAllowPrivateTrueExcludeNullTrueNameMutateCamelCase();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.DynamicObjectTypeBuilder : object {
    private static Regex SubtractFullNameRegex;
    private static int _nameSequence;
    private static HashSet`1<Type> IgnoreTypes;
    private static HashSet`1<Type> JsonPrimitiveTypes;
    private static DynamicObjectTypeBuilder();
    public static object BuildFormatterToAssembly(DynamicAssembly assembly, IJsonFormatterResolver selfResolver, Func`2<string, string> mutator, Func`2<MemberInfo, JsonProperty> propertyMapper, bool excludeNull);
    public static object BuildFormatterToDynamicMethod(IJsonFormatterResolver selfResolver, Func`2<string, string> mutator, Func`2<MemberInfo, JsonProperty> propertyMapper, bool excludeNull, bool allowPrivate);
    private static TypeInfo BuildType(DynamicAssembly assembly, Type type, Func`2<string, string> mutator, Func`2<MemberInfo, JsonProperty> propertyMapper, bool excludeNull);
    public static object BuildAnonymousFormatter(Type type, Func`2<string, string> nameMutator, Func`2<MemberInfo, JsonProperty> propertyMapper, bool excludeNull, bool allowPrivate, bool isException);
    private static Dictionary`2<MetaMember, FieldInfo> BuildConstructor(TypeBuilder builder, MetaType info, ConstructorInfo method, FieldBuilder stringByteKeysField, ILGenerator il, bool excludeNull, bool hasShouldSerialize);
    private static Dictionary`2<MetaMember, FieldInfo> BuildCustomFormatterField(TypeBuilder builder, MetaType info, ILGenerator il);
    private static void BuildSerialize(Type type, MetaType info, ILGenerator il, Action emitStringByteKeys, Func`3<int, MetaMember, bool> tryEmitLoadCustomFormatter, bool excludeNull, bool hasShouldSerialize, int firstArgIndex);
    private static void EmitSerializeValue(MetaMember member, ILGenerator il, int index, Func`3<int, MetaMember, bool> tryEmitLoadCustomFormatter, ArgumentField writer, ArgumentField argValue, ArgumentField argResolver);
    private static void BuildDeserialize(Type type, MetaType info, ILGenerator il, Func`3<int, MetaMember, bool> tryEmitLoadCustomFormatter, bool useGetUninitializedObject, int firstArgIndex);
    private static void EmitDeserializeValue(ILGenerator il, DeserializeInfo info, int index, Func`3<int, MetaMember, bool> tryEmitLoadCustomFormatter, ArgumentField reader, ArgumentField argResolver);
    private static LocalBuilder EmitNewObject(ILGenerator il, Type type, MetaType info, DeserializeInfo[] members, bool isSideEffectFreeType);
    private static bool IsSideEffectFreeConstructorType(ConstructorInfo ctorInfo);
    private static bool TryGetInterfaceEnumerableElementType(Type type, Type& elementType);
}
internal class OpenSearch.Net.Utf8Json.Resolvers.EnumDefaultResolver : object {
    public static IJsonFormatterResolver Instance;
    private static EnumDefaultResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.EnumResolver : object {
    public static IJsonFormatterResolver Default;
    public static IJsonFormatterResolver UnderlyingValue;
    private static EnumResolver();
}
internal class OpenSearch.Net.Utf8Json.Resolvers.EnumUnderlyingValueResolver : object {
    public static IJsonFormatterResolver Instance;
    private static EnumUnderlyingValueResolver();
    public sealed virtual IJsonFormatter`1<T> GetFormatter();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.ResolverConfig : object {
    public static string Namespace;
    private static ResolverConfig();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.StandardResolver : object {
    public static IJsonFormatterResolver Default;
    private static StandardResolver();
}
internal static class OpenSearch.Net.Utf8Json.Resolvers.StandardResolverHelper : object {
    internal static IJsonFormatterResolver[] CompositeResolverBase;
    private static StandardResolverHelper();
}
[AttributeUsageAttribute("32")]
internal class OpenSearch.Net.Utf8Json.SerializationConstructorAttribute : Attribute {
}
internal abstract class OpenSearch.Net.VersionInfo : object {
    protected static string EmptyVersion;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrerelease>k__BackingField;
    public Version Version { get; protected set; }
    public bool IsPrerelease { get; protected set; }
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(Version value);
    [CompilerGeneratedAttribute]
public bool get_IsPrerelease();
    [CompilerGeneratedAttribute]
protected void set_IsPrerelease(bool value);
    protected void StoreVersion(string fullVersion);
    protected virtual bool ContainsPrerelease(string version);
    private static string GetParsableVersionPart(string fullVersionName);
    public virtual string ToString();
}
[StringEnumAttribute]
public enum OpenSearch.Net.VersionType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VersionType Internal;
    [EnumMemberAttribute]
public static VersionType External;
    [EnumMemberAttribute]
public static VersionType ExternalGte;
}
public class OpenSearch.Net.VoidResponse : OpenSearchResponse`1<VoidBody> {
}
[StringEnumAttribute]
public enum OpenSearch.Net.WaitForEvents : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WaitForEvents Immediate;
    [EnumMemberAttribute]
public static WaitForEvents Urgent;
    [EnumMemberAttribute]
public static WaitForEvents High;
    [EnumMemberAttribute]
public static WaitForEvents Normal;
    [EnumMemberAttribute]
public static WaitForEvents Low;
    [EnumMemberAttribute]
public static WaitForEvents Languid;
}
[StringEnumAttribute]
public enum OpenSearch.Net.WaitForStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WaitForStatus Green;
    [EnumMemberAttribute]
public static WaitForStatus Yellow;
    [EnumMemberAttribute]
public static WaitForStatus Red;
}
internal class OpenSearch.Net.WebProxy : object {
    private Uri _uri;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    public ICredentials Credentials { get; public set; }
    public WebProxy(Uri uri);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
