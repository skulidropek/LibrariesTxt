[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class OpenTelemetry.ActivityContextExtensions : object {
    [ExtensionAttribute]
public static bool IsValid(ActivityContext ctx);
}
[IsReadOnlyAttribute]
public class OpenTelemetry.Baggage : ValueType {
    private static RuntimeContextSlot`1<BaggageHolder> RuntimeContextSlot;
    private static Dictionary`2<string, string> EmptyBaggage;
    private Dictionary`2<string, string> baggage;
    public static Baggage Current { get; public set; }
    public int Count { get; }
    internal Baggage(Dictionary`2<string, string> baggage);
    private static Baggage();
    public static Baggage get_Current();
    public static void set_Current(Baggage value);
    public int get_Count();
    public static bool op_Equality(Baggage left, Baggage right);
    public static bool op_Inequality(Baggage left, Baggage right);
    public static Baggage Create(Dictionary`2<string, string> baggageItems);
    public static IReadOnlyDictionary`2<string, string> GetBaggage(Baggage baggage);
    public static Enumerator<string, string> GetEnumerator(Baggage baggage);
    public static string GetBaggage(string name, Baggage baggage);
    public static Baggage SetBaggage(string name, string value, Baggage baggage);
    public static Baggage SetBaggage(IEnumerable`1<KeyValuePair`2<string, string>> baggageItems, Baggage baggage);
    public static Baggage RemoveBaggage(string name, Baggage baggage);
    public static Baggage ClearBaggage(Baggage baggage);
    public IReadOnlyDictionary`2<string, string> GetBaggage();
    public string GetBaggage(string name);
    public Baggage SetBaggage(string name, string value);
    public Baggage SetBaggage(KeyValuePair`2[] baggageItems);
    public Baggage SetBaggage(IEnumerable`1<KeyValuePair`2<string, string>> baggageItems);
    public Baggage RemoveBaggage(string name);
    public Baggage ClearBaggage();
    public Enumerator<string, string> GetEnumerator();
    public sealed virtual bool Equals(Baggage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static BaggageHolder EnsureBaggageHolder();
}
public abstract class OpenTelemetry.BaseProvider : object {
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class OpenTelemetry.Context.AsyncLocalRuntimeContextSlot`1 : RuntimeContextSlot`1<T> {
    private AsyncLocal`1<T> slot;
    public object Value { get; public set; }
    public AsyncLocalRuntimeContextSlot`1(string name);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public virtual T Get();
    public virtual void Set(T value);
}
public interface OpenTelemetry.Context.IRuntimeContextSlotValueAccessor {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[ObsoleteAttribute("Use B3Propagator class from OpenTelemetry.Extensions.Propagators namespace, shipped as part of OpenTelemetry.Extensions.Propagators package.")]
public class OpenTelemetry.Context.Propagation.B3Propagator : TextMapPropagator {
    internal static string XB3TraceId;
    internal static string XB3SpanId;
    internal static string XB3ParentSpanId;
    internal static string XB3Sampled;
    internal static string XB3Flags;
    internal static string XB3Combined;
    internal static char XB3CombinedDelimiter;
    internal static string UpperTraceId;
    internal static string SampledValue;
    internal static string LegacySampledValue;
    internal static string FlagsValue;
    private static HashSet`1<string> AllFields;
    private static HashSet`1<string> SampledValues;
    private bool singleHeader;
    public ISet`1<string> Fields { get; }
    [ObsoleteAttribute("Use B3Propagator class from OpenTelemetry.Extensions.Propagators namespace, shipped as part of OpenTelemetry.Extensions.Propagators package.")]
public B3Propagator(bool singleHeader);
    private static B3Propagator();
    public virtual ISet`1<string> get_Fields();
    [ObsoleteAttribute("Use B3Propagator class from OpenTelemetry.Extensions.Propagators namespace, shipped as part of OpenTelemetry.Extensions.Propagators package.")]
public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    [ObsoleteAttribute("Use B3Propagator class from OpenTelemetry.Extensions.Propagators namespace, shipped as part of OpenTelemetry.Extensions.Propagators package.")]
public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
    private static PropagationContext ExtractFromMultipleHeaders(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    private static PropagationContext ExtractFromSingleHeader(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
}
public class OpenTelemetry.Context.Propagation.BaggagePropagator : TextMapPropagator {
    internal static string BaggageHeaderName;
    private static int MaxBaggageLength;
    private static int MaxBaggageItems;
    private static Char[] EqualSignSeparator;
    private static Char[] CommaSignSeparator;
    public ISet`1<string> Fields { get; }
    private static BaggagePropagator();
    public virtual ISet`1<string> get_Fields();
    public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
    internal static bool TryExtractBaggage(String[] baggageCollection, Dictionary`2& baggage);
}
public class OpenTelemetry.Context.Propagation.CompositeTextMapPropagator : TextMapPropagator {
    private static ISet`1<string> EmptyFields;
    private List`1<TextMapPropagator> propagators;
    public ISet`1<string> Fields { get; }
    public CompositeTextMapPropagator(IEnumerable`1<TextMapPropagator> propagators);
    private static CompositeTextMapPropagator();
    public virtual ISet`1<string> get_Fields();
    public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
}
internal class OpenTelemetry.Context.Propagation.NoopTextMapPropagator : TextMapPropagator {
    private static PropagationContext DefaultPropagationContext;
    public ISet`1<string> Fields { get; }
    private static NoopTextMapPropagator();
    public virtual ISet`1<string> get_Fields();
    public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
}
[IsReadOnlyAttribute]
public class OpenTelemetry.Context.Propagation.PropagationContext : ValueType {
    [CompilerGeneratedAttribute]
private ActivityContext <ActivityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Baggage <Baggage>k__BackingField;
    public ActivityContext ActivityContext { get; }
    public Baggage Baggage { get; }
    public PropagationContext(ActivityContext activityContext, Baggage baggage);
    [CompilerGeneratedAttribute]
public ActivityContext get_ActivityContext();
    [CompilerGeneratedAttribute]
public Baggage get_Baggage();
    public static bool op_Equality(PropagationContext left, PropagationContext right);
    public static bool op_Inequality(PropagationContext left, PropagationContext right);
    public sealed virtual bool Equals(PropagationContext value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class OpenTelemetry.Context.Propagation.Propagators : object {
    private static TextMapPropagator Noop;
    [CompilerGeneratedAttribute]
private static TextMapPropagator <DefaultTextMapPropagator>k__BackingField;
    public static TextMapPropagator DefaultTextMapPropagator { get; internal set; }
    private static Propagators();
    [CompilerGeneratedAttribute]
public static TextMapPropagator get_DefaultTextMapPropagator();
    [CompilerGeneratedAttribute]
internal static void set_DefaultTextMapPropagator(TextMapPropagator value);
    internal static void Reset();
}
public abstract class OpenTelemetry.Context.Propagation.TextMapPropagator : object {
    public ISet`1<string> Fields { get; }
    public abstract virtual ISet`1<string> get_Fields();
    public abstract virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
    public abstract virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
}
public class OpenTelemetry.Context.Propagation.TraceContextPropagator : TextMapPropagator {
    private static string TraceParent;
    private static string TraceState;
    private static int VersionPrefixIdLength;
    private static int TraceIdLength;
    private static int VersionAndTraceIdLength;
    private static int SpanIdLength;
    private static int VersionAndTraceIdAndSpanIdLength;
    private static int OptionsLength;
    private static int TraceparentLengthV0;
    private static int TraceStateKeyMaxLength;
    private static int TraceStateKeyTenantMaxLength;
    private static int TraceStateKeyVendorMaxLength;
    private static int TraceStateValueMaxLength;
    public ISet`1<string> Fields { get; }
    private static TraceContextPropagator();
    public virtual ISet`1<string> get_Fields();
    public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
    internal static bool TryExtractTraceparent(string traceparent, ActivityTraceId& traceId, ActivitySpanId& spanId, ActivityTraceFlags& traceOptions);
    internal static bool TryExtractTracestate(String[] tracestateCollection, String& tracestateResult);
    private static byte HexCharToByte(char c);
    private static bool ValidateKey(ReadOnlySpan`1<char> key);
    private static bool ValidateValue(ReadOnlySpan`1<char> value);
    private static bool IsLowerAlphaDigit(char c);
    private static void WriteTraceParentIntoSpan(Span`1<char> destination, ActivityContext context);
}
internal static class OpenTelemetry.Context.Propagation.TraceStateUtilsNew : object {
    private static int KeyMaxSize;
    private static int ValueMaxSize;
    private static int MaxKeyValuePairsCount;
    internal static bool AppendTraceState(string traceStateString, List`1<KeyValuePair`2<string, string>> tracestate);
    internal static string GetString(IEnumerable`1<KeyValuePair`2<string, string>> traceState);
    private static bool TryParseKeyValue(ReadOnlySpan`1<char> pair, ReadOnlySpan`1& key, ReadOnlySpan`1& value);
    private static bool ValidateKey(ReadOnlySpan`1<char> key);
    private static bool ValidateValue(ReadOnlySpan`1<char> value);
}
public static class OpenTelemetry.Context.RuntimeContext : object {
    private static ConcurrentDictionary`2<string, object> Slots;
    private static Type contextSlotType;
    public static Type ContextSlotType { get; public set; }
    private static RuntimeContext();
    public static Type get_ContextSlotType();
    public static void set_ContextSlotType(Type value);
    public static RuntimeContextSlot`1<T> RegisterSlot(string slotName);
    public static RuntimeContextSlot`1<T> GetSlot(string slotName);
    public static void SetValue(string slotName, T value);
    public static T GetValue(string slotName);
    public static void SetValue(string slotName, object value);
    public static object GetValue(string slotName);
    internal static void Clear();
    private static object GuardNotFound(string slotName);
}
public abstract class OpenTelemetry.Context.RuntimeContextSlot`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    protected RuntimeContextSlot`1(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual T Get();
    public abstract virtual void Set(T value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class OpenTelemetry.Context.ThreadLocalRuntimeContextSlot`1 : RuntimeContextSlot`1<T> {
    private ThreadLocal`1<T> slot;
    private bool disposed;
    public object Value { get; public set; }
    public ThreadLocalRuntimeContextSlot`1(string name);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public virtual T Get();
    public virtual void Set(T value);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.DiagnosticDefinitions : object {
    public static string ExperimentalApiUrlFormat;
    public static string LoggerProviderExperimentalApi;
    public static string LogsBridgeExperimentalApi;
    public static string CardinalityLimitExperimentalApi;
    public static string ExemplarReservoirExperimentalApi;
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToInvariantString(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.Guard : object {
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class OpenTelemetry.Internal.OpenTelemetryApiEventSource : EventSource {
    public static OpenTelemetryApiEventSource Log;
    private static OpenTelemetryApiEventSource();
    [NonEventAttribute]
public void ActivityContextExtractException(string format, Exception ex);
    [NonEventAttribute]
public void BaggageExtractException(string format, Exception ex);
    [NonEventAttribute]
public void TracestateExtractException(Exception ex);
    [NullableContextAttribute("0")]
[NonEventAttribute]
public void TracestateKeyIsInvalid(ReadOnlySpan`1<char> key);
    [NullableContextAttribute("0")]
[NonEventAttribute]
public void TracestateValueIsInvalid(ReadOnlySpan`1<char> value);
    [EventAttribute("3")]
public void TooManyItemsInTracestate();
    [EventAttribute("4")]
public void TracestateKeyIsInvalid(string key);
    [EventAttribute("5")]
public void TracestateValueIsInvalid(string value);
    [EventAttribute("6")]
public void TracestateExtractError(string error);
    [EventAttribute("8")]
public void FailedToExtractActivityContext(string format, string exception);
    [EventAttribute("9")]
public void FailedToInjectActivityContext(string format, string error);
    [EventAttribute("10")]
public void FailedToExtractBaggage(string format, string exception);
    [EventAttribute("11")]
public void FailedToInjectBaggage(string format, string error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.StatusHelper : object {
    public static string UnsetStatusCodeTagValue;
    public static string OkStatusCodeTagValue;
    public static string ErrorStatusCodeTagValue;
    [NullableContextAttribute("2")]
public static string GetTagValueForStatusCode(StatusCode statusCode);
    [NullableContextAttribute("2")]
public static Nullable`1<StatusCode> GetStatusCodeForTagValue(string statusCodeTagValue);
    [NullableContextAttribute("2")]
public static bool TryGetStatusCodeForTagValue(string statusCodeTagValue, StatusCode& statusCode);
}
[NullableContextAttribute("1")]
public interface OpenTelemetry.Logs.IDeferredLoggerProviderBuilder {
    public abstract virtual LoggerProviderBuilder Configure(Action`2<IServiceProvider, LoggerProviderBuilder> configure);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class OpenTelemetry.Logs.Logger : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public string Version { get; private set; }
    protected Logger(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    public void EmitLog(LogRecordData& data);
    public abstract virtual void EmitLog(LogRecordData& modreq(System.Runtime.InteropServices.InAttribute) data, LogRecordAttributeList& modreq(System.Runtime.InteropServices.InAttribute) attributes);
    internal void SetInstrumentationScope(string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Logs.LoggerProvider : BaseProvider {
    private static NoopLogger NoopLogger;
    private static LoggerProvider();
    internal Logger GetLogger();
    internal Logger GetLogger(string name);
    [NullableContextAttribute("2")]
internal Logger GetLogger(string name, string version);
    [NullableContextAttribute("2")]
internal virtual bool TryCreateLogger(string name, Logger& logger);
}
public abstract class OpenTelemetry.Logs.LoggerProviderBuilder : object {
    [NullableContextAttribute("1")]
public abstract virtual LoggerProviderBuilder AddInstrumentation(Func`1<TInstrumentation> instrumentationFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class OpenTelemetry.Logs.LogRecordAttributeList : ValueType {
    internal static int OverflowMaxCount;
    internal static int OverflowAdditionalCapacity;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<KeyValuePair`2<string, object>> OverflowAttributes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyList`1<KeyValuePair`2<string, object>> Empty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute1;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute2;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute3;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute4;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute5;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute6;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute7;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> attribute8;
    private int count;
    public int Count { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; public set; }
    [NullableAttribute("2")]
[EditorBrowsableAttribute("1")]
unknown object Item {public set; }
    private static LogRecordAttributeList();
    [IsReadOnlyAttribute]
public sealed virtual int get_Count();
    [IsReadOnlyAttribute]
public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public void set_Item(int index, KeyValuePair`2<string, object> value);
    public void set_Item(string key, object value);
    public static LogRecordAttributeList CreateFromEnumerable(IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    public void Add(string key, object value);
    public void Add(KeyValuePair`2<string, object> attribute);
    public void Clear();
    public void RecordException(Exception exception);
    [IsReadOnlyAttribute]
public Enumerator GetEnumerator();
    [IsReadOnlyAttribute]
private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    [IsReadOnlyAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IsReadOnlyAttribute]
internal IReadOnlyList`1<KeyValuePair`2<string, object>> Export(List`1& attributeStorage);
    private void MoveAttributesToTheOverflowList();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class OpenTelemetry.Logs.LogRecordData : ValueType {
    internal DateTime TimestampBacking;
    [CompilerGeneratedAttribute]
private ActivityTraceId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivitySpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityTraceFlags <TraceFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeverityText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogRecordSeverity> <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public DateTime Timestamp { get; public set; }
    public ActivityTraceId TraceId { get; public set; }
    public ActivitySpanId SpanId { get; public set; }
    public ActivityTraceFlags TraceFlags { get; public set; }
    public string SeverityText { get; public set; }
    public Nullable`1<LogRecordSeverity> Severity { get; public set; }
    public string Body { get; public set; }
    public LogRecordData(Activity activity);
    public LogRecordData(ActivityContext& activityContext);
    [IsReadOnlyAttribute]
public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ActivityTraceId get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(ActivityTraceId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ActivitySpanId get_SpanId();
    [CompilerGeneratedAttribute]
public void set_SpanId(ActivitySpanId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ActivityTraceFlags get_TraceFlags();
    [CompilerGeneratedAttribute]
public void set_TraceFlags(ActivityTraceFlags value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_SeverityText();
    [CompilerGeneratedAttribute]
public void set_SeverityText(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<LogRecordSeverity> get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Nullable`1<LogRecordSeverity> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    internal static void SetActivityContext(LogRecordData& data, Activity activity);
}
internal enum OpenTelemetry.Logs.LogRecordSeverity : Enum {
    public int value__;
    public static LogRecordSeverity Unspecified;
    public static LogRecordSeverity Trace;
    public static LogRecordSeverity Trace2;
    public static LogRecordSeverity Trace3;
    public static LogRecordSeverity Trace4;
    public static LogRecordSeverity Debug;
    public static LogRecordSeverity Debug2;
    public static LogRecordSeverity Debug3;
    public static LogRecordSeverity Debug4;
    public static LogRecordSeverity Info;
    public static LogRecordSeverity Info2;
    public static LogRecordSeverity Info3;
    public static LogRecordSeverity Info4;
    public static LogRecordSeverity Warn;
    public static LogRecordSeverity Warn2;
    public static LogRecordSeverity Warn3;
    public static LogRecordSeverity Warn4;
    public static LogRecordSeverity Error;
    public static LogRecordSeverity Error2;
    public static LogRecordSeverity Error3;
    public static LogRecordSeverity Error4;
    public static LogRecordSeverity Fatal;
    public static LogRecordSeverity Fatal2;
    public static LogRecordSeverity Fatal3;
    public static LogRecordSeverity Fatal4;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class OpenTelemetry.Logs.LogRecordSeverityExtensions : object {
    internal static string UnspecifiedShortName;
    internal static string TraceShortName;
    internal static string Trace2ShortName;
    internal static string Trace3ShortName;
    internal static string Trace4ShortName;
    internal static string DebugShortName;
    internal static string Debug2ShortName;
    internal static string Debug3ShortName;
    internal static string Debug4ShortName;
    internal static string InfoShortName;
    internal static string Info2ShortName;
    internal static string Info3ShortName;
    internal static string Info4ShortName;
    internal static string WarnShortName;
    internal static string Warn2ShortName;
    internal static string Warn3ShortName;
    internal static string Warn4ShortName;
    internal static string ErrorShortName;
    internal static string Error2ShortName;
    internal static string Error3ShortName;
    internal static string Error4ShortName;
    internal static string FatalShortName;
    internal static string Fatal2ShortName;
    internal static string Fatal3ShortName;
    internal static string Fatal4ShortName;
    private static String[] LogRecordSeverityShortNames;
    private static LogRecordSeverityExtensions();
    [ExtensionAttribute]
public static string ToShortName(LogRecordSeverity logRecordSeverity);
}
internal class OpenTelemetry.Logs.NoopLogger : Logger {
    public virtual void EmitLog(LogRecordData& modreq(System.Runtime.InteropServices.InAttribute) data, LogRecordAttributeList& modreq(System.Runtime.InteropServices.InAttribute) attributes);
}
[NullableContextAttribute("1")]
public interface OpenTelemetry.Metrics.IDeferredMeterProviderBuilder {
    public abstract virtual MeterProviderBuilder Configure(Action`2<IServiceProvider, MeterProviderBuilder> configure);
}
public class OpenTelemetry.Metrics.MeterProvider : BaseProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class OpenTelemetry.Metrics.MeterProviderBuilder : object {
    public abstract virtual MeterProviderBuilder AddInstrumentation(Func`1<TInstrumentation> instrumentationFactory);
    public abstract virtual MeterProviderBuilder AddMeter(String[] names);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OpenTelemetry.Trace.ActivityExtensions : object {
    [ExtensionAttribute]
public static void SetStatus(Activity activity, Status status);
    [ExtensionAttribute]
public static Status GetStatus(Activity activity);
    [ExtensionAttribute]
public static void RecordException(Activity activity, Exception ex);
    [ExtensionAttribute]
public static void RecordException(Activity activity, Exception ex, TagList& tags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class OpenTelemetry.Trace.ActivityHelperExtensions : object {
    [ExtensionAttribute]
public static bool TryGetStatus(Activity activity, StatusCode& statusCode, String& statusDescription);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object GetTagValue(Activity activity, string tagName);
    [ExtensionAttribute]
public static bool TryCheckFirstTag(Activity activity, string tagName, Object& tagValue);
}
[NullableContextAttribute("1")]
public interface OpenTelemetry.Trace.IDeferredTracerProviderBuilder {
    public abstract virtual TracerProviderBuilder Configure(Action`2<IServiceProvider, TracerProviderBuilder> configure);
}
[IsReadOnlyAttribute]
public class OpenTelemetry.Trace.Link : ValueType {
    internal ActivityLink ActivityLink;
    public SpanContext Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Attributes { get; }
    public Link(SpanContext& spanContext);
    [NullableContextAttribute("2")]
public Link(SpanContext& spanContext, SpanAttributes attributes);
    public SpanContext get_Context();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_Attributes();
    public static bool op_Equality(Link link1, Link link2);
    public static bool op_Inequality(Link link1, Link link2);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Link other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Trace.SemanticConventions : object {
    public static string AttributeNetPeerIp;
    public static string AttributeNetPeerPort;
    public static string AttributeNetPeerName;
    public static string AttributePeerService;
    public static string AttributeHttpHost;
    public static string AttributeDbInstance;
    public static string AttributeMessageType;
    public static string AttributeMessageId;
    public static string AttributeExceptionEventName;
    public static string AttributeExceptionType;
    public static string AttributeExceptionMessage;
    public static string AttributeExceptionStacktrace;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Trace.SpanAttributeConstants : object {
    public static string StatusCodeKey;
    public static string StatusDescriptionKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Trace.SpanAttributes : object {
    [CompilerGeneratedAttribute]
private ActivityTagsCollection <Attributes>k__BackingField;
    internal ActivityTagsCollection Attributes { get; }
    public SpanAttributes(IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    [CompilerGeneratedAttribute]
internal ActivityTagsCollection get_Attributes();
    public void Add(string key, long value);
    public void Add(string key, string value);
    public void Add(string key, bool value);
    public void Add(string key, double value);
    public void Add(string key, Int64[] values);
    public void Add(string key, String[] values);
    public void Add(string key, Boolean[] values);
    public void Add(string key, Double[] values);
    private void AddInternal(string key, object value);
}
[IsReadOnlyAttribute]
public class OpenTelemetry.Trace.SpanContext : ValueType {
    internal ActivityContext ActivityContext;
    public ActivityTraceId TraceId { get; }
    public ActivitySpanId SpanId { get; }
    public ActivityTraceFlags TraceFlags { get; }
    public bool IsRemote { get; }
    public bool IsValid { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> TraceState { get; }
    public SpanContext(ActivityTraceId& traceId, ActivitySpanId& spanId, ActivityTraceFlags traceFlags, bool isRemote, IEnumerable`1<KeyValuePair`2<string, string>> traceState);
    public SpanContext(ActivityContext& activityContext);
    public ActivityTraceId get_TraceId();
    public ActivitySpanId get_SpanId();
    public ActivityTraceFlags get_TraceFlags();
    public bool get_IsRemote();
    public bool get_IsValid();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_TraceState();
    public static ActivityContext op_Implicit(SpanContext spanContext);
    public static bool op_Equality(SpanContext spanContext1, SpanContext spanContext2);
    public static bool op_Inequality(SpanContext spanContext1, SpanContext spanContext2);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SpanContext other);
    private static bool IsTraceIdValid(ActivityTraceId traceId);
    private static bool IsSpanIdValid(ActivitySpanId spanId);
}
public enum OpenTelemetry.Trace.SpanKind : Enum {
    public int value__;
    public static SpanKind Internal;
    public static SpanKind Server;
    public static SpanKind Client;
    public static SpanKind Producer;
    public static SpanKind Consumer;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class OpenTelemetry.Trace.Status : ValueType {
    public static Status Ok;
    public static Status Unset;
    public static Status Error;
    [CompilerGeneratedAttribute]
private StatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public StatusCode StatusCode { get; }
    public string Description { get; }
    internal Status(StatusCode statusCode, string description);
    private static Status();
    [CompilerGeneratedAttribute]
public StatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_Description();
    public static bool op_Equality(Status status1, Status status2);
    public static bool op_Inequality(Status status1, Status status2);
    public Status WithDescription(string description);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(Status other);
}
public enum OpenTelemetry.Trace.StatusCode : Enum {
    public int value__;
    public static StatusCode Unset;
    public static StatusCode Ok;
    public static StatusCode Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Trace.TelemetrySpan : object {
    internal static TelemetrySpan NoopInstance;
    [NullableAttribute("2")]
internal Activity Activity;
    public SpanContext Context { get; }
    public bool IsRecording { get; }
    public ActivitySpanId ParentSpanId { get; }
    [NullableContextAttribute("2")]
internal TelemetrySpan(Activity activity);
    private static TelemetrySpan();
    public SpanContext get_Context();
    public bool get_IsRecording();
    public ActivitySpanId get_ParentSpanId();
    public void SetStatus(Status value);
    public TelemetrySpan UpdateName(string name);
    public TelemetrySpan SetAttribute(string key, string value);
    public TelemetrySpan SetAttribute(string key, int value);
    public TelemetrySpan SetAttribute(string key, bool value);
    public TelemetrySpan SetAttribute(string key, double value);
    public TelemetrySpan SetAttribute(string key, String[] values);
    public TelemetrySpan SetAttribute(string key, Int32[] values);
    public TelemetrySpan SetAttribute(string key, Boolean[] values);
    public TelemetrySpan SetAttribute(string key, Double[] values);
    public TelemetrySpan AddEvent(string name);
    public TelemetrySpan AddEvent(string name, DateTimeOffset timestamp);
    public TelemetrySpan AddEvent(string name, SpanAttributes attributes);
    public TelemetrySpan AddEvent(string name, DateTimeOffset timestamp, SpanAttributes attributes);
    public void End();
    public void End(DateTimeOffset endTimestamp);
    public TelemetrySpan RecordException(Exception ex);
    [NullableContextAttribute("2")]
public TelemetrySpan RecordException(string type, string message, string stacktrace);
    public sealed virtual void Dispose();
    internal void Activate();
    protected virtual void Dispose(bool disposing);
    private void SetAttributeInternal(string key, object value);
    private void AddEventInternal(string name, DateTimeOffset timestamp, ActivityTagsCollection tags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Trace.Tracer : object {
    [NullableAttribute("2")]
internal ActivitySource ActivitySource;
    public static TelemetrySpan CurrentSpan { get; }
    [NullableContextAttribute("2")]
internal Tracer(ActivitySource activitySource);
    public static TelemetrySpan get_CurrentSpan();
    [NullableContextAttribute("2")]
public static TelemetrySpan WithSpan(TelemetrySpan span);
    public TelemetrySpan StartRootSpan(string name, SpanKind kind, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
    [NullableContextAttribute("2")]
public TelemetrySpan StartSpan(string name, SpanKind kind, TelemetrySpan& parentSpan, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
    public TelemetrySpan StartSpan(string name, SpanKind kind, SpanContext& parentContext, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
    [NullableContextAttribute("2")]
public TelemetrySpan StartActiveSpan(string name, SpanKind kind, TelemetrySpan& parentSpan, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
    public TelemetrySpan StartActiveSpan(string name, SpanKind kind, SpanContext& parentContext, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
    private static ActivityKind ConvertToActivityKind(SpanKind kind);
    private TelemetrySpan StartSpanHelper(StartSpanBehaviors startSpanBehavior, string name, SpanKind kind, SpanContext& parentContext, SpanAttributes initialAttributes, IEnumerable`1<Link> links, DateTimeOffset startTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Trace.TracerProvider : BaseProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ConcurrentDictionary`2<TracerKey, Tracer> Tracers;
    [CompilerGeneratedAttribute]
private static TracerProvider <Default>k__BackingField;
    public static TracerProvider Default { get; }
    private static TracerProvider();
    [CompilerGeneratedAttribute]
public static TracerProvider get_Default();
    public Tracer GetTracer(string name, string version);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class OpenTelemetry.Trace.TracerProviderBuilder : object {
    public abstract virtual TracerProviderBuilder AddInstrumentation(Func`1<TInstrumentation> instrumentationFactory);
    public abstract virtual TracerProviderBuilder AddSource(String[] names);
    public abstract virtual TracerProviderBuilder AddLegacySource(string operationName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
