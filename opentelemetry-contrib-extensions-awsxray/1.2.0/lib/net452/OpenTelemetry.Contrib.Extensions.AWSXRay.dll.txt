[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EventSourceAttribute]
internal class OpenTelemetry.Contrib.Extensions.AWSXRay.AWSXRayEventSource : EventSource {
    public static AWSXRayEventSource Log;
    private static AWSXRayEventSource();
    [NonEventAttribute]
public void ActivityContextExtractException(string format, Exception ex);
    [NonEventAttribute]
public void ResourceAttributesExtractException(string format, Exception ex);
    [EventAttribute("1")]
public void FailedToExtractActivityContext(string format, string exception);
    [EventAttribute("2")]
public void FailedToInjectActivityContext(string format, string error);
    [EventAttribute("3")]
public void FailedToExtractResourceAttributes(string format, string exception);
    [EventAttribute("4")]
public void FailedToValidateCertificate(string format, string error);
    private static string ToInvariantString(Exception exception);
}
[ExtensionAttribute]
public static class OpenTelemetry.Contrib.Extensions.AWSXRay.AWSXRayIdGenerator : object {
    private static int RandomNumberHexDigits;
    private static long TicksPerMicrosecond;
    private static long MicrosecondPerSecond;
    private static DateTime EpochStart;
    private static long UnixEpochMicroseconds;
    private static Random Global;
    private static ThreadLocal`1<Random> Local;
    private static AWSXRayIdGenerator();
    internal static void ReplaceTraceId(Sampler sampler);
    internal static ActivityTraceId GenerateAWSXRayCompatiableTraceId();
    internal static void UpdateSamplingDecision(Activity activity, Sampler sampler);
    [ExtensionAttribute]
private static decimal ToUnixTimeSeconds(DateTime date);
    private static string GenerateHexNumber(int digits);
    private static void NextBytes(Byte[] buffer);
    private static int Next(int maxValue);
    private static ActivitySamplingResult ComputeRootActivitySamplingResult(Activity activity, Sampler sampler);
}
public class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.AWSEBSResourceDetector : object {
    private static string AWSEBSMetadataWindowsFilePath;
    private static string AWSEBSMetadataLinuxFilePath;
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> Detect();
    internal List`1<KeyValuePair`2<string, object>> ExtractResourceAttributes(AWSEBSMetadataModel metadata);
    internal AWSEBSMetadataModel GetEBSMetadata(string filePath);
}
public class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.AWSEC2ResourceDetector : object {
    private static string AWSEC2MetadataTokenTTLHeader;
    private static string AWSEC2MetadataTokenHeader;
    private static string AWSEC2MetadataTokenUrl;
    private static string AWSEC2HostNameUrl;
    private static string AWSEC2IdentityDocumentUrl;
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> Detect();
    internal List`1<KeyValuePair`2<string, object>> ExtractResourceAttributes(AWSEC2IdentityDocumentModel identity, string hostName);
    internal AWSEC2IdentityDocumentModel DeserializeResponse(string response);
    private string GetAWSEC2Token();
    private AWSEC2IdentityDocumentModel GetAWSEC2Identity(string token);
    private string GetIdentityResponse(string token);
    private string GetAWSEC2HostName(string token);
}
internal static class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.AWSSemanticConventions : object {
    public static string AttributeCloudAccountID;
    public static string AttributeCloudAvailableZone;
    public static string AttributeCloudPlatform;
    public static string AttributeCloudProvider;
    public static string AttributeCloudRegion;
    public static string AttributeContainerID;
    public static string AttributeFaasExecution;
    public static string AttributeFaasID;
    public static string AttributeFaasName;
    public static string AttributeFaasVersion;
    public static string AttributeHostID;
    public static string AttributeHostType;
    public static string AttributeHostName;
    public static string AttributeK8SClusterName;
    public static string AttributeServiceName;
    public static string AttributeServiceNamespace;
    public static string AttributeServiceInstanceID;
    public static string AttributeServiceVersion;
}
public interface OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.IResourceDetector {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> Detect();
}
internal class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.Models.AWSEBSMetadataModel : object {
    [CompilerGeneratedAttribute]
private string <DeploymentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionLabel>k__BackingField;
    [JsonPropertyAttribute]
public string DeploymentId { get; public set; }
    [JsonPropertyAttribute]
public string EnvironmentName { get; public set; }
    [JsonPropertyAttribute]
public string VersionLabel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DeploymentId();
    [CompilerGeneratedAttribute]
public void set_DeploymentId(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionLabel();
    [CompilerGeneratedAttribute]
public void set_VersionLabel(string value);
}
internal class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.Models.AWSEC2IdentityDocumentModel : object {
    [CompilerGeneratedAttribute]
private string <AccountId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AvailabilityZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceType>k__BackingField;
    public string AccountId { get; public set; }
    public string AvailabilityZone { get; public set; }
    public string Region { get; public set; }
    public string InstanceId { get; public set; }
    public string InstanceType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountId();
    [CompilerGeneratedAttribute]
public void set_AccountId(string value);
    [CompilerGeneratedAttribute]
public string get_AvailabilityZone();
    [CompilerGeneratedAttribute]
public void set_AvailabilityZone(string value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceType();
    [CompilerGeneratedAttribute]
public void set_InstanceType(string value);
}
internal class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.Models.AWSEKSClusterDataModel : object {
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [JsonPropertyAttribute]
public string ClusterName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public void set_ClusterName(string value);
}
internal class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.Models.AWSEKSClusterInformationModel : object {
    [CompilerGeneratedAttribute]
private AWSEKSClusterDataModel <Data>k__BackingField;
    public AWSEKSClusterDataModel Data { get; public set; }
    [CompilerGeneratedAttribute]
public AWSEKSClusterDataModel get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(AWSEKSClusterDataModel value);
}
public class OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.ResourceDetectorUtils : object {
    [AsyncStateMachineAttribute("OpenTelemetry.Contrib.Extensions.AWSXRay.Resources.ResourceDetectorUtils/<SendOutRequest>d__0")]
internal static Task`1<string> SendOutRequest(string url, string method, KeyValuePair`2<string, string> header, HttpClientHandler handler);
    internal static T DeserializeFromFile(string filePath);
    internal static T DeserializeFromString(string json);
    internal static StreamReader GetStreamReader(string filePath);
}
public class OpenTelemetry.Contrib.Extensions.AWSXRay.Trace.AWSXRayPropagator : TextMapPropagator {
    private static string AWSXRayTraceHeaderKey;
    private static char KeyValueDelimiter;
    private static char TraceHeaderDelimiter;
    private static string RootKey;
    private static string Version;
    private static int RandomNumberHexDigits;
    private static int EpochHexDigits;
    private static int TotalLength;
    private static char TraceIdDelimiter;
    private static int TraceIdDelimiterFirstIndex;
    private static int TraceIdDelimiterSecondIndex;
    private static string ParentKey;
    private static int ParentIdHexDigits;
    private static string SampledKey;
    private static char SampledValue;
    private static char NotSampledValue;
    public ISet`1<string> Fields { get; }
    public virtual ISet`1<string> get_Fields();
    public virtual PropagationContext Extract(PropagationContext context, T carrier, Func`3<T, string, IEnumerable`1<string>> getter);
    public virtual void Inject(PropagationContext context, T carrier, Action`3<T, string, string> setter);
    internal static bool TryParseXRayTraceHeader(string rawHeader, ActivityContext& activityContext);
    internal static bool TryParseOTFormatTraceId(ReadOnlySpan`1<char> traceId, ReadOnlySpan`1& otFormatTraceId);
    internal static bool IsParentIdValid(ReadOnlySpan`1<char> parentId);
    internal static bool TryParseSampleDecision(ReadOnlySpan`1<char> sampleDecision, Char& result);
    internal static string ToXRayTraceIdFormat(string traceId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.Guard : object {
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [NullableContextAttribute("2")]
[DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [NullableContextAttribute("2")]
[DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [NullableContextAttribute("2")]
[DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
[ExtensionAttribute]
public static class OpenTelemetry.Resources.ResourceBuilderExtensions : object {
    [ExtensionAttribute]
public static ResourceBuilder AddDetector(ResourceBuilder resourceBuilder, IResourceDetector resourceDetector);
}
[ExtensionAttribute]
public static class OpenTelemetry.Trace.TracerProviderBuilderExtensions : object {
    [ExtensionAttribute]
public static TracerProviderBuilder AddXRayTraceId(TracerProviderBuilder builder);
    [ExtensionAttribute]
public static TracerProviderBuilder AddXRayTraceIdWithSampler(TracerProviderBuilder builder, Sampler sampler);
}
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
