[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class OpenTelemetry.Exporter.ConsoleActivityExporter : ConsoleExporter`1<Activity> {
    public ConsoleActivityExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
}
public abstract class OpenTelemetry.Exporter.ConsoleExporter`1 : BaseExporter`1<T> {
    private ConsoleExporterOptions options;
    [CompilerGeneratedAttribute]
private ConsoleTagWriter <TagWriter>k__BackingField;
    internal ConsoleTagWriter TagWriter { get; }
    protected ConsoleExporter`1(ConsoleExporterOptions options);
    [CompilerGeneratedAttribute]
internal ConsoleTagWriter get_TagWriter();
    protected void WriteLine(string message);
    private void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
}
public class OpenTelemetry.Exporter.ConsoleExporterOptions : object {
    [CompilerGeneratedAttribute]
private ConsoleExporterOutputTargets <Targets>k__BackingField;
    public ConsoleExporterOutputTargets Targets { get; public set; }
    [CompilerGeneratedAttribute]
public ConsoleExporterOutputTargets get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(ConsoleExporterOutputTargets value);
}
[FlagsAttribute]
public enum OpenTelemetry.Exporter.ConsoleExporterOutputTargets : Enum {
    public int value__;
    public static ConsoleExporterOutputTargets Console;
    public static ConsoleExporterOutputTargets Debug;
}
public class OpenTelemetry.Exporter.ConsoleLogRecordExporter : ConsoleExporter`1<LogRecord> {
    private static int RightPaddingLength;
    private object syncObject;
    private bool disposed;
    private string disposedStackTrace;
    private bool isDisposeMessageSent;
    public ConsoleLogRecordExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
    protected virtual void Dispose(bool disposing);
}
public class OpenTelemetry.Exporter.ConsoleMetricExporter : ConsoleExporter`1<Metric> {
    private Resource resource;
    public ConsoleMetricExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Exporter.ConsoleTagWriter : JsonStringArrayTagWriter`1<ConsoleTag> {
    private Action`2<string, string> onUnsupportedTagDropped;
    public ConsoleTagWriter(Action`2<string, string> onUnsupportedTagDropped);
    public bool TryTransformTag(KeyValuePair`2<string, object> tag, KeyValuePair`2& result);
    protected virtual void WriteIntegralTag(ConsoleTag& consoleTag, string key, long value);
    protected virtual void WriteFloatingPointTag(ConsoleTag& consoleTag, string key, double value);
    protected virtual void WriteBooleanTag(ConsoleTag& consoleTag, string key, bool value);
    [NullableContextAttribute("0")]
protected virtual void WriteStringTag(ConsoleTag& consoleTag, string key, ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
protected virtual void WriteArrayTag(ConsoleTag& consoleTag, string key, ArraySegment`1<byte> arrayUtf8JsonBytes);
    protected virtual void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class OpenTelemetry.Internal.ArrayTagWriter`1 : object {
    public abstract virtual TArrayState BeginWriteArray();
    public abstract virtual void WriteNullValue(TArrayState& state);
    public abstract virtual void WriteIntegralValue(TArrayState& state, long value);
    public abstract virtual void WriteFloatingPointValue(TArrayState& state, double value);
    public abstract virtual void WriteBooleanValue(TArrayState& state, bool value);
    [NullableContextAttribute("0")]
public abstract virtual void WriteStringValue(TArrayState& state, ReadOnlySpan`1<char> value);
    public abstract virtual void EndWriteArray(TArrayState& state);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class OpenTelemetry.Internal.JsonStringArrayTagWriter`1 : TagWriter`2<TTagState, JsonArrayTagWriterState<TTagState>> {
    protected sealed virtual void WriteArrayTag(TTagState& writer, string key, JsonArrayTagWriterState& array);
    protected abstract virtual void WriteArrayTag(TTagState& writer, string key, ArraySegment`1<byte> arrayUtf8JsonBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class OpenTelemetry.Internal.TagWriter`2 : object {
    private ArrayTagWriter`1<TArrayState> arrayWriter;
    protected TagWriter`2(ArrayTagWriter`1<TArrayState> arrayTagWriter);
    public bool TryWriteTag(TTagState& state, KeyValuePair`2<string, object> tag, Nullable`1<int> tagValueMaxLength);
    protected abstract virtual void WriteIntegralTag(TTagState& state, string key, long value);
    protected abstract virtual void WriteFloatingPointTag(TTagState& state, string key, double value);
    protected abstract virtual void WriteBooleanTag(TTagState& state, string key, bool value);
    protected abstract virtual void WriteStringTag(TTagState& state, string key, ReadOnlySpan`1<char> value);
    protected abstract virtual void WriteArrayTag(TTagState& state, string key, TArrayState& value);
    protected abstract virtual void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<char> TruncateString(ReadOnlySpan`1<char> value, Nullable`1<int> maxLength);
    private void WriteCharTag(TTagState& state, string key, char value);
    private void WriteCharValue(TArrayState& state, char value);
    private void WriteArrayTagInternal(TTagState& state, string key, Array array, Nullable`1<int> tagValueMaxLength);
    private void WriteToArrayTypeChecked(TArrayState& arrayState, Array array, Nullable`1<int> tagValueMaxLength);
    [NullableContextAttribute("0")]
private void WriteToArrayCovariant(TArrayState& arrayState, TItem[] array);
    [NullableContextAttribute("0")]
private void WriteStructToArray(TArrayState& arrayState, TItem[] array);
    private void WriteStringsToArray(TArrayState& arrayState, String[] array, Nullable`1<int> tagValueMaxLength);
    private bool LogUnsupportedTagTypeAndReturnFalse(string key, object value);
}
[ExtensionAttribute]
public static class OpenTelemetry.Logs.ConsoleExporterLoggingExtensions : object {
    [ExtensionAttribute]
public static OpenTelemetryLoggerOptions AddConsoleExporter(OpenTelemetryLoggerOptions loggerOptions);
    [ExtensionAttribute]
public static OpenTelemetryLoggerOptions AddConsoleExporter(OpenTelemetryLoggerOptions loggerOptions, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
public static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder);
    [ExtensionAttribute]
public static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
public static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder, string name, Action`1<ConsoleExporterOptions> configure);
}
internal static class OpenTelemetry.Metrics.Base2ExponentialBucketHistogramHelper : object {
    private static double EpsilonTimes2;
    private static double Ln2;
    private static double SCALEB_C1;
    private static double SCALEB_C2;
    private static double SCALEB_C3;
    private static Base2ExponentialBucketHistogramHelper();
    public static double CalculateLowerBoundary(int index, int scale);
    private static double ScaleB(double x, int n);
}
[ExtensionAttribute]
public static class OpenTelemetry.Metrics.ConsoleExporterMetricsExtensions : object {
    private static int DefaultExportIntervalMilliseconds;
    private static int DefaultExportTimeoutMilliseconds;
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, Action`1<ConsoleExporterOptions> configureExporter);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, string name, Action`1<ConsoleExporterOptions> configureExporter);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, Action`2<ConsoleExporterOptions, MetricReaderOptions> configureExporterAndMetricReader);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, string name, Action`2<ConsoleExporterOptions, MetricReaderOptions> configureExporterAndMetricReader);
    private static MetricReader BuildConsoleExporterMetricReader(ConsoleExporterOptions exporterOptions, MetricReaderOptions metricReaderOptions);
}
internal static class OpenTelemetry.Metrics.PeriodicExportingMetricReaderHelper : object {
    internal static int DefaultExportIntervalMilliseconds;
    internal static int DefaultExportTimeoutMilliseconds;
    [NullableContextAttribute("1")]
internal static PeriodicExportingMetricReader CreatePeriodicExportingMetricReader(BaseExporter`1<Metric> exporter, MetricReaderOptions options, int defaultExportIntervalMilliseconds, int defaultExportTimeoutMilliseconds);
}
[ExtensionAttribute]
public static class OpenTelemetry.Trace.ConsoleExporterHelperExtensions : object {
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder);
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder, string name, Action`1<ConsoleExporterOptions> configure);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
