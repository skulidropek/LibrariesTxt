[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider : ConfigurationProvider {
    private string _prefix;
    private string _normalizedPrefix;
    [NullableContextAttribute("2")]
public EnvironmentVariablesConfigurationProvider(string prefix);
    public virtual void Load();
    public virtual string ToString();
    internal void Load(IDictionary envVariables);
    private void AddIfNormalizedKeyMatchesPrefix(Dictionary`2<string, string> data, string normalizedKey, string value);
    private static string Normalize(string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [NullableContextAttribute("1")]
public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddEnvironmentVariables(IConfigurationBuilder configurationBuilder);
    [ExtensionAttribute]
public static IConfigurationBuilder AddEnvironmentVariables(IConfigurationBuilder configurationBuilder, string prefix);
    [ExtensionAttribute]
public static IConfigurationBuilder AddEnvironmentVariables(IConfigurationBuilder builder, Action`1<EnvironmentVariablesConfigurationSource> configureSource);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.Configuration.IConfigurationExtensionsLogger {
    public abstract virtual void LogInvalidConfigurationValue(string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.Configuration.OpenTelemetryConfigurationExtensions : object {
    [ExtensionAttribute]
public static bool TryGetStringValue(IConfiguration configuration, string key, String& value);
    [ExtensionAttribute]
public static bool TryGetUriValue(IConfiguration configuration, IConfigurationExtensionsLogger logger, string key, Uri& value);
    [ExtensionAttribute]
public static bool TryGetIntValue(IConfiguration configuration, IConfigurationExtensionsLogger logger, string key, Int32& value);
    [ExtensionAttribute]
public static bool TryGetBoolValue(IConfiguration configuration, IConfigurationExtensionsLogger logger, string key, Boolean& value);
    [ExtensionAttribute]
public static bool TryGetValue(IConfiguration configuration, IConfigurationExtensionsLogger logger, string key, TryParseFunc`1<T> tryParseFunc, T& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.DependencyInjection.DelegatingOptionsFactoryServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection RegisterOptionsFactory(IServiceCollection services, Func`2<IConfiguration, T> optionsFactoryFunc);
    [ExtensionAttribute]
public static IServiceCollection RegisterOptionsFactory(IServiceCollection services, Func`4<IServiceProvider, IConfiguration, string, T> optionsFactoryFunc);
    [ExtensionAttribute]
public static IServiceCollection DisableOptionsReloading(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Options.DelegatingOptionsFactory`1 : object {
    private Func`3<IConfiguration, string, TOptions> optionsFactoryFunc;
    private IConfiguration configuration;
    private IConfigureOptions`1[] _setups;
    private IPostConfigureOptions`1[] _postConfigures;
    private IValidateOptions`1[] _validations;
    public DelegatingOptionsFactory`1(Func`3<IConfiguration, string, TOptions> optionsFactoryFunc, IConfiguration configuration, IEnumerable`1<IConfigureOptions`1<TOptions>> setups, IEnumerable`1<IPostConfigureOptions`1<TOptions>> postConfigures, IEnumerable`1<IValidateOptions`1<TOptions>> validations);
    public sealed virtual TOptions Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Options.SingletonOptionsManager`1 : object {
    private TOptions instance;
    public TOptions CurrentValue { get; }
    public TOptions Value { get; }
    public SingletonOptionsManager`1(IOptions`1<TOptions> options);
    public sealed virtual TOptions get_CurrentValue();
    public sealed virtual TOptions get_Value();
    public sealed virtual TOptions Get(string name);
    [NullableContextAttribute("2")]
public sealed virtual IDisposable OnChange(Action`2<TOptions, string> listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Instrumentation.ActivityInstrumentationHelper : object {
    internal static Action`2<Activity, ActivityKind> SetKindProperty;
    internal static Action`2<Activity, ActivitySource> SetActivitySourceProperty;
    private static ActivityInstrumentationHelper();
    private static Action`2<Activity, ActivitySource> CreateActivitySourceSetter();
    private static Action`2<Activity, ActivityKind> CreateActivityKindSetter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.AspNetCore.AspNetCoreInstrumentation : object {
    private static HashSet`1<string> DiagnosticSourceEvents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<string, object, object, bool> isEnabled;
    private DiagnosticSourceSubscriber diagnosticSourceSubscriber;
    public AspNetCoreInstrumentation(HttpInListener httpInListener);
    private static AspNetCoreInstrumentation();
    public sealed virtual void Dispose();
}
internal class OpenTelemetry.Instrumentation.AspNetCore.AspNetCoreMetrics : object {
    [NullableAttribute("1")]
private static HashSet`1<string> DiagnosticSourceEvents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<string, object, object, bool> isEnabled;
    [NullableAttribute("1")]
private DiagnosticSourceSubscriber diagnosticSourceSubscriber;
    private static AspNetCoreMetrics();
    public sealed virtual void Dispose();
}
public class OpenTelemetry.Instrumentation.AspNetCore.AspNetCoreTraceInstrumentationOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <Filter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<Activity, HttpRequest> <EnrichWithHttpRequest>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<Activity, HttpResponse> <EnrichWithHttpResponse>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<Activity, Exception> <EnrichWithException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecordException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableGrpcAspNetCoreSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableUrlQueryRedaction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpContext, bool> Filter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Activity, HttpRequest> EnrichWithHttpRequest { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Activity, HttpResponse> EnrichWithHttpResponse { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Activity, Exception> EnrichWithException { get; public set; }
    public bool RecordException { get; public set; }
    internal bool EnableGrpcAspNetCoreSupport { get; internal set; }
    internal bool DisableUrlQueryRedaction { get; internal set; }
    [NullableContextAttribute("1")]
internal AspNetCoreTraceInstrumentationOptions(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<HttpContext, bool> value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, HttpRequest> get_EnrichWithHttpRequest();
    [CompilerGeneratedAttribute]
public void set_EnrichWithHttpRequest(Action`2<Activity, HttpRequest> value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, HttpResponse> get_EnrichWithHttpResponse();
    [CompilerGeneratedAttribute]
public void set_EnrichWithHttpResponse(Action`2<Activity, HttpResponse> value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, Exception> get_EnrichWithException();
    [CompilerGeneratedAttribute]
public void set_EnrichWithException(Action`2<Activity, Exception> value);
    [CompilerGeneratedAttribute]
public bool get_RecordException();
    [CompilerGeneratedAttribute]
public void set_RecordException(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableGrpcAspNetCoreSupport();
    [CompilerGeneratedAttribute]
internal void set_EnableGrpcAspNetCoreSupport(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DisableUrlQueryRedaction();
    [CompilerGeneratedAttribute]
internal void set_DisableUrlQueryRedaction(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class OpenTelemetry.Instrumentation.AspNetCore.Implementation.AspNetCoreInstrumentationEventSource : EventSource {
    public static AspNetCoreInstrumentationEventSource Log;
    private static AspNetCoreInstrumentationEventSource();
    [NonEventAttribute]
public void RequestFilterException(string handlerName, string eventName, string operationName, Exception ex);
    [NonEventAttribute]
public void EnrichmentException(string handlerName, string eventName, string operationName, Exception ex);
    [NonEventAttribute]
public void UnknownErrorProcessingEvent(string handlerName, string eventName, Exception ex);
    [EventAttribute("1")]
public void NullPayload(string handlerName, string eventName, string operationName);
    [EventAttribute("2")]
public void RequestIsFilteredOut(string handlerName, string eventName, string operationName);
    [EventAttribute("3")]
public void RequestFilterException(string handlerName, string eventName, string operationName, string exception);
    [EventAttribute("4")]
public void EnrichmentException(string handlerName, string eventName, string operationName, string exception);
    [EventAttribute("5")]
public void UnknownErrorProcessingEvent(string handlerName, string eventName, string ex);
    [EventAttribute("6")]
public void InvalidConfigurationValue(string key, string value);
    private sealed virtual override void Microsoft.Extensions.Configuration.IConfigurationExtensionsLogger.LogInvalidConfigurationValue(string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.AspNetCore.Implementation.HttpInListener : ListenerHandler {
    internal static string ActivityOperationName;
    internal static string OnStartEvent;
    internal static string OnStopEvent;
    internal static string OnUnhandledHostingExceptionEvent;
    internal static string OnUnHandledDiagnosticsExceptionEvent;
    internal static string AspNetCoreActivitySourceName;
    internal static AssemblyName AssemblyName;
    internal static string ActivitySourceName;
    internal static Version Version;
    internal static ActivitySource ActivitySource;
    internal static bool Net7OrGreater;
    private static string DiagnosticSourceName;
    private static Func`3<HttpRequest, string, IEnumerable`1<string>> HttpRequestHeaderValuesGetter;
    private static PropertyFetcher`1<Exception> ExceptionPropertyFetcher;
    private AspNetCoreTraceInstrumentationOptions options;
    public HttpInListener(AspNetCoreTraceInstrumentationOptions options);
    private static HttpInListener();
    public virtual void OnEventWritten(string name, object payload);
    public void OnStartActivity(Activity activity, object payload);
    public void OnStopActivity(Activity activity, object payload);
    public void OnException(Activity activity, object payload);
    private static bool TryGetGrpcMethod(Activity activity, String& grpcMethod);
    private static void AddGrpcAttributes(Activity activity, string grpcMethod, HttpContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <OnException>g__TryFetchException|19_0(object payload, Exception& exc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.AspNetCore.Implementation.HttpInMetricsListener : ListenerHandler {
    internal static string HttpServerRequestDurationMetricName;
    internal static string OnUnhandledHostingExceptionEvent;
    internal static string OnUnhandledDiagnosticsExceptionEvent;
    internal static AssemblyName AssemblyName;
    internal static string InstrumentationName;
    internal static string InstrumentationVersion;
    internal static Meter Meter;
    private static string OnStopEvent;
    private static PropertyFetcher`1<Exception> ExceptionPropertyFetcher;
    private static PropertyFetcher`1<HttpContext> HttpContextPropertyFetcher;
    private static object ErrorTypeHttpContextItemsKey;
    private static Histogram`1<double> HttpServerRequestDuration;
    internal HttpInMetricsListener(string name);
    private static HttpInMetricsListener();
    public static void OnExceptionEventWritten(string name, object payload);
    public static void OnStopEventWritten(string name, object payload);
    public virtual void OnEventWritten(string name, object payload);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <OnExceptionEventWritten>g__TryFetchException|13_0(object payload, Exception& exc);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <OnExceptionEventWritten>g__TryFetchHttpContext|13_1(object payload, HttpContext& ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Instrumentation.AspNetCore.Implementation.TelemetryHelper : object {
    public static Object[] BoxedStatusCodes;
    internal static RequestDataHelper RequestDataHelper;
    private static TelemetryHelper();
    public static object GetBoxedStatusCode(int statusCode);
    private static Object[] InitializeBoxedStatusCodes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.DiagnosticSourceListener : object {
    private ListenerHandler handler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<string, string, Exception> logUnknownException;
    public DiagnosticSourceListener(ListenerHandler handler, Action`3<string, string, Exception> logUnknownException);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.DiagnosticSourceSubscriber : object {
    private List`1<IDisposable> listenerSubscriptions;
    private Func`2<string, ListenerHandler> handlerFactory;
    private Func`2<DiagnosticListener, bool> diagnosticSourceFilter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<string, object, object, bool> isEnabledFilter;
    private Action`3<string, string, Exception> logUnknownException;
    private long disposed;
    [NullableAttribute("2")]
private IDisposable allSourcesSubscription;
    public DiagnosticSourceSubscriber(ListenerHandler handler, Func`4<string, object, object, bool> isEnabledFilter, Action`3<string, string, Exception> logUnknownException);
    public DiagnosticSourceSubscriber(Func`2<string, ListenerHandler> handlerFactory, Func`2<DiagnosticListener, bool> diagnosticSourceFilter, Func`4<string, object, object, bool> isEnabledFilter, Action`3<string, string, Exception> logUnknownException);
    public void Subscribe();
    public sealed virtual void OnNext(DiagnosticListener value);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal enum OpenTelemetry.Instrumentation.GrpcStatusCanonicalCode : Enum {
    public int value__;
    public static GrpcStatusCanonicalCode Ok;
    public static GrpcStatusCanonicalCode Cancelled;
    public static GrpcStatusCanonicalCode Unknown;
    public static GrpcStatusCanonicalCode InvalidArgument;
    public static GrpcStatusCanonicalCode DeadlineExceeded;
    public static GrpcStatusCanonicalCode NotFound;
    public static GrpcStatusCanonicalCode AlreadyExists;
    public static GrpcStatusCanonicalCode PermissionDenied;
    public static GrpcStatusCanonicalCode ResourceExhausted;
    public static GrpcStatusCanonicalCode FailedPrecondition;
    public static GrpcStatusCanonicalCode Aborted;
    public static GrpcStatusCanonicalCode OutOfRange;
    public static GrpcStatusCanonicalCode Unimplemented;
    public static GrpcStatusCanonicalCode Internal;
    public static GrpcStatusCanonicalCode Unavailable;
    public static GrpcStatusCanonicalCode DataLoss;
    public static GrpcStatusCanonicalCode Unauthenticated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Instrumentation.GrpcTagHelper : object {
    public static string RpcSystemGrpc;
    public static string GrpcMethodTagName;
    public static string GrpcStatusCodeTagName;
    private static Regex GrpcMethodRegex;
    private static GrpcTagHelper();
    public static string GetGrpcMethodFromActivity(Activity activity);
    public static bool TryGetGrpcStatusCodeFromActivity(Activity activity, Int32& statusCode);
    public static bool TryParseRpcServiceAndRpcMethod(string grpcMethod, String& rpcService, String& rpcMethod);
    public static ActivityStatusCode ResolveSpanStatusForGrpcStatusCode(int statusCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class OpenTelemetry.Instrumentation.ListenerHandler : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsNullActivity>k__BackingField;
    public string SourceName { get; }
    public bool SupportsNullActivity { get; }
    protected ListenerHandler(string sourceName);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsNullActivity();
    public virtual void OnEventWritten(string name, object payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Instrumentation.PropertyFetcher`1 : object {
    private string propertyName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PropertyFetch<T> innerFetcher;
    public int NumberOfInnerFetchers { get; }
    public PropertyFetcher`1(string propertyName);
    public int get_NumberOfInnerFetchers();
    [NullableContextAttribute("2")]
public bool TryFetch(object obj, T& value);
    [NullableContextAttribute("2")]
private static bool TryFetchRare(object obj, string propertyName, PropertyFetch& destination, T& value);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToInvariantString(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.Guard : object {
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Internal.RedactionHelper : object {
    private static string RedactedText;
    public static string GetRedactedQueryString(string query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Internal.RequestDataHelper : object {
    private static string KnownHttpMethodsEnvironmentVariable;
    private static string OtherHttpMethod;
    private static Char[] SplitChars;
    private Dictionary`2<string, string> knownHttpMethods;
    public RequestDataHelper(bool configureByHttpKnownMethodsEnvironmentalVariable);
    private static RequestDataHelper();
    public void SetHttpMethodTag(Activity activity, string originalHttpMethod);
    public string GetNormalizedHttpMethod(string method);
    public void SetActivityDisplayName(Activity activity, string originalHttpMethod, string httpRoute);
    internal static string GetHttpProtocolVersion(Version httpVersion);
    internal static string GetHttpProtocolVersion(string protocol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OpenTelemetry.Metrics.AspNetCoreInstrumentationMeterProviderBuilderExtensions : object {
    [ExtensionAttribute]
public static MeterProviderBuilder AddAspNetCoreInstrumentation(MeterProviderBuilder builder);
    [ExtensionAttribute]
internal static MeterProviderBuilder ConfigureMeters(MeterProviderBuilder builder);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Trace.ActivityHelperExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object GetTagValue(Activity activity, string tagName);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool TryCheckFirstTag(Activity activity, string tagName, Object& tagValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OpenTelemetry.Trace.AspNetCoreInstrumentationTracerProviderBuilderExtensions : object {
    [ExtensionAttribute]
public static TracerProviderBuilder AddAspNetCoreInstrumentation(TracerProviderBuilder builder);
    [ExtensionAttribute]
public static TracerProviderBuilder AddAspNetCoreInstrumentation(TracerProviderBuilder builder, Action`1<AspNetCoreTraceInstrumentationOptions> configureAspNetCoreTraceInstrumentationOptions);
    [ExtensionAttribute]
public static TracerProviderBuilder AddAspNetCoreInstrumentation(TracerProviderBuilder builder, string name, Action`1<AspNetCoreTraceInstrumentationOptions> configureAspNetCoreTraceInstrumentationOptions);
    [ExtensionAttribute]
internal static TracerProviderBuilder AddAspNetCoreInstrumentation(TracerProviderBuilder builder, HttpInListener listener);
    [ExtensionAttribute]
private static void AddAspNetCoreInstrumentationSources(TracerProviderBuilder builder, IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Trace.SemanticConventions : object {
    public static string AttributeNetTransport;
    public static string AttributeNetPeerIp;
    public static string AttributeNetPeerPort;
    public static string AttributeNetPeerName;
    public static string AttributeNetHostIp;
    public static string AttributeNetHostPort;
    public static string AttributeNetHostName;
    public static string AttributeEnduserId;
    public static string AttributeEnduserRole;
    public static string AttributeEnduserScope;
    public static string AttributePeerService;
    public static string AttributeHttpMethod;
    public static string AttributeHttpUrl;
    public static string AttributeHttpTarget;
    public static string AttributeHttpHost;
    public static string AttributeHttpScheme;
    public static string AttributeHttpStatusCode;
    public static string AttributeHttpStatusText;
    public static string AttributeHttpFlavor;
    public static string AttributeHttpServerName;
    public static string AttributeHttpRoute;
    public static string AttributeHttpClientIP;
    public static string AttributeHttpUserAgent;
    public static string AttributeHttpRequestContentLength;
    public static string AttributeHttpRequestContentLengthUncompressed;
    public static string AttributeHttpResponseContentLength;
    public static string AttributeHttpResponseContentLengthUncompressed;
    public static string AttributeDbSystem;
    public static string AttributeDbConnectionString;
    public static string AttributeDbUser;
    public static string AttributeDbMsSqlInstanceName;
    public static string AttributeDbJdbcDriverClassName;
    public static string AttributeDbName;
    public static string AttributeDbStatement;
    public static string AttributeDbOperation;
    public static string AttributeDbInstance;
    public static string AttributeDbCassandraKeyspace;
    public static string AttributeDbHBaseNamespace;
    public static string AttributeDbRedisDatabaseIndex;
    public static string AttributeDbMongoDbCollection;
    public static string AttributeRpcSystem;
    public static string AttributeRpcService;
    public static string AttributeRpcMethod;
    public static string AttributeRpcGrpcStatusCode;
    public static string AttributeMessageType;
    public static string AttributeMessageId;
    public static string AttributeMessageCompressedSize;
    public static string AttributeMessageUncompressedSize;
    public static string AttributeFaasTrigger;
    public static string AttributeFaasExecution;
    public static string AttributeFaasDocumentCollection;
    public static string AttributeFaasDocumentOperation;
    public static string AttributeFaasDocumentTime;
    public static string AttributeFaasDocumentName;
    public static string AttributeFaasTime;
    public static string AttributeFaasCron;
    public static string AttributeMessagingSystem;
    public static string AttributeMessagingDestination;
    public static string AttributeMessagingDestinationKind;
    public static string AttributeMessagingTempDestination;
    public static string AttributeMessagingProtocol;
    public static string AttributeMessagingProtocolVersion;
    public static string AttributeMessagingUrl;
    public static string AttributeMessagingMessageId;
    public static string AttributeMessagingConversationId;
    public static string AttributeMessagingPayloadSize;
    public static string AttributeMessagingPayloadCompressedSize;
    public static string AttributeMessagingOperation;
    public static string AttributeExceptionEventName;
    public static string AttributeExceptionType;
    public static string AttributeExceptionMessage;
    public static string AttributeExceptionStacktrace;
    public static string AttributeErrorType;
    public static string AttributeHttpRequestMethod;
    public static string AttributeHttpRequestMethodOriginal;
    public static string AttributeHttpResponseStatusCode;
    public static string AttributeUrlScheme;
    public static string AttributeUrlFull;
    public static string AttributeUrlPath;
    public static string AttributeUrlQuery;
    public static string AttributeServerSocketAddress;
    public static string AttributeClientAddress;
    public static string AttributeClientPort;
    public static string AttributeNetworkProtocolVersion;
    public static string AttributeNetworkProtocolName;
    public static string AttributeServerAddress;
    public static string AttributeServerPort;
    public static string AttributeUserAgentOriginal;
}
internal static class OpenTelemetry.Trace.SpanHelper : object {
    public static ActivityStatusCode ResolveActivityStatusForHttpStatusCode(ActivityKind kind, int httpStatusCode);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
