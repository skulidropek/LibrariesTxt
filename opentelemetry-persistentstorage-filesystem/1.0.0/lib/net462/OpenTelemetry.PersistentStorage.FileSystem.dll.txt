[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AssemblyInfo : object {
    public static string PublicKey;
    public static string MoqPublicKey;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToInvariantString(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.Guard : object {
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.PersistentStorage.FileSystem.DirectorySizeTracker : object {
    private long maxSizeInBytes;
    private string path;
    private long directoryCurrentSizeInBytes;
    public DirectorySizeTracker(long maxSizeInBytes, string path);
    public void FileAdded(long fileSizeInBytes);
    public void FileRemoved(long fileSizeInBytes);
    public bool IsSpaceAvailable(Int64& currentSizeInBytes);
    public void RecountCurrentSize();
    internal static long CalculateFolderSize(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.PersistentStorage.FileSystem.FileBlob : PersistentBlob {
    [NullableAttribute("2")]
private DirectorySizeTracker directorySizeTracker;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    public string FullPath { get; private set; }
    public FileBlob(string fullPath);
    internal FileBlob(string fullPath, DirectorySizeTracker directorySizeTracker);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
private void set_FullPath(string value);
    [NullableContextAttribute("2")]
protected virtual bool OnTryRead(Byte[]& buffer);
    protected virtual bool OnTryWrite(Byte[] buffer, int leasePeriodMilliseconds);
    protected virtual bool OnTryLease(int leasePeriodMilliseconds);
    protected virtual bool OnTryDelete();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.PersistentStorage.FileSystem.FileBlobProvider : PersistentBlobProvider {
    internal string DirectoryPath;
    private DirectorySizeTracker directorySizeTracker;
    private long retentionPeriodInMilliseconds;
    private int writeTimeoutInMilliseconds;
    private Timer maintenanceTimer;
    private bool disposedValue;
    public FileBlobProvider(string path, long maxSizeInBytes, int maintenancePeriodInMilliseconds, long retentionPeriodInMilliseconds, int writeTimeoutInMilliseconds);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [IteratorStateMachineAttribute("OpenTelemetry.PersistentStorage.FileSystem.FileBlobProvider/<OnGetBlobs>d__9")]
protected virtual IEnumerable`1<PersistentBlob> OnGetBlobs();
    protected virtual bool OnTryCreateBlob(Byte[] buffer, int leasePeriodMilliseconds, PersistentBlob& blob);
    protected virtual bool OnTryCreateBlob(Byte[] buffer, PersistentBlob& blob);
    [NullableContextAttribute("2")]
protected virtual bool OnTryGetBlob(PersistentBlob& blob);
    private void OnMaintenanceEvent(object source, ElapsedEventArgs e);
    private bool CheckStorageSize();
    private PersistentBlob CreateFileBlob(Byte[] buffer, int leasePeriodMilliseconds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class OpenTelemetry.PersistentStorage.FileSystem.PersistentStorageEventSource : EventSource {
    public static PersistentStorageEventSource Log;
    private static string EventSourceName;
    private static PersistentStorageEventSource();
    [NonEventAttribute]
public void CouldNotReadFileBlob(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotWriteFileBlob(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotLeaseFileBlob(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotDeleteFileBlob(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotCreateFileBlob(Exception ex);
    [NonEventAttribute]
public void CouldNotRemoveExpiredBlob(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotRemoveTimedOutTmpFile(string filePath, Exception ex);
    [NonEventAttribute]
public void CouldNotRemoveExpiredLease(string srcFilePath, string destFilePath, Exception ex);
    [NonEventAttribute]
public void PersistentStorageException(string className, string message, Exception ex);
    [EventAttribute("1")]
public void CouldNotReadFileBlob(string filePath, string ex);
    [EventAttribute("2")]
public void CouldNotWriteFileBlob(string filePath, string ex);
    [EventAttribute("3")]
public void CouldNotLeaseFileBlob(string filePath, string ex);
    [EventAttribute("4")]
public void CouldNotDeleteFileBlob(string filePath, string ex);
    [EventAttribute("5")]
public void CouldNotCreateFileBlob(string ex);
    [EventAttribute("6")]
public void CouldNotRemoveExpiredBlob(string filePath, string ex);
    [EventAttribute("7")]
public void CouldNotRemoveTimedOutTmpFile(string filePath, string ex);
    [EventAttribute("8")]
public void CouldNotRemoveExpiredLease(string srcFilePath, string destFilePath, string ex);
    [EventAttribute("9")]
public void PersistentStorageException(string className, string message, string ex);
    [EventAttribute("10")]
public void PersistentStorageWarning(string className, string message);
    [EventAttribute("11")]
public void PersistentStorageInformation(string className, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.PersistentStorage.FileSystem.PersistentStorageHelper : object {
    internal static void RemoveExpiredBlob(DateTime retentionDeadline, string filePath);
    internal static bool RemoveExpiredLease(DateTime leaseDeadline, string filePath);
    internal static bool RemoveTimedOutTmpFiles(DateTime timeoutDeadline, string filePath);
    internal static void RemoveExpiredBlobs(string directoryPath, long retentionPeriodInMilliseconds, long writeTimeoutInMilliseconds);
    internal static void WriteAllBytes(string path, Byte[] buffer);
    internal static void RemoveFile(string fileName, Int64& fileSize);
    internal static string GetUniqueFileName(string extension);
    internal static string CreateSubdirectory(string path);
    internal static DateTime GetDateTimeFromBlobName(string filePath);
    internal static DateTime GetDateTimeFromLeaseName(string filePath);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
