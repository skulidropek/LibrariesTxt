internal static class OpenTelemetry.Instrumentation.ActivityInstrumentationHelper : object {
    internal static Action`2<Activity, ActivityKind> SetKindProperty;
    internal static Action`2<Activity, ActivitySource> SetActivitySourceProperty;
    private static ActivityInstrumentationHelper();
    private static Action`2<Activity, ActivitySource> CreateActivitySourceSetter();
    private static Action`2<Activity, ActivityKind> CreateActivityKindSetter();
}
internal class OpenTelemetry.Instrumentation.DiagnosticSourceListener : object {
    private ListenerHandler handler;
    public DiagnosticSourceListener(ListenerHandler handler);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
}
internal class OpenTelemetry.Instrumentation.DiagnosticSourceSubscriber : object {
    private List`1<IDisposable> listenerSubscriptions;
    private Func`2<string, ListenerHandler> handlerFactory;
    private Func`2<DiagnosticListener, bool> diagnosticSourceFilter;
    private Func`4<string, object, object, bool> isEnabledFilter;
    private long disposed;
    private IDisposable allSourcesSubscription;
    public DiagnosticSourceSubscriber(ListenerHandler handler, Func`4<string, object, object, bool> isEnabledFilter);
    public DiagnosticSourceSubscriber(Func`2<string, ListenerHandler> handlerFactory, Func`2<DiagnosticListener, bool> diagnosticSourceFilter, Func`4<string, object, object, bool> isEnabledFilter);
    public void Subscribe();
    public sealed virtual void OnNext(DiagnosticListener value);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class OpenTelemetry.Instrumentation.GrpcNetClient.GrpcClientInstrumentation : object {
    private DiagnosticSourceSubscriber diagnosticSourceSubscriber;
    public GrpcClientInstrumentation(GrpcClientInstrumentationOptions options);
    public sealed virtual void Dispose();
}
public class OpenTelemetry.Instrumentation.GrpcNetClient.GrpcClientInstrumentationOptions : object {
    [CompilerGeneratedAttribute]
private bool <SuppressDownstreamInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<Activity, string, object> <Enrich>k__BackingField;
    public bool SuppressDownstreamInstrumentation { get; public set; }
    public Action`3<Activity, string, object> Enrich { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SuppressDownstreamInstrumentation();
    [CompilerGeneratedAttribute]
public void set_SuppressDownstreamInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public Action`3<Activity, string, object> get_Enrich();
    [CompilerGeneratedAttribute]
public void set_Enrich(Action`3<Activity, string, object> value);
}
internal static class OpenTelemetry.Instrumentation.GrpcNetClient.GrpcTagHelper : object {
    public static string RpcSystemGrpc;
    public static string GrpcMethodTagName;
    public static string GrpcStatusCodeTagName;
    private static Regex GrpcMethodRegex;
    private static GrpcTagHelper();
    public static string GetGrpcMethodFromActivity(Activity activity);
    public static bool TryGetGrpcStatusCodeFromActivity(Activity activity, Int32& statusCode);
    public static bool TryParseRpcServiceAndRpcMethod(string grpcMethod, String& rpcService, String& rpcMethod);
    public static Status ResolveSpanStatusForGrpcStatusCode(int statusCode);
}
internal class OpenTelemetry.Instrumentation.GrpcNetClient.Implementation.GrpcClientDiagnosticListener : ListenerHandler {
    internal static AssemblyName AssemblyName;
    internal static string ActivitySourceName;
    internal static Version Version;
    internal static ActivitySource ActivitySource;
    private GrpcClientInstrumentationOptions options;
    private PropertyFetcher`1<HttpRequestMessage> startRequestFetcher;
    private PropertyFetcher`1<HttpResponseMessage> stopRequestFetcher;
    public GrpcClientDiagnosticListener(GrpcClientInstrumentationOptions options);
    private static GrpcClientDiagnosticListener();
    public virtual void OnStartActivity(Activity activity, object payload);
    public virtual void OnStopActivity(Activity activity, object payload);
}
[EventSourceAttribute]
internal class OpenTelemetry.Instrumentation.GrpcNetClient.Implementation.GrpcInstrumentationEventSource : EventSource {
    public static GrpcInstrumentationEventSource Log;
    private static GrpcInstrumentationEventSource();
    [EventAttribute("1")]
public void NullPayload(string handlerName, string eventName);
    [NonEventAttribute]
public void EnrichmentException(Exception ex);
    [EventAttribute("2")]
public void EnrichmentException(string exception);
}
internal enum OpenTelemetry.Instrumentation.GrpcNetClient.StatusCanonicalCode : Enum {
    public int value__;
    public static StatusCanonicalCode Ok;
    public static StatusCanonicalCode Cancelled;
    public static StatusCanonicalCode Unknown;
    public static StatusCanonicalCode InvalidArgument;
    public static StatusCanonicalCode DeadlineExceeded;
    public static StatusCanonicalCode NotFound;
    public static StatusCanonicalCode AlreadyExists;
    public static StatusCanonicalCode PermissionDenied;
    public static StatusCanonicalCode ResourceExhausted;
    public static StatusCanonicalCode FailedPrecondition;
    public static StatusCanonicalCode Aborted;
    public static StatusCanonicalCode OutOfRange;
    public static StatusCanonicalCode Unimplemented;
    public static StatusCanonicalCode Internal;
    public static StatusCanonicalCode Unavailable;
    public static StatusCanonicalCode DataLoss;
    public static StatusCanonicalCode Unauthenticated;
}
internal static class OpenTelemetry.Instrumentation.Http.HttpRequestMessageContextPropagation : object {
    internal static Func`3<HttpRequestMessage, string, IEnumerable`1<string>> HeaderValuesGetter { get; }
    internal static Action`3<HttpRequestMessage, string, string> HeaderValueSetter { get; }
    internal static Func`3<HttpRequestMessage, string, IEnumerable`1<string>> get_HeaderValuesGetter();
    internal static Action`3<HttpRequestMessage, string, string> get_HeaderValueSetter();
}
[EventSourceAttribute]
internal class OpenTelemetry.Instrumentation.InstrumentationEventSource : EventSource {
    public static InstrumentationEventSource Log;
    private static InstrumentationEventSource();
    [EventAttribute("1")]
public void NullActivity(string eventName);
    [NonEventAttribute]
public void UnknownErrorProcessingEvent(string handlerName, string eventName, Exception ex);
    [EventAttribute("2")]
public void UnknownErrorProcessingEvent(string handlerName, string eventName, string ex);
}
internal abstract class OpenTelemetry.Instrumentation.ListenerHandler : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsNullActivity>k__BackingField;
    public string SourceName { get; }
    public bool SupportsNullActivity { get; }
    public ListenerHandler(string sourceName);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsNullActivity();
    public virtual void OnStartActivity(Activity activity, object payload);
    public virtual void OnStopActivity(Activity activity, object payload);
    public virtual void OnException(Activity activity, object payload);
    public virtual void OnCustom(string name, Activity activity, object payload);
}
internal class OpenTelemetry.Instrumentation.PropertyFetcher`1 : object {
    private string propertyName;
    private PropertyFetch<T> innerFetcher;
    public PropertyFetcher`1(string propertyName);
    public T Fetch(object obj);
    public bool TryFetch(object obj, T& value, bool skipObjNullCheck);
}
internal class OpenTelemetry.Internal.DictionaryEnumerator`3 : Enumerator`3<IEnumerable`1<KeyValuePair`2<TKey, TValue>>, KeyValuePair`2<TKey, TValue>, TState> {
}
internal class OpenTelemetry.Internal.Enumerator`3 : object {
    private static MethodInfo GenericGetEnumeratorMethod;
    private static MethodInfo GeneircCurrentGetMethod;
    private static MethodInfo MoveNextMethod;
    private static MethodInfo DisposeMethod;
    private static Enumerator`3();
    public static AllocationFreeForEachDelegate<TEnumerable, TItem, TState> BuildAllocationFreeForEachDelegate(Type enumerableType);
    private static MethodInfo ResolveGetEnumeratorMethodForType(Type type);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.ExceptionExtensions : object {
    [ExtensionAttribute]
public static string ToInvariantString(Exception exception);
}
internal static class OpenTelemetry.Internal.Guard : object {
    private static string DefaultParamName;
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
internal class OpenTelemetry.Internal.ListEnumerator`2 : Enumerator`3<IEnumerable`1<TValue>, TValue, TState> {
}
internal static class OpenTelemetry.Internal.StatusHelper : object {
    public static string UnsetStatusCodeTagValue;
    public static string OkStatusCodeTagValue;
    public static string ErrorStatusCodeTagValue;
    public static string GetTagValueForStatusCode(StatusCode statusCode);
    public static Nullable`1<StatusCode> GetStatusCodeForTagValue(string statusCodeTagValue);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Trace.ActivityHelperExtensions : object {
    [ExtensionAttribute]
public static bool TryGetStatus(Activity activity, StatusCode& statusCode, String& statusDescription);
    [ExtensionAttribute]
public static object GetTagValue(Activity activity, string tagName);
    [ExtensionAttribute]
public static bool TryCheckFirstTag(Activity activity, string tagName, Object& tagValue);
    [ExtensionAttribute]
public static void EnumerateTags(Activity activity, T& tagEnumerator);
    [ExtensionAttribute]
public static void EnumerateLinks(Activity activity, T& linkEnumerator);
    [ExtensionAttribute]
public static void EnumerateTags(ActivityLink activityLink, T& tagEnumerator);
    [ExtensionAttribute]
public static void EnumerateEvents(Activity activity, T& eventEnumerator);
    [ExtensionAttribute]
public static void EnumerateTags(ActivityEvent activityEvent, T& tagEnumerator);
}
internal interface OpenTelemetry.Trace.IActivityEnumerator`1 {
    public abstract virtual bool ForEach(T item);
}
internal static class OpenTelemetry.Trace.SemanticConventions : object {
    public static string AttributeNetTransport;
    public static string AttributeNetPeerIp;
    public static string AttributeNetPeerPort;
    public static string AttributeNetPeerName;
    public static string AttributeNetHostIp;
    public static string AttributeNetHostPort;
    public static string AttributeNetHostName;
    public static string AttributeEnduserId;
    public static string AttributeEnduserRole;
    public static string AttributeEnduserScope;
    public static string AttributePeerService;
    public static string AttributeHttpMethod;
    public static string AttributeHttpUrl;
    public static string AttributeHttpTarget;
    public static string AttributeHttpHost;
    public static string AttributeHttpScheme;
    public static string AttributeHttpStatusCode;
    public static string AttributeHttpStatusText;
    public static string AttributeHttpFlavor;
    public static string AttributeHttpServerName;
    public static string AttributeHttpRoute;
    public static string AttributeHttpClientIP;
    public static string AttributeHttpUserAgent;
    public static string AttributeHttpRequestContentLength;
    public static string AttributeHttpRequestContentLengthUncompressed;
    public static string AttributeHttpResponseContentLength;
    public static string AttributeHttpResponseContentLengthUncompressed;
    public static string AttributeDbSystem;
    public static string AttributeDbConnectionString;
    public static string AttributeDbUser;
    public static string AttributeDbMsSqlInstanceName;
    public static string AttributeDbJdbcDriverClassName;
    public static string AttributeDbName;
    public static string AttributeDbStatement;
    public static string AttributeDbOperation;
    public static string AttributeDbInstance;
    public static string AttributeDbUrl;
    public static string AttributeDbCassandraKeyspace;
    public static string AttributeDbHBaseNamespace;
    public static string AttributeDbRedisDatabaseIndex;
    public static string AttributeDbMongoDbCollection;
    public static string AttributeRpcSystem;
    public static string AttributeRpcService;
    public static string AttributeRpcMethod;
    public static string AttributeRpcGrpcStatusCode;
    public static string AttributeMessageType;
    public static string AttributeMessageId;
    public static string AttributeMessageCompressedSize;
    public static string AttributeMessageUncompressedSize;
    public static string AttributeFaasTrigger;
    public static string AttributeFaasExecution;
    public static string AttributeFaasDocumentCollection;
    public static string AttributeFaasDocumentOperation;
    public static string AttributeFaasDocumentTime;
    public static string AttributeFaasDocumentName;
    public static string AttributeFaasTime;
    public static string AttributeFaasCron;
    public static string AttributeMessagingSystem;
    public static string AttributeMessagingDestination;
    public static string AttributeMessagingDestinationKind;
    public static string AttributeMessagingTempDestination;
    public static string AttributeMessagingProtocol;
    public static string AttributeMessagingProtocolVersion;
    public static string AttributeMessagingUrl;
    public static string AttributeMessagingMessageId;
    public static string AttributeMessagingConversationId;
    public static string AttributeMessagingPayloadSize;
    public static string AttributeMessagingPayloadCompressedSize;
    public static string AttributeMessagingOperation;
    public static string AttributeExceptionEventName;
    public static string AttributeExceptionType;
    public static string AttributeExceptionMessage;
    public static string AttributeExceptionStacktrace;
}
internal static class OpenTelemetry.Trace.SpanAttributeConstants : object {
    public static string StatusCodeKey;
    public static string StatusDescriptionKey;
    public static string DatabaseStatementTypeKey;
}
internal static class OpenTelemetry.Trace.SpanHelper : object {
    public static Status ResolveSpanStatusForHttpStatusCode(int httpStatusCode);
}
[ExtensionAttribute]
public static class OpenTelemetry.Trace.TracerProviderBuilderExtensions : object {
    [ExtensionAttribute]
public static TracerProviderBuilder AddGrpcClientInstrumentation(TracerProviderBuilder builder, Action`1<GrpcClientInstrumentationOptions> configure);
}
