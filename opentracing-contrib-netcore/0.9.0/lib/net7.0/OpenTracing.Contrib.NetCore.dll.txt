[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public interface Microsoft.Extensions.DependencyInjection.IOpenTracingBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OpenTracingBuilderExtensions : object {
    [ExtensionAttribute]
internal static IOpenTracingBuilder AddDiagnosticSubscriber(IOpenTracingBuilder builder);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddAspNetCore(IOpenTracingBuilder builder, Action`1<AspNetCoreDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureAspNetCore(IOpenTracingBuilder builder, Action`1<AspNetCoreDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddHttpHandler(IOpenTracingBuilder builder, Action`1<HttpHandlerDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureHttpHandler(IOpenTracingBuilder builder, Action`1<HttpHandlerDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddEntityFrameworkCore(IOpenTracingBuilder builder, Action`1<EntityFrameworkCoreDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureEntityFrameworkCore(IOpenTracingBuilder builder, Action`1<EntityFrameworkCoreDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddGenericDiagnostics(IOpenTracingBuilder builder, Action`1<GenericDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureGenericDiagnostics(IOpenTracingBuilder builder, Action`1<GenericDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder RemoveGenericDiagnostics(IOpenTracingBuilder builder);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddMicrosoftSqlClient(IOpenTracingBuilder builder, Action`1<MicrosoftSqlClientDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureMicrosoftSqlClient(IOpenTracingBuilder builder, Action`1<MicrosoftSqlClientDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddSystemSqlClient(IOpenTracingBuilder builder, Action`1<SqlClientDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder ConfigureSystemSqlClient(IOpenTracingBuilder builder, Action`1<SqlClientDiagnosticOptions> options);
    [ExtensionAttribute]
public static IOpenTracingBuilder AddLoggerProvider(IOpenTracingBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddOpenTracing(IServiceCollection services, Action`1<IOpenTracingBuilder> builder);
    [ExtensionAttribute]
public static IServiceCollection AddOpenTracingCoreServices(IServiceCollection services, Action`1<IOpenTracingBuilder> builder);
    private static bool AssemblyExists(string assemblyName);
}
internal class OpenTracing.Contrib.NetCore.AspNetCore.AspNetCoreDiagnostics : DiagnosticEventObserver {
    public static string DiagnosticListenerName;
    private static string HostingScopeItemsKey;
    private static string ActionScopeItemsKey;
    private static string ActionResultScopeItemsKey;
    private static string ActionComponent;
    private static string ActionTagActionName;
    private static string ActionTagControllerName;
    private static string ResultComponent;
    private static string ResultTagType;
    private static PropertyFetcher _httpRequestIn_start_HttpContextFetcher;
    private static PropertyFetcher _httpRequestIn_stop_HttpContextFetcher;
    private static PropertyFetcher _unhandledException_HttpContextFetcher;
    private static PropertyFetcher _unhandledException_ExceptionFetcher;
    private static PropertyFetcher _beforeAction_httpContextFetcher;
    private static PropertyFetcher _beforeAction_ActionDescriptorFetcher;
    private static PropertyFetcher _afterAction_httpContextFetcher;
    private static PropertyFetcher _beforeActionResult_actionContextFetcher;
    private static PropertyFetcher _beforeActionResult_ResultFetcher;
    private static PropertyFetcher _afterActionResult_actionContextFetcher;
    internal static string NoHostSpecified;
    private AspNetCoreDiagnosticOptions _options;
    public AspNetCoreDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<AspNetCoreDiagnosticOptions> options);
    private static AspNetCoreDiagnostics();
    protected virtual string GetListenerName();
    protected virtual bool IsSupportedEvent(string eventName);
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.AspNetCore.AspNetCoreDiagnostics/<HandledEventNames>d__24")]
protected virtual IEnumerable`1<string> HandledEventNames();
    protected virtual void HandleEvent(string eventName, object untypedArg);
    private static string GetDisplayUrl(HttpRequest request);
    private bool ShouldIgnore(HttpContext httpContext);
}
public class OpenTracing.Contrib.NetCore.AspNetCore.HostingOptions : object {
    public static string DefaultComponent;
    private string _componentName;
    private List`1<Func`2<HttpContext, bool>> _ignorePatterns;
    private Func`2<HttpContext, string> _operationNameResolver;
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <ExtractEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<ISpan, HttpContext> <OnRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<ISpan, Exception, HttpContext> <OnError>k__BackingField;
    public string ComponentName { get; public set; }
    public List`1<Func`2<HttpContext, bool>> IgnorePatterns { get; }
    public Func`2<HttpContext, bool> ExtractEnabled { get; public set; }
    public Func`2<HttpContext, string> OperationNameResolver { get; public set; }
    public Action`2<ISpan, HttpContext> OnRequest { get; public set; }
    public Action`3<ISpan, Exception, HttpContext> OnError { get; public set; }
    public string get_ComponentName();
    public void set_ComponentName(string value);
    public List`1<Func`2<HttpContext, bool>> get_IgnorePatterns();
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, bool> get_ExtractEnabled();
    [CompilerGeneratedAttribute]
public void set_ExtractEnabled(Func`2<HttpContext, bool> value);
    public Func`2<HttpContext, string> get_OperationNameResolver();
    public void set_OperationNameResolver(Func`2<HttpContext, string> value);
    [CompilerGeneratedAttribute]
public Action`2<ISpan, HttpContext> get_OnRequest();
    [CompilerGeneratedAttribute]
public void set_OnRequest(Action`2<ISpan, HttpContext> value);
    [CompilerGeneratedAttribute]
public Action`3<ISpan, Exception, HttpContext> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`3<ISpan, Exception, HttpContext> value);
}
internal class OpenTracing.Contrib.NetCore.AspNetCore.RequestHeadersExtractAdapter : object {
    private IHeaderDictionary _headers;
    public RequestHeadersExtractAdapter(IHeaderDictionary headers);
    public sealed virtual void Set(string key, string value);
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.AspNetCore.RequestHeadersExtractAdapter/<GetEnumerator>d__3")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OpenTracing.Contrib.NetCore.Configuration.AspNetCoreDiagnosticOptions : DiagnosticOptions {
    [CompilerGeneratedAttribute]
private HostingOptions <Hosting>k__BackingField;
    public HostingOptions Hosting { get; }
    [CompilerGeneratedAttribute]
public HostingOptions get_Hosting();
}
public abstract class OpenTracing.Contrib.NetCore.Configuration.DiagnosticOptions : object {
    [CompilerGeneratedAttribute]
private bool <LogEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoredEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartRootSpans>k__BackingField;
    public bool LogEvents { get; public set; }
    public HashSet`1<string> IgnoredEvents { get; }
    public bool StartRootSpans { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LogEvents();
    [CompilerGeneratedAttribute]
public void set_LogEvents(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoredEvents();
    [CompilerGeneratedAttribute]
public bool get_StartRootSpans();
    [CompilerGeneratedAttribute]
public void set_StartRootSpans(bool value);
}
public class OpenTracing.Contrib.NetCore.Configuration.EntityFrameworkCoreDiagnosticOptions : DiagnosticOptions {
    public static string DefaultComponent;
    private string _componentName;
    private List`1<Func`2<CommandEventData, bool>> _ignorePatterns;
    private Func`2<CommandEventData, string> _operationNameResolver;
    public List`1<Func`2<CommandEventData, bool>> IgnorePatterns { get; }
    public string ComponentName { get; public set; }
    public Func`2<CommandEventData, string> OperationNameResolver { get; public set; }
    public List`1<Func`2<CommandEventData, bool>> get_IgnorePatterns();
    public string get_ComponentName();
    public void set_ComponentName(string value);
    public Func`2<CommandEventData, string> get_OperationNameResolver();
    public void set_OperationNameResolver(Func`2<CommandEventData, string> value);
}
public class OpenTracing.Contrib.NetCore.Configuration.GenericDiagnosticOptions : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoredListenerNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <IgnoredEvents>k__BackingField;
    public HashSet`1<string> IgnoredListenerNames { get; }
    public Dictionary`2<string, HashSet`1<string>> IgnoredEvents { get; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoredListenerNames();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_IgnoredEvents();
    public void IgnoreEvent(string diagnosticListenerName, string eventName);
}
public class OpenTracing.Contrib.NetCore.Configuration.HttpHandlerDiagnosticOptions : DiagnosticOptions {
    public static string PropertyIgnore;
    public static string DefaultComponent;
    private string _componentName;
    private Func`2<HttpRequestMessage, string> _operationNameResolver;
    [CompilerGeneratedAttribute]
private List`1<Func`2<HttpRequestMessage, bool>> <IgnorePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequestMessage, bool> <InjectEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<ISpan, HttpRequestMessage> <OnRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<ISpan, Exception, HttpRequestMessage> <OnError>k__BackingField;
    public string ComponentName { get; public set; }
    public List`1<Func`2<HttpRequestMessage, bool>> IgnorePatterns { get; }
    public Func`2<HttpRequestMessage, bool> InjectEnabled { get; public set; }
    public Func`2<HttpRequestMessage, string> OperationNameResolver { get; public set; }
    public Action`2<ISpan, HttpRequestMessage> OnRequest { get; public set; }
    public Action`3<ISpan, Exception, HttpRequestMessage> OnError { get; public set; }
    public string get_ComponentName();
    public void set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<HttpRequestMessage, bool>> get_IgnorePatterns();
    [CompilerGeneratedAttribute]
public Func`2<HttpRequestMessage, bool> get_InjectEnabled();
    [CompilerGeneratedAttribute]
public void set_InjectEnabled(Func`2<HttpRequestMessage, bool> value);
    public Func`2<HttpRequestMessage, string> get_OperationNameResolver();
    public void set_OperationNameResolver(Func`2<HttpRequestMessage, string> value);
    [CompilerGeneratedAttribute]
public Action`2<ISpan, HttpRequestMessage> get_OnRequest();
    [CompilerGeneratedAttribute]
public void set_OnRequest(Action`2<ISpan, HttpRequestMessage> value);
    [CompilerGeneratedAttribute]
public Action`3<ISpan, Exception, HttpRequestMessage> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`3<ISpan, Exception, HttpRequestMessage> value);
}
public class OpenTracing.Contrib.NetCore.Configuration.MicrosoftSqlClientDiagnosticOptions : DiagnosticOptions {
    public static string DefaultComponent;
    public static string SqlClientPrefix;
    private string _componentName;
    private List`1<Func`2<SqlCommand, bool>> _ignorePatterns;
    private Func`2<SqlCommand, string> _operationNameResolver;
    public List`1<Func`2<SqlCommand, bool>> IgnorePatterns { get; }
    public string ComponentName { get; public set; }
    public Func`2<SqlCommand, string> OperationNameResolver { get; public set; }
    public List`1<Func`2<SqlCommand, bool>> get_IgnorePatterns();
    public string get_ComponentName();
    public void set_ComponentName(string value);
    public Func`2<SqlCommand, string> get_OperationNameResolver();
    public void set_OperationNameResolver(Func`2<SqlCommand, string> value);
}
internal class OpenTracing.Contrib.NetCore.Configuration.OpenTracingBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public OpenTracingBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
public class OpenTracing.Contrib.NetCore.Configuration.SqlClientDiagnosticOptions : DiagnosticOptions {
    public static string DefaultComponent;
    public static string SqlClientPrefix;
    private string _componentName;
    private List`1<Func`2<SqlCommand, bool>> _ignorePatterns;
    private Func`2<SqlCommand, string> _operationNameResolver;
    public List`1<Func`2<SqlCommand, bool>> IgnorePatterns { get; }
    public string ComponentName { get; public set; }
    public Func`2<SqlCommand, string> OperationNameResolver { get; public set; }
    public List`1<Func`2<SqlCommand, bool>> get_IgnorePatterns();
    public string get_ComponentName();
    public void set_ComponentName(string value);
    public Func`2<SqlCommand, string> get_OperationNameResolver();
    public void set_OperationNameResolver(Func`2<SqlCommand, string> value);
}
internal class OpenTracing.Contrib.NetCore.EntityFrameworkCore.EntityFrameworkCoreDiagnostics : DiagnosticEventObserver {
    public static string DiagnosticListenerName;
    private static string TagMethod;
    private static string TagIsAsync;
    private EntityFrameworkCoreDiagnosticOptions _options;
    private ConcurrentDictionary`2<object, IScope> _scopeStorage;
    public EntityFrameworkCoreDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<EntityFrameworkCoreDiagnosticOptions> options);
    protected virtual string GetListenerName();
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.EntityFrameworkCore.EntityFrameworkCoreDiagnostics/<HandledEventNames>d__7")]
protected virtual IEnumerable`1<string> HandledEventNames();
    protected virtual void HandleEvent(string eventName, object untypedArg);
    private bool IgnoreEvent(CommandEventData eventData);
}
internal class OpenTracing.Contrib.NetCore.GenericListeners.GenericDiagnostics : DiagnosticObserver {
    private GenericDiagnosticOptions _options;
    public GenericDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<GenericDiagnosticOptions> options);
    public virtual IDisposable SubscribeIfMatch(DiagnosticListener diagnosticListener);
}
internal class OpenTracing.Contrib.NetCore.HttpHandler.HttpHandlerDiagnostics : DiagnosticEventObserver {
    public static string DiagnosticListenerName;
    private static string PropertiesKey;
    private static PropertyFetcher _activityStart_RequestFetcher;
    private static PropertyFetcher _activityStop_RequestFetcher;
    private static PropertyFetcher _activityStop_ResponseFetcher;
    private static PropertyFetcher _activityStop_RequestTaskStatusFetcher;
    private static PropertyFetcher _exception_RequestFetcher;
    private static PropertyFetcher _exception_ExceptionFetcher;
    private HttpHandlerDiagnosticOptions _options;
    public HttpHandlerDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<HttpHandlerDiagnosticOptions> options);
    private static HttpHandlerDiagnostics();
    protected virtual string GetListenerName();
    protected virtual bool IsSupportedEvent(string eventName);
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.HttpHandler.HttpHandlerDiagnostics/<HandledEventNames>d__12")]
protected virtual IEnumerable`1<string> HandledEventNames();
    protected virtual void HandleEvent(string eventName, object untypedArg);
    private bool IgnoreRequest(HttpRequestMessage request);
    private IDictionary`2<string, object> GetRequestOptions(HttpRequestMessage request);
}
internal class OpenTracing.Contrib.NetCore.HttpHandler.HttpHeadersInjectAdapter : object {
    private HttpHeaders _headers;
    public HttpHeadersInjectAdapter(HttpHeaders headers);
    public sealed virtual void Set(string key, string value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class OpenTracing.Contrib.NetCore.InstrumentationService : object {
    private DiagnosticManager _diagnosticsManager;
    public InstrumentationService(DiagnosticManager diagnosticManager);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal abstract class OpenTracing.Contrib.NetCore.Internal.DiagnosticEventObserver : DiagnosticObserver {
    private DiagnosticOptions _options;
    private GenericEventProcessor _genericEventProcessor;
    protected DiagnosticEventObserver(ILoggerFactory loggerFactory, ITracer tracer, DiagnosticOptions options);
    public virtual IDisposable SubscribeIfMatch(DiagnosticListener diagnosticListener);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2<string, object> value);
    protected abstract virtual string GetListenerName();
    protected virtual bool IsSupportedEvent(string eventName);
    protected abstract virtual IEnumerable`1<string> HandledEventNames();
    private bool IsEnabled(string eventName);
    protected abstract virtual void HandleEvent(string eventName, object untypedArg);
    protected void HandleUnknownEvent(string eventName, object untypedArg, IEnumerable`1<KeyValuePair`2<string, string>> tags);
    protected void DisposeActiveScope(bool isScopeRequired, Exception exception);
}
internal class OpenTracing.Contrib.NetCore.Internal.DiagnosticManager : object {
    private ILogger _logger;
    private ITracer _tracer;
    private IEnumerable`1<DiagnosticObserver> _diagnosticSubscribers;
    private DiagnosticManagerOptions _options;
    private List`1<IDisposable> _subscriptions;
    private IDisposable _allListenersSubscription;
    public bool IsRunning { get; }
    public DiagnosticManager(ILoggerFactory loggerFactory, ITracer tracer, IEnumerable`1<DiagnosticObserver> diagnosticSubscribers, IOptions`1<DiagnosticManagerOptions> options);
    public bool get_IsRunning();
    public void Start();
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnNext(DiagnosticListener listener);
    public void Stop();
    public sealed virtual void Dispose();
}
public class OpenTracing.Contrib.NetCore.Internal.DiagnosticManagerOptions : object {
    [CompilerGeneratedAttribute]
private bool <StartInstrumentationForNoopTracer>k__BackingField;
    public bool StartInstrumentationForNoopTracer { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StartInstrumentationForNoopTracer();
    [CompilerGeneratedAttribute]
public void set_StartInstrumentationForNoopTracer(bool value);
}
internal abstract class OpenTracing.Contrib.NetCore.Internal.DiagnosticObserver : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ITracer <Tracer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLogLevelTraceEnabled>k__BackingField;
    protected ILogger Logger { get; }
    protected ITracer Tracer { get; }
    protected bool IsLogLevelTraceEnabled { get; }
    protected DiagnosticObserver(ILoggerFactory loggerFactory, ITracer tracer);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected ITracer get_Tracer();
    [CompilerGeneratedAttribute]
protected bool get_IsLogLevelTraceEnabled();
    public abstract virtual IDisposable SubscribeIfMatch(DiagnosticListener diagnosticListener);
}
internal class OpenTracing.Contrib.NetCore.Internal.GenericEventProcessor : object {
    private string _listenerName;
    private ITracer _tracer;
    private ILogger _logger;
    private bool _isLogLevelTraceEnabled;
    public GenericEventProcessor(string listenerName, ITracer tracer, ILogger logger);
    public void ProcessEvent(string eventName, object untypedArg, IEnumerable`1<KeyValuePair`2<string, string>> tags);
    private void HandleActivityStart(string eventName, Activity activity, object untypedArg, IEnumerable`1<KeyValuePair`2<string, string>> tags);
    private void HandleActivityStop(string eventName, Activity activity);
    private void HandleRegularEvent(string eventName, object untypedArg, IEnumerable`1<KeyValuePair`2<string, string>> tags);
    private Dictionary`2<string, object> GetLogFields(string eventName, object arg, IEnumerable`1<KeyValuePair`2<string, string>> tags);
}
public class OpenTracing.Contrib.NetCore.Internal.GlobalTracerAccessor : object {
    public sealed virtual ITracer GetGlobalTracer();
}
public interface OpenTracing.Contrib.NetCore.Internal.IGlobalTracerAccessor {
    public abstract virtual ITracer GetGlobalTracer();
}
internal class OpenTracing.Contrib.NetCore.Internal.PropertyFetcher : object {
    private string _propertyName;
    private Type _expectedType;
    private PropertyFetch _fetchForExpectedType;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
    [CompilerGeneratedAttribute]
private bool <Fetch>b__4_0(PropertyInfo p);
}
[ExtensionAttribute]
internal static class OpenTracing.Contrib.NetCore.Internal.SpanExtensions : object {
    [ExtensionAttribute]
public static void SetException(ISpan span, Exception exception);
}
[ExtensionAttribute]
internal static class OpenTracing.Contrib.NetCore.Internal.TracerExtensions : object {
    [ExtensionAttribute]
public static bool IsNoopTracer(ITracer tracer);
}
internal class OpenTracing.Contrib.NetCore.Logging.OpenTracingLogger : object {
    private static string OriginalFormatPropertyName;
    private string _categoryName;
    private IGlobalTracerAccessor _globalTracerAccessor;
    public OpenTracingLogger(IGlobalTracerAccessor globalTracerAccessor, string categoryName);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[ProviderAliasAttribute("OpenTracing")]
internal class OpenTracing.Contrib.NetCore.Logging.OpenTracingLoggerProvider : object {
    private IGlobalTracerAccessor _globalTracerAccessor;
    public OpenTracingLoggerProvider(IGlobalTracerAccessor globalTracerAccessor);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class OpenTracing.Contrib.NetCore.MicrosoftSqlClient.MicrosoftSqlClientDiagnostics : DiagnosticEventObserver {
    public static string DiagnosticListenerName;
    private static PropertyFetcher _activityCommand_RequestFetcher;
    private static PropertyFetcher _exception_ExceptionFetcher;
    private MicrosoftSqlClientDiagnosticOptions _options;
    private ConcurrentDictionary`2<object, ISpan> _spanStorage;
    public MicrosoftSqlClientDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<MicrosoftSqlClientDiagnosticOptions> options);
    private static MicrosoftSqlClientDiagnostics();
    protected virtual string GetListenerName();
    protected virtual bool IsSupportedEvent(string eventName);
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.MicrosoftSqlClient.MicrosoftSqlClientDiagnostics/<HandledEventNames>d__8")]
protected virtual IEnumerable`1<string> HandledEventNames();
    protected virtual void HandleEvent(string eventName, object untypedArg);
    private bool IgnoreEvent(SqlCommand sqlCommand);
}
internal class OpenTracing.Contrib.NetCore.SystemSqlClient.SqlClientDiagnostics : DiagnosticEventObserver {
    public static string DiagnosticListenerName;
    private static PropertyFetcher _writeCommandBefore_CommandFetcher;
    private static PropertyFetcher _writeCommandError_CommandFetcher;
    private static PropertyFetcher _writeCommandAfter_CommandFetcher;
    private static PropertyFetcher _exception_ExceptionFetcher;
    private SqlClientDiagnosticOptions _options;
    private ConcurrentDictionary`2<object, ISpan> _spanStorage;
    public SqlClientDiagnostics(ILoggerFactory loggerFactory, ITracer tracer, IOptions`1<SqlClientDiagnosticOptions> options);
    private static SqlClientDiagnostics();
    protected virtual string GetListenerName();
    protected virtual bool IsSupportedEvent(string eventName);
    [IteratorStateMachineAttribute("OpenTracing.Contrib.NetCore.SystemSqlClient.SqlClientDiagnostics/<HandledEventNames>d__10")]
protected virtual IEnumerable`1<string> HandledEventNames();
    protected virtual void HandleEvent(string eventName, object untypedArg);
    private bool IgnoreEvent(SqlCommand sqlCommand);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
