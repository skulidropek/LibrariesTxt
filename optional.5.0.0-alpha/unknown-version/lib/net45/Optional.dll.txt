[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Optional.Async.Linq.OptionTaskLinqExtensions : object {
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> Select(Task`1<Option`1<TSource>> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> SelectMany(Task`1<Option`1<TSource>> source, Func`2<TSource, Task`1<Option`1<TResult>>> selector);
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> SelectMany(Task`1<Option`1<TSource>> source, Func`2<TSource, Task`1<Option`1<TCollection>>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static Task`1<Option`1<TSource>> Where(Task`1<Option`1<TSource>> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> Select(Task`1<Option`2<TSource, TException>> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> SelectMany(Task`1<Option`2<TSource, TException>> source, Func`2<TSource, Task`1<Option`2<TResult, TException>>> selector);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> SelectMany(Task`1<Option`2<TSource, TException>> source, Func`2<TSource, Task`1<Option`2<TCollection, TException>>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
}
[ExtensionAttribute]
public static class Optional.Async.OptionTaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> MapAsync(Option`2<T, TException> option, Func`2<T, Task`1<TResult>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapAsync>d__1`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> MapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, TResult> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapAsync>d__2`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> MapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<TResult>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TExceptionResult>> MapExceptionAsync(Option`2<T, TException> option, Func`2<TException, Task`1<TExceptionResult>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapExceptionAsync>d__4`3")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TExceptionResult>> MapExceptionAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<TException, TExceptionResult> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapExceptionAsync>d__5`3")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TExceptionResult>> MapExceptionAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<TException, Task`1<TExceptionResult>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Option`2<T, TException> option, Func`2<T, Task`1<Option`2<TResult, TException>>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__7`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Option`2<TResult, TException>> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__8`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<Option`2<TResult, TException>>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Option`2<T, TException> option, Func`2<T, Task`1<Option`1<TResult>>> mapping, TException exception);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Option`2<T, TException> option, Func`2<T, Task`1<Option`1<TResult>>> mapping, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Option`1<TResult>> mapping, TException exception, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__12`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Option`1<TResult>> mapping, Func`1<TException> exceptionFactory, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<Option`1<TResult>>> mapping, TException exception, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__14`3")]
[ExtensionAttribute]
public static Task`1<Option`2<TResult, TException>> FlatMapAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<Option`1<TResult>>> mapping, Func`1<TException> exceptionFactory, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Option`2<T, TException> option, Func`2<T, Task`1<bool>> predicate, TException exception);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Option`2<T, TException> option, Func`2<T, Task`1<bool>> predicate, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, bool> predicate, TException exception, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FilterAsync>d__18`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, bool> predicate, Func`1<TException> exceptionFactory, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<bool>> predicate, TException exception, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FilterAsync>d__20`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FilterAsync(Task`1<Option`2<T, TException>> optionTask, Func`2<T, Task`1<bool>> predicate, Func`1<TException> exceptionFactory, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> NotNullAsync(Task`1<Option`2<T, TException>> optionTask, TException exception);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> NotNullAsync(Task`1<Option`2<T, TException>> optionTask, Func`1<TException> exceptionFactory);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__23`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> OrAsync(Option`2<T, TException> option, Func`1<Task`1<T>> alternativeFactory);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__24`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> OrAsync(Task`1<Option`2<T, TException>> optionTask, Func`1<T> alternativeFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__25`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> OrAsync(Task`1<Option`2<T, TException>> optionTask, Func`1<Task`1<T>> alternativeFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__26`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> ElseAsync(Option`2<T, TException> option, Func`1<Task`1<Option`2<T, TException>>> alternativeOptionFactory);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__27`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> ElseAsync(Task`1<Option`2<T, TException>> optionTask, Func`1<Option`2<T, TException>> alternativeOptionFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__28`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> ElseAsync(Task`1<Option`2<T, TException>> optionTask, Func`1<Task`1<Option`2<T, TException>>> alternativeOptionFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<WithoutExceptionAsync>d__29`2")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> WithoutExceptionAsync(Task`1<Option`2<T, TException>> optionTask);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlattenAsync>d__30`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> FlattenAsync(Task`1<Option`2<Option`2<T, TException>, TException>> optionTask);
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> MapAsync(Option`1<T> option, Func`2<T, Task`1<TResult>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapAsync>d__32`2")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> MapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, TResult> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<MapAsync>d__33`2")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> MapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Task`1<TResult>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Option`1<T> option, Func`2<T, Task`1<Option`1<TResult>>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__35`2")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Option`1<TResult>> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__36`2")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Task`1<Option`1<TResult>>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Option`1<T> option, Func`2<T, Task`1<Option`2<TResult, TException>>> mapping);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__38`3")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Option`2<TResult, TException>> mapping, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlatMapAsync>d__39`3")]
[ExtensionAttribute]
public static Task`1<Option`1<TResult>> FlatMapAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Task`1<Option`2<TResult, TException>>> mapping, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`1<T>> FilterAsync(Option`1<T> option, Func`2<T, Task`1<bool>> predicate);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FilterAsync>d__41`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> FilterAsync(Task`1<Option`1<T>> optionTask, Func`2<T, bool> predicate, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FilterAsync>d__42`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> FilterAsync(Task`1<Option`1<T>> optionTask, Func`2<T, Task`1<bool>> predicate, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`1<T>> NotNullAsync(Task`1<Option`1<T>> optionTask);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__44`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> OrAsync(Option`1<T> option, Func`1<Task`1<T>> alternativeFactory);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__45`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> OrAsync(Task`1<Option`1<T>> optionTask, Func`1<T> alternativeFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<OrAsync>d__46`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> OrAsync(Task`1<Option`1<T>> optionTask, Func`1<Task`1<T>> alternativeFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__47`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> ElseAsync(Option`1<T> option, Func`1<Task`1<Option`1<T>>> alternativeOptionFactory);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__48`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> ElseAsync(Task`1<Option`1<T>> optionTask, Func`1<Option`1<T>> alternativeOptionFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<ElseAsync>d__49`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> ElseAsync(Task`1<Option`1<T>> optionTask, Func`1<Task`1<Option`1<T>>> alternativeOptionFactory, bool executeOnCapturedContext);
    [ExtensionAttribute]
public static Task`1<Option`2<T, TException>> WithExceptionAsync(Task`1<Option`1<T>> optionTask, TException exception);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<WithExceptionAsync>d__51`2")]
[ExtensionAttribute]
public static Task`1<Option`2<T, TException>> WithExceptionAsync(Task`1<Option`1<T>> optionTask, Func`1<TException> exceptionFactory, bool executeOnCapturedContext);
    [AsyncStateMachineAttribute("Optional.Async.OptionTaskExtensions/<FlattenAsync>d__52`1")]
[ExtensionAttribute]
public static Task`1<Option`1<T>> FlattenAsync(Task`1<Option`1<Option`1<T>>> optionTask);
}
[ExtensionAttribute]
public static class Optional.Collections.OptionCollectionExtensions : object {
    [IteratorStateMachineAttribute("Optional.Collections.OptionCollectionExtensions/<Values>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Values(IEnumerable`1<Option`1<T>> source);
    [IteratorStateMachineAttribute("Optional.Collections.OptionCollectionExtensions/<Values>d__1`2")]
[ExtensionAttribute]
public static IEnumerable`1<T> Values(IEnumerable`1<Option`2<T, TException>> source);
    [IteratorStateMachineAttribute("Optional.Collections.OptionCollectionExtensions/<Exceptions>d__2`2")]
[ExtensionAttribute]
public static IEnumerable`1<TException> Exceptions(IEnumerable`1<Option`2<T, TException>> source);
    [ExtensionAttribute]
public static Option`1<TValue> GetValueOrNone(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, TKey key);
    [ExtensionAttribute]
public static Option`1<TSource> FirstOrNone(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Option`1<TSource> FirstOrNone(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static Option`1<TSource> LastOrNone(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Option`1<TSource> LastOrNone(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static Option`1<TSource> SingleOrNone(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Option`1<TSource> SingleOrNone(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static Option`1<TSource> ElementAtOrNone(IEnumerable`1<TSource> source, int index);
}
[ExtensionAttribute]
public static class Optional.Linq.OptionLinqExtensions : object {
    [ExtensionAttribute]
public static Option`1<TResult> Select(Option`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static Option`1<TResult> SelectMany(Option`1<TSource> source, Func`2<TSource, Option`1<TResult>> selector);
    [ExtensionAttribute]
public static Option`1<TResult> SelectMany(Option`1<TSource> source, Func`2<TSource, Option`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static Option`1<TSource> Where(Option`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static Option`2<TResult, TException> Select(Option`2<TSource, TException> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static Option`2<TResult, TException> SelectMany(Option`2<TSource, TException> source, Func`2<TSource, Option`2<TResult, TException>> selector);
    [ExtensionAttribute]
public static Option`2<TResult, TException> SelectMany(Option`2<TSource, TException> source, Func`2<TSource, Option`2<TCollection, TException>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
}
public static class Optional.Option : object {
    public static Option`1<T> Some(T value);
    public static Option`2<T, TException> Some(T value);
    public static Option`1<T> None();
    public static Option`2<T, TException> None(TException exception);
}
[IsReadOnlyAttribute]
[DebuggerTypeProxyAttribute("Optional.OptionDebugView`1")]
public class Optional.Option`1 : ValueType {
    private bool hasValue;
    private T value;
    public bool HasValue { get; }
    internal T Value { get; }
    internal Option`1(T value, bool hasValue);
    public bool get_HasValue();
    internal T get_Value();
    public sealed virtual bool Equals(Option`1<T> other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(Option`1<T> left, Option`1<T> right);
    public static bool op_Inequality(Option`1<T> left, Option`1<T> right);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Option`1<T> other);
    public static bool op_LessThan(Option`1<T> left, Option`1<T> right);
    public static bool op_LessThanOrEqual(Option`1<T> left, Option`1<T> right);
    public static bool op_GreaterThan(Option`1<T> left, Option`1<T> right);
    public static bool op_GreaterThanOrEqual(Option`1<T> left, Option`1<T> right);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Optional.Option`1/<ToEnumerable>d__18")]
public IEnumerable`1<T> ToEnumerable();
    [IteratorStateMachineAttribute("Optional.Option`1/<GetEnumerator>d__19")]
public IEnumerator`1<T> GetEnumerator();
    public bool Contains(T value);
    public bool Exists(Func`2<T, bool> predicate);
    public T ValueOr(T alternative);
    public T ValueOr(Func`1<T> alternativeFactory);
    public Option`1<T> Or(T alternative);
    public Option`1<T> Or(Func`1<T> alternativeFactory);
    public Option`1<T> Else(Option`1<T> alternativeOption);
    public Option`1<T> Else(Func`1<Option`1<T>> alternativeOptionFactory);
    public Option`2<T, TException> WithException(TException exception);
    public Option`2<T, TException> WithException(Func`1<TException> exceptionFactory);
    public TResult Match(Func`2<T, TResult> some, Func`1<TResult> none);
    public void Match(Action`1<T> some, Action none);
    public void MatchSome(Action`1<T> some);
    public void MatchNone(Action none);
    public Option`1<TResult> Map(Func`2<T, TResult> mapping);
    public Option`1<TResult> FlatMap(Func`2<T, Option`1<TResult>> mapping);
    public Option`1<TResult> FlatMap(Func`2<T, Option`2<TResult, TException>> mapping);
    public Option`1<T> Filter(bool condition);
    public Option`1<T> Filter(Func`2<T, bool> predicate);
    public Option`1<T> NotNull();
}
[IsReadOnlyAttribute]
[DebuggerTypeProxyAttribute("Optional.OptionDebugView`2")]
public class Optional.Option`2 : ValueType {
    private bool hasValue;
    private T value;
    private TException exception;
    public bool HasValue { get; }
    internal T Value { get; }
    internal TException Exception { get; }
    internal Option`2(T value, TException exception, bool hasValue);
    public bool get_HasValue();
    internal T get_Value();
    internal TException get_Exception();
    public sealed virtual bool Equals(Option`2<T, TException> other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(Option`2<T, TException> left, Option`2<T, TException> right);
    public static bool op_Inequality(Option`2<T, TException> left, Option`2<T, TException> right);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Option`2<T, TException> other);
    public static bool op_LessThan(Option`2<T, TException> left, Option`2<T, TException> right);
    public static bool op_LessThanOrEqual(Option`2<T, TException> left, Option`2<T, TException> right);
    public static bool op_GreaterThan(Option`2<T, TException> left, Option`2<T, TException> right);
    public static bool op_GreaterThanOrEqual(Option`2<T, TException> left, Option`2<T, TException> right);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Optional.Option`2/<ToEnumerable>d__21")]
public IEnumerable`1<T> ToEnumerable();
    [IteratorStateMachineAttribute("Optional.Option`2/<GetEnumerator>d__22")]
public IEnumerator`1<T> GetEnumerator();
    public bool Contains(T value);
    public bool Exists(Func`2<T, bool> predicate);
    public T ValueOr(T alternative);
    public T ValueOr(Func`1<T> alternativeFactory);
    public T ValueOr(Func`2<TException, T> alternativeFactory);
    public Option`2<T, TException> Or(T alternative);
    public Option`2<T, TException> Or(Func`1<T> alternativeFactory);
    public Option`2<T, TException> Or(Func`2<TException, T> alternativeFactory);
    public Option`2<T, TException> Else(Option`2<T, TException> alternativeOption);
    public Option`2<T, TException> Else(Func`1<Option`2<T, TException>> alternativeOptionFactory);
    public Option`2<T, TException> Else(Func`2<TException, Option`2<T, TException>> alternativeOptionFactory);
    public Option`1<T> WithoutException();
    public TResult Match(Func`2<T, TResult> some, Func`2<TException, TResult> none);
    public void Match(Action`1<T> some, Action`1<TException> none);
    public void MatchSome(Action`1<T> some);
    public void MatchNone(Action`1<TException> none);
    public Option`2<TResult, TException> Map(Func`2<T, TResult> mapping);
    public Option`2<T, TExceptionResult> MapException(Func`2<TException, TExceptionResult> mapping);
    public Option`2<TResult, TException> FlatMap(Func`2<T, Option`2<TResult, TException>> mapping);
    public Option`2<TResult, TException> FlatMap(Func`2<T, Option`1<TResult>> mapping, TException exception);
    public Option`2<TResult, TException> FlatMap(Func`2<T, Option`1<TResult>> mapping, Func`1<TException> exceptionFactory);
    public Option`2<T, TException> Filter(bool condition, TException exception);
    public Option`2<T, TException> Filter(bool condition, Func`1<TException> exceptionFactory);
    public Option`2<T, TException> Filter(Func`2<T, bool> predicate, TException exception);
    public Option`2<T, TException> Filter(Func`2<T, bool> predicate, Func`1<TException> exceptionFactory);
    public Option`2<T, TException> NotNull(TException exception);
    public Option`2<T, TException> NotNull(Func`1<TException> exceptionFactory);
}
internal class Optional.OptionDebugView`1 : object {
    private Option`1<T> option;
    public bool HasValue { get; }
    public T Value { get; }
    public OptionDebugView`1(Option`1<T> option);
    public bool get_HasValue();
    public T get_Value();
    public virtual string ToString();
}
internal class Optional.OptionDebugView`2 : object {
    private Option`2<T, TException> option;
    public bool HasValue { get; }
    public T Value { get; }
    public TException Exception { get; }
    public OptionDebugView`2(Option`2<T, TException> option);
    public bool get_HasValue();
    public T get_Value();
    public TException get_Exception();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Optional.OptionExtensions : object {
    [ExtensionAttribute]
public static Option`1<T> Some(T value);
    [ExtensionAttribute]
public static Option`2<T, TException> Some(T value);
    [ExtensionAttribute]
public static Option`1<T> None(T value);
    [ExtensionAttribute]
public static Option`2<T, TException> None(T value, TException exception);
    [ExtensionAttribute]
public static Option`1<T> SomeWhen(T value, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Option`2<T, TException> SomeWhen(T value, Func`2<T, bool> predicate, TException exception);
    [ExtensionAttribute]
public static Option`2<T, TException> SomeWhen(T value, Func`2<T, bool> predicate, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static Option`2<T, TException> SomeWhen(T value, Func`2<T, bool> predicate, Func`2<T, TException> exceptionFactory);
    [ExtensionAttribute]
public static Option`1<T> NoneWhen(T value, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Option`2<T, TException> NoneWhen(T value, Func`2<T, bool> predicate, TException exception);
    [ExtensionAttribute]
public static Option`2<T, TException> NoneWhen(T value, Func`2<T, bool> predicate, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static Option`2<T, TException> NoneWhen(T value, Func`2<T, bool> predicate, Func`2<T, TException> exceptionFactory);
    [ExtensionAttribute]
public static Option`1<T> SomeNotNull(T value);
    [ExtensionAttribute]
public static Option`2<T, TException> SomeNotNull(T value, TException exception);
    [ExtensionAttribute]
public static Option`2<T, TException> SomeNotNull(T value, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static Option`1<T> ToOption(Nullable`1<T> value);
    [ExtensionAttribute]
public static Option`2<T, TException> ToOption(Nullable`1<T> value, TException exception);
    [ExtensionAttribute]
public static Option`2<T, TException> ToOption(Nullable`1<T> value, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
public static T ValueOrException(Option`2<T, T> option);
    [ExtensionAttribute]
public static Option`1<T> Flatten(Option`1<Option`1<T>> option);
    [ExtensionAttribute]
public static Option`2<T, TException> Flatten(Option`2<Option`2<T, TException>, TException> option);
}
[ExtensionAttribute]
public static class Optional.Unsafe.OptionUnsafeExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<T> ToNullable(Option`1<T> option);
    [ExtensionAttribute]
public static T ValueOrDefault(Option`1<T> option);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`1<T> option);
    [ExtensionAttribute]
public static Nullable`1<T> ToNullable(Option`2<T, TException> option);
    [ExtensionAttribute]
public static T ValueOrDefault(Option`2<T, TException> option);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`2<T, TException> option);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`1<T> option, string errorMessage);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`1<T> option, Func`1<string> errorMessageFactory);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`2<T, TException> option, string errorMessage);
    [ExtensionAttribute]
public static T ValueOrFailure(Option`2<T, TException> option, Func`2<TException, string> errorMessageFactory);
}
public class Optional.Unsafe.OptionValueMissingException : Exception {
    internal OptionValueMissingException(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
