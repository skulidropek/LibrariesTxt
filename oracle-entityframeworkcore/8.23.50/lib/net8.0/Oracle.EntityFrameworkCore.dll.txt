[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.OracleMigrationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOracle(MigrationBuilder migrationBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OracleDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsOracle(DatabaseFacade database);
    [ExtensionAttribute]
public static bool EnsureCreated(DatabaseFacade database, String[] schemas);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.OracleDatabaseFacadeExtensions/<EnsureCreatedAsync>d__2")]
[ExtensionAttribute]
public static Task`1<bool> EnsureCreatedAsync(DatabaseFacade database, String[] schemas, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool EnsureDeleted(DatabaseFacade database, String[] schemas);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.OracleDatabaseFacadeExtensions/<EnsureDeletedAsync>d__4")]
[ExtensionAttribute]
public static Task`1<bool> EnsureDeletedAsync(DatabaseFacade database, String[] schemas, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OracleDbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseOracle(DbContextOptionsBuilder optionsBuilder, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseOracle(DbContextOptionsBuilder optionsBuilder, string connectionString, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseOracle(DbContextOptionsBuilder optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseOracle(DbContextOptionsBuilder`1<TContext> optionsBuilder, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseOracle(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseOracle(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    private static OracleOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
    private static void ConfigureWarnings(DbContextOptionsBuilder optionsBuilder);
    private static DbContextOptionsBuilder ApplyConfiguration(DbContextOptionsBuilder optionsBuilder, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseOracle(DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseOracle(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction);
}
public static class Microsoft.EntityFrameworkCore.OracleDbFunctionsExtensions : object {
}
public static class Microsoft.EntityFrameworkCore.OracleIndexBuilderExtensions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OracleModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder UseHiLo(ModelBuilder modelBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder, long seed, int increment);
    [ExtensionAttribute]
public static ModelBuilder UseKeySequences(ModelBuilder modelBuilder, string nameSuffix, string schema);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder, int seed, int increment);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
internal static void <HasValueGenerationStrategy>g__RemoveKeySequenceAnnotations|10_0(<>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OracleModelExtensions : object {
    public static string DefaultHiLoSequenceName;
    public static string DefaultSequenceNameSuffix;
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static long GetIdentitySeed(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableModel model, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionModel model, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static int GetIdentityIncrement(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableModel model, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionModel model, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<OracleValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> SetValueGenerationStrategy(IConventionModel model, Nullable`1<OracleValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceNameSuffix(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceNameSuffix(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceNameSuffix(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameSuffixConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OraclePropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseHiLo(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseHiLo(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseSequence(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseSequence(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ColumnBuilder UseIdentityColumn(ColumnBuilder columnBuilder, long seed, int increment);
    [ExtensionAttribute]
public static ColumnBuilder`1<TProperty> UseIdentityColumn(ColumnBuilder`1<TProperty> columnBuilder, long seed, int increment);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<OracleValueGenerationStrategy> valueGenerationStrategy, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.OraclePropertyExtensions : object {
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableProperty property, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionProperty property, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableProperty property, Nullable`1<long> seed, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionProperty property, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableRelationalPropertyOverrides overrides, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionRelationalPropertyOverrides overrides, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableProperty property, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionProperty property, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableProperty property, Nullable`1<int> increment, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionProperty property, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableRelationalPropertyOverrides overrides, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionRelationalPropertyOverrides overrides, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static OracleValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property);
    [ExtensionAttribute]
public static OracleValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
internal static OracleValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides overrides);
    private static OracleValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property);
    private static OracleValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<OracleValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<OracleValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<OracleValueGenerationStrategy> value, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<OracleValueGenerationStrategy> value, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableRelationalPropertyOverrides overrides, Nullable`1<OracleValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<OracleValueGenerationStrategy> SetValueGenerationStrategy(IConventionRelationalPropertyOverrides overrides, Nullable`1<OracleValueGenerationStrategy> value, bool fromDataAnnotation);
    private static Nullable`1<OracleValueGenerationStrategy> CheckValueGenerationStrategy(IReadOnlyProperty property, Nullable`1<OracleValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    public static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property);
    private static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
}
public enum Microsoft.EntityFrameworkCore.OracleSQLCompatibility : Enum {
    public int value__;
    public static OracleSQLCompatibility DatabaseVersion19;
    public static OracleSQLCompatibility DatabaseVersion21;
    public static OracleSQLCompatibility DatabaseVersion23;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OracleServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddOracle(IServiceCollection serviceCollection, string connectionString, Action`1<OracleDbContextOptionsBuilder> oracleOptionsAction, Action`1<DbContextOptionsBuilder> optionsAction);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IServiceCollection AddEntityFrameworkOracle(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Oracle.EntityFrameworkCore.ConfigHelper : object {
    internal static List`1<string> configItems;
    internal static bool configItemsTraced;
    internal static object locker;
    private static ConfigHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Design.Internal.OracleAnnotationCodeGenerator : AnnotationCodeGenerator {
    private static MethodInfo _modelUseIdentityColumnsMethodInfo;
    private static MethodInfo _modelUseHiLoMethodInfo;
    private static MethodInfo _modelUseKeySequencesMethodInfo;
    private static MethodInfo _modelHasAnnotationMethodInfo;
    private static MethodInfo _entityTypeToTableMethodInfo;
    private static MethodInfo _propertyUseIdentityColumnsMethodInfo;
    private static MethodInfo _propertyUseSequenceMethodInfo;
    private static MethodInfo _propertyUseHiLoMethodInfo;
    public OracleAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    private static OracleAnnotationCodeGenerator();
    protected virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    private MethodCallCodeFragment GenerateValueGenerationStrategy(IDictionary`2<string, IAnnotation> annotations, IModel model, bool onModel);
    private static T GetAndRemove(IDictionary`2<string, IAnnotation> annotations, string annotationName);
    protected virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Design.Internal.OracleCSharpRuntimeAnnotationCodeGenerator : RelationalCSharpRuntimeAnnotationCodeGenerator {
    public OracleCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies);
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IRelationalPropertyOverrides overrides, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
}
public class Oracle.EntityFrameworkCore.Design.Internal.OracleDesignTimeServices : object {
    [NullableContextAttribute("1")]
public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData : EventData {
    [CompilerGeneratedAttribute]
private OracleValueGenerationStrategy <OracleValueGenerationStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OtherValueGenerationStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyProperty <Property>k__BackingField;
    public OracleValueGenerationStrategy OracleValueGenerationStrategy { get; }
    public string OtherValueGenerationStrategy { get; }
    public IReadOnlyProperty Property { get; }
    public ConflictingValueGenerationStrategiesEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, OracleValueGenerationStrategy oracleValueGenerationStrategy, string otherValueGenerationStrategy, IReadOnlyProperty property);
    [CompilerGeneratedAttribute]
public virtual OracleValueGenerationStrategy get_OracleValueGenerationStrategy();
    [CompilerGeneratedAttribute]
public virtual string get_OtherValueGenerationStrategy();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyProperty get_Property();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Diagnostics.Internal.OracleLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogDefaultDecimalTypeColumn;
    public EventDefinitionBase LogByteIdentityColumn;
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundTypeAlias;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogReflexiveConstraintIgnored;
    public EventDefinitionBase LogConflictingValueGenerationStrategies;
    public EventDefinitionBase LogDecimalTypeKey;
    public EventDefinitionBase LogColumnWithoutType;
    public EventDefinitionBase LogDuplicateForeignKeyConstraintIgnored;
    public EventDefinitionBase LogPrincipalTableInformationNotFound;
}
public static class Oracle.EntityFrameworkCore.Diagnostics.OracleEventId : object {
    [NullableAttribute("1")]
private static string _validationPrefix;
    public static EventId DecimalTypeDefaultWarning;
    public static EventId ByteIdentityColumnWarning;
    public static EventId ConflictingValueGenerationStrategiesWarning;
    public static EventId TypeAliasFound;
    public static EventId SequenceFound;
    public static EventId ReflexiveConstraintIgnored;
    public static EventId DecimalTypeKeyWarning;
    [NullableAttribute("1")]
private static string _scaffoldingPrefix;
    public static EventId ColumnFound;
    public static EventId DefaultSchemaFound;
    public static EventId MissingSchemaWarning;
    public static EventId MissingTableWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    public static EventId TableFound;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId DuplicateForeignKeyConstraintIgnored;
    public static EventId ColumnWithoutTypeWarning;
    public static EventId ForeignKeyReferencesUnknownPrincipalTableWarning;
    private static OracleEventId();
    private static EventId MakeValidationId(Id id);
    private static EventId MakeScaffoldingId(Id id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Oracle.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|213_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass213_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Oracle.EntityFrameworkCore.Extensions.Internal.OracleLoggerExtensions : object {
    [ExtensionAttribute]
public static void DecimalTypeKeyWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeKeyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DecimalTypeDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ByteIdentityColumnWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ByteIdentityColumnWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingValueGenerationStrategiesWarning(IDiagnosticsLogger`1<Validation> diagnostics, OracleValueGenerationStrategy oracleValueGenerationStrategy, string otherValueGenerationStrategy, IReadOnlyProperty property);
    private static string ConflictingValueGenerationStrategiesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ColumnFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName, int ordinal, string dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, string defaultValue, string computedValue, Nullable`1<bool> stored);
    [ExtensionAttribute]
public static void ForeignKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction);
    [ExtensionAttribute]
public static void DefaultSchemaFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void TypeAliasFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string typeAliasName, string systemTypeName);
    [ExtensionAttribute]
public static void PrimaryKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string primaryKeyName, string tableName);
    [ExtensionAttribute]
public static void UniqueConstraintFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string uniqueConstraintName, string tableName);
    [ExtensionAttribute]
public static void IndexFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName, bool unique);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName);
    [ExtensionAttribute]
public static void ForeignKeyPrincipalColumnMissingWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);
    [ExtensionAttribute]
public static void MissingSchemaWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void MissingTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void SequenceFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int increment, long start, long min, long max);
    [ExtensionAttribute]
public static void TableFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void ReflexiveConstraintIgnored(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName);
}
public interface Oracle.EntityFrameworkCore.Infrastructure.Internal.IOracleOptions {
    public OracleSQLCompatibility OracleSQLCompatibility { get; }
    public abstract virtual OracleSQLCompatibility get_OracleSQLCompatibility();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Infrastructure.Internal.OracleModelValidator : RelationalModelValidator {
    internal OracleSQLCompatibility _oracleSQLCompatibility;
    public OracleModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies, IOracleOptions options);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDecimalColumns(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateByteIdentityMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedColumnsCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Infrastructure.Internal.OracleOptionsExtension : RelationalOptionsExtension {
    [NullableAttribute("2")]
private DbContextOptionsExtensionInfo _info;
    private Nullable`1<OracleSQLCompatibility> _oracleSQLCompatibility;
    internal static OracleSQLCompatibility DefaultSQLCompatibility;
    public DbContextOptionsExtensionInfo Info { get; }
    public OracleSQLCompatibility OracleSQLCompatibility { get; }
    public Nullable`1<OracleSQLCompatibility> OracleSQLCompatibilityLevelWithoutDefault { get; }
    protected OracleOptionsExtension(OracleOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual RelationalOptionsExtension Clone();
    public virtual OracleSQLCompatibility get_OracleSQLCompatibility();
    public virtual OracleOptionsExtension WithOracleSQLCompatibility(OracleSQLCompatibility oracleSQLCompatibility);
    public virtual Nullable`1<OracleSQLCompatibility> get_OracleSQLCompatibilityLevelWithoutDefault();
    public virtual OracleOptionsExtension WithOracleSQLCompatibilityLevel(Nullable`1<OracleSQLCompatibility> compatibilityLevel);
    public virtual IDbContextOptionsExtension ApplyDefaults(IDbContextOptions options);
    public virtual void ApplyServices(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Oracle.EntityFrameworkCore.Infrastructure.OracleDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<OracleDbContextOptionsBuilder, OracleOptionsExtension> {
    public OracleDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    public virtual OracleDbContextOptionsBuilder UseOracleSQLCompatibility(OracleSQLCompatibility oracleSQLCompatibility);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Oracle.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
public class Oracle.EntityFrameworkCore.Internal.OracleOptions : object {
    [CompilerGeneratedAttribute]
private OracleSQLCompatibility <OracleSQLCompatibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OracleSQLCompatibility> <OracleSQLCompatibilityLevelWithoutDefault>k__BackingField;
    public OracleSQLCompatibility OracleSQLCompatibility { get; private set; }
    public Nullable`1<OracleSQLCompatibility> OracleSQLCompatibilityLevelWithoutDefault { get; private set; }
    [NullableContextAttribute("1")]
public virtual void Initialize(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual OracleSQLCompatibility get_OracleSQLCompatibility();
    [CompilerGeneratedAttribute]
private void set_OracleSQLCompatibility(OracleSQLCompatibility value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<OracleSQLCompatibility> get_OracleSQLCompatibilityLevelWithoutDefault();
    [CompilerGeneratedAttribute]
private void set_OracleSQLCompatibilityLevelWithoutDefault(Nullable`1<OracleSQLCompatibility> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Oracle.EntityFrameworkCore.Internal.OracleResources : object {
    private static OracleStringsResourceManager _resourceManager;
    private static OracleResources();
    public static EventDefinition`2<string, string> LogByteIdentityColumn(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogConflictingValueGenerationStrategies(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDecimalTypeKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDefaultDecimalTypeColumn(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundDefaultSchema(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogReflexiveConstraintIgnored(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingSchema(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingTable(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundTable(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundTypeAlias(IDiagnosticsLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Oracle.EntityFrameworkCore.Internal.OracleStrings : object {
    private static OracleStringsResourceManager _resourceManager;
    public static string TransientExceptionDetected { get; }
    public static string NoSavepointRelease { get; }
    public static string NoStoredProcedureWithReturnValue { get; }
    public static string JsonValuePathExpressionsNotSupported { get; }
    private static OracleStrings();
    [NullableContextAttribute("2")]
public static string IdentityBadType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string SequenceBadType(object property, object entityType, object propertyType);
    public static string get_TransientExceptionDetected();
    [NullableContextAttribute("2")]
public static string NonKeyValueGeneration(object property, object entityType);
    public static string get_NoSavepointRelease();
    public static string get_NoStoredProcedureWithReturnValue();
    [NullableContextAttribute("2")]
public static string MappingNotSupported(object entityType, object databaseType);
    [NullableContextAttribute("2")]
public static string MultipleIdentityColumns(object properties, object table);
    public static string InvalidTableToIncludeInScaffolding(object table);
    public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    private static string GetString(string name, String[] formatterNames);
    public static string CannotProduceUnterminatedSQLWithComments(object operation);
    [NullableContextAttribute("2")]
public static string DuplicateColumnIdentityIncrementMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnIdentitySeedMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnSequenceMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string get_JsonValuePathExpressionsNotSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Oracle.EntityFrameworkCore.Internal.OracleStringsResourceManager : ResourceManager {
    private static string RESOURCE_NAME_PREFIX;
    private static string RESOURCE_NAME_PREFIX_WITH_DOT;
    private static string RESOURCE_NAME_SUFFIX;
    private static string RESOURCE_NAME_SUFFIX_WITH_DOT;
    private static char DOT;
    private static string DFEAULT_RESOURCE_NAME;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, ResourceSet> m_CultureToResourceStringMap;
    internal OracleStringsResourceManager(string baseName, Assembly assembly);
    private static OracleStringsResourceManager();
    [IteratorStateMachineAttribute("Oracle.EntityFrameworkCore.Internal.OracleStringsResourceManager/<NextMatchingNonInvariantCulture>d__8")]
private IEnumerable`1<string> NextMatchingNonInvariantCulture(CultureInfo culture);
    private static void ExtractEmbeddedResourceStringsForCultureName(string name);
    private string GetResourceStringForCultureName(string key, string cultureName);
    public string GetWarningStringWithErrorCode(string name);
    public virtual string GetString(string name);
    public virtual string GetString(string name, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleConventionSetBuilder : RelationalConventionSetBuilder {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Model> logger;
    private ISqlGenerationHelper _sqlGenerationHelper;
    public OracleConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
    public static ModelBuilder CreateModelBuilder();
    private static IServiceScope CreateServiceScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleIndexConvention : object {
    private ISqlGenerationHelper _sqlGenerationHelper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Model> m_oracleLogger;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public OracleIndexConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private IConventionIndexBuilder SetIndexFilter(IConventionIndexBuilder indexBuilder, bool columnNameChanged);
    private string CreateIndexFilter(List`1<string> nullableColumns);
    private List`1<string> GetNullableColumns(IReadOnlyIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleOnDeleteConvention : CascadeDeleteConvention {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public OracleOnDeleteConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    protected virtual DeleteBehavior GetTargetDeleteBehavior(IConventionForeignKey foreignKey);
    private Nullable`1<DeleteBehavior> ProcessSkipNavigations(IEnumerable`1<IConventionSkipNavigation> skipNavigations);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    [CompilerGeneratedAttribute]
internal static DeleteBehavior <ProcessSkipNavigations>g__DefaultDeleteBehavior|6_1(IConventionSkipNavigation conventionSkipNavigation);
    [CompilerGeneratedAttribute]
internal static bool <ProcessSkipNavigations>g__IsMappedToSameTable|6_2(IConventionEntityType entityType1, IConventionEntityType entityType2);
    [CompilerGeneratedAttribute]
internal static bool <ProcessSkipNavigations>g__IsFirstSkipNavigation|6_3(IConventionSkipNavigation navigation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleRuntimeModelConvention : RelationalRuntimeModelConvention {
    public OracleRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    protected virtual void ProcessPropertyOverridesAnnotations(Dictionary`2<string, object> annotations, IRelationalPropertyOverrides propertyOverrides, RuntimeRelationalPropertyOverrides runtimePropertyOverrides, bool runtime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleStoreGenerationConvention : StoreGenerationConvention {
    public OracleStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual void Validate(IConventionProperty property, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Conventions.OracleValueGenerationConvention : RelationalValueGenerationConvention {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Model> m_oracleLogger;
    public OracleValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Oracle.EntityFrameworkCore.Metadata.Internal.OracleAnnotationNames : object {
    public static string Prefix;
    public static string ValueGenerationStrategy;
    public static string HiLoSequenceName;
    public static string CreatedOnline;
    public static string HiLoSequenceSchema;
    public static string Identity;
    public static string IdentitySeed;
    public static string IdentityIncrement;
    public static string SequenceNameSuffix;
    public static string SequenceName;
    public static string SequenceSchema;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.Internal.OracleAnnotationProvider : RelationalAnnotationProvider {
    public OracleAnnotationProvider(RelationalAnnotationProviderDependencies dependencies);
    [IteratorStateMachineAttribute("Oracle.EntityFrameworkCore.Metadata.Internal.OracleAnnotationProvider/<For>d__1")]
public virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
}
public enum Oracle.EntityFrameworkCore.Metadata.OracleValueGenerationStrategy : Enum {
    public int value__;
    public static OracleValueGenerationStrategy None;
    public static OracleValueGenerationStrategy SequenceHiLo;
    public static OracleValueGenerationStrategy IdentityColumn;
    public static OracleValueGenerationStrategy Sequence;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Metadata.OracleValueGenerationStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public OracleValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public sealed virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private bool IsStrategyNoneNeeded(IReadOnlyProperty property, StoreObjectIdentifier storeObject);
}
[ExtensionAttribute]
internal static class Oracle.EntityFrameworkCore.Migrations.EscapeSingleQuotesClass : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string EscapeSingleQuotes(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.Internal.OracleHistoryRepository : HistoryRepository {
    private IModel _model;
    private IDiagnosticsLogger`1<Command> m_oracleLogger;
    protected string ExistsSql { get; }
    public OracleHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual string get_ExistsSql();
    public virtual string GetCreateScript();
    private IModel EnsureModel();
    [NullableContextAttribute("2")]
protected virtual bool InterpretExistsResult(object value);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetEndIfScript();
    [CompilerGeneratedAttribute]
private void <EnsureModel>b__6_0(EntityTypeBuilder`1<HistoryRow> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.Internal.OracleMigrationCommandExecutor : MigrationCommandExecutor {
    private IDiagnosticsLogger`1<Database> m_oracleLogger;
    internal void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, IDiagnosticsLogger`1<Database> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.Internal.OracleMigrationsAnnotationProvider : MigrationsAnnotationProvider {
    public OracleMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ITable table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.Internal.OracleMigrator : Migrator {
    private IMigrationsAssembly _migrationsAssembly;
    private IHistoryRepository _historyRepository;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IRelationalCommandDiagnosticsLogger m_commandLogger;
    private IDiagnosticsLogger`1<Migrations> _logger;
    private static string newLine;
    public OracleMigrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ICurrentDbContext currentContext, IModelRuntimeInitializer modelRuntimeInitializer, IDiagnosticsLogger`1<Migrations> logger, IRelationalCommandDiagnosticsLogger commandLogger, IDatabaseProvider databaseProvider);
    private static OracleMigrator();
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateDownSql(Migration migration, Migration previousMigration, MigrationsSqlGenerationOptions options);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateUpSql(Migration migration, MigrationsSqlGenerationOptions options);
    [NullableContextAttribute("2")]
public virtual string GenerateScript(string fromMigration, string toMigration, MigrationsSqlGenerationOptions options);
    internal static string AdjustCommandText(string commandText);
    internal static bool IsPlSql(string commandText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.OracleMigrationCommand : MigrationCommand {
    private IRelationalCommand _relationalCommand;
    [NullableAttribute("2")]
private DbContext m_context;
    private IRelationalCommandDiagnosticsLogger m_logger;
    [CompilerGeneratedAttribute]
private bool <TransactionSuppressed>k__BackingField;
    public bool TransactionSuppressed { get; }
    public string CommandText { get; }
    public OracleMigrationCommand(IRelationalCommand relationalCommand, DbContext context, IRelationalCommandDiagnosticsLogger logger, bool transactionSuppressed);
    [CompilerGeneratedAttribute]
public virtual bool get_TransactionSuppressed();
    public virtual string get_CommandText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.OracleMigrationCommandListBuilder : MigrationCommandListBuilder {
    private IRelationalCommandBuilder _commandBuilder;
    private List`1<OracleMigrationCommand> _commands;
    private IRelationalCommandBuilderFactory _commandBuilderFactory;
    private IRelationalCommandDiagnosticsLogger m_logger;
    public OracleMigrationCommandListBuilder(MigrationsSqlGeneratorDependencies dependencies);
    public virtual IReadOnlyList`1<MigrationCommand> GetCommandList();
    public virtual MigrationCommandListBuilder EndCommand(bool suppressTransaction);
    public virtual MigrationCommandListBuilder Append(string o);
    public virtual MigrationCommandListBuilder AppendLine();
    public virtual MigrationCommandListBuilder AppendLine(string o);
    public virtual MigrationCommandListBuilder AppendLines(string o);
    public virtual IDisposable Indent();
    public virtual MigrationCommandListBuilder IncrementIndent();
    public virtual MigrationCommandListBuilder DecrementIndent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Migrations.OracleMigrationsSqlGenerator : MigrationsSqlGenerator {
    internal static int s_seqCount;
    internal bool m_bCreatingPlSqlBlock;
    internal OracleSQLCompatibility _oracleSQLCompatibility;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDiagnosticsLogger`1<Command> m_oracleLogger;
    internal static int MaxIdentifierLengthBytes;
    internal static string SequencePrefix;
    internal static string TriggerPrefix;
    internal static string NameSeparator;
    private IReadOnlyList`1<MigrationOperation> _operations;
    public OracleMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, IOracleOptions options);
    private static OracleMigrationsSqlGenerator();
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
    protected virtual void Generate(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    private static bool IsIdentity(ColumnOperation operation);
    [IteratorStateMachineAttribute("Oracle.EntityFrameworkCore.Migrations.OracleMigrationsSqlGenerator/<GetIndexesToRebuild>d__19")]
protected virtual IEnumerable`1<ITableIndex> GetIndexesToRebuild(IColumn column, MigrationOperation currentOperation);
    protected virtual void DropIndexes(IEnumerable`1<ITableIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void CreateIndexes(IEnumerable`1<ITableIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    private void IndexWithOptions(CreateIndexOperation operation, MigrationCommandListBuilder builder);
    private void GenerateExecWhenIdempotent(MigrationCommandListBuilder builder, Action`1<MigrationCommandListBuilder> generate);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    private static void DropIdentity(AlterColumnOperation operation, MigrationCommandListBuilder builder, IDiagnosticsLogger`1<Command> m_oracleLogger);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    private string IntegerConstant(long value);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    private void GenerateFor12cDB(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void UniqueConstraint(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, bool identity, IModel model, MigrationCommandListBuilder builder, bool addNotNullKeyword);
    protected virtual void DefaultValue(object defaultValue, string defaultValueSql, string columnType, MigrationCommandListBuilder builder, bool isNullable);
    protected virtual void ForeignKeyConstraint(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void DropDefaultConstraint(string schema, string tableName, string columnName, MigrationCommandListBuilder builder);
    internal static string DeriveObjectName(string Prefix, string BaseName, int MaxLengthBytes);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.OracleRetryingExecutionStrategy : ExecutionStrategy {
    [NullableAttribute("2")]
private ICollection`1<int> _additionalErrorNumbers;
    public OracleRetryingExecutionStrategy(DbContext context);
    public OracleRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public OracleRetryingExecutionStrategy(DbContext context, int maxRetryCount);
    public OracleRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public OracleRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    public OracleRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    protected virtual bool ShouldRetryOn(Exception exception);
}
internal enum Oracle.EntityFrameworkCore.OracleTraceClassName : Enum {
    public int value__;
    public static OracleTraceClassName OracleRelationalCommand;
    public static OracleTraceClassName OracleRelationalCommandBuilder;
    public static OracleTraceClassName OracleRelationalCommandBuilderFactory;
    public static OracleTraceClassName OracleTypeMappingSource;
    public static OracleTraceClassName OracleOptionsExtensions;
    public static OracleTraceClassName OracleSqlGenerationHelper;
    public static OracleTraceClassName OracleMigrationsAnnotationProvider;
    public static OracleTraceClassName OracleQuerySqlGeneratorFactory;
    public static OracleTraceClassName OracleHistoryRepository;
    public static OracleTraceClassName OracleMigrationsSqlGenerator;
    public static OracleTraceClassName OracleQuerySqlGenerator;
    public static OracleTraceClassName OracleModelValidator;
    public static OracleTraceClassName OracleConventionSetBuilder;
    public static OracleTraceClassName OracleUpdateSqlGenerator;
    public static OracleTraceClassName OracleModificationCommandBatchFactory;
    public static OracleTraceClassName OracleModificationCommandBatch;
    public static OracleTraceClassName OracleValueGeneratorSelector;
    public static OracleTraceClassName OracleDatabaseCreator;
    public static OracleTraceClassName OracleExecutionStrategyFactory;
    public static OracleTraceClassName OracleQueryCompilationContextFactory;
    public static OracleTraceClassName OracleCompositeMethodCallTranslator;
    public static OracleTraceClassName OracleMigrationCommandExecutor;
    public static OracleTraceClassName OracleValueGeneratorCache;
    public static OracleTraceClassName OracleCompositeMemberTranslator;
    public static OracleTraceClassName OracleRelationalConnection;
    public static OracleTraceClassName OracleSequenceValueGeneratorFactory;
    public static OracleTraceClassName OracleDatabaseModelFactory;
    public static OracleTraceClassName OracleCompiledQueryCacheKeyGenerator;
    public static OracleTraceClassName OracleAnnotationCodeGenerator;
    public static OracleTraceClassName OracleDbContextOptionsBuilder;
    public static OracleTraceClassName OracleModelAnnotations;
    public static OracleTraceClassName OracleExecutionStrategy;
    public static OracleTraceClassName OracleMigrationCommandListBuilder;
    public static OracleTraceClassName OracleMigrationCommand;
    public static OracleTraceClassName OracleValueGenerationStrategyConvention;
    public static OracleTraceClassName OracleValueGenerationConvention;
    public static OracleTraceClassName OracleIndexConvention;
    public static OracleTraceClassName OracleMigrator;
}
internal enum Oracle.EntityFrameworkCore.OracleTraceFuncName : Enum {
    public int value__;
    public static OracleTraceFuncName ctor;
    public static OracleTraceFuncName Execute;
    public static OracleTraceFuncName ExecuteAsync;
    public static OracleTraceFuncName CreateCommand;
    public static OracleTraceFuncName AdjustCommandText;
    public static OracleTraceFuncName FindMapping;
    public static OracleTraceFuncName FindRawMapping;
    public static OracleTraceFuncName WithOracleSQLCompatibility;
    public static OracleTraceFuncName GetServiceProviderHashCode;
    public static OracleTraceFuncName ApplyServices;
    public static OracleTraceFuncName GenerateParameterName;
    public static OracleTraceFuncName DelimitIdentifier;
    public static OracleTraceFuncName For;
    public static OracleTraceFuncName GetCreateIfNotExistsScript;
    public static OracleTraceFuncName GetSequences;
    public static OracleTraceFuncName GetTriggerColumns;
    public static OracleTraceFuncName GetColumns;
    public static OracleTraceFuncName GetDefaultSchema;
    public static OracleTraceFuncName GetForeignKeys;
    public static OracleTraceFuncName GetIndexes;
    public static OracleTraceFuncName GetKeys;
    public static OracleTraceFuncName GetTables;
    public static OracleTraceFuncName Generate;
    public static OracleTraceFuncName DefaultValue;
    public static OracleTraceFuncName ColumnDefinition;
    public static OracleTraceFuncName Rename;
    public static OracleTraceFuncName ForeignKeyConstraint;
    public static OracleTraceFuncName SequenceOptions;
    public static OracleTraceFuncName GenerateLimitOffset;
    public static OracleTraceFuncName VisitFromSql;
    public static OracleTraceFuncName VisitSelectForDB112OrLess;
    public static OracleTraceFuncName GeneratePseudoFromClause;
    public static OracleTraceFuncName VisitCrossJoinLateral;
    public static OracleTraceFuncName VisitSqlFunction;
    public static OracleTraceFuncName GenerateProjection;
    public static OracleTraceFuncName VisitSelect;
    public static OracleTraceFuncName VisitSelectForDB121OrMore;
    public static OracleTraceFuncName CreateDefault;
    public static OracleTraceFuncName Validate;
    public static OracleTraceFuncName AddConventions;
    public static OracleTraceFuncName AppendBatchInsertOperation;
    public static OracleTraceFuncName AppendNextSequenceValueOperation;
    public static OracleTraceFuncName AppendBatchUpdateOperation;
    public static OracleTraceFuncName AppendBatchDeleteOperation;
    public static OracleTraceFuncName Create;
    public static OracleTraceFuncName Consume;
    public static OracleTraceFuncName ConsumeAsync;
    public static OracleTraceFuncName CanAddCommand;
    public static OracleTraceFuncName ResetCommandText;
    public static OracleTraceFuncName CreateStoreCommand;
    public static OracleTraceFuncName GetCommandText;
    public static OracleTraceFuncName UpdateCachedCommandText;
    public static OracleTraceFuncName Select;
    public static OracleTraceFuncName CreateTables;
    public static OracleTraceFuncName HasTables;
    public static OracleTraceFuncName HasTablesAsync;
    public static OracleTraceFuncName Exists;
    public static OracleTraceFuncName ExistsAsync;
    public static OracleTraceFuncName Delete;
    public static OracleTraceFuncName DeleteObjects;
    public static OracleTraceFuncName DeleteAsync;
    public static OracleTraceFuncName ExecuteScalar;
    public static OracleTraceFuncName GetOrAddSequenceState;
    public static OracleTraceFuncName CreateMasterConnection;
    public static OracleTraceFuncName ExistsSql;
    public static OracleTraceFuncName GetBeginIfNotExistsScript;
    public static OracleTraceFuncName GetBeginIfExistsScript;
    public static OracleTraceFuncName GetEndIfScript;
    public static OracleTraceFuncName GenerateCacheKey;
    public static OracleTraceFuncName CreateCore;
    public static OracleTraceFuncName BuildCore;
    public static OracleTraceFuncName CreateDbConnection;
    public static OracleTraceFuncName IsHandledByConvention;
    public static OracleTraceFuncName UseOracleSQLCompatibility;
    public static OracleTraceFuncName GetTablesWithSchemaOption;
    public static OracleTraceFuncName GetForeignKeysWithSchemaOption;
    public static OracleTraceFuncName GetIndexesWithSchemaOption;
    public static OracleTraceFuncName GetKeysWithSchemaOption;
    public static OracleTraceFuncName GetSequencesWithSchemaOption;
    public static OracleTraceFuncName GetColumnsWithSchemaOption;
    public static OracleTraceFuncName GetTriggerColumnsWithSchemaOption;
    public static OracleTraceFuncName DeleteWithSchemaOption;
    public static OracleTraceFuncName DeleteAsyncWithSchemaOption;
    public static OracleTraceFuncName HasTablesWithSchemaOption;
    public static OracleTraceFuncName HasTablesAsyncWithSchemaOption;
    public static OracleTraceFuncName DeleteObjectsAsync;
    public static OracleTraceFuncName ExecuteNonQuery;
    public static OracleTraceFuncName CreateCombined;
    public static OracleTraceFuncName GetSequencesCombined;
    public static OracleTraceFuncName GetTablesCombined;
    public static OracleTraceFuncName GetColumnsCombined;
    public static OracleTraceFuncName GetKeysCombined;
    public static OracleTraceFuncName GetIndexesCombined;
    public static OracleTraceFuncName GetForeignKeysCombined;
    public static OracleTraceFuncName CreateAsync;
    public static OracleTraceFuncName CreateHasTablesCommand;
    public static OracleTraceFuncName CreateCreateOperations;
    public static OracleTraceFuncName CreateTrigger;
    public static OracleTraceFuncName DropDefaultConstraint;
    public static OracleTraceFuncName EndCommand;
    public static OracleTraceFuncName GetCreateScript;
    public static OracleTraceFuncName CreateConventionSet;
    public static OracleTraceFuncName ProcessModelInitialized;
    public static OracleTraceFuncName ProcessModelFinalized;
    public static OracleTraceFuncName ProcessPropertyAnnotationChanged;
    public static OracleTraceFuncName ProcessEntityTypeBaseTypeChanged;
    public static OracleTraceFuncName SetIndexFilter;
    public static OracleTraceFuncName ProcessIndexAdded;
    public static OracleTraceFuncName ProcessIndexUniquenessChanged;
    public static OracleTraceFuncName ProcessPropertyNullabilityChanged;
    public static OracleTraceFuncName CleanupCommand;
    public static OracleTraceFuncName CleanupCommandAsync;
    public static OracleTraceFuncName ExecuteNonQueryAsync;
    public static OracleTraceFuncName ExecuteScalarAsync;
    public static OracleTraceFuncName ExecuteReader;
    public static OracleTraceFuncName ExecuteReaderAsync;
    public static OracleTraceFuncName CreateIndexFilter;
    public static OracleTraceFuncName EnsureModel;
    public static OracleTraceFuncName GenerateFor12cDB;
    public static OracleTraceFuncName GenerateForLoweThan12cDB;
    public static OracleTraceFuncName GenerateSchemaFilter;
    public static OracleTraceFuncName DropIdentityForDB11;
    public static OracleTraceFuncName DropIdentity;
    public static OracleTraceFuncName GetCollation;
    public static OracleTraceFuncName GenerateDownSql;
    public static OracleTraceFuncName GenerateScript;
    public static OracleTraceFuncName GenerateUpSql;
}
internal enum Oracle.EntityFrameworkCore.OracleTraceTag : Enum {
    public int value__;
    public static OracleTraceTag None;
    public static OracleTraceTag Error;
    public static OracleTraceTag Environment;
    public static OracleTraceTag Version;
    public static OracleTraceTag Config;
    public static OracleTraceTag Sqlnet;
    public static OracleTraceTag Tnsnames;
    public static OracleTraceTag Entry;
    public static OracleTraceTag Exit;
    public static OracleTraceTag SQL;
    public static OracleTraceTag Map;
    public static OracleTraceTag Connection;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleByteArrayMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleByteArrayMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Oracle.EntityFrameworkCore.Query.Internal.OracleCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    [NullableContextAttribute("1")]
public OracleCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    [NullableContextAttribute("1")]
public virtual object GenerateCacheKey(Expression query, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleConvertTranslator : object {
    private static Dictionary`2<string, string> _typeMapping;
    private static List`1<Type> _supportedTypes;
    private static IEnumerable`1<MethodInfo> _supportedMethods;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleConvertTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleDateTimeMemberTranslator : object {
    private static Dictionary`2<string, string> _datePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public OracleDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static OracleDateTimeMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleDateTimeMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public OracleDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter {
    public OracleEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies);
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleMathTranslator : object {
    private static Dictionary`2<MethodInfo, string> _supportedMethodTranslations;
    private static IEnumerable`1<MethodInfo> _truncateMethodInfos;
    private static IEnumerable`1<MethodInfo> _roundMethodInfos;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleMathTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleMathTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Oracle.EntityFrameworkCore.Query.Internal.OracleMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    [NullableContextAttribute("1")]
public OracleMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IRelationalTypeMappingSource typeMappingSource);
}
public class Oracle.EntityFrameworkCore.Query.Internal.OracleMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    [NullableContextAttribute("1")]
public OracleMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleNewGuidTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleNewGuidTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleObjectToStringTranslator : object {
    private static int DefaultLength;
    private static Dictionary`2<Type, string> _typeMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleObjectToStringTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor {
    public OracleParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    public virtual Expression Optimize(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleParameterBasedSqlProcessorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    public OracleParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor {
    public OracleQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    protected OracleQueryableMethodTranslatingExpressionVisitor(OracleQueryableMethodTranslatingExpressionVisitor parentVisitor);
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleQueryableMethodTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public OracleQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Oracle.EntityFrameworkCore.Query.Internal.OracleQueryCompilationContext : RelationalQueryCompilationContext {
    public bool IsBuffering { get; }
    [NullableContextAttribute("1")]
public OracleQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async);
    public virtual bool get_IsBuffering();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleQueryCompilationContextFactory : object {
    private IOracleConnection _oracleConnection;
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryCompilationContextDependencies <RelationalDependencies>k__BackingField;
    protected QueryCompilationContextDependencies Dependencies { get; }
    protected RelationalQueryCompilationContextDependencies RelationalDependencies { get; }
    public OracleQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, IOracleConnection oracleConnection);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryCompilationContextDependencies get_RelationalDependencies();
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Oracle.EntityFrameworkCore.Query.Internal.OracleRandomTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleRandomTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleRandomTranslator();
    public sealed virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleSqlExpressionFactory : SqlExpressionFactory {
    private RelationalTypeMapping _boolTypeMapping;
    private RelationalTypeMapping _intervalTypeMapping;
    public OracleSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression binary, RelationalTypeMapping typeMapping);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private QueryCompilationContext _queryCompilationContext;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static MethodInfo EscapeLikePatternParameterMethod;
    private static char LikeEscapeChar;
    private static string LikeEscapeString;
    public OracleSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    private static OracleSqlTranslatingExpressionVisitor();
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    public virtual SqlExpression TranslateLongCount(SqlExpression sqlExpression);
    private static string GetTypeName(SqlExpression expression);
    private static string GetProviderType(SqlExpression expression);
    private static string GetProviderTypeNameBase(SqlExpression expression);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
private static bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private SqlBinaryExpression TranslateEndsWith(SqlExpression translatedInstance, SqlExpression translatedPattern);
    private static string ConstructLikePatternParameter(QueryContext queryContext, string baseParameterName, StartsEndsWithContains methodType);
    private static bool IsLikeWildChar(char c);
    private static string EscapeLikePattern(string pattern);
    private Expression TranslateByteArrayElementAccess(Expression array, Expression index, Type resultType);
    private static Expression TryRemoveImplicitConvert(Expression expression);
    [CompilerGeneratedAttribute]
private bool <VisitMethodCall>g__TryTranslateStartsEndsWithContains|16_0(Expression instance, Expression pattern, StartsEndsWithContains methodType, SqlExpression& translation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleSqlTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected RelationalSqlTranslatingExpressionVisitorDependencies Dependencies { get; }
    public OracleSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleStringMethodTranslator : object {
    private static MethodInfo _indexOfMethodInfo;
    private static MethodInfo IndexOfMethodInfoWithStartingPosition;
    private static MethodInfo _replaceMethodInfo;
    private static MethodInfo _toLowerMethodInfo;
    private static MethodInfo _toUpperMethodInfo;
    private static MethodInfo _substringMethodInfoWithOneArg;
    private static MethodInfo _substringMethodInfoWithTwoArgs;
    private static MethodInfo _isNullOrEmptyMethodInfo;
    private static MethodInfo _isNullOrWhiteSpaceMethodInfo;
    private static MethodInfo _trimStartMethodInfoWithoutArgs;
    private static MethodInfo _trimEndMethodInfoWithoutArgs;
    private static MethodInfo _trimMethodInfoWithoutArgs;
    private static MethodInfo _trimStartMethodInfoWithCharArrayArg;
    private static MethodInfo _trimEndMethodInfoWithCharArrayArg;
    private static MethodInfo _trimMethodInfoWithCharArrayArg;
    private static MethodInfo _trimStartMethodInfoWithCharArg;
    private static MethodInfo _trimEndMethodInfoWithCharArg;
    private static MethodInfo _trimMethodInfoWithCharArg;
    private static MethodInfo _firstOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo _lastOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo _equalsMethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleStringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.OracleTimeSpanMemberTranslator : object {
    private static Dictionary`2<string, string> _datePartMappings;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public OracleTimeSpanMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static OracleTimeSpanMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.SearchConditionConvertingExpressionVisitor : SqlExpressionVisitor {
    private bool _isSearchCondition;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SearchConditionConvertingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    private SqlExpression ApplyConversion(SqlExpression sqlExpression, bool condition);
    private SqlExpression ConvertToSearchCondition(SqlExpression sqlExpression, bool condition);
    private SqlExpression ConvertToValue(SqlExpression sqlExpression, bool condition);
    private SqlExpression BuildCompareToExpression(SqlExpression sqlExpression);
    private SqlExpression SimplifyNegatedBinary(SqlExpression sqlExpression);
    protected virtual Expression VisitDistinct(DistinctExpression distinctExpression);
    protected virtual Expression VisitCollate(CollateExpression collateExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitRowValue(RowValueExpression rowValueExpression);
    protected virtual Expression VisitValues(ValuesExpression valuesExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Internal.SkipTakeCollapsingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _parameterValues;
    private bool _canCache;
    public SkipTakeCollapsingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    public virtual Expression Process(Expression selectExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private bool <VisitExtension>g__IsZero|5_0(SqlExpression sqlExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Sql.Internal.OracleQuerySqlGenerator : QuerySqlGenerator {
    internal OracleSQLCompatibility _oracleSQLCompatibility;
    private IRelationalTypeMappingSource _typeMappingSource;
    private bool firstwhereclauseappended;
    private int Count;
    private bool is112SqlCompatibility;
    private int generateProjectionCallCount;
    private int generateProjectionCallCountCounter;
    private IDictionary`2<ExpressionType, string> _operatorMap;
    protected string AliasSeparator { get; }
    public OracleQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, OracleSQLCompatibility oracleSQLCompatibility);
    protected virtual string get_AliasSeparator();
    protected virtual string GetOperator(SqlBinaryExpression binaryExpression);
    private CaseExpression CreateCaseExpression(SqlExpression expression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual void GenerateOrderings(SelectExpression selectExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GeneratePseudoFromClause();
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    private bool IsNonComposedSetOperation(SelectExpression selectExpression);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual void GenerateIn(InExpression inExpression, bool negated);
    private void GeneratePredicateList(InExpression inExpression, bool negated, IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    private bool RequiresBrackets(SqlExpression expression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected virtual void GenerateSetOperation(SetOperationBase setOperation);
    private string GetSetOperation(SetOperationBase setOperation);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    protected virtual void GenerateEmptyProjection(SelectExpression selectExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <GenerateOrderings>b__14_1(OrderingExpression e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <GenerateIn>b__25_1(SqlExpression e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <VisitTableValuedFunction>b__32_0(SqlExpression e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <VisitUpdate>b__37_0(TableExpressionBase e);
    [CompilerGeneratedAttribute]
internal static void <VisitUpdate>g__LiftPredicate|37_2(TableExpressionBase joinTable, <>c__DisplayClass37_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Sql.Internal.OracleQuerySqlGeneratorFactory : object {
    private IOracleOptions _oracleOptions;
    private IRelationalTypeMappingSource _typeMappingSource;
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies <Dependencies>k__BackingField;
    protected QuerySqlGeneratorDependencies Dependencies { get; }
    public OracleQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, IOracleOptions oracleOptions);
    [CompilerGeneratedAttribute]
protected virtual QuerySqlGeneratorDependencies get_Dependencies();
    public virtual QuerySqlGenerator Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Query.Sql.Internal.OracleQueryStringFactory : object {
    private IRelationalTypeMappingSource _typeMapper;
    private OracleSQLCompatibility _oracleSQLCompatibility;
    private static string REMOVE_TAG_START;
    private static string REMOVE_TAG_END;
    public OracleQueryStringFactory(IRelationalTypeMappingSource typeMapper, IOracleOptions options);
    public virtual string Create(DbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Oracle.EntityFrameworkCore.Query.Sql.Internal.TypeNameBuilder : object {
    [ExtensionAttribute]
private static StringBuilder AppendSize(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendSizeOrMax(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendPrecision(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendPrecisionAndScale(StringBuilder builder, DbParameter parameter);
    public static string CreateTypeName(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Scaffolding.Internal.OracleCodeGenerator : ProviderCodeGenerator {
    private static MethodInfo m_useOracleMethodInfo;
    public OracleCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    private static OracleCodeGenerator();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Scaffolding.Internal.OracleDatabaseModelFactory : DatabaseModelFactory {
    [NullableAttribute("2")]
private static string defaultSchema;
    private IDiagnosticsLogger`1<Scaffolding> m_oracleLogger;
    private static string NamePartRegex;
    private static Regex _partExtractor;
    private List`1<string> userDDs;
    private List`1<string> allDDs;
    public OracleDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger);
    private static OracleDatabaseModelFactory();
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, IEnumerable`1<string> tables, IEnumerable`1<string> schemas);
    private void GetSequencesCombined(DbConnection connection, IList`1<DatabaseTable> tables, Func`2<string, string> schemaFilter, DatabaseModel databaseModel, List`1<OracleParameter> paramList);
    private void GetTablesCombined(DbConnection connection, Func`3<string, string, string> tableFilter, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, List`1<OracleParameter> paramList);
    private void GetColumnsCombined(DbConnection connection, string tableFilter, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, List`1<OracleParameter> paramList, string databaseCollation);
    private void GetKeysCombined(DbConnection connection, string tableFilter, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, List`1<OracleParameter> paramList);
    private void GetForeignKeysCombined(DbConnection connection, string tableFilter, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, List`1<OracleParameter> paramList);
    private void GetIndexesCombined(DbConnection connection, string tableFilter, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, List`1<OracleParameter> paramList);
    private static string DisplayName(string schema, string name);
    private string GetDefaultSchema(DbConnection connection);
    private static string GetOracleClrType(string dataTypeName, object precision, object scale, int charLength, int dataLength);
    [NullableContextAttribute("2")]
private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
    private static ValueTuple`2<List`1<OracleParameter>, Func`2<string, string>> GenerateSchemaFilter(IReadOnlyList`1<string> schemas);
    private static ValueTuple`2<string, string> Parse1(string table);
    private static ValueTuple`2<List`1<OracleParameter>, Func`3<string, string, string>> GenerateTableFilter(IReadOnlyList`1<ValueTuple`2<string, string>> schemaDotTableList, Func`2<string, string> schemaFilter, List`1<OracleParameter> schemaParamList);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string <Create>g__GetCollation|9_0(DbConnection connection, string schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Oracle.EntityFrameworkCore.Scaffolding.Internal.OracleDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataRecord record, string name);
    [ExtensionAttribute]
public static T GetFieldValue(DbDataRecord record, string name);
    [ExtensionAttribute]
public static object GetValue(DbDataRecord record, string name);
    private static object GetValue(object valueRecord);
}
public interface Oracle.EntityFrameworkCore.Storage.Internal.IOracleConnection {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleBoolTypeMapping : BoolTypeMapping {
    private OracleSQLCompatibility _oracleSQLCompatibility;
    [CompilerGeneratedAttribute]
private static OracleBoolTypeMapping <Default>k__BackingField;
    public static OracleBoolTypeMapping Default { get; }
    public OracleBoolTypeMapping(string storeType, Nullable`1<DbType> dbType, OracleSQLCompatibility oracleSQLCompatibility);
    protected OracleBoolTypeMapping(RelationalTypeMappingParameters parameters, OracleSQLCompatibility oracleSQLCompatibility);
    private static OracleBoolTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleBoolTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleByteArrayTypeMapping : ByteArrayTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleByteArrayTypeMapping <Default>k__BackingField;
    private static int MaxSize;
    private int _maxSpecificSize;
    private Nullable`1<StoreTypePostfix> _storeTypePostfix;
    public static OracleByteArrayTypeMapping Default { get; }
    public OracleByteArrayTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size, bool fixedLength, ValueComparer comparer, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected OracleByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleByteArrayTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleByteArrayTypeMapping get_Default();
    private static StoreTypePostfix GetStoreTypePostfix(Nullable`1<StoreTypePostfix> storeTypePostfix, Nullable`1<int> size);
    private static int CalculateSize(Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleByteTypeMapping : ByteTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleByteTypeMapping <Default>k__BackingField;
    public static OracleByteTypeMapping Default { get; }
    public OracleByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleByteTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleByteTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleByteTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator : RelationalDatabaseCreator {
    internal static string cleanSchemaPLSQL1;
    internal static string cleanSchemaPLSQL2;
    internal static string cleanSchemaPLSQL3;
    internal static string notOracleMaintained;
    internal static string cleanSchemaPLSQL4;
    internal static string and;
    internal static string schemaFilterSQLUser;
    internal static String[] builtInSchemas;
    internal static string schemaFilterSQLInternal;
    internal OracleSQLCompatibility _oracleSQLCompatibility;
    private IOracleConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Command> m_oracleLogger;
    public OracleDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, IOracleConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IOracleOptions options);
    private static OracleDatabaseCreator();
    public virtual void Create();
    public virtual void CreateTables();
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<CreateAsync>d__16")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual bool HasTables();
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<HasTablesAsync>d__18")]
public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    internal Task`1<bool> HasTablesAsyncWithSchemaOption(String[] schemas, CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IRelationalCommand CreateHasAllTablesCommand(string filter);
    internal void DeleteWithSchemaOption(String[] schemas);
    internal bool HasTablesWithSchemaOption(String[] schemas);
    public virtual bool Exists();
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<ExistsAsync>d__25")]
public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public virtual void Delete();
    internal void DeleteObjects(String[] schemas);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<DeleteObjectsAsync>d__28")]
internal Task DeleteObjectsAsync(String[] schemas, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<DeleteAsync>d__29")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleDatabaseCreator/<DeleteAsyncWithSchemaOption>d__30")]
internal Task DeleteAsyncWithSchemaOption(String[] schemas, CancellationToken cancellationToken);
    private List`1<string> GenerateSchemaList(String[] schemas);
    private string GenerateSchemaFilter(String[] schemas);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <HasTables>b__17_0(IOracleConnection connection);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task`1<object> <HasTablesAsync>b__18_0(IOracleConnection connection, CancellationToken ct);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <HasTablesWithSchemaOption>b__23_0(IOracleConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleDateTimeOffsetTypeMapping : DateTimeOffsetTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleDateTimeOffsetTypeMapping <Default>k__BackingField;
    private static MethodInfo _readMethod;
    private String[] _dateTimeOffsetFormats;
    public static OracleDateTimeOffsetTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public OracleDateTimeOffsetTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected OracleDateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleDateTimeOffsetTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleDateTimeOffsetTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual MethodInfo GetDataReaderMethod();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleDateTimeTypeMapping : DateTimeTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleDateTimeTypeMapping <Default>k__BackingField;
    private static string DateTimeFormatConst;
    private static string TimeStampFormatConst;
    public static OracleDateTimeTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public OracleDateTimeTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected OracleDateTimeTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleDateTimeTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleDateTimeTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleDecimalTypeMapping : DecimalTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleDecimalTypeMapping <Default>k__BackingField;
    public static OracleDecimalTypeMapping Default { get; }
    public OracleDecimalTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> precision, Nullable`1<int> scale, StoreTypePostfix storeTypePostfix);
    protected OracleDecimalTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleDecimalTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleDecimalTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleDoubleTypeMapping : DoubleTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleDoubleTypeMapping <Default>k__BackingField;
    public static OracleDoubleTypeMapping Default { get; }
    public OracleDoubleTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected OracleDoubleTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleDoubleTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleDoubleTypeMapping get_Default();
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleExceptionDetector : object {
    [NullableContextAttribute("1")]
public virtual bool IsCancellation(Exception exception, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleExecutionStrategy : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Infrastructure> m_oracleLogger;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public OracleExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleExecutionStrategy/<ExecuteAsync>d__8`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Infrastructure> m_oracleLogger;
    public OracleExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleFloatTypeMapping : FloatTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleFloatTypeMapping <Default>k__BackingField;
    public static OracleFloatTypeMapping Default { get; }
    public OracleFloatTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected OracleFloatTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleFloatTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleFloatTypeMapping get_Default();
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleGuidTypeMapping : GuidTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleGuidTypeMapping <Default>k__BackingField;
    public static OracleGuidTypeMapping Default { get; }
    public OracleGuidTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size, bool fixedLength, ValueComparer comparer, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected OracleGuidTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleGuidTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleGuidTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleInt16TypeMapping : ShortTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleInt16TypeMapping <Default>k__BackingField;
    public static OracleInt16TypeMapping Default { get; }
    public OracleInt16TypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleInt16TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleInt16TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleInt16TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleInt32TypeMapping : IntTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleInt32TypeMapping <Default>k__BackingField;
    public static OracleInt32TypeMapping Default { get; }
    public OracleInt32TypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleInt32TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleInt32TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleInt32TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleInt64TypeMapping : LongTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleInt64TypeMapping <Default>k__BackingField;
    public static OracleInt64TypeMapping Default { get; }
    [NullableContextAttribute("2")]
public OracleInt64TypeMapping(string storeType, ValueConverter converter, ValueComparer comparer, ValueComparer providerValueComparer, Nullable`1<DbType> dbType);
    protected OracleInt64TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleInt64TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleInt64TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonBoolReaderWriter : JsonValueReaderWriter`1<bool> {
    [CompilerGeneratedAttribute]
private static OracleJsonBoolReaderWriter <Instance>k__BackingField;
    public static OracleJsonBoolReaderWriter Instance { get; }
    private static OracleJsonBoolReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonBoolReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual bool FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonGuidReaderWriter : JsonValueReaderWriter`1<Guid> {
    [CompilerGeneratedAttribute]
private static OracleJsonGuidReaderWriter <Instance>k__BackingField;
    public static OracleJsonGuidReaderWriter Instance { get; }
    private static OracleJsonGuidReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonGuidReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual Guid FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, Guid value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonSByteReaderWriter : JsonValueReaderWriter`1<short> {
    [CompilerGeneratedAttribute]
private static OracleJsonSByteReaderWriter <Instance>k__BackingField;
    public static OracleJsonSByteReaderWriter Instance { get; }
    private static OracleJsonSByteReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonSByteReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual short FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, short value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonTimeSpanReaderWriter : JsonValueReaderWriter`1<TimeSpan> {
    [CompilerGeneratedAttribute]
private static OracleJsonTimeSpanReaderWriter <Instance>k__BackingField;
    public static OracleJsonTimeSpanReaderWriter Instance { get; }
    private static OracleJsonTimeSpanReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonTimeSpanReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual TimeSpan FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonTypeMapping : JsonTypeMapping {
    private OracleSQLCompatibility _oracleSQLCompatibility;
    private static MethodInfo GetStringMethod;
    private static PropertyInfo UTF8Property;
    private static MethodInfo EncodingGetBytesMethod;
    private static ConstructorInfo MemoryStreamConstructor;
    [CompilerGeneratedAttribute]
private static OracleJsonTypeMapping <Default>k__BackingField;
    public static OracleJsonTypeMapping Default { get; }
    public OracleJsonTypeMapping(string storeType, OracleSQLCompatibility oracleSQLCompatibility);
    protected OracleJsonTypeMapping(RelationalTypeMappingParameters parameters, OracleSQLCompatibility oracleSQLCompatibility);
    private static OracleJsonTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleJsonTypeMapping get_Default();
    public virtual MethodInfo GetDataReaderMethod();
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    protected virtual string EscapeSqlLiteral(string literal);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonUInt16ReaderWriter : JsonValueReaderWriter`1<int> {
    [CompilerGeneratedAttribute]
private static OracleJsonUInt16ReaderWriter <Instance>k__BackingField;
    public static OracleJsonUInt16ReaderWriter Instance { get; }
    private static OracleJsonUInt16ReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonUInt16ReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual int FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonUInt32ReaderWriter : JsonValueReaderWriter`1<long> {
    [CompilerGeneratedAttribute]
private static OracleJsonUInt32ReaderWriter <Instance>k__BackingField;
    public static OracleJsonUInt32ReaderWriter Instance { get; }
    private static OracleJsonUInt32ReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonUInt32ReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual long FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleJsonUInt64ReaderWriter : JsonValueReaderWriter`1<decimal> {
    [CompilerGeneratedAttribute]
private static OracleJsonUInt64ReaderWriter <Instance>k__BackingField;
    public static OracleJsonUInt64ReaderWriter Instance { get; }
    private static OracleJsonUInt64ReaderWriter();
    [CompilerGeneratedAttribute]
public static OracleJsonUInt64ReaderWriter get_Instance();
    [NullableContextAttribute("2")]
public virtual decimal FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, decimal value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleRelationalCommandBuilderFactory : RelationalCommandBuilderFactory {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Command> m_oracleLogger;
    public OracleRelationalCommandBuilderFactory(RelationalCommandBuilderDependencies dependencies);
    public virtual IRelationalCommandBuilder Create();
}
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleRelationalConnection : RelationalConnection {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Connection> m_oracleLogger;
    protected bool SupportsAmbientTransactions { get; }
    [NullableContextAttribute("1")]
public OracleRelationalConnection(RelationalConnectionDependencies dependencies, IDiagnosticsLogger`1<Connection> logger);
    protected virtual bool get_SupportsAmbientTransactions();
    [NullableContextAttribute("1")]
protected virtual DbConnection CreateDbConnection();
}
internal class Oracle.EntityFrameworkCore.Storage.Internal.OracleSByteConverter : ValueConverter`2<sbyte, short> {
    private static short ToStore(sbyte val);
    private static sbyte FromStore(short val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleSByteTypeMapping : ByteTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleSByteTypeMapping <Default>k__BackingField;
    public static OracleSByteTypeMapping Default { get; }
    public OracleSByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleSByteTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleSByteTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleSByteTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleSqlGenerationHelper : RelationalSqlGenerationHelper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Command> m_oracleLogger;
    private static string OracleDefaultSavepointName;
    private static string MSDefaultSavepointName;
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public string StartTransactionStatement { get; }
    public string CommitTransactionStatement { get; }
    public OracleSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string GenerateParameterName(string name);
    public virtual string get_StatementTerminator();
    public virtual void GenerateParameterName(StringBuilder builder, string name);
    public virtual string get_BatchTerminator();
    public virtual string get_StartTransactionStatement();
    public virtual string get_CommitTransactionStatement();
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string GenerateCreateSavepointStatement(string name);
    public virtual string GenerateRollbackToSavepointStatement(string name);
    public virtual string GenerateReleaseSavepointStatement(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleStringTypeMapping : StringTypeMapping {
    internal static int UnicodeMax;
    internal static int AnsiMax;
    private OracleSQLCompatibility _oracleSQLCompatibility;
    private int _maxSpecificSize;
    private Nullable`1<StoreTypePostfix> _storeTypePostfix;
    private static CaseInsensitiveValueComparer CaseInsensitiveValueComparer;
    [CompilerGeneratedAttribute]
private static OracleStringTypeMapping <Default>k__BackingField;
    public static OracleStringTypeMapping Default { get; }
    public OracleStringTypeMapping(string storeType, Nullable`1<DbType> dbType, OracleSQLCompatibility oracleSQLCompatibility, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<StoreTypePostfix> storeTypePostfix, bool useKeyComparison);
    protected OracleStringTypeMapping(RelationalTypeMappingParameters parameters, OracleSQLCompatibility oracleSQLCompatibility);
    private static OracleStringTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleStringTypeMapping get_Default();
    private static string GetDefaultSize(bool unicode, bool fixedLength);
    private static string GetDefaultStoreName(bool unicode, bool fixedLength);
    private static StoreTypePostfix GetStoreTypePostfix(Nullable`1<StoreTypePostfix> storeTypePostfix, bool unicode, Nullable`1<int> size);
    private static Nullable`1<DbType> GetDbType(bool unicode, bool fixedLength);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    private static int CalculateSize(bool unicode, Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleTimeSpanTypeMapping : TimeSpanTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleTimeSpanTypeMapping <Default>k__BackingField;
    public static OracleTimeSpanTypeMapping Default { get; }
    public OracleTimeSpanTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleTimeSpanTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleTimeSpanTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleTimeSpanTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleTransaction : RelationalTransaction {
    private DbTransaction _dbTransaction;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private Stopwatch _stopwatch;
    private static string OracleDefaultSavepointName;
    private static string MSDefaultSavepointName;
    public bool AreSavepointsSupported { get; }
    public OracleTransaction(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned, ISqlGenerationHelper sqlGenerationHelper);
    public virtual void CreateSavepoint(string savepointName);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleTransaction/<CreateSavepointAsync>d__5")]
public virtual Task CreateSavepointAsync(string savepointName, CancellationToken cancellationToken);
    public virtual void RollbackToSavepoint(string savepointName);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleTransaction/<RollbackToSavepointAsync>d__7")]
public virtual Task RollbackToSavepointAsync(string savepointName, CancellationToken cancellationToken);
    public virtual void Release(string savepointName);
    public virtual Task ReleaseAsync(string savepointName, CancellationToken cancellationToken);
    public virtual bool get_AreSavepointsSupported();
    public virtual void ReleaseSavepoint(string name);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Storage.Internal.OracleTransaction/<ReleaseSavepointAsync>d__15")]
public virtual Task ReleaseSavepointAsync(string name, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleTransactionFactory : object {
    [CompilerGeneratedAttribute]
private RelationalTransactionFactoryDependencies <Dependencies>k__BackingField;
    protected RelationalTransactionFactoryDependencies Dependencies { get; }
    public OracleTransactionFactory(RelationalTransactionFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalTransactionFactoryDependencies get_Dependencies();
    public virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
public static class Oracle.EntityFrameworkCore.Storage.Internal.OracleTransientExceptionDetector : object {
    [NullableContextAttribute("2")]
public static bool ShouldRetryOn(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleTypeMappingSource : RelationalTypeMappingSource {
    internal static OracleSQLCompatibility _oracleSQLCompatibility;
    private OracleUnboundedTypeMapping _unboundedUnicodeString;
    private OracleUnboundedTypeMapping _unboundedAnsiString;
    private OracleByteArrayTypeMapping _rowversion;
    private static OracleInt64TypeMapping _ulongRowversion;
    private OracleBoolTypeMapping _boolean;
    private OracleBoolTypeMapping _booleanBelow23c;
    private OracleStringTypeMapping _fixedLengthUnicodeString;
    private OracleStringTypeMapping _variableLengthUnicodeString;
    private OracleStringTypeMapping _fixedLengthAnsiString;
    private OracleStringTypeMapping _variableLengthAnsiString;
    private OracleStringTypeMapping _urowID;
    private OracleByteArrayTypeMapping _fixedLengthBinary;
    private OracleDateTimeTypeMapping _date;
    private OracleDateTimeTypeMapping _datetimelocal;
    private OracleDateTimeOffsetTypeMapping _datetimeoffset;
    private OracleDateTimeOffsetTypeMapping _datetimeoffset3;
    private DecimalTypeMapping _float;
    private DecimalTypeMapping _decimal;
    private OracleStringTypeMapping _timeYTM;
    private OracleStringTypeMapping _xml;
    private OracleJsonTypeMapping _json;
    private OracleJsonTypeMapping _jsonBelow21c;
    private Dictionary`2<Type, RelationalTypeMapping> _clrTypeMappings;
    private Dictionary`2<Type, RelationalTypeMapping> _clrNoFacetTypeMappings;
    private Dictionary`2<string, RelationalTypeMapping> _storeTypeMappings;
    private FloatTypeMapping _realAlias;
    private DoubleTypeMapping _doubleAlias;
    private OracleDateTimeOffsetTypeMapping _datetimeoffsetAlias;
    private DecimalTypeMapping _decimalAlias;
    private static List`1<string> _nameBasesUsingPrecision;
    public OracleTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, IOracleOptions oracleOptions);
    private static OracleTypeMappingSource();
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
private RelationalTypeMapping FindRawMapping(RelationalTypeMappingInfo mappingInfo);
    [NullableContextAttribute("2")]
protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
}
internal class Oracle.EntityFrameworkCore.Storage.Internal.OracleUInt16Converter : ValueConverter`2<ushort, int> {
    private static int ToStore(ushort val);
    private static ushort FromStore(int val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleUint16TypeMapping : ShortTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleUint16TypeMapping <Default>k__BackingField;
    public static OracleUint16TypeMapping Default { get; }
    public OracleUint16TypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleUint16TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleUint16TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleUint16TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
internal class Oracle.EntityFrameworkCore.Storage.Internal.OracleUInt32Converter : ValueConverter`2<UInt32, long> {
    private static long ToStore(UInt32 val);
    private static UInt32 FromStore(long val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleUint32TypeMapping : IntTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleUint32TypeMapping <Default>k__BackingField;
    public static OracleUint32TypeMapping Default { get; }
    public OracleUint32TypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleUint32TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleUint32TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleUint32TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
internal class Oracle.EntityFrameworkCore.Storage.Internal.OracleUInt64Converter : ValueConverter`2<ulong, decimal> {
    private static decimal ToStore(ulong val);
    private static ulong FromStore(decimal val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleUint64TypeMapping : LongTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleUint64TypeMapping <Default>k__BackingField;
    public static OracleUint64TypeMapping Default { get; }
    public OracleUint64TypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected OracleUint64TypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleUint64TypeMapping();
    [CompilerGeneratedAttribute]
public static OracleUint64TypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleUnboundedTypeMapping : StringTypeMapping {
    [CompilerGeneratedAttribute]
private static OracleUnboundedTypeMapping <Default>k__BackingField;
    private static int MaxSize;
    private int _maxSpecificSize;
    private Nullable`1<StoreTypePostfix> _storeTypePostfix;
    public static OracleUnboundedTypeMapping Default { get; }
    public OracleUnboundedTypeMapping(string storeType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected OracleUnboundedTypeMapping(RelationalTypeMappingParameters parameters);
    private static OracleUnboundedTypeMapping();
    [CompilerGeneratedAttribute]
public static OracleUnboundedTypeMapping get_Default();
    private static StoreTypePostfix GetStoreTypePostfix(Nullable`1<StoreTypePostfix> storeTypePostfix, bool unicode, Nullable`1<int> size);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    private static int CalculateSize(bool unicode, Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Storage.Internal.OracleVectorTypeMapping : StringTypeMapping {
    public OracleVectorTypeMapping(string storeType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected OracleVectorTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Oracle.EntityFrameworkCore.Trace`1 : object {
    internal static string s_dateTimeFormat;
    internal static string s_dateFormat;
    internal static string s_timeFormat;
    private static Trace`1();
    private static StringBuilder WriteHelper(OracleTraceTag traceTag, OracleTraceClassName className, OracleTraceFuncName funcName, String[] message);
    internal static void Write(IDiagnosticsLogger`1<TLoggerCategory> logger, LogLevel logLevel, OracleTraceTag traceTag, OracleTraceClassName className, OracleTraceFuncName funcName, String[] message);
    private static string GetTimeInfo();
}
internal static class Oracle.EntityFrameworkCore.TraceSettings : object {
    internal static LogLevel m_logLevel;
    private static TraceSettings();
}
[NullableContextAttribute("1")]
public interface Oracle.EntityFrameworkCore.Update.Internal.IOracleUpdateSqlGenerator {
    public abstract virtual List`1<ResultSetMapping> AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
    public virtual List`1<ResultSetMapping> AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition);
    public abstract virtual ResultSetMapping AppendBatchInsertOperation(StringBuilder commandStringBuilder, Dictionary`2<string, string> variablesInsert, IReadOnlyDictionary`2<IReadOnlyModificationCommand, int> modificationCommands, int commandPosition, Int32& cursorPosition, List`1<int> _cursorPositionList);
    public abstract virtual ResultSetMapping AppendBatchUpdateOperation(StringBuilder commandStringBuilder, StringBuilder variablesCommand, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Int32& cursorPosition);
    public abstract virtual ResultSetMapping AppendBatchDeleteOperation(StringBuilder commandStringBuilder, StringBuilder variablesCommand, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Int32& cursorPosition);
}
public class Oracle.EntityFrameworkCore.Update.Internal.OracleModificationCommand : ModificationCommand {
    public OracleModificationCommand(ModificationCommandParameters& modificationCommandParameters);
    public OracleModificationCommand(NonTrackedModificationCommandParameters& modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Update.Internal.OracleModificationCommandBatch : AffectedCountModificationCommandBatch {
    private static int DefaultNetworkPacketSizeBytes;
    private static int MaxScriptLength;
    private static int MaxParameterCount;
    private List`1<IReadOnlyModificationCommand> _pendingBulkInsertCommands;
    private List`1<IReadOnlyModificationCommand> _pendingBulkUpdateAndDeleteCommands;
    private List`1<IReadOnlyModificationCommand> _pendingBulkCommands;
    private int _cursorPosition;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDiagnosticsLogger`1<Command> m_oracleLogger;
    protected IOracleUpdateSqlGenerator UpdateSqlGenerator { get; }
    public OracleModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize);
    protected virtual IOracleUpdateSqlGenerator get_UpdateSqlGenerator();
    protected virtual void RollbackLastCommand(IReadOnlyModificationCommand modificationCommand);
    protected virtual bool IsValid();
    private void ApplyPendingBulkInsertCommands();
    private void ApplyPendingBulkUpdateAndDeleteCommands();
    protected virtual void AddCommand(IReadOnlyModificationCommand modificationCommand);
    private static bool CanBeInsertedInSameStatement(IReadOnlyModificationCommand firstCommand, IReadOnlyModificationCommand secondCommand);
    public virtual void Complete(bool moreBatchesExpected);
    protected virtual void AddParameters(IReadOnlyModificationCommand modificationCommand);
    public virtual void Execute(IRelationalConnection connection);
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.Update.Internal.OracleModificationCommandBatch/<ExecuteAsync>d__20")]
public virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Update.Internal.OracleModificationCommandBatchFactory : object {
    private IDbContextOptions _options;
    private IDiagnosticsLogger`1<Command> m_oracleLogger;
    private ModificationCommandBatchFactoryDependencies _dependencies;
    private static int DefaultMaxBatchSize;
    private static int MaxMaxBatchSize;
    private int _maxBatchSize;
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies <Dependencies>k__BackingField;
    protected ModificationCommandBatchFactoryDependencies Dependencies { get; }
    public OracleModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    [CompilerGeneratedAttribute]
protected virtual ModificationCommandBatchFactoryDependencies get_Dependencies();
    public virtual ModificationCommandBatch Create();
}
public class Oracle.EntityFrameworkCore.Update.Internal.OracleModificationCommandFactory : object {
    [NullableContextAttribute("1")]
public virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    [NullableContextAttribute("1")]
public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.Update.Internal.OracleUpdateSqlGenerator : UpdateAndSelectSqlGenerator {
    protected int MergeIntoMinimumThreshold { get; }
    public OracleUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    public virtual ResultSetMapping AppendBatchInsertOperation(StringBuilder commandStringBuilder, Dictionary`2<string, string> variablesInsert, IReadOnlyDictionary`2<IReadOnlyModificationCommand, int> modificationCommands, int commandPosition, Int32& cursorPosition, List`1<int> _cursorPositionList);
    protected virtual int get_MergeIntoMinimumThreshold();
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    public virtual List`1<ResultSetMapping> AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    protected virtual ResultSetMapping AppendDeleteReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendDeleteCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendInsertReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    private void AppendValues(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalLiteral);
    internal void AppendAfterDeclareForUpdate(StringBuilder commandStringBuilder, string name, int index, IReadOnlyList`1<IColumnModification> operations, string additionalColumns);
    internal void AppendAfterDeclare(StringBuilder commandStringBuilder, string name, int index, IReadOnlyList`1<IColumnModification> operations, string additionalColumns);
    private static string GetTypeNameForCopy(IProperty property);
    protected virtual void AppendReturningClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalValues);
    private void AppendReturningClause1(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalReadValues);
    private void AppendOutputIntoClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> readOperations, string tableName, int tableIndex, string additionalColumns);
    private ResultSetMapping AppendOutputIntoClauseForUpdate(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> readOperations, string tableName, int tableIndex, string additionalColumns);
    private void AppendOutputClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalReadValues);
    private void AppendIntoClauseForUpdate(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string tableName, int tableIndex, string additionalReadValues);
    private void AppendIntoClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string tableName, int tableIndex, string additionalReadValues);
    private ResultSetMapping AppendInsertSingleRowWithOutputInto(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, IReadOnlyList`1<IColumnModification> keyOperations, IReadOnlyList`1<IColumnModification> readOperations, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification);
    private static bool HasAnyTriggers(IReadOnlyModificationCommand command);
    public virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendValuesHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    protected virtual ResultSetMapping AppendUpdateReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    protected virtual void AppendUpdateColumnValue(ISqlGenerationHelper updateSqlGeneratorHelper, IColumnModification columnModification, StringBuilder stringBuilder, string name, string schema);
    public virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public sealed virtual ResultSetMapping AppendBatchUpdateOperation(StringBuilder commandStringBuilder, StringBuilder variablesCommand, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Int32& cursorPosition);
    public sealed virtual ResultSetMapping AppendBatchDeleteOperation(StringBuilder commandStringBuilder, StringBuilder variablesCommand, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Int32& cursorPosition);
    private ResultSetMapping AppendSelectAffectedCommand(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> readOperations, int cursorPosition, int commandPosition);
    protected virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    private static ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, int cursorPosition);
    private void AppendReturnInsert(StringBuilder commandStringBuilder, string name, IReadOnlyList`1<IColumnModification> operations, int commandPosition);
    private void AppendReturnCursor(StringBuilder commandStringBuilder, string name, IReadOnlyList`1<IColumnModification> operations, int commandPosition, int cursorPosition);
    private ResultSetMapping AppendReturnCursorForUpdate(StringBuilder commandStringBuilder, string name, IReadOnlyList`1<IColumnModification> operations, int commandPosition, int cursorPosition);
    private static string GetVariableName(IColumnModification columnModification, int index);
    private string GetVariableType(IColumnModification columnModification);
    private void AppendAfterBegin(StringBuilder commandStringBuilder, string name, string schema, int commandPosition, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyCollection`1<IColumnModification> readOperations);
    private void AppendInsertEnd(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyCollection`1<IColumnModification> readOperations);
    private ResultSetMapping AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyCollection`1<IColumnModification> readOperations);
    private void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> conditionOperations, IReadOnlyCollection`1<IColumnModification> readOperations, int commandPosition);
    public virtual void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <AppendBatchInsertOperation>b__1_2(StringBuilder sb, IColumnModification cm);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <AppendAfterDeclare>b__14_1(StringBuilder sb, IColumnModification cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Oracle.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[NullableContextAttribute("1")]
public interface Oracle.EntityFrameworkCore.ValueGeneration.Internal.IOracleSequenceValueGeneratorFactory {
    public abstract virtual ValueGenerator Create(IProperty property, Type clrType, OracleSequenceValueGeneratorState generatorState, IOracleConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
public interface Oracle.EntityFrameworkCore.ValueGeneration.Internal.IOracleValueGeneratorCache {
    [NullableContextAttribute("1")]
public abstract virtual OracleSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleSequenceHiLoValueGenerator`1 : HiLoValueGenerator`1<TValue> {
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IUpdateSqlGenerator _sqlGenerator;
    private IOracleConnection _connection;
    private ISequence _sequence;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    public bool GeneratesTemporaryValues { get; }
    public OracleSequenceHiLoValueGenerator`1(IRawSqlCommandBuilder rawSqlCommandBuilder, IUpdateSqlGenerator sqlGenerator, OracleSequenceValueGeneratorState generatorState, IOracleConnection connection, IRelationalCommandDiagnosticsLogger commandLogger);
    protected virtual long GetNewLowValue();
    [AsyncStateMachineAttribute("Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleSequenceHiLoValueGenerator`1/<GetNewLowValueAsync>d__7")]
protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
    public virtual bool get_GeneratesTemporaryValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleSequenceValueGeneratorFactory : object {
    private IOracleUpdateSqlGenerator _sqlGenerator;
    public OracleSequenceValueGeneratorFactory(IOracleUpdateSqlGenerator sqlGenerator);
    public virtual ValueGenerator Create(IProperty property, Type type, OracleSequenceValueGeneratorState generatorState, IOracleConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleSequenceValueGeneratorState : HiLoValueGeneratorState {
    [CompilerGeneratedAttribute]
private ISequence <Sequence>k__BackingField;
    public ISequence Sequence { get; }
    public OracleSequenceValueGeneratorState(ISequence sequence);
    [CompilerGeneratedAttribute]
public virtual ISequence get_Sequence();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleValueGeneratorCache : ValueGeneratorCache {
    private ConcurrentDictionary`2<string, OracleSequenceValueGeneratorState> _sequenceGeneratorCache;
    public OracleValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    public virtual OracleSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
    private static string GetSequenceName(ISequence sequence);
    private static string GetSequenceName(ISequence sequence, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Oracle.EntityFrameworkCore.ValueGeneration.Internal.OracleValueGeneratorSelector : RelationalValueGeneratorSelector {
    private IOracleSequenceValueGeneratorFactory _sequenceFactory;
    private IOracleConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IRelationalCommandDiagnosticsLogger m_oracleLogger;
    public IOracleValueGeneratorCache Cache { get; }
    public OracleValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, IOracleSequenceValueGeneratorFactory sequenceFactory, IOracleConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
    public virtual IOracleValueGeneratorCache get_Cache();
    public virtual ValueGenerator Select(IProperty property, ITypeBase entityType);
    public virtual ValueGenerator Create(IProperty property, ITypeBase entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Collections.Generic.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static MethodInfo _generateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static MethodInfo GetRequiredRuntimeMethod(Type type, string name, Type[] parameters);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__11")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
