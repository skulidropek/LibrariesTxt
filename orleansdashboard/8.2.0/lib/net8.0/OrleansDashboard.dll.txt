[ExtensionAttribute]
public static class Orleans.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder UseDashboard(ISiloBuilder builder, Action`1<DashboardOptions> configurator);
    [ExtensionAttribute]
public static IServiceCollection AddDashboard(IServiceCollection services, Action`1<DashboardOptions> configurator);
    [ExtensionAttribute]
public static IApplicationBuilder UseOrleansDashboard(IApplicationBuilder app, DashboardOptions options);
    [ExtensionAttribute]
public static IServiceCollection AddServicesForSelfHostedDashboard(IServiceCollection services, Action`1<DashboardOptions> configurator);
    [ExtensionAttribute]
internal static IServiceCollection AddServicesForHostedDashboard(IServiceCollection services, IGrainFactory grainFactory, DashboardOptions options);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.OrleansDashboard.Metadata_OrleansDashboard : TypeManifestProviderBase {
    protected virtual void ConfigureInner(TypeManifestOptions config);
}
internal class OrleansDashboard.BasicAuthMiddleware : object {
    private static string BasicAuthorizationPrefix;
    private RequestDelegate next;
    private DashboardOptions options;
    internal static String[] WWWAuthenticateHeaderValue;
    public BasicAuthMiddleware(RequestDelegate next, IOptions`1<DashboardOptions> options);
    private static BasicAuthMiddleware();
    public Task Invoke(HttpContext context);
}
public class OrleansDashboard.Dashboard : object {
    private IWebHost host;
    private MeterProvider meterProvider;
    private ILogger`1<Dashboard> logger;
    private ILocalSiloDetails localSiloDetails;
    private IGrainFactory grainFactory;
    private DashboardTelemetryExporter dashboardTelemetryExporter;
    private ISiloGrainClient siloGrainClient;
    private IAssetProvider assetProvider;
    private DashboardOptions dashboardOptions;
    public Dashboard(ILogger`1<Dashboard> logger, ILocalSiloDetails localSiloDetails, IGrainFactory grainFactory, DashboardTelemetryExporter dashboardTelemetryExporter, IOptions`1<DashboardOptions> dashboardOptions, ISiloGrainClient siloGrainClient, IAssetProvider assetProvider);
    [AsyncStateMachineAttribute("OrleansDashboard.Dashboard/<Execute>d__10")]
public sealed virtual Task Execute(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OrleansDashboard.Dashboard/<ActivateSiloGrainAsync>d__11")]
private Task ActivateSiloGrainAsync();
    [AsyncStateMachineAttribute("OrleansDashboard.Dashboard/<ActivateDashboardGrainAsync>d__12")]
private Task ActivateDashboardGrainAsync();
    private Task StartOpenTelemetryConsumerAsync();
    public sealed virtual void Dispose();
    private static string GetOrleansVersion();
    private static string GetHostVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Execute>b__10_0(IServiceCollection services);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Execute>b__10_1(IApplicationBuilder app);
}
public class OrleansDashboard.DashboardMiddleware : object {
    private static JsonSerializerOptions Options;
    private static int REMINDER_PAGE_SIZE;
    private static int UNAVAILABLE_RETRY_DELAY;
    private IOptions`1<DashboardOptions> options;
    private DashboardLogger logger;
    private RequestDelegate next;
    private IAssetProvider assetProvider;
    private Lazy`1<IDashboardClient> lazyClient;
    private IDashboardClient Client { get; }
    private static DashboardMiddleware();
    public DashboardMiddleware(RequestDelegate next, IGrainFactory grainFactory, IAssetProvider assetProvider, IOptions`1<DashboardOptions> options, DashboardLogger logger);
    private IDashboardClient get_Client();
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<Invoke>d__12")]
public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<WriteUnavailable>d__13")]
private static Task WriteUnavailable(HttpContext context, bool lostConnectivity);
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<WriteJson>d__14`1")]
private static Task WriteJson(HttpContext context, T content);
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<WriteFileAsync>d__15")]
private static Task WriteFileAsync(HttpContext context, string name, string contentType);
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<WriteIndexFile>d__16")]
private Task WriteIndexFile(HttpContext context);
    [AsyncStateMachineAttribute("OrleansDashboard.DashboardMiddleware/<TraceAsync>d__17")]
private Task TraceAsync(HttpContext context);
    private static Stream OpenFile(string name, Assembly assembly);
}
public class OrleansDashboard.DashboardOptions : object {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomCssPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HostSelf>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CounterUpdateIntervalMs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HistoryLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string BasePath { get; public set; }
    public string ScriptPath { get; public set; }
    public string CustomCssPath { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Host { get; public set; }
    public bool HideTrace { get; public set; }
    public bool HostSelf { get; public set; }
    public int CounterUpdateIntervalMs { get; public set; }
    public int HistoryLength { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptPath();
    [CompilerGeneratedAttribute]
public void set_ScriptPath(string value);
    [CompilerGeneratedAttribute]
public string get_CustomCssPath();
    [CompilerGeneratedAttribute]
public void set_CustomCssPath(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public bool get_HideTrace();
    [CompilerGeneratedAttribute]
public void set_HideTrace(bool value);
    [CompilerGeneratedAttribute]
public bool get_HostSelf();
    [CompilerGeneratedAttribute]
public void set_HostSelf(bool value);
    [CompilerGeneratedAttribute]
public int get_CounterUpdateIntervalMs();
    [CompilerGeneratedAttribute]
public void set_CounterUpdateIntervalMs(int value);
    [CompilerGeneratedAttribute]
public int get_HistoryLength();
    [CompilerGeneratedAttribute]
public void set_HistoryLength(int value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    internal bool HasUsernameAndPassword();
}
[ExtensionAttribute]
internal static class OrleansDashboard.Extensions : object {
    [ExtensionAttribute]
internal static string ToValue(PathString path);
}
internal class OrleansDashboard.Implementation.Assets.CDNAssetProvider : object {
    private static Dictionary`2<string, string> Paths;
    private static CDNAssetProvider();
    public sealed virtual Task ServeAssetAsync(string name, HttpContext httpContext);
}
public interface OrleansDashboard.Implementation.Assets.IAssetProvider {
    public abstract virtual Task ServeAssetAsync(string name, HttpContext httpContext);
}
public class OrleansDashboard.Implementation.DashboardLogger : object {
    private NoopDisposable scope;
    private ImmutableArray`1<Action`3<EventId, LogLevel, string>> actions;
    public static DashboardLogger Instance;
    private static DashboardLogger();
    public void Add(Action`3<EventId, LogLevel, string> action);
    public void Remove(Action`3<EventId, LogLevel, string> action);
    public sealed virtual void Dispose();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
public class OrleansDashboard.Implementation.DashboardTelemetryExporter : BaseExporter`1<Metric> {
    private Dictionary`2<string, Value`1<double>> metrics;
    private ISiloGrainClient siloGrainClient;
    private ILogger`1<DashboardTelemetryExporter> logger;
    private SiloAddress siloAddress;
    public DashboardTelemetryExporter(ILocalSiloDetails localSiloDetails, ISiloGrainClient siloGrainClient, ILogger`1<DashboardTelemetryExporter> logger);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
    private void CollectMetricsFromBatch(Batch`1& batch);
    private void CollectMetric(Metric metric, Func`2<MetricPoint, double> getValue);
    private static string ComputeDelta(Value`1<double> metric);
}
public class OrleansDashboard.Implementation.Details.MembershipTableSiloDetailsProvider : object {
    private IGrainFactory grainFactory;
    public MembershipTableSiloDetailsProvider(IGrainFactory grainFactory);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Details.MembershipTableSiloDetailsProvider/<GetSiloDetails>d__2")]
public sealed virtual Task`1<SiloDetails[]> GetSiloDetails();
}
public class OrleansDashboard.Implementation.Details.SiloStatusOracleSiloDetailsProvider : object {
    private ISiloStatusOracle siloStatusOracle;
    public SiloStatusOracleSiloDetailsProvider(ISiloStatusOracle siloStatusOracle);
    public sealed virtual Task`1<SiloDetails[]> GetSiloDetails();
}
public class OrleansDashboard.Implementation.GrainProfilerFilter : object {
    public static GrainMethodFormatterDelegate DefaultGrainMethodFormatter;
    private GrainMethodFormatterDelegate formatMethodName;
    private IGrainProfiler profiler;
    private ILogger`1<GrainProfilerFilter> logger;
    private ConcurrentDictionary`2<MethodInfo, bool> shouldSkipCache;
    public GrainProfilerFilter(IGrainProfiler profiler, ILogger`1<GrainProfilerFilter> logger, GrainMethodFormatterDelegate formatMethodName);
    private static GrainProfilerFilter();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.GrainProfilerFilter/<Invoke>d__7")]
public sealed virtual Task Invoke(IIncomingGrainCallContext context);
    private void Track(IIncomingGrainCallContext context, Stopwatch stopwatch, bool isException);
    private static string FormatMethodName(IIncomingGrainCallContext context);
    private bool ShouldSkipProfiling(IIncomingGrainCallContext context);
}
[ReentrantAttribute]
public class OrleansDashboard.Implementation.Grains.DashboardGrain : Grain {
    private ITraceHistory history;
    private ISiloDetailsProvider siloDetailsProvider;
    private ISiloGrainClient siloGrainClient;
    private DashboardCounters counters;
    private GrainProfilerOptions grainProfilerOptions;
    private TimeSpan updateInterval;
    private bool isUpdating;
    private DateTime startTime;
    private DateTime lastRefreshTime;
    private DateTime lastQuery;
    private bool isEnabled;
    public DashboardGrain(IOptions`1<DashboardOptions> options, IOptions`1<GrainProfilerOptions> grainProfilerOptions, ISiloDetailsProvider siloDetailsProvider, ISiloGrainClient siloGrainClient);
    public virtual Task OnActivateAsync(CancellationToken cancellationToken);
    private Task EnsureIsActive();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<BroadcaseEnabled>d__14")]
private Task BroadcaseEnabled();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<EnsureCountersAreUpToDate>d__15")]
private Task EnsureCountersAreUpToDate();
    internal void RecalculateCounters(int activationCount, SiloDetails[] hosts, IList`1<SimpleGrainStatistic> simpleGrainStatistics, DetailedGrainStatistic[] detailGrainStatistics);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<GetCounters>d__17")]
public sealed virtual Task`1<Immutable`1<DashboardCounters>> GetCounters();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<GetGrainTracing>d__18")]
public sealed virtual Task`1<Immutable`1<Dictionary`2<string, Dictionary`2<string, GrainTraceEntry>>>> GetGrainTracing(string grain);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<GetClusterTracing>d__19")]
public sealed virtual Task`1<Immutable`1<Dictionary`2<string, GrainTraceEntry>>> GetClusterTracing();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<GetSiloTracing>d__20")]
public sealed virtual Task`1<Immutable`1<Dictionary`2<string, GrainTraceEntry>>> GetSiloTracing(string address);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<TopGrainMethods>d__21")]
public sealed virtual Task`1<Immutable`1<Dictionary`2<string, GrainMethodAggregate[]>>> TopGrainMethods(int take);
    public sealed virtual Task Init();
    public sealed virtual Task SubmitTracing(string siloAddress, Immutable`1<SiloGrainTraceEntry[]> grainTrace);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<GetGrainState>d__24")]
public sealed virtual Task`1<Immutable`1<string>> GetGrainState(string id, string grainType);
    public sealed virtual Task`1<Immutable`1<String[]>> GetGrainTypes();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardGrain/<<OnActivateAsync>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task <OnActivateAsync>b__12_0(CancellationToken x);
    [CompilerGeneratedAttribute]
internal static GrainMethodAggregate[] <TopGrainMethods>g__GetTotalCalls|21_0(<>c__DisplayClass21_0& );
    [CompilerGeneratedAttribute]
internal static GrainMethodAggregate[] <TopGrainMethods>g__GetLatency|21_1(<>c__DisplayClass21_0& );
    [CompilerGeneratedAttribute]
internal static GrainMethodAggregate[] <TopGrainMethods>g__GetErrors|21_2(<>c__DisplayClass21_0& );
}
public class OrleansDashboard.Implementation.Grains.DashboardRemindersGrain : Grain {
    private static Immutable`1<ReminderResponse> EmptyReminders;
    private IReminderTable reminderTable;
    public DashboardRemindersGrain(IServiceProvider serviceProvider);
    private static DashboardRemindersGrain();
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.Grains.DashboardRemindersGrain/<GetReminders>d__3")]
public sealed virtual Task`1<Immutable`1<ReminderResponse>> GetReminders(int pageNumber, int pageSize);
    private static ReminderInfo ToReminderInfo(ReminderEntry entry);
}
[PreferLocalPlacementAttribute]
public class OrleansDashboard.Implementation.Grains.SiloGrainProxy : Grain {
    private ISiloGrainService siloGrainService;
    public SiloGrainProxy(ISiloGrainClient siloGrainClient);
    public sealed virtual Task SetVersion(string orleans, string host);
    public sealed virtual Task ReportCounters(Immutable`1<StatCounter[]> stats);
    public sealed virtual Task Enable(bool enabled);
    public sealed virtual Task`1<Immutable`1<Dictionary`2<string, string>>> GetExtendedProperties();
    public sealed virtual Task`1<Immutable`1<SiloRuntimeStatistics[]>> GetRuntimeStatistics();
    public sealed virtual Task`1<Immutable`1<StatCounter[]>> GetCounters();
}
internal static class OrleansDashboard.Implementation.Helpers.GrainStateHelper : object {
    public static IEnumerable`1<Type> GetGrainTypes();
    public static ValueTuple`2<object, string> GetGrainId(string id, Type implementationType);
    public static IEnumerable`1<Type> GetPropertiesAndFieldsForGrainState(Type implementationType);
    public static MethodInfo GenerateGetGrainMethod(IGrainFactory grainFactory, object grainId, string keyExtension);
    public static Type GetGrainType(string grainType);
}
public class OrleansDashboard.Implementation.TraceWriter : object {
    private DashboardLogger traceListener;
    private HttpContext context;
    private StreamWriter writer;
    public TraceWriter(DashboardLogger traceListener, HttpContext context);
    private void Write(EventId eventId, LogLevel level, string message);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.TraceWriter/<WriteAsync>d__5")]
public Task WriteAsync(string message);
    [AsyncStateMachineAttribute("OrleansDashboard.Implementation.TraceWriter/<WriteAsync>d__6")]
public Task WriteAsync(EventId eventId, LogLevel level, string message);
    public sealed virtual ValueTask DisposeAsync();
    private static string GetLogLevelString(LogLevel logLevel);
}
public class OrleansDashboard.SiloGrainClient : GrainServiceClient`1<ISiloGrainService> {
    public SiloGrainClient(IServiceProvider serviceProvider);
    public sealed virtual ISiloGrainService GrainService(SiloAddress destination);
}
public class OrleansDashboard.SiloGrainService : GrainService {
    private static int DefaultTimerIntervalMs;
    private Queue`1<SiloRuntimeStatistics> statistics;
    private Dictionary`2<string, StatCounter> counters;
    private DashboardOptions options;
    private IGrainProfiler profiler;
    private IGrainFactory grainFactory;
    private ILogger`1<SiloGrainService> logger;
    private IDisposable timer;
    private string versionOrleans;
    private string versionHost;
    public SiloGrainService(GrainId grainId, Silo silo, ILoggerFactory loggerFactory, IGrainProfiler profiler, IOptions`1<DashboardOptions> options, IGrainFactory grainFactory);
    [AsyncStateMachineAttribute("OrleansDashboard.SiloGrainService/<Start>d__11")]
public virtual Task Start();
    [AsyncStateMachineAttribute("OrleansDashboard.SiloGrainService/<CollectStatistics>d__12")]
private Task CollectStatistics(bool canDeactivate);
    public sealed virtual Task SetVersion(string orleans, string host);
    public sealed virtual Task`1<Immutable`1<Dictionary`2<string, string>>> GetExtendedProperties();
    public sealed virtual Task ReportCounters(Immutable`1<StatCounter[]> reportCounters);
    public sealed virtual Task`1<Immutable`1<SiloRuntimeStatistics[]>> GetRuntimeStatistics();
    public sealed virtual Task`1<Immutable`1<StatCounter[]>> GetCounters();
    public sealed virtual Task Enable(bool enabled);
    [CompilerGeneratedAttribute]
private Task <Start>b__11_0(object x);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
public class OrleansDashboard.TimeSpanConverter : JsonConverter`1<TimeSpan> {
    public virtual TimeSpan Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TimeSpan value, JsonSerializerOptions options);
}
