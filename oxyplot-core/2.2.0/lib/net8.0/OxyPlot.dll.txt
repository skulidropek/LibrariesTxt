[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class OxyPlot.Annotations.Annotation : PlotElement {
    [CompilerGeneratedAttribute]
private AnnotationLayer <Layer>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <YAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClipByXAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClipByYAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YAxisKey>k__BackingField;
    public AnnotationLayer Layer { get; public set; }
    public Axis XAxis { get; private set; }
    public string XAxisKey { get; public set; }
    public Axis YAxis { get; private set; }
    public bool ClipByXAxis { get; public set; }
    public bool ClipByYAxis { get; public set; }
    public string YAxisKey { get; public set; }
    [CompilerGeneratedAttribute]
public AnnotationLayer get_Layer();
    [CompilerGeneratedAttribute]
public void set_Layer(AnnotationLayer value);
    [CompilerGeneratedAttribute]
public sealed virtual Axis get_XAxis();
    [CompilerGeneratedAttribute]
private void set_XAxis(Axis value);
    [CompilerGeneratedAttribute]
public string get_XAxisKey();
    [CompilerGeneratedAttribute]
public void set_XAxisKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Axis get_YAxis();
    [CompilerGeneratedAttribute]
private void set_YAxis(Axis value);
    [CompilerGeneratedAttribute]
public bool get_ClipByXAxis();
    [CompilerGeneratedAttribute]
public void set_ClipByXAxis(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClipByYAxis();
    [CompilerGeneratedAttribute]
public void set_ClipByYAxis(bool value);
    [CompilerGeneratedAttribute]
public string get_YAxisKey();
    [CompilerGeneratedAttribute]
public void set_YAxisKey(string value);
    public void EnsureAxes();
    [NullableContextAttribute("1")]
public virtual void Render(IRenderContext rc);
    public virtual OxyRect GetClippingRect();
    public virtual ScreenPoint Transform(DataPoint p);
    public virtual DataPoint InverseTransform(ScreenPoint p);
}
public enum OxyPlot.Annotations.AnnotationLayer : Enum {
    public int value__;
    public static AnnotationLayer BelowAxes;
    public static AnnotationLayer BelowSeries;
    public static AnnotationLayer AboveSeries;
}
public enum OxyPlot.Annotations.AnnotationTextOrientation : Enum {
    public int value__;
    public static AnnotationTextOrientation Horizontal;
    public static AnnotationTextOrientation Vertical;
    public static AnnotationTextOrientation AlongLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.ArrowAnnotation : TextualAnnotation {
    private ScreenPoint screenEndPoint;
    private ScreenPoint screenStartPoint;
    [CompilerGeneratedAttribute]
private ScreenVector <ArrowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <EndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HeadLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HeadWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <StartPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Veeness>k__BackingField;
    public ScreenVector ArrowDirection { get; public set; }
    public OxyColor Color { get; public set; }
    public DataPoint EndPoint { get; public set; }
    public double HeadLength { get; public set; }
    public double HeadWidth { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public DataPoint StartPoint { get; public set; }
    public double StrokeThickness { get; public set; }
    public double Veeness { get; public set; }
    [CompilerGeneratedAttribute]
public ScreenVector get_ArrowDirection();
    [CompilerGeneratedAttribute]
public void set_ArrowDirection(ScreenVector value);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public DataPoint get_EndPoint();
    [CompilerGeneratedAttribute]
public void set_EndPoint(DataPoint value);
    [CompilerGeneratedAttribute]
public double get_HeadLength();
    [CompilerGeneratedAttribute]
public void set_HeadLength(double value);
    [CompilerGeneratedAttribute]
public double get_HeadWidth();
    [CompilerGeneratedAttribute]
public void set_HeadWidth(double value);
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public DataPoint get_StartPoint();
    [CompilerGeneratedAttribute]
public void set_StartPoint(DataPoint value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_Veeness();
    [CompilerGeneratedAttribute]
public void set_Veeness(double value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    [CompilerGeneratedAttribute]
private ScreenPoint <Render>b__43_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.EllipseAnnotation : ShapeAnnotation {
    private OxyRect screenRectangle;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    [CompilerGeneratedAttribute]
private ScreenPoint <Render>b__18_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.FunctionAnnotation : PathAnnotation {
    [CompilerGeneratedAttribute]
private FunctionAnnotationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, double> <Equation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Resolution>k__BackingField;
    public FunctionAnnotationType Type { get; public set; }
    public Func`2<double, double> Equation { get; public set; }
    public int Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public FunctionAnnotationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(FunctionAnnotationType value);
    [CompilerGeneratedAttribute]
public Func`2<double, double> get_Equation();
    [CompilerGeneratedAttribute]
public void set_Equation(Func`2<double, double> value);
    [CompilerGeneratedAttribute]
public int get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(int value);
    [NullableContextAttribute("1")]
protected virtual IList`1<ScreenPoint> GetScreenPoints();
}
public enum OxyPlot.Annotations.FunctionAnnotationType : Enum {
    public int value__;
    public static FunctionAnnotationType EquationX;
    public static FunctionAnnotationType EquationY;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.ImageAnnotation : TransposableAnnotation {
    private OxyRect actualBounds;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private OxyImage <ImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <X>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <OffsetY>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotLength <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Opacity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interpolate>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalAlignment <VerticalAlignment>k__BackingField;
    [NullableAttribute("2")]
public OxyImage ImageSource { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    public PlotLength X { get; public set; }
    public PlotLength Y { get; public set; }
    public PlotLength OffsetX { get; public set; }
    public PlotLength OffsetY { get; public set; }
    public PlotLength Width { get; public set; }
    public PlotLength Height { get; public set; }
    public double Opacity { get; public set; }
    public bool Interpolate { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public OxyImage get_ImageSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ImageSource(OxyImage value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public PlotLength get_X();
    [CompilerGeneratedAttribute]
public void set_X(PlotLength value);
    [CompilerGeneratedAttribute]
public PlotLength get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(PlotLength value);
    [CompilerGeneratedAttribute]
public PlotLength get_OffsetX();
    [CompilerGeneratedAttribute]
public void set_OffsetX(PlotLength value);
    [CompilerGeneratedAttribute]
public PlotLength get_OffsetY();
    [CompilerGeneratedAttribute]
public void set_OffsetY(PlotLength value);
    [CompilerGeneratedAttribute]
public PlotLength get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(PlotLength value);
    [CompilerGeneratedAttribute]
public PlotLength get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(PlotLength value);
    [CompilerGeneratedAttribute]
public double get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(double value);
    [CompilerGeneratedAttribute]
public bool get_Interpolate();
    [CompilerGeneratedAttribute]
public void set_Interpolate(bool value);
    [CompilerGeneratedAttribute]
public VerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(VerticalAlignment value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    protected ScreenPoint GetPoint(PlotLength x, PlotLength y, PlotModel model);
    protected ScreenVector GetVector(PlotLength x, PlotLength y, PlotModel model);
    public virtual OxyRect GetClippingRect();
}
public class OxyPlot.Annotations.LineAnnotation : PathAnnotation {
    [CompilerGeneratedAttribute]
private double <Intercept>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Slope>k__BackingField;
    [CompilerGeneratedAttribute]
private LineAnnotationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double Intercept { get; public set; }
    public double Slope { get; public set; }
    public LineAnnotationType Type { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Intercept();
    [CompilerGeneratedAttribute]
public void set_Intercept(double value);
    [CompilerGeneratedAttribute]
public double get_Slope();
    [CompilerGeneratedAttribute]
public void set_Slope(double value);
    [CompilerGeneratedAttribute]
public LineAnnotationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(LineAnnotationType value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [NullableContextAttribute("1")]
protected virtual IList`1<ScreenPoint> GetScreenPoints();
    [CompilerGeneratedAttribute]
private double <GetScreenPoints>b__21_0(double x);
    [CompilerGeneratedAttribute]
private double <GetScreenPoints>b__21_1(double y);
    [CompilerGeneratedAttribute]
private double <GetScreenPoints>b__21_2(double x);
}
public enum OxyPlot.Annotations.LineAnnotationType : Enum {
    public int value__;
    public static LineAnnotationType Horizontal;
    public static LineAnnotationType Vertical;
    public static LineAnnotationType LinearEquation;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class OxyPlot.Annotations.PathAnnotation : TextualAnnotation {
    [NullableAttribute("2")]
private IList`1<ScreenPoint> screenPoints;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <BorderPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <BorderBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <BorderStroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BorderStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationTextOrientation <TextOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumSegmentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMinimumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMinimumY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMaximumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMaximumY>k__BackingField;
    public OxyColor Color { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double MaximumX { get; public set; }
    public double MaximumY { get; public set; }
    public double MinimumX { get; public set; }
    public double MinimumY { get; public set; }
    public double StrokeThickness { get; public set; }
    public double TextMargin { get; public set; }
    public double TextPadding { get; public set; }
    public OxyThickness BorderPadding { get; public set; }
    public OxyColor BorderBackground { get; public set; }
    public OxyColor BorderStroke { get; public set; }
    public double BorderStrokeThickness { get; public set; }
    public AnnotationTextOrientation TextOrientation { get; public set; }
    public double TextLinePosition { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    protected double ActualMinimumX { get; protected set; }
    protected double ActualMinimumY { get; protected set; }
    protected double ActualMaximumX { get; protected set; }
    protected double ActualMaximumY { get; protected set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_MaximumX();
    [CompilerGeneratedAttribute]
public void set_MaximumX(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumY();
    [CompilerGeneratedAttribute]
public void set_MaximumY(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumX();
    [CompilerGeneratedAttribute]
public void set_MinimumX(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumY();
    [CompilerGeneratedAttribute]
public void set_MinimumY(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_TextMargin();
    [CompilerGeneratedAttribute]
public void set_TextMargin(double value);
    [CompilerGeneratedAttribute]
public double get_TextPadding();
    [CompilerGeneratedAttribute]
public void set_TextPadding(double value);
    [CompilerGeneratedAttribute]
public OxyThickness get_BorderPadding();
    [CompilerGeneratedAttribute]
public void set_BorderPadding(OxyThickness value);
    [CompilerGeneratedAttribute]
public OxyColor get_BorderBackground();
    [CompilerGeneratedAttribute]
public void set_BorderBackground(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_BorderStroke();
    [CompilerGeneratedAttribute]
public void set_BorderStroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_BorderStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_BorderStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public AnnotationTextOrientation get_TextOrientation();
    [CompilerGeneratedAttribute]
public void set_TextOrientation(AnnotationTextOrientation value);
    [CompilerGeneratedAttribute]
public double get_TextLinePosition();
    [CompilerGeneratedAttribute]
public void set_TextLinePosition(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumSegmentLength();
    [CompilerGeneratedAttribute]
public void set_MinimumSegmentLength(double value);
    [CompilerGeneratedAttribute]
protected double get_ActualMinimumX();
    [CompilerGeneratedAttribute]
protected void set_ActualMinimumX(double value);
    [CompilerGeneratedAttribute]
protected double get_ActualMinimumY();
    [CompilerGeneratedAttribute]
protected void set_ActualMinimumY(double value);
    [CompilerGeneratedAttribute]
protected double get_ActualMaximumX();
    [CompilerGeneratedAttribute]
protected void set_ActualMaximumX(double value);
    [CompilerGeneratedAttribute]
protected double get_ActualMaximumY();
    [CompilerGeneratedAttribute]
protected void set_ActualMaximumY(double value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    protected abstract virtual IList`1<ScreenPoint> GetScreenPoints();
    protected virtual void CalculateActualMinimumsMaximums();
    private static bool GetPointAtRelativeDistance(IList`1<ScreenPoint> pts, double p, double margin, ScreenPoint& position, Double& angle);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.PointAnnotation : ShapeAnnotation {
    private ScreenPoint screenPosition;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <Shape>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint[] <CustomOutline>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Size { get; public set; }
    public double TextMargin { get; public set; }
    public MarkerType Shape { get; public set; }
    public ScreenPoint[] CustomOutline { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    [CompilerGeneratedAttribute]
public double get_TextMargin();
    [CompilerGeneratedAttribute]
public void set_TextMargin(double value);
    [CompilerGeneratedAttribute]
public MarkerType get_Shape();
    [CompilerGeneratedAttribute]
public void set_Shape(MarkerType value);
    [CompilerGeneratedAttribute]
public ScreenPoint[] get_CustomOutline();
    [CompilerGeneratedAttribute]
public void set_CustomOutline(ScreenPoint[] value);
    [NullableContextAttribute("1")]
public virtual void Render(IRenderContext rc);
    [NullableContextAttribute("1")]
protected virtual HitTestResult HitTestOverride(HitTestArguments args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.PolygonAnnotation : ShapeAnnotation {
    [NullableAttribute("2")]
private IList`1<ScreenPoint> screenPoints;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumSegmentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DataPoint> <Points>k__BackingField;
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    public List`1<DataPoint> Points { get; private set; }
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_MinimumSegmentLength();
    [CompilerGeneratedAttribute]
public void set_MinimumSegmentLength(double value);
    [CompilerGeneratedAttribute]
public List`1<DataPoint> get_Points();
    [CompilerGeneratedAttribute]
private void set_Points(List`1<DataPoint> value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    [CompilerGeneratedAttribute]
private ScreenPoint <Render>b__18_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.PolylineAnnotation : PathAnnotation {
    private List`1<DataPoint> points;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IInterpolationAlgorithm <InterpolationAlgorithm>k__BackingField;
    public List`1<DataPoint> Points { get; }
    [NullableAttribute("2")]
public IInterpolationAlgorithm InterpolationAlgorithm { get; public set; }
    public List`1<DataPoint> get_Points();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IInterpolationAlgorithm get_InterpolationAlgorithm();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InterpolationAlgorithm(IInterpolationAlgorithm value);
    protected virtual IList`1<ScreenPoint> GetScreenPoints();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.RectangleAnnotation : ShapeAnnotation {
    private OxyRect screenRectangle;
    [CompilerGeneratedAttribute]
private double <MinimumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumY>k__BackingField;
    public double MinimumX { get; public set; }
    public double MaximumX { get; public set; }
    public double MinimumY { get; public set; }
    public double MaximumY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_MinimumX();
    [CompilerGeneratedAttribute]
public void set_MinimumX(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumX();
    [CompilerGeneratedAttribute]
public void set_MaximumX(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumY();
    [CompilerGeneratedAttribute]
public void set_MinimumY(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumY();
    [CompilerGeneratedAttribute]
public void set_MaximumY(double value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    [CompilerGeneratedAttribute]
private ScreenPoint <Render>b__18_0();
}
public abstract class OxyPlot.Annotations.ShapeAnnotation : TextualAnnotation {
    [CompilerGeneratedAttribute]
private OxyColor <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    public OxyColor Fill { get; public set; }
    public OxyColor Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.Annotations.TextAnnotation : TextualAnnotation {
    [NullableAttribute("2")]
private IList`1<ScreenPoint> actualBounds;
    [CompilerGeneratedAttribute]
private OxyColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenVector <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    public OxyColor Background { get; public set; }
    public ScreenVector Offset { get; public set; }
    public OxyThickness Padding { get; public set; }
    public OxyColor Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(OxyColor value);
    [CompilerGeneratedAttribute]
public ScreenVector get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(ScreenVector value);
    [CompilerGeneratedAttribute]
public OxyThickness get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(OxyThickness value);
    [CompilerGeneratedAttribute]
public OxyColor get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    public virtual void Render(IRenderContext rc);
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    internal static IList`1<ScreenPoint> GetTextBounds(ScreenPoint position, OxySize size, OxyThickness padding, double rotation, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class OxyPlot.Annotations.TextualAnnotation : TransposableAnnotation {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <TextPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <TextHorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalAlignment <TextVerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextRotation>k__BackingField;
    public string Text { get; public set; }
    public DataPoint TextPosition { get; public set; }
    public HorizontalAlignment TextHorizontalAlignment { get; public set; }
    public VerticalAlignment TextVerticalAlignment { get; public set; }
    public double TextRotation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public DataPoint get_TextPosition();
    [CompilerGeneratedAttribute]
public void set_TextPosition(DataPoint value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_TextHorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_TextHorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public VerticalAlignment get_TextVerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_TextVerticalAlignment(VerticalAlignment value);
    [CompilerGeneratedAttribute]
public double get_TextRotation();
    [CompilerGeneratedAttribute]
public void set_TextRotation(double value);
    [NullableContextAttribute("1")]
protected ScreenPoint GetActualTextPosition(Func`1<ScreenPoint> defaultPosition);
    protected void GetActualTextAlignment(HorizontalAlignment& ha, VerticalAlignment& va);
}
public abstract class OxyPlot.Annotations.TransposableAnnotation : Annotation {
    public virtual OxyRect GetClippingRect();
    public virtual ScreenPoint Transform(DataPoint p);
    public virtual DataPoint InverseTransform(ScreenPoint p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.ArrayBuilder : object {
    public static Double[] CreateVector(double x0, double x1, int n);
    public static Double[] CreateVector(double x0, double x1, double dx);
    public static Double[0...,0...] Evaluate(Func`3<double, double, double> f, Double[] x, Double[] y);
    [ExtensionAttribute]
public static void Fill(Double[] array, double value);
    [ExtensionAttribute]
public static void Fill2D(Double[0...,0...] array, double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.ArrayExtensions : object {
    [ExtensionAttribute]
public static double MaxOrDefault(IEnumerable`1<double> sequence, double defaultValue);
    [ExtensionAttribute]
public static double MinOrDefault(IEnumerable`1<double> sequence, double defaultValue);
    [ExtensionAttribute]
public static double Max2D(Double[0...,0...] array);
    [ExtensionAttribute]
public static double Min2D(Double[0...,0...] array, bool excludeNaN);
}
public static class OxyPlot.Arrays : object {
    public static T[] CopyOfRange(T[] source, int from, int to);
    public static T[] CopyOf(T[] source, int newLength);
    public static void Fill(T[] source, int i0, int i1, T v);
}
public class OxyPlot.Axes.AngleAxis : LinearAxis {
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    public double StartAngle { get; public set; }
    public double EndAngle { get; public set; }
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    public virtual DataPoint InverseTransform(double x, double y, Axis yaxis);
    public virtual bool IsXyAxis();
    public virtual void Render(IRenderContext rc, int pass);
    public virtual ScreenPoint Transform(double x, double y, Axis yaxis);
    internal virtual void UpdateTransform(OxyRect bounds);
}
public class OxyPlot.Axes.AngleAxisFullPlotArea : AngleAxis {
    public virtual void Render(IRenderContext rc, int pass);
}
public class OxyPlot.Axes.AngleAxisFullPlotAreaRenderer : AxisRendererBase`1<AngleAxisFullPlotArea> {
    public AngleAxisFullPlotAreaRenderer(IRenderContext rc, PlotModel plot);
    public virtual void Render(AngleAxisFullPlotArea axis, int pass);
    public ScreenPoint TransformToClientRectangle(double actualMaximum, double x, Axis axis, OxyRect plotArea, ScreenPoint midPoint);
}
public class OxyPlot.Axes.AngleAxisRenderer : AxisRendererBase`1<AngleAxis> {
    public AngleAxisRenderer(IRenderContext rc, PlotModel plot);
    public virtual void Render(AngleAxis axis, int pass);
}
public abstract class OxyPlot.Axes.Axis : PlotElement {
    protected static Func`2<double, double> Exponent;
    protected static Func`2<double, double> Mantissa;
    protected static Func`2<double, double> ThresholdRound;
    private double offset;
    private double scale;
    private AxisPosition position;
    [CompilerGeneratedAttribute]
private EventHandler`1<AxisChangedEventArgs> AxisChanged;
    [CompilerGeneratedAttribute]
private EventHandler TransformChanged;
    [CompilerGeneratedAttribute]
private double <AbsoluteMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AbsoluteMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMajorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumMajorIntervalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumMajorIntervalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClipMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClipMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualMinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualStringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AxisTickToLabelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AxisTitleDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AxisDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <AxislineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <AxislineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AxislineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClipTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CropGridlines>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DataMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DataMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <ExtraGridlineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <ExtraGridlineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExtraGridlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <ExtraGridlines>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, bool> <FilterFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FilterMaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FilterMinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IntervalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAxisVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPanEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsZoomEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, string> <LabelFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisLayer <Layer>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MajorGridlineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <MajorGridlineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MajorGridlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MajorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MajorTickSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumDataMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumRange>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumMajorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumMinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumDataMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumRange>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MinorGridlineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <MinorGridlineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorGridlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MinorTicklineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorTickSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionAtZeroCrossing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionTier>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint <ScreenMax>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint <ScreenMin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private TickStyle <TickStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <TicklineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleClippingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <TitleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitlePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSuperExponentialFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <DesiredMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PositionTierMaxShift>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PositionTierMinShift>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PositionTierSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewMinimum>k__BackingField;
    public double AbsoluteMaximum { get; public set; }
    public double AbsoluteMinimum { get; public set; }
    public double ActualMajorStep { get; protected set; }
    public double MinimumMajorIntervalCount { get; public set; }
    public double MaximumMajorIntervalCount { get; public set; }
    public double ActualMaximum { get; protected set; }
    public double ActualMinimum { get; protected set; }
    public double ClipMaximum { get; protected set; }
    public double ClipMinimum { get; protected set; }
    public double ActualMinorStep { get; protected set; }
    public string ActualStringFormat { get; protected set; }
    public string ActualTitle { get; }
    public double Angle { get; public set; }
    public double AxisTickToLabelDistance { get; public set; }
    public double AxisTitleDistance { get; public set; }
    public double AxisDistance { get; public set; }
    public OxyColor AxislineColor { get; public set; }
    public LineStyle AxislineStyle { get; public set; }
    public double AxislineThickness { get; public set; }
    public bool ClipTitle { get; public set; }
    public bool CropGridlines { get; public set; }
    public double DataMaximum { get; protected set; }
    public double DataMinimum { get; protected set; }
    public double EndPosition { get; public set; }
    public OxyColor ExtraGridlineColor { get; public set; }
    public LineStyle ExtraGridlineStyle { get; public set; }
    public double ExtraGridlineThickness { get; public set; }
    public Double[] ExtraGridlines { get; public set; }
    public Func`2<double, bool> FilterFunction { get; public set; }
    public double FilterMaxValue { get; public set; }
    public double FilterMinValue { get; public set; }
    public double IntervalLength { get; public set; }
    public bool IsAxisVisible { get; public set; }
    public bool IsPanEnabled { get; public set; }
    public bool IsReversed { get; }
    public bool IsZoomEnabled { get; public set; }
    public string Key { get; public set; }
    public Func`2<double, string> LabelFormatter { get; public set; }
    public AxisLayer Layer { get; public set; }
    public OxyColor MajorGridlineColor { get; public set; }
    public LineStyle MajorGridlineStyle { get; public set; }
    public double MajorGridlineThickness { get; public set; }
    public double MajorStep { get; public set; }
    public double MajorTickSize { get; public set; }
    public double Maximum { get; public set; }
    public double MaximumPadding { get; public set; }
    public double MaximumDataMargin { get; public set; }
    public double MaximumMargin { get; public set; }
    public double MaximumRange { get; public set; }
    public double Minimum { get; public set; }
    public double MinimumMajorStep { get; public set; }
    public double MinimumMinorStep { get; public set; }
    public double MinimumPadding { get; public set; }
    public double MinimumDataMargin { get; public set; }
    public double MinimumMargin { get; public set; }
    public double MinimumRange { get; public set; }
    public OxyColor MinorGridlineColor { get; public set; }
    public LineStyle MinorGridlineStyle { get; public set; }
    public double MinorGridlineThickness { get; public set; }
    public double MinorStep { get; public set; }
    public OxyColor MinorTicklineColor { get; public set; }
    public double MinorTickSize { get; public set; }
    public double Offset { get; }
    public AxisPosition Position { get; public set; }
    public bool PositionAtZeroCrossing { get; public set; }
    public int PositionTier { get; public set; }
    public double Scale { get; }
    public ScreenPoint ScreenMax { get; protected set; }
    public ScreenPoint ScreenMin { get; protected set; }
    public double StartPosition { get; public set; }
    public string StringFormat { get; public set; }
    public TickStyle TickStyle { get; public set; }
    public OxyColor TicklineColor { get; public set; }
    public string Title { get; public set; }
    public double TitleClippingLength { get; public set; }
    public OxyColor TitleColor { get; public set; }
    public string TitleFont { get; public set; }
    public double TitleFontSize { get; public set; }
    public double TitleFontWeight { get; public set; }
    public string TitleFormatString { get; public set; }
    public double TitlePosition { get; public set; }
    public string Unit { get; public set; }
    public bool UseSuperExponentialFormat { get; public set; }
    public OxyThickness DesiredMargin { get; protected set; }
    internal double PositionTierMaxShift { get; internal set; }
    internal double PositionTierMinShift { get; internal set; }
    internal double PositionTierSize { get; internal set; }
    protected internal OxyColor ActualTitleColor { get; }
    protected internal string ActualTitleFont { get; }
    protected internal double ActualTitleFontSize { get; }
    protected internal double ActualTitleFontWeight { get; }
    protected double ViewMaximum { get; protected set; }
    protected double ViewMinimum { get; protected set; }
    private static Axis();
    [CompilerGeneratedAttribute]
public void add_AxisChanged(EventHandler`1<AxisChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AxisChanged(EventHandler`1<AxisChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TransformChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TransformChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public double get_AbsoluteMaximum();
    [CompilerGeneratedAttribute]
public void set_AbsoluteMaximum(double value);
    [CompilerGeneratedAttribute]
public double get_AbsoluteMinimum();
    [CompilerGeneratedAttribute]
public void set_AbsoluteMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_ActualMajorStep();
    [CompilerGeneratedAttribute]
protected void set_ActualMajorStep(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumMajorIntervalCount();
    [CompilerGeneratedAttribute]
public void set_MinimumMajorIntervalCount(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumMajorIntervalCount();
    [CompilerGeneratedAttribute]
public void set_MaximumMajorIntervalCount(double value);
    [CompilerGeneratedAttribute]
public double get_ActualMaximum();
    [CompilerGeneratedAttribute]
protected void set_ActualMaximum(double value);
    [CompilerGeneratedAttribute]
public double get_ActualMinimum();
    [CompilerGeneratedAttribute]
protected void set_ActualMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_ClipMaximum();
    [CompilerGeneratedAttribute]
protected void set_ClipMaximum(double value);
    [CompilerGeneratedAttribute]
public double get_ClipMinimum();
    [CompilerGeneratedAttribute]
protected void set_ClipMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_ActualMinorStep();
    [CompilerGeneratedAttribute]
protected void set_ActualMinorStep(double value);
    [CompilerGeneratedAttribute]
public string get_ActualStringFormat();
    [CompilerGeneratedAttribute]
protected void set_ActualStringFormat(string value);
    public string get_ActualTitle();
    [CompilerGeneratedAttribute]
public double get_Angle();
    [CompilerGeneratedAttribute]
public void set_Angle(double value);
    [CompilerGeneratedAttribute]
public double get_AxisTickToLabelDistance();
    [CompilerGeneratedAttribute]
public void set_AxisTickToLabelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_AxisTitleDistance();
    [CompilerGeneratedAttribute]
public void set_AxisTitleDistance(double value);
    [CompilerGeneratedAttribute]
public double get_AxisDistance();
    [CompilerGeneratedAttribute]
public void set_AxisDistance(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_AxislineColor();
    [CompilerGeneratedAttribute]
public void set_AxislineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public LineStyle get_AxislineStyle();
    [CompilerGeneratedAttribute]
public void set_AxislineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_AxislineThickness();
    [CompilerGeneratedAttribute]
public void set_AxislineThickness(double value);
    [CompilerGeneratedAttribute]
public bool get_ClipTitle();
    [CompilerGeneratedAttribute]
public void set_ClipTitle(bool value);
    [CompilerGeneratedAttribute]
public bool get_CropGridlines();
    [CompilerGeneratedAttribute]
public void set_CropGridlines(bool value);
    [CompilerGeneratedAttribute]
public double get_DataMaximum();
    [CompilerGeneratedAttribute]
protected void set_DataMaximum(double value);
    [CompilerGeneratedAttribute]
public double get_DataMinimum();
    [CompilerGeneratedAttribute]
protected void set_DataMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_ExtraGridlineColor();
    [CompilerGeneratedAttribute]
public void set_ExtraGridlineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public LineStyle get_ExtraGridlineStyle();
    [CompilerGeneratedAttribute]
public void set_ExtraGridlineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_ExtraGridlineThickness();
    [CompilerGeneratedAttribute]
public void set_ExtraGridlineThickness(double value);
    [CompilerGeneratedAttribute]
public Double[] get_ExtraGridlines();
    [CompilerGeneratedAttribute]
public void set_ExtraGridlines(Double[] value);
    [CompilerGeneratedAttribute]
public Func`2<double, bool> get_FilterFunction();
    [CompilerGeneratedAttribute]
public void set_FilterFunction(Func`2<double, bool> value);
    [CompilerGeneratedAttribute]
public double get_FilterMaxValue();
    [CompilerGeneratedAttribute]
public void set_FilterMaxValue(double value);
    [CompilerGeneratedAttribute]
public double get_FilterMinValue();
    [CompilerGeneratedAttribute]
public void set_FilterMinValue(double value);
    [CompilerGeneratedAttribute]
public double get_IntervalLength();
    [CompilerGeneratedAttribute]
public void set_IntervalLength(double value);
    [CompilerGeneratedAttribute]
public bool get_IsAxisVisible();
    [CompilerGeneratedAttribute]
public void set_IsAxisVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPanEnabled();
    [CompilerGeneratedAttribute]
public void set_IsPanEnabled(bool value);
    public bool get_IsReversed();
    [CompilerGeneratedAttribute]
public bool get_IsZoomEnabled();
    [CompilerGeneratedAttribute]
public void set_IsZoomEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public Func`2<double, string> get_LabelFormatter();
    [CompilerGeneratedAttribute]
public void set_LabelFormatter(Func`2<double, string> value);
    [CompilerGeneratedAttribute]
public AxisLayer get_Layer();
    [CompilerGeneratedAttribute]
public void set_Layer(AxisLayer value);
    [CompilerGeneratedAttribute]
public OxyColor get_MajorGridlineColor();
    [CompilerGeneratedAttribute]
public void set_MajorGridlineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public LineStyle get_MajorGridlineStyle();
    [CompilerGeneratedAttribute]
public void set_MajorGridlineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_MajorGridlineThickness();
    [CompilerGeneratedAttribute]
public void set_MajorGridlineThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MajorStep();
    [CompilerGeneratedAttribute]
public void set_MajorStep(double value);
    [CompilerGeneratedAttribute]
public double get_MajorTickSize();
    [CompilerGeneratedAttribute]
public void set_MajorTickSize(double value);
    [CompilerGeneratedAttribute]
public double get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumPadding();
    [CompilerGeneratedAttribute]
public void set_MaximumPadding(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumDataMargin();
    [CompilerGeneratedAttribute]
public void set_MaximumDataMargin(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumMargin();
    [CompilerGeneratedAttribute]
public void set_MaximumMargin(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumRange();
    [CompilerGeneratedAttribute]
public void set_MaximumRange(double value);
    [CompilerGeneratedAttribute]
public double get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumMajorStep();
    [CompilerGeneratedAttribute]
public void set_MinimumMajorStep(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumMinorStep();
    [CompilerGeneratedAttribute]
public void set_MinimumMinorStep(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumPadding();
    [CompilerGeneratedAttribute]
public void set_MinimumPadding(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumDataMargin();
    [CompilerGeneratedAttribute]
public void set_MinimumDataMargin(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumMargin();
    [CompilerGeneratedAttribute]
public void set_MinimumMargin(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumRange();
    [CompilerGeneratedAttribute]
public void set_MinimumRange(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MinorGridlineColor();
    [CompilerGeneratedAttribute]
public void set_MinorGridlineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public LineStyle get_MinorGridlineStyle();
    [CompilerGeneratedAttribute]
public void set_MinorGridlineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_MinorGridlineThickness();
    [CompilerGeneratedAttribute]
public void set_MinorGridlineThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MinorStep();
    [CompilerGeneratedAttribute]
public void set_MinorStep(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MinorTicklineColor();
    [CompilerGeneratedAttribute]
public void set_MinorTicklineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_MinorTickSize();
    [CompilerGeneratedAttribute]
public void set_MinorTickSize(double value);
    public double get_Offset();
    public AxisPosition get_Position();
    public void set_Position(AxisPosition value);
    [CompilerGeneratedAttribute]
public bool get_PositionAtZeroCrossing();
    [CompilerGeneratedAttribute]
public void set_PositionAtZeroCrossing(bool value);
    [CompilerGeneratedAttribute]
public int get_PositionTier();
    [CompilerGeneratedAttribute]
public void set_PositionTier(int value);
    public double get_Scale();
    [CompilerGeneratedAttribute]
public ScreenPoint get_ScreenMax();
    [CompilerGeneratedAttribute]
protected void set_ScreenMax(ScreenPoint value);
    [CompilerGeneratedAttribute]
public ScreenPoint get_ScreenMin();
    [CompilerGeneratedAttribute]
protected void set_ScreenMin(ScreenPoint value);
    [CompilerGeneratedAttribute]
public double get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(double value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    [CompilerGeneratedAttribute]
public TickStyle get_TickStyle();
    [CompilerGeneratedAttribute]
public void set_TickStyle(TickStyle value);
    [CompilerGeneratedAttribute]
public OxyColor get_TicklineColor();
    [CompilerGeneratedAttribute]
public void set_TicklineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public double get_TitleClippingLength();
    [CompilerGeneratedAttribute]
public void set_TitleClippingLength(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_TitleColor();
    [CompilerGeneratedAttribute]
public void set_TitleColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_TitleFont();
    [CompilerGeneratedAttribute]
public void set_TitleFont(string value);
    [CompilerGeneratedAttribute]
public double get_TitleFontSize();
    [CompilerGeneratedAttribute]
public void set_TitleFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_TitleFontWeight();
    [CompilerGeneratedAttribute]
public void set_TitleFontWeight(double value);
    [CompilerGeneratedAttribute]
public string get_TitleFormatString();
    [CompilerGeneratedAttribute]
public void set_TitleFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_TitlePosition();
    [CompilerGeneratedAttribute]
public void set_TitlePosition(double value);
    [CompilerGeneratedAttribute]
public string get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSuperExponentialFormat();
    [CompilerGeneratedAttribute]
public void set_UseSuperExponentialFormat(bool value);
    [CompilerGeneratedAttribute]
public OxyThickness get_DesiredMargin();
    [CompilerGeneratedAttribute]
protected void set_DesiredMargin(OxyThickness value);
    [CompilerGeneratedAttribute]
internal double get_PositionTierMaxShift();
    [CompilerGeneratedAttribute]
internal void set_PositionTierMaxShift(double value);
    [CompilerGeneratedAttribute]
internal double get_PositionTierMinShift();
    [CompilerGeneratedAttribute]
internal void set_PositionTierMinShift(double value);
    [CompilerGeneratedAttribute]
internal double get_PositionTierSize();
    [CompilerGeneratedAttribute]
internal void set_PositionTierSize(double value);
    protected internal OxyColor get_ActualTitleColor();
    protected internal string get_ActualTitleFont();
    protected internal double get_ActualTitleFontSize();
    protected internal double get_ActualTitleFontWeight();
    [CompilerGeneratedAttribute]
protected double get_ViewMaximum();
    [CompilerGeneratedAttribute]
protected void set_ViewMaximum(double value);
    [CompilerGeneratedAttribute]
protected double get_ViewMinimum();
    [CompilerGeneratedAttribute]
protected void set_ViewMinimum(double value);
    public static double ToDouble(object value);
    public static DataPoint InverseTransform(ScreenPoint p, Axis xaxis, Axis yaxis);
    public string FormatValue(double x);
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    public virtual object GetValue(double x);
    public virtual DataPoint InverseTransform(double x, double y, Axis yaxis);
    public virtual double InverseTransform(double sx);
    public bool IsHorizontal();
    public bool IsValidValue(double value);
    public bool IsVertical();
    public abstract virtual bool IsXyAxis();
    public virtual bool IsLogarithmic();
    public virtual void Measure(IRenderContext rc);
    public virtual void Pan(ScreenPoint ppt, ScreenPoint cpt);
    public virtual void Pan(double delta);
    public virtual void Render(IRenderContext rc, int pass);
    public virtual void Reset();
    public virtual string ToString();
    public virtual ScreenPoint Transform(double x, double y, Axis yaxis);
    public virtual double Transform(double x);
    public virtual void Zoom(double newScale);
    public virtual void Zoom(double x0, double x1);
    public virtual void ZoomAt(double factor, double x);
    public virtual void ZoomAtCenter(double factor);
    public virtual void Include(double value);
    internal virtual void ResetDataMaxMin();
    internal virtual void UpdateActualMaxMin();
    internal virtual void UpdateIntervals(OxyRect plotArea);
    internal virtual void UpdateTransform(OxyRect bounds);
    protected virtual void ActualMaximumAndMinimumChangedOverride();
    protected virtual string GetDefaultStringFormat();
    protected virtual double PostInverseTransform(double x);
    protected virtual double PreTransform(double x);
    protected virtual double CalculateMinorInterval(double majorInterval);
    protected virtual IList`1<double> CreateTickValues(double from, double to, double step, int maxTicks);
    protected virtual void CoerceActualMaxMin();
    protected virtual string FormatValueOverride(double x);
    protected virtual double CalculateActualMaximum();
    protected virtual double CalculateActualMinimum();
    protected void SetTransform(double newScale, double newOffset);
    protected virtual double CalculateActualInterval(double availableSize, double maxIntervalSize, double minIntervalCount, double maxIntervalCount);
    protected double CalculateActualInterval(double availableSize, double maxIntervalSize, double range, double minIntervalCount, double maxIntervalCount);
    protected virtual void OnAxisChanged(AxisChangedEventArgs args);
    protected virtual void OnTransformChanged(EventArgs args);
}
public class OxyPlot.Axes.AxisChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AxisChangeTypes <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaMaximum>k__BackingField;
    public AxisChangeTypes ChangeType { get; private set; }
    public double DeltaMinimum { get; private set; }
    public double DeltaMaximum { get; private set; }
    public AxisChangedEventArgs(AxisChangeTypes changeType, double deltaMinimum, double deltaMaximum);
    [CompilerGeneratedAttribute]
public AxisChangeTypes get_ChangeType();
    [CompilerGeneratedAttribute]
private void set_ChangeType(AxisChangeTypes value);
    [CompilerGeneratedAttribute]
public double get_DeltaMinimum();
    [CompilerGeneratedAttribute]
private void set_DeltaMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaMaximum();
    [CompilerGeneratedAttribute]
private void set_DeltaMaximum(double value);
}
public enum OxyPlot.Axes.AxisChangeTypes : Enum {
    public int value__;
    public static AxisChangeTypes Zoom;
    public static AxisChangeTypes Pan;
    public static AxisChangeTypes Reset;
}
public enum OxyPlot.Axes.AxisLayer : Enum {
    public int value__;
    public static AxisLayer BelowSeries;
    public static AxisLayer AboveSeries;
}
public enum OxyPlot.Axes.AxisPosition : Enum {
    public int value__;
    public static AxisPosition None;
    public static AxisPosition Left;
    public static AxisPosition Right;
    public static AxisPosition Top;
    public static AxisPosition Bottom;
    public static AxisPosition All;
}
public abstract class OxyPlot.Axes.AxisRendererBase`1 : object {
    private PlotModel plot;
    private IRenderContext rc;
    private IList`1<double> majorLabelValues;
    private IList`1<double> majorTickValues;
    private IList`1<double> minorTickValues;
    [CompilerGeneratedAttribute]
private OxyPen <AxislinePen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <ExtraPen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <MajorPen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <MajorTickPen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <MinorPen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <MinorTickPen>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPen <ZeroPen>k__BackingField;
    protected PlotModel Plot { get; }
    protected IRenderContext RenderContext { get; }
    protected OxyPen AxislinePen { get; protected set; }
    protected OxyPen ExtraPen { get; protected set; }
    protected IList`1<double> MajorLabelValues { get; protected set; }
    protected OxyPen MajorPen { get; protected set; }
    protected OxyPen MajorTickPen { get; protected set; }
    protected IList`1<double> MajorTickValues { get; protected set; }
    protected OxyPen MinorPen { get; protected set; }
    protected OxyPen MinorTickPen { get; protected set; }
    protected IList`1<double> MinorTickValues { get; protected set; }
    protected OxyPen ZeroPen { get; protected set; }
    protected AxisRendererBase`1(IRenderContext rc, PlotModel plot);
    protected PlotModel get_Plot();
    protected IRenderContext get_RenderContext();
    [CompilerGeneratedAttribute]
protected OxyPen get_AxislinePen();
    [CompilerGeneratedAttribute]
protected void set_AxislinePen(OxyPen value);
    [CompilerGeneratedAttribute]
protected OxyPen get_ExtraPen();
    [CompilerGeneratedAttribute]
protected void set_ExtraPen(OxyPen value);
    protected IList`1<double> get_MajorLabelValues();
    protected void set_MajorLabelValues(IList`1<double> value);
    [CompilerGeneratedAttribute]
protected OxyPen get_MajorPen();
    [CompilerGeneratedAttribute]
protected void set_MajorPen(OxyPen value);
    [CompilerGeneratedAttribute]
protected OxyPen get_MajorTickPen();
    [CompilerGeneratedAttribute]
protected void set_MajorTickPen(OxyPen value);
    protected IList`1<double> get_MajorTickValues();
    protected void set_MajorTickValues(IList`1<double> value);
    [CompilerGeneratedAttribute]
protected OxyPen get_MinorPen();
    [CompilerGeneratedAttribute]
protected void set_MinorPen(OxyPen value);
    [CompilerGeneratedAttribute]
protected OxyPen get_MinorTickPen();
    [CompilerGeneratedAttribute]
protected void set_MinorTickPen(OxyPen value);
    protected IList`1<double> get_MinorTickValues();
    protected void set_MinorTickValues(IList`1<double> value);
    [CompilerGeneratedAttribute]
protected OxyPen get_ZeroPen();
    [CompilerGeneratedAttribute]
protected void set_ZeroPen(OxyPen value);
    public virtual void Render(T axis, int pass);
    protected virtual void CreatePens(T axis);
    protected virtual void GetTickPositions(T axis, TickStyle tickStyle, double tickSize, AxisPosition position, Double& x0, Double& x1);
    protected bool IsWithin(double d, double min, double max);
}
public static class OxyPlot.Axes.AxisUtilities : object {
    public static double CalculateMinorInterval(double majorInterval);
    public static IList`1<double> CreateTickValues(double from, double to, double step, int maxTicks);
    public static IList`1<double> FilterRedundantMinorTicks(IList`1<double> majorTicks, IList`1<double> minorTicks);
    [CompilerGeneratedAttribute]
internal static double <FilterRedundantMinorTicks>g__GetEpsilon|2_0(double tick1, double tick2);
}
public class OxyPlot.Axes.CategoryAxis : LinearAxis {
    private List`1<string> autoGeneratedLabels;
    private List`1<string> itemsSourceLabels;
    [CompilerGeneratedAttribute]
private double <GapWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTickCentered>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <ItemsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelField>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Labels>k__BackingField;
    public IList`1<string> ActualLabels { get; }
    public double GapWidth { get; public set; }
    public bool IsTickCentered { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public string LabelField { get; public set; }
    public List`1<string> Labels { get; }
    public IList`1<string> get_ActualLabels();
    [CompilerGeneratedAttribute]
public double get_GapWidth();
    [CompilerGeneratedAttribute]
public void set_GapWidth(double value);
    [CompilerGeneratedAttribute]
public bool get_IsTickCentered();
    [CompilerGeneratedAttribute]
public void set_IsTickCentered(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable get_ItemsSource();
    [CompilerGeneratedAttribute]
public void set_ItemsSource(IEnumerable value);
    [CompilerGeneratedAttribute]
public string get_LabelField();
    [CompilerGeneratedAttribute]
public void set_LabelField(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Labels();
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    public virtual object GetValue(double x);
    internal virtual void UpdateActualMaxMin();
    protected internal void UpdateLabels(int numberOfCategories);
    protected virtual string FormatValueOverride(double x);
    [CompilerGeneratedAttribute]
private bool <GetTickValues>b__24_1(double v);
}
public class OxyPlot.Axes.CategoryColorAxis : CategoryAxis {
    [CompilerGeneratedAttribute]
private OxyColor <InvalidCategoryColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPalette <Palette>k__BackingField;
    public OxyColor InvalidCategoryColor { get; public set; }
    public OxyPalette Palette { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_InvalidCategoryColor();
    [CompilerGeneratedAttribute]
public void set_InvalidCategoryColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyPalette get_Palette();
    [CompilerGeneratedAttribute]
public void set_Palette(OxyPalette value);
    public sealed virtual OxyColor GetColor(int paletteIndex);
    public sealed virtual int GetPaletteIndex(double value);
    public virtual void Render(IRenderContext rc, int pass);
    protected internal double GetHighValue(int paletteIndex, IList`1<double> majorLabelValues);
    protected internal double GetLowValue(int paletteIndex, IList`1<double> majorLabelValues);
}
[ExtensionAttribute]
public static class OxyPlot.Axes.ColorAxisExtensions : object {
    [ExtensionAttribute]
public static OxyColor GetColor(IColorAxis axis, double value);
    [ExtensionAttribute]
public static double GetHighValue(T axis, int paletteIndex);
    [ExtensionAttribute]
public static double GetLowValue(T axis, int paletteIndex);
    [ExtensionAttribute]
public static OxyColor GetColor(T axis, int paletteIndex);
}
public class OxyPlot.Axes.DateTimeAxis : LinearAxis {
    public static TimeSpan DefaultPrecision;
    private static DateTime TimeOrigin;
    private static double MaxDayValue;
    private static double MinDayValue;
    private DateTimeIntervalType actualIntervalType;
    private DateTimeIntervalType actualMinorIntervalType;
    [CompilerGeneratedAttribute]
private CalendarWeekRule <CalendarWeekRule>k__BackingField;
    [CompilerGeneratedAttribute]
private DayOfWeek <FirstDayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeIntervalType <IntervalType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeIntervalType <MinorIntervalType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DateTimePrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    public CalendarWeekRule CalendarWeekRule { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public DateTimeIntervalType IntervalType { get; public set; }
    public DateTimeIntervalType MinorIntervalType { get; public set; }
    public TimeSpan DateTimePrecision { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    private static DateTimeAxis();
    [CompilerGeneratedAttribute]
public CalendarWeekRule get_CalendarWeekRule();
    [CompilerGeneratedAttribute]
public void set_CalendarWeekRule(CalendarWeekRule value);
    [CompilerGeneratedAttribute]
public DayOfWeek get_FirstDayOfWeek();
    [CompilerGeneratedAttribute]
public void set_FirstDayOfWeek(DayOfWeek value);
    [CompilerGeneratedAttribute]
public DateTimeIntervalType get_IntervalType();
    [CompilerGeneratedAttribute]
public void set_IntervalType(DateTimeIntervalType value);
    [CompilerGeneratedAttribute]
public DateTimeIntervalType get_MinorIntervalType();
    [CompilerGeneratedAttribute]
public void set_MinorIntervalType(DateTimeIntervalType value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DateTimePrecision();
    [CompilerGeneratedAttribute]
public void set_DateTimePrecision(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    public static DataPoint CreateDataPoint(DateTime x, double y);
    public static DataPoint CreateDataPoint(DateTime x, DateTime y);
    public static DataPoint CreateDataPoint(double x, DateTime y);
    [ObsoleteAttribute("Use ConvertToDateTime(double value) or ToDateTime(double value, TimeSpan precision) instead.")]
public static DateTime ToDateTime(double value);
    public static DateTime ToDateTime(double value, TimeSpan precision);
    public static double ToDouble(DateTime value);
    public DateTime ConvertToDateTime(double value);
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    public virtual object GetValue(double x);
    internal virtual void UpdateIntervals(OxyRect plotArea);
    protected virtual string GetDefaultStringFormat();
    protected virtual string FormatValueOverride(double x);
    protected virtual double CalculateActualInterval(double availableSize, double maxIntervalSize, double minIntervalCount, double maxIntervalCount);
    private IList`1<double> CreateDateTickValues(double min, double max, double step, DateTimeIntervalType intervalType);
    private IList`1<double> CreateDateTimeTickValues(double min, double max, double interval, DateTimeIntervalType intervalType);
    private int GetWeek(DateTime date);
}
public enum OxyPlot.Axes.DateTimeIntervalType : Enum {
    public int value__;
    public static DateTimeIntervalType Auto;
    public static DateTimeIntervalType Manual;
    public static DateTimeIntervalType Milliseconds;
    public static DateTimeIntervalType Seconds;
    public static DateTimeIntervalType Minutes;
    public static DateTimeIntervalType Hours;
    public static DateTimeIntervalType Days;
    public static DateTimeIntervalType Weeks;
    public static DateTimeIntervalType Months;
    public static DateTimeIntervalType Years;
}
public class OxyPlot.Axes.HorizontalAndVerticalAxisRenderer : HorizontalAndVerticalAxisRenderer`1<Axis> {
    public HorizontalAndVerticalAxisRenderer(IRenderContext rc, PlotModel plot);
}
public abstract class OxyPlot.Axes.HorizontalAndVerticalAxisRenderer`1 : AxisRendererBase`1<T> {
    protected HorizontalAndVerticalAxisRenderer`1(IRenderContext rc, PlotModel plot);
    public virtual void Render(T axis, int pass);
    protected static double Lerp(double x0, double x1, double f);
    protected static void SnapTo(double target, Double& v, double eps);
    protected virtual ScreenPoint GetAxisTitlePositionAndAlignment(T axis, double titlePosition, Double& angle, HorizontalAlignment& halign, VerticalAlignment& valign);
    protected virtual void RenderAxisTitle(T axis, double titlePosition);
    protected virtual void RenderMajorItems(T axis, double axisPosition, double titlePosition, bool drawAxisLine);
    protected virtual void RenderMinorItems(T axis, double axisPosition);
    private void AddSegments(List`1<ScreenPoint> segments, List`1<Axis> perpAxes, bool isHorizontal, bool cropGridlines, double transformedValue, double plotAreaLeft, double plotAreaRight, double plotAreaTop, double plotAreaBottom);
    private void GetRotatedAlignments(double boxAngle, double axisAngle, HorizontalAlignment& ha, VerticalAlignment& va);
}
public interface OxyPlot.Axes.IColorAxis {
    public abstract virtual OxyColor GetColor(int paletteIndex);
    public abstract virtual int GetPaletteIndex(double value);
}
public interface OxyPlot.Axes.INumericColorAxis {
    public OxyPalette Palette { get; public set; }
    public OxyColor HighColor { get; public set; }
    public OxyColor LowColor { get; public set; }
    public OxyColor InvalidNumberColor { get; public set; }
    public bool RenderAsImage { get; public set; }
    public abstract virtual OxyPalette get_Palette();
    public abstract virtual void set_Palette(OxyPalette value);
    public abstract virtual OxyColor get_HighColor();
    public abstract virtual void set_HighColor(OxyColor value);
    public abstract virtual OxyColor get_LowColor();
    public abstract virtual void set_LowColor(OxyColor value);
    public abstract virtual OxyColor get_InvalidNumberColor();
    public abstract virtual void set_InvalidNumberColor(OxyColor value);
    public abstract virtual bool get_RenderAsImage();
    public abstract virtual void set_RenderAsImage(bool value);
}
public class OxyPlot.Axes.LinearAxis : Axis {
    [CompilerGeneratedAttribute]
private bool <FormatAsFractions>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FractionUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FractionUnitSymbol>k__BackingField;
    public bool FormatAsFractions { get; public set; }
    public double FractionUnit { get; public set; }
    public string FractionUnitSymbol { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FormatAsFractions();
    [CompilerGeneratedAttribute]
public void set_FormatAsFractions(bool value);
    [CompilerGeneratedAttribute]
public double get_FractionUnit();
    [CompilerGeneratedAttribute]
public void set_FractionUnit(double value);
    [CompilerGeneratedAttribute]
public string get_FractionUnitSymbol();
    [CompilerGeneratedAttribute]
public void set_FractionUnitSymbol(string value);
    public virtual bool IsXyAxis();
    public virtual bool IsLogarithmic();
    protected virtual string FormatValueOverride(double x);
}
public class OxyPlot.Axes.LinearColorAxis : LinearAxis {
    [CompilerGeneratedAttribute]
private OxyColor <InvalidNumberColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <HighColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LowColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPalette <Palette>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderAsImage>k__BackingField;
    public OxyColor InvalidNumberColor { get; public set; }
    public OxyColor HighColor { get; public set; }
    public OxyColor LowColor { get; public set; }
    public OxyPalette Palette { get; public set; }
    public bool RenderAsImage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_InvalidNumberColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InvalidNumberColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_HighColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_LowColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyPalette get_Palette();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Palette(OxyPalette value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RenderAsImage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderAsImage(bool value);
    public virtual bool IsXyAxis();
    public virtual void Render(IRenderContext rc, int pass);
    private sealed virtual override OxyColor OxyPlot.Axes.IColorAxis.GetColor(int paletteIndex);
    public sealed virtual int GetPaletteIndex(double value);
}
public class OxyPlot.Axes.LogarithmicAxis : Axis {
    public static double LowestValidRoundtripValue;
    [CompilerGeneratedAttribute]
private double <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PowerPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogActualMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogActualMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogClipMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LogClipMinimum>k__BackingField;
    public double Base { get; public set; }
    public bool PowerPadding { get; public set; }
    protected double LogActualMaximum { get; protected set; }
    protected double LogActualMinimum { get; protected set; }
    protected double LogClipMaximum { get; protected set; }
    protected double LogClipMinimum { get; protected set; }
    private static LogarithmicAxis();
    [CompilerGeneratedAttribute]
public double get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(double value);
    [CompilerGeneratedAttribute]
public bool get_PowerPadding();
    [CompilerGeneratedAttribute]
public void set_PowerPadding(bool value);
    [CompilerGeneratedAttribute]
protected double get_LogActualMaximum();
    [CompilerGeneratedAttribute]
protected void set_LogActualMaximum(double value);
    [CompilerGeneratedAttribute]
protected double get_LogActualMinimum();
    [CompilerGeneratedAttribute]
protected void set_LogActualMinimum(double value);
    [CompilerGeneratedAttribute]
protected double get_LogClipMaximum();
    [CompilerGeneratedAttribute]
protected void set_LogClipMaximum(double value);
    [CompilerGeneratedAttribute]
protected double get_LogClipMinimum();
    [CompilerGeneratedAttribute]
protected void set_LogClipMinimum(double value);
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    public virtual bool IsXyAxis();
    public virtual bool IsLogarithmic();
    public virtual void Pan(ScreenPoint ppt, ScreenPoint cpt);
    public virtual double InverseTransform(double sx);
    public virtual double Transform(double x);
    public virtual void ZoomAt(double factor, double x);
    internal IList`1<double> PowList(IList`1<double> logInput, bool clip);
    internal IList`1<double> LogList(IList`1<double> input, bool clip);
    internal IList`1<double> DecadeTicks(double step);
    internal IList`1<double> LogDecadeTicks(double step);
    internal IList`1<double> LogSubdividedDecadeTicks(bool clip);
    internal IList`1<double> SubdividedDecadeTicks(bool clip);
    internal IList`1<double> AlignTicksToCandidates(IList`1<double> logCandidates, double logDesiredStepSize);
    internal IList`1<double> LogAlignTicksToCandidates(IList`1<double> logCandidates, double logDesiredStepSize);
    internal IList`1<double> LogCalculateMinorCandidates(IList`1<double> logMajorCandidates, double logDesiredMajorStepSize);
    internal void LogSubdivideInterval(IList`1<double> logTicks, double steps, double logFrom, double logTo);
    internal virtual void UpdateActualMaxMin();
    protected virtual void ActualMaximumAndMinimumChangedOverride();
    protected virtual double PostInverseTransform(double x);
    protected virtual double PreTransform(double x);
    protected virtual void CoerceActualMaxMin();
    protected virtual double CalculateActualMaximum();
    protected virtual double CalculateActualMinimum();
}
public class OxyPlot.Axes.LogarithmicColorAxis : LogarithmicAxis {
    [CompilerGeneratedAttribute]
private OxyColor <InvalidNumberColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <HighColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LowColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyPalette <Palette>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderAsImage>k__BackingField;
    public OxyColor InvalidNumberColor { get; public set; }
    public OxyColor HighColor { get; public set; }
    public OxyColor LowColor { get; public set; }
    public OxyPalette Palette { get; public set; }
    public bool RenderAsImage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_InvalidNumberColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InvalidNumberColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_HighColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_LowColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyPalette get_Palette();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Palette(OxyPalette value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RenderAsImage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderAsImage(bool value);
    public virtual bool IsXyAxis();
    public virtual void Render(IRenderContext rc, int pass);
    private sealed virtual override OxyColor OxyPlot.Axes.IColorAxis.GetColor(int paletteIndex);
    public sealed virtual int GetPaletteIndex(double value);
}
public class OxyPlot.Axes.MagnitudeAxis : LinearAxis {
    [CompilerGeneratedAttribute]
private ScreenPoint <MidPoint>k__BackingField;
    internal ScreenPoint MidPoint { get; internal set; }
    [CompilerGeneratedAttribute]
internal ScreenPoint get_MidPoint();
    [CompilerGeneratedAttribute]
internal void set_MidPoint(ScreenPoint value);
    public virtual DataPoint InverseTransform(double x, double y, Axis yaxis);
    public virtual bool IsXyAxis();
    public virtual void Render(IRenderContext rc, int pass);
    public virtual ScreenPoint Transform(double x, double y, Axis yaxis);
    internal virtual void UpdateTransform(OxyRect bounds);
}
public class OxyPlot.Axes.MagnitudeAxisFullPlotArea : MagnitudeAxis {
    private double _midshiftH;
    private double _midshiftV;
    public double MidshiftH { get; public set; }
    public double MidshiftV { get; public set; }
    public double get_MidshiftH();
    public void set_MidshiftH(double value);
    public double get_MidshiftV();
    public void set_MidshiftV(double value);
    public virtual void Render(IRenderContext rc, int pass);
    public virtual void GetTickValues(IList`1& majorLabelValues, IList`1& majorTickValues, IList`1& minorTickValues);
    internal virtual void UpdateTransform(OxyRect bounds);
    public virtual void Pan(ScreenPoint ppt, ScreenPoint cpt);
    public virtual void ZoomAt(double factor, double x);
}
public class OxyPlot.Axes.MagnitudeAxisFullPlotAreaRenderer : AxisRendererBase`1<MagnitudeAxisFullPlotArea> {
    private static double degree;
    private static double rad;
    private static double MaxSegments;
    public MagnitudeAxisFullPlotAreaRenderer(IRenderContext rc, PlotModel plot);
    public virtual void Render(MagnitudeAxisFullPlotArea axis, int pass);
    private static double GetActualAngle(MagnitudeAxisFullPlotArea axis, Axis angleAxis);
    private static void GetTickTextAligment(double actualAngle, HorizontalAlignment& ha, VerticalAlignment& va);
    private void RenderTickArc(MagnitudeAxisFullPlotArea axis, AngleAxis angleAxis, double x, OxyPen pen, double startAngle, double endAngle);
    private void RenderTickText(MagnitudeAxisFullPlotArea axis, double x, Axis angleAxis);
}
public class OxyPlot.Axes.MagnitudeAxisRenderer : AxisRendererBase`1<MagnitudeAxis> {
    public MagnitudeAxisRenderer(IRenderContext rc, PlotModel plot);
    public virtual void Render(MagnitudeAxis axis, int pass);
    private static double GetActualAngle(Axis axis, Axis angleAxis);
    private static void GetTickTextAligment(double actualAngle, HorizontalAlignment& ha, VerticalAlignment& va);
    private void RenderTick(MagnitudeAxis axis, AngleAxis angleAxis, double x, OxyPen pen);
    private void RenderTickCircle(MagnitudeAxis axis, Axis angleAxis, double x, OxyPen pen);
    private void RenderTickArc(MagnitudeAxis axis, AngleAxis angleAxis, double x, OxyPen pen);
    private void RenderTickText(MagnitudeAxis axis, double x, Axis angleAxis);
}
public class OxyPlot.Axes.RangeColorAxis : LinearAxis {
    internal List`1<ColorRange> ranges;
    [CompilerGeneratedAttribute]
private OxyColor <InvalidNumberColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <HighColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LowColor>k__BackingField;
    public OxyColor InvalidNumberColor { get; public set; }
    public OxyColor HighColor { get; public set; }
    public OxyColor LowColor { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_InvalidNumberColor();
    [CompilerGeneratedAttribute]
public void set_InvalidNumberColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_HighColor();
    [CompilerGeneratedAttribute]
public void set_HighColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_LowColor();
    [CompilerGeneratedAttribute]
public void set_LowColor(OxyColor value);
    public void AddRange(double lowerBound, double upperBound, OxyColor color);
    public void ClearRanges();
    public sealed virtual int GetPaletteIndex(double value);
    public sealed virtual OxyColor GetColor(int paletteIndex);
    public virtual void Render(IRenderContext rc, int pass);
}
public class OxyPlot.Axes.Rendering.CategoryColorAxisRenderer : ColorAxisRenderer`1<CategoryColorAxis> {
    public CategoryColorAxisRenderer(IRenderContext rc, PlotModel plot);
    protected virtual void RenderColorBlock(CategoryColorAxis axis);
}
public abstract class OxyPlot.Axes.Rendering.ColorAxisRenderer`1 : HorizontalAndVerticalAxisRenderer`1<T> {
    protected double left;
    protected double top;
    protected double size;
    protected double minScreenPosition;
    protected double maxScreenPosition;
    public ColorAxisRenderer`1(IRenderContext rc, PlotModel plot);
    protected virtual void InitPosition(T axis);
    public virtual void Render(T axis, int pass);
    protected abstract virtual void RenderColorBlock(T axis);
    protected void DrawColorRect(T axis, double ylow, double yhigh, OxyColor color);
}
public class OxyPlot.Axes.Rendering.NumericColorAxisRenderer`1 : ColorAxisRenderer`1<T> {
    public NumericColorAxisRenderer`1(IRenderContext rc, PlotModel plot);
    protected virtual void RenderColorBlock(T axis);
    private OxyImage GenerateColorAxisImage(T axis, bool reverse);
    private double Transform(T axis, double value);
}
public class OxyPlot.Axes.Rendering.RangeColorAxisRenderer : ColorAxisRenderer`1<RangeColorAxis> {
    public RangeColorAxisRenderer(IRenderContext rc, PlotModel plot);
    protected virtual void RenderColorBlock(RangeColorAxis axis);
}
public enum OxyPlot.Axes.TickStyle : Enum {
    public int value__;
    public static TickStyle Crossing;
    public static TickStyle Inside;
    public static TickStyle Outside;
    public static TickStyle None;
}
public class OxyPlot.Axes.TimeSpanAxis : LinearAxis {
    public static double ToDouble(TimeSpan s);
    public static TimeSpan ToTimeSpan(double value);
    public virtual object GetValue(double x);
    protected virtual string GetDefaultStringFormat();
    protected virtual string FormatValueOverride(double x);
    protected virtual double CalculateActualInterval(double availableSize, double maxIntervalSize, double minIntervalCount, double maxIntervalCount);
}
public enum OxyPlot.AxisPreference : Enum {
    public int value__;
    public static AxisPreference None;
    public static AxisPreference X;
    public static AxisPreference Y;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadString(BinaryReader r, int length, Encoding encoding);
    [ExtensionAttribute]
public static UInt32 ReadUInt32(BinaryReader r, bool isLittleEndian);
    [ExtensionAttribute]
public static int ReadInt32(BinaryReader r, bool isLittleEndian);
    [ExtensionAttribute]
public static ushort ReadUInt16(BinaryReader r, bool isLittleEndian);
    [ExtensionAttribute]
public static double ReadDouble(BinaryReader r, bool isLittleEndian);
    [ExtensionAttribute]
public static UInt32[] ReadUInt32Array(BinaryReader r, int count, bool isLittleEndian);
    [ExtensionAttribute]
public static UInt16[] ReadUInt16Array(BinaryReader r, int count, bool isLittleEndian);
    [ExtensionAttribute]
public static UInt32 ReadBigEndianUInt32(BinaryReader r);
    [ExtensionAttribute]
public static int ReadBigEndianInt32(BinaryReader r);
    [ExtensionAttribute]
public static ushort ReadBigEndianUInt16(BinaryReader r);
    [ExtensionAttribute]
public static double ReadBigEndianDouble(BinaryReader r);
}
public enum OxyPlot.BinningExtremeValueMode : Enum {
    public int value__;
    public static BinningExtremeValueMode ExcludeExtremeValues;
    public static BinningExtremeValueMode IncludeExtremeValues;
}
public enum OxyPlot.BinningIntervalType : Enum {
    public int value__;
    public static BinningIntervalType InclusiveLowerBound;
    public static BinningIntervalType InclusiveUpperBound;
}
public class OxyPlot.BinningOptions : object {
    [CompilerGeneratedAttribute]
private BinningOutlierMode <OutlierMode>k__BackingField;
    [CompilerGeneratedAttribute]
private BinningIntervalType <IntervalType>k__BackingField;
    [CompilerGeneratedAttribute]
private BinningExtremeValueMode <ExtremeValuesMode>k__BackingField;
    public BinningOutlierMode OutlierMode { get; }
    public BinningIntervalType IntervalType { get; }
    public BinningExtremeValueMode ExtremeValuesMode { get; }
    public BinningOptions(BinningOutlierMode outlierMode, BinningIntervalType intervalType, BinningExtremeValueMode extremeValuesMode);
    [CompilerGeneratedAttribute]
public BinningOutlierMode get_OutlierMode();
    [CompilerGeneratedAttribute]
public BinningIntervalType get_IntervalType();
    [CompilerGeneratedAttribute]
public BinningExtremeValueMode get_ExtremeValuesMode();
}
public enum OxyPlot.BinningOutlierMode : Enum {
    public int value__;
    public static BinningOutlierMode RejectOutliers;
    public static BinningOutlierMode IgnoreOutliers;
    public static BinningOutlierMode CountOutliers;
}
public abstract class OxyPlot.BitReader : object {
    public abstract virtual int Read();
    public abstract virtual int ReadNoEof();
    public abstract virtual void Close();
    public abstract virtual int GetBitPosition();
    public abstract virtual int ReadByte();
    public int ReadBits(int bits);
}
public class OxyPlot.BmpDecoder : object {
    public sealed virtual OxyImageInfo GetImageInfo(Byte[] bytes);
    public sealed virtual OxyColor[0...,0...] Decode(Byte[] bytes);
}
public class OxyPlot.BmpEncoder : object {
    private BmpEncoderOptions options;
    public BmpEncoder(BmpEncoderOptions options);
    public sealed virtual Byte[] Encode(OxyColor[0...,0...] pixels);
    public sealed virtual Byte[] Encode(Byte[0...,0...] pixels, OxyColor[] palette);
    private static void WriteBitmapInfoHeader(BinaryWriter w, int width, int height, int bitsPerPixel, int length, double dpix, double dpiy, int colors);
    private static void WriteBitmapV4Header(BinaryWriter w, int width, int height, int bitsPerPixel, int length, int dpi, int colors);
}
public class OxyPlot.BmpEncoderOptions : ImageEncoderOptions {
}
public class OxyPlot.ByteBitReader : BitReader {
    private BinaryReader input;
    private int bitPosition;
    private bool disposed;
    private bool isEndOfStream;
    private int nextBits;
    public ByteBitReader(Stream s);
    public sealed virtual void Dispose();
    public virtual int Read();
    public virtual int ReadNoEof();
    public virtual int GetBitPosition();
    public virtual int ReadByte();
    public virtual void Close();
    private void Dispose(bool disposing);
}
internal class OxyPlot.CanonicalCode : object {
    private Int32[] codeLengths;
    public CanonicalCode(Int32[] codeLengths);
    public CanonicalCode(CodeTree tree, int symbolLimit);
    public int GetSymbolLimit();
    public int GetCodeLength(int symbol);
    public CodeTree ToCodeTree();
    private void BuildCodeLengths(Node node, int depth);
}
public class OxyPlot.CanonicalSpline : object {
    [CompilerGeneratedAttribute]
private double <Tension>k__BackingField;
    public double Tension { get; }
    public CanonicalSpline(double tension);
    [CompilerGeneratedAttribute]
public double get_Tension();
    public sealed virtual List`1<DataPoint> CreateSpline(List`1<DataPoint> points, bool isClosed, double tolerance);
    public sealed virtual List`1<ScreenPoint> CreateSpline(IList`1<ScreenPoint> points, bool isClosed, double tolerance);
    internal static List`1<DataPoint> CreateSpline(List`1<DataPoint> points, double tension, IList`1<double> tensions, bool isClosed, double tolerance);
    internal static List`1<ScreenPoint> CreateSpline(IList`1<ScreenPoint> points, double tension, IList`1<double> tensions, bool isClosed, double tolerance);
    private static void Segment(IList`1<ScreenPoint> points, ScreenPoint pt0, ScreenPoint pt1, ScreenPoint pt2, ScreenPoint pt3, double t1, double t2, double tolerance, int maxSegments);
}
public class OxyPlot.CatmullRomSpline : object {
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSegments>k__BackingField;
    public double Alpha { get; }
    public int MaxSegments { get; public set; }
    public CatmullRomSpline(double alpha);
    [CompilerGeneratedAttribute]
public double get_Alpha();
    [CompilerGeneratedAttribute]
public int get_MaxSegments();
    [CompilerGeneratedAttribute]
public void set_MaxSegments(int value);
    public sealed virtual List`1<DataPoint> CreateSpline(List`1<DataPoint> points, bool isClosed, double tolerance);
    public sealed virtual List`1<ScreenPoint> CreateSpline(IList`1<ScreenPoint> points, bool isClosed, double tolerance);
    internal static List`1<DataPoint> CreateSpline(List`1<DataPoint> points, double alpha, bool isClosed, double tolerance, int maxSegments);
    internal static List`1<ScreenPoint> CreateSpline(IList`1<ScreenPoint> points, double alpha, bool isClosed, double tolerance, int maxSegments);
    private static void Segment(IList`1<ScreenPoint> points, ScreenPoint pt0, ScreenPoint pt1, ScreenPoint pt2, ScreenPoint pt3, double alpha, double tolerance, int maxSegments);
    private static double GetT(double t, ScreenPoint p0, ScreenPoint p1, double alpha);
    private static ScreenPoint Mult(double d, ScreenPoint s);
    private static bool Equals(ScreenPoint a, ScreenPoint b);
    private static ScreenPoint Prev(ScreenPoint s0, ScreenPoint s1);
    private static ScreenPoint Sum(ScreenPoint a, ScreenPoint b);
}
internal class OxyPlot.CircularDictionary : object {
    private Byte[] data;
    private int mask;
    private int index;
    public CircularDictionary(int size);
    public void Append(int b);
    public void Copy(int dist, int len, BinaryWriter w);
}
public abstract class OxyPlot.ClippingRenderContext : RenderContextBase {
    private Stack`1<OxyRect> clipStack;
    public int ClipCount { get; }
    public sealed virtual void PopClip();
    public sealed virtual void PushClip(OxyRect clippingRectangle);
    public sealed virtual int get_ClipCount();
    protected abstract virtual void ResetClip();
    protected abstract virtual void SetClip(OxyRect clippingRectangle);
}
[AttributeUsageAttribute("128")]
public class OxyPlot.CodeGenerationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <GenerateCode>k__BackingField;
    public bool GenerateCode { get; public set; }
    public CodeGenerationAttribute(bool generateCode);
    [CompilerGeneratedAttribute]
public bool get_GenerateCode();
    [CompilerGeneratedAttribute]
public void set_GenerateCode(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.CodeGenerator : object {
    private StringBuilder sb;
    private Dictionary`2<string, bool> variables;
    private string indentString;
    private int indents;
    private int Indents { get; private set; }
    public CodeGenerator(PlotModel model);
    private int get_Indents();
    private void set_Indents(int value);
    public static string FormatCode(string format, Object[] values);
    public static string FormatConstructor(Type type, string format, Object[] values);
    public string ToCode();
    private string Add(object obj);
    private void AddChildren(string name, string collectionName, IEnumerable children);
    private void AddItems(string name, IList list);
    private void AddArray(string name, Array array);
    private void AppendLine(string format, Object[] args);
    [NullableContextAttribute("2")]
private bool AreListsEqual(IList list1, IList list2);
    private T GetFirstAttribute(PropertyInfo pi);
    private string GetNewVariableName(Type type);
    private string MakeValidVariableName(string title);
    private void SetProperties(object instance, string varName, object defaultValues);
    private void SetProperty(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.CodeGeneratorStringExtensions : object {
    [ExtensionAttribute]
public static string ToCode(string value);
    [ExtensionAttribute]
public static string ToCode(bool value);
    [ExtensionAttribute]
public static string ToCode(int value);
    [ExtensionAttribute]
public static string ToCode(Enum value);
    [ExtensionAttribute]
public static string ToCode(double value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToCode(object value);
}
internal class OxyPlot.CodeTree : object {
    private List`1<List`1<int>> codes;
    [CompilerGeneratedAttribute]
private InternalNode <Root>k__BackingField;
    public InternalNode Root { get; private set; }
    public CodeTree(InternalNode root, int symbolLimit);
    [CompilerGeneratedAttribute]
public InternalNode get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(InternalNode value);
    public List`1<int> GetCode(int symbol);
    public virtual string ToString();
    private static void NodeString(string prefix, Node node, StringBuilder sb);
    private void BuildCodeList(Node node, List`1<int> prefix);
}
public enum OxyPlot.ColorSpace : Enum {
    public int value__;
    public static ColorSpace DeviceRGB;
}
public enum OxyPlot.ColorType : Enum {
    public int value__;
    public static ColorType GrayScale;
    public static ColorType TrueColor;
    public static ColorType IndexedColor;
    public static ColorType GrayScaleWithAlpha;
    public static ColorType TrueColorWithAlpha;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class OxyPlot.ComparerHelper : object {
    public static IComparer`1<T> CreateComparer(Comparison`1<T> comparison);
}
public enum OxyPlot.CompressionMethod : Enum {
    public int value__;
    public static CompressionMethod Deflate;
}
public static class OxyPlot.Conrec : object {
    [NullableContextAttribute("1")]
public static void Contour(Double[0...,0...] d, Double[] x, Double[] y, Double[] z, RendererDelegate renderer);
}
public abstract class OxyPlot.ControllerBase : object {
    private object syncRoot;
    [CompilerGeneratedAttribute]
private List`1<InputCommandBinding> <InputCommandBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ManipulatorBase`1<OxyMouseEventArgs>> <MouseDownManipulators>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ManipulatorBase`1<OxyMouseEventArgs>> <MouseHoverManipulators>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ManipulatorBase`1<OxyTouchEventArgs>> <TouchManipulators>k__BackingField;
    public List`1<InputCommandBinding> InputCommandBindings { get; private set; }
    protected IList`1<ManipulatorBase`1<OxyMouseEventArgs>> MouseDownManipulators { get; private set; }
    protected IList`1<ManipulatorBase`1<OxyMouseEventArgs>> MouseHoverManipulators { get; private set; }
    protected IList`1<ManipulatorBase`1<OxyTouchEventArgs>> TouchManipulators { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<InputCommandBinding> get_InputCommandBindings();
    [CompilerGeneratedAttribute]
private void set_InputCommandBindings(List`1<InputCommandBinding> value);
    [CompilerGeneratedAttribute]
protected IList`1<ManipulatorBase`1<OxyMouseEventArgs>> get_MouseDownManipulators();
    [CompilerGeneratedAttribute]
private void set_MouseDownManipulators(IList`1<ManipulatorBase`1<OxyMouseEventArgs>> value);
    [CompilerGeneratedAttribute]
protected IList`1<ManipulatorBase`1<OxyMouseEventArgs>> get_MouseHoverManipulators();
    [CompilerGeneratedAttribute]
private void set_MouseHoverManipulators(IList`1<ManipulatorBase`1<OxyMouseEventArgs>> value);
    [CompilerGeneratedAttribute]
protected IList`1<ManipulatorBase`1<OxyTouchEventArgs>> get_TouchManipulators();
    [CompilerGeneratedAttribute]
private void set_TouchManipulators(IList`1<ManipulatorBase`1<OxyTouchEventArgs>> value);
    public virtual bool HandleGesture(IView view, OxyInputGesture gesture, OxyInputEventArgs args);
    public virtual bool HandleMouseDown(IView view, OxyMouseDownEventArgs args);
    public virtual bool HandleMouseEnter(IView view, OxyMouseEventArgs args);
    public virtual bool HandleMouseLeave(IView view, OxyMouseEventArgs args);
    public virtual bool HandleMouseMove(IView view, OxyMouseEventArgs args);
    public virtual bool HandleMouseUp(IView view, OxyMouseEventArgs args);
    public virtual bool HandleMouseWheel(IView view, OxyMouseWheelEventArgs args);
    public virtual bool HandleTouchStarted(IView view, OxyTouchEventArgs args);
    public virtual bool HandleTouchDelta(IView view, OxyTouchEventArgs args);
    public virtual bool HandleTouchCompleted(IView view, OxyTouchEventArgs args);
    public virtual bool HandleKeyDown(IView view, OxyKeyEventArgs args);
    public virtual void AddMouseManipulator(IView view, ManipulatorBase`1<OxyMouseEventArgs> manipulator, OxyMouseDownEventArgs args);
    public virtual void AddHoverManipulator(IView view, ManipulatorBase`1<OxyMouseEventArgs> manipulator, OxyMouseEventArgs args);
    public virtual void AddTouchManipulator(IView view, ManipulatorBase`1<OxyTouchEventArgs> manipulator, OxyTouchEventArgs args);
    public virtual void Bind(OxyMouseDownGesture gesture, IViewCommand`1<OxyMouseDownEventArgs> command);
    public virtual void Bind(OxyMouseEnterGesture gesture, IViewCommand`1<OxyMouseEventArgs> command);
    public virtual void Bind(OxyMouseWheelGesture gesture, IViewCommand`1<OxyMouseWheelEventArgs> command);
    public virtual void Bind(OxyTouchGesture gesture, IViewCommand`1<OxyTouchEventArgs> command);
    public virtual void Bind(OxyKeyGesture gesture, IViewCommand`1<OxyKeyEventArgs> command);
    public virtual void Unbind(OxyInputGesture gesture);
    public virtual void Unbind(IViewCommand command);
    public virtual void UnbindAll();
    protected void BindCore(OxyInputGesture gesture, IViewCommand command);
    protected virtual IViewCommand GetCommand(OxyInputGesture gesture);
    protected virtual bool HandleCommand(IViewCommand command, IView view, OxyInputEventArgs args);
    protected object GetSyncRoot(IView view);
}
[ExtensionAttribute]
public static class OxyPlot.ControllerExtensions : object {
    [ExtensionAttribute]
public static void BindKeyDown(IController controller, OxyKey key, IViewCommand`1<OxyKeyEventArgs> command);
    [ExtensionAttribute]
public static void BindKeyDown(IController controller, OxyKey key, OxyModifierKeys modifiers, IViewCommand`1<OxyKeyEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseDown(IController controller, OxyMouseButton mouseButton, IViewCommand`1<OxyMouseDownEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseDown(IController controller, OxyMouseButton mouseButton, OxyModifierKeys modifiers, IViewCommand`1<OxyMouseDownEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseDown(IController controller, OxyMouseButton mouseButton, OxyModifierKeys modifiers, int clickCount, IViewCommand`1<OxyMouseDownEventArgs> command);
    [ExtensionAttribute]
public static void BindTouchDown(IController controller, IViewCommand`1<OxyTouchEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseEnter(IController controller, IViewCommand`1<OxyMouseEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseWheel(IController controller, IViewCommand`1<OxyMouseWheelEventArgs> command);
    [ExtensionAttribute]
public static void BindMouseWheel(IController controller, OxyModifierKeys modifiers, IViewCommand`1<OxyMouseWheelEventArgs> command);
    [ExtensionAttribute]
public static void UnbindMouseDown(IController controller, OxyMouseButton mouseButton, OxyModifierKeys modifiers, int clickCount);
    [ExtensionAttribute]
public static void UnbindKeyDown(IController controller, OxyKey key, OxyModifierKeys modifiers);
    [ExtensionAttribute]
public static void UnbindMouseEnter(IController controller);
    [ExtensionAttribute]
public static void UnbindTouchDown(IController controller);
    [ExtensionAttribute]
public static void UnbindMouseWheel(IController controller);
}
public enum OxyPlot.CursorType : Enum {
    public int value__;
    public static CursorType Default;
    public static CursorType Pan;
    public static CursorType ZoomRectangle;
    public static CursorType ZoomHorizontal;
    public static CursorType ZoomVertical;
}
public class OxyPlot.DataPoint : ValueType {
    public static DataPoint Undefined;
    internal double x;
    internal double y;
    public double X { get; }
    public double Y { get; }
    public DataPoint(double x, double y);
    private static DataPoint();
    public double get_X();
    public double get_Y();
    [NullableContextAttribute("1")]
public sealed virtual string ToCode();
    public sealed virtual bool Equals(DataPoint other);
    public static DataPoint op_Addition(DataPoint p1, DataVector p2);
    public static DataVector op_Subtraction(DataPoint p1, DataPoint p2);
    public static DataPoint op_Subtraction(DataPoint point, DataVector vector);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public bool IsDefined();
}
public class OxyPlot.DataVector : ValueType {
    public static DataVector Undefined;
    internal double x;
    internal double y;
    public double Length { get; }
    public double LengthSquared { get; }
    public double X { get; }
    public double Y { get; }
    public DataVector(double x, double y);
    private static DataVector();
    public double get_Length();
    public double get_LengthSquared();
    public double get_X();
    public double get_Y();
    public static DataVector op_Multiply(DataVector v, double d);
    public static DataVector op_Addition(DataVector v, DataVector d);
    public static DataVector op_Subtraction(DataVector v, DataVector d);
    public static DataVector op_UnaryNegation(DataVector v);
    public sealed virtual string ToCode();
    public sealed virtual bool Equals(DataVector other);
    public virtual string ToString();
    public bool IsDefined();
}
public class OxyPlot.Decimator : object {
    public static void Decimate(List`1<ScreenPoint> input, List`1<ScreenPoint> output);
    private static void AddVerticalPoints(List`1<ScreenPoint> result, double x, double firstY, double lastY, double minY, double maxY);
}
public class OxyPlot.Deflate : object {
    private static CodeTree FixedLiteralLengthCode;
    private static CodeTree FixedDistanceCode;
    private CircularDictionary dictionary;
    private BitReader input;
    private BinaryWriter output;
    private MemoryStream outputStream;
    private bool disposed;
    private static Deflate();
    private Deflate(BitReader reader);
    public static Byte[] Decompress(Stream input);
    public static Byte[] Decompress(BitReader input);
    public static Byte[] Decompress(Byte[] input);
    public sealed virtual void Dispose();
    private CodeTree[] DecodeHuffmanCodes();
    private void DecompressUncompressedBlock();
    private void DecompressHuffmanBlock(CodeTree litLenCode, CodeTree distCode);
    private int DecodeSymbol(CodeTree code);
    private int DecodeRunLength(int sym);
    private int DecodeDistance(int sym);
    private void Dispose(bool disposing);
    private int ReadInt(int numBits);
}
public class OxyPlot.DelegatePlotCommand`1 : DelegateViewCommand`1<T> {
    public DelegatePlotCommand`1(Action`3<IPlotView, IController, T> handler);
}
public class OxyPlot.DelegateViewCommand`1 : object {
    private Action`3<IView, IController, T> handler;
    public DelegateViewCommand`1(Action`3<IView, IController, T> handler);
    public sealed virtual void Execute(IView view, IController controller, T args);
    public sealed virtual void Execute(IView view, IController controller, OxyInputEventArgs args);
}
public enum OxyPlot.EdgeRenderingMode : Enum {
    public int value__;
    public static EdgeRenderingMode Automatic;
    public static EdgeRenderingMode Adaptive;
    public static EdgeRenderingMode PreferSharpness;
    public static EdgeRenderingMode PreferSpeed;
    public static EdgeRenderingMode PreferGeometricAccuracy;
}
public abstract class OxyPlot.Element : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Model <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyKeyEventArgs> KeyDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseDownEventArgs> MouseDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseMove;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseUp;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchDelta;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchCompleted;
    private Selection selection;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private bool <Selectable>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionMode <SelectionMode>k__BackingField;
    [NullableAttribute("2")]
public Model Parent { get; internal set; }
    public bool Selectable { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    protected OxyColor ActualSelectedColor { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Model get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Parent(Model value);
    [NullableContextAttribute("1")]
public HitTestResult HitTest(HitTestArguments args);
    [NullableContextAttribute("1")]
protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    [CompilerGeneratedAttribute]
public void add_KeyDown(EventHandler`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_KeyDown(EventHandler`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(EventHandler`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(EventHandler`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseMove(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseMove(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseUp(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseUp(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchStarted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchStarted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchDelta(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchDelta(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchCompleted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchCompleted(EventHandler`1<OxyTouchEventArgs> value);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnMouseDown(OxyMouseDownEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnMouseMove(OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnKeyDown(OxyKeyEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnMouseUp(OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnTouchStarted(OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnTouchDelta(OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected internal virtual void OnTouchCompleted(OxyTouchEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_Selectable();
    [CompilerGeneratedAttribute]
public void set_Selectable(bool value);
    [CompilerGeneratedAttribute]
public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(SelectionMode value);
    protected OxyColor get_ActualSelectedColor();
    public bool IsSelected();
    public IEnumerable`1<int> GetSelectedItems();
    public void ClearSelection();
    public void Unselect();
    public bool IsItemSelected(int index);
    public void Select();
    public void SelectItem(int index);
    public void UnselectItem(int index);
    protected OxyColor GetSelectableColor(OxyColor originalColor, int index);
    protected OxyColor GetSelectableFillColor(OxyColor originalColor, int index);
    private void EnsureSelection();
    private void OnSelectionChanged(EventArgs args);
}
[DefaultMemberAttribute("Item")]
public class OxyPlot.ElementCollection`1 : object {
    private Model parent;
    private List`1<T> internalList;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementCollectionChangedEventArgs`1<T>> CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public ElementCollection`1(Model parent);
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(EventHandler`1<ElementCollectionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(EventHandler`1<ElementCollectionChangedEventArgs`1<T>> value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private void RaiseCollectionChanged(IEnumerable`1<T> addedItems, IEnumerable`1<T> removedItems);
}
public class OxyPlot.ElementCollectionChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private List`1<T> <AddedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<T> <RemovedItems>k__BackingField;
    public List`1<T> AddedItems { get; private set; }
    public List`1<T> RemovedItems { get; private set; }
    public ElementCollectionChangedEventArgs`1(IEnumerable`1<T> addedItems, IEnumerable`1<T> removedItems);
    [CompilerGeneratedAttribute]
public List`1<T> get_AddedItems();
    [CompilerGeneratedAttribute]
private void set_AddedItems(List`1<T> value);
    [CompilerGeneratedAttribute]
public List`1<T> get_RemovedItems();
    [CompilerGeneratedAttribute]
private void set_RemovedItems(List`1<T> value);
}
public enum OxyPlot.FilterMethod : Enum {
    public int value__;
    public static FilterMethod None;
    public static FilterMethod Sub;
    public static FilterMethod Up;
    public static FilterMethod Avg;
    public static FilterMethod Paeth;
}
public enum OxyPlot.FontEncoding : Enum {
    public int value__;
    public static FontEncoding WinAnsiEncoding;
}
public enum OxyPlot.FontSubType : Enum {
    public int value__;
    public static FontSubType Type1;
    public static FontSubType TrueType;
}
public static class OxyPlot.FontWeights : object {
    public static double Bold;
    public static double Normal;
}
public static class OxyPlot.FractionHelper : object {
    [NullableContextAttribute("2")]
public static string ConvertToFractionString(double value, double unit, string unitSymbol, double eps, IFormatProvider formatProvider, string formatString);
}
public static class OxyPlot.HashCodeBuilder : object {
    [NullableContextAttribute("1")]
public static int GetHashCode(IEnumerable`1<object> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class OxyPlot.HistogramHelpers : object {
    public static List`1<double> CreateUniformBins(double start, double end, int binCount);
    public static IList`1<HistogramItem> Collect(IEnumerable`1<double> samples, IEnumerable`1<double> binBreaks, BinningOptions binningOptions);
}
public class OxyPlot.HitTestArguments : object {
    [CompilerGeneratedAttribute]
private ScreenPoint <Point>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Tolerance>k__BackingField;
    public ScreenPoint Point { get; private set; }
    public double Tolerance { get; private set; }
    public HitTestArguments(ScreenPoint point, double tolerance);
    [CompilerGeneratedAttribute]
public ScreenPoint get_Point();
    [CompilerGeneratedAttribute]
private void set_Point(ScreenPoint value);
    [CompilerGeneratedAttribute]
public double get_Tolerance();
    [CompilerGeneratedAttribute]
private void set_Tolerance(double value);
}
public class OxyPlot.HitTestResult : object {
    [CompilerGeneratedAttribute]
private double <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint <NearestHitPoint>k__BackingField;
    public double Index { get; private set; }
    public object Item { get; private set; }
    public Element Element { get; private set; }
    public ScreenPoint NearestHitPoint { get; private set; }
    public HitTestResult(Element element, ScreenPoint nearestHitPoint, object item, double index);
    [CompilerGeneratedAttribute]
public double get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(double value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(Element value);
    [CompilerGeneratedAttribute]
public ScreenPoint get_NearestHitPoint();
    [CompilerGeneratedAttribute]
private void set_NearestHitPoint(ScreenPoint value);
}
public enum OxyPlot.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
}
[NullableContextAttribute("1")]
public interface OxyPlot.ICodeGenerating {
    public abstract virtual string ToCode();
}
public interface OxyPlot.IController {
    public abstract virtual bool HandleMouseDown(IView view, OxyMouseDownEventArgs args);
    public abstract virtual bool HandleMouseMove(IView view, OxyMouseEventArgs args);
    public abstract virtual bool HandleMouseUp(IView view, OxyMouseEventArgs args);
    public abstract virtual bool HandleMouseEnter(IView view, OxyMouseEventArgs args);
    public abstract virtual bool HandleMouseLeave(IView view, OxyMouseEventArgs args);
    public abstract virtual bool HandleMouseWheel(IView view, OxyMouseWheelEventArgs args);
    public abstract virtual bool HandleTouchStarted(IView view, OxyTouchEventArgs args);
    public abstract virtual bool HandleTouchDelta(IView view, OxyTouchEventArgs args);
    public abstract virtual bool HandleTouchCompleted(IView view, OxyTouchEventArgs args);
    public abstract virtual bool HandleKeyDown(IView view, OxyKeyEventArgs args);
    public abstract virtual bool HandleGesture(IView view, OxyInputGesture gesture, OxyInputEventArgs args);
    public abstract virtual void AddMouseManipulator(IView view, ManipulatorBase`1<OxyMouseEventArgs> manipulator, OxyMouseDownEventArgs args);
    public abstract virtual void AddHoverManipulator(IView view, ManipulatorBase`1<OxyMouseEventArgs> manipulator, OxyMouseEventArgs args);
    public abstract virtual void AddTouchManipulator(IView view, ManipulatorBase`1<OxyTouchEventArgs> manipulator, OxyTouchEventArgs args);
    public abstract virtual void Bind(OxyMouseDownGesture gesture, IViewCommand`1<OxyMouseDownEventArgs> command);
    public abstract virtual void Bind(OxyMouseEnterGesture gesture, IViewCommand`1<OxyMouseEventArgs> command);
    public abstract virtual void Bind(OxyMouseWheelGesture gesture, IViewCommand`1<OxyMouseWheelEventArgs> command);
    public abstract virtual void Bind(OxyTouchGesture gesture, IViewCommand`1<OxyTouchEventArgs> command);
    public abstract virtual void Bind(OxyKeyGesture gesture, IViewCommand`1<OxyKeyEventArgs> command);
    public abstract virtual void Unbind(OxyInputGesture gesture);
    public abstract virtual void Unbind(IViewCommand command);
    public abstract virtual void UnbindAll();
}
public interface OxyPlot.IDataPointProvider {
    public abstract virtual DataPoint GetDataPoint();
}
[NullableContextAttribute("1")]
public interface OxyPlot.IExporter {
    public abstract virtual void Export(IPlotModel model, Stream stream);
}
public interface OxyPlot.IImageDecoder {
    public abstract virtual OxyImageInfo GetImageInfo(Byte[] bytes);
    public abstract virtual OxyColor[0...,0...] Decode(Byte[] bytes);
}
public interface OxyPlot.IImageEncoder {
    public abstract virtual Byte[] Encode(OxyColor[0...,0...] pixels);
    public abstract virtual Byte[] Encode(Byte[0...,0...] pixels, OxyColor[] palette);
}
public interface OxyPlot.IInterpolationAlgorithm {
    public abstract virtual List`1<DataPoint> CreateSpline(List`1<DataPoint> points, bool isClosed, double tolerance);
    public abstract virtual List`1<ScreenPoint> CreateSpline(IList`1<ScreenPoint> points, bool isClosed, double tolerance);
}
public abstract class OxyPlot.ImageEncoderOptions : object {
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
public void set_DpiY(double value);
}
public enum OxyPlot.ImageFormat : Enum {
    public int value__;
    public static ImageFormat Png;
    public static ImageFormat Bmp;
    public static ImageFormat Jpeg;
    public static ImageFormat Unknown;
}
public class OxyPlot.InputCommandBinding : object {
    [CompilerGeneratedAttribute]
private OxyInputGesture <Gesture>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewCommand <Command>k__BackingField;
    public OxyInputGesture Gesture { get; private set; }
    public IViewCommand Command { get; private set; }
    public InputCommandBinding(OxyInputGesture gesture, IViewCommand command);
    public InputCommandBinding(OxyKey key, OxyModifierKeys modifiers, IViewCommand command);
    public InputCommandBinding(OxyMouseButton mouseButton, OxyModifierKeys modifiers, IViewCommand command);
    [CompilerGeneratedAttribute]
public OxyInputGesture get_Gesture();
    [CompilerGeneratedAttribute]
private void set_Gesture(OxyInputGesture value);
    [CompilerGeneratedAttribute]
public IViewCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(IViewCommand value);
}
public enum OxyPlot.InterlaceMethod : Enum {
    public int value__;
    public static InterlaceMethod None;
    public static InterlaceMethod Adam7;
}
internal class OxyPlot.InternalNode : Node {
    [CompilerGeneratedAttribute]
private Node <LeftChild>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <RightChild>k__BackingField;
    public Node LeftChild { get; private set; }
    public Node RightChild { get; private set; }
    public InternalNode(Node leftChild, Node rightChild);
    [CompilerGeneratedAttribute]
public Node get_LeftChild();
    [CompilerGeneratedAttribute]
private void set_LeftChild(Node value);
    [CompilerGeneratedAttribute]
public Node get_RightChild();
    [CompilerGeneratedAttribute]
private void set_RightChild(Node value);
}
public static class OxyPlot.InterpolationAlgorithms : object {
    [CompilerGeneratedAttribute]
private static IInterpolationAlgorithm <CanonicalSpline>k__BackingField;
    [CompilerGeneratedAttribute]
private static IInterpolationAlgorithm <CatmullRomSpline>k__BackingField;
    [CompilerGeneratedAttribute]
private static IInterpolationAlgorithm <UniformCatmullRomSpline>k__BackingField;
    [CompilerGeneratedAttribute]
private static IInterpolationAlgorithm <ChordalCatmullRomSpline>k__BackingField;
    public static IInterpolationAlgorithm CanonicalSpline { get; }
    public static IInterpolationAlgorithm CatmullRomSpline { get; }
    public static IInterpolationAlgorithm UniformCatmullRomSpline { get; }
    public static IInterpolationAlgorithm ChordalCatmullRomSpline { get; }
    private static InterpolationAlgorithms();
    [CompilerGeneratedAttribute]
public static IInterpolationAlgorithm get_CanonicalSpline();
    [CompilerGeneratedAttribute]
public static IInterpolationAlgorithm get_CatmullRomSpline();
    [CompilerGeneratedAttribute]
public static IInterpolationAlgorithm get_UniformCatmullRomSpline();
    [CompilerGeneratedAttribute]
public static IInterpolationAlgorithm get_ChordalCatmullRomSpline();
}
public interface OxyPlot.IPlotController {
}
public interface OxyPlot.IPlotElement {
    public abstract virtual int GetElementHashCode();
    public abstract virtual OxyRect GetClippingRect();
}
public interface OxyPlot.IPlotModel {
    public OxyColor Background { get; }
    public abstract virtual OxyColor get_Background();
    public abstract virtual void Update(bool updateData);
    public abstract virtual void Render(IRenderContext rc, OxyRect rect);
    public abstract virtual void AttachPlotView(IPlotView plotView);
}
public interface OxyPlot.IPlotView {
    public PlotModel ActualModel { get; }
    public abstract virtual PlotModel get_ActualModel();
    public abstract virtual void HideTracker();
    public abstract virtual void InvalidatePlot(bool updateData);
    public abstract virtual void ShowTracker(TrackerHitResult trackerHitResult);
    public abstract virtual void SetClipboardText(string text);
}
[NullableContextAttribute("1")]
public interface OxyPlot.IRenderContext {
    public bool RendersToScreen { get; }
    public int ClipCount { get; }
    public abstract virtual bool get_RendersToScreen();
    public abstract virtual void DrawEllipse(OxyRect extents, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawEllipses(IList`1<OxyRect> extents, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public abstract virtual void DrawLineSegments(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public abstract virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public abstract virtual void DrawPolygons(IList`1<IList`1<ScreenPoint>> polygons, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public abstract virtual void DrawRectangle(OxyRect rectangle, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawRectangles(IList`1<OxyRect> rectangles, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawText(ScreenPoint p, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotation, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, Nullable`1<OxySize> maxSize);
    public abstract virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public abstract virtual void SetToolTip(string text);
    public abstract virtual void CleanUp();
    public abstract virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    public abstract virtual void PushClip(OxyRect clippingRectangle);
    public abstract virtual void PopClip();
    public abstract virtual int get_ClipCount();
}
public interface OxyPlot.ITransposablePlotElement {
}
public interface OxyPlot.IView {
    public Model ActualModel { get; }
    public IController ActualController { get; }
    public OxyRect ClientArea { get; }
    public abstract virtual Model get_ActualModel();
    public abstract virtual IController get_ActualController();
    public abstract virtual OxyRect get_ClientArea();
    public abstract virtual void SetCursorType(CursorType cursorType);
    public abstract virtual void HideZoomRectangle();
    public abstract virtual void ShowZoomRectangle(OxyRect rectangle);
}
public interface OxyPlot.IViewCommand {
    public abstract virtual void Execute(IView view, IController controller, OxyInputEventArgs args);
}
public interface OxyPlot.IViewCommand`1 {
    public abstract virtual void Execute(IView view, IController controller, T args);
}
public interface OxyPlot.IXyAxisPlotElement {
    public Axis XAxis { get; }
    public Axis YAxis { get; }
    public abstract virtual Axis get_XAxis();
    public abstract virtual Axis get_YAxis();
    public abstract virtual ScreenPoint Transform(DataPoint p);
    public abstract virtual DataPoint InverseTransform(ScreenPoint p);
}
public class OxyPlot.JpegDecoder : object {
    public sealed virtual OxyImageInfo GetImageInfo(Byte[] bytes);
    private static object ReadValue(BinaryReader inputReader, MemoryStream ms, bool isLittleEndian, ushort fieldType, int count, long baseOffset);
    public sealed virtual OxyColor[0...,0...] Decode(Byte[] bytes);
}
internal class OxyPlot.Leaf : Node {
    [CompilerGeneratedAttribute]
private int <Symbol>k__BackingField;
    public int Symbol { get; private set; }
    public Leaf(int symbol);
    [CompilerGeneratedAttribute]
public int get_Symbol();
    [CompilerGeneratedAttribute]
private void set_Symbol(int value);
}
public class OxyPlot.Legends.Legend : LegendBase {
    private OxyRect legendBox;
    [CompilerGeneratedAttribute]
private string <GroupNameFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <GroupNameFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <GroupNameFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Series, OxyRect> <SeriesPosMap>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <SeriesInvisibleTextColor>k__BackingField;
    public string GroupNameFont { get; public set; }
    public double GroupNameFontSize { get; public set; }
    public double GroupNameFontWeight { get; public set; }
    private Dictionary`2<Series, OxyRect> SeriesPosMap { get; private set; }
    public OxyColor SeriesInvisibleTextColor { get; public set; }
    protected virtual HitTestResult LegendHitTest(HitTestArguments args);
    [CompilerGeneratedAttribute]
public string get_GroupNameFont();
    [CompilerGeneratedAttribute]
public void set_GroupNameFont(string value);
    [CompilerGeneratedAttribute]
public double get_GroupNameFontSize();
    [CompilerGeneratedAttribute]
public void set_GroupNameFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_GroupNameFontWeight();
    [CompilerGeneratedAttribute]
public void set_GroupNameFontWeight(double value);
    [CompilerGeneratedAttribute]
private Dictionary`2<Series, OxyRect> get_SeriesPosMap();
    [CompilerGeneratedAttribute]
private void set_SeriesPosMap(Dictionary`2<Series, OxyRect> value);
    [CompilerGeneratedAttribute]
public OxyColor get_SeriesInvisibleTextColor();
    [CompilerGeneratedAttribute]
public void set_SeriesInvisibleTextColor(OxyColor value);
    public bool IsPointInLegend(ScreenPoint point);
    public virtual void EnsureLegendProperties();
    public virtual void RenderLegends(IRenderContext rc);
    public virtual OxySize GetLegendSize(IRenderContext rc, OxySize availableLegendArea);
    public virtual OxyRect GetLegendRectangle(OxySize legendSize);
    private void RenderLegend(IRenderContext rc, Series s, OxyRect rect);
    private OxySize MeasureLegends(IRenderContext rc, OxySize availableSize);
    private OxySize RenderOrMeasureLegends(IRenderContext rc, OxyRect rect, bool measureOnly);
}
public abstract class OxyPlot.Legends.LegendBase : PlotElement {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLegendVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendOrientation <LegendOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendSymbolLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendSymbolMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendSymbolPlacement <LegendSymbolPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LegendTitleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendTitleFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendTitleFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendTitleFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <LegendArea>k__BackingField;
    [CompilerGeneratedAttribute]
private OxySize <LegendSize>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LegendBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LegendBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendColumnSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LegendTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <LegendItemAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendItemOrder <LegendItemOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendItemSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendLineSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendMaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LegendMaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendPlacement <LegendPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendPosition <LegendPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUseFullExtent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInvisibleSeries>k__BackingField;
    public string Key { get; public set; }
    public bool IsLegendVisible { get; public set; }
    public LegendOrientation LegendOrientation { get; public set; }
    public double LegendPadding { get; public set; }
    public double LegendSymbolLength { get; public set; }
    public double LegendSymbolMargin { get; public set; }
    public LegendSymbolPlacement LegendSymbolPlacement { get; public set; }
    public string LegendTitle { get; public set; }
    public OxyColor LegendTitleColor { get; public set; }
    public string LegendTitleFont { get; public set; }
    public double LegendTitleFontSize { get; public set; }
    public double LegendTitleFontWeight { get; public set; }
    public OxyRect LegendArea { get; public set; }
    public OxySize LegendSize { get; public set; }
    public OxyColor LegendBackground { get; public set; }
    public OxyColor LegendBorder { get; public set; }
    public double LegendBorderThickness { get; public set; }
    public double LegendColumnSpacing { get; public set; }
    public string LegendFont { get; public set; }
    public double LegendFontSize { get; public set; }
    public OxyColor LegendTextColor { get; public set; }
    public double LegendFontWeight { get; public set; }
    public HorizontalAlignment LegendItemAlignment { get; public set; }
    public LegendItemOrder LegendItemOrder { get; public set; }
    public double LegendItemSpacing { get; public set; }
    public double LegendLineSpacing { get; public set; }
    public double LegendMargin { get; public set; }
    public double LegendMaxWidth { get; public set; }
    public double LegendMaxHeight { get; public set; }
    public LegendPlacement LegendPlacement { get; public set; }
    public LegendPosition LegendPosition { get; public set; }
    public bool AllowUseFullExtent { get; public set; }
    public bool ShowInvisibleSeries { get; public set; }
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
    protected abstract virtual HitTestResult LegendHitTest(HitTestArguments args);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLegendVisible();
    [CompilerGeneratedAttribute]
public void set_IsLegendVisible(bool value);
    [CompilerGeneratedAttribute]
public LegendOrientation get_LegendOrientation();
    [CompilerGeneratedAttribute]
public void set_LegendOrientation(LegendOrientation value);
    [CompilerGeneratedAttribute]
public double get_LegendPadding();
    [CompilerGeneratedAttribute]
public void set_LegendPadding(double value);
    [CompilerGeneratedAttribute]
public double get_LegendSymbolLength();
    [CompilerGeneratedAttribute]
public void set_LegendSymbolLength(double value);
    [CompilerGeneratedAttribute]
public double get_LegendSymbolMargin();
    [CompilerGeneratedAttribute]
public void set_LegendSymbolMargin(double value);
    [CompilerGeneratedAttribute]
public LegendSymbolPlacement get_LegendSymbolPlacement();
    [CompilerGeneratedAttribute]
public void set_LegendSymbolPlacement(LegendSymbolPlacement value);
    [CompilerGeneratedAttribute]
public string get_LegendTitle();
    [CompilerGeneratedAttribute]
public void set_LegendTitle(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_LegendTitleColor();
    [CompilerGeneratedAttribute]
public void set_LegendTitleColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_LegendTitleFont();
    [CompilerGeneratedAttribute]
public void set_LegendTitleFont(string value);
    [CompilerGeneratedAttribute]
public double get_LegendTitleFontSize();
    [CompilerGeneratedAttribute]
public void set_LegendTitleFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_LegendTitleFontWeight();
    [CompilerGeneratedAttribute]
public void set_LegendTitleFontWeight(double value);
    [CompilerGeneratedAttribute]
public OxyRect get_LegendArea();
    [CompilerGeneratedAttribute]
public void set_LegendArea(OxyRect value);
    [CompilerGeneratedAttribute]
public OxySize get_LegendSize();
    [CompilerGeneratedAttribute]
public void set_LegendSize(OxySize value);
    [CompilerGeneratedAttribute]
public OxyColor get_LegendBackground();
    [CompilerGeneratedAttribute]
public void set_LegendBackground(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_LegendBorder();
    [CompilerGeneratedAttribute]
public void set_LegendBorder(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_LegendBorderThickness();
    [CompilerGeneratedAttribute]
public void set_LegendBorderThickness(double value);
    [CompilerGeneratedAttribute]
public double get_LegendColumnSpacing();
    [CompilerGeneratedAttribute]
public void set_LegendColumnSpacing(double value);
    [CompilerGeneratedAttribute]
public string get_LegendFont();
    [CompilerGeneratedAttribute]
public void set_LegendFont(string value);
    [CompilerGeneratedAttribute]
public double get_LegendFontSize();
    [CompilerGeneratedAttribute]
public void set_LegendFontSize(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_LegendTextColor();
    [CompilerGeneratedAttribute]
public void set_LegendTextColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_LegendFontWeight();
    [CompilerGeneratedAttribute]
public void set_LegendFontWeight(double value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_LegendItemAlignment();
    [CompilerGeneratedAttribute]
public void set_LegendItemAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public LegendItemOrder get_LegendItemOrder();
    [CompilerGeneratedAttribute]
public void set_LegendItemOrder(LegendItemOrder value);
    [CompilerGeneratedAttribute]
public double get_LegendItemSpacing();
    [CompilerGeneratedAttribute]
public void set_LegendItemSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_LegendLineSpacing();
    [CompilerGeneratedAttribute]
public void set_LegendLineSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_LegendMargin();
    [CompilerGeneratedAttribute]
public void set_LegendMargin(double value);
    [CompilerGeneratedAttribute]
public double get_LegendMaxWidth();
    [CompilerGeneratedAttribute]
public void set_LegendMaxWidth(double value);
    [CompilerGeneratedAttribute]
public double get_LegendMaxHeight();
    [CompilerGeneratedAttribute]
public void set_LegendMaxHeight(double value);
    [CompilerGeneratedAttribute]
public LegendPlacement get_LegendPlacement();
    [CompilerGeneratedAttribute]
public void set_LegendPlacement(LegendPlacement value);
    [CompilerGeneratedAttribute]
public LegendPosition get_LegendPosition();
    [CompilerGeneratedAttribute]
public void set_LegendPosition(LegendPosition value);
    [CompilerGeneratedAttribute]
public bool get_AllowUseFullExtent();
    [CompilerGeneratedAttribute]
public void set_AllowUseFullExtent(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowInvisibleSeries();
    [CompilerGeneratedAttribute]
public void set_ShowInvisibleSeries(bool value);
    public abstract virtual void EnsureLegendProperties();
    public abstract virtual OxySize GetLegendSize(IRenderContext rc, OxySize availableLegendArea);
    public abstract virtual OxyRect GetLegendRectangle(OxySize legendSize);
    public abstract virtual void RenderLegends(IRenderContext rc);
}
public enum OxyPlot.Legends.LegendItemOrder : Enum {
    public int value__;
    public static LegendItemOrder Normal;
    public static LegendItemOrder Reverse;
}
public enum OxyPlot.Legends.LegendOrientation : Enum {
    public int value__;
    public static LegendOrientation Horizontal;
    public static LegendOrientation Vertical;
}
public enum OxyPlot.Legends.LegendPlacement : Enum {
    public int value__;
    public static LegendPlacement Inside;
    public static LegendPlacement Outside;
}
public enum OxyPlot.Legends.LegendPosition : Enum {
    public int value__;
    public static LegendPosition TopLeft;
    public static LegendPosition TopCenter;
    public static LegendPosition TopRight;
    public static LegendPosition BottomLeft;
    public static LegendPosition BottomCenter;
    public static LegendPosition BottomRight;
    public static LegendPosition LeftTop;
    public static LegendPosition LeftMiddle;
    public static LegendPosition LeftBottom;
    public static LegendPosition RightTop;
    public static LegendPosition RightMiddle;
    public static LegendPosition RightBottom;
}
public enum OxyPlot.Legends.LegendSymbolPlacement : Enum {
    public int value__;
    public static LegendSymbolPlacement Left;
    public static LegendSymbolPlacement Right;
}
public enum OxyPlot.LineCap : Enum {
    public int value__;
    public static LineCap Butt;
    public static LineCap Round;
    public static LineCap ProjectingSquare;
}
public enum OxyPlot.LineJoin : Enum {
    public int value__;
    public static LineJoin Miter;
    public static LineJoin Round;
    public static LineJoin Bevel;
}
public enum OxyPlot.LineStyle : Enum {
    public int value__;
    public static LineStyle Solid;
    public static LineStyle Dash;
    public static LineStyle Dot;
    public static LineStyle DashDot;
    public static LineStyle DashDashDot;
    public static LineStyle DashDotDot;
    public static LineStyle DashDashDotDot;
    public static LineStyle LongDash;
    public static LineStyle LongDashDot;
    public static LineStyle LongDashDotDot;
    public static LineStyle None;
    public static LineStyle Automatic;
}
[ExtensionAttribute]
public static class OxyPlot.LineStyleHelper : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Double[] GetDashArray(LineStyle style);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.ListBuilder`1 : object {
    private List`1<string> properties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> defaultValues;
    public void Add(string propertyName, TProperty defaultValue);
    public void FillT(IList`1<T> target, IEnumerable source, Func`2<IList`1<object>, T> instanceCreator);
    public void Fill(IList target, IEnumerable source, Func`2<IList`1<object>, object> instanceCreator);
}
public abstract class OxyPlot.ManipulatorBase`1 : object {
    [CompilerGeneratedAttribute]
private IView <View>k__BackingField;
    public IView View { get; private set; }
    protected ManipulatorBase`1(IView view);
    [CompilerGeneratedAttribute]
public IView get_View();
    [CompilerGeneratedAttribute]
private void set_View(IView value);
    public virtual void Completed(T e);
    public virtual void Delta(T e);
    public virtual void Started(T e);
}
public enum OxyPlot.MarkerType : Enum {
    public int value__;
    public static MarkerType None;
    public static MarkerType Circle;
    public static MarkerType Square;
    public static MarkerType Diamond;
    public static MarkerType Triangle;
    public static MarkerType Cross;
    public static MarkerType Plus;
    public static MarkerType Star;
    public static MarkerType Custom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.MathRenderingExtensions : object {
    [CompilerGeneratedAttribute]
private static double <SubAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SubSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SuperAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SuperSize>k__BackingField;
    private static double SubAlignment { get; private set; }
    private static double SubSize { get; private set; }
    private static double SuperAlignment { get; private set; }
    private static double SuperSize { get; private set; }
    private static MathRenderingExtensions();
    [CompilerGeneratedAttribute]
private static double get_SubAlignment();
    [CompilerGeneratedAttribute]
private static void set_SubAlignment(double value);
    [CompilerGeneratedAttribute]
private static double get_SubSize();
    [CompilerGeneratedAttribute]
private static void set_SubSize(double value);
    [CompilerGeneratedAttribute]
private static double get_SuperAlignment();
    [CompilerGeneratedAttribute]
private static void set_SuperAlignment(double value);
    [CompilerGeneratedAttribute]
private static double get_SuperSize();
    [CompilerGeneratedAttribute]
private static void set_SuperSize(double value);
    [ExtensionAttribute]
public static OxySize DrawMathText(IRenderContext rc, ScreenPoint pt, string text, OxyColor textColor, string fontFamily, double fontSize, double fontWeight, double angle, HorizontalAlignment ha, VerticalAlignment va, Nullable`1<OxySize> maxSize, bool measure);
    [ExtensionAttribute]
public static void DrawMathText(IRenderContext rc, ScreenPoint pt, string text, OxyColor textColor, string fontFamily, double fontSize, double fontWeight, double angle, HorizontalAlignment ha, VerticalAlignment va, Nullable`1<OxySize> maxSize);
    [ExtensionAttribute]
public static OxySize MeasureMathText(IRenderContext rc, string text, string fontFamily, double fontSize, double fontWeight);
    private static OxySize InternalDrawMathText(IRenderContext rc, double x, double y, double dx, double dy, string s, OxyColor textColor, string fontFamily, double fontSize, double fontWeight, bool measureOnly, double angle);
}
public abstract class OxyPlot.Model : object {
    internal static OxyColor DefaultSelectionColor;
    private object syncRoot;
    [CompilerGeneratedAttribute]
private OxyColor <SelectionColor>k__BackingField;
    private static double MouseHitTolerance;
    private Element currentMouseEventElement;
    private Element currentTouchEventElement;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyKeyEventArgs> KeyDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseDownEventArgs> MouseDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseMove;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseUp;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseEnter;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyMouseEventArgs> MouseLeave;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchDelta;
    [CompilerGeneratedAttribute]
private EventHandler`1<OxyTouchEventArgs> TouchCompleted;
    public object SyncRoot { get; }
    public OxyColor SelectionColor { get; public set; }
    private static Model();
    public object get_SyncRoot();
    [CompilerGeneratedAttribute]
public OxyColor get_SelectionColor();
    [CompilerGeneratedAttribute]
public void set_SelectionColor(OxyColor value);
    [IteratorStateMachineAttribute("OxyPlot.Model/<HitTest>d__9")]
public IEnumerable`1<HitTestResult> HitTest(HitTestArguments args);
    protected abstract virtual IEnumerable`1<PlotElement> GetHitTestElements();
    [CompilerGeneratedAttribute]
public void add_KeyDown(EventHandler`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_KeyDown(EventHandler`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(EventHandler`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(EventHandler`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseMove(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseMove(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseUp(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseUp(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseEnter(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseEnter(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseLeave(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseLeave(EventHandler`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchStarted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchStarted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchDelta(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchDelta(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TouchCompleted(EventHandler`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TouchCompleted(EventHandler`1<OxyTouchEventArgs> value);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleMouseDown(object sender, OxyMouseDownEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleMouseMove(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleMouseUp(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleMouseEnter(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleMouseLeave(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleTouchStarted(object sender, OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleTouchDelta(object sender, OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleTouchCompleted(object sender, OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
public virtual void HandleKeyDown(object sender, OxyKeyEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnKeyDown(object sender, OxyKeyEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnMouseDown(object sender, OxyMouseDownEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnMouseMove(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnMouseUp(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnMouseEnter(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnMouseLeave(object sender, OxyMouseEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnTouchStarted(object sender, OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnTouchDelta(object sender, OxyTouchEventArgs e);
    [ObsoleteAttribute("Will be removed in v4.0 (#111)")]
protected virtual void OnTouchCompleted(object sender, OxyTouchEventArgs e);
}
public abstract class OxyPlot.MouseManipulator : PlotManipulator`1<OxyMouseEventArgs> {
    [CompilerGeneratedAttribute]
private ScreenPoint <StartPosition>k__BackingField;
    public ScreenPoint StartPosition { get; protected set; }
    protected MouseManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
public ScreenPoint get_StartPosition();
    [CompilerGeneratedAttribute]
protected void set_StartPosition(ScreenPoint value);
    public virtual void Started(OxyMouseEventArgs e);
}
internal abstract class OxyPlot.Node : object {
}
public class OxyPlot.OxyColor : ValueType {
    private byte r;
    private byte g;
    private byte b;
    private byte a;
    public byte A { get; }
    public byte B { get; }
    public byte G { get; }
    public byte R { get; }
    private OxyColor(byte a, byte r, byte g, byte b);
    public byte get_A();
    public byte get_B();
    public byte get_G();
    public byte get_R();
    public static OxyColor Parse(string value);
    public static double ColorDifference(OxyColor c1, OxyColor c2);
    public static OxyColor FromUInt32(UInt32 color);
    public static OxyColor FromHsv(Double[] hsv);
    public static OxyColor FromHsv(double hue, double sat, double val);
    public static double HueDifference(OxyColor c1, OxyColor c2);
    public static OxyColor FromAColor(byte a, OxyColor color);
    public static OxyColor FromArgb(byte a, byte r, byte g, byte b);
    public static OxyColor FromRgb(byte r, byte g, byte b);
    public static OxyColor Interpolate(OxyColor color1, OxyColor color2, double t);
    public static bool op_Equality(OxyColor first, OxyColor second);
    public static bool op_Inequality(OxyColor first, OxyColor second);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OxyColor other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool IsInvisible();
    public bool IsVisible();
    public bool IsUndefined();
    public bool IsAutomatic();
    public OxyColor GetActualColor(OxyColor defaultColor);
    private sealed virtual override string OxyPlot.ICodeGenerating.ToCode();
}
[ExtensionAttribute]
public static class OxyPlot.OxyColorExtensions : object {
    [ExtensionAttribute]
public static OxyColor ChangeIntensity(OxyColor color, double factor);
    [ExtensionAttribute]
public static OxyColor ChangeSaturation(OxyColor color, double factor);
    [ExtensionAttribute]
public static OxyColor ChangeOpacity(OxyColor color, double factor);
    [ExtensionAttribute]
public static OxyColor Complementary(OxyColor color);
    [ExtensionAttribute]
public static Double[] ToHsv(OxyColor color);
    [ExtensionAttribute]
public static UInt32 ToUint(OxyColor color);
    [ExtensionAttribute]
public static string ToByteString(OxyColor color);
    [ExtensionAttribute]
public static string ToCode(OxyColor color);
    [ExtensionAttribute]
public static string GetColorName(OxyColor color);
}
public static class OxyPlot.OxyColors : object {
    public static OxyColor Undefined;
    public static OxyColor Automatic;
    public static OxyColor AliceBlue;
    public static OxyColor AntiqueWhite;
    public static OxyColor Aqua;
    public static OxyColor Aquamarine;
    public static OxyColor Azure;
    public static OxyColor Beige;
    public static OxyColor Bisque;
    public static OxyColor Black;
    public static OxyColor BlanchedAlmond;
    public static OxyColor Blue;
    public static OxyColor BlueViolet;
    public static OxyColor Brown;
    public static OxyColor BurlyWood;
    public static OxyColor CadetBlue;
    public static OxyColor Chartreuse;
    public static OxyColor Chocolate;
    public static OxyColor Coral;
    public static OxyColor CornflowerBlue;
    public static OxyColor Cornsilk;
    public static OxyColor Crimson;
    public static OxyColor Cyan;
    public static OxyColor DarkBlue;
    public static OxyColor DarkCyan;
    public static OxyColor DarkGoldenrod;
    public static OxyColor DarkGray;
    public static OxyColor DarkGreen;
    public static OxyColor DarkKhaki;
    public static OxyColor DarkMagenta;
    public static OxyColor DarkOliveGreen;
    public static OxyColor DarkOrange;
    public static OxyColor DarkOrchid;
    public static OxyColor DarkRed;
    public static OxyColor DarkSalmon;
    public static OxyColor DarkSeaGreen;
    public static OxyColor DarkSlateBlue;
    public static OxyColor DarkSlateGray;
    public static OxyColor DarkTurquoise;
    public static OxyColor DarkViolet;
    public static OxyColor DeepPink;
    public static OxyColor DeepSkyBlue;
    public static OxyColor DimGray;
    public static OxyColor DodgerBlue;
    public static OxyColor Firebrick;
    public static OxyColor FloralWhite;
    public static OxyColor ForestGreen;
    public static OxyColor Fuchsia;
    public static OxyColor Gainsboro;
    public static OxyColor GhostWhite;
    public static OxyColor Gold;
    public static OxyColor Goldenrod;
    public static OxyColor Gray;
    public static OxyColor Green;
    public static OxyColor GreenYellow;
    public static OxyColor Honeydew;
    public static OxyColor HotPink;
    public static OxyColor IndianRed;
    public static OxyColor Indigo;
    public static OxyColor Ivory;
    public static OxyColor Khaki;
    public static OxyColor Lavender;
    public static OxyColor LavenderBlush;
    public static OxyColor LawnGreen;
    public static OxyColor LemonChiffon;
    public static OxyColor LightBlue;
    public static OxyColor LightCoral;
    public static OxyColor LightCyan;
    public static OxyColor LightGoldenrodYellow;
    public static OxyColor LightGray;
    public static OxyColor LightGreen;
    public static OxyColor LightPink;
    public static OxyColor LightSalmon;
    public static OxyColor LightSeaGreen;
    public static OxyColor LightSkyBlue;
    public static OxyColor LightSlateGray;
    public static OxyColor LightSteelBlue;
    public static OxyColor LightYellow;
    public static OxyColor Lime;
    public static OxyColor LimeGreen;
    public static OxyColor Linen;
    public static OxyColor Magenta;
    public static OxyColor Maroon;
    public static OxyColor MediumAquamarine;
    public static OxyColor MediumBlue;
    public static OxyColor MediumOrchid;
    public static OxyColor MediumPurple;
    public static OxyColor MediumSeaGreen;
    public static OxyColor MediumSlateBlue;
    public static OxyColor MediumSpringGreen;
    public static OxyColor MediumTurquoise;
    public static OxyColor MediumVioletRed;
    public static OxyColor MidnightBlue;
    public static OxyColor MintCream;
    public static OxyColor MistyRose;
    public static OxyColor Moccasin;
    public static OxyColor NavajoWhite;
    public static OxyColor Navy;
    public static OxyColor OldLace;
    public static OxyColor Olive;
    public static OxyColor OliveDrab;
    public static OxyColor Orange;
    public static OxyColor OrangeRed;
    public static OxyColor Orchid;
    public static OxyColor PaleGoldenrod;
    public static OxyColor PaleGreen;
    public static OxyColor PaleTurquoise;
    public static OxyColor PaleVioletRed;
    public static OxyColor PapayaWhip;
    public static OxyColor PeachPuff;
    public static OxyColor Peru;
    public static OxyColor Pink;
    public static OxyColor Plum;
    public static OxyColor PowderBlue;
    public static OxyColor Purple;
    public static OxyColor Red;
    public static OxyColor RosyBrown;
    public static OxyColor RoyalBlue;
    public static OxyColor SaddleBrown;
    public static OxyColor Salmon;
    public static OxyColor SandyBrown;
    public static OxyColor SeaGreen;
    public static OxyColor SeaShell;
    public static OxyColor Sienna;
    public static OxyColor Silver;
    public static OxyColor SkyBlue;
    public static OxyColor SlateBlue;
    public static OxyColor SlateGray;
    public static OxyColor Snow;
    public static OxyColor SpringGreen;
    public static OxyColor SteelBlue;
    public static OxyColor Tan;
    public static OxyColor Teal;
    public static OxyColor Thistle;
    public static OxyColor Tomato;
    public static OxyColor Transparent;
    public static OxyColor Turquoise;
    public static OxyColor Violet;
    public static OxyColor Wheat;
    public static OxyColor White;
    public static OxyColor WhiteSmoke;
    public static OxyColor Yellow;
    public static OxyColor YellowGreen;
    private static OxyColors();
}
public class OxyPlot.OxyImage : object {
    private Byte[] data;
    private OxyColor[0...,0...] pixels;
    [CompilerGeneratedAttribute]
private ImageFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public ImageFormat Format { get; private set; }
    public int Width { get; private set; }
    public int Height { get; private set; }
    public int BitsPerPixel { get; private set; }
    public double DpiX { get; private set; }
    public double DpiY { get; private set; }
    public OxyImage(Stream s);
    public OxyImage(Byte[] bytes);
    [CompilerGeneratedAttribute]
public ImageFormat get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(ImageFormat value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerPixel();
    [CompilerGeneratedAttribute]
private void set_BitsPerPixel(int value);
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
private void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
private void set_DpiY(double value);
    public static OxyImage Create(Byte[0...,0...] pixels, OxyColor[] palette, ImageFormat format, ImageEncoderOptions encoderOptions);
    public static OxyImage Create(OxyColor[0...,0...] pixels, ImageFormat format, ImageEncoderOptions encoderOptions);
    public Byte[] GetData();
    public OxyColor[0...,0...] GetPixels();
    private static IImageDecoder GetDecoder(ImageFormat format);
    private static IImageEncoder GetEncoder(ImageFormat format, ImageEncoderOptions encoderOptions);
    private static ImageFormat GetImageFormat(Byte[] bytes);
    private static Byte[] GetBytes(Stream s);
    private void UpdateImageInfo();
}
public class OxyPlot.OxyImageInfo : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int BitsPerPixel { get; public set; }
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerPixel();
    [CompilerGeneratedAttribute]
public void set_BitsPerPixel(int value);
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
public void set_DpiY(double value);
}
public abstract class OxyPlot.OxyInputEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyModifierKeys <ModifierKeys>k__BackingField;
    public bool Handled { get; public set; }
    public OxyModifierKeys ModifierKeys { get; public set; }
    public bool IsAltDown { get; }
    public bool IsControlDown { get; }
    public bool IsShiftDown { get; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public OxyModifierKeys get_ModifierKeys();
    [CompilerGeneratedAttribute]
public void set_ModifierKeys(OxyModifierKeys value);
    public bool get_IsAltDown();
    public bool get_IsControlDown();
    public bool get_IsShiftDown();
}
public abstract class OxyPlot.OxyInputGesture : object {
    public abstract virtual bool Equals(OxyInputGesture other);
}
public enum OxyPlot.OxyKey : Enum {
    public int value__;
    public static OxyKey Space;
    public static OxyKey Enter;
    public static OxyKey Escape;
    public static OxyKey Tab;
    public static OxyKey Backspace;
    public static OxyKey Insert;
    public static OxyKey Delete;
    public static OxyKey Home;
    public static OxyKey End;
    public static OxyKey Up;
    public static OxyKey Down;
    public static OxyKey Left;
    public static OxyKey Right;
    public static OxyKey PageUp;
    public static OxyKey PageDown;
    public static OxyKey A;
    public static OxyKey B;
    public static OxyKey C;
    public static OxyKey D;
    public static OxyKey E;
    public static OxyKey F;
    public static OxyKey G;
    public static OxyKey H;
    public static OxyKey I;
    public static OxyKey J;
    public static OxyKey K;
    public static OxyKey L;
    public static OxyKey M;
    public static OxyKey N;
    public static OxyKey O;
    public static OxyKey P;
    public static OxyKey Q;
    public static OxyKey R;
    public static OxyKey S;
    public static OxyKey T;
    public static OxyKey U;
    public static OxyKey V;
    public static OxyKey W;
    public static OxyKey X;
    public static OxyKey Y;
    public static OxyKey Z;
    public static OxyKey D0;
    public static OxyKey D1;
    public static OxyKey D2;
    public static OxyKey D3;
    public static OxyKey D4;
    public static OxyKey D5;
    public static OxyKey D6;
    public static OxyKey D7;
    public static OxyKey D8;
    public static OxyKey D9;
    public static OxyKey NumPad0;
    public static OxyKey NumPad1;
    public static OxyKey NumPad2;
    public static OxyKey NumPad3;
    public static OxyKey NumPad4;
    public static OxyKey NumPad5;
    public static OxyKey NumPad6;
    public static OxyKey NumPad7;
    public static OxyKey NumPad8;
    public static OxyKey NumPad9;
    public static OxyKey Add;
    public static OxyKey Subtract;
    public static OxyKey Multiply;
    public static OxyKey Divide;
    public static OxyKey Decimal;
    public static OxyKey F1;
    public static OxyKey F2;
    public static OxyKey F3;
    public static OxyKey F4;
    public static OxyKey F5;
    public static OxyKey F6;
    public static OxyKey F7;
    public static OxyKey F8;
    public static OxyKey F9;
    public static OxyKey F10;
    public static OxyKey F11;
    public static OxyKey F12;
    public static OxyKey Unknown;
}
public class OxyPlot.OxyKeyEventArgs : OxyInputEventArgs {
    [CompilerGeneratedAttribute]
private OxyKey <Key>k__BackingField;
    public OxyKey Key { get; public set; }
    [CompilerGeneratedAttribute]
public OxyKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(OxyKey value);
}
public class OxyPlot.OxyKeyGesture : OxyInputGesture {
    [CompilerGeneratedAttribute]
private OxyModifierKeys <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyKey <Key>k__BackingField;
    public OxyModifierKeys Modifiers { get; public set; }
    public OxyKey Key { get; public set; }
    public OxyKeyGesture(OxyKey key, OxyModifierKeys modifiers);
    [CompilerGeneratedAttribute]
public OxyModifierKeys get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(OxyModifierKeys value);
    [CompilerGeneratedAttribute]
public OxyKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(OxyKey value);
    public virtual bool Equals(OxyInputGesture other);
}
[FlagsAttribute]
public enum OxyPlot.OxyModifierKeys : Enum {
    public int value__;
    public static OxyModifierKeys None;
    public static OxyModifierKeys Control;
    public static OxyModifierKeys Alt;
    public static OxyModifierKeys Shift;
    public static OxyModifierKeys Windows;
}
public enum OxyPlot.OxyMouseButton : Enum {
    public int value__;
    public static OxyMouseButton None;
    public static OxyMouseButton Left;
    public static OxyMouseButton Middle;
    public static OxyMouseButton Right;
    public static OxyMouseButton XButton1;
    public static OxyMouseButton XButton2;
}
public class OxyPlot.OxyMouseDownEventArgs : OxyMouseEventArgs {
    [CompilerGeneratedAttribute]
private OxyMouseButton <ChangedButton>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private HitTestResult <HitTestResult>k__BackingField;
    public OxyMouseButton ChangedButton { get; public set; }
    public int ClickCount { get; public set; }
    public HitTestResult HitTestResult { get; public set; }
    [CompilerGeneratedAttribute]
public OxyMouseButton get_ChangedButton();
    [CompilerGeneratedAttribute]
public void set_ChangedButton(OxyMouseButton value);
    [CompilerGeneratedAttribute]
public int get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(int value);
    [CompilerGeneratedAttribute]
public HitTestResult get_HitTestResult();
    [CompilerGeneratedAttribute]
public void set_HitTestResult(HitTestResult value);
}
public class OxyPlot.OxyMouseDownGesture : OxyInputGesture {
    [CompilerGeneratedAttribute]
private OxyModifierKeys <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyMouseButton <MouseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClickCount>k__BackingField;
    public OxyModifierKeys Modifiers { get; private set; }
    public OxyMouseButton MouseButton { get; private set; }
    public int ClickCount { get; private set; }
    public OxyMouseDownGesture(OxyMouseButton mouseButton, OxyModifierKeys modifiers, int clickCount);
    [CompilerGeneratedAttribute]
public OxyModifierKeys get_Modifiers();
    [CompilerGeneratedAttribute]
private void set_Modifiers(OxyModifierKeys value);
    [CompilerGeneratedAttribute]
public OxyMouseButton get_MouseButton();
    [CompilerGeneratedAttribute]
private void set_MouseButton(OxyMouseButton value);
    [CompilerGeneratedAttribute]
public int get_ClickCount();
    [CompilerGeneratedAttribute]
private void set_ClickCount(int value);
    public virtual bool Equals(OxyInputGesture other);
}
public class OxyPlot.OxyMouseEnterGesture : OxyInputGesture {
    [CompilerGeneratedAttribute]
private OxyModifierKeys <Modifiers>k__BackingField;
    public OxyModifierKeys Modifiers { get; private set; }
    public OxyMouseEnterGesture(OxyModifierKeys modifiers);
    [CompilerGeneratedAttribute]
public OxyModifierKeys get_Modifiers();
    [CompilerGeneratedAttribute]
private void set_Modifiers(OxyModifierKeys value);
    public virtual bool Equals(OxyInputGesture other);
}
public class OxyPlot.OxyMouseEventArgs : OxyInputEventArgs {
    [CompilerGeneratedAttribute]
private ScreenPoint <Position>k__BackingField;
    public ScreenPoint Position { get; public set; }
    [CompilerGeneratedAttribute]
public ScreenPoint get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(ScreenPoint value);
}
public class OxyPlot.OxyMouseWheelEventArgs : OxyMouseEventArgs {
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    public int Delta { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Delta();
    [CompilerGeneratedAttribute]
public void set_Delta(int value);
}
public class OxyPlot.OxyMouseWheelGesture : OxyInputGesture {
    [CompilerGeneratedAttribute]
private OxyModifierKeys <Modifiers>k__BackingField;
    public OxyModifierKeys Modifiers { get; private set; }
    public OxyMouseWheelGesture(OxyModifierKeys modifiers);
    [CompilerGeneratedAttribute]
public OxyModifierKeys get_Modifiers();
    [CompilerGeneratedAttribute]
private void set_Modifiers(OxyModifierKeys value);
    public virtual bool Equals(OxyInputGesture other);
}
public class OxyPlot.OxyPalette : object {
    [CompilerGeneratedAttribute]
private IList`1<OxyColor> <Colors>k__BackingField;
    public IList`1<OxyColor> Colors { get; public set; }
    public OxyPalette(OxyColor[] colors);
    public OxyPalette(IEnumerable`1<OxyColor> colors);
    [CompilerGeneratedAttribute]
public IList`1<OxyColor> get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(IList`1<OxyColor> value);
    public static OxyPalette Interpolate(int paletteSize, OxyColor[] colors);
    public OxyPalette Reverse();
}
public static class OxyPlot.OxyPalettes : object {
    [CompilerGeneratedAttribute]
private static OxyPalette <BlueWhiteRed31>k__BackingField;
    [CompilerGeneratedAttribute]
private static OxyPalette <Hot64>k__BackingField;
    [CompilerGeneratedAttribute]
private static OxyPalette <Hue64>k__BackingField;
    private static OxyColor[] cividisColors;
    private static OxyColor[] infernoColors;
    private static OxyColor[] magmaColors;
    private static OxyColor[] plasmaColors;
    private static OxyColor[] viridisColors;
    public static OxyPalette BlueWhiteRed31 { get; private set; }
    public static OxyPalette Hot64 { get; private set; }
    public static OxyPalette Hue64 { get; private set; }
    private static OxyPalettes();
    [CompilerGeneratedAttribute]
public static OxyPalette get_BlueWhiteRed31();
    [CompilerGeneratedAttribute]
private static void set_BlueWhiteRed31(OxyPalette value);
    [CompilerGeneratedAttribute]
public static OxyPalette get_Hot64();
    [CompilerGeneratedAttribute]
private static void set_Hot64(OxyPalette value);
    [CompilerGeneratedAttribute]
public static OxyPalette get_Hue64();
    [CompilerGeneratedAttribute]
private static void set_Hue64(OxyPalette value);
    public static OxyPalette BlackWhiteRed(int numberOfColors);
    public static OxyPalette BlueWhiteRed(int numberOfColors);
    public static OxyPalette Cool(int numberOfColors);
    public static OxyPalette Gray(int numberOfColors);
    public static OxyPalette Hot(int numberOfColors);
    public static OxyPalette Hue(int numberOfColors);
    public static OxyPalette HueDistinct(int numberOfColors);
    public static OxyPalette Jet(int numberOfColors);
    public static OxyPalette Rainbow(int numberOfColors);
    public static OxyPalette Cividis(int numberOfColors);
    public static OxyPalette Inferno(int numberOfColors);
    public static OxyPalette Magma(int numberOfColors);
    public static OxyPalette Plasma(int numberOfColors);
    public static OxyPalette Viridis(int numberOfColors);
}
public class OxyPlot.OxyPen : object {
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <DashArray>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Thickness>k__BackingField;
    public OxyColor Color { get; public set; }
    public Double[] DashArray { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double Thickness { get; public set; }
    public Double[] ActualDashArray { get; }
    public OxyPen(OxyColor color, double thickness, LineStyle lineStyle, LineJoin lineJoin);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public Double[] get_DashArray();
    [CompilerGeneratedAttribute]
public void set_DashArray(Double[] value);
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_Thickness();
    [CompilerGeneratedAttribute]
public void set_Thickness(double value);
    public Double[] get_ActualDashArray();
    public static OxyPen Create(OxyColor color, double thickness, LineStyle lineStyle, LineJoin lineJoin);
    public virtual int GetHashCode();
}
public class OxyPlot.OxyRect : ValueType {
    public static OxyRect Everything;
    private double height;
    private double left;
    private double top;
    private double width;
    public double Bottom { get; }
    public double Height { get; }
    public double Left { get; }
    public double Right { get; }
    public double Top { get; }
    public double Width { get; }
    public ScreenPoint Center { get; }
    public ScreenPoint TopLeft { get; }
    public ScreenPoint TopRight { get; }
    public ScreenPoint BottomLeft { get; }
    public ScreenPoint BottomRight { get; }
    public OxyRect(double left, double top, double width, double height);
    public OxyRect(ScreenPoint p0, ScreenPoint p1);
    public OxyRect(ScreenPoint p0, OxySize size);
    private static OxyRect();
    public double get_Bottom();
    public double get_Height();
    public double get_Left();
    public double get_Right();
    public double get_Top();
    public double get_Width();
    public ScreenPoint get_Center();
    public ScreenPoint get_TopLeft();
    public ScreenPoint get_TopRight();
    public ScreenPoint get_BottomLeft();
    public ScreenPoint get_BottomRight();
    public static OxyRect Create(double x0, double y0, double x1, double y1);
    public bool Contains(double x, double y);
    public bool Contains(ScreenPoint p);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual bool Equals(OxyRect other);
    public OxyRect Inflate(double dx, double dy);
    public OxyRect Inflate(OxyThickness t);
    public OxyRect Intersect(OxyRect rect);
    public OxyRect Deflate(OxyThickness t);
    public OxyRect Offset(double offsetX, double offsetY);
    public OxyRect Clip(OxyRect clipRect);
}
public class OxyPlot.OxyShakeGesture : OxyInputGesture {
    public virtual bool Equals(OxyInputGesture other);
}
public class OxyPlot.OxySize : ValueType {
    public static OxySize Empty;
    private double height;
    private double width;
    public double Height { get; }
    public double Width { get; }
    public OxySize(double width, double height);
    private static OxySize();
    public double get_Height();
    public double get_Width();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual bool Equals(OxySize other);
    public OxySize Include(OxySize other);
}
[ExtensionAttribute]
public static class OxyPlot.OxySizeExtensions : object {
    [ExtensionAttribute]
public static OxyRect GetBounds(OxySize bounds, double angle, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
    [IteratorStateMachineAttribute("OxyPlot.OxySizeExtensions/<GetPolygon>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<ScreenPoint> GetPolygon(OxySize size, ScreenPoint origin, double angle, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
public class OxyPlot.OxyThickness : ValueType {
    private double bottom;
    private double left;
    private double right;
    private double top;
    public double Bottom { get; }
    public double Left { get; }
    public double Right { get; }
    public double Top { get; }
    public OxyThickness(double thickness);
    public OxyThickness(double left, double top, double right, double bottom);
    public double get_Bottom();
    public double get_Left();
    public double get_Right();
    public double get_Top();
    public sealed virtual string ToCode();
    public virtual string ToString();
    public bool Equals(OxyThickness other);
    public OxyThickness Include(OxyThickness other);
}
public class OxyPlot.OxyTouchEventArgs : OxyInputEventArgs {
    [CompilerGeneratedAttribute]
private ScreenPoint <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenVector <DeltaScale>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenVector <DeltaTranslation>k__BackingField;
    public ScreenPoint Position { get; public set; }
    public ScreenVector DeltaScale { get; public set; }
    public ScreenVector DeltaTranslation { get; public set; }
    public OxyTouchEventArgs(ScreenPoint[] currentTouches, ScreenPoint[] previousTouches);
    [CompilerGeneratedAttribute]
public ScreenPoint get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(ScreenPoint value);
    [CompilerGeneratedAttribute]
public ScreenVector get_DeltaScale();
    [CompilerGeneratedAttribute]
public void set_DeltaScale(ScreenVector value);
    [CompilerGeneratedAttribute]
public ScreenVector get_DeltaTranslation();
    [CompilerGeneratedAttribute]
public void set_DeltaTranslation(ScreenVector value);
}
public class OxyPlot.OxyTouchGesture : OxyInputGesture {
    public virtual bool Equals(OxyInputGesture other);
}
public enum OxyPlot.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Portrait;
    public static PageOrientation Landscape;
}
public enum OxyPlot.PageSize : Enum {
    public int value__;
    public static PageSize A4;
    public static PageSize A3;
    public static PageSize Letter;
}
public class OxyPlot.PanManipulator : MouseManipulator {
    [CompilerGeneratedAttribute]
private ScreenPoint <PreviousPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPanEnabled>k__BackingField;
    private ScreenPoint PreviousPosition { get; private set; }
    private bool IsPanEnabled { get; private set; }
    public PanManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
private ScreenPoint get_PreviousPosition();
    [CompilerGeneratedAttribute]
private void set_PreviousPosition(ScreenPoint value);
    [CompilerGeneratedAttribute]
private bool get_IsPanEnabled();
    [CompilerGeneratedAttribute]
private void set_IsPanEnabled(bool value);
    public virtual void Completed(OxyMouseEventArgs e);
    public virtual void Delta(OxyMouseEventArgs e);
    public virtual void Started(OxyMouseEventArgs e);
}
[ObsoleteAttribute("OxyPlot.PdfExporter may be removed in a future version. Consider using OxyPlot.SkiaSharp.PdfExporter instead.")]
public class OxyPlot.PdfExporter : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public static void Export(IPlotModel model, Stream stream, double width, double height);
    public sealed virtual void Export(IPlotModel model, Stream stream);
}
public class OxyPlot.PdfRenderContext : ClippingRenderContext {
    private PortableDocument doc;
    private Dictionary`2<OxyImage, PortableDocumentImage> images;
    public PdfRenderContext(double width, double height, OxyColor background);
    public void Save(Stream s);
    public virtual void DrawEllipse(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawRectangle(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawText(ScreenPoint p, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign, Nullable`1<OxySize> maxSize);
    public virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    protected virtual void SetClip(OxyRect clippingRectangle);
    protected virtual void ResetClip();
    private static LineJoin Convert(LineJoin lineJoin);
    private void SetLineWidth(double thickness);
    private void SetLineDashPattern(Double[] dashArray, double dashPhase);
}
internal class OxyPlot.PdfWriter : object {
    private BinaryWriter w;
    public long Position { get; }
    public PdfWriter(Stream s);
    public long get_Position();
    public void Write(string format, Object[] args);
    public void WriteLine(string format, Object[] args);
    public void Write(Dictionary`2<string, object> dictionary);
    public void Write(Byte[] bytes);
    public void WriteLine();
    public sealed virtual void Dispose();
    private void WriteCore(object o);
    private void WriteList(IList list);
}
public static class OxyPlot.PlotCommands : object {
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <Reset>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <ResetAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <CopyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyTouchEventArgs> <PanZoomByTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseDownEventArgs> <PanAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseDownEventArgs> <ZoomRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseWheelEventArgs> <ZoomWheel>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseWheelEventArgs> <ZoomWheelFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseDownEventArgs> <Track>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseDownEventArgs> <SnapTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyTouchEventArgs> <SnapTrackTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseDownEventArgs> <PointsOnlyTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyTouchEventArgs> <PointsOnlyTrackTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <HoverTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <HoverSnapTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <HoverPointsOnlyTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanRight>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanUp>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanDown>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanLeftFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanRightFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanUpFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <PanDownFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <ZoomInAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyMouseEventArgs> <ZoomOutAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <ZoomIn>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <ZoomOut>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <ZoomInFine>k__BackingField;
    [CompilerGeneratedAttribute]
private static IViewCommand`1<OxyKeyEventArgs> <ZoomOutFine>k__BackingField;
    public static IViewCommand`1<OxyKeyEventArgs> Reset { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> ResetAt { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> CopyCode { get; private set; }
    public static IViewCommand`1<OxyTouchEventArgs> PanZoomByTouch { get; private set; }
    public static IViewCommand`1<OxyMouseDownEventArgs> PanAt { get; private set; }
    public static IViewCommand`1<OxyMouseDownEventArgs> ZoomRectangle { get; private set; }
    public static IViewCommand`1<OxyMouseWheelEventArgs> ZoomWheel { get; private set; }
    public static IViewCommand`1<OxyMouseWheelEventArgs> ZoomWheelFine { get; private set; }
    public static IViewCommand`1<OxyMouseDownEventArgs> Track { get; private set; }
    public static IViewCommand`1<OxyMouseDownEventArgs> SnapTrack { get; private set; }
    public static IViewCommand`1<OxyTouchEventArgs> SnapTrackTouch { get; private set; }
    public static IViewCommand`1<OxyMouseDownEventArgs> PointsOnlyTrack { get; private set; }
    public static IViewCommand`1<OxyTouchEventArgs> PointsOnlyTrackTouch { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> HoverTrack { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> HoverSnapTrack { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> HoverPointsOnlyTrack { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanLeft { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanRight { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanUp { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanDown { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanLeftFine { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanRightFine { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanUpFine { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> PanDownFine { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> ZoomInAt { get; private set; }
    public static IViewCommand`1<OxyMouseEventArgs> ZoomOutAt { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> ZoomIn { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> ZoomOut { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> ZoomInFine { get; private set; }
    public static IViewCommand`1<OxyKeyEventArgs> ZoomOutFine { get; private set; }
    private static PlotCommands();
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_Reset();
    [CompilerGeneratedAttribute]
private static void set_Reset(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_ResetAt();
    [CompilerGeneratedAttribute]
private static void set_ResetAt(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_CopyCode();
    [CompilerGeneratedAttribute]
private static void set_CopyCode(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyTouchEventArgs> get_PanZoomByTouch();
    [CompilerGeneratedAttribute]
private static void set_PanZoomByTouch(IViewCommand`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseDownEventArgs> get_PanAt();
    [CompilerGeneratedAttribute]
private static void set_PanAt(IViewCommand`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseDownEventArgs> get_ZoomRectangle();
    [CompilerGeneratedAttribute]
private static void set_ZoomRectangle(IViewCommand`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseWheelEventArgs> get_ZoomWheel();
    [CompilerGeneratedAttribute]
private static void set_ZoomWheel(IViewCommand`1<OxyMouseWheelEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseWheelEventArgs> get_ZoomWheelFine();
    [CompilerGeneratedAttribute]
private static void set_ZoomWheelFine(IViewCommand`1<OxyMouseWheelEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseDownEventArgs> get_Track();
    [CompilerGeneratedAttribute]
private static void set_Track(IViewCommand`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseDownEventArgs> get_SnapTrack();
    [CompilerGeneratedAttribute]
private static void set_SnapTrack(IViewCommand`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyTouchEventArgs> get_SnapTrackTouch();
    [CompilerGeneratedAttribute]
private static void set_SnapTrackTouch(IViewCommand`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseDownEventArgs> get_PointsOnlyTrack();
    [CompilerGeneratedAttribute]
private static void set_PointsOnlyTrack(IViewCommand`1<OxyMouseDownEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyTouchEventArgs> get_PointsOnlyTrackTouch();
    [CompilerGeneratedAttribute]
private static void set_PointsOnlyTrackTouch(IViewCommand`1<OxyTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_HoverTrack();
    [CompilerGeneratedAttribute]
private static void set_HoverTrack(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_HoverSnapTrack();
    [CompilerGeneratedAttribute]
private static void set_HoverSnapTrack(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_HoverPointsOnlyTrack();
    [CompilerGeneratedAttribute]
private static void set_HoverPointsOnlyTrack(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanLeft();
    [CompilerGeneratedAttribute]
private static void set_PanLeft(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanRight();
    [CompilerGeneratedAttribute]
private static void set_PanRight(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanUp();
    [CompilerGeneratedAttribute]
private static void set_PanUp(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanDown();
    [CompilerGeneratedAttribute]
private static void set_PanDown(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanLeftFine();
    [CompilerGeneratedAttribute]
private static void set_PanLeftFine(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanRightFine();
    [CompilerGeneratedAttribute]
private static void set_PanRightFine(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanUpFine();
    [CompilerGeneratedAttribute]
private static void set_PanUpFine(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_PanDownFine();
    [CompilerGeneratedAttribute]
private static void set_PanDownFine(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_ZoomInAt();
    [CompilerGeneratedAttribute]
private static void set_ZoomInAt(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyMouseEventArgs> get_ZoomOutAt();
    [CompilerGeneratedAttribute]
private static void set_ZoomOutAt(IViewCommand`1<OxyMouseEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_ZoomIn();
    [CompilerGeneratedAttribute]
private static void set_ZoomIn(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_ZoomOut();
    [CompilerGeneratedAttribute]
private static void set_ZoomOut(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_ZoomInFine();
    [CompilerGeneratedAttribute]
private static void set_ZoomInFine(IViewCommand`1<OxyKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public static IViewCommand`1<OxyKeyEventArgs> get_ZoomOutFine();
    [CompilerGeneratedAttribute]
private static void set_ZoomOutFine(IViewCommand`1<OxyKeyEventArgs> value);
    private static void HandleReset(IPlotView view, OxyInputEventArgs args);
    private static void HandleCopyCode(IPlotView view, OxyInputEventArgs args);
    private static void HandleZoomAt(IPlotView view, OxyMouseEventArgs args, double delta);
    private static void HandleZoomByWheel(IPlotView view, OxyMouseWheelEventArgs args, double factor);
    private static void HandleZoomCenter(IPlotView view, OxyInputEventArgs args, double delta);
    private static void HandlePan(IPlotView view, OxyInputEventArgs args, double dx, double dy);
}
public class OxyPlot.PlotController : ControllerBase {
}
public abstract class OxyPlot.PlotElement : Element {
    [CompilerGeneratedAttribute]
private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private EdgeRenderingMode <EdgeRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string Font { get; public set; }
    public double FontSize { get; public set; }
    public double FontWeight { get; public set; }
    public PlotModel PlotModel { get; }
    public object Tag { get; public set; }
    public OxyColor TextColor { get; public set; }
    public EdgeRenderingMode EdgeRenderingMode { get; public set; }
    public string ToolTip { get; public set; }
    protected internal string ActualFont { get; }
    protected internal double ActualFontSize { get; }
    protected internal double ActualFontWeight { get; }
    protected internal OxyColor ActualTextColor { get; }
    protected CultureInfo ActualCulture { get; }
    [CompilerGeneratedAttribute]
public string get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(string value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public double get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(double value);
    public sealed virtual PlotModel get_PlotModel();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public OxyColor get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(OxyColor value);
    [CompilerGeneratedAttribute]
public EdgeRenderingMode get_EdgeRenderingMode();
    [CompilerGeneratedAttribute]
public void set_EdgeRenderingMode(EdgeRenderingMode value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public void set_ToolTip(string value);
    protected internal string get_ActualFont();
    protected internal double get_ActualFontSize();
    protected internal double get_ActualFontWeight();
    protected internal OxyColor get_ActualTextColor();
    protected CultureInfo get_ActualCulture();
    public virtual OxyRect GetClippingRect();
    public virtual int GetElementHashCode();
    [CompilerGeneratedAttribute]
private object <GetElementHashCode>b__42_1(PropertyInfo pi);
}
[ExtensionAttribute]
public static class OxyPlot.PlotElementExtensions : object {
    [ExtensionAttribute]
public static DataPoint InverseTransform(IXyAxisPlotElement element, double x, double y);
    [ExtensionAttribute]
public static bool IsTransposed(ITransposablePlotElement element);
    [ExtensionAttribute]
public static ScreenPoint Orientate(ITransposablePlotElement element, ScreenPoint point);
    [ExtensionAttribute]
public static ScreenVector Orientate(ITransposablePlotElement element, ScreenVector vector);
    [ExtensionAttribute]
public static void Orientate(ITransposablePlotElement element, HorizontalAlignment& ha, VerticalAlignment& va);
    [ExtensionAttribute]
public static ScreenPoint Transform(IXyAxisPlotElement element, double x, double y);
}
public static class OxyPlot.PlotElementUtilities : object {
    public static OxyRect GetClippingRect(IXyAxisPlotElement element);
    public static DataPoint InverseTransform(IXyAxisPlotElement element, ScreenPoint p);
    public static DataPoint InverseTransformOrientated(ITransposablePlotElement element, ScreenPoint p);
    public static ScreenPoint Transform(IXyAxisPlotElement element, DataPoint p);
    public static ScreenPoint TransformOrientated(ITransposablePlotElement element, DataPoint p);
}
public class OxyPlot.PlotLength : ValueType {
    private PlotLengthUnit unit;
    private double value;
    public double Value { get; }
    public PlotLengthUnit Unit { get; }
    public PlotLength(double value, PlotLengthUnit unit);
    public double get_Value();
    public PlotLengthUnit get_Unit();
    public sealed virtual bool Equals(PlotLength other);
}
public enum OxyPlot.PlotLengthUnit : Enum {
    public int value__;
    public static PlotLengthUnit Data;
    public static PlotLengthUnit ScreenUnits;
    public static PlotLengthUnit RelativeToViewport;
    public static PlotLengthUnit RelativeToPlotArea;
}
public abstract class OxyPlot.PlotManipulator`1 : ManipulatorBase`1<T> {
    [CompilerGeneratedAttribute]
private IPlotView <PlotView>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisPreference <AxisPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <YAxis>k__BackingField;
    public IPlotView PlotView { get; private set; }
    public AxisPreference AxisPreference { get; public set; }
    protected Axis XAxis { get; protected set; }
    protected Axis YAxis { get; protected set; }
    protected PlotManipulator`1(IPlotView view);
    [CompilerGeneratedAttribute]
public IPlotView get_PlotView();
    [CompilerGeneratedAttribute]
private void set_PlotView(IPlotView value);
    [CompilerGeneratedAttribute]
public AxisPreference get_AxisPreference();
    [CompilerGeneratedAttribute]
public void set_AxisPreference(AxisPreference value);
    [CompilerGeneratedAttribute]
protected Axis get_XAxis();
    [CompilerGeneratedAttribute]
protected void set_XAxis(Axis value);
    [CompilerGeneratedAttribute]
protected Axis get_YAxis();
    [CompilerGeneratedAttribute]
protected void set_YAxis(Axis value);
    protected DataPoint InverseTransform(double x, double y);
    protected void AssignAxes(ScreenPoint position);
}
public class OxyPlot.PlotModel : Model {
    private List`1<BarSeriesManager> barSeriesManagers;
    private WeakReference plotViewReference;
    private int currentColorIndex;
    private bool isDataUpdated;
    private Exception lastPlotException;
    [CompilerGeneratedAttribute]
private EventHandler`1<TrackerEventArgs> TrackerChanged;
    [CompilerGeneratedAttribute]
private EventHandler Updated;
    [CompilerGeneratedAttribute]
private EventHandler Updating;
    [CompilerGeneratedAttribute]
private string <DefaultFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <ActualPlotMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementCollection`1<Annotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementCollection`1<Axis> <Axes>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementCollection`1<LegendBase> <Legends>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyColor> <DefaultColors>k__BackingField;
    [CompilerGeneratedAttribute]
private EdgeRenderingMode <EdgeRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssignColorsToInvisibleSeries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLegendVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <PlotBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <PlotAndAxisArea>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <PlotArea>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AxisTierDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <PlotAreaBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <PlotAreaBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <PlotAreaBorderThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyThickness <PlotMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotType <PlotType>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementCollection`1<Series> <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IRenderContext, IRenderContext> <RenderingDecorator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubtitleFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SubtitleFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SubtitleFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <TitleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClipTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleClippingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <SubtitleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private TitleHorizontalAlignment <TitleHorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <TitleArea>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitleFontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TitlePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private AngleAxis <DefaultAngleAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private MagnitudeAxis <DefaultMagnitudeAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <DefaultXAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <DefaultYAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorAxis <DefaultColorAxis>k__BackingField;
    public string DefaultFont { get; public set; }
    public double DefaultFontSize { get; public set; }
    public CultureInfo ActualCulture { get; }
    public OxyThickness ActualPlotMargins { get; private set; }
    public IPlotView PlotView { get; }
    public ElementCollection`1<Annotation> Annotations { get; private set; }
    public ElementCollection`1<Axis> Axes { get; private set; }
    public ElementCollection`1<LegendBase> Legends { get; public set; }
    public OxyColor Background { get; public set; }
    public CultureInfo Culture { get; public set; }
    public IList`1<OxyColor> DefaultColors { get; public set; }
    public EdgeRenderingMode EdgeRenderingMode { get; public set; }
    public bool AssignColorsToInvisibleSeries { get; public set; }
    public bool IsLegendVisible { get; public set; }
    public OxyThickness Padding { get; public set; }
    public OxyRect PlotBounds { get; private set; }
    public double Width { get; }
    public double Height { get; }
    public OxyRect PlotAndAxisArea { get; private set; }
    public OxyRect PlotArea { get; private set; }
    public double AxisTierDistance { get; public set; }
    public OxyColor PlotAreaBackground { get; public set; }
    public OxyColor PlotAreaBorderColor { get; public set; }
    public OxyThickness PlotAreaBorderThickness { get; public set; }
    public OxyThickness PlotMargins { get; public set; }
    public PlotType PlotType { get; public set; }
    public ElementCollection`1<Series> Series { get; private set; }
    public Func`2<IRenderContext, IRenderContext> RenderingDecorator { get; public set; }
    public string Subtitle { get; public set; }
    public string SubtitleFont { get; public set; }
    public double SubtitleFontSize { get; public set; }
    public double SubtitleFontWeight { get; public set; }
    public OxyColor TextColor { get; public set; }
    public string Title { get; public set; }
    public string TitleToolTip { get; public set; }
    public OxyColor TitleColor { get; public set; }
    public bool ClipTitle { get; public set; }
    public double TitleClippingLength { get; public set; }
    public OxyColor SubtitleColor { get; public set; }
    public TitleHorizontalAlignment TitleHorizontalAlignment { get; public set; }
    public OxyRect TitleArea { get; private set; }
    public string TitleFont { get; public set; }
    public double TitleFontSize { get; public set; }
    public double TitleFontWeight { get; public set; }
    public double TitlePadding { get; public set; }
    public AngleAxis DefaultAngleAxis { get; private set; }
    public MagnitudeAxis DefaultMagnitudeAxis { get; private set; }
    public Axis DefaultXAxis { get; private set; }
    public Axis DefaultYAxis { get; private set; }
    public IColorAxis DefaultColorAxis { get; private set; }
    protected string ActualTitleFont { get; }
    protected string ActualSubtitleFont { get; }
    [CompilerGeneratedAttribute]
public void add_TrackerChanged(EventHandler`1<TrackerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TrackerChanged(EventHandler`1<TrackerEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public string get_DefaultFont();
    [CompilerGeneratedAttribute]
public void set_DefaultFont(string value);
    [CompilerGeneratedAttribute]
public double get_DefaultFontSize();
    [CompilerGeneratedAttribute]
public void set_DefaultFontSize(double value);
    public CultureInfo get_ActualCulture();
    [CompilerGeneratedAttribute]
public OxyThickness get_ActualPlotMargins();
    [CompilerGeneratedAttribute]
private void set_ActualPlotMargins(OxyThickness value);
    public IPlotView get_PlotView();
    [CompilerGeneratedAttribute]
public ElementCollection`1<Annotation> get_Annotations();
    [CompilerGeneratedAttribute]
private void set_Annotations(ElementCollection`1<Annotation> value);
    [CompilerGeneratedAttribute]
public ElementCollection`1<Axis> get_Axes();
    [CompilerGeneratedAttribute]
private void set_Axes(ElementCollection`1<Axis> value);
    [CompilerGeneratedAttribute]
public ElementCollection`1<LegendBase> get_Legends();
    [CompilerGeneratedAttribute]
public void set_Legends(ElementCollection`1<LegendBase> value);
    [CompilerGeneratedAttribute]
public sealed virtual OxyColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(OxyColor value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public IList`1<OxyColor> get_DefaultColors();
    [CompilerGeneratedAttribute]
public void set_DefaultColors(IList`1<OxyColor> value);
    [CompilerGeneratedAttribute]
public EdgeRenderingMode get_EdgeRenderingMode();
    [CompilerGeneratedAttribute]
public void set_EdgeRenderingMode(EdgeRenderingMode value);
    [CompilerGeneratedAttribute]
public bool get_AssignColorsToInvisibleSeries();
    [CompilerGeneratedAttribute]
public void set_AssignColorsToInvisibleSeries(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLegendVisible();
    [CompilerGeneratedAttribute]
public void set_IsLegendVisible(bool value);
    [CompilerGeneratedAttribute]
public OxyThickness get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(OxyThickness value);
    [CompilerGeneratedAttribute]
public OxyRect get_PlotBounds();
    [CompilerGeneratedAttribute]
private void set_PlotBounds(OxyRect value);
    public double get_Width();
    public double get_Height();
    [CompilerGeneratedAttribute]
public OxyRect get_PlotAndAxisArea();
    [CompilerGeneratedAttribute]
private void set_PlotAndAxisArea(OxyRect value);
    [CompilerGeneratedAttribute]
public OxyRect get_PlotArea();
    [CompilerGeneratedAttribute]
private void set_PlotArea(OxyRect value);
    [CompilerGeneratedAttribute]
public double get_AxisTierDistance();
    [CompilerGeneratedAttribute]
public void set_AxisTierDistance(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_PlotAreaBackground();
    [CompilerGeneratedAttribute]
public void set_PlotAreaBackground(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_PlotAreaBorderColor();
    [CompilerGeneratedAttribute]
public void set_PlotAreaBorderColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyThickness get_PlotAreaBorderThickness();
    [CompilerGeneratedAttribute]
public void set_PlotAreaBorderThickness(OxyThickness value);
    [CompilerGeneratedAttribute]
public OxyThickness get_PlotMargins();
    [CompilerGeneratedAttribute]
public void set_PlotMargins(OxyThickness value);
    [CompilerGeneratedAttribute]
public PlotType get_PlotType();
    [CompilerGeneratedAttribute]
public void set_PlotType(PlotType value);
    [CompilerGeneratedAttribute]
public ElementCollection`1<Series> get_Series();
    [CompilerGeneratedAttribute]
private void set_Series(ElementCollection`1<Series> value);
    [CompilerGeneratedAttribute]
public Func`2<IRenderContext, IRenderContext> get_RenderingDecorator();
    [CompilerGeneratedAttribute]
public void set_RenderingDecorator(Func`2<IRenderContext, IRenderContext> value);
    [CompilerGeneratedAttribute]
public string get_Subtitle();
    [CompilerGeneratedAttribute]
public void set_Subtitle(string value);
    [CompilerGeneratedAttribute]
public string get_SubtitleFont();
    [CompilerGeneratedAttribute]
public void set_SubtitleFont(string value);
    [CompilerGeneratedAttribute]
public double get_SubtitleFontSize();
    [CompilerGeneratedAttribute]
public void set_SubtitleFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_SubtitleFontWeight();
    [CompilerGeneratedAttribute]
public void set_SubtitleFontWeight(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_TitleToolTip();
    [CompilerGeneratedAttribute]
public void set_TitleToolTip(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_TitleColor();
    [CompilerGeneratedAttribute]
public void set_TitleColor(OxyColor value);
    [CompilerGeneratedAttribute]
public bool get_ClipTitle();
    [CompilerGeneratedAttribute]
public void set_ClipTitle(bool value);
    [CompilerGeneratedAttribute]
public double get_TitleClippingLength();
    [CompilerGeneratedAttribute]
public void set_TitleClippingLength(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_SubtitleColor();
    [CompilerGeneratedAttribute]
public void set_SubtitleColor(OxyColor value);
    [CompilerGeneratedAttribute]
public TitleHorizontalAlignment get_TitleHorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_TitleHorizontalAlignment(TitleHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public OxyRect get_TitleArea();
    [CompilerGeneratedAttribute]
private void set_TitleArea(OxyRect value);
    [CompilerGeneratedAttribute]
public string get_TitleFont();
    [CompilerGeneratedAttribute]
public void set_TitleFont(string value);
    [CompilerGeneratedAttribute]
public double get_TitleFontSize();
    [CompilerGeneratedAttribute]
public void set_TitleFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_TitleFontWeight();
    [CompilerGeneratedAttribute]
public void set_TitleFontWeight(double value);
    [CompilerGeneratedAttribute]
public double get_TitlePadding();
    [CompilerGeneratedAttribute]
public void set_TitlePadding(double value);
    [CompilerGeneratedAttribute]
public AngleAxis get_DefaultAngleAxis();
    [CompilerGeneratedAttribute]
private void set_DefaultAngleAxis(AngleAxis value);
    [CompilerGeneratedAttribute]
public MagnitudeAxis get_DefaultMagnitudeAxis();
    [CompilerGeneratedAttribute]
private void set_DefaultMagnitudeAxis(MagnitudeAxis value);
    [CompilerGeneratedAttribute]
public Axis get_DefaultXAxis();
    [CompilerGeneratedAttribute]
private void set_DefaultXAxis(Axis value);
    [CompilerGeneratedAttribute]
public Axis get_DefaultYAxis();
    [CompilerGeneratedAttribute]
private void set_DefaultYAxis(Axis value);
    [CompilerGeneratedAttribute]
public IColorAxis get_DefaultColorAxis();
    [CompilerGeneratedAttribute]
private void set_DefaultColorAxis(IColorAxis value);
    protected string get_ActualTitleFont();
    protected string get_ActualSubtitleFont();
    private sealed virtual override void OxyPlot.IPlotModel.AttachPlotView(IPlotView plotView);
    public void InvalidatePlot(bool updateData);
    public void GetAxesFromPoint(ScreenPoint pt, Axis& xaxis, Axis& yaxis);
    public OxyColor GetDefaultColor();
    public LineStyle GetDefaultLineStyle();
    public Series GetSeriesFromPoint(ScreenPoint point, double limit);
    public string ToCode();
    public virtual string ToString();
    public LegendBase GetLegend(string key);
    public Exception GetLastPlotException();
    private sealed virtual override void OxyPlot.IPlotModel.Update(bool updateData);
    public Axis GetAxis(string key);
    public Axis GetAxisOrDefault(string key, Axis defaultAxis);
    public void ResetAllAxes();
    public void PanAllAxes(double dx, double dy);
    public void ZoomAllAxes(double factor);
    public void RaiseTrackerChanged(TrackerHitResult result);
    protected internal virtual void OnTrackerChanged(TrackerHitResult result);
    [IteratorStateMachineAttribute("OxyPlot.PlotModel/<GetHitTestElements>d__229")]
protected virtual IEnumerable`1<PlotElement> GetHitTestElements();
    protected virtual void OnUpdated();
    protected virtual void OnUpdating();
    private void UpdateAxisTransforms();
    private void EnforceCartesianTransforms();
    private void UpdateIntervals();
    private void EnsureDefaultAxes();
    private void ResetDefaultColor();
    private void UpdateMaxMin(bool isDataUpdated);
    private void UpdateBarSeriesManagers();
    private void UpdateUnmanagedCategoryAxes();
    private sealed virtual override void OxyPlot.IPlotModel.Render(IRenderContext rc, OxyRect rect);
    protected virtual void RenderOverride(IRenderContext rc, OxyRect rect);
    private void RenderErrorMessage(IRenderContext rc, string title, string errorMessage, double fontSize);
    private bool AdjustPlotMargins(IRenderContext rc);
    private double AdjustAxesPositions(IEnumerable`1<Axis> parallelAxes);
    private OxySize MeasureTitles(IRenderContext rc);
    private void RenderAnnotations(IRenderContext rc, AnnotationLayer layer);
    private void RenderAxes(IRenderContext rc, AxisLayer layer);
    private void RenderLegends(IRenderContext rc);
    private void RenderBackgrounds(IRenderContext rc);
    private void RenderBox(IRenderContext rc);
    private void RenderSeries(IRenderContext rc);
    private void RenderPlotElements(IEnumerable`1<T> plotElements, IRenderContext rc, Action`1<T> renderAction);
    private void RenderTitle(IRenderContext rc);
    private void UpdatePlotArea(IRenderContext rc);
    [CompilerGeneratedAttribute]
internal static void <AdjustPlotMargins>g__IncludeInMargin|243_1(double size, AxisPosition borderPosition, <>c__DisplayClass243_0& );
    [CompilerGeneratedAttribute]
internal static double <AdjustAxesPositions>g__GetSize|244_0(Axis axis);
}
public enum OxyPlot.PlotType : Enum {
    public int value__;
    public static PlotType XY;
    public static PlotType Cartesian;
    public static PlotType Polar;
}
public class OxyPlot.PngDecoder : object {
    public sealed virtual OxyImageInfo GetImageInfo(Byte[] bytes);
    public sealed virtual OxyColor[0...,0...] Decode(Byte[] bytes);
    private static Byte[] Deflate(Byte[] bytes);
}
public class OxyPlot.PngEncoder : object {
    private static UInt64[] CrcTable;
    private PngEncoderOptions options;
    private static PngEncoder();
    public PngEncoder(PngEncoderOptions options);
    public sealed virtual Byte[] Encode(OxyColor[0...,0...] pixels);
    public sealed virtual Byte[] Encode(Byte[0...,0...] pixels, OxyColor[] palette);
    internal static UInt32 Adler32(IEnumerable`1<byte> data);
    private static Byte[] CreateHeaderData(int width, int height);
    private static Byte[] CreatePhysicalDimensionsData(double dpix, double dpiy);
    private static Byte[] CreateUncompressedBlocks(Byte[] bytes);
    private static ulong UpdateCrc(ulong crc, IEnumerable`1<byte> data);
    private static void WriteBigEndian(BinaryWriter w, int value);
    private static void WriteBigEndian(BinaryWriter w, UInt32 value);
    private static void WriteChunk(BinaryWriter w, string type, Byte[] data);
}
public class OxyPlot.PngEncoderOptions : ImageEncoderOptions {
}
public class OxyPlot.PortableDocument : object {
    private List`1<PortableDocumentObject> objects;
    private Dictionary`2<double, string> strokeAlphaCache;
    private Dictionary`2<double, string> fillAlphaCache;
    private Dictionary`2<PortableDocumentFont, string> fontCache;
    private Dictionary`2<PortableDocumentImage, string> imageCache;
    private PortableDocumentObject catalog;
    private PortableDocumentObject pages;
    private PortableDocumentObject metadata;
    private PortableDocumentObject resources;
    private Dictionary`2<string, object> fonts;
    private Dictionary`2<string, object> xobjects;
    private Dictionary`2<string, object> extgstate;
    private IList`1<PortableDocumentObject> pageReferences;
    private PortableDocumentObject currentPageContents;
    private PortableDocumentFont currentFont;
    private double currentFontSize;
    [CompilerGeneratedAttribute]
private double <PageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageHeight>k__BackingField;
    public double PageWidth { get; private set; }
    public double PageHeight { get; private set; }
    unknown string Title {public set; }
    unknown string Author {public set; }
    unknown string Subject {public set; }
    unknown string Keywords {public set; }
    unknown string Creator {public set; }
    unknown string Producer {public set; }
    [CompilerGeneratedAttribute]
public double get_PageWidth();
    [CompilerGeneratedAttribute]
private void set_PageWidth(double value);
    [CompilerGeneratedAttribute]
public double get_PageHeight();
    [CompilerGeneratedAttribute]
private void set_PageHeight(double value);
    public void set_Title(string value);
    public void set_Author(string value);
    public void set_Subject(string value);
    public void set_Keywords(string value);
    public void set_Creator(string value);
    public void set_Producer(string value);
    public void SetLineWidth(double w);
    public void SetLineCap(LineCap cap);
    public void SetLineJoin(LineJoin lineJoin);
    public void SetMiterLimit(double ml);
    public void SetLineDashPattern(Double[] dashArray, double dashPhase);
    public void ResetLineDashPattern();
    public void MoveTo(double x1, double y1);
    public void LineTo(double x1, double y1);
    public void AppendCubicBezier(double x1, double y1, double x2, double y2, double x3, double y3);
    public void SaveState();
    public void RestoreState();
    public void Translate(double x, double y);
    public void Scale(double sx, double sy);
    public void Transform(double a, double b, double c, double d, double e, double f);
    public void SetHorizontalTextScaling(double scale);
    public void RotateAt(double x, double y, double angle);
    public void Rotate(double angle);
    public void SetStrokeAlpha(double alpha);
    public void SetFillAlpha(double alpha);
    public void Stroke(bool close);
    public void Fill(bool evenOddRule);
    public void FillAndStroke(bool close, bool evenOddRule);
    public void SetClippingPath(bool evenOddRule);
    public void EndPath();
    public void CloseSubPath();
    public void AppendRectangle(double x, double y, double w, double h);
    public void DrawLine(double x1, double y1, double x2, double y2);
    public void DrawRectangle(double x, double y, double w, double h, bool fill);
    public void SetClippingRectangle(double x, double y, double w, double h, bool evenOddRule);
    public void FillRectangle(double x, double y, double w, double h);
    public void DrawCircle(double x, double y, double r, bool fill);
    public void FillCircle(double x, double y, double r);
    public void DrawEllipse(double x, double y, double w, double h, bool fill);
    public void FillEllipse(double x, double y, double w, double h);
    public void AppendEllipse(double x, double y, double w, double h);
    public void SetFont(string fontName, double fontSize, bool bold, bool italic);
    public void DrawText(double x, double y, string text);
    public void MeasureText(string text, Double& width, Double& height);
    public void DrawImage(PortableDocumentImage image);
    public void SetColor(double r, double g, double b);
    public void SetColor(double c, double m, double y, double k);
    public void SetFillColor(double r, double g, double b);
    public void AddPage(PageSize pageSize, PageOrientation pageOrientation);
    public void AddPage(double width, double height);
    public void Save(Stream s);
    private static string EncodeString(string text, FontEncoding encoding);
    private static string EscapeString(string text);
    private static string Ascii85Encode(Byte[] ba);
    private static PortableDocumentFont GetFont(string fontName, bool bold, bool italic);
    private static T2 GetCached(T1 key, Dictionary`2<T1, T2> cache, Func`1<T2> create);
    private PortableDocumentObject AddObject();
    private PortableDocumentObject AddObject(ObjectType type);
    private string AddExtGState(string key, object value);
    private string AddImage(PortableDocumentImage image);
    private string AddFont(PortableDocumentFont font);
    private void AppendLine(string format, Object[] args);
    private void Append(string format, Object[] args);
    [CompilerGeneratedAttribute]
private string <DrawText>b__73_0();
}
[ExtensionAttribute]
public static class OxyPlot.PortableDocumentExtensions : object {
    [ExtensionAttribute]
public static void SetColor(PortableDocument doc, OxyColor c);
    [ExtensionAttribute]
public static void SetFillColor(PortableDocument doc, OxyColor c);
}
public class OxyPlot.PortableDocumentFont : object {
    [CompilerGeneratedAttribute]
private FontSubType <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private FontEncoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstChar>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Widths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <FontBoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StemV>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    public FontSubType SubType { get; public set; }
    public string BaseFont { get; public set; }
    public FontEncoding Encoding { get; public set; }
    public int FirstChar { get; public set; }
    public Int32[] Widths { get; public set; }
    public int Ascent { get; public set; }
    public int CapHeight { get; public set; }
    public int Descent { get; public set; }
    public int Flags { get; public set; }
    public Int32[] FontBoundingBox { get; public set; }
    public int ItalicAngle { get; public set; }
    public int StemV { get; public set; }
    public int XHeight { get; public set; }
    public string FontName { get; public set; }
    [CompilerGeneratedAttribute]
public FontSubType get_SubType();
    [CompilerGeneratedAttribute]
public void set_SubType(FontSubType value);
    [CompilerGeneratedAttribute]
public string get_BaseFont();
    [CompilerGeneratedAttribute]
public void set_BaseFont(string value);
    [CompilerGeneratedAttribute]
public FontEncoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(FontEncoding value);
    [CompilerGeneratedAttribute]
public int get_FirstChar();
    [CompilerGeneratedAttribute]
public void set_FirstChar(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_Widths();
    [CompilerGeneratedAttribute]
public void set_Widths(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_Ascent();
    [CompilerGeneratedAttribute]
public void set_Ascent(int value);
    [CompilerGeneratedAttribute]
public int get_CapHeight();
    [CompilerGeneratedAttribute]
public void set_CapHeight(int value);
    [CompilerGeneratedAttribute]
public int get_Descent();
    [CompilerGeneratedAttribute]
public void set_Descent(int value);
    [CompilerGeneratedAttribute]
public int get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_FontBoundingBox();
    [CompilerGeneratedAttribute]
public void set_FontBoundingBox(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_ItalicAngle();
    [CompilerGeneratedAttribute]
public void set_ItalicAngle(int value);
    [CompilerGeneratedAttribute]
public int get_StemV();
    [CompilerGeneratedAttribute]
public void set_StemV(int value);
    [CompilerGeneratedAttribute]
public int get_XHeight();
    [CompilerGeneratedAttribute]
public void set_XHeight(int value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    public void Measure(string text, double fontSize, Double& width, Double& height);
}
public class OxyPlot.PortableDocumentFontFamily : object {
    [CompilerGeneratedAttribute]
private PortableDocumentFont <RegularFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PortableDocumentFont <BoldFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PortableDocumentFont <ItalicFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PortableDocumentFont <BoldItalicFont>k__BackingField;
    public PortableDocumentFont RegularFont { get; public set; }
    public PortableDocumentFont BoldFont { get; public set; }
    public PortableDocumentFont ItalicFont { get; public set; }
    public PortableDocumentFont BoldItalicFont { get; public set; }
    [CompilerGeneratedAttribute]
public PortableDocumentFont get_RegularFont();
    [CompilerGeneratedAttribute]
public void set_RegularFont(PortableDocumentFont value);
    [CompilerGeneratedAttribute]
public PortableDocumentFont get_BoldFont();
    [CompilerGeneratedAttribute]
public void set_BoldFont(PortableDocumentFont value);
    [CompilerGeneratedAttribute]
public PortableDocumentFont get_ItalicFont();
    [CompilerGeneratedAttribute]
public void set_ItalicFont(PortableDocumentFont value);
    [CompilerGeneratedAttribute]
public PortableDocumentFont get_BoldItalicFont();
    [CompilerGeneratedAttribute]
public void set_BoldItalicFont(PortableDocumentFont value);
    public PortableDocumentFont GetFont(bool bold, bool italic);
}
public class OxyPlot.PortableDocumentImage : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bits>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MaskBits>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interpolate>k__BackingField;
    public int Width { get; private set; }
    public int Height { get; private set; }
    public int BitsPerComponent { get; private set; }
    public ColorSpace ColorSpace { get; private set; }
    public Byte[] Bits { get; private set; }
    public Byte[] MaskBits { get; private set; }
    public bool Interpolate { get; private set; }
    public PortableDocumentImage(int width, int height, int bitsPerComponent, Byte[] bits, Byte[] maskBits, bool interpolate, ColorSpace colorSpace);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
private void set_BitsPerComponent(int value);
    [CompilerGeneratedAttribute]
public ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
private void set_ColorSpace(ColorSpace value);
    [CompilerGeneratedAttribute]
public Byte[] get_Bits();
    [CompilerGeneratedAttribute]
private void set_Bits(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_MaskBits();
    [CompilerGeneratedAttribute]
private void set_MaskBits(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_Interpolate();
    [CompilerGeneratedAttribute]
private void set_Interpolate(bool value);
}
public static class OxyPlot.PortableDocumentImageUtilities : object {
    public static PortableDocumentImage Convert(OxyImage image, bool interpolate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OxyPlot.ReflectionPath : object {
    private String[] items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PropertyInfo[] infos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] reflectedTypes;
    public ReflectionPath(string path);
    public object GetValue(object instance);
    public bool TryGetValue(object instance, Object& result);
}
public abstract class OxyPlot.RenderContextBase : object {
    [CompilerGeneratedAttribute]
private bool <RendersToScreen>k__BackingField;
    public bool RendersToScreen { get; public set; }
    public int ClipCount { get; }
    public static bool IsStraightLine(ScreenPoint p1, ScreenPoint p2);
    public static bool IsStraightLine(IList`1<ScreenPoint> points);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RendersToScreen();
    [CompilerGeneratedAttribute]
public void set_RendersToScreen(bool value);
    public virtual void DrawEllipse(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawEllipses(IList`1<OxyRect> rectangles, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawLineSegments(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public abstract virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawPolygons(IList`1<IList`1<ScreenPoint>> polygons, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawRectangle(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawRectangles(IList`1<OxyRect> rectangles, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public abstract virtual void DrawText(ScreenPoint p, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign, Nullable`1<OxySize> maxSize);
    public abstract virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public virtual void SetToolTip(string text);
    public virtual void CleanUp();
    public virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    public abstract virtual void PopClip();
    public abstract virtual void PushClip(OxyRect clippingRectangle);
    public abstract virtual int get_ClipCount();
    protected static ScreenPoint[] CreateEllipse(OxyRect rect, int n);
    protected static ScreenPoint[] CreateRectangle(OxyRect rect);
    protected virtual bool ShouldUseAntiAliasingForRect(EdgeRenderingMode edgeRenderingMode);
    protected virtual bool ShouldUseAntiAliasingForEllipse(EdgeRenderingMode edgeRenderingMode);
    protected virtual bool ShouldUseAntiAliasingForLine(EdgeRenderingMode edgeRenderingMode, IList`1<ScreenPoint> points);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.RenderingExtensions : object {
    private static double M1;
    private static double M2;
    private static double M3;
    private static RenderingExtensions();
    [ExtensionAttribute]
public static EdgeRenderingMode GetActual(EdgeRenderingMode edgeRenderingMode, EdgeRenderingMode defaultValue);
    [ExtensionAttribute]
public static void DrawReducedLine(IRenderContext rc, IList`1<ScreenPoint> points, double minDistSquared, OxyColor stroke, double strokeThickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin, List`1<ScreenPoint> outputBuffer, Action`1<IList`1<ScreenPoint>> pointsRendered);
    [ExtensionAttribute]
public static void DrawReducedPolygon(IRenderContext rc, IList`1<ScreenPoint> points, double minDistSquared, OxyColor fill, OxyColor stroke, double strokeThickness, EdgeRenderingMode edgeRenderingMode, LineStyle lineStyle, LineJoin lineJoin);
    [ExtensionAttribute]
public static void DrawImage(IRenderContext rc, OxyImage image, double x, double y, double w, double h, double opacity, bool interpolate);
    [ExtensionAttribute]
public static void DrawMultilineText(IRenderContext rc, ScreenPoint point, string text, OxyColor color, string fontFamily, double fontSize, double fontWeight, double dy);
    [ExtensionAttribute]
public static void DrawLine(IRenderContext rc, double x0, double y0, double x1, double y1, OxyPen pen, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void DrawLineSegments(IRenderContext rc, IList`1<ScreenPoint> points, OxyPen pen, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void DrawMarker(IRenderContext rc, ScreenPoint p, MarkerType type, IList`1<ScreenPoint> outline, double size, OxyColor fill, OxyColor stroke, double strokeThickness, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void DrawMarkers(IRenderContext rc, IList`1<ScreenPoint> markerPoints, MarkerType markerType, IList`1<ScreenPoint> markerOutline, double markerSize, OxyColor markerFill, OxyColor markerStroke, double markerStrokeThickness, EdgeRenderingMode edgeRenderingMode, int resolution, ScreenPoint binOffset);
    [ExtensionAttribute]
public static void DrawMarkers(IRenderContext rc, IList`1<ScreenPoint> markerPoints, MarkerType markerType, IList`1<ScreenPoint> markerOutline, IList`1<double> markerSize, OxyColor markerFill, OxyColor markerStroke, double markerStrokeThickness, EdgeRenderingMode edgeRenderingMode, int resolution, ScreenPoint binOffset);
    [ExtensionAttribute]
public static void DrawCircle(IRenderContext rc, double x, double y, double r, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void DrawCircle(IRenderContext rc, ScreenPoint center, double r, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void FillCircle(IRenderContext rc, ScreenPoint center, double r, OxyColor fill, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void FillRectangle(IRenderContext rc, OxyRect rectangle, OxyColor fill, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static void DrawRectangle(IRenderContext rc, OxyRect rect, OxyColor stroke, OxyThickness thickness, EdgeRenderingMode edgeRenderingMode);
    [ExtensionAttribute]
public static OxySize MeasureText(IRenderContext rc, string text, string fontFamily, double fontSize, double fontWeight, double angle);
    [ExtensionAttribute]
public static IDisposable AutoResetClip(IRenderContext rc, OxyRect clippingRectangle);
    private static void AddMarkerGeometry(ScreenPoint p, MarkerType type, IEnumerable`1<ScreenPoint> outline, double size, IList`1<OxyRect> ellipses, IList`1<OxyRect> rects, IList`1<IList`1<ScreenPoint>> polygons, IList`1<ScreenPoint> lines);
    private static OxySize MeasureRotatedRectangleBound(OxySize bounds, double angle);
    private static void ReducePoints(IList`1<ScreenPoint> points, double minDistSquared, List`1<ScreenPoint> outputBuffer);
    public static void TransformAndInterpolateLines(ITransposablePlotElement transposablePlotElement, IList`1<DataPoint> points, IList`1<ScreenPoint> screenPoints, double maxSegmentLength);
    public static void InterpolatePoints(Func`2<double, ScreenPoint> function, IList`1<ScreenPoint> screenPoints, double maxSegmentLength, bool includeFirst);
}
public class OxyPlot.ScreenPoint : ValueType {
    public static ScreenPoint Undefined;
    internal double x;
    internal double y;
    public double X { get; }
    public double Y { get; }
    public ScreenPoint(double x, double y);
    private static ScreenPoint();
    public double get_X();
    public double get_Y();
    public static bool IsUndefined(ScreenPoint point);
    public static ScreenPoint op_Addition(ScreenPoint p1, ScreenVector p2);
    public static ScreenVector op_Subtraction(ScreenPoint p1, ScreenPoint p2);
    public static ScreenPoint op_Subtraction(ScreenPoint point, ScreenVector vector);
    public double DistanceTo(ScreenPoint point);
    public double DistanceToSquared(ScreenPoint point);
    public virtual string ToString();
    public sealed virtual bool Equals(ScreenPoint other);
}
public static class OxyPlot.ScreenPointHelper : object {
    public static ScreenPoint FindNearestPointOnPolyline(ScreenPoint point, IList`1<ScreenPoint> points);
    public static ScreenPoint FindPointOnLine(ScreenPoint p, ScreenPoint p1, ScreenPoint p2);
    public static double FindPositionOnLine(ScreenPoint p, ScreenPoint p1, ScreenPoint p2);
    public static bool IsPointInPolygon(ScreenPoint p, IList`1<ScreenPoint> pts);
    public static IList`1<ScreenPoint> ResamplePoints(IList`1<ScreenPoint> allPoints, double minimumDistance);
    public static ScreenPoint GetCentroid(IList`1<ScreenPoint> points);
}
public class OxyPlot.ScreenVector : ValueType {
    internal double x;
    internal double y;
    public double Length { get; }
    public double LengthSquared { get; }
    public double X { get; }
    public double Y { get; }
    public ScreenVector(double x, double y);
    public double get_Length();
    public double get_LengthSquared();
    public double get_X();
    public double get_Y();
    public static ScreenVector op_Multiply(ScreenVector v, double d);
    public static ScreenVector op_Addition(ScreenVector v, ScreenVector d);
    public static ScreenVector op_Subtraction(ScreenVector v, ScreenVector d);
    public static ScreenVector op_UnaryNegation(ScreenVector v);
    public void Normalize();
    public virtual string ToString();
    public sealed virtual bool Equals(ScreenVector other);
}
public class OxyPlot.Selection : object {
    private static Selection EverythingSelection;
    private Dictionary`2<SelectionItem, bool> selection;
    public static Selection Everything { get; }
    private static Selection();
    public static Selection get_Everything();
    public bool IsEverythingSelected();
    public IEnumerable`1<int> GetSelectedItems();
    public IEnumerable`1<int> GetSelectedItems(Enum feature);
    public void Clear();
    public bool IsItemSelected(int index, Enum feature);
    public void Select(int index, Enum feature);
    public void Unselect(int index, Enum feature);
}
public enum OxyPlot.SelectionMode : Enum {
    public int value__;
    public static SelectionMode All;
    public static SelectionMode Single;
    public static SelectionMode Multiple;
}
public class OxyPlot.Series.AreaSeries : LineSeries {
    private List`1<DataPoint> points2;
    private List`1<DataPoint> itemsSourcePoints2;
    private List`1<DataPoint> actualPoints2;
    [CompilerGeneratedAttribute]
private double <ConstantY2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldX2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldY2>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Color2>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WindowStartIndex2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPoints2Defined>k__BackingField;
    public double ConstantY2 { get; public set; }
    public string DataFieldX2 { get; public set; }
    public string DataFieldY2 { get; public set; }
    public OxyColor Color2 { get; public set; }
    public OxyColor ActualColor2 { get; }
    public OxyColor Fill { get; public set; }
    public OxyColor ActualFill { get; }
    public List`1<DataPoint> Points2 { get; }
    public bool Reverse2 { get; public set; }
    protected List`1<DataPoint> ActualPoints2 { get; }
    protected int WindowStartIndex2 { get; protected set; }
    protected bool IsPoints2Defined { get; private set; }
    [CompilerGeneratedAttribute]
public double get_ConstantY2();
    [CompilerGeneratedAttribute]
public void set_ConstantY2(double value);
    [CompilerGeneratedAttribute]
public string get_DataFieldX2();
    [CompilerGeneratedAttribute]
public void set_DataFieldX2(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldY2();
    [CompilerGeneratedAttribute]
public void set_DataFieldY2(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_Color2();
    [CompilerGeneratedAttribute]
public void set_Color2(OxyColor value);
    public virtual OxyColor get_ActualColor2();
    [CompilerGeneratedAttribute]
public OxyColor get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(OxyColor value);
    public OxyColor get_ActualFill();
    public List`1<DataPoint> get_Points2();
    [CompilerGeneratedAttribute]
public bool get_Reverse2();
    [CompilerGeneratedAttribute]
public void set_Reverse2(bool value);
    protected List`1<DataPoint> get_ActualPoints2();
    [CompilerGeneratedAttribute]
protected int get_WindowStartIndex2();
    [CompilerGeneratedAttribute]
protected void set_WindowStartIndex2(int value);
    [CompilerGeneratedAttribute]
protected bool get_IsPoints2Defined();
    [CompilerGeneratedAttribute]
private void set_IsPoints2Defined(bool value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected List`1<List`1<ScreenPoint>> RenderChunkedPoints(AreaRenderContext context);
    protected virtual List`1<ScreenPoint> RenderScreenPoints(AreaRenderContext context, List`1<ScreenPoint> points);
    protected double GetPointX(DataPoint point);
    [IteratorStateMachineAttribute("OxyPlot.Series.AreaSeries/<GetConstantPoints2>d__52")]
private IEnumerable`1<DataPoint> GetConstantPoints2();
}
public class OxyPlot.Series.BarItem : BarItemBase {
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public OxyColor Color { get; public set; }
    public double Value { get; public set; }
    public BarItem(double value, int categoryIndex);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    public virtual string ToCode();
}
public abstract class OxyPlot.Series.BarItemBase : object {
    [CompilerGeneratedAttribute]
private int <CategoryIndex>k__BackingField;
    public int CategoryIndex { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CategoryIndex();
    [CompilerGeneratedAttribute]
public void set_CategoryIndex(int value);
    internal int GetCategoryIndex(int defaultIndex);
}
public class OxyPlot.Series.BarSeries : BarSeriesBase`1<BarItem> {
    public static string DefaultTrackerFormatString;
    private OxyColor defaultFillColor;
    [CompilerGeneratedAttribute]
private double <BaseValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualBaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStacked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverlapsStack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueField>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyRect> <ActualBarRectangles>k__BackingField;
    public double BaseValue { get; public set; }
    public double BaseLine { get; public set; }
    public double ActualBaseLine { get; protected set; }
    public OxyColor ActualFillColor { get; }
    public string ColorField { get; public set; }
    public OxyColor FillColor { get; public set; }
    public bool IsStacked { get; public set; }
    public bool OverlapsStack { get; public set; }
    public string LabelFormatString { get; public set; }
    public OxyColor NegativeFillColor { get; public set; }
    public string StackGroup { get; public set; }
    public string ValueField { get; public set; }
    protected IList`1<OxyRect> ActualBarRectangles { get; protected set; }
    [CompilerGeneratedAttribute]
public double get_BaseValue();
    [CompilerGeneratedAttribute]
public void set_BaseValue(double value);
    [CompilerGeneratedAttribute]
public double get_BaseLine();
    [CompilerGeneratedAttribute]
public void set_BaseLine(double value);
    [CompilerGeneratedAttribute]
public double get_ActualBaseLine();
    [CompilerGeneratedAttribute]
protected void set_ActualBaseLine(double value);
    public OxyColor get_ActualFillColor();
    [CompilerGeneratedAttribute]
public string get_ColorField();
    [CompilerGeneratedAttribute]
public void set_ColorField(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsStacked();
    [CompilerGeneratedAttribute]
public void set_IsStacked(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OverlapsStack();
    [CompilerGeneratedAttribute]
public void set_OverlapsStack(bool value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeFillColor();
    [CompilerGeneratedAttribute]
public void set_NegativeFillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StackGroup();
    [CompilerGeneratedAttribute]
public void set_StackGroup(string value);
    [CompilerGeneratedAttribute]
public string get_ValueField();
    [CompilerGeneratedAttribute]
public void set_ValueField(string value);
    [CompilerGeneratedAttribute]
protected IList`1<OxyRect> get_ActualBarRectangles();
    [CompilerGeneratedAttribute]
protected void set_ActualBarRectangles(IList`1<OxyRect> value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateAxisMaxMin();
    protected void ComputeActualBaseLine();
    protected internal virtual void UpdateMaxMin();
    protected virtual string GetTrackerText(BarItem barItem, object item, int categoryIndex);
    protected virtual bool IsValid(BarItem item);
    protected virtual void RenderItem(IRenderContext rc, double barValue, double categoryValue, double actualBarWidth, BarItem item, OxyRect rect);
    public virtual void Render(IRenderContext rc);
    protected virtual bool UpdateFromDataFields();
}
public abstract class OxyPlot.Series.BarSeriesBase`1 : XYAxisSeries {
    protected static string DefaultCategoryAxisTitle;
    protected static string DefaultValueAxisTitle;
    private bool ownsItemsSourceItems;
    [CompilerGeneratedAttribute]
private double <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<T> <ItemsSourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private BarSeriesManager <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<T> <ValidItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, int> <ValidItemsIndexInversion>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LabelColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelPlacement <LabelPlacement>k__BackingField;
    public List`1<T> ActualItems { get; }
    private IReadOnlyList`1<BarItemBase> OxyPlot.Series.IBarSeries.ActualItems { get; }
    public double BarWidth { get; public set; }
    private CategoryAxis OxyPlot.Series.IBarSeries.CategoryAxis { get; }
    public List`1<T> Items { get; }
    private Axis OxyPlot.Series.IBarSeries.ValueAxis { get; }
    protected List`1<T> ItemsSourceItems { get; protected set; }
    private BarSeriesManager OxyPlot.Series.IBarSeries.Manager { get; private set; }
    public OxyColor StrokeColor { get; public set; }
    public double StrokeThickness { get; public set; }
    protected BarSeriesManager Manager { get; protected set; }
    protected IList`1<T> ValidItems { get; }
    protected Dictionary`2<int, int> ValidItemsIndexInversion { get; }
    public OxyColor LabelColor { get; public set; }
    public double LabelMargin { get; public set; }
    public double LabelAngle { get; public set; }
    public LabelPlacement LabelPlacement { get; public set; }
    public List`1<T> get_ActualItems();
    private sealed virtual override IReadOnlyList`1<BarItemBase> OxyPlot.Series.IBarSeries.get_ActualItems();
    [CompilerGeneratedAttribute]
public sealed virtual double get_BarWidth();
    [CompilerGeneratedAttribute]
public void set_BarWidth(double value);
    private sealed virtual override CategoryAxis OxyPlot.Series.IBarSeries.get_CategoryAxis();
    [CompilerGeneratedAttribute]
public List`1<T> get_Items();
    private sealed virtual override Axis OxyPlot.Series.IBarSeries.get_ValueAxis();
    [CompilerGeneratedAttribute]
protected List`1<T> get_ItemsSourceItems();
    [CompilerGeneratedAttribute]
protected void set_ItemsSourceItems(List`1<T> value);
    private sealed virtual override BarSeriesManager OxyPlot.Series.IBarSeries.get_Manager();
    private sealed virtual override void OxyPlot.Series.IBarSeries.set_Manager(BarSeriesManager value);
    [CompilerGeneratedAttribute]
public OxyColor get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
protected BarSeriesManager get_Manager();
    [CompilerGeneratedAttribute]
protected void set_Manager(BarSeriesManager value);
    [CompilerGeneratedAttribute]
protected IList`1<T> get_ValidItems();
    [CompilerGeneratedAttribute]
protected Dictionary`2<int, int> get_ValidItemsIndexInversion();
    [CompilerGeneratedAttribute]
public OxyColor get_LabelColor();
    [CompilerGeneratedAttribute]
public void set_LabelColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_LabelMargin();
    [CompilerGeneratedAttribute]
public void set_LabelMargin(double value);
    [CompilerGeneratedAttribute]
public double get_LabelAngle();
    [CompilerGeneratedAttribute]
public void set_LabelAngle(double value);
    [CompilerGeneratedAttribute]
public LabelPlacement get_LabelPlacement();
    [CompilerGeneratedAttribute]
public void set_LabelPlacement(LabelPlacement value);
    protected double GetActualBarWidth();
    protected CategoryAxis GetCategoryAxis();
    protected virtual object GetItem(int i);
    protected abstract virtual bool IsValid(T item);
    protected abstract virtual bool UpdateFromDataFields();
    private void ClearItemsSourceItems();
    private sealed virtual override void OxyPlot.Series.IBarSeries.UpdateValidData();
    protected internal virtual bool IsUsing(Axis axis);
    protected void RenderLabel(IRenderContext rc, T item, double baseValue, double topValue, double categoryValue, double categoryEndValue, string labelFormatString, Double[] labelValues);
    protected internal virtual void UpdateAxisMaxMin();
    protected internal virtual void UpdateData();
    protected void UpdateValidData();
}
public class OxyPlot.Series.BarSeriesManager : object {
    private Double[] currentBarOffset;
    private Double[0...,0...] currentMaxValue;
    private Double[0...,0...] currentMinValue;
    private Double[0...,0...] currentNegativeBaseValues;
    private Double[0...,0...] currentPositiveBaseValues;
    private double maxWidth;
    [CompilerGeneratedAttribute]
private CategoryAxis <CategoryAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IBarSeries> <ManagedSeries>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotModel <PlotModel>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <ValueAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <BarOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[0...,0...] <StackedBarOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <StackIndexMapping>k__BackingField;
    public CategoryAxis CategoryAxis { get; }
    public IList`1<IBarSeries> ManagedSeries { get; }
    public PlotModel PlotModel { get; }
    public Axis ValueAxis { get; }
    internal IList`1<string> Categories { get; }
    private Double[] BarOffset { get; private set; }
    private Double[0...,0...] StackedBarOffset { get; private set; }
    private Dictionary`2<string, int> StackIndexMapping { get; }
    public BarSeriesManager(CategoryAxis categoryAxis, Axis valueAxis, IEnumerable`1<IBarSeries> series);
    [CompilerGeneratedAttribute]
public CategoryAxis get_CategoryAxis();
    [CompilerGeneratedAttribute]
public IList`1<IBarSeries> get_ManagedSeries();
    [CompilerGeneratedAttribute]
public PlotModel get_PlotModel();
    [CompilerGeneratedAttribute]
public Axis get_ValueAxis();
    internal IList`1<string> get_Categories();
    [CompilerGeneratedAttribute]
private Double[] get_BarOffset();
    [CompilerGeneratedAttribute]
private void set_BarOffset(Double[] value);
    [CompilerGeneratedAttribute]
private Double[0...,0...] get_StackedBarOffset();
    [CompilerGeneratedAttribute]
private void set_StackedBarOffset(Double[0...,0...] value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> get_StackIndexMapping();
    public double GetCategoryValue(int categoryIndex, int stackIndex, double actualBarWidth);
    public double GetCurrentBarOffset(int categoryIndex);
    public double GetCurrentBaseValue(int stackIndex, int categoryIndex, bool negativeValue);
    public double GetCurrentMaxValue(int stackIndex, int categoryIndex);
    public double GetCurrentMinValue(int stackIndex, int categoryIndex);
    public double GetMaxWidth();
    public int GetStackIndex(string stackGroup);
    public void IncreaseCurrentBarOffset(int categoryIndex, double delta);
    public void InitializeRender();
    public void SetCurrentBaseValue(int stackIndex, int categoryIndex, bool negativeValue, double newValue);
    public void SetCurrentMaxValue(int stackIndex, int categoryIndex, double newValue);
    public void SetCurrentMinValue(int stackIndex, int categoryIndex, double newValue);
    public void Update();
    private static bool HasCategory(IBarSeries series, int categoryIndex);
    private void ResetCurrentValues();
    private void UpdateBarOffsets();
    private void UpdateValidData();
}
public class OxyPlot.Series.BoxPlotItem : object {
    [CompilerGeneratedAttribute]
private double <BoxBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BoxTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerWhisker>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Median>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<double> <Outliers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperWhisker>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    public double BoxBottom { get; public set; }
    public double BoxTop { get; public set; }
    public double LowerWhisker { get; public set; }
    public double Median { get; public set; }
    public double Mean { get; public set; }
    public IList`1<double> Outliers { get; public set; }
    public object Tag { get; public set; }
    public double UpperWhisker { get; public set; }
    public IList`1<double> Values { get; }
    public double X { get; public set; }
    public BoxPlotItem(double x, double lowerWhisker, double boxBottom, double median, double boxTop, double upperWhisker);
    [CompilerGeneratedAttribute]
public double get_BoxBottom();
    [CompilerGeneratedAttribute]
public void set_BoxBottom(double value);
    [CompilerGeneratedAttribute]
public double get_BoxTop();
    [CompilerGeneratedAttribute]
public void set_BoxTop(double value);
    [CompilerGeneratedAttribute]
public double get_LowerWhisker();
    [CompilerGeneratedAttribute]
public void set_LowerWhisker(double value);
    [CompilerGeneratedAttribute]
public double get_Median();
    [CompilerGeneratedAttribute]
public void set_Median(double value);
    [CompilerGeneratedAttribute]
public double get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(double value);
    [CompilerGeneratedAttribute]
public IList`1<double> get_Outliers();
    [CompilerGeneratedAttribute]
public void set_Outliers(IList`1<double> value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public double get_UpperWhisker();
    [CompilerGeneratedAttribute]
public void set_UpperWhisker(double value);
    public IList`1<double> get_Values();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    public virtual string ToString();
}
public class OxyPlot.Series.BoxPlotSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private List`1<BoxPlotItem> itemsSourceItems;
    private bool ownsItemsSourceItems;
    [CompilerGeneratedAttribute]
private double <BoxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<BoxPlotItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MedianPointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MedianThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MeanPointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MeanThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OutlierSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutlierTrackerFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <OutlierType>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint[] <OutlierOutline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMedianAsDot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMeanAsDot>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WhiskerWidth>k__BackingField;
    public double BoxWidth { get; public set; }
    public OxyColor Fill { get; public set; }
    public IList`1<BoxPlotItem> Items { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double MedianPointSize { get; public set; }
    public double MedianThickness { get; public set; }
    public double MeanPointSize { get; public set; }
    public double MeanThickness { get; public set; }
    public double OutlierSize { get; public set; }
    public string OutlierTrackerFormatString { get; public set; }
    public MarkerType OutlierType { get; public set; }
    public ScreenPoint[] OutlierOutline { get; public set; }
    public bool ShowBox { get; public set; }
    public bool ShowMedianAsDot { get; public set; }
    public bool ShowMeanAsDot { get; public set; }
    public OxyColor Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    public double WhiskerWidth { get; public set; }
    protected IList`1<BoxPlotItem> ActualItems { get; }
    [CompilerGeneratedAttribute]
public double get_BoxWidth();
    [CompilerGeneratedAttribute]
public void set_BoxWidth(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(OxyColor value);
    [CompilerGeneratedAttribute]
public IList`1<BoxPlotItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<BoxPlotItem> value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_MedianPointSize();
    [CompilerGeneratedAttribute]
public void set_MedianPointSize(double value);
    [CompilerGeneratedAttribute]
public double get_MedianThickness();
    [CompilerGeneratedAttribute]
public void set_MedianThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MeanPointSize();
    [CompilerGeneratedAttribute]
public void set_MeanPointSize(double value);
    [CompilerGeneratedAttribute]
public double get_MeanThickness();
    [CompilerGeneratedAttribute]
public void set_MeanThickness(double value);
    [CompilerGeneratedAttribute]
public double get_OutlierSize();
    [CompilerGeneratedAttribute]
public void set_OutlierSize(double value);
    [CompilerGeneratedAttribute]
public string get_OutlierTrackerFormatString();
    [CompilerGeneratedAttribute]
public void set_OutlierTrackerFormatString(string value);
    [CompilerGeneratedAttribute]
public MarkerType get_OutlierType();
    [CompilerGeneratedAttribute]
public void set_OutlierType(MarkerType value);
    [CompilerGeneratedAttribute]
public ScreenPoint[] get_OutlierOutline();
    [CompilerGeneratedAttribute]
public void set_OutlierOutline(ScreenPoint[] value);
    [CompilerGeneratedAttribute]
public bool get_ShowBox();
    [CompilerGeneratedAttribute]
public void set_ShowBox(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowMedianAsDot();
    [CompilerGeneratedAttribute]
public void set_ShowMedianAsDot(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowMeanAsDot();
    [CompilerGeneratedAttribute]
public void set_ShowMeanAsDot(bool value);
    [CompilerGeneratedAttribute]
public OxyColor get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_WhiskerWidth();
    [CompilerGeneratedAttribute]
public void set_WhiskerWidth(double value);
    protected IList`1<BoxPlotItem> get_ActualItems();
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual bool IsValidPoint(BoxPlotItem item, Axis xaxis, Axis yaxis);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected void InternalUpdateMaxMin(IList`1<BoxPlotItem> items);
    protected virtual object GetItem(int i);
    private OxyRect GetBoxRect(BoxPlotItem item);
    private void ClearItemsSourceItems();
    [CompilerGeneratedAttribute]
private double <Render>b__80_1(ScreenPoint o);
}
[ObsoleteAttribute("Use separate candlestick and volume series instead.")]
public class OxyPlot.Series.CandleStickAndVolumeSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private List`1<OhlcvItem> data;
    private double minDx;
    private int winIndex;
    [CompilerGeneratedAttribute]
private LinearAxis <VolumeAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumeAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BarAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private VolumeStyle <VolumeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeIntensity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SeparatorStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <SeparatorLineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <PositiveColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <SeparatorColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositiveHollow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NegativeHollow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CandleWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AverageVolume>k__BackingField;
    public List`1<OhlcvItem> Items { get; public set; }
    public LinearAxis BarAxis { get; }
    public LinearAxis VolumeAxis { get; private set; }
    public string VolumeAxisKey { get; public set; }
    public string BarAxisKey { get; public set; }
    public VolumeStyle VolumeStyle { get; public set; }
    public double StrokeThickness { get; public set; }
    public double StrokeIntensity { get; public set; }
    public double SeparatorStrokeThickness { get; public set; }
    public LineStyle SeparatorLineStyle { get; public set; }
    public OxyColor PositiveColor { get; public set; }
    public OxyColor NegativeColor { get; public set; }
    public OxyColor SeparatorColor { get; public set; }
    public bool PositiveHollow { get; public set; }
    public bool NegativeHollow { get; public set; }
    public double CandleWidth { get; public set; }
    public double MinimumVolume { get; protected set; }
    public double MaximumVolume { get; protected set; }
    public double AverageVolume { get; protected set; }
    public List`1<OhlcvItem> get_Items();
    public void set_Items(List`1<OhlcvItem> value);
    public LinearAxis get_BarAxis();
    [CompilerGeneratedAttribute]
public LinearAxis get_VolumeAxis();
    [CompilerGeneratedAttribute]
private void set_VolumeAxis(LinearAxis value);
    [CompilerGeneratedAttribute]
public string get_VolumeAxisKey();
    [CompilerGeneratedAttribute]
public void set_VolumeAxisKey(string value);
    [CompilerGeneratedAttribute]
public string get_BarAxisKey();
    [CompilerGeneratedAttribute]
public void set_BarAxisKey(string value);
    [CompilerGeneratedAttribute]
public VolumeStyle get_VolumeStyle();
    [CompilerGeneratedAttribute]
public void set_VolumeStyle(VolumeStyle value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeIntensity();
    [CompilerGeneratedAttribute]
public void set_StrokeIntensity(double value);
    [CompilerGeneratedAttribute]
public double get_SeparatorStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_SeparatorStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public LineStyle get_SeparatorLineStyle();
    [CompilerGeneratedAttribute]
public void set_SeparatorLineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public OxyColor get_PositiveColor();
    [CompilerGeneratedAttribute]
public void set_PositiveColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeColor();
    [CompilerGeneratedAttribute]
public void set_NegativeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_SeparatorColor();
    [CompilerGeneratedAttribute]
public void set_SeparatorColor(OxyColor value);
    [CompilerGeneratedAttribute]
public bool get_PositiveHollow();
    [CompilerGeneratedAttribute]
public void set_PositiveHollow(bool value);
    [CompilerGeneratedAttribute]
public bool get_NegativeHollow();
    [CompilerGeneratedAttribute]
public void set_NegativeHollow(bool value);
    [CompilerGeneratedAttribute]
public double get_CandleWidth();
    [CompilerGeneratedAttribute]
public void set_CandleWidth(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumVolume();
    [CompilerGeneratedAttribute]
protected void set_MinimumVolume(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumVolume();
    [CompilerGeneratedAttribute]
protected void set_MaximumVolume(double value);
    [CompilerGeneratedAttribute]
public double get_AverageVolume();
    [CompilerGeneratedAttribute]
protected void set_AverageVolume(double value);
    public void Append(OhlcvItem bar);
    public int FindByX(double x, int startingIndex);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void UpdateData();
    protected internal virtual void EnsureAxes();
    protected internal virtual void UpdateAxisMaxMin();
    protected internal virtual void UpdateMaxMin();
    protected OxyRect GetClippingRect(Axis yaxis);
    protected OxyRect GetSeparationClippingRect();
    [CompilerGeneratedAttribute]
private bool <EnsureAxes>b__84_0(Axis a);
}
public class OxyPlot.Series.CandleStickSeries : HighLowSeries {
    private double minDx;
    [CompilerGeneratedAttribute]
private OxyColor <IncreasingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <DecreasingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CandleWidth>k__BackingField;
    public OxyColor IncreasingColor { get; public set; }
    public OxyColor DecreasingColor { get; public set; }
    public double CandleWidth { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_IncreasingColor();
    [CompilerGeneratedAttribute]
public void set_IncreasingColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_DecreasingColor();
    [CompilerGeneratedAttribute]
public void set_DecreasingColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_CandleWidth();
    [CompilerGeneratedAttribute]
public void set_CandleWidth(double value);
    public int FindByX(double x, int startIndex);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void UpdateData();
}
public class OxyPlot.Series.ContourSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private List`1<Contour> contours;
    private List`1<ContourSegment> segments;
    private OxyColor defaultColor;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <ColumnCoordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ContourLevelStep>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <ContourLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor[] <ContourColors>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[0...,0...] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <LabelBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LabelStep>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <RowCoordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumSegmentLength>k__BackingField;
    public OxyColor Color { get; public set; }
    public OxyColor ActualColor { get; }
    public Double[] ColumnCoordinates { get; public set; }
    public double ContourLevelStep { get; public set; }
    public Double[] ContourLevels { get; public set; }
    public OxyColor[] ContourColors { get; public set; }
    public Double[0...,0...] Data { get; public set; }
    public OxyColor LabelBackground { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelSpacing { get; public set; }
    public bool MultiLabel { get; public set; }
    public int LabelStep { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public Double[] RowCoordinates { get; public set; }
    public double StrokeThickness { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    public OxyColor get_ActualColor();
    [CompilerGeneratedAttribute]
public Double[] get_ColumnCoordinates();
    [CompilerGeneratedAttribute]
public void set_ColumnCoordinates(Double[] value);
    [CompilerGeneratedAttribute]
public double get_ContourLevelStep();
    [CompilerGeneratedAttribute]
public void set_ContourLevelStep(double value);
    [CompilerGeneratedAttribute]
public Double[] get_ContourLevels();
    [CompilerGeneratedAttribute]
public void set_ContourLevels(Double[] value);
    [CompilerGeneratedAttribute]
public OxyColor[] get_ContourColors();
    [CompilerGeneratedAttribute]
public void set_ContourColors(OxyColor[] value);
    [CompilerGeneratedAttribute]
public Double[0...,0...] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Double[0...,0...] value);
    [CompilerGeneratedAttribute]
public OxyColor get_LabelBackground();
    [CompilerGeneratedAttribute]
public void set_LabelBackground(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelSpacing();
    [CompilerGeneratedAttribute]
public void set_LabelSpacing(double value);
    [CompilerGeneratedAttribute]
public bool get_MultiLabel();
    [CompilerGeneratedAttribute]
public void set_MultiLabel(bool value);
    [CompilerGeneratedAttribute]
public int get_LabelStep();
    [CompilerGeneratedAttribute]
public void set_LabelStep(int value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public Double[] get_RowCoordinates();
    [CompilerGeneratedAttribute]
public void set_RowCoordinates(Double[] value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumSegmentLength();
    [CompilerGeneratedAttribute]
public void set_MinimumSegmentLength(double value);
    public void CalculateContours();
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateMaxMin();
    private static int IndexOf(IList`1<double> values, double value);
    private void AddContourLabels(Contour contour, ScreenPoint[] pts, ICollection`1<ContourLabel> contourLabels, double labelIndex);
    private void JoinContourSegments(double epsFactor);
    private void RenderLabel(IRenderContext rc, ContourLabel cl);
    private void RenderLabelBackground(IRenderContext rc, ContourLabel cl);
    [CompilerGeneratedAttribute]
private void <CalculateContours>b__67_0(double startX, double startY, double endX, double endY, double contourLevel);
    [IteratorStateMachineAttribute("OxyPlot.Series.ContourSeries/<<JoinContourSegments>g__GetPoints|74_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<SegmentPoint> <JoinContourSegments>g__GetPoints|74_0(ContourSegment segment);
}
public abstract class OxyPlot.Series.DataPointSeries : XYAxisSeries {
    private List`1<DataPoint> points;
    private List`1<DataPoint> itemsSourcePoints;
    private bool ownsItemsSourcePoints;
    [CompilerGeneratedAttribute]
private bool <CanTrackerInterpolatePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldX>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldY>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, DataPoint> <Mapping>k__BackingField;
    public bool CanTrackerInterpolatePoints { get; public set; }
    public string DataFieldX { get; public set; }
    public string DataFieldY { get; public set; }
    public Func`2<object, DataPoint> Mapping { get; public set; }
    public List`1<DataPoint> Points { get; }
    protected List`1<DataPoint> ActualPoints { get; }
    [CompilerGeneratedAttribute]
public bool get_CanTrackerInterpolatePoints();
    [CompilerGeneratedAttribute]
public void set_CanTrackerInterpolatePoints(bool value);
    [CompilerGeneratedAttribute]
public string get_DataFieldX();
    [CompilerGeneratedAttribute]
public void set_DataFieldX(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldY();
    [CompilerGeneratedAttribute]
public void set_DataFieldY(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, DataPoint> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, DataPoint> value);
    public List`1<DataPoint> get_Points();
    protected List`1<DataPoint> get_ActualPoints();
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected virtual object GetItem(int i);
    private void ClearItemsSourcePoints();
    private void UpdateItemsSourcePoints();
}
public class OxyPlot.Series.DataRange : ValueType {
    public static DataRange Undefined;
    private double minimum;
    private double maximum;
    private bool isDefined;
    public double Minimum { get; }
    public double Maximum { get; }
    public double Range { get; }
    public DataRange(double min, double max);
    private static DataRange();
    public double get_Minimum();
    public double get_Maximum();
    public double get_Range();
    public bool IsDefined();
    public bool Contains(double value);
    public bool IntersectsWith(DataRange other);
    public sealed virtual string ToCode();
    public virtual string ToString();
}
public class OxyPlot.Series.ErrorBarItem : BarItem {
    [CompilerGeneratedAttribute]
private double <Error>k__BackingField;
    public double Error { get; public set; }
    public ErrorBarItem(double value, double error, int categoryIndex);
    [CompilerGeneratedAttribute]
public double get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(double value);
    public virtual string ToCode();
}
public class OxyPlot.Series.ErrorBarSeries : BarSeries {
    public static string DefaultTrackerFormatString;
    [CompilerGeneratedAttribute]
private double <ErrorStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ErrorWidth>k__BackingField;
    public double ErrorStrokeThickness { get; public set; }
    public double ErrorWidth { get; public set; }
    [CompilerGeneratedAttribute]
public double get_ErrorStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_ErrorStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_ErrorWidth();
    [CompilerGeneratedAttribute]
public void set_ErrorWidth(double value);
    protected internal virtual void UpdateMaxMin();
    protected virtual void RenderItem(IRenderContext rc, double barValue, double categoryValue, double actualBarWidth, BarItem item, OxyRect rect);
}
public class OxyPlot.Series.ExtrapolationLineSeries : LineSeries {
    private OxyColor defaultExtrapolationColor;
    private LineStyle defaultExtrapolationLineStyle;
    private List`1<DataRange> orderedIntervals;
    [CompilerGeneratedAttribute]
private OxyColor <ExtrapolationColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <ExtrapolationDashes>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <ExtrapolationLineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreExtraplotationForScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DataRange> <Intervals>k__BackingField;
    public OxyColor ExtrapolationColor { get; public set; }
    public OxyColor ActualExtrapolationColor { get; }
    public Double[] ExtrapolationDashes { get; public set; }
    public LineStyle ExtrapolationLineStyle { get; public set; }
    public LineStyle ActualExtrapolationLineStyle { get; }
    public bool IgnoreExtraplotationForScaling { get; public set; }
    public IList`1<DataRange> Intervals { get; }
    protected Double[] ActualExtrapolationDashArray { get; }
    [CompilerGeneratedAttribute]
public OxyColor get_ExtrapolationColor();
    [CompilerGeneratedAttribute]
public void set_ExtrapolationColor(OxyColor value);
    public OxyColor get_ActualExtrapolationColor();
    [CompilerGeneratedAttribute]
public Double[] get_ExtrapolationDashes();
    [CompilerGeneratedAttribute]
public void set_ExtrapolationDashes(Double[] value);
    [CompilerGeneratedAttribute]
public LineStyle get_ExtrapolationLineStyle();
    [CompilerGeneratedAttribute]
public void set_ExtrapolationLineStyle(LineStyle value);
    public LineStyle get_ActualExtrapolationLineStyle();
    [CompilerGeneratedAttribute]
public bool get_IgnoreExtraplotationForScaling();
    [CompilerGeneratedAttribute]
public void set_IgnoreExtraplotationForScaling(bool value);
    [CompilerGeneratedAttribute]
public IList`1<DataRange> get_Intervals();
    protected Double[] get_ActualExtrapolationDashArray();
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected virtual void RenderLine(IRenderContext rc, IList`1<ScreenPoint> pointsToRender);
    [IteratorStateMachineAttribute("OxyPlot.Series.ExtrapolationLineSeries/<CreateClippingRectangles>d__33")]
private IEnumerable`1<OxyRect> CreateClippingRectangles(OxyRect clippingRect, double minX, double maxX, double minY, double maxY);
    [IteratorStateMachineAttribute("OxyPlot.Series.ExtrapolationLineSeries/<Flatten>d__34")]
private IEnumerable`1<double> Flatten(IEnumerable`1<DataRange> intervals);
    private void RenderLinePart(IRenderContext rc, IList`1<ScreenPoint> pointsToRender, bool isInterval);
    private List`1<DataRange> MergeOverlaps(IEnumerable`1<DataRange> intervals);
    private bool InAnyInterval(double x);
    private int Compare(DataRange interval, double x);
    [CompilerGeneratedAttribute]
private bool <UpdateMaxMin>b__31_0(DataPoint p);
    [CompilerGeneratedAttribute]
private bool <UpdateMaxMin>b__31_3(DataPoint p);
    [CompilerGeneratedAttribute]
private bool <UpdateMaxMin>b__31_6(DataPoint p);
    [CompilerGeneratedAttribute]
private bool <UpdateMaxMin>b__31_9(DataPoint p);
}
public class OxyPlot.Series.FunctionSeries : LineSeries {
    public FunctionSeries(Func`2<double, double> f, double x0, double x1, double dx, string title);
    public FunctionSeries(Func`2<double, double> f, double x0, double x1, int n, string title);
    public FunctionSeries(Func`2<double, double> fx, Func`2<double, double> fy, double t0, double t1, double dt, string title);
    public FunctionSeries(Func`2<double, double> fx, Func`2<double, double> fy, double t0, double t1, int n, string title);
}
public enum OxyPlot.Series.HeatMapCoordinateDefinition : Enum {
    public int value__;
    public static HeatMapCoordinateDefinition Center;
    public static HeatMapCoordinateDefinition Edge;
}
public enum OxyPlot.Series.HeatMapRenderMethod : Enum {
    public int value__;
    public static HeatMapRenderMethod Bitmap;
    public static HeatMapRenderMethod Rectangles;
}
public class OxyPlot.Series.HeatMapSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private static string DefaultColorAxisTitle;
    private int dataHash;
    private int colorAxisHash;
    private OxyImage image;
    [CompilerGeneratedAttribute]
private double <X0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y1>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[0...,0...] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interpolate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorAxis <ColorAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private HeatMapCoordinateDefinition <CoordinateDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private HeatMapRenderMethod <RenderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelFontSize>k__BackingField;
    public double X0 { get; public set; }
    public double X1 { get; public set; }
    public double Y0 { get; public set; }
    public double Y1 { get; public set; }
    public Double[0...,0...] Data { get; public set; }
    public bool Interpolate { get; public set; }
    public double MinValue { get; private set; }
    public double MaxValue { get; private set; }
    public IColorAxis ColorAxis { get; protected set; }
    public string ColorAxisKey { get; public set; }
    public HeatMapCoordinateDefinition CoordinateDefinition { get; public set; }
    public HeatMapRenderMethod RenderMethod { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelFontSize { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X0();
    [CompilerGeneratedAttribute]
public void set_X0(double value);
    [CompilerGeneratedAttribute]
public double get_X1();
    [CompilerGeneratedAttribute]
public void set_X1(double value);
    [CompilerGeneratedAttribute]
public double get_Y0();
    [CompilerGeneratedAttribute]
public void set_Y0(double value);
    [CompilerGeneratedAttribute]
public double get_Y1();
    [CompilerGeneratedAttribute]
public void set_Y1(double value);
    [CompilerGeneratedAttribute]
public Double[0...,0...] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Double[0...,0...] value);
    [CompilerGeneratedAttribute]
public bool get_Interpolate();
    [CompilerGeneratedAttribute]
public void set_Interpolate(bool value);
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(double value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public IColorAxis get_ColorAxis();
    [CompilerGeneratedAttribute]
protected void set_ColorAxis(IColorAxis value);
    [CompilerGeneratedAttribute]
public string get_ColorAxisKey();
    [CompilerGeneratedAttribute]
public void set_ColorAxisKey(string value);
    [CompilerGeneratedAttribute]
public HeatMapCoordinateDefinition get_CoordinateDefinition();
    [CompilerGeneratedAttribute]
public void set_CoordinateDefinition(HeatMapCoordinateDefinition value);
    [CompilerGeneratedAttribute]
public HeatMapRenderMethod get_RenderMethod();
    [CompilerGeneratedAttribute]
public void set_RenderMethod(HeatMapRenderMethod value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelFontSize();
    [CompilerGeneratedAttribute]
public void set_LabelFontSize(double value);
    public void Invalidate();
    public virtual void Render(IRenderContext rc);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void EnsureAxes();
    protected internal void UpdateMaxMinXY();
    protected internal virtual void UpdateMaxMin();
    protected internal virtual void UpdateAxisMaxMin();
    protected virtual void RenderLabels(IRenderContext rc, OxyRect rect);
    protected virtual string GetLabel(double v, int i, int j);
    private static double GetValue(Double[0...,0...] data, double i, double j);
    private bool IsPointInRange(DataPoint p);
    private void UpdateImage();
}
public class OxyPlot.Series.HighLowItem : object {
    public static HighLowItem Undefined;
    [CompilerGeneratedAttribute]
private double <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private double <High>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    public double Close { get; public set; }
    public double High { get; public set; }
    public double Low { get; public set; }
    public double Open { get; public set; }
    public double X { get; public set; }
    public HighLowItem(double x, double high, double low, double open, double close);
    private static HighLowItem();
    [CompilerGeneratedAttribute]
public double get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(double value);
    [CompilerGeneratedAttribute]
public double get_High();
    [CompilerGeneratedAttribute]
public void set_High(double value);
    [CompilerGeneratedAttribute]
public double get_Low();
    [CompilerGeneratedAttribute]
public void set_Low(double value);
    [CompilerGeneratedAttribute]
public double get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(double value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    public sealed virtual string ToCode();
}
public class OxyPlot.Series.HighLowSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private List`1<HighLowItem> items;
    private OxyColor defaultColor;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Dashes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldClose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldHigh>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldLow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldX>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, HighLowItem> <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLength>k__BackingField;
    public OxyColor Color { get; public set; }
    public OxyColor ActualColor { get; }
    public Double[] Dashes { get; public set; }
    public string DataFieldClose { get; public set; }
    public string DataFieldHigh { get; public set; }
    public string DataFieldLow { get; public set; }
    public string DataFieldOpen { get; public set; }
    public string DataFieldX { get; public set; }
    public List`1<HighLowItem> Items { get; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public Func`2<object, HighLowItem> Mapping { get; public set; }
    public double StrokeThickness { get; public set; }
    public double TickLength { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    public OxyColor get_ActualColor();
    [CompilerGeneratedAttribute]
public Double[] get_Dashes();
    [CompilerGeneratedAttribute]
public void set_Dashes(Double[] value);
    [CompilerGeneratedAttribute]
public string get_DataFieldClose();
    [CompilerGeneratedAttribute]
public void set_DataFieldClose(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldHigh();
    [CompilerGeneratedAttribute]
public void set_DataFieldHigh(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldLow();
    [CompilerGeneratedAttribute]
public void set_DataFieldLow(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldOpen();
    [CompilerGeneratedAttribute]
public void set_DataFieldOpen(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldX();
    [CompilerGeneratedAttribute]
public void set_DataFieldX(string value);
    public List`1<HighLowItem> get_Items();
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public Func`2<object, HighLowItem> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, HighLowItem> value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_TickLength();
    [CompilerGeneratedAttribute]
public void set_TickLength(double value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual bool IsValidItem(HighLowItem pt, Axis xaxis, Axis yaxis);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
}
public class OxyPlot.Series.HistogramItem : object {
    [CompilerGeneratedAttribute]
private double <RangeStart>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RangeEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Area>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    public double RangeStart { get; public set; }
    public double RangeEnd { get; public set; }
    public double Area { get; public set; }
    public double RangeCenter { get; }
    public int Count { get; public set; }
    public OxyColor Color { get; public set; }
    public double Width { get; }
    public double Height { get; }
    public double Value { get; }
    public HistogramItem(double rangeStart, double rangeEnd, double area, int count);
    public HistogramItem(double rangeStart, double rangeEnd, double area, int count, OxyColor color);
    [CompilerGeneratedAttribute]
public double get_RangeStart();
    [CompilerGeneratedAttribute]
public void set_RangeStart(double value);
    [CompilerGeneratedAttribute]
public double get_RangeEnd();
    [CompilerGeneratedAttribute]
public void set_RangeEnd(double value);
    [CompilerGeneratedAttribute]
public double get_Area();
    [CompilerGeneratedAttribute]
public void set_Area(double value);
    public double get_RangeCenter();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    public double get_Width();
    public double get_Height();
    public double get_Value();
    public bool Contains(DataPoint p);
    public sealed virtual string ToCode();
    public virtual string ToString();
}
public class OxyPlot.Series.HistogramSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private OxyColor defaultFillColor;
    private List`1<HistogramItem> actualItems;
    private bool ownsActualItems;
    [CompilerGeneratedAttribute]
private double <BaseValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualBaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeStrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelPlacement <LabelPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HistogramItem, OxyColor> <ColorMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, HistogramItem> <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HistogramItem> <Items>k__BackingField;
    public double BaseValue { get; public set; }
    public double BaseLine { get; public set; }
    public double ActualBaseLine { get; protected set; }
    public OxyColor FillColor { get; public set; }
    public OxyColor ActualFillColor { get; }
    public OxyColor StrokeColor { get; public set; }
    public OxyColor NegativeFillColor { get; public set; }
    public OxyColor NegativeStrokeColor { get; public set; }
    public double StrokeThickness { get; public set; }
    public double MinValue { get; private set; }
    public double MaxValue { get; private set; }
    public string LabelFormatString { get; public set; }
    public double LabelMargin { get; public set; }
    public LabelPlacement LabelPlacement { get; public set; }
    public Func`2<HistogramItem, OxyColor> ColorMapping { get; public set; }
    public Func`2<object, HistogramItem> Mapping { get; public set; }
    public List`1<HistogramItem> Items { get; }
    protected List`1<HistogramItem> ActualItems { get; }
    [CompilerGeneratedAttribute]
public double get_BaseValue();
    [CompilerGeneratedAttribute]
public void set_BaseValue(double value);
    [CompilerGeneratedAttribute]
public double get_BaseLine();
    [CompilerGeneratedAttribute]
public void set_BaseLine(double value);
    [CompilerGeneratedAttribute]
public double get_ActualBaseLine();
    [CompilerGeneratedAttribute]
protected void set_ActualBaseLine(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(OxyColor value);
    public OxyColor get_ActualFillColor();
    [CompilerGeneratedAttribute]
public OxyColor get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeFillColor();
    [CompilerGeneratedAttribute]
public void set_NegativeFillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeStrokeColor();
    [CompilerGeneratedAttribute]
public void set_NegativeStrokeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(double value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelMargin();
    [CompilerGeneratedAttribute]
public void set_LabelMargin(double value);
    [CompilerGeneratedAttribute]
public LabelPlacement get_LabelPlacement();
    [CompilerGeneratedAttribute]
public void set_LabelPlacement(LabelPlacement value);
    [CompilerGeneratedAttribute]
public Func`2<HistogramItem, OxyColor> get_ColorMapping();
    [CompilerGeneratedAttribute]
public void set_ColorMapping(Func`2<HistogramItem, OxyColor> value);
    [CompilerGeneratedAttribute]
public Func`2<object, HistogramItem> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, HistogramItem> value);
    [CompilerGeneratedAttribute]
public List`1<HistogramItem> get_Items();
    protected List`1<HistogramItem> get_ActualItems();
    public virtual void Render(IRenderContext rc);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void UpdateData();
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateAxisMaxMin();
    protected void ComputeActualBaseLine();
    protected internal void UpdateMaxMinXY();
    protected internal virtual void UpdateMaxMin();
    protected virtual object GetItem(int i);
    protected void RenderBins(IRenderContext rc, ICollection`1<HistogramItem> items);
    protected OxyColor GetItemFillColor(HistogramItem item);
    protected OxyColor GetItemStrokeColor(HistogramItem item);
    protected void RenderLabel(IRenderContext rc, OxyRect rect, HistogramItem item);
    private bool IsPointInRange(DataPoint p);
    private void ClearActualItems();
    private OxyColor GetDefaultColor(HistogramItem item);
    private void UpdateActualItems();
}
public interface OxyPlot.Series.IBarSeries {
    public double BarWidth { get; }
    public CategoryAxis CategoryAxis { get; }
    public bool IsVisible { get; }
    public BarSeriesManager Manager { get; public set; }
    public PlotModel PlotModel { get; }
    public Axis ValueAxis { get; }
    public IReadOnlyList`1<BarItemBase> ActualItems { get; }
    public abstract virtual double get_BarWidth();
    public abstract virtual CategoryAxis get_CategoryAxis();
    public abstract virtual bool get_IsVisible();
    public abstract virtual BarSeriesManager get_Manager();
    public abstract virtual void set_Manager(BarSeriesManager value);
    public abstract virtual PlotModel get_PlotModel();
    public abstract virtual Axis get_ValueAxis();
    public abstract virtual void UpdateValidData();
    public abstract virtual IReadOnlyList`1<BarItemBase> get_ActualItems();
}
public class OxyPlot.Series.IntervalBarItem : BarItemBase {
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <End>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public OxyColor Color { get; public set; }
    public double End { get; public set; }
    public double Start { get; public set; }
    public string Title { get; public set; }
    public IntervalBarItem(double start, double end, string title);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_End();
    [CompilerGeneratedAttribute]
public void set_End(double value);
    [CompilerGeneratedAttribute]
public double get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(double value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public sealed virtual string ToCode();
}
public class OxyPlot.Series.IntervalBarSeries : BarSeriesBase`1<IntervalBarItem> {
    public static string DefaultTrackerFormatString;
    private OxyColor defaultFillColor;
    [CompilerGeneratedAttribute]
private string <ColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndField>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartField>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyRect> <ActualBarRectangles>k__BackingField;
    public OxyColor ActualFillColor { get; }
    public string ColorField { get; public set; }
    public string EndField { get; public set; }
    public OxyColor FillColor { get; public set; }
    public bool IsStacked { get; }
    public bool OverlapsStack { get; }
    public string LabelFormatString { get; public set; }
    public string StackGroup { get; }
    public string StartField { get; public set; }
    protected internal IList`1<OxyRect> ActualBarRectangles { get; protected internal set; }
    public OxyColor get_ActualFillColor();
    [CompilerGeneratedAttribute]
public string get_ColorField();
    [CompilerGeneratedAttribute]
public void set_ColorField(string value);
    [CompilerGeneratedAttribute]
public string get_EndField();
    [CompilerGeneratedAttribute]
public void set_EndField(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(OxyColor value);
    public sealed virtual bool get_IsStacked();
    public sealed virtual bool get_OverlapsStack();
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    public sealed virtual string get_StackGroup();
    [CompilerGeneratedAttribute]
public string get_StartField();
    [CompilerGeneratedAttribute]
public void set_StartField(string value);
    [CompilerGeneratedAttribute]
protected internal IList`1<OxyRect> get_ActualBarRectangles();
    [CompilerGeneratedAttribute]
protected internal void set_ActualBarRectangles(IList`1<OxyRect> value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateMaxMin();
    protected virtual bool IsValid(IntervalBarItem item);
    public virtual void Render(IRenderContext rc);
    protected virtual bool UpdateFromDataFields();
}
public interface OxyPlot.Series.IScatterPointProvider {
    public abstract virtual ScatterPoint GetScatterPoint();
}
public interface OxyPlot.Series.IStackableSeries {
    public bool IsStacked { get; }
    public bool OverlapsStack { get; }
    public string StackGroup { get; }
    public abstract virtual bool get_IsStacked();
    public abstract virtual bool get_OverlapsStack();
    public abstract virtual string get_StackGroup();
}
public abstract class OxyPlot.Series.ItemsSeries : Series {
    [CompilerGeneratedAttribute]
private IEnumerable <ItemsSource>k__BackingField;
    [CodeGenerationAttribute("False")]
public IEnumerable ItemsSource { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_ItemsSource();
    [CompilerGeneratedAttribute]
public void set_ItemsSource(IEnumerable value);
    protected static object GetItem(IEnumerable itemsSource, int index);
    protected virtual object GetItem(int i);
}
public enum OxyPlot.Series.LabelPlacement : Enum {
    public int value__;
    public static LabelPlacement Outside;
    public static LabelPlacement Inside;
    public static LabelPlacement Middle;
    public static LabelPlacement Base;
}
public class OxyPlot.Series.LinearBarSeries : DataPointSeries {
    private List`1<OxyRect> rectangles;
    private List`1<int> rectanglesPointIndexes;
    private OxyColor defaultColor;
    [CompilerGeneratedAttribute]
private OxyColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeStrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BaseValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualBaseLine>k__BackingField;
    public OxyColor FillColor { get; public set; }
    public double BarWidth { get; public set; }
    public double StrokeThickness { get; public set; }
    public OxyColor StrokeColor { get; public set; }
    public OxyColor NegativeFillColor { get; public set; }
    public OxyColor NegativeStrokeColor { get; public set; }
    public OxyColor ActualColor { get; }
    public double BaseValue { get; public set; }
    public double BaseLine { get; public set; }
    public double ActualBaseLine { get; protected set; }
    [CompilerGeneratedAttribute]
public OxyColor get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_BarWidth();
    [CompilerGeneratedAttribute]
public void set_BarWidth(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeFillColor();
    [CompilerGeneratedAttribute]
public void set_NegativeFillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeStrokeColor();
    [CompilerGeneratedAttribute]
public void set_NegativeStrokeColor(OxyColor value);
    public OxyColor get_ActualColor();
    [CompilerGeneratedAttribute]
public double get_BaseValue();
    [CompilerGeneratedAttribute]
public void set_BaseValue(double value);
    [CompilerGeneratedAttribute]
public double get_BaseLine();
    [CompilerGeneratedAttribute]
public void set_BaseLine(double value);
    [CompilerGeneratedAttribute]
public double get_ActualBaseLine();
    [CompilerGeneratedAttribute]
protected void set_ActualBaseLine(double value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateAxisMaxMin();
    protected void ComputeActualBaseLine();
    private int FindRectangleIndex(ScreenPoint point);
    private void RenderBars(IRenderContext rc, List`1<DataPoint> actualPoints);
    private double GetBarWidth(List`1<DataPoint> actualPoints);
    private BarColors GetBarColors(double y);
}
public enum OxyPlot.Series.LineLegendPosition : Enum {
    public int value__;
    public static LineLegendPosition None;
    public static LineLegendPosition Start;
    public static LineLegendPosition End;
}
public class OxyPlot.Series.LineSeries : DataPointSeries {
    private static double ToleranceDivisor;
    private List`1<ScreenPoint> outputBuffer;
    private List`1<ScreenPoint> contiguousScreenPointsBuffer;
    private List`1<ScreenPoint> decimatorBuffer;
    private OxyColor defaultColor;
    private OxyColor defaultMarkerFill;
    private LineStyle defaultLineStyle;
    private List`1<DataPoint> smoothedPoints;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <BrokenLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <BrokenLineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BrokenLineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Dashes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> <Decimator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private LineLegendPosition <LineLegendPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerFill>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint[] <MarkerOutline>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MarkerResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarkerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerStroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarkerStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumSegmentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterpolationAlgorithm <InterpolationAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    public OxyColor Color { get; public set; }
    public OxyColor BrokenLineColor { get; public set; }
    public LineStyle BrokenLineStyle { get; public set; }
    public double BrokenLineThickness { get; public set; }
    public Double[] Dashes { get; public set; }
    public Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> Decimator { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelMargin { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public LineLegendPosition LineLegendPosition { get; public set; }
    public OxyColor MarkerFill { get; public set; }
    public ScreenPoint[] MarkerOutline { get; public set; }
    public int MarkerResolution { get; public set; }
    public double MarkerSize { get; public set; }
    public OxyColor MarkerStroke { get; public set; }
    public double MarkerStrokeThickness { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    public IInterpolationAlgorithm InterpolationAlgorithm { get; public set; }
    public double StrokeThickness { get; public set; }
    public OxyColor ActualColor { get; }
    public OxyColor ActualMarkerFill { get; }
    protected LineStyle ActualLineStyle { get; }
    protected Double[] ActualDashArray { get; }
    protected List`1<DataPoint> SmoothedPoints { get; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_BrokenLineColor();
    [CompilerGeneratedAttribute]
public void set_BrokenLineColor(OxyColor value);
    [CompilerGeneratedAttribute]
public LineStyle get_BrokenLineStyle();
    [CompilerGeneratedAttribute]
public void set_BrokenLineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public double get_BrokenLineThickness();
    [CompilerGeneratedAttribute]
public void set_BrokenLineThickness(double value);
    [CompilerGeneratedAttribute]
public Double[] get_Dashes();
    [CompilerGeneratedAttribute]
public void set_Dashes(Double[] value);
    [CompilerGeneratedAttribute]
public Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> get_Decimator();
    [CompilerGeneratedAttribute]
public void set_Decimator(Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelMargin();
    [CompilerGeneratedAttribute]
public void set_LabelMargin(double value);
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public LineLegendPosition get_LineLegendPosition();
    [CompilerGeneratedAttribute]
public void set_LineLegendPosition(LineLegendPosition value);
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerFill();
    [CompilerGeneratedAttribute]
public void set_MarkerFill(OxyColor value);
    [CompilerGeneratedAttribute]
public ScreenPoint[] get_MarkerOutline();
    [CompilerGeneratedAttribute]
public void set_MarkerOutline(ScreenPoint[] value);
    [CompilerGeneratedAttribute]
public int get_MarkerResolution();
    [CompilerGeneratedAttribute]
public void set_MarkerResolution(int value);
    [CompilerGeneratedAttribute]
public double get_MarkerSize();
    [CompilerGeneratedAttribute]
public void set_MarkerSize(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerStroke();
    [CompilerGeneratedAttribute]
public void set_MarkerStroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_MarkerStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_MarkerStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public double get_MinimumSegmentLength();
    [CompilerGeneratedAttribute]
public void set_MinimumSegmentLength(double value);
    [CompilerGeneratedAttribute]
public IInterpolationAlgorithm get_InterpolationAlgorithm();
    [CompilerGeneratedAttribute]
public void set_InterpolationAlgorithm(IInterpolationAlgorithm value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    public OxyColor get_ActualColor();
    public OxyColor get_ActualMarkerFill();
    protected LineStyle get_ActualLineStyle();
    protected Double[] get_ActualDashArray();
    protected List`1<DataPoint> get_SmoothedPoints();
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateMaxMin();
    protected void RenderPoints(IRenderContext rc, IList`1<DataPoint> points);
    protected bool ExtractNextContiguousLineSegment(IList`1<DataPoint> points, Int32& pointIdx, Nullable`1& previousContiguousLineSegmentEndPoint, double xmax, List`1<ScreenPoint> broken, List`1<ScreenPoint> contiguous);
    protected void RenderPointLabels(IRenderContext rc);
    protected void RenderLegendOnLine(IRenderContext rc);
    protected virtual void RenderLineAndMarkers(IRenderContext rc, IList`1<ScreenPoint> pointsToRender);
    protected virtual void RenderLine(IRenderContext rc, IList`1<ScreenPoint> pointsToRender);
    protected virtual void ResetSmoothedPoints();
}
public class OxyPlot.Series.OhlcvItem : object {
    public static OhlcvItem Undefined;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private double <High>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BuyVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SellVolume>k__BackingField;
    public double X { get; public set; }
    public double Open { get; public set; }
    public double High { get; public set; }
    public double Low { get; public set; }
    public double Close { get; public set; }
    public double BuyVolume { get; public set; }
    public double SellVolume { get; public set; }
    public OhlcvItem(double x, double open, double high, double low, double close, double buyvolume, double sellvolume);
    private static OhlcvItem();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(double value);
    [CompilerGeneratedAttribute]
public double get_High();
    [CompilerGeneratedAttribute]
public void set_High(double value);
    [CompilerGeneratedAttribute]
public double get_Low();
    [CompilerGeneratedAttribute]
public void set_Low(double value);
    [CompilerGeneratedAttribute]
public double get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(double value);
    [CompilerGeneratedAttribute]
public double get_BuyVolume();
    [CompilerGeneratedAttribute]
public void set_BuyVolume(double value);
    [CompilerGeneratedAttribute]
public double get_SellVolume();
    [CompilerGeneratedAttribute]
public void set_SellVolume(double value);
    public static int FindIndex(List`1<OhlcvItem> items, double targetX, int guessIdx);
    public bool IsValid();
}
[ObsoleteAttribute("use replacement CandleStickSeries instead")]
public class OxyPlot.Series.OldCandleStickSeries : HighLowSeries {
    [CompilerGeneratedAttribute]
private double <CandleWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <IncreasingFill>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <DecreasingFill>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <ShadowEndColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ShadowEndLength>k__BackingField;
    public double CandleWidth { get; public set; }
    public OxyColor IncreasingFill { get; public set; }
    public OxyColor DecreasingFill { get; public set; }
    public OxyColor ShadowEndColor { get; public set; }
    public double ShadowEndLength { get; public set; }
    public OxyColor ActualIncreasingFill { get; }
    [CompilerGeneratedAttribute]
public double get_CandleWidth();
    [CompilerGeneratedAttribute]
public void set_CandleWidth(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_IncreasingFill();
    [CompilerGeneratedAttribute]
public void set_IncreasingFill(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_DecreasingFill();
    [CompilerGeneratedAttribute]
public void set_DecreasingFill(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_ShadowEndColor();
    [CompilerGeneratedAttribute]
public void set_ShadowEndColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_ShadowEndLength();
    [CompilerGeneratedAttribute]
public void set_ShadowEndLength(double value);
    public OxyColor get_ActualIncreasingFill();
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
}
public class OxyPlot.Series.PieSeries : ItemsSeries {
    public static string DefaultTrackerFormatString;
    private IList`1<PieSlice> slices;
    private List`1<IList`1<ScreenPoint>> slicePoints;
    private double total;
    [CompilerGeneratedAttribute]
private double <AngleIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AngleSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreInsideLabelsAngled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Diameter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExplodedDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InnerDiameter>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <InsideLabelColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InsideLabelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InsideLabelPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsExplodedField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutsideLabelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickHorizontalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLabelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickRadialLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueField>k__BackingField;
    public double AngleIncrement { get; public set; }
    public double AngleSpan { get; public set; }
    public bool AreInsideLabelsAngled { get; public set; }
    public string ColorField { get; public set; }
    public double Diameter { get; public set; }
    public double ExplodedDistance { get; public set; }
    public double InnerDiameter { get; public set; }
    public OxyColor InsideLabelColor { get; public set; }
    public string InsideLabelFormat { get; public set; }
    public double InsideLabelPosition { get; public set; }
    public string IsExplodedField { get; public set; }
    public string LabelField { get; public set; }
    public string LegendFormat { get; public set; }
    public string OutsideLabelFormat { get; public set; }
    public IList`1<PieSlice> Slices { get; public set; }
    public double StartAngle { get; public set; }
    public OxyColor Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    public double TickDistance { get; public set; }
    public double TickHorizontalLength { get; public set; }
    public double TickLabelDistance { get; public set; }
    public double TickRadialLength { get; public set; }
    public string ValueField { get; public set; }
    [CompilerGeneratedAttribute]
public double get_AngleIncrement();
    [CompilerGeneratedAttribute]
public void set_AngleIncrement(double value);
    [CompilerGeneratedAttribute]
public double get_AngleSpan();
    [CompilerGeneratedAttribute]
public void set_AngleSpan(double value);
    [CompilerGeneratedAttribute]
public bool get_AreInsideLabelsAngled();
    [CompilerGeneratedAttribute]
public void set_AreInsideLabelsAngled(bool value);
    [CompilerGeneratedAttribute]
public string get_ColorField();
    [CompilerGeneratedAttribute]
public void set_ColorField(string value);
    [CompilerGeneratedAttribute]
public double get_Diameter();
    [CompilerGeneratedAttribute]
public void set_Diameter(double value);
    [CompilerGeneratedAttribute]
public double get_ExplodedDistance();
    [CompilerGeneratedAttribute]
public void set_ExplodedDistance(double value);
    [CompilerGeneratedAttribute]
public double get_InnerDiameter();
    [CompilerGeneratedAttribute]
public void set_InnerDiameter(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_InsideLabelColor();
    [CompilerGeneratedAttribute]
public void set_InsideLabelColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_InsideLabelFormat();
    [CompilerGeneratedAttribute]
public void set_InsideLabelFormat(string value);
    [CompilerGeneratedAttribute]
public double get_InsideLabelPosition();
    [CompilerGeneratedAttribute]
public void set_InsideLabelPosition(double value);
    [CompilerGeneratedAttribute]
public string get_IsExplodedField();
    [CompilerGeneratedAttribute]
public void set_IsExplodedField(string value);
    [CompilerGeneratedAttribute]
public string get_LabelField();
    [CompilerGeneratedAttribute]
public void set_LabelField(string value);
    [CompilerGeneratedAttribute]
public string get_LegendFormat();
    [CompilerGeneratedAttribute]
public void set_LegendFormat(string value);
    [CompilerGeneratedAttribute]
public string get_OutsideLabelFormat();
    [CompilerGeneratedAttribute]
public void set_OutsideLabelFormat(string value);
    public IList`1<PieSlice> get_Slices();
    public void set_Slices(IList`1<PieSlice> value);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_TickDistance();
    [CompilerGeneratedAttribute]
public void set_TickDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TickHorizontalLength();
    [CompilerGeneratedAttribute]
public void set_TickHorizontalLength(double value);
    [CompilerGeneratedAttribute]
public double get_TickLabelDistance();
    [CompilerGeneratedAttribute]
public void set_TickLabelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TickRadialLength();
    [CompilerGeneratedAttribute]
public void set_TickRadialLength(double value);
    [CompilerGeneratedAttribute]
public string get_ValueField();
    [CompilerGeneratedAttribute]
public void set_ValueField(string value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual bool AreAxesRequired();
    protected internal virtual void EnsureAxes();
    protected internal virtual bool IsUsing(Axis axis);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateAxisMaxMin();
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
}
public class OxyPlot.Series.PieSlice : object {
    [CompilerGeneratedAttribute]
private OxyColor <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExploded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <DefaultFillColor>k__BackingField;
    public OxyColor Fill { get; public set; }
    public OxyColor ActualFillColor { get; }
    public bool IsExploded { get; public set; }
    public string Label { get; private set; }
    public double Value { get; private set; }
    internal OxyColor DefaultFillColor { get; internal set; }
    public PieSlice(string label, double value);
    [CompilerGeneratedAttribute]
public OxyColor get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(OxyColor value);
    public OxyColor get_ActualFillColor();
    [CompilerGeneratedAttribute]
public bool get_IsExploded();
    [CompilerGeneratedAttribute]
public void set_IsExploded(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    [CompilerGeneratedAttribute]
internal OxyColor get_DefaultFillColor();
    [CompilerGeneratedAttribute]
internal void set_DefaultFillColor(OxyColor value);
    public sealed virtual string ToCode();
}
public class OxyPlot.Series.RectangleBarItem : object {
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y1>k__BackingField;
    public OxyColor Color { get; public set; }
    public string Title { get; public set; }
    public double X0 { get; public set; }
    public double X1 { get; public set; }
    public double Y0 { get; public set; }
    public double Y1 { get; public set; }
    public RectangleBarItem(double x0, double y0, double x1, double y1);
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public double get_X0();
    [CompilerGeneratedAttribute]
public void set_X0(double value);
    [CompilerGeneratedAttribute]
public double get_X1();
    [CompilerGeneratedAttribute]
public void set_X1(double value);
    [CompilerGeneratedAttribute]
public double get_Y0();
    [CompilerGeneratedAttribute]
public void set_Y0(double value);
    [CompilerGeneratedAttribute]
public double get_Y1();
    [CompilerGeneratedAttribute]
public void set_Y1(double value);
    public sealed virtual string ToCode();
}
public class OxyPlot.Series.RectangleBarSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private OxyColor defaultFillColor;
    [CompilerGeneratedAttribute]
private OxyColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RectangleBarItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyRect> <ActualBarRectangles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RectangleBarItem> <ActualItems>k__BackingField;
    public OxyColor FillColor { get; public set; }
    public OxyColor ActualFillColor { get; }
    public IList`1<RectangleBarItem> Items { get; private set; }
    public string LabelFormatString { get; public set; }
    public OxyColor StrokeColor { get; public set; }
    public double StrokeThickness { get; public set; }
    internal IList`1<OxyRect> ActualBarRectangles { get; internal set; }
    internal IList`1<RectangleBarItem> ActualItems { get; internal set; }
    [CompilerGeneratedAttribute]
public OxyColor get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(OxyColor value);
    public OxyColor get_ActualFillColor();
    [CompilerGeneratedAttribute]
public IList`1<RectangleBarItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IList`1<RectangleBarItem> value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
internal IList`1<OxyRect> get_ActualBarRectangles();
    [CompilerGeneratedAttribute]
internal void set_ActualBarRectangles(IList`1<OxyRect> value);
    [CompilerGeneratedAttribute]
internal IList`1<RectangleBarItem> get_ActualItems();
    [CompilerGeneratedAttribute]
internal void set_ActualItems(IList`1<RectangleBarItem> value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected virtual bool IsValid(double v);
}
public class OxyPlot.Series.RectangleItem : object {
    public static RectangleItem Undefined;
    [CompilerGeneratedAttribute]
private DataPoint <A>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <B>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public DataPoint A { get; }
    public DataPoint B { get; }
    public double Value { get; }
    public RectangleItem(double x1, double x2, double y1, double y2, double value);
    public RectangleItem(DataPoint a, DataPoint b, double value);
    private static RectangleItem();
    [CompilerGeneratedAttribute]
public DataPoint get_A();
    [CompilerGeneratedAttribute]
public DataPoint get_B();
    [CompilerGeneratedAttribute]
public double get_Value();
    public bool Contains(DataPoint p);
    public sealed virtual string ToCode();
    public sealed virtual bool Equals(RectangleItem other);
    public virtual string ToString();
    public bool IsDefined();
}
public class OxyPlot.Series.RectangleSeries : XYAxisSeries {
    private List`1<RectangleItem> actualItems;
    private bool ownsActualItems;
    public static string DefaultTrackerFormatString;
    private static string DefaultColorAxisTitle;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorAxis <ColorAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanTrackerInterpolatePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, RectangleItem> <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RectangleItem> <Items>k__BackingField;
    public double MinValue { get; private set; }
    public double MaxValue { get; private set; }
    public IColorAxis ColorAxis { get; protected set; }
    public string ColorAxisKey { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelFontSize { get; public set; }
    public bool CanTrackerInterpolatePoints { get; public set; }
    public Func`2<object, RectangleItem> Mapping { get; public set; }
    public List`1<RectangleItem> Items { get; }
    protected List`1<RectangleItem> ActualItems { get; }
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(double value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public IColorAxis get_ColorAxis();
    [CompilerGeneratedAttribute]
protected void set_ColorAxis(IColorAxis value);
    [CompilerGeneratedAttribute]
public string get_ColorAxisKey();
    [CompilerGeneratedAttribute]
public void set_ColorAxisKey(string value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelFontSize();
    [CompilerGeneratedAttribute]
public void set_LabelFontSize(double value);
    [CompilerGeneratedAttribute]
public bool get_CanTrackerInterpolatePoints();
    [CompilerGeneratedAttribute]
public void set_CanTrackerInterpolatePoints(bool value);
    [CompilerGeneratedAttribute]
public Func`2<object, RectangleItem> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, RectangleItem> value);
    [CompilerGeneratedAttribute]
public List`1<RectangleItem> get_Items();
    protected List`1<RectangleItem> get_ActualItems();
    public virtual void Render(IRenderContext rc);
    protected internal virtual void UpdateData();
    protected virtual object GetItem(int i);
    private void ClearActualItems();
    private void UpdateActualItems();
    protected void RenderRectangles(IRenderContext rc, ICollection`1<RectangleItem> items);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void EnsureAxes();
    protected internal void UpdateMaxMinXY();
    protected internal virtual void UpdateMaxMin();
    protected internal virtual void UpdateAxisMaxMin();
    private bool IsPointInRange(DataPoint p);
}
public class OxyPlot.Series.ScatterErrorPoint : ScatterPoint {
    [CompilerGeneratedAttribute]
private double <ErrorX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ErrorY>k__BackingField;
    public double ErrorX { get; private set; }
    public double ErrorY { get; private set; }
    public ScatterErrorPoint(double x, double y, double errorX, double errorY, double size, double value, object tag);
    [CompilerGeneratedAttribute]
public double get_ErrorX();
    [CompilerGeneratedAttribute]
private void set_ErrorX(double value);
    [CompilerGeneratedAttribute]
public double get_ErrorY();
    [CompilerGeneratedAttribute]
private void set_ErrorY(double value);
    public virtual string ToCode();
}
public class OxyPlot.Series.ScatterErrorSeries : ScatterSeries`1<ScatterErrorPoint> {
    [CompilerGeneratedAttribute]
private string <DataFieldErrorX>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldErrorY>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <ErrorBarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ErrorBarStopWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ErrorBarStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumErrorSize>k__BackingField;
    public string DataFieldErrorX { get; public set; }
    public string DataFieldErrorY { get; public set; }
    public OxyColor ErrorBarColor { get; public set; }
    public double ErrorBarStopWidth { get; public set; }
    public double ErrorBarStrokeThickness { get; public set; }
    public double MinimumErrorSize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DataFieldErrorX();
    [CompilerGeneratedAttribute]
public void set_DataFieldErrorX(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldErrorY();
    [CompilerGeneratedAttribute]
public void set_DataFieldErrorY(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_ErrorBarColor();
    [CompilerGeneratedAttribute]
public void set_ErrorBarColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_ErrorBarStopWidth();
    [CompilerGeneratedAttribute]
public void set_ErrorBarStopWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ErrorBarStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_ErrorBarStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumErrorSize();
    [CompilerGeneratedAttribute]
public void set_MinimumErrorSize(double value);
    public virtual void Render(IRenderContext rc);
    public void SelectAll(Func`2<ScatterErrorPoint, bool> func);
    protected virtual void UpdateFromDataFields();
}
public class OxyPlot.Series.ScatterPoint : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public double Size { get; public set; }
    public double Value { get; public set; }
    public object Tag { get; public set; }
    public ScatterPoint(double x, double y, double size, double value, object tag);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public virtual string ToCode();
    public virtual string ToString();
}
public class OxyPlot.Series.ScatterSeries : ScatterSeries`1<ScatterPoint> {
    protected virtual void UpdateFromDataFields();
}
public abstract class OxyPlot.Series.ScatterSeries`1 : XYAxisSeries {
    private static string DefaultColorAxisTitle;
    private List`1<T> points;
    private OxyColor defaultMarkerFillColor;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, T> <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BinSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorAxis <ColorAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldX>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldY>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerFill>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint[] <MarkerOutline>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarkerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerStroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarkerStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<T> <ItemsSourcePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnsItemsSourcePoints>k__BackingField;
    public List`1<T> Points { get; }
    public string LabelFormatString { get; public set; }
    public double LabelMargin { get; public set; }
    public Func`2<object, T> Mapping { get; public set; }
    public int BinSize { get; public set; }
    public IColorAxis ColorAxis { get; private set; }
    public string ColorAxisKey { get; public set; }
    public string DataFieldX { get; public set; }
    public string DataFieldY { get; public set; }
    public string DataFieldSize { get; public set; }
    public string DataFieldTag { get; public set; }
    public string DataFieldValue { get; public set; }
    public OxyColor MarkerFill { get; public set; }
    public OxyColor ActualMarkerFillColor { get; }
    public ScreenPoint[] MarkerOutline { get; public set; }
    public double MarkerSize { get; public set; }
    public OxyColor MarkerStroke { get; public set; }
    public double MarkerStrokeThickness { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public double MaxValue { get; private set; }
    public double MinValue { get; private set; }
    public ReadOnlyCollection`1<T> ActualPoints { get; }
    protected List`1<T> ActualPointsList { get; }
    protected List`1<T> ItemsSourcePoints { get; protected set; }
    protected bool OwnsItemsSourcePoints { get; protected set; }
    public List`1<T> get_Points();
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelMargin();
    [CompilerGeneratedAttribute]
public void set_LabelMargin(double value);
    [CompilerGeneratedAttribute]
public Func`2<object, T> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, T> value);
    [CompilerGeneratedAttribute]
public int get_BinSize();
    [CompilerGeneratedAttribute]
public void set_BinSize(int value);
    [CompilerGeneratedAttribute]
public IColorAxis get_ColorAxis();
    [CompilerGeneratedAttribute]
private void set_ColorAxis(IColorAxis value);
    [CompilerGeneratedAttribute]
public string get_ColorAxisKey();
    [CompilerGeneratedAttribute]
public void set_ColorAxisKey(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldX();
    [CompilerGeneratedAttribute]
public void set_DataFieldX(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldY();
    [CompilerGeneratedAttribute]
public void set_DataFieldY(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldSize();
    [CompilerGeneratedAttribute]
public void set_DataFieldSize(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldTag();
    [CompilerGeneratedAttribute]
public void set_DataFieldTag(string value);
    [CompilerGeneratedAttribute]
public string get_DataFieldValue();
    [CompilerGeneratedAttribute]
public void set_DataFieldValue(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerFill();
    [CompilerGeneratedAttribute]
public void set_MarkerFill(OxyColor value);
    public OxyColor get_ActualMarkerFillColor();
    [CompilerGeneratedAttribute]
public ScreenPoint[] get_MarkerOutline();
    [CompilerGeneratedAttribute]
public void set_MarkerOutline(ScreenPoint[] value);
    [CompilerGeneratedAttribute]
public double get_MarkerSize();
    [CompilerGeneratedAttribute]
public void set_MarkerSize(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerStroke();
    [CompilerGeneratedAttribute]
public void set_MarkerStroke(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_MarkerStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_MarkerStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(double value);
    public ReadOnlyCollection`1<T> get_ActualPoints();
    protected List`1<T> get_ActualPointsList();
    [CompilerGeneratedAttribute]
protected List`1<T> get_ItemsSourcePoints();
    [CompilerGeneratedAttribute]
protected void set_ItemsSourcePoints(List`1<T> value);
    [CompilerGeneratedAttribute]
protected bool get_OwnsItemsSourcePoints();
    [CompilerGeneratedAttribute]
protected void set_OwnsItemsSourcePoints(bool value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void EnsureAxes();
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected void RenderPointLabels(IRenderContext rc, OxyRect clippingRect);
    protected void InternalUpdateMaxMinValue(List`1<T> pts);
    protected void InternalUpdateMaxMinValue(IList`1<ScatterPoint> pts);
    protected void ClearItemsSourcePoints();
    protected abstract virtual void UpdateFromDataFields();
    private void UpdateItemsSourcePoints();
}
public abstract class OxyPlot.Series.Series : PlotElement {
    [CompilerGeneratedAttribute]
private OxyColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeriesGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderInLegend>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackerFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackerKey>k__BackingField;
    public OxyColor Background { get; public set; }
    public bool IsVisible { get; public set; }
    public string Title { get; public set; }
    public string LegendKey { get; public set; }
    public string SeriesGroupName { get; public set; }
    public bool RenderInLegend { get; public set; }
    public string TrackerFormatString { get; public set; }
    public string TrackerKey { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(OxyColor value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_LegendKey();
    [CompilerGeneratedAttribute]
public void set_LegendKey(string value);
    [CompilerGeneratedAttribute]
public string get_SeriesGroupName();
    [CompilerGeneratedAttribute]
public void set_SeriesGroupName(string value);
    [CompilerGeneratedAttribute]
public bool get_RenderInLegend();
    [CompilerGeneratedAttribute]
public void set_RenderInLegend(bool value);
    [CompilerGeneratedAttribute]
public string get_TrackerFormatString();
    [CompilerGeneratedAttribute]
public void set_TrackerFormatString(string value);
    [CompilerGeneratedAttribute]
public string get_TrackerKey();
    [CompilerGeneratedAttribute]
public void set_TrackerKey(string value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public abstract virtual void Render(IRenderContext rc);
    public abstract virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal abstract virtual bool AreAxesRequired();
    protected internal abstract virtual void EnsureAxes();
    protected internal abstract virtual bool IsUsing(Axis axis);
    protected internal abstract virtual void SetDefaultValues();
    protected internal abstract virtual void UpdateAxisMaxMin();
    protected internal abstract virtual void UpdateData();
    protected internal abstract virtual void UpdateMaxMin();
    protected virtual HitTestResult HitTestOverride(HitTestArguments args);
}
public class OxyPlot.Series.StairStepSeries : LineSeries {
    [CompilerGeneratedAttribute]
private double <VerticalStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <VerticalLineStyle>k__BackingField;
    public double VerticalStrokeThickness { get; public set; }
    public LineStyle VerticalLineStyle { get; public set; }
    [CompilerGeneratedAttribute]
public double get_VerticalStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_VerticalStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public LineStyle get_VerticalLineStyle();
    [CompilerGeneratedAttribute]
public void set_VerticalLineStyle(LineStyle value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    private bool FindNextValidSegment(List`1<DataPoint> points, int offset, double xClipMax, Int32& validOffset, Int32& endOffset);
}
public class OxyPlot.Series.StemSeries : LineSeries {
    [CompilerGeneratedAttribute]
private double <Base>k__BackingField;
    public double Base { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(double value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
}
public class OxyPlot.Series.ThreeColorLineSeries : LineSeries {
    private OxyColor defaultColorLo;
    private OxyColor defaultColorHi;
    [CompilerGeneratedAttribute]
private OxyColor <ColorLo>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <ColorHi>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LimitHi>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LimitLo>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <DashesHi>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <DashesLo>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyleHi>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyleLo>k__BackingField;
    public OxyColor ColorLo { get; public set; }
    public OxyColor ColorHi { get; public set; }
    public OxyColor ActualColorLo { get; }
    public OxyColor ActualColorHi { get; }
    public double LimitHi { get; public set; }
    public double LimitLo { get; public set; }
    public Double[] DashesHi { get; public set; }
    public Double[] DashesLo { get; public set; }
    public LineStyle LineStyleHi { get; public set; }
    public LineStyle LineStyleLo { get; public set; }
    public LineStyle ActualLineStyleHi { get; }
    public LineStyle ActualLineStyleLo { get; }
    protected Double[] ActualDashArrayHi { get; }
    protected Double[] ActualDashArrayLo { get; }
    [CompilerGeneratedAttribute]
public OxyColor get_ColorLo();
    [CompilerGeneratedAttribute]
public void set_ColorLo(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_ColorHi();
    [CompilerGeneratedAttribute]
public void set_ColorHi(OxyColor value);
    public OxyColor get_ActualColorLo();
    public OxyColor get_ActualColorHi();
    [CompilerGeneratedAttribute]
public double get_LimitHi();
    [CompilerGeneratedAttribute]
public void set_LimitHi(double value);
    [CompilerGeneratedAttribute]
public double get_LimitLo();
    [CompilerGeneratedAttribute]
public void set_LimitLo(double value);
    [CompilerGeneratedAttribute]
public Double[] get_DashesHi();
    [CompilerGeneratedAttribute]
public void set_DashesHi(Double[] value);
    [CompilerGeneratedAttribute]
public Double[] get_DashesLo();
    [CompilerGeneratedAttribute]
public void set_DashesLo(Double[] value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyleHi();
    [CompilerGeneratedAttribute]
public void set_LineStyleHi(LineStyle value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyleLo();
    [CompilerGeneratedAttribute]
public void set_LineStyleLo(LineStyle value);
    public LineStyle get_ActualLineStyleHi();
    public LineStyle get_ActualLineStyleLo();
    protected Double[] get_ActualDashArrayHi();
    protected Double[] get_ActualDashArrayLo();
    protected internal virtual void SetDefaultValues();
    protected virtual void RenderLine(IRenderContext rc, IList`1<ScreenPoint> pointsToRender);
    [CompilerGeneratedAttribute]
private void <RenderLine>g__RenderLine|48_0(OxyColor color, <>c__DisplayClass48_0& );
}
public class OxyPlot.Series.TornadoBarItem : BarItemBase {
    [CompilerGeneratedAttribute]
private double <BaseValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MaximumColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MinimumColor>k__BackingField;
    public double BaseValue { get; public set; }
    public double Maximum { get; public set; }
    public OxyColor MaximumColor { get; public set; }
    public double Minimum { get; public set; }
    public OxyColor MinimumColor { get; public set; }
    [CompilerGeneratedAttribute]
public double get_BaseValue();
    [CompilerGeneratedAttribute]
public void set_BaseValue(double value);
    [CompilerGeneratedAttribute]
public double get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MaximumColor();
    [CompilerGeneratedAttribute]
public void set_MaximumColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_MinimumColor();
    [CompilerGeneratedAttribute]
public void set_MinimumColor(OxyColor value);
    public sealed virtual string ToCode();
}
public class OxyPlot.Series.TornadoBarSeries : BarSeriesBase`1<TornadoBarItem> {
    public static string DefaultTrackerFormatString;
    private OxyColor defaultMaximumFillColor;
    private OxyColor defaultMinimumFillColor;
    [CompilerGeneratedAttribute]
private string <BaseField>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BaseValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumField>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MaximumFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumLabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumField>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MinimumFillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumLabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyRect> <ActualMaximumBarRectangles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OxyRect> <ActualMinimumBarRectangles>k__BackingField;
    public OxyColor ActualMaximumFillColor { get; }
    public OxyColor ActualMinimumFillColor { get; }
    public string BaseField { get; public set; }
    public double BaseValue { get; public set; }
    public string MaximumColorField { get; public set; }
    public string MaximumField { get; public set; }
    public OxyColor MaximumFillColor { get; public set; }
    public string MaximumLabelFormatString { get; public set; }
    public string MinimumColorField { get; public set; }
    public string MinimumField { get; public set; }
    public OxyColor MinimumFillColor { get; public set; }
    public string MinimumLabelFormatString { get; public set; }
    protected internal IList`1<OxyRect> ActualMaximumBarRectangles { get; protected internal set; }
    protected internal IList`1<OxyRect> ActualMinimumBarRectangles { get; protected internal set; }
    public OxyColor get_ActualMaximumFillColor();
    public OxyColor get_ActualMinimumFillColor();
    [CompilerGeneratedAttribute]
public string get_BaseField();
    [CompilerGeneratedAttribute]
public void set_BaseField(string value);
    [CompilerGeneratedAttribute]
public double get_BaseValue();
    [CompilerGeneratedAttribute]
public void set_BaseValue(double value);
    [CompilerGeneratedAttribute]
public string get_MaximumColorField();
    [CompilerGeneratedAttribute]
public void set_MaximumColorField(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumField();
    [CompilerGeneratedAttribute]
public void set_MaximumField(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_MaximumFillColor();
    [CompilerGeneratedAttribute]
public void set_MaximumFillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_MaximumLabelFormatString();
    [CompilerGeneratedAttribute]
public void set_MaximumLabelFormatString(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumColorField();
    [CompilerGeneratedAttribute]
public void set_MinimumColorField(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumField();
    [CompilerGeneratedAttribute]
public void set_MinimumField(string value);
    [CompilerGeneratedAttribute]
public OxyColor get_MinimumFillColor();
    [CompilerGeneratedAttribute]
public void set_MinimumFillColor(OxyColor value);
    [CompilerGeneratedAttribute]
public string get_MinimumLabelFormatString();
    [CompilerGeneratedAttribute]
public void set_MinimumLabelFormatString(string value);
    [CompilerGeneratedAttribute]
protected internal IList`1<OxyRect> get_ActualMaximumBarRectangles();
    [CompilerGeneratedAttribute]
protected internal void set_ActualMaximumBarRectangles(IList`1<OxyRect> value);
    [CompilerGeneratedAttribute]
protected internal IList`1<OxyRect> get_ActualMinimumBarRectangles();
    [CompilerGeneratedAttribute]
protected internal void set_ActualMinimumBarRectangles(IList`1<OxyRect> value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateMaxMin();
    protected virtual bool IsValid(TornadoBarItem item);
    protected virtual bool UpdateFromDataFields();
}
public class OxyPlot.Series.TwoColorAreaSeries : AreaSeries {
    private OxyColor defaultColor2;
    private List`1<DataPoint> abovePoints;
    private List`1<DataPoint> belowPoints;
    private int markerStartIndex;
    [CompilerGeneratedAttribute]
private OxyColor <Fill2>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Dashes2>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle2>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerFill2>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <MarkerStroke2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Limit>k__BackingField;
    public OxyColor Fill2 { get; public set; }
    public OxyColor ActualFill2 { get; }
    public OxyColor ActualColor2 { get; }
    public Double[] Dashes2 { get; public set; }
    public LineStyle LineStyle2 { get; public set; }
    public LineStyle ActualLineStyle2 { get; }
    public Double[] ActualDashArray2 { get; }
    public OxyColor MarkerFill2 { get; public set; }
    public OxyColor MarkerStroke2 { get; public set; }
    public double Limit { get; public set; }
    [CompilerGeneratedAttribute]
public OxyColor get_Fill2();
    [CompilerGeneratedAttribute]
public void set_Fill2(OxyColor value);
    public OxyColor get_ActualFill2();
    public virtual OxyColor get_ActualColor2();
    [CompilerGeneratedAttribute]
public Double[] get_Dashes2();
    [CompilerGeneratedAttribute]
public void set_Dashes2(Double[] value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle2();
    [CompilerGeneratedAttribute]
public void set_LineStyle2(LineStyle value);
    public LineStyle get_ActualLineStyle2();
    public Double[] get_ActualDashArray2();
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerFill2();
    [CompilerGeneratedAttribute]
public void set_MarkerFill2(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_MarkerStroke2();
    [CompilerGeneratedAttribute]
public void set_MarkerStroke2(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(double value);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    public virtual void Render(IRenderContext rc);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateData();
    protected virtual List`1<ScreenPoint> RenderScreenPoints(AreaRenderContext context, List`1<ScreenPoint> points);
    private void SplitPoints(List`1<DataPoint> source);
    private List`1<ScreenPoint> GetConstantScreenPoints2(List`1<ScreenPoint> source, double baseline);
    private double GetInterpolatedX(DataPoint a, DataPoint b, double y);
}
public class OxyPlot.Series.TwoColorLineSeries : LineSeries {
    private OxyColor defaultColor2;
    [CompilerGeneratedAttribute]
private OxyColor <Color2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Dashes2>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle2>k__BackingField;
    public OxyColor Color2 { get; public set; }
    public OxyColor ActualColor2 { get; }
    public double Limit { get; public set; }
    public Double[] Dashes2 { get; public set; }
    public LineStyle LineStyle2 { get; public set; }
    public LineStyle ActualLineStyle2 { get; }
    protected Double[] ActualDashArray2 { get; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color2();
    [CompilerGeneratedAttribute]
public void set_Color2(OxyColor value);
    public OxyColor get_ActualColor2();
    [CompilerGeneratedAttribute]
public double get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(double value);
    [CompilerGeneratedAttribute]
public Double[] get_Dashes2();
    [CompilerGeneratedAttribute]
public void set_Dashes2(Double[] value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle2();
    [CompilerGeneratedAttribute]
public void set_LineStyle2(LineStyle value);
    public LineStyle get_ActualLineStyle2();
    protected Double[] get_ActualDashArray2();
    protected internal virtual void SetDefaultValues();
    protected virtual void RenderLine(IRenderContext rc, IList`1<ScreenPoint> pointsToRender);
    [CompilerGeneratedAttribute]
private void <RenderLine>g__RenderLine|25_0(OxyColor color, <>c__DisplayClass25_0& );
}
public class OxyPlot.Series.VectorItem : object {
    public static VectorItem Undefined;
    [CompilerGeneratedAttribute]
private DataPoint <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private DataVector <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public DataPoint Origin { get; }
    public DataVector Direction { get; }
    public double Value { get; }
    public VectorItem(DataPoint origin, DataVector direction, double value);
    private static VectorItem();
    [CompilerGeneratedAttribute]
public DataPoint get_Origin();
    [CompilerGeneratedAttribute]
public DataVector get_Direction();
    [CompilerGeneratedAttribute]
public double get_Value();
    public sealed virtual string ToCode();
    public sealed virtual bool Equals(VectorItem other);
    public virtual string ToString();
    public bool IsDefined();
}
public class OxyPlot.Series.VectorSeries : XYAxisSeries {
    private List`1<VectorItem> actualItems;
    private bool ownsActualItems;
    private OxyColor defaultColor;
    private LineStyle defaultLineStyle;
    public static string DefaultTrackerFormatString;
    private static string DefaultColorAxisTitle;
    [CompilerGeneratedAttribute]
private OxyColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowHeadLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowHeadWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowHeadPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <StartPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumSegmentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowVeeness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrowLabelPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorAxis <ColorAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LabelFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanTrackerInterpolatePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, VectorItem> <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VectorItem> <Items>k__BackingField;
    public OxyColor Color { get; public set; }
    public double MinValue { get; private set; }
    public double MaxValue { get; private set; }
    public double ArrowHeadLength { get; public set; }
    public double ArrowHeadWidth { get; public set; }
    public double ArrowHeadPosition { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public DataPoint StartPoint { get; public set; }
    public double StrokeThickness { get; public set; }
    protected LineStyle ActualLineStyle { get; }
    public double MinimumSegmentLength { get; public set; }
    public double ArrowVeeness { get; public set; }
    public double ArrowStartPosition { get; public set; }
    public double ArrowLabelPosition { get; public set; }
    public IColorAxis ColorAxis { get; protected set; }
    public string ColorAxisKey { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelFontSize { get; public set; }
    public bool CanTrackerInterpolatePoints { get; public set; }
    public Func`2<object, VectorItem> Mapping { get; public set; }
    public IList`1<VectorItem> Items { get; }
    protected IList`1<VectorItem> ActualItems { get; }
    [CompilerGeneratedAttribute]
public OxyColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(double value);
    [CompilerGeneratedAttribute]
public double get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowHeadLength();
    [CompilerGeneratedAttribute]
public void set_ArrowHeadLength(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowHeadWidth();
    [CompilerGeneratedAttribute]
public void set_ArrowHeadWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowHeadPosition();
    [CompilerGeneratedAttribute]
public void set_ArrowHeadPosition(double value);
    [CompilerGeneratedAttribute]
public LineJoin get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public DataPoint get_StartPoint();
    [CompilerGeneratedAttribute]
public void set_StartPoint(DataPoint value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    protected LineStyle get_ActualLineStyle();
    [CompilerGeneratedAttribute]
public double get_MinimumSegmentLength();
    [CompilerGeneratedAttribute]
public void set_MinimumSegmentLength(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowVeeness();
    [CompilerGeneratedAttribute]
public void set_ArrowVeeness(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowStartPosition();
    [CompilerGeneratedAttribute]
public void set_ArrowStartPosition(double value);
    [CompilerGeneratedAttribute]
public double get_ArrowLabelPosition();
    [CompilerGeneratedAttribute]
public void set_ArrowLabelPosition(double value);
    [CompilerGeneratedAttribute]
public IColorAxis get_ColorAxis();
    [CompilerGeneratedAttribute]
protected void set_ColorAxis(IColorAxis value);
    [CompilerGeneratedAttribute]
public string get_ColorAxisKey();
    [CompilerGeneratedAttribute]
public void set_ColorAxisKey(string value);
    [CompilerGeneratedAttribute]
public string get_LabelFormatString();
    [CompilerGeneratedAttribute]
public void set_LabelFormatString(string value);
    [CompilerGeneratedAttribute]
public double get_LabelFontSize();
    [CompilerGeneratedAttribute]
public void set_LabelFontSize(double value);
    [CompilerGeneratedAttribute]
public bool get_CanTrackerInterpolatePoints();
    [CompilerGeneratedAttribute]
public void set_CanTrackerInterpolatePoints(bool value);
    [CompilerGeneratedAttribute]
public Func`2<object, VectorItem> get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(Func`2<object, VectorItem> value);
    [CompilerGeneratedAttribute]
public IList`1<VectorItem> get_Items();
    protected IList`1<VectorItem> get_ActualItems();
    public virtual void Render(IRenderContext rc);
    protected internal virtual void UpdateData();
    protected virtual object GetItem(int i);
    private void ClearActualItems();
    private void UpdateActualItems();
    protected void RenderVectors(IRenderContext rc, IEnumerable`1<VectorItem> items);
    private void DrawVector(IRenderContext rc, DataPoint point, DataVector vector, OxyColor color);
    private void DrawArrow(IRenderContext rc, IList`1<ScreenPoint> points, ScreenVector direction, OxyColor color);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void EnsureAxes();
    protected internal virtual void SetDefaultValues();
    protected internal void UpdateMaxMinXY();
    protected internal virtual void UpdateMaxMin();
    protected internal virtual void UpdateAxisMaxMin();
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_0(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_1(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_2(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_3(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_4(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_5(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_6(VectorItem r);
    [CompilerGeneratedAttribute]
private double <UpdateMaxMinXY>b__105_7(VectorItem r);
    [CompilerGeneratedAttribute]
private DataPoint <UpdateMaxMin>b__106_0(VectorItem item);
    [CompilerGeneratedAttribute]
private DataPoint <UpdateMaxMin>b__106_1(VectorItem item);
}
public class OxyPlot.Series.VolumeSeries : XYAxisSeries {
    public static string DefaultTrackerFormatString;
    private List`1<OhlcvItem> data;
    private double minDx;
    private int winIndex;
    [CompilerGeneratedAttribute]
private VolumeStyle <VolumeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeIntensity>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <PositiveColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <NegativeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <InterceptColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InterceptStrokeThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <InterceptLineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositiveHollow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NegativeHollow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AverageVolume>k__BackingField;
    public List`1<OhlcvItem> Items { get; public set; }
    public VolumeStyle VolumeStyle { get; public set; }
    public double StrokeThickness { get; public set; }
    public double StrokeIntensity { get; public set; }
    public OxyColor PositiveColor { get; public set; }
    public OxyColor NegativeColor { get; public set; }
    public OxyColor InterceptColor { get; public set; }
    public double InterceptStrokeThickness { get; public set; }
    public LineStyle InterceptLineStyle { get; public set; }
    public bool PositiveHollow { get; public set; }
    public bool NegativeHollow { get; public set; }
    public double BarWidth { get; public set; }
    public double MinimumVolume { get; protected set; }
    public double MaximumVolume { get; protected set; }
    public double AverageVolume { get; protected set; }
    public List`1<OhlcvItem> get_Items();
    public void set_Items(List`1<OhlcvItem> value);
    [CompilerGeneratedAttribute]
public VolumeStyle get_VolumeStyle();
    [CompilerGeneratedAttribute]
public void set_VolumeStyle(VolumeStyle value);
    [CompilerGeneratedAttribute]
public double get_StrokeThickness();
    [CompilerGeneratedAttribute]
public void set_StrokeThickness(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeIntensity();
    [CompilerGeneratedAttribute]
public void set_StrokeIntensity(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_PositiveColor();
    [CompilerGeneratedAttribute]
public void set_PositiveColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_NegativeColor();
    [CompilerGeneratedAttribute]
public void set_NegativeColor(OxyColor value);
    [CompilerGeneratedAttribute]
public OxyColor get_InterceptColor();
    [CompilerGeneratedAttribute]
public void set_InterceptColor(OxyColor value);
    [CompilerGeneratedAttribute]
public double get_InterceptStrokeThickness();
    [CompilerGeneratedAttribute]
public void set_InterceptStrokeThickness(double value);
    [CompilerGeneratedAttribute]
public LineStyle get_InterceptLineStyle();
    [CompilerGeneratedAttribute]
public void set_InterceptLineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public bool get_PositiveHollow();
    [CompilerGeneratedAttribute]
public void set_PositiveHollow(bool value);
    [CompilerGeneratedAttribute]
public bool get_NegativeHollow();
    [CompilerGeneratedAttribute]
public void set_NegativeHollow(bool value);
    [CompilerGeneratedAttribute]
public double get_BarWidth();
    [CompilerGeneratedAttribute]
public void set_BarWidth(double value);
    [CompilerGeneratedAttribute]
public double get_MinimumVolume();
    [CompilerGeneratedAttribute]
protected void set_MinimumVolume(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumVolume();
    [CompilerGeneratedAttribute]
protected void set_MaximumVolume(double value);
    [CompilerGeneratedAttribute]
public double get_AverageVolume();
    [CompilerGeneratedAttribute]
protected void set_AverageVolume(double value);
    public void Append(OhlcvItem bar);
    public int FindByX(double x, int startingIndex);
    public virtual void Render(IRenderContext rc);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    public virtual TrackerHitResult GetNearestPoint(ScreenPoint point, bool interpolate);
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateAxisMaxMin();
    protected internal virtual void UpdateMaxMin();
}
public enum OxyPlot.Series.VolumeStyle : Enum {
    public int value__;
    public static VolumeStyle None;
    public static VolumeStyle Combined;
    public static VolumeStyle Stacked;
    public static VolumeStyle PositiveNegative;
}
public abstract class OxyPlot.Series.XYAxisSeries : ItemsSeries {
    public static string DefaultTrackerFormatString;
    protected static string DefaultXAxisTitle;
    protected static string DefaultYAxisTitle;
    [CompilerGeneratedAttribute]
private double <MaxX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinY>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <YAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YAxisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsXMonotonic>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WindowStartIndex>k__BackingField;
    public double MaxX { get; protected set; }
    public double MaxY { get; protected set; }
    public double MinX { get; protected set; }
    public double MinY { get; protected set; }
    public Axis XAxis { get; private set; }
    public string XAxisKey { get; public set; }
    public Axis YAxis { get; private set; }
    public string YAxisKey { get; public set; }
    protected bool IsXMonotonic { get; protected set; }
    protected int WindowStartIndex { get; protected set; }
    [CompilerGeneratedAttribute]
public double get_MaxX();
    [CompilerGeneratedAttribute]
protected void set_MaxX(double value);
    [CompilerGeneratedAttribute]
public double get_MaxY();
    [CompilerGeneratedAttribute]
protected void set_MaxY(double value);
    [CompilerGeneratedAttribute]
public double get_MinX();
    [CompilerGeneratedAttribute]
protected void set_MinX(double value);
    [CompilerGeneratedAttribute]
public double get_MinY();
    [CompilerGeneratedAttribute]
protected void set_MinY(double value);
    [CompilerGeneratedAttribute]
public sealed virtual Axis get_XAxis();
    [CompilerGeneratedAttribute]
private void set_XAxis(Axis value);
    [CompilerGeneratedAttribute]
public string get_XAxisKey();
    [CompilerGeneratedAttribute]
public void set_XAxisKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Axis get_YAxis();
    [CompilerGeneratedAttribute]
private void set_YAxis(Axis value);
    [CompilerGeneratedAttribute]
public string get_YAxisKey();
    [CompilerGeneratedAttribute]
public void set_YAxisKey(string value);
    [CompilerGeneratedAttribute]
protected bool get_IsXMonotonic();
    [CompilerGeneratedAttribute]
protected void set_IsXMonotonic(bool value);
    [CompilerGeneratedAttribute]
protected int get_WindowStartIndex();
    [CompilerGeneratedAttribute]
protected void set_WindowStartIndex(int value);
    public virtual OxyRect GetClippingRect();
    public OxyRect GetScreenRectangle();
    public sealed virtual DataPoint InverseTransform(ScreenPoint p);
    public virtual void RenderLegend(IRenderContext rc, OxyRect legendBox);
    public sealed virtual ScreenPoint Transform(DataPoint p);
    protected internal virtual bool AreAxesRequired();
    protected internal virtual void EnsureAxes();
    protected internal virtual bool IsUsing(Axis axis);
    protected internal virtual void SetDefaultValues();
    protected internal virtual void UpdateAxisMaxMin();
    protected internal virtual void UpdateData();
    protected internal virtual void UpdateMaxMin();
    protected TrackerHitResult GetNearestInterpolatedPointInternal(List`1<DataPoint> points, ScreenPoint point);
    protected TrackerHitResult GetNearestInterpolatedPointInternal(List`1<DataPoint> points, int startIdx, ScreenPoint point);
    protected TrackerHitResult GetNearestPointInternal(IEnumerable`1<DataPoint> points, ScreenPoint point);
    protected TrackerHitResult GetNearestPointInternal(IEnumerable`1<DataPoint> points, int startIdx, ScreenPoint point);
    protected virtual bool IsValidPoint(DataPoint pt);
    protected bool IsValidPoint(double x, double y);
    protected void InternalUpdateMaxMin(List`1<DataPoint> points);
    protected void InternalUpdateMaxMin(List`1<T> items, Func`2<T, double> xf, Func`2<T, double> yf);
    protected void InternalUpdateMaxMin(List`1<T> items, Func`2<T, double> xmin, Func`2<T, double> xmax, Func`2<T, double> ymin, Func`2<T, double> ymax);
    protected void VerifyAxes();
    protected int UpdateWindowStartIndex(IList`1<T> items, Func`2<T, double> xgetter, double targetX, int lastIndex);
    public int FindWindowStartIndex(IList`1<T> items, Func`2<T, double> xgetter, double targetX, int initialGuess);
    [CompilerGeneratedAttribute]
internal static double <FindWindowStartIndex>g__GetX|67_0(int index, <>c__DisplayClass67_0`1& );
}
public static class OxyPlot.StandardFonts : object {
    [CompilerGeneratedAttribute]
private static PortableDocumentFontFamily <Helvetica>k__BackingField;
    [CompilerGeneratedAttribute]
private static PortableDocumentFontFamily <Times>k__BackingField;
    [CompilerGeneratedAttribute]
private static PortableDocumentFontFamily <Courier>k__BackingField;
    public static PortableDocumentFontFamily Helvetica { get; private set; }
    public static PortableDocumentFontFamily Times { get; private set; }
    public static PortableDocumentFontFamily Courier { get; private set; }
    private static StandardFonts();
    [CompilerGeneratedAttribute]
public static PortableDocumentFontFamily get_Helvetica();
    [CompilerGeneratedAttribute]
private static void set_Helvetica(PortableDocumentFontFamily value);
    [CompilerGeneratedAttribute]
public static PortableDocumentFontFamily get_Times();
    [CompilerGeneratedAttribute]
private static void set_Times(PortableDocumentFontFamily value);
    [CompilerGeneratedAttribute]
public static PortableDocumentFontFamily get_Courier();
    [CompilerGeneratedAttribute]
private static void set_Courier(PortableDocumentFontFamily value);
}
[ExtensionAttribute]
public static class OxyPlot.StreamExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Stream input, Stream output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class OxyPlot.StringHelper : object {
    private static Regex FormattingExpression;
    private static StringHelper();
    public static string Format(IFormatProvider provider, string formatString, object item, Object[] values);
    public static string CreateValidFormatString(string input);
    [IteratorStateMachineAttribute("OxyPlot.StringHelper/<Format>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<string> Format(IEnumerable source, string propertyName, string formatString, IFormatProvider provider);
    public static String[] SplitLines(string text);
}
public class OxyPlot.SvgExporter : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVerticalTextAlignmentWorkaround>k__BackingField;
    [CompilerGeneratedAttribute]
private IRenderContext <TextMeasurer>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public bool IsDocument { get; public set; }
    public bool UseVerticalTextAlignmentWorkaround { get; public set; }
    public IRenderContext TextMeasurer { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public bool get_IsDocument();
    [CompilerGeneratedAttribute]
public void set_IsDocument(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseVerticalTextAlignmentWorkaround();
    [CompilerGeneratedAttribute]
public void set_UseVerticalTextAlignmentWorkaround(bool value);
    [CompilerGeneratedAttribute]
public IRenderContext get_TextMeasurer();
    [CompilerGeneratedAttribute]
public void set_TextMeasurer(IRenderContext value);
    public static void Export(IPlotModel model, Stream stream, double width, double height, bool isDocument, IRenderContext textMeasurer, bool useVerticalTextAlignmentWorkaround);
    public static string ExportToString(IPlotModel model, double width, double height, bool isDocument, IRenderContext textMeasurer, bool useVerticalTextAlignmentWorkaround);
    public sealed virtual void Export(IPlotModel model, Stream stream);
    public string ExportToString(IPlotModel model);
}
public class OxyPlot.SvgRenderContext : ClippingRenderContext {
    private SvgWriter w;
    private bool disposed;
    [CompilerGeneratedAttribute]
private IRenderContext <TextMeasurer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVerticalTextAlignmentWorkaround>k__BackingField;
    public IRenderContext TextMeasurer { get; public set; }
    public bool UseVerticalTextAlignmentWorkaround { get; public set; }
    public SvgRenderContext(Stream s, double width, double height, bool isDocument, IRenderContext textMeasurer, OxyColor background, bool useVerticalTextAlignmentWorkaround);
    [CompilerGeneratedAttribute]
public IRenderContext get_TextMeasurer();
    [CompilerGeneratedAttribute]
public void set_TextMeasurer(IRenderContext value);
    [CompilerGeneratedAttribute]
public bool get_UseVerticalTextAlignmentWorkaround();
    [CompilerGeneratedAttribute]
public void set_UseVerticalTextAlignmentWorkaround(bool value);
    public void Close();
    public void Complete();
    public sealed virtual void Dispose();
    public virtual void DrawEllipse(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawRectangle(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode);
    public virtual void DrawText(ScreenPoint p, string text, OxyColor c, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign, Nullable`1<OxySize> maxSize);
    public void Flush();
    public virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetClip(OxyRect clippingRectangle);
    protected virtual void ResetClip();
}
public class OxyPlot.SvgWriter : XmlWriterBase {
    private bool endIsWritten;
    private int clipPathNumber;
    [CompilerGeneratedAttribute]
private bool <IsDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    public bool IsDocument { get; public set; }
    public string NumberFormat { get; public set; }
    public SvgWriter(Stream stream, double width, double height, bool isDocument);
    [CompilerGeneratedAttribute]
public bool get_IsDocument();
    [CompilerGeneratedAttribute]
public void set_IsDocument(bool value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    public virtual void Close();
    public void Complete();
    public string CreateStyle(OxyColor fill, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin);
    public void WriteEllipse(double x, double y, double width, double height, string style, EdgeRenderingMode edgeRenderingMode);
    public void BeginClip(double x, double y, double width, double height);
    public void EndClip();
    public void WriteImage(double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, OxyImage image);
    public void WriteImage(double x, double y, double width, double height, OxyImage image);
    public void WriteLine(ScreenPoint p1, ScreenPoint p2, string style, EdgeRenderingMode edgeRenderingMode);
    public void WritePolygon(IEnumerable`1<ScreenPoint> points, string style, EdgeRenderingMode edgeRenderingMode);
    public void WritePolyline(IEnumerable`1<ScreenPoint> pts, string style, EdgeRenderingMode edgeRenderingMode);
    public void WriteRectangle(double x, double y, double width, double height, string style, EdgeRenderingMode edgeRenderingMode);
    public void WriteText(ScreenPoint position, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign);
    protected string ColorToString(OxyColor color);
    protected void WriteAttributeString(string name, double value);
    private void WriteEdgeRenderingModeAttribute(EdgeRenderingMode edgeRenderingMode);
    private string GetAutoValue(double value, string auto);
    private string PointsToString(IEnumerable`1<ScreenPoint> points);
    private void WriteHeader(double width, double height);
}
public enum OxyPlot.TitleHorizontalAlignment : Enum {
    public int value__;
    public static TitleHorizontalAlignment CenteredWithinPlotArea;
    public static TitleHorizontalAlignment CenteredWithinView;
}
public class OxyPlot.TouchManipulator : PlotManipulator`1<OxyTouchEventArgs> {
    [CompilerGeneratedAttribute]
private bool <SetHandledForPanOrZoom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPanEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsZoomEnabled>k__BackingField;
    protected bool SetHandledForPanOrZoom { get; protected set; }
    private bool IsPanEnabled { get; private set; }
    private bool IsZoomEnabled { get; private set; }
    public TouchManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
protected bool get_SetHandledForPanOrZoom();
    [CompilerGeneratedAttribute]
protected void set_SetHandledForPanOrZoom(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsPanEnabled();
    [CompilerGeneratedAttribute]
private void set_IsPanEnabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsZoomEnabled();
    [CompilerGeneratedAttribute]
private void set_IsZoomEnabled(bool value);
    public virtual void Completed(OxyTouchEventArgs e);
    public virtual void Delta(OxyTouchEventArgs e);
    public virtual void Started(OxyTouchEventArgs e);
}
public class OxyPlot.TouchTrackerManipulator : TouchManipulator {
    private Series currentSeries;
    [CompilerGeneratedAttribute]
private bool <PointsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Snap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockToInitialSeries>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FiresDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckDistanceBetweenPoints>k__BackingField;
    public bool PointsOnly { get; public set; }
    public bool Snap { get; public set; }
    public bool LockToInitialSeries { get; public set; }
    public double FiresDistance { get; public set; }
    public bool CheckDistanceBetweenPoints { get; public set; }
    public TouchTrackerManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
public bool get_PointsOnly();
    [CompilerGeneratedAttribute]
public void set_PointsOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Snap();
    [CompilerGeneratedAttribute]
public void set_Snap(bool value);
    [CompilerGeneratedAttribute]
public bool get_LockToInitialSeries();
    [CompilerGeneratedAttribute]
public void set_LockToInitialSeries(bool value);
    [CompilerGeneratedAttribute]
public double get_FiresDistance();
    [CompilerGeneratedAttribute]
public void set_FiresDistance(double value);
    [CompilerGeneratedAttribute]
public bool get_CheckDistanceBetweenPoints();
    [CompilerGeneratedAttribute]
public void set_CheckDistanceBetweenPoints(bool value);
    public virtual void Completed(OxyTouchEventArgs e);
    public virtual void Delta(OxyTouchEventArgs e);
    public virtual void Started(OxyTouchEventArgs e);
    private void UpdateTracker(ScreenPoint position);
}
public class OxyPlot.TrackerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TrackerHitResult <HitResult>k__BackingField;
    public TrackerHitResult HitResult { get; public set; }
    [CompilerGeneratedAttribute]
public TrackerHitResult get_HitResult();
    [CompilerGeneratedAttribute]
public void set_HitResult(TrackerHitResult value);
}
public class OxyPlot.TrackerHitResult : object {
    [CompilerGeneratedAttribute]
private DataPoint <DataPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyRect <LineExtents>k__BackingField;
    [CompilerGeneratedAttribute]
private PlotModel <PlotModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenPoint <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Series <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public DataPoint DataPoint { get; public set; }
    public object Item { get; public set; }
    public double Index { get; public set; }
    public OxyRect LineExtents { get; public set; }
    public PlotModel PlotModel { get; public set; }
    public ScreenPoint Position { get; public set; }
    public Series Series { get; public set; }
    public string Text { get; public set; }
    public Axis XAxis { get; }
    public Axis YAxis { get; }
    [CompilerGeneratedAttribute]
public DataPoint get_DataPoint();
    [CompilerGeneratedAttribute]
public void set_DataPoint(DataPoint value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
    [CompilerGeneratedAttribute]
public double get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(double value);
    [CompilerGeneratedAttribute]
public OxyRect get_LineExtents();
    [CompilerGeneratedAttribute]
public void set_LineExtents(OxyRect value);
    [CompilerGeneratedAttribute]
public PlotModel get_PlotModel();
    [CompilerGeneratedAttribute]
public void set_PlotModel(PlotModel value);
    [CompilerGeneratedAttribute]
public ScreenPoint get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(ScreenPoint value);
    [CompilerGeneratedAttribute]
public Series get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(Series value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public Axis get_XAxis();
    public Axis get_YAxis();
    public virtual string ToString();
}
public class OxyPlot.TrackerManipulator : MouseManipulator {
    private Series currentSeries;
    [CompilerGeneratedAttribute]
private bool <PointsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Snap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockToInitialSeries>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FiresDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckDistanceBetweenPoints>k__BackingField;
    public bool PointsOnly { get; public set; }
    public bool Snap { get; public set; }
    public bool LockToInitialSeries { get; public set; }
    public double FiresDistance { get; public set; }
    public bool CheckDistanceBetweenPoints { get; public set; }
    public TrackerManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
public bool get_PointsOnly();
    [CompilerGeneratedAttribute]
public void set_PointsOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Snap();
    [CompilerGeneratedAttribute]
public void set_Snap(bool value);
    [CompilerGeneratedAttribute]
public bool get_LockToInitialSeries();
    [CompilerGeneratedAttribute]
public void set_LockToInitialSeries(bool value);
    [CompilerGeneratedAttribute]
public double get_FiresDistance();
    [CompilerGeneratedAttribute]
public void set_FiresDistance(double value);
    [CompilerGeneratedAttribute]
public bool get_CheckDistanceBetweenPoints();
    [CompilerGeneratedAttribute]
public void set_CheckDistanceBetweenPoints(bool value);
    public virtual void Completed(OxyMouseEventArgs e);
    public virtual void Delta(OxyMouseEventArgs e);
    public virtual void Started(OxyMouseEventArgs e);
}
[ExtensionAttribute]
public static class OxyPlot.TypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static PropertyInfo GetRuntimeProperty(Type type, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class OxyPlot.Utilities.Helpers : object {
    public static void Swap(T& value, T& other);
    public static T ArgMin(IEnumerable`1<T> sequence, Func`2<T, TComparable> projection);
    public static double LinearInterpolation(double x0, double y0, double x1, double y1, double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OxyPlot.Utilities.TrackerHelper : object {
    public static TrackerHitResult GetNearestHit(Series series, ScreenPoint point, bool snap, bool pointsOnly, double firesDistance, bool checkDistanceBetweenPoints);
    private static bool ShouldTrackerOpen(TrackerHitResult result, ScreenPoint point, double firesDistance);
}
public enum OxyPlot.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Middle;
    public static VerticalAlignment Bottom;
}
public class OxyPlot.XkcdRenderingDecorator : RenderContextBase {
    private IRenderContext rc;
    private Random r;
    [CompilerGeneratedAttribute]
private double <DistortionFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InterpolationDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ThicknessScale>k__BackingField;
    public double DistortionFactor { get; public set; }
    public double InterpolationDistance { get; public set; }
    public string FontFamily { get; public set; }
    public double ThicknessScale { get; public set; }
    public int ClipCount { get; }
    public XkcdRenderingDecorator(IRenderContext rc);
    [CompilerGeneratedAttribute]
public double get_DistortionFactor();
    [CompilerGeneratedAttribute]
public void set_DistortionFactor(double value);
    [CompilerGeneratedAttribute]
public double get_InterpolationDistance();
    [CompilerGeneratedAttribute]
public void set_InterpolationDistance(double value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public double get_ThicknessScale();
    [CompilerGeneratedAttribute]
public void set_ThicknessScale(double value);
    public virtual int get_ClipCount();
    public virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, EdgeRenderingMode edgeRenderingMode, Double[] dashArray, LineJoin lineJoin);
    public virtual void DrawText(ScreenPoint p, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign, Nullable`1<OxySize> maxSize);
    public virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public virtual void SetToolTip(string text);
    public virtual void CleanUp();
    public virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    public virtual void PushClip(OxyRect clippingRectangle);
    public virtual void PopClip();
    private string GetFontFamily(string fontFamily);
    private ScreenPoint[] Distort(IEnumerable`1<ScreenPoint> points);
    private Double[] GenerateRandomNumbers(int n);
    private Double[] ApplyMovingAverage(IList`1<double> input, int m);
    [IteratorStateMachineAttribute("OxyPlot.XkcdRenderingDecorator/<Interpolate>d__34")]
private IEnumerable`1<ScreenPoint> Interpolate(IEnumerable`1<ScreenPoint> input, double dist);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class OxyPlot.XmlWriterBase : object {
    private XmlWriter w;
    private bool disposed;
    protected XmlWriterBase(Stream stream);
    public virtual void Close();
    public sealed virtual void Dispose();
    public void Flush();
    protected void WriteAttributeString(string name, string value);
    protected void WriteAttributeString(string prefix, string name, string ns, string value);
    protected void WriteDocType(string name, string pubid, string sysid, string subset);
    protected void WriteElementString(string name, string text);
    protected void WriteEndDocument();
    protected void WriteEndElement();
    protected void WriteRaw(string text);
    protected void WriteStartDocument(bool standalone);
    protected void WriteStartElement(string name);
    protected void WriteStartElement(string name, string ns);
    protected void WriteString(string text);
    private void Dispose(bool disposing);
}
public class OxyPlot.ZoomRectangleManipulator : MouseManipulator {
    private OxyRect zoomRectangle;
    [CompilerGeneratedAttribute]
private bool <IsZoomEnabled>k__BackingField;
    private bool IsZoomEnabled { get; private set; }
    public ZoomRectangleManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
private bool get_IsZoomEnabled();
    [CompilerGeneratedAttribute]
private void set_IsZoomEnabled(bool value);
    public virtual void Completed(OxyMouseEventArgs e);
    public virtual void Delta(OxyMouseEventArgs e);
    public virtual void Started(OxyMouseEventArgs e);
    private CursorType GetCursorType();
}
public class OxyPlot.ZoomStepManipulator : MouseManipulator {
    [CompilerGeneratedAttribute]
private bool <FineControl>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Step>k__BackingField;
    public bool FineControl { get; public set; }
    public double Step { get; public set; }
    public ZoomStepManipulator(IPlotView plotView);
    [CompilerGeneratedAttribute]
public bool get_FineControl();
    [CompilerGeneratedAttribute]
public void set_FineControl(bool value);
    [CompilerGeneratedAttribute]
public double get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(double value);
    public virtual void Started(OxyMouseEventArgs e);
}
