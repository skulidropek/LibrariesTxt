public class OxyPlot.Wpf.AngleAxis : LinearAxis {
    public static DependencyProperty StartAngleProperty;
    public static DependencyProperty EndAngleProperty;
    public double StartAngle { get; public set; }
    public double EndAngle { get; public set; }
    private static AngleAxis();
    public double get_StartAngle();
    public void set_StartAngle(double value);
    public double get_EndAngle();
    public void set_EndAngle(double value);
    protected virtual void SynchronizeProperties();
}
public abstract class OxyPlot.Wpf.Annotation : FrameworkElement {
    public static DependencyProperty LayerProperty;
    public static DependencyProperty XAxisKeyProperty;
    public static DependencyProperty YAxisKeyProperty;
    [CompilerGeneratedAttribute]
private Annotation <InternalAnnotation>k__BackingField;
    public AnnotationLayer Layer { get; public set; }
    public string XAxisKey { get; public set; }
    public string YAxisKey { get; public set; }
    public Annotation InternalAnnotation { get; protected set; }
    private static Annotation();
    public AnnotationLayer get_Layer();
    public void set_Layer(AnnotationLayer value);
    public string get_XAxisKey();
    public void set_XAxisKey(string value);
    public string get_YAxisKey();
    public void set_YAxisKey(string value);
    [CompilerGeneratedAttribute]
public Annotation get_InternalAnnotation();
    [CompilerGeneratedAttribute]
protected void set_InternalAnnotation(Annotation value);
    public abstract virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
    protected static void AppearanceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected static void DataChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class OxyPlot.Wpf.AreaSeries : LineSeries {
    public static DependencyProperty Color2Property;
    public static DependencyProperty ConstantY2Property;
    public static DependencyProperty DataFieldX2Property;
    public static DependencyProperty DataFieldY2Property;
    public static DependencyProperty FillProperty;
    public static DependencyProperty Reverse2Property;
    public Color Color2 { get; public set; }
    public double ConstantY2 { get; public set; }
    public string DataFieldX2 { get; public set; }
    public string DataFieldY2 { get; public set; }
    public Color Fill { get; public set; }
    public bool Reverse2 { get; public set; }
    private static AreaSeries();
    public Color get_Color2();
    public void set_Color2(Color value);
    public double get_ConstantY2();
    public void set_ConstantY2(double value);
    public string get_DataFieldX2();
    public void set_DataFieldX2(string value);
    public string get_DataFieldY2();
    public void set_DataFieldY2(string value);
    public Color get_Fill();
    public void set_Fill(Color value);
    public bool get_Reverse2();
    public void set_Reverse2(bool value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.ArrowAnnotation : TextualAnnotation {
    public static DependencyProperty ArrowDirectionProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty EndPointProperty;
    public static DependencyProperty HeadLengthProperty;
    public static DependencyProperty HeadWidthProperty;
    public static DependencyProperty LineJoinProperty;
    public static DependencyProperty LineStyleProperty;
    public static DependencyProperty StartPointProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty VeenessProperty;
    public ScreenVector ArrowDirection { get; public set; }
    public Color Color { get; public set; }
    public DataPoint EndPoint { get; public set; }
    public double HeadLength { get; public set; }
    public double HeadWidth { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public DataPoint StartPoint { get; public set; }
    public double StrokeThickness { get; public set; }
    public double Veeness { get; public set; }
    private static ArrowAnnotation();
    public ScreenVector get_ArrowDirection();
    public void set_ArrowDirection(ScreenVector value);
    public Color get_Color();
    public void set_Color(Color value);
    public DataPoint get_EndPoint();
    public void set_EndPoint(DataPoint value);
    public double get_HeadLength();
    public void set_HeadLength(double value);
    public double get_HeadWidth();
    public void set_HeadWidth(double value);
    public LineJoin get_LineJoin();
    public void set_LineJoin(LineJoin value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public DataPoint get_StartPoint();
    public void set_StartPoint(DataPoint value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public double get_Veeness();
    public void set_Veeness(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public abstract class OxyPlot.Wpf.Axis : FrameworkElement {
    public static DependencyProperty AbsoluteMaximumProperty;
    public static DependencyProperty AbsoluteMinimumProperty;
    public static DependencyProperty AngleProperty;
    public static DependencyProperty AxisTickToLabelDistanceProperty;
    public static DependencyProperty AxisTitleDistanceProperty;
    public static DependencyProperty AxisDistanceProperty;
    public static DependencyProperty AxislineColorProperty;
    public static DependencyProperty AxislineStyleProperty;
    public static DependencyProperty AxislineThicknessProperty;
    public static DependencyProperty ClipTitleProperty;
    public static DependencyProperty EndPositionProperty;
    public static DependencyProperty ExtraGridlineColorProperty;
    public static DependencyProperty ExtraGridlineStyleProperty;
    public static DependencyProperty ExtraGridlineThicknessProperty;
    public static DependencyProperty ExtraGridlinesProperty;
    public static DependencyProperty FilterFunctionProperty;
    public static DependencyProperty FilterMaxValueProperty;
    public static DependencyProperty FilterMinValueProperty;
    public static DependencyProperty FontProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty IntervalLengthProperty;
    public static DependencyProperty IsAxisVisibleProperty;
    public static DependencyProperty IsPanEnabledProperty;
    public static DependencyProperty IsZoomEnabledProperty;
    public static DependencyProperty KeyProperty;
    public static DependencyProperty LabelFormatterProperty;
    public static DependencyProperty LayerProperty;
    public static DependencyProperty MajorGridlineColorProperty;
    public static DependencyProperty MajorGridlineStyleProperty;
    public static DependencyProperty MajorGridlineThicknessProperty;
    public static DependencyProperty MajorStepProperty;
    public static DependencyProperty MajorTickSizeProperty;
    public static DependencyProperty MaximumPaddingProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MaximumRangeProperty;
    public static DependencyProperty MinimumPaddingProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty MinimumRangeProperty;
    public static DependencyProperty MinorGridlineColorProperty;
    public static DependencyProperty MinorGridlineStyleProperty;
    public static DependencyProperty MinorGridlineThicknessProperty;
    public static DependencyProperty MinorStepProperty;
    public static DependencyProperty MinorTickSizeProperty;
    public static DependencyProperty PositionAtZeroCrossingProperty;
    public static DependencyProperty PositionProperty;
    public static DependencyProperty PositionTierProperty;
    public static DependencyProperty StartPositionProperty;
    public static DependencyProperty StringFormatProperty;
    public static DependencyProperty TextColorProperty;
    public static DependencyProperty TickStyleProperty;
    public static DependencyProperty TicklineColorProperty;
    public static DependencyProperty TitleClippingLengthProperty;
    public static DependencyProperty TitleColorProperty;
    public static DependencyProperty TitleFontProperty;
    public static DependencyProperty TitleFontSizeProperty;
    public static DependencyProperty TitleFontWeightProperty;
    public static DependencyProperty TitleFormatStringProperty;
    public static DependencyProperty TitlePositionProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty UnitProperty;
    public static DependencyProperty UseSuperExponentialFormatProperty;
    [CompilerGeneratedAttribute]
private Axis <InternalAxis>k__BackingField;
    public Axis InternalAxis { get; protected set; }
    public double AbsoluteMaximum { get; public set; }
    public double AbsoluteMinimum { get; public set; }
    public double Angle { get; public set; }
    public double AxisDistance { get; public set; }
    public double AxisTickToLabelDistance { get; public set; }
    public double AxisTitleDistance { get; public set; }
    public Color AxislineColor { get; public set; }
    public LineStyle AxislineStyle { get; public set; }
    public double AxislineThickness { get; public set; }
    public bool ClipTitle { get; public set; }
    public double EndPosition { get; public set; }
    public Color ExtraGridlineColor { get; public set; }
    public LineStyle ExtraGridlineStyle { get; public set; }
    public double ExtraGridlineThickness { get; public set; }
    public Double[] ExtraGridlines { get; public set; }
    public Func`2<double, bool> FilterFunction { get; public set; }
    public double FilterMaxValue { get; public set; }
    public double FilterMinValue { get; public set; }
    public string Font { get; public set; }
    public double FontSize { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public double IntervalLength { get; public set; }
    public bool IsAxisVisible { get; public set; }
    public bool IsPanEnabled { get; public set; }
    public bool IsZoomEnabled { get; public set; }
    public string Key { get; public set; }
    public Func`2<double, string> LabelFormatter { get; public set; }
    public AxisLayer Layer { get; public set; }
    public Color MajorGridlineColor { get; public set; }
    public LineStyle MajorGridlineStyle { get; public set; }
    public double MajorGridlineThickness { get; public set; }
    public double MajorStep { get; public set; }
    public double MajorTickSize { get; public set; }
    public double Maximum { get; public set; }
    public double MaximumPadding { get; public set; }
    public double MaximumRange { get; public set; }
    public double Minimum { get; public set; }
    public double MinimumPadding { get; public set; }
    public double MinimumRange { get; public set; }
    public Color MinorGridlineColor { get; public set; }
    public LineStyle MinorGridlineStyle { get; public set; }
    public double MinorGridlineThickness { get; public set; }
    public double MinorStep { get; public set; }
    public double MinorTickSize { get; public set; }
    public AxisPosition Position { get; public set; }
    public bool PositionAtZeroCrossing { get; public set; }
    public int PositionTier { get; public set; }
    public double StartPosition { get; public set; }
    public string StringFormat { get; public set; }
    public Color TextColor { get; public set; }
    public TickStyle TickStyle { get; public set; }
    public Color TicklineColor { get; public set; }
    public string Title { get; public set; }
    public double TitleClippingLength { get; public set; }
    public Color TitleColor { get; public set; }
    public string TitleFont { get; public set; }
    public double TitleFontSize { get; public set; }
    public FontWeight TitleFontWeight { get; public set; }
    public string TitleFormatString { get; public set; }
    public double TitlePosition { get; public set; }
    public string Unit { get; public set; }
    public bool UseSuperExponentialFormat { get; public set; }
    private static Axis();
    [CompilerGeneratedAttribute]
public Axis get_InternalAxis();
    [CompilerGeneratedAttribute]
protected void set_InternalAxis(Axis value);
    public double get_AbsoluteMaximum();
    public void set_AbsoluteMaximum(double value);
    public double get_AbsoluteMinimum();
    public void set_AbsoluteMinimum(double value);
    public double get_Angle();
    public void set_Angle(double value);
    public double get_AxisDistance();
    public void set_AxisDistance(double value);
    public double get_AxisTickToLabelDistance();
    public void set_AxisTickToLabelDistance(double value);
    public double get_AxisTitleDistance();
    public void set_AxisTitleDistance(double value);
    public Color get_AxislineColor();
    public void set_AxislineColor(Color value);
    public LineStyle get_AxislineStyle();
    public void set_AxislineStyle(LineStyle value);
    public double get_AxislineThickness();
    public void set_AxislineThickness(double value);
    public bool get_ClipTitle();
    public void set_ClipTitle(bool value);
    public double get_EndPosition();
    public void set_EndPosition(double value);
    public Color get_ExtraGridlineColor();
    public void set_ExtraGridlineColor(Color value);
    public LineStyle get_ExtraGridlineStyle();
    public void set_ExtraGridlineStyle(LineStyle value);
    public double get_ExtraGridlineThickness();
    public void set_ExtraGridlineThickness(double value);
    public Double[] get_ExtraGridlines();
    public void set_ExtraGridlines(Double[] value);
    public Func`2<double, bool> get_FilterFunction();
    public void set_FilterFunction(Func`2<double, bool> value);
    public double get_FilterMaxValue();
    public void set_FilterMaxValue(double value);
    public double get_FilterMinValue();
    public void set_FilterMinValue(double value);
    public string get_Font();
    public void set_Font(string value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public double get_IntervalLength();
    public void set_IntervalLength(double value);
    public bool get_IsAxisVisible();
    public void set_IsAxisVisible(bool value);
    public bool get_IsPanEnabled();
    public void set_IsPanEnabled(bool value);
    public bool get_IsZoomEnabled();
    public void set_IsZoomEnabled(bool value);
    public string get_Key();
    public void set_Key(string value);
    public Func`2<double, string> get_LabelFormatter();
    public void set_LabelFormatter(Func`2<double, string> value);
    public AxisLayer get_Layer();
    public void set_Layer(AxisLayer value);
    public Color get_MajorGridlineColor();
    public void set_MajorGridlineColor(Color value);
    public LineStyle get_MajorGridlineStyle();
    public void set_MajorGridlineStyle(LineStyle value);
    public double get_MajorGridlineThickness();
    public void set_MajorGridlineThickness(double value);
    public double get_MajorStep();
    public void set_MajorStep(double value);
    public double get_MajorTickSize();
    public void set_MajorTickSize(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_MaximumPadding();
    public void set_MaximumPadding(double value);
    public double get_MaximumRange();
    public void set_MaximumRange(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_MinimumPadding();
    public void set_MinimumPadding(double value);
    public double get_MinimumRange();
    public void set_MinimumRange(double value);
    public Color get_MinorGridlineColor();
    public void set_MinorGridlineColor(Color value);
    public LineStyle get_MinorGridlineStyle();
    public void set_MinorGridlineStyle(LineStyle value);
    public double get_MinorGridlineThickness();
    public void set_MinorGridlineThickness(double value);
    public double get_MinorStep();
    public void set_MinorStep(double value);
    public double get_MinorTickSize();
    public void set_MinorTickSize(double value);
    public AxisPosition get_Position();
    public void set_Position(AxisPosition value);
    public bool get_PositionAtZeroCrossing();
    public void set_PositionAtZeroCrossing(bool value);
    public int get_PositionTier();
    public void set_PositionTier(int value);
    public double get_StartPosition();
    public void set_StartPosition(double value);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public TickStyle get_TickStyle();
    public void set_TickStyle(TickStyle value);
    public Color get_TicklineColor();
    public void set_TicklineColor(Color value);
    public string get_Title();
    public void set_Title(string value);
    public double get_TitleClippingLength();
    public void set_TitleClippingLength(double value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public string get_TitleFont();
    public void set_TitleFont(string value);
    public double get_TitleFontSize();
    public void set_TitleFontSize(double value);
    public FontWeight get_TitleFontWeight();
    public void set_TitleFontWeight(FontWeight value);
    public string get_TitleFormatString();
    public void set_TitleFormatString(string value);
    public double get_TitlePosition();
    public void set_TitlePosition(double value);
    public string get_Unit();
    public void set_Unit(string value);
    public bool get_UseSuperExponentialFormat();
    public void set_UseSuperExponentialFormat(bool value);
    public abstract virtual Axis CreateModel();
    protected static void AppearanceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected static void DataChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected void OnDataChanged();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected void OnVisualChanged();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.BarSeries : BarSeriesBase`1<BarItem> {
    public static DependencyProperty BarWidthProperty;
    public double BarWidth { get; public set; }
    private static BarSeries();
    public double get_BarWidth();
    public void set_BarWidth(double value);
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.BarSeriesBase : CategorizedSeries {
    public static DependencyProperty BaseValueProperty;
    public static DependencyProperty ColorFieldProperty;
    public static DependencyProperty FillColorProperty;
    public static DependencyProperty IsStackedProperty;
    public static DependencyProperty LabelFormatStringProperty;
    public static DependencyProperty LabelMarginProperty;
    public static DependencyProperty LabelPlacementProperty;
    public static DependencyProperty NegativeFillColorProperty;
    public static DependencyProperty StackGroupProperty;
    public static DependencyProperty StrokeColorProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty ValueFieldProperty;
    public double BaseValue { get; public set; }
    public string ColorField { get; public set; }
    public Color FillColor { get; public set; }
    public bool IsStacked { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelMargin { get; public set; }
    public LabelPlacement LabelPlacement { get; public set; }
    public Color NegativeFillColor { get; public set; }
    public string StackGroup { get; public set; }
    public Color StrokeColor { get; public set; }
    public double StrokeThickness { get; public set; }
    public string ValueField { get; public set; }
    private static BarSeriesBase();
    public double get_BaseValue();
    public void set_BaseValue(double value);
    public string get_ColorField();
    public void set_ColorField(string value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public bool get_IsStacked();
    public void set_IsStacked(bool value);
    public string get_LabelFormatString();
    public void set_LabelFormatString(string value);
    public double get_LabelMargin();
    public void set_LabelMargin(double value);
    public LabelPlacement get_LabelPlacement();
    public void set_LabelPlacement(LabelPlacement value);
    public Color get_NegativeFillColor();
    public void set_NegativeFillColor(Color value);
    public string get_StackGroup();
    public void set_StackGroup(string value);
    public Color get_StrokeColor();
    public void set_StrokeColor(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public string get_ValueField();
    public void set_ValueField(string value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.BarSeriesBase`1 : BarSeriesBase {
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.BoxPlotSeries : XYAxisSeries {
    public static DependencyProperty BoxWidthProperty;
    public static DependencyProperty FillProperty;
    public static DependencyProperty LineStyleProperty;
    public static DependencyProperty MedianPointSizeProperty;
    public static DependencyProperty MedianThicknessProperty;
    public static DependencyProperty OutlierSizeProperty;
    public static DependencyProperty OutlierTypeProperty;
    public static DependencyProperty OutlierOutlineProperty;
    public static DependencyProperty ShowBoxProperty;
    public static DependencyProperty ShowMedianAsDotProperty;
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty WhiskerWidthProperty;
    public double BoxWidth { get; public set; }
    public Color Fill { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double MedianPointSize { get; public set; }
    public double MedianThickness { get; public set; }
    public double OutlierSize { get; public set; }
    public MarkerType OutlierType { get; public set; }
    public Point[] OutlierOutline { get; public set; }
    public bool ShowBox { get; public set; }
    public bool ShowMedianAsDot { get; public set; }
    public Color Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    public double WhiskerWidth { get; public set; }
    private static BoxPlotSeries();
    public double get_BoxWidth();
    public void set_BoxWidth(double value);
    public Color get_Fill();
    public void set_Fill(Color value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public double get_MedianPointSize();
    public void set_MedianPointSize(double value);
    public double get_MedianThickness();
    public void set_MedianThickness(double value);
    public double get_OutlierSize();
    public void set_OutlierSize(double value);
    public MarkerType get_OutlierType();
    public void set_OutlierType(MarkerType value);
    public Point[] get_OutlierOutline();
    public void set_OutlierOutline(Point[] value);
    public bool get_ShowBox();
    public void set_ShowBox(bool value);
    public bool get_ShowMedianAsDot();
    public void set_ShowMedianAsDot(bool value);
    public Color get_Stroke();
    public void set_Stroke(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public double get_WhiskerWidth();
    public void set_WhiskerWidth(double value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.CanvasRenderContext : object {
    private static int MaxFiguresPerGeometry;
    private static int MaxPolylinesPerLine;
    private static int MinPointsPerPolyline;
    private HashSet`1<OxyImage> imagesInUse;
    private Dictionary`2<OxyImage, BitmapSource> imageCache;
    private Dictionary`2<OxyColor, Brush> brushCache;
    private Dictionary`2<string, FontFamily> fontFamilyCache;
    private Canvas canvas;
    private Nullable`1<Rect> clip;
    private string currentToolTip;
    private double pixelScale;
    [CompilerGeneratedAttribute]
private TextMeasurementMethod <TextMeasurementMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private TextFormattingMode <TextFormattingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BalancedLineDrawingThicknessLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStreamGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RendersToScreen>k__BackingField;
    public TextMeasurementMethod TextMeasurementMethod { get; public set; }
    public TextFormattingMode TextFormattingMode { get; public set; }
    public double BalancedLineDrawingThicknessLimit { get; public set; }
    public bool UseStreamGeometry { get; public set; }
    public bool RendersToScreen { get; public set; }
    public CanvasRenderContext(Canvas canvas);
    [CompilerGeneratedAttribute]
public TextMeasurementMethod get_TextMeasurementMethod();
    [CompilerGeneratedAttribute]
public void set_TextMeasurementMethod(TextMeasurementMethod value);
    [CompilerGeneratedAttribute]
public TextFormattingMode get_TextFormattingMode();
    [CompilerGeneratedAttribute]
public void set_TextFormattingMode(TextFormattingMode value);
    [CompilerGeneratedAttribute]
public double get_BalancedLineDrawingThicknessLimit();
    [CompilerGeneratedAttribute]
public void set_BalancedLineDrawingThicknessLimit(double value);
    [CompilerGeneratedAttribute]
public bool get_UseStreamGeometry();
    [CompilerGeneratedAttribute]
public void set_UseStreamGeometry(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RendersToScreen();
    [CompilerGeneratedAttribute]
public void set_RendersToScreen(bool value);
    public sealed virtual void DrawEllipse(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness);
    public sealed virtual void DrawEllipses(IList`1<OxyRect> rectangles, OxyColor fill, OxyColor stroke, double thickness);
    public sealed virtual void DrawLine(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    public sealed virtual void DrawLineSegments(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    public sealed virtual void DrawPolygon(IList`1<ScreenPoint> points, OxyColor fill, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    public sealed virtual void DrawPolygons(IList`1<IList`1<ScreenPoint>> polygons, OxyColor fill, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    public sealed virtual void DrawRectangle(OxyRect rect, OxyColor fill, OxyColor stroke, double thickness);
    public sealed virtual void DrawRectangles(IList`1<OxyRect> rectangles, OxyColor fill, OxyColor stroke, double thickness);
    public sealed virtual void DrawText(ScreenPoint p, string text, OxyColor fill, string fontFamily, double fontSize, double fontWeight, double rotate, HorizontalAlignment halign, VerticalAlignment valign, Nullable`1<OxySize> maxSize);
    public sealed virtual OxySize MeasureText(string text, string fontFamily, double fontSize, double fontWeight);
    public sealed virtual void SetToolTip(string text);
    public sealed virtual void DrawImage(OxyImage source, double srcX, double srcY, double srcWidth, double srcHeight, double destX, double destY, double destWidth, double destHeight, double opacity, bool interpolate);
    public sealed virtual bool SetClip(OxyRect clippingRect);
    public sealed virtual void ResetClip();
    public sealed virtual void CleanUp();
    protected OxySize MeasureTextByGlyphTypeface(string text, string fontFamily, double fontSize, double fontWeight);
    private static FontWeight GetFontWeight(double fontWeight);
    private static OxySize MeasureTextSize(GlyphTypeface glyphTypeface, double sizeInEm, string s);
    private T CreateAndAdd(double clipOffsetX, double clipOffsetY);
    private void ApplyToolTip(FrameworkElement element);
    private void DrawLineSegmentsByStreamGeometry(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    private Brush GetCachedBrush(OxyColor color);
    private FontFamily GetCachedFontFamily(string familyName);
    private void SetStroke(Shape shape, OxyColor stroke, double thickness, LineJoin lineJoin, IEnumerable`1<double> dashArray, double dashOffset, bool aliased);
    private BitmapSource GetImageSource(OxyImage image);
    private void DrawLineBalanced(IList`1<ScreenPoint> points, OxyColor stroke, double thickness, Double[] dashArray, LineJoin lineJoin, bool aliased);
    private Point ToPoint(ScreenPoint pt);
    private Point ToPixelAlignedPoint(ScreenPoint pt);
    private Rect ToRect(OxyRect r);
    private Rect ToPixelAlignedRect(OxyRect r);
    private Point ToPoint(ScreenPoint pt, bool aliased);
    private PointCollection ToPointCollection(IEnumerable`1<ScreenPoint> points, bool aliased);
    [CompilerGeneratedAttribute]
private bool <CleanUp>b__46_0(OxyImage i);
}
public abstract class OxyPlot.Wpf.CategorizedSeries : XYAxisSeries {
}
public class OxyPlot.Wpf.CategoryAxis : LinearAxis {
    public static DependencyProperty GapWidthProperty;
    public static DependencyProperty IsTickCenteredProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty LabelFieldProperty;
    public static DependencyProperty LabelsProperty;
    public double GapWidth { get; public set; }
    public bool IsTickCentered { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public string LabelField { get; public set; }
    public IList`1<string> Labels { get; public set; }
    private static CategoryAxis();
    public double get_GapWidth();
    public void set_GapWidth(double value);
    public bool get_IsTickCentered();
    public void set_IsTickCentered(bool value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public string get_LabelField();
    public void set_LabelField(string value);
    public IList`1<string> get_Labels();
    public void set_Labels(IList`1<string> value);
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.ColumnSeries : BarSeriesBase`1<ColumnItem> {
    public static DependencyProperty ColumnWidthProperty;
    public double ColumnWidth { get; public set; }
    private static ColumnSeries();
    public double get_ColumnWidth();
    public void set_ColumnWidth(double value);
    protected virtual void SynchronizeProperties(Series series);
}
[ExtensionAttribute]
public static class OxyPlot.Wpf.ConverterExtensions : object {
    [ExtensionAttribute]
public static double DistanceTo(Point p1, Point p2);
    [ExtensionAttribute]
public static Brush ToBrush(OxyColor c);
    [ExtensionAttribute]
public static Color ToColor(OxyColor c);
    [ExtensionAttribute]
public static Thickness ToThickness(OxyThickness c);
    [ExtensionAttribute]
public static Vector ToVector(ScreenVector c);
    [ExtensionAttribute]
public static HorizontalAlignment ToHorizontalAlignment(HorizontalAlignment alignment);
    [ExtensionAttribute]
public static VerticalAlignment ToVerticalAlignment(VerticalAlignment alignment);
    [ExtensionAttribute]
public static OxyColor ToOxyColor(Color color);
    [ExtensionAttribute]
public static OxyColor ToOxyColor(Brush brush);
    [ExtensionAttribute]
public static OxyThickness ToOxyThickness(Thickness t);
    [ExtensionAttribute]
public static ScreenPoint ToScreenPoint(Point pt);
    [ExtensionAttribute]
public static ScreenPoint[] ToScreenPointArray(Point[] points);
    [ExtensionAttribute]
public static ScreenVector ToScreenVector(Vector vector);
    [ExtensionAttribute]
public static OxyKey Convert(Key k);
    [ExtensionAttribute]
public static OxyMouseButton Convert(MouseButton button);
    [ExtensionAttribute]
public static OxyMouseWheelEventArgs ToMouseWheelEventArgs(MouseWheelEventArgs e, IInputElement relativeTo);
    [ExtensionAttribute]
public static OxyMouseDownEventArgs ToMouseDownEventArgs(MouseButtonEventArgs e, IInputElement relativeTo);
    [ExtensionAttribute]
public static OxyMouseEventArgs ToMouseReleasedEventArgs(MouseButtonEventArgs e, IInputElement relativeTo);
    [ExtensionAttribute]
public static OxyMouseEventArgs ToMouseEventArgs(MouseEventArgs e, IInputElement relativeTo);
    [ExtensionAttribute]
public static OxyTouchEventArgs ToTouchEventArgs(ManipulationStartedEventArgs e, UIElement relativeTo);
    [ExtensionAttribute]
public static OxyTouchEventArgs ToTouchEventArgs(ManipulationDeltaEventArgs e, UIElement relativeTo);
    [ExtensionAttribute]
public static OxyTouchEventArgs ToTouchEventArgs(ManipulationCompletedEventArgs e, UIElement relativeTo);
}
public class OxyPlot.Wpf.DataPointExtension : MarkupExtension {
    private DataPoint point;
    public DataPointExtension(double x, double y);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public abstract class OxyPlot.Wpf.DataPointSeries : XYAxisSeries {
    public static DependencyProperty CanTrackerInterpolatePointsProperty;
    public static DependencyProperty DataFieldXProperty;
    public static DependencyProperty DataFieldYProperty;
    public static DependencyProperty MappingProperty;
    public bool CanTrackerInterpolatePoints { get; public set; }
    public string DataFieldX { get; public set; }
    public string DataFieldY { get; public set; }
    public Func`2<object, DataPoint> Mapping { get; public set; }
    private static DataPointSeries();
    public bool get_CanTrackerInterpolatePoints();
    public void set_CanTrackerInterpolatePoints(bool value);
    public string get_DataFieldX();
    public void set_DataFieldX(string value);
    public string get_DataFieldY();
    public void set_DataFieldY(string value);
    public Func`2<object, DataPoint> get_Mapping();
    public void set_Mapping(Func`2<object, DataPoint> value);
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.DateTimeAxis : Axis {
    public static DependencyProperty CalendarWeekRuleProperty;
    public static DependencyProperty FirstDateTimeProperty;
    public static DependencyProperty FirstDayOfWeekProperty;
    public static DependencyProperty IntervalTypeProperty;
    public static DependencyProperty LastDateTimeProperty;
    public static DependencyProperty MinorIntervalTypeProperty;
    public CalendarWeekRule CalendarWeekRule { get; public set; }
    public DateTime FirstDateTime { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public DateTimeIntervalType IntervalType { get; public set; }
    public DateTime LastDateTime { get; public set; }
    public DateTimeIntervalType MinorIntervalType { get; public set; }
    private static DateTimeAxis();
    public CalendarWeekRule get_CalendarWeekRule();
    public void set_CalendarWeekRule(CalendarWeekRule value);
    public DateTime get_FirstDateTime();
    public void set_FirstDateTime(DateTime value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public DateTime get_LastDateTime();
    public void set_LastDateTime(DateTime value);
    public DateTimeIntervalType get_MinorIntervalType();
    public void set_MinorIntervalType(DateTimeIntervalType value);
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.EllipseAnnotation : ShapeAnnotation {
    public static DependencyProperty XProperty;
    public static DependencyProperty YProperty;
    public double X { get; public set; }
    public double Y { get; public set; }
    private static EllipseAnnotation();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
[ExtensionAttribute]
public static class OxyPlot.Wpf.ExporterExtensions : object {
    [ExtensionAttribute]
public static void ExportToFile(IExporter exporter, IPlotModel model, string path);
}
public class OxyPlot.Wpf.FlowDocumentReportWriter : object {
    private FlowDocument doc;
    private bool disposed;
    [CompilerGeneratedAttribute]
private ReportStyle <Style>k__BackingField;
    public FlowDocument FlowDocument { get; }
    public ReportStyle Style { get; public set; }
    public FlowDocument get_FlowDocument();
    [CompilerGeneratedAttribute]
public ReportStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ReportStyle value);
    public sealed virtual void Dispose();
    public void Print();
    public virtual void Save(string filename, double width, double height);
    public sealed virtual void WriteDrawing(DrawingFigure d);
    public sealed virtual void WriteEquation(Equation equation);
    public sealed virtual void WriteHeader(Header h);
    public sealed virtual void WriteImage(Image i);
    public sealed virtual void WriteParagraph(Paragraph pa);
    public sealed virtual void WritePlot(PlotFigure plot);
    public sealed virtual void WriteReport(Report report, ReportStyle reportStyle);
    public sealed virtual void WriteTable(Table t);
    private static void SetStyle(TextElement run, ParagraphStyle s);
    private void AddPageBody(DocumentPaginator sourceFlowDocPaginator, int pageNumber, Canvas pageCanvas, Thickness margins);
    private void AddPageToDocument(FixedDocument fixedDocument, Canvas pageCanvas, Size pageSize);
    private FixedDocument BuildFixedDocument(DocumentPaginator sourceFlowDocPaginator, Size size, Thickness margins);
    private FixedDocument CreateFixedDocument(Size size);
    private Paragraph CreateParagraph(string text, ParagraphStyle style);
    private void Dispose(bool disposing);
}
public class OxyPlot.Wpf.FunctionAnnotation : PathAnnotation {
    public static DependencyProperty TypeProperty;
    public static DependencyProperty EquationProperty;
    public static DependencyProperty ResolutionProperty;
    public Func`2<double, double> Equation { get; public set; }
    public int Resolution { get; public set; }
    public FunctionAnnotationType Type { get; public set; }
    private static FunctionAnnotation();
    public Func`2<double, double> get_Equation();
    public void set_Equation(Func`2<double, double> value);
    public int get_Resolution();
    public void set_Resolution(int value);
    public FunctionAnnotationType get_Type();
    public void set_Type(FunctionAnnotationType value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.HeatMapSeries : XYAxisSeries {
    public static DependencyProperty DataProperty;
    public static DependencyProperty X0Property;
    public static DependencyProperty X1Property;
    public static DependencyProperty Y0Property;
    public static DependencyProperty Y1Property;
    public static DependencyProperty ColorAxisKeyProperty;
    public static DependencyProperty LowColorProperty;
    public static DependencyProperty HighColorProperty;
    public Color LowColor { get; public set; }
    public Color HighColor { get; public set; }
    public string ColorAxisKey { get; public set; }
    public double X0 { get; public set; }
    public double X1 { get; public set; }
    public double Y0 { get; public set; }
    public double Y1 { get; public set; }
    public Double[0...,0...] Data { get; public set; }
    private static HeatMapSeries();
    public Color get_LowColor();
    public void set_LowColor(Color value);
    public Color get_HighColor();
    public void set_HighColor(Color value);
    public string get_ColorAxisKey();
    public void set_ColorAxisKey(string value);
    public double get_X0();
    public void set_X0(double value);
    public double get_X1();
    public void set_X1(double value);
    public double get_Y0();
    public void set_Y0(double value);
    public double get_Y1();
    public void set_Y1(double value);
    public Double[0...,0...] get_Data();
    public void set_Data(Double[0...,0...] value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public abstract class OxyPlot.Wpf.ItemsSeries : Series {
    protected virtual void SynchronizeProperties(Series series);
}
internal static class OxyPlot.Wpf.Keyboard : object {
    public static OxyModifierKeys GetModifierKeys();
}
public class OxyPlot.Wpf.LineAnnotation : PathAnnotation {
    public static DependencyProperty TypeProperty;
    public static DependencyProperty InterceptProperty;
    public static DependencyProperty MaximumXProperty;
    public static DependencyProperty MaximumYProperty;
    public static DependencyProperty MinimumXProperty;
    public static DependencyProperty MinimumYProperty;
    public static DependencyProperty SlopeProperty;
    public static DependencyProperty XProperty;
    public static DependencyProperty YProperty;
    public double Intercept { get; public set; }
    public double MaximumX { get; public set; }
    public double MaximumY { get; public set; }
    public double MinimumX { get; public set; }
    public double MinimumY { get; public set; }
    public double Slope { get; public set; }
    public LineAnnotationType Type { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private static LineAnnotation();
    public double get_Intercept();
    public void set_Intercept(double value);
    public double get_MaximumX();
    public void set_MaximumX(double value);
    public double get_MaximumY();
    public void set_MaximumY(double value);
    public double get_MinimumX();
    public void set_MinimumX(double value);
    public double get_MinimumY();
    public void set_MinimumY(double value);
    public double get_Slope();
    public void set_Slope(double value);
    public LineAnnotationType get_Type();
    public void set_Type(LineAnnotationType value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.LinearAxis : Axis {
    public static DependencyProperty FormatAsFractionsProperty;
    public static DependencyProperty FractionUnitProperty;
    public static DependencyProperty FractionUnitSymbolProperty;
    public bool FormatAsFractions { get; public set; }
    public double FractionUnit { get; public set; }
    public string FractionUnitSymbol { get; public set; }
    private static LinearAxis();
    public bool get_FormatAsFractions();
    public void set_FormatAsFractions(bool value);
    public double get_FractionUnit();
    public void set_FractionUnit(double value);
    public string get_FractionUnitSymbol();
    public void set_FractionUnitSymbol(string value);
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.LinearBarSeries : DataPointSeries {
    public static DependencyProperty BarWidthProperty;
    public static DependencyProperty FillColorProperty;
    public static DependencyProperty StrokeColorProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty NegativeFillColorProperty;
    public static DependencyProperty NegativeStrokeColorProperty;
    public double BarWidth { get; public set; }
    public Color FillColor { get; public set; }
    public Color StrokeColor { get; public set; }
    public double StrokeThickness { get; public set; }
    public Color NegativeFillColor { get; public set; }
    public Color NegativeStrokeColor { get; public set; }
    private static LinearBarSeries();
    public double get_BarWidth();
    public void set_BarWidth(double value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_StrokeColor();
    public void set_StrokeColor(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public Color get_NegativeFillColor();
    public void set_NegativeFillColor(Color value);
    public Color get_NegativeStrokeColor();
    public void set_NegativeStrokeColor(Color value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
[ContentPropertyAttribute("GradientStops")]
public class OxyPlot.Wpf.LinearColorAxis : Axis {
    public static DependencyProperty GradientStopsProperty;
    public static DependencyProperty HighColorProperty;
    public static DependencyProperty LowColorProperty;
    public static DependencyProperty PaletteSizeProperty;
    public static DependencyProperty InvalidNumberColorProperty;
    public Color InvalidNumberColor { get; public set; }
    public int PaletteSize { get; public set; }
    public Color HighColor { get; public set; }
    public Color LowColor { get; public set; }
    public GradientStopCollection GradientStops { get; public set; }
    private static LinearColorAxis();
    public Color get_InvalidNumberColor();
    public void set_InvalidNumberColor(Color value);
    public int get_PaletteSize();
    public void set_PaletteSize(int value);
    public Color get_HighColor();
    public void set_HighColor(Color value);
    public Color get_LowColor();
    public void set_LowColor(Color value);
    public GradientStopCollection get_GradientStops();
    public void set_GradientStops(GradientStopCollection value);
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
    private static OxyPalette Interpolate(List`1<GradientStop> stops, int paletteSize);
    private static bool ValidatePaletteSize(object value);
}
public class OxyPlot.Wpf.LineSeries : DataPointSeries {
    public static DependencyProperty BrokenLineColorProperty;
    public static DependencyProperty BrokenLineStyleProperty;
    public static DependencyProperty BrokenLineThicknessProperty;
    public static DependencyProperty DashesProperty;
    public static DependencyProperty DecimatorProperty;
    public static DependencyProperty LabelFormatStringProperty;
    public static DependencyProperty LabelMarginProperty;
    public static DependencyProperty LineJoinProperty;
    public static DependencyProperty LineLegendPositionProperty;
    public static DependencyProperty LineStyleProperty;
    public static DependencyProperty MarkerFillProperty;
    public static DependencyProperty MarkerOutlineProperty;
    public static DependencyProperty MarkerResolutionProperty;
    public static DependencyProperty MarkerSizeProperty;
    public static DependencyProperty MarkerStrokeProperty;
    public static DependencyProperty MarkerStrokeThicknessProperty;
    public static DependencyProperty MarkerTypeProperty;
    public static DependencyProperty MinimumSegmentLengthProperty;
    public static DependencyProperty InterpolationAlgorithmProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public Color BrokenLineColor { get; public set; }
    public LineStyle BrokenLineStyle { get; public set; }
    public double BrokenLineThickness { get; public set; }
    public Double[] Dashes { get; public set; }
    public Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> Decimator { get; public set; }
    public string LabelFormatString { get; public set; }
    public double LabelMargin { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineLegendPosition LineLegendPosition { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public Color MarkerFill { get; public set; }
    public Point[] MarkerOutline { get; public set; }
    public int MarkerResolution { get; public set; }
    public double MarkerSize { get; public set; }
    public Color MarkerStroke { get; public set; }
    public double MarkerStrokeThickness { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    public IInterpolationAlgorithm InterpolationAlgorithm { get; public set; }
    public double StrokeThickness { get; public set; }
    private static LineSeries();
    public Color get_BrokenLineColor();
    public void set_BrokenLineColor(Color value);
    public LineStyle get_BrokenLineStyle();
    public void set_BrokenLineStyle(LineStyle value);
    public double get_BrokenLineThickness();
    public void set_BrokenLineThickness(double value);
    public Double[] get_Dashes();
    public void set_Dashes(Double[] value);
    public Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> get_Decimator();
    public void set_Decimator(Action`2<List`1<ScreenPoint>, List`1<ScreenPoint>> value);
    public string get_LabelFormatString();
    public void set_LabelFormatString(string value);
    public double get_LabelMargin();
    public void set_LabelMargin(double value);
    public LineJoin get_LineJoin();
    public void set_LineJoin(LineJoin value);
    public LineLegendPosition get_LineLegendPosition();
    public void set_LineLegendPosition(LineLegendPosition value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public Color get_MarkerFill();
    public void set_MarkerFill(Color value);
    public Point[] get_MarkerOutline();
    public void set_MarkerOutline(Point[] value);
    public int get_MarkerResolution();
    public void set_MarkerResolution(int value);
    public double get_MarkerSize();
    public void set_MarkerSize(double value);
    public Color get_MarkerStroke();
    public void set_MarkerStroke(Color value);
    public double get_MarkerStrokeThickness();
    public void set_MarkerStrokeThickness(double value);
    public MarkerType get_MarkerType();
    public void set_MarkerType(MarkerType value);
    public double get_MinimumSegmentLength();
    public void set_MinimumSegmentLength(double value);
    public IInterpolationAlgorithm get_InterpolationAlgorithm();
    public void set_InterpolationAlgorithm(IInterpolationAlgorithm value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.LogarithmicAxis : Axis {
    public static DependencyProperty BaseProperty;
    public static DependencyProperty PowerPaddingProperty;
    public double Base { get; public set; }
    public bool PowerPadding { get; public set; }
    private static LogarithmicAxis();
    public double get_Base();
    public void set_Base(double value);
    public bool get_PowerPadding();
    public void set_PowerPadding(bool value);
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.MagnitudeAxis : LinearAxis {
    private static MagnitudeAxis();
}
public static class OxyPlot.Wpf.MoreColors : object {
    public static Color Undefined;
    public static Color Automatic;
    private static MoreColors();
}
[ValueConversionAttribute("OxyPlot.OxyColor", "System.Windows.Media.Color")]
public class OxyPlot.Wpf.OxyColorConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class OxyPlot.Wpf.PathAnnotation : TextualAnnotation {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty ClipByXAxisProperty;
    public static DependencyProperty ClipByYAxisProperty;
    public static DependencyProperty ClipTextProperty;
    public static DependencyProperty LineJoinProperty;
    public static DependencyProperty LineStyleProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty TextMarginProperty;
    public static DependencyProperty TextOrientationProperty;
    public static DependencyProperty TextLinePositionProperty;
    public bool ClipByXAxis { get; public set; }
    public bool ClipByYAxis { get; public set; }
    public bool ClipText { get; public set; }
    public Color Color { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public double StrokeThickness { get; public set; }
    public double TextMargin { get; public set; }
    public AnnotationTextOrientation TextOrientation { get; public set; }
    public double TextLinePosition { get; public set; }
    private static PathAnnotation();
    public bool get_ClipByXAxis();
    public void set_ClipByXAxis(bool value);
    public bool get_ClipByYAxis();
    public void set_ClipByYAxis(bool value);
    public bool get_ClipText();
    public void set_ClipText(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public LineJoin get_LineJoin();
    public void set_LineJoin(LineJoin value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public double get_TextMargin();
    public void set_TextMargin(double value);
    public AnnotationTextOrientation get_TextOrientation();
    public void set_TextOrientation(AnnotationTextOrientation value);
    public double get_TextLinePosition();
    public void set_TextLinePosition(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.PieSeries : ItemsSeries {
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public static DependencyProperty DiameterProperty;
    public static DependencyProperty InnerDiameterProperty;
    public static DependencyProperty StartAngleProperty;
    public static DependencyProperty AngleSpanProperty;
    public static DependencyProperty AngleIncrementProperty;
    public static DependencyProperty LegendFormatProperty;
    public static DependencyProperty OutsideLabelFormatProperty;
    public static DependencyProperty InsideLabelColorProperty;
    public static DependencyProperty InsideLabelFormatProperty;
    public static DependencyProperty InsideLabelPositionProperty;
    public static DependencyProperty AreInsideLabelsAngledProperty;
    public static DependencyProperty TickDistanceProperty;
    public static DependencyProperty TickRadialLengthProperty;
    public static DependencyProperty TickHorizontalLengthProperty;
    public static DependencyProperty TickLabelDistanceProperty;
    public static DependencyProperty ExplodedDistanceProperty;
    public static DependencyProperty LabelFieldProperty;
    public static DependencyProperty ValueFieldProperty;
    public static DependencyProperty ColorFieldProperty;
    public static DependencyProperty IsExplodedFieldProperty;
    public Color Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    public double Diameter { get; public set; }
    public double InnerDiameter { get; public set; }
    public double StartAngle { get; public set; }
    public double AngleSpan { get; public set; }
    public double AngleIncrement { get; public set; }
    public string LegendFormat { get; public set; }
    public string OutsideLabelFormat { get; public set; }
    public Color InsideLabelColor { get; public set; }
    public string InsideLabelFormat { get; public set; }
    public double InsideLabelPosition { get; public set; }
    public bool AreInsideLabelsAngled { get; public set; }
    public double TickDistance { get; public set; }
    public double TickRadialLength { get; public set; }
    public double TickHorizontalLength { get; public set; }
    public double TickLabelDistance { get; public set; }
    public double ExplodedDistance { get; public set; }
    public string LabelField { get; public set; }
    public string ValueField { get; public set; }
    public string ColorField { get; public set; }
    public string IsExplodedField { get; public set; }
    private static PieSeries();
    public virtual Series CreateModel();
    public Color get_Stroke();
    public void set_Stroke(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public double get_Diameter();
    public void set_Diameter(double value);
    public double get_InnerDiameter();
    public void set_InnerDiameter(double value);
    public double get_StartAngle();
    public void set_StartAngle(double value);
    public double get_AngleSpan();
    public void set_AngleSpan(double value);
    public double get_AngleIncrement();
    public void set_AngleIncrement(double value);
    public string get_LegendFormat();
    public void set_LegendFormat(string value);
    public string get_OutsideLabelFormat();
    public void set_OutsideLabelFormat(string value);
    public Color get_InsideLabelColor();
    public void set_InsideLabelColor(Color value);
    public string get_InsideLabelFormat();
    public void set_InsideLabelFormat(string value);
    public double get_InsideLabelPosition();
    public void set_InsideLabelPosition(double value);
    public bool get_AreInsideLabelsAngled();
    public void set_AreInsideLabelsAngled(bool value);
    public double get_TickDistance();
    public void set_TickDistance(double value);
    public double get_TickRadialLength();
    public void set_TickRadialLength(double value);
    public double get_TickHorizontalLength();
    public void set_TickHorizontalLength(double value);
    public double get_TickLabelDistance();
    public void set_TickLabelDistance(double value);
    public double get_ExplodedDistance();
    public void set_ExplodedDistance(double value);
    public string get_LabelField();
    public void set_LabelField(string value);
    public string get_ValueField();
    public void set_ValueField(string value);
    public string get_ColorField();
    public void set_ColorField(string value);
    public string get_IsExplodedField();
    public void set_IsExplodedField(string value);
    protected virtual void SynchronizeProperties(Series series);
}
[ContentPropertyAttribute("Series")]
[TemplatePartAttribute]
public class OxyPlot.Wpf.Plot : PlotBase {
    private PlotModel internalModel;
    private IPlotController defaultController;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty IsLegendVisibleProperty;
    public static DependencyProperty LegendBackgroundProperty;
    public static DependencyProperty LegendBorderProperty;
    public static DependencyProperty LegendBorderThicknessProperty;
    public static DependencyProperty LegendFontProperty;
    public static DependencyProperty LegendFontSizeProperty;
    public static DependencyProperty LegendFontWeightProperty;
    public static DependencyProperty LegendItemAlignmentProperty;
    public static DependencyProperty LegendItemOrderProperty;
    public static DependencyProperty LegendItemSpacingProperty;
    public static DependencyProperty LegendLineSpacingProperty;
    public static DependencyProperty LegendMarginProperty;
    public static DependencyProperty LegendMaxHeightProperty;
    public static DependencyProperty LegendMaxWidthProperty;
    public static DependencyProperty LegendOrientationProperty;
    public static DependencyProperty LegendColumnSpacingProperty;
    public static DependencyProperty LegendPaddingProperty;
    public static DependencyProperty LegendPlacementProperty;
    public static DependencyProperty LegendPositionProperty;
    public static DependencyProperty LegendSymbolLengthProperty;
    public static DependencyProperty LegendSymbolMarginProperty;
    public static DependencyProperty LegendSymbolPlacementProperty;
    public static DependencyProperty SelectionColorProperty;
    public static DependencyProperty RenderingDecoratorProperty;
    public static DependencyProperty SubtitleFontProperty;
    public static DependencyProperty TitleColorProperty;
    public static DependencyProperty SubtitleColorProperty;
    public static DependencyProperty DefaultFontProperty;
    public static DependencyProperty DefaultFontSizeProperty;
    public static DependencyProperty DefaultColorsProperty;
    public static DependencyProperty AxisTierDistanceProperty;
    public static DependencyProperty LegendTextColorProperty;
    public static DependencyProperty LegendTitleProperty;
    public static DependencyProperty LegendTitleColorProperty;
    public static DependencyProperty LegendTitleFontProperty;
    public static DependencyProperty LegendTitleFontSizeProperty;
    public static DependencyProperty LegendTitleFontWeightProperty;
    public static DependencyProperty PlotAreaBackgroundProperty;
    public static DependencyProperty PlotAreaBorderColorProperty;
    public static DependencyProperty PlotAreaBorderThicknessProperty;
    public static DependencyProperty PlotMarginsProperty;
    public static DependencyProperty PlotTypeProperty;
    public static DependencyProperty SubtitleFontSizeProperty;
    public static DependencyProperty SubtitleFontWeightProperty;
    public static DependencyProperty SubtitleProperty;
    public static DependencyProperty TextColorProperty;
    public static DependencyProperty TitleAlignmentProperty;
    public static DependencyProperty TitleFontProperty;
    public static DependencyProperty TitleFontSizeProperty;
    public static DependencyProperty TitleFontWeightProperty;
    public static DependencyProperty TitlePaddingProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty TitleToolTipProperty;
    public static DependencyProperty InvalidateFlagProperty;
    private ObservableCollection`1<Annotation> annotations;
    private ObservableCollection`1<Axis> axes;
    private ObservableCollection`1<Series> series;
    public ObservableCollection`1<Annotation> Annotations { get; }
    public PlotModel ActualModel { get; }
    public IPlotController ActualController { get; }
    protected IEnumerator LogicalChildren { get; }
    public Collection`1<Axis> Axes { get; }
    public CultureInfo Culture { get; public set; }
    public bool IsLegendVisible { get; public set; }
    public Color LegendBackground { get; public set; }
    public Color LegendBorder { get; public set; }
    public double LegendBorderThickness { get; public set; }
    public double LegendColumnSpacing { get; public set; }
    public string LegendFont { get; public set; }
    public double LegendFontSize { get; public set; }
    public FontWeight LegendFontWeight { get; public set; }
    public HorizontalAlignment LegendItemAlignment { get; public set; }
    public LegendItemOrder LegendItemOrder { get; public set; }
    public double LegendItemSpacing { get; public set; }
    public double LegendLineSpacing { get; public set; }
    public double LegendMaxHeight { get; public set; }
    public double LegendMaxWidth { get; public set; }
    public double LegendMargin { get; public set; }
    public LegendOrientation LegendOrientation { get; public set; }
    public double LegendPadding { get; public set; }
    public LegendPlacement LegendPlacement { get; public set; }
    public LegendPosition LegendPosition { get; public set; }
    public double LegendSymbolLength { get; public set; }
    public double LegendSymbolMargin { get; public set; }
    public LegendSymbolPlacement LegendSymbolPlacement { get; public set; }
    public string LegendTitleFont { get; public set; }
    public string DefaultFont { get; public set; }
    public double DefaultFontSize { get; public set; }
    public IList`1<Color> DefaultColors { get; public set; }
    public Color LegendTextColor { get; public set; }
    public string LegendTitle { get; public set; }
    public Color LegendTitleColor { get; public set; }
    public double AxisTierDistance { get; public set; }
    public Color SelectionColor { get; public set; }
    public Func`2<IRenderContext, IRenderContext> RenderingDecorator { get; public set; }
    public string SubtitleFont { get; public set; }
    public Color TitleColor { get; public set; }
    public double LegendTitleFontSize { get; public set; }
    public Color SubtitleColor { get; public set; }
    public FontWeight LegendTitleFontWeight { get; public set; }
    public Brush PlotAreaBackground { get; public set; }
    public Color PlotAreaBorderColor { get; public set; }
    public Thickness PlotAreaBorderThickness { get; public set; }
    public Thickness PlotMargins { get; public set; }
    public PlotType PlotType { get; public set; }
    public Collection`1<Series> Series { get; }
    public string Subtitle { get; public set; }
    public double SubtitleFontSize { get; public set; }
    public FontWeight SubtitleFontWeight { get; public set; }
    public Color TextColor { get; public set; }
    public string Title { get; public set; }
    public string TitleToolTip { get; public set; }
    public TitleHorizontalAlignment TitleHorizontalAlignment { get; public set; }
    public string TitleFont { get; public set; }
    public double TitleFontSize { get; public set; }
    public FontWeight TitleFontWeight { get; public set; }
    public double TitlePadding { get; public set; }
    public int InvalidateFlag { get; public set; }
    private static Plot();
    public ObservableCollection`1<Annotation> get_Annotations();
    public virtual PlotModel get_ActualModel();
    public virtual IPlotController get_ActualController();
    [IteratorStateMachineAttribute("OxyPlot.Wpf.Plot/<get_LogicalChildren>d__11")]
protected virtual IEnumerator get_LogicalChildren();
    protected virtual void UpdateModel(bool updateData);
    protected void OnAppearanceChanged();
    private static void AppearanceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnAnnotationsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnAxesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSeriesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SyncLogicalTree(NotifyCollectionChangedEventArgs e);
    private void SynchronizeProperties();
    private void SynchronizeAnnotations();
    private void SynchronizeAxes();
    private void SynchronizeSeries();
    public Collection`1<Axis> get_Axes();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_IsLegendVisible();
    public void set_IsLegendVisible(bool value);
    public Color get_LegendBackground();
    public void set_LegendBackground(Color value);
    public Color get_LegendBorder();
    public void set_LegendBorder(Color value);
    public double get_LegendBorderThickness();
    public void set_LegendBorderThickness(double value);
    public double get_LegendColumnSpacing();
    public void set_LegendColumnSpacing(double value);
    public string get_LegendFont();
    public void set_LegendFont(string value);
    public double get_LegendFontSize();
    public void set_LegendFontSize(double value);
    public FontWeight get_LegendFontWeight();
    public void set_LegendFontWeight(FontWeight value);
    public HorizontalAlignment get_LegendItemAlignment();
    public void set_LegendItemAlignment(HorizontalAlignment value);
    public LegendItemOrder get_LegendItemOrder();
    public void set_LegendItemOrder(LegendItemOrder value);
    public double get_LegendItemSpacing();
    public void set_LegendItemSpacing(double value);
    public double get_LegendLineSpacing();
    public void set_LegendLineSpacing(double value);
    public double get_LegendMaxHeight();
    public void set_LegendMaxHeight(double value);
    public double get_LegendMaxWidth();
    public void set_LegendMaxWidth(double value);
    public double get_LegendMargin();
    public void set_LegendMargin(double value);
    public LegendOrientation get_LegendOrientation();
    public void set_LegendOrientation(LegendOrientation value);
    public double get_LegendPadding();
    public void set_LegendPadding(double value);
    public LegendPlacement get_LegendPlacement();
    public void set_LegendPlacement(LegendPlacement value);
    public LegendPosition get_LegendPosition();
    public void set_LegendPosition(LegendPosition value);
    public double get_LegendSymbolLength();
    public void set_LegendSymbolLength(double value);
    public double get_LegendSymbolMargin();
    public void set_LegendSymbolMargin(double value);
    public LegendSymbolPlacement get_LegendSymbolPlacement();
    public void set_LegendSymbolPlacement(LegendSymbolPlacement value);
    public string get_LegendTitleFont();
    public void set_LegendTitleFont(string value);
    public string get_DefaultFont();
    public void set_DefaultFont(string value);
    public double get_DefaultFontSize();
    public void set_DefaultFontSize(double value);
    public IList`1<Color> get_DefaultColors();
    public void set_DefaultColors(IList`1<Color> value);
    public Color get_LegendTextColor();
    public void set_LegendTextColor(Color value);
    public string get_LegendTitle();
    public void set_LegendTitle(string value);
    public Color get_LegendTitleColor();
    public void set_LegendTitleColor(Color value);
    public double get_AxisTierDistance();
    public void set_AxisTierDistance(double value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    public Func`2<IRenderContext, IRenderContext> get_RenderingDecorator();
    public void set_RenderingDecorator(Func`2<IRenderContext, IRenderContext> value);
    public string get_SubtitleFont();
    public void set_SubtitleFont(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public double get_LegendTitleFontSize();
    public void set_LegendTitleFontSize(double value);
    public Color get_SubtitleColor();
    public void set_SubtitleColor(Color value);
    public FontWeight get_LegendTitleFontWeight();
    public void set_LegendTitleFontWeight(FontWeight value);
    public Brush get_PlotAreaBackground();
    public void set_PlotAreaBackground(Brush value);
    public Color get_PlotAreaBorderColor();
    public void set_PlotAreaBorderColor(Color value);
    public Thickness get_PlotAreaBorderThickness();
    public void set_PlotAreaBorderThickness(Thickness value);
    public Thickness get_PlotMargins();
    public void set_PlotMargins(Thickness value);
    public PlotType get_PlotType();
    public void set_PlotType(PlotType value);
    public Collection`1<Series> get_Series();
    public string get_Subtitle();
    public void set_Subtitle(string value);
    public double get_SubtitleFontSize();
    public void set_SubtitleFontSize(double value);
    public FontWeight get_SubtitleFontWeight();
    public void set_SubtitleFontWeight(FontWeight value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public string get_Title();
    public void set_Title(string value);
    public string get_TitleToolTip();
    public void set_TitleToolTip(string value);
    public TitleHorizontalAlignment get_TitleHorizontalAlignment();
    public void set_TitleHorizontalAlignment(TitleHorizontalAlignment value);
    public string get_TitleFont();
    public void set_TitleFont(string value);
    public double get_TitleFontSize();
    public void set_TitleFontSize(double value);
    public FontWeight get_TitleFontWeight();
    public void set_TitleFontWeight(FontWeight value);
    public double get_TitlePadding();
    public void set_TitlePadding(double value);
    public int get_InvalidateFlag();
    public void set_InvalidateFlag(int value);
    private void InvalidateFlagChanged();
}
public abstract class OxyPlot.Wpf.PlotBase : Control {
    protected static string PartGrid;
    private ObservableCollection`1<TrackerDefinition> trackerDefinitions;
    private CanvasRenderContext renderContext;
    private Canvas canvas;
    private FrameworkElement currentTracker;
    private ControlTemplate currentTrackerTemplate;
    private Grid grid;
    private int isPlotInvalidated;
    private ScreenPoint mouseDownPoint;
    private Canvas overlays;
    private ContentControl zoomControl;
    private bool isVisibleToUserCache;
    private FrameworkElement containerCache;
    [CompilerGeneratedAttribute]
private bool <DisconnectCanvasWhileUpdating>k__BackingField;
    public static DependencyProperty DefaultTrackerTemplateProperty;
    public static DependencyProperty IsMouseWheelEnabledProperty;
    public static DependencyProperty PanCursorProperty;
    public static DependencyProperty ZoomHorizontalCursorProperty;
    public static DependencyProperty ZoomRectangleCursorProperty;
    public static DependencyProperty ZoomRectangleTemplateProperty;
    public static DependencyProperty ZoomVerticalCursorProperty;
    public bool DisconnectCanvasWhileUpdating { get; public set; }
    private Model OxyPlot.IView.ActualModel { get; }
    public PlotModel ActualModel { get; }
    private IController OxyPlot.IView.ActualController { get; }
    public IPlotController ActualController { get; }
    public OxyRect ClientArea { get; }
    public ObservableCollection`1<TrackerDefinition> TrackerDefinitions { get; }
    public ControlTemplate DefaultTrackerTemplate { get; public set; }
    public bool IsMouseWheelEnabled { get; public set; }
    public Cursor PanCursor { get; public set; }
    public Cursor ZoomHorizontalCursor { get; public set; }
    public Cursor ZoomRectangleCursor { get; public set; }
    public ControlTemplate ZoomRectangleTemplate { get; public set; }
    public Cursor ZoomVerticalCursor { get; public set; }
    private static PlotBase();
    [CompilerGeneratedAttribute]
public bool get_DisconnectCanvasWhileUpdating();
    [CompilerGeneratedAttribute]
public void set_DisconnectCanvasWhileUpdating(bool value);
    private sealed virtual override Model OxyPlot.IView.get_ActualModel();
    public abstract virtual PlotModel get_ActualModel();
    private sealed virtual override IController OxyPlot.IView.get_ActualController();
    public abstract virtual IPlotController get_ActualController();
    public sealed virtual OxyRect get_ClientArea();
    public ObservableCollection`1<TrackerDefinition> get_TrackerDefinitions();
    public sealed virtual void HideTracker();
    public sealed virtual void HideZoomRectangle();
    public void PanAllAxes(Vector delta);
    public void ZoomAllAxes(double factor);
    public void ResetAllAxes();
    public sealed virtual void InvalidatePlot(bool updateData);
    public virtual void OnApplyTemplate();
    public sealed virtual void SetCursorType(CursorType cursorType);
    public sealed virtual void ShowTracker(TrackerHitResult trackerHitResult);
    public sealed virtual void ShowZoomRectangle(OxyRect r);
    public sealed virtual void SetClipboardText(string text);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void UpdateModel(bool updateData);
    protected bool IsVisibleToUser();
    private bool IsUserVisible(FrameworkElement element, FrameworkElement container);
    private void DoCopy(object sender, ExecutedRoutedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnLayoutUpdated(object sender, EventArgs e);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private FrameworkElement GetRelevantParent(DependencyObject obj);
    private void UpdateVisuals();
    private void BeginInvoke(Action action);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnManipulationStarted(ManipulationStartedEventArgs e);
    protected virtual void OnManipulationDelta(ManipulationDeltaEventArgs e);
    protected virtual void OnManipulationCompleted(ManipulationCompletedEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    public void SaveBitmap(string fileName);
    public void SaveBitmap(string fileName, int width, int height, OxyColor background);
    public void SaveXaml(string fileName);
    public string ToXaml();
    public BitmapSource ToBitmap();
    public ControlTemplate get_DefaultTrackerTemplate();
    public void set_DefaultTrackerTemplate(ControlTemplate value);
    public bool get_IsMouseWheelEnabled();
    public void set_IsMouseWheelEnabled(bool value);
    public Cursor get_PanCursor();
    public void set_PanCursor(Cursor value);
    public Cursor get_ZoomHorizontalCursor();
    public void set_ZoomHorizontalCursor(Cursor value);
    public Cursor get_ZoomRectangleCursor();
    public void set_ZoomRectangleCursor(Cursor value);
    public ControlTemplate get_ZoomRectangleTemplate();
    public void set_ZoomRectangleTemplate(ControlTemplate value);
    public Cursor get_ZoomVerticalCursor();
    public void set_ZoomVerticalCursor(Cursor value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(object s, ExecutedRoutedEventArgs e);
}
public static class OxyPlot.Wpf.PlotCommands : object {
    public static ICommand ResetAxes;
    private static PlotCommands();
}
[TemplatePartAttribute]
public class OxyPlot.Wpf.PlotView : PlotBase {
    public static DependencyProperty ControllerProperty;
    public static DependencyProperty ModelProperty;
    private object modelLock;
    private PlotModel currentModel;
    private IPlotController defaultController;
    public PlotModel Model { get; public set; }
    public IPlotController Controller { get; public set; }
    public PlotModel ActualModel { get; }
    public IPlotController ActualController { get; }
    private static PlotView();
    public PlotModel get_Model();
    public void set_Model(PlotModel value);
    public IPlotController get_Controller();
    public void set_Controller(IPlotController value);
    public virtual PlotModel get_ActualModel();
    public virtual IPlotController get_ActualController();
    protected void OnAppearanceChanged();
    private static void AppearanceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void ModelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnModelChanged();
}
public class OxyPlot.Wpf.PngExporter : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Resolution>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Background>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public double Resolution { get; public set; }
    public OxyColor Background { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public double get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(OxyColor value);
    public static void Export(IPlotModel model, string fileName, int width, int height, OxyColor background, double resolution);
    public sealed virtual void Export(IPlotModel model, Stream stream);
    public BitmapSource ExportToBitmap(IPlotModel model);
}
public class OxyPlot.Wpf.PointAnnotation : ShapeAnnotation {
    public static DependencyProperty XProperty;
    public static DependencyProperty YProperty;
    public static DependencyProperty SizeProperty;
    public static DependencyProperty TextMarginProperty;
    public static DependencyProperty ShapeProperty;
    public double Size { get; public set; }
    public double TextMargin { get; public set; }
    public MarkerType Shape { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private static PointAnnotation();
    public double get_Size();
    public void set_Size(double value);
    public double get_TextMargin();
    public void set_TextMargin(double value);
    public MarkerType get_Shape();
    public void set_Shape(MarkerType value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.PolygonAnnotation : ShapeAnnotation {
    public static DependencyProperty LineJoinProperty;
    public static DependencyProperty LineStyleProperty;
    public static DependencyProperty PointsProperty;
    public LineJoin LineJoin { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public IList`1<DataPoint> Points { get; public set; }
    private static PolygonAnnotation();
    public LineJoin get_LineJoin();
    public void set_LineJoin(LineJoin value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public IList`1<DataPoint> get_Points();
    public void set_Points(IList`1<DataPoint> value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.PolylineAnnotation : PathAnnotation {
    public static DependencyProperty InterpolationAlgorithmProperty;
    public static DependencyProperty MinimumSegmentLengthProperty;
    public static DependencyProperty PointsProperty;
    public IList`1<DataPoint> Points { get; public set; }
    public double MinimumSegmentLength { get; public set; }
    public IInterpolationAlgorithm InterpolationAlgorithm { get; public set; }
    private static PolylineAnnotation();
    public IList`1<DataPoint> get_Points();
    public void set_Points(IList`1<DataPoint> value);
    public double get_MinimumSegmentLength();
    public void set_MinimumSegmentLength(double value);
    public IInterpolationAlgorithm get_InterpolationAlgorithm();
    public void set_InterpolationAlgorithm(IInterpolationAlgorithm value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.RectangleAnnotation : ShapeAnnotation {
    public static DependencyProperty MaximumXProperty;
    public static DependencyProperty MaximumYProperty;
    public static DependencyProperty MinimumXProperty;
    public static DependencyProperty MinimumYProperty;
    public double MaximumX { get; public set; }
    public double MaximumY { get; public set; }
    public double MinimumX { get; public set; }
    public double MinimumY { get; public set; }
    private static RectangleAnnotation();
    public double get_MaximumX();
    public void set_MaximumX(double value);
    public double get_MaximumY();
    public void set_MaximumY(double value);
    public double get_MinimumX();
    public void set_MinimumX(double value);
    public double get_MinimumY();
    public void set_MinimumY(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.RectangleSeries : XYAxisSeries {
    public static DependencyProperty CanTrackerInterpolatePointsProperty;
    public static DependencyProperty MappingProperty;
    public static DependencyProperty ColorAxisKeyProperty;
    public bool CanTrackerInterpolatePoints { get; public set; }
    public Func`2<object, RectangleItem> Mapping { get; public set; }
    public string ColorAxisKey { get; public set; }
    private static RectangleSeries();
    public bool get_CanTrackerInterpolatePoints();
    public void set_CanTrackerInterpolatePoints(bool value);
    public Func`2<object, RectangleItem> get_Mapping();
    public void set_Mapping(Func`2<object, RectangleItem> value);
    public string get_ColorAxisKey();
    public void set_ColorAxisKey(string value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.ScatterErrorSeries : ScatterSeries`1<ScatterErrorPoint> {
    public static DependencyProperty DataFieldErrorXProperty;
    public static DependencyProperty DataFieldErrorYProperty;
    public static DependencyProperty ErrorBarColorProperty;
    public static DependencyProperty ErrorBarStopWidthProperty;
    public static DependencyProperty ErrorBarStrokeThicknessProperty;
    public static DependencyProperty MinimumErrorSizeProperty;
    public string DataFieldErrorX { get; public set; }
    public string DataFieldErrorY { get; public set; }
    public Color ErrorBarColor { get; public set; }
    public double ErrorBarStopWidth { get; public set; }
    public double ErrorBarStrokeThickness { get; public set; }
    public double MinimumErrorSize { get; public set; }
    private static ScatterErrorSeries();
    public string get_DataFieldErrorX();
    public void set_DataFieldErrorX(string value);
    public string get_DataFieldErrorY();
    public void set_DataFieldErrorY(string value);
    public Color get_ErrorBarColor();
    public void set_ErrorBarColor(Color value);
    public double get_ErrorBarStopWidth();
    public void set_ErrorBarStopWidth(double value);
    public double get_ErrorBarStrokeThickness();
    public void set_ErrorBarStrokeThickness(double value);
    public double get_MinimumErrorSize();
    public void set_MinimumErrorSize(double value);
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.ScatterSeries : ScatterSeries`1<ScatterPoint> {
}
public abstract class OxyPlot.Wpf.ScatterSeries`1 : XYAxisSeries {
    public static DependencyProperty BinSizeProperty;
    public static DependencyProperty DataFieldSizeProperty;
    public static DependencyProperty DataFieldTagProperty;
    public static DependencyProperty DataFieldValueProperty;
    public static DependencyProperty DataFieldXProperty;
    public static DependencyProperty DataFieldYProperty;
    public static DependencyProperty MappingProperty;
    public static DependencyProperty MarkerFillProperty;
    public static DependencyProperty MarkerOutlineProperty;
    public static DependencyProperty MarkerSizeProperty;
    public static DependencyProperty MarkerStrokeProperty;
    public static DependencyProperty MarkerStrokeThicknessProperty;
    public static DependencyProperty MarkerTypeProperty;
    [CompilerGeneratedAttribute]
private string <ColorAxisKey>k__BackingField;
    public int BinSize { get; public set; }
    public string DataFieldSize { get; public set; }
    public string DataFieldTag { get; public set; }
    public string DataFieldValue { get; public set; }
    public string DataFieldX { get; public set; }
    public string DataFieldY { get; public set; }
    public Func`2<object, T> Mapping { get; public set; }
    public Color MarkerFill { get; public set; }
    public ScreenPoint[] MarkerOutline { get; public set; }
    public double MarkerSize { get; public set; }
    public Color MarkerStroke { get; public set; }
    public double MarkerStrokeThickness { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public string ColorAxisKey { get; public set; }
    private static ScatterSeries`1();
    public int get_BinSize();
    public void set_BinSize(int value);
    public string get_DataFieldSize();
    public void set_DataFieldSize(string value);
    public string get_DataFieldTag();
    public void set_DataFieldTag(string value);
    public string get_DataFieldValue();
    public void set_DataFieldValue(string value);
    public string get_DataFieldX();
    public void set_DataFieldX(string value);
    public string get_DataFieldY();
    public void set_DataFieldY(string value);
    public Func`2<object, T> get_Mapping();
    public void set_Mapping(Func`2<object, T> value);
    public Color get_MarkerFill();
    public void set_MarkerFill(Color value);
    public ScreenPoint[] get_MarkerOutline();
    public void set_MarkerOutline(ScreenPoint[] value);
    public double get_MarkerSize();
    public void set_MarkerSize(double value);
    public Color get_MarkerStroke();
    public void set_MarkerStroke(Color value);
    public double get_MarkerStrokeThickness();
    public void set_MarkerStrokeThickness(double value);
    public MarkerType get_MarkerType();
    public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public string get_ColorAxisKey();
    [CompilerGeneratedAttribute]
public void set_ColorAxisKey(string value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public abstract class OxyPlot.Wpf.Series : ItemsControl {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty RenderInLegendProperty;
    public static DependencyProperty TrackerFormatStringProperty;
    public static DependencyProperty TrackerKeyProperty;
    private EventListener eventListener;
    [CompilerGeneratedAttribute]
private Series <InternalSeries>k__BackingField;
    public Color Color { get; public set; }
    public Series InternalSeries { get; protected set; }
    public string Title { get; public set; }
    public bool RenderInLegend { get; public set; }
    public string TrackerFormatString { get; public set; }
    public string TrackerKey { get; public set; }
    private static Series();
    public Color get_Color();
    public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Series get_InternalSeries();
    [CompilerGeneratedAttribute]
protected void set_InternalSeries(Series value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_RenderInLegend();
    public void set_RenderInLegend(bool value);
    public string get_TrackerFormatString();
    public void set_TrackerFormatString(string value);
    public string get_TrackerKey();
    public void set_TrackerKey(string value);
    public abstract virtual Series CreateModel();
    protected static void AppearanceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected static void DataChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected void OnDataChanged();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected void OnVisualChanged();
    protected virtual void SynchronizeProperties(Series s);
    private void SubscribeToCollectionChanged(IEnumerable oldValue, IEnumerable newValue);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
}
public abstract class OxyPlot.Wpf.ShapeAnnotation : TextualAnnotation {
    public static DependencyProperty FillProperty;
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public Color Fill { get; public set; }
    public Color Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    private static ShapeAnnotation();
    public Color get_Fill();
    public void set_Fill(Color value);
    public Color get_Stroke();
    public void set_Stroke(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.StairStepSeries : LineSeries {
    public static DependencyProperty VerticalStrokeThicknessProperty;
    public static DependencyProperty VerticalLineStyleProperty;
    public double VerticalStrokeThickness { get; public set; }
    public LineStyle VerticalLineStyle { get; public set; }
    private static StairStepSeries();
    public double get_VerticalStrokeThickness();
    public void set_VerticalStrokeThickness(double value);
    public LineStyle get_VerticalLineStyle();
    public void set_VerticalLineStyle(LineStyle value);
    public virtual Series CreateModel();
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.SvgExporter : SvgExporter {
}
public class OxyPlot.Wpf.TextAnnotation : TextualAnnotation {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty OffsetProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty StrokeThicknessProperty;
    public Color Background { get; public set; }
    public Vector Offset { get; public set; }
    public Thickness Padding { get; public set; }
    public Color Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    private static TextAnnotation();
    public Color get_Background();
    public void set_Background(Color value);
    public Vector get_Offset();
    public void set_Offset(Vector value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public Color get_Stroke();
    public void set_Stroke(Color value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public virtual Annotation CreateModel();
    public virtual void SynchronizeProperties();
}
public enum OxyPlot.Wpf.TextMeasurementMethod : Enum {
    public int value__;
    public static TextMeasurementMethod TextBlock;
    public static TextMeasurementMethod GlyphTypeface;
}
public abstract class OxyPlot.Wpf.TextualAnnotation : Annotation {
    public static DependencyProperty TextProperty;
    public static DependencyProperty TextPositionProperty;
    public static DependencyProperty TextRotationProperty;
    public static DependencyProperty TextColorProperty;
    public static DependencyProperty TextHorizontalAlignmentProperty;
    public static DependencyProperty TextVerticalAlignmentProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty FontSizeProperty;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public DataPoint TextPosition { get; public set; }
    public HorizontalAlignment TextHorizontalAlignment { get; public set; }
    public VerticalAlignment TextVerticalAlignment { get; public set; }
    public double TextRotation { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public double FontSize { get; public set; }
    private static TextualAnnotation();
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public DataPoint get_TextPosition();
    public void set_TextPosition(DataPoint value);
    public HorizontalAlignment get_TextHorizontalAlignment();
    public void set_TextHorizontalAlignment(HorizontalAlignment value);
    public VerticalAlignment get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(VerticalAlignment value);
    public double get_TextRotation();
    public void set_TextRotation(double value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.ThicknessConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class OxyPlot.Wpf.ThreeColorLineSeries : LineSeries {
    public static DependencyProperty ColorLoProperty;
    public static DependencyProperty ColorHiProperty;
    public static DependencyProperty LimitLoProperty;
    public static DependencyProperty LimitHiProperty;
    public static DependencyProperty LineStyleLoProperty;
    public static DependencyProperty LineStyleHiProperty;
    public Color ColorLo { get; public set; }
    public Color ColorHi { get; public set; }
    public double LimitLo { get; public set; }
    public double LimitHi { get; public set; }
    public LineStyle LineStyleLo { get; public set; }
    public LineStyle LineStyleHi { get; public set; }
    private static ThreeColorLineSeries();
    public Color get_ColorLo();
    public void set_ColorLo(Color value);
    public Color get_ColorHi();
    public void set_ColorHi(Color value);
    public double get_LimitLo();
    public void set_LimitLo(double value);
    public double get_LimitHi();
    public void set_LimitHi(double value);
    public LineStyle get_LineStyleLo();
    public void set_LineStyleLo(LineStyle value);
    public LineStyle get_LineStyleHi();
    public void set_LineStyleHi(LineStyle value);
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.TimeSpanAxis : Axis {
    public virtual Axis CreateModel();
    protected virtual void SynchronizeProperties();
}
public class OxyPlot.Wpf.TrackerControl : ContentControl {
    public static DependencyProperty HorizontalLineVisibilityProperty;
    public static DependencyProperty VerticalLineVisibilityProperty;
    public static DependencyProperty LineStrokeProperty;
    public static DependencyProperty LineExtentsProperty;
    public static DependencyProperty LineDashArrayProperty;
    public static DependencyProperty BorderEdgeModeProperty;
    public static DependencyProperty ShowPointerProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty DistanceProperty;
    public static DependencyProperty CanCenterHorizontallyProperty;
    public static DependencyProperty CanCenterVerticallyProperty;
    public static DependencyProperty PositionProperty;
    private static string PartPath;
    private static string PartContent;
    private static string PartContentcontainer;
    private static string PartHorizontalline;
    private static string PartVerticalline;
    private ContentPresenter content;
    private Line horizontalLine;
    private Path path;
    private Grid contentContainer;
    private Line verticalLine;
    public EdgeMode BorderEdgeMode { get; public set; }
    public Visibility HorizontalLineVisibility { get; public set; }
    public Visibility VerticalLineVisibility { get; public set; }
    public Brush LineStroke { get; public set; }
    public OxyRect LineExtents { get; public set; }
    public DoubleCollection LineDashArray { get; public set; }
    public bool ShowPointer { get; public set; }
    public double CornerRadius { get; public set; }
    public double Distance { get; public set; }
    public bool CanCenterHorizontally { get; public set; }
    public bool CanCenterVertically { get; public set; }
    public ScreenPoint Position { get; public set; }
    private static TrackerControl();
    public EdgeMode get_BorderEdgeMode();
    public void set_BorderEdgeMode(EdgeMode value);
    public Visibility get_HorizontalLineVisibility();
    public void set_HorizontalLineVisibility(Visibility value);
    public Visibility get_VerticalLineVisibility();
    public void set_VerticalLineVisibility(Visibility value);
    public Brush get_LineStroke();
    public void set_LineStroke(Brush value);
    public OxyRect get_LineExtents();
    public void set_LineExtents(OxyRect value);
    public DoubleCollection get_LineDashArray();
    public void set_LineDashArray(DoubleCollection value);
    public bool get_ShowPointer();
    public void set_ShowPointer(bool value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public double get_Distance();
    public void set_Distance(double value);
    public bool get_CanCenterHorizontally();
    public void set_CanCenterHorizontally(bool value);
    public bool get_CanCenterVertically();
    public void set_CanCenterVertically(bool value);
    public ScreenPoint get_Position();
    public void set_Position(ScreenPoint value);
    public virtual void OnApplyTemplate();
    private static void PositionChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void OnPositionChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void UpdatePositionAndBorder();
    private Geometry CreateBorderGeometry(HorizontalAlignment ha, VerticalAlignment va, double width, double height, Thickness& margin);
    private Geometry CreatePointerBorderGeometry(HorizontalAlignment ha, VerticalAlignment va, double width, double height, Thickness& margin);
}
public class OxyPlot.Wpf.TrackerDefinition : DependencyObject {
    public static DependencyProperty TrackerKeyProperty;
    public static DependencyProperty TrackerTemplateProperty;
    public string TrackerKey { get; public set; }
    public ControlTemplate TrackerTemplate { get; public set; }
    private static TrackerDefinition();
    public string get_TrackerKey();
    public void set_TrackerKey(string value);
    public ControlTemplate get_TrackerTemplate();
    public void set_TrackerTemplate(ControlTemplate value);
}
public class OxyPlot.Wpf.TwoColorAreaSeries : AreaSeries {
    public static DependencyProperty Dashes2Property;
    public static DependencyProperty Fill2Property;
    public static DependencyProperty LineStyle2Property;
    public static DependencyProperty LimitProperty;
    public static DependencyProperty MarkerFill2Property;
    public static DependencyProperty MarkerStroke2Property;
    public DoubleCollection Dashes2 { get; public set; }
    public Color Fill2 { get; public set; }
    public Color MarkerFill2 { get; public set; }
    public Color MarkerStroke2 { get; public set; }
    public LineStyle LineStyle2 { get; public set; }
    public double Limit { get; public set; }
    private static TwoColorAreaSeries();
    public DoubleCollection get_Dashes2();
    public void set_Dashes2(DoubleCollection value);
    public Color get_Fill2();
    public void set_Fill2(Color value);
    public Color get_MarkerFill2();
    public void set_MarkerFill2(Color value);
    public Color get_MarkerStroke2();
    public void set_MarkerStroke2(Color value);
    public LineStyle get_LineStyle2();
    public void set_LineStyle2(LineStyle value);
    public double get_Limit();
    public void set_Limit(double value);
    protected virtual void SynchronizeProperties(Series series);
}
public class OxyPlot.Wpf.TwoColorLineSeries : LineSeries {
    public static DependencyProperty Color2Property;
    public static DependencyProperty LimitProperty;
    public static DependencyProperty LineStyle2Property;
    public Color Color2 { get; public set; }
    public double Limit { get; public set; }
    public LineStyle LineStyle2 { get; public set; }
    private static TwoColorLineSeries();
    public Color get_Color2();
    public void set_Color2(Color value);
    public double get_Limit();
    public void set_Limit(double value);
    public LineStyle get_LineStyle2();
    public void set_LineStyle2(LineStyle value);
    protected virtual void SynchronizeProperties(Series series);
}
public static class OxyPlot.Wpf.XamlExporter : object {
    public static string ExportToString(IPlotModel model, double width, double height, OxyColor background);
    public static void Export(PlotModel model, string fileName, double width, double height, OxyColor background);
    private static void Export(IPlotModel model, XmlWriter writer, double width, double height, OxyColor background);
}
public class OxyPlot.Wpf.XpsExporter : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private OxyColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private TextFormattingMode <TextFormattingMode>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public OxyColor Background { get; public set; }
    public TextFormattingMode TextFormattingMode { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public OxyColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(OxyColor value);
    [CompilerGeneratedAttribute]
public TextFormattingMode get_TextFormattingMode();
    [CompilerGeneratedAttribute]
public void set_TextFormattingMode(TextFormattingMode value);
    public static void Export(IPlotModel model, string fileName, double width, double height, OxyColor background);
    public static void Export(IPlotModel model, Stream stream, double width, double height);
    public static void Print(IPlotModel model, double width, double height);
    public sealed virtual void Export(IPlotModel model, Stream stream);
    public void Print(IPlotModel model);
    private void Write(IPlotModel model, XpsDocumentWriter writer);
}
public abstract class OxyPlot.Wpf.XYAxisSeries : ItemsSeries {
    public static DependencyProperty XAxisKeyProperty;
    public static DependencyProperty YAxisKeyProperty;
    public string XAxisKey { get; public set; }
    public string YAxisKey { get; public set; }
    private static XYAxisSeries();
    public string get_XAxisKey();
    public void set_XAxisKey(string value);
    public string get_YAxisKey();
    public void set_YAxisKey(string value);
    protected virtual void SynchronizeProperties(Series series);
}
