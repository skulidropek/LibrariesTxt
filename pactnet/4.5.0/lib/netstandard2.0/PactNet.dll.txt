[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class PactNet.ConfiguredMessageVerifier : object {
    private static JsonSerializerSettings NativeMessageSettings;
    private IMessageInteractionDriver driver;
    private PactConfig config;
    internal ConfiguredMessageVerifier(IMessageInteractionDriver driver, PactConfig config);
    private static ConfiguredMessageVerifier();
    public sealed virtual void Verify(Action`1<T> handler);
    [AsyncStateMachineAttribute("PactNet.ConfiguredMessageVerifier/<VerifyAsync>d__5`1")]
public sealed virtual Task VerifyAsync(Func`2<T, Task> handler);
    private T MessageReified();
}
internal class PactNet.ConsumerContext : object {
    [CompilerGeneratedAttribute]
private Uri <MockServerUri>k__BackingField;
    public Uri MockServerUri { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_MockServerUri();
    [CompilerGeneratedAttribute]
internal void set_MockServerUri(Uri value);
}
internal abstract class PactNet.Drivers.AbstractPactDriver : object {
    private PactHandle pact;
    protected AbstractPactDriver(PactHandle pact);
    public sealed virtual void WritePactFile(string directory);
}
internal class PactNet.Drivers.HttpInteractionDriver : object {
    private PactHandle pact;
    private InteractionHandle interaction;
    internal HttpInteractionDriver(PactHandle pact, InteractionHandle interaction);
    public sealed virtual void Given(string description);
    public sealed virtual void GivenWithParam(string description, string name, string value);
    public sealed virtual void WithRequest(string method, string path);
    public sealed virtual void WithQueryParameter(string name, string value, UInt32 index);
    public sealed virtual void WithRequestHeader(string name, string value, UInt32 index);
    public sealed virtual void WithResponseHeader(string name, string value, UInt32 index);
    public sealed virtual void WithResponseStatus(ushort status);
    public sealed virtual void WithRequestBody(string contentType, string body);
    public sealed virtual void WithResponseBody(string contentType, string body);
}
internal class PactNet.Drivers.HttpPactDriver : AbstractPactDriver {
    private PactHandle pact;
    internal HttpPactDriver(PactHandle pact);
    public sealed virtual IHttpInteractionDriver NewHttpInteraction(string description);
    public sealed virtual IMockServerDriver CreateMockServer(string host, Nullable`1<int> port, bool tls);
}
internal interface PactNet.Drivers.ICompletedPactDriver {
    public abstract virtual void WritePactFile(string directory);
}
internal interface PactNet.Drivers.IHttpInteractionDriver {
    public abstract virtual void WithRequest(string method, string path);
    public abstract virtual void WithQueryParameter(string name, string value, UInt32 index);
    public abstract virtual void WithRequestHeader(string name, string value, UInt32 index);
    public abstract virtual void WithResponseHeader(string name, string value, UInt32 index);
    public abstract virtual void WithResponseStatus(ushort status);
    public abstract virtual void WithRequestBody(string contentType, string body);
    public abstract virtual void WithResponseBody(string contentType, string body);
}
internal interface PactNet.Drivers.IHttpPactDriver {
    public abstract virtual IHttpInteractionDriver NewHttpInteraction(string description);
    public abstract virtual IMockServerDriver CreateMockServer(string host, Nullable`1<int> port, bool tls);
}
internal interface PactNet.Drivers.IMessageInteractionDriver {
    public abstract virtual void ExpectsToReceive(string description);
    public abstract virtual void WithMetadata(string key, string value);
    public abstract virtual void WithContents(string contentType, string body, UInt32 size);
    public abstract virtual string Reify();
}
internal interface PactNet.Drivers.IMessagePactDriver {
    public abstract virtual IMessageInteractionDriver NewMessageInteraction(string description);
    public abstract virtual void WithMessagePactMetadata(string namespace, string name, string value);
}
internal interface PactNet.Drivers.IMockServerDriver {
    public Uri Uri { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual string MockServerMismatches();
    public abstract virtual string MockServerLogs();
}
[ExtensionAttribute]
internal static class PactNet.Drivers.InteropActionExtensions : object {
    [ExtensionAttribute]
public static void CheckInteropSuccess(bool success);
}
internal interface PactNet.Drivers.IPactDriver {
    public abstract virtual IHttpPactDriver NewHttpPact(string consumerName, string providerName, PactSpecification version);
    public abstract virtual IMessagePactDriver NewMessagePact(string consumerName, string providerName, PactSpecification version);
    public abstract virtual string DriverLogs();
}
internal interface PactNet.Drivers.IProviderStateDriver {
    public abstract virtual void Given(string description);
    public abstract virtual void GivenWithParam(string description, string name, string value);
}
internal class PactNet.Drivers.MessageInteractionDriver : AbstractPactDriver {
    private InteractionHandle interaction;
    internal MessageInteractionDriver(PactHandle pact, InteractionHandle interaction);
    public sealed virtual void Given(string description);
    public sealed virtual void GivenWithParam(string description, string name, string value);
    public sealed virtual void ExpectsToReceive(string description);
    public sealed virtual void WithMetadata(string key, string value);
    public sealed virtual void WithContents(string contentType, string body, UInt32 size);
    public sealed virtual string Reify();
}
internal class PactNet.Drivers.MessagePactDriver : AbstractPactDriver {
    private PactHandle pact;
    internal MessagePactDriver(PactHandle pact);
    public sealed virtual IMessageInteractionDriver NewMessageInteraction(string description);
    public sealed virtual void WithMessagePactMetadata(string namespace, string name, string value);
}
internal class PactNet.Drivers.MockServerDriver : object {
    private int port;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public Uri Uri { get; }
    internal MockServerDriver(string host, int port, bool tls);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    public sealed virtual string MockServerMismatches();
    public sealed virtual string MockServerLogs();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void ReleaseUnmanagedResources();
}
internal class PactNet.Drivers.PactDriver : object {
    public sealed virtual IHttpPactDriver NewHttpPact(string consumerName, string providerName, PactSpecification version);
    public sealed virtual IMessagePactDriver NewMessagePact(string consumerName, string providerName, PactSpecification version);
    public sealed virtual string DriverLogs();
}
internal static class PactNet.Internal.Guard : object {
    internal static void NotNullOrEmpty(string value, string name);
    internal static void NotNull(object value, string name);
}
[IsReadOnlyAttribute]
internal class PactNet.Interop.InteractionHandle : ValueType {
    public UInt32 InteractionRef;
}
internal enum PactNet.Interop.InteractionPart : Enum {
    public int value__;
    public static InteractionPart Request;
    public static InteractionPart Response;
}
internal enum PactNet.Interop.LevelFilter : Enum {
    public int value__;
    public static LevelFilter Off;
    public static LevelFilter Error;
    public static LevelFilter Warn;
    public static LevelFilter Info;
    public static LevelFilter Debug;
    public static LevelFilter Trace;
}
internal static class PactNet.Interop.NativeInterop : object {
    private static string DllName;
    public static int LogToBuffer(LevelFilter levelFilter);
    public static int CreateMockServerForPact(PactHandle pact, string addrStr, bool tls);
    public static IntPtr MockServerMismatches(int mockServerPort);
    public static IntPtr MockServerLogs(int mockServerPort);
    public static bool CleanupMockServer(int mockServerPort);
    public static int WritePactFile(PactHandle pact, string directory, bool overwrite);
    public static string FetchLogBuffer(string logId);
    public static PactHandle NewPact(string consumerName, string providerName);
    public static bool WithSpecification(PactHandle pact, PactSpecification version);
    public static InteractionHandle NewInteraction(PactHandle pact, string description);
    public static bool Given(InteractionHandle interaction, string description);
    public static bool GivenWithParam(InteractionHandle interaction, string description, string name, string value);
    public static bool WithRequest(InteractionHandle interaction, string method, string path);
    public static bool WithQueryParameter(InteractionHandle interaction, string name, UIntPtr index, string value);
    public static bool WithHeader(InteractionHandle interaction, InteractionPart part, string name, UIntPtr index, string value);
    public static bool ResponseStatus(InteractionHandle interaction, ushort status);
    public static bool WithBody(InteractionHandle interaction, InteractionPart part, string contentType, string body);
    public static void FreeString(IntPtr s);
    public static int Verify(string args);
    public static void WithMessagePactMetadata(PactHandle pact, string namespace, string name, string value);
    public static InteractionHandle NewMessageInteraction(PactHandle pact, string description);
    public static void MessageExpectsToReceive(InteractionHandle message, string description);
    public static void MessageWithMetadata(InteractionHandle message, string key, string value);
    public static void MessageWithContents(InteractionHandle message, string contentType, string body, UIntPtr size);
    public static IntPtr MessageReify(InteractionHandle message);
    public static IntPtr VerifierNewForApplication(string name, string version);
    public static IntPtr VerifierShutdown(IntPtr handle);
    public static void VerifierSetProviderInfo(IntPtr handle, string name, string scheme, string host, ushort port, string path);
    public static void VerifierSetFilterInfo(IntPtr handle, string description, string state, byte noState);
    public static void VerifierSetProviderState(IntPtr handle, string url, byte teardown, byte body);
    public static void VerifierSetVerificationOptions(IntPtr handle, byte disableSslVerification, UInt32 requestTimeout);
    public static void VerifierSetPublishOptions(IntPtr handle, string providerVersion, string buildUrl, String[] providerTags, ushort providerTagsLength, string providerBranch);
    public static void VerifierSetConsumerFilters(IntPtr handle, String[] consumerFilters, ushort consumerFiltersLength);
    public static void AddCustomHeader(IntPtr handle, string name, string value);
    public static void VerifierAddFileSource(IntPtr handle, string file);
    public static void VerifierAddDirectorySource(IntPtr handle, string directory);
    public static void VerifierUrlSource(IntPtr handle, string url, string username, string password, string token);
    public static void VerifierBrokerSourceWithSelectors(IntPtr handle, string url, string username, string password, string token, byte enablePending, string includeWipPactsSince, String[] providerTags, ushort providerTagsLength, string providerBranch, String[] consumerVersionSelectors, ushort consumerVersionSelectorsLength, String[] consumerVersionTags, ushort consumerVersionTagsLength);
    public static int VerifierExecute(IntPtr handle);
    public static IntPtr VerifierLogs(IntPtr handle);
    public static IntPtr VerifierOutput(IntPtr handle, byte stripAnsi);
}
[IsReadOnlyAttribute]
internal class PactNet.Interop.PactHandle : ValueType {
    public ushort PactRef;
}
internal enum PactNet.Interop.PactSpecification : Enum {
    public int value__;
    public static PactSpecification Unknown;
    public static PactSpecification V1;
    public static PactSpecification V1_1;
    public static PactSpecification V2;
    public static PactSpecification V3;
    public static PactSpecification V4;
}
internal class PactNet.MessageBuilder : object {
    private IMessageInteractionDriver driver;
    private PactConfig config;
    internal MessageBuilder(IMessageInteractionDriver server, PactConfig config);
    private sealed virtual override IMessageBuilderV3 PactNet.IMessageBuilderV3.Given(string providerState);
    private sealed virtual override IMessageBuilderV3 PactNet.IMessageBuilderV3.Given(string providerState, IDictionary`2<string, string> parameters);
    private sealed virtual override IMessageBuilderV3 PactNet.IMessageBuilderV3.WithMetadata(string key, string value);
    private sealed virtual override IConfiguredMessageVerifier PactNet.IMessageBuilderV3.WithJsonContent(object content);
    private sealed virtual override IConfiguredMessageVerifier PactNet.IMessageBuilderV3.WithJsonContent(object content, JsonSerializerSettings settings);
    internal MessageBuilder Given(string providerState);
    internal MessageBuilder Given(string providerState, IDictionary`2<string, string> parameters);
    internal MessageBuilder WithMetadata(string key, string value);
    internal ConfiguredMessageVerifier WithJsonContent(object body);
    internal ConfiguredMessageVerifier WithJsonContent(object body, JsonSerializerSettings settings);
}
internal class PactNet.MessagePactBuilder : object {
    private IMessagePactDriver driver;
    private PactConfig config;
    internal MessagePactBuilder(IMessagePactDriver pact, PactConfig config);
    private sealed virtual override IMessageBuilderV3 PactNet.IMessagePactBuilderV3.ExpectsToReceive(string description);
    private sealed virtual override IMessagePactBuilderV3 PactNet.IMessagePactBuilderV3.WithPactMetadata(string namespace, string name, string value);
    internal IMessageBuilderV3 ExpectsToReceive(string description);
    internal IMessagePactBuilderV3 WithPactMetadata(string namespace, string name, string value);
}
internal class PactNet.Models.NativeMessage : object {
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [DynamicAttribute]
public object Contents { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Contents();
    [CompilerGeneratedAttribute]
public void set_Contents(object value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
internal class PactNet.PactBuilder : object {
    private IHttpPactDriver pact;
    private PactConfig config;
    private Nullable`1<int> port;
    private IPAddress host;
    internal PactBuilder(IHttpPactDriver pact, PactConfig config, Nullable`1<int> port, IPAddress host);
    private sealed virtual override IRequestBuilderV2 PactNet.IPactBuilderV2.UponReceiving(string description);
    private sealed virtual override IRequestBuilderV3 PactNet.IPactBuilderV3.UponReceiving(string description);
    internal RequestBuilder UponReceiving(string description);
    public sealed virtual void Verify(Action`1<IConsumerContext> interact);
    [AsyncStateMachineAttribute("PactNet.PactBuilder/<VerifyAsync>d__9")]
public sealed virtual Task VerifyAsync(Func`2<IConsumerContext, Task> interact);
    private IMockServerDriver StartMockServer();
    private void VerifyInternal(IMockServerDriver mockServer);
    private void PrintLogs(IMockServerDriver mockServer);
}
[ExtensionAttribute]
public static class PactNet.PactExtensions : object {
    private static object LogLocker;
    private static bool LogInitialised;
    private static PactExtensions();
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithHttpInteractions instead. Will be removed in PactNet 5.0.0")]
public static IPactBuilderV2 UsingNativeBackend(IPactV2 pact, Nullable`1<int> port, IPAddress host);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithHttpInteractions instead. Will be removed in PactNet 5.0.0")]
public static IPactBuilderV3 UsingNativeBackend(IPactV3 pact, Nullable`1<int> port, IPAddress host);
    [ExtensionAttribute]
public static IPactBuilderV2 WithHttpInteractions(IPactV2 pact, Nullable`1<int> port, IPAddress host);
    [ExtensionAttribute]
public static IPactBuilderV3 WithHttpInteractions(IPactV3 pact, Nullable`1<int> port, IPAddress host);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithMessageInteractions instead. Will be removed in PactNet 5.0.0")]
public static IMessagePactBuilderV3 UsingNativeBackend(IMessagePactV3 messagePact);
    [ExtensionAttribute]
public static IMessagePactBuilderV3 WithMessageInteractions(IPactV3 pact);
    private static void InitialiseLogging(PactLogLevel level);
}
internal class PactNet.RequestBuilder : object {
    private IHttpInteractionDriver driver;
    private JsonSerializerSettings defaultSettings;
    private Dictionary`2<string, UInt32> queryCounts;
    private Dictionary`2<string, UInt32> headerCounts;
    private bool requestConfigured;
    internal RequestBuilder(IHttpInteractionDriver driver, JsonSerializerSettings defaultSettings);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.Given(string providerState);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithRequest(HttpMethod method, string path);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithRequest(string method, string path);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithQuery(string key, string value);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithHeader(string key, string value);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithHeader(string key, IMatcher matcher);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithJsonBody(object body);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithJsonBody(object body, string contentType);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithJsonBody(object body, JsonSerializerSettings settings);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithJsonBody(object body, JsonSerializerSettings settings, string contentType);
    private sealed virtual override IRequestBuilderV2 PactNet.IRequestBuilderV2.WithBody(string body, string contentType);
    private sealed virtual override IResponseBuilderV2 PactNet.IRequestBuilderV2.WillRespond();
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.Given(string providerState);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.Given(string providerState, IDictionary`2<string, string> parameters);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithRequest(HttpMethod method, string path);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithRequest(string method, string path);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithQuery(string key, string value);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithQuery(string key, IMatcher matcher);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithHeader(string key, string value);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithHeader(string key, IMatcher matcher);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithJsonBody(object body);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithJsonBody(object body, string contentType);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithJsonBody(object body, JsonSerializerSettings settings);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithJsonBody(object body, JsonSerializerSettings settings, string contentType);
    private sealed virtual override IRequestBuilderV3 PactNet.IRequestBuilderV3.WithBody(string body, string contentType);
    private sealed virtual override IResponseBuilderV3 PactNet.IRequestBuilderV3.WillRespond();
    internal RequestBuilder Given(string providerState);
    internal RequestBuilder Given(string providerState, IDictionary`2<string, string> parameters);
    internal RequestBuilder WithRequest(HttpMethod method, string path);
    internal RequestBuilder WithRequest(string method, string path);
    internal RequestBuilder WithQuery(string key, string value);
    internal RequestBuilder WithQuery(string key, IMatcher matcher);
    internal RequestBuilder WithHeader(string key, string value);
    internal RequestBuilder WithHeader(string key, IMatcher matcher);
    internal RequestBuilder WithJsonBody(object body);
    internal RequestBuilder WithJsonBody(object body, string contentType);
    internal RequestBuilder WithJsonBody(object body, JsonSerializerSettings settings);
    internal RequestBuilder WithJsonBody(object body, JsonSerializerSettings settings, string contentType);
    internal RequestBuilder WithBody(string body, string contentType);
    internal ResponseBuilder WillRespond();
}
internal class PactNet.ResponseBuilder : object {
    private IHttpInteractionDriver driver;
    private JsonSerializerSettings defaultSettings;
    private Dictionary`2<string, UInt32> headerCounts;
    internal ResponseBuilder(IHttpInteractionDriver driver, JsonSerializerSettings defaultSettings);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithStatus(HttpStatusCode status);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithStatus(ushort status);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithHeader(string key, string value);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithHeader(string key, IMatcher matcher);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithJsonBody(object body);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithJsonBody(object body, JsonSerializerSettings settings);
    private sealed virtual override IResponseBuilderV2 PactNet.IResponseBuilderV2.WithBody(string body, string contentType);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithStatus(HttpStatusCode status);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithStatus(ushort status);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithHeader(string key, string value);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithHeader(string key, IMatcher matcher);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithJsonBody(object body);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithJsonBody(object body, JsonSerializerSettings settings);
    private sealed virtual override IResponseBuilderV3 PactNet.IResponseBuilderV3.WithBody(string body, string contentType);
    internal ResponseBuilder WithStatus(HttpStatusCode status);
    internal ResponseBuilder WithStatus(ushort status);
    internal ResponseBuilder WithHeader(string key, string value);
    internal ResponseBuilder WithHeader(string key, IMatcher matcher);
    internal ResponseBuilder WithJsonBody(object body);
    internal ResponseBuilder WithJsonBody(object body, JsonSerializerSettings settings);
    internal ResponseBuilder WithBody(string body, string contentType);
}
internal class PactNet.Verifier.InteropVerifierProvider : object {
    private PactVerifierConfig config;
    private IntPtr handle;
    public InteropVerifierProvider(PactVerifierConfig config);
    public sealed virtual void Initialise();
    public sealed virtual void SetProviderInfo(string name, string scheme, string host, ushort port, string path);
    public sealed virtual void SetFilterInfo(string description, string state, Nullable`1<bool> noState);
    public sealed virtual void SetProviderState(Uri url, bool teardown, bool body);
    public sealed virtual void SetVerificationOptions(bool disableSslVerification, TimeSpan requestTimeout);
    public sealed virtual void SetPublishOptions(string providerVersion, Uri buildUrl, ICollection`1<string> providerTags, string providerBranch);
    public sealed virtual void SetConsumerFilters(ICollection`1<string> consumerFilters);
    public sealed virtual void AddCustomHeader(string name, string value);
    public sealed virtual void AddFileSource(FileInfo file);
    public sealed virtual void AddDirectorySource(DirectoryInfo directory);
    public sealed virtual void AddUrlSource(Uri url, string username, string password, string token);
    public sealed virtual void AddBrokerSource(Uri url, string username, string password, string token, bool enablePending, Nullable`1<DateTime> includeWipPactsSince, ICollection`1<string> providerTags, string providerBranch, ICollection`1<string> consumerVersionSelectors, ICollection`1<string> consumerVersionTags);
    public sealed virtual void Execute();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void ReleaseUnmanagedResources();
    private static byte ToSafeByte(Nullable`1<bool> value);
    private void PrintOutput();
}
internal interface PactNet.Verifier.IVerifierProvider {
    public abstract virtual void Initialise();
    public abstract virtual void SetProviderInfo(string name, string scheme, string host, ushort port, string path);
    public abstract virtual void SetFilterInfo(string description, string state, Nullable`1<bool> noState);
    public abstract virtual void SetProviderState(Uri url, bool teardown, bool body);
    public abstract virtual void SetVerificationOptions(bool disableSslVerification, TimeSpan requestTimeout);
    public abstract virtual void SetPublishOptions(string providerVersion, Uri buildUrl, ICollection`1<string> providerTags, string providerBranch);
    public abstract virtual void SetConsumerFilters(ICollection`1<string> consumerFilters);
    public abstract virtual void AddCustomHeader(string name, string value);
    public abstract virtual void AddFileSource(FileInfo file);
    public abstract virtual void AddDirectorySource(DirectoryInfo directory);
    public abstract virtual void AddUrlSource(Uri url, string username, string password, string token);
    public abstract virtual void AddBrokerSource(Uri url, string username, string password, string token, bool enablePending, Nullable`1<DateTime> includeWipPactsSince, ICollection`1<string> providerTags, string providerBranch, ICollection`1<string> consumerVersionSelectors, ICollection`1<string> consumerVersionTags);
    public abstract virtual void Execute();
}
internal class PactNet.Verifier.Messaging.MessageScenarioBuilder : object {
    private string description;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> factory;
    [DynamicAttribute]
private object metadata;
    private JsonSerializerSettings settings;
    public MessageScenarioBuilder(string description);
    public sealed virtual IMessageScenarioBuilder WithMetadata(object metadata);
    public sealed virtual void WithContent(Func`1<object> factory);
    public sealed virtual void WithContent(Func`1<object> factory, JsonSerializerSettings settings);
    [AsyncStateMachineAttribute("PactNet.Verifier.Messaging.MessageScenarioBuilder/<WithContentAsync>d__8")]
public sealed virtual Task WithContentAsync(Func`1<Task`1<object>> factory);
    [AsyncStateMachineAttribute("PactNet.Verifier.Messaging.MessageScenarioBuilder/<WithContentAsync>d__9")]
public sealed virtual Task WithContentAsync(Func`1<Task`1<object>> factory, JsonSerializerSettings settings);
    internal Scenario Build();
}
internal class PactNet.Verifier.Messaging.MessageScenarios : object {
    [DynamicAttribute]
private static object JsonMetadata;
    private IDictionary`2<string, Scenario> scenarios;
    public IReadOnlyDictionary`2<string, Scenario> Scenarios { get; }
    private static MessageScenarios();
    public sealed virtual IReadOnlyDictionary`2<string, Scenario> get_Scenarios();
    public sealed virtual IMessageScenarios Add(string description, Func`1<object> factory);
    public sealed virtual IMessageScenarios Add(string description, Action`1<IMessageScenarioBuilder> configure);
    public sealed virtual IMessageScenarios Add(string description, Func`2<IMessageScenarioBuilder, Task> configure);
}
internal class PactNet.Verifier.Messaging.MessagingProvider : object {
    private static int MinimumPort;
    private static int MaximumPort;
    private static JsonSerializerSettings InteractionSettings;
    private PactVerifierConfig config;
    private HttpListener server;
    private Thread thread;
    private JsonSerializerSettings defaultSettings;
    [CompilerGeneratedAttribute]
private IMessageScenarios <Scenarios>k__BackingField;
    public IMessageScenarios Scenarios { get; }
    public MessagingProvider(PactVerifierConfig config, IMessageScenarios scenarios);
    private static MessagingProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IMessageScenarios get_Scenarios();
    public sealed virtual Uri Start(JsonSerializerSettings settings);
    private static int FindUnusedPort();
    private void HandleRequest();
    private void HandleInteraction(HttpListenerContext context, MessageInteraction interaction);
    private void BadRequestResponse(HttpListenerContext context, string message);
    private void NotFoundResponse(HttpListenerContext context, string message);
    private void NotAllowedResponse(HttpListenerContext context, string message);
    private void ErrorResponse(HttpListenerContext context, string message);
    private void OkResponse(HttpListenerContext context, string message);
    private void WriteOutput(HttpListenerResponse response, HttpStatusCode status, string body, string contentType);
    public sealed virtual void Dispose();
}
internal class PactNet.Verifier.Messaging.PactVerifierMessagingProvider : object {
    private IVerifierProvider provider;
    private IMessageScenarios scenarios;
    private PactVerifierConfig config;
    public PactVerifierMessagingProvider(IVerifierProvider provider, IMessageScenarios scenarios, PactVerifierConfig config);
    public sealed virtual IPactVerifierProvider WithProviderMessages(Action`1<IMessageScenarios> scenarios);
}
internal class PactNet.Verifier.PactBrokerOptions : object {
    private static JsonSerializerSettings ConsumerSelectorSettings;
    private IVerifierProvider provider;
    private Uri brokerUri;
    private string username;
    private string password;
    private string token;
    private bool enablePending;
    private Nullable`1<DateTime> includeWipPactsSince;
    private string providerBranch;
    private ICollection`1<string> providerTags;
    private ICollection`1<string> consumerVersionTags;
    private ICollection`1<string> consumerVersionSelectors;
    public PactBrokerOptions(IVerifierProvider provider, Uri brokerUri);
    private static PactBrokerOptions();
    public sealed virtual IPactBrokerOptions BasicAuthentication(string username, string password);
    public sealed virtual IPactBrokerOptions TokenAuthentication(string token);
    public sealed virtual IPactBrokerOptions EnablePending();
    public sealed virtual IPactBrokerOptions ProviderBranch(string branch);
    public sealed virtual IPactBrokerOptions ProviderTags(String[] tags);
    public sealed virtual IPactBrokerOptions ConsumerTags(String[] tags);
    public sealed virtual IPactBrokerOptions ConsumerVersionSelectors(ICollection`1<ConsumerVersionSelector> selectors);
    public sealed virtual IPactBrokerOptions ConsumerVersionSelectors(ConsumerVersionSelector[] selectors);
    public sealed virtual IPactBrokerOptions IncludeWipPactsSince(DateTime date);
    public sealed virtual IPactBrokerOptions PublishResults(string providerVersion);
    public sealed virtual IPactBrokerOptions PublishResults(string providerVersion, Action`1<IPactBrokerPublishOptions> configure);
    public sealed virtual IPactBrokerOptions PublishResults(bool condition, string providerVersion);
    public sealed virtual IPactBrokerOptions PublishResults(bool condition, string providerVersion, Action`1<IPactBrokerPublishOptions> configure);
    public void Apply();
}
internal class PactNet.Verifier.PactBrokerPublishOptions : object {
    private IVerifierProvider provider;
    private string version;
    private ICollection`1<string> tags;
    private string branch;
    private Uri buildUri;
    public PactBrokerPublishOptions(IVerifierProvider provider, string version);
    public sealed virtual IPactBrokerPublishOptions ProviderTags(String[] tags);
    public sealed virtual IPactBrokerPublishOptions ProviderBranch(string branch);
    public sealed virtual IPactBrokerPublishOptions BuildUri(Uri uri);
    public void Apply();
}
internal class PactNet.Verifier.PactUriOptions : object {
    private IVerifierProvider provider;
    private Uri uri;
    private string username;
    private string password;
    private string token;
    public PactUriOptions(IVerifierProvider provider, Uri uri);
    public sealed virtual IPactUriOptions BasicAuthentication(string username, string password);
    public sealed virtual IPactUriOptions TokenAuthentication(string token);
    public sealed virtual IPactUriOptions PublishResults(string providerVersion);
    public sealed virtual IPactUriOptions PublishResults(string providerVersion, Action`1<IPactBrokerPublishOptions> configure);
    public sealed virtual IPactUriOptions PublishResults(bool condition, string providerVersion);
    public sealed virtual IPactUriOptions PublishResults(bool condition, string providerVersion, Action`1<IPactBrokerPublishOptions> configure);
    public void Apply();
}
public class PactNet.Verifier.PactVerifier : object {
    private PactVerifierConfig config;
    private IVerifierProvider provider;
    private IMessagingProvider messagingProvider;
    public PactVerifier(PactVerifierConfig config);
    internal PactVerifier(IVerifierProvider provider, IMessagingProvider messagingProvider, PactVerifierConfig config);
    public sealed virtual IPactVerifierProvider ServiceProvider(string providerName, Uri pactUri);
    public sealed virtual IPactVerifierMessagingProvider MessagingProvider(string providerName);
    public sealed virtual IPactVerifierMessagingProvider MessagingProvider(string providerName, JsonSerializerSettings settings);
    private void InitialiseProvider(string providerName, Uri pactUri);
    public sealed virtual void Dispose();
}
internal class PactNet.Verifier.PactVerifierProvider : object {
    private IVerifierProvider provider;
    private PactVerifierConfig config;
    public PactVerifierProvider(IVerifierProvider provider, PactVerifierConfig config);
    public sealed virtual IPactVerifierSource WithFileSource(FileInfo pactFile);
    public sealed virtual IPactVerifierSource WithDirectorySource(DirectoryInfo directory, String[] consumers);
    public sealed virtual IPactVerifierSource WithUriSource(Uri pactUri);
    public sealed virtual IPactVerifierSource WithUriSource(Uri pactUri, Action`1<IPactUriOptions> configure);
    public sealed virtual IPactVerifierSource WithPactBrokerSource(Uri brokerBaseUri);
    public sealed virtual IPactVerifierSource WithPactBrokerSource(Uri brokerBaseUri, Action`1<IPactBrokerOptions> configure);
}
internal class PactNet.Verifier.PactVerifierSource : object {
    private IVerifierProvider provider;
    private PactVerifierConfig config;
    private TimeSpan timeout;
    private bool disableSslVerification;
    internal PactVerifierSource(IVerifierProvider provider, PactVerifierConfig config);
    public sealed virtual IPactVerifierSource WithProviderStateUrl(Uri providerStateUri);
    public sealed virtual IPactVerifierSource WithProviderStateUrl(Uri providerStateUri, Action`1<IProviderStateOptions> configure);
    public sealed virtual IPactVerifierSource WithFilter(string description, string providerState);
    public sealed virtual IPactVerifierSource WithRequestTimeout(TimeSpan timeout);
    public sealed virtual IPactVerifierSource WithSslVerificationDisabled();
    public sealed virtual IPactVerifierSource WithCustomHeader(string name, string value);
    public sealed virtual void Verify();
}
internal class PactNet.Verifier.ProviderStateOptions : object {
    private IVerifierProvider provider;
    private Uri providerStateUri;
    private bool teardown;
    private ProviderStateStyle style;
    public ProviderStateOptions(IVerifierProvider provider, Uri providerStateUri);
    public sealed virtual IProviderStateOptions WithTeardown();
    public sealed virtual IProviderStateOptions WithStyle(ProviderStateStyle style);
    public void Apply();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
