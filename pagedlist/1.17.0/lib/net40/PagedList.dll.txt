[DefaultMemberAttribute("Item")]
public abstract class PagedList.BasePagedList`1 : PagedListMetaData {
    protected List`1<T> Subset;
    public T Item { get; }
    public int Count { get; }
    protected internal BasePagedList`1(int pageNumber, int pageSize, int totalItemCount);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IPagedList GetMetaData();
}
public interface PagedList.IPagedList {
    public int PageCount { get; }
    public int TotalItemCount { get; }
    public int PageNumber { get; }
    public int PageSize { get; }
    public bool HasPreviousPage { get; }
    public bool HasNextPage { get; }
    public bool IsFirstPage { get; }
    public bool IsLastPage { get; }
    public int FirstItemOnPage { get; }
    public int LastItemOnPage { get; }
    public abstract virtual int get_PageCount();
    public abstract virtual int get_TotalItemCount();
    public abstract virtual int get_PageNumber();
    public abstract virtual int get_PageSize();
    public abstract virtual bool get_HasPreviousPage();
    public abstract virtual bool get_HasNextPage();
    public abstract virtual bool get_IsFirstPage();
    public abstract virtual bool get_IsLastPage();
    public abstract virtual int get_FirstItemOnPage();
    public abstract virtual int get_LastItemOnPage();
}
[DefaultMemberAttribute("Item")]
public interface PagedList.IPagedList`1 {
    public T Item { get; }
    public int Count { get; }
    public abstract virtual T get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IPagedList GetMetaData();
}
public class PagedList.PagedList`1 : BasePagedList`1<T> {
    public PagedList`1(IQueryable`1<T> superset, int pageNumber, int pageSize);
    public PagedList`1(IEnumerable`1<T> superset, int pageNumber, int pageSize);
}
[ExtensionAttribute]
public static class PagedList.PagedListExtensions : object {
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IEnumerable`1<T> superset, int pageNumber, int pageSize);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IQueryable`1<T> superset, int pageNumber, int pageSize);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Split(IEnumerable`1<T> superset, int numberOfPages);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Partition(IEnumerable`1<T> superset, int pageSize);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<int, T> <Split>b__0(T item, int index);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<T> <Split>b__2(IGrouping`2<int, <>f__AnonymousType0`2<int, T>> x);
    [CompilerGeneratedAttribute]
private static T <Split>b__3(<>f__AnonymousType0`2<int, T> y);
}
public class PagedList.PagedListMetaData : object {
    [CompilerGeneratedAttribute]
private int <PageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreviousPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNextPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstItemOnPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastItemOnPage>k__BackingField;
    public int PageCount { get; protected set; }
    public int TotalItemCount { get; protected set; }
    public int PageNumber { get; protected set; }
    public int PageSize { get; protected set; }
    public bool HasPreviousPage { get; protected set; }
    public bool HasNextPage { get; protected set; }
    public bool IsFirstPage { get; protected set; }
    public bool IsLastPage { get; protected set; }
    public int FirstItemOnPage { get; protected set; }
    public int LastItemOnPage { get; protected set; }
    public PagedListMetaData(IPagedList pagedList);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageCount();
    [CompilerGeneratedAttribute]
protected void set_PageCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalItemCount();
    [CompilerGeneratedAttribute]
protected void set_TotalItemCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageNumber();
    [CompilerGeneratedAttribute]
protected void set_PageNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
protected void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasPreviousPage();
    [CompilerGeneratedAttribute]
protected void set_HasPreviousPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNextPage();
    [CompilerGeneratedAttribute]
protected void set_HasNextPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstPage();
    [CompilerGeneratedAttribute]
protected void set_IsFirstPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastPage();
    [CompilerGeneratedAttribute]
protected void set_IsLastPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstItemOnPage();
    [CompilerGeneratedAttribute]
protected void set_FirstItemOnPage(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastItemOnPage();
    [CompilerGeneratedAttribute]
protected void set_LastItemOnPage(int value);
}
public class PagedList.StaticPagedList`1 : BasePagedList`1<T> {
    public StaticPagedList`1(IEnumerable`1<T> subset, IPagedList metaData);
    public StaticPagedList`1(IEnumerable`1<T> subset, int pageNumber, int pageSize, int totalItemCount);
}
