[CompilationMappingAttribute("3")]
public class Argu.AppSettingsConfigurationFileReader : object {
    internal string xmlPath;
    internal KeyValueConfigurationCollection kv;
    public string Path { get; }
    internal AppSettingsConfigurationFileReader(string xmlPath, KeyValueConfigurationCollection kv);
    public string get_Path();
    public static AppSettingsConfigurationFileReader Create(string path);
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string key);
}
[CompilationMappingAttribute("3")]
public class Argu.AppSettingsConfigurationReader : object {
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string key);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Argu.ArguAttributes : object {
}
[CompilationMappingAttribute("3")]
public class Argu.ArguException : Exception {
    internal ArguException(string message, Exception exn);
    internal ArguException(string message);
}
[NoEqualityAttribute]
[NoComparisonAttribute]
[CompilationMappingAttribute("2")]
public class Argu.ArgumentCaseInfo : object {
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<string> Name@;
    [DebuggerBrowsableAttribute("0")]
internal UnionCaseInfo UnionCaseInfo@;
    [DebuggerBrowsableAttribute("0")]
internal ArgumentType ArgumentType@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<FSharpList`1<string>> CommandLineNames@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<FSharpOption`1<string>> AppSettingsName@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<string> Description@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> AppSettingsSeparators@;
    [DebuggerBrowsableAttribute("0")]
internal StringSplitOptions AppSettingsSplitOptions@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<CliPosition> CliPosition@;
    [DebuggerBrowsableAttribute("0")]
internal bool IsMainCommand@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> IsRest@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<FSharpOption`1<CustomAssignmentSeparator>> CustomAssignmentSeparator@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> AppSettingsCSV@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> IsMandatory@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> IsUnique@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> IsHidden@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> IsGatherUnrecognized@;
    [DebuggerBrowsableAttribute("0")]
internal Lazy`1<bool> GatherAllSources@;
    [CompilationMappingAttribute("4", "0")]
public Lazy`1<string> Name { get; }
    [CompilationMappingAttribute("4", "1")]
public UnionCaseInfo UnionCaseInfo { get; }
    [CompilationMappingAttribute("4", "2")]
public ArgumentType ArgumentType { get; }
    [CompilationMappingAttribute("4", "3")]
public Lazy`1<FSharpList`1<string>> CommandLineNames { get; }
    [CompilationMappingAttribute("4", "4")]
public Lazy`1<FSharpOption`1<string>> AppSettingsName { get; }
    [CompilationMappingAttribute("4", "5")]
public Lazy`1<string> Description { get; }
    [CompilationMappingAttribute("4", "6")]
public FSharpList`1<string> AppSettingsSeparators { get; }
    [CompilationMappingAttribute("4", "7")]
public StringSplitOptions AppSettingsSplitOptions { get; }
    [CompilationMappingAttribute("4", "8")]
public Lazy`1<CliPosition> CliPosition { get; }
    [CompilationMappingAttribute("4", "9")]
public bool IsMainCommand { get; }
    [CompilationMappingAttribute("4", "10")]
public Lazy`1<bool> IsRest { get; }
    [CompilationMappingAttribute("4", "11")]
public Lazy`1<FSharpOption`1<CustomAssignmentSeparator>> CustomAssignmentSeparator { get; }
    [CompilationMappingAttribute("4", "12")]
public Lazy`1<bool> AppSettingsCSV { get; }
    [CompilationMappingAttribute("4", "13")]
public Lazy`1<bool> IsMandatory { get; }
    [CompilationMappingAttribute("4", "14")]
public Lazy`1<bool> IsUnique { get; }
    [CompilationMappingAttribute("4", "15")]
public Lazy`1<bool> IsHidden { get; }
    [CompilationMappingAttribute("4", "16")]
public Lazy`1<bool> IsGatherUnrecognized { get; }
    [CompilationMappingAttribute("4", "17")]
public Lazy`1<bool> GatherAllSources { get; }
    public ArgumentCaseInfo(Lazy`1<string> name, UnionCaseInfo unionCaseInfo, ArgumentType argumentType, Lazy`1<FSharpList`1<string>> commandLineNames, Lazy`1<FSharpOption`1<string>> appSettingsName, Lazy`1<string> description, FSharpList`1<string> appSettingsSeparators, StringSplitOptions appSettingsSplitOptions, Lazy`1<CliPosition> cliPosition, bool isMainCommand, Lazy`1<bool> isRest, Lazy`1<FSharpOption`1<CustomAssignmentSeparator>> customAssignmentSeparator, Lazy`1<bool> appSettingsCSV, Lazy`1<bool> isMandatory, Lazy`1<bool> isUnique, Lazy`1<bool> isHidden, Lazy`1<bool> isGatherUnrecognized, Lazy`1<bool> gatherAllSources);
    public Lazy`1<string> get_Name();
    public UnionCaseInfo get_UnionCaseInfo();
    public ArgumentType get_ArgumentType();
    public Lazy`1<FSharpList`1<string>> get_CommandLineNames();
    public Lazy`1<FSharpOption`1<string>> get_AppSettingsName();
    public Lazy`1<string> get_Description();
    public FSharpList`1<string> get_AppSettingsSeparators();
    public StringSplitOptions get_AppSettingsSplitOptions();
    public Lazy`1<CliPosition> get_CliPosition();
    public bool get_IsMainCommand();
    public Lazy`1<bool> get_IsRest();
    public Lazy`1<FSharpOption`1<CustomAssignmentSeparator>> get_CustomAssignmentSeparator();
    public Lazy`1<bool> get_AppSettingsCSV();
    public Lazy`1<bool> get_IsMandatory();
    public Lazy`1<bool> get_IsUnique();
    public Lazy`1<bool> get_IsHidden();
    public Lazy`1<bool> get_IsGatherUnrecognized();
    public Lazy`1<bool> get_GatherAllSources();
    [CompilerGeneratedAttribute]
public virtual string ToString();
}
[AbstractClassAttribute]
[NoEqualityAttribute]
[NoComparisonAttribute]
[AutoSerializableAttribute("False")]
[CompilationMappingAttribute("3")]
public abstract class Argu.ArgumentParser : object {
    internal FSharpOption`1<string> helpTextMessage;
    internal IExiter errorHandler;
    internal UnionArgInfo argInfo;
    internal int _usageStringCharacterWidth;
    internal string _programName;
    public FSharpList`1<string> HelpFlags { get; }
    public string HelpDescription { get; }
    public FSharpOption`1<string> HelpTextMessage { get; }
    public bool IsSubCommandParser { get; }
    public FSharpOption`1<ArgumentCaseInfo> ParentInfo { get; }
    public IExiter ErrorHandler { get; }
    internal ArgumentParser(UnionArgInfo argInfo, string _programName, FSharpOption`1<string> helpTextMessage, int _usageStringCharacterWidth, IExiter errorHandler);
    public abstract virtual R Accept(IArgumentParserVisitor`1<R> visitor);
    public FSharpList`1<string> get_HelpFlags();
    public string get_HelpDescription();
    public FSharpOption`1<string> get_HelpTextMessage();
    public bool get_IsSubCommandParser();
    public FSharpOption`1<ArgumentCaseInfo> get_ParentInfo();
    public IExiter get_ErrorHandler();
    public FSharpList`1<ArgumentCaseInfo> GetArgumentCases();
    public FSharpList`1<ArgumentParser> GetSubCommandParsers();
    public string PrintUsage(FSharpOption`1<string> message, FSharpOption`1<string> programName, FSharpOption`1<bool> hideSyntax, FSharpOption`1<int> usageStringCharacterWidth);
    public string PrintCommandLineSyntax(FSharpOption`1<string> programName, FSharpOption`1<int> usageStringCharacterWidth);
    public static ArgumentParser`1<Template> Create(FSharpOption`1<string> programName, FSharpOption`1<string> helpTextMessage, FSharpOption`1<int> usageStringCharacterWidth, FSharpOption`1<IExiter> errorHandler, FSharpOption`1<bool> checkStructure);
}
[SealedAttribute]
[NoEqualityAttribute]
[NoComparisonAttribute]
[AutoSerializableAttribute("False")]
[CompilationMappingAttribute("3")]
public class Argu.ArgumentParser`1 : ArgumentParser {
    internal FSharpOption`1<string> helpTextMessage;
    internal IExiter errorHandler;
    internal UnionArgInfo argInfo;
    internal int _usageStringCharacterWidth;
    internal string _programName;
    internal static Lazy`1<UnionArgInfo> argInfoNoCheck;
    internal static Lazy`1<UnionArgInfo> argInfoWithCheck;
    internal static int init@79-2;
    internal ArgumentParser`1(UnionArgInfo argInfo, string _programName, FSharpOption`1<string> helpTextMessage, int _usageStringCharacterWidth, IExiter errorHandler);
    private static ArgumentParser`1();
    public ArgumentParser`1(FSharpOption`1<string> programName, FSharpOption`1<string> helpTextMessage, FSharpOption`1<int> usageStringCharacterWidth, FSharpOption`1<IExiter> errorHandler, FSharpOption`1<bool> checkStructure);
    public static void CheckStructure();
    public ParseResults`1<Template> ParseCommandLine(FSharpOption`1<String[]> inputs, FSharpOption`1<bool> ignoreMissing, FSharpOption`1<bool> ignoreUnrecognized, FSharpOption`1<bool> raiseOnUsage);
    public ParseResults`1<Template> ParseConfiguration(IConfigurationReader configurationReader, FSharpOption`1<bool> ignoreMissing);
    public ParseResults`1<Template> Parse(FSharpOption`1<String[]> inputs, FSharpOption`1<IConfigurationReader> configurationReader, FSharpOption`1<bool> ignoreMissing, FSharpOption`1<bool> ignoreUnrecognized, FSharpOption`1<bool> raiseOnUsage);
    public ParseResults`1<Template> ToParseResults(IEnumerable`1<Template> inputs);
    public ArgumentParser`1<SubTemplate> GetSubCommandParser(FSharpExpr`1<FSharpFunc`2<ParseResults`1<SubTemplate>, Template>> expr);
    public int GetTag(Template value);
    public ArgumentCaseInfo GetArgumentCaseInfo(Template value);
    public ArgumentCaseInfo GetArgumentCaseInfo(FSharpExpr`1<FSharpFunc`2<Fields, Template>> ctorExpr);
    public String[] PrintCommandLineArguments(FSharpList`1<Template> args);
    public string PrintCommandLineArgumentsFlat(FSharpList`1<Template> args);
    public string PrintAppSettingsArguments(FSharpList`1<Template> args, FSharpOption`1<bool> printComments);
    public virtual a Accept(IArgumentParserVisitor`1<a> visitor);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string mkUsageString(UnionArgInfo argInfo, FSharpOption`1<string> msgOpt);
    [CompilerGeneratedAttribute]
internal FSharpOption`1<Tuple`2<ErrorCode, string>> |ParserExn|_|(Exception e);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Argu.ArgumentParserUtils : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ArgumentParser`1<Template> ParseResults`1.get_Parser(ParseResults`1<Template> );
    public static ParseResults`1<Template> toParseResults(IEnumerable`1<Template> inputs);
    public static int tagOf(Template input);
}
[CompilationMappingAttribute("3")]
public enum Argu.ArgumentType : Enum {
    public int value__;
    public static ArgumentType Primitive;
    public static ArgumentType Optional;
    public static ArgumentType List;
    public static ArgumentType SubCommand;
}
[CompilationMappingAttribute("3")]
public class Argu.ArguParseException : ArguException {
    internal ErrorCode errorCode;
    public ErrorCode ErrorCode { get; }
    internal ArguParseException(string message, ErrorCode errorCode);
    public ErrorCode get_ErrorCode();
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.CliParser : object {
    [CompilerGeneratedAttribute]
internal static bool aux@45-4(string token, FSharpList`1<string> _arg1);
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@151(IEqualityComparer comp, CliParseState this, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@151(CliParseState this, object obj, IEqualityComparer comp, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static object parseOptionalWithoutAssignment(FieldParserInfo field, CliParseState state, UnionArgInfo argInfo);
    internal static void aux@197-5(CliParseState state, UnionArgInfo argInfo, CliParseResultAggregator aggregator, string token, UnionCaseArgInfo mcp, FieldParserInfo[] parsers, List`1<string> tokens, List`1<object> fields, bool handleUnrecognized, bool isFirst, int i);
    internal static FSharpList`1<string> gather@253-1(CliParseState state, UnionArgInfo argInfo, CliParseResultAggregator aggregator, string token, UnionCaseArgInfo mcp, FieldParserInfo field, bool isFirst, FSharpList`1<string> args);
    internal static bool parseSingleParameter@195-1(CliParseState state, UnionArgInfo argInfo, CliParseResultAggregator aggregator, string token, UnionCaseArgInfo mcp, FieldParserInfo[] parsers, List`1<string> tokens, List`1<object> fields, bool handleUnrecognized, bool isFirst);
    internal static void gather@401(CliParseState state, UnionArgInfo argInfo, FieldParserInfo field, List`1<T> args, Unit unitVar0);
    internal static void parseSingleParameter@321(CliParseState state, UnionArgInfo argInfo, CliParseResultAggregator aggregator, string name, UnionCaseArgInfo caseInfo, FieldParserInfo[] fields);
    internal static object parseNextField@306(CliParseState state, UnionArgInfo argInfo, FieldParserInfo p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void parseCommandLinePartial(CliParseState state, UnionArgInfo argInfo, CliParseResultAggregator aggregator);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionParseResults parseCommandLineInner(CliParseState state, UnionArgInfo argInfo);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionParseResults parseCommandLine(UnionArgInfo argInfo, string programName, FSharpOption`1<string> description, int width, IExiter exiter, bool raiseOnUsage, bool ignoreUnrecognized, String[] inputs);
}
[CompilationMappingAttribute("3")]
public enum Argu.CliPosition : Enum {
    public int value__;
    public static CliPosition First;
    public static CliPosition Unspecified;
    public static CliPosition Last;
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Argu.CliPrefix : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string None;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Dash;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string DoubleDash;
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.CommonParsers : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static a error(UnionArgInfo argInfo, ErrorCode code, PrintfFormat`4<a, Unit, string, b> fmt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionCaseParseResult mkUnionCase(UnionCaseArgInfo info, int index, ParseSource parseSource, string parsecontext, Object[] fields);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static ParseResults`1<Template> mkParseResultFromValues(UnionArgInfo info, IExiter exiter, int width, string programName, FSharpOption`1<string> description, IEnumerable`1<Template> values);
    internal static UnionCaseParseResult[] combineSingle@57(UnionArgInfo argInfo, bool ignoreMissingMandatory, FSharpOption`1<FSharpChoice`2[]> appSettingsResults, FSharpOption`1<UnionParseResults> commandLineResults, UnionCaseArgInfo caseInfo);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionParseResults postProcessResults(UnionArgInfo argInfo, bool ignoreMissingMandatory, FSharpOption`1<FSharpChoice`2[]> appSettingsResults, FSharpOption`1<UnionParseResults> commandLineResults);
}
[CompilationMappingAttribute("3")]
public class Argu.ConfigurationReader : object {
    public static IConfigurationReader NullReader { get; }
    public static IConfigurationReader get_NullReader();
    public static IConfigurationReader FromDictionary(IDictionary`2<string, string> keyValueDictionary, FSharpOption`1<string> name);
    public static IConfigurationReader FromFunction(FSharpFunc`2<string, FSharpOption`1<string>> reader, FSharpOption`1<string> name);
    public static IConfigurationReader FromEnvironmentVariables();
    public static IConfigurationReader FromAppSettings();
    public static IConfigurationReader FromAppSettingsFile(string path);
    public static IConfigurationReader FromAppSettings(Assembly assembly);
}
[CompilationMappingAttribute("2")]
public class Argu.CustomAssignmentSeparator : object {
    [DebuggerBrowsableAttribute("0")]
internal string Separator@;
    [DebuggerBrowsableAttribute("0")]
internal bool TolerateSpacedArguments@;
    [CompilationMappingAttribute("4", "0")]
public string Separator { get; }
    [CompilationMappingAttribute("4", "1")]
public bool TolerateSpacedArguments { get; }
    public CustomAssignmentSeparator(string separator, bool tolerateSpacedArguments);
    public string get_Separator();
    public bool get_TolerateSpacedArguments();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(CustomAssignmentSeparator obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CustomAssignmentSeparator obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("3")]
public class Argu.DictionaryConfigurationReader : object {
    internal IDictionary`2<string, string> keyValueDictionary;
    internal string name@42;
    public DictionaryConfigurationReader(IDictionary`2<string, string> keyValueDictionary, FSharpOption`1<string> name);
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string key);
}
[CompilationMappingAttribute("3")]
public class Argu.EnvironmentVariableConfigurationReader : object {
    internal EnvironmentVariableTarget[] targets;
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string key);
}
[CompilationMappingAttribute("3")]
public enum Argu.ErrorCode : Enum {
    public int value__;
    public static ErrorCode HelpText;
    public static ErrorCode AppSettings;
    public static ErrorCode CommandLine;
    public static ErrorCode PostProcess;
}
[CompilationMappingAttribute("3")]
public class Argu.ExceptionExiter : object {
    private virtual override string Argu-IExiter-get_Name();
    private virtual override a Argu-IExiter-Exit(string msg, ErrorCode errorCode);
}
[CompilationMappingAttribute("3")]
public class Argu.FunctionConfigurationReader : object {
    internal FSharpFunc`2<string, FSharpOption`1<string>> configFunc;
    internal string name@51;
    public FunctionConfigurationReader(FSharpFunc`2<string, FSharpOption`1<string>> configFunc, FSharpOption`1<string> name);
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string key);
}
[CompilationMappingAttribute("3")]
public interface Argu.IArgParserTemplate {
    public string Usage { get; }
    public abstract virtual string get_Usage();
}
[CompilationMappingAttribute("3")]
public interface Argu.IArgumentParserVisitor`1 {
    public abstract virtual R Visit(ArgumentParser`1<Template> parser);
}
[CompilationMappingAttribute("3")]
public interface Argu.IConfigurationReader {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual string GetValue(string key);
}
[CompilationMappingAttribute("3")]
public interface Argu.IExiter {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual T Exit(string msg, ErrorCode errorCode);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.KeyValueParser : object {
    internal static UnionCaseParseResult parseSingleArgument@67(KeyValueParseState state, UnionCaseArgInfo caseInfo, string name, FieldParserInfo[] fields, String[] tokens, FSharpRef`1<int> pos, Unit unitVar0);
    internal static object parseNext@56(KeyValueParseState state, string name, String[] tokens, FSharpRef`1<int> pos, FieldParserInfo parser);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void parseKeyValuePartial(KeyValueParseState state, UnionCaseArgInfo caseInfo);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpChoice`2[] parseKeyValueConfig(IConfigurationReader configReader, UnionArgInfo argInfo);
}
[CompilationMappingAttribute("3")]
public class Argu.NullConfigurationReader : object {
    private virtual override string Argu-IConfigurationReader-get_Name();
    private virtual override string Argu-IConfigurationReader-GetValue(string _arg1);
}
[SealedAttribute]
[AutoSerializableAttribute("False")]
[StructuredFormatDisplayAttribute("{StructuredFormatDisplay}")]
[CompilationMappingAttribute("3")]
public class Argu.ParseResults`1 : object {
    internal int usageStringCharWidth;
    internal UnionParseResults results;
    internal string programName;
    internal IExiter exiter;
    internal FSharpOption`1<string> description;
    internal UnionArgInfo argInfo;
    internal Lazy`1<FSharpList`1<Template>> CachedAllResults@;
    public IExiter ErrorHandler { get; }
    internal string ProgramName { get; }
    internal FSharpOption`1<string> Description { get; }
    internal UnionArgInfo ArgInfo { get; }
    internal int CharacterWidth { get; }
    public bool IsUsageRequested { get; }
    public FSharpList`1<string> UnrecognizedCliParams { get; }
    public FSharpList`1<object> UnrecognizedCliParseResults { get; }
    internal string StructuredFormatDisplay { get; }
    internal Lazy`1<FSharpList`1<Template>> CachedAllResults { get; }
    internal ParseResults`1(UnionArgInfo argInfo, UnionParseResults results, string programName, FSharpOption`1<string> description, int usageStringCharWidth, IExiter exiter);
    public IExiter get_ErrorHandler();
    internal string get_ProgramName();
    internal FSharpOption`1<string> get_Description();
    internal UnionArgInfo get_ArgInfo();
    internal int get_CharacterWidth();
    public bool get_IsUsageRequested();
    public FSharpList`1<string> get_UnrecognizedCliParams();
    public FSharpList`1<object> get_UnrecognizedCliParseResults();
    public FSharpList`1<Template> GetResults(FSharpExpr`1<Template> expr, FSharpOption`1<ParseSource> source);
    public FSharpList`1<Fields> GetResults(FSharpExpr`1<FSharpFunc`2<Fields, Template>> expr, FSharpOption`1<ParseSource> source);
    public FSharpList`1<Template> GetAllResults(FSharpOption`1<ParseSource> source);
    public FSharpOption`1<Template> TryGetResult(FSharpExpr`1<Template> expr, FSharpOption`1<ParseSource> source);
    public FSharpOption`1<Fields> TryGetResult(FSharpExpr`1<FSharpFunc`2<Fields, Template>> expr, FSharpOption`1<ParseSource> source);
    public Template GetResult(FSharpExpr`1<Template> expr, FSharpOption`1<Template> defaultValue, FSharpOption`1<ParseSource> source);
    public Fields GetResult(FSharpExpr`1<FSharpFunc`2<Fields, Template>> expr, FSharpOption`1<Fields> defaultValue, FSharpOption`1<ParseSource> source);
    public bool Contains(FSharpExpr`1<Template> expr, FSharpOption`1<ParseSource> source);
    public bool Contains(FSharpExpr`1<FSharpFunc`2<Fields, Template>> expr, FSharpOption`1<ParseSource> source);
    public T Raise(string msg, FSharpOption`1<ErrorCode> errorCode, FSharpOption`1<bool> showUsage);
    public T Raise(Exception error, FSharpOption`1<ErrorCode> errorCode, FSharpOption`1<bool> showUsage);
    public T Catch(FSharpFunc`2<Unit, T> f, FSharpOption`1<ErrorCode> errorCode, FSharpOption`1<bool> showUsage);
    public R PostProcessResult(FSharpExpr`1<FSharpFunc`2<Field, Template>> expr, FSharpFunc`2<Field, R> parser, FSharpOption`1<ParseSource> source);
    public FSharpList`1<R> PostProcessResults(FSharpExpr`1<FSharpFunc`2<Field, Template>> expr, FSharpFunc`2<Field, R> parser, FSharpOption`1<ParseSource> source);
    public FSharpOption`1<R> TryPostProcessResult(FSharpExpr`1<FSharpFunc`2<Field, Template>> expr, FSharpFunc`2<Field, R> parser, FSharpOption`1<ParseSource> source);
    public void IterResults(FSharpExpr`1<FSharpFunc`2<Field, Template>> expr, FSharpFunc`2<Field, Unit> iterator, FSharpOption`1<ParseSource> source);
    public void IterResult(FSharpExpr`1<FSharpFunc`2<Field, Template>> expr, FSharpFunc`2<Field, Unit> iterator, FSharpOption`1<ParseSource> source);
    public FSharpOption`1<Template> TryGetSubCommand();
    public Template GetSubCommand();
    public virtual string ToString();
    internal string get_StructuredFormatDisplay();
    internal Lazy`1<FSharpList`1<Template>> get_CachedAllResults();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    private virtual override IEnumerable`1<object> Argu-UnionArgInfo-IParseResult-GetAllResults();
    private virtual override int System-IComparable-CompareTo(object other);
    [CompilerGeneratedAttribute]
internal string mkUsageString(FSharpOption`1<string> message);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal b error(bool hideUsage, ErrorCode code, string msg);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal a errorf(bool hideusage, ErrorCode code, PrintfFormat`4<a, Unit, string, b> fmt);
    [CompilerGeneratedAttribute]
internal FSharpFunc`2<UnionCaseParseResult, bool> restrictF(FSharpOption`1<ParseSource> flags);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal IEnumerable`1<UnionCaseParseResult> getResults(FSharpOption`1<ParseSource> rs, FSharpExpr e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal bool containsResult(FSharpOption`1<ParseSource> rs, FSharpExpr e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal FSharpOption`1<UnionCaseParseResult> tryGetResult(FSharpOption`1<ParseSource> rs, FSharpExpr e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal UnionCaseParseResult getResult(FSharpOption`1<ParseSource> rs, FSharpExpr e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal S parseResult(FSharpFunc`2<F, S> f, UnionCaseParseResult r);
    [CompilerGeneratedAttribute]
internal FSharpList`1<Template> getAllResults(FSharpOption`1<ParseSource> source);
}
[FlagsAttribute]
[CompilationMappingAttribute("3")]
public enum Argu.ParseSource : Enum {
    public int value__;
    public static ParseSource None;
    public static ParseSource AppSettings;
    public static ParseSource CommandLine;
    public static ParseSource All;
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.PreCompute : object {
    [DebuggerBrowsableAttribute("0")]
internal static T23636_24Bytes@ field23637@;
    internal static string defaultHelpParam { get; }
    internal static string defaultHelpDescription { get; }
    [CompilationMappingAttribute("9")]
internal static Lazy`1<Regex> defaultLabelRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Lazy`1<Dictionary`2<Type, FSharpFunc`2<FSharpOption`1<string>, FieldParserInfo>>> primitiveParsers { get; }
    [CompilationMappingAttribute("9")]
internal static Regex validCliParamRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Char[] validSeparatorChars { get; }
    [CompilationMappingAttribute("9")]
internal static Lazy`1<Regex> validSeparatorRegex { get; }
    private static PreCompute();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_defaultHelpParam();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_defaultHelpDescription();
    internal static string getDefaultHelpParam(Type t);
    internal static string generateEnumName(string name);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string generateOptionName(UnionCaseInfo uci, Object[] attributes, Object[] declaringTypeAttributes);
    internal static string generateAppSettingsName(UnionCaseInfo uci);
    internal static string generateCommandName(UnionCaseInfo uci);
    internal static Lazy`1<Regex> get_defaultLabelRegex();
    internal static FSharpOption`1<string> tryExtractUnionParameterLabel(PropertyInfo p);
    internal static FSharpChoice`4<Type, Type, Type, Unit> |NestedParseResults|Optional|List|Other|(Type t);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FieldParserInfo mkPrimitiveParser(string name, FSharpFunc`2<string, T> parser, FSharpFunc`2<T, string> unparser, FSharpOption`1<string> label);
    internal static Dictionary`2<key, value> dict(Tuple`2[] s);
    internal static Lazy`1<Dictionary`2<Type, FSharpFunc`2<FSharpOption`1<string>, FieldParserInfo>>> get_primitiveParsers();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<FieldParserInfo> tryGetEnumerationParser(FSharpOption`1<string> label, Type t);
    internal static Tuple`2<string, object> extractUciInfo@150(UnionCaseInfo uci);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<FieldParserInfo> tryGetDuEnumerationParser(FSharpOption`1<string> label, Type t);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FieldParserInfo getPrimitiveParserByType(FSharpOption`1<string> label, Type t);
    internal static Regex get_validCliParamRegex();
    internal static void validateCliParam(string name);
    internal static Char[] get_validSeparatorChars();
    internal static Lazy`1<Regex> get_validSeparatorRegex();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void validateSeparator(UnionCaseInfo uci, string sep);
    internal static FSharpList`1<UnionCaseArgInfo> aux@218-2(FSharpList`1<UnionCaseArgInfo> acc, UnionArgInfo uai);
    internal static FSharpList`1<UnionCaseArgInfo> getHierarchy(UnionArgInfo uai);
    internal static void checkSubCommand@402(UnionCaseInfo uci, Lazy`1<bool> isMandatory, Lazy`1<bool> isInherited, Lazy`1<bool> isRest, Lazy`1<bool> isMainCommand, Lazy`1<FSharpOption`1<CustomAssignmentSeparator>> customAssignmentSeparator, Unit unitVar0);
    internal static void validateCustomAssignmentAttributes@339(UnionCaseInfo uci, Type[] types, Lazy`1<bool> isRest, Lazy`1<bool> isMainCommand, string attributeName, bool tolerateSpacedArguments);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionCaseArgInfo preComputeUnionCaseArgInfo(FSharpList`1<Type> stack, FSharpOption`1<HelpParam> helpParam, FSharpFunc`2<Unit, UnionArgInfo> getParent, UnionCaseInfo uci);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UnionArgInfo preComputeUnionArgInfoInner(FSharpList`1<Type> stack, FSharpOption`1<HelpParam> helpParam, FSharpFunc`2<Unit, FSharpOption`1<UnionCaseArgInfo>> tryGetParent, Type t);
    internal static UnionArgInfo preComputeUnionArgInfo();
    [CompilerGeneratedAttribute]
internal static bool aux@45-3(string name, FSharpList`1<string> _arg1);
    internal static void postProcess@648(UnionArgInfo argInfo);
    internal static UnionArgInfo checkUnionArgInfo(UnionArgInfo result);
}
[CompilationMappingAttribute("3")]
public class Argu.ProcessExiter : object {
    internal FSharpOption`1<FSharpFunc`2<ErrorCode, FSharpOption`1<ConsoleColor>>> colorizerOption;
    public ProcessExiter(FSharpOption`1<FSharpFunc`2<ErrorCode, FSharpOption`1<ConsoleColor>>> colorizerOption);
    public ProcessExiter(FSharpFunc`2<ErrorCode, FSharpOption`1<ConsoleColor>> colorizer);
    private virtual override string Argu-IExiter-get_Name();
    private virtual override a Argu-IExiter-Exit(string msg, ErrorCode errorCode);
    [CompilerGeneratedAttribute]
internal IDisposable colorize(ErrorCode errorCode);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.UnionArgInfo : object {
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.UnParsers : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static int switchOffset;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static int descriptionOffset;
    [CompilerGeneratedAttribute]
internal static FSharpFunc`2<StringBuilder, Unit> format$cont@68(UnionCaseArgInfo _arg5, FieldParserInfo[] parsers, Unit unitVar);
    internal static FSharpFunc`2<StringBuilder, Unit> formatMainCommand@110(UnionCaseArgInfo mc, Unit unitVar0);
    internal static FSharpFunc`2<StringBuilder, Unit> format@61(UnionCaseArgInfo _arg5, string name, Unit unitVar0);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<StringBuilder, Unit> mkCommandLineSyntax(UnionArgInfo argInfo, string prefix, int maxWidth, string programName);
    [CompilerGeneratedAttribute]
internal static FSharpFunc`2<StringBuilder, Unit> mkArgUsage$cont@150-1(UnionCaseArgInfo aI, FieldParserInfo[] parsers, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static FSharpFunc`2<StringBuilder, Unit> mkArgUsage$cont@140(UnionCaseArgInfo aI, ParameterInfo matchValue, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<StringBuilder, Unit> mkArgUsage(int width, UnionCaseArgInfo aI);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<StringBuilder, Unit> mkHelpParamUsage(int width, HelpParam hp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<StringBuilder, Unit> mkUsageString(UnionArgInfo argInfo, string programName, bool hideSyntax, int width, FSharpOption`1<string> message);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> mkEntry$cont@301(UnionCaseArgInfo aI, Object[] fields, ParameterInfo matchValue, Unit unitVar);
    internal static IEnumerable`1<string> mkEntry@292(UnionCaseArgInfo aI, object t);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IEnumerable`1<string> mkCommandLineArgs(UnionArgInfo argInfo, IEnumerable`1<object> args);
    internal static XNode[] mkElem@354(bool printComments, FSharpFunc`2<Unit, string> mkComment, string key, string value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static XDocument mkAppSettingsDocument(UnionArgInfo argInfo, bool printComments, FSharpList`1<Template> args);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class Argu.Utils : object {
    internal static BindingFlags allBindings { get; }
    [CompilationMappingAttribute("9")]
internal static Lazy`1<string> currentProgramName { get; }
    [CompilationMappingAttribute("9")]
internal static Char[] invalidChars { get; }
    [CompilationMappingAttribute("9")]
internal static Char[] peskyChars { get; }
    [CompilationMappingAttribute("9")]
internal static StringExprBuilder stringExpr { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static BindingFlags get_allBindings();
    internal static a arguExn(PrintfFormat`4<a, Unit, string, b> fmt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static a arguExnChain(Exception exn, PrintfFormat`4<a, Unit, string, b> fmt);
    internal static String[] getEnvironmentCommandLineArgs();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool MemberInfo.ContainsAttribute(MemberInfo );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<T> MemberInfo.TryGetAttribute(MemberInfo );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<TValue> IDictionary`2.TryFind(IDictionary`2<TKey, TValue> d, TKey k);
    internal static Lazy`1<string> get_currentProgramName();
    [CompilerGeneratedAttribute]
internal static UnionCaseInfo aux$cont@151(FSharpOption`1<FSharpVar> tupledArg, FSharpList`1<FSharpVar> vars, FSharpExpr e, Unit unitVar);
    internal static UnionCaseInfo aux@150(FSharpOption`1<FSharpVar> tupledArg, FSharpList`1<FSharpVar> vars, FSharpExpr e);
    internal static FSharpOption`1<FSharpList`1<FSharpVar>> |Vars|_|@145(FSharpList`1<FSharpExpr> exprs);
    internal static UnionCaseInfo expr2Uci(FSharpExpr e);
    internal static Char[] get_invalidChars();
    internal static Char[] get_peskyChars();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool doesStringContain(IEnumerable`1<char> chars, string s);
    internal static string escapeCliString(string value);
    internal static string flattenCliTokens(IEnumerable`1<string> tokens);
    internal static StringExprBuilder get_stringExpr();
    internal static int getDefaultCharacterWidth();
    internal static int breakLine@307(string text, int pos, int max);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<string> wordwrap(int width, string inputText);
}
