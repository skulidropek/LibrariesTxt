[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Chessie.ErrorHandling.AsyncExtensions : object {
}
[NoComparisonAttribute]
[NoEqualityAttribute]
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public class Chessie.ErrorHandling.AsyncResult`2 : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal FSharpAsync`1<Result`2<a, b>> item;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilationMappingAttribute("4", "0", "0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpAsync`1<Result`2<a, b>> Item { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal AsyncResult`2(FSharpAsync`1<Result`2<a, b>> item);
    [CompilationMappingAttribute("8", "0")]
public static AsyncResult`2<a, b> NewAR(FSharpAsync`1<Result`2<a, b>> item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpAsync`1<Result`2<a, b>> get_Item();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Chessie.ErrorHandling.AsyncTrial : object {
    [CompilationMappingAttribute("9")]
public static AsyncTrialBuilder asyncTrial { get; }
    internal static FSharpAsync`1<Result`2<b, c>> fSuccess@263-14(FSharpFunc`2<a, AsyncResult`2<b, c>> binder, a value, FSharpList`1<c> msgs);
    internal static FSharpAsync`1<Result`2<e, d>> fFailure@268(FSharpList`1<d> errs);
    public static AsyncTrialBuilder get_asyncTrial();
}
[ExtensionAttribute]
[CompilationMappingAttribute("3")]
public class Chessie.ErrorHandling.CSharp.ResultExtensions : object {
    [ExtensionAttribute]
public static void Match(Result`2<TSuccess, TMessage> this, Action`2<TSuccess, FSharpList`1<TMessage>> ifSuccess, Action`1<FSharpList`1<TMessage>> ifFailure);
    [ExtensionAttribute]
public static TResult Either(Result`2<TSuccess, TMessage> this, Func`3<TSuccess, FSharpList`1<TMessage>, TResult> ifSuccess, Func`2<FSharpList`1<TMessage>, TResult> ifFailure);
    [ExtensionAttribute]
public static Result`2<g, TMessage> Map(Result`2<TSuccess, TMessage> this, Func`2<TSuccess, g> func);
    [ExtensionAttribute]
public static Result`2<FSharpList`1<TSuccess>, TMessage> Collect(IEnumerable`1<Result`2<TSuccess, TMessage>> values);
    [ExtensionAttribute]
public static Result`2<IEnumerable`1<TSuccess>, TMessage> Flatten(Result`2<IEnumerable`1<Result`2<TSuccess, TMessage>>, TMessage> this);
    [ExtensionAttribute]
public static Result`2<f, TMessage> SelectMany(Result`2<TSuccess, TMessage> this, Func`2<TSuccess, Result`2<f, TMessage>> func);
    [ExtensionAttribute]
public static Result`2<e, TMessage> SelectMany(Result`2<TSuccess, TMessage> this, Func`2<TSuccess, Result`2<d, TMessage>> func, Func`3<TSuccess, d, e> mapper);
    [ExtensionAttribute]
public static Result`2<c, TMessage> Select(Result`2<TSuccess, TMessage> this, Func`2<TSuccess, c> func);
    [ExtensionAttribute]
public static FSharpList`1<TMessage> FailedWith(Result`2<TSuccess, TMessage> this);
    [ExtensionAttribute]
public static TSuccess SucceededWith(Result`2<TSuccess, TMessage> this);
    [ExtensionAttribute]
public static Result`2<TResult, TMessage> Join(Result`2<TOuter, TMessage> this, Result`2<TInner, TMessage> inner, Func`2<TOuter, TKey> _outerKeySelector, Func`2<TInner, TKey> _innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector);
    [ExtensionAttribute]
public static Result`2<a, b> ToResult(FSharpOption`1<a> this, b msg);
    [ExtensionAttribute]
public static Result`2<TSuccess, TMessage2> MapFailure(Result`2<TSuccess, TMessage> this, Func`2<FSharpList`1<TMessage>, IEnumerable`1<TMessage2>> f);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public abstract class Chessie.ErrorHandling.Result`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsOk { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsBad { get; }
    [CompilationMappingAttribute("8", "0")]
public static Result`2<TSuccess, TMessage> NewOk(TSuccess item1, FSharpList`1<TMessage> item2);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsOk();
    [CompilationMappingAttribute("8", "1")]
public static Result`2<TSuccess, TMessage> NewBad(FSharpList`1<TMessage> item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsBad();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(Result`2<TSuccess, TMessage> obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    public static Result`2<TSuccess, TMessage> FailWith(IEnumerable`1<TMessage> messages);
    public static Result`2<TSuccess, TMessage> FailWith(TMessage message);
    public static Result`2<TSuccess, TMessage> Succeed(TSuccess value);
    public static Result`2<TSuccess, TMessage> Succeed(TSuccess value, TMessage message);
    public static Result`2<TSuccess, TMessage> Succeed(TSuccess value, IEnumerable`1<TMessage> messages);
    public static Result`2<TSuccess, Exception> Try(Func`1<TSuccess> func);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(Result`2<TSuccess, TMessage> obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Chessie.ErrorHandling.Trial : object {
    [CompilationMappingAttribute("9")]
public static TrialBuilder trial { get; }
    public static Result`2<TSuccess, TMessage> ok(TSuccess x);
    public static Result`2<TSuccess, TMessage> pass(TSuccess x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<TSuccess, TMessage> warn(TMessage msg, TSuccess x);
    public static Result`2<TSuccess, Message> fail(Message msg);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, Exception> Catch(FSharpFunc`2<a, b> f, a x);
    public static bool failed(Result`2<a, b> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static c either(FSharpFunc`2<Tuple`2<a, FSharpList`1<b>>, c> fSuccess, FSharpFunc`2<FSharpList`1<b>, c> fFailure, Result`2<a, b> trialResult);
    public static a returnOrFail(Result`2<a, b> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, a> mergeMessages(FSharpList`1<a> msgs, Result`2<b, a> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, c> bind(FSharpFunc`2<a, Result`2<b, c>> f, Result`2<a, c> result);
    public static Result`2<a, b> flatten(Result`2<Result`2<a, b>, b> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<c, b> op_GreaterGreaterEquals(Result`2<a, b> result, FSharpFunc`2<a, Result`2<c, b>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, c> apply(Result`2<FSharpFunc`2<a, b>, c> wrappedFunction, Result`2<a, c> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, c> op_LessMultiplyGreater(Result`2<FSharpFunc`2<a, b>, c> wrappedFunction, Result`2<a, c> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, c> lift(FSharpFunc`2<a, b> f, Result`2<a, c> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<c, b> mapFailure(FSharpFunc`2<FSharpList`1<a>, FSharpList`1<b>> f, Result`2<c, a> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, c> op_LessBangGreater(FSharpFunc`2<a, b> f, Result`2<a, c> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<c, d> lift2(FSharpFunc`2<a, FSharpFunc`2<b, c>> f, Result`2<a, d> a, Result`2<b, d> b);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<a, b> eitherTee(FSharpFunc`2<Tuple`2<a, FSharpList`1<b>>, Unit> fSuccess, FSharpFunc`2<FSharpList`1<b>, Unit> fFailure, Result`2<a, b> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<a, b> successTee(FSharpFunc`2<Tuple`2<a, FSharpList`1<b>>, Unit> f, Result`2<a, b> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, a> failureTee(FSharpFunc`2<FSharpList`1<a>, Unit> f, Result`2<b, a> result);
    public static Result`2<FSharpList`1<a>, b> collect(IEnumerable`1<Result`2<a, b>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Result`2<b, a> failIfNone(a message, FSharpOption`1<b> result);
    public static Result`2<a, b> ofChoice(FSharpChoice`2<a, b> choice);
    public static FSharpChoice`3<a, Tuple`2<a, FSharpList`1<b>>, FSharpList`1<b>> |Pass|Warn|Fail|(Result`2<a, b> result);
    public static Result`2<a, b> failOnWarnings(Result`2<a, b> result);
    internal static Result`2<r, q> fSuccess@66-11(FSharpFunc`2<p, Result`2<r, q>> f, p x, FSharpList`1<q> msgs);
    internal static Result`2<l, k> fSuccess@66-12(FSharpFunc`2<j, Result`2<l, k>> b, j x, FSharpList`1<k> msgs);
    internal static Result`2<Unit, c> fSuccess@66-13(TrialBuilder x, FSharpFunc`2<Unit, bool> guard, FSharpFunc`2<Unit, Result`2<Unit, c>> body, Unit x@90, FSharpList`1<c> msgs);
    public static TrialBuilder get_trial();
}
