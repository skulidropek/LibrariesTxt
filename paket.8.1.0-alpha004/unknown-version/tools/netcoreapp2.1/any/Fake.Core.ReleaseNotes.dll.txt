[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Fake.Core.Changelog : object {
    [CompilationMappingAttribute("9")]
internal static Regex multiNewLineRegex { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> trimEnd { get; }
    [CompilationMappingAttribute("9")]
internal static Char[] chars@1 { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> trimLine { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> func1@1-1 { get; }
    [CompilationMappingAttribute("9")]
internal static Char[] chars@1-1 { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, bool> isNotNullOrWhitespace { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> appendNewlines { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> func2@1-1 { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, string> clo1@65 { get; }
    [CompilationMappingAttribute("9")]
internal static Regex nugetRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Regex assemblyVersionRegex { get; }
    internal static Regex get_multiNewLineRegex();
    internal static FSharpFunc`2<string, string> get_trimEnd();
    internal static Char[] get_chars@1();
    internal static FSharpFunc`2<string, string> get_trimLine();
    internal static FSharpFunc`2<string, string> get_func1@1-1();
    internal static Char[] get_chars@1-1();
    internal static FSharpList`1<string> trimLines(IEnumerable`1<string> lines);
    internal static string joinLines(IEnumerable`1<string> lines);
    internal static string concat(IEnumerable`1<string> strings);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool contains(string search, string line);
    internal static FSharpFunc`2<string, bool> get_isNotNullOrWhitespace();
    [CompilerGeneratedAttribute]
internal static bool func1@1-2(string value);
    internal static string fixMultipleNewlines(string x);
    internal static string betweenNewlines(string x);
    internal static FSharpFunc`2<string, string> get_appendNewlines();
    internal static FSharpFunc`2<string, string> get_func2@1-1();
    internal static FSharpFunc`2<string, string> get_clo1@65();
    [CompilerGeneratedAttribute]
internal static string func1@1-3(string x);
    internal static string bullet@113(ChangeText text);
    internal static Tuple`2<string, string> makeEntry(Change change);
    internal static string makeDescriptionText(FSharpOption`1<string> text);
    internal static string makeChangesText(FSharpList`1<Change> changes);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@141-2(ChangelogEntry this, ChangelogEntry obj, int n, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@141-3(IComparer comp, ChangelogEntry this, ChangelogEntry objTemp, int n, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@141(IEqualityComparer comp, ChangelogEntry this, Unit unitVar);
    internal static Regex get_nugetRegex();
    internal static Regex get_assemblyVersionRegex();
    public static Tuple`2<Match, Match> parseVersions(string line);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Changelog createWithCustomHeader(string header, FSharpOption`1<string> description, FSharpOption`1<Unreleased> unreleased, FSharpList`1<ChangelogEntry> entries);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Changelog create(FSharpOption`1<string> description, FSharpOption`1<Unreleased> unreleased, FSharpList`1<ChangelogEntry> entries);
    public static Changelog fromEntries(FSharpList`1<ChangelogEntry> entries);
    internal static bool isMainHeader(string line);
    internal static bool isVersionHeader(string line);
    internal static bool isCategoryHeader(string line);
    internal static bool containsUnreleasedHeader(string line);
    internal static bool isUnreleasedHeader(string line);
    internal static bool isBlockHeader(string line);
    internal static bool isAnyHeader(string line);
    internal static Tuple`2<FSharpList`1<string>, FSharpList`1<string>> findCategoryEnd@344(FSharpList`1<string> changes, FSharpList`1<string> text);
    internal static FSharpList`1<ChangelogEntry> loop@361-1(FSharpFunc`2<string, FSharpOption`1<DateTime>> parseDate, FSharpList`1<ChangelogEntry> changeLogEntries, FSharpList`1<string> text);
    internal static FSharpList`1<Change> categoryLoop@355(FSharpList`1<Change> changes, FSharpList`1<string> text);
    internal static FSharpOption`1<Tuple`2<string, Tuple`2<FSharpList`1<string>, FSharpList`1<string>>>> findNextCategoryBlock@343(FSharpList`1<string> text);
    internal static FSharpOption`1<Tuple`2<string, Tuple`2<FSharpList`1<string>, FSharpList`1<string>>>> findNextChangesBlock@337(FSharpList`1<string> text);
    internal static FSharpOption`1<Tuple`2<FSharpList`1<string>, FSharpList`1<string>>> findUnreleasedBlock@331(FSharpList`1<string> text);
    internal static FSharpFunc`2<FSharpList`1<string>, Tuple`2<FSharpList`1<string>, FSharpList`1<string>>> findBlockEnd@329(FSharpList`1<string> accumulator);
    internal static Tuple`2<FSharpList`1<a>, FSharpList`1<a>> findEnd@323-1(FSharpFunc`2<a, bool> headerPredicate, FSharpList`1<a> accumulator, FSharpList`1<a> lines);
    internal static FSharpFunc`2<FSharpList`1<string>, Tuple`2<a, FSharpList`1<string>>> findFirstHeader@306(a accumulator);
    public static Changelog parse(IEnumerable`1<string> data);
    public static Changelog load(string filename);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void save(string filename, Changelog changelog);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Changelog promoteUnreleased(string version, Changelog changelog);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Fake.Core.ReleaseNotes : object {
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, Tuple`2<Match, Match>> parseVersions { get; }
    [CompilationMappingAttribute("9")]
internal static Regex nugetRegex@69 { get; }
    [CompilationMappingAttribute("9")]
internal static Regex assemblyVersionRegex@70 { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpFunc`2<string, FSharpOption`1<DateTime>> parseDate { get; }
    [CompilationMappingAttribute("9")]
internal static Regex dateRegex@82 { get; }
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@46(ReleaseNotes this, ReleaseNotes obj, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@46-1(IComparer comp, ReleaseNotes this, ReleaseNotes objTemp, Unit unitVar);
    internal static FSharpFunc`2<string, Tuple`2<Match, Match>> get_parseVersions();
    internal static Regex get_nugetRegex@69();
    internal static Regex get_assemblyVersionRegex@70();
    internal static FSharpFunc`2<string, FSharpOption`1<DateTime>> get_parseDate();
    internal static Regex get_dateRegex@82();
    [CompilerGeneratedAttribute]
internal static string func2@1(string x);
    internal static ReleaseNotes parseSimple(string line);
    internal static Tuple`2<FSharpList`1<string>, FSharpList`1<string>> findEnd@112(FSharpList`1<string> notes, FSharpList`1<string> text);
    internal static FSharpList`1<ReleaseNotes> loop@121(FSharpList`1<ReleaseNotes> releaseNotes, FSharpList`1<string> text);
    internal static FSharpOption`1<Tuple`2<string, Tuple`2<FSharpList`1<string>, FSharpList`1<string>>>> findNextNotesBlock@110(FSharpList`1<string> text);
    internal static FSharpList`1<ReleaseNotes> parseAllComplex(IEnumerable`1<string> text);
    internal static FSharpChoice`3<Unit, Unit, Unit> |Simple|Complex|Invalid|@145(char _arg1);
    [CompilerGeneratedAttribute]
internal static bool func1@1(string value);
    public static FSharpList`1<ReleaseNotes> parseAll(IEnumerable`1<string> data);
    public static ReleaseNotes parse(IEnumerable`1<string> data);
    public static ReleaseNotes load(string fileName);
}
[CompilationMappingAttribute("7")]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyInformationalVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyMetadata_BuildDate;
}
