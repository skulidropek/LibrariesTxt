[CustomEqualityAttribute]
[CustomComparisonAttribute]
[CompilationMappingAttribute("2")]
public class Fake.Core.PreRelease : object {
    [DebuggerBrowsableAttribute("0")]
internal string Origin@;
    [DebuggerBrowsableAttribute("0")]
internal string Name@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpList`1<PreReleaseSegment> Values@;
    [CompilationMappingAttribute("4", "0")]
public string Origin { get; }
    [CompilationMappingAttribute("4", "1")]
public string Name { get; }
    [CompilationMappingAttribute("4", "2")]
public FSharpList`1<PreReleaseSegment> Values { get; }
    public PreRelease(string origin, string name, FSharpList`1<PreReleaseSegment> values);
    public string get_Origin();
    public string get_Name();
    public FSharpList`1<PreReleaseSegment> get_Values();
    public static FSharpOption`1<PreRelease> TryParse(string str);
    public bool Equals(PreRelease y);
    public virtual bool Equals(object yobj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public int CompareTo(PreRelease yobj);
    private virtual override int System-IComparable-CompareTo(object yobj);
}
[CustomEqualityAttribute]
[CustomComparisonAttribute]
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public abstract class Fake.Core.PreReleaseSegment : object {
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsAlphaNumeric { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsNumeric { get; }
    [CompilationMappingAttribute("8", "0")]
public static PreReleaseSegment NewAlphaNumeric(string item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsAlphaNumeric();
    [CompilationMappingAttribute("8", "1")]
public static PreReleaseSegment NewNumeric(BigInteger item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsNumeric();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    public int CompareTo(PreReleaseSegment y);
    public virtual int GetHashCode();
    public bool Equals(PreReleaseSegment y);
    public virtual bool Equals(object yobj);
    private virtual override int System-IComparable-CompareTo(object yobj);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Fake.Core.SemVer : object {
    [CompilationMappingAttribute("9")]
internal static Regex validContent { get; }
    public static bool isValid(string version);
    internal static FSharpOption`1<int> |Int|_|(string str);
    internal static FSharpOption`1<BigInteger> |Big|_|(string str);
    [CompilerGeneratedAttribute]
internal static bool contains@1(a e, FSharpList`1<a> xs1);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<string> expand(FSharpList`1<char> delimiter, string text);
    internal static Regex get_validContent();
    [CompilerGeneratedAttribute]
internal static Tuple`5<int, int, int, BigInteger, FSharpList`1<string>> parse$cont@321-1(FSharpList`1<string> fragments, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static Tuple`5<int, int, int, BigInteger, FSharpList`1<string>> parse$cont@321(FSharpList`1<string> fragments, Unit unitVar);
    public static SemVerInfo parse(string version);
}
[CompilationMappingAttribute("7")]
public static class Fake.Core.SemVerActivePattern : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<FSharpList`1<string>> |ParseRegex|_|(string pattern, string input);
    public static FSharpOption`1<FSharpList`1<string>> |SemVer|_|(string version);
    public static FSharpOption`1<Unit> |ValidVersion|_|(string _arg1);
}
[CustomEqualityAttribute]
[CustomComparisonAttribute]
[StructuredFormatDisplayAttribute("{AsString}")]
[CompilationMappingAttribute("2")]
public class Fake.Core.SemVerInfo : object {
    [DebuggerBrowsableAttribute("0")]
internal UInt32 Major@;
    [DebuggerBrowsableAttribute("0")]
internal UInt32 Minor@;
    [DebuggerBrowsableAttribute("0")]
internal UInt32 Patch@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpOption`1<PreRelease> PreRelease@;
    [DebuggerBrowsableAttribute("0")]
internal BigInteger Build@;
    [DebuggerBrowsableAttribute("0")]
internal string BuildMetaData@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpOption`1<string> Original@;
    [CompilationMappingAttribute("4", "0")]
public UInt32 Major { get; }
    [CompilationMappingAttribute("4", "1")]
public UInt32 Minor { get; }
    [CompilationMappingAttribute("4", "2")]
public UInt32 Patch { get; }
    [CompilationMappingAttribute("4", "3")]
public FSharpOption`1<PreRelease> PreRelease { get; }
    [CompilationMappingAttribute("4", "4")]
public BigInteger Build { get; }
    [CompilationMappingAttribute("4", "5")]
public string BuildMetaData { get; }
    [CompilationMappingAttribute("4", "6")]
public FSharpOption`1<string> Original { get; }
    public string AsString { get; }
    public SemVerInfo(UInt32 major, UInt32 minor, UInt32 patch, FSharpOption`1<PreRelease> preRelease, BigInteger build, string buildMetaData, FSharpOption`1<string> original);
    public UInt32 get_Major();
    public UInt32 get_Minor();
    public UInt32 get_Patch();
    public FSharpOption`1<PreRelease> get_PreRelease();
    public BigInteger get_Build();
    public string get_BuildMetaData();
    public FSharpOption`1<string> get_Original();
    public string Normalize();
    public string NormalizeToShorter();
    public virtual string ToString();
    public string get_AsString();
    public bool Equals(SemVerInfo y);
    public virtual bool Equals(object yobj);
    public virtual int GetHashCode();
    public int CompareTo(SemVerInfo y);
    private virtual override int System-IComparable-CompareTo(object yobj);
}
[CompilationMappingAttribute("7")]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyInformationalVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyMetadata_BuildDate;
}
