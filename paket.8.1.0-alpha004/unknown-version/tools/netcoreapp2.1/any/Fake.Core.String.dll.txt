[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Fake.Core.String : object {
    [CompilationMappingAttribute("9")]
public static FSharpFunc`2<string, bool> endsWithSlash { get; }
    [CompilationMappingAttribute("9")]
internal static char copyOfStruct@50 { get; internal set; }
    [CompilationMappingAttribute("9")]
internal static Dictionary`2<string, Regex> regexes { get; }
    [CompilationMappingAttribute("9")]
public static FSharpList`1<char> charsAndDigits { get; }
    public static char Colon { get; }
    public static string LinuxLineBreaks { get; }
    public static string WindowsLineBreaks { get; }
    public static string MacLineBreaks { get; }
    public static string productName();
    public static bool isNullOrEmpty(string value);
    public static bool isNotNullOrEmpty(string value);
    public static bool isNullOrWhiteSpace(string value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string replace(string pattern, string replacement, string text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string separated(string delimiter, IEnumerable`1<string> items);
    public static string trimSlash(string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<string> split(char delimiter, string text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<string> splitStr(string delimiterStr, string text);
    public static string toLines(IEnumerable`1<string> text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool startsWith(string prefix, string text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool endsWith(string suffix, string text);
    public static FSharpFunc`2<string, bool> get_endsWithSlash();
    internal static char get_copyOfStruct@50();
    internal static void set_copyOfStruct@50(char value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string replaceFirst(string pattern, string replacement, string text);
    internal static Dictionary`2<string, Regex> get_regexes();
    public static Regex getRegEx(string pattern);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string regex_replace(string pattern, string replacement, string text);
    public static bool isUmlaut(char c);
    public static string toLower(string s);
    public static FSharpList`1<char> get_charsAndDigits();
    public static bool isLetterOrDigit(char c);
    public static string trimSeparator(string s);
    public static string trimSpecialChars(string text);
    public static string trim(string x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string trimChars(Char[] chars, string x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string trimStartChars(Char[] chars, string x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string trimEndChars(Char[] chars, string x);
    public static FSharpOption`1<string> liftString(string x);
    public static string NormalizeVersion(string version);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static char get_Colon();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_LinuxLineBreaks();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_WindowsLineBreaks();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_MacLineBreaks();
    public static string convertTextToWindowsLineBreaks(string text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void convertFileToWindowsLineBreaksWithEncoding(Encoding encoding, string fileName);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void convertFileToWindowsLineBreak(Encoding encoding, string fileName);
    public static string removeLineBreaks(string text);
    public static string encapsulateApostrophe(string text);
    public static string decodeBase64Utf8String(string text);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute("7")]
public static class Fake.Core.StringBuilder : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder append(string text, StringBuilder builder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendWithoutQuotes(string text, StringBuilder builder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendIfSome(FSharpOption`1<a> o, FSharpFunc`2<a, string> f, StringBuilder builder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendIfTrue(bool p, string s, StringBuilder builder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendIfTrueWithoutQuotes(bool p, string s, StringBuilder builder);
    public static FSharpFunc`2<string, FSharpFunc`2<StringBuilder, StringBuilder>> appendIfFalse(bool p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<StringBuilder, StringBuilder> appendWithoutQuotesIfNotNull(object value, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<StringBuilder, StringBuilder> appendIfNotNull(object value, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendQuotedIfNotNull(object value, string s, StringBuilder builder);
    public static FSharpFunc`2<string, FSharpFunc`2<StringBuilder, StringBuilder>> appendStringIfValueIsNotNull(a value);
    public static FSharpFunc`2<string, FSharpFunc`2<StringBuilder, StringBuilder>> appendStringIfValueIsNotNullOrEmpty(string value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<StringBuilder, StringBuilder> appendIfNotNullOrEmpty(string value, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder appendFileNamesIfNotNull(IEnumerable`1<string> fileNames, StringBuilder builder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StringBuilder forEach(FSharpList`1<a> items, FSharpFunc`2<a, FSharpFunc`2<b, FSharpFunc`2<StringBuilder, c>>> action, b text, StringBuilder builder);
    public static string toText(StringBuilder builder);
}
[CompilationMappingAttribute("7")]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyInformationalVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyMetadata_BuildDate;
}
