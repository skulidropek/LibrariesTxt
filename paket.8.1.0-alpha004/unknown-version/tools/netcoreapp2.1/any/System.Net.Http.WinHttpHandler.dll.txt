internal static class FxResources.System.Net.Http.WinHttpHandler.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
public enum System.Net.Http.CookieUsePolicy : Enum {
    public int value__;
    public static CookieUsePolicy IgnoreCookies;
    public static CookieUsePolicy UseInternalCookieStoreOnly;
    public static CookieUsePolicy UseSpecifiedCookieContainer;
}
public enum System.Net.Http.WindowsProxyUsePolicy : Enum {
    public int value__;
    public static WindowsProxyUsePolicy DoNotUseProxy;
    public static WindowsProxyUsePolicy UseWinHttpProxy;
    public static WindowsProxyUsePolicy UseWinInetProxy;
    public static WindowsProxyUsePolicy UseCustomProxy;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.WinHttpHandler : HttpMessageHandler {
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public bool AutomaticRedirection { get; public set; }
    public bool CheckCertificateRevocationList { get; public set; }
    public ClientCertificateOption ClientCertificateOption { get; public set; }
    [NullableAttribute("1")]
public X509Certificate2Collection ClientCertificates { get; }
    public CookieContainer CookieContainer { get; public set; }
    public CookieUsePolicy CookieUsePolicy { get; public set; }
    public ICredentials DefaultProxyCredentials { get; public set; }
    public bool EnableMultipleHttp2Connections { get; public set; }
    public int MaxAutomaticRedirections { get; public set; }
    public int MaxConnectionsPerServer { get; public set; }
    public int MaxResponseDrainSize { get; public set; }
    public int MaxResponseHeadersLength { get; public set; }
    public bool PreAuthenticate { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, object> Properties { get; }
    public IWebProxy Proxy { get; public set; }
    public TimeSpan ReceiveDataTimeout { get; public set; }
    public TimeSpan ReceiveHeadersTimeout { get; public set; }
    public TimeSpan SendTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateValidationCallback { get; public set; }
    public ICredentials ServerCredentials { get; public set; }
    public SslProtocols SslProtocols { get; public set; }
    public WindowsProxyUsePolicy WindowsProxyUsePolicy { get; public set; }
    public DecompressionMethods get_AutomaticDecompression();
    public void set_AutomaticDecompression(DecompressionMethods value);
    public bool get_AutomaticRedirection();
    public void set_AutomaticRedirection(bool value);
    public bool get_CheckCertificateRevocationList();
    public void set_CheckCertificateRevocationList(bool value);
    public ClientCertificateOption get_ClientCertificateOption();
    public void set_ClientCertificateOption(ClientCertificateOption value);
    [NullableContextAttribute("1")]
public X509Certificate2Collection get_ClientCertificates();
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    public CookieUsePolicy get_CookieUsePolicy();
    public void set_CookieUsePolicy(CookieUsePolicy value);
    public ICredentials get_DefaultProxyCredentials();
    public void set_DefaultProxyCredentials(ICredentials value);
    public bool get_EnableMultipleHttp2Connections();
    public void set_EnableMultipleHttp2Connections(bool value);
    public int get_MaxAutomaticRedirections();
    public void set_MaxAutomaticRedirections(int value);
    public int get_MaxConnectionsPerServer();
    public void set_MaxConnectionsPerServer(int value);
    public int get_MaxResponseDrainSize();
    public void set_MaxResponseDrainSize(int value);
    public int get_MaxResponseHeadersLength();
    public void set_MaxResponseHeadersLength(int value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, object> get_Properties();
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public TimeSpan get_ReceiveDataTimeout();
    public void set_ReceiveDataTimeout(TimeSpan value);
    public TimeSpan get_ReceiveHeadersTimeout();
    public void set_ReceiveHeadersTimeout(TimeSpan value);
    public TimeSpan get_SendTimeout();
    public void set_SendTimeout(TimeSpan value);
    public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ServerCertificateValidationCallback();
    public void set_ServerCertificateValidationCallback(Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    public ICredentials get_ServerCredentials();
    public void set_ServerCredentials(ICredentials value);
    public SslProtocols get_SslProtocols();
    public void set_SslProtocols(SslProtocols value);
    public WindowsProxyUsePolicy get_WindowsProxyUsePolicy();
    public void set_WindowsProxyUsePolicy(WindowsProxyUsePolicy value);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_securityprotocolnotsupported { get; }
    internal static string net_http_invalid_cookiecontainer { get; }
    internal static string net_http_invalid_proxyusepolicy { get; }
    internal static string net_http_invalid_proxy { get; }
    internal static string net_http_handler_norequest { get; }
    internal static string net_http_operation_started { get; }
    internal static string net_http_client_execution_error { get; }
    internal static string net_http_io_read { get; }
    internal static string net_http_io_read_incomplete { get; }
    internal static string net_http_io_write { get; }
    internal static string net_http_chunked_not_allowed_with_empty_content { get; }
    internal static string net_http_invalid_enable_first { get; }
    internal static string net_http_value_must_be_greater_than { get; }
    internal static string net_http_username_empty_string { get; }
    internal static string net_http_no_concurrent_io_allowed { get; }
    internal static string net_http_buffer_insufficient_length { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string net_http_content_stream_already_read { get; }
    internal static string net_http_winhttp_error { get; }
    internal static string PlatformNotSupported_WinHttpHandler { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_securityprotocolnotsupported();
    internal static string get_net_http_invalid_cookiecontainer();
    internal static string get_net_http_invalid_proxyusepolicy();
    internal static string get_net_http_invalid_proxy();
    internal static string get_net_http_handler_norequest();
    internal static string get_net_http_operation_started();
    internal static string get_net_http_client_execution_error();
    internal static string get_net_http_io_read();
    internal static string get_net_http_io_read_incomplete();
    internal static string get_net_http_io_write();
    internal static string get_net_http_chunked_not_allowed_with_empty_content();
    internal static string get_net_http_invalid_enable_first();
    internal static string get_net_http_value_must_be_greater_than();
    internal static string get_net_http_username_empty_string();
    internal static string get_net_http_no_concurrent_io_allowed();
    internal static string get_net_http_buffer_insufficient_length();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_net_http_content_stream_already_read();
    internal static string get_net_http_winhttp_error();
    internal static string get_PlatformNotSupported_WinHttpHandler();
}
