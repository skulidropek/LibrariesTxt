internal static class FxResources.System.Security.Cryptography.OpenSsl.SR : object {
}
internal static class Internal.Cryptography.AsymmetricAlgorithmHelpers : object {
    public static Byte[] ConvertIeee1363ToDer(ReadOnlySpan`1<byte> input);
    public static Byte[] ConvertDerToIeee1363(Byte[] input, int inputOffset, int inputCount, int fieldSizeBits);
    public static int BitsToBytes(int bitLength);
    private static void CopySignatureField(Byte[] signatureField, Byte[] response, int offset, int fieldLength);
    public static Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public static Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public static bool TryHashData(ReadOnlySpan`1<byte> source, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    private static HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithmName);
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeAsn1BitStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeAsn1ObjectHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeAsn1OctetStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeBignumHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeBignumHandle(IntPtr handle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeDsaHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal static SafeDsaHandle DuplicateHandle(IntPtr handle);
}
internal class Microsoft.Win32.SafeHandles.SafeEcKeyHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal static SafeEcKeyHandle DuplicateHandle(IntPtr handle);
}
internal class Microsoft.Win32.SafeHandles.SafeEvpPKeyCtxHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeEvpPKeyCtxHandle(IntPtr handle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal abstract class Microsoft.Win32.SafeHandles.SafeInteriorHandle : SafeHandle {
    private SafeHandle _parent;
    public bool IsInvalid { get; }
    protected SafeInteriorHandle(IntPtr invalidHandleValue, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal void SetParent(SafeHandle parent);
    internal static TInteriorHandle OpenInteriorHandle(Func`2<TExteriorHandle, TInteriorHandle> accessor, TExteriorHandle exteriorHandle);
    internal static TInteriorHandle OpenInteriorHandle(Func`3<TExteriorHandle, TArg1, TInteriorHandle> accessor, TExteriorHandle exteriorHandle, TArg1 arg1);
}
internal class Microsoft.Win32.SafeHandles.SafeRsaHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal static SafeRsaHandle DuplicateHandle(IntPtr handle);
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1IntegerHandle : SafeInteriorHandle {
}
internal static class System.Security.Cryptography.DerEncoder : object {
    private static byte ConstructedFlag;
    private static byte ConstructedSequenceTag;
    private static byte ConstructedSetTag;
    private static Byte[][] s_nullTlv;
    private static DerEncoder();
    private static Byte[] EncodeLength(int length);
    internal static Byte[][] SegmentedEncodeBoolean(bool value);
    internal static Byte[][] SegmentedEncodeUnsignedInteger(UInt32 value);
    internal static Byte[][] SegmentedEncodeUnsignedInteger(ReadOnlySpan`1<byte> bigEndianBytes);
    internal static Byte[][] SegmentedEncodeBitString(Byte[][][] childSegments);
    internal static Byte[][] SegmentedEncodeBitString(Byte[] data);
    internal static Byte[][] SegmentedEncodeBitString(int unusedBits, Byte[] data);
    internal static Byte[][] SegmentedEncodeNamedBitList(Byte[] bigEndianBytes, int namedBitsCount);
    internal static Byte[][] SegmentedEncodeOctetString(Byte[] data);
    internal static Byte[][] SegmentedEncodeNull();
    internal static Byte[] EncodeOid(string oidValue);
    internal static Byte[][] SegmentedEncodeOid(Oid oid);
    internal static Byte[][] SegmentedEncodeOid(string oidValue);
    internal static Byte[][] SegmentedEncodeUtf8String(Char[] chars);
    internal static Byte[][] SegmentedEncodeUtf8String(Char[] chars, int offset, int count);
    internal static Byte[][] ConstructSegmentedSequence(Byte[][][] items);
    internal static Byte[][] ConstructSegmentedSequence(IEnumerable`1<Byte[][]> items);
    internal static Byte[][] ConstructSegmentedContextSpecificValue(int contextId, Byte[][][] items);
    internal static Byte[][] ConstructSegmentedSet(Byte[][][] items);
    internal static Byte[][] ConstructSegmentedPresortedSet(Byte[][][] items);
    internal static bool IsValidPrintableString(Char[] chars);
    internal static bool IsValidPrintableString(Char[] chars, int offset, int count);
    internal static Byte[][] SegmentedEncodePrintableString(Char[] chars);
    internal static Byte[][] SegmentedEncodePrintableString(Char[] chars, int offset, int count);
    internal static Byte[][] SegmentedEncodeIA5String(Char[] chars);
    internal static Byte[][] SegmentedEncodeIA5String(Char[] chars, int offset, int count);
    internal static Byte[][] SegmentedEncodeUtcTime(DateTime utcTime);
    internal static Byte[][] SegmentedEncodeGeneralizedTime(DateTime utcTime);
    internal static Byte[] ConstructSequence(Byte[][][] items);
    internal static Byte[] ConstructSequence(IEnumerable`1<Byte[][]> items);
    private static BigInteger ParseOidRid(string oidValue, Int32& startIndex);
    private static int AtoI(char c);
    private static void EncodeRid(List`1<byte> encodedData, BigInteger& rid);
    private static bool IsPrintableStringCharacter(char c);
    private static Byte[] ConcatenateArrays(Byte[][][] segments);
    private static Byte[] ConcatenateArrays(IEnumerable`1<Byte[][]> segments);
}
internal class System.Security.Cryptography.DerSequenceReader : object {
    internal static byte ContextSpecificTagFlag;
    internal static byte ConstructedFlag;
    internal static byte ContextSpecificConstructedTag0;
    internal static byte ContextSpecificConstructedTag1;
    internal static byte ContextSpecificConstructedTag2;
    internal static byte ContextSpecificConstructedTag3;
    internal static byte ConstructedSequence;
    internal static byte TagClassMask;
    internal static byte TagNumberMask;
    internal static DateTimeFormatInfo s_validityDateTimeFormatInfo;
    private static Encoding s_utf8EncodingWithExceptionFallback;
    private static Encoding s_latin1Encoding;
    private Byte[] _data;
    private int _end;
    private int _position;
    [CompilerGeneratedAttribute]
private int <ContentLength>k__BackingField;
    internal int ContentLength { get; private set; }
    internal bool HasData { get; }
    private DerSequenceReader(bool startAtPayload, Byte[] data, int offset, int length);
    internal DerSequenceReader(Byte[] data);
    internal DerSequenceReader(Byte[] data, int offset, int length);
    private DerSequenceReader(DerTag tagToEat, Byte[] data, int offset, int length);
    [CompilerGeneratedAttribute]
internal int get_ContentLength();
    [CompilerGeneratedAttribute]
private void set_ContentLength(int value);
    internal static DerSequenceReader CreateForPayload(Byte[] payload);
    internal bool get_HasData();
    internal byte PeekTag();
    internal bool HasTag(DerTag expectedTag);
    internal bool HasTag(byte expectedTag);
    internal void SkipValue();
    internal void ValidateAndSkipDerValue();
    internal Byte[] ReadNextEncodedValue();
    internal bool ReadBoolean();
    internal int ReadInteger();
    internal Byte[] ReadIntegerBytes();
    internal Byte[] ReadBitString();
    internal Byte[] ReadOctetString();
    internal string ReadOidAsString();
    internal Oid ReadOid();
    internal string ReadUtf8String();
    private DerSequenceReader ReadCollectionWithTag(DerTag expected);
    internal DerSequenceReader ReadSequence();
    internal DerSequenceReader ReadSet();
    internal string ReadPrintableString();
    internal string ReadIA5String();
    internal string ReadT61String();
    internal DateTime ReadX509Date();
    internal DateTime ReadUtcTime();
    internal DateTime ReadGeneralizedTime();
    internal string ReadBMPString();
    private static string TrimTrailingNulls(string value);
    private DateTime ReadTime(DerTag timeTag, string formatString);
    private Byte[] ReadContentAsBytes();
    private void EatTag(DerTag expected);
    private static void CheckTag(DerTag expected, Byte[] data, int position);
    private int EatLength();
    private static int ScanContentLength(Byte[] data, int offset, int end, Int32& bytesConsumed);
}
public class System.Security.Cryptography.DSAOpenSsl : DSA {
    private static int BitsPerByte;
    private Lazy`1<SafeDsaHandle> _key;
    private static KeySizes[] s_legalKeySizes;
    unknown int KeySize {public set; }
    public KeySizes[] LegalKeySizes { get; }
    public DSAOpenSsl(DSAParameters parameters);
    public DSAOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public DSAOpenSsl(IntPtr handle);
    public DSAOpenSsl(int keySize);
    private static DSAOpenSsl();
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual void set_KeySize(int value);
    private void ForceSetKeySize(int newKeySize);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual DSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(DSAParameters parameters);
    protected virtual void Dispose(bool disposing);
    private void FreeKey();
    private static void CheckInvalidKey(SafeDsaHandle key);
    private SafeDsaHandle GenerateKey();
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
    public virtual bool TryCreateSignature(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, Int32& bytesWritten);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
    public virtual bool VerifySignature(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature);
    private void SetKey(SafeDsaHandle newKey);
}
internal static class System.Security.Cryptography.ECDiffieHellmanDerivation : object {
    internal static Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, ReadOnlySpan`1<byte> secretPrepend, ReadOnlySpan`1<byte> secretAppend, DeriveSecretAgreement deriveSecretAgreement);
    internal static Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey, ReadOnlySpan`1<byte> secretPrepend, ReadOnlySpan`1<byte> secretAppend, DeriveSecretAgreement deriveSecretAgreement);
    internal static Byte[] DeriveKeyTls(ECDiffieHellmanPublicKey otherPartyPublicKey, ReadOnlySpan`1<byte> prfLabel, ReadOnlySpan`1<byte> prfSeed, DeriveSecretAgreement deriveSecretAgreement);
    private static void PHash(HashAlgorithmName algorithmName, ReadOnlySpan`1<byte> secret, ReadOnlySpan`1<byte> prfLabel, ReadOnlySpan`1<byte> prfSeed, int hashOutputSize, Span`1<byte> ret);
}
public class System.Security.Cryptography.ECDiffieHellmanOpenSsl : ECDiffieHellman {
    private ECOpenSsl _key;
    public KeySizes[] LegalKeySizes { get; }
    public int KeySize { get; public set; }
    public ECDiffieHellmanPublicKey PublicKey { get; }
    public ECDiffieHellmanOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public ECDiffieHellmanOpenSsl(IntPtr handle);
    public ECDiffieHellmanOpenSsl(ECCurve curve);
    public ECDiffieHellmanOpenSsl(int keySize);
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual KeySizes[] get_LegalKeySizes();
    protected virtual void Dispose(bool disposing);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual void GenerateKey(ECCurve curve);
    public virtual ECDiffieHellmanPublicKey get_PublicKey();
    public virtual void ImportParameters(ECParameters parameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual Byte[] DeriveKeyMaterial(ECDiffieHellmanPublicKey otherPartyPublicKey);
    public virtual Byte[] DeriveKeyFromHash(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] secretPrepend, Byte[] secretAppend);
    public virtual Byte[] DeriveKeyFromHmac(ECDiffieHellmanPublicKey otherPartyPublicKey, HashAlgorithmName hashAlgorithm, Byte[] hmacKey, Byte[] secretPrepend, Byte[] secretAppend);
    public virtual Byte[] DeriveKeyTls(ECDiffieHellmanPublicKey otherPartyPublicKey, Byte[] prfLabel, Byte[] prfSeed);
    private Byte[] DeriveSecretAgreement(ECDiffieHellmanPublicKey otherPartyPublicKey, IncrementalHash hasher);
    [CompilerGeneratedAttribute]
private Byte[] <DeriveKeyFromHash>b__20_0(ECDiffieHellmanPublicKey pubKey, IncrementalHash hasher);
    [CompilerGeneratedAttribute]
private Byte[] <DeriveKeyFromHmac>b__21_0(ECDiffieHellmanPublicKey pubKey, IncrementalHash hasher);
    [CompilerGeneratedAttribute]
private Byte[] <DeriveKeyTls>b__22_0(ECDiffieHellmanPublicKey pubKey, IncrementalHash hasher);
}
internal class System.Security.Cryptography.ECDiffieHellmanOpenSslPublicKey : ECDiffieHellmanPublicKey {
    private ECOpenSsl _key;
    internal bool HasCurveName { get; }
    internal int KeySize { get; }
    internal ECDiffieHellmanOpenSslPublicKey(SafeEvpPKeyHandle pkeyHandle);
    internal ECDiffieHellmanOpenSslPublicKey(ECParameters parameters);
    public virtual string ToXmlString();
    public virtual Byte[] ToByteArray();
    public virtual ECParameters ExportExplicitParameters();
    public virtual ECParameters ExportParameters();
    internal bool get_HasCurveName();
    internal int get_KeySize();
    protected virtual void Dispose(bool disposing);
    internal SafeEvpPKeyHandle DuplicateKeyHandle();
}
public class System.Security.Cryptography.ECDsaOpenSsl : ECDsa {
    private ECOpenSsl _key;
    public KeySizes[] LegalKeySizes { get; }
    public int KeySize { get; public set; }
    public ECDsaOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public ECDsaOpenSsl(IntPtr handle);
    public ECDsaOpenSsl(ECCurve curve);
    public ECDsaOpenSsl(int keySize);
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    private void ForceSetKeySize(int newKeySize);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] SignHash(Byte[] hash);
    public virtual bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, Int32& bytesWritten);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature);
    public virtual bool VerifyHash(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    protected virtual void Dispose(bool disposing);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual void GenerateKey(ECCurve curve);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
}
internal class System.Security.Cryptography.ECOpenSsl : object {
    private Lazy`1<SafeEcKeyHandle> _key;
    internal static string ECDSA_P256_OID_VALUE;
    internal static string ECDSA_P384_OID_VALUE;
    internal static string ECDSA_P521_OID_VALUE;
    internal SafeEcKeyHandle Value { get; }
    internal int KeySize { get; }
    public ECOpenSsl(ECCurve curve);
    public ECOpenSsl(AsymmetricAlgorithm owner);
    public ECOpenSsl(ECParameters ecParameters);
    public ECOpenSsl(SafeEcKeyHandle key);
    internal SafeEcKeyHandle get_Value();
    private SafeEcKeyHandle GenerateKeyLazy(AsymmetricAlgorithm owner);
    public sealed virtual void Dispose();
    internal int get_KeySize();
    internal SafeEvpPKeyHandle UpRefKeyHandle();
    internal void SetKey(SafeEcKeyHandle key);
    internal int GenerateKey(ECCurve curve);
    private void FreeKey();
    public int ImportParameters(ECParameters parameters);
    public static ECParameters ExportExplicitParameters(SafeEcKeyHandle currentKey, bool includePrivateParameters);
    public static ECParameters ExportParameters(SafeEcKeyHandle currentKey, bool includePrivateParameters);
    private static ECParameters ExportNamedCurveParameters(SafeEcKeyHandle key, bool includePrivateParameters);
    private static ECParameters ExportExplicitCurveParameters(SafeEcKeyHandle key, bool includePrivateParameters);
    private static SafeEcKeyHandle ImportNamedCurveParameters(ECParameters parameters);
    private static SafeEcKeyHandle ImportPrimeCurveParameters(ECParameters parameters);
    private static SafeEcKeyHandle ImportCharacteristic2CurveParameters(ECParameters parameters);
    private static void CheckInvalidKey(SafeEcKeyHandle key);
    public static SafeEcKeyHandle GenerateKeyByKeySize(int keySize);
}
public class System.Security.Cryptography.RSAOpenSsl : RSA {
    private static int BitsPerByte;
    private static Byte[] s_defaultExponent;
    private Lazy`1<SafeRsaHandle> _key;
    unknown int KeySize {public set; }
    public KeySizes[] LegalKeySizes { get; }
    public RSAOpenSsl(RSAParameters parameters);
    public RSAOpenSsl(IntPtr handle);
    public RSAOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public RSAOpenSsl(int keySize);
    private static RSAOpenSsl();
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual void set_KeySize(int value);
    private void ForceSetKeySize(int newKeySize);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual bool TryDecrypt(ReadOnlySpan`1<byte> data, Span`1<byte> destination, RSAEncryptionPadding padding, Int32& bytesWritten);
    private static bool TryDecrypt(SafeRsaHandle key, ReadOnlySpan`1<byte> data, Span`1<byte> destination, RsaPadding rsaPadding, RsaPaddingProcessor rsaPaddingProcessor, Int32& bytesWritten);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual bool TryEncrypt(ReadOnlySpan`1<byte> data, Span`1<byte> destination, RSAEncryptionPadding padding, Int32& bytesWritten);
    private static bool TryEncrypt(SafeRsaHandle key, ReadOnlySpan`1<byte> data, Span`1<byte> destination, RsaPadding rsaPadding, RsaPaddingProcessor rsaPaddingProcessor, Int32& bytesWritten);
    private static RsaPadding GetInteropPadding(RSAEncryptionPadding padding, RsaPaddingProcessor& rsaPaddingProcessor);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(RSAParameters parameters);
    protected virtual void Dispose(bool disposing);
    private void FreeKey();
    private static void ValidateParameters(RSAParameters& parameters);
    private static bool HasConsistentPrivateKey(RSAParameters& parameters);
    private static void CheckInvalidKey(SafeRsaHandle key);
    private static void CheckReturn(int returnValue);
    private static void CheckBoolReturn(int returnValue);
    private SafeRsaHandle GenerateKey();
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    protected virtual bool TryHashData(ReadOnlySpan`1<byte> data, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, Int32& bytesWritten);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten);
    private bool TrySignHash(ReadOnlySpan`1<byte> hash, Span`1<byte> destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, bool allocateSignature, Int32& bytesWritten, Byte[]& signature);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(ReadOnlySpan`1<byte> hash, ReadOnlySpan`1<byte> signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private static int GetAlgorithmNid(HashAlgorithmName hashAlgorithmName);
    private static Exception PaddingModeNotSupported();
    private static Exception HashAlgorithmNameNullOrEmpty();
}
internal class System.Security.Cryptography.RsaPaddingProcessor : object {
    private static Byte[] s_eightZeros;
    private static ConcurrentDictionary`2<HashAlgorithmName, RsaPaddingProcessor> s_lookup;
    private HashAlgorithmName _hashAlgorithmName;
    private int _hLen;
    internal int HashLength { get; }
    private RsaPaddingProcessor(HashAlgorithmName hashAlgorithmName, int hLen);
    private static RsaPaddingProcessor();
    internal static int BytesRequiredForBitCount(int keySizeInBits);
    internal int get_HashLength();
    internal static RsaPaddingProcessor OpenProcessor(HashAlgorithmName hashAlgorithmName);
    internal static void PadPkcs1Encryption(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    internal void PadOaep(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    internal bool DepadOaep(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    internal void EncodePss(ReadOnlySpan`1<byte> mHash, Span`1<byte> destination, int keySize);
    internal bool VerifyPss(ReadOnlySpan`1<byte> mHash, ReadOnlySpan`1<byte> em, int keySize);
    private void Mgf1(IncrementalHash hasher, ReadOnlySpan`1<byte> mgfSeed, Span`1<byte> mask);
    private static void FillNonZeroBytes(Span`1<byte> data);
    private static void Xor(Span`1<byte> a, ReadOnlySpan`1<byte> b);
}
public class System.Security.Cryptography.SafeEvpPKeyHandle : SafeHandle {
    internal static SafeEvpPKeyHandle InvalidHandle;
    public bool IsInvalid { get; }
    public SafeEvpPKeyHandle(IntPtr handle, bool ownsHandle);
    private static SafeEvpPKeyHandle();
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    public SafeEvpPKeyHandle DuplicateHandle();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Argument_InvalidOidValue { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Cryptography_ArgECDHKeySizeMismatch { get; }
    internal static string Cryptography_CSP_NoPrivateKey { get; }
    internal static string Cryptography_Encryption_MessageTooLong { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string Cryptography_CurveNotSupported { get; }
    internal static string Cryptography_Der_Invalid_Encoding { get; }
    internal static string Cryptography_InvalidDsaParameters_MissingFields { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedPGY { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedQX { get; }
    internal static string Cryptography_InvalidDsaParameters_MismatchedPJ { get; }
    internal static string Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey { get; }
    internal static string Cryptography_InvalidDsaParameters_QRestriction_ShortKey { get; }
    internal static string Cryptography_InvalidDsaParameters_QRestriction_LargeKey { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string Cryptography_OpenInvalidHandle { get; }
    internal static string Cryptography_TlsRequires64ByteSeed { get; }
    internal static string Cryptography_UnknownHashAlgorithm { get; }
    internal static string Cryptography_Invalid_IA5String { get; }
    internal static string Cryptography_KeyTooSmall { get; }
    internal static string Cryptography_OAEP_Decryption_Failed { get; }
    internal static string Cryptography_RSA_DecryptWrongSize { get; }
    internal static string Cryptography_SignHash_WrongSize { get; }
    internal static string PlatformNotSupported_CryptographyOpenSSL { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_Arg_CryptographyException();
    internal static string get_Argument_InvalidOidValue();
    internal static string get_Argument_InvalidValue();
    internal static string get_Cryptography_ArgECDHKeySizeMismatch();
    internal static string get_Cryptography_CSP_NoPrivateKey();
    internal static string get_Cryptography_Encryption_MessageTooLong();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_Cryptography_CurveNotSupported();
    internal static string get_Cryptography_Der_Invalid_Encoding();
    internal static string get_Cryptography_InvalidDsaParameters_MissingFields();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedPGY();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedQX();
    internal static string get_Cryptography_InvalidDsaParameters_MismatchedPJ();
    internal static string get_Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey();
    internal static string get_Cryptography_InvalidDsaParameters_QRestriction_ShortKey();
    internal static string get_Cryptography_InvalidDsaParameters_QRestriction_LargeKey();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_Cryptography_OpenInvalidHandle();
    internal static string get_Cryptography_TlsRequires64ByteSeed();
    internal static string get_Cryptography_UnknownHashAlgorithm();
    internal static string get_Cryptography_Invalid_IA5String();
    internal static string get_Cryptography_KeyTooSmall();
    internal static string get_Cryptography_OAEP_Decryption_Failed();
    internal static string get_Cryptography_RSA_DecryptWrongSize();
    internal static string get_Cryptography_SignHash_WrongSize();
    internal static string get_PlatformNotSupported_CryptographyOpenSSL();
}
