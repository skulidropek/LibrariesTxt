public interface PasswordGenerator.IPassword {
    public abstract virtual IPassword IncludeLowercase();
    public abstract virtual IPassword IncludeUppercase();
    public abstract virtual IPassword IncludeNumeric();
    public abstract virtual IPassword IncludeSpecial();
    public abstract virtual IPassword IncludeSpecial(string specialCharactersToInclude);
    public abstract virtual IPassword LengthRequired(int passwordLength);
    public abstract virtual string Next();
    public abstract virtual IEnumerable`1<string> NextGroup(int numberOfPasswordsToGenerate);
}
public interface PasswordGenerator.IPasswordSettings {
    public bool IncludeLowercase { get; }
    public bool IncludeUppercase { get; }
    public bool IncludeNumeric { get; }
    public bool IncludeSpecial { get; }
    public int PasswordLength { get; public set; }
    public string CharacterSet { get; }
    public int MaximumAttempts { get; }
    public int MinimumLength { get; }
    public int MaximumLength { get; }
    public string SpecialCharacters { get; public set; }
    public abstract virtual bool get_IncludeLowercase();
    public abstract virtual bool get_IncludeUppercase();
    public abstract virtual bool get_IncludeNumeric();
    public abstract virtual bool get_IncludeSpecial();
    public abstract virtual int get_PasswordLength();
    public abstract virtual void set_PasswordLength(int value);
    public abstract virtual string get_CharacterSet();
    public abstract virtual int get_MaximumAttempts();
    public abstract virtual int get_MinimumLength();
    public abstract virtual int get_MaximumLength();
    public abstract virtual IPasswordSettings AddLowercase();
    public abstract virtual IPasswordSettings AddUppercase();
    public abstract virtual IPasswordSettings AddNumeric();
    public abstract virtual IPasswordSettings AddSpecial();
    public abstract virtual IPasswordSettings AddSpecial(string specialCharactersToAdd);
    public abstract virtual string get_SpecialCharacters();
    public abstract virtual void set_SpecialCharacters(string value);
}
public class PasswordGenerator.Password : object {
    private static int DefaultPasswordLength;
    private static int DefaultMaxPasswordAttempts;
    private static bool DefaultIncludeLowercase;
    private static bool DefaultIncludeUppercase;
    private static bool DefaultIncludeNumeric;
    private static bool DefaultIncludeSpecial;
    private static RandomNumberGenerator _rng;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPasswordSettings <Settings>k__BackingField;
    public IPasswordSettings Settings { get; public set; }
    public Password(IPasswordSettings settings);
    public Password(int passwordLength);
    public Password(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial);
    public Password(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength);
    public Password(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength, int maximumAttempts);
    [CompilerGeneratedAttribute]
public IPasswordSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(IPasswordSettings value);
    public sealed virtual IPassword IncludeLowercase();
    public sealed virtual IPassword IncludeUppercase();
    public sealed virtual IPassword IncludeNumeric();
    public sealed virtual IPassword IncludeSpecial();
    public sealed virtual IPassword IncludeSpecial(string specialCharactersToInclude);
    public sealed virtual IPassword LengthRequired(int passwordLength);
    public sealed virtual string Next();
    public sealed virtual IEnumerable`1<string> NextGroup(int numberOfPasswordsToGenerate);
    private static string GenerateRandomPassword(IPasswordSettings settings);
    private static int GetRandomNumberInRange(int min, int max);
    private static int GetRngCryptoSeed(RNGCryptoServiceProvider rng);
    private static bool PasswordIsValid(IPasswordSettings settings, string password);
    private static bool LengthIsValid(int passwordLength, int minLength, int maxLength);
    private static IEnumerable`1<T> Shuffle(IEnumerable`1<T> items);
}
[ObsoleteAttribute("The class 'PasswordGenerator' is obsolete. Use 'Password' instead.")]
public class PasswordGenerator.PasswordGenerator : Password {
    public PasswordGenerator(PasswordGeneratorSettings settings);
    public PasswordGenerator(int passwordLength);
    public PasswordGenerator(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial);
    public PasswordGenerator(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength);
    public PasswordGenerator(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength, int maximumAttempts);
    public PasswordGenerator IncludeLowercase();
    public PasswordGenerator IncludeUppercase();
    public PasswordGenerator IncludeNumeric();
    public PasswordGenerator IncludeSpecial();
    public PasswordGenerator LengthRequired(int passwordLength);
}
public class PasswordGenerator.PasswordGeneratorSettings : PasswordSettings {
    public PasswordGeneratorSettings(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength, int maximumAttempts, bool usingDefaults);
}
public class PasswordGenerator.PasswordSettings : object {
    private static string LowercaseCharacters;
    private static string UppercaseCharacters;
    private static string NumericCharacters;
    private static string DefaultSpecialCharacters;
    private static int DefaultMinPasswordLength;
    private static int DefaultMaxPasswordLength;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SpecialCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UsingDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IncludeLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IncludeUppercase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IncludeNumeric>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IncludeSpecial>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PasswordLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaximumAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaximumLength>k__BackingField;
    public string SpecialCharacters { get; public set; }
    private bool UsingDefaults { get; private set; }
    public bool IncludeLowercase { get; private set; }
    public bool IncludeUppercase { get; private set; }
    public bool IncludeNumeric { get; private set; }
    public bool IncludeSpecial { get; private set; }
    public int PasswordLength { get; public set; }
    public string CharacterSet { get; private set; }
    public int MaximumAttempts { get; }
    public int MinimumLength { get; }
    public int MaximumLength { get; }
    public PasswordSettings(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial, int passwordLength, int maximumAttempts, bool usingDefaults);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SpecialCharacters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SpecialCharacters(string value);
    [CompilerGeneratedAttribute]
private bool get_UsingDefaults();
    [CompilerGeneratedAttribute]
private void set_UsingDefaults(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeLowercase();
    [CompilerGeneratedAttribute]
private void set_IncludeLowercase(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeUppercase();
    [CompilerGeneratedAttribute]
private void set_IncludeUppercase(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeNumeric();
    [CompilerGeneratedAttribute]
private void set_IncludeNumeric(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeSpecial();
    [CompilerGeneratedAttribute]
private void set_IncludeSpecial(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PasswordLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PasswordLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CharacterSet();
    [CompilerGeneratedAttribute]
private void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumAttempts();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MinimumLength();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumLength();
    public sealed virtual IPasswordSettings AddLowercase();
    public sealed virtual IPasswordSettings AddUppercase();
    public sealed virtual IPasswordSettings AddNumeric();
    public sealed virtual IPasswordSettings AddSpecial();
    public sealed virtual IPasswordSettings AddSpecial(string specialCharactersToAdd);
    private string BuildCharacterSet(bool includeLowercase, bool includeUppercase, bool includeNumeric, bool includeSpecial);
    private void StopUsingDefaults();
}
