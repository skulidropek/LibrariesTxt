[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExtensionAttribute]
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.ArraySegmentExtensions : object {
    [ExtensionAttribute]
public static ArraySegment`1<T> Take(ArraySegment`1<T> source, int count);
    [ExtensionAttribute]
public static ArraySegment`1<T> Skip(ArraySegment`1<T> source, int count);
    [ExtensionAttribute]
public static void Sort(ArraySegment`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static T GetAt(ArraySegment`1<T> source, int index);
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.Clustering : object {
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.Clustering/<NearestNeighbours>d__0`1")]
public static IEnumerable`1<IReadOnlyList`1<T>> NearestNeighbours(IReadOnlyList`1<T> elements, Func`3<PdfPoint, PdfPoint, double> distMeasure, Func`3<T, T, double> maxDistanceFunction, Func`2<T, PdfPoint> pivotPoint, Func`2<T, PdfPoint> candidatesPoint, Func`2<T, bool> filterPivot, Func`3<T, T, bool> filterFinal, int maxDegreeOfParallelism);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.Clustering/<NearestNeighbours>d__1`1")]
public static IEnumerable`1<IReadOnlyList`1<T>> NearestNeighbours(IReadOnlyList`1<T> elements, int k, Func`3<PdfPoint, PdfPoint, double> distMeasure, Func`3<T, T, double> maxDistanceFunction, Func`2<T, PdfPoint> pivotPoint, Func`2<T, PdfPoint> candidatesPoint, Func`2<T, bool> filterPivot, Func`3<T, T, bool> filterFinal, int maxDegreeOfParallelism);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.Clustering/<NearestNeighbours>d__2`1")]
public static IEnumerable`1<IReadOnlyList`1<T>> NearestNeighbours(IReadOnlyList`1<T> elements, Func`3<PdfLine, PdfLine, double> distMeasure, Func`3<T, T, double> maxDistanceFunction, Func`2<T, PdfLine> pivotLine, Func`2<T, PdfLine> candidatesLine, Func`2<T, bool> filterPivot, Func`3<T, T, bool> filterFinal, int maxDegreeOfParallelism);
    internal static List`1<HashSet`1<int>> GroupIndexes(Int32[] edges);
    internal static List`1<HashSet`1<int>> GroupIndexes(Int32[][] edges);
    private static HashSet`1<int> DfsIterative(int s, Int32[][] adj, Boolean[]& isDone);
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.DecorationTextBlockClassifier : object {
    private static Regex NumbersPattern;
    private static string replacementChar;
    private static DecorationTextBlockClassifier();
    public static IReadOnlyList`1<IReadOnlyList`1<TextBlock>> Get(IReadOnlyList`1<Page> pages, IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double similarityThreshold, int n, int maxDegreeOfParallelism);
    public static IReadOnlyList`1<IReadOnlyList`1<TextBlock>> Get(IReadOnlyList`1<Page> pages, IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, Func`3<string, string, double> minimumEditDistanceNormalised, double similarityThreshold, int n, int maxDegreeOfParallelism);
    public static IReadOnlyList`1<IReadOnlyList`1<TextBlock>> Get(IReadOnlyList`1<IReadOnlyList`1<TextBlock>> pagesTextBlocks, double similarityThreshold, int n, int maxDegreeOfParallelism);
    public static IReadOnlyList`1<IReadOnlyList`1<TextBlock>> Get(IReadOnlyList`1<IReadOnlyList`1<TextBlock>> pagesTextBlocks, Func`3<string, string, double> minimumEditDistanceNormalised, double similarityThreshold, int n, int maxDegreeOfParallelism);
    private static double ContentSimilarity(TextBlock b1, TextBlock b2, Func`3<string, string, double> minimumEditDistanceNormalised);
    private static double GeomSimilarity(TextBlock b1, TextBlock b2);
    private static double Similarity(TextBlock b1, TextBlock b2, Func`3<string, string, double> minimumEditDistanceNormalised);
    private static double ScoreI(TextBlock current, TextBlock previous, TextBlock next, Func`3<string, string, double> minimumEditDistanceNormalised);
    private static double Score(TextBlock current, IReadOnlyList`1<TextBlock> previous, IReadOnlyList`1<TextBlock> next, Func`3<string, string, double> minimumEditDistanceNormalised, double threshold, int n);
    private static int GetPreviousPageNumber(int currentPage, int pagesCount);
    private static int GetNextPageNumber(int currentPage, int pagesCount);
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.Distances : object {
    public static double Euclidean(PdfPoint point1, PdfPoint point2);
    public static double WeightedEuclidean(PdfPoint point1, PdfPoint point2, double wX, double wY);
    public static double Manhattan(PdfPoint point1, PdfPoint point2);
    public static double Angle(PdfPoint startPoint, PdfPoint endPoint);
    public static double Vertical(PdfPoint point1, PdfPoint point2);
    public static double Horizontal(PdfPoint point1, PdfPoint point2);
    public static double BoundAngle180(double angle);
    public static double BoundAngle0to360(double angle);
    public static int MinimumEditDistance(string string1, string string2);
    public static double MinimumEditDistanceNormalised(string string1, string string2);
    public static int FindIndexNearest(T element, IReadOnlyList`1<T> candidates, Func`2<T, PdfPoint> pivotPoint, Func`2<T, PdfPoint> candidatePoint, Func`3<PdfPoint, PdfPoint, double> distanceMeasure, Double& distance);
    public static int FindIndexNearest(T element, IReadOnlyList`1<T> candidates, Func`2<T, PdfLine> pivotLine, Func`2<T, PdfLine> candidateLine, Func`3<PdfLine, PdfLine, double> distanceMeasure, Double& distance);
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.DuplicateOverlappingTextProcessor : object {
    public static IReadOnlyList`1<Letter> Get(IEnumerable`1<Letter> letters);
}
public enum UglyToad.PdfPig.DocumentLayoutAnalysis.EdgeType : Enum {
    public int value__;
    public static EdgeType Left;
    public static EdgeType Mid;
    public static EdgeType Right;
}
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
[XmlRootAttribute("alto")]
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.Alto.AltoDocument : object {
    [CompilerGeneratedAttribute]
private AltoDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private AltoStyles <Styles>k__BackingField;
    [CompilerGeneratedAttribute]
private AltoTags <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private AltoLayout <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaVersion>k__BackingField;
    public AltoDescription Description { get; public set; }
    public AltoStyles Styles { get; public set; }
    public AltoTags Tags { get; public set; }
    public AltoLayout Layout { get; public set; }
    [XmlAttributeAttribute("SCHEMAVERSION")]
public string SchemaVersion { get; public set; }
    [CompilerGeneratedAttribute]
public AltoDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(AltoDescription value);
    [CompilerGeneratedAttribute]
public AltoStyles get_Styles();
    [CompilerGeneratedAttribute]
public void set_Styles(AltoStyles value);
    [CompilerGeneratedAttribute]
public AltoTags get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(AltoTags value);
    [CompilerGeneratedAttribute]
public AltoLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(AltoLayout value);
    [CompilerGeneratedAttribute]
public string get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(string value);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.AltoXmlTextExporter : object {
    private IPageSegmenter pageSegmenter;
    private IWordExtractor wordExtractor;
    private Func`2<string, string> invalidCharacterHandler;
    private double scale;
    private string indentChar;
    private int pageCount;
    private int pageSpaceCount;
    private int graphicalElementCount;
    private int illustrationCount;
    private int textBlockCount;
    private int textLineCount;
    private int stringCount;
    private int glyphCount;
    [CompilerGeneratedAttribute]
private InvalidCharStrategy <InvalidCharStrategy>k__BackingField;
    public InvalidCharStrategy InvalidCharStrategy { get; }
    public AltoXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, Func`2<string, string> invalidCharacterHandler);
    public AltoXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, InvalidCharStrategy invalidCharacterStrategy);
    private AltoXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, InvalidCharStrategy invalidCharacterStrategy, Func`2<string, string> invalidCharacterHandler);
    [CompilerGeneratedAttribute]
public InvalidCharStrategy get_InvalidCharStrategy();
    public string Get(PdfDocument document, bool includePaths);
    public sealed virtual string Get(Page page);
    public string Get(Page page, bool includePaths);
    private AltoDocument CreateAltoDocument(string fileName);
    private AltoPage ToAltoPage(Page page, bool includePaths);
    private AltoGraphicalElement ToAltoGraphicalElement(PdfPath pdfPath, double height);
    private AltoIllustration ToAltoIllustration(IPdfImage pdfImage, double height);
    private AltoTextBlock ToAltoTextBlock(TextBlock textBlock, double height);
    private AltoTextBlockTextLine ToAltoTextLine(TextLine textLine, double height);
    private AltoString ToAltoString(Word word, double height);
    private AltoGlyph ToAltoGlyph(Letter letter, double height);
    private AltoDescription GetAltoDescription(string fileName);
    private string Serialize(AltoDocument altoDocument);
    public static AltoDocument Deserialize(string xmlPath);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.HOcrTextExporter : object {
    private static string XmlHeader;
    private static string Hocrjs;
    private IPageSegmenter pageSegmenter;
    private IWordExtractor wordExtractor;
    private Func`2<string, string> invalidCharacterHandler;
    private double scale;
    private string indentChar;
    private int pageCount;
    private int areaCount;
    private int lineCount;
    private int wordCount;
    private int pathCount;
    private int paraCount;
    private int imageCount;
    [CompilerGeneratedAttribute]
private InvalidCharStrategy <InvalidCharStrategy>k__BackingField;
    public InvalidCharStrategy InvalidCharStrategy { get; }
    public HOcrTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, Func`2<string, string> invalidCharacterHandler);
    public HOcrTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, InvalidCharStrategy invalidCharacterStrategy);
    private HOcrTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, double scale, string indentChar, InvalidCharStrategy invalidCharacterStrategy, Func`2<string, string> invalidCharacterHandler);
    [CompilerGeneratedAttribute]
public InvalidCharStrategy get_InvalidCharStrategy();
    public string Get(PdfDocument document, bool includePaths, bool useHocrjs);
    public sealed virtual string Get(Page page);
    public string Get(Page page, bool includePaths, string imageName, bool useHocrjs);
    private string GetHead();
    private string AddHtmlHeader(string content);
    private string GetIndent(int level);
    private string GetCode(Page page, bool includePaths, string imageName);
    private string GetCode(PdfPath path, double pageHeight, bool subPaths, int level);
    private string GetCode(IPdfImage pdfImage, double pageHeight, int level);
    private string GetCodeArea(TextBlock block, double pageHeight, int level);
    private string GetCodeParagraph(TextBlock block, double pageHeight, int level);
    private string GetCode(TextLine line, double pageHeight, int level);
    private string GetCode(Word word, double pageHeight, int level);
    private int GetConfidence(Word word);
    private string GetCode(PdfRectangle rectangle, double pageHeight);
}
public enum UglyToad.PdfPig.DocumentLayoutAnalysis.Export.InvalidCharStrategy : Enum {
    public byte value__;
    public static InvalidCharStrategy Custom;
    public static InvalidCharStrategy DoNotCheck;
    public static InvalidCharStrategy Remove;
    public static InvalidCharStrategy ConvertToHexadecimal;
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.Export.ITextExporter {
    public abstract virtual string Get(Page page);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("xsd", "4.6.1055.0")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("PcGts")]
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.PAGE.PageXmlDocument : object {
    private PageXmlMetadata metadataField;
    private PageXmlPage pageField;
    private string pcGtsIdField;
    public PageXmlMetadata Metadata { get; public set; }
    public PageXmlPage Page { get; public set; }
    [XmlAttributeAttribute("pcGtsId")]
public string PcGtsId { get; public set; }
    public PageXmlMetadata get_Metadata();
    public void set_Metadata(PageXmlMetadata value);
    public PageXmlPage get_Page();
    public void set_Page(PageXmlPage value);
    public string get_PcGtsId();
    public void set_PcGtsId(string value);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.PageXmlTextExporter : object {
    private IPageSegmenter pageSegmenter;
    private IWordExtractor wordExtractor;
    private IReadingOrderDetector readingOrderDetector;
    private Func`2<string, string> invalidCharacterHandler;
    private double scale;
    private string indentChar;
    [CompilerGeneratedAttribute]
private InvalidCharStrategy <InvalidCharStrategy>k__BackingField;
    public InvalidCharStrategy InvalidCharStrategy { get; }
    public PageXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, IReadingOrderDetector readingOrderDetector, double scale, string indentChar, Func`2<string, string> invalidCharacterHandler);
    public PageXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, IReadingOrderDetector readingOrderDetector, double scale, string indent, InvalidCharStrategy invalidCharacterStrategy);
    private PageXmlTextExporter(IWordExtractor wordExtractor, IPageSegmenter pageSegmenter, IReadingOrderDetector readingOrderDetector, double scale, string indentChar, InvalidCharStrategy invalidCharacterStrategy, Func`2<string, string> invalidCharacterHandler);
    [CompilerGeneratedAttribute]
public InvalidCharStrategy get_InvalidCharStrategy();
    public string Get(PdfDocument document, bool includePaths);
    public sealed virtual string Get(Page page);
    public string Get(Page page, bool includePaths);
    public static string PointToString(PdfPoint point, double pageWidth, double pageHeight, double scaleToApply);
    private string ToPoints(IEnumerable`1<PdfPoint> points, double pageWidth, double pageHeight);
    private string ToPoints(PdfRectangle pdfRectangle, double pageWidth, double pageHeight);
    private PageXmlCoords ToCoords(PdfRectangle pdfRectangle, double pageWidth, double pageHeight);
    private string ToRgbEncoded(IColor color);
    private PageXmlPage ToPageXmlPage(Page page, PageXmlData data, bool includePaths);
    private PageXmlLineDrawingRegion ToPageXmlLineDrawingRegion(PdfPath pdfPath, PageXmlData data, double pageWidth, double pageHeight);
    private PageXmlImageRegion ToPageXmlImageRegion(IPdfImage pdfImage, PageXmlData data, double pageWidth, double pageHeight);
    private PageXmlTextRegion ToPageXmlTextRegion(TextBlock textBlock, PageXmlData data, double pageWidth, double pageHeight);
    private PageXmlTextLine ToPageXmlTextLine(TextLine textLine, PageXmlData data, double pageWidth, double pageHeight);
    private PageXmlWord ToPageXmlWord(Word word, PageXmlData data, double pageWidth, double pageHeight);
    private PageXmlGlyph ToPageXmlGlyph(Letter letter, PageXmlData data, double pageWidth, double pageHeight);
    private string Serialize(PageXmlDocument pageXmlDocument);
    public static PageXmlDocument Deserialize(string xmlPath);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.SvgTextExporter : object {
    private Func`2<string, string> invalidCharacterHandler;
    private static Dictionary`2<string, string> Fonts;
    [CompilerGeneratedAttribute]
private int <Rounding>k__BackingField;
    [CompilerGeneratedAttribute]
private InvalidCharStrategy <InvalidCharStrategy>k__BackingField;
    public int Rounding { get; }
    public InvalidCharStrategy InvalidCharStrategy { get; }
    public SvgTextExporter(Func`2<string, string> invalidCharacterHandler);
    public SvgTextExporter(InvalidCharStrategy invalidCharacterStrategy);
    private SvgTextExporter(InvalidCharStrategy invalidCharacterStrategy, Func`2<string, string> invalidCharacterHandler);
    private static SvgTextExporter();
    [CompilerGeneratedAttribute]
public int get_Rounding();
    [CompilerGeneratedAttribute]
public InvalidCharStrategy get_InvalidCharStrategy();
    public sealed virtual string Get(Page page);
    private string LetterToSvg(Letter l, double height, XmlDocument doc);
    private static string GetFontFamily(string fontName, String& style, String& weight);
    private string XmlEscape(Letter letter, XmlDocument doc);
    private static string ColorToSvg(IColor color);
    private static string PathToSvg(PdfPath p, double height);
}
internal static class UglyToad.PdfPig.DocumentLayoutAnalysis.Export.TextExporterHelper : object {
    public static Func`2<string, string> GetXmlInvalidCharHandler(InvalidCharStrategy invalidCharacterStrategy);
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.IDlaOptions {
    public int MaxDegreeOfParallelism { get; public set; }
    public abstract virtual int get_MaxDegreeOfParallelism();
    public abstract virtual void set_MaxDegreeOfParallelism(int value);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.KdTree : KdTree`1<PdfPoint> {
    public KdTree(IReadOnlyList`1<PdfPoint> points);
    public PdfPoint FindNearestNeighbour(PdfPoint pivot, Func`3<PdfPoint, PdfPoint, double> distanceMeasure, Int32& index, Double& distance);
    public IReadOnlyList`1<ValueTuple`3<PdfPoint, int, double>> FindNearestNeighbours(PdfPoint pivot, int k, Func`3<PdfPoint, PdfPoint, double> distanceMeasure);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.KdTree`1 : object {
    private KdTreeComparerY<T> kdTreeComparerY;
    private KdTreeComparerX<T> kdTreeComparerX;
    public KdTreeNode`1<T, T> Root;
    public int Count;
    public KdTree`1(IReadOnlyList`1<T> elements, Func`2<T, PdfPoint> elementsPointFunc);
    private KdTreeNode`1<T, T> BuildTree(ArraySegment`1<KdTreeElement`1<T, T>> P, int depth);
    public T FindNearestNeighbour(T pivot, Func`2<T, PdfPoint> pivotPointFunc, Func`3<PdfPoint, PdfPoint, double> distanceMeasure, Int32& index, Double& distance);
    private static ValueTuple`2<KdTreeNode`1<T, T>, Nullable`1<double>> FindNearestNeighbour(KdTreeNode`1<T, T> node, T pivot, Func`2<T, PdfPoint> pivotPointFunc, Func`3<PdfPoint, PdfPoint, double> distance);
    public IReadOnlyList`1<ValueTuple`3<T, int, double>> FindNearestNeighbours(T pivot, int k, Func`2<T, PdfPoint> pivotPointFunc, Func`3<PdfPoint, PdfPoint, double> distanceMeasure);
    private static ValueTuple`2<KdTreeNode`1<T, T>, double> FindNearestNeighbours(KdTreeNode`1<T, T> node, T pivot, int k, Func`2<T, PdfPoint> pivotPointFunc, Func`3<PdfPoint, PdfPoint, double> distance, KNearestNeighboursQueue<T> queue);
}
[ExtensionAttribute]
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.MathExtensions : object {
    [ExtensionAttribute]
public static float Mode(IEnumerable`1<float> array);
    [ExtensionAttribute]
public static double Mode(IEnumerable`1<double> array);
    [ExtensionAttribute]
public static bool AlmostEqualsToZero(double number, double epsilon);
    [ExtensionAttribute]
public static bool AlmostEquals(double number, double other, double epsilon);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.DefaultPageSegmenter : object {
    private DefaultPageSegmenterOptions options;
    [CompilerGeneratedAttribute]
private static DefaultPageSegmenter <Instance>k__BackingField;
    public static DefaultPageSegmenter Instance { get; }
    public DefaultPageSegmenter(DefaultPageSegmenterOptions options);
    private static DefaultPageSegmenter();
    [CompilerGeneratedAttribute]
public static DefaultPageSegmenter get_Instance();
    public sealed virtual IReadOnlyList`1<TextBlock> GetBlocks(IEnumerable`1<Word> words);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.DocstrumBoundingBoxes : object {
    private DocstrumBoundingBoxesOptions options;
    [CompilerGeneratedAttribute]
private static DocstrumBoundingBoxes <Instance>k__BackingField;
    public static DocstrumBoundingBoxes Instance { get; }
    public DocstrumBoundingBoxes(DocstrumBoundingBoxesOptions options);
    private static DocstrumBoundingBoxes();
    [CompilerGeneratedAttribute]
public static DocstrumBoundingBoxes get_Instance();
    public sealed virtual IReadOnlyList`1<TextBlock> GetBlocks(IEnumerable`1<Word> words);
    private IReadOnlyList`1<TextBlock> GetBlocks(IReadOnlyList`1<Word> words, AngleBounds wlBounds, double wlMultiplier, int wlBinSize, AngleBounds blBounds, double blMultiplier, int blBinSize, AngleBounds angularDifferenceBounds, double epsilon, string wordSeparator, string lineSeparator, int maxDegreeOfParallelism);
    public static bool GetSpacingEstimation(IReadOnlyList`1<Word> words, AngleBounds wlBounds, int wlBinSize, AngleBounds blBounds, int blBinSize, int maxDegreeOfParallelism, Double& withinLineDistance, Double& betweenLineDistance);
    private static Nullable`1<double> GetPeakAverageDistance(IEnumerable`1<double> distances, int binLength);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.DocstrumBoundingBoxes/<GetLines>d__10")]
public static IEnumerable`1<TextLine> GetLines(IReadOnlyList`1<Word> words, double maxWLDistance, AngleBounds wlBounds, string wordSeparator, int maxDegreeOfParallelism);
    private static double AngleWL(Word pivot, Word candidate);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.DocstrumBoundingBoxes/<GetStructuralBlocks>d__12")]
public static IEnumerable`1<TextBlock> GetStructuralBlocks(IReadOnlyList`1<TextLine> lines, double maxBLDistance, AngleBounds angularDifferenceBounds, double epsilon, string lineSeparator, int maxDegreeOfParallelism);
    private static double PerpendicularOverlappingDistance(PdfLine line1, PdfLine line2, AngleBounds angularDifferenceBounds, double epsilon);
    public static bool GetStructuralBlockingParameters(PdfLine i, PdfLine j, double epsilon, Double& angularDifference, Double& normalisedOverlap, Double& perpendicularDistance);
    private static Nullable`1<PdfPoint> GetTranslatedPoint(double xPi, double yPi, double xPj, double yPj, double dXi, double dYi, double dXj, double dYj, double epsilon);
    private static bool PointInLine(PdfPoint pl1, PdfPoint pl2, PdfPoint point);
    private static bool AlmostEquals(PdfLine line1, PdfLine line2, double epsilon);
    private static double AngleBL(Word pivot, Word candidate);
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.IPageSegmenter {
    public abstract virtual IReadOnlyList`1<TextBlock> GetBlocks(IEnumerable`1<Word> words);
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.IPageSegmenterOptions {
    public string WordSeparator { get; public set; }
    public string LineSeparator { get; public set; }
    public abstract virtual string get_WordSeparator();
    public abstract virtual void set_WordSeparator(string value);
    public abstract virtual string get_LineSeparator();
    public abstract virtual void set_LineSeparator(string value);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.RecursiveXYCut : object {
    private RecursiveXYCutOptions options;
    [CompilerGeneratedAttribute]
private static RecursiveXYCut <Instance>k__BackingField;
    public static RecursiveXYCut Instance { get; }
    public RecursiveXYCut(RecursiveXYCutOptions options);
    private static RecursiveXYCut();
    [CompilerGeneratedAttribute]
public static RecursiveXYCut get_Instance();
    public sealed virtual IReadOnlyList`1<TextBlock> GetBlocks(IEnumerable`1<Word> words);
    private IReadOnlyList`1<TextBlock> GetBlocks(IEnumerable`1<Word> words, double minimumWidth, Func`2<IEnumerable`1<Letter>, double> dominantFontWidthFunc, Func`2<IEnumerable`1<Letter>, double> dominantFontHeightFunc, string wordSeparator, string lineSeparator);
    private XYNode VerticalCut(XYLeaf leaf, double minimumWidth, Func`2<IEnumerable`1<Letter>, double> dominantFontWidthFunc, Func`2<IEnumerable`1<Letter>, double> dominantFontHeightFunc, int level);
    private XYNode HorizontalCut(XYLeaf leaf, double minimumWidth, Func`2<IEnumerable`1<Letter>, double> dominantFontWidthFunc, Func`2<IEnumerable`1<Letter>, double> dominantFontHeightFunc, int level);
}
internal class UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.XYLeaf : XYNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Word> <Words>k__BackingField;
    public bool IsLeaf { get; }
    public IReadOnlyList`1<Word> Words { get; }
    public XYLeaf(Word[] words);
    public XYLeaf(IEnumerable`1<Word> words);
    public virtual bool get_IsLeaf();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Word> get_Words();
    public virtual int CountWords();
    public virtual List`1<XYLeaf> GetLeaves();
    public IReadOnlyList`1<TextLine> GetLines(string wordSeparator);
}
internal class UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter.XYNode : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private XYNode[] <Children>k__BackingField;
    public bool IsLeaf { get; }
    public PdfRectangle BoundingBox { get; public set; }
    public XYNode[] Children { get; public set; }
    public XYNode(XYNode[] children);
    public XYNode(IEnumerable`1<XYNode> children);
    public virtual bool get_IsLeaf();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
public XYNode[] get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(XYNode[] value);
    public virtual int CountWords();
    public virtual List`1<XYLeaf> GetLeaves();
    private void RecursiveCount(IEnumerable`1<XYNode> children, Int32& count);
    private void RecursiveGetLeaves(IEnumerable`1<XYNode> children, List`1& leaves, int level);
    public virtual string ToString();
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.DefaultReadingOrderDetector : object {
    [CompilerGeneratedAttribute]
private static DefaultReadingOrderDetector <Instance>k__BackingField;
    public static DefaultReadingOrderDetector Instance { get; }
    private static DefaultReadingOrderDetector();
    [CompilerGeneratedAttribute]
public static DefaultReadingOrderDetector get_Instance();
    public sealed virtual IEnumerable`1<TextBlock> Get(IReadOnlyList`1<TextBlock> textBlocks);
}
public enum UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.IntervalRelations : Enum {
    public int value__;
    public static IntervalRelations Unknown;
    public static IntervalRelations Precedes;
    public static IntervalRelations Meets;
    public static IntervalRelations Overlaps;
    public static IntervalRelations Starts;
    public static IntervalRelations During;
    public static IntervalRelations Finishes;
    public static IntervalRelations PrecedesI;
    public static IntervalRelations MeetsI;
    public static IntervalRelations OverlapsI;
    public static IntervalRelations StartsI;
    public static IntervalRelations DuringI;
    public static IntervalRelations FinishesI;
    public static IntervalRelations Equals;
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.IntervalRelationsHelper : object {
    public static IntervalRelations GetRelationX(PdfRectangle a, PdfRectangle b, double T);
    public static IntervalRelations GetRelationY(PdfRectangle a, PdfRectangle b, double T);
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.IReadingOrderDetector {
    public abstract virtual IEnumerable`1<TextBlock> Get(IReadOnlyList`1<TextBlock> textBlocks);
}
[ExtensionAttribute]
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.ReadingOrderHelper : object {
    [ExtensionAttribute]
public static List`1<Word> OrderByReadingOrder(IEnumerable`1<Word> words);
    [ExtensionAttribute]
public static IReadOnlyList`1<TextLine> OrderByReadingOrder(IEnumerable`1<TextLine> lines);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.RenderingReadingOrderDetector : object {
    [CompilerGeneratedAttribute]
private static RenderingReadingOrderDetector <Instance>k__BackingField;
    public static RenderingReadingOrderDetector Instance { get; }
    private static RenderingReadingOrderDetector();
    [CompilerGeneratedAttribute]
public static RenderingReadingOrderDetector get_Instance();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.RenderingReadingOrderDetector/<Get>d__3")]
public sealed virtual IEnumerable`1<TextBlock> Get(IReadOnlyList`1<TextBlock> textBlocks);
    private double AvgTextSequence(TextBlock textBlock);
    [CompilerGeneratedAttribute]
private double <Get>b__3_0(TextBlock b);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.UnsupervisedReadingOrderDetector : object {
    [CompilerGeneratedAttribute]
private static UnsupervisedReadingOrderDetector <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRenderingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private SpatialReasoningRules <SpatialReasoningRule>k__BackingField;
    [CompilerGeneratedAttribute]
private double <T>k__BackingField;
    private Func`4<TextBlock, TextBlock, double, bool> getBeforeInMethod;
    public static UnsupervisedReadingOrderDetector Instance { get; }
    public bool UseRenderingOrder { get; }
    public SpatialReasoningRules SpatialReasoningRule { get; }
    public double T { get; }
    public UnsupervisedReadingOrderDetector(double T, SpatialReasoningRules spatialReasoningRule, bool useRenderingOrder);
    private static UnsupervisedReadingOrderDetector();
    [CompilerGeneratedAttribute]
public static UnsupervisedReadingOrderDetector get_Instance();
    [CompilerGeneratedAttribute]
public bool get_UseRenderingOrder();
    [CompilerGeneratedAttribute]
public SpatialReasoningRules get_SpatialReasoningRule();
    [CompilerGeneratedAttribute]
public double get_T();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector.UnsupervisedReadingOrderDetector/<Get>d__15")]
public sealed virtual IEnumerable`1<TextBlock> Get(IReadOnlyList`1<TextBlock> textBlocks);
    private Dictionary`2<int, List`1<int>> BuildGraph(IReadOnlyList`1<TextBlock> textBlocks, double T);
    private static bool GetBeforeInRendering(TextBlock a, TextBlock b);
    private static bool GetBeforeInReading(TextBlock a, TextBlock b, double T);
    private static bool GetBeforeInReadingVertical(TextBlock a, TextBlock b, double T);
    private static bool GetBeforeInReadingHorizontal(TextBlock a, TextBlock b, double T);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.TextBlock : object {
    public string Separator;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextOrientation <TextOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TextLine> <TextLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadingOrder>k__BackingField;
    public string Text { get; }
    public TextOrientation TextOrientation { get; }
    public PdfRectangle BoundingBox { get; }
    public IReadOnlyList`1<TextLine> TextLines { get; }
    public int ReadingOrder { get; private set; }
    public TextBlock(IReadOnlyList`1<TextLine> lines, string separator);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public TextOrientation get_TextOrientation();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TextLine> get_TextLines();
    [CompilerGeneratedAttribute]
public int get_ReadingOrder();
    [CompilerGeneratedAttribute]
private void set_ReadingOrder(int value);
    private PdfRectangle GetBoundingBoxH(IReadOnlyList`1<TextLine> lines);
    private PdfRectangle GetBoundingBox180(IReadOnlyList`1<TextLine> lines);
    private PdfRectangle GetBoundingBox90(IReadOnlyList`1<TextLine> lines);
    private PdfRectangle GetBoundingBox270(IReadOnlyList`1<TextLine> lines);
    private PdfRectangle GetBoundingBoxOther(IReadOnlyList`1<TextLine> lines);
    public void SetReadingOrder(int readingOrder);
    public virtual string ToString();
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.TextEdgesExtractor : object {
    private static Tuple`2[] edgesFuncs;
    private static TextEdgesExtractor();
    public static IReadOnlyDictionary`2<EdgeType, List`1<PdfLine>> GetEdges(IEnumerable`1<Word> pageWords, int minimumElements, int maxDegreeOfParallelism);
    private static List`1<PdfLine> GetVerticalEdges(IEnumerable`1<Word> pageWords, Func`2<PdfRectangle, double> func, int minimumElements);
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.TextExtractor.ContentOrderTextExtractor : object {
    private static HashSet`1<string> ReplaceableWhitespace;
    private static ContentOrderTextExtractor();
    public static string GetText(Page page, bool addDoubleNewline);
    public static string GetText(Page page, Options options);
    private static Letter GetNonWhitespacePrevious(Page page, int index);
    private static bool IsNewline(Letter previous, Letter letter, Page page, Boolean& isDoubleNewline);
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.TextLine : object {
    public string Separator;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextOrientation <TextOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Word> <Words>k__BackingField;
    public string Text { get; }
    public TextOrientation TextOrientation { get; }
    public PdfRectangle BoundingBox { get; }
    public IReadOnlyList`1<Word> Words { get; }
    public TextLine(IReadOnlyList`1<Word> words, string separator);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public TextOrientation get_TextOrientation();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Word> get_Words();
    private PdfRectangle GetBoundingBoxH(IReadOnlyList`1<Word> words);
    private PdfRectangle GetBoundingBox180(IReadOnlyList`1<Word> words);
    private PdfRectangle GetBoundingBox90(IReadOnlyList`1<Word> words);
    private PdfRectangle GetBoundingBox270(IReadOnlyList`1<Word> words);
    private static PdfRectangle GetBoundingBoxOther(IReadOnlyList`1<Word> words);
    public virtual string ToString();
}
public static class UglyToad.PdfPig.DocumentLayoutAnalysis.WhitespaceCoverExtractor : object {
    public static IReadOnlyList`1<PdfRectangle> GetWhitespaces(IEnumerable`1<Word> words, IEnumerable`1<IPdfImage> images, int maxRectangleCount, int maxBoundQueueSize);
    public static IReadOnlyList`1<PdfRectangle> GetWhitespaces(IEnumerable`1<Word> words, IEnumerable`1<IPdfImage> images, double minWidth, double minHeight, int maxRectangleCount, double whitespaceFuzziness, int maxBoundQueueSize);
    public static IReadOnlyList`1<PdfRectangle> GetWhitespaces(IEnumerable`1<PdfRectangle> boundingboxes, double minWidth, double minHeight, int maxRectangleCount, double whitespaceFuzziness, int maxBoundQueueSize);
    private static IReadOnlyList`1<PdfRectangle> GetMaximalRectangles(PdfRectangle bound, HashSet`1<PdfRectangle> obstacles, double minWidth, double minHeight, int maxRectangleCount, double whitespaceFuzziness, int maxBoundQueueSize);
    private static bool IsAdjacentTo(PdfRectangle rectangle1, PdfRectangle rectangle2);
    private static bool IsAdjacentToPageBounds(PdfRectangle pageBound, PdfRectangle rectangle);
    private static bool OverlapsHard(PdfRectangle rectangle1, PdfRectangle rectangle2);
    private static bool Inside(PdfRectangle rectangle1, PdfRectangle rectangle2);
    private static PdfRectangle GetBound(IEnumerable`1<PdfRectangle> obstacles);
}
public interface UglyToad.PdfPig.DocumentLayoutAnalysis.WordExtractor.IWordExtractorOptions {
}
public class UglyToad.PdfPig.DocumentLayoutAnalysis.WordExtractor.NearestNeighbourWordExtractor : object {
    private NearestNeighbourWordExtractorOptions options;
    [CompilerGeneratedAttribute]
private static NearestNeighbourWordExtractor <Instance>k__BackingField;
    public static NearestNeighbourWordExtractor Instance { get; }
    public NearestNeighbourWordExtractor(NearestNeighbourWordExtractorOptions options);
    private static NearestNeighbourWordExtractor();
    [CompilerGeneratedAttribute]
public static NearestNeighbourWordExtractor get_Instance();
    public sealed virtual IEnumerable`1<Word> GetWords(IReadOnlyList`1<Letter> letters);
    private List`1<Word> GetWords(IReadOnlyList`1<Letter> letters, Func`3<Letter, Letter, double> maxDistanceFunction, Func`3<PdfPoint, PdfPoint, double> distMeasure, Func`2<Letter, bool> filterPivotFunction, Func`3<Letter, Letter, bool> filterFunction, int maxDegreeOfParallelism);
}
