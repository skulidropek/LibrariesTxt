[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.IO.StreamExtensions : object {
    [ExtensionAttribute]
public static void Write(Stream stream, ReadOnlySpan`1<byte> buffer);
    [ExtensionAttribute]
public static int Read(Stream stream, Span`1<byte> buffer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.ScopedRefAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.Text.EncodingExtensions : object {
    [ExtensionAttribute]
public static string GetString(Encoding encoding, ReadOnlySpan`1<byte> bytes);
}
public class UglyToad.PdfPig.Core.ArrayPoolBufferWriter`1 : object {
    private static int DefaultBufferSize;
    private T[] buffer;
    private int position;
    public int WrittenCount { get; }
    public ReadOnlyMemory`1<T> WrittenMemory { get; }
    public ReadOnlySpan`1<T> WrittenSpan { get; }
    private int RemainingBytes { get; }
    public ArrayPoolBufferWriter`1(int size);
    public sealed virtual void Advance(int count);
    public void Write(T value);
    public void Write(ReadOnlySpan`1<T> values);
    public sealed virtual Memory`1<T> GetMemory(int sizeHint);
    public sealed virtual Span`1<T> GetSpan(int sizeHint);
    public int get_WrittenCount();
    public ReadOnlyMemory`1<T> get_WrittenMemory();
    public ReadOnlySpan`1<T> get_WrittenSpan();
    private void EnsureCapacity(int sizeHint);
    private int get_RemainingBytes();
    public void Reset(bool clearArray);
    public sealed virtual void Dispose();
}
public enum UglyToad.PdfPig.Core.FillingRule : Enum {
    public byte value__;
    public static FillingRule None;
    public static FillingRule EvenOdd;
    public static FillingRule NonZeroWinding;
}
public interface UglyToad.PdfPig.Core.IDeepCloneable`1 {
    public abstract virtual T DeepClone();
}
public interface UglyToad.PdfPig.Core.IInputBytes {
    public long CurrentOffset { get; }
    public byte CurrentByte { get; }
    public long Length { get; }
    public abstract virtual long get_CurrentOffset();
    public abstract virtual bool MoveNext();
    public abstract virtual byte get_CurrentByte();
    public abstract virtual long get_Length();
    public abstract virtual Nullable`1<byte> Peek();
    public abstract virtual bool IsAtEnd();
    public abstract virtual void Seek(long position);
    public abstract virtual int Read(Span`1<byte> buffer);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Core.IndirectReference : ValueType {
    [CompilerGeneratedAttribute]
private long <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    public long ObjectNumber { get; }
    public int Generation { get; }
    [DebuggerStepThroughAttribute]
public IndirectReference(long objectNumber, int generation);
    [CompilerGeneratedAttribute]
public long get_ObjectNumber();
    [CompilerGeneratedAttribute]
public int get_Generation();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface UglyToad.PdfPig.Core.IWriteable {
    public abstract virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Core.MemoryInputBytes : object {
    private int upperBound;
    private ReadOnlyMemory`1<byte> memory;
    private int currentOffset;
    [CompilerGeneratedAttribute]
private byte <CurrentByte>k__BackingField;
    public long CurrentOffset { get; }
    public byte CurrentByte { get; private set; }
    public long Length { get; }
    [DebuggerStepThroughAttribute]
public MemoryInputBytes(ReadOnlyMemory`1<byte> memory);
    public sealed virtual long get_CurrentOffset();
    public sealed virtual bool MoveNext();
    [CompilerGeneratedAttribute]
public sealed virtual byte get_CurrentByte();
    [CompilerGeneratedAttribute]
private void set_CurrentByte(byte value);
    public sealed virtual long get_Length();
    public sealed virtual Nullable`1<byte> Peek();
    public sealed virtual bool IsAtEnd();
    public sealed virtual void Seek(long position);
    public sealed virtual int Read(Span`1<byte> buffer);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class UglyToad.PdfPig.Core.OctalHelpers : object {
    [ExtensionAttribute]
public static short CharacterToShort(char c);
    public static int FromOctalDigits(ReadOnlySpan`1<short> octal);
    private static int QuickPower(int x, int pow);
}
public static class UglyToad.PdfPig.Core.OtherEncodings : object {
    public static Encoding Iso88591;
    private static OtherEncodings();
    public static Byte[] StringAsLatin1Bytes(string s);
    public static string BytesAsLatin1String(ReadOnlySpan`1<byte> bytes);
}
public static class UglyToad.PdfPig.Core.PdfDocEncoding : object {
    private static Dictionary`2<char, byte> UnicodeToCode;
    private static Dictionary`2<byte, char> CodeToUnicode;
    private static PdfDocEncoding();
    public static bool TryConvertBytesToString(ReadOnlySpan`1<byte> bytes, String& result);
    public static Byte[] StringToBytes(string s);
}
public class UglyToad.PdfPig.Core.PdfDocumentFormatException : Exception {
    public PdfDocumentFormatException(string message);
    public PdfDocumentFormatException(string message, Exception inner);
    protected PdfDocumentFormatException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Core.PdfLine : ValueType {
    [CompilerGeneratedAttribute]
private PdfPoint <Point1>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <Point2>k__BackingField;
    public double Length { get; }
    public PdfPoint Point1 { get; }
    public PdfPoint Point2 { get; }
    public PdfLine(double x1, double y1, double x2, double y2);
    public PdfLine(PdfPoint point1, PdfPoint point2);
    public double get_Length();
    [CompilerGeneratedAttribute]
public PdfPoint get_Point1();
    [CompilerGeneratedAttribute]
public PdfPoint get_Point2();
    public PdfRectangle GetBoundingRectangle();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Core.PdfPoint : ValueType {
    [CompilerGeneratedAttribute]
private static PdfPoint <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public static PdfPoint Origin { get; }
    public double X { get; }
    public double Y { get; }
    [DebuggerStepThroughAttribute]
public PdfPoint(int x, int y);
    [DebuggerStepThroughAttribute]
public PdfPoint(double x, double y);
    private static PdfPoint();
    [CompilerGeneratedAttribute]
public static PdfPoint get_Origin();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public PdfPoint MoveX(double dx);
    public PdfPoint MoveY(double dy);
    public PdfPoint Translate(double dx, double dy);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Core.PdfRange : ValueType {
    private IReadOnlyList`1<double> rangeArray;
    private int startingIndex;
    public double Min { get; }
    public double Max { get; }
    public PdfRange(IEnumerable`1<double> range);
    public PdfRange(IEnumerable`1<double> range, int index);
    public double get_Min();
    public double get_Max();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Core.PdfRectangle : ValueType {
    [CompilerGeneratedAttribute]
private PdfPoint <TopLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <TopRight>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <BottomRight>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <BottomLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public PdfPoint TopLeft { get; }
    public PdfPoint TopRight { get; }
    public PdfPoint BottomRight { get; }
    public PdfPoint BottomLeft { get; }
    public PdfPoint Centroid { get; }
    public double Width { get; }
    public double Height { get; }
    public double Rotation { get; }
    public double Area { get; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public PdfRectangle(PdfPoint bottomLeft, PdfPoint topRight);
    public PdfRectangle(short x1, short y1, short x2, short y2);
    public PdfRectangle(double x1, double y1, double x2, double y2);
    public PdfRectangle(PdfPoint topLeft, PdfPoint topRight, PdfPoint bottomLeft, PdfPoint bottomRight);
    [CompilerGeneratedAttribute]
public PdfPoint get_TopLeft();
    [CompilerGeneratedAttribute]
public PdfPoint get_TopRight();
    [CompilerGeneratedAttribute]
public PdfPoint get_BottomRight();
    [CompilerGeneratedAttribute]
public PdfPoint get_BottomLeft();
    public PdfPoint get_Centroid();
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
    public double get_Rotation();
    public double get_Area();
    public double get_Left();
    public double get_Top();
    public double get_Right();
    public double get_Bottom();
    public PdfRectangle Translate(double dx, double dy);
    private double GetT();
    public virtual string ToString();
}
public class UglyToad.PdfPig.Core.PdfSubpath : object {
    private List`1<IPathCommand> commands;
    [CompilerGeneratedAttribute]
private bool <IsDrawnAsRectangle>k__BackingField;
    private Nullable`1<PdfPoint> currentPosition;
    private double shoeLaceSum;
    public IReadOnlyList`1<IPathCommand> Commands { get; }
    public bool IsDrawnAsRectangle { get; internal set; }
    public bool IsClockwise { get; }
    public bool IsCounterClockwise { get; }
    public IReadOnlyList`1<IPathCommand> get_Commands();
    [CompilerGeneratedAttribute]
public bool get_IsDrawnAsRectangle();
    [CompilerGeneratedAttribute]
internal void set_IsDrawnAsRectangle(bool value);
    public bool get_IsClockwise();
    public bool get_IsCounterClockwise();
    public PdfPoint GetCentroid();
    internal static PdfPoint GetStartPoint(IPathCommand command);
    internal static PdfPoint GetEndPoint(IPathCommand command);
    internal PdfSubpath Simplify(int n);
    public void MoveTo(double x, double y);
    public void LineTo(double x, double y);
    public void Rectangle(double x, double y, double width, double height);
    public void BezierCurveTo(double x1, double y1, double x2, double y2, double x3, double y3);
    public void BezierCurveTo(double x1, double y1, double x2, double y2);
    public void CloseSubpath();
    public bool IsClosed();
    public Nullable`1<PdfRectangle> GetBoundingRectangle();
    public Nullable`1<PdfRectangle> GetDrawnRectangle();
    public static Nullable`1<PdfRectangle> GetBoundingRectangle(IReadOnlyList`1<PdfSubpath> path);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class UglyToad.PdfPig.Core.ReadHelper : object {
    public static byte AsciiLineFeed;
    public static byte AsciiCarriageReturn;
    private static HashSet`1<int> EndOfNameCharacters;
    private static ReadHelper();
    public static string ReadLine(IInputBytes bytes);
    public static void SkipSpaces(IInputBytes bytes);
    public static bool IsEndOfName(int ch);
    public static bool IsWhitespace(byte c);
    public static bool IsEndOfLine(char c);
    public static bool IsEndOfLine(byte b);
    public static bool IsLineFeed(Nullable`1<byte> c);
    public static bool IsCarriageReturn(byte c);
    public static bool IsString(IInputBytes bytes, string s);
    public static long ReadLong(IInputBytes bytes);
    public static bool IsDigit(int c);
    public static int ReadInt(IInputBytes bytes);
    public static bool IsSpace(int c);
    public static bool IsHex(byte b);
    public static bool IsHex(char ch);
    public static bool IsValidUtf8(Byte[] input);
    private static void ReadNumberAsUtf8Bytes(IInputBytes reader, Span`1<byte> buffer, Int32& bytesRead);
}
public class UglyToad.PdfPig.Core.StreamInputBytes : object {
    private Stream stream;
    private bool shouldDispose;
    private bool isAtEnd;
    [CompilerGeneratedAttribute]
private byte <CurrentByte>k__BackingField;
    public long CurrentOffset { get; }
    public byte CurrentByte { get; private set; }
    public long Length { get; }
    public StreamInputBytes(Stream stream, bool shouldDispose);
    public sealed virtual long get_CurrentOffset();
    [CompilerGeneratedAttribute]
public sealed virtual byte get_CurrentByte();
    [CompilerGeneratedAttribute]
private void set_CurrentByte(byte value);
    public sealed virtual long get_Length();
    public sealed virtual bool MoveNext();
    public sealed virtual Nullable`1<byte> Peek();
    public sealed virtual bool IsAtEnd();
    public sealed virtual void Seek(long position);
    public sealed virtual int Read(Span`1<byte> buffer);
    public sealed virtual void Dispose();
}
public enum UglyToad.PdfPig.Core.TextRenderingMode : Enum {
    public int value__;
    public static TextRenderingMode Fill;
    public static TextRenderingMode Stroke;
    public static TextRenderingMode FillThenStroke;
    public static TextRenderingMode Neither;
    public static TextRenderingMode FillClip;
    public static TextRenderingMode StrokeClip;
    public static TextRenderingMode FillThenStrokeClip;
    public static TextRenderingMode NeitherClip;
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class UglyToad.PdfPig.Core.TransformationMatrix : ValueType {
    public static TransformationMatrix Identity;
    private double row1;
    private double row2;
    private double row3;
    public double A;
    public double B;
    public double C;
    public double D;
    public double E;
    public double F;
    public static int Rows;
    public static int Columns;
    public double Item { get; }
    public TransformationMatrix(ReadOnlySpan`1<double> value);
    public TransformationMatrix(double a, double b, double r1, double c, double d, double r2, double e, double f, double r3);
    private static TransformationMatrix();
    public static TransformationMatrix GetTranslationMatrix(double x, double y);
    public static TransformationMatrix GetScaleMatrix(double scaleX, double scaleY);
    public static TransformationMatrix GetRotationMatrix(double degreesCounterclockwise);
    public double get_Item(int row, int col);
    public PdfPoint Transform(PdfPoint original);
    public ValueTuple`2<double, double> Transform(double x, double y);
    public double TransformX(double x);
    public PdfRectangle Transform(PdfRectangle original);
    public PdfSubpath Transform(PdfSubpath subpath);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Core.TransformationMatrix/<Transform>d__24")]
public IEnumerable`1<PdfSubpath> Transform(IEnumerable`1<PdfSubpath> path);
    public TransformationMatrix Translate(double x, double y);
    public static TransformationMatrix FromValues(double a, double b, double c, double d, double e, double f);
    public static TransformationMatrix FromValues(double a, double b, double c, double d);
    public static TransformationMatrix FromArray(ReadOnlySpan`1<double> values);
    public TransformationMatrix Multiply(TransformationMatrix& matrix);
    public TransformationMatrix Multiply(double scalar);
    public TransformationMatrix Inverse();
    internal double GetScalingFactorX();
    public virtual bool Equals(object obj);
    public static bool Equals(TransformationMatrix a, TransformationMatrix b);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TransformationMatrix left, TransformationMatrix right);
    public static bool op_Inequality(TransformationMatrix left, TransformationMatrix right);
}
public abstract class UglyToad.PdfPig.Core.Union`2 : object {
    public abstract virtual void Match(Action`1<A> first, Action`1<B> second);
    public abstract virtual TResult Match(Func`2<A, TResult> first, Func`2<B, TResult> second);
    public abstract virtual bool TryGetFirst(A& a);
    public abstract virtual bool TryGetSecond(B& b);
    public static Case1<A, B> One(A item);
    public static Case2<A, B> Two(B item);
}
[ExtensionAttribute]
public static class UglyToad.PdfPig.Core.WritingExtensions : object {
    [ExtensionAttribute]
public static void WriteUInt(Stream stream, long value);
    [ExtensionAttribute]
public static void WriteUInt(Stream stream, UInt32 value);
    [ExtensionAttribute]
public static void WriteUShort(Stream stream, int value);
    [ExtensionAttribute]
public static void WriteUShort(Stream stream, ushort value);
    [ExtensionAttribute]
public static void WriteShort(Stream stream, ushort value);
    [ExtensionAttribute]
public static void WriteShort(Stream stream, short value);
}
