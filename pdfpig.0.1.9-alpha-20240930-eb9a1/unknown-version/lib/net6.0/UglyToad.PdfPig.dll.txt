[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.AcroForm : object {
    private IReadOnlyDictionary`2<IndirectReference, AcroFieldBase> fieldsWithReferences;
    [CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private SignatureFlags <SignatureFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedAppearances>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AcroFieldBase> <Fields>k__BackingField;
    public DictionaryToken Dictionary { get; }
    public SignatureFlags SignatureFlags { get; }
    public bool NeedAppearances { get; }
    public IReadOnlyList`1<AcroFieldBase> Fields { get; }
    internal AcroForm(DictionaryToken dictionary, SignatureFlags signatureFlags, bool needAppearances, IReadOnlyDictionary`2<IndirectReference, AcroFieldBase> fieldsWithReferences);
    [CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    [CompilerGeneratedAttribute]
public SignatureFlags get_SignatureFlags();
    [CompilerGeneratedAttribute]
public bool get_NeedAppearances();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AcroFieldBase> get_Fields();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.AcroForms.AcroForm/<GetFieldsForPage>d__14")]
public IEnumerable`1<AcroFieldBase> GetFieldsForPage(int pageNumber);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.AcroForms.AcroFormExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<AcroFieldBase> GetFields(AcroForm form);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.AcroForms.AcroFormExtensions/<GetFields>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<AcroFieldBase> GetFields(AcroFieldBase fieldBase);
    [ExtensionAttribute]
public static KeyValuePair`2<string, string> GetFieldValue(AcroFieldBase fieldBase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.AcroForms.AcroFormFactory : object {
    private static HashSet`1<NameToken> InheritableFields;
    private IPdfTokenScanner tokenScanner;
    private ILookupFilterProvider filterProvider;
    private CrossReferenceTable crossReferenceTable;
    public AcroFormFactory(IPdfTokenScanner tokenScanner, ILookupFilterProvider filterProvider, CrossReferenceTable crossReferenceTable);
    private static AcroFormFactory();
    public AcroForm GetAcroForm(Catalog catalog);
    private AcroFieldBase GetAcroField(DictionaryToken fieldDictionary, Catalog catalog, IReadOnlyList`1<DictionaryToken> parentDictionaries);
    private AcroFieldBase GetTextField(DictionaryToken fieldDictionary, NameToken fieldType, UInt32 fieldFlags, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    private AcroFieldBase GetChoiceField(DictionaryToken fieldDictionary, NameToken fieldType, UInt32 fieldFlags, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    private ValueTuple`2<bool, NameToken> GetCheckedState(DictionaryToken fieldDictionary, bool inheritsValue);
    private static ValueTuple`2<DictionaryToken, bool> CreateInheritedDictionary(DictionaryToken fieldDictionary, IReadOnlyList`1<DictionaryToken> parents);
    private static bool IsChoiceSelected(IReadOnlyList`1<string> selectedOptionNames, IReadOnlyList`1<int> selectedOptionIndices, int index, string name);
}
[FlagsAttribute]
public enum UglyToad.PdfPig.AcroForms.Fields.AcroButtonFieldFlags : Enum {
    public UInt32 value__;
    public static AcroButtonFieldFlags ReadOnly;
    public static AcroButtonFieldFlags Required;
    public static AcroButtonFieldFlags NoExport;
    public static AcroButtonFieldFlags NoToggleToOff;
    public static AcroButtonFieldFlags Radio;
    public static AcroButtonFieldFlags PushButton;
    public static AcroButtonFieldFlags RadiosInUnison;
}
public class UglyToad.PdfPig.AcroForms.Fields.AcroCheckboxesField : AcroNonTerminalField {
    [NullableContextAttribute("1")]
internal AcroCheckboxesField(DictionaryToken dictionary, string fieldType, AcroButtonFieldFlags fieldFlags, AcroFieldCommonInformation information, IReadOnlyList`1<AcroFieldBase> children);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroCheckboxField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroButtonFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <CurrentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    public AcroButtonFieldFlags Flags { get; }
    public NameToken CurrentValue { get; }
    public bool IsChecked { get; }
    public AcroCheckboxField(DictionaryToken dictionary, string fieldType, AcroButtonFieldFlags fieldFlags, AcroFieldCommonInformation information, NameToken currentValue, bool isChecked, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public AcroButtonFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public NameToken get_CurrentValue();
    [CompilerGeneratedAttribute]
public bool get_IsChecked();
}
[FlagsAttribute]
public enum UglyToad.PdfPig.AcroForms.Fields.AcroChoiceFieldFlags : Enum {
    public UInt32 value__;
    public static AcroChoiceFieldFlags ReadOnly;
    public static AcroChoiceFieldFlags Required;
    public static AcroChoiceFieldFlags NoExport;
    public static AcroChoiceFieldFlags Combo;
    public static AcroChoiceFieldFlags Edit;
    public static AcroChoiceFieldFlags Sort;
    public static AcroChoiceFieldFlags MultiSelect;
    public static AcroChoiceFieldFlags DoNotSpellCheck;
    public static AcroChoiceFieldFlags CommitOnSelectionChange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroChoiceOption : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExportValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExportValue>k__BackingField;
    public int Index { get; }
    public bool IsSelected { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string ExportValue { get; }
    public bool HasExportValue { get; }
    public AcroChoiceOption(int index, bool isSelected, string name, string exportValue);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExportValue();
    [CompilerGeneratedAttribute]
public bool get_HasExportValue();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroComboBoxField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroChoiceFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AcroChoiceOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SelectedOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <SelectedOptionIndices>k__BackingField;
    public AcroChoiceFieldFlags Flags { get; }
    public IReadOnlyList`1<AcroChoiceOption> Options { get; }
    public IReadOnlyList`1<string> SelectedOptions { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<int> SelectedOptionIndices { get; }
    public AcroComboBoxField(DictionaryToken dictionary, string fieldType, AcroChoiceFieldFlags fieldFlags, AcroFieldCommonInformation information, IReadOnlyList`1<AcroChoiceOption> options, IReadOnlyList`1<string> selectedOptions, IReadOnlyList`1<int> selectedOptionIndices, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public AcroChoiceFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AcroChoiceOption> get_Options();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SelectedOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_SelectedOptionIndices();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.AcroForms.Fields.AcroFieldBase : object {
    [CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawFieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private AcroFieldType <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FieldFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private AcroFieldCommonInformation <Information>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfRectangle> <Bounds>k__BackingField;
    public DictionaryToken Dictionary { get; }
    public string RawFieldType { get; }
    public AcroFieldType FieldType { get; }
    public UInt32 FieldFlags { get; }
    public AcroFieldCommonInformation Information { get; }
    public Nullable`1<int> PageNumber { get; }
    public Nullable`1<PdfRectangle> Bounds { get; }
    protected AcroFieldBase(DictionaryToken dictionary, string rawFieldType, UInt32 fieldFlags, AcroFieldType fieldType, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    [CompilerGeneratedAttribute]
public string get_RawFieldType();
    [CompilerGeneratedAttribute]
public AcroFieldType get_FieldType();
    [CompilerGeneratedAttribute]
public UInt32 get_FieldFlags();
    [CompilerGeneratedAttribute]
public AcroFieldCommonInformation get_Information();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<PdfRectangle> get_Bounds();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroFieldCommonInformation : object {
    [CompilerGeneratedAttribute]
private Nullable`1<IndirectReference> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartialName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappingName>k__BackingField;
    public Nullable`1<IndirectReference> Parent { get; public set; }
    public string PartialName { get; }
    public string AlternateName { get; }
    public string MappingName { get; }
    public AcroFieldCommonInformation(Nullable`1<IndirectReference> parent, string partialName, string alternateName, string mappingName);
    [CompilerGeneratedAttribute]
public Nullable`1<IndirectReference> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Nullable`1<IndirectReference> value);
    [CompilerGeneratedAttribute]
public string get_PartialName();
    [CompilerGeneratedAttribute]
public string get_AlternateName();
    [CompilerGeneratedAttribute]
public string get_MappingName();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <ToString>g__AppendIfNotNull|14_0(string val, string label, string result);
}
public enum UglyToad.PdfPig.AcroForms.Fields.AcroFieldType : Enum {
    public int value__;
    public static AcroFieldType PushButton;
    public static AcroFieldType Checkboxes;
    public static AcroFieldType Checkbox;
    public static AcroFieldType RadioButtons;
    public static AcroFieldType RadioButton;
    public static AcroFieldType Text;
    public static AcroFieldType ComboBox;
    public static AcroFieldType ListBox;
    public static AcroFieldType Signature;
    public static AcroFieldType Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroListBoxField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroChoiceFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AcroChoiceOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SelectedOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <SelectedOptionIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TopIndex>k__BackingField;
    public AcroChoiceFieldFlags Flags { get; }
    public IReadOnlyList`1<AcroChoiceOption> Options { get; }
    public IReadOnlyList`1<string> SelectedOptions { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<int> SelectedOptionIndices { get; }
    public int TopIndex { get; }
    public bool SupportsMultiSelect { get; }
    public AcroListBoxField(DictionaryToken dictionary, string fieldType, AcroChoiceFieldFlags fieldFlags, AcroFieldCommonInformation information, IReadOnlyList`1<AcroChoiceOption> options, IReadOnlyList`1<string> selectedOptions, IReadOnlyList`1<int> selectedOptionIndices, Nullable`1<int> topIndex, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public AcroChoiceFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AcroChoiceOption> get_Options();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SelectedOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_SelectedOptionIndices();
    [CompilerGeneratedAttribute]
public int get_TopIndex();
    public bool get_SupportsMultiSelect();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroNonTerminalField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AcroFieldBase> <Children>k__BackingField;
    public IReadOnlyList`1<AcroFieldBase> Children { get; }
    internal AcroNonTerminalField(DictionaryToken dictionary, string fieldType, UInt32 fieldFlags, AcroFieldCommonInformation information, AcroFieldType acroFieldType, IReadOnlyList`1<AcroFieldBase> children);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AcroFieldBase> get_Children();
}
public class UglyToad.PdfPig.AcroForms.Fields.AcroPushButtonField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroButtonFieldFlags <Flags>k__BackingField;
    public AcroButtonFieldFlags Flags { get; }
    [NullableContextAttribute("1")]
public AcroPushButtonField(DictionaryToken dictionary, string fieldType, AcroButtonFieldFlags fieldFlags, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public AcroButtonFieldFlags get_Flags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroRadioButtonField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroButtonFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <CurrentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    public AcroButtonFieldFlags Flags { get; }
    public NameToken CurrentValue { get; }
    public bool IsSelected { get; }
    public AcroRadioButtonField(DictionaryToken dictionary, string fieldType, AcroButtonFieldFlags fieldFlags, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds, NameToken currentValue, bool isSelected);
    [CompilerGeneratedAttribute]
public AcroButtonFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public NameToken get_CurrentValue();
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
}
public class UglyToad.PdfPig.AcroForms.Fields.AcroRadioButtonsField : AcroNonTerminalField {
    [CompilerGeneratedAttribute]
private AcroButtonFieldFlags <Flags>k__BackingField;
    public AcroButtonFieldFlags Flags { get; }
    [NullableContextAttribute("1")]
public AcroRadioButtonsField(DictionaryToken dictionary, string fieldType, AcroButtonFieldFlags fieldFlags, AcroFieldCommonInformation information, IReadOnlyList`1<AcroFieldBase> children);
    [CompilerGeneratedAttribute]
public AcroButtonFieldFlags get_Flags();
}
public class UglyToad.PdfPig.AcroForms.Fields.AcroSignatureField : AcroFieldBase {
    [NullableContextAttribute("1")]
public AcroSignatureField(DictionaryToken dictionary, string fieldType, UInt32 fieldFlags, AcroFieldCommonInformation information, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AcroForms.Fields.AcroTextField : AcroFieldBase {
    [CompilerGeneratedAttribute]
private AcroTextFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRichText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiline>k__BackingField;
    public AcroTextFieldFlags Flags { get; }
    public string Value { get; }
    public Nullable`1<int> MaxLength { get; }
    public bool IsRichText { get; }
    public bool IsMultiline { get; }
    [NullableContextAttribute("1")]
public AcroTextField(DictionaryToken dictionary, string fieldType, AcroTextFieldFlags fieldFlags, AcroFieldCommonInformation information, string value, Nullable`1<int> maxLength, Nullable`1<int> pageNumber, Nullable`1<PdfRectangle> bounds);
    [CompilerGeneratedAttribute]
public AcroTextFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public bool get_IsRichText();
    [CompilerGeneratedAttribute]
public bool get_IsMultiline();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[FlagsAttribute]
public enum UglyToad.PdfPig.AcroForms.Fields.AcroTextFieldFlags : Enum {
    public UInt32 value__;
    public static AcroTextFieldFlags ReadOnly;
    public static AcroTextFieldFlags Required;
    public static AcroTextFieldFlags NoExport;
    public static AcroTextFieldFlags Multiline;
    public static AcroTextFieldFlags Password;
    public static AcroTextFieldFlags FileSelect;
    public static AcroTextFieldFlags DoNotSpellCheck;
    public static AcroTextFieldFlags DoNotScroll;
    public static AcroTextFieldFlags Comb;
    public static AcroTextFieldFlags RichText;
}
[FlagsAttribute]
public enum UglyToad.PdfPig.AcroForms.SignatureFlags : Enum {
    public int value__;
    public static SignatureFlags SignaturesExist;
    public static SignatureFlags AppendOnly;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Actions.AbstractGoToAction : PdfAction {
    [CompilerGeneratedAttribute]
private ExplicitDestination <Destination>k__BackingField;
    public ExplicitDestination Destination { get; }
    protected AbstractGoToAction(ActionType type, ExplicitDestination destination);
    [CompilerGeneratedAttribute]
public ExplicitDestination get_Destination();
}
internal static class UglyToad.PdfPig.Actions.ActionProvider : object {
    [NullableContextAttribute("1")]
internal static bool TryGetAction(DictionaryToken dictionary, NamedDestinations namedDestinations, IPdfTokenScanner pdfScanner, ILog log, PdfAction& result);
}
public enum UglyToad.PdfPig.Actions.ActionType : Enum {
    public int value__;
    public static ActionType GoTo;
    public static ActionType GoToR;
    public static ActionType GoToE;
    public static ActionType Launch;
    public static ActionType Thread;
    public static ActionType URI;
    public static ActionType Sound;
    public static ActionType Movie;
    public static ActionType Hide;
    public static ActionType Named;
    public static ActionType SubmitForm;
    public static ActionType ResetForm;
    public static ActionType ImportData;
    public static ActionType JavaScript;
    public static ActionType SetOCGState;
    public static ActionType Rendition;
    public static ActionType Trans;
    public static ActionType GoTo3DView;
}
public class UglyToad.PdfPig.Actions.GoToAction : AbstractGoToAction {
    [NullableContextAttribute("1")]
public GoToAction(ExplicitDestination destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Actions.GoToEAction : AbstractGoToAction {
    [CompilerGeneratedAttribute]
private string <FileSpecification>k__BackingField;
    public string FileSpecification { get; }
    public GoToEAction(ExplicitDestination destination, string fileSpecification);
    [CompilerGeneratedAttribute]
public string get_FileSpecification();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Actions.GoToRAction : AbstractGoToAction {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    public string Filename { get; }
    public GoToRAction(ExplicitDestination destination, string filename);
    [CompilerGeneratedAttribute]
public string get_Filename();
}
public class UglyToad.PdfPig.Actions.PdfAction : object {
    [CompilerGeneratedAttribute]
private ActionType <Type>k__BackingField;
    public ActionType Type { get; }
    protected PdfAction(ActionType type);
    [CompilerGeneratedAttribute]
public ActionType get_Type();
}
public class UglyToad.PdfPig.Actions.UriAction : PdfAction {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; }
    public UriAction(string uri);
    [CompilerGeneratedAttribute]
public string get_Uri();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.AdvancedPdfDocumentAccess : object {
    private IPdfTokenScanner pdfScanner;
    private ILookupFilterProvider filterProvider;
    private Catalog catalog;
    private bool isDisposed;
    internal AdvancedPdfDocumentAccess(IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, Catalog catalog);
    public bool TryGetEmbeddedFiles(IReadOnlyList`1& embeddedFiles);
    public void ReplaceIndirectObject(IndirectReference reference, Func`2<IToken, IToken> replacer);
    public void ReplaceIndirectObject(IndirectReference reference, IToken replacement);
    private void GuardDisposed();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Annotations.Annotation : object {
    internal AppearanceStream normalAppearanceStream;
    internal AppearanceStream rollOverAppearanceStream;
    internal AppearanceStream downAppearanceStream;
    internal string appearanceState;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DictionaryToken <AnnotationDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <Rectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationFlags <Flags>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private AnnotationBorder <Border>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<QuadPointsQuadrilateral> <QuadPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Annotation <InReplyTo>k__BackingField;
    [NullableAttribute("1")]
public DictionaryToken AnnotationDictionary { get; }
    public AnnotationType Type { get; }
    public PdfRectangle Rectangle { get; }
    public string Content { get; }
    public string Name { get; }
    public string ModifiedDate { get; }
    public AnnotationFlags Flags { get; }
    [NullableAttribute("1")]
public AnnotationBorder Border { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<QuadPointsQuadrilateral> QuadPoints { get; }
    public PdfAction Action { get; }
    public bool HasNormalAppearance { get; }
    public bool HasRollOverAppearance { get; }
    public bool HasDownAppearance { get; }
    public Annotation InReplyTo { get; }
    public Annotation(DictionaryToken annotationDictionary, AnnotationType type, PdfRectangle rectangle, string content, string name, string modifiedDate, AnnotationFlags flags, AnnotationBorder border, IReadOnlyList`1<QuadPointsQuadrilateral> quadPoints, PdfAction action, AppearanceStream normalAppearanceStream, AppearanceStream rollOverAppearanceStream, AppearanceStream downAppearanceStream, string appearanceState, Annotation inReplyTo);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DictionaryToken get_AnnotationDictionary();
    [CompilerGeneratedAttribute]
public AnnotationType get_Type();
    [CompilerGeneratedAttribute]
public PdfRectangle get_Rectangle();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ModifiedDate();
    [CompilerGeneratedAttribute]
public AnnotationFlags get_Flags();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public AnnotationBorder get_Border();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<QuadPointsQuadrilateral> get_QuadPoints();
    [CompilerGeneratedAttribute]
public PdfAction get_Action();
    public bool get_HasNormalAppearance();
    public bool get_HasRollOverAppearance();
    public bool get_HasDownAppearance();
    [CompilerGeneratedAttribute]
public Annotation get_InReplyTo();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Annotations.AnnotationBorder : object {
    [CompilerGeneratedAttribute]
private static AnnotationBorder <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalCornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalCornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BorderWidth>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <LineDashPattern>k__BackingField;
    public static AnnotationBorder Default { get; }
    public double HorizontalCornerRadius { get; }
    public double VerticalCornerRadius { get; }
    public double BorderWidth { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<double> LineDashPattern { get; }
    [NullableContextAttribute("2")]
public AnnotationBorder(double horizontalCornerRadius, double verticalCornerRadius, double borderWidth, IReadOnlyList`1<double> lineDashPattern);
    private static AnnotationBorder();
    [CompilerGeneratedAttribute]
public static AnnotationBorder get_Default();
    [CompilerGeneratedAttribute]
public double get_HorizontalCornerRadius();
    [CompilerGeneratedAttribute]
public double get_VerticalCornerRadius();
    [CompilerGeneratedAttribute]
public double get_BorderWidth();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_LineDashPattern();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Annotations.AnnotationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AnnotationType ToAnnotationType(NameToken name);
}
[FlagsAttribute]
public enum UglyToad.PdfPig.Annotations.AnnotationFlags : Enum {
    public int value__;
    public static AnnotationFlags Invisible;
    public static AnnotationFlags Hidden;
    public static AnnotationFlags Print;
    public static AnnotationFlags NoZoom;
    public static AnnotationFlags NoRotate;
    public static AnnotationFlags NoView;
    public static AnnotationFlags ReadOnly;
    public static AnnotationFlags Locked;
    public static AnnotationFlags ToggleNoView;
    public static AnnotationFlags LockedContents;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Annotations.AnnotationProvider : object {
    private IPdfTokenScanner tokenScanner;
    private DictionaryToken pageDictionary;
    private NamedDestinations namedDestinations;
    private ILog log;
    private TransformationMatrix matrix;
    public AnnotationProvider(IPdfTokenScanner tokenScanner, DictionaryToken pageDictionary, TransformationMatrix matrix, NamedDestinations namedDestinations, ILog log);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Annotations.AnnotationProvider/<GetAnnotations>d__6")]
public IEnumerable`1<Annotation> GetAnnotations();
    internal PdfAction GetAction(DictionaryToken annotationDictionary);
    private string GetNamedString(NameToken name, DictionaryToken dictionary);
}
public enum UglyToad.PdfPig.Annotations.AnnotationType : Enum {
    public int value__;
    public static AnnotationType Text;
    public static AnnotationType Link;
    public static AnnotationType FreeText;
    public static AnnotationType Line;
    public static AnnotationType Square;
    public static AnnotationType Circle;
    public static AnnotationType Polygon;
    public static AnnotationType PolyLine;
    public static AnnotationType Highlight;
    public static AnnotationType Underline;
    public static AnnotationType Squiggly;
    public static AnnotationType StrikeOut;
    public static AnnotationType Stamp;
    public static AnnotationType Caret;
    public static AnnotationType Ink;
    public static AnnotationType Popup;
    public static AnnotationType FileAttachment;
    public static AnnotationType Sound;
    public static AnnotationType Movie;
    public static AnnotationType Widget;
    public static AnnotationType Screen;
    public static AnnotationType PrinterMark;
    public static AnnotationType TrapNet;
    public static AnnotationType Watermark;
    public static AnnotationType Artwork3D;
    public static AnnotationType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Annotations.AppearanceStream : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, StreamToken> appearanceStreamsByState;
    [NullableAttribute("2")]
private StreamToken statelessAppearanceStream;
    public bool IsStateless { get; }
    public ICollection`1<string> GetStates { get; }
    [NullableContextAttribute("2")]
internal AppearanceStream(StreamToken streamToken);
    internal AppearanceStream(IDictionary`2<string, StreamToken> appearanceStreamsByState);
    public bool get_IsStateless();
    public ICollection`1<string> get_GetStates();
    public StreamToken Get(string state);
}
internal static class UglyToad.PdfPig.Annotations.AppearanceStreamFactory : object {
    [NullableContextAttribute("1")]
public static bool TryCreate(DictionaryToken appearanceDictionary, NameToken name, IPdfTokenScanner tokenScanner, AppearanceStream& appearanceStream);
}
internal static class UglyToad.PdfPig.Annotations.HyperlinkFactory : object {
    [NullableContextAttribute("1")]
public static IReadOnlyList`1<Hyperlink> GetHyperlinks(Page page, IPdfTokenScanner pdfScanner, AnnotationProvider annotationProvider);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Annotations.QuadPointsQuadrilateral : ValueType {
    [NullableAttribute("1")]
private PdfPoint[] points;
    public ReadOnlySpan`1<PdfPoint> Points { get; }
    [NullableContextAttribute("1")]
public QuadPointsQuadrilateral(PdfPoint[] points);
    public ReadOnlySpan`1<PdfPoint> get_Points();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.ArtifactMarkedContentElement : MarkedContentElement {
    [CompilerGeneratedAttribute]
private ArtifactType <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SubType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AttributeOwners>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfRectangle> <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NameToken> <Attached>k__BackingField;
    public ArtifactType Type { get; }
    [NullableAttribute("2")]
public string SubType { get; }
    [NullableAttribute("2")]
public string AttributeOwners { get; }
    public Nullable`1<PdfRectangle> BoundingBox { get; }
    public IReadOnlyList`1<NameToken> Attached { get; public set; }
    public bool IsTopAttached { get; }
    public bool IsBottomAttached { get; }
    public bool IsLeftAttached { get; }
    public bool IsRightAttached { get; }
    internal ArtifactMarkedContentElement(int markedContentIdentifier, NameToken tag, DictionaryToken properties, string language, string actualText, string alternateDescription, string expandedForm, ArtifactType artifactType, string subType, string attributeOwners, Nullable`1<PdfRectangle> boundingBox, IReadOnlyList`1<NameToken> attached, IReadOnlyList`1<MarkedContentElement> children, IReadOnlyList`1<Letter> letters, IReadOnlyList`1<PdfPath> paths, IReadOnlyList`1<IPdfImage> images, int index);
    [CompilerGeneratedAttribute]
public ArtifactType get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SubType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AttributeOwners();
    [CompilerGeneratedAttribute]
public Nullable`1<PdfRectangle> get_BoundingBox();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NameToken> get_Attached();
    [CompilerGeneratedAttribute]
public void set_Attached(IReadOnlyList`1<NameToken> value);
    public bool get_IsTopAttached();
    public bool get_IsBottomAttached();
    public bool get_IsLeftAttached();
    public bool get_IsRightAttached();
    private bool IsAttached(NameToken edge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Content.BasePageFactory`1 : object {
    public ParsingOptions ParsingOptions;
    public IPdfTokenScanner PdfScanner;
    public IResourceStore ResourceStore;
    public ILookupFilterProvider FilterProvider;
    public IPageContentParser PageContentParser;
    protected BasePageFactory`1(IPdfTokenScanner pdfScanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider, IPageContentParser pageContentParser, ParsingOptions parsingOptions);
    public sealed virtual TPage Create(int number, DictionaryToken dictionary, PageTreeMembers pageTreeMembers, NamedDestinations namedDestinations);
    private TPage ProcessPageInternal(int pageNumber, DictionaryToken dictionary, NamedDestinations namedDestinations, MediaBox mediaBox, CropBox cropBox, UserSpaceUnit userSpaceUnit, PageRotationDegrees rotation, TransformationMatrix& initialMatrix, ReadOnlyMemory`1<byte> contentBytes);
    protected abstract virtual TPage ProcessPage(int pageNumber, DictionaryToken dictionary, NamedDestinations namedDestinations, MediaBox mediaBox, CropBox cropBox, UserSpaceUnit userSpaceUnit, PageRotationDegrees rotation, TransformationMatrix initialMatrix, IReadOnlyList`1<IGraphicsStateOperation> operations);
    protected static UserSpaceUnit GetUserSpaceUnits(DictionaryToken dictionary);
    protected CropBox GetCropBox(DictionaryToken dictionary, PageTreeMembers pageTreeMembers, MediaBox mediaBox);
    protected MediaBox GetMediaBox(int number, DictionaryToken dictionary, PageTreeMembers pageTreeMembers);
    protected static void ApplyTransformNormalise(TransformationMatrix& transformationMatrix, MediaBox& mediaBox, CropBox& cropBox);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.Catalog : object {
    [CompilerGeneratedAttribute]
private DictionaryToken <CatalogDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedDestinations <NamedDestinations>k__BackingField;
    [CompilerGeneratedAttribute]
private Pages <Pages>k__BackingField;
    public DictionaryToken CatalogDictionary { get; }
    internal NamedDestinations NamedDestinations { get; }
    internal Pages Pages { get; }
    internal Catalog(DictionaryToken catalogDictionary, Pages pages, NamedDestinations namedDestinations);
    [CompilerGeneratedAttribute]
public DictionaryToken get_CatalogDictionary();
    [CompilerGeneratedAttribute]
internal NamedDestinations get_NamedDestinations();
    [CompilerGeneratedAttribute]
internal Pages get_Pages();
}
public class UglyToad.PdfPig.Content.CropBox : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    public PdfRectangle Bounds { get; }
    public CropBox(PdfRectangle bounds);
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.DocumentInformation : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static DocumentInformation <Default>k__BackingField;
    [NullableAttribute("1")]
private string representation;
    [CompilerGeneratedAttribute]
private DictionaryToken <DocumentInformationDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Producer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedDate>k__BackingField;
    [NullableAttribute("1")]
internal static DocumentInformation Default { get; }
    public DictionaryToken DocumentInformationDictionary { get; }
    public string Title { get; }
    public string Author { get; }
    public string Subject { get; }
    public string Keywords { get; }
    public string Creator { get; }
    public string Producer { get; }
    public string CreationDate { get; }
    public string ModifiedDate { get; }
    internal DocumentInformation(DictionaryToken documentInformationDictionary, string title, string author, string subject, string keywords, string creator, string producer, string creationDate, string modifiedDate);
    private static DocumentInformation();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static DocumentInformation get_Default();
    [CompilerGeneratedAttribute]
public DictionaryToken get_DocumentInformationDictionary();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public string get_Keywords();
    [CompilerGeneratedAttribute]
public string get_Creator();
    [CompilerGeneratedAttribute]
public string get_Producer();
    [CompilerGeneratedAttribute]
public string get_CreationDate();
    [CompilerGeneratedAttribute]
public string get_ModifiedDate();
    public Nullable`1<DateTimeOffset> GetCreatedDateTimeOffset();
    public Nullable`1<DateTimeOffset> GetModifiedDateTimeOffset();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private static void AppendPart(string name, string value, StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.EmbeddedFile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSpecification>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamToken <Stream>k__BackingField;
    public string Name { get; }
    public string FileSpecification { get; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Memory { get; }
    [NullableAttribute("0")]
public ReadOnlySpan`1<byte> Bytes { get; }
    public StreamToken Stream { get; }
    internal EmbeddedFile(string name, string fileSpecification, ReadOnlyMemory`1<byte> bytes, StreamToken stream);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FileSpecification();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Memory();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> get_Bytes();
    [CompilerGeneratedAttribute]
public StreamToken get_Stream();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Content.HeaderVersion : object {
    [CompilerGeneratedAttribute]
private double <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionString>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OffsetInFile>k__BackingField;
    public double Version { get; }
    public string VersionString { get; }
    public long OffsetInFile { get; }
    public HeaderVersion(double version, string versionString, long offsetInFile);
    [CompilerGeneratedAttribute]
public double get_Version();
    [CompilerGeneratedAttribute]
public string get_VersionString();
    [CompilerGeneratedAttribute]
public long get_OffsetInFile();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.Hyperlink : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Letter> <Letters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Annotation <Annotation>k__BackingField;
    public PdfRectangle Bounds { get; }
    public string Text { get; }
    public IReadOnlyList`1<Letter> Letters { get; }
    public string Uri { get; public set; }
    public Annotation Annotation { get; }
    public Hyperlink(PdfRectangle bounds, IReadOnlyList`1<Letter> letters, string text, string uri, Annotation annotation);
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Letter> get_Letters();
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public Annotation get_Annotation();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.InlineImage : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ReadOnlyMemory`1<byte>> memoryFactory;
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WidthInSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeightInSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImageMask>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Decode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInlineImage>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <ImageDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderingIntent <RenderingIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interpolate>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <RawMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <ColorSpaceDetails>k__BackingField;
    public PdfRectangle Bounds { get; }
    public int WidthInSamples { get; }
    public int HeightInSamples { get; }
    public int BitsPerComponent { get; }
    public bool IsImageMask { get; }
    public IReadOnlyList`1<double> Decode { get; }
    public bool IsInlineImage { get; }
    public DictionaryToken ImageDictionary { get; }
    public RenderingIntent RenderingIntent { get; }
    public bool Interpolate { get; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> RawMemory { get; }
    [NullableAttribute("0")]
public ReadOnlySpan`1<byte> RawBytes { get; }
    public ColorSpaceDetails ColorSpaceDetails { get; }
    internal InlineImage(PdfRectangle bounds, int widthInSamples, int heightInSamples, int bitsPerComponent, bool isImageMask, RenderingIntent renderingIntent, bool interpolate, IReadOnlyList`1<double> decode, ReadOnlyMemory`1<byte> rawMemory, IReadOnlyList`1<IFilter> filters, DictionaryToken streamDictionary, ColorSpaceDetails colorSpaceDetails);
    [CompilerGeneratedAttribute]
public sealed virtual PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public sealed virtual int get_WidthInSamples();
    [CompilerGeneratedAttribute]
public sealed virtual int get_HeightInSamples();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsImageMask();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<double> get_Decode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInlineImage();
    [CompilerGeneratedAttribute]
public sealed virtual DictionaryToken get_ImageDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual RenderingIntent get_RenderingIntent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Interpolate();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual ReadOnlyMemory`1<byte> get_RawMemory();
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> get_RawBytes();
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpaceDetails get_ColorSpaceDetails();
    [NullableContextAttribute("0")]
public sealed virtual bool TryGetBytesAsMemory(ReadOnlyMemory`1& bytes);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetPng(Byte[]& bytes);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Content.IPageFactory`1 {
    public abstract virtual TPage Create(int number, DictionaryToken dictionary, PageTreeMembers pageTreeMembers, NamedDestinations namedDestinations);
}
public interface UglyToad.PdfPig.Content.IPdfImage {
    public PdfRectangle Bounds { get; }
    public int WidthInSamples { get; }
    public int HeightInSamples { get; }
    public int BitsPerComponent { get; }
    public ReadOnlyMemory`1<byte> RawMemory { get; }
    public ReadOnlySpan`1<byte> RawBytes { get; }
    public RenderingIntent RenderingIntent { get; }
    public bool IsImageMask { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<double> Decode { get; }
    public bool Interpolate { get; }
    public bool IsInlineImage { get; }
    [NullableAttribute("1")]
public DictionaryToken ImageDictionary { get; }
    [NullableAttribute("2")]
public ColorSpaceDetails ColorSpaceDetails { get; }
    public abstract virtual PdfRectangle get_Bounds();
    public abstract virtual int get_WidthInSamples();
    public abstract virtual int get_HeightInSamples();
    public abstract virtual int get_BitsPerComponent();
    public abstract virtual ReadOnlyMemory`1<byte> get_RawMemory();
    public abstract virtual ReadOnlySpan`1<byte> get_RawBytes();
    public abstract virtual RenderingIntent get_RenderingIntent();
    public abstract virtual bool get_IsImageMask();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<double> get_Decode();
    public abstract virtual bool get_Interpolate();
    public abstract virtual bool get_IsInlineImage();
    [NullableContextAttribute("1")]
public abstract virtual DictionaryToken get_ImageDictionary();
    [NullableContextAttribute("2")]
public abstract virtual ColorSpaceDetails get_ColorSpaceDetails();
    public abstract virtual bool TryGetBytesAsMemory(ReadOnlyMemory`1& memory);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetPng(Byte[]& bytes);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Content.IResourceStore {
    public abstract virtual void LoadResourceDictionary(DictionaryToken resourceDictionary);
    public abstract virtual void UnloadResourceDictionary();
    public abstract virtual IFont GetFont(NameToken name);
    public abstract virtual bool TryGetXObject(NameToken name, StreamToken& stream);
    public abstract virtual DictionaryToken GetExtendedGraphicsStateDictionary(NameToken name);
    public abstract virtual IFont GetFontDirectly(IndirectReferenceToken fontReferenceToken);
    public abstract virtual bool TryGetNamedColorSpace(NameToken name, ResourceColorSpace& namedColorSpace);
    [NullableContextAttribute("2")]
public abstract virtual ColorSpaceDetails GetColorSpaceDetails(NameToken name, DictionaryToken dictionary);
    public abstract virtual DictionaryToken GetMarkedContentPropertiesDictionary(NameToken name);
    public abstract virtual IReadOnlyDictionary`2<NameToken, PatternColor> GetPatterns();
    public abstract virtual Shading GetShading(NameToken name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.Letter : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TextOrientation <TextOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <StartBaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <EndBaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <GlyphRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRenderingMode <RenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextSequence>k__BackingField;
    public string Value { get; }
    public TextOrientation TextOrientation { get; }
    public PdfPoint Location { get; }
    public PdfPoint StartBaseLine { get; }
    public PdfPoint EndBaseLine { get; }
    public double Width { get; }
    public PdfRectangle GlyphRectangle { get; }
    public double FontSize { get; }
    [NullableAttribute("2")]
public string FontName { get; }
    public FontDetails Font { get; }
    public TextRenderingMode RenderingMode { get; }
    public IColor Color { get; }
    public IColor StrokeColor { get; }
    public IColor FillColor { get; }
    public double PointSize { get; }
    public int TextSequence { get; }
    public Letter(string value, PdfRectangle glyphRectangle, PdfPoint startBaseLine, PdfPoint endBaseLine, double width, double fontSize, FontDetails font, TextRenderingMode renderingMode, IColor strokeColor, IColor fillColor, double pointSize, int textSequence);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public TextOrientation get_TextOrientation();
    public PdfPoint get_Location();
    [CompilerGeneratedAttribute]
public PdfPoint get_StartBaseLine();
    [CompilerGeneratedAttribute]
public PdfPoint get_EndBaseLine();
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public PdfRectangle get_GlyphRectangle();
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [NullableContextAttribute("2")]
public string get_FontName();
    [CompilerGeneratedAttribute]
public FontDetails get_Font();
    [CompilerGeneratedAttribute]
public TextRenderingMode get_RenderingMode();
    [CompilerGeneratedAttribute]
public IColor get_Color();
    [CompilerGeneratedAttribute]
public IColor get_StrokeColor();
    [CompilerGeneratedAttribute]
public IColor get_FillColor();
    [CompilerGeneratedAttribute]
public double get_PointSize();
    [CompilerGeneratedAttribute]
public int get_TextSequence();
    private TextOrientation GetTextOrientation();
    private TextOrientation GetTextOrientationRot();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.MarkedContentElement : object {
    [CompilerGeneratedAttribute]
private int <MarkedContentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArtifact>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MarkedContentElement> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Letter> <Letters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfPath> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPdfImage> <Images>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ActualText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AlternateDescription>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExpandedForm>k__BackingField;
    public int MarkedContentIdentifier { get; }
    public int Index { get; }
    public string Tag { get; }
    public DictionaryToken Properties { get; }
    public bool IsArtifact { get; }
    public IReadOnlyList`1<MarkedContentElement> Children { get; }
    public IReadOnlyList`1<Letter> Letters { get; }
    public IReadOnlyList`1<PdfPath> Paths { get; }
    public IReadOnlyList`1<IPdfImage> Images { get; }
    [NullableAttribute("2")]
public string Language { get; }
    [NullableAttribute("2")]
public string ActualText { get; }
    [NullableAttribute("2")]
public string AlternateDescription { get; }
    [NullableAttribute("2")]
public string ExpandedForm { get; }
    public MarkedContentElement(int markedContentIdentifier, NameToken tag, DictionaryToken properties, string language, string actualText, string alternateDescription, string expandedForm, bool isArtifact, IReadOnlyList`1<MarkedContentElement> children, IReadOnlyList`1<Letter> letters, IReadOnlyList`1<PdfPath> paths, IReadOnlyList`1<IPdfImage> images, int index);
    [CompilerGeneratedAttribute]
public int get_MarkedContentIdentifier();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public DictionaryToken get_Properties();
    [CompilerGeneratedAttribute]
public bool get_IsArtifact();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MarkedContentElement> get_Children();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Letter> get_Letters();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PdfPath> get_Paths();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IPdfImage> get_Images();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Language();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ActualText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AlternateDescription();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExpandedForm();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.MediaBox : object {
    private static double PointsPerInch;
    private static double PointsPerMm;
    public static MediaBox Letter;
    public static MediaBox Legal;
    public static MediaBox A0;
    public static MediaBox A1;
    public static MediaBox A2;
    public static MediaBox A3;
    public static MediaBox A4;
    public static MediaBox A5;
    public static MediaBox A6;
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    public PdfRectangle Bounds { get; }
    public MediaBox(Nullable`1<PdfRectangle> bounds);
    private static MediaBox();
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.OptionalContentGroupElement : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Intent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IToken> <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkedContentElement <MarkedContent>k__BackingField;
    public string Type { get; }
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Intent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, IToken> Usage { get; }
    public MarkedContentElement MarkedContent { get; }
    internal OptionalContentGroupElement(MarkedContentElement markedContentElement, IPdfTokenScanner pdfTokenScanner);
    [CompilerGeneratedAttribute]
public string get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Intent();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IToken> get_Usage();
    [CompilerGeneratedAttribute]
public MarkedContentElement get_MarkedContent();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.Page : object {
    internal AnnotationProvider annotationProvider;
    internal IPdfTokenScanner pdfScanner;
    private Lazy`1<string> textLazy;
    [CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private CropBox <CropBox>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaBox <MediaBox>k__BackingField;
    [CompilerGeneratedAttribute]
private PageContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private PageRotationDegrees <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private PageSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Experimental <ExperimentalAccess>k__BackingField;
    public DictionaryToken Dictionary { get; }
    public int Number { get; }
    public CropBox CropBox { get; }
    public MediaBox MediaBox { get; }
    internal PageContent Content { get; }
    public PageRotationDegrees Rotation { get; }
    public IReadOnlyList`1<Letter> Letters { get; }
    public string Text { get; }
    public double Width { get; }
    public double Height { get; }
    public PageSize Size { get; }
    public int NumberOfImages { get; }
    public IReadOnlyList`1<IGraphicsStateOperation> Operations { get; }
    public Experimental ExperimentalAccess { get; }
    internal Page(int number, DictionaryToken dictionary, MediaBox mediaBox, CropBox cropBox, PageRotationDegrees rotation, PageContent content, AnnotationProvider annotationProvider, IPdfTokenScanner pdfScanner);
    [CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public CropBox get_CropBox();
    [CompilerGeneratedAttribute]
public MediaBox get_MediaBox();
    [CompilerGeneratedAttribute]
internal PageContent get_Content();
    [CompilerGeneratedAttribute]
public PageRotationDegrees get_Rotation();
    public IReadOnlyList`1<Letter> get_Letters();
    public string get_Text();
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public PageSize get_Size();
    public int get_NumberOfImages();
    public IReadOnlyList`1<IGraphicsStateOperation> get_Operations();
    [CompilerGeneratedAttribute]
public Experimental get_ExperimentalAccess();
    private static string GetText(PageContent content);
    public IEnumerable`1<Word> GetWords();
    public IEnumerable`1<Word> GetWords(IWordExtractor wordExtractor);
    public IReadOnlyList`1<Hyperlink> GetHyperlinks();
    public IEnumerable`1<IPdfImage> GetImages();
    public IReadOnlyList`1<MarkedContentElement> GetMarkedContents();
    [CompilerGeneratedAttribute]
private string <.ctor>b__41_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Content.PageContent : object {
    private IReadOnlyList`1<Union`2<XObjectContentRecord, InlineImage>> images;
    private IReadOnlyList`1<MarkedContentElement> markedContents;
    private IPdfTokenScanner pdfScanner;
    private ILookupFilterProvider filterProvider;
    private IResourceStore resourceStore;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IGraphicsStateOperation> <GraphicsStateOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Letter> <Letters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfPath> <Paths>k__BackingField;
    internal IReadOnlyList`1<IGraphicsStateOperation> GraphicsStateOperations { get; }
    public IReadOnlyList`1<Letter> Letters { get; }
    public IReadOnlyList`1<PdfPath> Paths { get; }
    public int NumberOfImages { get; }
    internal PageContent(IReadOnlyList`1<IGraphicsStateOperation> graphicsStateOperations, IReadOnlyList`1<Letter> letters, IReadOnlyList`1<PdfPath> paths, IReadOnlyList`1<Union`2<XObjectContentRecord, InlineImage>> images, IReadOnlyList`1<MarkedContentElement> markedContents, IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, IResourceStore resourceStore);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<IGraphicsStateOperation> get_GraphicsStateOperations();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Letter> get_Letters();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PdfPath> get_Paths();
    public int get_NumberOfImages();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Content.PageContent/<GetImages>d__17")]
public IEnumerable`1<IPdfImage> GetImages();
    public IReadOnlyList`1<MarkedContentElement> GetMarkedContents();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Content.PageRotationDegrees : ValueType {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; }
    public bool SwapsAxis { get; }
    public double Radians { get; }
    public PageRotationDegrees(int rotation);
    [CompilerGeneratedAttribute]
public int get_Value();
    public bool get_SwapsAxis();
    public double get_Radians();
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PageRotationDegrees other);
    public static bool op_Equality(PageRotationDegrees degrees1, PageRotationDegrees degrees2);
    public static bool op_Inequality(PageRotationDegrees degrees1, PageRotationDegrees degrees2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Content.Pages : object {
    private Dictionary`2<Type, object> pageFactoryCache;
    private PageFactory defaultPageFactory;
    private IPdfTokenScanner pdfScanner;
    private Dictionary`2<int, PageTreeNode> pagesByNumber;
    [CompilerGeneratedAttribute]
private PageTreeNode <PageTree>k__BackingField;
    public int Count { get; }
    public PageTreeNode PageTree { get; }
    internal Pages(IPageFactory`1<Page> pageFactory, IPdfTokenScanner pdfScanner, PageTreeNode pageTree, Dictionary`2<int, PageTreeNode> pagesByNumber);
    public int get_Count();
    [CompilerGeneratedAttribute]
public PageTreeNode get_PageTree();
    internal Page GetPage(int pageNumber, NamedDestinations namedDestinations, ParsingOptions parsingOptions);
    internal TPage GetPage(int pageNumber, NamedDestinations namedDestinations, ParsingOptions parsingOptions);
    private TPage GetPage(IPageFactory`1<TPage> pageFactory, int pageNumber, NamedDestinations namedDestinations, ParsingOptions parsingOptions);
    internal void AddPageFactory(IPageFactory`1<TPage> pageFactory);
    [NullableContextAttribute("0")]
internal void AddPageFactory();
    internal PageTreeNode GetPageNode(int pageNumber);
    [NullableContextAttribute("2")]
internal PageTreeNode GetPageByReference(IndirectReference reference);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Content.PagesFactory : object {
    public static Pages Create(IndirectReference pagesReference, DictionaryToken pagesDictionary, IPdfTokenScanner scanner, IPageFactory`1<Page> pageFactory, ILog log, bool isLenientParsing);
    private static PageTreeNode ProcessPagesNode(IndirectReference referenceInput, DictionaryToken nodeDictionaryInput, IndirectReference parentReferenceInput, bool isRoot, IPdfTokenScanner pdfTokenScanner, bool isLenientParsing, PageCounter pageNumber);
    private static bool CheckIfIsPage(DictionaryToken nodeDictionary, IndirectReference parentReference, bool isRoot, IPdfTokenScanner pdfTokenScanner, bool isLenientParsing);
    private static void PopulatePageByNumberDictionary(PageTreeNode node, Dictionary`2<int, PageTreeNode> result);
}
public enum UglyToad.PdfPig.Content.PageSize : Enum {
    public int value__;
    public static PageSize Custom;
    public static PageSize A0;
    public static PageSize A1;
    public static PageSize A2;
    public static PageSize A3;
    public static PageSize A4;
    public static PageSize A5;
    public static PageSize A6;
    public static PageSize A7;
    public static PageSize A8;
    public static PageSize A9;
    public static PageSize A10;
    public static PageSize Letter;
    public static PageSize Legal;
    public static PageSize Ledger;
    public static PageSize Tabloid;
    public static PageSize Executive;
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Content.PageSizeExtensions : object {
    [NullableAttribute("1")]
private static Dictionary`2<WidthHeight, PageSize> Lookup;
    private static PageSizeExtensions();
    [ExtensionAttribute]
public static PageSize GetPageSize(PdfRectangle rectangle);
    [ExtensionAttribute]
public static bool TryGetPdfRectangle(PageSize size, PdfRectangle& rectangle);
}
public class UglyToad.PdfPig.Content.PageTreeMembers : object {
    [CompilerGeneratedAttribute]
private MediaBox <MediaBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<DictionaryToken> <ParentResources>k__BackingField;
    public MediaBox MediaBox { get; internal set; }
    public int Rotation { get; internal set; }
    public Queue`1<DictionaryToken> ParentResources { get; }
    internal CropBox GetCropBox();
    [CompilerGeneratedAttribute]
public MediaBox get_MediaBox();
    [CompilerGeneratedAttribute]
internal void set_MediaBox(MediaBox value);
    [CompilerGeneratedAttribute]
public int get_Rotation();
    [CompilerGeneratedAttribute]
internal void set_Rotation(int value);
    [CompilerGeneratedAttribute]
public Queue`1<DictionaryToken> get_ParentResources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.PageTreeNode : object {
    [CompilerGeneratedAttribute]
private DictionaryToken <NodeDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IndirectReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageNumber>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<PageTreeNode> <Children>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PageTreeNode <Parent>k__BackingField;
    public DictionaryToken NodeDictionary { get; }
    public IndirectReference Reference { get; }
    public bool IsPage { get; }
    public Nullable`1<int> PageNumber { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<PageTreeNode> Children { get; private set; }
    [NullableAttribute("2")]
public PageTreeNode Parent { get; private set; }
    public bool IsRoot { get; }
    internal PageTreeNode(DictionaryToken nodeDictionary, IndirectReference reference, bool isPage, Nullable`1<int> pageNumber);
    [CompilerGeneratedAttribute]
public DictionaryToken get_NodeDictionary();
    [CompilerGeneratedAttribute]
public IndirectReference get_Reference();
    [CompilerGeneratedAttribute]
public bool get_IsPage();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageNumber();
    [CompilerGeneratedAttribute]
internal void set_PageNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PageTreeNode> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IReadOnlyList`1<PageTreeNode> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PageTreeNode get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Parent(PageTreeNode value);
    public bool get_IsRoot();
    internal PageTreeNode WithChildren(IReadOnlyList`1<PageTreeNode> children);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Content.ResourceStore : object {
    private IPdfTokenScanner scanner;
    private IFontFactory fontFactory;
    private ILookupFilterProvider filterProvider;
    private ParsingOptions parsingOptions;
    private Dictionary`2<IndirectReference, IFont> loadedFonts;
    private Dictionary`2<NameToken, IFont> loadedDirectFonts;
    private StackDictionary`2<NameToken, IndirectReference> currentResourceState;
    private Dictionary`2<NameToken, DictionaryToken> extendedGraphicsStates;
    private StackDictionary`2<NameToken, ResourceColorSpace> namedColorSpaces;
    private Dictionary`2<NameToken, ColorSpaceDetails> loadedNamedColorSpaceDetails;
    private Dictionary`2<NameToken, DictionaryToken> markedContentProperties;
    private Dictionary`2<NameToken, Shading> shadingsProperties;
    private Dictionary`2<NameToken, PatternColor> patternsProperties;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<NameToken, IFont> lastLoadedFont;
    public ResourceStore(IPdfTokenScanner scanner, IFontFactory fontFactory, ILookupFilterProvider filterProvider, ParsingOptions parsingOptions);
    public sealed virtual void LoadResourceDictionary(DictionaryToken resourceDictionary);
    public sealed virtual void UnloadResourceDictionary();
    private void LoadFontDictionary(DictionaryToken fontDictionary);
    public sealed virtual IFont GetFont(NameToken name);
    public sealed virtual IFont GetFontDirectly(IndirectReferenceToken fontReferenceToken);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetNamedColorSpace(NameToken name, ResourceColorSpace& namedToken);
    [NullableContextAttribute("2")]
public sealed virtual ColorSpaceDetails GetColorSpaceDetails(NameToken name, DictionaryToken dictionary);
    public sealed virtual bool TryGetXObject(NameToken name, StreamToken& stream);
    public sealed virtual DictionaryToken GetExtendedGraphicsStateDictionary(NameToken name);
    public sealed virtual DictionaryToken GetMarkedContentPropertiesDictionary(NameToken name);
    public sealed virtual Shading GetShading(NameToken name);
    public sealed virtual IReadOnlyDictionary`2<NameToken, PatternColor> GetPatterns();
}
public enum UglyToad.PdfPig.Content.TextOrientation : Enum {
    public byte value__;
    public static TextOrientation Other;
    public static TextOrientation Horizontal;
    public static TextOrientation Rotate180;
    public static TextOrientation Rotate90;
    public static TextOrientation Rotate270;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.Word : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextOrientation <TextOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Letter> <Letters>k__BackingField;
    public string Text { get; }
    public TextOrientation TextOrientation { get; }
    public PdfRectangle BoundingBox { get; }
    [NullableAttribute("2")]
public string FontName { get; }
    public IReadOnlyList`1<Letter> Letters { get; }
    public Word(IReadOnlyList`1<Letter> letters);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public TextOrientation get_TextOrientation();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Letter> get_Letters();
    private ValueTuple`2<string, PdfRectangle> GetBoundingBoxH(IReadOnlyList`1<Letter> letters);
    private ValueTuple`2<string, PdfRectangle> GetBoundingBox180(IReadOnlyList`1<Letter> letters);
    private ValueTuple`2<string, PdfRectangle> GetBoundingBox90(IReadOnlyList`1<Letter> letters);
    private ValueTuple`2<string, PdfRectangle> GetBoundingBox270(IReadOnlyList`1<Letter> letters);
    private ValueTuple`2<string, PdfRectangle> GetBoundingBoxOther(IReadOnlyList`1<Letter> letters);
    private static double BoundAngle180(double angle);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Content.XmpMetadata : object {
    private ILookupFilterProvider filterProvider;
    private IPdfTokenScanner pdfTokenScanner;
    [CompilerGeneratedAttribute]
private StreamToken <MetadataStreamToken>k__BackingField;
    public StreamToken MetadataStreamToken { get; }
    internal XmpMetadata(StreamToken stream, ILookupFilterProvider filterProvider, IPdfTokenScanner pdfTokenScanner);
    [CompilerGeneratedAttribute]
public StreamToken get_MetadataStreamToken();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> GetXmlBytes();
    public XDocument GetXDocument();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.CrossReference.CrossReferenceTable : object {
    private Dictionary`2<IndirectReference, long> objectOffsets;
    [CompilerGeneratedAttribute]
private CrossReferenceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TrailerDictionary <Trailer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CrossReferenceOffset> <CrossReferenceOffsets>k__BackingField;
    public IReadOnlyDictionary`2<IndirectReference, long> ObjectOffsets { get; }
    public CrossReferenceType Type { get; }
    public TrailerDictionary Trailer { get; }
    public IReadOnlyList`1<CrossReferenceOffset> CrossReferenceOffsets { get; }
    internal CrossReferenceTable(CrossReferenceType type, IReadOnlyDictionary`2<IndirectReference, long> objectOffsets, TrailerDictionary trailer, IReadOnlyList`1<CrossReferenceOffset> crossReferenceOffsets);
    public IReadOnlyDictionary`2<IndirectReference, long> get_ObjectOffsets();
    [CompilerGeneratedAttribute]
public CrossReferenceType get_Type();
    [CompilerGeneratedAttribute]
public TrailerDictionary get_Trailer();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CrossReferenceOffset> get_CrossReferenceOffsets();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.CrossReference.CrossReferenceTableBuilder : object {
    private List`1<CrossReferenceTablePart> parts;
    public IReadOnlyList`1<CrossReferenceTablePart> Parts { get; }
    public IReadOnlyList`1<CrossReferenceTablePart> get_Parts();
    public void Add(CrossReferenceTablePart part);
    public CrossReferenceTable Build(long firstCrossReferenceOffset, long offsetCorrection, bool isLenientParsing, ILog log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.CrossReference.CrossReferenceTablePart : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<IndirectReference, long> <ObjectOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossReferenceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TiedToXrefAtOffset>k__BackingField;
    public IReadOnlyDictionary`2<IndirectReference, long> ObjectOffsets { get; }
    public long Offset { get; private set; }
    public long Previous { get; }
    public DictionaryToken Dictionary { get; private set; }
    public CrossReferenceType Type { get; }
    public Nullable`1<long> TiedToXrefAtOffset { get; }
    public CrossReferenceTablePart(IReadOnlyDictionary`2<IndirectReference, long> objectOffsets, long offset, long previous, DictionaryToken dictionary, CrossReferenceType type, Nullable`1<long> tiedToXrefAtOffset);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<IndirectReference, long> get_ObjectOffsets();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(long value);
    [CompilerGeneratedAttribute]
public long get_Previous();
    [CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    [CompilerGeneratedAttribute]
private void set_Dictionary(DictionaryToken value);
    [CompilerGeneratedAttribute]
public CrossReferenceType get_Type();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TiedToXrefAtOffset();
    public void FixOffset(long offset);
    public long GetPreviousOffset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.CrossReference.CrossReferenceTablePartBuilder : object {
    [NullableAttribute("1")]
private Dictionary`2<IndirectReference, long> objects;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossReferenceType <XRefType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TiedToPreviousAtOffset>k__BackingField;
    public long Offset { get; public set; }
    public long Previous { get; public set; }
    public DictionaryToken Dictionary { get; public set; }
    public CrossReferenceType XRefType { get; public set; }
    public Nullable`1<long> TiedToPreviousAtOffset { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(long value);
    [CompilerGeneratedAttribute]
public long get_Previous();
    [CompilerGeneratedAttribute]
public void set_Previous(long value);
    [CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    [CompilerGeneratedAttribute]
public void set_Dictionary(DictionaryToken value);
    [CompilerGeneratedAttribute]
public CrossReferenceType get_XRefType();
    [CompilerGeneratedAttribute]
public void set_XRefType(CrossReferenceType value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TiedToPreviousAtOffset();
    [CompilerGeneratedAttribute]
public void set_TiedToPreviousAtOffset(Nullable`1<long> value);
    public void Add(long objectId, int generationNumber, long offset);
    [NullableContextAttribute("1")]
public CrossReferenceTablePart Build();
}
public enum UglyToad.PdfPig.CrossReference.CrossReferenceType : Enum {
    public int value__;
    public static CrossReferenceType Table;
    public static CrossReferenceType Stream;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.CrossReference.TrailerDictionary : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PreviousCrossReferenceOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IndirectReference <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private IToken <Info>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<IDataToken`1<string>> <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IToken <EncryptionToken>k__BackingField;
    public int Size { get; }
    public Nullable`1<long> PreviousCrossReferenceOffset { get; }
    public IndirectReference Root { get; }
    public IToken Info { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<IDataToken`1<string>> Identifier { get; }
    public IToken EncryptionToken { get; }
    [NullableContextAttribute("1")]
internal TrailerDictionary(DictionaryToken dictionary, bool isLenientParsing);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PreviousCrossReferenceOffset();
    [CompilerGeneratedAttribute]
public IndirectReference get_Root();
    [CompilerGeneratedAttribute]
public IToken get_Info();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<IDataToken`1<string>> get_Identifier();
    [CompilerGeneratedAttribute]
public IToken get_EncryptionToken();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Encryption.AesEncryptionHelper : object {
    public static Byte[] Encrypt256();
    public static Byte[] Decrypt(Byte[] data, Byte[] finalKey);
}
internal class UglyToad.PdfPig.Encryption.CryptDictionary : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static CryptDictionary <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Method <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [NullableAttribute("1")]
public static CryptDictionary Identity { get; }
    public Method Name { get; }
    public TriggerEvent Event { get; }
    public int Length { get; }
    public bool IsIdentity { get; }
    public CryptDictionary(Method name, TriggerEvent event, int length);
    private static CryptDictionary();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static CryptDictionary get_Identity();
    [CompilerGeneratedAttribute]
public Method get_Name();
    [CompilerGeneratedAttribute]
public TriggerEvent get_Event();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Encryption.CryptHandler : object {
    private DictionaryToken cryptDictionary;
    [CompilerGeneratedAttribute]
private CryptDictionary <StreamDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptDictionary <StringDictionary>k__BackingField;
    public CryptDictionary StreamDictionary { get; }
    public CryptDictionary StringDictionary { get; }
    public CryptHandler(DictionaryToken cryptDictionary, NameToken streamName, NameToken stringName);
    [CompilerGeneratedAttribute]
public CryptDictionary get_StreamDictionary();
    [CompilerGeneratedAttribute]
public CryptDictionary get_StringDictionary();
    public CryptDictionary GetNamedCryptDictionary(NameToken name);
    private static CryptDictionary ParseCryptDictionary(DictionaryToken cryptDictionary, NameToken name);
}
internal enum UglyToad.PdfPig.Encryption.EncryptionAlgorithmCode : Enum {
    public int value__;
    public static EncryptionAlgorithmCode Unrecognized;
    public static EncryptionAlgorithmCode Rc4OrAes40BitKey;
    public static EncryptionAlgorithmCode Rc4OrAesGreaterThan40BitKey;
    public static EncryptionAlgorithmCode UnpublishedAlgorithm40To128BitKey;
    public static EncryptionAlgorithmCode SecurityHandlerInDocument;
    public static EncryptionAlgorithmCode SecurityHandlerInDocument256;
    public static EncryptionAlgorithmCode UndocumentedDueToIso;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Encryption.EncryptionDictionary : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionAlgorithmCode <EncryptionAlgorithmCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <OwnerBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <UserBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <OwnerEncryptionBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <UserEncryptionBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private UserAccessPermissions <UserAccessPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncryptMetadata>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DictionaryToken <Dictionary>k__BackingField;
    [NullableAttribute("1")]
public string Filter { get; }
    public EncryptionAlgorithmCode EncryptionAlgorithmCode { get; }
    public Nullable`1<int> KeyLength { get; }
    public int Revision { get; }
    public Byte[] OwnerBytes { get; }
    public Byte[] UserBytes { get; }
    public Byte[] OwnerEncryptionBytes { get; }
    public Byte[] UserEncryptionBytes { get; }
    public UserAccessPermissions UserAccessPermissions { get; }
    public bool IsStandardFilter { get; }
    public bool EncryptMetadata { get; }
    [NullableAttribute("1")]
public DictionaryToken Dictionary { get; }
    public EncryptionDictionary(string filter, EncryptionAlgorithmCode encryptionAlgorithmCode, Nullable`1<int> keyLength, int revision, Byte[] ownerBytes, Byte[] userBytes, Byte[] ownerEncryptionBytes, Byte[] userEncryptionBytes, UserAccessPermissions userAccessPermissions, DictionaryToken dictionary, bool encryptMetadata);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public EncryptionAlgorithmCode get_EncryptionAlgorithmCode();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyLength();
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
public Byte[] get_OwnerBytes();
    [CompilerGeneratedAttribute]
public Byte[] get_UserBytes();
    [CompilerGeneratedAttribute]
public Byte[] get_OwnerEncryptionBytes();
    [CompilerGeneratedAttribute]
public Byte[] get_UserEncryptionBytes();
    [CompilerGeneratedAttribute]
public UserAccessPermissions get_UserAccessPermissions();
    public bool get_IsStandardFilter();
    [CompilerGeneratedAttribute]
public bool get_EncryptMetadata();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DictionaryToken get_Dictionary();
    public bool TryGetCryptHandler(CryptHandler& cryptHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Encryption.EncryptionDictionaryFactory : object {
    public static EncryptionDictionary Read(DictionaryToken encryptionDictionary, IPdfTokenScanner tokenScanner);
    private static Byte[] GetEncryptionBytesOrDefault(DictionaryToken encryptionDictionary, IPdfTokenScanner tokenScanner, bool isUser);
}
internal class UglyToad.PdfPig.Encryption.EncryptionHandler : object {
    private static Byte[] PaddingBytes;
    private HashSet`1<IndirectReference> previouslyDecrypted;
    private EncryptionDictionary encryptionDictionary;
    private CryptHandler cryptHandler;
    private Byte[] encryptionKey;
    private bool useAes;
    public EncryptionHandler(EncryptionDictionary encryptionDictionary, TrailerDictionary trailerDictionary, IReadOnlyList`1<string> passwords);
    private static EncryptionHandler();
    private static bool IsUserPassword(Byte[] passwordBytes, EncryptionDictionary encryptionDictionary, int length, Byte[] documentIdBytes);
    private static bool IsUserPasswordRevision5And6(Byte[] passwordBytes, EncryptionDictionary encryptionDictionary);
    private static bool IsOwnerPassword(Byte[] passwordBytes, EncryptionDictionary encryptionDictionary, int length, Byte[] documentIdBytes, Byte[]& userPassword);
    private static bool IsOwnerPasswordRevision5And6(Byte[] passwordBytes, EncryptionDictionary encryptionDictionary);
    public sealed virtual IToken Decrypt(IndirectReference reference, IToken token);
    private IToken DecryptInternal(IndirectReference reference, IToken token);
    private static StringToken GetStringTokenFromDecryptedData(ReadOnlySpan`1<byte> data);
    private Byte[] DecryptData(Byte[] data, IndirectReference reference);
    private Byte[] GetObjectKey(IndirectReference reference);
    private static Byte[] CalculateEncryptionKey(Byte[] password, EncryptionDictionary encryptionDictionary, int length, Byte[] documentId, bool isUserPassword);
    private static Byte[] CalculateKeyRevisions2To4(Byte[] password, EncryptionDictionary encryptionDictionary, int length, Byte[] documentId);
    private static Byte[] CalculateKeyRevisions5And6(Byte[] password, EncryptionDictionary encryptionDictionary, bool isUserPassword);
    private static Byte[] ComputeSha256Hash(Byte[] input1, Byte[] input2, Byte[] input3);
    private static void UpdateMd5(MD5 md5, Byte[] data);
    private static Byte[] GetPaddedPassword(Byte[] password);
    private static Byte[] TruncatePasswordTo127Bytes(Byte[] password);
    private static Byte[] ComputeStupidIsoHash(Byte[] password, Byte[] salt, Byte[] vector);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Encryption.IEncryptionHandler {
    public abstract virtual IToken Decrypt(IndirectReference reference, IToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Encryption.NoOpEncryptionHandler : object {
    [CompilerGeneratedAttribute]
private static NoOpEncryptionHandler <Instance>k__BackingField;
    public static NoOpEncryptionHandler Instance { get; }
    private static NoOpEncryptionHandler();
    [CompilerGeneratedAttribute]
public static NoOpEncryptionHandler get_Instance();
    public sealed virtual IToken Decrypt(IndirectReference reference, IToken token);
}
internal static class UglyToad.PdfPig.Encryption.RC4 : object {
    public static Byte[] Encrypt(ReadOnlySpan`1<byte> key, ReadOnlySpan`1<byte> data);
}
[FlagsAttribute]
internal enum UglyToad.PdfPig.Encryption.UserAccessPermissions : Enum {
    public long value__;
    public static UserAccessPermissions Print;
    public static UserAccessPermissions Modify;
    public static UserAccessPermissions CopyTextAndGraphics;
    public static UserAccessPermissions AddOrModifyTextAnnotationsAndFillFormFields;
    public static UserAccessPermissions FillExistingFormFields;
    public static UserAccessPermissions ExtractTextAndGraphics;
    public static UserAccessPermissions AssembleDocument;
    public static UserAccessPermissions PrintHighQuality;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Exceptions.PdfDocumentEncryptedException : Exception {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EncryptionDictionary <Dictionary>k__BackingField;
    [NullableAttribute("2")]
internal EncryptionDictionary Dictionary { get; }
    public PdfDocumentEncryptedException(string message);
    public PdfDocumentEncryptedException(string message, Exception inner);
    internal PdfDocumentEncryptedException(string message, EncryptionDictionary dictionary);
    internal PdfDocumentEncryptedException(string message, EncryptionDictionary dictionary, Exception inner);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal EncryptionDictionary get_Dictionary();
}
internal class UglyToad.PdfPig.Filters.Ascii85Filter : object {
    private static byte EmptyBlock;
    private static byte Offset;
    private static byte EmptyCharacterPadding;
    [NullableAttribute("1")]
private static Int32[] PowerByIndex;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    private static ReadOnlySpan`1<byte> EndOfDataBytes { get; }
    public bool IsSupported { get; }
    private static Ascii85Filter();
    private static ReadOnlySpan`1<byte> get_EndOfDataBytes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
    private static void WriteData(Span`1<byte> ascii, int index, ArrayPoolBufferWriter`1<byte> writer);
    private static bool IsWhiteSpace(byte b);
}
internal class UglyToad.PdfPig.Filters.AsciiHexDecodeFilter : object {
    [NullableAttribute("1")]
private static Int16[] ReverseHex;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    private static AsciiHexDecodeFilter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
    private static void WriteHexToByte(ReadOnlySpan`1<byte> hexBytes, ArrayPoolBufferWriter`1<byte> writer);
    private static bool IsWhitespace(byte c);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class UglyToad.PdfPig.Filters.BitStream : ValueType {
    private ReadOnlySpan`1<byte> data;
    private int currentWithinByteBitOffset;
    private int currentByteIndex;
    public BitStream(ReadOnlySpan`1<byte> data);
    public int Get(int numberOfBits);
}
internal enum UglyToad.PdfPig.Filters.CcittFaxCompressionType : Enum {
    public int value__;
    public static CcittFaxCompressionType ModifiedHuffman;
    public static CcittFaxCompressionType Group3_1D;
    public static CcittFaxCompressionType Group3_2D;
    public static CcittFaxCompressionType Group4_2D;
}
internal class UglyToad.PdfPig.Filters.CcittFaxDecodeFilter : object {
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
    private static CcittFaxCompressionType DetermineCompressionType(ReadOnlySpan`1<byte> input, int k);
    [NullableContextAttribute("1")]
private static void ReadFromDecoderStream(CcittFaxDecoderStream decoderStream, Byte[] result);
    private static void InvertBitmap(Span`1<byte> bufferData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Filters.CcittFaxDecoderStream : StreamWrapper {
    private int columns;
    private Byte[] decodedRow;
    private bool optionByteAligned;
    private CcittFaxCompressionType type;
    private int decodedLength;
    private int decodedPos;
    private Int32[] changesReferenceRow;
    private Int32[] changesCurrentRow;
    private int changesReferenceRowCount;
    private int changesCurrentRowCount;
    private int lastChangingElement;
    private int buffer;
    private int bufferPos;
    private static Int16[][] BLACK_CODES;
    private static Int16[][] BLACK_RUN_LENGTHS;
    private static Int16[][] WHITE_CODES;
    private static Int16[][] WHITE_RUN_LENGTHS;
    private static Node EOL;
    private static Node FILL;
    private static Tree BlackRunTree;
    private static Tree WhiteRunTree;
    private static Tree EolOnlyTree;
    private static Tree CodeTree;
    private static int VALUE_EOL;
    private static int VALUE_FILL;
    private static int VALUE_PASSMODE;
    private static int VALUE_HMODE;
    public CcittFaxDecoderStream(Stream stream, int columns, CcittFaxCompressionType type, bool byteAligned);
    private static CcittFaxDecoderStream();
    private void Fetch();
    private void Decode1D();
    private void Decode2D();
    private int GetNextChangingElement(int a0, bool white);
    private void DecodeRowType2();
    private void DecodeRowType4();
    private void DecodeRowType6();
    private void DecodeRow();
    private int DecodeRun(Tree tree);
    private void ResetBuffer();
    private bool ReadBit();
    public virtual int ReadByte();
    public virtual int Read(Byte[] b, int off, int len);
}
internal class UglyToad.PdfPig.Filters.DctDecodeFilter : object {
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
}
internal static class UglyToad.PdfPig.Filters.DecodeParameterResolver : object {
    [NullableContextAttribute("1")]
public static DictionaryToken GetFilterParameters(DictionaryToken streamDictionary, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Filters.DefaultFilterProvider : object {
    private IReadOnlyDictionary`2<string, IFilter> filterInstances;
    public static IFilterProvider Instance;
    private static DefaultFilterProvider();
    public sealed virtual IReadOnlyList`1<IFilter> GetFilters(DictionaryToken dictionary);
    public sealed virtual IReadOnlyList`1<IFilter> GetNamedFilters(IReadOnlyList`1<NameToken> names);
    private IFilter GetFilterStrict(string name);
    public sealed virtual IReadOnlyList`1<IFilter> GetAllFilters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Filters.FilterProviderWithLookup : object {
    private IFilterProvider inner;
    public FilterProviderWithLookup(IFilterProvider inner);
    public sealed virtual IReadOnlyList`1<IFilter> GetFilters(DictionaryToken dictionary);
    public sealed virtual IReadOnlyList`1<IFilter> GetNamedFilters(IReadOnlyList`1<NameToken> names);
    public sealed virtual IReadOnlyList`1<IFilter> GetAllFilters();
    public sealed virtual IReadOnlyList`1<IFilter> GetFilters(DictionaryToken dictionary, IPdfTokenScanner scanner);
}
internal class UglyToad.PdfPig.Filters.FlateFilter : object {
    private static int DefaultColors;
    private static int DefaultBitsPerComponent;
    private static int DefaultColumns;
    private static byte Deflate32KbWindow;
    private static byte ChecksumBits;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
    [NullableContextAttribute("1")]
private static Byte[] Decompress(Byte[] input);
    [NullableContextAttribute("1")]
public Byte[] Encode(Stream input, DictionaryToken streamDictionary, int index);
}
public interface UglyToad.PdfPig.Filters.IFilter {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Filters.IFilterProvider {
    public abstract virtual IReadOnlyList`1<IFilter> GetFilters(DictionaryToken dictionary);
    public abstract virtual IReadOnlyList`1<IFilter> GetNamedFilters(IReadOnlyList`1<NameToken> names);
    public abstract virtual IReadOnlyList`1<IFilter> GetAllFilters();
}
public interface UglyToad.PdfPig.Filters.ILookupFilterProvider {
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<IFilter> GetFilters(DictionaryToken dictionary, IPdfTokenScanner scanner);
}
internal class UglyToad.PdfPig.Filters.Jbig2DecodeFilter : object {
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
}
internal class UglyToad.PdfPig.Filters.JpxDecodeFilter : object {
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
}
internal class UglyToad.PdfPig.Filters.LzwFilter : object {
    private static int DefaultColors;
    private static int DefaultBitsPerComponent;
    private static int DefaultColumns;
    private static int ClearTable;
    private static int EodMarker;
    private static int NineBitBoundary;
    private static int TenBitBoundary;
    private static int ElevenBitBoundary;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
    private static Byte[] Decode(ReadOnlySpan`1<byte> input, bool isEarlyChange);
    private static Dictionary`2<int, Byte[]> GetDefaultTable();
}
internal static class UglyToad.PdfPig.Filters.PngPredictor : object {
    [NullableContextAttribute("1")]
public static Byte[] Decode(Byte[] inputBytes, int predictor, int colors, int bitsPerComponent, int columns);
    private static int GetBitSeq(int by, int startBit, int bitSize);
    private static int CalcSetBitSeq(int by, int startBit, int bitSize, int val);
}
internal class UglyToad.PdfPig.Filters.RunLengthFilter : object {
    private static byte EndOfDataLength;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSupported();
    public sealed virtual ReadOnlyMemory`1<byte> Decode(ReadOnlySpan`1<byte> input, DictionaryToken streamDictionary, int filterIndex);
}
public enum UglyToad.PdfPig.Functions.FunctionTypes : Enum {
    public byte value__;
    public static FunctionTypes Sampled;
    public static FunctionTypes Exponential;
    public static FunctionTypes Stitching;
    public static FunctionTypes PostScript;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Functions.PdfFunction : object {
    [CompilerGeneratedAttribute]
private DictionaryToken <FunctionDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamToken <FunctionStream>k__BackingField;
    private int numberOfInputValues;
    private int numberOfOutputValues;
    [CompilerGeneratedAttribute]
private ArrayToken <RangeValues>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ArrayToken <DomainValues>k__BackingField;
    public DictionaryToken FunctionDictionary { get; }
    public StreamToken FunctionStream { get; }
    public FunctionTypes FunctionType { get; }
    public int NumberOfOutputParameters { get; }
    public int NumberOfInputParameters { get; }
    protected ArrayToken RangeValues { get; }
    [NullableAttribute("1")]
private ArrayToken DomainValues { get; }
    [NullableContextAttribute("1")]
public PdfFunction(DictionaryToken function, ArrayToken domain, ArrayToken range);
    [NullableContextAttribute("1")]
public PdfFunction(StreamToken function, ArrayToken domain, ArrayToken range);
    [CompilerGeneratedAttribute]
public DictionaryToken get_FunctionDictionary();
    [CompilerGeneratedAttribute]
public StreamToken get_FunctionStream();
    public abstract virtual FunctionTypes get_FunctionType();
    public DictionaryToken GetDictionary();
    public int get_NumberOfOutputParameters();
    public PdfRange GetRangeForOutput(int n);
    public int get_NumberOfInputParameters();
    public PdfRange GetDomainForInput(int n);
    [NullableContextAttribute("1")]
public abstract virtual Double[] Eval(Double[] input);
    [CompilerGeneratedAttribute]
protected ArrayToken get_RangeValues();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private ArrayToken get_DomainValues();
    [NullableContextAttribute("1")]
protected Double[] ClipToRange(Double[] inputValues);
    public static double ClipToRange(double x, double rangeMin, double rangeMax);
    protected static double Interpolate(double x, double xRangeMin, double xRangeMax, double yRangeMin, double yRangeMax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.PdfFunctionType0 : PdfFunction {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Int32[][] samples;
    [CompilerGeneratedAttribute]
private ArrayToken <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayToken <EncodeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayToken <DecodeValues>k__BackingField;
    public FunctionTypes FunctionType { get; }
    public ArrayToken Size { get; }
    public int BitsPerSample { get; }
    public int Order { get; }
    private ArrayToken EncodeValues { get; }
    private ArrayToken DecodeValues { get; }
    internal PdfFunctionType0(DictionaryToken function, ArrayToken domain, ArrayToken range, ArrayToken size, int bitsPerSample, int order, ArrayToken encode, ArrayToken decode);
    internal PdfFunctionType0(StreamToken function, ArrayToken domain, ArrayToken range, ArrayToken size, int bitsPerSample, int order, ArrayToken encode, ArrayToken decode);
    public virtual FunctionTypes get_FunctionType();
    [CompilerGeneratedAttribute]
public ArrayToken get_Size();
    [CompilerGeneratedAttribute]
public int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
private ArrayToken get_EncodeValues();
    [CompilerGeneratedAttribute]
private ArrayToken get_DecodeValues();
    public Nullable`1<PdfRange> GetEncodeForParameter(int paramNum);
    public Nullable`1<PdfRange> GetDecodeForParameter(int paramNum);
    private Int32[][] GetSamples();
    public virtual Double[] Eval(Double[] input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.PdfFunctionType2 : PdfFunction {
    [CompilerGeneratedAttribute]
private ArrayToken <C0>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayToken <C1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <N>k__BackingField;
    public FunctionTypes FunctionType { get; }
    public ArrayToken C0 { get; }
    public ArrayToken C1 { get; }
    public double N { get; }
    internal PdfFunctionType2(DictionaryToken function, ArrayToken domain, ArrayToken range, ArrayToken c0, ArrayToken c1, double n);
    internal PdfFunctionType2(StreamToken function, ArrayToken domain, ArrayToken range, ArrayToken c0, ArrayToken c1, double n);
    public virtual FunctionTypes get_FunctionType();
    public virtual Double[] Eval(Double[] input);
    [CompilerGeneratedAttribute]
public ArrayToken get_C0();
    [CompilerGeneratedAttribute]
public ArrayToken get_C1();
    [CompilerGeneratedAttribute]
public double get_N();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.PdfFunctionType3 : PdfFunction {
    private Double[] boundsValues;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfFunction> <FunctionsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayToken <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayToken <Encode>k__BackingField;
    public FunctionTypes FunctionType { get; }
    public IReadOnlyList`1<PdfFunction> FunctionsArray { get; }
    public ArrayToken Bounds { get; }
    public ArrayToken Encode { get; }
    internal PdfFunctionType3(DictionaryToken function, ArrayToken domain, ArrayToken range, IReadOnlyList`1<PdfFunction> functionsArray, ArrayToken bounds, ArrayToken encode);
    internal PdfFunctionType3(StreamToken function, ArrayToken domain, ArrayToken range, IReadOnlyList`1<PdfFunction> functionsArray, ArrayToken bounds, ArrayToken encode);
    public virtual FunctionTypes get_FunctionType();
    public virtual Double[] Eval(Double[] input);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PdfFunction> get_FunctionsArray();
    [CompilerGeneratedAttribute]
public ArrayToken get_Bounds();
    [CompilerGeneratedAttribute]
public ArrayToken get_Encode();
    private PdfRange GetEncodeForParameter(int n);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.PdfFunctionType4 : PdfFunction {
    private Operators operators;
    private InstructionSequence instructions;
    public FunctionTypes FunctionType { get; }
    internal PdfFunctionType4(StreamToken function, ArrayToken domain, ArrayToken range);
    public virtual FunctionTypes get_FunctionType();
    public virtual Double[] Eval(Double[] input);
}
internal class UglyToad.PdfPig.Functions.Type4.ArithmeticOperators : object {
    private static double ToRadians(double val);
    private static double ToDegrees(double val);
}
internal class UglyToad.PdfPig.Functions.Type4.BitwiseOperators : object {
}
internal class UglyToad.PdfPig.Functions.Type4.ConditionalOperators : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.Type4.ExecutionContext : object {
    private Operators operators;
    [CompilerGeneratedAttribute]
private Stack`1<object> <Stack>k__BackingField;
    public Stack`1<object> Stack { get; private set; }
    public ExecutionContext(Operators operatorSet);
    [CompilerGeneratedAttribute]
public Stack`1<object> get_Stack();
    [CompilerGeneratedAttribute]
private void set_Stack(Stack`1<object> value);
    internal void AddAllToStack(IEnumerable`1<object> values);
    public Operators GetOperators();
    public object PopNumber();
    public int PopInt();
    public double PopReal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.Type4.InstructionSequence : object {
    private List`1<object> instructions;
    public void AddName(string name);
    public void AddInteger(int value);
    public void AddReal(double value);
    public void AddBoolean(bool value);
    public void AddProc(InstructionSequence child);
    public void Execute(ExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.Type4.InstructionSequenceBuilder : AbstractSyntaxHandler {
    private InstructionSequence mainSequence;
    private Stack`1<InstructionSequence> seqStack;
    public InstructionSequence GetInstructionSequence();
    public static InstructionSequence Parse(string text);
    private InstructionSequence GetCurrentSequence();
    public void Token(Char[] text);
    public virtual void Token(string token);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Functions.Type4.Operator {
    public abstract virtual void Execute(ExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.Type4.Operators : object {
    private static Operator ABS;
    private static Operator ADD;
    private static Operator ATAN;
    private static Operator CEILING;
    private static Operator COS;
    private static Operator CVI;
    private static Operator CVR;
    private static Operator DIV;
    private static Operator EXP;
    private static Operator FLOOR;
    private static Operator IDIV;
    private static Operator LN;
    private static Operator LOG;
    private static Operator MOD;
    private static Operator MUL;
    private static Operator NEG;
    private static Operator ROUND;
    private static Operator SIN;
    private static Operator SQRT;
    private static Operator SUB;
    private static Operator TRUNCATE;
    private static Operator AND;
    private static Operator BITSHIFT;
    private static Operator EQ;
    private static Operator FALSE;
    private static Operator GE;
    private static Operator GT;
    private static Operator LE;
    private static Operator LT;
    private static Operator NE;
    private static Operator NOT;
    private static Operator OR;
    private static Operator TRUE;
    private static Operator XOR;
    private static Operator IF;
    private static Operator IFELSE;
    private static Operator COPY;
    private static Operator DUP;
    private static Operator EXCH;
    private static Operator INDEX;
    private static Operator POP;
    private static Operator ROLL;
    private Dictionary`2<string, Operator> operators;
    private static Operators();
    public Operator GetOperator(string operatorName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Functions.Type4.Parser : object {
    public static void Parse(string input, SyntaxHandler handler);
}
internal class UglyToad.PdfPig.Functions.Type4.RelationalOperators : object {
}
internal class UglyToad.PdfPig.Functions.Type4.StackOperators : object {
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.Clipper : ClipperBase {
    public static int ioReverseSolution;
    public static int ioStrictlySimple;
    public static int ioPreserveCollinear;
    private ClipperClipType m_ClipType;
    private ClipperMaxima m_Maxima;
    private ClipperTEdge m_SortedEdges;
    private List`1<ClipperIntersectNode> m_IntersectList;
    private IComparer`1<ClipperIntersectNode> m_IntersectNodeComparer;
    private bool m_ExecuteLocked;
    private ClipperPolyFillType m_ClipFillType;
    private ClipperPolyFillType m_SubjFillType;
    private List`1<ClipperJoin> m_Joins;
    private List`1<ClipperJoin> m_GhostJoins;
    private bool m_UsingPolyTree;
    [CompilerGeneratedAttribute]
private bool <ReverseSolution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictlySimple>k__BackingField;
    public bool ReverseSolution { get; public set; }
    public bool StrictlySimple { get; public set; }
    public Clipper(int InitOptions);
    private void InsertMaxima(long X);
    [CompilerGeneratedAttribute]
public bool get_ReverseSolution();
    [CompilerGeneratedAttribute]
public void set_ReverseSolution(bool value);
    [CompilerGeneratedAttribute]
public bool get_StrictlySimple();
    [CompilerGeneratedAttribute]
public void set_StrictlySimple(bool value);
    public bool Execute(ClipperClipType clipType, List`1<List`1<ClipperIntPoint>> solution, ClipperPolyFillType FillType);
    public bool Execute(ClipperClipType clipType, ClipperPolyTree polytree, ClipperPolyFillType FillType);
    public bool Execute(ClipperClipType clipType, List`1<List`1<ClipperIntPoint>> solution, ClipperPolyFillType subjFillType, ClipperPolyFillType clipFillType);
    public bool Execute(ClipperClipType clipType, ClipperPolyTree polytree, ClipperPolyFillType subjFillType, ClipperPolyFillType clipFillType);
    internal void FixHoleLinkage(ClipperOutRec outRec);
    private bool ExecuteInternal();
    private void DisposeAllPolyPts();
    private void AddJoin(ClipperOutPt Op1, ClipperOutPt Op2, ClipperIntPoint OffPt);
    private void AddGhostJoin(ClipperOutPt Op, ClipperIntPoint OffPt);
    private void InsertLocalMinimaIntoAEL(long botY);
    private void InsertEdgeIntoAEL(ClipperTEdge edge, ClipperTEdge startEdge);
    private bool E2InsertsBeforeE1(ClipperTEdge e1, ClipperTEdge e2);
    private bool IsEvenOddFillType(ClipperTEdge edge);
    private bool IsEvenOddAltFillType(ClipperTEdge edge);
    private bool IsContributing(ClipperTEdge edge);
    private void SetWindingCount(ClipperTEdge edge);
    private void AddEdgeToSEL(ClipperTEdge edge);
    internal bool PopEdgeFromSEL(ClipperTEdge& e);
    private void CopyAELToSEL();
    private void SwapPositionsInSEL(ClipperTEdge edge1, ClipperTEdge edge2);
    private void AddLocalMaxPoly(ClipperTEdge e1, ClipperTEdge e2, ClipperIntPoint pt);
    private ClipperOutPt AddLocalMinPoly(ClipperTEdge e1, ClipperTEdge e2, ClipperIntPoint pt);
    private ClipperOutPt AddOutPt(ClipperTEdge e, ClipperIntPoint pt);
    private ClipperOutPt GetLastOutPt(ClipperTEdge e);
    internal void SwapPoints(ClipperIntPoint& pt1, ClipperIntPoint& pt2);
    private bool HorzSegmentsOverlap(long seg1a, long seg1b, long seg2a, long seg2b);
    private void SetHoleState(ClipperTEdge e, ClipperOutRec outRec);
    private double GetDx(ClipperIntPoint pt1, ClipperIntPoint pt2);
    private bool FirstIsBottomPt(ClipperOutPt btmPt1, ClipperOutPt btmPt2);
    private ClipperOutPt GetBottomPt(ClipperOutPt pp);
    private ClipperOutRec GetLowermostRec(ClipperOutRec outRec1, ClipperOutRec outRec2);
    private bool OutRec1RightOfOutRec2(ClipperOutRec outRec1, ClipperOutRec outRec2);
    private ClipperOutRec GetOutRec(int idx);
    private void AppendPolygon(ClipperTEdge e1, ClipperTEdge e2);
    private void ReversePolyPtLinks(ClipperOutPt pp);
    private static void SwapSides(ClipperTEdge edge1, ClipperTEdge edge2);
    private static void SwapPolyIndexes(ClipperTEdge edge1, ClipperTEdge edge2);
    private void IntersectEdges(ClipperTEdge e1, ClipperTEdge e2, ClipperIntPoint pt);
    private void ProcessHorizontals();
    private void GetHorzDirection(ClipperTEdge HorzEdge, ClipperDirection& Dir, Int64& Left, Int64& Right);
    private void ProcessHorizontal(ClipperTEdge horzEdge);
    private ClipperTEdge GetNextInAEL(ClipperTEdge e, ClipperDirection Direction);
    private bool IsMaxima(ClipperTEdge e, double Y);
    private bool IsIntermediate(ClipperTEdge e, double Y);
    internal ClipperTEdge GetMaximaPair(ClipperTEdge e);
    internal ClipperTEdge GetMaximaPairEx(ClipperTEdge e);
    private bool ProcessIntersections(long topY);
    private void BuildIntersectList(long topY);
    private bool EdgesAdjacent(ClipperIntersectNode inode);
    private bool FixupIntersectionOrder();
    private void ProcessIntersectList();
    internal static long Round(double value);
    private static long TopX(ClipperTEdge edge, long currentY);
    private void IntersectPoint(ClipperTEdge edge1, ClipperTEdge edge2, ClipperIntPoint& ip);
    private void ProcessEdgesAtTopOfScanbeam(long topY);
    private void DoMaxima(ClipperTEdge e);
    public static void ReversePaths(List`1<List`1<ClipperIntPoint>> polys);
    public static bool Orientation(List`1<ClipperIntPoint> poly);
    private int PointCount(ClipperOutPt pts);
    private void BuildResult(List`1<List`1<ClipperIntPoint>> polyg);
    private void BuildResult2(ClipperPolyTree polytree);
    private void FixupOutPolyline(ClipperOutRec outrec);
    private void FixupOutPolygon(ClipperOutRec outRec);
    private ClipperOutPt DupOutPt(ClipperOutPt outPt, bool InsertAfter);
    private bool GetOverlap(long a1, long a2, long b1, long b2, Int64& Left, Int64& Right);
    private bool JoinHorz(ClipperOutPt op1, ClipperOutPt op1b, ClipperOutPt op2, ClipperOutPt op2b, ClipperIntPoint Pt, bool DiscardLeft);
    private bool JoinPoints(ClipperJoin j, ClipperOutRec outRec1, ClipperOutRec outRec2);
    public static int PointInPolygon(ClipperIntPoint pt, List`1<ClipperIntPoint> path);
    private static int PointInPolygon(ClipperIntPoint pt, ClipperOutPt op);
    private static bool Poly2ContainsPoly1(ClipperOutPt outPt1, ClipperOutPt outPt2);
    private void FixupFirstLefts1(ClipperOutRec OldOutRec, ClipperOutRec NewOutRec);
    private void FixupFirstLefts2(ClipperOutRec innerOutRec, ClipperOutRec outerOutRec);
    private void FixupFirstLefts3(ClipperOutRec OldOutRec, ClipperOutRec NewOutRec);
    private static ClipperOutRec ParseFirstLeft(ClipperOutRec FirstLeft);
    private void JoinCommonEdges();
    private void UpdateOutPtIdxs(ClipperOutRec outrec);
    private void DoSimplePolygons();
    public static double Area(List`1<ClipperIntPoint> poly);
    internal double Area(ClipperOutRec outRec);
    internal double Area(ClipperOutPt op);
    public static List`1<List`1<ClipperIntPoint>> SimplifyPolygon(List`1<ClipperIntPoint> poly, ClipperPolyFillType fillType);
    public static List`1<List`1<ClipperIntPoint>> SimplifyPolygons(List`1<List`1<ClipperIntPoint>> polys, ClipperPolyFillType fillType);
    private static double DistanceFromLineSqrd(ClipperIntPoint pt, ClipperIntPoint ln1, ClipperIntPoint ln2);
    private static bool SlopesNearCollinear(ClipperIntPoint pt1, ClipperIntPoint pt2, ClipperIntPoint pt3, double distSqrd);
    private static bool PointsAreClose(ClipperIntPoint pt1, ClipperIntPoint pt2, double distSqrd);
    private static ClipperOutPt ExcludeOp(ClipperOutPt op);
    public static List`1<ClipperIntPoint> CleanPolygon(List`1<ClipperIntPoint> path, double distance);
    public static List`1<List`1<ClipperIntPoint>> CleanPolygons(List`1<List`1<ClipperIntPoint>> polys, double distance);
    internal static List`1<List`1<ClipperIntPoint>> Minkowski(List`1<ClipperIntPoint> pattern, List`1<ClipperIntPoint> path, bool IsSum, bool IsClosed);
    public static List`1<List`1<ClipperIntPoint>> MinkowskiSum(List`1<ClipperIntPoint> pattern, List`1<ClipperIntPoint> path, bool pathIsClosed);
    private static List`1<ClipperIntPoint> TranslatePath(List`1<ClipperIntPoint> path, ClipperIntPoint delta);
    public static List`1<List`1<ClipperIntPoint>> MinkowskiSum(List`1<ClipperIntPoint> pattern, List`1<List`1<ClipperIntPoint>> paths, bool pathIsClosed);
    public static List`1<List`1<ClipperIntPoint>> MinkowskiDiff(List`1<ClipperIntPoint> poly1, List`1<ClipperIntPoint> poly2);
    public static List`1<List`1<ClipperIntPoint>> PolyTreeToPaths(ClipperPolyTree polytree);
    internal static void AddPolyNodeToPaths(ClipperPolyNode polynode, NodeType nt, List`1<List`1<ClipperIntPoint>> paths);
    public static List`1<List`1<ClipperIntPoint>> OpenPathsFromPolyTree(ClipperPolyTree polytree);
    public static List`1<List`1<ClipperIntPoint>> ClosedPathsFromPolyTree(ClipperPolyTree polytree);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperBase : object {
    internal static double Horizontal;
    internal static int Skip;
    internal static int Unassigned;
    internal static double Tolerance;
    public static long loRange;
    public static long hiRange;
    internal ClipperLocalMinima m_MinimaList;
    internal ClipperLocalMinima m_CurrentLM;
    internal List`1<List`1<ClipperTEdge>> m_edges;
    internal ClipperScanbeam m_Scanbeam;
    internal List`1<ClipperOutRec> m_PolyOuts;
    internal ClipperTEdge m_ActiveEdges;
    internal bool m_UseFullRange;
    internal bool m_HasOpenPaths;
    [CompilerGeneratedAttribute]
private bool <PreserveCollinear>k__BackingField;
    public bool PreserveCollinear { get; public set; }
    internal static bool NearZero(double val);
    [CompilerGeneratedAttribute]
public bool get_PreserveCollinear();
    [CompilerGeneratedAttribute]
public void set_PreserveCollinear(bool value);
    public void Swap(Int64& val1, Int64& val2);
    internal static bool IsHorizontal(ClipperTEdge e);
    internal bool PointIsVertex(ClipperIntPoint pt, ClipperOutPt pp);
    internal bool PointOnLineSegment(ClipperIntPoint pt, ClipperIntPoint linePt1, ClipperIntPoint linePt2, bool UseFullRange);
    internal bool PointOnPolygon(ClipperIntPoint pt, ClipperOutPt pp, bool UseFullRange);
    internal static bool SlopesEqual(ClipperTEdge e1, ClipperTEdge e2, bool UseFullRange);
    internal static bool SlopesEqual(ClipperIntPoint pt1, ClipperIntPoint pt2, ClipperIntPoint pt3, bool UseFullRange);
    internal static bool SlopesEqual(ClipperIntPoint pt1, ClipperIntPoint pt2, ClipperIntPoint pt3, ClipperIntPoint pt4, bool UseFullRange);
    public virtual void Clear();
    private void DisposeLocalMinimaList();
    private void RangeTest(ClipperIntPoint Pt, Boolean& useFullRange);
    private void InitEdge(ClipperTEdge e, ClipperTEdge eNext, ClipperTEdge ePrev, ClipperIntPoint pt);
    private void InitEdge2(ClipperTEdge e, ClipperPolyType polyType);
    private ClipperTEdge FindNextLocMin(ClipperTEdge E);
    private ClipperTEdge ProcessBound(ClipperTEdge E, bool LeftBoundIsForward);
    public bool AddPath(List`1<ClipperIntPoint> pg, ClipperPolyType polyType, bool Closed);
    public bool AddPaths(List`1<List`1<ClipperIntPoint>> ppg, ClipperPolyType polyType, bool closed);
    internal bool Pt2IsBetweenPt1AndPt3(ClipperIntPoint pt1, ClipperIntPoint pt2, ClipperIntPoint pt3);
    private ClipperTEdge RemoveEdge(ClipperTEdge e);
    private void SetDx(ClipperTEdge e);
    private void InsertLocalMinima(ClipperLocalMinima newLm);
    internal bool PopLocalMinima(long Y, ClipperLocalMinima& current);
    private void ReverseHorizontal(ClipperTEdge e);
    internal virtual void Reset();
    public static ClipperIntRect GetBounds(List`1<List`1<ClipperIntPoint>> paths);
    internal void InsertScanbeam(long Y);
    internal bool PopScanbeam(Int64& Y);
    internal bool LocalMinimaPending();
    internal ClipperOutRec CreateOutRec();
    internal void DisposeOutRec(int index);
    internal void UpdateEdgeIntoAEL(ClipperTEdge& e);
    internal void SwapPositionsInAEL(ClipperTEdge edge1, ClipperTEdge edge2);
    internal void DeleteFromAEL(ClipperTEdge e);
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperClipType : Enum {
    public byte value__;
    public static ClipperClipType Intersection;
    public static ClipperClipType Union;
    public static ClipperClipType Difference;
    public static ClipperClipType Xor;
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperDirection : Enum {
    public byte value__;
    public static ClipperDirection RightToLeft;
    public static ClipperDirection LeftToRight;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperDoublePoint : ValueType {
    public double X;
    public double Y;
    public ClipperDoublePoint(double x, double y);
    public ClipperDoublePoint(ClipperDoublePoint dp);
    public ClipperDoublePoint(ClipperIntPoint ip);
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperEdgeSide : Enum {
    public byte value__;
    public static ClipperEdgeSide Left;
    public static ClipperEdgeSide Right;
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperEndType : Enum {
    public byte value__;
    public static ClipperEndType ClosedPolygon;
    public static ClipperEndType ClosedLine;
    public static ClipperEndType OpenButt;
    public static ClipperEndType OpenSquare;
    public static ClipperEndType OpenRound;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperException : Exception {
    [NullableContextAttribute("1")]
public ClipperException(string description);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperInt128 : ValueType {
    private long hi;
    private ulong lo;
    public ClipperInt128(long _lo);
    public ClipperInt128(long _hi, ulong _lo);
    public ClipperInt128(ClipperInt128 val);
    public bool IsNegative();
    public static bool op_Equality(ClipperInt128 val1, ClipperInt128 val2);
    public static bool op_Inequality(ClipperInt128 val1, ClipperInt128 val2);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_GreaterThan(ClipperInt128 val1, ClipperInt128 val2);
    public static bool op_LessThan(ClipperInt128 val1, ClipperInt128 val2);
    public static ClipperInt128 op_Addition(ClipperInt128 lhs, ClipperInt128 rhs);
    public static ClipperInt128 op_Subtraction(ClipperInt128 lhs, ClipperInt128 rhs);
    public static ClipperInt128 op_UnaryNegation(ClipperInt128 val);
    public static double op_Explicit(ClipperInt128 val);
    public static ClipperInt128 Int128Mul(long lhs, long rhs);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperIntersectNode : object {
    internal ClipperTEdge Edge1;
    internal ClipperTEdge Edge2;
    internal ClipperIntPoint Pt;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperIntersectNodeSort : object {
    public sealed virtual int Compare(ClipperIntersectNode node1, ClipperIntersectNode node2);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperIntPoint : ValueType {
    public long X;
    public long Y;
    public ClipperIntPoint(long x, long y);
    public ClipperIntPoint(double x, double y);
    public ClipperIntPoint(ClipperIntPoint pt);
    public static bool op_Equality(ClipperIntPoint a, ClipperIntPoint b);
    public static bool op_Inequality(ClipperIntPoint a, ClipperIntPoint b);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperIntRect : ValueType {
    public long Left;
    public long Top;
    public long Right;
    public long Bottom;
    public ClipperIntRect(long l, long t, long r, long b);
    public ClipperIntRect(ClipperIntRect ir);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperJoin : object {
    public ClipperOutPt OutPt1;
    public ClipperOutPt OutPt2;
    public ClipperIntPoint OffPt;
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperJoinType : Enum {
    public byte value__;
    public static ClipperJoinType Square;
    public static ClipperJoinType Round;
    public static ClipperJoinType Miter;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperLocalMinima : object {
    public long Y;
    public ClipperTEdge LeftBound;
    public ClipperTEdge RightBound;
    public ClipperLocalMinima Next;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperMaxima : object {
    public long X;
    public ClipperMaxima Next;
    public ClipperMaxima Previous;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperOffset : object {
    private static double DefArcTolerance;
    private ClipperIntPoint lowest;
    private ClipperPolyNode polyNodes;
    [CompilerGeneratedAttribute]
private double <ArcTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MiterLimit>k__BackingField;
    public double ArcTolerance { get; public set; }
    public double MiterLimit { get; public set; }
    public ClipperOffset(double miterLimit, double arcTolerance);
    [CompilerGeneratedAttribute]
public double get_ArcTolerance();
    [CompilerGeneratedAttribute]
public void set_ArcTolerance(double value);
    [CompilerGeneratedAttribute]
public double get_MiterLimit();
    [CompilerGeneratedAttribute]
public void set_MiterLimit(double value);
    public void Clear();
    public void AddPath(List`1<ClipperIntPoint> path, ClipperJoinType joinType, ClipperEndType endType);
    public void AddPaths(List`1<List`1<ClipperIntPoint>> paths, ClipperJoinType joinType, ClipperEndType endType);
    public static long Round(double value);
    public static ClipperDoublePoint GetUnitNormal(ClipperIntPoint pt1, ClipperIntPoint pt2);
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperOutPt : object {
    public int Index;
    public ClipperIntPoint Pt;
    public ClipperOutPt Next;
    public ClipperOutPt Prev;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperOutRec : object {
    public int Idx;
    public bool IsHole;
    public bool IsOpen;
    public ClipperOutRec FirstLeft;
    public ClipperOutPt Pts;
    public ClipperOutPt BottomPt;
    public ClipperPolyNode PolyNode;
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperPolyFillType : Enum {
    public byte value__;
    public static ClipperPolyFillType EvenOdd;
    public static ClipperPolyFillType NonZero;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperPolyNode : object {
    [CompilerGeneratedAttribute]
private ClipperPolyNode <Parent>k__BackingField;
    internal List`1<ClipperIntPoint> Polygon;
    internal int Index;
    internal ClipperJoinType JoinType;
    internal ClipperEndType EndType;
    internal List`1<ClipperPolyNode> Children;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    public ClipperPolyNode Parent { get; public set; }
    public bool IsHole { get; }
    public bool IsOpen { get; public set; }
    public int ChildCount { get; }
    public List`1<ClipperIntPoint> Contour { get; }
    [CompilerGeneratedAttribute]
public ClipperPolyNode get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(ClipperPolyNode value);
    public bool get_IsHole();
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
public void set_IsOpen(bool value);
    private bool IsHoleNode();
    public int get_ChildCount();
    public List`1<ClipperIntPoint> get_Contour();
    internal void AddChild(ClipperPolyNode child);
    public ClipperPolyNode GetNext();
    internal ClipperPolyNode GetNextSiblingUp();
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperPolyTree : ClipperPolyNode {
    internal List`1<ClipperPolyNode> AllPolys;
    public int Total { get; }
    public void Clear();
    public ClipperPolyNode GetFirst();
    public int get_Total();
}
internal enum UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperPolyType : Enum {
    public byte value__;
    public static ClipperPolyType Subject;
    public static ClipperPolyType Clip;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperScanbeam : object {
    public long Y;
    public ClipperScanbeam Next;
}
internal class UglyToad.PdfPig.Geometry.ClipperLibrary.ClipperTEdge : object {
    internal ClipperIntPoint Bot;
    internal ClipperIntPoint Curr;
    internal ClipperIntPoint Top;
    internal ClipperIntPoint Delta;
    internal double Dx;
    internal ClipperPolyType PolyTyp;
    internal ClipperEdgeSide Side;
    internal int WindDelta;
    internal int WindCnt;
    internal int WindCnt2;
    internal int OutIdx;
    internal ClipperTEdge Next;
    internal ClipperTEdge Prev;
    internal ClipperTEdge NextInLML;
    internal ClipperTEdge NextInAEL;
    internal ClipperTEdge PrevInAEL;
    internal ClipperTEdge NextInSEL;
    internal ClipperTEdge PrevInSEL;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Geometry.ClippingExtensions : object {
    public static double Factor;
    private static int LinesInCurve;
    [ExtensionAttribute]
public static PdfPath Clip(PdfPath clipping, PdfPath subject, ILog log);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Geometry.ClippingExtensions/<ToClipperPolygon>d__3")]
[ExtensionAttribute]
internal static IEnumerable`1<ClipperIntPoint> ToClipperPolygon(PdfSubpath pdfPath);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Geometry.ClippingExtensions/<ToClipperPolygon>d__4")]
[ExtensionAttribute]
internal static IEnumerable`1<ClipperIntPoint> ToClipperPolygon(PdfRectangle rectangle);
    [ExtensionAttribute]
internal static ClipperIntPoint ToClipperIntPoint(PdfPoint point);
    [ExtensionAttribute]
internal static List`1<ClipperIntPoint> ToClipperIntPoint(PdfLine line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.Geometry.GeometryExtensions : object {
    private static double epsilon;
    private static double OneThird;
    private static double SqrtOfThree;
    private static bool ccw(PdfPoint point1, PdfPoint point2, PdfPoint point3);
    [ExtensionAttribute]
public static double DotProduct(PdfPoint point1, PdfPoint point2);
    [ExtensionAttribute]
public static PdfPoint Add(PdfPoint point1, PdfPoint point2);
    [ExtensionAttribute]
public static PdfPoint Subtract(PdfPoint point1, PdfPoint point2);
    [NullableContextAttribute("0")]
private static PdfRectangle ParametricPerpendicularProjection(ReadOnlySpan`1<PdfPoint> polygon);
    public static PdfRectangle MinimumAreaRectangle(IEnumerable`1<PdfPoint> points);
    public static PdfRectangle MinimumAreaRectangle(PdfPoint[] points);
    public static PdfRectangle OrientedBoundingBox(IReadOnlyList`1<PdfPoint> points);
    public static IReadOnlyCollection`1<PdfPoint> GrahamScan(IEnumerable`1<PdfPoint> points);
    public static IReadOnlyCollection`1<PdfPoint> GrahamScan(PdfPoint[] points);
    [ExtensionAttribute]
public static bool Contains(PdfRectangle rectangle, PdfPoint point, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfRectangle rectangle, PdfRectangle other, bool includeBorder);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfRectangle rectangle, PdfRectangle other);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfPath path, PdfRectangle rectangle, bool includeBorder);
    [ExtensionAttribute]
public static Nullable`1<PdfRectangle> Intersect(PdfRectangle rectangle, PdfRectangle other);
    [ExtensionAttribute]
public static PdfRectangle Normalise(PdfRectangle rectangle);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfRectangle rectangle, PdfLine line);
    [ExtensionAttribute]
public static Nullable`1<PdfLine> Intersect(PdfRectangle rectangle, PdfLine line);
    [ExtensionAttribute]
public static List`1<PdfLine> Intersect(PdfRectangle rectangle, List`1<PdfLine> lines);
    [ExtensionAttribute]
public static bool Contains(PdfLine line, PdfPoint point);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfLine line, PdfLine other);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfLine line, Line other);
    [ExtensionAttribute]
public static Nullable`1<PdfPoint> Intersect(PdfLine line, PdfLine other);
    [ExtensionAttribute]
public static Nullable`1<PdfPoint> Intersect(PdfLine line, Line other);
    [ExtensionAttribute]
public static bool ParallelTo(PdfLine line, PdfLine other);
    [ExtensionAttribute]
public static bool ParallelTo(PdfLine line, Line other);
    [ExtensionAttribute]
public static Nullable`1<PdfLine> Intersect(PdfLine line, PdfRectangle rectangle);
    [ExtensionAttribute]
public static bool IntersectsWith(PdfLine line, PdfRectangle rectangle);
    [ExtensionAttribute]
public static bool Contains(Line line, PdfPoint point);
    [ExtensionAttribute]
public static bool IntersectsWith(Line line, Line other);
    [ExtensionAttribute]
public static bool IntersectsWith(Line line, PdfLine other);
    [ExtensionAttribute]
public static Nullable`1<PdfPoint> Intersect(Line line, Line other);
    [ExtensionAttribute]
public static Nullable`1<PdfPoint> Intersect(Line line, PdfLine other);
    [ExtensionAttribute]
public static bool ParallelTo(Line line, Line other);
    [ExtensionAttribute]
public static bool ParallelTo(Line line, PdfLine other);
    private static bool Contains(PdfPoint pl1, PdfPoint pl2, PdfPoint point);
    public static bool IntersectsWith(PdfPoint p11, PdfPoint p12, PdfPoint p21, PdfPoint p22);
    private static Nullable`1<PdfPoint> Intersect(PdfPoint p11, PdfPoint p12, PdfPoint p21, PdfPoint p22);
    [NullableContextAttribute("2")]
private static PdfPoint[] Intersect(PdfRectangle rectangle, PdfPoint pl1, PdfPoint pl2);
    public static bool IntersectsWith(PdfRectangle rectangle, PdfPoint pl1, PdfPoint pl2);
    private static bool ParallelTo(PdfPoint p11, PdfPoint p12, PdfPoint p21, PdfPoint p22);
    [ExtensionAttribute]
public static ValueTuple`2<CubicBezierCurve, CubicBezierCurve> Split(CubicBezierCurve bezierCurve, double tau);
    [ExtensionAttribute]
public static bool IntersectsWith(CubicBezierCurve bezierCurve, PdfLine line);
    [ExtensionAttribute]
public static bool IntersectsWith(CubicBezierCurve bezierCurve, Line line);
    private static bool IntersectsWith(CubicBezierCurve bezierCurve, PdfPoint p1, PdfPoint p2);
    [ExtensionAttribute]
public static PdfPoint[] Intersect(CubicBezierCurve bezierCurve, PdfLine line);
    [ExtensionAttribute]
public static PdfPoint[] Intersect(CubicBezierCurve bezierCurve, Line line);
    private static PdfPoint[] Intersect(CubicBezierCurve bezierCurve, PdfPoint p1, PdfPoint p2);
    [ExtensionAttribute]
public static Double[] IntersectT(CubicBezierCurve bezierCurve, PdfLine line);
    [ExtensionAttribute]
public static Double[] IntersectT(CubicBezierCurve bezierCurve, Line line);
    private static Double[] IntersectT(CubicBezierCurve bezierCurve, PdfPoint p1, PdfPoint p2);
    private static double CrossProduct(ClipperIntPoint pt1, ClipperIntPoint pt2, ClipperIntPoint pt3);
    private static int PointInPathsWindingCount(ClipperIntPoint pt, List`1<List`1<ClipperIntPoint>> paths);
    private static bool PointInPaths(ClipperIntPoint pt, List`1<List`1<ClipperIntPoint>> paths, ClipperPolyFillType fillRule, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfSubpath subpath, PdfPoint point, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfSubpath subpath, PdfRectangle rectangle, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfSubpath subpath, PdfSubpath other, bool includeBorder);
    [ExtensionAttribute]
public static double GetArea(PdfPath path);
    [ExtensionAttribute]
public static bool Contains(PdfPath path, PdfPoint point, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfPath path, PdfRectangle rectangle, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfPath path, PdfSubpath subpath, bool includeBorder);
    [ExtensionAttribute]
public static bool Contains(PdfPath path, PdfPath other, bool includeBorder);
    [NullableContextAttribute("0")]
private static ValueTuple`2<double, double> GetSlopeIntercept(PdfPoint point1, PdfPoint point2);
    private static double CubicRoot(double d);
    private static Double[] SolveCubicEquation(double a, double b, double c, double d);
    [ExtensionAttribute]
internal static string ToSvg(PdfSubpath p, double height);
    [ExtensionAttribute]
internal static string ToFullSvg(PdfSubpath p, double height);
    [CompilerGeneratedAttribute]
internal static double <GrahamScan>g__polarAngle|11_0(PdfPoint& point1, PdfPoint& point2);
    [CompilerGeneratedAttribute]
internal static double <Contains>g__area|12_0(PdfPoint& p1, PdfPoint p2, PdfPoint p3);
    [CompilerGeneratedAttribute]
internal static double <SolveCubicEquation>g__vietTrigonometricSolution|68_0(double p_, double q_, double k);
    [CompilerGeneratedAttribute]
internal static string <ToFullSvg>g__BboxToRect|70_0(PdfRectangle box, string stroke);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Geometry.PdfVector : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public PdfVector(double x, double y);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public PdfVector Scale(double scale);
    public double GetMagnitude();
    public PdfVector Subtract(PdfVector vector);
    public PdfPoint ToPoint();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Geometry.UserSpaceUnit : ValueType {
    public static UserSpaceUnit Default;
    [CompilerGeneratedAttribute]
private int <PointMultiples>k__BackingField;
    public int PointMultiples { get; }
    internal UserSpaceUnit(int pointMultiples);
    private static UserSpaceUnit();
    [CompilerGeneratedAttribute]
public int get_PointMultiples();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Graphics.BaseStreamProcessor`1 : object {
    protected IResourceStore ResourceStore;
    protected UserSpaceUnit UserSpaceUnit;
    protected PageRotationDegrees Rotation;
    protected IPdfTokenScanner PdfScanner;
    protected IPageContentParser PageContentParser;
    protected ILookupFilterProvider FilterProvider;
    protected ParsingOptions ParsingOptions;
    protected Stack`1<CurrentGraphicsState> GraphicsStack;
    [NullableAttribute("2")]
protected IFont ActiveExtendedGraphicsStateFont;
    [NullableAttribute("2")]
protected InlineImageBuilder InlineImageBuilder;
    protected int PageNumber;
    protected int TextSequence;
    [CompilerGeneratedAttribute]
private TextMatrices <TextMatrices>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <CurrentPosition>k__BackingField;
    private Dictionary`2<XObjectType, List`1<XObjectContentRecord>> xObjects;
    public TextMatrices TextMatrices { get; }
    public TransformationMatrix CurrentTransformationMatrix { get; }
    public PdfPoint CurrentPosition { get; public set; }
    public int StackSize { get; }
    protected BaseStreamProcessor`1(int pageNumber, IResourceStore resourceStore, IPdfTokenScanner pdfScanner, IPageContentParser pageContentParser, ILookupFilterProvider filterProvider, CropBox cropBox, UserSpaceUnit userSpaceUnit, PageRotationDegrees rotation, TransformationMatrix& initialMatrix, ParsingOptions parsingOptions);
    [CompilerGeneratedAttribute]
public sealed virtual TextMatrices get_TextMatrices();
    public TransformationMatrix get_CurrentTransformationMatrix();
    [CompilerGeneratedAttribute]
public sealed virtual PdfPoint get_CurrentPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CurrentPosition(PdfPoint value);
    public sealed virtual int get_StackSize();
    protected static PdfPath GetInitialClipping(CropBox cropBox);
    public abstract virtual TPageContent Process(int pageNumberCurrent, IReadOnlyList`1<IGraphicsStateOperation> operations);
    protected void ProcessOperations(IReadOnlyList`1<IGraphicsStateOperation> operations);
    protected Stack`1<CurrentGraphicsState> CloneAllStates();
    [DebuggerStepThroughAttribute]
public sealed virtual CurrentGraphicsState GetCurrentState();
    public virtual void PopState();
    public virtual void PushState();
    public sealed virtual void ShowText(IInputBytes bytes);
    public abstract virtual void RenderGlyph(IFont font, CurrentGraphicsState currentState, double fontSize, double pointSize, int code, string unicode, long currentOffset, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) renderingMatrix, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) textMatrix, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) transformationMatrix, CharacterBoundingBox characterBoundingBox);
    public virtual void ShowPositionedText(IReadOnlyList`1<IToken> tokens);
    public virtual void ApplyXObject(NameToken xObjectName);
    protected abstract virtual void RenderXObjectImage(XObjectContentRecord xObjectContentRecord);
    protected virtual void ProcessFormXObject(StreamToken formStream, NameToken xObjectName);
    protected virtual bool HasFormXObjectCircularReference(StreamToken formStream, NameToken xObjectName, IReadOnlyList`1<IGraphicsStateOperation> operations);
    public abstract virtual void BeginSubpath();
    public abstract virtual Nullable`1<PdfPoint> CloseSubpath();
    public abstract virtual void StrokePath(bool close);
    public abstract virtual void FillPath(FillingRule fillingRule, bool close);
    public abstract virtual void FillStrokePath(FillingRule fillingRule, bool close);
    public abstract virtual void MoveTo(double x, double y);
    public abstract virtual void BezierCurveTo(double x2, double y2, double x3, double y3);
    public abstract virtual void BezierCurveTo(double x1, double y1, double x2, double y2, double x3, double y3);
    public abstract virtual void LineTo(double x, double y);
    public abstract virtual void Rectangle(double x, double y, double width, double height);
    public abstract virtual void EndPath();
    public abstract virtual void ClosePath();
    public abstract virtual void ModifyClippingIntersect(FillingRule clippingRule);
    public virtual void SetNamedGraphicsState(NameToken stateName);
    public virtual void BeginInlineImage();
    public virtual void SetInlineImageProperties(IReadOnlyDictionary`2<NameToken, IToken> properties);
    [NullableContextAttribute("0")]
public virtual void EndInlineImage(ReadOnlyMemory`1<byte> bytes);
    protected abstract virtual void RenderInlineImage(InlineImage inlineImage);
    [NullableContextAttribute("2")]
public abstract virtual void BeginMarkedContent(NameToken name, NameToken propertyDictionaryName, DictionaryToken properties);
    public abstract virtual void EndMarkedContent();
    private void AdjustTextMatrix(double tx, double ty);
    public virtual void SetFlatnessTolerance(double tolerance);
    public virtual void SetLineCap(LineCapStyle cap);
    public virtual void SetLineDashPattern(LineDashPattern pattern);
    public virtual void SetLineJoin(LineJoinStyle join);
    public virtual void SetLineWidth(double width);
    public virtual void SetMiterLimit(double limit);
    public virtual void MoveToNextLineWithOffset();
    public virtual void SetFontAndSize(NameToken font, double size);
    public virtual void SetHorizontalScaling(double scale);
    public virtual void SetTextLeading(double leading);
    public virtual void SetTextRenderingMode(TextRenderingMode mode);
    public virtual void SetTextRise(double rise);
    public virtual void SetWordSpacing(double spacing);
    public virtual void ModifyCurrentTransformationMatrix(Double[] value);
    public virtual void SetCharacterSpacing(double spacing);
    public abstract virtual void PaintShading(NameToken shadingName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.AxialShading : Shading {
    [CompilerGeneratedAttribute]
private Double[] <Coords>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Extend>k__BackingField;
    public Double[] Coords { get; }
    public Double[] Domain { get; }
    public PdfFunction[] Functions { get; }
    public Boolean[] Extend { get; }
    public AxialShading(bool antiAlias, DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, Double[] coords, Double[] domain, PdfFunction[] functions, Boolean[] extend);
    [CompilerGeneratedAttribute]
public Double[] get_Coords();
    [CompilerGeneratedAttribute]
public Double[] get_Domain();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
    [CompilerGeneratedAttribute]
public Boolean[] get_Extend();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.CalGrayColorSpaceDetails : ColorSpaceDetails {
    private CIEBasedColorSpaceTransformer colorSpaceTransformer;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <WhitePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <BlackPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Gamma>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public IReadOnlyList`1<double> WhitePoint { get; }
    public IReadOnlyList`1<double> BlackPoint { get; }
    public double Gamma { get; }
    public CalGrayColorSpaceDetails(Double[] whitePoint, Double[] blackPoint, Nullable`1<double> gamma);
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_WhitePoint();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_BlackPoint();
    [CompilerGeneratedAttribute]
public double get_Gamma();
    private RGBColor TransformToRGB(double colorA);
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <.ctor>b__14_0(ValueTuple`3<double, double, double> color);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.CalRGBColorSpaceDetails : ColorSpaceDetails {
    private CIEBasedColorSpaceTransformer colorSpaceTransformer;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <WhitePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <BlackPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Gamma>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Matrix>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public IReadOnlyList`1<double> WhitePoint { get; }
    public IReadOnlyList`1<double> BlackPoint { get; }
    public IReadOnlyList`1<double> Gamma { get; }
    public IReadOnlyList`1<double> Matrix { get; }
    [NullableContextAttribute("2")]
public CalRGBColorSpaceDetails(Double[] whitePoint, Double[] blackPoint, Double[] gamma, Double[] matrix);
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_WhitePoint();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_BlackPoint();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Gamma();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Matrix();
    [NullableContextAttribute("0")]
private RGBColor TransformToRGB(ValueTuple`3<double, double, double> colorAbc);
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <.ctor>b__17_0(ValueTuple`3<double, double, double> color);
}
internal class UglyToad.PdfPig.Graphics.Colors.ChromaticAdaptation : object {
    [NullableAttribute("1")]
private Matrix3x3 adaptationMatrix;
    public ChromaticAdaptation(ValueTuple`3<double, double, double> sourceReferenceWhite, ValueTuple`3<double, double, double> destinationReferenceWhite, Method method);
    public ValueTuple`3<double, double, double> Transform(ValueTuple`3<double, double, double> sourceColor);
    [NullableContextAttribute("1")]
private static Matrix3x3 GetConeResponseDomain(Method method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Graphics.Colors.CIEBasedColorSpaceTransformer : object {
    private RGBWorkingSpace destinationWorkingSpace;
    private Matrix3x3 transformationMatrix;
    private ChromaticAdaptation chromaticAdaptation;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> <DecoderABC>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> <DecoderLMN>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x3 <MatrixABC>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x3 <MatrixLMN>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> DecoderABC { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> DecoderLMN { get; public set; }
    public Matrix3x3 MatrixABC { get; public set; }
    public Matrix3x3 MatrixLMN { get; public set; }
    [NullableContextAttribute("0")]
public CIEBasedColorSpaceTransformer(ValueTuple`3<double, double, double> sourceReferenceWhite, RGBWorkingSpace destinationWorkingSpace);
    [CompilerGeneratedAttribute]
public Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> get_DecoderABC();
    [CompilerGeneratedAttribute]
public void set_DecoderABC(Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> value);
    [CompilerGeneratedAttribute]
public Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> get_DecoderLMN();
    [CompilerGeneratedAttribute]
public void set_DecoderLMN(Func`2<ValueTuple`3<double, double, double>, ValueTuple`3<double, double, double>> value);
    [CompilerGeneratedAttribute]
public Matrix3x3 get_MatrixABC();
    [CompilerGeneratedAttribute]
public void set_MatrixABC(Matrix3x3 value);
    [CompilerGeneratedAttribute]
public Matrix3x3 get_MatrixLMN();
    [CompilerGeneratedAttribute]
public void set_MatrixLMN(Matrix3x3 value);
    [NullableContextAttribute("0")]
public ValueTuple`3<double, double, double> TransformToRGB(ValueTuple`3<double, double, double> color);
    [NullableContextAttribute("0")]
private ValueTuple`3<double, double, double> TransformToXYZ(ValueTuple`3<double, double, double> color);
    private static double Clamp(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.CMYKColor : object {
    [CompilerGeneratedAttribute]
private static IColor <Black>k__BackingField;
    [CompilerGeneratedAttribute]
private static IColor <White>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    [CompilerGeneratedAttribute]
private double <M>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <K>k__BackingField;
    public static IColor Black { get; }
    public static IColor White { get; }
    public ColorSpace ColorSpace { get; }
    public double C { get; }
    public double M { get; }
    public double Y { get; }
    public double K { get; }
    public CMYKColor(double c, double m, double y, double k);
    private static CMYKColor();
    [CompilerGeneratedAttribute]
public static IColor get_Black();
    [CompilerGeneratedAttribute]
public static IColor get_White();
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public double get_M();
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public double get_K();
    [NullableContextAttribute("0")]
public sealed virtual ValueTuple`3<double, double, double> ToRGBValues();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(CMYKColor other);
    public virtual int GetHashCode();
    public static bool op_Equality(CMYKColor color1, CMYKColor color2);
    public static bool op_Inequality(CMYKColor color1, CMYKColor color2);
    public virtual string ToString();
}
public enum UglyToad.PdfPig.Graphics.Colors.ColorSpace : Enum {
    public int value__;
    public static ColorSpace DeviceGray;
    public static ColorSpace DeviceRGB;
    public static ColorSpace DeviceCMYK;
    public static ColorSpace CalGray;
    public static ColorSpace CalRGB;
    public static ColorSpace Lab;
    public static ColorSpace ICCBased;
    public static ColorSpace Indexed;
    public static ColorSpace Pattern;
    public static ColorSpace Separation;
    public static ColorSpace DeviceN;
}
public abstract class UglyToad.PdfPig.Graphics.Colors.ColorSpaceDetails : object {
    [CompilerGeneratedAttribute]
private ColorSpace <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <BaseType>k__BackingField;
    public ColorSpace Type { get; }
    public int NumberOfColorComponents { get; }
    public ColorSpace BaseType { get; protected set; }
    internal int BaseNumberOfColorComponents { get; }
    protected internal ColorSpaceDetails(ColorSpace type);
    [CompilerGeneratedAttribute]
public ColorSpace get_Type();
    public abstract virtual int get_NumberOfColorComponents();
    [CompilerGeneratedAttribute]
public ColorSpace get_BaseType();
    [CompilerGeneratedAttribute]
protected void set_BaseType(ColorSpace value);
    internal abstract virtual int get_BaseNumberOfColorComponents();
    [NullableContextAttribute("1")]
public abstract virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("1")]
internal abstract virtual Double[] Process(Double[] values);
    [NullableContextAttribute("2")]
public abstract virtual IColor GetInitializeColor();
    internal abstract virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    protected static byte ConvertToByte(double componentValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.Graphics.Colors.ColorSpaceExtensions : object {
    [ExtensionAttribute]
public static ColorSpaceFamily GetFamily(ColorSpace colorSpace);
    [ExtensionAttribute]
public static bool TryMapToColorSpace(NameToken name, ColorSpace& colorspace);
    [ExtensionAttribute]
public static NameToken ToNameToken(ColorSpace colorSpace);
}
public enum UglyToad.PdfPig.Graphics.Colors.ColorSpaceFamily : Enum {
    public int value__;
    public static ColorSpaceFamily Device;
    public static ColorSpaceFamily CIEBased;
    public static ColorSpaceFamily Special;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.CoonsPatchMeshesShading : Shading {
    [CompilerGeneratedAttribute]
private int <BitsPerCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Decode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    public int BitsPerCoordinate { get; }
    public int BitsPerComponent { get; }
    public int BitsPerFlag { get; }
    public Double[] Decode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PdfFunction[] Functions { get; }
    public CoonsPatchMeshesShading(bool antiAlias, StreamToken shadingStream, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, int bitsPerCoordinate, int bitsPerComponent, int bitsPerFlag, Double[] decode, PdfFunction[] functions);
    [CompilerGeneratedAttribute]
public int get_BitsPerCoordinate();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_BitsPerFlag();
    [CompilerGeneratedAttribute]
public Double[] get_Decode();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.DeviceCmykColorSpaceDetails : ColorSpaceDetails {
    public static DeviceCmykColorSpaceDetails Instance;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    private static DeviceCmykColorSpaceDetails();
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.DeviceGrayColorSpaceDetails : ColorSpaceDetails {
    public static DeviceGrayColorSpaceDetails Instance;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    private static DeviceGrayColorSpaceDetails();
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.DeviceNColorSpaceDetails : ColorSpaceDetails {
    [CompilerGeneratedAttribute]
private int <NumberOfColorComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NameToken> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <AlternateColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceNColorSpaceAttributes> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction <TintFunction>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public IReadOnlyList`1<NameToken> Names { get; }
    public ColorSpaceDetails AlternateColorSpace { get; }
    public Nullable`1<DeviceNColorSpaceAttributes> Attributes { get; }
    public PdfFunction TintFunction { get; }
    public DeviceNColorSpaceDetails(IReadOnlyList`1<NameToken> names, ColorSpaceDetails alternateColorSpaceDetails, PdfFunction tintFunction, Nullable`1<DeviceNColorSpaceAttributes> attributes);
    [CompilerGeneratedAttribute]
public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NameToken> get_Names();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_AlternateColorSpace();
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceNColorSpaceAttributes> get_Attributes();
    [CompilerGeneratedAttribute]
public PdfFunction get_TintFunction();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    public virtual IColor GetInitializeColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.DeviceRgbColorSpaceDetails : ColorSpaceDetails {
    public static DeviceRgbColorSpaceDetails Instance;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    private static DeviceRgbColorSpaceDetails();
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.FreeFormGouraudShading : Shading {
    [CompilerGeneratedAttribute]
private int <BitsPerCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Decode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    public int BitsPerCoordinate { get; }
    public int BitsPerComponent { get; }
    public int BitsPerFlag { get; }
    public Double[] Decode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PdfFunction[] Functions { get; }
    public FreeFormGouraudShading(bool antiAlias, StreamToken shadingStream, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, int bitsPerCoordinate, int bitsPerComponent, int bitsPerFlag, Double[] decode, PdfFunction[] functions);
    [CompilerGeneratedAttribute]
public int get_BitsPerCoordinate();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_BitsPerFlag();
    [CompilerGeneratedAttribute]
public Double[] get_Decode();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.FunctionBasedShading : Shading {
    [CompilerGeneratedAttribute]
private Double[] <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    public Double[] Domain { get; }
    public TransformationMatrix Matrix { get; }
    public PdfFunction[] Functions { get; }
    public FunctionBasedShading(bool antiAlias, DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, Double[] domain, TransformationMatrix matrix, PdfFunction[] functions);
    [CompilerGeneratedAttribute]
public Double[] get_Domain();
    [CompilerGeneratedAttribute]
public TransformationMatrix get_Matrix();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.GrayColor : object {
    [CompilerGeneratedAttribute]
private static GrayColor <Black>k__BackingField;
    [CompilerGeneratedAttribute]
private static GrayColor <White>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Gray>k__BackingField;
    public static GrayColor Black { get; }
    public static GrayColor White { get; }
    public ColorSpace ColorSpace { get; }
    public double Gray { get; }
    public GrayColor(double gray);
    private static GrayColor();
    [CompilerGeneratedAttribute]
public static GrayColor get_Black();
    [CompilerGeneratedAttribute]
public static GrayColor get_White();
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public double get_Gray();
    [NullableContextAttribute("0")]
public sealed virtual ValueTuple`3<double, double, double> ToRGBValues();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(GrayColor other);
    public virtual int GetHashCode();
    public static bool op_Equality(GrayColor color1, GrayColor color2);
    public static bool op_Inequality(GrayColor color1, GrayColor color2);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.ICCBasedColorSpaceDetails : ColorSpaceDetails {
    [CompilerGeneratedAttribute]
private int <NumberOfColorComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <AlternateColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Range>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XmpMetadata <Metadata>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public ColorSpaceDetails AlternateColorSpace { get; }
    public IReadOnlyList`1<double> Range { get; }
    [NullableAttribute("2")]
public XmpMetadata Metadata { get; }
    [NullableContextAttribute("2")]
internal ICCBasedColorSpaceDetails(int numberOfColorComponents, ColorSpaceDetails alternateColorSpaceDetails, IReadOnlyList`1<double> range, XmpMetadata metadata);
    [CompilerGeneratedAttribute]
public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_AlternateColorSpace();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Range();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XmpMetadata get_Metadata();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
public interface UglyToad.PdfPig.Graphics.Colors.IColor {
    public ColorSpace ColorSpace { get; }
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual ValueTuple`3<double, double, double> ToRGBValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.IndexedColorSpaceDetails : ColorSpaceDetails {
    private ConcurrentDictionary`2<double, IColor> cache;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <BaseColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <HiVal>k__BackingField;
    private Byte[] colorTable;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public ColorSpaceDetails BaseColorSpace { get; }
    public byte HiVal { get; }
    [NullableAttribute("0")]
public ReadOnlySpan`1<byte> ColorTable { get; }
    public IndexedColorSpaceDetails(ColorSpaceDetails baseColorSpaceDetails, byte hiVal, Byte[] colorTable);
    internal static ColorSpaceDetails Stencil(ColorSpaceDetails colorSpaceDetails, Double[] decode);
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_BaseColorSpace();
    [CompilerGeneratedAttribute]
public byte get_HiVal();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> get_ColorTable();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<byte> UnwrapIndexedColorSpaceBytes(ReadOnlySpan`1<byte> input);
    public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    [CompilerGeneratedAttribute]
private IColor <GetColor>b__17_0(double v);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <UnwrapIndexedColorSpaceBytes>b__18_0(byte x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <UnwrapIndexedColorSpaceBytes>b__18_1(byte x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <UnwrapIndexedColorSpaceBytes>b__18_2(byte x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <UnwrapIndexedColorSpaceBytes>b__18_3(byte x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.LabColorSpaceDetails : ColorSpaceDetails {
    private CIEBasedColorSpaceTransformer colorSpaceTransformer;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <WhitePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <BlackPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Matrix>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public IReadOnlyList`1<double> WhitePoint { get; }
    public IReadOnlyList`1<double> BlackPoint { get; }
    public IReadOnlyList`1<double> Matrix { get; }
    [NullableContextAttribute("2")]
public LabColorSpaceDetails(Double[] whitePoint, Double[] blackPoint, Double[] matrix);
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_WhitePoint();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_BlackPoint();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Matrix();
    [NullableContextAttribute("0")]
private RGBColor TransformToRGB(ValueTuple`3<double, double, double> colorAbc);
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
    private static double g(double x);
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    public virtual IColor GetInitializeColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.LatticeFormGouraudShading : Shading {
    [CompilerGeneratedAttribute]
private int <BitsPerCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerticesPerRow>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Decode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    public int BitsPerCoordinate { get; }
    public int BitsPerComponent { get; }
    public int VerticesPerRow { get; }
    public Double[] Decode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PdfFunction[] Functions { get; }
    public LatticeFormGouraudShading(bool antiAlias, StreamToken shadingStream, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, int bitsPerCoordinate, int bitsPerComponent, int verticesPerRow, Double[] decode, PdfFunction[] functions);
    [CompilerGeneratedAttribute]
public int get_BitsPerCoordinate();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_VerticesPerRow();
    [CompilerGeneratedAttribute]
public Double[] get_Decode();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Graphics.Colors.PatternColor : object {
    [CompilerGeneratedAttribute]
private PatternType <PatternType>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <PatternDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <ExtGState>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    public PatternType PatternType { get; }
    public DictionaryToken PatternDictionary { get; }
    public DictionaryToken ExtGState { get; }
    public TransformationMatrix Matrix { get; }
    public ColorSpace ColorSpace { get; }
    protected internal PatternColor(PatternType patternType, DictionaryToken patternDictionary, DictionaryToken extGState, TransformationMatrix matrix);
    [CompilerGeneratedAttribute]
public PatternType get_PatternType();
    [CompilerGeneratedAttribute]
public DictionaryToken get_PatternDictionary();
    [CompilerGeneratedAttribute]
public DictionaryToken get_ExtGState();
    [CompilerGeneratedAttribute]
public TransformationMatrix get_Matrix();
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [NullableContextAttribute("0")]
public sealed virtual ValueTuple`3<double, double, double> ToRGBValues();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.PatternColorSpaceDetails : ColorSpaceDetails {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<NameToken, PatternColor> <Patterns>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ColorSpaceDetails <UnderlyingColourSpace>k__BackingField;
    public IReadOnlyDictionary`2<NameToken, PatternColor> Patterns { get; }
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    [NullableAttribute("2")]
public ColorSpaceDetails UnderlyingColourSpace { get; }
    public PatternColorSpaceDetails(IReadOnlyDictionary`2<NameToken, PatternColor> patterns, ColorSpaceDetails underlyingColourSpace);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<NameToken, PatternColor> get_Patterns();
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ColorSpaceDetails get_UnderlyingColourSpace();
    public PatternColor GetColor(NameToken name);
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("2")]
public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
public enum UglyToad.PdfPig.Graphics.Colors.PatternPaintType : Enum {
    public byte value__;
    public static PatternPaintType Coloured;
    public static PatternPaintType Uncoloured;
}
public enum UglyToad.PdfPig.Graphics.Colors.PatternTilingType : Enum {
    public byte value__;
    public static PatternTilingType ConstantSpacing;
    public static PatternTilingType NoDistortion;
    public static PatternTilingType ConstantSpacingFasterTiling;
}
public enum UglyToad.PdfPig.Graphics.Colors.PatternType : Enum {
    public byte value__;
    public static PatternType Tiling;
    public static PatternType Shading;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.RadialShading : Shading {
    [CompilerGeneratedAttribute]
private Double[] <Coords>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Extend>k__BackingField;
    public Double[] Coords { get; }
    public Double[] Domain { get; }
    public PdfFunction[] Functions { get; }
    public Boolean[] Extend { get; }
    public RadialShading(bool antiAlias, DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, Double[] coords, Double[] domain, PdfFunction[] functions, Boolean[] extend);
    [CompilerGeneratedAttribute]
public Double[] get_Coords();
    [CompilerGeneratedAttribute]
public Double[] get_Domain();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
    [CompilerGeneratedAttribute]
public Boolean[] get_Extend();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Graphics.Colors.ResourceColorSpace : ValueType {
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IToken <Data>k__BackingField;
    public NameToken Name { get; }
    [NullableAttribute("2")]
public IToken Data { get; }
    internal ResourceColorSpace(NameToken name, IToken data);
    internal ResourceColorSpace(NameToken name);
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IToken get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.RGBColor : object {
    public static RGBColor Black;
    public static RGBColor White;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private double <R>k__BackingField;
    [CompilerGeneratedAttribute]
private double <G>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    public ColorSpace ColorSpace { get; }
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public RGBColor(double r, double g, double b);
    private static RGBColor();
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public double get_R();
    [CompilerGeneratedAttribute]
public double get_G();
    [CompilerGeneratedAttribute]
public double get_B();
    [NullableContextAttribute("0")]
public sealed virtual ValueTuple`3<double, double, double> ToRGBValues();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(RGBColor other);
    public virtual int GetHashCode();
    public static bool op_Equality(RGBColor color1, RGBColor color2);
    public static bool op_Inequality(RGBColor color1, RGBColor color2);
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Graphics.Colors.RGBWorkingSpace : object {
    public static XYZReferenceWhite ReferenceWhites;
    public static RGBWorkingSpace AdobeRGB1998;
    public static RGBWorkingSpace AppleRGB;
    public static RGBWorkingSpace BestRGB;
    public static RGBWorkingSpace BetaRGB;
    public static RGBWorkingSpace BruceRGB;
    public static RGBWorkingSpace CIE_RGB;
    public static RGBWorkingSpace ColorMatchRGB;
    public static RGBWorkingSpace DonRGB4;
    public static RGBWorkingSpace EktaSpacePS5;
    public static RGBWorkingSpace NTSC_RGB;
    public static RGBWorkingSpace PAL_SECAM_RGB;
    public static RGBWorkingSpace ProPhotoRGB;
    public static RGBWorkingSpace SMPTE_C_RGB;
    public static RGBWorkingSpace sRGB;
    public static RGBWorkingSpace WideGamutRGB;
    [CompilerGeneratedAttribute]
private Func`2<double, double> <GammaCorrection>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <ReferenceWhite>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <RedPrimary>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <BluePrimary>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<double, double, double> <GreenPrimary>k__BackingField;
    public Func`2<double, double> GammaCorrection { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3<double, double, double> ReferenceWhite { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3<double, double, double> RedPrimary { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3<double, double, double> BluePrimary { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3<double, double, double> GreenPrimary { get; private set; }
    private static RGBWorkingSpace();
    [CompilerGeneratedAttribute]
public Func`2<double, double> get_GammaCorrection();
    [CompilerGeneratedAttribute]
private void set_GammaCorrection(Func`2<double, double> value);
    [CompilerGeneratedAttribute]
public ValueTuple`3<double, double, double> get_ReferenceWhite();
    [CompilerGeneratedAttribute]
private void set_ReferenceWhite(ValueTuple`3<double, double, double> value);
    [CompilerGeneratedAttribute]
public ValueTuple`3<double, double, double> get_RedPrimary();
    [CompilerGeneratedAttribute]
private void set_RedPrimary(ValueTuple`3<double, double, double> value);
    [CompilerGeneratedAttribute]
public ValueTuple`3<double, double, double> get_BluePrimary();
    [CompilerGeneratedAttribute]
private void set_BluePrimary(ValueTuple`3<double, double, double> value);
    [CompilerGeneratedAttribute]
public ValueTuple`3<double, double, double> get_GreenPrimary();
    [CompilerGeneratedAttribute]
private void set_GreenPrimary(ValueTuple`3<double, double, double> value);
    private static Func`2<double, double> CreateGammaFunc(double gamma);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.SeparationColorSpaceDetails : ColorSpaceDetails {
    private ConcurrentDictionary`2<double, IColor> cache;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <AlternateColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction <TintFunction>k__BackingField;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    public NameToken Name { get; }
    public ColorSpaceDetails AlternateColorSpace { get; }
    public PdfFunction TintFunction { get; }
    public SeparationColorSpaceDetails(NameToken name, ColorSpaceDetails alternateColorSpaceDetails, PdfFunction tintFunction);
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_AlternateColorSpace();
    [CompilerGeneratedAttribute]
public PdfFunction get_TintFunction();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> values);
    public virtual IColor GetInitializeColor();
    [CompilerGeneratedAttribute]
private IColor <GetColor>b__16_0(double v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Graphics.Colors.Shading : object {
    [CompilerGeneratedAttribute]
private DictionaryToken <ShadingDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private ShadingType <ShadingType>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <ColorSpace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Double[] <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfRectangle> <BBox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AntiAlias>k__BackingField;
    public DictionaryToken ShadingDictionary { get; }
    public ShadingType ShadingType { get; }
    public ColorSpaceDetails ColorSpace { get; }
    [NullableAttribute("2")]
public Double[] Background { get; }
    public Nullable`1<PdfRectangle> BBox { get; }
    public bool AntiAlias { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PdfFunction[] Functions { get; }
    protected internal Shading(ShadingType shadingType, bool antiAlias, DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background);
    [CompilerGeneratedAttribute]
public DictionaryToken get_ShadingDictionary();
    [CompilerGeneratedAttribute]
public ShadingType get_ShadingType();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_ColorSpace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Double[] get_Background();
    [CompilerGeneratedAttribute]
public Nullable`1<PdfRectangle> get_BBox();
    [CompilerGeneratedAttribute]
public bool get_AntiAlias();
    public abstract virtual PdfFunction[] get_Functions();
    public Double[] Eval(Double[] input);
    private static Double[] Clamp(Double[] input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.ShadingPatternColor : PatternColor {
    [CompilerGeneratedAttribute]
private Shading <Shading>k__BackingField;
    public Shading Shading { get; }
    public ShadingPatternColor(TransformationMatrix matrix, DictionaryToken extGState, DictionaryToken patternDictionary, Shading shading);
    [CompilerGeneratedAttribute]
public Shading get_Shading();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ShadingPatternColor other);
    public virtual int GetHashCode();
    public static bool op_Equality(ShadingPatternColor color1, ShadingPatternColor color2);
    public static bool op_Inequality(ShadingPatternColor color1, ShadingPatternColor color2);
}
public enum UglyToad.PdfPig.Graphics.Colors.ShadingType : Enum {
    public byte value__;
    public static ShadingType FunctionBased;
    public static ShadingType Axial;
    public static ShadingType Radial;
    public static ShadingType FreeFormGouraud;
    public static ShadingType LatticeFormGouraud;
    public static ShadingType CoonsPatch;
    public static ShadingType TensorProductPatch;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.TensorProductPatchMeshesShading : Shading {
    [CompilerGeneratedAttribute]
private int <BitsPerCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Decode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PdfFunction[] <Functions>k__BackingField;
    public int BitsPerCoordinate { get; }
    public int BitsPerComponent { get; }
    public int BitsPerFlag { get; }
    public Double[] Decode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PdfFunction[] Functions { get; }
    public TensorProductPatchMeshesShading(bool antiAlias, StreamToken shadingStream, ColorSpaceDetails colorSpace, Nullable`1<PdfRectangle> bbox, Double[] background, int bitsPerCoordinate, int bitsPerComponent, int bitsPerFlag, Double[] decode, PdfFunction[] functions);
    [CompilerGeneratedAttribute]
public int get_BitsPerCoordinate();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_BitsPerFlag();
    [CompilerGeneratedAttribute]
public Double[] get_Decode();
    [CompilerGeneratedAttribute]
public virtual PdfFunction[] get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.TilingPatternColor : PatternColor {
    [CompilerGeneratedAttribute]
private StreamToken <PatternStream>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternPaintType <PaintType>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternTilingType <TilingType>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BBox>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <YStep>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryToken <Resources>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Data>k__BackingField;
    public StreamToken PatternStream { get; }
    public PatternPaintType PaintType { get; }
    public PatternTilingType TilingType { get; }
    public PdfRectangle BBox { get; }
    public double XStep { get; }
    public double YStep { get; }
    public DictionaryToken Resources { get; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Data { get; }
    public TilingPatternColor(TransformationMatrix matrix, DictionaryToken extGState, StreamToken patternStream, PatternPaintType paintType, PatternTilingType tilingType, PdfRectangle bbox, double xStep, double yStep, DictionaryToken resources, ReadOnlyMemory`1<byte> data);
    [CompilerGeneratedAttribute]
public StreamToken get_PatternStream();
    [CompilerGeneratedAttribute]
public PatternPaintType get_PaintType();
    [CompilerGeneratedAttribute]
public PatternTilingType get_TilingType();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BBox();
    [CompilerGeneratedAttribute]
public double get_XStep();
    [CompilerGeneratedAttribute]
public double get_YStep();
    [CompilerGeneratedAttribute]
public DictionaryToken get_Resources();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Data();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TilingPatternColor other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TilingPatternColor color1, TilingPatternColor color2);
    public static bool op_Inequality(TilingPatternColor color1, TilingPatternColor color2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Colors.UnsupportedColorSpaceDetails : ColorSpaceDetails {
    public static UnsupportedColorSpaceDetails Instance;
    public int NumberOfColorComponents { get; }
    internal int BaseNumberOfColorComponents { get; }
    private static UnsupportedColorSpaceDetails();
    public virtual int get_NumberOfColorComponents();
    internal virtual int get_BaseNumberOfColorComponents();
    internal virtual Double[] Process(Double[] values);
    public virtual IColor GetColor(Double[] values);
    [NullableContextAttribute("2")]
public virtual IColor GetInitializeColor();
    [NullableContextAttribute("0")]
internal virtual ReadOnlySpan`1<byte> Transform(ReadOnlySpan`1<byte> decoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Graphics.ColorSpaceContext : object {
    private Func`1<CurrentGraphicsState> currentStateFunc;
    private IResourceStore resourceStore;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <CurrentStrokingColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <CurrentNonStrokingColorSpace>k__BackingField;
    public ColorSpaceDetails CurrentStrokingColorSpace { get; private set; }
    public ColorSpaceDetails CurrentNonStrokingColorSpace { get; private set; }
    public ColorSpaceContext(Func`1<CurrentGraphicsState> currentStateFunc, IResourceStore resourceStore);
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpaceDetails get_CurrentStrokingColorSpace();
    [CompilerGeneratedAttribute]
private void set_CurrentStrokingColorSpace(ColorSpaceDetails value);
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpaceDetails get_CurrentNonStrokingColorSpace();
    [CompilerGeneratedAttribute]
private void set_CurrentNonStrokingColorSpace(ColorSpaceDetails value);
    public sealed virtual void SetStrokingColorspace(NameToken colorspace, DictionaryToken dictionary);
    public sealed virtual void SetStrokingColor(IReadOnlyList`1<double> operands, NameToken patternName);
    public sealed virtual void SetStrokingColorGray(double gray);
    public sealed virtual void SetStrokingColorRgb(double r, double g, double b);
    public sealed virtual void SetStrokingColorCmyk(double c, double m, double y, double k);
    public sealed virtual void SetNonStrokingColorspace(NameToken colorspace, DictionaryToken dictionary);
    public sealed virtual void SetNonStrokingColor(IReadOnlyList`1<double> operands, NameToken patternName);
    public sealed virtual void SetNonStrokingColorGray(double gray);
    public sealed virtual void SetNonStrokingColorRgb(double r, double g, double b);
    public sealed virtual void SetNonStrokingColorCmyk(double c, double m, double y, double k);
    public sealed virtual IColorSpaceContext DeepClone();
}
internal class UglyToad.PdfPig.Graphics.ContentStreamProcessor : BaseStreamProcessor`1<PageContent> {
    private List`1<Letter> letters;
    private List`1<PdfPath> paths;
    private List`1<Union`2<XObjectContentRecord, InlineImage>> images;
    private List`1<MarkedContentElement> markedContents;
    private MarkedContentStack markedContentStack;
    [CompilerGeneratedAttribute]
private PdfSubpath <CurrentSubpath>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPath <CurrentPath>k__BackingField;
    public PdfSubpath CurrentSubpath { get; private set; }
    public PdfPath CurrentPath { get; private set; }
    public ContentStreamProcessor(int pageNumber, IResourceStore resourceStore, IPdfTokenScanner pdfScanner, IPageContentParser pageContentParser, ILookupFilterProvider filterProvider, CropBox cropBox, UserSpaceUnit userSpaceUnit, PageRotationDegrees rotation, TransformationMatrix initialMatrix, ParsingOptions parsingOptions);
    [CompilerGeneratedAttribute]
public PdfSubpath get_CurrentSubpath();
    [CompilerGeneratedAttribute]
private void set_CurrentSubpath(PdfSubpath value);
    [CompilerGeneratedAttribute]
public PdfPath get_CurrentPath();
    [CompilerGeneratedAttribute]
private void set_CurrentPath(PdfPath value);
    public virtual PageContent Process(int pageNumberCurrent, IReadOnlyList`1<IGraphicsStateOperation> operations);
    public virtual void RenderGlyph(IFont font, CurrentGraphicsState currentState, double fontSize, double pointSize, int code, string unicode, long currentOffset, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) renderingMatrix, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) textMatrix, TransformationMatrix& modreq(System.Runtime.InteropServices.InAttribute) transformationMatrix, CharacterBoundingBox characterBoundingBox);
    protected virtual void RenderXObjectImage(XObjectContentRecord xObjectContentRecord);
    public virtual void BeginSubpath();
    public virtual Nullable`1<PdfPoint> CloseSubpath();
    public void AddCurrentSubpath();
    public virtual void StrokePath(bool close);
    public virtual void FillPath(FillingRule fillingRule, bool close);
    public virtual void FillStrokePath(FillingRule fillingRule, bool close);
    public virtual void MoveTo(double x, double y);
    public virtual void BezierCurveTo(double x2, double y2, double x3, double y3);
    public virtual void BezierCurveTo(double x1, double y1, double x2, double y2, double x3, double y3);
    public virtual void LineTo(double x, double y);
    public virtual void Rectangle(double x, double y, double width, double height);
    public virtual void EndPath();
    public virtual void ClosePath();
    public virtual void ModifyClippingIntersect(FillingRule clippingRule);
    protected virtual void RenderInlineImage(InlineImage inlineImage);
    public virtual void BeginMarkedContent(NameToken name, NameToken propertyDictionaryName, DictionaryToken properties);
    public virtual void EndMarkedContent();
    public virtual void PaintShading(NameToken shadingName);
}
public enum UglyToad.PdfPig.Graphics.Core.LineCapStyle : Enum {
    public int value__;
    public static LineCapStyle Butt;
    public static LineCapStyle Round;
    public static LineCapStyle ProjectingSquare;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Graphics.Core.LineDashPattern : ValueType {
    [CompilerGeneratedAttribute]
private int <Phase>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private static LineDashPattern <Solid>k__BackingField;
    public int Phase { get; }
    public IReadOnlyList`1<double> Array { get; }
    public static LineDashPattern Solid { get; }
    public LineDashPattern(int phase, IReadOnlyList`1<double> array);
    private static LineDashPattern();
    [CompilerGeneratedAttribute]
public int get_Phase();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Array();
    [CompilerGeneratedAttribute]
public static LineDashPattern get_Solid();
    public virtual string ToString();
}
public enum UglyToad.PdfPig.Graphics.Core.LineJoinStyle : Enum {
    public int value__;
    public static LineJoinStyle Miter;
    public static LineJoinStyle Round;
    public static LineJoinStyle Bevel;
}
public enum UglyToad.PdfPig.Graphics.Core.RenderingIntent : Enum {
    public int value__;
    public static RenderingIntent AbsoluteColorimetric;
    public static RenderingIntent RelativeColorimetric;
    public static RenderingIntent Saturation;
    public static RenderingIntent Perceptual;
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Graphics.Core.RenderingIntentExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RenderingIntent ToRenderingIntent(string s);
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Graphics.Core.RenderingModeExtensions : object {
    [ExtensionAttribute]
public static bool IsFill(TextRenderingMode mode);
    [ExtensionAttribute]
public static bool IsStroke(TextRenderingMode mode);
    [ExtensionAttribute]
public static bool IsClip(TextRenderingMode mode);
}
public class UglyToad.PdfPig.Graphics.CurrentFontState : object {
    [CompilerGeneratedAttribute]
private bool <FromExtendedGraphicsState>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CharacterSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WordSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Leading>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRenderingMode <TextRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Rise>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Knockout>k__BackingField;
    public bool FromExtendedGraphicsState { get; public set; }
    public double CharacterSpacing { get; public set; }
    public double WordSpacing { get; public set; }
    public double HorizontalScaling { get; public set; }
    public double Leading { get; public set; }
    public NameToken FontName { get; public set; }
    public double FontSize { get; public set; }
    public TextRenderingMode TextRenderingMode { get; public set; }
    public double Rise { get; public set; }
    public bool Knockout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FromExtendedGraphicsState();
    [CompilerGeneratedAttribute]
public void set_FromExtendedGraphicsState(bool value);
    [CompilerGeneratedAttribute]
public double get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public void set_CharacterSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_WordSpacing();
    [CompilerGeneratedAttribute]
public void set_WordSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalScaling();
    [CompilerGeneratedAttribute]
public void set_HorizontalScaling(double value);
    [CompilerGeneratedAttribute]
public double get_Leading();
    [CompilerGeneratedAttribute]
public void set_Leading(double value);
    [CompilerGeneratedAttribute]
public NameToken get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(NameToken value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public TextRenderingMode get_TextRenderingMode();
    [CompilerGeneratedAttribute]
public void set_TextRenderingMode(TextRenderingMode value);
    [CompilerGeneratedAttribute]
public double get_Rise();
    [CompilerGeneratedAttribute]
public void set_Rise(double value);
    [CompilerGeneratedAttribute]
public bool get_Knockout();
    [CompilerGeneratedAttribute]
public void set_Knockout(bool value);
    public sealed virtual CurrentFontState DeepClone();
}
public class UglyToad.PdfPig.Graphics.CurrentGraphicsState : object {
    [CompilerGeneratedAttribute]
private PdfPath <CurrentClippingPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrentFontState <FontState>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineCapStyle <CapStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoinStyle <JoinStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MiterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private LineDashPattern <LineDashPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderingIntent <RenderingIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrokeAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AlphaConstantStroking>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AlphaConstantNonStroking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlphaSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <CurrentTransformationMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private IColorSpaceContext <ColorSpaceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <CurrentStrokingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <CurrentNonStrokingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overprint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonStrokingOverprint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OverprintMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Flatness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Smoothness>k__BackingField;
    public PdfPath CurrentClippingPath { get; public set; }
    public CurrentFontState FontState { get; public set; }
    public double LineWidth { get; public set; }
    public LineCapStyle CapStyle { get; public set; }
    public LineJoinStyle JoinStyle { get; public set; }
    public double MiterLimit { get; public set; }
    public LineDashPattern LineDashPattern { get; public set; }
    public RenderingIntent RenderingIntent { get; public set; }
    public bool StrokeAdjustment { get; public set; }
    public double AlphaConstantStroking { get; public set; }
    public double AlphaConstantNonStroking { get; public set; }
    public bool AlphaSource { get; public set; }
    public TransformationMatrix CurrentTransformationMatrix { get; public set; }
    public IColorSpaceContext ColorSpaceContext { get; public set; }
    public IColor CurrentStrokingColor { get; public set; }
    public IColor CurrentNonStrokingColor { get; public set; }
    public bool Overprint { get; public set; }
    public bool NonStrokingOverprint { get; public set; }
    public double OverprintMode { get; public set; }
    public double Flatness { get; public set; }
    public double Smoothness { get; public set; }
    [CompilerGeneratedAttribute]
public PdfPath get_CurrentClippingPath();
    [CompilerGeneratedAttribute]
public void set_CurrentClippingPath(PdfPath value);
    [CompilerGeneratedAttribute]
public CurrentFontState get_FontState();
    [CompilerGeneratedAttribute]
public void set_FontState(CurrentFontState value);
    [CompilerGeneratedAttribute]
public double get_LineWidth();
    [CompilerGeneratedAttribute]
public void set_LineWidth(double value);
    [CompilerGeneratedAttribute]
public LineCapStyle get_CapStyle();
    [CompilerGeneratedAttribute]
public void set_CapStyle(LineCapStyle value);
    [CompilerGeneratedAttribute]
public LineJoinStyle get_JoinStyle();
    [CompilerGeneratedAttribute]
public void set_JoinStyle(LineJoinStyle value);
    [CompilerGeneratedAttribute]
public double get_MiterLimit();
    [CompilerGeneratedAttribute]
public void set_MiterLimit(double value);
    [CompilerGeneratedAttribute]
public LineDashPattern get_LineDashPattern();
    [CompilerGeneratedAttribute]
public void set_LineDashPattern(LineDashPattern value);
    [CompilerGeneratedAttribute]
public RenderingIntent get_RenderingIntent();
    [CompilerGeneratedAttribute]
public void set_RenderingIntent(RenderingIntent value);
    [CompilerGeneratedAttribute]
public bool get_StrokeAdjustment();
    [CompilerGeneratedAttribute]
public void set_StrokeAdjustment(bool value);
    [CompilerGeneratedAttribute]
public double get_AlphaConstantStroking();
    [CompilerGeneratedAttribute]
public void set_AlphaConstantStroking(double value);
    [CompilerGeneratedAttribute]
public double get_AlphaConstantNonStroking();
    [CompilerGeneratedAttribute]
public void set_AlphaConstantNonStroking(double value);
    [CompilerGeneratedAttribute]
public bool get_AlphaSource();
    [CompilerGeneratedAttribute]
public void set_AlphaSource(bool value);
    [CompilerGeneratedAttribute]
public TransformationMatrix get_CurrentTransformationMatrix();
    [CompilerGeneratedAttribute]
public void set_CurrentTransformationMatrix(TransformationMatrix value);
    [CompilerGeneratedAttribute]
public IColorSpaceContext get_ColorSpaceContext();
    [CompilerGeneratedAttribute]
public void set_ColorSpaceContext(IColorSpaceContext value);
    [CompilerGeneratedAttribute]
public IColor get_CurrentStrokingColor();
    [CompilerGeneratedAttribute]
public void set_CurrentStrokingColor(IColor value);
    [CompilerGeneratedAttribute]
public IColor get_CurrentNonStrokingColor();
    [CompilerGeneratedAttribute]
public void set_CurrentNonStrokingColor(IColor value);
    [CompilerGeneratedAttribute]
public bool get_Overprint();
    [CompilerGeneratedAttribute]
public void set_Overprint(bool value);
    [CompilerGeneratedAttribute]
public bool get_NonStrokingOverprint();
    [CompilerGeneratedAttribute]
public void set_NonStrokingOverprint(bool value);
    [CompilerGeneratedAttribute]
public double get_OverprintMode();
    [CompilerGeneratedAttribute]
public void set_OverprintMode(double value);
    [CompilerGeneratedAttribute]
public double get_Flatness();
    [CompilerGeneratedAttribute]
public void set_Flatness(double value);
    [CompilerGeneratedAttribute]
public double get_Smoothness();
    [CompilerGeneratedAttribute]
public void set_Smoothness(double value);
    public sealed virtual CurrentGraphicsState DeepClone();
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Graphics.IColorSpaceContext {
    public ColorSpaceDetails CurrentStrokingColorSpace { get; }
    public ColorSpaceDetails CurrentNonStrokingColorSpace { get; }
    public abstract virtual ColorSpaceDetails get_CurrentStrokingColorSpace();
    public abstract virtual ColorSpaceDetails get_CurrentNonStrokingColorSpace();
    public abstract virtual void SetStrokingColorspace(NameToken colorspace, DictionaryToken dictionary);
    public abstract virtual void SetNonStrokingColorspace(NameToken colorspace, DictionaryToken dictionary);
    public abstract virtual void SetStrokingColor(IReadOnlyList`1<double> operands, NameToken patternName);
    public abstract virtual void SetStrokingColorGray(double gray);
    public abstract virtual void SetStrokingColorRgb(double r, double g, double b);
    public abstract virtual void SetStrokingColorCmyk(double c, double m, double y, double k);
    public abstract virtual void SetNonStrokingColor(IReadOnlyList`1<double> operands, NameToken patternName);
    public abstract virtual void SetNonStrokingColorGray(double gray);
    public abstract virtual void SetNonStrokingColorRgb(double r, double g, double b);
    public abstract virtual void SetNonStrokingColorCmyk(double c, double m, double y, double k);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Graphics.IGraphicsStateOperationFactory {
    public abstract virtual IGraphicsStateOperation Create(OperatorToken op, IReadOnlyList`1<IToken> operands);
}
public class UglyToad.PdfPig.Graphics.InlineImageBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<NameToken, IToken> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Bytes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<NameToken, IToken> Properties { get; internal set; }
    public ReadOnlyMemory`1<byte> Bytes { get; internal set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<NameToken, IToken> get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(IReadOnlyDictionary`2<NameToken, IToken> value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Bytes();
    [CompilerGeneratedAttribute]
internal void set_Bytes(ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("1")]
internal InlineImage CreateInlineImage(TransformationMatrix& transformationMatrix, ILookupFilterProvider filterProvider, IPdfTokenScanner tokenScanner, RenderingIntent defaultRenderingIntent, IResourceStore resourceStore);
    private T GetByKeys(NameToken name1, NameToken name2, bool required);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Graphics.IOperationContext {
    public PdfPoint CurrentPosition { get; public set; }
    public TextMatrices TextMatrices { get; }
    public int StackSize { get; }
    public abstract virtual PdfPoint get_CurrentPosition();
    public abstract virtual void set_CurrentPosition(PdfPoint value);
    public abstract virtual TextMatrices get_TextMatrices();
    public abstract virtual int get_StackSize();
    public abstract virtual CurrentGraphicsState GetCurrentState();
    public abstract virtual void PopState();
    public abstract virtual void PushState();
    public abstract virtual void ShowText(IInputBytes bytes);
    public abstract virtual void ShowPositionedText(IReadOnlyList`1<IToken> tokens);
    public abstract virtual void ApplyXObject(NameToken xObjectName);
    public abstract virtual void BeginSubpath();
    public abstract virtual Nullable`1<PdfPoint> CloseSubpath();
    public abstract virtual void StrokePath(bool close);
    public abstract virtual void FillPath(FillingRule fillingRule, bool close);
    public abstract virtual void FillStrokePath(FillingRule fillingRule, bool close);
    public abstract virtual void MoveTo(double x, double y);
    public abstract virtual void BezierCurveTo(double x1, double y1, double x2, double y2, double x3, double y3);
    public abstract virtual void BezierCurveTo(double x2, double y2, double x3, double y3);
    public abstract virtual void LineTo(double x, double y);
    public abstract virtual void Rectangle(double x, double y, double width, double height);
    public abstract virtual void EndPath();
    public abstract virtual void ClosePath();
    [NullableContextAttribute("2")]
public abstract virtual void BeginMarkedContent(NameToken name, NameToken propertyDictionaryName, DictionaryToken properties);
    public abstract virtual void EndMarkedContent();
    public abstract virtual void SetNamedGraphicsState(NameToken stateName);
    public abstract virtual void BeginInlineImage();
    public abstract virtual void SetInlineImageProperties(IReadOnlyDictionary`2<NameToken, IToken> properties);
    [NullableContextAttribute("0")]
public abstract virtual void EndInlineImage(ReadOnlyMemory`1<byte> bytes);
    public abstract virtual void ModifyClippingIntersect(FillingRule clippingRule);
    public abstract virtual void SetFlatnessTolerance(double tolerance);
    public abstract virtual void SetLineCap(LineCapStyle cap);
    public abstract virtual void SetLineDashPattern(LineDashPattern pattern);
    public abstract virtual void SetLineJoin(LineJoinStyle join);
    public abstract virtual void SetLineWidth(double width);
    public abstract virtual void SetMiterLimit(double limit);
    public abstract virtual void MoveToNextLineWithOffset();
    public abstract virtual void SetFontAndSize(NameToken font, double size);
    public abstract virtual void SetHorizontalScaling(double scale);
    public abstract virtual void SetTextLeading(double leading);
    public abstract virtual void SetTextRenderingMode(TextRenderingMode mode);
    public abstract virtual void SetTextRise(double rise);
    public abstract virtual void SetWordSpacing(double spacing);
    public abstract virtual void ModifyCurrentTransformationMatrix(Double[] value);
    public abstract virtual void SetCharacterSpacing(double spacing);
    public abstract virtual void PaintShading(NameToken shading);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Graphics.MarkedContentStack : object {
    private Stack`1<MarkedContentElementActiveBuilder> builderStack;
    private int number;
    [NullableAttribute("2")]
private MarkedContentElementActiveBuilder top;
    public bool CanPop { get; }
    public bool get_CanPop();
    public void Push(NameToken name, DictionaryToken properties);
    public MarkedContentElement Pop(IPdfTokenScanner pdfScanner);
    public void AddLetter(Letter letter);
    public void AddPath(PdfPath path);
    public void AddImage(IPdfImage image);
    public void AddXObject(XObjectContentRecord xObject, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider, IResourceStore resourceStore);
}
internal static class UglyToad.PdfPig.Graphics.OperationContextHelper : object {
    [NullableContextAttribute("1")]
internal static TransformationMatrix GetInitialMatrix(UserSpaceUnit userSpaceUnit, MediaBox mediaBox, CropBox cropBox, PageRotationDegrees rotation, ILog log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.ClippingPaths.ModifyClippingByEvenOddIntersect : object {
    public static string Symbol;
    public static ModifyClippingByEvenOddIntersect Value;
    public string Operator { get; }
    private static ModifyClippingByEvenOddIntersect();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.ClippingPaths.ModifyClippingByNonZeroWindingIntersect : object {
    public static string Symbol;
    public static ModifyClippingByNonZeroWindingIntersect Value;
    public string Operator { get; }
    private static ModifyClippingByNonZeroWindingIntersect();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.Compatibility.BeginCompatibilitySection : object {
    public static string Symbol;
    public static BeginCompatibilitySection Value;
    public string Operator { get; }
    private static BeginCompatibilitySection();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.Compatibility.EndCompatibilitySection : object {
    public static string Symbol;
    public static EndCompatibilitySection Value;
    public string Operator { get; }
    private static EndCompatibilitySection();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetColorRenderingIntent : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <RenderingIntent>k__BackingField;
    public string Operator { get; }
    public NameToken RenderingIntent { get; }
    public SetColorRenderingIntent(NameToken renderingIntent);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_RenderingIntent();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetFlatnessTolerance : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Tolerance>k__BackingField;
    public string Operator { get; }
    public double Tolerance { get; }
    public SetFlatnessTolerance(double tolerance);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Tolerance();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetLineCap : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private LineCapStyle <Cap>k__BackingField;
    public string Operator { get; }
    public LineCapStyle Cap { get; }
    public SetLineCap(int cap);
    public SetLineCap(LineCapStyle cap);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public LineCapStyle get_Cap();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetLineDashPattern : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private LineDashPattern <Pattern>k__BackingField;
    public string Operator { get; }
    public LineDashPattern Pattern { get; }
    public SetLineDashPattern(Double[] array, int phase);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public LineDashPattern get_Pattern();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetLineJoin : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private LineJoinStyle <Join>k__BackingField;
    public string Operator { get; }
    public LineJoinStyle Join { get; }
    public SetLineJoin(int join);
    public SetLineJoin(LineJoinStyle join);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public LineJoinStyle get_Join();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetLineWidth : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public string Operator { get; }
    public double Width { get; }
    public SetLineWidth(double width);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Width();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.General.SetMiterLimit : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Limit>k__BackingField;
    public string Operator { get; }
    public double Limit { get; }
    public SetMiterLimit(double limit);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Limit();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Graphics.Operations.IGraphicsStateOperation {
    public string Operator { get; }
    public abstract virtual string get_Operator();
    public abstract virtual void Write(Stream stream);
    public abstract virtual void Run(IOperationContext operationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.InlineImages.BeginInlineImage : object {
    public static string Symbol;
    public static BeginInlineImage Value;
    public string Operator { get; }
    private static BeginInlineImage();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.InlineImages.BeginInlineImageData : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<NameToken, IToken> <Dictionary>k__BackingField;
    public string Operator { get; }
    public IReadOnlyDictionary`2<NameToken, IToken> Dictionary { get; }
    public BeginInlineImageData(IReadOnlyDictionary`2<NameToken, IToken> dictionary);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<NameToken, IToken> get_Dictionary();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.InlineImages.EndInlineImage : object {
    public static string Symbol;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <ImageData>k__BackingField;
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> ImageData { get; }
    public string Operator { get; }
    [NullableContextAttribute("0")]
public EndInlineImage(ReadOnlyMemory`1<byte> imageData);
    public EndInlineImage(Byte[] imageData);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_ImageData();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.InvokeNamedXObject : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public InvokeNamedXObject(NameToken name);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.MarkedContent.BeginMarkedContent : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public BeginMarkedContent(NameToken name);
    private static BeginMarkedContent();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.MarkedContent.BeginMarkedContentWithProperties : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameToken <PropertyDictionaryName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DictionaryToken <Properties>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    [NullableAttribute("2")]
public NameToken PropertyDictionaryName { get; }
    [NullableAttribute("2")]
public DictionaryToken Properties { get; }
    public BeginMarkedContentWithProperties(NameToken name, NameToken propertyDictionaryName);
    public BeginMarkedContentWithProperties(NameToken name, DictionaryToken properties);
    private static BeginMarkedContentWithProperties();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameToken get_PropertyDictionaryName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DictionaryToken get_Properties();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.MarkedContent.DesignateMarkedContentPoint : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public DesignateMarkedContentPoint(NameToken name);
    private static DesignateMarkedContentPoint();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.MarkedContent.DesignateMarkedContentPointWithProperties : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameToken <PropertyDictionaryName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DictionaryToken <Properties>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    [NullableAttribute("2")]
public NameToken PropertyDictionaryName { get; }
    [NullableAttribute("2")]
public DictionaryToken Properties { get; }
    public DesignateMarkedContentPointWithProperties(NameToken name, NameToken propertyDictionaryName);
    public DesignateMarkedContentPointWithProperties(NameToken name, DictionaryToken properties);
    private static DesignateMarkedContentPointWithProperties();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameToken get_PropertyDictionaryName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DictionaryToken get_Properties();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.MarkedContent.EndMarkedContent : object {
    public static string Symbol;
    public static EndMarkedContent Value;
    public string Operator { get; }
    private static EndMarkedContent();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Graphics.Operations.OperationWriteHelper : object {
    private static byte Whitespace;
    private static byte NewLine;
    private static byte Zero;
    private static byte Point;
    private static StandardFormat StandardFormatDouble;
    private static OperationWriteHelper();
    [ExtensionAttribute]
public static void WriteText(Stream stream, string text, bool appendWhitespace);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void WriteText(Stream stream, ReadOnlySpan`1<byte> asciiBytes, bool appendWhitespace);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void WriteHex(Stream stream, ReadOnlySpan`1<byte> bytes);
    [ExtensionAttribute]
public static void WriteWhiteSpace(Stream stream);
    [ExtensionAttribute]
public static void WriteNewLine(Stream stream);
    [ExtensionAttribute]
public static void WriteDouble(Stream stream, double value);
    private static bool TryWriteDouble(Stream stream, double value, int stackSize);
    [NullableContextAttribute("0")]
private static int GetLastSignificantDigitIndex(ReadOnlySpan`1<byte> buffer, int bytesWritten);
    [ExtensionAttribute]
public static void WriteNumberText(Stream stream, int number, string text);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void WriteNumberText(Stream stream, int number, ReadOnlySpan`1<byte> asciiBytes);
    [ExtensionAttribute]
public static void WriteNumberText(Stream stream, double number, string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PaintShading : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public PaintShading(NameToken name);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.AppendDualControlPointBezierCurve : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X3>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y3>k__BackingField;
    public string Operator { get; }
    public double X1 { get; }
    public double Y1 { get; }
    public double X2 { get; }
    public double Y2 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public AppendDualControlPointBezierCurve(double x1, double y1, double x2, double y2, double x3, double y3);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_X1();
    [CompilerGeneratedAttribute]
public double get_Y1();
    [CompilerGeneratedAttribute]
public double get_X2();
    [CompilerGeneratedAttribute]
public double get_Y2();
    [CompilerGeneratedAttribute]
public double get_X3();
    [CompilerGeneratedAttribute]
public double get_Y3();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.AppendEndControlPointBezierCurve : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X3>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y3>k__BackingField;
    public string Operator { get; }
    public double X1 { get; }
    public double Y1 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public AppendEndControlPointBezierCurve(double x1, double y1, double x3, double y3);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_X1();
    [CompilerGeneratedAttribute]
public double get_Y1();
    [CompilerGeneratedAttribute]
public double get_X3();
    [CompilerGeneratedAttribute]
public double get_Y3();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.AppendRectangle : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <LowerLeftX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerLeftY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public string Operator { get; }
    public double LowerLeftX { get; }
    public double LowerLeftY { get; }
    public double Width { get; }
    public double Height { get; }
    public AppendRectangle(double x, double y, double width, double height);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_LowerLeftX();
    [CompilerGeneratedAttribute]
public double get_LowerLeftY();
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.AppendStartControlPointBezierCurve : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <X2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X3>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y3>k__BackingField;
    public string Operator { get; }
    public double X2 { get; }
    public double Y2 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public AppendStartControlPointBezierCurve(double x2, double y2, double x3, double y3);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_X2();
    [CompilerGeneratedAttribute]
public double get_Y2();
    [CompilerGeneratedAttribute]
public double get_X3();
    [CompilerGeneratedAttribute]
public double get_Y3();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.AppendStraightLineSegment : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public string Operator { get; }
    public double X { get; }
    public double Y { get; }
    public AppendStraightLineSegment(double x, double y);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.BeginNewSubpath : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public string Operator { get; }
    public double X { get; }
    public double Y { get; }
    public BeginNewSubpath(double x, double y);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathConstruction.CloseSubpath : object {
    public static string Symbol;
    public static CloseSubpath Value;
    public string Operator { get; }
    private static CloseSubpath();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.CloseAndStrokePath : object {
    public static string Symbol;
    public static CloseAndStrokePath Value;
    public string Operator { get; }
    private static CloseAndStrokePath();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.CloseFillPathEvenOddRuleAndStroke : object {
    public static string Symbol;
    public static CloseFillPathEvenOddRuleAndStroke Value;
    public string Operator { get; }
    private static CloseFillPathEvenOddRuleAndStroke();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.CloseFillPathNonZeroWindingAndStroke : object {
    public static string Symbol;
    public static CloseFillPathNonZeroWindingAndStroke Value;
    public string Operator { get; }
    private static CloseFillPathNonZeroWindingAndStroke();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.EndPath : object {
    public static string Symbol;
    public static EndPath Value;
    public string Operator { get; }
    private static EndPath();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.FillPathEvenOddRule : object {
    public static string Symbol;
    public static FillPathEvenOddRule Value;
    public string Operator { get; }
    private static FillPathEvenOddRule();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.FillPathEvenOddRuleAndStroke : object {
    public static string Symbol;
    public static FillPathEvenOddRuleAndStroke Value;
    public string Operator { get; }
    private static FillPathEvenOddRuleAndStroke();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.FillPathNonZeroWinding : object {
    public static string Symbol;
    public static FillPathNonZeroWinding Value;
    public string Operator { get; }
    private static FillPathNonZeroWinding();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.FillPathNonZeroWindingAndStroke : object {
    public static string Symbol;
    public static FillPathNonZeroWindingAndStroke Value;
    public string Operator { get; }
    private static FillPathNonZeroWindingAndStroke();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.FillPathNonZeroWindingCompatibility : object {
    public static string Symbol;
    public static FillPathNonZeroWindingCompatibility Value;
    public string Operator { get; }
    private static FillPathNonZeroWindingCompatibility();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.PathPainting.StrokePath : object {
    public static string Symbol;
    public static StrokePath Value;
    public string Operator { get; }
    private static StrokePath();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColor : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Operands>k__BackingField;
    public string Operator { get; }
    public IReadOnlyList`1<double> Operands { get; }
    public SetNonStrokeColor(Double[] operands);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Operands();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColorAdvanced : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Operands>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameToken <PatternName>k__BackingField;
    public string Operator { get; }
    public IReadOnlyList`1<double> Operands { get; }
    [NullableAttribute("2")]
public NameToken PatternName { get; }
    public SetNonStrokeColorAdvanced(IReadOnlyList`1<double> operands);
    public SetNonStrokeColorAdvanced(IReadOnlyList`1<double> operands, NameToken patternName);
    private static SetNonStrokeColorAdvanced();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Operands();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameToken get_PatternName();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColorDeviceCmyk : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    [CompilerGeneratedAttribute]
private double <M>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <K>k__BackingField;
    public string Operator { get; }
    public double C { get; }
    public double M { get; }
    public double Y { get; }
    public double K { get; }
    public SetNonStrokeColorDeviceCmyk(double c, double m, double y, double k);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public double get_M();
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public double get_K();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColorDeviceGray : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Gray>k__BackingField;
    public string Operator { get; }
    public double Gray { get; }
    public SetNonStrokeColorDeviceGray(double gray);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Gray();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColorDeviceRgb : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <R>k__BackingField;
    [CompilerGeneratedAttribute]
private double <G>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    public string Operator { get; }
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public SetNonStrokeColorDeviceRgb(double r, double g, double b);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_R();
    [CompilerGeneratedAttribute]
public double get_G();
    [CompilerGeneratedAttribute]
public double get_B();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetNonStrokeColorSpace : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public SetNonStrokeColorSpace(NameToken name);
    private static SetNonStrokeColorSpace();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColor : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Operands>k__BackingField;
    public string Operator { get; }
    public IReadOnlyList`1<double> Operands { get; }
    public SetStrokeColor(Double[] operands);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Operands();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColorAdvanced : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Operands>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameToken <PatternName>k__BackingField;
    public string Operator { get; }
    public IReadOnlyList`1<double> Operands { get; }
    [NullableAttribute("2")]
public NameToken PatternName { get; }
    public SetStrokeColorAdvanced(IReadOnlyList`1<double> operands);
    public SetStrokeColorAdvanced(IReadOnlyList`1<double> operands, NameToken patternName);
    private static SetStrokeColorAdvanced();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Operands();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameToken get_PatternName();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColorDeviceCmyk : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    [CompilerGeneratedAttribute]
private double <M>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <K>k__BackingField;
    public string Operator { get; }
    public double C { get; }
    public double M { get; }
    public double Y { get; }
    public double K { get; }
    public SetStrokeColorDeviceCmyk(double c, double m, double y, double k);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public double get_M();
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public double get_K();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColorDeviceGray : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Gray>k__BackingField;
    public string Operator { get; }
    public double Gray { get; }
    public SetStrokeColorDeviceGray(double gray);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Gray();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColorDeviceRgb : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <R>k__BackingField;
    [CompilerGeneratedAttribute]
private double <G>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    public string Operator { get; }
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public SetStrokeColorDeviceRgb(double r, double g, double b);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_R();
    [CompilerGeneratedAttribute]
public double get_G();
    [CompilerGeneratedAttribute]
public double get_B();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SetStrokeColorSpace : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public SetStrokeColorSpace(NameToken name);
    private static SetStrokeColorSpace();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SpecialGraphicsState.ModifyCurrentTransformationMatrix : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private Double[] <Value>k__BackingField;
    public string Operator { get; }
    public Double[] Value { get; }
    public ModifyCurrentTransformationMatrix(Double[] value);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public Double[] get_Value();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SpecialGraphicsState.Pop : object {
    public static string Symbol;
    public static Pop Value;
    public string Operator { get; }
    private static Pop();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SpecialGraphicsState.Push : object {
    public static string Symbol;
    public static Push Value;
    public string Operator { get; }
    private static Push();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext context);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.SpecialGraphicsState.SetGraphicsStateParametersFromDictionary : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    public string Operator { get; }
    public NameToken Name { get; }
    public SetGraphicsStateParametersFromDictionary(NameToken name);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Name();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextObjects.BeginText : object {
    public static string Symbol;
    public static BeginText Value;
    public string Operator { get; }
    private static BeginText();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextObjects.EndText : object {
    public static string Symbol;
    public static EndText Value;
    public string Operator { get; }
    private static EndText();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextPositioning.MoveToNextLine : object {
    public static string Symbol;
    public static MoveToNextLine Value;
    public string Operator { get; }
    private static MoveToNextLine();
    public sealed virtual string get_Operator();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextPositioning.MoveToNextLineWithOffset : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ty>k__BackingField;
    public string Operator { get; }
    public double Tx { get; }
    public double Ty { get; }
    public MoveToNextLineWithOffset(double tx, double ty);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Tx();
    [CompilerGeneratedAttribute]
public double get_Ty();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextPositioning.MoveToNextLineWithOffsetSetLeading : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ty>k__BackingField;
    public string Operator { get; }
    public double Tx { get; }
    public double Ty { get; }
    public MoveToNextLineWithOffsetSetLeading(double tx, double ty);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Tx();
    [CompilerGeneratedAttribute]
public double get_Ty();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextPositioning.SetTextMatrix : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private Double[] <Value>k__BackingField;
    public string Operator { get; }
    public Double[] Value { get; }
    public SetTextMatrix(Double[] value);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public Double[] get_Value();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextShowing.MoveToNextLineShowText : object {
    public static string Symbol;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public string Operator { get; }
    [NullableAttribute("2")]
public string Text { get; }
    [NullableAttribute("2")]
public Byte[] Bytes { get; }
    public MoveToNextLineShowText(string text);
    public MoveToNextLineShowText(Byte[] hexBytes);
    public sealed virtual string get_Operator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextShowing.MoveToNextLineShowTextWithSpacing : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <WordSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CharacterSpacing>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Operator { get; }
    public double WordSpacing { get; }
    public double CharacterSpacing { get; }
    [NullableAttribute("2")]
public Byte[] Bytes { get; }
    [NullableAttribute("2")]
public string Text { get; }
    public MoveToNextLineShowTextWithSpacing(double wordSpacing, double characterSpacing, string text);
    public MoveToNextLineShowTextWithSpacing(double wordSpacing, double characterSpacing, Byte[] hexBytes);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_WordSpacing();
    [CompilerGeneratedAttribute]
public double get_CharacterSpacing();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextShowing.ShowText : object {
    public static string Symbol;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public string Operator { get; }
    [NullableAttribute("2")]
public string Text { get; }
    [NullableAttribute("2")]
public Byte[] Bytes { get; }
    public ShowText(string text);
    public ShowText(Byte[] hexBytes);
    public sealed virtual string get_Operator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    public sealed virtual void Run(IOperationContext operationContext);
    [NullableContextAttribute("2")]
private string EscapeText(string text);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextShowing.ShowTextsWithPositioning : object {
    private static TokenWriter TokenWriter;
    public static string Symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IToken> <Array>k__BackingField;
    public string Operator { get; }
    public IReadOnlyList`1<IToken> Array { get; }
    public ShowTextsWithPositioning(IReadOnlyList`1<IToken> array);
    private static ShowTextsWithPositioning();
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IToken> get_Array();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetCharacterSpacing : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Spacing>k__BackingField;
    public string Operator { get; }
    public double Spacing { get; }
    public SetCharacterSpacing(double spacing);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Spacing();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetFontAndSize : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private NameToken <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    public string Operator { get; }
    public NameToken Font { get; }
    public double Size { get; }
    public SetFontAndSize(NameToken font, double size);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public NameToken get_Font();
    [CompilerGeneratedAttribute]
public double get_Size();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetHorizontalScaling : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    public string Operator { get; }
    public double Scale { get; }
    public SetHorizontalScaling(double scale);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Scale();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetTextLeading : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Leading>k__BackingField;
    public string Operator { get; }
    public double Leading { get; }
    public SetTextLeading(double leading);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Leading();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetTextRenderingMode : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private TextRenderingMode <Mode>k__BackingField;
    public string Operator { get; }
    public TextRenderingMode Mode { get; }
    public SetTextRenderingMode(TextRenderingMode mode);
    public SetTextRenderingMode(int mode);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public TextRenderingMode get_Mode();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetTextRise : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Rise>k__BackingField;
    public string Operator { get; }
    public double Rise { get; }
    public SetTextRise(double rise);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Rise();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.SetWordSpacing : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <Spacing>k__BackingField;
    public string Operator { get; }
    public double Spacing { get; }
    public SetWordSpacing(double spacing);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_Spacing();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.Type3SetGlyphWidth : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <HorizontalDisplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalDisplacement>k__BackingField;
    public string Operator { get; }
    public double HorizontalDisplacement { get; }
    public double VerticalDisplacement { get; }
    public Type3SetGlyphWidth(double horizontalDisplacement, double verticalDisplacement);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_HorizontalDisplacement();
    [CompilerGeneratedAttribute]
public double get_VerticalDisplacement();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.Operations.TextState.Type3SetGlyphWidthAndBoundingBox : object {
    public static string Symbol;
    [CompilerGeneratedAttribute]
private double <HorizontalDisplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalDisplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerLeftX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerLeftY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperRightX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperRightY>k__BackingField;
    public string Operator { get; }
    public double HorizontalDisplacement { get; }
    public double VerticalDisplacement { get; }
    public double LowerLeftX { get; }
    public double LowerLeftY { get; }
    public double UpperRightX { get; }
    public double UpperRightY { get; }
    public Type3SetGlyphWidthAndBoundingBox(double horizontalDisplacement, double verticalDisplacement, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
    public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public double get_HorizontalDisplacement();
    [CompilerGeneratedAttribute]
public double get_VerticalDisplacement();
    [CompilerGeneratedAttribute]
public double get_LowerLeftX();
    [CompilerGeneratedAttribute]
public double get_LowerLeftY();
    [CompilerGeneratedAttribute]
public double get_UpperRightX();
    [CompilerGeneratedAttribute]
public double get_UpperRightY();
    public sealed virtual void Run(IOperationContext operationContext);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class UglyToad.PdfPig.Graphics.PdfPath : List`1<PdfSubpath> {
    [CompilerGeneratedAttribute]
private FillingRule <FillingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClipping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFilled>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStroked>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LineDashPattern> <LineDashPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private LineCapStyle <LineCapStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoinStyle <LineJoinStyle>k__BackingField;
    public FillingRule FillingRule { get; private set; }
    public bool IsClipping { get; private set; }
    public bool IsFilled { get; private set; }
    public IColor FillColor { get; internal set; }
    public bool IsStroked { get; private set; }
    public IColor StrokeColor { get; internal set; }
    public double LineWidth { get; internal set; }
    public Nullable`1<LineDashPattern> LineDashPattern { get; internal set; }
    public LineCapStyle LineCapStyle { get; internal set; }
    public LineJoinStyle LineJoinStyle { get; internal set; }
    [CompilerGeneratedAttribute]
public FillingRule get_FillingRule();
    [CompilerGeneratedAttribute]
private void set_FillingRule(FillingRule value);
    [CompilerGeneratedAttribute]
public bool get_IsClipping();
    [CompilerGeneratedAttribute]
private void set_IsClipping(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFilled();
    [CompilerGeneratedAttribute]
private void set_IsFilled(bool value);
    [CompilerGeneratedAttribute]
public IColor get_FillColor();
    [CompilerGeneratedAttribute]
internal void set_FillColor(IColor value);
    [CompilerGeneratedAttribute]
public bool get_IsStroked();
    [CompilerGeneratedAttribute]
private void set_IsStroked(bool value);
    [CompilerGeneratedAttribute]
public IColor get_StrokeColor();
    [CompilerGeneratedAttribute]
internal void set_StrokeColor(IColor value);
    [CompilerGeneratedAttribute]
public double get_LineWidth();
    [CompilerGeneratedAttribute]
internal void set_LineWidth(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<LineDashPattern> get_LineDashPattern();
    [CompilerGeneratedAttribute]
internal void set_LineDashPattern(Nullable`1<LineDashPattern> value);
    [CompilerGeneratedAttribute]
public LineCapStyle get_LineCapStyle();
    [CompilerGeneratedAttribute]
internal void set_LineCapStyle(LineCapStyle value);
    [CompilerGeneratedAttribute]
public LineJoinStyle get_LineJoinStyle();
    [CompilerGeneratedAttribute]
internal void set_LineJoinStyle(LineJoinStyle value);
    public void SetClipping(FillingRule fillingRule);
    public void SetFilled(FillingRule fillingRule);
    public void SetStroked();
    [NullableContextAttribute("1")]
internal PdfPath CloneEmpty();
    public Nullable`1<PdfRectangle> GetBoundingRectangle();
}
public static class UglyToad.PdfPig.Graphics.PerformantRectangleTransformer : object {
    public static PdfRectangle Transform(TransformationMatrix& first, TransformationMatrix& second, TransformationMatrix& third, PdfRectangle rectangle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Graphics.ReflectionGraphicsStateOperationFactory : object {
    private static IReadOnlyDictionary`2<string, Type> operations;
    private static ReflectionGraphicsStateOperationFactory();
    private static Double[] TokensToDoubleArray(IReadOnlyList`1<IToken> tokens, bool exceptLast);
    private static int OperandToInt(IToken token);
    private static double OperandToDouble(IToken token);
    public sealed virtual IGraphicsStateOperation Create(OperatorToken op, IReadOnlyList`1<IToken> operands);
}
public class UglyToad.PdfPig.Graphics.TextMatrices : object {
    [CompilerGeneratedAttribute]
private TransformationMatrix <TextMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <TextLineMatrix>k__BackingField;
    public TransformationMatrix TextMatrix { get; public set; }
    public TransformationMatrix TextLineMatrix { get; public set; }
    [CompilerGeneratedAttribute]
public TransformationMatrix get_TextMatrix();
    [CompilerGeneratedAttribute]
public void set_TextMatrix(TransformationMatrix value);
    [CompilerGeneratedAttribute]
public TransformationMatrix get_TextLineMatrix();
    [CompilerGeneratedAttribute]
public void set_TextLineMatrix(TransformationMatrix value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Graphics.XObjectContentRecord : object {
    [CompilerGeneratedAttribute]
private XObjectType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamToken <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <AppliedTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderingIntent <DefaultRenderingIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpaceDetails <DefaultColorSpace>k__BackingField;
    public XObjectType Type { get; }
    public StreamToken Stream { get; }
    public TransformationMatrix AppliedTransformation { get; }
    public RenderingIntent DefaultRenderingIntent { get; }
    public ColorSpaceDetails DefaultColorSpace { get; }
    internal XObjectContentRecord(XObjectType type, StreamToken stream, TransformationMatrix appliedTransformation, RenderingIntent defaultRenderingIntent, ColorSpaceDetails defaultColorSpace);
    [CompilerGeneratedAttribute]
public XObjectType get_Type();
    [CompilerGeneratedAttribute]
public StreamToken get_Stream();
    [CompilerGeneratedAttribute]
public TransformationMatrix get_AppliedTransformation();
    [CompilerGeneratedAttribute]
public RenderingIntent get_DefaultRenderingIntent();
    [CompilerGeneratedAttribute]
public ColorSpaceDetails get_DefaultColorSpace();
}
public static class UglyToad.PdfPig.Images.ColorSpaceDetailsByteConverter : object {
    public static ReadOnlySpan`1<byte> Convert(ColorSpaceDetails details, ReadOnlySpan`1<byte> decoded, int bitsPerComponent, int imageWidth, int imageHeight);
    private static Span`1<byte> UnpackComponents(Span`1<byte> input, int bitsPerComponent);
    private static Span`1<byte> RemoveStridePadding(Span`1<byte> input, int strideWidth, int imageWidth, int imageHeight, int multiplier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Images.JpegHandler : object {
    private static byte MarkerStart;
    private static byte StartOfImage;
    public static JpegInformation GetInformation(Stream stream);
    private static bool HasRecognizedHeader(Stream stream);
    private static byte ReadSegmentMarker(Stream stream, bool skipData);
    private static ushort ReadShort(Stream stream, Byte[] buffer);
}
internal class UglyToad.PdfPig.Images.JpegInformation : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfComponents>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public int BitsPerComponent { get; }
    public int NumberOfComponents { get; }
    public JpegInformation(int width, int height, int bitsPerComponent, int numberOfComponents);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_NumberOfComponents();
}
internal enum UglyToad.PdfPig.Images.JpegMarker : Enum {
    public byte value__;
    public static JpegMarker StartOfBaselineDctFrame;
    public static JpegMarker StartOfProgressiveDctFrame;
    public static JpegMarker DefineHuffmanTable;
    public static JpegMarker StartOfScan;
    public static JpegMarker DefineQuantizationTable;
    public static JpegMarker DefineRestartInterval;
    public static JpegMarker Restart0;
    public static JpegMarker Restart1;
    public static JpegMarker Restart2;
    public static JpegMarker Restart3;
    public static JpegMarker Restart4;
    public static JpegMarker Restart5;
    public static JpegMarker Restart6;
    public static JpegMarker Restart7;
    public static JpegMarker StartOfImage;
    public static JpegMarker EndOfImage;
    public static JpegMarker ApplicationSpecific0;
    public static JpegMarker ApplicationSpecific1;
    public static JpegMarker ApplicationSpecific2;
    public static JpegMarker ApplicationSpecific3;
    public static JpegMarker ApplicationSpecific4;
    public static JpegMarker ApplicationSpecific5;
    public static JpegMarker ApplicationSpecific6;
    public static JpegMarker ApplicationSpecific7;
    public static JpegMarker ApplicationSpecific8;
    public static JpegMarker ApplicationSpecific9;
    public static JpegMarker ApplicationSpecific10;
    public static JpegMarker ApplicationSpecific11;
    public static JpegMarker ApplicationSpecific12;
    public static JpegMarker ApplicationSpecific13;
    public static JpegMarker ApplicationSpecific14;
    public static JpegMarker ApplicationSpecific15;
    public static JpegMarker Comment;
}
internal static class UglyToad.PdfPig.Images.Png.Adam7 : object {
    [NullableAttribute("1")]
private static Int32[][] PassToScanlineGridIndex;
    [NullableAttribute("1")]
private static Int32[][] PassToScanlineColumnIndex;
    private static Adam7();
    public static int GetNumberOfScanlinesInPass(ImageHeader header, int pass);
    public static int GetPixelsPerScanlineInPass(ImageHeader header, int pass);
    public static ValueTuple`2<int, int> GetPixelIndexForScanlineInPass(ImageHeader header, int pass, int scanlineIndex, int indexInScanline);
}
internal static class UglyToad.PdfPig.Images.Png.Adler32Checksum : object {
    private static int AdlerModulus;
    public static int Calculate(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Images.Png.ChunkHeader : ValueType {
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long Position { get; }
    public int Length { get; }
    public string Name { get; }
    public bool IsCritical { get; }
    public bool IsPublic { get; }
    public bool IsSafeToCopy { get; }
    public ChunkHeader(long position, int length, string name);
    [CompilerGeneratedAttribute]
public long get_Position();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public string get_Name();
    public bool get_IsCritical();
    public bool get_IsPublic();
    public bool get_IsSafeToCopy();
    public virtual string ToString();
}
[FlagsAttribute]
internal enum UglyToad.PdfPig.Images.Png.ColorType : Enum {
    public byte value__;
    public static ColorType None;
    public static ColorType PaletteUsed;
    public static ColorType ColorUsed;
    public static ColorType AlphaChannelUsed;
}
internal enum UglyToad.PdfPig.Images.Png.CompressionMethod : Enum {
    public byte value__;
    public static CompressionMethod DeflateWithSlidingWindow;
}
internal class UglyToad.PdfPig.Images.Png.Crc32 : object {
    private static UInt32 Polynomial;
    [NullableAttribute("1")]
private static UInt32[] Lookup;
    private UInt32 state;
    private static Crc32();
    public static UInt32 Calculate(ReadOnlySpan`1<byte> data);
    public static UInt32 Calculate(ReadOnlySpan`1<byte> data, ReadOnlySpan`1<byte> data2);
    public void Append(ReadOnlySpan`1<byte> data);
    public UInt32 GetCurrentHashAsUInt32();
    public void Reset();
}
internal static class UglyToad.PdfPig.Images.Png.Decoder : object {
    public static ValueTuple`2<byte, byte> GetBytesAndSamplesPerPixel(ImageHeader header);
    [NullableContextAttribute("1")]
public static Byte[] Decode(Byte[] decompressedData, ImageHeader header, byte bytesPerPixel, byte samplesPerPixel);
    private static byte SamplesPerPixel(ImageHeader header);
    private static int BytesPerScanline(ImageHeader header, byte samplesPerPixel);
    [NullableContextAttribute("1")]
private static void ReverseFilter(Byte[] data, FilterType type, int previousRowStartByteAbsolute, int rowStartByteAbsolute, int byteAbsolute, int rowByteIndex, int bytesPerPixel);
    private static byte GetPaethValue(byte a, byte b, byte c);
    [CompilerGeneratedAttribute]
internal static byte <ReverseFilter>g__GetLeftByteValue|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static byte <ReverseFilter>g__GetAboveByteValue|4_1(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static byte <ReverseFilter>g__GetAboveLeftByteValue|4_2(<>c__DisplayClass4_0& );
}
internal enum UglyToad.PdfPig.Images.Png.FilterMethod : Enum {
    public int value__;
    public static FilterMethod AdaptiveFiltering;
}
internal enum UglyToad.PdfPig.Images.Png.FilterType : Enum {
    public int value__;
    public static FilterType None;
    public static FilterType Sub;
    public static FilterType Up;
    public static FilterType Average;
    public static FilterType Paeth;
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Images.Png.HeaderValidationResult : ValueType {
    [CompilerGeneratedAttribute]
private int <Byte1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte3>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte4>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte5>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte6>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte7>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Byte8>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public static ReadOnlySpan`1<byte> ExpectedHeader { get; }
    public int Byte1 { get; }
    public int Byte2 { get; }
    public int Byte3 { get; }
    public int Byte4 { get; }
    public int Byte5 { get; }
    public int Byte6 { get; }
    public int Byte7 { get; }
    public int Byte8 { get; }
    public bool IsValid { get; }
    public HeaderValidationResult(int byte1, int byte2, int byte3, int byte4, int byte5, int byte6, int byte7, int byte8);
    public static ReadOnlySpan`1<byte> get_ExpectedHeader();
    [CompilerGeneratedAttribute]
public int get_Byte1();
    [CompilerGeneratedAttribute]
public int get_Byte2();
    [CompilerGeneratedAttribute]
public int get_Byte3();
    [CompilerGeneratedAttribute]
public int get_Byte4();
    [CompilerGeneratedAttribute]
public int get_Byte5();
    [CompilerGeneratedAttribute]
public int get_Byte6();
    [CompilerGeneratedAttribute]
public int get_Byte7();
    [CompilerGeneratedAttribute]
public int get_Byte8();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Images.Png.IChunkVisitor {
    public abstract virtual void Visit(Stream stream, ImageHeader header, ChunkHeader chunkHeader, Byte[] data, Byte[] crc);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Images.Png.ImageHeader : ValueType {
    [NullableAttribute("1")]
private static IReadOnlyDictionary`2<ColorType, HashSet`1<byte>> PermittedBitDepths;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BitDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <CompressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterMethod <FilterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private InterlaceMethod <InterlaceMethod>k__BackingField;
    internal static ReadOnlySpan`1<byte> HeaderBytes { get; }
    public int Width { get; }
    public int Height { get; }
    public byte BitDepth { get; }
    public ColorType ColorType { get; }
    public CompressionMethod CompressionMethod { get; }
    public FilterMethod FilterMethod { get; }
    public InterlaceMethod InterlaceMethod { get; }
    public ImageHeader(int width, int height, byte bitDepth, ColorType colorType, CompressionMethod compressionMethod, FilterMethod filterMethod, InterlaceMethod interlaceMethod);
    private static ImageHeader();
    internal static ReadOnlySpan`1<byte> get_HeaderBytes();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public byte get_BitDepth();
    [CompilerGeneratedAttribute]
public ColorType get_ColorType();
    [CompilerGeneratedAttribute]
public CompressionMethod get_CompressionMethod();
    [CompilerGeneratedAttribute]
public FilterMethod get_FilterMethod();
    [CompilerGeneratedAttribute]
public InterlaceMethod get_InterlaceMethod();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal enum UglyToad.PdfPig.Images.Png.InterlaceMethod : Enum {
    public byte value__;
    public static InterlaceMethod None;
    public static InterlaceMethod Adam7;
}
internal class UglyToad.PdfPig.Images.Png.Palette : object {
    [CompilerGeneratedAttribute]
private bool <HasAlphaValues>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public bool HasAlphaValues { get; private set; }
    [NullableAttribute("1")]
public Byte[] Data { get; }
    public Palette(ReadOnlySpan`1<byte> data);
    [CompilerGeneratedAttribute]
public bool get_HasAlphaValues();
    [CompilerGeneratedAttribute]
private void set_HasAlphaValues(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Byte[] get_Data();
    public void SetAlphaValues(ReadOnlySpan`1<byte> bytes);
    public Pixel GetPixel(int index);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Images.Png.Pixel : ValueType {
    [CompilerGeneratedAttribute]
private byte <R>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <G>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <B>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <A>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGrayscale>k__BackingField;
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public byte A { get; }
    public bool IsGrayscale { get; }
    public Pixel(byte r, byte g, byte b, byte a, bool isGrayscale);
    public Pixel(byte r, byte g, byte b);
    public Pixel(byte grayscale);
    [CompilerGeneratedAttribute]
public byte get_R();
    [CompilerGeneratedAttribute]
public byte get_G();
    [CompilerGeneratedAttribute]
public byte get_B();
    [CompilerGeneratedAttribute]
public byte get_A();
    [CompilerGeneratedAttribute]
public bool get_IsGrayscale();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public bool Equals(Pixel other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Images.Png.Png : object {
    private RawPngData data;
    private bool hasTransparencyChunk;
    [CompilerGeneratedAttribute]
private ImageHeader <Header>k__BackingField;
    public ImageHeader Header { get; }
    public int Width { get; }
    public int Height { get; }
    public bool HasAlphaChannel { get; }
    internal Png(ImageHeader header, RawPngData data, bool hasTransparencyChunk);
    [CompilerGeneratedAttribute]
public ImageHeader get_Header();
    public int get_Width();
    public int get_Height();
    public bool get_HasAlphaChannel();
    public Pixel GetPixel(int x, int y);
    public static Png Open(Stream stream, IChunkVisitor chunkVisitor);
    public static Png Open(Byte[] bytes, IChunkVisitor chunkVisitor);
    public static Png Open(string filePath, IChunkVisitor chunkVisitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Images.Png.PngBuilder : object {
    private static byte Deflate32KbWindow;
    private static byte ChecksumBits;
    private Byte[] rawData;
    private bool hasAlphaChannel;
    private int width;
    private int height;
    private int bytesPerPixel;
    private PngBuilder(Byte[] rawData, bool hasAlphaChannel, int width, int height, int bytesPerPixel);
    public static PngBuilder Create(int width, int height, bool hasAlphaChannel);
    public PngBuilder SetPixel(byte r, byte g, byte b, int x, int y);
    public PngBuilder SetPixel(Pixel pixel, int x, int y);
    public Byte[] Save();
    public void Save(Stream outputStream);
    private static Byte[] Compress(Byte[] data);
}
internal static class UglyToad.PdfPig.Images.Png.PngFromPdfImageFactory : object {
    [NullableContextAttribute("1")]
public static bool TryGenerate(IPdfImage image, Byte[]& bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Images.Png.PngOpener : object {
    public static Png Open(Stream stream, IChunkVisitor chunkVisitor);
    public static Png Open(Stream stream, PngOpenerSettings settings);
    private static HeaderValidationResult HasValidHeader(Stream stream);
    private static bool TryReadChunkHeader(Stream stream, ChunkHeader& chunkHeader);
    private static ImageHeader ReadImageHeader(Stream stream, Byte[] crc);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Images.Png.PngOpenerSettings : object {
    [CompilerGeneratedAttribute]
private IChunkVisitor <ChunkVisitor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisallowTrailingData>k__BackingField;
    public IChunkVisitor ChunkVisitor { get; public set; }
    public bool DisallowTrailingData { get; public set; }
    [CompilerGeneratedAttribute]
public IChunkVisitor get_ChunkVisitor();
    [CompilerGeneratedAttribute]
public void set_ChunkVisitor(IChunkVisitor value);
    [CompilerGeneratedAttribute]
public bool get_DisallowTrailingData();
    [CompilerGeneratedAttribute]
public void set_DisallowTrailingData(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Images.Png.PngStreamWriteHelper : Stream {
    private Stream inner;
    private Crc32 crc;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PngStreamWriteHelper(Stream inner);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    [NullableContextAttribute("0")]
public void WriteChunkHeader(ReadOnlySpan`1<byte> header);
    public void WriteChunkLength(int length);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public void WriteCrc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Images.Png.RawPngData : object {
    private Byte[] data;
    private int bytesPerPixel;
    private int width;
    [NullableAttribute("2")]
private Palette palette;
    private ColorType colorType;
    private int rowOffset;
    private int bitDepth;
    public RawPngData(Byte[] data, int bytesPerPixel, Palette palette, ImageHeader imageHeader);
    public Pixel GetPixel(int x, int y);
    private static byte ToSingleByte(byte first, byte second);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Images.Png.StreamHelper : object {
    public static void WriteBigEndianInt32(Stream stream, int value);
    public static bool TryReadHeaderBytes(Stream stream, Byte[]& bytes);
}
internal class UglyToad.PdfPig.IO.RandomAccessBuffer : object {
    private static int DefaultChunkSize;
    private int chunkSize;
    private List`1<Byte[]> bufferList;
    private Byte[] currentBuffer;
    private long pointer;
    private int currentBufferPointer;
    private long size;
    private int bufferListIndex;
    private int bufferListMaxIndex;
    private RandomAccessBuffer(int definedChunkSize);
    public RandomAccessBuffer(Byte[] input);
    public RandomAccessBuffer(BinaryReader input);
    private static RandomAccessBuffer();
    public RandomAccessBuffer Clone();
    public sealed virtual void Dispose();
    public void clear();
    public void Seek(long position);
    public long GetPosition();
    public int Read();
    public int Read(Byte[] b, int offset, int length);
    private int ReadRemainingBytes(Byte[] b, int offset, int length);
    public long Length();
    public void write(int b);
    public void write(Byte[] b);
    public void write(Byte[] b, int offset, int length);
    private void ExpandBuffer();
    private void NextBuffer();
    private void CheckClosed();
    public bool IsClosed();
    public bool IsEof();
    public int Available();
    public void ReturnToBeginning();
    public int Peek();
    public void Rewind(int bytes);
    public Byte[] ReadFully(int length);
    public int Read(Byte[] b);
    public void Unread(int b);
    public void Unread(Byte[] bytes);
    public void Unread(Byte[] bytes, int start, int len);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.IO.StreamWrapper : Stream {
    protected Stream Stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream stream);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Logging.ILog {
    public abstract virtual void Debug(string message);
    public abstract virtual void Debug(string message, Exception ex);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Logging.NoOpLog : object {
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Exception ex);
    public sealed virtual void Warn(string message);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class UglyToad.PdfPig.Outline.BookmarkNode : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BookmarkNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLeaf>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public string Title { get; }
    public IReadOnlyList`1<BookmarkNode> Children { get; }
    public bool IsLeaf { get; }
    public int Level { get; }
    protected BookmarkNode(string title, int level, IReadOnlyList`1<BookmarkNode> children);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BookmarkNode> get_Children();
    [CompilerGeneratedAttribute]
public bool get_IsLeaf();
    [CompilerGeneratedAttribute]
public int get_Level();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.Bookmarks : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BookmarkNode> <Roots>k__BackingField;
    public IReadOnlyList`1<BookmarkNode> Roots { get; }
    public Bookmarks(IReadOnlyList`1<BookmarkNode> roots);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BookmarkNode> get_Roots();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Outline.Bookmarks/<GetNodes>d__4")]
public IEnumerable`1<BookmarkNode> GetNodes();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Outline.Bookmarks/<GetNodes>d__5")]
private static IEnumerable`1<BookmarkNode> GetNodes(BookmarkNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Outline.BookmarksProvider : object {
    private ILog log;
    private IPdfTokenScanner pdfScanner;
    public BookmarksProvider(ILog log, IPdfTokenScanner pdfScanner);
    public Bookmarks GetBookmarks(Catalog catalog);
    private void ReadBookmarksRecursively(DictionaryToken nodeDictionary, int level, bool readSiblings, HashSet`1<IndirectReference> seen, NamedDestinations namedDestinations, List`1<BookmarkNode> list);
}
internal static class UglyToad.PdfPig.Outline.Destinations.DestinationProvider : object {
    [NullableContextAttribute("1")]
internal static bool TryGetDestination(DictionaryToken dictionary, NameToken destinationToken, NamedDestinations namedDestinations, IPdfTokenScanner pdfScanner, ILog log, bool isRemoteDestination, ExplicitDestination& destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.Destinations.ExplicitDestination : object {
    [CompilerGeneratedAttribute]
private int <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplicitDestinationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplicitDestinationCoordinates <Coordinates>k__BackingField;
    public int PageNumber { get; }
    public ExplicitDestinationType Type { get; }
    public ExplicitDestinationCoordinates Coordinates { get; }
    public ExplicitDestination(int pageNumber, ExplicitDestinationType type, ExplicitDestinationCoordinates coordinates);
    [CompilerGeneratedAttribute]
public int get_PageNumber();
    [CompilerGeneratedAttribute]
public ExplicitDestinationType get_Type();
    [CompilerGeneratedAttribute]
public ExplicitDestinationCoordinates get_Coordinates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.Destinations.ExplicitDestinationCoordinates : object {
    [CompilerGeneratedAttribute]
private static ExplicitDestinationCoordinates <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Bottom>k__BackingField;
    public static ExplicitDestinationCoordinates Empty { get; }
    public Nullable`1<double> Left { get; }
    public Nullable`1<double> Top { get; }
    public Nullable`1<double> Right { get; }
    public Nullable`1<double> Bottom { get; }
    public ExplicitDestinationCoordinates(Nullable`1<double> left);
    public ExplicitDestinationCoordinates(Nullable`1<double> left, Nullable`1<double> top);
    public ExplicitDestinationCoordinates(Nullable`1<double> left, Nullable`1<double> top, Nullable`1<double> right, Nullable`1<double> bottom);
    private static ExplicitDestinationCoordinates();
    [CompilerGeneratedAttribute]
public static ExplicitDestinationCoordinates get_Empty();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Left();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Top();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Right();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Bottom();
}
public enum UglyToad.PdfPig.Outline.Destinations.ExplicitDestinationType : Enum {
    public int value__;
    public static ExplicitDestinationType XyzCoordinates;
    public static ExplicitDestinationType FitPage;
    public static ExplicitDestinationType FitHorizontally;
    public static ExplicitDestinationType FitVertically;
    public static ExplicitDestinationType FitRectangle;
    public static ExplicitDestinationType FitBoundingBox;
    public static ExplicitDestinationType FitBoundingBoxHorizontally;
    public static ExplicitDestinationType FitBoundingBoxVertically;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.Destinations.NamedDestinations : object {
    private IReadOnlyDictionary`2<string, ExplicitDestination> namedDestinations;
    private Pages pages;
    internal NamedDestinations(IReadOnlyDictionary`2<string, ExplicitDestination> namedDestinations, Pages pages);
    internal bool TryGet(string name, ExplicitDestination& destination);
    internal bool TryGetExplicitDestination(ArrayToken explicitDestinationArray, ILog log, bool isRemoteDestination, ExplicitDestination& destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Outline.Destinations.NamedDestinationsProvider : object {
    internal static NamedDestinations Read(DictionaryToken catalogDictionary, IPdfTokenScanner pdfScanner, Pages pages, ILog log);
    private static bool TryReadExplicitDestination(IToken value, IPdfTokenScanner pdfScanner, Pages pages, ILog log, bool isRemoteDestination, ExplicitDestination& destination);
    internal static bool TryGetExplicitDestination(ArrayToken explicitDestinationArray, Pages pages, ILog log, bool isRemoteDestination, ExplicitDestination& destination);
    [CompilerGeneratedAttribute]
internal static Nullable`1<double> <TryGetExplicitDestination>g__GetPossibleEntry|2_0(int index, <>c__DisplayClass2_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.DocumentBookmarkNode : BookmarkNode {
    [CompilerGeneratedAttribute]
private ExplicitDestination <Destination>k__BackingField;
    public int PageNumber { get; }
    public ExplicitDestination Destination { get; }
    public DocumentBookmarkNode(string title, int level, ExplicitDestination destination, IReadOnlyList`1<BookmarkNode> children);
    public int get_PageNumber();
    [CompilerGeneratedAttribute]
public ExplicitDestination get_Destination();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.EmbeddedBookmarkNode : DocumentBookmarkNode {
    [CompilerGeneratedAttribute]
private string <FileSpecification>k__BackingField;
    public string FileSpecification { get; }
    public EmbeddedBookmarkNode(string title, int level, ExplicitDestination destination, IReadOnlyList`1<BookmarkNode> children, string fileSpecification);
    [CompilerGeneratedAttribute]
public string get_FileSpecification();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.ExternalBookmarkNode : DocumentBookmarkNode {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; }
    public ExternalBookmarkNode(string title, int level, ExplicitDestination destination, IReadOnlyList`1<BookmarkNode> children, string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Outline.UriBookmarkNode : BookmarkNode {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; }
    public UriBookmarkNode(string title, int level, string uri, IReadOnlyList`1<BookmarkNode> children);
    [CompilerGeneratedAttribute]
public string get_Uri();
    public virtual string ToString();
}
internal static class UglyToad.PdfPig.Parser.CatalogFactory : object {
    [NullableContextAttribute("1")]
public static Catalog Create(IndirectReference rootReference, DictionaryToken dictionary, IPdfTokenScanner scanner, PageFactory pageFactory, ILog log, bool isLenientParsing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.DocumentInformationFactory : object {
    public static DocumentInformation Create(IPdfTokenScanner pdfTokenScanner, TrailerDictionary trailer, bool isLenientParsing);
    private static string GetEntryOrDefault(DictionaryToken infoDictionary, NameToken key, IPdfTokenScanner pdfTokenScanner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.FileStructure.CrossReferenceObjectOffsetValidator : object {
    private static long MinimumSearchOffset;
    public static bool ValidateCrossReferenceOffsets(IInputBytes bytes, CrossReferenceTable crossReferenceTable, ILog log, IReadOnlyDictionary`2& actualOffsets);
    private static bool ValidateXrefOffsets(IInputBytes bytes, IReadOnlyDictionary`2<IndirectReference, long> objectOffsets, ILog log);
    private static bool CheckObjectKeys(IInputBytes bytes, IndirectReference objectKey, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.FileStructure.CrossReferenceOffsetValidator : object {
    private XrefOffsetValidator offsetValidator;
    public CrossReferenceOffsetValidator(XrefOffsetValidator offsetValidator);
    public long Validate(long crossReferenceOffset, ISeekableTokenScanner scanner, IInputBytes bytes, bool isLenientParsing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.FileStructure.CrossReferenceParser : object {
    private ILog log;
    private XrefOffsetValidator offsetValidator;
    private CrossReferenceStreamParser crossReferenceStreamParser;
    public CrossReferenceParser(ILog log, XrefOffsetValidator offsetValidator, CrossReferenceStreamParser crossReferenceStreamParser);
    public CrossReferenceTable Parse(IInputBytes bytes, bool isLenientParsing, long crossReferenceLocation, long offsetCorrection, IPdfTokenScanner pdfScanner, ISeekableTokenScanner tokenScanner);
    private bool TryParseCrossReferenceStream(long objByteOffset, IPdfTokenScanner pdfScanner, Nullable`1<long> fromTableAtOffset, CrossReferenceTablePart& xrefTablePart);
    private bool TryBruteForceXrefTableLocate(IInputBytes bytes, long expectedOffset, Int64& actualOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.FileStructure.CrossReferenceTableParser : object {
    private static string InUseEntry;
    private static string FreeEntry;
    public static CrossReferenceTablePart Parse(ISeekableTokenScanner scanner, long offset, bool isLenientParsing);
    public static bool IsCrossReferenceMarker(ISeekableTokenScanner scanner, bool isLenientParsing);
    private static int ProcessTokens(ReadOnlySpan`1<IToken> tokens, CrossReferenceTablePartBuilder builder, bool isLenientParsing, int objectCount, TableSubsectionDefinition& definition);
    private static DictionaryToken ParseTrailer(ISeekableTokenScanner scanner, bool isLenientParsing);
    [CompilerGeneratedAttribute]
internal static string <ProcessTokens>g__GetErrorMessage|4_0(ReadOnlySpan`1<IToken> tokens);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.FileStructure.FileHeaderParser : object {
    public static HeaderVersion Parse(ISeekableTokenScanner scanner, IInputBytes inputBytes, bool isLenientParsing, ILog log);
    private static HeaderVersion GetHeaderVersionAndResetScanner(CommentToken comment, ISeekableTokenScanner scanner, bool isLenientParsing, ILog log);
    private static bool TryBruteForceVersionLocation(long startPosition, IInputBytes inputBytes, HeaderVersion& headerVersion);
    private static HeaderVersion HandleMissingVersion(CommentToken comment, bool isLenientParsing, ILog log);
}
internal static class UglyToad.PdfPig.Parser.FileStructure.FileTrailerParser : object {
    private static int EndOfFileSearchRange;
    private static ReadOnlySpan`1<byte> StartXRefBytes { get; }
    private static ReadOnlySpan`1<byte> get_StartXRefBytes();
    [NullableContextAttribute("1")]
public static long GetFirstCrossReferenceOffset(IInputBytes bytes, ISeekableTokenScanner scanner, bool isLenientParsing);
    [NullableContextAttribute("1")]
private static long GetStartXrefPosition(IInputBytes bytes, int offsetFromEnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.FileStructure.XrefOffsetValidator : object {
    private static long MinimumSearchOffset;
    private ILog log;
    [NullableAttribute("2")]
private List`1<long> bfSearchXRefTablesOffsets;
    [NullableAttribute("2")]
private List`1<long> bfSearchXRefStreamsOffsets;
    public XrefOffsetValidator(ILog log);
    private static XrefOffsetValidator();
    public long CheckXRefOffset(long startXRefOffset, ISeekableTokenScanner scanner, IInputBytes inputBytes, bool isLenientParsing);
    private long CalculateXRefFixedOffset(long objectOffset, ISeekableTokenScanner scanner, IInputBytes inputBytes);
    private long BruteForceSearchForXref(long xrefOffset, ISeekableTokenScanner scanner, IInputBytes reader);
    private void BruteForceSearchForTables(IInputBytes bytes);
    private void BfSearchForXRefStreams(IInputBytes bytes);
    private static long SearchNearestValue(List`1<long> values, long offset);
    private bool CheckXRefStreamOffset(long startXRefOffset, ISeekableTokenScanner scanner, bool isLenient);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Parser.IPageContentParser {
    public abstract virtual IReadOnlyList`1<IGraphicsStateOperation> Parse(int pageNumber, IInputBytes inputBytes, ILog log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.PageContentParser : object {
    private IGraphicsStateOperationFactory operationFactory;
    private bool useLenientParsing;
    public PageContentParser(IGraphicsStateOperationFactory operationFactory, bool useLenientParsing);
    public sealed virtual IReadOnlyList`1<IGraphicsStateOperation> Parse(int pageNumber, IInputBytes inputBytes, ILog log);
    private static bool TryGetLastEndImage(List`1<IGraphicsStateOperation> graphicsStateOperations, EndInlineImage& endImage, Int32& index);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class UglyToad.PdfPig.Parser.PageFactory : BasePageFactory`1<Page> {
    public PageFactory(IPdfTokenScanner pdfScanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider, IPageContentParser pageContentParser, ParsingOptions parsingOptions);
    protected virtual Page ProcessPage(int pageNumber, DictionaryToken dictionary, NamedDestinations namedDestinations, MediaBox mediaBox, CropBox cropBox, UserSpaceUnit userSpaceUnit, PageRotationDegrees rotation, TransformationMatrix initialMatrix, IReadOnlyList`1<IGraphicsStateOperation> operations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.ParsingCachingProviders : object {
    [CompilerGeneratedAttribute]
private IResourceStore <ResourceContainer>k__BackingField;
    public IResourceStore ResourceContainer { get; }
    public ParsingCachingProviders(IResourceStore resourceContainer);
    [CompilerGeneratedAttribute]
public IResourceStore get_ResourceContainer();
}
internal static class UglyToad.PdfPig.Parser.Parts.BruteForceSearcher : object {
    private static int MinimumSearchOffset;
    [NullableContextAttribute("1")]
public static IReadOnlyDictionary`2<IndirectReference, long> GetObjectLocations(IInputBytes bytes);
    [NullableContextAttribute("1")]
private static long GetLastEndOfFileMarker(IInputBytes bytes);
    private static bool IsStartObjMarker(ReadOnlySpan`1<byte> data);
}
internal class UglyToad.PdfPig.Parser.Parts.CrossReference.CrossReferenceStreamFieldSize : object {
    [CompilerGeneratedAttribute]
private int <Field1Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Field2Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Field3Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineLength>k__BackingField;
    public int Field1Size { get; }
    public int Field2Size { get; }
    public int Field3Size { get; }
    public int LineLength { get; }
    [NullableContextAttribute("1")]
public CrossReferenceStreamFieldSize(DictionaryToken dictionary);
    [CompilerGeneratedAttribute]
public int get_Field1Size();
    [CompilerGeneratedAttribute]
public int get_Field2Size();
    [CompilerGeneratedAttribute]
public int get_Field3Size();
    [CompilerGeneratedAttribute]
public int get_LineLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Parser.Parts.CrossReference.CrossReferenceStreamParser : object {
    private IFilterProvider filterProvider;
    public CrossReferenceStreamParser(IFilterProvider filterProvider);
    public CrossReferenceTablePart Parse(long streamOffset, Nullable`1<long> fromTableAtOffset, StreamToken stream);
    private static void ReadNextStreamObject(int type, long objectNumber, CrossReferenceStreamFieldSize fieldSizes, CrossReferenceTablePartBuilder builder, ReadOnlySpan`1<byte> lineBuffer);
    private static IEnumerable`1<long> GetObjectNumbers(DictionaryToken dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Parser.Parts.CrossReference.TableSubsectionDefinition : ValueType {
    private static Char[] Splitters;
    [CompilerGeneratedAttribute]
private long <FirstNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public long FirstNumber { get; }
    public int Count { get; }
    public TableSubsectionDefinition(long firstNumber, int count);
    private static TableSubsectionDefinition();
    [CompilerGeneratedAttribute]
public long get_FirstNumber();
    [CompilerGeneratedAttribute]
public int get_Count();
    public static bool TryRead(ILog log, IInputBytes bytes, TableSubsectionDefinition& definition);
    public virtual string ToString();
}
public static class UglyToad.PdfPig.Parser.Parts.DirectObjectFinder : object {
    [NullableContextAttribute("1")]
public static bool TryGet(IToken token, IPdfTokenScanner scanner, T& tokenResult);
    [NullableContextAttribute("1")]
public static T Get(IndirectReference reference, IPdfTokenScanner scanner);
    public static T Get(IToken token, IPdfTokenScanner scanner);
}
internal static class UglyToad.PdfPig.Parser.Parts.NameTreeParser : object {
    public static IReadOnlyDictionary`2<string, TResult> FlattenNameTreeToDictionary(DictionaryToken nameTreeNodeDictionary, IPdfTokenScanner pdfScanner, Func`2<IToken, TResult> valuesFactory);
    public static void FlattenNameTree(DictionaryToken nameTreeNodeDictionary, IPdfTokenScanner pdfScanner, Func`2<IToken, TResult> valuesFactory, Dictionary`2<string, TResult> result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.Parts.ObjectHelper : object {
    private static long ObjectNumberThreshold;
    private static long GenerationNumberThreshold;
    public static long ReadObjectNumber(IInputBytes bytes);
    public static int ReadGenerationNumber(IInputBytes bytes);
    public static string CreateObjectString(long objectId, long genId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Parser.PdfDocumentFactory : object {
    public static PdfDocument Open(Byte[] fileBytes, ParsingOptions options);
    public static PdfDocument Open(string filename, ParsingOptions options);
    internal static PdfDocument Open(Stream stream, ParsingOptions options);
    private static PdfDocument Open(IInputBytes inputBytes, ParsingOptions options);
    private static PdfDocument OpenDocument(IInputBytes inputBytes, ISeekableTokenScanner scanner, ParsingOptions parsingOptions);
    private static ValueTuple`2<IndirectReference, DictionaryToken> ParseTrailer(CrossReferenceTable crossReferenceTable, bool isLenientParsing, IPdfTokenScanner pdfTokenScanner, EncryptionDictionary& encryptionDictionary);
    private static EncryptionDictionary GetEncryptionDictionary(CrossReferenceTable crossReferenceTable, IPdfTokenScanner pdfTokenScanner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.ParsingOptions : object {
    [CompilerGeneratedAttribute]
private static ParsingOptions <LenientParsingOff>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClipPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLenientParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Passwords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipMissingFonts>k__BackingField;
    public static ParsingOptions LenientParsingOff { get; }
    public bool ClipPaths { get; public set; }
    public bool UseLenientParsing { get; public set; }
    public ILog Logger { get; public set; }
    public string Password { get; public set; }
    public List`1<string> Passwords { get; public set; }
    public bool SkipMissingFonts { get; public set; }
    private static ParsingOptions();
    [CompilerGeneratedAttribute]
public static ParsingOptions get_LenientParsingOff();
    [CompilerGeneratedAttribute]
public bool get_ClipPaths();
    [CompilerGeneratedAttribute]
public void set_ClipPaths(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLenientParsing();
    [CompilerGeneratedAttribute]
public void set_UseLenientParsing(bool value);
    [CompilerGeneratedAttribute]
public ILog get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILog value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Passwords();
    [CompilerGeneratedAttribute]
public void set_Passwords(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_SkipMissingFonts();
    [CompilerGeneratedAttribute]
public void set_SkipMissingFonts(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.PdfDocument : object {
    private bool isDisposed;
    private Lazy`1<AcroForm> documentForm;
    private HeaderVersion version;
    private IInputBytes inputBytes;
    [NullableAttribute("2")]
private EncryptionDictionary encryptionDictionary;
    private IPdfTokenScanner pdfScanner;
    private ILookupFilterProvider filterProvider;
    private BookmarksProvider bookmarksProvider;
    private ParsingOptions parsingOptions;
    private Pages pages;
    private NamedDestinations namedDestinations;
    [CompilerGeneratedAttribute]
private DocumentInformation <Information>k__BackingField;
    [CompilerGeneratedAttribute]
private Structure <Structure>k__BackingField;
    [CompilerGeneratedAttribute]
private AdvancedPdfDocumentAccess <Advanced>k__BackingField;
    public DocumentInformation Information { get; }
    public Structure Structure { get; }
    public AdvancedPdfDocumentAccess Advanced { get; }
    public double Version { get; }
    public int NumberOfPages { get; }
    [MemberNotNullWhenAttribute("True", "encryptionDictionary")]
public bool IsEncrypted { get; }
    internal PdfDocument(IInputBytes inputBytes, HeaderVersion version, CrossReferenceTable crossReferenceTable, Catalog catalog, DocumentInformation information, EncryptionDictionary encryptionDictionary, IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, AcroFormFactory acroFormFactory, BookmarksProvider bookmarksProvider, ParsingOptions parsingOptions);
    [CompilerGeneratedAttribute]
public DocumentInformation get_Information();
    [CompilerGeneratedAttribute]
public Structure get_Structure();
    [CompilerGeneratedAttribute]
public AdvancedPdfDocumentAccess get_Advanced();
    public double get_Version();
    public int get_NumberOfPages();
    [MemberNotNullWhenAttribute("True", "encryptionDictionary")]
public bool get_IsEncrypted();
    public static PdfDocument Open(Byte[] fileBytes, ParsingOptions options);
    public static PdfDocument Open(string filePath, ParsingOptions options);
    public static PdfDocument Open(Stream stream, ParsingOptions options);
    public void AddPageFactory(IPageFactory`1<TPage> pageFactory);
    [NullableContextAttribute("0")]
public void AddPageFactory();
    public Page GetPage(int pageNumber);
    public TPage GetPage(int pageNumber);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.PdfDocument/<GetPages>d__34")]
public IEnumerable`1<Page> GetPages();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.PdfDocument/<GetPages>d__35`1")]
public IEnumerable`1<TPage> GetPages();
    [NullableContextAttribute("2")]
public bool TryGetXmpMetadata(XmpMetadata& metadata);
    [NullableContextAttribute("2")]
public bool TryGetBookmarks(Bookmarks& bookmarks);
    public bool TryGetForm(AcroForm& form);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.PdfExtensions : object {
    [ExtensionAttribute]
public static bool TryGet(DictionaryToken dictionary, NameToken name, IPdfTokenScanner tokenScanner, T& token);
    [ExtensionAttribute]
public static T Get(DictionaryToken dictionary, NameToken name, IPdfTokenScanner scanner);
    [ExtensionAttribute]
public static ReadOnlyMemory`1<byte> Decode(StreamToken stream, IFilterProvider filterProvider);
    [ExtensionAttribute]
public static ReadOnlyMemory`1<byte> Decode(StreamToken stream, ILookupFilterProvider filterProvider, IPdfTokenScanner scanner);
}
public class UglyToad.PdfPig.PdfFonts.CharacterBoundingBox : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <GlyphBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public PdfRectangle GlyphBounds { get; }
    public double Width { get; }
    internal CharacterBoundingBox(PdfRectangle bounds, double width);
    [CompilerGeneratedAttribute]
public PdfRectangle get_GlyphBounds();
    [CompilerGeneratedAttribute]
public double get_Width();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.PdfFonts.CharacterIdentifierSystemInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ordering>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Supplement>k__BackingField;
    public string Registry { get; }
    public string Ordering { get; }
    public int Supplement { get; }
    public CharacterIdentifierSystemInfo(string registry, string ordering, int supplement);
    [CompilerGeneratedAttribute]
public string get_Registry();
    [CompilerGeneratedAttribute]
public string get_Ordering();
    [CompilerGeneratedAttribute]
public int get_Supplement();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CharStringStack : object {
    private List`1<double> stack;
    public int Length { get; }
    public bool CanPop { get; }
    public int get_Length();
    public bool get_CanPop();
    public double PopTop();
    public double PopBottom();
    public void Push(double value);
    public double CopyElementAt(int index);
    public void Clear();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.PdfFonts.CidFonts.CharacterIdentifierToGlyphIndexMap : object {
    private bool isIdentity;
    [NullableAttribute("2")]
private Int32[] map;
    public CharacterIdentifierToGlyphIndexMap(ReadOnlySpan`1<byte> streamBytes);
    public Nullable`1<int> GetGlyphIndex(int characterIdentifier);
}
internal enum UglyToad.PdfPig.PdfFonts.CidFonts.CidFontType : Enum {
    public int value__;
    public static CidFontType Type0;
    public static CidFontType Type2;
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.PdfFonts.CidFonts.ICidFont {
    public NameToken Type { get; }
    public NameToken SubType { get; }
    public NameToken BaseFont { get; }
    public CharacterIdentifierSystemInfo SystemInfo { get; }
    public FontDetails Details { get; }
    public TransformationMatrix FontMatrix { get; }
    public CidFontType CidFontType { get; }
    public FontDescriptor Descriptor { get; }
    public abstract virtual NameToken get_Type();
    public abstract virtual NameToken get_SubType();
    public abstract virtual NameToken get_BaseFont();
    public abstract virtual CharacterIdentifierSystemInfo get_SystemInfo();
    public abstract virtual FontDetails get_Details();
    public abstract virtual TransformationMatrix get_FontMatrix();
    public abstract virtual CidFontType get_CidFontType();
    public abstract virtual FontDescriptor get_Descriptor();
    public abstract virtual double GetWidthFromDictionary(int cid);
    public abstract virtual double GetWidthFromFont(int characterIdentifier);
    public abstract virtual PdfRectangle GetBoundingBox(int characterIdentifier);
    public abstract virtual PdfVector GetPositionVector(int characterIdentifier);
    public abstract virtual PdfVector GetDisplacementVector(int characterIdentifier);
    public abstract virtual TransformationMatrix GetFontMatrix(int characterIdentifier);
    public abstract virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public abstract virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    public abstract virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
    public abstract virtual bool TryGetNormalisedPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.PdfFonts.CidFonts.ICidFontProgram {
    public FontDetails Details { get; }
    public abstract virtual FontDetails get_Details();
    public abstract virtual bool TryGetBoundingBox(int characterIdentifier, PdfRectangle& boundingBox);
    public abstract virtual bool TryGetBoundingBox(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, PdfRectangle& boundingBox);
    public abstract virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, Double& width);
    public abstract virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Double& width);
    public abstract virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public abstract virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    public abstract virtual int GetFontMatrixMultiplier();
    public abstract virtual bool TryGetFontMatrix(int characterCode, Nullable`1& matrix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.PdfCidCompactFontFormatFont : object {
    private CompactFontFormatFontCollection fontCollection;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    public FontDetails Details { get; }
    public PdfCidCompactFontFormatFont(CompactFontFormatFontCollection fontCollection);
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    private static FontDetails GetDetails(CompactFontFormatFont font);
    public TransformationMatrix GetFontTransformationMatrix();
    public Nullable`1<PdfRectangle> GetCharacterBoundingBox(string characterName);
    public sealed virtual bool TryGetBoundingBox(int characterIdentifier, PdfRectangle& boundingBox);
    public sealed virtual bool TryGetBoundingBox(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, PdfRectangle& boundingBox);
    public sealed virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, Double& width);
    public sealed virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Double& width);
    public sealed virtual int GetFontMatrixMultiplier();
    public sealed virtual bool TryGetFontMatrix(int characterCode, Nullable`1& matrix);
    public string GetCharacterName(int characterCode);
    private CompactFontFormatFont GetFont();
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    [CompilerGeneratedAttribute]
internal static FontDetails <GetDetails>g__WithWeightValues|5_0(bool isBold, int weight, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.PdfCidTrueTypeFont : object {
    private TrueTypeFont font;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    public FontDetails Details { get; }
    public PdfCidTrueTypeFont(TrueTypeFont font);
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    public sealed virtual bool TryGetBoundingBox(int characterIdentifier, PdfRectangle& boundingBox);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetBoundingBox(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, PdfRectangle& boundingBox);
    public sealed virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Double& width);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetBoundingAdvancedWidth(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, Double& width);
    public sealed virtual int GetFontMatrixMultiplier();
    public sealed virtual bool TryGetFontMatrix(int characterCode, Nullable`1& matrix);
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.Type0CidFont : object {
    private ICidFontProgram fontProgram;
    private VerticalWritingMetrics verticalWritingMetrics;
    private Nullable`1<double> defaultWidth;
    private double scale;
    [CompilerGeneratedAttribute]
private NameToken <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <BaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacterIdentifierSystemInfo <SystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <FontMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, double> <Widths>k__BackingField;
    public NameToken Type { get; }
    public NameToken SubType { get; }
    public NameToken BaseFont { get; }
    public CharacterIdentifierSystemInfo SystemInfo { get; }
    public FontDetails Details { get; }
    public TransformationMatrix FontMatrix { get; }
    public CidFontType CidFontType { get; }
    public FontDescriptor Descriptor { get; }
    public IReadOnlyDictionary`2<int, double> Widths { get; }
    public Type0CidFont(ICidFontProgram fontProgram, NameToken type, NameToken subType, NameToken baseFont, CharacterIdentifierSystemInfo systemInfo, FontDescriptor descriptor, VerticalWritingMetrics verticalWritingMetrics, IReadOnlyDictionary`2<int, double> widths, Nullable`1<double> defaultWidth);
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_SubType();
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_BaseFont();
    [CompilerGeneratedAttribute]
public sealed virtual CharacterIdentifierSystemInfo get_SystemInfo();
    public sealed virtual FontDetails get_Details();
    [CompilerGeneratedAttribute]
public sealed virtual TransformationMatrix get_FontMatrix();
    public sealed virtual CidFontType get_CidFontType();
    [CompilerGeneratedAttribute]
public sealed virtual FontDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, double> get_Widths();
    public sealed virtual double GetWidthFromFont(int characterCode);
    public sealed virtual double GetWidthFromDictionary(int cid);
    public sealed virtual PdfRectangle GetBoundingBox(int characterIdentifier);
    public sealed virtual PdfVector GetPositionVector(int characterIdentifier);
    public sealed virtual PdfVector GetDisplacementVector(int characterIdentifier);
    public sealed virtual TransformationMatrix GetFontMatrix(int characterIdentifier);
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.Type2CidFont : object {
    [NullableAttribute("2")]
private ICidFontProgram fontProgram;
    private VerticalWritingMetrics verticalWritingMetrics;
    private IReadOnlyDictionary`2<int, double> widths;
    private Nullable`1<double> defaultWidth;
    private CharacterIdentifierToGlyphIndexMap cidToGid;
    [CompilerGeneratedAttribute]
private NameToken <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private NameToken <BaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacterIdentifierSystemInfo <SystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <FontMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDescriptor <Descriptor>k__BackingField;
    public NameToken Type { get; }
    public NameToken SubType { get; }
    public NameToken BaseFont { get; }
    public CharacterIdentifierSystemInfo SystemInfo { get; }
    public TransformationMatrix FontMatrix { get; }
    public CidFontType CidFontType { get; }
    public FontDescriptor Descriptor { get; }
    public FontDetails Details { get; }
    public Type2CidFont(NameToken type, NameToken subType, NameToken baseFont, CharacterIdentifierSystemInfo systemInfo, FontDescriptor descriptor, ICidFontProgram fontProgram, VerticalWritingMetrics verticalWritingMetrics, IReadOnlyDictionary`2<int, double> widths, Nullable`1<double> defaultWidth, CharacterIdentifierToGlyphIndexMap cidToGid);
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_SubType();
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_BaseFont();
    [CompilerGeneratedAttribute]
public sealed virtual CharacterIdentifierSystemInfo get_SystemInfo();
    [CompilerGeneratedAttribute]
public sealed virtual TransformationMatrix get_FontMatrix();
    public sealed virtual CidFontType get_CidFontType();
    [CompilerGeneratedAttribute]
public sealed virtual FontDescriptor get_Descriptor();
    public sealed virtual FontDetails get_Details();
    public sealed virtual double GetWidthFromFont(int characterIdentifier);
    public sealed virtual double GetWidthFromDictionary(int characterIdentifier);
    public sealed virtual PdfRectangle GetBoundingBox(int characterIdentifier);
    public sealed virtual PdfVector GetPositionVector(int characterIdentifier);
    public sealed virtual PdfVector GetDisplacementVector(int characterIdentifier);
    public sealed virtual TransformationMatrix GetFontMatrix(int characterIdentifier);
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.VerticalVectorComponents : ValueType {
    public static VerticalVectorComponents Default;
    [CompilerGeneratedAttribute]
private double <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Displacement>k__BackingField;
    public double Position { get; }
    public double Displacement { get; }
    public VerticalVectorComponents(double position, double displacement);
    private static VerticalVectorComponents();
    [CompilerGeneratedAttribute]
public double get_Position();
    [CompilerGeneratedAttribute]
public double get_Displacement();
    public PdfVector GetPositionVector(double glyphWidth);
    public PdfVector GetDisplacementVector();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.CidFonts.VerticalWritingMetrics : object {
    [CompilerGeneratedAttribute]
private VerticalVectorComponents <DefaultVerticalWritingMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, double> <IndividualVerticalWritingDisplacements>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, PdfVector> <IndividualVerticalWritingPositions>k__BackingField;
    public VerticalVectorComponents DefaultVerticalWritingMetrics { get; }
    public IReadOnlyDictionary`2<int, double> IndividualVerticalWritingDisplacements { get; }
    public IReadOnlyDictionary`2<int, PdfVector> IndividualVerticalWritingPositions { get; }
    [NullableContextAttribute("2")]
public VerticalWritingMetrics(VerticalVectorComponents defaultVerticalWritingMetrics, IReadOnlyDictionary`2<int, double> individualVerticalWritingDisplacements, IReadOnlyDictionary`2<int, PdfVector> individualVerticalWritingPositions);
    [CompilerGeneratedAttribute]
public VerticalVectorComponents get_DefaultVerticalWritingMetrics();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, double> get_IndividualVerticalWritingDisplacements();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, PdfVector> get_IndividualVerticalWritingPositions();
    public PdfVector GetPositionVector(int characterIdentifier, double glyphWidth);
    public PdfVector GetDisplacementVector(int characterIdentifier);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Cmap.CharacterIdentifierSystemInfoBuilder : object {
    private string registry;
    [CompilerGeneratedAttribute]
private bool <HasRegistry>k__BackingField;
    private string ordering;
    [CompilerGeneratedAttribute]
private bool <HasOrdering>k__BackingField;
    private int supplement;
    [CompilerGeneratedAttribute]
private bool <HasSupplement>k__BackingField;
    public string Registry { get; public set; }
    public bool HasRegistry { get; private set; }
    public string Ordering { get; public set; }
    public bool HasOrdering { get; private set; }
    public int Supplement { get; public set; }
    public bool HasSupplement { get; private set; }
    public string get_Registry();
    public void set_Registry(string value);
    [CompilerGeneratedAttribute]
public bool get_HasRegistry();
    [CompilerGeneratedAttribute]
private void set_HasRegistry(bool value);
    public string get_Ordering();
    public void set_Ordering(string value);
    [CompilerGeneratedAttribute]
public bool get_HasOrdering();
    [CompilerGeneratedAttribute]
private void set_HasOrdering(bool value);
    public int get_Supplement();
    public void set_Supplement(int value);
    [CompilerGeneratedAttribute]
public bool get_HasSupplement();
    [CompilerGeneratedAttribute]
private void set_HasSupplement(bool value);
}
internal class UglyToad.PdfPig.PdfFonts.Cmap.CharacterMapBuilder : object {
    [CompilerGeneratedAttribute]
private CharacterIdentifierSystemInfo <CharacterIdentifierSystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacterIdentifierSystemInfoBuilder <SystemInfoBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CodespaceRange> <CodespaceRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CidCharacterMapping> <CidCharacterMappings>k__BackingField;
    private List`1<CidRange> cidRanges;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, string> <BaseFontCharacterMap>k__BackingField;
    public CharacterIdentifierSystemInfo CharacterIdentifierSystemInfo { get; public set; }
    public CharacterIdentifierSystemInfoBuilder SystemInfoBuilder { get; }
    public int WMode { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Version { get; public set; }
    public int Type { get; public set; }
    public IReadOnlyList`1<CodespaceRange> CodespaceRanges { get; public set; }
    public IReadOnlyList`1<CidCharacterMapping> CidCharacterMappings { get; public set; }
    public IReadOnlyList`1<CidRange> CidRanges { get; }
    public Dictionary`2<int, string> BaseFontCharacterMap { get; }
    [CompilerGeneratedAttribute]
public CharacterIdentifierSystemInfo get_CharacterIdentifierSystemInfo();
    [CompilerGeneratedAttribute]
public void set_CharacterIdentifierSystemInfo(CharacterIdentifierSystemInfo value);
    [CompilerGeneratedAttribute]
public CharacterIdentifierSystemInfoBuilder get_SystemInfoBuilder();
    [CompilerGeneratedAttribute]
public int get_WMode();
    [CompilerGeneratedAttribute]
public void set_WMode(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CodespaceRange> get_CodespaceRanges();
    [CompilerGeneratedAttribute]
public void set_CodespaceRanges(IReadOnlyList`1<CodespaceRange> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CidCharacterMapping> get_CidCharacterMappings();
    [CompilerGeneratedAttribute]
public void set_CidCharacterMappings(IReadOnlyList`1<CidCharacterMapping> value);
    public IReadOnlyList`1<CidRange> get_CidRanges();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, string> get_BaseFontCharacterMap();
    public void AddBaseFontCharacter(ReadOnlySpan`1<byte> bytes, ReadOnlySpan`1<byte> value);
    public void AddBaseFontCharacter(ReadOnlySpan`1<byte> bytes, string value);
    public CMap Build();
    private CharacterIdentifierSystemInfo GetCidSystemInfo();
    public void UseCMap(CMap other);
    private static IReadOnlyList`1<T> Combine(IReadOnlyList`1<T> a, IReadOnlyList`1<T> b);
    private int GetCodeFromArray(ReadOnlySpan`1<byte> data);
    private static string CreateStringFromBytes(ReadOnlySpan`1<byte> bytes);
    public void AddCidRange(CidRange range);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.PdfFonts.Cmap.CidCharacterMapping : ValueType {
    [CompilerGeneratedAttribute]
private int <SourceCharacterCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestinationCid>k__BackingField;
    public int SourceCharacterCode { get; }
    public int DestinationCid { get; }
    public CidCharacterMapping(int sourceCharacterCode, int destinationCid);
    [CompilerGeneratedAttribute]
public int get_SourceCharacterCode();
    [CompilerGeneratedAttribute]
public int get_DestinationCid();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.PdfFonts.Cmap.CidRange : ValueType {
    private int firstCharacterCode;
    private int lastCharacterCode;
    private int cid;
    public CidRange(int firstCharacterCode, int lastCharacterCode, int cid);
    public bool Contains(int characterCode);
    public bool TryMap(int characterCode, Int32& cidValue);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Cmap.CMap : object {
    [CompilerGeneratedAttribute]
private CharacterIdentifierSystemInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, string> <BaseFontCharacterMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CodespaceRange> <CodespaceRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CidRange> <CidRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, CidCharacterMapping> <CidCharacterMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private WritingMode <WritingMode>k__BackingField;
    private bool hasEmptyCodespace;
    private int minCodeLength;
    private int maxCodeLength;
    public CharacterIdentifierSystemInfo Info { get; }
    public int Type { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; }
    public IReadOnlyDictionary`2<int, string> BaseFontCharacterMap { get; }
    public IReadOnlyList`1<CodespaceRange> CodespaceRanges { get; }
    public IReadOnlyList`1<CidRange> CidRanges { get; }
    public IReadOnlyDictionary`2<int, CidCharacterMapping> CidCharacterMappings { get; }
    public WritingMode WritingMode { get; }
    public bool HasCidMappings { get; }
    public bool HasUnicodeMappings { get; }
    public CMap(CharacterIdentifierSystemInfo info, int type, int wMode, string name, string version, IReadOnlyDictionary`2<int, string> baseFontCharacterMap, IReadOnlyList`1<CodespaceRange> codespaceRanges, IReadOnlyList`1<CidRange> cidRanges, IReadOnlyList`1<CidCharacterMapping> cidCharacterMappings);
    [CompilerGeneratedAttribute]
public CharacterIdentifierSystemInfo get_Info();
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, string> get_BaseFontCharacterMap();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CodespaceRange> get_CodespaceRanges();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CidRange> get_CidRanges();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, CidCharacterMapping> get_CidCharacterMappings();
    [CompilerGeneratedAttribute]
public WritingMode get_WritingMode();
    public bool get_HasCidMappings();
    public bool get_HasUnicodeMappings();
    [NullableContextAttribute("2")]
public bool TryConvertToUnicode(int code, String& result);
    public int ConvertToCid(int code);
    public virtual string ToString();
    public int ReadCode(IInputBytes bytes);
    private static byte ReadByte(IInputBytes bytes);
    [NullableContextAttribute("0")]
private static int ByteArrayToInt(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.PdfFonts.Cmap.CMapCache : object {
    private static Dictionary`2<string, CMap> Cache;
    private static object Lock;
    private static CMapParser CMapParser;
    private static CMapCache();
    public static bool TryGet(string name, CMap& result);
    public static CMap Parse(IInputBytes bytes);
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.PdfFonts.Cmap.CMapUtils : object {
    [ExtensionAttribute]
public static int ToInt(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void PutAll(Dictionary`2<TKey, TValue> target, IReadOnlyDictionary`2<TKey, TValue> source);
}
internal class UglyToad.PdfPig.PdfFonts.Cmap.CodespaceRange : object {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartInt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndInt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeLength>k__BackingField;
    public ReadOnlyMemory`1<byte> Start { get; }
    public ReadOnlyMemory`1<byte> End { get; }
    public int StartInt { get; }
    public int EndInt { get; }
    public int CodeLength { get; }
    public CodespaceRange(ReadOnlyMemory`1<byte> start, ReadOnlyMemory`1<byte> end);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Start();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_End();
    [CompilerGeneratedAttribute]
public int get_StartInt();
    [CompilerGeneratedAttribute]
public int get_EndInt();
    [CompilerGeneratedAttribute]
public int get_CodeLength();
    [NullableContextAttribute("1")]
public bool Matches(Byte[] code);
    [NullableContextAttribute("1")]
public bool IsFullMatch(Byte[] code, int codeLength);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal enum UglyToad.PdfPig.PdfFonts.Cmap.WritingMode : Enum {
    public int value__;
    public static WritingMode Horizontal;
    public static WritingMode Vertical;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Composite.ToUnicodeCMap : object {
    private CMap cMap;
    [CompilerGeneratedAttribute]
private bool <IsUsingIdentityAsUnicodeMap>k__BackingField;
    public bool CanMapToUnicode { get; }
    public bool IsUsingIdentityAsUnicodeMap { get; }
    public ToUnicodeCMap(CMap cMap);
    public bool get_CanMapToUnicode();
    [CompilerGeneratedAttribute]
public bool get_IsUsingIdentityAsUnicodeMap();
    public bool TryGet(int code, String& value);
    [NullableContextAttribute("1")]
public int ReadCode(IInputBytes inputBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Composite.Type0Font : object {
    [NullableAttribute("2")]
private CMap ucs2CMap;
    private bool isChineseJapaneseOrKorean;
    private Dictionary`2<int, CharacterBoundingBox> boundingBoxCache;
    [CompilerGeneratedAttribute]
private NameToken <BaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private ICidFont <CidFont>k__BackingField;
    [CompilerGeneratedAttribute]
private CMap <CMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ToUnicodeCMap <ToUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    public NameToken Name { get; }
    public NameToken BaseFont { get; }
    public ICidFont CidFont { get; }
    public CMap CMap { get; }
    public ToUnicodeCMap ToUnicode { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    public Type0Font(NameToken baseFont, ICidFont cidFont, CMap cmap, CMap toUnicodeCMap, CMap ucs2CMap, bool isChineseJapaneseOrKorean);
    public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public NameToken get_BaseFont();
    [CompilerGeneratedAttribute]
public ICidFont get_CidFont();
    [CompilerGeneratedAttribute]
public CMap get_CMap();
    [CompilerGeneratedAttribute]
public ToUnicodeCMap get_ToUnicode();
    public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual PdfVector GetPositionVector(int characterCode);
    public sealed virtual PdfVector GetDisplacementVector(int characterCode);
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.PdfFonts.DescriptorFontFile : object {
    [CompilerGeneratedAttribute]
private IndirectReferenceToken <ObjectKey>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFileType <FileType>k__BackingField;
    public IndirectReferenceToken ObjectKey { get; }
    public FontFileType FileType { get; }
    public DescriptorFontFile(IndirectReferenceToken key, FontFileType fileType);
    [CompilerGeneratedAttribute]
public IndirectReferenceToken get_ObjectKey();
    [CompilerGeneratedAttribute]
public FontFileType get_FileType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.PdfFonts.FontDescriptor : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NameToken <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStretch <Stretch>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDescriptorFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Leading>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AverageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MissingWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private DescriptorFontFile <FontFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharSet>k__BackingField;
    [NullableAttribute("1")]
public NameToken FontName { get; }
    public string FontFamily { get; }
    public FontStretch Stretch { get; }
    public double FontWeight { get; }
    public FontDescriptorFlags Flags { get; }
    public PdfRectangle BoundingBox { get; }
    public double ItalicAngle { get; }
    public double Ascent { get; }
    public double Descent { get; }
    public double Leading { get; }
    public double CapHeight { get; }
    public double XHeight { get; }
    public double StemVertical { get; }
    public double StemHorizontal { get; }
    public double AverageWidth { get; }
    public double MaxWidth { get; }
    public double MissingWidth { get; }
    public DescriptorFontFile FontFile { get; }
    public string CharSet { get; }
    [NullableContextAttribute("1")]
public FontDescriptor(Builder builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public NameToken get_FontName();
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public FontStretch get_Stretch();
    [CompilerGeneratedAttribute]
public double get_FontWeight();
    [CompilerGeneratedAttribute]
public FontDescriptorFlags get_Flags();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public double get_Ascent();
    [CompilerGeneratedAttribute]
public double get_Descent();
    [CompilerGeneratedAttribute]
public double get_Leading();
    [CompilerGeneratedAttribute]
public double get_CapHeight();
    [CompilerGeneratedAttribute]
public double get_XHeight();
    [CompilerGeneratedAttribute]
public double get_StemVertical();
    [CompilerGeneratedAttribute]
public double get_StemHorizontal();
    [CompilerGeneratedAttribute]
public double get_AverageWidth();
    [CompilerGeneratedAttribute]
public double get_MaxWidth();
    [CompilerGeneratedAttribute]
public double get_MissingWidth();
    [CompilerGeneratedAttribute]
public DescriptorFontFile get_FontFile();
    [CompilerGeneratedAttribute]
public string get_CharSet();
    [NullableContextAttribute("1")]
internal FontDetails ToDetails(string name);
}
[FlagsAttribute]
public enum UglyToad.PdfPig.PdfFonts.FontDescriptorFlags : Enum {
    public int value__;
    public static FontDescriptorFlags None;
    public static FontDescriptorFlags FixedPitch;
    public static FontDescriptorFlags Serif;
    public static FontDescriptorFlags Symbolic;
    public static FontDescriptorFlags Script;
    public static FontDescriptorFlags NonSymbolic;
    public static FontDescriptorFlags Italic;
    public static FontDescriptorFlags AllCap;
    public static FontDescriptorFlags SmallCap;
    public static FontDescriptorFlags ForceBold;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.PdfFonts.FontDetails : object {
    public static int DefaultWeight;
    public static int BoldWeight;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsItalic>k__BackingField;
    public string Name { get; }
    public bool IsBold { get; }
    public int Weight { get; }
    public bool IsItalic { get; }
    [NullableContextAttribute("2")]
public FontDetails(string name, bool isBold, int weight, bool isItalic);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsBold();
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public bool get_IsItalic();
    internal static FontDetails GetDefault(string name);
    internal FontDetails WithName(string name);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.FontFactory : object {
    private ILog log;
    private IReadOnlyDictionary`2<NameToken, IFontHandler> handlers;
    public FontFactory(ILog log, Type0FontHandler type0FontHandler, TrueTypeFontHandler trueTypeFontHandler, Type1FontHandler type1FontHandler, Type3FontHandler type3FontHandler);
    public sealed virtual IFont Get(DictionaryToken dictionary);
}
public enum UglyToad.PdfPig.PdfFonts.FontStretch : Enum {
    public int value__;
    public static FontStretch Unknown;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch Normal;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.PdfFonts.FontStretchExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FontStretch ConvertToFontStretch(NameToken name);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.PdfFonts.IFont {
    [NullableAttribute("2")]
public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    [NullableContextAttribute("2")]
public abstract virtual NameToken get_Name();
    public abstract virtual bool get_IsVertical();
    public abstract virtual FontDetails get_Details();
    public abstract virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetUnicode(int characterCode, String& value);
    public abstract virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    public abstract virtual TransformationMatrix GetFontMatrix();
    public abstract virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public abstract virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.PdfFonts.IFontFactory {
    public abstract virtual IFont Get(DictionaryToken dictionary);
}
internal interface UglyToad.PdfPig.PdfFonts.IVerticalWritingSupported {
    public abstract virtual PdfVector GetPositionVector(int characterCode);
    public abstract virtual PdfVector GetDisplacementVector(int characterCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.CMapParser : object {
    private static BaseFontRangeParser BaseFontRangeParser;
    private static BaseFontCharacterParser BaseFontCharacterParser;
    private static CidRangeParser CidRangeParser;
    private static CidFontNameParser CidFontNameParser;
    private static CodespaceRangeParser CodespaceRangeParser;
    private static CidCharacterParser CidCharacterParser;
    private static CMapParser();
    public CMap Parse(IInputBytes inputBytes);
    public bool TryParseExternal(string name, CMap& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.EncodingReader : object {
    private IPdfTokenScanner pdfScanner;
    public EncodingReader(IPdfTokenScanner pdfScanner);
    [NullableContextAttribute("2")]
public sealed virtual Encoding Read(DictionaryToken fontDictionary, FontDescriptor descriptor, Encoding fontEncoding);
    [NullableContextAttribute("2")]
private Encoding ReadEncodingDictionary(DictionaryToken encodingDictionary, Encoding fontEncoding);
    private static IReadOnlyList`1<ValueTuple`2<int, string>> ProcessDifferences(ArrayToken differenceArray);
    [NullableContextAttribute("2")]
private static bool TryGetNamedEncoding(FontDescriptor descriptor, NameToken encodingName, Encoding& encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.PdfFonts.Parser.FontDictionaryAccessHelper : object {
    public static int GetFirstCharacter(DictionaryToken dictionary);
    public static int GetLastCharacter(DictionaryToken dictionary);
    public static Double[] GetWidths(IPdfTokenScanner pdfScanner, DictionaryToken dictionary);
    public static FontDescriptor GetFontDescriptor(IPdfTokenScanner pdfScanner, DictionaryToken dictionary);
    public static NameToken GetName(IPdfTokenScanner pdfScanner, DictionaryToken dictionary, FontDescriptor descriptor);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.PdfFonts.Parser.Handlers.IFontHandler {
    public abstract virtual IFont Generate(DictionaryToken dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Handlers.TrueTypeFontHandler : object {
    private ILog log;
    private IPdfTokenScanner pdfScanner;
    private ILookupFilterProvider filterProvider;
    private IEncodingReader encodingReader;
    private ISystemFontFinder systemFontFinder;
    private IFontHandler type1FontHandler;
    public TrueTypeFontHandler(ILog log, IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, IEncodingReader encodingReader, ISystemFontFinder systemFontFinder, IFontHandler type1FontHandler);
    public sealed virtual IFont Generate(DictionaryToken dictionary);
    [NullableContextAttribute("2")]
private TrueTypeFont ParseTrueTypeFont(FontDescriptor descriptor, IFontHandler& actualHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Handlers.Type0FontHandler : object {
    private CidFontFactory cidFontFactory;
    private ILookupFilterProvider filterProvider;
    private IPdfTokenScanner scanner;
    private ILog logger;
    public Type0FontHandler(CidFontFactory cidFontFactory, ILookupFilterProvider filterProvider, IPdfTokenScanner scanner, ILog logger);
    public sealed virtual IFont Generate(DictionaryToken dictionary);
    private static bool TryGetFirstDescendant(DictionaryToken dictionary, IToken& descendant);
    private ICidFont ParseDescendant(DictionaryToken dictionary);
    private CMap ReadEncoding(DictionaryToken dictionary, Boolean& isCMapPredefined);
    private static ValueTuple`2<CMap, bool> GetUcs2CMap(DictionaryToken dictionary, bool isCMapPredefined, ICidFont cidFont);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Handlers.Type1FontHandler : object {
    private IPdfTokenScanner pdfScanner;
    private ILookupFilterProvider filterProvider;
    private IEncodingReader encodingReader;
    public Type1FontHandler(IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, IEncodingReader encodingReader);
    public sealed virtual IFont Generate(DictionaryToken dictionary);
    private Union`2<Type1Font, CompactFontFormatFontCollection> ParseFontProgram(FontDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Handlers.Type3FontHandler : object {
    private ILookupFilterProvider filterProvider;
    private IEncodingReader encodingReader;
    private IPdfTokenScanner scanner;
    public Type3FontHandler(IPdfTokenScanner scanner, ILookupFilterProvider filterProvider, IEncodingReader encodingReader);
    public sealed virtual IFont Generate(DictionaryToken dictionary);
    private NameToken GetFontName(DictionaryToken dictionary);
    private TransformationMatrix GetFontMatrix(DictionaryToken dictionary);
    private static PdfRectangle GetBoundingBox(DictionaryToken dictionary);
}
[NullableContextAttribute("2")]
internal interface UglyToad.PdfPig.PdfFonts.Parser.IEncodingReader {
    public abstract virtual Encoding Read(DictionaryToken fontDictionary, FontDescriptor descriptor, Encoding fontEncoding);
}
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.BaseFontCharacterParser : object {
    [NullableContextAttribute("1")]
public sealed virtual void Parse(NumericToken numeric, ITokenScanner tokenScanner, CharacterMapBuilder builder);
}
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.BaseFontRangeParser : object {
    [NullableContextAttribute("1")]
public sealed virtual void Parse(NumericToken numberOfOperations, ITokenScanner scanner, CharacterMapBuilder builder);
    private static void Increment(Span`1<byte> data, int position);
    private static int Compare(ReadOnlySpan`1<byte> first, ReadOnlySpan`1<byte> second);
}
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.CidCharacterParser : object {
    [NullableContextAttribute("1")]
public sealed virtual void Parse(NumericToken numeric, ITokenScanner scanner, CharacterMapBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.CidFontFactory : object {
    private ILookupFilterProvider filterProvider;
    private IPdfTokenScanner pdfScanner;
    private ILog logger;
    public CidFontFactory(ILog log, IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider);
    public ICidFont Generate(DictionaryToken dictionary);
    private bool TryGetFontDescriptor(DictionaryToken dictionary, DictionaryToken& descriptorDictionary);
    [NullableContextAttribute("2")]
private ICidFontProgram ReadDescriptorFile(FontDescriptor descriptor);
    private IReadOnlyDictionary`2<int, double> ReadWidths(DictionaryToken dict);
    private static VerticalWritingMetrics ReadVerticalDisplacements(DictionaryToken dict);
    private CharacterIdentifierSystemInfo GetSystemInfo(DictionaryToken dictionary);
    private CharacterIdentifierToGlyphIndexMap GetCharacterIdentifierToGlyphIndexMap(DictionaryToken dictionary);
    private string SafeKeyAccess(DictionaryToken dictionary, NameToken keyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.CidFontNameParser : object {
    public sealed virtual void Parse(NameToken nameToken, ITokenScanner scanner, CharacterMapBuilder builder);
    private static CharacterIdentifierSystemInfo GetCharacterIdentifier(DictionaryToken dictionary);
}
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.CidRangeParser : object {
    [NullableContextAttribute("1")]
public sealed virtual void Parse(NumericToken numeric, ITokenScanner scanner, CharacterMapBuilder builder);
}
internal class UglyToad.PdfPig.PdfFonts.Parser.Parts.CodespaceRangeParser : object {
    [NullableContextAttribute("1")]
public sealed virtual void Parse(NumericToken numeric, ITokenScanner tokenScanner, CharacterMapBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.PdfFonts.Parser.Parts.FontDescriptorFactory : object {
    public static FontDescriptor Generate(DictionaryToken dictionary, IPdfTokenScanner pdfScanner);
    private static double GetDoubleOrDefault(DictionaryToken dictionary, NameToken name);
    private static NameToken GetFontName(DictionaryToken dictionary, IPdfTokenScanner scanner);
    private static string GetFontFamily(DictionaryToken dictionary);
    private static FontStretch GetFontStretch(DictionaryToken dictionary);
    private static FontDescriptorFlags GetFlags(DictionaryToken dictionary);
    private static PdfRectangle GetBoundingBox(DictionaryToken dictionary, IPdfTokenScanner pdfScanner);
    private static string GetCharSet(DictionaryToken dictionary);
    private static DescriptorFontFile GetFontFile(DictionaryToken dictionary);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.PdfFonts.Parser.Parts.ICidFontPartParser`1 {
    public abstract virtual void Parse(TToken previous, ITokenScanner tokenScanner, CharacterMapBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Simple.TrueTypeSimpleFont : object {
    private static TransformationMatrix DefaultTransformation;
    [NullableAttribute("2")]
private FontDescriptor descriptor;
    private Dictionary`2<int, CharacterBoundingBox> boundingBoxCache;
    private Dictionary`2<int, string> unicodeValuesCache;
    [NullableAttribute("2")]
private Encoding encoding;
    [NullableAttribute("2")]
private TrueTypeFont font;
    private int firstCharacter;
    private Double[] widths;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private ToUnicodeCMap <ToUnicode>k__BackingField;
    [NullableAttribute("0")]
public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    public ToUnicodeCMap ToUnicode { get; public set; }
    [NullableContextAttribute("2")]
public TrueTypeSimpleFont(NameToken name, FontDescriptor descriptor, CMap toUnicodeCMap, Encoding encoding, TrueTypeFont font, int firstCharacter, Double[] widths);
    private static TrueTypeSimpleFont();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    [CompilerGeneratedAttribute]
public ToUnicodeCMap get_ToUnicode();
    [CompilerGeneratedAttribute]
public void set_ToUnicode(ToUnicodeCMap value);
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    private PdfRectangle GetBoundingBoxInGlyphSpace(int characterCode, Boolean& fromFont);
    private Nullable`1<int> CharacterCodeToGlyphId(int characterCode);
    private double GetWidth(int characterCode);
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
    [CompilerGeneratedAttribute]
internal static bool <CharacterCodeToGlyphId>g__HasFlag|27_0(FontDescriptorFlags value, FontDescriptorFlags target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Simple.TrueTypeStandard14FallbackSimpleFont : object {
    private static TransformationMatrix DefaultTransformation;
    private AdobeFontMetrics fontMetrics;
    private Encoding encoding;
    private TrueTypeFont font;
    private MetricOverrides overrides;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    [NullableAttribute("2")]
public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; public set; }
    public TrueTypeStandard14FallbackSimpleFont(NameToken name, AdobeFontMetrics fontMetrics, Encoding encoding, TrueTypeFont font, MetricOverrides overrides);
    private static TrueTypeStandard14FallbackSimpleFont();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(FontDetails value);
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Simple.Type1FontSimple : object {
    private static TransformationMatrix DefaultTransformationMatrix;
    private Dictionary`2<int, CharacterBoundingBox> cachedBoundingBoxes;
    private int firstChar;
    private int lastChar;
    private Double[] widths;
    private FontDescriptor fontDescriptor;
    private Encoding encoding;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Union`2<Type1Font, CompactFontFormatFontCollection> fontProgram;
    private ToUnicodeCMap toUnicodeCMap;
    private TransformationMatrix fontMatrix;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    public Type1FontSimple(NameToken name, int firstChar, int lastChar, Double[] widths, FontDescriptor fontDescriptor, Encoding encoding, CMap toUnicodeCMap, Union`2<Type1Font, CompactFontFormatFontCollection> fontProgram);
    private static Type1FontSimple();
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    private double GetWidth(int characterCode, PdfRectangle boundingBox);
    private PdfRectangle GetBoundingBoxInGlyphSpace(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Simple.Type1Standard14Font : object {
    private AdobeFontMetrics standardFontMetrics;
    private Encoding encoding;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    private TransformationMatrix fontMatrix;
    public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    public Type1Standard14Font(AdobeFontMetrics standardFontMetrics, Encoding overrideEncoding);
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    private PdfRectangle GetBoundingBoxInGlyphSpace(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.PdfFonts.Simple.Type3Font : object {
    private PdfRectangle boundingBox;
    private TransformationMatrix fontMatrix;
    private Encoding encoding;
    private int firstChar;
    private int lastChar;
    private Double[] widths;
    private ToUnicodeCMap toUnicodeCMap;
    [CompilerGeneratedAttribute]
private NameToken <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDetails <Details>k__BackingField;
    public NameToken Name { get; }
    public bool IsVertical { get; }
    public FontDetails Details { get; }
    public Type3Font(NameToken name, PdfRectangle boundingBox, TransformationMatrix fontMatrix, Encoding encoding, int firstChar, int lastChar, Double[] widths, CMap toUnicodeCMap);
    [CompilerGeneratedAttribute]
public sealed virtual NameToken get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVertical();
    [CompilerGeneratedAttribute]
public sealed virtual FontDetails get_Details();
    public sealed virtual int ReadCharacterCode(IInputBytes bytes, Int32& codeLength);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetUnicode(int characterCode, String& value);
    public sealed virtual CharacterBoundingBox GetBoundingBox(int characterCode);
    private PdfRectangle GetBoundingBoxInGlyphSpace(int characterCode);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public sealed virtual bool TryGetNormalisedPath(int characterCode, IReadOnlyList`1& path);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Rendering.IPageImageRenderer {
    public abstract virtual Byte[] Render(Page page, double scale, PdfRendererImageFormat imageFormat);
}
public enum UglyToad.PdfPig.Rendering.PdfRendererImageFormat : Enum {
    public byte value__;
    public static PdfRendererImageFormat Bmp;
    public static PdfRendererImageFormat Jpeg;
    public static PdfRendererImageFormat Png;
    public static PdfRendererImageFormat Tiff;
    public static PdfRendererImageFormat Gif;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Structure : object {
    [CompilerGeneratedAttribute]
private Catalog <Catalog>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossReferenceTable <CrossReferenceTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdfTokenScanner <TokenScanner>k__BackingField;
    public Catalog Catalog { get; }
    public CrossReferenceTable CrossReferenceTable { get; }
    internal IPdfTokenScanner TokenScanner { get; }
    internal Structure(Catalog catalog, CrossReferenceTable crossReferenceTable, IPdfTokenScanner scanner);
    [CompilerGeneratedAttribute]
public Catalog get_Catalog();
    [CompilerGeneratedAttribute]
public CrossReferenceTable get_CrossReferenceTable();
    [CompilerGeneratedAttribute]
internal IPdfTokenScanner get_TokenScanner();
    public ObjectToken GetObject(IndirectReference reference);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Tokenization.Scanner.IObjectLocationProvider {
    public abstract virtual bool TryGetOffset(IndirectReference reference, Int64& offset);
    public abstract virtual void UpdateOffset(IndirectReference reference, long offset);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetCached(IndirectReference reference, ObjectToken& objectToken);
    public abstract virtual void Cache(ObjectToken objectToken, bool force);
}
public interface UglyToad.PdfPig.Tokenization.Scanner.IPdfTokenScanner {
    [NullableContextAttribute("1")]
public abstract virtual ObjectToken Get(IndirectReference reference);
    [NullableContextAttribute("1")]
public abstract virtual void ReplaceToken(IndirectReference reference, IToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Tokenization.Scanner.ObjectLocationProvider : object {
    private Dictionary`2<IndirectReference, ObjectToken> cache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<CrossReferenceTable> crossReferenceTable;
    private IInputBytes bytes;
    [NullableAttribute("2")]
private IReadOnlyDictionary`2<IndirectReference, long> bruteForcedOffsets;
    private bool loadedFromTable;
    private Dictionary`2<IndirectReference, long> offsets;
    public ObjectLocationProvider(Func`1<CrossReferenceTable> crossReferenceTable, IInputBytes bytes);
    public sealed virtual bool TryGetOffset(IndirectReference reference, Int64& offset);
    public sealed virtual void UpdateOffset(IndirectReference reference, long offset);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetCached(IndirectReference reference, ObjectToken& objectToken);
    public sealed virtual void Cache(ObjectToken objectToken, bool force);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Tokenization.Scanner.PdfTokenScanner : object {
    private static Regex EndsWithNumberRegex;
    private IInputBytes inputBytes;
    private IObjectLocationProvider objectLocationProvider;
    private ILookupFilterProvider filterProvider;
    private CoreTokenScanner coreTokenScanner;
    private ParsingOptions parsingOptions;
    private IEncryptionHandler encryptionHandler;
    private bool isDisposed;
    private bool isBruteForcing;
    private Dictionary`2<IndirectReference, ObjectToken> overwrittenTokens;
    private List`1<IToken> readTokens;
    private Int64[] previousTokenPositions;
    private IToken[] previousTokens;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IToken <CurrentToken>k__BackingField;
    private Nullable`1<IndirectReference> callingObject;
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> EndstreamBytes { get; }
    [NullableAttribute("2")]
public IToken CurrentToken { get; private set; }
    public long CurrentPosition { get; }
    public long Length { get; }
    public PdfTokenScanner(IInputBytes inputBytes, IObjectLocationProvider objectLocationProvider, ILookupFilterProvider filterProvider, IEncryptionHandler encryptionHandler, ParsingOptions parsingOptions);
    private static PdfTokenScanner();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_EndstreamBytes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IToken get_CurrentToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentToken(IToken value);
    public sealed virtual long get_CurrentPosition();
    public sealed virtual long get_Length();
    public void UpdateEncryptionHandler(IEncryptionHandler newHandler);
    public sealed virtual bool MoveNext();
    private bool IsToken(CoreTokenScanner scanner, OperatorToken token, Nullable`1& actualTokenStart);
    [NullableContextAttribute("2")]
private bool TryReadStream(long startStreamTokenOffset, bool getLength, StreamToken& stream);
    private static bool TryReadUsingLength(IInputBytes inputBytes, Nullable`1<long> length, long startDataOffset, Byte[]& data);
    private DictionaryToken GetStreamDictionary();
    private Nullable`1<long> GetStreamLength(DictionaryToken dictionary);
    private static bool ReadStreamTokenStart(IInputBytes input, long tokenStart);
    public sealed virtual bool TryReadToken(T& token);
    public sealed virtual void Seek(long position);
    public sealed virtual void RegisterCustomTokenizer(byte firstByte, ITokenizer tokenizer);
    public sealed virtual void DeregisterCustomTokenizer(ITokenizer tokenizer);
    [NullableContextAttribute("0")]
public sealed virtual ObjectToken Get(IndirectReference reference);
    public sealed virtual void ReplaceToken(IndirectReference reference, IToken token);
    private ObjectToken BruteForceFileToFindReference(IndirectReference reference);
    private ObjectToken GetObjectFromStream(IndirectReference reference, long offset);
    private IReadOnlyList`1<ObjectToken> ParseObjectStream(StreamToken stream, long offset);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Tokenization.Scanner.PossibleStreamEndLocation : ValueType {
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private OperatorToken <Type>k__BackingField;
    public long Offset { get; }
    public OperatorToken Type { get; }
    public PossibleStreamEndLocation(long offset, OperatorToken type);
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
public OperatorToken get_Type();
    public virtual string ToString();
}
public static class UglyToad.PdfPig.Util.Adler32Checksum : object {
    private static int AdlerModulus;
    public static int Calculate(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.Util.ArrayTokenExtensions : object {
    [ExtensionAttribute]
public static NumericToken GetNumeric(ArrayToken array, int index);
    [ExtensionAttribute]
public static PdfRectangle ToRectangle(ArrayToken array, IPdfTokenScanner tokenScanner);
    [ExtensionAttribute]
public static PdfRectangle ToIntRectangle(ArrayToken array, IPdfTokenScanner tokenScanner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Util.ColorSpaceDetailsParser : object {
    public static ColorSpaceDetails GetColorSpaceDetails(Nullable`1<ColorSpace> colorSpace, DictionaryToken imageDictionary, IPdfTokenScanner scanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider, bool cannotRecurse);
    private static bool TryGetColorSpaceArray(DictionaryToken imageDictionary, IResourceStore resourceStore, IPdfTokenScanner scanner, ArrayToken& colorSpaceArray);
}
internal static class UglyToad.PdfPig.Util.ColorSpaceMapper : object {
    [NullableContextAttribute("1")]
public static bool TryMap(NameToken name, IResourceStore resourceStore, ColorSpace& colorSpaceResult);
}
public static class UglyToad.PdfPig.Util.DateFormatHelper : object {
    [NullableContextAttribute("1")]
public static bool TryParseDateTimeOffset(string s, DateTimeOffset& offset);
    [CompilerGeneratedAttribute]
internal static bool <TryParseDateTimeOffset>g__HasRemainingCharacters|0_0(int pos, int len, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryParseDateTimeOffset>g__IsAtEnd|0_1(int pos, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryParseDateTimeOffset>g__IsWithinRange|0_2(int val, int min, int max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Util.DefaultWordExtractor : object {
    [CompilerGeneratedAttribute]
private static IWordExtractor <Instance>k__BackingField;
    public static IWordExtractor Instance { get; }
    private static DefaultWordExtractor();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Util.DefaultWordExtractor/<GetWords>d__0")]
public sealed virtual IEnumerable`1<Word> GetWords(IReadOnlyList`1<Letter> letters);
    private static Word GenerateWord(List`1<Letter> letters);
    [CompilerGeneratedAttribute]
public static IWordExtractor get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Util.Diacritics : object {
    private static HashSet`1<string> NonCombiningDiacritics;
    private static Diacritics();
    public static bool IsPotentialStandaloneDiacritic(string value);
    public static bool IsInCombiningDiacriticRange(string value);
    public static bool TryCombineDiacriticWithPreviousLetter(string diacritic, string previous, String& result);
    private static int MeasureDiacriticAwareLength(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class UglyToad.PdfPig.Util.DictionaryTokenExtensions : object {
    [ExtensionAttribute]
public static IToken GetObjectOrDefault(DictionaryToken dictionaryToken, NameToken name);
    [ExtensionAttribute]
public static IToken GetObjectOrDefault(DictionaryToken dictionaryToken, NameToken first, NameToken second);
    [ExtensionAttribute]
public static int GetInt(DictionaryToken dictionaryToken, NameToken name);
    [ExtensionAttribute]
public static int GetIntOrDefault(DictionaryToken dictionaryToken, NameToken name, int defaultValue);
    [ExtensionAttribute]
public static int GetIntOrDefault(DictionaryToken dictionaryToken, NameToken first, NameToken second, int defaultValue);
    [ExtensionAttribute]
public static Nullable`1<long> GetLongOrDefault(DictionaryToken dictionaryToken, NameToken name);
    [ExtensionAttribute]
public static bool GetBooleanOrDefault(DictionaryToken dictionaryToken, NameToken name, bool defaultValue);
    [ExtensionAttribute]
public static NameToken GetNameOrDefault(DictionaryToken dictionaryToken, NameToken name);
    [ExtensionAttribute]
public static bool TryGetOptionalTokenDirect(DictionaryToken dictionaryToken, NameToken name, IPdfTokenScanner scanner, T& result);
    [ExtensionAttribute]
public static bool TryGetOptionalStringDirect(DictionaryToken dictionaryToken, NameToken name, IPdfTokenScanner scanner, String& result);
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Util.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static List`1<T> ToRecursiveOrderList(IEnumerable`1<T> collection, Expression`1<Func`2<T, IEnumerable`1<T>>> childCollection);
}
internal static class UglyToad.PdfPig.Util.Hex : object {
    [NullableAttribute("1")]
private static Char[] HexChars;
    private static Hex();
    public static void GetUtf8Chars(ReadOnlySpan`1<byte> bytes, Span`1<byte> utf8Chars);
    public static string GetString(ReadOnlySpan`1<byte> bytes);
    private static int GetHighNibble(byte b);
    private static int GetLowNibble(byte b);
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Util.InternalStringExtensions : object {
    [ExtensionAttribute]
public static bool StartsWithOffset(string value, ReadOnlySpan`1<char> start, int offset);
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> AsSpanOrSubstring(string text, int start);
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> AsSpanOrSubstring(string text, int start, int length);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Util.IWordExtractor {
    public abstract virtual IEnumerable`1<Word> GetWords(IReadOnlyList`1<Letter> letters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Util.Matrix3x3 : object {
    public static Matrix3x3 Identity;
    private double m11;
    private double m12;
    private double m13;
    private double m21;
    private double m22;
    private double m23;
    private double m31;
    private double m32;
    private double m33;
    public Matrix3x3(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
    private static Matrix3x3();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Util.Matrix3x3/<GetEnumerator>d__11")]
public sealed virtual IEnumerator`1<double> GetEnumerator();
    public Matrix3x3 Inverse();
    public Matrix3x3 Multiply(double factor);
    [NullableContextAttribute("0")]
public ValueTuple`3<double, double, double> Multiply(ValueTuple`3<double, double, double> vector);
    public Matrix3x3 Multiply(Matrix3x3 matrix);
    public Matrix3x3 Transpose();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Matrix3x3 other);
    public virtual int GetHashCode();
    private double GetDeterminant();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Util.PatternParser : object {
    public static PatternColor Create(IToken pattern, IPdfTokenScanner scanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider);
    private static PatternColor CreateTilingPattern(StreamToken patternStream, DictionaryToken patternExtGState, TransformationMatrix& matrix, IPdfTokenScanner scanner);
    private static PatternColor CreateShadingPattern(DictionaryToken patternDictionary, DictionaryToken patternExtGState, TransformationMatrix& matrix, IPdfTokenScanner scanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Util.PdfFunctionParser : object {
    public static PdfFunction Create(IToken function, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static PdfFunctionType0 CreatePdfFunctionType0(StreamToken functionStream, ArrayToken domain, ArrayToken range, IPdfTokenScanner scanner);
    private static PdfFunctionType2 CreatePdfFunctionType2(DictionaryToken functionDictionary, ArrayToken domain, ArrayToken range, IPdfTokenScanner scanner);
    private static PdfFunctionType3 CreatePdfFunctionType3(DictionaryToken functionDictionary, ArrayToken domain, ArrayToken range, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static PdfFunctionType4 CreatePdfFunctionType4(StreamToken functionStream, ArrayToken domain, ArrayToken range, IPdfTokenScanner scanner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Util.ShadingParser : object {
    public static Shading Create(IToken shading, IPdfTokenScanner scanner, IResourceStore resourceStore, ILookupFilterProvider filterProvider);
    private static PdfFunction[] GetFunctions(IToken functionToken, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static FunctionBasedShading CreateFunctionBasedShading(DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static AxialShading CreateAxialShading(DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static RadialShading CreateRadialShading(DictionaryToken shadingDictionary, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static FreeFormGouraudShading CreateFreeFormGouraudShadedTriangleMeshesShading(StreamToken shadingStream, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static LatticeFormGouraudShading CreateLatticeFormGouraudShadedTriangleMeshesShading(StreamToken shadingStream, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static CoonsPatchMeshesShading CreateCoonsPatchMeshesShading(StreamToken shadingStream, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
    private static TensorProductPatchMeshesShading CreateTensorProductPatchMeshesShading(StreamToken shadingStream, ColorSpaceDetails colorSpace, Double[] background, Nullable`1<PdfRectangle> bbox, bool antiAlias, IPdfTokenScanner scanner, ILookupFilterProvider filterProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class UglyToad.PdfPig.Util.StackDictionary`2 : object {
    private List`1<Dictionary`2<K, V>> values;
    public V Item { get; public set; }
    public V get_Item(K key);
    public void set_Item(K key, V value);
    public bool TryGetValue(K key, V& result);
    public void Push();
    public void Pop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class UglyToad.PdfPig.Util.WhitespaceSizeStatistics : object {
    public static double GetExpectedWhitespaceSize(Letter letter);
    public static bool IsProbablyWhitespace(double gap, Letter letter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Writer.Colors.OutputIntentsFactory : object {
    private static string SrgbIec61966OutputCondition;
    private static string RegistryName;
    public static ArrayToken GetOutputIntentsArray(Func`2<IToken, IndirectReferenceToken> objectWriter);
}
internal static class UglyToad.PdfPig.Writer.Colors.ProfileStreamReader : object {
    [NullableContextAttribute("1")]
public static Byte[] GetSRgb2014();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Writer.DataCompresser : object {
    public static Byte[] CompressBytes(IReadOnlyList`1<byte> bytes);
    public static Byte[] CompressBytes(Byte[] bytes);
    public static StreamToken CompressToStream(IReadOnlyList`1<byte> bytes);
    public static StreamToken CompressToStream(Byte[] bytes);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Writer.Fonts.IWritingFont {
    public bool HasWidths { get; }
    public string Name { get; }
    public abstract virtual bool get_HasWidths();
    public abstract virtual string get_Name();
    public abstract virtual bool TryGetBoundingBox(char character, PdfRectangle& boundingBox);
    public abstract virtual bool TryGetAdvanceWidth(char character, Double& width);
    public abstract virtual TransformationMatrix GetFontMatrix();
    public abstract virtual IndirectReferenceToken WriteFont(IPdfStreamWriter writer, IndirectReferenceToken reservedIndirect);
    public abstract virtual byte GetValueForCharacter(char character);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.Fonts.Standard14WritingFont : object {
    private AdobeFontMetrics metrics;
    [CompilerGeneratedAttribute]
private bool <HasWidths>k__BackingField;
    public bool HasWidths { get; }
    public string Name { get; }
    public Standard14WritingFont(AdobeFontMetrics metrics);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWidths();
    public sealed virtual string get_Name();
    public sealed virtual bool TryGetBoundingBox(char character, PdfRectangle& boundingBox);
    public sealed virtual bool TryGetAdvanceWidth(char character, Double& width);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual IndirectReferenceToken WriteFont(IPdfStreamWriter writer, IndirectReferenceToken reservedIndirect);
    public sealed virtual byte GetValueForCharacter(char character);
    private int UnicodeToSymbolCode(char character);
    private int UnicodeToZapfDingbats(char character);
    private int UnicodeToStandardEncoding(char character);
    private int CodeMapIfUnicode(char character);
}
internal static class UglyToad.PdfPig.Writer.Fonts.ToUnicodeCMapBuilder : object {
    [NullableAttribute("1")]
private static TokenWriter TokenWriter;
    private static ReadOnlySpan`1<byte> BeginToken { get; }
    private static ReadOnlySpan`1<byte> BeginCMapToken { get; }
    private static ReadOnlySpan`1<byte> DefToken { get; }
    private static ReadOnlySpan`1<byte> DictToken { get; }
    private static ReadOnlySpan`1<byte> FindResourceToken { get; }
    private static ToUnicodeCMapBuilder();
    private static ReadOnlySpan`1<byte> get_BeginToken();
    private static ReadOnlySpan`1<byte> get_BeginCMapToken();
    private static ReadOnlySpan`1<byte> get_DefToken();
    private static ReadOnlySpan`1<byte> get_DictToken();
    private static ReadOnlySpan`1<byte> get_FindResourceToken();
    [NullableContextAttribute("1")]
public static Byte[] ConvertToCMapStream(IReadOnlyDictionary`2<char, byte> unicodeToCharacterCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.Fonts.TrueTypeWritingFont : object {
    private TrueTypeFont font;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<byte> fontFileBytes;
    private object mappingLock;
    private Dictionary`2<char, byte> characterMapping;
    private int characterMappingCounter;
    [CompilerGeneratedAttribute]
private bool <HasWidths>k__BackingField;
    public bool HasWidths { get; }
    public string Name { get; }
    [NullableContextAttribute("0")]
public TrueTypeWritingFont(TrueTypeFont font, ReadOnlyMemory`1<byte> fontFileBytes);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWidths();
    public sealed virtual string get_Name();
    public sealed virtual bool TryGetBoundingBox(char character, PdfRectangle& boundingBox);
    public sealed virtual bool TryGetAdvanceWidth(char character, Double& width);
    public sealed virtual TransformationMatrix GetFontMatrix();
    public sealed virtual IndirectReferenceToken WriteFont(IPdfStreamWriter writer, IndirectReferenceToken reservedIndirect);
    public sealed virtual byte GetValueForCharacter(char character);
    private static ArrayToken GetBoundingBox(PdfRectangle boundingBox, double scaling);
}
[NullableContextAttribute("1")]
internal interface UglyToad.PdfPig.Writer.IPdfStreamWriter {
    public bool AttemptDeduplication { get; public set; }
    public Stream Stream { get; }
    public bool WritingPageContents { get; public set; }
    public abstract virtual bool get_AttemptDeduplication();
    public abstract virtual void set_AttemptDeduplication(bool value);
    public abstract virtual Stream get_Stream();
    public abstract virtual bool get_WritingPageContents();
    public abstract virtual void set_WritingPageContents(bool value);
    public abstract virtual IndirectReferenceToken WriteToken(IToken token);
    public abstract virtual IndirectReferenceToken WriteToken(IToken token, IndirectReferenceToken indirectReference);
    public abstract virtual IndirectReferenceToken ReserveObjectNumber();
    public abstract virtual void InitializePdf(double version);
    public abstract virtual void CompletePdf(IndirectReferenceToken catalogReference, IndirectReferenceToken documentInformationReference);
}
[NullableContextAttribute("1")]
public interface UglyToad.PdfPig.Writer.ITokenWriter {
    public bool WritingPageContents { get; public set; }
    public abstract virtual void WriteToken(IToken token, Stream outputStream);
    public abstract virtual void WriteObject(long objectNumber, int generation, Byte[] data, Stream outputStream);
    public abstract virtual void WriteCrossReferenceTable(IReadOnlyDictionary`2<IndirectReference, long> objectOffsets, IndirectReference catalogToken, Stream outputStream, Nullable`1<IndirectReference> documentInformationReference);
    public abstract virtual bool get_WritingPageContents();
    public abstract virtual void set_WritingPageContents(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.NameConflictSolver : object {
    private string prefix;
    private int key;
    private HashSet`1<string> xobjectNamesUsed;
    public NameConflictSolver(string prefix);
    private string ExtractPrefix(string name);
    public string NewName(string originalName);
    public string FixName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.NoTextTokenWriter : TokenWriter {
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    internal int Page { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(int value);
    protected virtual void WriteStream(StreamToken streamToken, Stream outputStream);
    private static bool IsFormStream(StreamToken streamToken);
    private bool TryGetStreamWithoutText(StreamToken streamToken, StreamToken& outputStreamToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Writer.PdfA1ARuleBuilder : object {
    public static void Obey(Dictionary`2<NameToken, IToken> catalog);
    private static DictionaryToken GenerateStructTree();
}
internal static class UglyToad.PdfPig.Writer.PdfABaselineRuleBuilder : object {
    [NullableContextAttribute("1")]
public static void Obey(Dictionary`2<NameToken, IToken> catalog, Func`2<IToken, IndirectReferenceToken> writerFunc, DocumentInformationBuilder documentInformationBuilder, PdfAStandard archiveStandard, double version, XDocument xmpMetadata);
}
public enum UglyToad.PdfPig.Writer.PdfAStandard : Enum {
    public int value__;
    public static PdfAStandard None;
    public static PdfAStandard A1B;
    public static PdfAStandard A1A;
    public static PdfAStandard A2B;
    public static PdfAStandard A2A;
    public static PdfAStandard A3B;
    public static PdfAStandard A3A;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.PdfDedupStreamWriter : PdfStreamWriter {
    private Dictionary`2<Byte[], IndirectReferenceToken> hashes;
    private MemoryStream ms;
    [NullableContextAttribute("2")]
public PdfDedupStreamWriter(Stream stream, bool dispose, ITokenWriter tokenWriter, Action`1<double> recordVersion);
    public virtual IndirectReferenceToken WriteToken(IToken token);
    public virtual IndirectReferenceToken WriteToken(IToken token, IndirectReferenceToken indirectReference);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Writer.PdfDocumentBuilder : object {
    private IPdfStreamWriter context;
    private Dictionary`2<int, PdfPageBuilder> pages;
    private Dictionary`2<Guid, FontStored> fonts;
    private bool completed;
    private int fontId;
    private double version;
    private static ArrayToken DefaultProcSet;
    [CompilerGeneratedAttribute]
private PdfAStandard <ArchiveStandard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDocumentInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentInformationBuilder <DocumentInformation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Bookmarks <Bookmarks>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XDocument <XmpMetadata>k__BackingField;
    private ConditionalWeakTable`2<IPdfTokenScanner, Dictionary`2<IndirectReference, IndirectReferenceToken>> existingCopies;
    private ConditionalWeakTable`2<PdfDocument, Dictionary`2<int, PageInfo>> existingTrees;
    public PdfAStandard ArchiveStandard { get; public set; }
    public bool IncludeDocumentInformation { get; public set; }
    public DocumentInformationBuilder DocumentInformation { get; public set; }
    [NullableAttribute("2")]
public Bookmarks Bookmarks { get; public set; }
    [NullableAttribute("2")]
public XDocument XmpMetadata { get; public set; }
    public IReadOnlyDictionary`2<int, PdfPageBuilder> Pages { get; }
    internal IReadOnlyDictionary`2<Guid, FontStored> Fonts { get; }
    public PdfDocumentBuilder(double version);
    public PdfDocumentBuilder(Stream stream, bool disposeStream, PdfWriterType type, double version, ITokenWriter tokenWriter);
    private static PdfDocumentBuilder();
    [CompilerGeneratedAttribute]
public PdfAStandard get_ArchiveStandard();
    [CompilerGeneratedAttribute]
public void set_ArchiveStandard(PdfAStandard value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDocumentInformation();
    [CompilerGeneratedAttribute]
public void set_IncludeDocumentInformation(bool value);
    [CompilerGeneratedAttribute]
public DocumentInformationBuilder get_DocumentInformation();
    [CompilerGeneratedAttribute]
public void set_DocumentInformation(DocumentInformationBuilder value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Bookmarks get_Bookmarks();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Bookmarks(Bookmarks value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XDocument get_XmpMetadata();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_XmpMetadata(XDocument value);
    public IReadOnlyDictionary`2<int, PdfPageBuilder> get_Pages();
    internal IReadOnlyDictionary`2<Guid, FontStored> get_Fonts();
    [NullableContextAttribute("0")]
public bool CanUseTrueTypeFont(ReadOnlyMemory`1<byte> fontFileBytes, IReadOnlyList`1& reasons);
    [NullableContextAttribute("0")]
public AddedFont AddTrueTypeFont(ReadOnlyMemory`1<byte> fontFileBytes);
    public AddedFont AddStandard14Font(Standard14Font type);
    internal IndirectReferenceToken AddImage(DictionaryToken dictionary, Byte[] bytes);
    public PdfPageBuilder AddPage(double width, double height);
    public PdfPageBuilder AddPage(PageSize size, bool isPortrait);
    internal IToken CopyToken(IPdfTokenScanner source, IToken token);
    public PdfPageBuilder AddPage(PdfDocument document, int pageNumber);
    public PdfPageBuilder AddPage(PdfDocument document, int pageNumber, Func`2<PdfAction, PdfAction> copyLink);
    private void CompleteDocument();
    public Byte[] Build();
    private static ArrayToken RectangleToArray(PdfRectangle rectangle);
    private IndirectReferenceToken[] CreateBookmarkTree(IReadOnlyList`1<BookmarkNode> nodes, Dictionary`2<int, IndirectReferenceToken> pageReferences, IndirectReferenceToken parent);
    private static ArrayToken CreateExplicitDestinationToken(ExplicitDestination destination, Dictionary`2<int, IndirectReferenceToken> pageReferences);
    private static DictionaryToken CreateLinkAnnotationToken(DictionaryToken token, PdfAction action, Dictionary`2<int, IndirectReferenceToken> pageReferences);
    private static DictionaryToken CreateActionToken(PdfAction action, Dictionary`2<int, IndirectReferenceToken> pageReferences);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_0(double x);
    [CompilerGeneratedAttribute]
private void <AddPage>g__CopyResourceDict|45_0(IToken token, Dictionary`2<NameToken, IToken> destinationDict, <>c__DisplayClass45_0& );
    [CompilerGeneratedAttribute]
private DictionaryToken <AddPage>g__GetRemoteDict|45_1(IToken token, <>c__DisplayClass45_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class UglyToad.PdfPig.Writer.PdfMerger : object {
    private static ILog Log;
    private static IFilterProvider FilterProvider;
    private static PdfMerger();
    public static Byte[] Merge(string file1, string file2, IReadOnlyList`1<int> file1Selection, IReadOnlyList`1<int> file2Selection, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder);
    public static void Merge(string file1, string file2, Stream output, IReadOnlyList`1<int> file1Selection, IReadOnlyList`1<int> file2Selection, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder);
    public static Byte[] Merge(String[] filePaths);
    public static Byte[] Merge(PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder, String[] filePaths);
    public static void Merge(Stream output, String[] filePaths);
    public static void Merge(Stream output, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder, String[] filePaths);
    public static Byte[] Merge(IReadOnlyList`1<Byte[]> files, IReadOnlyList`1<IReadOnlyList`1<int>> pagesBundle, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder);
    public static void Merge(IReadOnlyList`1<Stream> streams, Stream output, IReadOnlyList`1<IReadOnlyList`1<int>> pagesBundle, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder);
    private static void Merge(IReadOnlyList`1<PdfDocument> files, Stream output, IReadOnlyList`1<IReadOnlyList`1<int>> pagesBundle, PdfAStandard archiveStandard, DocumentInformationBuilder docInfoBuilder);
    [CompilerGeneratedAttribute]
internal static PdfAction <Merge>g__CopyLink|10_1(PdfAction action, Func`2<int, Nullable`1<int>> getPageNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class UglyToad.PdfPig.Writer.PdfPageBuilder : object {
    private PdfDocumentBuilder documentBuilder;
    internal Dictionary`2<NameToken, IToken> pageDictionary;
    internal List`1<IPageContentStream> contentStreams;
    private IPageContentStream currentStream;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<DictionaryToken, PdfAction>> links;
    private Dictionary`2<Guid, NameToken> documentFonts;
    internal int nextFontId;
    private int textSequence;
    private NameConflictSolver xobjectsNames;
    private NameConflictSolver gStateNames;
    internal Nullable`1<int> rotation;
    [CompilerGeneratedAttribute]
private int <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <PageSize>k__BackingField;
    internal IReadOnlyDictionary`2<string, IToken> Resources { get; }
    public int PageNumber { get; }
    public PdfRectangle PageSize { get; public set; }
    public IContentStream CurrentStream { get; }
    public IReadOnlyList`1<IContentStream> ContentStreams { get; }
    internal PdfPageBuilder(int number, PdfDocumentBuilder documentBuilder);
    internal PdfPageBuilder(int number, PdfDocumentBuilder documentBuilder, IEnumerable`1<CopiedContentStream> copied, Dictionary`2<NameToken, IToken> pageDict, List`1<ValueTuple`2<DictionaryToken, PdfAction>> links);
    internal IReadOnlyDictionary`2<string, IToken> get_Resources();
    [CompilerGeneratedAttribute]
public int get_PageNumber();
    [CompilerGeneratedAttribute]
public PdfRectangle get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(PdfRectangle value);
    public IContentStream get_CurrentStream();
    public IReadOnlyList`1<IContentStream> get_ContentStreams();
    public void NewContentStreamBefore();
    public void NewContentStreamAfter();
    public void SelectContentStream(int index);
    public PdfPageBuilder DrawLine(PdfPoint from, PdfPoint to, double lineWidth);
    public PdfPageBuilder DrawRectangle(PdfPoint position, double width, double height, double lineWidth, bool fill);
    public PdfPageBuilder SetRotation(PageRotationDegrees degrees);
    public PdfPageBuilder DrawTriangle(PdfPoint point1, PdfPoint point2, PdfPoint point3, double lineWidth, bool fill);
    public PdfPageBuilder DrawCircle(PdfPoint center, double diameter, double lineWidth, bool fill);
    public PdfPageBuilder DrawEllipsis(PdfPoint center, double width, double height, double lineWidth, bool fill);
    public PdfPageBuilder SetStrokeColor(byte r, byte g, byte b);
    internal PdfPageBuilder SetStrokeColorExact(double r, double g, double b);
    public PdfPageBuilder SetTextAndFillColor(byte r, byte g, byte b);
    public PdfPageBuilder ResetColor();
    public IReadOnlyList`1<Letter> MeasureText(string text, double fontSize, PdfPoint position, AddedFont font);
    public IReadOnlyList`1<Letter> AddText(string text, double fontSize, PdfPoint position, AddedFont font);
    public PdfPageBuilder SetTextRenderingMode(TextRenderingMode mode);
    private NameToken GetAddedFont(AddedFont font);
    public AddedImage AddJpeg(Byte[] fileBytes, PdfRectangle placementRectangle);
    public AddedImage AddJpeg(Stream fileStream, PdfRectangle placementRectangle);
    public void AddJpeg(AddedImage image, PdfRectangle placementRectangle);
    public void AddImage(AddedImage image, PdfRectangle placementRectangle);
    public AddedImage AddPng(Byte[] pngBytes, PdfRectangle placementRectangle);
    public AddedImage AddPng(Stream pngStream, PdfRectangle placementRectangle);
    public PdfPageBuilder CopyFrom(Page srcPage);
    private List`1<Letter> DrawLetters(NameToken name, string text, IWritingFont font, TransformationMatrix& fontMatrix, double fontSize, TransformationMatrix textMatrix);
    private static double RgbToDouble(byte value);
    private static double CheckRgbDouble(double value, string argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UglyToad.PdfPig.Writer.PdfStreamWriter : object {
    [NullableAttribute("2")]
private Action`1<double> recordVersion;
    protected static double DefaultVersion;
    protected Dictionary`2<IndirectReference, long> offsets;
    [CompilerGeneratedAttribute]
private bool <DisposeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentNumber>k__BackingField;
    protected ITokenWriter TokenWriter;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttemptDeduplication>k__BackingField;
    protected bool DisposeStream { get; protected set; }
    protected bool Initialized { get; protected set; }
    protected int CurrentNumber { get; protected set; }
    public Stream Stream { get; protected set; }
    public bool AttemptDeduplication { get; public set; }
    public bool WritingPageContents { get; public set; }
    [NullableContextAttribute("2")]
internal PdfStreamWriter(Stream baseStream, bool disposeStream, ITokenWriter tokenWriter, Action`1<double> recordVersion);
    [CompilerGeneratedAttribute]
protected bool get_DisposeStream();
    [CompilerGeneratedAttribute]
protected void set_DisposeStream(bool value);
    [CompilerGeneratedAttribute]
protected bool get_Initialized();
    [CompilerGeneratedAttribute]
protected void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
protected int get_CurrentNumber();
    [CompilerGeneratedAttribute]
protected void set_CurrentNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
protected void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AttemptDeduplication();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AttemptDeduplication(bool value);
    public sealed virtual bool get_WritingPageContents();
    public sealed virtual void set_WritingPageContents(bool value);
    public virtual IndirectReferenceToken WriteToken(IToken token);
    public virtual IndirectReferenceToken WriteToken(IToken token, IndirectReferenceToken indirectReference);
    public sealed virtual IndirectReferenceToken ReserveObjectNumber();
    public sealed virtual void InitializePdf(double version);
    public sealed virtual void CompletePdf(IndirectReferenceToken catalogReference, IndirectReferenceToken documentInformationReference);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class UglyToad.PdfPig.Writer.PdfTextRemover : object {
    public static Byte[] RemoveText(string filePath, IReadOnlyList`1<int> pagesBundle);
    public static void RemoveText(Stream output, string filePath, IReadOnlyList`1<int> pagesBundle);
    public static Byte[] RemoveText(Byte[] file, IReadOnlyList`1<int> pagesBundle);
    public static void RemoveText(Stream stream, Stream output, IReadOnlyList`1<int> pagesBundle);
    public static void RemoveText(PdfDocument file, Stream output, IReadOnlyList`1<int> pagesBundle);
}
public enum UglyToad.PdfPig.Writer.PdfWriterType : Enum {
    public int value__;
    public static PdfWriterType Default;
    public static PdfWriterType ObjectInMemoryDedup;
}
public class UglyToad.PdfPig.Writer.TokenWriter : object {
    private static byte ArrayStart;
    private static byte ArrayEnd;
    private static byte Comment;
    private static byte HexStart;
    private static byte HexEnd;
    private static byte InUseEntry;
    private static byte NameStart;
    private static byte RByte;
    private static byte StringStart;
    private static byte StringEnd;
    private static byte Whitespace;
    [NullableAttribute("1")]
private static HashSet`1<char> DelimiterChars;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static TokenWriter <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WritingPageContents>k__BackingField;
    [NullableAttribute("1")]
private static Int32[] EscapeNeeded;
    [NullableAttribute("1")]
private static Int32[] Escaped;
    private static ReadOnlySpan`1<byte> DictionaryStart { get; }
    private static ReadOnlySpan`1<byte> DictionaryEnd { get; }
    private static ReadOnlySpan`1<byte> Eof { get; }
    private static ReadOnlySpan`1<byte> FalseBytes { get; }
    private static ReadOnlySpan`1<byte> Null { get; }
    private static ReadOnlySpan`1<byte> ObjStart { get; }
    private static ReadOnlySpan`1<byte> ObjEnd { get; }
    private static ReadOnlySpan`1<byte> StartXref { get; }
    protected static ReadOnlySpan`1<byte> StreamStart { get; }
    protected static ReadOnlySpan`1<byte> StreamEnd { get; }
    private static ReadOnlySpan`1<byte> Trailer { get; }
    private static ReadOnlySpan`1<byte> TrueBytes { get; }
    private static ReadOnlySpan`1<byte> Xref { get; }
    [NullableAttribute("1")]
public static TokenWriter Instance { get; }
    public bool WritingPageContents { get; public set; }
    private static TokenWriter();
    private static ReadOnlySpan`1<byte> get_DictionaryStart();
    private static ReadOnlySpan`1<byte> get_DictionaryEnd();
    private static ReadOnlySpan`1<byte> get_Eof();
    private static ReadOnlySpan`1<byte> get_FalseBytes();
    private static ReadOnlySpan`1<byte> get_Null();
    private static ReadOnlySpan`1<byte> get_ObjStart();
    private static ReadOnlySpan`1<byte> get_ObjEnd();
    private static ReadOnlySpan`1<byte> get_StartXref();
    protected static ReadOnlySpan`1<byte> get_StreamStart();
    protected static ReadOnlySpan`1<byte> get_StreamEnd();
    private static ReadOnlySpan`1<byte> get_Trailer();
    private static ReadOnlySpan`1<byte> get_TrueBytes();
    private static ReadOnlySpan`1<byte> get_Xref();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static TokenWriter get_Instance();
    [NullableContextAttribute("1")]
public sealed virtual void WriteToken(IToken token, Stream outputStream);
    [NullableContextAttribute("1")]
public sealed virtual void WriteCrossReferenceTable(IReadOnlyDictionary`2<IndirectReference, long> objectOffsets, IndirectReference catalogToken, Stream outputStream, Nullable`1<IndirectReference> documentInformationReference);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WritingPageContents();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WritingPageContents(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteObject(long objectNumber, int generation, Byte[] data, Stream outputStream);
    [NullableContextAttribute("1")]
protected void WriteHex(HexToken hex, Stream stream);
    [NullableContextAttribute("1")]
protected void WriteArray(ArrayToken array, Stream outputStream);
    [NullableContextAttribute("1")]
protected void WriteBoolean(BooleanToken boolean, Stream outputStream);
    [NullableContextAttribute("1")]
protected void WriteComment(CommentToken comment, Stream outputStream);
    [NullableContextAttribute("1")]
protected void WriteNullToken(Stream outputStream);
    [NullableContextAttribute("1")]
protected void WriteDictionary(DictionaryToken dictionary, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteIndirectReference(IndirectReferenceToken reference, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteName(NameToken name, Stream outputStream);
    [NullableContextAttribute("1")]
private void WriteName(string name, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteNumber(NumericToken number, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteObject(ObjectToken objectToken, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteStream(StreamToken streamToken, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteString(StringToken stringToken, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteInt(int value, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteLineBreak(Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteLong(long value, Stream outputStream);
    [NullableContextAttribute("1")]
protected virtual void WriteWhitespace(Stream outputStream);
    [NullableContextAttribute("1")]
private void WriteFirstXrefEmptyEntry(Stream outputStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Writer.WriterUtil : object {
    [ExtensionAttribute]
public static Dictionary`2<string, IToken> GetOrCreateDict(Dictionary`2<NameToken, IToken> dict, NameToken key);
    [ExtensionAttribute]
public static Dictionary`2<string, IToken> GetOrCreateDict(Dictionary`2<string, IToken> dict, string key);
    public static IToken CopyToken(IPdfStreamWriter writer, IToken tokenToCopy, IPdfTokenScanner tokenScanner, IDictionary`2<IndirectReference, IndirectReferenceToken> referencesFromDocument, Dictionary`2<IndirectReference, IndirectReferenceToken> callstack);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Writer.WriterUtil/<WalkTree>d__3")]
internal static IEnumerable`1<ValueTuple`2<DictionaryToken, IReadOnlyList`1<DictionaryToken>>> WalkTree(PageTreeNode node, List`1<DictionaryToken> parents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UglyToad.PdfPig.Writer.Xmp.XmpWriter : object {
    private static string Xmptk;
    private static string RdfNamespace;
    private static string XmpMetaPrefix;
    private static string XmpMetaNamespace;
    private static string DublinCorePrefix;
    private static string DublinCoreNamespace;
    private static string XmpBasicPrefix;
    private static string XmpBasicNamespace;
    private static string XmpRightsManagementPrefix;
    private static string XmpRightsManagementNamespace;
    private static string XmpMediaManagementPrefix;
    private static string XmpMediaManagementNamespace;
    private static string AdobePdfPrefix;
    private static string AdobePdfNamespace;
    private static string PdfAIdentificationExtensionPrefix;
    private static string PdfAIdentificationExtensionNamespace;
    public static StreamToken GenerateXmpStream(DocumentInformationBuilder builder, double version, PdfAStandard standard, XDocument additionalXmpMetadata);
    private static XAttribute GetNamespaceAttribute(string prefix, XNamespace ns);
    private static void AddElementsForSchema(XElement parent, string prefix, string ns, DocumentInformationBuilder builder, List`1<SchemaMapper> mappers);
    private static XElement GetVersionAndConformanceLevelIdentificationElement(XNamespace rdf, XAttribute emptyRdfAbout, PdfAStandard standard);
    private static XElement GetExtensionSchemasElement(XNamespace rdf, XAttribute emptyRdfAbout);
    private static XElement GetSchemaPropertyListItem(XNamespace rdfNs, XNamespace pdfaPropertyNs, string name, string description, string category, string valueType);
    private static XDocument MergeXmpXdocuments(XDocument[] xDocuments);
}
public static class UglyToad.PdfPig.XObjects.XObjectFactory : object {
    [NullableContextAttribute("1")]
public static XObjectImage ReadImage(XObjectContentRecord xObject, IPdfTokenScanner pdfScanner, ILookupFilterProvider filterProvider, IResourceStore resourceStore);
}
public class UglyToad.PdfPig.XObjects.XObjectImage : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ReadOnlyMemory`1<byte>> memoryFactory;
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WidthInSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeightInSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJpxEncoded>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderingIntent <RenderingIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImageMask>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Decode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interpolate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInlineImage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DictionaryToken <ImageDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <RawMemory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ColorSpaceDetails <ColorSpaceDetails>k__BackingField;
    public PdfRectangle Bounds { get; }
    public int WidthInSamples { get; }
    public int HeightInSamples { get; }
    public int BitsPerComponent { get; }
    public bool IsJpxEncoded { get; }
    public RenderingIntent RenderingIntent { get; }
    public bool IsImageMask { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<double> Decode { get; }
    public bool Interpolate { get; }
    public bool IsInlineImage { get; }
    [NullableAttribute("1")]
public DictionaryToken ImageDictionary { get; }
    public ReadOnlyMemory`1<byte> RawMemory { get; }
    public ReadOnlySpan`1<byte> RawBytes { get; }
    [NullableAttribute("2")]
public ColorSpaceDetails ColorSpaceDetails { get; }
    [NullableContextAttribute("1")]
internal XObjectImage(PdfRectangle bounds, int widthInSamples, int heightInSamples, int bitsPerComponent, bool isJpxEncoded, bool isImageMask, RenderingIntent renderingIntent, bool interpolate, IReadOnlyList`1<double> decode, DictionaryToken imageDictionary, ReadOnlyMemory`1<byte> rawMemory, Lazy`1<ReadOnlyMemory`1<byte>> bytes, ColorSpaceDetails colorSpaceDetails);
    [CompilerGeneratedAttribute]
public sealed virtual PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public sealed virtual int get_WidthInSamples();
    [CompilerGeneratedAttribute]
public sealed virtual int get_HeightInSamples();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public bool get_IsJpxEncoded();
    [CompilerGeneratedAttribute]
public sealed virtual RenderingIntent get_RenderingIntent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsImageMask();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<double> get_Decode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Interpolate();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInlineImage();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual DictionaryToken get_ImageDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual ReadOnlyMemory`1<byte> get_RawMemory();
    public sealed virtual ReadOnlySpan`1<byte> get_RawBytes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ColorSpaceDetails get_ColorSpaceDetails();
    public sealed virtual bool TryGetBytesAsMemory(ReadOnlyMemory`1& bytes);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetPng(Byte[]& bytes);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum UglyToad.PdfPig.XObjects.XObjectType : Enum {
    public int value__;
    public static XObjectType Image;
    public static XObjectType Form;
    public static XObjectType PostScript;
}
