public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetrics : object {
    [CompilerGeneratedAttribute]
private double <AfmVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsWritingDirections <MetricSets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MappingScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Characters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <VVector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedV>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsCharacterSize <CharacterWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalStemWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalStemWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, AdobeFontMetricsIndividualCharacterMetric> <CharacterMetrics>k__BackingField;
    public double AfmVersion { get; }
    public IReadOnlyList`1<string> Comments { get; }
    public AdobeFontMetricsWritingDirections MetricSets { get; }
    public string FontName { get; }
    public string FullName { get; }
    public string FamilyName { get; }
    public string Weight { get; }
    public PdfRectangle BoundingBox { get; }
    public string Version { get; }
    public string Notice { get; }
    public string EncodingScheme { get; }
    public int MappingScheme { get; }
    public int EscapeCharacter { get; }
    public string CharacterSet { get; }
    public int Characters { get; }
    public bool IsBaseFont { get; }
    public AdobeFontMetricsVector VVector { get; }
    public bool IsFixedV { get; }
    public double CapHeight { get; }
    public double XHeight { get; }
    public double Ascender { get; }
    public double Descender { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public double ItalicAngle { get; }
    public AdobeFontMetricsCharacterSize CharacterWidth { get; }
    public double HorizontalStemWidth { get; }
    public double VerticalStemWidth { get; }
    public IReadOnlyDictionary`2<string, AdobeFontMetricsIndividualCharacterMetric> CharacterMetrics { get; }
    public AdobeFontMetrics(double afmVersion, IReadOnlyList`1<string> comments, int metricSets, string fontName, string fullName, string familyName, string weight, PdfRectangle boundingBox, string version, string notice, string encodingScheme, int mappingScheme, int escapeCharacter, string characterSet, int characters, bool isBaseFont, AdobeFontMetricsVector vVector, bool isFixedV, double capHeight, double xHeight, double ascender, double descender, double underlinePosition, double underlineThickness, double italicAngle, AdobeFontMetricsCharacterSize characterWidth, double horizontalStemWidth, double verticalStemWidth, IReadOnlyDictionary`2<string, AdobeFontMetricsIndividualCharacterMetric> characterMetrics);
    [CompilerGeneratedAttribute]
public double get_AfmVersion();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Comments();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsWritingDirections get_MetricSets();
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public string get_Weight();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_Notice();
    [CompilerGeneratedAttribute]
public string get_EncodingScheme();
    [CompilerGeneratedAttribute]
public int get_MappingScheme();
    [CompilerGeneratedAttribute]
public int get_EscapeCharacter();
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public int get_Characters();
    [CompilerGeneratedAttribute]
public bool get_IsBaseFont();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_VVector();
    [CompilerGeneratedAttribute]
public bool get_IsFixedV();
    [CompilerGeneratedAttribute]
public double get_CapHeight();
    [CompilerGeneratedAttribute]
public double get_XHeight();
    [CompilerGeneratedAttribute]
public double get_Ascender();
    [CompilerGeneratedAttribute]
public double get_Descender();
    [CompilerGeneratedAttribute]
public double get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public double get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsCharacterSize get_CharacterWidth();
    [CompilerGeneratedAttribute]
public double get_HorizontalStemWidth();
    [CompilerGeneratedAttribute]
public double get_VerticalStemWidth();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, AdobeFontMetricsIndividualCharacterMetric> get_CharacterMetrics();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsBuilder : object {
    [CompilerGeneratedAttribute]
private double <AfmVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdobeFontMetricsIndividualCharacterMetric> <CharacterMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedPitch>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <PdfBoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MappingScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBaseFont>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StdHw>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StdVw>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsCharacterSize <CharacterWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Characters>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <VVector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedV>k__BackingField;
    public double AfmVersion { get; }
    public List`1<string> Comments { get; }
    public List`1<AdobeFontMetricsIndividualCharacterMetric> CharacterMetrics { get; }
    public string FontName { get; public set; }
    public string FullName { get; public set; }
    public string FamilyName { get; public set; }
    public string Weight { get; public set; }
    public double ItalicAngle { get; public set; }
    public bool IsFixedPitch { get; public set; }
    public PdfRectangle PdfBoundingBox { get; private set; }
    public double UnderlinePosition { get; public set; }
    public double UnderlineThickness { get; public set; }
    public string Version { get; public set; }
    public string Notice { get; public set; }
    public string EncodingScheme { get; public set; }
    public int MappingScheme { get; public set; }
    public string CharacterSet { get; public set; }
    public bool IsBaseFont { get; public set; }
    public double CapHeight { get; public set; }
    public double XHeight { get; public set; }
    public double Ascender { get; public set; }
    public double Descender { get; public set; }
    public double StdHw { get; public set; }
    public double StdVw { get; public set; }
    public int EscapeCharacter { get; public set; }
    public AdobeFontMetricsCharacterSize CharacterWidth { get; private set; }
    public int Characters { get; public set; }
    public AdobeFontMetricsVector VVector { get; private set; }
    public bool IsFixedV { get; public set; }
    public AdobeFontMetricsBuilder(double afmVersion);
    [CompilerGeneratedAttribute]
public double get_AfmVersion();
    [CompilerGeneratedAttribute]
public List`1<string> get_Comments();
    [CompilerGeneratedAttribute]
public List`1<AdobeFontMetricsIndividualCharacterMetric> get_CharacterMetrics();
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(string value);
    [CompilerGeneratedAttribute]
public double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public void set_ItalicAngle(double value);
    [CompilerGeneratedAttribute]
public bool get_IsFixedPitch();
    [CompilerGeneratedAttribute]
public void set_IsFixedPitch(bool value);
    [CompilerGeneratedAttribute]
public PdfRectangle get_PdfBoundingBox();
    [CompilerGeneratedAttribute]
private void set_PdfBoundingBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
public double get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public void set_UnderlinePosition(double value);
    [CompilerGeneratedAttribute]
public double get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public void set_UnderlineThickness(double value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Notice();
    [CompilerGeneratedAttribute]
public void set_Notice(string value);
    [CompilerGeneratedAttribute]
public string get_EncodingScheme();
    [CompilerGeneratedAttribute]
public void set_EncodingScheme(string value);
    [CompilerGeneratedAttribute]
public int get_MappingScheme();
    [CompilerGeneratedAttribute]
public void set_MappingScheme(int value);
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBaseFont();
    [CompilerGeneratedAttribute]
public void set_IsBaseFont(bool value);
    [CompilerGeneratedAttribute]
public double get_CapHeight();
    [CompilerGeneratedAttribute]
public void set_CapHeight(double value);
    [CompilerGeneratedAttribute]
public double get_XHeight();
    [CompilerGeneratedAttribute]
public void set_XHeight(double value);
    [CompilerGeneratedAttribute]
public double get_Ascender();
    [CompilerGeneratedAttribute]
public void set_Ascender(double value);
    [CompilerGeneratedAttribute]
public double get_Descender();
    [CompilerGeneratedAttribute]
public void set_Descender(double value);
    [CompilerGeneratedAttribute]
public double get_StdHw();
    [CompilerGeneratedAttribute]
public void set_StdHw(double value);
    [CompilerGeneratedAttribute]
public double get_StdVw();
    [CompilerGeneratedAttribute]
public void set_StdVw(double value);
    [CompilerGeneratedAttribute]
public int get_EscapeCharacter();
    [CompilerGeneratedAttribute]
public void set_EscapeCharacter(int value);
    [CompilerGeneratedAttribute]
public AdobeFontMetricsCharacterSize get_CharacterWidth();
    [CompilerGeneratedAttribute]
private void set_CharacterWidth(AdobeFontMetricsCharacterSize value);
    [CompilerGeneratedAttribute]
public int get_Characters();
    [CompilerGeneratedAttribute]
public void set_Characters(int value);
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_VVector();
    [CompilerGeneratedAttribute]
private void set_VVector(AdobeFontMetricsVector value);
    [CompilerGeneratedAttribute]
public bool get_IsFixedV();
    [CompilerGeneratedAttribute]
public void set_IsFixedV(bool value);
    public void SetBoundingBox(double x1, double y1, double x2, double y2);
    public void SetCharacterWidth(double x, double y);
    public void SetVVector(double x, double y);
    public AdobeFontMetrics Build();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsCharacterSize : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public AdobeFontMetricsCharacterSize(double x, double y);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public virtual string ToString();
}
public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsEncoding : Encoding {
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    public string EncodingName { get; }
    public AdobeFontMetricsEncoding(AdobeFontMetrics metrics);
    [CompilerGeneratedAttribute]
public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsIndividualCharacterMetric : object {
    [CompilerGeneratedAttribute]
private int <CharacterCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <WidthDirection0>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <WidthDirection1>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <VVector>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsLigature <Ligature>k__BackingField;
    public int CharacterCode { get; }
    public string Name { get; }
    public AdobeFontMetricsVector Width { get; }
    public AdobeFontMetricsVector WidthDirection0 { get; }
    public AdobeFontMetricsVector WidthDirection1 { get; }
    public AdobeFontMetricsVector VVector { get; }
    public PdfRectangle BoundingBox { get; }
    public AdobeFontMetricsLigature Ligature { get; }
    public AdobeFontMetricsIndividualCharacterMetric(int characterCode, string name, AdobeFontMetricsVector width, AdobeFontMetricsVector widthDirection0, AdobeFontMetricsVector widthDirection1, AdobeFontMetricsVector vVector, PdfRectangle boundingBox, AdobeFontMetricsLigature ligature);
    [CompilerGeneratedAttribute]
public int get_CharacterCode();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_Width();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_WidthDirection0();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_WidthDirection1();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_VVector();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public AdobeFontMetricsLigature get_Ligature();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsIndividualCharacterMetricBuilder : object {
    [CompilerGeneratedAttribute]
private int <CharacterCode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthXDirection0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthYDirection0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthXDirection1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthYDirection1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsVector <VVector>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private AdobeFontMetricsLigature <Ligature>k__BackingField;
    public int CharacterCode { get; public set; }
    public double WidthX { get; public set; }
    public double WidthY { get; public set; }
    public double WidthXDirection0 { get; public set; }
    public double WidthYDirection0 { get; public set; }
    public double WidthXDirection1 { get; public set; }
    public double WidthYDirection1 { get; public set; }
    public string Name { get; public set; }
    public AdobeFontMetricsVector VVector { get; public set; }
    public PdfRectangle BoundingBox { get; public set; }
    public AdobeFontMetricsLigature Ligature { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CharacterCode();
    [CompilerGeneratedAttribute]
public void set_CharacterCode(int value);
    [CompilerGeneratedAttribute]
public double get_WidthX();
    [CompilerGeneratedAttribute]
public void set_WidthX(double value);
    [CompilerGeneratedAttribute]
public double get_WidthY();
    [CompilerGeneratedAttribute]
public void set_WidthY(double value);
    [CompilerGeneratedAttribute]
public double get_WidthXDirection0();
    [CompilerGeneratedAttribute]
public void set_WidthXDirection0(double value);
    [CompilerGeneratedAttribute]
public double get_WidthYDirection0();
    [CompilerGeneratedAttribute]
public void set_WidthYDirection0(double value);
    [CompilerGeneratedAttribute]
public double get_WidthXDirection1();
    [CompilerGeneratedAttribute]
public void set_WidthXDirection1(double value);
    [CompilerGeneratedAttribute]
public double get_WidthYDirection1();
    [CompilerGeneratedAttribute]
public void set_WidthYDirection1(double value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public AdobeFontMetricsVector get_VVector();
    [CompilerGeneratedAttribute]
public void set_VVector(AdobeFontMetricsVector value);
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
public AdobeFontMetricsLigature get_Ligature();
    [CompilerGeneratedAttribute]
public void set_Ligature(AdobeFontMetricsLigature value);
    public AdobeFontMetricsIndividualCharacterMetric Build();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsLigature : ValueType {
    [CompilerGeneratedAttribute]
private string <Successor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Successor { get; }
    public string Value { get; }
    public AdobeFontMetricsLigature(string successor, string value);
    [CompilerGeneratedAttribute]
public string get_Successor();
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
public static class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsParser : object {
    private static object Locker;
    private static Dictionary`2<string, string> CharacterNames;
    public static string Comment;
    public static string StartFontMetrics;
    public static string EndFontMetrics;
    public static string FontName;
    public static string FullName;
    public static string FamilyName;
    public static string Weight;
    public static string FontBbox;
    public static string Version;
    public static string Notice;
    public static string EncodingScheme;
    public static string MappingScheme;
    public static string EscChar;
    public static string CharacterSet;
    public static string Characters;
    public static string IsBaseFont;
    public static string VVector;
    public static string IsFixedV;
    public static string CapHeight;
    public static string XHeight;
    public static string Ascender;
    public static string Descender;
    public static string UnderlinePosition;
    public static string UnderlineThickness;
    public static string ItalicAngle;
    public static string CharWidth;
    public static string IsFixedPitch;
    public static string StartCharMetrics;
    public static string EndCharMetrics;
    public static string CharmetricsC;
    public static string CharmetricsCh;
    public static string CharmetricsWx;
    public static string CharmetricsW0X;
    public static string CharmetricsW1X;
    public static string CharmetricsWy;
    public static string CharmetricsW0Y;
    public static string CharmetricsW1Y;
    public static string CharmetricsW;
    public static string CharmetricsW0;
    public static string CharmetricsW1;
    public static string CharmetricsVv;
    public static string CharmetricsN;
    public static string CharmetricsB;
    public static string CharmetricsL;
    public static string StdHw;
    public static string StdVw;
    public static string StartTrackKern;
    public static string EndTrackKern;
    public static string StartKernData;
    public static string EndKernData;
    public static string StartKernPairs;
    public static string EndKernPairs;
    public static string StartKernPairs0;
    public static string StartKernPairs1;
    public static string StartComposites;
    public static string EndComposites;
    public static string Cc;
    public static string Pcc;
    public static string KernPairKp;
    public static string KernPairKph;
    public static string KernPairKpx;
    public static string KernPairKpy;
    private static Char[] IndividualCharmetricsSplit;
    private static Char[] CharmetricsKeySplit;
    private static AdobeFontMetricsParser();
    public static AdobeFontMetrics Parse(IInputBytes bytes, bool useReducedDataSet);
    private static double ReadDouble(IInputBytes input, StringBuilder stringBuilder);
    private static bool ReadBool(IInputBytes input, StringBuilder stringBuilder);
    private static string ReadString(IInputBytes input, StringBuilder stringBuilder);
    private static string ReadLine(IInputBytes input, StringBuilder stringBuilder);
    private static AdobeFontMetricsIndividualCharacterMetric ReadCharacterMetric(IInputBytes bytes, StringBuilder stringBuilder);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsVector : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public AdobeFontMetricsVector(double x, double y);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public virtual string ToString();
}
public enum UglyToad.PdfPig.Fonts.AdobeFontMetrics.AdobeFontMetricsWritingDirections : Enum {
    public byte value__;
    public static AdobeFontMetricsWritingDirections Direction0Only;
    public static AdobeFontMetricsWritingDirections Direction1Only;
    public static AdobeFontMetricsWritingDirections Direction0And1;
}
public abstract class UglyToad.PdfPig.Fonts.AdobeStylePrivateDictionary : object {
    public static double DefaultBlueScale;
    public static double DefaultExpansionFactor;
    public static int DefaultBlueFuzz;
    public static int DefaultBlueShift;
    public static int DefaultLanguageGroup;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <BlueValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <OtherBlues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <FamilyBlues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <FamilyOtherBlues>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BlueScale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlueShift>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlueFuzz>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StandardHorizontalWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StandardVerticalWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <StemSnapHorizontalWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <StemSnapVerticalWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExpansionFactor>k__BackingField;
    public IReadOnlyList`1<int> BlueValues { get; }
    public IReadOnlyList`1<int> OtherBlues { get; }
    public IReadOnlyList`1<int> FamilyBlues { get; }
    public IReadOnlyList`1<int> FamilyOtherBlues { get; }
    public double BlueScale { get; }
    public int BlueShift { get; }
    public int BlueFuzz { get; }
    public Nullable`1<double> StandardHorizontalWidth { get; }
    public Nullable`1<double> StandardVerticalWidth { get; }
    public IReadOnlyList`1<double> StemSnapHorizontalWidths { get; }
    public IReadOnlyList`1<double> StemSnapVerticalWidths { get; }
    public bool ForceBold { get; }
    public int LanguageGroup { get; }
    public double ExpansionFactor { get; }
    protected AdobeStylePrivateDictionary(BaseBuilder builder);
    private static AdobeStylePrivateDictionary();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_BlueValues();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_OtherBlues();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_FamilyBlues();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_FamilyOtherBlues();
    [CompilerGeneratedAttribute]
public double get_BlueScale();
    [CompilerGeneratedAttribute]
public int get_BlueShift();
    [CompilerGeneratedAttribute]
public int get_BlueFuzz();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StandardHorizontalWidth();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StandardVerticalWidth();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_StemSnapHorizontalWidths();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_StemSnapVerticalWidths();
    [CompilerGeneratedAttribute]
public bool get_ForceBold();
    [CompilerGeneratedAttribute]
public int get_LanguageGroup();
    [CompilerGeneratedAttribute]
public double get_ExpansionFactor();
}
internal class UglyToad.PdfPig.Fonts.CharStringStack : object {
    private List`1<double> stack;
    public int Length { get; }
    public bool CanPop { get; }
    public int get_Length();
    public bool get_CanPop();
    public double PopTop();
    public double PopBottom();
    public void Push(double value);
    public double CopyElementAt(int index);
    public void Clear();
    public virtual string ToString();
}
internal abstract class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatCharset : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IReadOnlyDictionary`2<int, ValueTuple`2<int, string>> GlyphIdToStringIdAndName;
    [CompilerGeneratedAttribute]
private bool <IsCidCharset>k__BackingField;
    public bool IsCidCharset { get; }
    protected CompactFontFormatCharset(ReadOnlySpan`1<ValueTuple`3<int, int, string>> data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCidCharset();
    public virtual string GetNameByGlyphId(int glyphId);
    public virtual string GetNameByStringId(int stringId);
    public virtual int GetStringIdByGlyphId(int glyphId);
    public sealed virtual int GetGlyphIdByName(string characterName);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatEmptyCharset : object {
    private int numberOfCharstrings;
    [CompilerGeneratedAttribute]
private bool <IsCidCharset>k__BackingField;
    public bool IsCidCharset { get; }
    public CompactFontFormatEmptyCharset(int numberOfCharstrings);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCidCharset();
    public sealed virtual string GetNameByGlyphId(int glyphId);
    public sealed virtual string GetNameByStringId(int stringId);
    public sealed virtual int GetStringIdByGlyphId(int glyphId);
    public sealed virtual int GetGlyphIdByName(string characterName);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatExpertCharset : object {
    private static IReadOnlyDictionary`2<int, string> StringIdToName;
    [CompilerGeneratedAttribute]
private static CompactFontFormatExpertCharset <Value>k__BackingField;
    private IReadOnlyDictionary`2<int, KeyValuePair`2<int, string>> glyphIdToStringIdAndName;
    [CompilerGeneratedAttribute]
private bool <IsCidCharset>k__BackingField;
    public static CompactFontFormatExpertCharset Value { get; }
    public bool IsCidCharset { get; }
    private static CompactFontFormatExpertCharset();
    [CompilerGeneratedAttribute]
public static CompactFontFormatExpertCharset get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCidCharset();
    public sealed virtual string GetNameByGlyphId(int glyphId);
    public sealed virtual string GetNameByStringId(int stringId);
    public sealed virtual int GetStringIdByGlyphId(int glyphId);
    public sealed virtual int GetGlyphIdByName(string characterName);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatExpertSubsetCharset : object {
    private static IReadOnlyDictionary`2<int, string> StringIdToName;
    [CompilerGeneratedAttribute]
private static CompactFontFormatExpertSubsetCharset <Value>k__BackingField;
    private IReadOnlyDictionary`2<int, KeyValuePair`2<int, string>> glyphIdToStringIdAndName;
    [CompilerGeneratedAttribute]
private bool <IsCidCharset>k__BackingField;
    public static CompactFontFormatExpertSubsetCharset Value { get; }
    public bool IsCidCharset { get; }
    private static CompactFontFormatExpertSubsetCharset();
    [CompilerGeneratedAttribute]
public static CompactFontFormatExpertSubsetCharset get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCidCharset();
    public sealed virtual string GetNameByGlyphId(int glyphId);
    public sealed virtual string GetNameByStringId(int stringId);
    public sealed virtual int GetStringIdByGlyphId(int glyphId);
    public sealed virtual int GetGlyphIdByName(string characterName);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatFormat0Charset : CompactFontFormatCharset {
    public CompactFontFormatFormat0Charset(ReadOnlySpan`1<ValueTuple`3<int, int, string>> data);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatFormat1Charset : CompactFontFormatCharset {
    public CompactFontFormatFormat1Charset(ReadOnlySpan`1<ValueTuple`3<int, int, string>> data);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatFormat2Charset : CompactFontFormatCharset {
    public CompactFontFormatFormat2Charset(ReadOnlySpan`1<ValueTuple`3<int, int, string>> data);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.CompactFontFormatIsoAdobeCharset : object {
    private static IReadOnlyDictionary`2<int, string> StringIdToName;
    [CompilerGeneratedAttribute]
private static CompactFontFormatIsoAdobeCharset <Value>k__BackingField;
    private IReadOnlyDictionary`2<int, KeyValuePair`2<int, string>> glyphIdToStringIdAndName;
    [CompilerGeneratedAttribute]
private bool <IsCidCharset>k__BackingField;
    public static CompactFontFormatIsoAdobeCharset Value { get; }
    public bool IsCidCharset { get; }
    private static CompactFontFormatIsoAdobeCharset();
    [CompilerGeneratedAttribute]
public static CompactFontFormatIsoAdobeCharset get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCidCharset();
    public sealed virtual string GetNameByGlyphId(int glyphId);
    public sealed virtual string GetNameByStringId(int stringId);
    public sealed virtual int GetStringIdByGlyphId(int glyphId);
    public sealed virtual int GetGlyphIdByName(string characterName);
}
internal interface UglyToad.PdfPig.Fonts.CompactFontFormat.Charsets.ICompactFontFormatCharset {
    public bool IsCidCharset { get; }
    public abstract virtual bool get_IsCidCharset();
    public abstract virtual string GetNameByGlyphId(int glyphId);
    public abstract virtual string GetNameByStringId(int stringId);
    public abstract virtual int GetStringIdByGlyphId(int glyphId);
    public abstract virtual int GetGlyphIdByName(string characterName);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CharStrings.LazyType2Command : object {
    private int minimumStackParameters;
    private Action`1<Type2BuildCharContext> runCommand;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public LazyType2Command(string name, int minimumStackParameters, Action`1<Type2BuildCharContext> runCommand);
    [CompilerGeneratedAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public void Run(Type2BuildCharContext context);
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CharStrings.Type2BuildCharContext : object {
    private Dictionary`2<int, double> transientArray;
    [CompilerGeneratedAttribute]
private CharStringStack <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PdfSubpath> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <CurrentLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    public CharStringStack Stack { get; }
    public List`1<PdfSubpath> Path { get; }
    public PdfPoint CurrentLocation { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    [CompilerGeneratedAttribute]
public CharStringStack get_Stack();
    [CompilerGeneratedAttribute]
public List`1<PdfSubpath> get_Path();
    [CompilerGeneratedAttribute]
public PdfPoint get_CurrentLocation();
    [CompilerGeneratedAttribute]
public void set_CurrentLocation(PdfPoint value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    public void AddRelativeHorizontalLine(double dx);
    public void AddRelativeVerticalLine(double dy);
    public void AddRelativeMoveTo(double dx, double dy);
    public void AddHorizontalMoveTo(double dx);
    public void AddVerticallMoveTo(double dy);
    public void AddRelativeBezierCurve(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public void AddRelativeLine(double dx, double dy);
    public void AddVerticalStemHints(IReadOnlyList`1<ValueTuple`2<double, double>> hints);
    public void AddHorizontalStemHints(IReadOnlyList`1<ValueTuple`2<double, double>> hints);
    public void AddToTransientArray(double value, int location);
    private void BeforeMoveTo();
    public double GetFromTransientArray(int location);
    public static int CountToBias(int count);
}
internal static class UglyToad.PdfPig.Fonts.CompactFontFormat.CharStrings.Type2CharStringParser : object {
    private static byte HstemByte;
    private static byte VstemByte;
    private static byte HstemhmByte;
    private static byte HintmaskByte;
    private static byte CntrmaskByte;
    private static byte VstemhmByte;
    private static HashSet`1<byte> HintingCommandBytes;
    private static IReadOnlyDictionary`2<byte, LazyType2Command> SingleByteCommandStore;
    private static IReadOnlyDictionary`2<byte, LazyType2Command> TwoByteCommandStore;
    private static Type2CharStringParser();
    public static LazyType2Command GetCommand(CommandIdentifier identifier);
    public static Type2CharStrings Parse(IReadOnlyList`1<ReadOnlyMemory`1<byte>> charStringBytes, CompactFontFormatSubroutinesSelector subroutinesSelector, ICompactFontFormatCharset charset);
    private static CommandSequence ParseSingle(List`1<byte> bytes, CompactFontFormatIndex localSubroutines, CompactFontFormatIndex globalSubroutines);
    private static float InterpretNumber(byte b, IReadOnlyList`1<byte> bytes, Int32& i);
    private static Nullable`1<CommandIdentifier> GetCommand(byte b, List`1<byte> bytes, List`1<float> precedingValues, List`1<CommandIdentifier> precedingCommands, CompactFontFormatIndex localSubroutines, CompactFontFormatIndex globalSubroutines, Int32& i);
    private static int CalculatePrecedingHintBytes(List`1<float> precedingValues, List`1<CommandIdentifier> precedingCommands);
    [CompilerGeneratedAttribute]
internal static int <CalculatePrecedingHintBytes>g__SafeStemCount|14_0(int counts);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CharStrings.Type2CharStrings : object {
    private object locker;
    private Dictionary`2<string, Type2Glyph> glyphs;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, CommandSequence> <CharStrings>k__BackingField;
    public IReadOnlyDictionary`2<string, CommandSequence> CharStrings { get; }
    public Type2CharStrings(IReadOnlyDictionary`2<string, CommandSequence> charStrings);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, CommandSequence> get_CharStrings();
    public Type2Glyph Generate(string name, double defaultWidthX, double nominalWidthX);
    private static Type2Glyph Run(CommandSequence sequence, double defaultWidthX, double nominalWidthX);
    private static void SetWidthFromArgumentsIfPresent(Type2BuildCharContext context, double nomimalWidthX, int expectedArgumentLength);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CharStrings.Type2Glyph : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfSubpath> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    public IReadOnlyList`1<PdfSubpath> Path { get; }
    public Nullable`1<double> Width { get; }
    public Type2Glyph(IReadOnlyList`1<PdfSubpath> path, Nullable`1<double> width);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PdfSubpath> get_Path();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormat0FdSelect : object {
    [CompilerGeneratedAttribute]
private RegistryOrderingSupplement <RegistryOrderingSupplement>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <FontDictionaries>k__BackingField;
    public RegistryOrderingSupplement RegistryOrderingSupplement { get; }
    public IReadOnlyList`1<int> FontDictionaries { get; }
    public CompactFontFormat0FdSelect(RegistryOrderingSupplement registryOrderingSupplement, IReadOnlyList`1<int> fontDictionaries);
    [CompilerGeneratedAttribute]
public RegistryOrderingSupplement get_RegistryOrderingSupplement();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_FontDictionaries();
    public sealed virtual int GetFontDictionaryIndex(int glyphId);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormat3FdSelect : object {
    [CompilerGeneratedAttribute]
private RegistryOrderingSupplement <RegistryOrderingSupplement>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Range3> <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sentinel>k__BackingField;
    public RegistryOrderingSupplement RegistryOrderingSupplement { get; }
    public IReadOnlyList`1<Range3> Ranges { get; }
    public int Sentinel { get; }
    public CompactFontFormat3FdSelect(RegistryOrderingSupplement registryOrderingSupplement, IReadOnlyList`1<Range3> ranges, int sentinel);
    [CompilerGeneratedAttribute]
public RegistryOrderingSupplement get_RegistryOrderingSupplement();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Range3> get_Ranges();
    [CompilerGeneratedAttribute]
public int get_Sentinel();
    public sealed virtual int GetFontDictionaryIndex(int glyphId);
}
internal abstract class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatBaseEncoding : Encoding {
    private Dictionary`2<int, string> codeToNameMap;
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    public string EncodingName { get; }
    [CompilerGeneratedAttribute]
public virtual string get_EncodingName();
    public virtual string GetName(int code);
    public void Add(int code, int sid, string name);
    protected void Add(int code, int sid);
}
internal abstract class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatBuiltInEncoding : CompactFontFormatBaseEncoding {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Supplement> <Supplements>k__BackingField;
    public IReadOnlyList`1<Supplement> Supplements { get; }
    protected CompactFontFormatBuiltInEncoding(IReadOnlyList`1<Supplement> supplements);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Supplement> get_Supplements();
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatCidFont : CompactFontFormatFont {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompactFontFormatTopLevelDictionary> <FontDictionaries>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompactFontFormatPrivateDictionary> <PrivateDictionaries>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompactFontFormatFdSelect <FdSelect>k__BackingField;
    public IReadOnlyList`1<CompactFontFormatTopLevelDictionary> FontDictionaries { get; }
    public IReadOnlyList`1<CompactFontFormatPrivateDictionary> PrivateDictionaries { get; }
    public ICompactFontFormatFdSelect FdSelect { get; }
    public CompactFontFormatCidFont(CompactFontFormatTopLevelDictionary topDictionary, CompactFontFormatPrivateDictionary privateDictionary, ICompactFontFormatCharset charset, Union`2<Type1CharStrings, Type2CharStrings> charStrings, IReadOnlyList`1<CompactFontFormatTopLevelDictionary> fontDictionaries, IReadOnlyList`1<CompactFontFormatPrivateDictionary> privateDictionaries, ICompactFontFormatFdSelect fdSelect);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompactFontFormatTopLevelDictionary> get_FontDictionaries();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompactFontFormatPrivateDictionary> get_PrivateDictionaries();
    [CompilerGeneratedAttribute]
public ICompactFontFormatFdSelect get_FdSelect();
    protected virtual double GetDefaultWidthX(string characterName);
    protected virtual double GetNominalWidthX(string characterName);
    public virtual Nullable`1<TransformationMatrix> GetFontMatrix(string characterName);
    private bool TryGetPrivateDictionaryForCharacter(string characterName, CompactFontFormatPrivateDictionary& dictionary);
    private bool TryGetFontDictionaryForCharacter(string characterName, CompactFontFormatTopLevelDictionary& dictionary);
}
public class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatData : object {
    private ReadOnlyMemory`1<byte> dataBytes;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; private set; }
    public int Length { get; }
    [DebuggerStepThroughAttribute]
public CompactFontFormatData(ReadOnlyMemory`1<byte> dataBytes);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    public int get_Length();
    public string ReadString(int length, Encoding encoding);
    public byte ReadCard8();
    public ushort ReadCard16();
    public byte ReadOffsize();
    public int ReadOffset(int offsetSize);
    internal ReadOnlySpan`1<byte> ReadSpan(int count);
    public byte ReadByte();
    public byte Peek();
    public bool CanRead();
    public void Seek(int offset);
    public long ReadLong();
    public int ReadSid();
    public Byte[] ReadBytes(int length);
    public CompactFontFormatData SnapshotPortion(int startLocation, int length);
}
internal static class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatEncodingReader : object {
    public static Encoding ReadEncoding(CompactFontFormatData data, ICompactFontFormatCharset charset, ReadOnlySpan`1<string> stringIndex);
    private static CompactFontFormatFormat0Encoding ReadFormat0Encoding(CompactFontFormatData data, ICompactFontFormatCharset charset, ReadOnlySpan`1<string> stringIndex, byte format);
    private static CompactFontFormatFormat1Encoding ReadFormat1Encoding(CompactFontFormatData data, ICompactFontFormatCharset charset, ReadOnlySpan`1<string> stringIndex, byte format);
    private static IReadOnlyList`1<Supplement> ReadSupplement(CompactFontFormatData dataInput, ReadOnlySpan`1<string> stringIndex);
    private static string ReadString(int index, ReadOnlySpan`1<string> stringIndex);
    private static bool HasSupplement(byte format);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatExpertEncoding : CompactFontFormatBaseEncoding {
    private static Dictionary`2<int, int> ExpertEncodingTable;
    public static CompactFontFormatExpertEncoding Instance;
    private static CompactFontFormatExpertEncoding();
}
public class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatFont : object {
    [CompilerGeneratedAttribute]
private CompactFontFormatTopLevelDictionary <TopDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private CompactFontFormatPrivateDictionary <PrivateDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompactFontFormatCharset <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private Union`2<Type1CharStrings, Type2CharStrings> <CharStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    internal CompactFontFormatTopLevelDictionary TopDictionary { get; }
    internal CompactFontFormatPrivateDictionary PrivateDictionary { get; }
    internal ICompactFontFormatCharset Charset { get; }
    internal Union`2<Type1CharStrings, Type2CharStrings> CharStrings { get; }
    public Encoding Encoding { get; }
    public TransformationMatrix FontMatrix { get; }
    public string Weight { get; }
    public double ItalicAngle { get; }
    internal CompactFontFormatFont(CompactFontFormatTopLevelDictionary topDictionary, CompactFontFormatPrivateDictionary privateDictionary, ICompactFontFormatCharset charset, Union`2<Type1CharStrings, Type2CharStrings> charStrings, Encoding fontEncoding);
    [CompilerGeneratedAttribute]
internal CompactFontFormatTopLevelDictionary get_TopDictionary();
    [CompilerGeneratedAttribute]
internal CompactFontFormatPrivateDictionary get_PrivateDictionary();
    [CompilerGeneratedAttribute]
internal ICompactFontFormatCharset get_Charset();
    [CompilerGeneratedAttribute]
internal Union`2<Type1CharStrings, Type2CharStrings> get_CharStrings();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    public TransformationMatrix get_FontMatrix();
    public string get_Weight();
    public double get_ItalicAngle();
    public string GetCharacterName(int characterCode, bool isCid);
    public Nullable`1<PdfRectangle> GetCharacterBoundingBox(string characterName);
    public bool TryGetPath(string characterName, IReadOnlyList`1& path);
    public IReadOnlyList`1<PdfSubpath> GetCharacterPath(string characterName);
    protected virtual double GetDefaultWidthX(string characterName);
    protected virtual double GetNominalWidthX(string characterName);
    public virtual Nullable`1<TransformationMatrix> GetFontMatrix(string characterName);
}
public class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatFontCollection : object {
    [CompilerGeneratedAttribute]
private CompactFontFormatHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, CompactFontFormatFont> <Fonts>k__BackingField;
    [CompilerGeneratedAttribute]
private CompactFontFormatFont <FirstFont>k__BackingField;
    public CompactFontFormatHeader Header { get; }
    public IReadOnlyDictionary`2<string, CompactFontFormatFont> Fonts { get; }
    public CompactFontFormatFont FirstFont { get; }
    public CompactFontFormatFontCollection(CompactFontFormatHeader header, IReadOnlyDictionary`2<string, CompactFontFormatFont> fontSet);
    [CompilerGeneratedAttribute]
public CompactFontFormatHeader get_Header();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, CompactFontFormatFont> get_Fonts();
    [CompilerGeneratedAttribute]
public CompactFontFormatFont get_FirstFont();
    public TransformationMatrix GetFirstTransformationMatrix();
    public Nullable`1<PdfRectangle> GetCharacterBoundingBox(string characterName);
    public string GetCharacterName(int characterCode, bool isCid);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatFormat0Encoding : CompactFontFormatBuiltInEncoding {
    public CompactFontFormatFormat0Encoding(ReadOnlySpan`1<ValueTuple`3<int, int, string>> values, IReadOnlyList`1<Supplement> supplements);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatFormat1Encoding : CompactFontFormatBuiltInEncoding {
    [CompilerGeneratedAttribute]
private int <NumberOfRanges>k__BackingField;
    public int NumberOfRanges { get; public set; }
    public CompactFontFormatFormat1Encoding(int numberOfRanges, IReadOnlyList`1<ValueTuple`3<int, int, string>> values, IReadOnlyList`1<Supplement> supplements);
    [CompilerGeneratedAttribute]
public int get_NumberOfRanges();
    [CompilerGeneratedAttribute]
public void set_NumberOfRanges(int value);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatHeader : ValueType {
    [CompilerGeneratedAttribute]
private byte <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <OffsetSize>k__BackingField;
    public byte MajorVersion { get; }
    public byte MinorVersion { get; }
    public byte SizeInBytes { get; }
    public byte OffsetSize { get; }
    public CompactFontFormatHeader(byte majorVersion, byte minorVersion, byte sizeInBytes, byte offsetSize);
    [CompilerGeneratedAttribute]
public byte get_MajorVersion();
    [CompilerGeneratedAttribute]
public byte get_MinorVersion();
    [CompilerGeneratedAttribute]
public byte get_SizeInBytes();
    [CompilerGeneratedAttribute]
public byte get_OffsetSize();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatIndex : object {
    private Byte[][] bytes;
    [CompilerGeneratedAttribute]
private static CompactFontFormatIndex <None>k__BackingField;
    public int Count { get; }
    public ReadOnlyMemory`1<byte> Item { get; }
    public static CompactFontFormatIndex None { get; }
    public CompactFontFormatIndex(Byte[][] bytes);
    private static CompactFontFormatIndex();
    public sealed virtual int get_Count();
    public sealed virtual ReadOnlyMemory`1<byte> get_Item(int index);
    [CompilerGeneratedAttribute]
public static CompactFontFormatIndex get_None();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatIndex/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<ReadOnlyMemory`1<byte>> GetEnumerator();
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatIndex/<System-Collections-IEnumerable-GetEnumerator>d__10")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatIndexReader : object {
    public static CompactFontFormatIndex ReadDictionaryData(CompactFontFormatData data);
    public static Int32[] ReadIndex(CompactFontFormatData data);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatIndividualFontParser : object {
    private CompactFontFormatTopLevelDictionaryReader topLevelDictionaryReader;
    private CompactFontFormatPrivateDictionaryReader privateDictionaryReader;
    public CompactFontFormatIndividualFontParser(CompactFontFormatTopLevelDictionaryReader topLevelDictionaryReader, CompactFontFormatPrivateDictionaryReader privateDictionaryReader);
    public CompactFontFormatFont Parse(CompactFontFormatData data, string name, ReadOnlySpan`1<byte> topDictionaryIndex, ReadOnlySpan`1<string> stringIndex, CompactFontFormatIndex globalSubroutineIndex);
    private static ICompactFontFormatCharset ReadCharset(CompactFontFormatData data, CompactFontFormatTopLevelDictionary topDictionary, CompactFontFormatIndex charStringIndex, ReadOnlySpan`1<string> stringIndex);
    private static string ReadString(int index, ReadOnlySpan`1<string> stringIndex);
    private static Type2CharStrings ReadCharStrings(CompactFontFormatData data, CompactFontFormatTopLevelDictionary topDictionary, CompactFontFormatIndex charStringIndex, CompactFontFormatSubroutinesSelector subroutinesSelector, ICompactFontFormatCharset charset);
    private CompactFontFormatCidFont ReadCidFont(CompactFontFormatData data, CompactFontFormatTopLevelDictionary topLevelDictionary, int numberOfGlyphs, ReadOnlySpan`1<string> stringIndex, CompactFontFormatPrivateDictionary privateDictionary, ICompactFontFormatCharset charset, CompactFontFormatIndex globalSubroutines, CompactFontFormatIndex localSubroutinesTop, CompactFontFormatIndex charStringIndex);
    private static CompactFontFormat0FdSelect ReadFormat0FdSelect(CompactFontFormatData data, int numberOfGlyphs, RegistryOrderingSupplement registryOrderingSupplement);
    private static CompactFontFormat3FdSelect ReadFormat3FdSelect(CompactFontFormatData data, RegistryOrderingSupplement registryOrderingSupplement);
}
public static class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatParser : object {
    private static string TagOtto;
    private static string TagTtcf;
    private static string TagTtfonly;
    public static CompactFontFormatFontCollection Parse(CompactFontFormatData data);
    private static string ReadTag(CompactFontFormatData data);
    private static CompactFontFormatHeader ReadHeader(CompactFontFormatData data);
    private static String[] ReadStringIndex(CompactFontFormatData data);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatStandardEncoding : CompactFontFormatBaseEncoding {
    private static Dictionary`2<int, int> CharacterCodeToSid;
    public static CompactFontFormatStandardEncoding Instance;
    private static CompactFontFormatStandardEncoding();
}
internal static class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatStandardStrings : object {
    private static String[] StringIdentifierToString;
    private static CompactFontFormatStandardStrings();
    public static string GetName(int sid);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.CompactFontFormatSubroutinesSelector : object {
    private CompactFontFormatIndex global;
    private CompactFontFormatIndex local;
    private bool isCid;
    private ICompactFontFormatFdSelect fdSelect;
    private IReadOnlyList`1<CompactFontFormatIndex> perFontLocalSubroutines;
    public CompactFontFormatSubroutinesSelector(CompactFontFormatIndex global, CompactFontFormatIndex local);
    public CompactFontFormatSubroutinesSelector(CompactFontFormatIndex global, CompactFontFormatIndex local, ICompactFontFormatFdSelect fdSelect, IReadOnlyList`1<CompactFontFormatIndex> perFontLocalSubroutines);
    public ValueTuple`2<CompactFontFormatIndex, CompactFontFormatIndex> GetSubroutines(int glyphId);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CidFontOperators : object {
    [CompilerGeneratedAttribute]
private RegistryOrderingSupplement <Ros>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UidBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FontDictionaryArray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FontDictionarySelect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    public RegistryOrderingSupplement Ros { get; public set; }
    public int Version { get; public set; }
    public int Revision { get; public set; }
    public int Type { get; public set; }
    public int Count { get; public set; }
    public double UidBase { get; public set; }
    public int FontDictionaryArray { get; public set; }
    public int FontDictionarySelect { get; public set; }
    public string FontName { get; public set; }
    [CompilerGeneratedAttribute]
public RegistryOrderingSupplement get_Ros();
    [CompilerGeneratedAttribute]
public void set_Ros(RegistryOrderingSupplement value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
public void set_Revision(int value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public double get_UidBase();
    [CompilerGeneratedAttribute]
public void set_UidBase(double value);
    [CompilerGeneratedAttribute]
public int get_FontDictionaryArray();
    [CompilerGeneratedAttribute]
public void set_FontDictionaryArray(int value);
    [CompilerGeneratedAttribute]
public int get_FontDictionarySelect();
    [CompilerGeneratedAttribute]
public void set_FontDictionarySelect(int value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
}
internal enum UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatCharStringType : Enum {
    public byte value__;
    public static CompactFontFormatCharStringType Type1;
    public static CompactFontFormatCharStringType Type2;
}
internal abstract class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatDictionaryReader`2 : object {
    private List`1<Operand<TResult, TBuilder>> operands;
    public abstract virtual TResult Read(CompactFontFormatData data, ReadOnlySpan`1<string> stringIndex);
    protected TBuilder ReadDictionary(TBuilder builder, CompactFontFormatData data, ReadOnlySpan`1<string> stringIndex);
    private static double ReadRealNumber(CompactFontFormatData data);
    protected abstract virtual void ApplyOperation(TBuilder builder, List`1<Operand<TResult, TBuilder>> operands, OperandKey<TResult, TBuilder> operandKey, ReadOnlySpan`1<string> stringIndex);
    protected static string GetString(List`1<Operand<TResult, TBuilder>> operands, ReadOnlySpan`1<string> stringIndex);
    protected static PdfRectangle GetBoundingBox(List`1<Operand<TResult, TBuilder>> operands);
    protected static Double[] ToArray(List`1<Operand<TResult, TBuilder>> operands);
    protected static int GetIntOrDefault(List`1<Operand<TResult, TBuilder>> operands, int defaultValue);
    protected static Int32[] ReadDeltaToIntArray(List`1<Operand<TResult, TBuilder>> operands);
    protected static Double[] ReadDeltaToArray(List`1<Operand<TResult, TBuilder>> operands);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatPrivateDictionary : AdobeStylePrivateDictionary {
    [CompilerGeneratedAttribute]
private double <InitialRandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LocalSubroutineOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultWidthX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NominalWidthX>k__BackingField;
    public double InitialRandomSeed { get; }
    public Nullable`1<int> LocalSubroutineOffset { get; }
    public double DefaultWidthX { get; }
    public double NominalWidthX { get; }
    public CompactFontFormatPrivateDictionary(Builder builder);
    [CompilerGeneratedAttribute]
public double get_InitialRandomSeed();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LocalSubroutineOffset();
    [CompilerGeneratedAttribute]
public double get_DefaultWidthX();
    [CompilerGeneratedAttribute]
public double get_NominalWidthX();
    public static CompactFontFormatPrivateDictionary GetDefault();
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatPrivateDictionaryReader : CompactFontFormatDictionaryReader`2<CompactFontFormatPrivateDictionary, Builder> {
    public virtual CompactFontFormatPrivateDictionary Read(CompactFontFormatData data, ReadOnlySpan`1<string> stringIndex);
    protected virtual void ApplyOperation(Builder dictionary, List`1<Operand<CompactFontFormatPrivateDictionary, Builder>> operands, OperandKey<CompactFontFormatPrivateDictionary, Builder> operandKey, ReadOnlySpan`1<string> stringIndex);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatTopLevelDictionary : object {
    public static int UnsetOffset;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedPitch>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PaintType>k__BackingField;
    [CompilerGeneratedAttribute]
private CompactFontFormatCharStringType <CharStringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TransformationMatrix> <FontMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <FontBoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Xuid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharSetOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EncodingOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SizeAndOffset> <PrivateDictionaryLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharStringsOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SyntheticBaseFontIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFontName>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <BaseFontBlend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCidFont>k__BackingField;
    [CompilerGeneratedAttribute]
private CidFontOperators <CidFontOperators>k__BackingField;
    public string Version { get; public set; }
    public string Notice { get; public set; }
    public string Copyright { get; public set; }
    public string FullName { get; public set; }
    public string FamilyName { get; public set; }
    public string Weight { get; public set; }
    public bool IsFixedPitch { get; public set; }
    public double ItalicAngle { get; public set; }
    public double UnderlinePosition { get; public set; }
    public double UnderlineThickness { get; public set; }
    public double PaintType { get; public set; }
    public CompactFontFormatCharStringType CharStringType { get; public set; }
    public Nullable`1<TransformationMatrix> FontMatrix { get; public set; }
    public double StrokeWidth { get; public set; }
    public double UniqueId { get; public set; }
    public PdfRectangle FontBoundingBox { get; public set; }
    public Double[] Xuid { get; public set; }
    public int CharSetOffset { get; public set; }
    public int EncodingOffset { get; public set; }
    public Nullable`1<SizeAndOffset> PrivateDictionaryLocation { get; public set; }
    public int CharStringsOffset { get; public set; }
    public int SyntheticBaseFontIndex { get; public set; }
    public string PostScript { get; public set; }
    public string BaseFontName { get; public set; }
    public Double[] BaseFontBlend { get; public set; }
    public bool IsCidFont { get; public set; }
    public CidFontOperators CidFontOperators { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Notice();
    [CompilerGeneratedAttribute]
public void set_Notice(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFixedPitch();
    [CompilerGeneratedAttribute]
public void set_IsFixedPitch(bool value);
    [CompilerGeneratedAttribute]
public double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public void set_ItalicAngle(double value);
    [CompilerGeneratedAttribute]
public double get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public void set_UnderlinePosition(double value);
    [CompilerGeneratedAttribute]
public double get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public void set_UnderlineThickness(double value);
    [CompilerGeneratedAttribute]
public double get_PaintType();
    [CompilerGeneratedAttribute]
public void set_PaintType(double value);
    [CompilerGeneratedAttribute]
public CompactFontFormatCharStringType get_CharStringType();
    [CompilerGeneratedAttribute]
public void set_CharStringType(CompactFontFormatCharStringType value);
    [CompilerGeneratedAttribute]
public Nullable`1<TransformationMatrix> get_FontMatrix();
    [CompilerGeneratedAttribute]
public void set_FontMatrix(Nullable`1<TransformationMatrix> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(double value);
    [CompilerGeneratedAttribute]
public PdfRectangle get_FontBoundingBox();
    [CompilerGeneratedAttribute]
public void set_FontBoundingBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
public Double[] get_Xuid();
    [CompilerGeneratedAttribute]
public void set_Xuid(Double[] value);
    [CompilerGeneratedAttribute]
public int get_CharSetOffset();
    [CompilerGeneratedAttribute]
public void set_CharSetOffset(int value);
    [CompilerGeneratedAttribute]
public int get_EncodingOffset();
    [CompilerGeneratedAttribute]
public void set_EncodingOffset(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<SizeAndOffset> get_PrivateDictionaryLocation();
    [CompilerGeneratedAttribute]
public void set_PrivateDictionaryLocation(Nullable`1<SizeAndOffset> value);
    [CompilerGeneratedAttribute]
public int get_CharStringsOffset();
    [CompilerGeneratedAttribute]
public void set_CharStringsOffset(int value);
    [CompilerGeneratedAttribute]
public int get_SyntheticBaseFontIndex();
    [CompilerGeneratedAttribute]
public void set_SyntheticBaseFontIndex(int value);
    [CompilerGeneratedAttribute]
public string get_PostScript();
    [CompilerGeneratedAttribute]
public void set_PostScript(string value);
    [CompilerGeneratedAttribute]
public string get_BaseFontName();
    [CompilerGeneratedAttribute]
public void set_BaseFontName(string value);
    [CompilerGeneratedAttribute]
public Double[] get_BaseFontBlend();
    [CompilerGeneratedAttribute]
public void set_BaseFontBlend(Double[] value);
    [CompilerGeneratedAttribute]
public bool get_IsCidFont();
    [CompilerGeneratedAttribute]
public void set_IsCidFont(bool value);
    [CompilerGeneratedAttribute]
public CidFontOperators get_CidFontOperators();
    [CompilerGeneratedAttribute]
public void set_CidFontOperators(CidFontOperators value);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.CompactFontFormatTopLevelDictionaryReader : CompactFontFormatDictionaryReader`2<CompactFontFormatTopLevelDictionary, CompactFontFormatTopLevelDictionary> {
    public virtual CompactFontFormatTopLevelDictionary Read(CompactFontFormatData data, ReadOnlySpan`1<string> stringIndex);
    protected virtual void ApplyOperation(CompactFontFormatTopLevelDictionary dictionary, List`1<Operand<CompactFontFormatTopLevelDictionary, CompactFontFormatTopLevelDictionary>> operands, OperandKey<CompactFontFormatTopLevelDictionary, CompactFontFormatTopLevelDictionary> key, ReadOnlySpan`1<string> stringIndex);
}
internal class UglyToad.PdfPig.Fonts.CompactFontFormat.Dictionaries.RegistryOrderingSupplement : object {
    [CompilerGeneratedAttribute]
private string <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ordering>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Supplement>k__BackingField;
    public string Registry { get; public set; }
    public string Ordering { get; public set; }
    public double Supplement { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(string value);
    [CompilerGeneratedAttribute]
public string get_Ordering();
    [CompilerGeneratedAttribute]
public void set_Ordering(string value);
    [CompilerGeneratedAttribute]
public double get_Supplement();
    [CompilerGeneratedAttribute]
public void set_Supplement(double value);
}
internal interface UglyToad.PdfPig.Fonts.CompactFontFormat.ICompactFontFormatFdSelect {
    public abstract virtual int GetFontDictionaryIndex(int glyphId);
}
public class UglyToad.PdfPig.Fonts.CorruptCompressedDataException : Exception {
    public CorruptCompressedDataException(string message);
    public CorruptCompressedDataException(string message, Exception inner);
}
public class UglyToad.PdfPig.Fonts.Encodings.BuiltInEncoding : Encoding {
    public string EncodingName { get; }
    public BuiltInEncoding(IReadOnlyDictionary`2<int, string> codeToName);
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.DifferenceBasedEncoding : Encoding {
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    public string EncodingName { get; }
    public DifferenceBasedEncoding(Encoding baseEncoding, IReadOnlyList`1<ValueTuple`2<int, string>> differences);
    [CompilerGeneratedAttribute]
public virtual string get_EncodingName();
}
public abstract class UglyToad.PdfPig.Fonts.Encodings.Encoding : object {
    protected internal static string NotDefined;
    protected Dictionary`2<int, string> CodeToName;
    protected Dictionary`2<string, int> NameToCode;
    public IReadOnlyDictionary`2<int, string> CodeToNameMap { get; }
    public IReadOnlyDictionary`2<string, int> NameToCodeMap { get; }
    public string EncodingName { get; }
    public IReadOnlyDictionary`2<int, string> get_CodeToNameMap();
    public IReadOnlyDictionary`2<string, int> get_NameToCodeMap();
    public abstract virtual string get_EncodingName();
    public bool ContainsName(string name);
    public bool ContainsCode(int code);
    public virtual string GetName(int code);
    public virtual int GetCode(string name);
    protected void Add(int code, string name);
    public static bool TryGetNamedEncoding(NameToken name, Encoding& encoding);
}
internal class UglyToad.PdfPig.Fonts.Encodings.MacExpertEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static MacExpertEncoding <Instance>k__BackingField;
    public static MacExpertEncoding Instance { get; }
    public string EncodingName { get; }
    private static MacExpertEncoding();
    [CompilerGeneratedAttribute]
public static MacExpertEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.MacOsRomanEncoding : MacRomanEncoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static MacOsRomanEncoding <Instance>k__BackingField;
    public static MacOsRomanEncoding Instance { get; }
    private static MacOsRomanEncoding();
    [CompilerGeneratedAttribute]
public static MacOsRomanEncoding get_Instance();
}
public class UglyToad.PdfPig.Fonts.Encodings.MacRomanEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static MacRomanEncoding <Instance>k__BackingField;
    public static MacRomanEncoding Instance { get; }
    public string EncodingName { get; }
    private static MacRomanEncoding();
    [CompilerGeneratedAttribute]
public static MacRomanEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.StandardEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static StandardEncoding <Instance>k__BackingField;
    public static StandardEncoding Instance { get; }
    public string EncodingName { get; }
    private static StandardEncoding();
    [CompilerGeneratedAttribute]
public static StandardEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.SymbolEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    private static ValueTuple`2[] UnicodeEquivilants;
    [CompilerGeneratedAttribute]
private static SymbolEncoding <Instance>k__BackingField;
    public static SymbolEncoding Instance { get; }
    public string EncodingName { get; }
    private static SymbolEncoding();
    [CompilerGeneratedAttribute]
public static SymbolEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.WinAnsiEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static WinAnsiEncoding <Instance>k__BackingField;
    public static WinAnsiEncoding Instance { get; }
    public string EncodingName { get; }
    private static WinAnsiEncoding();
    [CompilerGeneratedAttribute]
public static WinAnsiEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.Encodings.ZapfDingbatsEncoding : Encoding {
    private static ValueTuple`2[] EncodingTable;
    [CompilerGeneratedAttribute]
private static ZapfDingbatsEncoding <Instance>k__BackingField;
    public static ZapfDingbatsEncoding Instance { get; }
    public string EncodingName { get; }
    private static ZapfDingbatsEncoding();
    [CompilerGeneratedAttribute]
public static ZapfDingbatsEncoding get_Instance();
    public virtual string get_EncodingName();
}
public class UglyToad.PdfPig.Fonts.GlyphList : object {
    public static string NotDefined;
    private IReadOnlyDictionary`2<string, string> nameToUnicode;
    private IReadOnlyDictionary`2<string, string> unicodeToName;
    private Dictionary`2<string, string> oddNameToUnicodeCache;
    private static Lazy`1<GlyphList> LazyAdobeGlyphList;
    private static Lazy`1<GlyphList> LazyAdditionalGlyphList;
    private static Lazy`1<GlyphList> LazyZapfDingbatsGlyphList;
    public static GlyphList AdobeGlyphList { get; }
    public static GlyphList AdditionalGlyphList { get; }
    public static GlyphList ZapfDingbats { get; }
    internal GlyphList(IReadOnlyDictionary`2<string, string> namesToUnicode);
    private static GlyphList();
    public static GlyphList get_AdobeGlyphList();
    public static GlyphList get_AdditionalGlyphList();
    public static GlyphList get_ZapfDingbats();
    public string UnicodeCodePointToName(int unicodeValue);
    public string NameToUnicode(string name);
}
internal class UglyToad.PdfPig.Fonts.GlyphListFactory : object {
    private static Char[] Semicolon;
    private static GlyphListFactory();
    public static GlyphList Get(string listName);
    public static GlyphList Read(Stream stream);
    private static GlyphList ReadInternal(Stream stream, Nullable`1<int> defaultDictionaryCapacity);
}
public class UglyToad.PdfPig.Fonts.InvalidFontFormatException : Exception {
    public InvalidFontFormatException(string message);
    public InvalidFontFormatException(string message, Exception inner);
}
public static class UglyToad.PdfPig.Fonts.Standard14Fonts.Standard14 : object {
    private static HashSet`1<string> Standard14Names;
    private static Dictionary`2<string, string> Standard14Mapping;
    private static Dictionary`2<Standard14Font, string> BuilderTypesToNames;
    private static Dictionary`2<string, AdobeFontMetrics> Standard14Cache;
    private static Standard14();
    private static void AddAdobeFontMetrics(string fontName, Nullable`1<Standard14Font> type);
    private static void AddAdobeFontMetrics(string fontName, string afmName, Nullable`1<Standard14Font> type);
    public static AdobeFontMetrics GetAdobeFontMetrics(string baseName);
    public static AdobeFontMetrics GetAdobeFontMetrics(Standard14Font fontType);
    public static bool IsFontInStandard14(string baseName);
    public static HashSet`1<string> GetNames();
    public static string GetMappedFontName(string baseName);
}
public enum UglyToad.PdfPig.Fonts.Standard14Fonts.Standard14Font : Enum {
    public int value__;
    public static Standard14Font TimesRoman;
    public static Standard14Font TimesBold;
    public static Standard14Font TimesItalic;
    public static Standard14Font TimesBoldItalic;
    public static Standard14Font Helvetica;
    public static Standard14Font HelveticaBold;
    public static Standard14Font HelveticaOblique;
    public static Standard14Font HelveticaBoldOblique;
    public static Standard14Font Courier;
    public static Standard14Font CourierBold;
    public static Standard14Font CourierOblique;
    public static Standard14Font CourierBoldOblique;
    public static Standard14Font Symbol;
    public static Standard14Font ZapfDingbats;
}
internal class UglyToad.PdfPig.Fonts.SystemFonts.AndroidSystemFontLister : object {
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.SystemFonts.AndroidSystemFontLister/<GetAllFonts>d__0")]
public sealed virtual IEnumerable`1<SystemFontRecord> GetAllFonts();
}
public interface UglyToad.PdfPig.Fonts.SystemFonts.ISystemFontFinder {
    public abstract virtual TrueTypeFont GetTrueTypeFont(string name);
}
internal interface UglyToad.PdfPig.Fonts.SystemFonts.ISystemFontLister {
    public abstract virtual IEnumerable`1<SystemFontRecord> GetAllFonts();
}
internal class UglyToad.PdfPig.Fonts.SystemFonts.LinuxSystemFontLister : object {
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.SystemFonts.LinuxSystemFontLister/<GetAllFonts>d__0")]
public sealed virtual IEnumerable`1<SystemFontRecord> GetAllFonts();
}
internal class UglyToad.PdfPig.Fonts.SystemFonts.MacSystemFontLister : object {
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.SystemFonts.MacSystemFontLister/<GetAllFonts>d__0")]
public sealed virtual IEnumerable`1<SystemFontRecord> GetAllFonts();
}
public class UglyToad.PdfPig.Fonts.SystemFonts.SystemFontFinder : object {
    private static IReadOnlyDictionary`2<string, String[]> NameSubstitutes;
    private static Lazy`1<IReadOnlyList`1<SystemFontRecord>> AvailableFonts;
    private static object CacheLock;
    private static Dictionary`2<string, TrueTypeFont> Cache;
    public static ISystemFontFinder Instance;
    private ConcurrentDictionary`2<string, string> nameToFileNameMap;
    private object readFilesLock;
    private HashSet`1<string> readFiles;
    private static SystemFontFinder();
    public sealed virtual TrueTypeFont GetTrueTypeFont(string name);
    private IEnumerable`1<string> GetSubstituteNames(string name);
    private TrueTypeFont GetTrueTypeFontNamed(string name);
    private bool TryGetTrueTypeFont(string name, SystemFontRecord record, TrueTypeFont& font);
    private bool TryReadFile(string fileName, bool readNameFirst, string fontName, TrueTypeFont& font);
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Fonts.SystemFonts.SystemFontRecord : ValueType {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SystemFontType <Type>k__BackingField;
    public string Path { get; }
    public SystemFontType Type { get; }
    public SystemFontRecord(string path, SystemFontType type);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public SystemFontType get_Type();
    public static bool TryCreate(string path, SystemFontRecord& type);
}
internal enum UglyToad.PdfPig.Fonts.SystemFonts.SystemFontType : Enum {
    public int value__;
    public static SystemFontType Unknown;
    public static SystemFontType TrueType;
    public static SystemFontType OpenType;
    public static SystemFontType Type1;
    public static SystemFontType TrueTypeCollection;
    public static SystemFontType OpenTypeCollection;
}
internal class UglyToad.PdfPig.Fonts.SystemFonts.WindowsSystemFontLister : object {
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.SystemFonts.WindowsSystemFontLister/<GetAllFonts>d__0")]
public sealed virtual IEnumerable`1<SystemFontRecord> GetAllFonts();
}
[FlagsAttribute]
public enum UglyToad.PdfPig.Fonts.TrueType.Glyphs.CompositeGlyphFlags : Enum {
    public ushort value__;
    public static CompositeGlyphFlags Args1And2AreWords;
    public static CompositeGlyphFlags ArgsAreXAndYValues;
    public static CompositeGlyphFlags RoundXAndYToGrid;
    public static CompositeGlyphFlags WeHaveAScale;
    public static CompositeGlyphFlags Reserved;
    public static CompositeGlyphFlags MoreComponents;
    public static CompositeGlyphFlags WeHaveAnXAndYScale;
    public static CompositeGlyphFlags WeHaveATwoByTwo;
    public static CompositeGlyphFlags WeHaveInstructions;
    public static CompositeGlyphFlags UseMyMetrics;
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Fonts.TrueType.Glyphs.CompositeTransformMatrix3By2 : ValueType {
    private double r0c0;
    private double r0c1;
    private double r1c0;
    private double r1c1;
    private double r2c0;
    private double r2c1;
    [CompilerGeneratedAttribute]
private static CompositeTransformMatrix3By2 <Identity>k__BackingField;
    public static CompositeTransformMatrix3By2 Identity { get; }
    public CompositeTransformMatrix3By2(double r0C0, double r0C1, double r1C0, double r1C1, double r2C0, double r2C1);
    private static CompositeTransformMatrix3By2();
    [CompilerGeneratedAttribute]
public static CompositeTransformMatrix3By2 get_Identity();
    public static CompositeTransformMatrix3By2 CreateTranslation(double x, double y);
    public CompositeTransformMatrix3By2 WithTranslation(double x, double y);
    public PdfPoint ScaleAndRotate(PdfPoint source);
    public PdfPoint Translate(PdfPoint source);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Glyphs.Glyph : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <EndPointsOfContours>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphPoint[] <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSimple>k__BackingField;
    public PdfRectangle Bounds { get; }
    public Byte[] Instructions { get; }
    public UInt16[] EndPointsOfContours { get; }
    public GlyphPoint[] Points { get; }
    public bool IsSimple { get; }
    public bool IsEmpty { get; }
    public Glyph(bool isSimple, Byte[] instructions, UInt16[] endPointsOfContours, GlyphPoint[] points, PdfRectangle bounds);
    [CompilerGeneratedAttribute]
public sealed virtual PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Instructions();
    [CompilerGeneratedAttribute]
public sealed virtual UInt16[] get_EndPointsOfContours();
    [CompilerGeneratedAttribute]
public sealed virtual GlyphPoint[] get_Points();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSimple();
    public sealed virtual bool get_IsEmpty();
    public static IGlyphDescription Empty(PdfRectangle bounds);
    public sealed virtual IGlyphDescription DeepClone();
    public sealed virtual IGlyphDescription Merge(IGlyphDescription glyph);
    private GlyphPoint[] MergePoints(IGlyphDescription glyph);
    private UInt16[] MergeContourEndPoints(IGlyphDescription glyph);
    public sealed virtual IGlyphDescription Transform(CompositeTransformMatrix3By2 matrix);
    public sealed virtual bool TryGetGlyphPath(IReadOnlyList`1& subpaths);
    private static IReadOnlyList`1<PdfSubpath> CalculatePath(GlyphPoint[] points);
    private static short midValue(short a, short b);
    private static GlyphPoint midValue(GlyphPoint point1, GlyphPoint point2);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class UglyToad.PdfPig.Fonts.TrueType.Glyphs.GlyphPoint : ValueType {
    [CompilerGeneratedAttribute]
private short <X>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnCurve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfContour>k__BackingField;
    public short X { get; }
    public short Y { get; }
    public bool IsOnCurve { get; }
    public bool IsEndOfContour { get; }
    public GlyphPoint(short x, short y, bool isOnCurve, bool isEndOfContour);
    [CompilerGeneratedAttribute]
public short get_X();
    [CompilerGeneratedAttribute]
public short get_Y();
    [CompilerGeneratedAttribute]
public bool get_IsOnCurve();
    [CompilerGeneratedAttribute]
public bool get_IsEndOfContour();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.TrueType.Glyphs.HorizontalMetric : ValueType {
    [CompilerGeneratedAttribute]
private ushort <AdvanceWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LeftSideBearing>k__BackingField;
    public ushort AdvanceWidth { get; }
    public short LeftSideBearing { get; }
    public HorizontalMetric(ushort advanceWidth, short leftSideBearing);
    [CompilerGeneratedAttribute]
public ushort get_AdvanceWidth();
    [CompilerGeneratedAttribute]
public short get_LeftSideBearing();
    public virtual string ToString();
}
internal interface UglyToad.PdfPig.Fonts.TrueType.Glyphs.IGlyphDescription {
    public bool IsSimple { get; }
    public PdfRectangle Bounds { get; }
    public Byte[] Instructions { get; }
    public UInt16[] EndPointsOfContours { get; }
    public GlyphPoint[] Points { get; }
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsSimple();
    public abstract virtual PdfRectangle get_Bounds();
    public abstract virtual Byte[] get_Instructions();
    public abstract virtual UInt16[] get_EndPointsOfContours();
    public abstract virtual GlyphPoint[] get_Points();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool TryGetGlyphPath(IReadOnlyList`1& subpaths);
    public abstract virtual IGlyphDescription DeepClone();
}
internal interface UglyToad.PdfPig.Fonts.TrueType.Glyphs.IMergeableGlyph {
    public abstract virtual IGlyphDescription Merge(IGlyphDescription glyph);
}
internal interface UglyToad.PdfPig.Fonts.TrueType.Glyphs.ITransformableGlyph {
    public abstract virtual IGlyphDescription Transform(CompositeTransformMatrix3By2 matrix);
}
[FlagsAttribute]
public enum UglyToad.PdfPig.Fonts.TrueType.Glyphs.SimpleGlyphFlags : Enum {
    public byte value__;
    public static SimpleGlyphFlags OnCurve;
    public static SimpleGlyphFlags XSingleByte;
    public static SimpleGlyphFlags YSingleByte;
    public static SimpleGlyphFlags Repeat;
    public static SimpleGlyphFlags ThisXIsTheSame;
    public static SimpleGlyphFlags ThisYIsTheSame;
}
public enum UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypeMacintoshEncodingIdentifier : Enum {
    public ushort value__;
    public static TrueTypeMacintoshEncodingIdentifier Roman;
    public static TrueTypeMacintoshEncodingIdentifier Japanese;
    public static TrueTypeMacintoshEncodingIdentifier ChineseTraditional;
    public static TrueTypeMacintoshEncodingIdentifier Korean;
    public static TrueTypeMacintoshEncodingIdentifier Arabic;
    public static TrueTypeMacintoshEncodingIdentifier Hebrew;
    public static TrueTypeMacintoshEncodingIdentifier Greek;
    public static TrueTypeMacintoshEncodingIdentifier Russian;
    public static TrueTypeMacintoshEncodingIdentifier RSymbol;
    public static TrueTypeMacintoshEncodingIdentifier Devanagari;
    public static TrueTypeMacintoshEncodingIdentifier Gurmukhi;
    public static TrueTypeMacintoshEncodingIdentifier Gujarati;
    public static TrueTypeMacintoshEncodingIdentifier Oriya;
    public static TrueTypeMacintoshEncodingIdentifier Bengali;
    public static TrueTypeMacintoshEncodingIdentifier Tamil;
    public static TrueTypeMacintoshEncodingIdentifier Telugu;
    public static TrueTypeMacintoshEncodingIdentifier Kannada;
    public static TrueTypeMacintoshEncodingIdentifier Malayalam;
    public static TrueTypeMacintoshEncodingIdentifier Sinhalese;
    public static TrueTypeMacintoshEncodingIdentifier Burmese;
    public static TrueTypeMacintoshEncodingIdentifier Khmer;
    public static TrueTypeMacintoshEncodingIdentifier Thai;
    public static TrueTypeMacintoshEncodingIdentifier Laotian;
    public static TrueTypeMacintoshEncodingIdentifier Georgian;
    public static TrueTypeMacintoshEncodingIdentifier Armenian;
    public static TrueTypeMacintoshEncodingIdentifier ChineseSimplified;
    public static TrueTypeMacintoshEncodingIdentifier Tibetan;
    public static TrueTypeMacintoshEncodingIdentifier Mongolian;
    public static TrueTypeMacintoshEncodingIdentifier Geez;
    public static TrueTypeMacintoshEncodingIdentifier Slavic;
    public static TrueTypeMacintoshEncodingIdentifier Vietnamese;
    public static TrueTypeMacintoshEncodingIdentifier Sindhi;
    public static TrueTypeMacintoshEncodingIdentifier Uninterpreted;
}
public enum UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypeMacintoshLanguageIdentifier : Enum {
    public ushort value__;
    public static TrueTypeMacintoshLanguageIdentifier English;
    public static TrueTypeMacintoshLanguageIdentifier French;
    public static TrueTypeMacintoshLanguageIdentifier German;
    public static TrueTypeMacintoshLanguageIdentifier Italian;
    public static TrueTypeMacintoshLanguageIdentifier Dutch;
    public static TrueTypeMacintoshLanguageIdentifier Swedish;
    public static TrueTypeMacintoshLanguageIdentifier Spanish;
    public static TrueTypeMacintoshLanguageIdentifier Danish;
    public static TrueTypeMacintoshLanguageIdentifier Portuguese;
    public static TrueTypeMacintoshLanguageIdentifier Norwegian;
    public static TrueTypeMacintoshLanguageIdentifier Hebrew;
    public static TrueTypeMacintoshLanguageIdentifier Japanese;
    public static TrueTypeMacintoshLanguageIdentifier Arabic;
    public static TrueTypeMacintoshLanguageIdentifier Finnish;
    public static TrueTypeMacintoshLanguageIdentifier Greek;
    public static TrueTypeMacintoshLanguageIdentifier Icelandic;
    public static TrueTypeMacintoshLanguageIdentifier Maltese;
    public static TrueTypeMacintoshLanguageIdentifier Turkish;
    public static TrueTypeMacintoshLanguageIdentifier Croatian;
    public static TrueTypeMacintoshLanguageIdentifier ChineseTraditional;
    public static TrueTypeMacintoshLanguageIdentifier Urdu;
    public static TrueTypeMacintoshLanguageIdentifier Hindi;
    public static TrueTypeMacintoshLanguageIdentifier Thai;
    public static TrueTypeMacintoshLanguageIdentifier Korean;
    public static TrueTypeMacintoshLanguageIdentifier Lithuanian;
    public static TrueTypeMacintoshLanguageIdentifier Polish;
    public static TrueTypeMacintoshLanguageIdentifier Hungarian;
    public static TrueTypeMacintoshLanguageIdentifier Estonian;
    public static TrueTypeMacintoshLanguageIdentifier Latvian;
    public static TrueTypeMacintoshLanguageIdentifier Sami;
    public static TrueTypeMacintoshLanguageIdentifier Faroese;
    public static TrueTypeMacintoshLanguageIdentifier FarsiPersian;
    public static TrueTypeMacintoshLanguageIdentifier Russian;
    public static TrueTypeMacintoshLanguageIdentifier ChineseSimplified;
    public static TrueTypeMacintoshLanguageIdentifier Flemish;
    public static TrueTypeMacintoshLanguageIdentifier IrishGaelic;
    public static TrueTypeMacintoshLanguageIdentifier Albanian;
    public static TrueTypeMacintoshLanguageIdentifier Romanian;
    public static TrueTypeMacintoshLanguageIdentifier Czech;
    public static TrueTypeMacintoshLanguageIdentifier Slovak;
    public static TrueTypeMacintoshLanguageIdentifier Slovenian;
    public static TrueTypeMacintoshLanguageIdentifier Yiddish;
    public static TrueTypeMacintoshLanguageIdentifier Serbian;
    public static TrueTypeMacintoshLanguageIdentifier Macedonian;
    public static TrueTypeMacintoshLanguageIdentifier Bulgarian;
    public static TrueTypeMacintoshLanguageIdentifier Ukrainian;
    public static TrueTypeMacintoshLanguageIdentifier Byelorussian;
    public static TrueTypeMacintoshLanguageIdentifier Uzbek;
    public static TrueTypeMacintoshLanguageIdentifier Kazakh;
    public static TrueTypeMacintoshLanguageIdentifier AzerbaijaniCyrillic;
    public static TrueTypeMacintoshLanguageIdentifier AzerbaijaniArabic;
    public static TrueTypeMacintoshLanguageIdentifier Armenian;
    public static TrueTypeMacintoshLanguageIdentifier Georgian;
    public static TrueTypeMacintoshLanguageIdentifier Moldavian;
    public static TrueTypeMacintoshLanguageIdentifier Kirghiz;
    public static TrueTypeMacintoshLanguageIdentifier Tajiki;
    public static TrueTypeMacintoshLanguageIdentifier Turkmen;
    public static TrueTypeMacintoshLanguageIdentifier Mongolian;
    public static TrueTypeMacintoshLanguageIdentifier MongolianCyrillic;
    public static TrueTypeMacintoshLanguageIdentifier Pashto;
    public static TrueTypeMacintoshLanguageIdentifier Kurdish;
    public static TrueTypeMacintoshLanguageIdentifier Kashmiri;
    public static TrueTypeMacintoshLanguageIdentifier Sindhi;
    public static TrueTypeMacintoshLanguageIdentifier Tibetan;
    public static TrueTypeMacintoshLanguageIdentifier Nepali;
    public static TrueTypeMacintoshLanguageIdentifier Sanskrit;
    public static TrueTypeMacintoshLanguageIdentifier Marathi;
    public static TrueTypeMacintoshLanguageIdentifier Bengali;
    public static TrueTypeMacintoshLanguageIdentifier Assamese;
    public static TrueTypeMacintoshLanguageIdentifier Gujarati;
    public static TrueTypeMacintoshLanguageIdentifier Punjabi;
    public static TrueTypeMacintoshLanguageIdentifier Oriya;
    public static TrueTypeMacintoshLanguageIdentifier Malayalam;
    public static TrueTypeMacintoshLanguageIdentifier Kannada;
    public static TrueTypeMacintoshLanguageIdentifier Tamil;
    public static TrueTypeMacintoshLanguageIdentifier Telugu;
    public static TrueTypeMacintoshLanguageIdentifier Sinhalese;
    public static TrueTypeMacintoshLanguageIdentifier Burmese;
    public static TrueTypeMacintoshLanguageIdentifier Khmer;
    public static TrueTypeMacintoshLanguageIdentifier Lao;
    public static TrueTypeMacintoshLanguageIdentifier Vietnamese;
    public static TrueTypeMacintoshLanguageIdentifier Indonesian;
    public static TrueTypeMacintoshLanguageIdentifier Tagalog;
    public static TrueTypeMacintoshLanguageIdentifier MalayRoman;
    public static TrueTypeMacintoshLanguageIdentifier MalayArabic;
    public static TrueTypeMacintoshLanguageIdentifier Amharic;
    public static TrueTypeMacintoshLanguageIdentifier Tigrinya;
    public static TrueTypeMacintoshLanguageIdentifier Galla;
    public static TrueTypeMacintoshLanguageIdentifier Somali;
    public static TrueTypeMacintoshLanguageIdentifier Swahili;
    public static TrueTypeMacintoshLanguageIdentifier KinyarwandaRuanda;
    public static TrueTypeMacintoshLanguageIdentifier Rundi;
    public static TrueTypeMacintoshLanguageIdentifier NyanjaChewa;
    public static TrueTypeMacintoshLanguageIdentifier Malagasy;
    public static TrueTypeMacintoshLanguageIdentifier Esperanto;
    public static TrueTypeMacintoshLanguageIdentifier Welsh;
    public static TrueTypeMacintoshLanguageIdentifier Basque;
    public static TrueTypeMacintoshLanguageIdentifier Catalan;
    public static TrueTypeMacintoshLanguageIdentifier Latin;
    public static TrueTypeMacintoshLanguageIdentifier Quechua;
    public static TrueTypeMacintoshLanguageIdentifier Guarani;
    public static TrueTypeMacintoshLanguageIdentifier Aymara;
    public static TrueTypeMacintoshLanguageIdentifier Tatar;
    public static TrueTypeMacintoshLanguageIdentifier Uighur;
    public static TrueTypeMacintoshLanguageIdentifier Dzongkha;
    public static TrueTypeMacintoshLanguageIdentifier JavaneseRoman;
    public static TrueTypeMacintoshLanguageIdentifier SundaneseRoman;
    public static TrueTypeMacintoshLanguageIdentifier Galician;
    public static TrueTypeMacintoshLanguageIdentifier Afrikaans;
    public static TrueTypeMacintoshLanguageIdentifier Breton;
    public static TrueTypeMacintoshLanguageIdentifier Inuktitut;
    public static TrueTypeMacintoshLanguageIdentifier ScottishGaelic;
    public static TrueTypeMacintoshLanguageIdentifier ManxGaelic;
    public static TrueTypeMacintoshLanguageIdentifier IrishGaelicWithDotAbove;
    public static TrueTypeMacintoshLanguageIdentifier Tongan;
    public static TrueTypeMacintoshLanguageIdentifier GreekPolytonic;
    public static TrueTypeMacintoshLanguageIdentifier Greenlandic;
    public static TrueTypeMacintoshLanguageIdentifier AzerbaijaniRoman;
}
public class UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypeNameRecord : object {
    [CompilerGeneratedAttribute]
private TrueTypePlatformIdentifier <PlatformId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PlatformEncodingId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public TrueTypePlatformIdentifier PlatformId { get; }
    public ushort PlatformEncodingId { get; }
    public ushort LanguageId { get; }
    public ushort NameId { get; }
    public string Value { get; }
    public TrueTypeNameRecord(TrueTypePlatformIdentifier platformId, ushort platformEncodingId, ushort languageId, ushort nameId, string value);
    [CompilerGeneratedAttribute]
public TrueTypePlatformIdentifier get_PlatformId();
    [CompilerGeneratedAttribute]
public ushort get_PlatformEncodingId();
    [CompilerGeneratedAttribute]
public ushort get_LanguageId();
    [CompilerGeneratedAttribute]
public ushort get_NameId();
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
public enum UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypePlatformIdentifier : Enum {
    public int value__;
    public static TrueTypePlatformIdentifier Unicode;
    public static TrueTypePlatformIdentifier Macintosh;
    public static TrueTypePlatformIdentifier Iso;
    public static TrueTypePlatformIdentifier Windows;
}
public enum UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypeUnicodeEncodingIndentifier : Enum {
    public int value__;
    public static TrueTypeUnicodeEncodingIndentifier Default;
    public static TrueTypeUnicodeEncodingIndentifier Version1Point1;
    public static TrueTypeUnicodeEncodingIndentifier Iso10646;
    public static TrueTypeUnicodeEncodingIndentifier Unicode2BmpOnly;
    public static TrueTypeUnicodeEncodingIndentifier Unicode2NonBmpAllowed;
    public static TrueTypeUnicodeEncodingIndentifier UnicodeVariationSequences;
    public static TrueTypeUnicodeEncodingIndentifier FullUnicode;
}
public enum UglyToad.PdfPig.Fonts.TrueType.Names.TrueTypeWindowsEncodingIdentifier : Enum {
    public int value__;
    public static TrueTypeWindowsEncodingIdentifier Symbol;
    public static TrueTypeWindowsEncodingIdentifier UnicodeBmp;
    public static TrueTypeWindowsEncodingIdentifier ShiftJis;
    public static TrueTypeWindowsEncodingIdentifier Prc;
    public static TrueTypeWindowsEncodingIdentifier Big5;
    public static TrueTypeWindowsEncodingIdentifier Wansung;
    public static TrueTypeWindowsEncodingIdentifier Johab;
    public static TrueTypeWindowsEncodingIdentifier Reserved7;
    public static TrueTypeWindowsEncodingIdentifier Reserved8;
    public static TrueTypeWindowsEncodingIdentifier Reserved9;
    public static TrueTypeWindowsEncodingIdentifier FullUnicode;
}
internal class UglyToad.PdfPig.Fonts.TrueType.Parser.CMapTableParser : object {
    public sealed virtual CMapTable Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Parser.HorizontalHeaderTableParser : object {
    public sealed virtual HorizontalHeaderTable Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Parser.HorizontalMetricsTableParser : object {
    public sealed virtual HorizontalMetricsTable Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
}
internal interface UglyToad.PdfPig.Fonts.TrueType.Parser.ITrueTypeTableParser`1 {
    public abstract virtual T Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Parser.NameTableParser : object {
    public sealed virtual NameTable Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
    private static TrueTypeNameRecord GetTrueTypeNameRecord(NameRecordBuilder nameRecord, TrueTypeDataBytes data, UInt32 offset);
    private static string GetName(int nameId, TrueTypeNameRecord[] names);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Parser.Os2TableParser : object {
    public sealed virtual Os2Table Parse(TrueTypeHeaderTable header, TrueTypeDataBytes data, Builder register);
}
internal static class UglyToad.PdfPig.Fonts.TrueType.Parser.TableParser : object {
    private static CMapTableParser CMapTableParser;
    private static HorizontalMetricsTableParser HorizontalMetricsTableParser;
    private static HorizontalHeaderTableParser HorizontalHeaderTableParser;
    private static NameTableParser NameTableParser;
    private static Os2TableParser Os2TableParser;
    private static TableParser();
    public static T Parse(TrueTypeHeaderTable table, TrueTypeDataBytes data, Builder register);
}
public class UglyToad.PdfPig.Fonts.TrueType.Parser.TableRegister : object {
    [CompilerGeneratedAttribute]
private HeaderTable <HeaderTable>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphDataTable <GlyphTable>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalHeaderTable <HorizontalHeaderTable>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalMetricsTable <HorizontalMetricsTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexToLocationTable <IndexToLocationTable>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicMaximumProfileTable <MaximumProfileTable>k__BackingField;
    [CompilerGeneratedAttribute]
private NameTable <NameTable>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptTable <PostScriptTable>k__BackingField;
    [CompilerGeneratedAttribute]
private CMapTable <CMapTable>k__BackingField;
    [CompilerGeneratedAttribute]
private KerningTable <KerningTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Os2Table <Os2Table>k__BackingField;
    public HeaderTable HeaderTable { get; }
    internal GlyphDataTable GlyphTable { get; }
    public HorizontalHeaderTable HorizontalHeaderTable { get; }
    public HorizontalMetricsTable HorizontalMetricsTable { get; }
    public IndexToLocationTable IndexToLocationTable { get; }
    internal BasicMaximumProfileTable MaximumProfileTable { get; }
    public NameTable NameTable { get; }
    public PostScriptTable PostScriptTable { get; }
    public CMapTable CMapTable { get; }
    internal KerningTable KerningTable { get; }
    public Os2Table Os2Table { get; }
    internal TableRegister(Builder builder);
    [CompilerGeneratedAttribute]
public HeaderTable get_HeaderTable();
    [CompilerGeneratedAttribute]
internal GlyphDataTable get_GlyphTable();
    [CompilerGeneratedAttribute]
public HorizontalHeaderTable get_HorizontalHeaderTable();
    [CompilerGeneratedAttribute]
public HorizontalMetricsTable get_HorizontalMetricsTable();
    [CompilerGeneratedAttribute]
public IndexToLocationTable get_IndexToLocationTable();
    [CompilerGeneratedAttribute]
internal BasicMaximumProfileTable get_MaximumProfileTable();
    [CompilerGeneratedAttribute]
public NameTable get_NameTable();
    [CompilerGeneratedAttribute]
public PostScriptTable get_PostScriptTable();
    [CompilerGeneratedAttribute]
public CMapTable get_CMapTable();
    [CompilerGeneratedAttribute]
internal KerningTable get_KerningTable();
    [CompilerGeneratedAttribute]
public Os2Table get_Os2Table();
}
public static class UglyToad.PdfPig.Fonts.TrueType.Parser.TrueTypeFontParser : object {
    public static TrueTypeFont Parse(TrueTypeDataBytes data);
    private static Nullable`1<TrueTypeHeaderTable> ReadTable(TrueTypeDataBytes data);
    private static TrueTypeFont ParseTables(float version, IReadOnlyDictionary`2<string, TrueTypeHeaderTable> tables, TrueTypeDataBytes data);
    internal static NameTable GetNameTable(TrueTypeDataBytes data);
    private static void OptionallyParseTables(IReadOnlyDictionary`2<string, TrueTypeHeaderTable> tables, TrueTypeDataBytes data, Builder tableRegister);
}
internal static class UglyToad.PdfPig.Fonts.TrueType.Subsetting.TrueTypeGlyphTableSubsetter : object {
    public static TrueTypeSubsetGlyphTable SubsetGlyphTable(TrueTypeFont font, Byte[] fontBytes, OldToNewGlyphIndex[] mapping);
    private static GlyphRecord[] GetGlyphRecordsInFont(TrueTypeFont font, TrueTypeDataBytes data);
    private static Nullable`1<int> GetAlreadyCopiedDependencyIndex(CompositeGlyphIndexReference dependency, IReadOnlyList`1<int> copiedGlyphOriginalIndices);
    private static void ReadSimpleGlyph(TrueTypeDataBytes data, int numberOfContours);
    private static Int16[] ReadCoordinates(SimpleGlyphFlags[] flags, TrueTypeDataBytes data, SimpleGlyphFlags isSingleByte, SimpleGlyphFlags isTheSameAsPrevious);
    private static IReadOnlyList`1<CompositeGlyphIndexReference> ReadCompositeGlyph(TrueTypeDataBytes data);
    [CompilerGeneratedAttribute]
internal static bool <ReadSimpleGlyph>g__HasFlag|3_0(SimpleGlyphFlags flags, SimpleGlyphFlags value);
    [CompilerGeneratedAttribute]
internal static bool <ReadCoordinates>g__HasFlag|4_0(SimpleGlyphFlags set, SimpleGlyphFlags f);
    [CompilerGeneratedAttribute]
internal static bool <ReadCompositeGlyph>g__HasFlag|5_0(CompositeGlyphFlags actual, CompositeGlyphFlags value);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Subsetting.TrueTypeOffsetSubtable : object {
    private static Byte[] VersionHeader;
    private byte numberOfTables;
    public TrueTypeOffsetSubtable(byte numberOfTables);
    private static TrueTypeOffsetSubtable();
    public sealed virtual void Write(Stream stream);
    private static ushort GetHighestPowerOf2(int numberOfTables);
}
public class UglyToad.PdfPig.Fonts.TrueType.Subsetting.TrueTypeSubsetEncoding : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<char> <Characters>k__BackingField;
    public IReadOnlyList`1<char> Characters { get; }
    public TrueTypeSubsetEncoding(IReadOnlyList`1<char> characters);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<char> get_Characters();
}
internal class UglyToad.PdfPig.Fonts.TrueType.Subsetting.TrueTypeSubsetGlyphTable : object {
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32[] <GlyphOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalMetric[] <HorizontalMetrics>k__BackingField;
    public Byte[] Bytes { get; }
    public UInt32[] GlyphOffsets { get; }
    public HorizontalMetric[] HorizontalMetrics { get; }
    public ushort GlyphCount { get; }
    public TrueTypeSubsetGlyphTable(Byte[] bytes, UInt32[] glyphOffsets, HorizontalMetric[] horizontalMetrics);
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
public UInt32[] get_GlyphOffsets();
    [CompilerGeneratedAttribute]
public HorizontalMetric[] get_HorizontalMetrics();
    public ushort get_GlyphCount();
    public Int64[] OffsetsAsLongs();
    public virtual string ToString();
}
public static class UglyToad.PdfPig.Fonts.TrueType.Subsetting.TrueTypeSubsetter : object {
    private static ushort IndexToLocLong;
    private static IReadOnlyList`1<string> RequiredTags;
    private static IReadOnlyList`1<string> OptionalTags;
    private static Byte[] PaddingBytes;
    private static TrueTypeSubsetter();
    public static Byte[] Subset(Byte[] fontBytes, TrueTypeSubsetEncoding newEncoding);
    private static OldToNewGlyphIndex[] GetIndexMapping(TrueTypeFont font, TrueTypeSubsetEncoding newEncoding);
    private static CMapTable GetCMapTable(TrueTypeFont font, DirectoryEntry entry, OldToNewGlyphIndex[] encoding);
    private static HorizontalMetricsTable GetHorizontalMetricsTable(DirectoryEntry entry, TrueTypeSubsetGlyphTable glyphTable);
    private static Byte[] GetRawInputTableBytes(Byte[] font, DirectoryEntry entry);
    private static void WriteUShort(Byte[] array, int offset, ushort value);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.BasicMaximumProfileTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfGlyphs>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public bool IsCompressedFontFormat { get; }
    public double Version { get; }
    public int NumberOfGlyphs { get; }
    public BasicMaximumProfileTable(TrueTypeHeaderTable directoryTable, float version, int numberOfGlyphs);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    public bool get_IsCompressedFontFormat();
    [CompilerGeneratedAttribute]
public double get_Version();
    [CompilerGeneratedAttribute]
public int get_NumberOfGlyphs();
    public static BasicMaximumProfileTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable table);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.ByteEncodingCMapTable : object {
    private static ushort Format;
    private static ushort DefaultLanguageId;
    private static int SizeOfShort;
    private static int GlyphMappingLength;
    private Byte[] glyphMapping;
    [CompilerGeneratedAttribute]
private TrueTypeCMapPlatform <PlatformId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LanguageId>k__BackingField;
    public TrueTypeCMapPlatform PlatformId { get; }
    public ushort EncodingId { get; }
    public ushort LanguageId { get; }
    public ByteEncodingCMapTable(TrueTypeCMapPlatform platformId, ushort encodingId, ushort languageId, Byte[] glyphMapping);
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeCMapPlatform get_PlatformId();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_EncodingId();
    [CompilerGeneratedAttribute]
public ushort get_LanguageId();
    public static ByteEncodingCMapTable Load(TrueTypeDataBytes data, TrueTypeCMapPlatform platformId, ushort encodingId);
    public sealed virtual int CharacterCodeToGlyphIndex(int characterCode);
    public sealed virtual void Write(Stream stream);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.Format4CMapTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeCMapPlatform <PlatformId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Segment> <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ushort> <GlyphIds>k__BackingField;
    public TrueTypeCMapPlatform PlatformId { get; }
    public ushort EncodingId { get; }
    public ushort Language { get; }
    public IReadOnlyList`1<Segment> Segments { get; }
    public IReadOnlyList`1<ushort> GlyphIds { get; }
    public Format4CMapTable(TrueTypeCMapPlatform platformId, ushort encodingId, ushort language, IReadOnlyList`1<Segment> segments, IReadOnlyList`1<ushort> glyphIds);
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeCMapPlatform get_PlatformId();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_EncodingId();
    [CompilerGeneratedAttribute]
public ushort get_Language();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Segment> get_Segments();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ushort> get_GlyphIds();
    public sealed virtual int CharacterCodeToGlyphIndex(int characterCode);
    public static Format4CMapTable Load(TrueTypeDataBytes data, TrueTypeCMapPlatform platformId, ushort encodingId);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.HighByteMappingCMapTable : object {
    private IReadOnlyDictionary`2<int, int> characterCodesToGlyphIndices;
    [CompilerGeneratedAttribute]
private TrueTypeCMapPlatform <PlatformId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingId>k__BackingField;
    public TrueTypeCMapPlatform PlatformId { get; }
    public ushort EncodingId { get; }
    private HighByteMappingCMapTable(TrueTypeCMapPlatform platformId, ushort encodingId, IReadOnlyDictionary`2<int, int> characterCodesToGlyphIndices);
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeCMapPlatform get_PlatformId();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_EncodingId();
    public sealed virtual int CharacterCodeToGlyphIndex(int characterCode);
    public static HighByteMappingCMapTable Load(TrueTypeDataBytes data, int numberOfGlyphs, TrueTypeCMapPlatform platformId, ushort encodingId);
}
public interface UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.ICMapSubTable {
    public TrueTypeCMapPlatform PlatformId { get; }
    public ushort EncodingId { get; }
    public abstract virtual TrueTypeCMapPlatform get_PlatformId();
    public abstract virtual ushort get_EncodingId();
    public abstract virtual int CharacterCodeToGlyphIndex(int characterCode);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.TrimmedTableMappingCMapTable : object {
    private static ushort Format;
    private static ushort DefaultLanguageId;
    private int entryCount;
    private UInt16[] glyphIndices;
    [CompilerGeneratedAttribute]
private TrueTypeCMapPlatform <PlatformId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstCharacterCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastCharacterCode>k__BackingField;
    public TrueTypeCMapPlatform PlatformId { get; }
    public ushort EncodingId { get; }
    public int FirstCharacterCode { get; }
    public int LastCharacterCode { get; }
    public TrimmedTableMappingCMapTable(TrueTypeCMapPlatform platformId, ushort encodingId, int firstCharacterCode, int entryCount, UInt16[] glyphIndices);
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeCMapPlatform get_PlatformId();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_EncodingId();
    [CompilerGeneratedAttribute]
public int get_FirstCharacterCode();
    [CompilerGeneratedAttribute]
public int get_LastCharacterCode();
    public sealed virtual int CharacterCodeToGlyphIndex(int characterCode);
    public static TrimmedTableMappingCMapTable Load(TrueTypeDataBytes data, TrueTypeCMapPlatform platformId, ushort encodingId);
    public sealed virtual void Write(Stream stream);
}
public enum UglyToad.PdfPig.Fonts.TrueType.Tables.CMapSubTables.TrueTypeCMapPlatform : Enum {
    public ushort value__;
    public static TrueTypeCMapPlatform Unicode;
    public static TrueTypeCMapPlatform Macintosh;
    public static TrueTypeCMapPlatform Reserved2;
    public static TrueTypeCMapPlatform Windows;
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.CMapTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ICMapSubTable> <SubTables>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public ushort Version { get; }
    public IReadOnlyList`1<ICMapSubTable> SubTables { get; }
    public CMapTable(ushort version, TrueTypeHeaderTable directoryTable, IReadOnlyList`1<ICMapSubTable> subTables);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ICMapSubTable> get_SubTables();
    public bool TryGetGlyphIndex(int characterCode, Int32& glyphIndex);
    public sealed virtual void Write(Stream stream);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.GlyphDataTable : object {
    private IReadOnlyList`1<UInt32> glyphOffsets;
    private PdfRectangle maxGlyphBounds;
    private TrueTypeDataBytes tableBytes;
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    private Lazy`1<IReadOnlyList`1<IGlyphDescription>> glyphs;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public IReadOnlyList`1<IGlyphDescription> Glyphs { get; }
    public GlyphDataTable(TrueTypeHeaderTable directoryTable, IReadOnlyList`1<UInt32> glyphOffsets, PdfRectangle maxGlyphBounds, TrueTypeDataBytes tableBytes);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    public IReadOnlyList`1<IGlyphDescription> get_Glyphs();
    public bool TryGetGlyphBounds(int glyphIndex, PdfRectangle& bounds);
    public bool TryGetGlyphPath(int glyphIndex, IReadOnlyList`1& subpaths);
    public static GlyphDataTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable table, Builder tableRegister);
    private IReadOnlyList`1<IGlyphDescription> ReadGlyphs();
    private static Glyph ReadSimpleGlyph(TrueTypeDataBytes data, short contourCount, PdfRectangle bounds);
    private static IGlyphDescription ReadCompositeGlyph(TrueTypeDataBytes data, TemporaryCompositeLocation compositeLocation, Dictionary`2<int, TemporaryCompositeLocation> compositeLocations, IGlyphDescription[] glyphs, IGlyphDescription emptyGlyph);
    private static SimpleGlyphFlags[] ReadFlags(TrueTypeDataBytes data, int pointCount);
    private static Int16[] ReadCoordinates(TrueTypeDataBytes data, int pointCount, SimpleGlyphFlags[] flags, SimpleGlyphFlags isByte, SimpleGlyphFlags signOrSame);
    private static double ReadTwoFourteenFormat(TrueTypeDataBytes data);
    [CompilerGeneratedAttribute]
internal static bool <ReadCompositeGlyph>g__HasFlag|17_0(CompositeGlyphFlags value, CompositeGlyphFlags target);
    [CompilerGeneratedAttribute]
internal static bool <ReadCoordinates>g__HasFlag|19_0(SimpleGlyphFlags value, SimpleGlyphFlags target);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.HeaderTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CheckSumAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MagicNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <UnitsPerEm>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Modified>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderMacStyle <MacStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LowestRecommendedPpem>k__BackingField;
    [CompilerGeneratedAttribute]
private FontDirection <FontDirectionHint>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryFormat <IndexToLocFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private short <GlyphDataFormat>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public float Version { get; }
    public float Revision { get; }
    public UInt32 CheckSumAdjustment { get; }
    public UInt32 MagicNumber { get; }
    public ushort Flags { get; }
    public ushort UnitsPerEm { get; }
    public DateTime Created { get; }
    public DateTime Modified { get; }
    public PdfRectangle Bounds { get; }
    public HeaderMacStyle MacStyle { get; }
    public ushort LowestRecommendedPpem { get; }
    public FontDirection FontDirectionHint { get; }
    public EntryFormat IndexToLocFormat { get; }
    public short GlyphDataFormat { get; }
    public HeaderTable(TrueTypeHeaderTable directoryTable, float version, float revision, UInt32 checkSumAdjustment, UInt32 magicNumber, ushort flags, ushort unitsPerEm, DateTime created, DateTime modified, short xMin, short yMin, short xMax, short yMax, ushort macStyle, ushort lowestRecommendedPpem, short fontDirectionHint, EntryFormat indexToLocFormat, short glyphDataFormat);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public float get_Version();
    [CompilerGeneratedAttribute]
public float get_Revision();
    [CompilerGeneratedAttribute]
public UInt32 get_CheckSumAdjustment();
    [CompilerGeneratedAttribute]
public UInt32 get_MagicNumber();
    [CompilerGeneratedAttribute]
public ushort get_Flags();
    [CompilerGeneratedAttribute]
public ushort get_UnitsPerEm();
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public DateTime get_Modified();
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public HeaderMacStyle get_MacStyle();
    [CompilerGeneratedAttribute]
public ushort get_LowestRecommendedPpem();
    [CompilerGeneratedAttribute]
public FontDirection get_FontDirectionHint();
    [CompilerGeneratedAttribute]
public EntryFormat get_IndexToLocFormat();
    [CompilerGeneratedAttribute]
public short get_GlyphDataFormat();
    public static HeaderTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable table);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.HorizontalHeaderTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AdvanceWidthMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinimumLeftSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinimumRightSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XMaxExtent>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRise>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRun>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MetricDataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NumberOfHeaderMetrics>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    public short Ascent { get; }
    public short Descent { get; }
    public short LineGap { get; }
    public ushort AdvanceWidthMaximum { get; }
    public short MinimumLeftSideBearing { get; }
    public short MinimumRightSideBearing { get; }
    public short XMaxExtent { get; }
    public short CaretSlopeRise { get; }
    public short CaretSlopeRun { get; }
    public short CaretOffset { get; }
    public short MetricDataFormat { get; }
    public ushort NumberOfHeaderMetrics { get; }
    public HorizontalHeaderTable(TrueTypeHeaderTable directoryTable, int majorVersion, int minorVersion, short ascent, short descent, short lineGap, ushort advanceWidthMaximum, short minimumLeftSideBearing, short minimumRightSideBearing, short xMaxExtent, short caretSlopeRise, short caretSlopeRun, short caretOffset, short metricDataFormat, ushort numberOfHeaderMetrics);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public int get_MajorVersion();
    [CompilerGeneratedAttribute]
public int get_MinorVersion();
    [CompilerGeneratedAttribute]
public short get_Ascent();
    [CompilerGeneratedAttribute]
public short get_Descent();
    [CompilerGeneratedAttribute]
public short get_LineGap();
    [CompilerGeneratedAttribute]
public ushort get_AdvanceWidthMaximum();
    [CompilerGeneratedAttribute]
public short get_MinimumLeftSideBearing();
    [CompilerGeneratedAttribute]
public short get_MinimumRightSideBearing();
    [CompilerGeneratedAttribute]
public short get_XMaxExtent();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRise();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRun();
    [CompilerGeneratedAttribute]
public short get_CaretOffset();
    [CompilerGeneratedAttribute]
public short get_MetricDataFormat();
    [CompilerGeneratedAttribute]
public ushort get_NumberOfHeaderMetrics();
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.HorizontalMetricsTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HorizontalMetric> <HorizontalMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<short> <AdditionalLeftSideBearings>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public IReadOnlyList`1<HorizontalMetric> HorizontalMetrics { get; }
    public IReadOnlyList`1<short> AdditionalLeftSideBearings { get; }
    public HorizontalMetricsTable(TrueTypeHeaderTable directoryTable, IReadOnlyList`1<HorizontalMetric> horizontalMetrics, IReadOnlyList`1<short> additionalLeftSideBearings);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HorizontalMetric> get_HorizontalMetrics();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<short> get_AdditionalLeftSideBearings();
    public ushort GetAdvanceWidth(int index);
    public sealed virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.IndexToLocationTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UInt32> <GlyphOffsets>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public EntryFormat Format { get; }
    public IReadOnlyList`1<UInt32> GlyphOffsets { get; }
    public IndexToLocationTable(TrueTypeHeaderTable directoryTable, EntryFormat format, IReadOnlyList`1<UInt32> glyphOffsets);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public EntryFormat get_Format();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<UInt32> get_GlyphOffsets();
    internal static IndexToLocationTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable table, Builder tableRegister);
    public sealed virtual void Write(Stream stream);
}
public interface UglyToad.PdfPig.Fonts.TrueType.Tables.ITrueTypeTable {
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public abstract virtual string get_Tag();
    public abstract virtual TrueTypeHeaderTable get_DirectoryTable();
}
[FlagsAttribute]
internal enum UglyToad.PdfPig.Fonts.TrueType.Tables.Kerning.KernCoverage : Enum {
    public int value__;
    public static KernCoverage Horizontal;
    public static KernCoverage Minimum;
    public static KernCoverage CrossStream;
    public static KernCoverage Override;
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.Kerning.KerningSubTable : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private KernCoverage <Coverage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KernPair> <Pairs>k__BackingField;
    public int Version { get; }
    public KernCoverage Coverage { get; }
    public IReadOnlyList`1<KernPair> Pairs { get; }
    public KerningSubTable(int version, KernCoverage coverage, IReadOnlyList`1<KernPair> pairs);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public KernCoverage get_Coverage();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KernPair> get_Pairs();
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Kerning.KernPair : ValueType {
    [CompilerGeneratedAttribute]
private int <LeftGlyphIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RightGlyphIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Value>k__BackingField;
    public int LeftGlyphIndex { get; }
    public int RightGlyphIndex { get; }
    public short Value { get; }
    public KernPair(int leftGlyphIndex, int rightGlyphIndex, short value);
    [CompilerGeneratedAttribute]
public int get_LeftGlyphIndex();
    [CompilerGeneratedAttribute]
public int get_RightGlyphIndex();
    [CompilerGeneratedAttribute]
public short get_Value();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.KerningTable : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KerningSubTable> <KerningTables>k__BackingField;
    public IReadOnlyList`1<KerningSubTable> KerningTables { get; }
    public KerningTable(IReadOnlyList`1<KerningSubTable> kerningTables);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KerningSubTable> get_KerningTables();
    public static KerningTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable headerTable);
    private static KerningSubTable ReadFormat0Table(int version, TrueTypeDataBytes data, KernCoverage coverage);
    private static KerningSubTable ReadFormat2Table(int version, TrueTypeDataBytes data, KernCoverage coverage, long tableStartOffset);
}
internal class UglyToad.PdfPig.Fonts.TrueType.Tables.MaximumProfileTable : BasicMaximumProfileTable {
    [CompilerGeneratedAttribute]
private int <MaximumPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumContours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumCompositePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumCompositeContours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumZones>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumTwilightPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumFunctionDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumInstructionDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumStackElements>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumSizeOfInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumComponentElements>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumComponentDepth>k__BackingField;
    public int MaximumPoints { get; }
    public int MaximumContours { get; }
    public int MaximumCompositePoints { get; }
    public int MaximumCompositeContours { get; }
    public int MaximumZones { get; }
    public int MaximumTwilightPoints { get; }
    public int MaximumStorage { get; }
    public int MaximumFunctionDefinitions { get; }
    public int MaximumInstructionDefinitions { get; }
    public int MaximumStackElements { get; }
    public int MaximumSizeOfInstructions { get; }
    public int MaximumComponentElements { get; }
    public int MaximumComponentDepth { get; }
    public MaximumProfileTable(TrueTypeHeaderTable directoryTable, float version, int numberOfGlyphs, int maximumPoints, int maximumContours, int maximumCompositePoints, int maximumCompositeContours, int maximumZones, int maximumTwilightPoints, int maximumStorage, int maximumFunctionDefinitions, int maximumInstructionDefinitions, int maximumStackElements, int maximumSizeOfInstructions, int maximumComponentElements, int maximumComponentDepth);
    [CompilerGeneratedAttribute]
public int get_MaximumPoints();
    [CompilerGeneratedAttribute]
public int get_MaximumContours();
    [CompilerGeneratedAttribute]
public int get_MaximumCompositePoints();
    [CompilerGeneratedAttribute]
public int get_MaximumCompositeContours();
    [CompilerGeneratedAttribute]
public int get_MaximumZones();
    [CompilerGeneratedAttribute]
public int get_MaximumTwilightPoints();
    [CompilerGeneratedAttribute]
public int get_MaximumStorage();
    [CompilerGeneratedAttribute]
public int get_MaximumFunctionDefinitions();
    [CompilerGeneratedAttribute]
public int get_MaximumInstructionDefinitions();
    [CompilerGeneratedAttribute]
public int get_MaximumStackElements();
    [CompilerGeneratedAttribute]
public int get_MaximumSizeOfInstructions();
    [CompilerGeneratedAttribute]
public int get_MaximumComponentElements();
    [CompilerGeneratedAttribute]
public int get_MaximumComponentDepth();
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.NameTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontSubFamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TrueTypeNameRecord> <NameRecords>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public string FontName { get; }
    public string FontFamilyName { get; }
    public string FontSubFamilyName { get; }
    public IReadOnlyList`1<TrueTypeNameRecord> NameRecords { get; }
    public NameTable(TrueTypeHeaderTable directoryTable, string fontName, string fontFamilyName, string fontSubFamilyName, IReadOnlyList`1<TrueTypeNameRecord> nameRecords);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public string get_FontFamilyName();
    [CompilerGeneratedAttribute]
public string get_FontSubFamilyName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TrueTypeNameRecord> get_NameRecords();
    public string GetPostscriptName();
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Os2RevisedVersion0Table : Os2Table {
    [CompilerGeneratedAttribute]
private short <TypographicAscender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypographicDescender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypographicLineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WindowsAscent>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WindowsDescent>k__BackingField;
    public short TypographicAscender { get; }
    public short TypographicDescender { get; }
    public short TypographicLineGap { get; }
    public ushort WindowsAscent { get; }
    public ushort WindowsDescent { get; }
    public Os2RevisedVersion0Table(TrueTypeHeaderTable directoryTable, ushort version, short xAverageCharacterWidth, ushort weightClass, ushort widthClass, ushort typeFlags, short ySubscriptXSize, short ySubscriptYSize, short ySubscriptXOffset, short ySubscriptYOffset, short ySuperscriptXSize, short ySuperscriptYSize, short ySuperscriptXOffset, short ySuperscriptYOffset, short yStrikeoutSize, short yStrikeoutPosition, short familyClass, IReadOnlyList`1<byte> panose, IReadOnlyList`1<UInt32> unicodeRanges, string vendorId, ushort fontSelectionFlags, ushort firstCharacterIndex, ushort lastCharacterIndex, short typographicAscender, short typographicDescender, short typographicLineGap, ushort windowsAscent, ushort windowsDescent);
    [CompilerGeneratedAttribute]
public short get_TypographicAscender();
    [CompilerGeneratedAttribute]
public short get_TypographicDescender();
    [CompilerGeneratedAttribute]
public short get_TypographicLineGap();
    [CompilerGeneratedAttribute]
public ushort get_WindowsAscent();
    [CompilerGeneratedAttribute]
public ushort get_WindowsDescent();
    public virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Os2Table : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XAverageCharacterWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WeightClass>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WidthClass>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TypeFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSubscriptXSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSubscriptYSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSubscriptXOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSubscriptYOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSuperscriptXSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSuperscriptYSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSuperscriptXOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YSuperscriptYOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YStrikeoutSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YStrikeoutPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private short <FamilyClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<byte> <Panose>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UInt32> <UnicodeRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FontSelectionFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FirstCharacterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LastCharacterIndex>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public ushort Version { get; }
    public short XAverageCharacterWidth { get; }
    public ushort WeightClass { get; }
    public ushort WidthClass { get; }
    public ushort TypeFlags { get; }
    public short YSubscriptXSize { get; }
    public short YSubscriptYSize { get; }
    public short YSubscriptXOffset { get; }
    public short YSubscriptYOffset { get; }
    public short YSuperscriptXSize { get; }
    public short YSuperscriptYSize { get; }
    public short YSuperscriptXOffset { get; }
    public short YSuperscriptYOffset { get; }
    public short YStrikeoutSize { get; }
    public short YStrikeoutPosition { get; }
    public short FamilyClass { get; }
    public IReadOnlyList`1<byte> Panose { get; }
    public IReadOnlyList`1<UInt32> UnicodeRanges { get; }
    public string VendorId { get; }
    public ushort FontSelectionFlags { get; }
    public ushort FirstCharacterIndex { get; }
    public ushort LastCharacterIndex { get; }
    public Os2Table(TrueTypeHeaderTable directoryTable, ushort version, short xAverageCharacterWidth, ushort weightClass, ushort widthClass, ushort typeFlags, short ySubscriptXSize, short ySubscriptYSize, short ySubscriptXOffset, short ySubscriptYOffset, short ySuperscriptXSize, short ySuperscriptYSize, short ySuperscriptXOffset, short ySuperscriptYOffset, short yStrikeoutSize, short yStrikeoutPosition, short familyClass, IReadOnlyList`1<byte> panose, IReadOnlyList`1<UInt32> unicodeRanges, string vendorId, ushort fontSelectionFlags, ushort firstCharacterIndex, ushort lastCharacterIndex);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
public short get_XAverageCharacterWidth();
    [CompilerGeneratedAttribute]
public ushort get_WeightClass();
    [CompilerGeneratedAttribute]
public ushort get_WidthClass();
    [CompilerGeneratedAttribute]
public ushort get_TypeFlags();
    [CompilerGeneratedAttribute]
public short get_YSubscriptXSize();
    [CompilerGeneratedAttribute]
public short get_YSubscriptYSize();
    [CompilerGeneratedAttribute]
public short get_YSubscriptXOffset();
    [CompilerGeneratedAttribute]
public short get_YSubscriptYOffset();
    [CompilerGeneratedAttribute]
public short get_YSuperscriptXSize();
    [CompilerGeneratedAttribute]
public short get_YSuperscriptYSize();
    [CompilerGeneratedAttribute]
public short get_YSuperscriptXOffset();
    [CompilerGeneratedAttribute]
public short get_YSuperscriptYOffset();
    [CompilerGeneratedAttribute]
public short get_YStrikeoutSize();
    [CompilerGeneratedAttribute]
public short get_YStrikeoutPosition();
    [CompilerGeneratedAttribute]
public short get_FamilyClass();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<byte> get_Panose();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<UInt32> get_UnicodeRanges();
    [CompilerGeneratedAttribute]
public string get_VendorId();
    [CompilerGeneratedAttribute]
public ushort get_FontSelectionFlags();
    [CompilerGeneratedAttribute]
public ushort get_FirstCharacterIndex();
    [CompilerGeneratedAttribute]
public ushort get_LastCharacterIndex();
    public virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Os2Version1Table : Os2RevisedVersion0Table {
    [CompilerGeneratedAttribute]
private UInt32 <CodePage1>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CodePage2>k__BackingField;
    public UInt32 CodePage1 { get; }
    public UInt32 CodePage2 { get; }
    public Os2Version1Table(TrueTypeHeaderTable directoryTable, ushort version, short xAverageCharacterWidth, ushort weightClass, ushort widthClass, ushort typeFlags, short ySubscriptXSize, short ySubscriptYSize, short ySubscriptXOffset, short ySubscriptYOffset, short ySuperscriptXSize, short ySuperscriptYSize, short ySuperscriptXOffset, short ySuperscriptYOffset, short yStrikeoutSize, short yStrikeoutPosition, short familyClass, IReadOnlyList`1<byte> panose, IReadOnlyList`1<UInt32> unicodeRanges, string vendorId, ushort fontSelectionFlags, ushort firstCharacterIndex, ushort lastCharacterIndex, short typographicAscender, short typographicDescender, short typographicLineGap, ushort windowsAscent, ushort windowsDescent, UInt32 codePage1, UInt32 codePage2);
    [CompilerGeneratedAttribute]
public UInt32 get_CodePage1();
    [CompilerGeneratedAttribute]
public UInt32 get_CodePage2();
    public virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Os2Version2To4OpenTypeTable : Os2Version1Table {
    [CompilerGeneratedAttribute]
private short <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <DefaultCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <BreakCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaximumContext>k__BackingField;
    public short XHeight { get; }
    public short CapHeight { get; }
    public ushort DefaultCharacter { get; }
    public ushort BreakCharacter { get; }
    public ushort MaximumContext { get; }
    public Os2Version2To4OpenTypeTable(TrueTypeHeaderTable directoryTable, ushort version, short xAverageCharacterWidth, ushort weightClass, ushort widthClass, ushort typeFlags, short ySubscriptXSize, short ySubscriptYSize, short ySubscriptXOffset, short ySubscriptYOffset, short ySuperscriptXSize, short ySuperscriptYSize, short ySuperscriptXOffset, short ySuperscriptYOffset, short yStrikeoutSize, short yStrikeoutPosition, short familyClass, IReadOnlyList`1<byte> panose, IReadOnlyList`1<UInt32> unicodeRanges, string vendorId, ushort fontSelectionFlags, ushort firstCharacterIndex, ushort lastCharacterIndex, short typographicAscender, short typographicDescender, short typographicLineGap, ushort windowsAscent, ushort windowsDescent, UInt32 codePage1, UInt32 codePage2, short xHeight, short capHeight, ushort defaultCharacter, ushort breakCharacter, ushort maximumContext);
    [CompilerGeneratedAttribute]
public short get_XHeight();
    [CompilerGeneratedAttribute]
public short get_CapHeight();
    [CompilerGeneratedAttribute]
public ushort get_DefaultCharacter();
    [CompilerGeneratedAttribute]
public ushort get_BreakCharacter();
    [CompilerGeneratedAttribute]
public ushort get_MaximumContext();
    public virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.Os2Version5OpenTypeTable : Os2Version2To4OpenTypeTable {
    [CompilerGeneratedAttribute]
private ushort <LowerOpticalPointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <UpperOpticalPointSize>k__BackingField;
    public ushort LowerOpticalPointSize { get; }
    public ushort UpperOpticalPointSize { get; }
    public Os2Version5OpenTypeTable(TrueTypeHeaderTable directoryTable, ushort version, short xAverageCharacterWidth, ushort weightClass, ushort widthClass, ushort typeFlags, short ySubscriptXSize, short ySubscriptYSize, short ySubscriptXOffset, short ySubscriptYOffset, short ySuperscriptXSize, short ySuperscriptYSize, short ySuperscriptXOffset, short ySuperscriptYOffset, short yStrikeoutSize, short yStrikeoutPosition, short familyClass, IReadOnlyList`1<byte> panose, IReadOnlyList`1<UInt32> unicodeRanges, string vendorId, ushort fontSelectionFlags, ushort firstCharacterIndex, ushort lastCharacterIndex, short typographicAscender, short typographicDescender, short typographicLineGap, ushort windowsAscent, ushort windowsDescent, UInt32 codePage1, UInt32 codePage2, short xHeight, short capHeight, ushort defaultCharacter, ushort breakCharacter, ushort maximumContext, ushort lowerOpticalPointSize, ushort upperOpticalPointSize);
    [CompilerGeneratedAttribute]
public ushort get_LowerOpticalPointSize();
    [CompilerGeneratedAttribute]
public ushort get_UpperOpticalPointSize();
    public virtual void Write(Stream stream);
}
public class UglyToad.PdfPig.Fonts.TrueType.Tables.PostScriptTable : object {
    [CompilerGeneratedAttribute]
private TrueTypeHeaderTable <DirectoryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private short <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private short <UnderlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <IsFixedPitch>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinimumMemoryType42>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumMemoryType42>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinimumMemoryType1>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumMemoryType1>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <GlyphNames>k__BackingField;
    public string Tag { get; }
    public TrueTypeHeaderTable DirectoryTable { get; }
    public float Format { get; }
    public float ItalicAngle { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public UInt32 IsFixedPitch { get; }
    public UInt32 MinimumMemoryType42 { get; }
    public UInt32 MaximumMemoryType42 { get; }
    public UInt32 MinimumMemoryType1 { get; }
    public UInt32 MaximumMemoryType1 { get; }
    public IReadOnlyList`1<string> GlyphNames { get; }
    public PostScriptTable(TrueTypeHeaderTable directoryTable, float format, float italicAngle, short underlinePosition, short underlineThickness, UInt32 isFixedPitch, UInt32 minimumMemoryType42, UInt32 maximumMemoryType42, UInt32 minimumMemoryType1, UInt32 maximumMemoryType1, String[] glyphNames);
    public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual TrueTypeHeaderTable get_DirectoryTable();
    [CompilerGeneratedAttribute]
public float get_Format();
    [CompilerGeneratedAttribute]
public float get_ItalicAngle();
    [CompilerGeneratedAttribute]
public short get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public short get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public UInt32 get_IsFixedPitch();
    [CompilerGeneratedAttribute]
public UInt32 get_MinimumMemoryType42();
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumMemoryType42();
    [CompilerGeneratedAttribute]
public UInt32 get_MinimumMemoryType1();
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumMemoryType1();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_GlyphNames();
    internal static PostScriptTable Load(TrueTypeDataBytes data, TrueTypeHeaderTable table, BasicMaximumProfileTable maximumProfileTable);
    private static String[] GetGlyphNamesByFormat(TrueTypeDataBytes data, BasicMaximumProfileTable maximumProfileTable, float formatType);
    private static String[] GetFormat2GlyphNames(TrueTypeDataBytes data);
}
public static class UglyToad.PdfPig.Fonts.TrueType.TrueTypeChecksumCalculator : object {
    private static string HeaderTableTag;
    private static int ChecksumAdjustmentPosition;
    public static UInt32 CalculateWholeFontChecksum(IInputBytes bytes, TrueTypeHeaderTable headerTable);
    public static UInt32 Calculate(IInputBytes bytes, TrueTypeHeaderTable table);
    public static UInt32 Calculate(IEnumerable`1<byte> bytes);
    private static bool IsHeadTable(TrueTypeHeaderTable table);
    private static bool TryReadUInt(IEnumerator`1<byte> enumerator, UInt32& result);
    private static bool TryReadUInt(IInputBytes input, long endAt, UInt32& result);
    [IteratorStateMachineAttribute("UglyToad.PdfPig.Fonts.TrueType.TrueTypeChecksumCalculator/<ToChecksumSkippedEnumerable>d__8")]
private static IEnumerable`1<byte> ToChecksumSkippedEnumerable(IInputBytes bytes, TrueTypeHeaderTable table);
    [CompilerGeneratedAttribute]
internal static byte <TryReadUInt>g__ReadNext|7_0(<>c__DisplayClass7_0& );
}
public class UglyToad.PdfPig.Fonts.TrueType.TrueTypeDataBytes : object {
    private IInputBytes inputBytes;
    public long Position { get; }
    public long Length { get; }
    public TrueTypeDataBytes(Byte[] bytes);
    public TrueTypeDataBytes(IInputBytes inputBytes);
    public long get_Position();
    public long get_Length();
    public float Read32Fixed();
    public short ReadSignedShort();
    public ushort ReadUnsignedShort();
    public byte ReadByte();
    public string ReadTag();
    public bool TryReadString(int bytesToRead, Encoding encoding, String& result);
    public UInt32 ReadUnsignedInt();
    public int ReadSignedInt();
    public long ReadLong();
    public DateTime ReadInternationalDate();
    public void Seek(long position);
    public int ReadSignedByte();
    public UInt16[] ReadUnsignedShortArray(int length);
    public Byte[] ReadByteArray(int length);
    public UInt32[] ReadUnsignedIntArray(int length);
    public Int16[] ReadShortArray(int length);
    public virtual string ToString();
    private bool ReadBuffered(Span`1<byte> buffer);
}
public class UglyToad.PdfPig.Fonts.TrueType.TrueTypeFont : object {
    [CompilerGeneratedAttribute]
private float <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, TrueTypeHeaderTable> <TableHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private TableRegister <TableRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private ICMapSubTable <WindowsUnicodeCMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ICMapSubTable <MacRomanCMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ICMapSubTable <WindowsSymbolCMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTables>k__BackingField;
    public float Version { get; }
    public IReadOnlyDictionary`2<string, TrueTypeHeaderTable> TableHeaders { get; }
    public TableRegister TableRegister { get; }
    public string Name { get; }
    public ICMapSubTable WindowsUnicodeCMap { get; }
    public ICMapSubTable MacRomanCMap { get; }
    public ICMapSubTable WindowsSymbolCMap { get; }
    public int NumberOfTables { get; }
    internal TrueTypeFont(float version, IReadOnlyDictionary`2<string, TrueTypeHeaderTable> tableHeaders, TableRegister tableRegister);
    [CompilerGeneratedAttribute]
public float get_Version();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, TrueTypeHeaderTable> get_TableHeaders();
    [CompilerGeneratedAttribute]
public TableRegister get_TableRegister();
    public string get_Name();
    [CompilerGeneratedAttribute]
public ICMapSubTable get_WindowsUnicodeCMap();
    [CompilerGeneratedAttribute]
public ICMapSubTable get_MacRomanCMap();
    [CompilerGeneratedAttribute]
public ICMapSubTable get_WindowsSymbolCMap();
    [CompilerGeneratedAttribute]
public int get_NumberOfTables();
    public bool TryGetBoundingBox(int characterCode, PdfRectangle& boundingBox);
    public bool TryGetBoundingBox(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, PdfRectangle& boundingBox);
    public bool TryGetPath(int characterCode, IReadOnlyList`1& path);
    public bool TryGetPath(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, IReadOnlyList`1& path);
    public bool TryGetAdvanceWidth(int characterCode, Double& width);
    public bool TryGetAdvanceWidth(int characterCode, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, Double& width);
    public int GetUnitsPerEm();
    private bool TryGetBoundingAdvancedWidthByIndex(int index, Double& width);
    private bool TryGetGlyphIndex(int characterIdentifier, Func`2<int, Nullable`1<int>> characterCodeToGlyphId, Int32& glyphId);
}
[IsReadOnlyAttribute]
public class UglyToad.PdfPig.Fonts.TrueType.TrueTypeHeaderTable : ValueType {
    public static string Cmap;
    public static string Glyf;
    public static string Head;
    public static string Hhea;
    public static string Hmtx;
    public static string Loca;
    public static string Maxp;
    public static string Name;
    public static string Post;
    public static string Os2;
    public static string Cvt;
    public static string Ebdt;
    public static string Eblc;
    public static string Ebsc;
    public static string Fpgm;
    public static string Gasp;
    public static string Hdmx;
    public static string Kern;
    public static string Ltsh;
    public static string Prep;
    public static string Pclt;
    public static string Vdmx;
    public static string Vhea;
    public static string Vmtx;
    public static string Cff;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CheckSum>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Length>k__BackingField;
    public string Tag { get; }
    public UInt32 CheckSum { get; }
    public UInt32 Offset { get; }
    public UInt32 Length { get; }
    public TrueTypeHeaderTable(string tag, UInt32 checkSum, UInt32 offset, UInt32 length);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public UInt32 get_CheckSum();
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
public UInt32 get_Length();
    public static TrueTypeHeaderTable GetEmptyHeaderTable(string tag);
    public sealed virtual void Write(Stream stream);
    public virtual string ToString();
}
internal static class UglyToad.PdfPig.Fonts.TrueType.WindowsGlyphList4 : object {
    public static int NumberOfMacGlyphs;
    public static IReadOnlyList`1<string> MacGlyphNames;
    public static IReadOnlyDictionary`2<string, int> MacGlyphNamesIndices;
    private static WindowsGlyphList4();
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.CallOtherSubrCommand : object {
    private static int FlexEnd;
    private static int FlexBegin;
    private static int FlexMiddle;
    private static int HintReplacement;
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static CallOtherSubrCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.CallSubrCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static CallSubrCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.DivCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static DivCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.PopCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static PopCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.ReturnCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static ReturnCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Arithmetic.SetCurrentPointCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static SetCurrentPointCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Hint.DotSectionCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static DotSectionCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Hint.HStem3Command : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HStem3Command();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Hint.HStemCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HStemCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Hint.VStem3Command : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static VStem3Command();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Hint.VStemCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static VStemCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.LazyType1Command : object {
    private Action`1<Type1BuildCharContext> runCommand;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public LazyType1Command(string name, Action`1<Type1BuildCharContext> runCommand);
    [CompilerGeneratedAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public void Run(Type1BuildCharContext context);
    public virtual string ToString();
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.ClosePathCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static ClosePathCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.HLineToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HLineToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.HMoveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HMoveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.HvCurveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HvCurveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.RelativeRCurveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static RelativeRCurveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.RLineToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static RLineToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.RMoveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static RMoveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.VhCurveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static VhCurveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.VLineToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static VLineToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.PathConstruction.VMoveToCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static VMoveToCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.StartFinishOutline.EndCharCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static EndCharCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.StartFinishOutline.HsbwCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static HsbwCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.StartFinishOutline.SbwCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static SbwCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.StartFinishOutline.SeacCommand : object {
    public static string Name;
    public static byte First;
    public static Nullable`1<byte> Second;
    [CompilerGeneratedAttribute]
private static bool <TakeFromStackBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ClearsOperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static LazyType1Command <Lazy>k__BackingField;
    public static bool TakeFromStackBottom { get; }
    public static bool ClearsOperandStack { get; }
    public static LazyType1Command Lazy { get; }
    private static SeacCommand();
    [CompilerGeneratedAttribute]
public static bool get_TakeFromStackBottom();
    [CompilerGeneratedAttribute]
public static bool get_ClearsOperandStack();
    [CompilerGeneratedAttribute]
public static LazyType1Command get_Lazy();
    public static void Run(Type1BuildCharContext context);
}
internal class UglyToad.PdfPig.Fonts.Type1.CharStrings.Commands.Type1BuildCharContext : object {
    private Func`2<int, IReadOnlyList`1<PdfSubpath>> characterByIndexFactory;
    private Func`2<string, IReadOnlyList`1<PdfSubpath>> characterByNameFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, CommandSequence> <Subroutines>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WidthY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LeftSideBearingX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LeftSideBearingY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlexing>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PdfSubpath> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <CurrentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private CharStringStack <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private CharStringStack <PostscriptStack>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PdfPoint> <FlexPoints>k__BackingField;
    public IReadOnlyDictionary`2<int, CommandSequence> Subroutines { get; }
    public double WidthX { get; public set; }
    public double WidthY { get; public set; }
    public double LeftSideBearingX { get; public set; }
    public double LeftSideBearingY { get; public set; }
    public bool IsFlexing { get; public set; }
    public List`1<PdfSubpath> Path { get; private set; }
    public PdfPoint CurrentPosition { get; public set; }
    public CharStringStack Stack { get; }
    public CharStringStack PostscriptStack { get; }
    public List`1<PdfPoint> FlexPoints { get; }
    public Type1BuildCharContext(IReadOnlyDictionary`2<int, CommandSequence> subroutines, Func`2<int, IReadOnlyList`1<PdfSubpath>> characterByIndexFactory, Func`2<string, IReadOnlyList`1<PdfSubpath>> characterByNameFactory);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, CommandSequence> get_Subroutines();
    [CompilerGeneratedAttribute]
public double get_WidthX();
    [CompilerGeneratedAttribute]
public void set_WidthX(double value);
    [CompilerGeneratedAttribute]
public double get_WidthY();
    [CompilerGeneratedAttribute]
public void set_WidthY(double value);
    [CompilerGeneratedAttribute]
public double get_LeftSideBearingX();
    [CompilerGeneratedAttribute]
public void set_LeftSideBearingX(double value);
    [CompilerGeneratedAttribute]
public double get_LeftSideBearingY();
    [CompilerGeneratedAttribute]
public void set_LeftSideBearingY(double value);
    [CompilerGeneratedAttribute]
public bool get_IsFlexing();
    [CompilerGeneratedAttribute]
public void set_IsFlexing(bool value);
    [CompilerGeneratedAttribute]
public List`1<PdfSubpath> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(List`1<PdfSubpath> value);
    [CompilerGeneratedAttribute]
public PdfPoint get_CurrentPosition();
    [CompilerGeneratedAttribute]
public void set_CurrentPosition(PdfPoint value);
    [CompilerGeneratedAttribute]
public CharStringStack get_Stack();
    [CompilerGeneratedAttribute]
public CharStringStack get_PostscriptStack();
    [CompilerGeneratedAttribute]
public List`1<PdfPoint> get_FlexPoints();
    public void AddFlexPoint(PdfPoint point);
    public IReadOnlyList`1<PdfSubpath> GetCharacter(int characterCode);
    public IReadOnlyList`1<PdfSubpath> GetCharacter(string characterName);
    public void SetPath(IReadOnlyList`1<PdfSubpath> path);
    public void ClearFlexPoints();
}
internal class UglyToad.PdfPig.Fonts.Type1.CharStrings.Type1CharstringDecryptedBytes : object {
    private Byte[] bytes;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceType <Source>k__BackingField;
    public ReadOnlySpan`1<byte> Bytes { get; }
    public int Index { get; }
    public string Name { get; }
    public SourceType Source { get; }
    public Type1CharstringDecryptedBytes(Byte[] bytes, int index);
    public Type1CharstringDecryptedBytes(string name, Byte[] bytes, int index);
    public ReadOnlySpan`1<byte> get_Bytes();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SourceType get_Source();
    public virtual string ToString();
}
internal static class UglyToad.PdfPig.Fonts.Type1.CharStrings.Type1CharStringParser : object {
    public static Type1CharStrings Parse(IReadOnlyList`1<Type1CharstringDecryptedBytes> charStrings, IReadOnlyList`1<Type1CharstringDecryptedBytes> subroutines);
    private static IReadOnlyList`1<Union`2<double, LazyType1Command>> ParseSingle(ReadOnlySpan`1<byte> charStringBytes);
    private static int InterpretNumber(byte b, ReadOnlySpan`1<byte> bytes, Int32& i);
    public static LazyType1Command GetCommand(byte v, ReadOnlySpan`1<byte> bytes, Int32& i);
}
internal class UglyToad.PdfPig.Fonts.Type1.CharStrings.Type1CharStrings : object {
    private IReadOnlyDictionary`2<int, string> charStringIndexToName;
    private object locker;
    private Dictionary`2<string, IReadOnlyList`1<PdfSubpath>> glyphs;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, CommandSequence> <CharStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, CommandSequence> <Subroutines>k__BackingField;
    public IReadOnlyDictionary`2<string, CommandSequence> CharStrings { get; }
    public IReadOnlyDictionary`2<int, CommandSequence> Subroutines { get; }
    public Type1CharStrings(IReadOnlyDictionary`2<string, CommandSequence> charStrings, IReadOnlyDictionary`2<int, string> charStringIndexToName, IReadOnlyDictionary`2<int, CommandSequence> subroutines);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, CommandSequence> get_CharStrings();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, CommandSequence> get_Subroutines();
    public bool TryGenerate(string name, IReadOnlyList`1& path);
    private IReadOnlyList`1<PdfSubpath> Run(CommandSequence sequence);
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfSubpath> <Run>b__11_0(int i);
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfSubpath> <Run>b__11_1(string s);
}
public class UglyToad.PdfPig.Fonts.Type1.MinFeature : object {
    [CompilerGeneratedAttribute]
private int <First>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private static MinFeature <Default>k__BackingField;
    public int First { get; }
    public int Second { get; }
    public static MinFeature Default { get; }
    public MinFeature(int first, int second);
    private static MinFeature();
    [CompilerGeneratedAttribute]
public int get_First();
    [CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
public static MinFeature get_Default();
    public virtual string ToString();
}
public class UglyToad.PdfPig.Fonts.Type1.Parser.Type1ArrayTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    private static String[] Space;
    public bool ReadsNextByte { get; }
    private static Type1ArrayTokenizer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Fonts.Type1.Parser.Type1DataToken : Type1Token {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrivateDictionary>k__BackingField;
    public ReadOnlyMemory`1<byte> Data { get; }
    public bool IsPrivateDictionary { get; }
    public Type1DataToken(TokenType type, ReadOnlyMemory`1<byte> data);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Data();
    [CompilerGeneratedAttribute]
public virtual bool get_IsPrivateDictionary();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.Type1.Parser.Type1EncryptedPortionParser : object {
    private static ushort EexecEncryptionKey;
    private static int EexecRandomBytes;
    private static int Len4Bytes;
    private static int Password;
    private static int CharstringEncryptionKey;
    public ValueTuple`2<Type1PrivateDictionary, Type1CharStrings> Parse(ReadOnlySpan`1<byte> bytes, bool isLenientParsing);
    private static bool IsBinary(ReadOnlySpan`1<byte> bytes);
    private static ReadOnlySpan`1<byte> ConvertHexToBinary(ReadOnlySpan`1<byte> bytes);
    private static ReadOnlySpan`1<byte> Decrypt(ReadOnlySpan`1<byte> bytes, int key, int randomBytes);
    private static void ReadExpected(Type1Tokenizer tokenizer, TokenType type, string text);
    private static void ReadExpectedAfterOptional(Type1Tokenizer tokenizer, TokenType optionalType, string optionalText, TokenType type, string text);
    private static IReadOnlyList`1<Type1Token> ReadProcedure(Type1Tokenizer tokenizer, bool hasReadStartProc);
    private static void ReadProcedure(Type1Tokenizer tokenizer, List`1<Type1Token> tokens, Int32& depth);
    private static void ReadTillDef(Type1Tokenizer tokenizer, bool skip);
    private static void ReadTillPut(Type1Tokenizer tokenizer);
    private static IReadOnlyList`1<T> ReadArrayValues(Type1Tokenizer tokenizer, Func`2<Type1Token, T> converter, bool hasReadStart, bool includeDef);
    private static double ReadNumeric(Type1Tokenizer tokenizer);
    private static bool ReadBoolean(Type1Tokenizer tokenizer);
    private static void ReadOtherSubroutines(Type1Tokenizer tokenizer, bool isLenientParsing);
    private static IReadOnlyList`1<Type1CharstringDecryptedBytes> ReadSubroutines(Type1Tokenizer tokenizer, int lenIv, bool isLenientParsing);
    private static IReadOnlyList`1<Type1CharstringDecryptedBytes> ReadCharStrings(Type1Tokenizer tokenizer, int lenIv, bool isLenientParsing);
}
public static class UglyToad.PdfPig.Fonts.Type1.Parser.Type1FontParser : object {
    private static string ClearToMark;
    private static int PfbFileIndicator;
    private static Type1EncryptedPortionParser EncryptedPortionParser;
    private static Type1FontParser();
    public static Type1Font Parse(IInputBytes inputBytes, int length1, int length2);
    private static ValueTuple`2<Byte[], Byte[]> ReadPfbHeader(IInputBytes bytes);
    private static void HandleOperator(OperatorToken token, ISeekableTokenScanner scanner, PreviousTokenSet set, List`1<DictionaryToken> dictionaries);
    private static DictionaryToken ReadDictionary(int keys, ISeekableTokenScanner scanner);
    private static ValueTuple`2<ArrayToken, NameToken> ReadEncoding(ISeekableTokenScanner scanner);
    private static IReadOnlyDictionary`2<int, string> GetEncoding(IReadOnlyList`1<DictionaryToken> dictionaries);
    private static ArrayToken GetFontMatrix(IReadOnlyList`1<DictionaryToken> dictionaries);
    private static Nullable`1<PdfRectangle> GetBoundingBox(IReadOnlyList`1<DictionaryToken> dictionaries);
    [CompilerGeneratedAttribute]
internal static int <ReadPfbHeader>g__ReadSize|4_0(byte recordType, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static bool <ReadEncoding>g__IsDefOrReadonly|7_0(<>c__DisplayClass7_0& );
}
public class UglyToad.PdfPig.Fonts.Type1.Parser.Type1NameTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal static class UglyToad.PdfPig.Fonts.Type1.Parser.Type1Symbols : object {
    public static string BlueFuzz;
    public static string BlueScale;
    public static string BlueShift;
    public static string BlueValues;
    public static string ExpansionFactor;
    public static string FamilyBlues;
    public static string FamilyOtherBlues;
    public static string ForceBold;
    public static string LanguageGroup;
    public static string Len4;
    public static string MinFeature;
    public static string NoAccessDef;
    public static string NoAccessDefAlt;
    public static string NoAccessPut;
    public static string NoAccessPutAlt;
    public static string OtherBlues;
    public static string OtherSubroutines;
    public static string Password;
    public static string RdProcedure;
    public static string RdProcedureAlt;
    public static string RndStemUp;
    public static string StdHorizontalStemWidth;
    public static string StdVerticalStemWidth;
    public static string StemSnapHorizontalWidths;
    public static string StemSnapVerticalWidths;
    public static string Subroutines;
    public static string UniqueId;
    public static string Erode;
}
internal class UglyToad.PdfPig.Fonts.Type1.Parser.Type1Token : object {
    [CompilerGeneratedAttribute]
private TokenType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public TokenType Type { get; }
    public string Text { get; }
    public bool IsPrivateDictionary { get; }
    public Type1Token(char c, TokenType type);
    public Type1Token(string text, TokenType type);
    [CompilerGeneratedAttribute]
public TokenType get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual bool get_IsPrivateDictionary();
    public int AsInt();
    public double AsDouble();
    public bool AsBool();
    public virtual string ToString();
}
internal class UglyToad.PdfPig.Fonts.Type1.Parser.Type1Tokenizer : object {
    private StringBuilder commentBuffer;
    private StringBuilder literalBuffer;
    private StringBuilder stringBuffer;
    private IInputBytes bytes;
    private List`1<string> comments;
    private int openParens;
    private Type1Token previousToken;
    [CompilerGeneratedAttribute]
private Type1Token <CurrentToken>k__BackingField;
    public Type1Token CurrentToken { get; private set; }
    public IReadOnlyList`1<string> Comments { get; }
    public Type1Tokenizer(IInputBytes bytes);
    [CompilerGeneratedAttribute]
public Type1Token get_CurrentToken();
    [CompilerGeneratedAttribute]
private void set_CurrentToken(Type1Token value);
    public IReadOnlyList`1<string> get_Comments();
    public Type1Token GetNext();
    private Type1Token ReadNextToken();
    private Type1Token ReadString();
    private bool TryReadNumber(char c, Type1Token& numberToken);
    private string ReadLiteral(Nullable`1<char> previousCharacter);
    private string ReadComment();
    private Type1DataToken ReadCharString(int length);
    [CompilerGeneratedAttribute]
private char <ReadString>g__GetNext|16_0();
    [CompilerGeneratedAttribute]
private char <TryReadNumber>g__GetNext|17_0();
}
public class UglyToad.PdfPig.Fonts.Type1.Type1Font : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, string> <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMatrix <FontMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private Type1PrivateDictionary <PrivateDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private Type1CharStrings <CharStrings>k__BackingField;
    public string Name { get; }
    public IReadOnlyDictionary`2<int, string> Encoding { get; }
    public TransformationMatrix FontMatrix { get; }
    public PdfRectangle BoundingBox { get; }
    public Type1PrivateDictionary PrivateDictionary { get; }
    internal Type1CharStrings CharStrings { get; }
    internal Type1Font(string name, IReadOnlyDictionary`2<int, string> encoding, ArrayToken fontMatrix, PdfRectangle boundingBox, Type1PrivateDictionary privateDictionary, Type1CharStrings charStrings);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, string> get_Encoding();
    [CompilerGeneratedAttribute]
public TransformationMatrix get_FontMatrix();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public Type1PrivateDictionary get_PrivateDictionary();
    [CompilerGeneratedAttribute]
internal Type1CharStrings get_CharStrings();
    public Nullable`1<PdfRectangle> GetCharacterBoundingBox(string characterName);
    public bool ContainsNamedCharacter(string name);
    private static TransformationMatrix GetFontTransformationMatrix(ArrayToken array);
    public IReadOnlyList`1<PdfSubpath> GetCharacterPath(string characterName);
}
public class UglyToad.PdfPig.Fonts.Type1.Type1PrivateDictionary : AdobeStylePrivateDictionary {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LenIv>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RoundStemUp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private MinFeature <MinFeature>k__BackingField;
    public Nullable`1<int> UniqueId { get; public set; }
    public int LenIv { get; }
    public Nullable`1<bool> RoundStemUp { get; }
    public int Password { get; }
    public MinFeature MinFeature { get; }
    internal Type1PrivateDictionary(Builder builder);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_LenIv();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RoundStemUp();
    [CompilerGeneratedAttribute]
public int get_Password();
    [CompilerGeneratedAttribute]
public MinFeature get_MinFeature();
}
[ExtensionAttribute]
internal static class UglyToad.PdfPig.Util.StringExtensions : object {
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> AsSpanOrSubstring(string text, int start);
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> AsSpanOrSubstring(string text, int start, int length);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class UglyToad.PdfPig.Util.StringSplitter : ValueType {
    private ReadOnlySpan`1<char> text;
    private char separator;
    private int position;
    public bool IsEof { get; }
    public StringSplitter(ReadOnlySpan`1<char> text, char separator);
    public bool TryRead(ReadOnlySpan`1& result);
    public ReadOnlySpan`1<char> Read();
    [IsReadOnlyAttribute]
public bool get_IsEof();
    private static void ThrowEof();
}
