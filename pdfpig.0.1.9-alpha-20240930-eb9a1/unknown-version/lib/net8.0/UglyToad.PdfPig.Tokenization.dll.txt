[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    [NullableAttribute("2")]
private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public Char& get_Item(int index);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [IsReadOnlyAttribute]
public ReadOnlySpan`1<char> AsSpan();
    [IsReadOnlyAttribute]
public ReadOnlySpan`1<char> AsSpan(int start);
    [IsReadOnlyAttribute]
public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string s);
    [NullableContextAttribute("1")]
private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
internal class UglyToad.PdfPig.Tokenization.ArrayTokenizer : object {
    private bool usePdfDocEncoding;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    public ArrayTokenizer(bool usePdfDocEncoding);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool CurrentByteEndsCurrentArray(IInputBytes inputBytes, IToken previousToken);
}
internal class UglyToad.PdfPig.Tokenization.CommentTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.DictionaryTokenizer : object {
    private bool usePdfDocEncoding;
    private IReadOnlyList`1<NameToken> requiredKeys;
    private bool useLenientParsing;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    public DictionaryTokenizer(bool usePdfDocEncoding, IReadOnlyList`1<NameToken> requiredKeys, bool useLenientParsing);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private bool TryTokenizeInternal(byte currentByte, IInputBytes inputBytes, bool useRequiredKeys, IToken& token);
    private static Dictionary`2<NameToken, IToken> ConvertToDictionary(List`1<IToken> tokens, bool useLenientParsing);
    private static IToken PeekNext(IReadOnlyList`1<IToken> tokens, int currentIndex);
}
public class UglyToad.PdfPig.Tokenization.EndOfLineTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.HexTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool IsValidHexCharacter(byte b);
}
public interface UglyToad.PdfPig.Tokenization.ITokenizer {
    public bool ReadsNextByte { get; }
    public abstract virtual bool get_ReadsNextByte();
    public abstract virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.NameTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    private static NameTokenizer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.NumericTokenizer : object {
    private static byte Zero;
    private static byte Nine;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool TryParseInvalidNumber(string numeric, Double& result);
}
internal class UglyToad.PdfPig.Tokenization.PlainTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
public class UglyToad.PdfPig.Tokenization.Scanner.CoreTokenScanner : object {
    private static CommentTokenizer CommentTokenizer;
    private static HexTokenizer HexTokenizer;
    private static NameTokenizer NameTokenizer;
    private static PlainTokenizer PlainTokenizer;
    private static NumericTokenizer NumericTokenizer;
    private StringTokenizer stringTokenizer;
    private ArrayTokenizer arrayTokenizer;
    private DictionaryTokenizer dictionaryTokenizer;
    private ScannerScope scope;
    private IReadOnlyDictionary`2<NameToken, IReadOnlyList`1<NameToken>> namedDictionaryRequiredKeys;
    private IInputBytes inputBytes;
    private bool usePdfDocEncoding;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<byte, ITokenizer>> customTokenizers;
    private bool useLenientParsing;
    [CompilerGeneratedAttribute]
private long <CurrentTokenStart>k__BackingField;
    [CompilerGeneratedAttribute]
private IToken <CurrentToken>k__BackingField;
    private bool hasBytePreRead;
    private bool isInInlineImage;
    public long CurrentTokenStart { get; private set; }
    public IToken CurrentToken { get; private set; }
    public long CurrentPosition { get; }
    public long Length { get; }
    public CoreTokenScanner(IInputBytes inputBytes, bool usePdfDocEncoding, ScannerScope scope, IReadOnlyDictionary`2<NameToken, IReadOnlyList`1<NameToken>> namedDictionaryRequiredKeys, bool useLenientParsing);
    private static CoreTokenScanner();
    [CompilerGeneratedAttribute]
public long get_CurrentTokenStart();
    [CompilerGeneratedAttribute]
private void set_CurrentTokenStart(long value);
    [CompilerGeneratedAttribute]
public sealed virtual IToken get_CurrentToken();
    [CompilerGeneratedAttribute]
private void set_CurrentToken(IToken value);
    public sealed virtual long get_CurrentPosition();
    public sealed virtual long get_Length();
    public sealed virtual bool TryReadToken(T& token);
    public sealed virtual void Seek(long position);
    public sealed virtual bool MoveNext();
    public sealed virtual void RegisterCustomTokenizer(byte firstByte, ITokenizer tokenizer);
    public sealed virtual void DeregisterCustomTokenizer(ITokenizer tokenizer);
    public IReadOnlyList`1<byte> RecoverFromIncorrectEndImage(long lastEndImageOffset);
    private List`1<byte> ReadInlineImageData();
    private List`1<byte> ReadUntilEndImage(long startsAt);
}
public interface UglyToad.PdfPig.Tokenization.Scanner.ISeekableTokenScanner {
    public long CurrentPosition { get; }
    public long Length { get; }
    public abstract virtual void Seek(long position);
    public abstract virtual long get_CurrentPosition();
    public abstract virtual long get_Length();
    public abstract virtual void RegisterCustomTokenizer(byte firstByte, ITokenizer tokenizer);
    public abstract virtual void DeregisterCustomTokenizer(ITokenizer tokenizer);
}
public interface UglyToad.PdfPig.Tokenization.Scanner.ITokenScanner {
    public IToken CurrentToken { get; }
    public abstract virtual bool MoveNext();
    public abstract virtual IToken get_CurrentToken();
    public abstract virtual bool TryReadToken(T& token);
}
public enum UglyToad.PdfPig.Tokenization.Scanner.ScannerScope : Enum {
    public int value__;
    public static ScannerScope None;
    public static ScannerScope Array;
    public static ScannerScope Dictionary;
}
internal class UglyToad.PdfPig.Tokenization.StringTokenizer : object {
    private bool usePdfDocEncoding;
    private StringBuilder stringBuilder;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    public StringTokenizer(bool usePdfDocEncoding);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static void LeftShiftOctal(char nextOctalChar, int octalsRead, Int16[] octals);
    private static void ProcessEscapedCharacter(char c, StringBuilder builder, Int16[] octal, Boolean& isOctalActive, Int32& octalsRead, Boolean& isLineBreaking);
    private static int CheckForEndOfString(int numberOfBrackets, IInputBytes bytes);
}
