[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Axis : ChartObject {
    [NullableAttribute("2")]
internal AxisTitle _title;
    [CompilerGeneratedAttribute]
private double <MinimumScale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumScale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MajorTick>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorTick>k__BackingField;
    internal TickMarkType _majorTickMark;
    internal bool _majorTickMarkInitialized;
    internal TickMarkType _minorTickMark;
    internal bool _minorTickMarkInitialized;
    [NullableAttribute("2")]
internal TickLabels _tickLabels;
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    [NullableAttribute("2")]
internal Gridlines _majorGridlines;
    [NullableAttribute("2")]
internal Gridlines _minorGridlines;
    [CompilerGeneratedAttribute]
private bool <HasMajorGridlines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMinorGridlines>k__BackingField;
    public AxisTitle Title { get; }
    public double MinimumScale { get; public set; }
    public double MaximumScale { get; public set; }
    public double MajorTick { get; public set; }
    public double MinorTick { get; public set; }
    public TickMarkType MajorTickMark { get; public set; }
    public TickMarkType MinorTickMark { get; public set; }
    public TickLabels TickLabels { get; }
    public LineFormat LineFormat { get; }
    public Gridlines MajorGridlines { get; }
    public Gridlines MinorGridlines { get; }
    public bool HasMajorGridlines { get; public set; }
    public bool HasMinorGridlines { get; public set; }
    internal Axis(DocumentObject parent);
    public Axis Clone();
    protected virtual object DeepCopy();
    public AxisTitle get_Title();
    [CompilerGeneratedAttribute]
public double get_MinimumScale();
    [CompilerGeneratedAttribute]
public void set_MinimumScale(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumScale();
    [CompilerGeneratedAttribute]
public void set_MaximumScale(double value);
    [CompilerGeneratedAttribute]
public double get_MajorTick();
    [CompilerGeneratedAttribute]
public void set_MajorTick(double value);
    [CompilerGeneratedAttribute]
public double get_MinorTick();
    [CompilerGeneratedAttribute]
public void set_MinorTick(double value);
    public TickMarkType get_MajorTickMark();
    public void set_MajorTickMark(TickMarkType value);
    public TickMarkType get_MinorTickMark();
    public void set_MinorTickMark(TickMarkType value);
    public TickLabels get_TickLabels();
    public LineFormat get_LineFormat();
    public Gridlines get_MajorGridlines();
    public Gridlines get_MinorGridlines();
    [CompilerGeneratedAttribute]
public bool get_HasMajorGridlines();
    [CompilerGeneratedAttribute]
public void set_HasMajorGridlines(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMinorGridlines();
    [CompilerGeneratedAttribute]
public void set_HasMinorGridlines(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.AxisTitle : ChartObject {
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [NullableAttribute("2")]
internal Font _font;
    [CompilerGeneratedAttribute]
private double <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalAlignment <VerticalAlignment>k__BackingField;
    public string Caption { get; public set; }
    public Font Font { get; }
    public double Orientation { get; public set; }
    public HorizontalAlignment Alignment { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    internal AxisTitle(DocumentObject parent);
    public AxisTitle Clone();
    protected virtual object DeepCopy();
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    public Font get_Font();
    [CompilerGeneratedAttribute]
public double get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(double value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public VerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(VerticalAlignment value);
}
public enum PdfSharp.Charting.BlankType : Enum {
    public int value__;
    public static BlankType NotPlotted;
    public static BlankType Interpolated;
    public static BlankType Zero;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Chart : DocumentObject {
    internal ChartType _type;
    [NullableAttribute("2")]
internal Font _font;
    [NullableAttribute("2")]
internal Legend _legend;
    [NullableAttribute("2")]
internal Axis _xAxis;
    [NullableAttribute("2")]
internal Axis _yAxis;
    [NullableAttribute("2")]
private Axis _zAxis;
    [NullableAttribute("2")]
internal SeriesCollection _seriesCollection;
    [NullableAttribute("2")]
internal XValues _xValues;
    [NullableAttribute("2")]
internal PlotArea _plotArea;
    [CompilerGeneratedAttribute]
private BlankType <DisplayBlanksAs>k__BackingField;
    [NullableAttribute("2")]
internal DataLabel _dataLabel;
    [CompilerGeneratedAttribute]
private bool <HasDataLabel>k__BackingField;
    public ChartType Type { get; public set; }
    public Font Font { get; }
    public Legend Legend { get; }
    public Axis XAxis { get; }
    public Axis YAxis { get; }
    public Axis ZAxis { get; }
    public SeriesCollection SeriesCollection { get; }
    public XValues XValues { get; }
    public PlotArea PlotArea { get; }
    public BlankType DisplayBlanksAs { get; public set; }
    public DataLabel DataLabel { get; }
    public bool HasDataLabel { get; public set; }
    internal Chart(DocumentObject parent);
    public Chart(ChartType type);
    public Chart Clone();
    protected virtual object DeepCopy();
    internal string CheckAxis(Axis axis);
    public ChartType get_Type();
    public void set_Type(ChartType value);
    public Font get_Font();
    public Legend get_Legend();
    public Axis get_XAxis();
    public Axis get_YAxis();
    public Axis get_ZAxis();
    public SeriesCollection get_SeriesCollection();
    public XValues get_XValues();
    public PlotArea get_PlotArea();
    [CompilerGeneratedAttribute]
public BlankType get_DisplayBlanksAs();
    [CompilerGeneratedAttribute]
public void set_DisplayBlanksAs(BlankType value);
    public DataLabel get_DataLabel();
    [CompilerGeneratedAttribute]
public bool get_HasDataLabel();
    [CompilerGeneratedAttribute]
public void set_HasDataLabel(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.ChartFrame : object {
    [CompilerGeneratedAttribute]
private XPoint <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private XSize <Size>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Chart> _chartList;
    public XPoint Location { get; public set; }
    public XSize Size { get; public set; }
    public ChartFrame(XRect rect);
    [CompilerGeneratedAttribute]
public XPoint get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(XPoint value);
    [CompilerGeneratedAttribute]
public XSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(XSize value);
    public void Add(Chart chart);
    public void Draw(XGraphics gfx);
    public void DrawChart(XGraphics gfx);
    private ChartRenderer GetChartRenderer(Chart chart, RendererParameters parms);
}
public class PdfSharp.Charting.ChartObject : DocumentObject {
    [NullableContextAttribute("1")]
internal ChartObject(DocumentObject parent);
}
public enum PdfSharp.Charting.ChartType : Enum {
    public int value__;
    public static ChartType Line;
    public static ChartType Column2D;
    public static ChartType ColumnStacked2D;
    public static ChartType Area2D;
    public static ChartType Bar2D;
    public static ChartType BarStacked2D;
    public static ChartType Pie2D;
    public static ChartType PieExploded2D;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.DataLabel : DocumentObject {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NullableAttribute("2")]
internal Font _font;
    internal DataLabelPosition _position;
    internal bool _positionInitialized;
    internal DataLabelType _type;
    internal bool _typeInitialized;
    public string Format { get; public set; }
    public Font Font { get; }
    public DataLabelPosition Position { get; public set; }
    public DataLabelType Type { get; public set; }
    internal DataLabel(DocumentObject parent);
    public DataLabel Clone();
    protected virtual object DeepCopy();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    public Font get_Font();
    public DataLabelPosition get_Position();
    public void set_Position(DataLabelPosition value);
    public DataLabelType get_Type();
    public void set_Type(DataLabelType value);
}
public enum PdfSharp.Charting.DataLabelPosition : Enum {
    public int value__;
    public static DataLabelPosition Center;
    public static DataLabelPosition InsideBase;
    public static DataLabelPosition InsideEnd;
    public static DataLabelPosition OutsideEnd;
}
public enum PdfSharp.Charting.DataLabelType : Enum {
    public int value__;
    public static DataLabelType None;
    public static DataLabelType Percent;
    public static DataLabelType Value;
}
public enum PdfSharp.Charting.DockingType : Enum {
    public int value__;
    public static DockingType Top;
    public static DockingType Bottom;
    public static DockingType Left;
    public static DockingType Right;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class PdfSharp.Charting.DocumentObject : object {
    [CompilerGeneratedAttribute]
private DocumentObject <Parent>k__BackingField;
    public DocumentObject Parent { get; internal set; }
    [NullableContextAttribute("1")]
public DocumentObject(DocumentObject parent);
    [NullableContextAttribute("1")]
public object Clone();
    [NullableContextAttribute("1")]
protected virtual object DeepCopy();
    [CompilerGeneratedAttribute]
public DocumentObject get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(DocumentObject value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class PdfSharp.Charting.DocumentObjectCollection : DocumentObject {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private object <System.Collections.ICollection.SyncRoot>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DocumentObject> _elements;
    public DocumentObject Item { get; internal set; }
    public int Count { get; }
    public DocumentObject First { get; }
    public DocumentObject LastObject { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    [NullableContextAttribute("1")]
internal DocumentObjectCollection(DocumentObject parent);
    public virtual DocumentObject get_Item(int index);
    internal virtual void set_Item(int index, DocumentObject value);
    [NullableContextAttribute("1")]
public DocumentObjectCollection Clone();
    [NullableContextAttribute("1")]
protected virtual object DeepCopy();
    [NullableContextAttribute("1")]
public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void Clear();
    [NullableContextAttribute("1")]
public virtual void InsertObject(int index, DocumentObject val);
    [NullableContextAttribute("1")]
public int IndexOf(DocumentObject val);
    public void RemoveObjectAt(int index);
    public virtual void Add(DocumentObject value);
    public sealed virtual int get_Count();
    public DocumentObject get_First();
    public DocumentObject get_LastObject();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.FillFormat : DocumentObject {
    [CompilerGeneratedAttribute]
private XColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    public XColor Color { get; public set; }
    public bool Visible { get; public set; }
    internal FillFormat(DocumentObject parent);
    public FillFormat Clone();
    [CompilerGeneratedAttribute]
public XColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(XColor value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Font : DocumentObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnit <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private Underline <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private XColor <Color>k__BackingField;
    private bool _superscript;
    private bool _subscript;
    public string Name { get; public set; }
    public XUnit Size { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public Underline Underline { get; public set; }
    public XColor Color { get; public set; }
    public bool Superscript { get; public set; }
    public bool Subscript { get; public set; }
    internal Font(DocumentObject parent);
    public Font(string name, XUnit size);
    public Font Clone();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public XUnit get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(XUnit value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public Underline get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(Underline value);
    [CompilerGeneratedAttribute]
public XColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(XColor value);
    public bool get_Superscript();
    public void set_Superscript(bool value);
    public bool get_Subscript();
    public void set_Subscript(bool value);
}
[FlagsAttribute]
internal enum PdfSharp.Charting.FontProperties : Enum {
    public int value__;
    public static FontProperties None;
    public static FontProperties Name;
    public static FontProperties Size;
    public static FontProperties Bold;
    public static FontProperties Italic;
    public static FontProperties Underline;
    public static FontProperties Color;
    public static FontProperties Border;
    public static FontProperties Superscript;
    public static FontProperties Subscript;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Gridlines : ChartObject {
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    public LineFormat LineFormat { get; }
    internal Gridlines(DocumentObject parent);
    public Gridlines Clone();
    protected virtual object DeepCopy();
    public LineFormat get_LineFormat();
}
public enum PdfSharp.Charting.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Center;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Legend : ChartObject {
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    [NullableAttribute("2")]
internal Font _font;
    internal DockingType _docking;
    public LineFormat LineFormat { get; }
    public Font Font { get; }
    public DockingType Docking { get; public set; }
    internal Legend(DocumentObject parent);
    public Legend Clone();
    protected virtual object DeepCopy();
    public LineFormat get_LineFormat();
    public Font get_Font();
    public DockingType get_Docking();
    public void set_Docking(DockingType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.LineFormat : DocumentObject {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnit <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private XColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private XDashStyle <DashStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <Style>k__BackingField;
    public bool Visible { get; public set; }
    public XUnit Width { get; public set; }
    public XColor Color { get; public set; }
    public XDashStyle DashStyle { get; public set; }
    public LineStyle Style { get; public set; }
    internal LineFormat(DocumentObject parent);
    public LineFormat Clone();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public XUnit get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(XUnit value);
    [CompilerGeneratedAttribute]
public XColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(XColor value);
    [CompilerGeneratedAttribute]
public XDashStyle get_DashStyle();
    [CompilerGeneratedAttribute]
public void set_DashStyle(XDashStyle value);
    [CompilerGeneratedAttribute]
public LineStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(LineStyle value);
}
public enum PdfSharp.Charting.LineStyle : Enum {
    public int value__;
    public static LineStyle Single;
}
public enum PdfSharp.Charting.MarkerStyle : Enum {
    public int value__;
    public static MarkerStyle None;
    public static MarkerStyle Circle;
    public static MarkerStyle Dash;
    public static MarkerStyle Diamond;
    public static MarkerStyle Dot;
    public static MarkerStyle Plus;
    public static MarkerStyle Square;
    public static MarkerStyle Star;
    public static MarkerStyle Triangle;
    public static MarkerStyle X;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.PlotArea : ChartObject {
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    [NullableAttribute("2")]
internal FillFormat _fillFormat;
    [CompilerGeneratedAttribute]
private XUnit <LeftPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnit <RightPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnit <TopPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnit <BottomPadding>k__BackingField;
    public LineFormat LineFormat { get; }
    public FillFormat FillFormat { get; }
    public XUnit LeftPadding { get; public set; }
    public XUnit RightPadding { get; public set; }
    public XUnit TopPadding { get; public set; }
    public XUnit BottomPadding { get; public set; }
    internal PlotArea(DocumentObject parent);
    public PlotArea Clone();
    protected virtual object DeepCopy();
    public LineFormat get_LineFormat();
    public FillFormat get_FillFormat();
    [CompilerGeneratedAttribute]
public XUnit get_LeftPadding();
    [CompilerGeneratedAttribute]
public void set_LeftPadding(XUnit value);
    [CompilerGeneratedAttribute]
public XUnit get_RightPadding();
    [CompilerGeneratedAttribute]
public void set_RightPadding(XUnit value);
    [CompilerGeneratedAttribute]
public XUnit get_TopPadding();
    [CompilerGeneratedAttribute]
public void set_TopPadding(XUnit value);
    [CompilerGeneratedAttribute]
public XUnit get_BottomPadding();
    [CompilerGeneratedAttribute]
public void set_BottomPadding(XUnit value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Point : ChartObject {
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    [NullableAttribute("2")]
internal FillFormat _fillFormat;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public LineFormat LineFormat { get; }
    public FillFormat FillFormat { get; }
    public double Value { get; public set; }
    public Point(double value);
    public Point Clone();
    protected virtual object DeepCopy();
    public LineFormat get_LineFormat();
    public FillFormat get_FillFormat();
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.PSCSR : object {
    internal static string PercentNotSupportedByColumnDataLabel { get; }
    internal static string InvalidChartTypeForCombination(ChartType chartType);
    internal static string get_PercentNotSupportedByColumnDataLabel();
    public static string RenderInfoNotInitialized(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.AreaChartRenderer : ColumnLikeChartRenderer {
    internal AreaChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void InitSeriesRendererInfo();
    internal void InitSeries();
}
internal class PdfSharp.Charting.Renderers.AreaPlotAreaRenderer : ColumnLikePlotAreaRenderer {
    [NullableContextAttribute("1")]
internal AreaPlotAreaRenderer(RendererParameters parms);
    internal virtual void Draw();
}
internal abstract class PdfSharp.Charting.Renderers.AreaRendererInfo : RendererInfo {
    private XRect _rect;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public XSize Size { get; public set; }
    public XRect Rect { get; public set; }
    public virtual double get_X();
    public virtual void set_X(double value);
    public virtual double get_Y();
    public virtual void set_Y(double value);
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual double get_Height();
    public virtual void set_Height(double value);
    public XSize get_Size();
    public void set_Size(XSize value);
    public XRect get_Rect();
    public void set_Rect(XRect value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.AxisRenderer : Renderer {
    protected static double DefaultLineWidth;
    protected static double DefaultGridLineWidth;
    protected static double DefaultMajorTickMarkLineWidth;
    protected static double DefaultMinorTickMarkLineWidth;
    protected static double DefaultMajorTickMarkWidth;
    protected static double DefaultMinorTickMarkWidth;
    protected static double SpaceBetweenLabelAndTickmark;
    internal AxisRenderer(RendererParameters parms);
    protected void InitAxisTitle(AxisRendererInfo rendererInfo, XFont defaultFont);
    protected void InitTickLabels(AxisRendererInfo rendererInfo, XFont defaultFont);
    protected void InitAxisLineFormat(AxisRendererInfo rendererInfo);
    protected void InitGridlines(AxisRendererInfo rendererInfo);
    protected abstract virtual string GetDefaultTickLabelsFormat();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.AxisRendererInfo : AreaRendererInfo {
    public Axis Axis;
    public double MinimumScale;
    public double MaximumScale;
    public double MajorTick;
    public double MinorTick;
    public TickMarkType MinorTickMark;
    public TickMarkType MajorTickMark;
    public double MajorTickMarkWidth;
    public double MinorTickMarkWidth;
    [NullableAttribute("1")]
public XPen MajorTickMarkLineFormat;
    [NullableAttribute("1")]
public XPen MinorTickMarkLineFormat;
    public XPen MajorGridlinesLineFormat;
    public XPen MinorGridlinesLineFormat;
    [NullableAttribute("1")]
public AxisTitleRendererInfo AxisTitleRendererInfo;
    public string TickLabelsFormat;
    [NullableAttribute("1")]
public XFont TickLabelsFont;
    [NullableAttribute("1")]
public XBrush TickLabelsBrush;
    public double TickLabelsHeight;
    internal XPen LineFormat;
    public XValues XValues;
    public XRect InnerRect;
    public XSize LabelSize;
    unknown double X {public set; }
    unknown double Y {public set; }
    unknown double Height {public set; }
    unknown double Width {public set; }
    public virtual void set_X(double value);
    public virtual void set_Y(double value);
    public virtual void set_Height(double value);
    public virtual void set_Width(double value);
}
internal class PdfSharp.Charting.Renderers.AxisTitleRenderer : Renderer {
    [NullableContextAttribute("1")]
internal AxisTitleRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.AxisTitleRendererInfo : AreaRendererInfo {
    public AxisTitle AxisTitle;
    public string AxisTitleText;
    public XFont AxisTitleFont;
    public XBrush AxisTitleBrush;
    public double AxisTitleOrientation;
    public HorizontalAlignment AxisTitleAlignment;
    public VerticalAlignment AxisTitleVerticalAlignment;
    public XSize AxisTitleSize;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.BarChartRenderer : ChartRenderer {
    internal BarChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private PlotAreaRenderer GetPlotAreaRenderer();
    private LegendRenderer GetLegendRenderer();
    private YAxisRenderer GetYAxisRenderer();
    private void InitSeriesRendererInfo();
    internal void InitSeries();
}
internal class PdfSharp.Charting.Renderers.BarClusteredLegendRenderer : ColumnLikeLegendRenderer {
    [NullableContextAttribute("1")]
internal BarClusteredLegendRenderer(RendererParameters parms);
    internal virtual void Draw();
}
internal class PdfSharp.Charting.Renderers.BarClusteredPlotAreaRenderer : BarPlotAreaRenderer {
    [NullableContextAttribute("1")]
internal BarClusteredPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcBars();
    protected virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
internal class PdfSharp.Charting.Renderers.BarDataLabelRenderer : DataLabelRenderer {
    [NullableContextAttribute("1")]
internal BarDataLabelRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    internal virtual void CalcPositions();
}
internal class PdfSharp.Charting.Renderers.BarGridlinesRenderer : GridlinesRenderer {
    [NullableContextAttribute("1")]
internal BarGridlinesRenderer(RendererParameters parms);
    internal virtual void Draw();
}
internal abstract class PdfSharp.Charting.Renderers.BarPlotAreaRenderer : PlotAreaRenderer {
    [NullableContextAttribute("1")]
internal BarPlotAreaRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    protected abstract virtual void CalcBars();
    protected abstract virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
internal class PdfSharp.Charting.Renderers.BarStackedPlotAreaRenderer : BarPlotAreaRenderer {
    [NullableContextAttribute("1")]
internal BarStackedPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcBars();
    protected virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
internal abstract class PdfSharp.Charting.Renderers.ChartRenderer : Renderer {
    private static double LegendSpacing;
    protected static double DefaultSeriesLineWidth;
    [NullableContextAttribute("1")]
internal ChartRenderer(RendererParameters parms);
    private static ChartRenderer();
    protected XRect LayoutLegend();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.ChartRendererInfo : AreaRendererInfo {
    public Chart Chart;
    [NullableAttribute("2")]
public AxisRendererInfo XAxisRendererInfo;
    [NullableAttribute("2")]
public AxisRendererInfo YAxisRendererInfo;
    public PlotAreaRendererInfo PlotAreaRendererInfo;
    [NullableAttribute("2")]
public LegendRendererInfo LegendRendererInfo;
    public SeriesRendererInfo[] SeriesRendererInfos;
    [NullableAttribute("2")]
private XFont _defaultFont;
    [NullableAttribute("2")]
private XFont _defaultDataLabelFont;
    public XFont DefaultFont { get; }
    public XFont DefaultDataLabelFont { get; }
    public XFont get_DefaultFont();
    public XFont get_DefaultDataLabelFont();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.ColumnChartRenderer : ColumnLikeChartRenderer {
    internal ColumnChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private PlotAreaRenderer GetPlotAreaRenderer();
    private YAxisRenderer GetYAxisRenderer();
    private void InitSeriesRendererInfo();
    internal void InitSeries();
}
internal class PdfSharp.Charting.Renderers.ColumnClusteredPlotAreaRenderer : ColumnPlotAreaRenderer {
    [NullableContextAttribute("1")]
internal ColumnClusteredPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcColumns();
    protected virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
internal class PdfSharp.Charting.Renderers.ColumnColors : object {
    [NullableAttribute("1")]
private static UInt32[] SeriesColorValues;
    private static ColumnColors();
    public static XColor Item(int index);
}
internal class PdfSharp.Charting.Renderers.ColumnDataLabelRenderer : DataLabelRenderer {
    [NullableContextAttribute("1")]
internal ColumnDataLabelRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    internal virtual void CalcPositions();
}
internal abstract class PdfSharp.Charting.Renderers.ColumnLikeChartRenderer : ChartRenderer {
    [NullableContextAttribute("1")]
internal ColumnLikeChartRenderer(RendererParameters parms);
    internal void CalcLayout();
}
internal class PdfSharp.Charting.Renderers.ColumnLikeGridlinesRenderer : GridlinesRenderer {
    [NullableContextAttribute("1")]
internal ColumnLikeGridlinesRenderer(RendererParameters parms);
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.ColumnLikeLegendRenderer : LegendRenderer {
    internal ColumnLikeLegendRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
}
internal abstract class PdfSharp.Charting.Renderers.ColumnLikePlotAreaRenderer : PlotAreaRenderer {
    [NullableContextAttribute("1")]
internal ColumnLikePlotAreaRenderer(RendererParameters parms);
    internal virtual void Format();
}
internal abstract class PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer : ColumnLikePlotAreaRenderer {
    [NullableContextAttribute("1")]
internal ColumnPlotAreaRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    protected abstract virtual void CalcColumns();
    protected abstract virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
internal class PdfSharp.Charting.Renderers.ColumnRendererInfo : PointRendererInfo {
    public XRect Rect;
}
internal class PdfSharp.Charting.Renderers.ColumnStackedPlotAreaRenderer : ColumnPlotAreaRenderer {
    [NullableContextAttribute("1")]
internal ColumnStackedPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcColumns();
    protected virtual bool IsDataInside(double yMin, double yMax, double yValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.CombinationChartRenderer : ChartRenderer {
    internal CombinationChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void InitSeriesRendererInfo();
    private void DistributeSeries();
}
internal class PdfSharp.Charting.Renderers.CombinationRendererInfo : ChartRendererInfo {
    [NullableAttribute("1")]
public SeriesRendererInfo[] CommonSeriesRendererInfos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SeriesRendererInfo[] AreaSeriesRendererInfos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SeriesRendererInfo[] ColumnSeriesRendererInfos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SeriesRendererInfo[] LineSeriesRendererInfos;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class PdfSharp.Charting.Renderers.Converter : object {
    internal static XFont ToXFont(Font font, XFont defaultFont);
    internal static XPen ToXPen(LineFormat lineFormat, XPen defaultPen);
    internal static XPen ToXPen(LineFormat lineFormat, XColor defaultColor, double defaultWidth, XDashStyle defaultDashStyle);
    internal static XBrush ToXBrush(FillFormat fillFormat, XColor defaultColor);
    internal static XBrush ToXBrush(Font font, XColor defaultColor);
}
internal class PdfSharp.Charting.Renderers.DataLabelEntryRendererInfo : AreaRendererInfo {
    [NullableAttribute("1")]
public string Text;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.DataLabelRenderer : Renderer {
    internal DataLabelRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal abstract virtual void CalcPositions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.DataLabelRendererInfo : RendererInfo {
    public DataLabelEntryRendererInfo[] Entries;
    public string Format;
    public XFont Font;
    public XBrush FontColor;
    public DataLabelPosition Position;
    public DataLabelType Type;
}
internal abstract class PdfSharp.Charting.Renderers.GridlinesRenderer : Renderer {
    [NullableContextAttribute("1")]
internal GridlinesRenderer(RendererParameters parms);
}
internal class PdfSharp.Charting.Renderers.HorizontalStackedYAxisRenderer : HorizontalYAxisRenderer {
    [NullableContextAttribute("1")]
internal HorizontalStackedYAxisRenderer(RendererParameters parms);
    protected virtual void CalcYAxis(Double& yMin, Double& yMax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.HorizontalXAxisRenderer : XAxisRenderer {
    internal HorizontalXAxisRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void CalculateXAxisValues(AxisRendererInfo rendererInfo);
    private void InitXValues(AxisRendererInfo rendererInfo);
    private void GetTickMarkPos(AxisRendererInfo rendererInfo, Double& majorTickMarkStart, Double& majorTickMarkEnd, Double& minorTickMarkStart, Double& minorTickMarkEnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.HorizontalYAxisRenderer : YAxisRenderer {
    internal HorizontalYAxisRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void InitScale(AxisRendererInfo rendererInfo);
    private void GetTickMarkPos(AxisRendererInfo rendererInfo, Double& majorTickMarkStart, Double& majorTickMarkEnd, Double& minorTickMarkStart, Double& minorTickMarkEnd);
    protected virtual void CalcYAxis(Double& yMin, Double& yMax);
}
internal class PdfSharp.Charting.Renderers.LegendEntryRenderer : Renderer {
    private static double MarkerWidth;
    private static double MaxLegendMarkerWidth;
    private static double MaxLegendMarkerHeight;
    private static double SpacingBetweenMarkerAndText;
    [NullableContextAttribute("1")]
internal LegendEntryRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.LegendEntryRendererInfo : AreaRendererInfo {
    public SeriesRendererInfo SeriesRendererInfo;
    public LegendRendererInfo LegendRendererInfo;
    public string EntryText;
    public XSize MarkerSize;
    public XPen MarkerPen;
    public XBrush MarkerBrush;
    public XSize MarkerArea;
    public XSize TextSize;
}
internal abstract class PdfSharp.Charting.Renderers.LegendRenderer : Renderer {
    protected static double LeftPadding;
    protected static double RightPadding;
    protected static double TopPadding;
    protected static double BottomPadding;
    protected static double EntrySpacing;
    protected static double DefaultLineWidth;
    [NullableContextAttribute("1")]
internal LegendRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.LegendRendererInfo : AreaRendererInfo {
    public Legend Legend;
    public XFont Font;
    public XBrush FontColor;
    public XPen BorderPen;
    public LegendEntryRendererInfo[] Entries;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.LineChartRenderer : ColumnLikeChartRenderer {
    internal LineChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void InitSeriesRendererInfo();
    internal void InitSeries();
}
internal static class PdfSharp.Charting.Renderers.LineColors : object {
    [NullableAttribute("1")]
private static UInt32[] LineColorValues;
    private static LineColors();
    public static XColor Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.LineFormatRenderer : object {
    private XGraphics _gfx;
    [NullableAttribute("2")]
private XPen _pen;
    public LineFormatRenderer(XGraphics gfx, LineFormat lineFormat, double defaultWidth);
    public LineFormatRenderer(XGraphics gfx, LineFormat lineFormat);
    public LineFormatRenderer(XGraphics gfx, XPen pen);
    public void DrawLine(XPoint pt0, XPoint pt1);
    public void DrawRectangle(XRect rect);
    public void DrawPath(XGraphicsPath path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.LinePlotAreaRenderer : ColumnLikePlotAreaRenderer {
    internal LinePlotAreaRenderer(RendererParameters parms);
    internal virtual void Draw();
    private void DrawMarker(XGraphics graphics, XPoint[] points, SeriesRendererInfo rendererInfo);
}
internal class PdfSharp.Charting.Renderers.MarkerRenderer : object {
    [NullableContextAttribute("1")]
internal static void Draw(XGraphics graphics, XPoint pos, MarkerRendererInfo rendererInfo);
}
internal class PdfSharp.Charting.Renderers.MarkerRendererInfo : RendererInfo {
    public XUnit MarkerSize;
    public MarkerStyle MarkerStyle;
    public XColor MarkerForegroundColor;
    public XColor MarkerBackgroundColor;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.PieChartRenderer : ChartRenderer {
    internal PieChartRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private PlotAreaRenderer GetPlotAreaRenderer();
    protected void InitSeries(ChartRendererInfo rendererInfo);
}
internal class PdfSharp.Charting.Renderers.PieClosedPlotAreaRenderer : PiePlotAreaRenderer {
    [NullableContextAttribute("1")]
internal PieClosedPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcSectors();
}
internal static class PdfSharp.Charting.Renderers.PieColors : object {
    [NullableAttribute("1")]
private static UInt32[] SectorColorValues;
    private static PieColors();
    public static XColor Item(int index);
}
internal class PdfSharp.Charting.Renderers.PieDataLabelRenderer : DataLabelRenderer {
    [NullableContextAttribute("1")]
internal PieDataLabelRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    internal virtual void CalcPositions();
}
internal class PdfSharp.Charting.Renderers.PieExplodedPlotAreaRenderer : PiePlotAreaRenderer {
    [NullableContextAttribute("1")]
internal PieExplodedPlotAreaRenderer(RendererParameters parms);
    protected virtual void CalcSectors();
}
internal class PdfSharp.Charting.Renderers.PieLegendRenderer : LegendRenderer {
    [NullableContextAttribute("1")]
internal PieLegendRenderer(RendererParameters parms);
    [NullableContextAttribute("2")]
internal virtual RendererInfo Init();
}
internal abstract class PdfSharp.Charting.Renderers.PiePlotAreaRenderer : PlotAreaRenderer {
    [NullableContextAttribute("1")]
internal PiePlotAreaRenderer(RendererParameters parms);
    internal virtual void Format();
    internal virtual void Draw();
    protected abstract virtual void CalcSectors();
}
internal class PdfSharp.Charting.Renderers.PlotAreaBorderRenderer : Renderer {
    [NullableContextAttribute("1")]
internal PlotAreaBorderRenderer(RendererParameters parms);
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.PlotAreaRenderer : Renderer {
    protected static double DefaultLineWidth;
    internal PlotAreaRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    protected void InitLineFormat(PlotAreaRendererInfo rendererInfo);
    protected void InitFillFormat(PlotAreaRendererInfo rendererInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.PlotAreaRendererInfo : AreaRendererInfo {
    public PlotArea PlotArea;
    public XMatrix Matrix;
    public XPen LineFormat;
    public XBrush FillFormat;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.PointRendererInfo : RendererInfo {
    public Point Point;
    public XPen LineFormat;
    public XBrush FillFormat;
    public void Check();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.Renderer : object {
    protected RendererParameters _rendererParms;
    internal Renderer(RendererParameters rendererParms);
    [NullableContextAttribute("2")]
internal virtual RendererInfo Init();
    internal virtual void Format();
    internal abstract virtual void Draw();
}
internal abstract class PdfSharp.Charting.Renderers.RendererInfo : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.RendererParameters : object {
    [CompilerGeneratedAttribute]
private XGraphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DrawingItem>k__BackingField;
    [CompilerGeneratedAttribute]
private XRect <Box>k__BackingField;
    [CompilerGeneratedAttribute]
private RendererInfo <RendererInfo>k__BackingField;
    public XGraphics Graphics { get; public set; }
    public object DrawingItem { get; public set; }
    public XRect Box { get; public set; }
    public RendererInfo RendererInfo { get; public set; }
    public RendererParameters(XGraphics gfx, double x, double y, double width, double height);
    public RendererParameters(XGraphics gfx, XRect boundingBox);
    [CompilerGeneratedAttribute]
public XGraphics get_Graphics();
    [CompilerGeneratedAttribute]
public void set_Graphics(XGraphics value);
    [CompilerGeneratedAttribute]
public object get_DrawingItem();
    [CompilerGeneratedAttribute]
public void set_DrawingItem(object value);
    [CompilerGeneratedAttribute]
public XRect get_Box();
    [CompilerGeneratedAttribute]
public void set_Box(XRect value);
    [CompilerGeneratedAttribute]
public RendererInfo get_RendererInfo();
    [CompilerGeneratedAttribute]
public void set_RendererInfo(RendererInfo value);
}
internal class PdfSharp.Charting.Renderers.SectorRendererInfo : PointRendererInfo {
    public XRect Rect;
    public double StartAngle;
    public double SweepAngle;
    public void Check();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.SeriesRendererInfo : RendererInfo {
    public Series Series;
    [NullableAttribute("2")]
public DataLabelRendererInfo DataLabelRendererInfo;
    public PointRendererInfo[] PointRendererInfos;
    public XPen LineFormat;
    public XBrush FillFormat;
    public MarkerRendererInfo MarkerRendererInfo;
    public double SumOfPoints { get; }
    public double get_SumOfPoints();
}
internal class PdfSharp.Charting.Renderers.VerticalStackedYAxisRenderer : VerticalYAxisRenderer {
    [NullableContextAttribute("1")]
internal VerticalStackedYAxisRenderer(RendererParameters parms);
    protected virtual void CalcYAxis(Double& yMin, Double& yMax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.VerticalXAxisRenderer : XAxisRenderer {
    internal VerticalXAxisRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void CalculateXAxisValues(AxisRendererInfo rendererInfo);
    private void InitXValues(AxisRendererInfo rendererInfo);
    private void GetTickMarkPos(AxisRendererInfo rendererInfo, Double& majorTickMarkStart, Double& majorTickMarkEnd, Double& minorTickMarkStart, Double& minorTickMarkEnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PdfSharp.Charting.Renderers.VerticalYAxisRenderer : YAxisRenderer {
    internal VerticalYAxisRenderer(RendererParameters parms);
    internal virtual RendererInfo Init();
    internal virtual void Format();
    internal virtual void Draw();
    private void InitScale(AxisRendererInfo rendererInfo);
    private void GetTickMarkPos(AxisRendererInfo rendererInfo, Double& majorTickMarkStart, Double& majorTickMarkEnd, Double& minorTickMarkStart, Double& minorTickMarkEnd);
    protected virtual void CalcYAxis(Double& yMin, Double& yMax);
}
internal class PdfSharp.Charting.Renderers.WallRenderer : Renderer {
    [NullableContextAttribute("1")]
internal WallRenderer(RendererParameters parameters);
    internal virtual void Draw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.XAxisRenderer : AxisRenderer {
    internal XAxisRenderer(RendererParameters parameters);
    protected virtual string GetDefaultTickLabelsFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class PdfSharp.Charting.Renderers.YAxisRenderer : AxisRenderer {
    internal YAxisRenderer(RendererParameters parms);
    protected void FineTuneYAxis(AxisRendererInfo rendererInfo, double yMin, double yMax);
    protected virtual string GetDefaultTickLabelsFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.Series : ChartObject {
    [NullableAttribute("2")]
internal SeriesElements _seriesElements;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
internal LineFormat _lineFormat;
    [NullableAttribute("2")]
internal FillFormat _fillFormat;
    [CompilerGeneratedAttribute]
private XUnit <MarkerSize>k__BackingField;
    internal MarkerStyle _markerStyle;
    internal bool _markerStyleInitialized;
    [CompilerGeneratedAttribute]
private XColor <MarkerForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XColor <MarkerBackgroundColor>k__BackingField;
    internal ChartType _chartType;
    [NullableAttribute("2")]
internal DataLabel _dataLabel;
    [CompilerGeneratedAttribute]
private bool <HasDataLabel>k__BackingField;
    public SeriesElements Elements { get; }
    public string Name { get; public set; }
    public LineFormat LineFormat { get; }
    public FillFormat FillFormat { get; }
    public XUnit MarkerSize { get; public set; }
    public MarkerStyle MarkerStyle { get; public set; }
    public XColor MarkerForegroundColor { get; public set; }
    public XColor MarkerBackgroundColor { get; public set; }
    public ChartType ChartType { get; public set; }
    public DataLabel DataLabel { get; }
    public bool HasDataLabel { get; public set; }
    public int Count { get; }
    public Series Clone();
    protected virtual object DeepCopy();
    public void AddBlank();
    public Point Add(double value);
    public void Add(Double[] values);
    public SeriesElements get_Elements();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public LineFormat get_LineFormat();
    public FillFormat get_FillFormat();
    [CompilerGeneratedAttribute]
public XUnit get_MarkerSize();
    [CompilerGeneratedAttribute]
public void set_MarkerSize(XUnit value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    [CompilerGeneratedAttribute]
public XColor get_MarkerForegroundColor();
    [CompilerGeneratedAttribute]
public void set_MarkerForegroundColor(XColor value);
    [CompilerGeneratedAttribute]
public XColor get_MarkerBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_MarkerBackgroundColor(XColor value);
    public ChartType get_ChartType();
    public void set_ChartType(ChartType value);
    public DataLabel get_DataLabel();
    [CompilerGeneratedAttribute]
public bool get_HasDataLabel();
    [CompilerGeneratedAttribute]
public void set_HasDataLabel(bool value);
    public int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class PdfSharp.Charting.SeriesCollection : DocumentObjectCollection {
    public Series Item { get; }
    internal SeriesCollection(DocumentObject parent);
    public Series get_Item(int index);
    public SeriesCollection Clone();
    public Series AddSeries();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class PdfSharp.Charting.SeriesElements : DocumentObjectCollection {
    public Point Item { get; }
    internal SeriesElements(DocumentObject parent);
    public Point get_Item(int index);
    public SeriesElements Clone();
    public void AddBlank();
    public Point Add(double value);
    public void Add(Double[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.TickLabels : ChartObject {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NullableAttribute("2")]
internal Font _font;
    public string Format { get; public set; }
    public Font Font { get; }
    internal TickLabels(DocumentObject parent);
    public TickLabels Clone();
    protected virtual object DeepCopy();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    public Font get_Font();
}
public enum PdfSharp.Charting.TickMarkType : Enum {
    public int value__;
    public static TickMarkType None;
    public static TickMarkType Inside;
    public static TickMarkType Outside;
    public static TickMarkType Cross;
}
public enum PdfSharp.Charting.Underline : Enum {
    public int value__;
    public static Underline None;
    public static Underline Single;
    public static Underline Words;
    public static Underline Dotted;
    public static Underline Dash;
    public static Underline DotDash;
    public static Underline DotDotDash;
}
public enum PdfSharp.Charting.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class PdfSharp.Charting.XSeries : ChartObject {
    private XSeriesElements _xSeriesElements;
    [NullableAttribute("2")]
public XValue Item { get; }
    public int Count { get; }
    [NullableContextAttribute("2")]
public XValue get_Item(int index);
    public XSeries Clone();
    protected virtual object DeepCopy();
    public void AddBlank();
    public XValue Add(string value);
    public void Add(String[] values);
    public IEnumerator GetEnumerator();
    public int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.XSeriesElements : DocumentObjectCollection {
    public XSeriesElements Clone();
    public void AddBlank();
    public XValue Add(string value);
    public void Add(String[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Charting.XValue : ChartObject {
    internal string ValueField;
    public XValue(string value);
    public XValue Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class PdfSharp.Charting.XValues : DocumentObjectCollection {
    public XSeries Item { get; }
    internal XValues(DocumentObject parent);
    public XValues Clone();
    public XSeries get_Item(int index);
    public XSeries AddXSeries();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
