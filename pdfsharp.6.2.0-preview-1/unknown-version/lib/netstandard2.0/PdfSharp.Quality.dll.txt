[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class PdfSharp.Quality.AssetsHelper : object {
    public static string GetAssetsFolder(string path);
    public static void EnsureAssets(string path);
}
public class PdfSharp.Quality.DefaultFontResolver_unused : object {
    [NullableContextAttribute("1")]
public sealed virtual FontResolverInfo ResolveTypeface(string familyName, bool isBold, bool isItalic);
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetFont(string faceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PdfSharp.Quality.DocTag : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class PdfSharp.Quality.Feature : FeatureAndSnippetBase {
    protected void RenderSnippetAsPdf(Snippet snippet);
    protected void RenderSnippetAsPdf(Snippet snippet, XUnit width, XUnit height, XGraphicsUnit graphicsUnit, XPageDirection pageDirection);
    protected virtual void RenderAllSnippets();
    protected PdfDocument CreateNewPdfDocument();
    protected string SaveToStreamOrSaveToFile(PdfDocument document, Stream stream, string filenameTag, bool show);
    protected string SaveAndShowDocument(PdfDocument document, string filenameTag);
    protected string SaveDocument(PdfDocument document, string filenameTag);
    protected string ReadWritePdfDocument(string filename, PdfPasswordProvider passwordProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class PdfSharp.Quality.FeatureAndSnippetBase : object {
    public static double WidthInPoint;
    public static double HeightInPoint;
    public static double WidthInMillimeter;
    public static double HeightInMillimeter;
    public static double WidthInPU;
    public static double HeightInPU;
    public static double BoxWidth;
    public static double BoxHeight;
    [CompilerGeneratedAttribute]
private XPoint <BoxCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private XSolidBrush <Gray>k__BackingField;
    [NullableAttribute("2")]
private PdfDocument _document;
    [NullableAttribute("2")]
private PdfPage _page;
    [NullableAttribute("2")]
private XGraphics _xgfx;
    private Byte[] _pdfBytes;
    private Byte[] _pngBytes;
    private Byte[] _comparisonBytes;
    public XPoint BoxCenter { get; }
    protected XSolidBrush Gray { get; }
    public static string PdfSharpTechnology { get; }
    public PdfDocument Document { get; private set; }
    public PdfPage Page { get; private set; }
    public XGraphics XGraphics { get; private set; }
    [NullableAttribute("2")]
public Byte[] PdfBytes { get; private set; }
    public Byte[] PngBytes { get; private set; }
    public Byte[] ComparisonBytes { get; private set; }
    [CompilerGeneratedAttribute]
public XPoint get_BoxCenter();
    [CompilerGeneratedAttribute]
protected XSolidBrush get_Gray();
    public static string get_PdfSharpTechnology();
    public void BeginPdfDocument();
    public void EndPdfDocument();
    public XGraphics BeginPdfPage();
    public XGraphics BeginPdfPage(XUnit width, XUnit height, XGraphicsUnit graphicsUnit, XPageDirection pageDirection);
    public void EndPdfPage();
    public void GenerateParallelComparisonDocument();
    public void GenerateSerialComparisonDocument();
    private void DrawPdfToBox(XGraphics gfx, XRect box);
    private void DrawImageToBox(XGraphics gfx, XRect box);
    private void DrawEmptyBox(XGraphics gfx, XRect box);
    public string SaveAndShowFile(Byte[] sourceBytes, string filepath, bool startViewer);
    private string GetFileExtension(Byte[] sourceBytes);
    [ObsoleteAttribute("Use a XxxUtility class.")]
public string SaveAndShowPdfDocument(string filepath, bool startViewer);
    [ObsoleteAttribute("Use a XxxUtility class.")]
public string SaveAndShowPngImage(string filepath, bool startViewer);
    [ObsoleteAttribute("Use a XxxUtility class.")]
public string SaveAndShowComparisonDocument(string filepath, bool startViewer);
    [ObsoleteAttribute("Use a XxxUtility class.")]
public void SaveStreamToFile(Stream stream, string path);
    public void BeginImage();
    public void EndPngImage();
    public PdfDocument get_Document();
    private void set_Document(PdfDocument value);
    public PdfPage get_Page();
    private void set_Page(PdfPage value);
    public XGraphics get_XGraphics();
    private void set_XGraphics(XGraphics value);
    [NullableContextAttribute("2")]
public Byte[] get_PdfBytes();
    [NullableContextAttribute("2")]
private void set_PdfBytes(Byte[] value);
    public Byte[] get_PngBytes();
    private void set_PngBytes(Byte[] value);
    public Byte[] get_ComparisonBytes();
    private void set_ComparisonBytes(Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class PdfSharp.Quality.FontHelper : object {
    public static Byte[] LoadFontData(string name);
    public static Byte[] LoadFontData(string name, Assembly assembly);
}
public static class PdfSharp.Quality.FontUtility : object {
}
[ObsoleteAttribute("Use IOUtility.")]
public static class PdfSharp.Quality.IOHelper : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class PdfSharp.Quality.IOUtility : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    private static string _solutionRoot;
    private static string _assetsPath;
    private static string _tempPath;
    [NullableAttribute("1")]
private static string AssetsVersionFileName;
    [NullableAttribute("1")]
private static string AssetsInfo;
    public static bool IsDirectorySeparator(char ch);
    public static void NormalizeDirectorySeparators(String& path);
    public static string GetSolutionRoot();
    public static string GetAssetsPath(string relativePathOrFileInAsset);
    public static string GetTempPath(string relativeDirectoryInTemp);
    [NullableContextAttribute("1")]
public static string GetViewerWatchDirectory();
    public static string GetTempFileName(string namePrefix, string extension, bool addInfo);
    public static string GetTempFullFileName(string namePrefix, string extension, bool addOS);
    [NullableContextAttribute("1")]
public static string FindLatestTempFile(string namePrefix, string path, string extension, bool recursive);
    public static void EnsureAssets(string relativeFileOrDirectory, Nullable`1<int> requiredAssetsVersion);
    public static void EnsureAssetsVersion(int requiredAssetsVersion);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <FindLatestTempFile>g__FindFile|13_0(string searchPattern, ValueTuple`2& result, string directory, bool recursive);
}
public static class PdfSharp.Quality.PathHelper : object {
    [NullableContextAttribute("1")]
public static string FindPath(string folderName, string subPath);
}
public static class PdfSharp.Quality.PdfDocUtility : object {
    [NullableContextAttribute("1")]
public static PdfDocument CreateNewPdfDocument(string title);
}
public static class PdfSharp.Quality.PdfFileFormatter : object {
    [NullableContextAttribute("1")]
public static void FormatDocument(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class PdfSharp.Quality.PdfFileUtility : object {
    public static string GetTempPdfFileName(string namePrefix, bool addInfo);
    public static string GetTempPdfFullFileName(string namePrefix, bool addInfo);
    [NullableContextAttribute("2")]
public static string FindLatestPdfTempFile(string name, string path, bool recursive);
    public static string SaveDocument(PdfDocument doc, string name, bool addInfo);
    public static string SaveAndShowDocument(PdfDocument doc, string name, bool addInfo);
    public static string SaveAndShowDocumentIfDebugging(PdfDocument doc, string name, bool addInfo);
    public static void ShowDocument(string pdfFilename);
    public static void ShowDocumentIfDebugging(string pdfFilename);
    [CompilerGeneratedAttribute]
internal static void <ShowDocument>g__CopyFile|6_0(string pdfFilename);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class PdfSharp.Quality.Snippet : FeatureAndSnippetBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathName>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxOptions <BoxOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cleanroom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoGraphic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoText>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <FontNameStd>k__BackingField;
    [NullableAttribute("2")]
private XFont _fontStd;
    [NullableAttribute("2")]
private XFont _fontHeader;
    [CompilerGeneratedAttribute]
private static XRect <RectBox>k__BackingField;
    public string Title { get; public set; }
    public string PathName { get; public set; }
    protected BoxOptions BoxOption { get; protected set; }
    public bool Cleanroom { get; public set; }
    public bool NoGraphic { get; public set; }
    public bool NoText { get; public set; }
    public static string FontNameStd { get; }
    public XFont FontStd { get; }
    public XFont FontHeader { get; }
    protected static XRect RectBox { get; }
    protected static XPoint[] Pentagram { get; }
    private static Snippet();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_PathName();
    [CompilerGeneratedAttribute]
public void set_PathName(string value);
    [CompilerGeneratedAttribute]
protected BoxOptions get_BoxOption();
    [CompilerGeneratedAttribute]
protected void set_BoxOption(BoxOptions value);
    [CompilerGeneratedAttribute]
public bool get_Cleanroom();
    [CompilerGeneratedAttribute]
public void set_Cleanroom(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoGraphic();
    [CompilerGeneratedAttribute]
public void set_NoGraphic(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoText();
    [CompilerGeneratedAttribute]
public void set_NoText(bool value);
    [CompilerGeneratedAttribute]
public static string get_FontNameStd();
    public XFont get_FontStd();
    public XFont get_FontHeader();
    protected void DrawNotSupportedFeature(XGraphics gfx);
    public void DrawHeader(XGraphics gfx, string renderTarget);
    public void DrawHeader(string renderTarget);
    public void DrawPdfHeader();
    public void DrawPngHeader();
    public abstract virtual void RenderSnippet(XGraphics gfx);
    public void RenderSnippet();
    public void RenderSnippetAsPdf();
    public void RenderSnippetAsPdf(XUnit width, XUnit height, XGraphicsUnit graphicsUnit, XPageDirection pageDirection);
    public void RenderSnippetAsPng();
    public PdfPage CreatePdfPage(PdfDocument doc);
    protected void BeginBox(XGraphics gfx, int n, BoxOptions options, string description);
    protected void BeginBox(XGraphics gfx, int boxNumber);
    protected void BeginBox(XGraphics gfx, int boxNumber, BoxOptions options);
    protected void EndBox(XGraphics gfx);
    protected void DrawTiledBox(XGraphics gfx, double x, double y, double width, double height, double delta);
    [CompilerGeneratedAttribute]
protected static XRect get_RectBox();
    protected static void DrawCenterPoint(XGraphics gfx);
    protected static void DrawAlignmentGrid(XGraphics gfx, bool highlightHorizontal, bool highlightVertical);
    protected void DrawArtBox(XGraphics gfx);
    protected static XPoint[] get_Pentagram();
    protected static XPoint[] GetPentagram(double size, XPoint center);
    public static PdfDocument HelloWorldFactory(string message, bool unicode);
    public static XGraphics GfxForLastPage(PdfDocument doc);
}
[ExtensionAttribute]
public static class PdfSharp.Quality.XGraphicsDevExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void DrawMeasureBox(XGraphics gfx, string text, XFont font, XPoint pos);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Runtime.CompilerServices.RuntimeHelpers : object {
    [NullableContextAttribute("1")]
public static T[] GetSubArray(T[] array, Range range);
}
