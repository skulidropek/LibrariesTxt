[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class Perfolizer.Attributes.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class Perfolizer.Attributes.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Perfolizer.Attributes.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class Perfolizer.Attributes.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class Perfolizer.Attributes.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class Perfolizer.Attributes.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class Perfolizer.Attributes.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class Perfolizer.Attributes.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class Perfolizer.Attributes.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class Perfolizer.Attributes.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class Perfolizer.Attributes.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Perfolizer.Collections.CollectionExtensions : object {
    [ExtensionAttribute]
public static Double[] CopyToArray(IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Double[] CopyToArrayAndSort(IEnumerable`1<double> values);
    [ExtensionAttribute]
internal static int WhichMin(IReadOnlyList`1<double> source, int start, int length);
    [ExtensionAttribute]
internal static int WhichMin(IReadOnlyList`1<double> source);
    [ExtensionAttribute]
internal static int WhichMax(IReadOnlyList`1<double> source, int start, int length);
    [ExtensionAttribute]
internal static int WhichMax(IReadOnlyList`1<double> source);
    [ExtensionAttribute]
public static Sample ToSample(IEnumerable`1<double> values, MeasurementUnit unit);
    [ExtensionAttribute]
public static bool IsEmpty(IReadOnlyCollection`1<T> value);
    [ExtensionAttribute]
public static bool IsNotEmpty(IReadOnlyCollection`1<T> value);
    [ExtensionAttribute]
public static bool IsEmpty(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static bool IsNotEmpty(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> ToReadOnlyList(IEnumerable`1<T> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Perfolizer.Collections.IdenticalReadOnlyList`1 : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public int Count { get; }
    public T Value { get; }
    public T Item { get; }
    public IdenticalReadOnlyList`1(int count, T value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public T get_Value();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Perfolizer.Common.Assertion : object {
    public static void NotNull(string name, object value);
    public static void NotNullOrEmpty(string name, IReadOnlyList`1<T> values);
    public static void NotNullOrEmpty(string name, Sample sample);
    public static void ItemNotNull(string name, IReadOnlyList`1<T> values);
    public static void InRangeInclusive(string name, double value, double min, double max);
    public static void InRangeInclusive(string name, int value, int min, int max);
    public static void InRangeInclusive(string name, IReadOnlyList`1<double> values, double min, double max);
    public static void InRangeExclusive(string name, double value, double min, double max);
    public static void Positive(string name, double value);
    public static void Positive(string name, int value);
    public static void Positive(string name, IReadOnlyList`1<double> values);
    public static void NonNegative(string name, double value);
    public static void MoreThan(string name, double value, int threshold);
    public static void MoreThan(string name, int value, int threshold);
    public static void SizeLargerThan(string name, Sample sample, int threshold);
    public static void Equal(string name1, int value1, string name2, int value2);
    public static void Equal(MeasurementUnit unit1, MeasurementUnit unit2);
    public static void Equal(string name, double value, double expectedValue, double eps);
    public static void NonWeighted(string name, Sample sample);
    private static string Format(string format, Object[] args);
}
internal static class Perfolizer.Common.DefaultCultureInfo : object {
    [NullableAttribute("1")]
public static CultureInfo Instance;
    private static DefaultCultureInfo();
}
public class Perfolizer.Exceptions.EmptySequenceException : InvalidOperationException {
}
public class Perfolizer.Exceptions.InvalidMeasurementUnitExceptions : InvalidOperationException {
    [NullableContextAttribute("1")]
public InvalidMeasurementUnitExceptions(MeasurementUnit expected, MeasurementUnit actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Exceptions.WeightedSampleNotSupportedException : ArgumentException {
    protected WeightedSampleNotSupportedException(SerializationInfo info, StreamingContext context);
    public WeightedSampleNotSupportedException(string message);
    public WeightedSampleNotSupportedException(string message, Exception innerException);
    public WeightedSampleNotSupportedException(string message, string paramName);
    public WeightedSampleNotSupportedException(string message, string paramName, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Perfolizer.Extensions.DoubleExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(double value);
    [ExtensionAttribute]
public static string ToStringInvariant(double value, string format);
    [ExtensionAttribute]
public static string ToStringInvariant(Probability p);
    [ExtensionAttribute]
public static string ToStringInvariant(Probability p, string format);
    [ExtensionAttribute]
public static Measurement WithUnit(double value, MeasurementUnit unit);
}
[ExtensionAttribute]
internal static class Perfolizer.Extensions.IntExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Measurement AsMeasurement(int value);
    [ExtensionAttribute]
public static int Abs(int value);
}
[ExtensionAttribute]
internal static class Perfolizer.Extensions.RandomExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static double NextDouble(Random random, double min, double max);
}
[ExtensionAttribute]
internal static class Perfolizer.Extensions.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringBuilder TrimEnd(StringBuilder builder, Char[] trimChars);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Perfolizer.Extensions.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsBlank(string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNotBlank(string value);
    [ExtensionAttribute]
public static bool EquationsIgnoreCase(string a, string b);
    [ExtensionAttribute]
public static bool StartWithIgnoreCase(string a, string b);
    [ExtensionAttribute]
public static string JoinToString(IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static string CapitalizeFirst(string s);
    [ExtensionAttribute]
public static string ToCamelCase(string s);
    [ExtensionAttribute]
public static bool StartsWith(string s, char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Helpers.CpuBrandHelper : object {
    private static Lazy`1<Dictionary`2<string, string>> KnownMicroarchitectures;
    private static CpuBrandHelper();
    [ExtensionAttribute]
public static string ToFullBrandName(PhdCpu cpu);
    [ExtensionAttribute]
public static string ToShortBrandName(PhdCpu cpu, bool includeMaxFrequency);
    [NullableContextAttribute("2")]
private static string GetBrandStyledActualFrequency(Nullable`1<Frequency> frequency);
    private static string ParseMicroarchitecture(string processorName);
    internal static string ParseIntelCoreMicroarchitecture(string modelNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Perfolizer.Helpers.HashCodeHelper : ValueType {
    private int hashCode;
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    [IsReadOnlyAttribute]
public int ToHashCode();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10);
    private static int Hash(int hashCode, T value);
    private static int Hash(int hashCode, T value, IEqualityComparer`1<T> comparer);
    [ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Helpers.OsBrandHelper : object {
    private static Dictionary`2<string, string> WindowsBrandVersions;
    private static OsBrandHelper();
    public static string Prettify(string osName, string osVersion, string windowsUbr);
    private static string PrettifyWindows(string osVersion, string windowsUbr);
    public static string PrettifyMacOSX(string systemVersion, string kernelVersion);
    [ExtensionAttribute]
public static string ToBrandString(PhdOs os);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Perfolizer.Helpers.ResourceHelper : object {
    internal static string LoadResource(string resourceName);
    private static Stream GetResourceStream(string resourceName);
}
internal static class Perfolizer.Helpers.StreamHelper : object {
    [NullableContextAttribute("1")]
public static string StreamToString(Action`1<StreamWriter> dump);
}
public static class Perfolizer.Helpers.StringHelper : object {
    [NullableContextAttribute("1")]
public static string FirstUpper(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Perfolizer.Helpers.UnicodeHelper : object {
    public static char Mu;
    private static Dictionary`2<char, string> CharMap;
    private static UnicodeHelper();
    [ExtensionAttribute]
public static string ConvertToAscii(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Perfolizer.Horology.Chronometer : object {
    public static IClock Stopwatch;
    public static IClock DateTime;
    public static IClock WindowsClock;
    public static IClock BestClock;
    public static Frequency Frequency { get; }
    public static HardwareTimerKind HardwareTimerKind { get; }
    private static Chronometer();
    public static Frequency get_Frequency();
    public static long GetTimestamp();
    public static StartedClock Start();
    public static TimeInterval GetResolution();
    public static HardwareTimerKind get_HardwareTimerKind();
    public static HardwareTimerKind GetHardwareTimerKind(Frequency frequency);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Horology.ClockExtensions : object {
    [ExtensionAttribute]
public static TimeInterval GetResolution(IClock clock);
    [ExtensionAttribute]
public static StartedClock Start(IClock clock);
}
[IsReadOnlyAttribute]
public class Perfolizer.Horology.ClockSpan : ValueType {
    [CompilerGeneratedAttribute]
private long <startTimestamp>P;
    [CompilerGeneratedAttribute]
private long <endTimestamp>P;
    [CompilerGeneratedAttribute]
private Frequency <frequency>P;
    public ClockSpan(long startTimestamp, long endTimestamp, Frequency frequency);
    public double GetSeconds();
    public double GetNanoseconds();
    public long GetDateTimeTicks();
    public TimeSpan GetTimeSpan();
    public TimeInterval GetTimeValue();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal class Perfolizer.Horology.DateTimeClock : object {
    private static long TicksPerSecond;
    [NullableAttribute("1")]
public string Title { get; }
    public bool IsAvailable { get; }
    public Frequency Frequency { get; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Title();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual Frequency get_Frequency();
    public sealed virtual long GetTimestamp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Horology.Frequency : ValueType {
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Hertz>k__BackingField;
    public static Frequency Zero;
    public static Frequency Hz;
    public static Frequency KHz;
    public static Frequency MHz;
    public static Frequency GHz;
    public double Hertz { get; }
    private MeasurementUnit Perfolizer.Metrology.IWithUnits.Unit { get; }
    public Frequency(double hertz);
    public Frequency(double value, FrequencyUnit unit);
    private static Frequency();
    [CompilerGeneratedAttribute]
public double get_Hertz();
    public TimeInterval ToResolution();
    public double ToHz();
    public double ToKHz();
    public double ToMHz();
    public double ToGHz();
    public static Frequency FromHz(double value);
    public static Frequency FromKHz(double value);
    public static Frequency FromMHz(double value);
    public static Frequency FromGHz(double value);
    public static Frequency op_Implicit(double value);
    public static double op_Implicit(Frequency property);
    public static double op_Division(Frequency a, Frequency b);
    public static Frequency op_Division(Frequency a, double k);
    public static Frequency op_Division(Frequency a, int k);
    public static Frequency op_Multiply(Frequency a, double k);
    public static Frequency op_Multiply(Frequency a, int k);
    public static Frequency op_Multiply(double k, Frequency a);
    public static Frequency op_Multiply(int k, Frequency a);
    public static bool op_LessThan(Frequency a, Frequency b);
    public static bool op_GreaterThan(Frequency a, Frequency b);
    public static bool op_LessThanOrEqual(Frequency a, Frequency b);
    public static bool op_GreaterThanOrEqual(Frequency a, Frequency b);
    public static bool op_Equality(Frequency a, Frequency b);
    public static bool op_Inequality(Frequency a, Frequency b);
    public static bool TryParse(string s, FrequencyUnit unit, Frequency& freq);
    public static bool TryParse(string s, FrequencyUnit unit, NumberStyles numberStyle, IFormatProvider formatProvider, Frequency& freq);
    [NullableContextAttribute("2")]
public static bool TryParseHz(string s, Frequency& freq);
    public static bool TryParseHz(string s, NumberStyles numberStyle, IFormatProvider formatProvider, Frequency& freq);
    [NullableContextAttribute("2")]
public static bool TryParseKHz(string s, Frequency& freq);
    public static bool TryParseKHz(string s, NumberStyles numberStyle, IFormatProvider formatProvider, Frequency& freq);
    [NullableContextAttribute("2")]
public static bool TryParseMHz(string s, Frequency& freq);
    public static bool TryParseMHz(string s, NumberStyles numberStyle, IFormatProvider formatProvider, Frequency& freq);
    [NullableContextAttribute("2")]
public static bool TryParseGHz(string s, Frequency& freq);
    public static bool TryParseGHz(string s, NumberStyles numberStyle, IFormatProvider formatProvider, Frequency& freq);
    private sealed virtual override MeasurementUnit Perfolizer.Metrology.IWithUnits.get_Unit();
    public sealed virtual double GetShift(Sample sample);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("2")]
public string ToString(FrequencyUnit frequencyUnit, string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public sealed virtual bool Equals(Frequency other);
    public bool Equals(Frequency other, double hertzEpsilon);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Frequency other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Horology.FrequencyUnit : MeasurementUnit {
    public static FrequencyUnit Hz;
    public static FrequencyUnit KHz;
    public static FrequencyUnit MHz;
    public static FrequencyUnit GHz;
    public static FrequencyUnit[] All;
    public FrequencyUnit(string abbreviation, string fullName, long baseUnits);
    private static FrequencyUnit();
    public Frequency ToFrequency(long value);
    public static double Convert(double value, FrequencyUnit from, FrequencyUnit to);
    public static FrequencyUnit GetBestFrequencyUnit(Double[] values);
}
public enum Perfolizer.Horology.HardwareTimerKind : Enum {
    public int value__;
    public static HardwareTimerKind System;
    public static HardwareTimerKind Tsc;
    public static HardwareTimerKind Acpi;
    public static HardwareTimerKind Hpet;
    public static HardwareTimerKind Unknown;
}
[NullableContextAttribute("1")]
public interface Perfolizer.Horology.IClock {
    public string Title { get; }
    public bool IsAvailable { get; }
    public Frequency Frequency { get; }
    public abstract virtual string get_Title();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual Frequency get_Frequency();
    public abstract virtual long GetTimestamp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Horology.StartedClock : ValueType {
    private IClock clock;
    private long startTimestamp;
    public StartedClock(IClock clock, long startTimestamp);
    public ClockSpan GetElapsed();
    public virtual string ToString();
}
internal class Perfolizer.Horology.StopwatchClock : object {
    [NullableAttribute("1")]
public string Title { get; }
    public bool IsAvailable { get; }
    public Frequency Frequency { get; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Title();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual Frequency get_Frequency();
    public sealed virtual long GetTimestamp();
}
[IsReadOnlyAttribute]
public class Perfolizer.Horology.TimeInterval : ValueType {
    [NullableAttribute("1")]
private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Nanoseconds>k__BackingField;
    public static TimeInterval Zero;
    public static TimeInterval Nanosecond;
    public static TimeInterval Microsecond;
    public static TimeInterval Millisecond;
    public static TimeInterval Second;
    public static TimeInterval Minute;
    public static TimeInterval Hour;
    public static TimeInterval Day;
    public double Nanoseconds { get; }
    [NullableAttribute("1")]
public MeasurementUnit Unit { get; }
    public TimeInterval(double nanoseconds);
    [NullableContextAttribute("1")]
public TimeInterval(double value, TimeUnit unit);
    private static TimeInterval();
    [CompilerGeneratedAttribute]
public double get_Nanoseconds();
    public Frequency ToFrequency();
    public TimeInterval Abs();
    public double ToNanoseconds();
    public double ToMicroseconds();
    public double ToMilliseconds();
    public double ToSeconds();
    public double ToMinutes();
    public double ToHours();
    public double ToDays();
    public static TimeInterval FromNanoseconds(double value);
    public static TimeInterval FromMicroseconds(double value);
    public static TimeInterval FromMilliseconds(double value);
    public static TimeInterval FromSeconds(double value);
    public static TimeInterval FromMinutes(double value);
    public static TimeInterval FromHours(double value);
    public static TimeInterval FromDays(double value);
    public static double op_Division(TimeInterval a, TimeInterval b);
    public static TimeInterval op_Division(TimeInterval a, double k);
    public static TimeInterval op_Division(TimeInterval a, int k);
    public static TimeInterval op_Multiply(TimeInterval a, double k);
    public static TimeInterval op_Multiply(TimeInterval a, int k);
    public static TimeInterval op_Multiply(double k, TimeInterval a);
    public static TimeInterval op_Multiply(int k, TimeInterval a);
    public static bool op_LessThan(TimeInterval a, TimeInterval b);
    public static bool op_GreaterThan(TimeInterval a, TimeInterval b);
    public static bool op_LessThanOrEqual(TimeInterval a, TimeInterval b);
    public static bool op_GreaterThanOrEqual(TimeInterval a, TimeInterval b);
    public static bool op_Equality(TimeInterval a, TimeInterval b);
    public static bool op_Inequality(TimeInterval a, TimeInterval b);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("2")]
public string ToString(TimeUnit timeUnit, string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public sealed virtual int CompareTo(TimeInterval other);
    public sealed virtual bool Equals(TimeInterval other);
    public bool Equals(TimeInterval other, double nanosecondEpsilon);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public sealed virtual MeasurementUnit get_Unit();
    [NullableContextAttribute("1")]
public sealed virtual double GetShift(Sample sample);
}
[ExtensionAttribute]
public static class Perfolizer.Horology.TimeSpanExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToFormattedTotalTime(TimeSpan time, CultureInfo cultureInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Horology.TimeUnit : MeasurementUnit {
    public static TimeUnit Nanosecond;
    public static TimeUnit Microsecond;
    public static TimeUnit Millisecond;
    public static TimeUnit Second;
    public static TimeUnit Minute;
    public static TimeUnit Hour;
    public static TimeUnit Day;
    public static TimeUnit[] All;
    public TimeUnit(string abbreviation, string fullName, long baseUnits);
    private static TimeUnit();
    public TimeInterval ToInterval(long value);
    public static TimeUnit GetBestTimeUnit(Double[] values);
    public static double Convert(double value, TimeUnit from, TimeUnit to);
    public static bool TryParse(string s, TimeUnit& unit);
    public static TimeUnit Parse(string s);
}
internal class Perfolizer.Horology.WindowsClock : object {
    private static bool GlobalIsAvailable;
    private static long GlobalFrequency;
    [NullableAttribute("1")]
public string Title { get; }
    public bool IsAvailable { get; }
    public Frequency Frequency { get; }
    private static WindowsClock();
    private static bool QueryPerformanceCounter(Int64& value);
    private static bool QueryPerformanceFrequency(Int64& value);
    [SecurityCriticalAttribute]
private static bool Initialize(Int64& qpf);
    [NullableContextAttribute("1")]
public sealed virtual string get_Title();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual Frequency get_Frequency();
    public sealed virtual long GetTimestamp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Json.LightJsonSerializer : object {
    private static int IndentStep;
    private LightJsonSettings settings;
    private int currentIndent;
    private StringBuilder builder;
    [NullableContextAttribute("2")]
private LightJsonSerializer(LightJsonSettings settings);
    public static string Serialize(object obj, LightJsonSettings settings);
    public virtual string ToString();
    private LightJsonSerializer Append(object obj);
    private void AppendPhdObject(PhdObject phdObject);
    private void AppendDictionary(IDictionary dictionary);
    private void AppendValue(bool isFirst, string key, object value);
    [NullableContextAttribute("2")]
private static bool IsEmptyValue(object value);
    private void AppendCollection(ICollection collection);
    private void AppendString(string value);
    private void AppendBool(bool value);
    private void AppendEnum(Enum enumValue);
    private void AppendGuidValue(Guid value);
    private void AppendDateTimeOffset(DateTimeOffset value);
    private void AppendMeasurementUnit(MeasurementUnit unit);
    private void AppendMetric(PhdMetric metric);
    private void AppendInt(int value);
    private void AppendLong(long value);
    private void AppendDouble(double value);
    private void AppendIndent();
    private void AppendNextLine();
    private void AppendSpace();
}
public class Perfolizer.Json.LightJsonSettings : object {
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    public bool Indent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
}
public static class Perfolizer.Mathematics.Common.BinomialCoefficientHelper : object {
    public static int MaxAcceptableN;
    [NullableAttribute("2")]
private static Int64[0...,0...] pascalTriangle;
    public static long BinomialCoefficient(int n, int k);
    public static double LogBinomialCoefficient(double n, double k);
    public static double BinomialCoefficient(double n, double k);
}
public enum Perfolizer.Mathematics.Common.ComparisonResult : Enum {
    public int value__;
    public static ComparisonResult Greater;
    public static ComparisonResult Indistinguishable;
    public static ComparisonResult Lesser;
    public static ComparisonResult Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.ConfidenceInterval : ValueType {
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Estimation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Upper>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfidenceLevel <ConfidenceLevel>k__BackingField;
    public double Estimation { get; }
    public double Lower { get; }
    public double Upper { get; }
    public ConfidenceLevel ConfidenceLevel { get; }
    public double Margin { get; }
    public ConfidenceInterval(double estimation, double lower, double upper, ConfidenceLevel confidenceLevel);
    [CompilerGeneratedAttribute]
public double get_Estimation();
    [CompilerGeneratedAttribute]
public double get_Lower();
    [CompilerGeneratedAttribute]
public double get_Upper();
    [CompilerGeneratedAttribute]
public ConfidenceLevel get_ConfidenceLevel();
    public double get_Margin();
    public bool Contains(double value, double eps);
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format, IFormatProvider formatProvider, bool showLevel);
    public sealed virtual bool Equals(ConfidenceInterval other);
    public bool Equals(ConfidenceInterval other, IEqualityComparer`1<double> comparer);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Perfolizer.Mathematics.Common.ConfidenceIntervalEstimator : object {
    [CompilerGeneratedAttribute]
private double <SampleSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Estimation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardError>k__BackingField;
    public double SampleSize { get; }
    public double Estimation { get; }
    public double StandardError { get; }
    private double DegreeOfFreedom { get; }
    public ConfidenceIntervalEstimator(double sampleSize, double estimation, double standardError);
    [CompilerGeneratedAttribute]
public double get_SampleSize();
    [CompilerGeneratedAttribute]
public double get_Estimation();
    [CompilerGeneratedAttribute]
public double get_StandardError();
    private double get_DegreeOfFreedom();
    public ConfidenceInterval ConfidenceInterval(ConfidenceLevel confidenceLevel);
    public double ZLevel(ConfidenceLevel confidenceLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.ConfidenceLevel : ValueType {
    public double Value;
    public static ConfidenceLevel L50;
    public static ConfidenceLevel L70;
    public static ConfidenceLevel L75;
    public static ConfidenceLevel L80;
    public static ConfidenceLevel L85;
    public static ConfidenceLevel L90;
    public static ConfidenceLevel L92;
    public static ConfidenceLevel L95;
    public static ConfidenceLevel L96;
    public static ConfidenceLevel L97;
    public static ConfidenceLevel L98;
    public static ConfidenceLevel L99;
    public static ConfidenceLevel L999;
    public static ConfidenceLevel L9999;
    public ConfidenceLevel(double value);
    private static ConfidenceLevel();
    public static double op_Implicit(ConfidenceLevel level);
    public static ConfidenceLevel op_Implicit(double value);
    public virtual string ToString();
    public string ToString(string format, IFormatProvider formatProvider);
}
public static class Perfolizer.Mathematics.Common.Constants : object {
    public static double EulerMascheroni;
    public static double Log2;
    public static double Sqrt2;
    public static double Sqrt2Pi;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Common.Deltas : object {
    [CompilerGeneratedAttribute]
private double <Shift>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ratio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EffectSize>k__BackingField;
    public double Shift { get; }
    public double Ratio { get; }
    public double EffectSize { get; }
    public Deltas(double shift, double ratio, double effectSize);
    [CompilerGeneratedAttribute]
public double get_Shift();
    [CompilerGeneratedAttribute]
public double get_Ratio();
    [CompilerGeneratedAttribute]
public double get_EffectSize();
    public bool IsBelow(Deltas other);
    public bool IsAbove(Deltas other);
}
[ExtensionAttribute]
internal static class Perfolizer.Mathematics.Common.MathExtensions : object {
    [ExtensionAttribute]
public static double Abs(double x);
    [ExtensionAttribute]
public static double Sqr(double x);
    [ExtensionAttribute]
public static double Sqrt(double x);
    [ExtensionAttribute]
public static double Pow(int x, double k);
    [ExtensionAttribute]
public static double Pow(double x, double k);
    [ExtensionAttribute]
public static double Clamp(double x, double min, double max);
    [ExtensionAttribute]
public static int Clamp(int x, int min, int max);
    [ExtensionAttribute]
public static int RoundToInt(double x);
    [ExtensionAttribute]
public static long RoundToLong(double x);
    [ExtensionAttribute]
public static long PowInt(int x, int k);
    [ExtensionAttribute]
public static long PowLong(long x, int k);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<double> Clamp(IEnumerable`1<double> values, double min, double max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.Moments : ValueType {
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Variance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Skewness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Kurtosis>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardDeviation>k__BackingField;
    public double Mean { get; }
    public double Variance { get; }
    public double Skewness { get; }
    public double Kurtosis { get; }
    public double StandardDeviation { get; }
    public Moments(double mean, double variance, double skewness, double kurtosis);
    [CompilerGeneratedAttribute]
public double get_Mean();
    [CompilerGeneratedAttribute]
public double get_Variance();
    [CompilerGeneratedAttribute]
public double get_Skewness();
    [CompilerGeneratedAttribute]
public double get_Kurtosis();
    [CompilerGeneratedAttribute]
public double get_StandardDeviation();
    public static Moments Create(IReadOnlyList`1<double> values);
    public static Moments Create(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Perfolizer.Mathematics.Common.PairwiseEstimatorHelper : object {
    public static double Estimate(Sample x, Func`3<double, double, double> func, IQuantileEstimator estimator, Probability p, bool includeDiagonal);
    public static double Estimate(Sample x, Sample y, Func`3<double, double, double> func, IQuantileEstimator estimator, Probability p);
}
public static class Perfolizer.Mathematics.Common.PrecisionHelper : object {
    [NullableContextAttribute("1")]
public static int GetOptimalPrecision(IReadOnlyList`1<double> values);
}
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.Probability : ValueType {
    public static Probability Zero;
    public static Probability Half;
    public static Probability Median;
    public static Probability One;
    public static Probability NaN;
    public double Value;
    public Probability(double value);
    private static Probability();
    public static Probability Of(double value);
    public static double op_Implicit(Probability probability);
    public static Probability op_Implicit(double value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual bool Equals(Probability other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Probability other);
    [NullableContextAttribute("1")]
public static Probability[] ToProbabilities(Double[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.Range : ValueType {
    public static Range PositiveInfinity;
    public static Range NegativeInfinity;
    public static Range Zero;
    public static Range NaN;
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    public double Left { get; }
    public double Right { get; }
    public double Middle { get; }
    private Range(double left, double right);
    private static Range();
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public double get_Right();
    public double get_Middle();
    public static Range Of(double left, double right);
    public bool IsInside(Range outerRange);
    public bool ContainsInclusive(double value);
    [NullableContextAttribute("2")]
public string ToString(CultureInfo cultureInfo, string format);
    public string ToString(string format);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Common.Ranker : object {
    public static Ranker Instance;
    private static Ranker();
    public Double[] GetRanks(IReadOnlyList`1<double> x, double eps);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.Common.SignificanceLevel : ValueType {
    public double Value;
    public static SignificanceLevel P05;
    public static SignificanceLevel P01;
    public static SignificanceLevel P005;
    public static SignificanceLevel P001;
    public static SignificanceLevel P0005;
    public static SignificanceLevel P0001;
    public static SignificanceLevel P1E5;
    public static SignificanceLevel P1E6;
    public static SignificanceLevel P1E7;
    public static SignificanceLevel P1E8;
    public static SignificanceLevel P1E9;
    public SignificanceLevel(double value);
    private static SignificanceLevel();
    public static double op_Implicit(SignificanceLevel level);
    public static SignificanceLevel op_Implicit(double value);
    public virtual string ToString();
    public string ToString(string format, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Cpd.EdPeltChangePointDetector : PeltChangePointDetector {
    public static EdPeltChangePointDetector Instance;
    private static EdPeltChangePointDetector();
    public virtual ICostCalculator CreateCostCalculator(Double[] data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.Cpd.PeltChangePointDetector : object {
    public abstract virtual ICostCalculator CreateCostCalculator(Double[] data);
    public Int32[] GetChangePointIndexes(Double[] data, int minDistance);
    [CompilerGeneratedAttribute]
internal static double <GetChangePointIndexes>g__Cost|2_0(int tau0, int tau1, int tau2, <>c__DisplayClass2_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Cpd.RqqPeltChangePointDetector : PeltChangePointDetector {
    private static double DefaultSensitivity;
    private static int DefaultQuantileCount;
    private static double DefaultHeterogeneityFactor;
    private static double DefaultHomogeneityFactor;
    public static RqqPeltChangePointDetector Instance;
    private double sensitivity;
    private int quantileCount;
    private double heterogeneityFactor;
    private double homogeneityFactor;
    private Double[] probabilities;
    private Double[] factors;
    public RqqPeltChangePointDetector(double sensitivity, int quantileCount, double heterogeneityFactor, double homogeneityFactor);
    internal RqqPeltChangePointDetector(Double[] probabilities, Double[] factors, double sensitivity, double heterogeneityFactor, double homogeneityFactor);
    private static RqqPeltChangePointDetector();
    public virtual ICostCalculator CreateCostCalculator(Double[] data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.BetaDistribution : object {
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Beta>k__BackingField;
    private Lazy`1<double> lazyMedian;
    public double Alpha { get; }
    public double Beta { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public double Skewness { get; }
    public BetaDistribution(double alpha, double beta);
    [CompilerGeneratedAttribute]
public double get_Alpha();
    [CompilerGeneratedAttribute]
public double get_Beta();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    public double get_Skewness();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private double <.ctor>b__7_0();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.CauchyDistribution : object {
    [CompilerGeneratedAttribute]
private double <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    public double Location { get; }
    public double Scale { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public CauchyDistribution(double location, double scale);
    [CompilerGeneratedAttribute]
public double get_Location();
    [CompilerGeneratedAttribute]
public double get_Scale();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class Perfolizer.Mathematics.Distributions.ContinuousDistributions.DistributionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RandomGenerator Random(IContinuousDistribution distribution, int seed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.DistributionRandomGenerator : RandomGenerator {
    private IContinuousDistribution distribution;
    public DistributionRandomGenerator(IContinuousDistribution distribution);
    public DistributionRandomGenerator(IContinuousDistribution distribution, int seed);
    public DistributionRandomGenerator(IContinuousDistribution distribution, Random random);
    public virtual double Next();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.ExponentialDistribution : object {
    [CompilerGeneratedAttribute]
private double <Rate>k__BackingField;
    public double Rate { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public ExponentialDistribution(double rate);
    [CompilerGeneratedAttribute]
public double get_Rate();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.FrechetDistribution : object {
    [CompilerGeneratedAttribute]
private double <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Shape>k__BackingField;
    public double Location { get; }
    public double Scale { get; }
    public double Shape { get; }
    private double M { get; }
    private double S { get; }
    private double A { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public FrechetDistribution(double location, double scale, double shape);
    [CompilerGeneratedAttribute]
public double get_Location();
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public double get_Shape();
    private double get_M();
    private double get_S();
    private double get_A();
    private double Z(double x);
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.GeneralizedLambdaDistribution : object {
    [CompilerGeneratedAttribute]
private double <Mu>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sigma>k__BackingField;
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    public double Mu { get; }
    public double Sigma { get; }
    public double A { get; }
    public double B { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public GeneralizedLambdaDistribution(double mu, double sigma, double a, double b);
    [CompilerGeneratedAttribute]
public double get_Mu();
    [CompilerGeneratedAttribute]
public double get_Sigma();
    [CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public double get_B();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.GumbelDistribution : object {
    [CompilerGeneratedAttribute]
private double <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    public double Location { get; }
    public double Scale { get; }
    private double M { get; }
    private double S { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public GumbelDistribution(double location, double scale);
    [CompilerGeneratedAttribute]
public double get_Location();
    [CompilerGeneratedAttribute]
public double get_Scale();
    private double get_M();
    private double get_S();
    private double Z(double x);
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Distributions.ContinuousDistributions.IContinuousDistribution {
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public abstract virtual double Pdf(double x);
    public abstract virtual double Cdf(double x);
    public abstract virtual double Quantile(Probability p);
    public abstract virtual RandomGenerator Random(Random random);
    public abstract virtual double get_Mean();
    public abstract virtual double get_Median();
    public abstract virtual double get_Variance();
    public abstract virtual double get_StandardDeviation();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.LaplaceDistribution : object {
    [CompilerGeneratedAttribute]
private double <Mu>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sigma>k__BackingField;
    public double Mu { get; }
    public double Sigma { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public LaplaceDistribution(double mu, double sigma);
    [CompilerGeneratedAttribute]
public double get_Mu();
    [CompilerGeneratedAttribute]
public double get_Sigma();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.LogNormalDistribution : object {
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardDeviation>k__BackingField;
    public double Mean { get; }
    public double StandardDeviation { get; }
    public double Median { get; }
    public double Variance { get; }
    public LogNormalDistribution(double mean, double stdDev);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Mean();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StandardDeviation();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.MixtureDistribution : object {
    private int n;
    private IReadOnlyList`1<IContinuousDistribution> distributions;
    private IReadOnlyList`1<double> weights;
    private InverseMonotonousFunction inverseCdf;
    private Lazy`1<string> lazyToString;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Median>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Variance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardDeviation>k__BackingField;
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public MixtureDistribution(IContinuousDistribution[] distributions);
    public MixtureDistribution(IReadOnlyList`1<IContinuousDistribution> distributions, IReadOnlyList`1<double> weights);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Mean();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Median();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Variance();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StandardDeviation();
    private static Double[] GetDefaultWeights(IReadOnlyList`1<IContinuousDistribution> distributions);
    private double Aggregate(Func`2<IContinuousDistribution, double> func);
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public sealed virtual RandomGenerator Random(Random random);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.NormalDistribution : object {
    public static NormalDistribution Standard;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardDeviation>k__BackingField;
    public double Mean { get; }
    public double StandardDeviation { get; }
    public double Median { get; }
    public double Variance { get; }
    public double Skewness { get; }
    public NormalDistribution(double mean, double stdDev);
    private static NormalDistribution();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Mean();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StandardDeviation();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public RandomGenerator Random();
    public RandomGenerator Random(int seed);
    public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public double get_Skewness();
    public static double Gauss(double x);
    public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.ParetoDistribution : object {
    [CompilerGeneratedAttribute]
private double <Xm>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    public double Xm { get; }
    public double Alpha { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public ParetoDistribution(double xm, double alpha);
    [CompilerGeneratedAttribute]
public double get_Xm();
    [CompilerGeneratedAttribute]
public double get_Alpha();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.ShiftedDistribution : object {
    private IContinuousDistribution distribution;
    private double shift;
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public ShiftedDistribution(IContinuousDistribution distribution, double shift);
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.StudentDistribution : object {
    private double df;
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public StudentDistribution(double df);
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.TriangularDistribution : object {
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mode>k__BackingField;
    public double Min { get; }
    public double Max { get; }
    public double Mode { get; }
    private double A { get; }
    private double B { get; }
    private double C { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public TriangularDistribution(double min, double max, double mode);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public double get_Mode();
    private double get_A();
    private double get_B();
    private double get_C();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.TukeyGhDistribution : object {
    [CompilerGeneratedAttribute]
private double <Mu>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sigma>k__BackingField;
    [CompilerGeneratedAttribute]
private double <G>k__BackingField;
    [CompilerGeneratedAttribute]
private double <H>k__BackingField;
    public double Mu { get; }
    public double Sigma { get; }
    public double G { get; }
    public double H { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public TukeyGhDistribution(double mu, double sigma, double g, double h);
    [CompilerGeneratedAttribute]
public double get_Mu();
    [CompilerGeneratedAttribute]
public double get_Sigma();
    [CompilerGeneratedAttribute]
public double get_G();
    [CompilerGeneratedAttribute]
public double get_H();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.UniformDistribution : object {
    public static UniformDistribution Standard;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    public double Min { get; }
    public double Max { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public double Skewness { get; }
    public UniformDistribution(double min, double max);
    private static UniformDistribution();
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public double get_Max();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    public double get_Skewness();
    public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.ContinuousDistributions.WeibullDistribution : object {
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Shape>k__BackingField;
    public double Scale { get; }
    public double Shape { get; }
    private double Lambda { get; }
    private double K { get; }
    public double Mean { get; }
    public double Median { get; }
    public double Variance { get; }
    public double StandardDeviation { get; }
    public WeibullDistribution(double shape, double scale);
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public double get_Shape();
    private double get_Lambda();
    private double get_K();
    public sealed virtual double Pdf(double x);
    public sealed virtual double Cdf(double x);
    public sealed virtual double Quantile(Probability p);
    [NullableContextAttribute("1")]
public sealed virtual RandomGenerator Random(Random random);
    public sealed virtual double get_Mean();
    public sealed virtual double get_Median();
    public sealed virtual double get_Variance();
    public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Perfolizer.Mathematics.Distributions.DiscreteDistributions.BinomialDistribution : object {
    [CompilerGeneratedAttribute]
private int <N>k__BackingField;
    [CompilerGeneratedAttribute]
private Probability <P>k__BackingField;
    public int N { get; }
    public Probability P { get; }
    public BinomialDistribution(int n, Probability p);
    [CompilerGeneratedAttribute]
public int get_N();
    [CompilerGeneratedAttribute]
public Probability get_P();
    public sealed virtual double Pmf(int k);
    public sealed virtual double Cdf(int k);
    public sealed virtual int Quantile(Probability p);
}
public interface Perfolizer.Mathematics.Distributions.DiscreteDistributions.IDiscreteDistribution {
    public abstract virtual double Pmf(int k);
    public abstract virtual double Cdf(int k);
    public abstract virtual int Quantile(Probability p);
}
public class Perfolizer.Mathematics.EffectSizes.CohenDEffectSize : object {
    [NullableAttribute("1")]
public static CohenDEffectSize Instance;
    private static CohenDEffectSize();
    [NullableContextAttribute("1")]
public sealed virtual double EffectSize(Sample x, Sample y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.EffectSizes.DiffEffectSize : object {
    [CompilerGeneratedAttribute]
private IShiftEstimator <shiftEstimator>P;
    [CompilerGeneratedAttribute]
private IScaleEstimator <scaleEstimator>P;
    public static DiffEffectSize HodgesLehmannShamos;
    public DiffEffectSize(IShiftEstimator shiftEstimator, IScaleEstimator scaleEstimator);
    private static DiffEffectSize();
    public sealed virtual double EffectSize(Sample x, Sample y);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.EffectSizes.IEffectSizeEstimator {
    public abstract virtual double EffectSize(Sample x, Sample y);
}
public static class Perfolizer.Mathematics.Functions.BetaFunction : object {
    public static double CompleteValue(double a, double b);
    public static double CompleteLogValue(double a, double b);
    public static double IncompleteValue(double a, double b, double x);
    public static double IncompleteLogValue(double a, double b, double x);
    public static double RegularizedIncompleteValue(double a, double b, double x);
    public static double RegularizedIncompleteInverseValue(double a, double b, double p);
    [CompilerGeneratedAttribute]
internal static double <RegularizedIncompleteValue>g__Normalize|4_0(double z);
}
public static class Perfolizer.Mathematics.Functions.ErrorFunction : object {
    public static double Value(double x);
    public static double InverseValue(double p);
}
public static class Perfolizer.Mathematics.Functions.FactorialFunction : object {
    public static double Value(int n);
    public static double LogValue(int n);
    public static double LogValue(double n);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Functions.GammaEffectSizeFunction : QuantileCompareFunction {
    private static MedianAbsoluteDeviationEstimator DefaultMedianAbsoluteDeviationEstimator;
    public static GammaEffectSizeFunction Instance;
    private static double Eps;
    private MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator;
    [NullableContextAttribute("2")]
public GammaEffectSizeFunction(MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    private static GammaEffectSizeFunction();
    public virtual double Value(Sample a, Sample b, Probability probability);
    public virtual Double[] Values(Sample a, Sample b, IReadOnlyList`1<Probability> probabilities);
    public static double Pooled(int n1, int n2, double value1, double value2);
    protected virtual double CalculateValue(double quantileA, double quantileB);
}
public static class Perfolizer.Mathematics.Functions.GammaFunction : object {
    public static double Value(double x);
    public static double LogValue(double x);
    private static double StirlingApproximation(double x);
    private static double StirlingApproximationLog(double x);
    private static double GetSeriesValue(double x);
}
public static class Perfolizer.Mathematics.Functions.HypergeometricFunction : object {
    public static double Value(double a, double b, double c, double z, int k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Functions.InverseMonotonousFunction : object {
    private Func`2<double, double> referenceFunction;
    private double min;
    private double max;
    private bool isIncreasing;
    public InverseMonotonousFunction(Func`2<double, double> referenceFunction, double min, double max);
    public double Value(double x, double eps);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.Functions.QuantileCompareFunction : object {
    [CompilerGeneratedAttribute]
private IQuantileEstimator <QuantileEstimator>k__BackingField;
    protected IQuantileEstimator QuantileEstimator { get; }
    [NullableContextAttribute("2")]
protected QuantileCompareFunction(IQuantileEstimator quantileEstimator);
    [CompilerGeneratedAttribute]
protected IQuantileEstimator get_QuantileEstimator();
    public virtual double Value(Sample a, Sample b, Probability probability);
    public virtual Double[] Values(Sample a, Sample b, IReadOnlyList`1<Probability> probabilities);
    protected abstract virtual double CalculateValue(double quantileA, double quantileB);
    public Range Range(Sample a, Sample b, Probability margin, Nullable`1<int> quantizationCount);
    public Range Range(Sample a, Sample b);
}
public class Perfolizer.Mathematics.Functions.RatioFunction : QuantileCompareFunction {
    [NullableAttribute("1")]
public static QuantileCompareFunction Instance;
    [NullableContextAttribute("2")]
public RatioFunction(IQuantileEstimator quantileEstimator);
    private static RatioFunction();
    protected virtual double CalculateValue(double quantileA, double quantileB);
}
public class Perfolizer.Mathematics.Functions.ShiftFunction : QuantileCompareFunction {
    [NullableAttribute("1")]
public static QuantileCompareFunction Instance;
    [NullableContextAttribute("2")]
public ShiftFunction(IQuantileEstimator quantileEstimator);
    private static ShiftFunction();
    protected virtual double CalculateValue(double quantileA, double quantileB);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.GenericEstimators.DeltasEstimator : object {
    [CompilerGeneratedAttribute]
private IShiftEstimator <shiftEstimator>P;
    [CompilerGeneratedAttribute]
private IRatioEstimator <ratioEstimator>P;
    [CompilerGeneratedAttribute]
private IEffectSizeEstimator <effectSizeEstimator>P;
    public static DeltasEstimator HodgesLehmannShamos;
    public DeltasEstimator(IShiftEstimator shiftEstimator, IRatioEstimator ratioEstimator, IEffectSizeEstimator effectSizeEstimator);
    private static DeltasEstimator();
    public Deltas Deltas(Sample x, Sample y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.GenericEstimators.HodgesLehmannEstimator : object {
    [CompilerGeneratedAttribute]
private IQuantileEstimator <quantileEstimator>P;
    public static HodgesLehmannEstimator Instance;
    public HodgesLehmannEstimator(IQuantileEstimator quantileEstimator);
    private static HodgesLehmannEstimator();
    public sealed virtual double Median(Sample x);
    public sealed virtual double Shift(Sample x, Sample y);
    public sealed virtual double Ratio(Sample x, Sample y);
    private double Estimate(Sample x, Sample y, Func`3<double, double, double> func);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.GenericEstimators.IMedianEstimator {
    public abstract virtual double Median(Sample x);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.GenericEstimators.IRatioEstimator {
    public abstract virtual double Ratio(Sample x, Sample y);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.GenericEstimators.IShiftEstimator {
    public abstract virtual double Shift(Sample x, Sample y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.AdaptiveHistogramBuilder : object {
    public static IHistogramBuilder Instance;
    private static double Resolution;
    private static AdaptiveHistogramBuilder();
    public sealed virtual Histogram Build(IReadOnlyList`1<double> values);
    public sealed virtual Histogram Build(IReadOnlyList`1<double> values, double binSize);
    public static double OptimalBinSize(int n, double standardDeviation);
    private static double NiceFloor(double value);
    private static double NiceCeiling(double value);
    [CompilerGeneratedAttribute]
internal static bool <Build>g__Inside|3_0(double x, <>c__DisplayClass3_0& );
}
public enum Perfolizer.Mathematics.Histograms.BinSizeRule : Enum {
    public int value__;
    public static BinSizeRule FreedmanDiaconis;
    public static BinSizeRule Scott;
    public static BinSizeRule Scott2;
    public static BinSizeRule SquareRoot;
    public static BinSizeRule Sturges;
    public static BinSizeRule Rice;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.DensityHistogram : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DensityHistogramBin> <Bins>k__BackingField;
    public IReadOnlyList`1<DensityHistogramBin> Bins { get; }
    public double GlobalLower { get; }
    public double GlobalUpper { get; }
    public DensityHistogram(IReadOnlyList`1<DensityHistogramBin> bins);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DensityHistogramBin> get_Bins();
    public double get_GlobalLower();
    public double get_GlobalUpper();
    public string Present(string format);
}
public class Perfolizer.Mathematics.Histograms.DensityHistogramBin : object {
    [CompilerGeneratedAttribute]
private double <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Upper>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Lower { get; }
    public double Upper { get; }
    public double Height { get; }
    public double Middle { get; }
    public DensityHistogramBin(double lower, double upper, double height);
    [CompilerGeneratedAttribute]
public double get_Lower();
    [CompilerGeneratedAttribute]
public double get_Upper();
    [CompilerGeneratedAttribute]
public double get_Height();
    public double get_Middle();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Mathematics.Histograms.DensityHistogramBuilderExtensions : object {
    [ExtensionAttribute]
public static DensityHistogram Build(IDensityHistogramBuilder builder, IReadOnlyList`1<double> values, int binCount);
    [ExtensionAttribute]
public static DensityHistogram Build(IDensityHistogramBuilder builder, IReadOnlyList`1<double> values, IReadOnlyList`1<double> weights, int binCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.Histogram : object {
    [CompilerGeneratedAttribute]
private double <BinSize>k__BackingField;
    [CompilerGeneratedAttribute]
private HistogramBin[] <Bins>k__BackingField;
    public double BinSize { get; }
    public HistogramBin[] Bins { get; }
    internal Histogram(double binSize, HistogramBin[] bins);
    [CompilerGeneratedAttribute]
public double get_BinSize();
    [CompilerGeneratedAttribute]
public HistogramBin[] get_Bins();
    public string ToString(Func`2<double, string> formatter, char binSymbol, bool full);
    public virtual string ToString();
    internal static Histogram BuildManual(double binSize, Double[][] bins);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.HistogramBin : object {
    [CompilerGeneratedAttribute]
private double <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Upper>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Values>k__BackingField;
    public double Lower { get; }
    public double Upper { get; }
    public Double[] Values { get; }
    public int Count { get; }
    public double Gap { get; }
    public bool IsEmpty { get; }
    public bool HasAny { get; }
    public HistogramBin(double lower, double upper, Double[] values);
    [CompilerGeneratedAttribute]
public double get_Lower();
    [CompilerGeneratedAttribute]
public double get_Upper();
    [CompilerGeneratedAttribute]
public Double[] get_Values();
    public int get_Count();
    public double get_Gap();
    public bool get_IsEmpty();
    public bool get_HasAny();
    public static HistogramBin Union(HistogramBin bin1, HistogramBin bin2);
    public virtual string ToString();
    public string ToString(CultureInfo cultureInfo);
}
public static class Perfolizer.Mathematics.Histograms.HistogramBinSizeCalculator : object {
    public static double CalcFreedmanDiaconis(int n, double interquartileRange);
    public static double CalcScott(int n, double standardDeviation);
    public static double CalcScott2(int n, double standardDeviation);
    public static double CalcSquareRoot(int n, double min, double max);
    public static double CalcSturges(int n, double min, double max);
    public static double CalcRice(int n, double min, double max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Perfolizer.Mathematics.Histograms.HistogramBuilder : object {
    public static IHistogramBuilder Simple;
    public static IHistogramBuilder Adaptive;
    public static IHistogramBuilder[] AllBuilders;
    private static HistogramBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Mathematics.Histograms.HistogramExtensions : object {
    [ExtensionAttribute]
public static int GetBinCount(Histogram histogram);
    [ExtensionAttribute]
public static IEnumerable`1<double> AllValues(Histogram histogram);
    [ExtensionAttribute]
public static Func`2<double, string> CreateNanosecondFormatter(Histogram histogram, CultureInfo cultureInfo, string format);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Histograms.IDensityHistogramBuilder {
    public abstract virtual DensityHistogram Build(Sample sample, int binCount);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Histograms.IHistogramBuilder {
    public abstract virtual Histogram Build(IReadOnlyList`1<double> values);
    public abstract virtual Histogram Build(IReadOnlyList`1<double> values, double binSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.QuantileRespectfulDensityHistogramBuilder : object {
    public static QuantileRespectfulDensityHistogramBuilder Instance;
    private static QuantileRespectfulDensityHistogramBuilder();
    public sealed virtual DensityHistogram Build(Sample sample, int binCount);
    public DensityHistogram Build(Sample sample, int binCount, IQuantileEstimator quantileEstimator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Histograms.SimpleHistogramBuilder : object {
    public static IHistogramBuilder Instance;
    private static SimpleHistogramBuilder();
    public sealed virtual Histogram Build(IReadOnlyList`1<double> values);
    public sealed virtual Histogram Build(IReadOnlyList`1<double> values, double binSize);
    private static int BinIndex(double value, double binSize);
    public static double OptimalBinSize(int n, double standardDeviation);
}
public class Perfolizer.Mathematics.Multimodality.AutomaticModalityDataFormatter : object {
    [NullableAttribute("1")]
public static IModalityDataFormatter Instance;
    private static AutomaticModalityDataFormatter();
    [NullableContextAttribute("1")]
public sealed virtual string Format(ModalityData data, string numberFormat, IFormatProvider numberFormatProvider);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Multimodality.IModalityDataFormatter {
    public abstract virtual string Format(ModalityData data, string numberFormat, IFormatProvider numberFormatProvider);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Multimodality.IModalityDetector {
    public abstract virtual ModalityData DetectModes(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Multimodality.LowlandModalityDetector : object {
    public static LowlandModalityDetector Instance;
    private double sensitivity;
    private double precision;
    public LowlandModalityDetector(double sensitivity, double precision);
    private static LowlandModalityDetector();
    public sealed virtual ModalityData DetectModes(Sample sample);
    public ModalityData DetectModes(Sample sample, IDensityHistogramBuilder densityHistogramBuilder, bool diagnostics);
    [CompilerGeneratedAttribute]
private RangedMode <DetectModes>g__GlobalMode|5_2(double location, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
private RangedMode <DetectModes>g__LocalMode|5_3(double location, double left, double right, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
private ModalityData <DetectModes>g__Result|5_4(IReadOnlyList`1<RangedMode> modes, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
private bool <DetectModes>g__TrySplit|5_5(int peak0, int peak1, int peak2, <>c__DisplayClass5_0& , <>c__DisplayClass5_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Perfolizer.Mathematics.Multimodality.LowlandModalityDiagnosticsData : ModalityData {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DiagnosticsBin> <Bins>k__BackingField;
    public IReadOnlyList`1<DiagnosticsBin> Bins { get; }
    public LowlandModalityDiagnosticsData(IReadOnlyList`1<RangedMode> modes, DensityHistogram densityHistogram, IReadOnlyList`1<DiagnosticsBin> bins);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DiagnosticsBin> get_Bins();
    public void DumpAsCsv(StreamWriter writer, CultureInfo cultureInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Multimodality.ManualModalityDataFormatter : object {
    public static IModalityDataFormatter Default;
    public static IModalityDataFormatter Compact;
    public static IModalityDataFormatter Full;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IOutlierDetectorFactory <OutlierDetectorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PresentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PresentModeLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PresentOutliers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompactMiddleModes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupSeparator>k__BackingField;
    [NullableAttribute("2")]
public IOutlierDetectorFactory OutlierDetectorFactory { get; public set; }
    public bool PresentCount { get; public set; }
    public bool PresentModeLocations { get; public set; }
    public bool PresentOutliers { get; public set; }
    public bool CompactMiddleModes { get; public set; }
    public string GroupSeparator { get; public set; }
    private static ManualModalityDataFormatter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IOutlierDetectorFactory get_OutlierDetectorFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OutlierDetectorFactory(IOutlierDetectorFactory value);
    [CompilerGeneratedAttribute]
public bool get_PresentCount();
    [CompilerGeneratedAttribute]
public void set_PresentCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_PresentModeLocations();
    [CompilerGeneratedAttribute]
public void set_PresentModeLocations(bool value);
    [CompilerGeneratedAttribute]
public bool get_PresentOutliers();
    [CompilerGeneratedAttribute]
public void set_PresentOutliers(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompactMiddleModes();
    [CompilerGeneratedAttribute]
public void set_CompactMiddleModes(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupSeparator();
    [CompilerGeneratedAttribute]
public void set_GroupSeparator(string value);
    public sealed virtual string Format(ModalityData data, string numberFormat, IFormatProvider numberFormatProvider);
    [CompilerGeneratedAttribute]
private void <Format>g__AddBunch|27_0(char open, string multiSeparator, char close, <>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
private void <Format>g__AddMode|27_1(<>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
private void <Format>g__AddOutliers|27_2(<>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
private void <Format>g__AddMiddleNodesIfNeeded|27_3(int index, <>c__DisplayClass27_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Multimodality.ModalityData : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RangedMode> <Modes>k__BackingField;
    [CompilerGeneratedAttribute]
private DensityHistogram <DensityHistogram>k__BackingField;
    public IReadOnlyList`1<RangedMode> Modes { get; }
    public DensityHistogram DensityHistogram { get; }
    public int Modality { get; }
    public ModalityData(IReadOnlyList`1<RangedMode> modes, DensityHistogram densityHistogram);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RangedMode> get_Modes();
    [CompilerGeneratedAttribute]
public DensityHistogram get_DensityHistogram();
    public int get_Modality();
}
[ExtensionAttribute]
public static class Perfolizer.Mathematics.Multimodality.ModalityDetectorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ModalityData DetectModes(IModalityDetector modalityDetector, IReadOnlyList`1<double> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Perfolizer.Mathematics.Multimodality.MValueCalculator : object {
    public static double Calculate(IEnumerable`1<double> values);
    public static double Calculate(Double[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Multimodality.RangedMode : object {
    [CompilerGeneratedAttribute]
private double <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private Sample <Sample>k__BackingField;
    public double Location { get; }
    public double Left { get; }
    public double Right { get; }
    public Sample Sample { get; }
    public IReadOnlyList`1<double> Values { get; }
    public RangedMode(double location, double left, double right, Sample sample);
    [CompilerGeneratedAttribute]
public double get_Location();
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
public Sample get_Sample();
    public IReadOnlyList`1<double> get_Values();
    public double Min();
    public double Max();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.OutlierDetection.DoubleMadOutlierDetector : FenceOutlierDetector {
    private static double DefaultK;
    private static MedianAbsoluteDeviationEstimator DefaultMedianAbsoluteDeviationEstimator;
    private DoubleMadOutlierDetector(Sample sample, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    private static DoubleMadOutlierDetector();
    public static DoubleMadOutlierDetector Create(Sample sample, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static DoubleMadOutlierDetector Create(IReadOnlyList`1<double> values, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static DoubleMadOutlierDetector Create(Sample sample, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static DoubleMadOutlierDetector Create(IReadOnlyList`1<double> values, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
}
public abstract class Perfolizer.Mathematics.OutlierDetection.FenceOutlierDetector : object {
    [CompilerGeneratedAttribute]
private double <LowerFence>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperFence>k__BackingField;
    public double LowerFence { get; protected set; }
    public double UpperFence { get; protected set; }
    [CompilerGeneratedAttribute]
public double get_LowerFence();
    [CompilerGeneratedAttribute]
protected void set_LowerFence(double value);
    [CompilerGeneratedAttribute]
public double get_UpperFence();
    [CompilerGeneratedAttribute]
protected void set_UpperFence(double value);
    public sealed virtual bool IsLowerOutlier(double x);
    public sealed virtual bool IsUpperOutlier(double x);
    protected void HandleEmptySample();
}
public interface Perfolizer.Mathematics.OutlierDetection.IOutlierDetector {
    public abstract virtual bool IsLowerOutlier(double x);
    public abstract virtual bool IsUpperOutlier(double x);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.OutlierDetection.IOutlierDetectorFactory {
    public abstract virtual IOutlierDetector Create(IReadOnlyList`1<double> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.OutlierDetection.MadOutlierDetector : FenceOutlierDetector {
    private static double DefaultK;
    private static MedianAbsoluteDeviationEstimator DefaultMedianAbsoluteDeviationEstimator;
    private MadOutlierDetector(Sample sample, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    private static MadOutlierDetector();
    public static MadOutlierDetector Create(Sample sample, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static MadOutlierDetector Create(IReadOnlyList`1<double> values, double k, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static MadOutlierDetector Create(Sample sample, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
    public static MadOutlierDetector Create(IReadOnlyList`1<double> values, MedianAbsoluteDeviationEstimator medianAbsoluteDeviationEstimator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Mathematics.OutlierDetection.OutlierDetectorExtensions : object {
    [ExtensionAttribute]
public static bool IsOutlier(IOutlierDetector outlierDetector, double x);
    [ExtensionAttribute]
public static IEnumerable`1<double> LowerOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> UpperOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> AllOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> WithoutLowerOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> WithoutUpperOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> WithoutAllOutliers(IOutlierDetector outlierDetector, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static IEnumerable`1<double> ApplyOutlierMode(IOutlierDetector outlierDetector, IEnumerable`1<double> values, OutlierMode mode);
}
public enum Perfolizer.Mathematics.OutlierDetection.OutlierMode : Enum {
    public int value__;
    public static OutlierMode DontRemove;
    public static OutlierMode RemoveUpper;
    public static OutlierMode RemoveLower;
    public static OutlierMode RemoveAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.OutlierDetection.SimpleOutlierDetectorFactory : object {
    public static IOutlierDetectorFactory Tukey;
    public static IOutlierDetectorFactory Mad;
    public static IOutlierDetectorFactory DoubleMad;
    private Func`2<IReadOnlyList`1<double>, IOutlierDetector> create;
    public SimpleOutlierDetectorFactory(Func`2<IReadOnlyList`1<double>, IOutlierDetector> create);
    private static SimpleOutlierDetectorFactory();
    public sealed virtual IOutlierDetector Create(IReadOnlyList`1<double> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.OutlierDetection.TukeyOutlierDetector : FenceOutlierDetector {
    private static double DefaultK;
    private static TukeyOutlierDetector EmptySampleDetector;
    private TukeyOutlierDetector(double lowerFence, double upperFence);
    private TukeyOutlierDetector(Quartiles quartiles, double k);
    private static TukeyOutlierDetector();
    public static TukeyOutlierDetector Create(Quartiles quartiles, double k);
    public static TukeyOutlierDetector Create(Sample sample, double k, IQuantileEstimator quantileEstimator);
    public static TukeyOutlierDetector Create(IReadOnlyList`1<double> values, double k, IQuantileEstimator quantileEstimator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.QuantileEstimators.BinomialBasedQuantileEstimator : object {
    public bool SupportsWeightedSamples { get; }
    public string Alias { get; }
    public sealed virtual double Quantile(Sample sample, Probability probability);
    public sealed virtual bool get_SupportsWeightedSamples();
    public abstract virtual string get_Alias();
    protected abstract virtual double Quantile(IReadOnlyList`1<double> x, Probability probability, Double[] b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.ExtendedP2QuantileEstimator : object {
    internal Probability[] Probabilities;
    private int m;
    private int markerCount;
    private Int32[] n;
    private Double[] ns;
    internal Double[] Q;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public ExtendedP2QuantileEstimator(Probability[] probabilities);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    private void UpdateNs(int maxIndex);
    public sealed virtual void Add(double value);
    private void Adjust(int i);
    private double Parabolic(int i, double d);
    private double Linear(int i, int d);
    public sealed virtual double Quantile(Probability p);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.GreenwaldKhannaQuantileEstimator : object {
    private List`1<Tuple> tuples;
    private int compressingInterval;
    private int n;
    [CompilerGeneratedAttribute]
private double <Epsilon>k__BackingField;
    public double Epsilon { get; }
    public int Count { get; }
    public int TupleCount { get; }
    public GreenwaldKhannaQuantileEstimator(double epsilon);
    [CompilerGeneratedAttribute]
public double get_Epsilon();
    public int get_Count();
    public int get_TupleCount();
    public sealed virtual void Add(double v);
    private int GetInsertIndex(Tuple v);
    public sealed virtual double Quantile(Probability p);
    public void Compress();
    private bool DeleteIfNeeded(int i);
    public virtual string ToString();
    internal string DumpToString(string format);
    internal void CheckConsistency();
}
public class Perfolizer.Mathematics.QuantileEstimators.GreenwaldKhannaSpecificQuantileEstimator : object {
    [NullableAttribute("1")]
private GreenwaldKhannaQuantileEstimator estimator;
    private Probability probability;
    public GreenwaldKhannaSpecificQuantileEstimator(Probability probability, double epsilon);
    public sealed virtual void Add(double value);
    public sealed virtual double Quantile();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.HarrellDavisQuantileEstimator : object {
    public static HarrellDavisQuantileEstimator Instance;
    public bool SupportsWeightedSamples { get; }
    public string Alias { get; }
    private static HarrellDavisQuantileEstimator();
    public sealed virtual bool get_SupportsWeightedSamples();
    public sealed virtual string get_Alias();
    public sealed virtual double Quantile(Sample sample, Probability probability);
    public sealed virtual ConfidenceIntervalEstimator QuantileConfidenceIntervalEstimator(Sample sample, Probability probability);
    private static Moments GetMoments(Sample sample, Probability probability, bool calcSecondMoment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Perfolizer.Mathematics.QuantileEstimators.HyndmanFanHelper : object {
    public static HyndmanFanType[] AllTypes;
    private static HyndmanFanHelper();
    public static double GetH(HyndmanFanType type, double n, Probability p);
    public static double Evaluate(HyndmanFanType type, int n, Probability p, Func`2<int, double> getValue);
    public static bool SupportsWeightedSamples(HyndmanFanType type);
    [CompilerGeneratedAttribute]
internal static double <Evaluate>g__LinearInterpolation|2_0(<>c__DisplayClass2_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.HyndmanFanQuantileEstimator : object {
    public static HyndmanFanQuantileEstimator Type1;
    public static HyndmanFanQuantileEstimator Type2;
    public static HyndmanFanQuantileEstimator Type3;
    public static HyndmanFanQuantileEstimator Type4;
    public static HyndmanFanQuantileEstimator Type5;
    public static HyndmanFanQuantileEstimator Type6;
    public static HyndmanFanQuantileEstimator Type7;
    public static HyndmanFanQuantileEstimator Type8;
    public static HyndmanFanQuantileEstimator Type9;
    [CompilerGeneratedAttribute]
private HyndmanFanType <Type>k__BackingField;
    public HyndmanFanType Type { get; }
    public bool SupportsWeightedSamples { get; }
    public string Alias { get; }
    public HyndmanFanQuantileEstimator(HyndmanFanType type);
    private static HyndmanFanQuantileEstimator();
    [CompilerGeneratedAttribute]
public HyndmanFanType get_Type();
    private double GetH(double n, Probability p);
    public virtual double Quantile(Sample sample, Probability probability);
    private double GetQuantileForWeightedSample(Sample sample, Probability probability);
    private double GetQuantileForNonWeightedSample(Sample sample, Probability probability);
    public virtual bool get_SupportsWeightedSamples();
    public virtual string get_Alias();
    [CompilerGeneratedAttribute]
internal static double <GetQuantileForWeightedSample>g__Cdf|15_0(double x, <>c__DisplayClass15_0& );
}
public enum Perfolizer.Mathematics.QuantileEstimators.HyndmanFanType : Enum {
    public int value__;
    public static HyndmanFanType Type1;
    public static HyndmanFanType Type2;
    public static HyndmanFanType Type3;
    public static HyndmanFanType Type4;
    public static HyndmanFanType Type5;
    public static HyndmanFanType Type6;
    public static HyndmanFanType Type7;
    public static HyndmanFanType Type8;
    public static HyndmanFanType Type9;
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.QuantileEstimators.IQuantileConfidenceIntervalEstimator {
    public abstract virtual ConfidenceIntervalEstimator QuantileConfidenceIntervalEstimator(Sample sample, Probability probability);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.QuantileEstimators.IQuantileEstimator {
    public bool SupportsWeightedSamples { get; }
    public string Alias { get; }
    public abstract virtual double Quantile(Sample sample, Probability probability);
    public abstract virtual bool get_SupportsWeightedSamples();
    public abstract virtual string get_Alias();
}
public interface Perfolizer.Mathematics.QuantileEstimators.ISequentialQuantileEstimator {
    public abstract virtual void Add(double value);
    public abstract virtual double Quantile(Probability probability);
}
public interface Perfolizer.Mathematics.QuantileEstimators.ISequentialSpecificQuantileEstimator {
    public abstract virtual void Add(double value);
    public abstract virtual double Quantile();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.MovingExtendedP2QuantileEstimator : object {
    private ExtendedP2QuantileEstimator estimator;
    private int windowSize;
    private int n;
    private Double[] previousWindowEstimations;
    public MovingExtendedP2QuantileEstimator(Probability[] probabilities, int windowSize);
    public sealed virtual void Add(double value);
    public sealed virtual double Quantile(Probability p);
}
public class Perfolizer.Mathematics.QuantileEstimators.MovingP2QuantileEstimator : object {
    [NullableAttribute("1")]
private P2QuantileEstimator estimator;
    private int windowSize;
    private int n;
    private double previousWindowEstimation;
    public MovingP2QuantileEstimator(Probability probability, int windowSize);
    public sealed virtual void Add(double value);
    public sealed virtual double Quantile();
}
public enum Perfolizer.Mathematics.QuantileEstimators.MovingQuantileEstimatorInitStrategy : Enum {
    public int value__;
    public static MovingQuantileEstimatorInitStrategy QuantileApproximation;
    public static MovingQuantileEstimatorInitStrategy OrderStatistics;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.NavruzOzdemirQuantileEstimator : BinomialBasedQuantileEstimator {
    public static IQuantileEstimator Instance;
    public string Alias { get; }
    private static NavruzOzdemirQuantileEstimator();
    public virtual string get_Alias();
    protected virtual double Quantile(IReadOnlyList`1<double> x, Probability probability, Double[] b);
}
public class Perfolizer.Mathematics.QuantileEstimators.P2QuantileEstimator : object {
    private Probability p;
    private InitializationStrategy strategy;
    [NullableAttribute("1")]
private Int32[] n;
    [NullableAttribute("1")]
private Double[] ns;
    [NullableAttribute("1")]
private Double[] q;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public P2QuantileEstimator(Probability probability, InitializationStrategy strategy);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual void Add(double value);
    private void Adjust(int i);
    private double Parabolic(int i, double d);
    private double Linear(int i, int d);
    public sealed virtual double Quantile();
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.PartitioningHeapsMovingQuantileEstimator : object {
    private int windowSize;
    private int k;
    private Probability probability;
    private Double[] h;
    private Int32[] heapToElementIndex;
    private Int32[] elementToHeapIndex;
    private int rootHeapIndex;
    private int lowerHeapMaxSize;
    private MovingQuantileEstimatorInitStrategy initStrategy;
    private Nullable`1<HyndmanFanType> hyndmanFanType;
    private int upperHeapSize;
    private int lowerHeapSize;
    private int totalElementCount;
    public PartitioningHeapsMovingQuantileEstimator(int k, int windowSize, MovingQuantileEstimatorInitStrategy initStrategy);
    public PartitioningHeapsMovingQuantileEstimator(Probability p, int windowSize);
    public PartitioningHeapsMovingQuantileEstimator(Probability p, int windowSize, HyndmanFanType hyndmanFanType);
    private void Swap(int heapIndex1, int heapIndex2);
    private void Sift(int heapIndex);
    public sealed virtual void Add(double value);
    public sealed virtual double Quantile();
    internal string Dump();
    [CompilerGeneratedAttribute]
private int <Sift>g__SwapWithChildren|17_0(int heapCurrentIndex, int heapChildIndex1, int heapChildIndex2, bool isUpperHeap, <>c__DisplayClass17_0& );
    [CompilerGeneratedAttribute]
private int <Add>g__Insert|18_0(int heapIndex, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
private double <Quantile>g__GetValue|19_0(int index);
}
public static class Perfolizer.Mathematics.QuantileEstimators.QuantileAbsoluteDeviation : object {
    public static double DefaultConsistencyConstant;
    [NullableContextAttribute("1")]
public static double CalcQad(Sample sample, double p, double q, double consistencyConstant, IQuantileEstimator quantileEstimator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Mathematics.QuantileEstimators.QuantileEstimatorExtensions : object {
    [ExtensionAttribute]
public static Double[] Quantiles(IQuantileEstimator estimator, Sample sample, IReadOnlyList`1<Probability> probabilities);
    [ExtensionAttribute]
public static double Median(IQuantileEstimator estimator, Sample sample);
    [ExtensionAttribute]
public static double Quantile(IQuantileEstimator estimator, IReadOnlyList`1<double> values, Probability probability);
    [ExtensionAttribute]
public static Double[] Quantiles(IQuantileEstimator estimator, IReadOnlyList`1<double> values, IReadOnlyList`1<Probability> probabilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Mathematics.QuantileEstimators.Quartiles : ValueType {
    [CompilerGeneratedAttribute]
private double <Q0>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Q1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Q2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Q3>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Q4>k__BackingField;
    public double Q0 { get; }
    public double Q1 { get; }
    public double Q2 { get; }
    public double Q3 { get; }
    public double Q4 { get; }
    public double Min { get; }
    public double Median { get; }
    public double Max { get; }
    public double InterquartileRange { get; }
    private Quartiles(double q0, double q1, double q2, double q3, double q4);
    [CompilerGeneratedAttribute]
public double get_Q0();
    [CompilerGeneratedAttribute]
public double get_Q1();
    [CompilerGeneratedAttribute]
public double get_Q2();
    [CompilerGeneratedAttribute]
public double get_Q3();
    [CompilerGeneratedAttribute]
public double get_Q4();
    public double get_Min();
    public double get_Median();
    public double get_Max();
    public double get_InterquartileRange();
    public static Quartiles Create(Sample sample, IQuantileEstimator quantileEstimator);
    public static Quartiles Create(IReadOnlyList`1<double> values, IQuantileEstimator quantileEstimator);
    [CompilerGeneratedAttribute]
internal static double <Create>g__GetQuantile|24_0(double q, <>c__DisplayClass24_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.SfakianakisVerginis1QuantileEstimator : BinomialBasedQuantileEstimator {
    public static IQuantileEstimator Instance;
    public string Alias { get; }
    private static SfakianakisVerginis1QuantileEstimator();
    public virtual string get_Alias();
    protected virtual double Quantile(IReadOnlyList`1<double> x, Probability probability, Double[] b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.SfakianakisVerginis2QuantileEstimator : BinomialBasedQuantileEstimator {
    public static IQuantileEstimator Instance;
    public string Alias { get; }
    private static SfakianakisVerginis2QuantileEstimator();
    public virtual string get_Alias();
    protected virtual double Quantile(IReadOnlyList`1<double> x, Probability probability, Double[] b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.SfakianakisVerginis3QuantileEstimator : BinomialBasedQuantileEstimator {
    public static IQuantileEstimator Instance;
    public string Alias { get; }
    private static SfakianakisVerginis3QuantileEstimator();
    public virtual string get_Alias();
    protected virtual double Quantile(IReadOnlyList`1<double> x, Probability probability, Double[] b);
}
public class Perfolizer.Mathematics.QuantileEstimators.SimpleMovingQuantileEstimator : object {
    private int windowSize;
    private int k;
    private MovingQuantileEstimatorInitStrategy initStrategy;
    [NullableAttribute("1")]
private Double[] values;
    private int n;
    public SimpleMovingQuantileEstimator(int windowSize, int k, MovingQuantileEstimatorInitStrategy initStrategy);
    public SimpleMovingQuantileEstimator(int windowSize, Probability p);
    public sealed virtual void Add(double value);
    public sealed virtual double Quantile();
    private double GetOrderStatistics(int m);
}
public class Perfolizer.Mathematics.QuantileEstimators.SimpleQuantileEstimator : HyndmanFanQuantileEstimator {
    [NullableAttribute("1")]
public static IQuantileEstimator Instance;
    private static SimpleQuantileEstimator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.QuantileEstimators.TrimmedHarrellDavisQuantileEstimator : object {
    private Func`2<double, Probability> getIntervalWidth;
    public static IQuantileEstimator Sqrt;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public bool SupportsWeightedSamples { get; }
    public string Alias { get; }
    public TrimmedHarrellDavisQuantileEstimator(Func`2<double, Probability> getIntervalWidth, string alias);
    private static TrimmedHarrellDavisQuantileEstimator();
    public sealed virtual double Quantile(Sample sample, Probability probability);
    public sealed virtual bool get_SupportsWeightedSamples();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    private static double BinarySearch(Func`2<double, double> f, double left, double right);
    [NullableContextAttribute("0")]
internal static ValueTuple`2<double, double> GetBetaHdi(double a, double b, double width);
    private static double DenormalizedLogBetaPdf(double a, double b, double x);
    [CompilerGeneratedAttribute]
internal static double <Quantile>g__Cdf|3_0(double x, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Randomization.LimitedRandomGenerator : RandomGenerator {
    private Double[] values;
    public LimitedRandomGenerator(Double[] values);
    public LimitedRandomGenerator(Double[] values, int seed);
    public LimitedRandomGenerator(Double[] values, Random random);
    public virtual double Next();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.Randomization.RandomGenerator : object {
    protected Random Random;
    protected RandomGenerator(int seed);
    [NullableContextAttribute("2")]
protected RandomGenerator(Random random);
    public abstract virtual double Next();
    public Double[] Next(int n);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Randomization.Shuffler : object {
    private Random random;
    public Shuffler(int seed);
    public Shuffler(Random random);
    public void Shuffle(IList`1<T> data);
    public void Shuffle(IList`1<T> data, int offset, int count);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.Reference.IReferenceDistributionSet {
    public string Key { get; }
    public string Description { get; }
    public ReferenceDistribution[] Distributions { get; }
    public abstract virtual string get_Key();
    public abstract virtual string get_Description();
    public abstract virtual ReferenceDistribution[] get_Distributions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Reference.ReferenceDistribution : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IContinuousDistribution <Distribution>k__BackingField;
    public string Key { get; }
    public string Description { get; }
    public IContinuousDistribution Distribution { get; }
    public ReferenceDistribution(string key, string description, IContinuousDistribution distribution);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public IContinuousDistribution get_Distribution();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Reference.SyntheticLatencyBrendanGreggSet : object {
    public static IReferenceDistributionSet Instance;
    [CompilerGeneratedAttribute]
private ReferenceDistribution[] <Distributions>k__BackingField;
    public string Key { get; }
    public string Description { get; }
    public ReferenceDistribution[] Distributions { get; }
    private static SyntheticLatencyBrendanGreggSet();
    public sealed virtual string get_Key();
    public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual ReferenceDistribution[] get_Distributions();
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.ScaleEstimators.IScaleEstimator {
    public abstract virtual double Scale(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.ScaleEstimators.MedianAbsoluteDeviationEstimator : object {
    public static MedianAbsoluteDeviationEstimator Invariant;
    public static MedianAbsoluteDeviationEstimator Simple;
    public static MedianAbsoluteDeviationEstimator HarrellDavis;
    public IQuantileEstimator QuantileEstimator { get; }
    private static MedianAbsoluteDeviationEstimator();
    protected abstract virtual double ScaleFactor(Sample sample);
    public abstract virtual IQuantileEstimator get_QuantileEstimator();
    private sealed virtual override double Perfolizer.Mathematics.ScaleEstimators.IScaleEstimator.Scale(Sample sample);
    public double Mad(Sample sample);
    public double LowerMad(Sample sample);
    public double UpperMad(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Mathematics.ScaleEstimators.QuantileAbsoluteDeviationEstimator : object {
    public static QuantileAbsoluteDeviationEstimator Standard;
    public static QuantileAbsoluteDeviationEstimator Optimal;
    [CompilerGeneratedAttribute]
private Probability <P>k__BackingField;
    public Probability P { get; }
    public IQuantileEstimator QuantileEstimator { get; }
    protected QuantileAbsoluteDeviationEstimator(Probability p);
    private static QuantileAbsoluteDeviationEstimator();
    public static QuantileAbsoluteDeviationEstimator Invariant(Probability p);
    [CompilerGeneratedAttribute]
public Probability get_P();
    protected abstract virtual double ScaleFactor(int n);
    public abstract virtual IQuantileEstimator get_QuantileEstimator();
    private sealed virtual override double Perfolizer.Mathematics.ScaleEstimators.IScaleEstimator.Scale(Sample sample);
    public double Qad(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.ScaleEstimators.ShamosEstimator : object {
    public static ShamosEstimator Instance;
    private static double AsymptoticBias;
    private Double[] biasFactors;
    private static ShamosEstimator();
    private double Factor(int n);
    public sealed virtual double Scale(Sample x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Selectors.QuickSelectAdaptive : object {
    [NullableAttribute("2")]
private Double[] buffer;
    public double Select(Double[] values, int k);
    public double Select(Double[] values, int k, int l, int r);
}
internal static class Perfolizer.Mathematics.Selectors.QuickSelectAdaptiveAlgorithms : object {
    public static int HoarePartition(Span`1<double> A, int p);
    public static void Swap(Span`1<double> A, int i, int j);
    public static void Median3(Span`1<double> A, int a, int b, int c);
    public static void Median5(Span`1<double> A, int a, int b, int c, int d, int e);
    private static void Sort(Span`1<double> A, int a, int b);
    public static int MedianIndex(Span`1<double> A, int a, int b, int c);
    public static void Ninther(Span`1<double> A, int i1, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9);
    public static int BfprtBaseline(Span`1<double> A);
    public static void QuickSelect(Partition partition, Span`1<double> A, int k);
    public static int RepeatedStep(Span`1<double> A);
    public static int MedianOfNinthersBasic(Span`1<double> A);
    private static int ExpandPositionRight(Span`1<double> A, int hi, int right);
    private static int ExpandPositionLeft(Span`1<double> A, int lo, int pivot);
    private static int ExpandPartition(Span`1<double> A, int lo, int pivot, int hi);
    public static int MedianOfNinthers(Span`1<double> A);
    public static int MedianOfMinima(Span`1<double> A, int k);
    public static int MedianOfMaxima(Span`1<double> A, int k);
    private static void Minimum(Span`1<double> A);
    private static void Maximum(Span`1<double> A);
    public static void QuickSelectAdaptive(Span`1<double> A, int k);
    [NullableContextAttribute("1")]
public static void QuickSelectAdaptive(Double[] values, int k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Selectors.Rqq : object {
    private Double[] values;
    private Int32[] rangeLeft;
    private Int32[] rangeRight;
    private BinaryFlag[] b;
    private Int32[] bSum;
    private NodeKind[] kinds;
    private int n;
    private int nodeCount;
    private int usedValues;
    public Rqq(Double[] data);
    public double Quantile(int l, int r, Probability p);
    public double Select(int l, int r, int k);
    public string DumpTreeAscii(bool details);
    public void DumpTreeAscii(StreamWriter writer, bool details);
    [CompilerGeneratedAttribute]
private int <Select>g__GetOneCount|13_0(int x, int y, <>c__DisplayClass13_0& );
    [CompilerGeneratedAttribute]
private int <Select>g__GetZeroCount|13_1(int x, int y, <>c__DisplayClass13_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Selectors.SimpleSelector : object {
    private Double[] data;
    public SimpleSelector(Double[] data);
    public double Select(int k);
    public double Select(int l, int r, int k);
    public double Median(int l, int r);
}
public class Perfolizer.Mathematics.Sequences.ArithmeticProgressionSequence : object {
    private double start;
    private double step;
    public ArithmeticProgressionSequence(double start, double step);
    public sealed virtual double Value(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.Sequences.ConstantSequence : object {
    public static ConstantSequence Zero;
    public static ConstantSequence NaN;
    public static ConstantSequence PositiveInfinity;
    public static ConstantSequence NegativeInfinity;
    private double value;
    public ConstantSequence(double value);
    private static ConstantSequence();
    public sealed virtual double Value(int index);
}
public class Perfolizer.Mathematics.Sequences.ExponentialDecaySequence : object {
    private double initialValue;
    private double decayConstant;
    public ExponentialDecaySequence(double initialValue, double decayConstant);
    public sealed virtual double Value(int index);
    [NullableContextAttribute("1")]
public static ISequence CreateFromHalfLife(int halfLife);
}
public interface Perfolizer.Mathematics.Sequences.ISequence {
    public abstract virtual double Value(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Mathematics.Sequences.SequenceExtensions : object {
    [IteratorStateMachineAttribute("Perfolizer.Mathematics.Sequences.SequenceExtensions/<GenerateEnumerable>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<double> GenerateEnumerable(ISequence sequence);
    [ExtensionAttribute]
public static Double[] GenerateArray(ISequence sequence, int count, bool normalize);
    [ExtensionAttribute]
public static Double[] GenerateReverseArray(ISequence sequence, int count, bool normalize);
}
public enum Perfolizer.Mathematics.SignificanceTesting.Base.AlternativeHypothesis : Enum {
    public int value__;
    public static AlternativeHypothesis TwoSides;
    public static AlternativeHypothesis Less;
    public static AlternativeHypothesis Greater;
}
public class Perfolizer.Mathematics.SignificanceTesting.Base.EquivalenceResult : object {
    [CompilerGeneratedAttribute]
private ComparisonResult <ComparisonResult>k__BackingField;
    public ComparisonResult ComparisonResult { get; }
    public EquivalenceResult(ComparisonResult comparisonResult);
    [CompilerGeneratedAttribute]
public ComparisonResult get_ComparisonResult();
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.SignificanceTesting.Base.IEquivalenceTest {
    public abstract virtual ComparisonResult Perform(Sample x, Sample y, Threshold threshold, SignificanceLevel alpha);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.SignificanceTesting.Base.ISignificanceOneSampleTest`1 {
    public abstract virtual T Run(Sample x, double y, AlternativeHypothesis alternativeHypothesis);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Mathematics.SignificanceTesting.Base.ISignificanceTwoSampleTest {
    public abstract virtual Probability GetPValue(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
}
public interface Perfolizer.Mathematics.SignificanceTesting.Base.ISignificanceTwoSampleTest`1 {
    [NullableContextAttribute("1")]
public abstract virtual T Perform(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.SignificanceTesting.Base.SignificanceOneSampleResult : object {
    [CompilerGeneratedAttribute]
private Sample <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private AlternativeHypothesis <AlternativeHypothesis>k__BackingField;
    [CompilerGeneratedAttribute]
private Probability <PValue>k__BackingField;
    public Sample X { get; }
    public double Y { get; }
    public AlternativeHypothesis AlternativeHypothesis { get; }
    public Probability PValue { get; }
    public string PValueString { get; }
    public SignificanceOneSampleResult(Sample x, double y, AlternativeHypothesis alternativeHypothesis, Probability pValue);
    [CompilerGeneratedAttribute]
public Sample get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public AlternativeHypothesis get_AlternativeHypothesis();
    [CompilerGeneratedAttribute]
public Probability get_PValue();
    public string get_PValueString();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.SignificanceTesting.Base.SignificanceTwoSampleResult : object {
    [CompilerGeneratedAttribute]
private Sample <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Sample <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Threshold <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private AlternativeHypothesis <AlternativeHypothesis>k__BackingField;
    [CompilerGeneratedAttribute]
private Probability <PValue>k__BackingField;
    public Sample X { get; }
    public Sample Y { get; }
    public Threshold Threshold { get; }
    public AlternativeHypothesis AlternativeHypothesis { get; }
    public Probability PValue { get; }
    public string PValueString { get; }
    public SignificanceTwoSampleResult(Sample x, Sample y, Threshold threshold, AlternativeHypothesis alternativeHypothesis, Probability pValue);
    [CompilerGeneratedAttribute]
public Sample get_X();
    [CompilerGeneratedAttribute]
public Sample get_Y();
    [CompilerGeneratedAttribute]
public Threshold get_Threshold();
    [CompilerGeneratedAttribute]
public AlternativeHypothesis get_AlternativeHypothesis();
    [CompilerGeneratedAttribute]
public Probability get_PValue();
    public string get_PValueString();
    public virtual string ToString();
}
public abstract class Perfolizer.Mathematics.SignificanceTesting.Base.SignificanceTwoSampleTestBase`1 : object {
    [NullableContextAttribute("1")]
public abstract virtual T Perform(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
    [NullableContextAttribute("1")]
public sealed virtual Probability GetPValue(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
}
public class Perfolizer.Mathematics.SignificanceTesting.BrunnerMunzelResult : SignificanceTwoSampleResult {
    [CompilerGeneratedAttribute]
private double <W>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Df>k__BackingField;
    public double W { get; }
    public double Df { get; }
    [NullableContextAttribute("1")]
public BrunnerMunzelResult(Sample x, Sample y, Threshold threshold, AlternativeHypothesis alternativeHypothesis, Probability pValue, double w, double df);
    [CompilerGeneratedAttribute]
public double get_W();
    [CompilerGeneratedAttribute]
public double get_Df();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Perfolizer.Mathematics.SignificanceTesting.BrunnerMunzelTest : SignificanceTwoSampleTestBase`1<BrunnerMunzelResult> {
    private static double Eps;
    public static BrunnerMunzelTest Instance;
    private static BrunnerMunzelTest();
    public virtual BrunnerMunzelResult Perform(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
    [CompilerGeneratedAttribute]
internal static BrunnerMunzelResult <Perform>g__Result|3_0(double pValueResult, double wResult, double dfResult, <>c__DisplayClass3_0& );
}
public interface Perfolizer.Mathematics.SignificanceTesting.MannWhitney.IMannWhitneyCdf {
    public abstract virtual double Cdf(int n, int m, int u);
}
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyClassicExactCdf : object {
    [NullableAttribute("1")]
public static MannWhitneyClassicExactCdf Instance;
    private static MannWhitneyClassicExactCdf();
    public sealed virtual double Cdf(int n, int m, int u);
}
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyEdgeworthApproxCdf : object {
    [NullableAttribute("1")]
public static MannWhitneyEdgeworthApproxCdf Instance;
    private static MannWhitneyEdgeworthApproxCdf();
    public sealed virtual double Cdf(int n, int m, int u);
    [CompilerGeneratedAttribute]
internal static double <Cdf>g__H3|1_0(double x);
    [CompilerGeneratedAttribute]
internal static double <Cdf>g__H5|1_1(double x);
    [CompilerGeneratedAttribute]
internal static double <Cdf>g__H7|1_2(double x);
    [CompilerGeneratedAttribute]
internal static double <Cdf>g__Factorial|1_3(int x);
}
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyLoefflerExactCdf : object {
    [NullableAttribute("1")]
public static MannWhitneyLoefflerExactCdf Instance;
    private static MannWhitneyLoefflerExactCdf();
    public sealed virtual double Cdf(int n, int m, int u);
    private long SumCdf(int n, int m, int u);
    [NullableContextAttribute("1")]
private Int64[] FullCdf(int n, int m, int u);
}
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyNormalApproxCdf : object {
    [NullableAttribute("1")]
public static MannWhitneyNormalApproxCdf Instance;
    private static MannWhitneyNormalApproxCdf();
    public sealed virtual double Cdf(int n, int m, int u);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyResult : SignificanceTwoSampleResult {
    [CompilerGeneratedAttribute]
private double <Ux>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Uy>k__BackingField;
    public double Ux { get; }
    public double Uy { get; }
    public MannWhitneyResult(Sample x, Sample y, Threshold threshold, AlternativeHypothesis alternativeHypothesis, Probability pValue, double ux, double uy);
    [CompilerGeneratedAttribute]
public double get_Ux();
    [CompilerGeneratedAttribute]
public double get_Uy();
    public virtual string ToString();
}
public enum Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyStrategy : Enum {
    public int value__;
    public static MannWhitneyStrategy Auto;
    public static MannWhitneyStrategy ClassicExact;
    public static MannWhitneyStrategy LoefflerExact;
    public static MannWhitneyStrategy NormalApprox;
    public static MannWhitneyStrategy EdgeworthApprox;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Perfolizer.Mathematics.SignificanceTesting.MannWhitney.MannWhitneyTest : SignificanceTwoSampleTestBase`1<MannWhitneyResult> {
    public static MannWhitneyTest Instance;
    private static MannWhitneyTest();
    private static IMannWhitneyCdf GetCdfEstimator(MannWhitneyStrategy mannWhitneyStrategy, int n, int m);
    private static MannWhitneyResult PerformGreater(Sample x, Sample y, Threshold threshold, MannWhitneyStrategy strategy);
    public virtual MannWhitneyResult Perform(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
    public MannWhitneyResult PerformStrategy(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold, MannWhitneyStrategy mannWhitneyStrategy);
}
public static class Perfolizer.Mathematics.SignificanceTesting.SignificanceTestHelper : object {
    [NullableContextAttribute("1")]
public static bool AreEquivalent(ISignificanceTwoSampleTest test, Sample x, Sample y, Threshold threshold, SignificanceLevel alpha);
    internal static Probability CdfToPValue(double cdf, AlternativeHypothesis alternative);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.SignificanceTesting.SimpleEquivalenceTest : object {
    [CompilerGeneratedAttribute]
private ISignificanceTwoSampleTest <oneSidedTest>P;
    public SimpleEquivalenceTest(ISignificanceTwoSampleTest oneSidedTest);
    public sealed virtual ComparisonResult Perform(Sample x, Sample y, Threshold threshold, SignificanceLevel alpha);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Mathematics.SignificanceTesting.StudentTest : object {
    public static StudentTest Instance;
    private static StudentTest();
    public sealed virtual StudentTOneSampleResult Run(Sample x, double y, AlternativeHypothesis alternativeHypothesis);
}
public class Perfolizer.Mathematics.SignificanceTesting.StudentTOneSampleResult : SignificanceOneSampleResult {
    [CompilerGeneratedAttribute]
private double <T>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Df>k__BackingField;
    public double T { get; }
    public double Df { get; }
    [NullableContextAttribute("1")]
public StudentTOneSampleResult(Sample x, double y, AlternativeHypothesis alternativeHypothesis, Probability pValue, double t, double df);
    [CompilerGeneratedAttribute]
public double get_T();
    [CompilerGeneratedAttribute]
public double get_Df();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Perfolizer.Mathematics.SignificanceTesting.WelchTest : SignificanceTwoSampleTestBase`1<WelchTResult> {
    public static WelchTest Instance;
    private static WelchTest();
    public virtual WelchTResult Perform(Sample x, Sample y, AlternativeHypothesis alternative, Threshold threshold);
}
public class Perfolizer.Mathematics.SignificanceTesting.WelchTResult : SignificanceTwoSampleResult {
    [CompilerGeneratedAttribute]
private double <T>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Df>k__BackingField;
    public double T { get; }
    public double Df { get; }
    [NullableContextAttribute("1")]
public WelchTResult(Sample x, Sample y, Threshold threshold, AlternativeHypothesis alternativeHypothesis, Probability pValue, double t, double df);
    [CompilerGeneratedAttribute]
public double get_T();
    [CompilerGeneratedAttribute]
public double get_Df();
}
public class Perfolizer.Metrology.EffectSizeUnit : MeasurementUnit {
    [NullableAttribute("1")]
public static EffectSizeUnit Instance;
    private static EffectSizeUnit();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Metrology.EffectSizeValue : ValueType {
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Value { get; }
    public MeasurementUnit Unit { get; }
    public EffectSizeValue(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public sealed virtual MeasurementUnit get_Unit();
    public sealed virtual double GetShift(Sample sample);
}
public interface Perfolizer.Metrology.IAbsoluteMeasurementValue {
    [NullableContextAttribute("1")]
public abstract virtual double GetShift(Sample sample);
}
public interface Perfolizer.Metrology.IRelativeMeasurementValue {
    public abstract virtual double GetRatio();
}
public interface Perfolizer.Metrology.ISpecificMeasurementValue {
}
[NullableContextAttribute("1")]
public interface Perfolizer.Metrology.IWithUnits {
    public MeasurementUnit Unit { get; }
    public abstract virtual MeasurementUnit get_Unit();
    [NullableContextAttribute("2")]
public abstract virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Metrology.Measurement : object {
    public static Measurement Zero;
    [CompilerGeneratedAttribute]
private double <NominalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    protected string DefaultFormat { get; }
    public double NominalValue { get; }
    public MeasurementUnit Unit { get; }
    public Measurement(double nominalValue, MeasurementUnit unit);
    private static Measurement();
    protected virtual string get_DefaultFormat();
    [CompilerGeneratedAttribute]
public double get_NominalValue();
    [CompilerGeneratedAttribute]
public sealed virtual MeasurementUnit get_Unit();
    public Nullable`1<TimeInterval> AsTimeInterval();
    public Nullable`1<SizeValue> AsSizeValue();
    public Nullable`1<Frequency> AsFrequency();
    public Nullable`1<NumberValue> AsNumberValue();
    public Nullable`1<PercentValue> AsPercentValue();
    public Nullable`1<EffectSizeValue> AsEffectSizeValue();
    public Nullable`1<RatioValue> AsRatioValue();
    [NullableContextAttribute("2")]
public ISpecificMeasurementValue AsApplicableMeasurementUnit();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public static bool TryParse(string s, Measurement& value);
    public static Measurement Parse(string s);
    public static bool TryParse(string s, MeasurementUnit unit, Measurement& value);
    public static Measurement op_Addition(Measurement a, Measurement b);
    public static Measurement op_Subtraction(Measurement a, Measurement b);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(Measurement other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("2")]
public static bool op_LessThan(Measurement left, Measurement right);
    [NullableContextAttribute("2")]
public static bool op_GreaterThan(Measurement left, Measurement right);
    [NullableContextAttribute("2")]
public static bool op_LessThanOrEqual(Measurement left, Measurement right);
    [NullableContextAttribute("2")]
public static bool op_GreaterThanOrEqual(Measurement left, Measurement right);
    [CompilerGeneratedAttribute]
internal static bool <TryParse>g__TryParseBySuffix|22_0(string suffix, Double& value, <>c__DisplayClass22_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Metrology.MeasurementUnit : object {
    [CompilerGeneratedAttribute]
private string <Abbreviation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BaseUnits>k__BackingField;
    public string Abbreviation { get; }
    public string FullName { get; }
    public long BaseUnits { get; }
    public string AbbreviationAscii { get; }
    protected MeasurementUnit(string abbreviation, string fullName, long baseUnits);
    [IteratorStateMachineAttribute("Perfolizer.Metrology.MeasurementUnit/<GetAll>d__1")]
public static IEnumerable`1<MeasurementUnit> GetAll();
    [CompilerGeneratedAttribute]
public string get_Abbreviation();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public long get_BaseUnits();
    public string get_AbbreviationAscii();
    public string GetFlavor();
    public virtual string ToString();
    public string ToString(UnitPresentation unitPresentation);
    public static bool TryParse(string s, MeasurementUnit& unit);
    public static MeasurementUnit Parse(string s);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MeasurementUnit other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(MeasurementUnit left, MeasurementUnit right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(MeasurementUnit left, MeasurementUnit right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Perfolizer.Metrology.MeasurementUnitExtensions : object {
    [ExtensionAttribute]
public static Threshold ToThreshold(ISpecificMeasurementValue value);
    [ExtensionAttribute]
public static string ToString(IWithUnits unit, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [ExtensionAttribute]
public static string ToString(IWithUnits unit, UnitPresentation unitPresentation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Perfolizer.Metrology.MeasurementValueExtensions : object {
    public static Sample Apply(Sample sample, Func`2<double, double> applySingle);
    [ExtensionAttribute]
private static Sample Apply(IAbsoluteMeasurementValue self, Sample sample);
    [ExtensionAttribute]
private static Sample Apply(IRelativeMeasurementValue self, Sample sample);
    [ExtensionAttribute]
public static Sample Apply(ISpecificMeasurementValue self, Sample sample);
}
public class Perfolizer.Metrology.NumberUnit : MeasurementUnit {
    [NullableAttribute("1")]
public static NumberUnit Instance;
    private static NumberUnit();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Metrology.NumberValue : ValueType {
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Value { get; }
    public MeasurementUnit Unit { get; }
    public NumberValue(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    public static NumberValue Of(double value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public sealed virtual MeasurementUnit get_Unit();
    public sealed virtual double GetShift(Sample sample);
}
public class Perfolizer.Metrology.PercentUnit : MeasurementUnit {
    [NullableAttribute("1")]
public static PercentUnit Instance;
    private static PercentUnit();
}
[IsReadOnlyAttribute]
public class Perfolizer.Metrology.PercentValue : ValueType {
    [NullableAttribute("1")]
private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Percentage>k__BackingField;
    public double Percentage { get; }
    [NullableAttribute("1")]
public MeasurementUnit Unit { get; }
    public PercentValue(double percentage);
    [CompilerGeneratedAttribute]
public double get_Percentage();
    public static PercentValue Of(double percentage);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("1")]
public sealed virtual MeasurementUnit get_Unit();
    public sealed virtual double GetRatio();
}
public class Perfolizer.Metrology.RatioUnit : MeasurementUnit {
    [NullableAttribute("1")]
public static RatioUnit Instance;
    private static RatioUnit();
}
[IsReadOnlyAttribute]
public class Perfolizer.Metrology.RatioValue : ValueType {
    [NullableAttribute("1")]
private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Value { get; }
    [NullableAttribute("1")]
public MeasurementUnit Unit { get; }
    public RatioValue(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("1")]
public sealed virtual MeasurementUnit get_Unit();
    public sealed virtual double GetRatio();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Metrology.SizeUnit : MeasurementUnit {
    private static long BytesInKiloByte;
    public static SizeUnit B;
    public static SizeUnit KB;
    public static SizeUnit MB;
    public static SizeUnit GB;
    public static SizeUnit TB;
    public static SizeUnit[] All;
    public SizeUnit(string abbreviation, string fullName, long baseUnits);
    private static SizeUnit();
    public SizeValue ToValue(long value);
    public static SizeUnit GetBestSizeUnit(Int64[] values);
    public static double Convert(long value, SizeUnit from, SizeUnit to);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Perfolizer.Metrology.SizeValue : ValueType {
    private static string DefaultFormat;
    [CompilerGeneratedAttribute]
private long <Bytes>k__BackingField;
    public static SizeValue B;
    public static SizeValue KB;
    public static SizeValue MB;
    public static SizeValue GB;
    public static SizeValue TB;
    public long Bytes { get; }
    public MeasurementUnit Unit { get; }
    public SizeValue(long bytes);
    public SizeValue(long nominalValue, SizeUnit unit);
    private static SizeValue();
    [CompilerGeneratedAttribute]
public long get_Bytes();
    public static SizeValue FromBytes(long value);
    public static SizeValue FromKilobytes(long value);
    public static SizeValue FromMegabytes(long value);
    public static SizeValue FromGigabytes(long value);
    public static SizeValue FromTerabytes(long value);
    public static SizeValue op_Multiply(SizeValue value, long k);
    public static SizeValue op_Multiply(long k, SizeValue value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("2")]
public string ToString(SizeUnit sizeUnit, string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public sealed virtual MeasurementUnit get_Unit();
    public sealed virtual double GetShift(Sample sample);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Metrology.Threshold : object {
    [CompilerGeneratedAttribute]
private ISpecificMeasurementValue[] <thresholdValues>P;
    public static Threshold Zero;
    private static char Separator;
    private string presentation;
    public MeasurementUnit Unit { get; }
    public Threshold(ISpecificMeasurementValue[] thresholdValues);
    private static Threshold();
    public Sample ApplyMax(Sample sample);
    public double EffectiveShift(Sample sample);
    public virtual string ToString();
    public sealed virtual MeasurementUnit get_Unit();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    [NullableContextAttribute("2")]
private static string Format(IReadOnlyList`1<ISpecificMeasurementValue> thresholdValues, string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public static bool TryParse(string s, Threshold& threshold);
    public static Threshold Parse(string s);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Threshold other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Metrology.UnitPresentation : object {
    public static UnitPresentation Default;
    public static UnitPresentation WithGap;
    public static UnitPresentation Ascii;
    public static UnitPresentation Invisible;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinUnitWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceAscii>k__BackingField;
    public bool IsVisible { get; private set; }
    public int MinUnitWidth { get; private set; }
    public bool Gap { get; private set; }
    public bool ForceAscii { get; private set; }
    public UnitPresentation(bool isVisible, int minUnitWidth, bool gap, bool forceAscii);
    private static UnitPresentation();
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
private void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public int get_MinUnitWidth();
    [CompilerGeneratedAttribute]
private void set_MinUnitWidth(int value);
    [CompilerGeneratedAttribute]
public bool get_Gap();
    [CompilerGeneratedAttribute]
private void set_Gap(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceAscii();
    [CompilerGeneratedAttribute]
private void set_ForceAscii(bool value);
    public static UnitPresentation FromVisibility(bool isVisible);
    public static UnitPresentation FromWidth(int unitWidth);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdEntry : PhdObject {
    [CompilerGeneratedAttribute]
private PhdInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdJob <Job>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdBenchmark <Benchmark>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdLifecycle <Lifecycle>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PhdMetric <Metric>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Value>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IterationIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InvocationCount>k__BackingField;
    [NullableAttribute("1")]
private List`1<PhdEntry> nested;
    [CompilerGeneratedAttribute]
private PhdMeta <Meta>k__BackingField;
    public PhdInfo Info { get; public set; }
    public PhdEngine Engine { get; public set; }
    public PhdSource Source { get; public set; }
    public PhdHost Host { get; public set; }
    public PhdJob Job { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Parameters { get; public set; }
    public PhdBenchmark Benchmark { get; public set; }
    public PhdLifecycle Lifecycle { get; public set; }
    [NullableAttribute("1")]
public PhdMetric Metric { get; public set; }
    public Nullable`1<double> Value { get; public set; }
    [NullableAttribute("1")]
public MeasurementUnit Unit { get; public set; }
    public Nullable`1<int> IterationIndex { get; public set; }
    public Nullable`1<long> InvocationCount { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<PhdEntry> Nested { get; }
    public PhdMeta Meta { get; public set; }
    [CompilerGeneratedAttribute]
public PhdInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(PhdInfo value);
    [CompilerGeneratedAttribute]
public PhdEngine get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(PhdEngine value);
    [CompilerGeneratedAttribute]
public PhdSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(PhdSource value);
    [CompilerGeneratedAttribute]
public PhdHost get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(PhdHost value);
    [CompilerGeneratedAttribute]
public PhdJob get_Job();
    [CompilerGeneratedAttribute]
public void set_Job(PhdJob value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public PhdBenchmark get_Benchmark();
    [CompilerGeneratedAttribute]
public void set_Benchmark(PhdBenchmark value);
    [CompilerGeneratedAttribute]
public PhdLifecycle get_Lifecycle();
    [CompilerGeneratedAttribute]
public void set_Lifecycle(PhdLifecycle value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PhdMetric get_Metric();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Metric(PhdMetric value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<double> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MeasurementUnit get_Unit();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Unit(MeasurementUnit value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IterationIndex();
    [CompilerGeneratedAttribute]
public void set_IterationIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InvocationCount();
    [CompilerGeneratedAttribute]
public void set_InvocationCount(Nullable`1<long> value);
    [NullableContextAttribute("1")]
public IReadOnlyList`1<PhdEntry> get_Nested();
    [CompilerGeneratedAttribute]
public PhdMeta get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(PhdMeta value);
    public PhdMeta ResolveMeta();
    [NullableContextAttribute("1")]
public PhdEntry Add(PhdEntry[] entries);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Perfolizer.Phd.Base.PhdEntry/<Traverse>d__61")]
public IEnumerable`1<PhdEntry> Traverse();
}
[ExtensionAttribute]
internal static class Perfolizer.Phd.Base.PhdHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsPhdPrimitive(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdImplementation : object {
    [CompilerGeneratedAttribute]
private Type <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Derived>k__BackingField;
    public Type Base { get; }
    public Type Derived { get; }
    public PhdImplementation(Type base, Type derived);
    [CompilerGeneratedAttribute]
public Type get_Base();
    [CompilerGeneratedAttribute]
public Type get_Derived();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Perfolizer.Phd.Base.PhdIndex : object {
    private PhdEntry rootEntry;
    private Dictionary`2<PhdEntry, PhdIndexedEntry> entries;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PhdKey> <Keys>k__BackingField;
    public IReadOnlyList`1<PhdKey> Keys { get; }
    public IReadOnlyCollection`1<PhdEntry> Entries { get; }
    public PhdIndexedEntry Item { get; }
    public PhdIndex(PhdEntry rootEntry);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PhdKey> get_Keys();
    public IReadOnlyCollection`1<PhdEntry> get_Entries();
    public PhdIndexedEntry get_Item(PhdEntry entry);
    private void IndexEntry(PhdKey key, PhdEntry entry, PhdEntry parent);
    private void IndexSelf(PhdKey key, PhdEntry entry, PhdEntry parent);
    private void IndexAttributes(PhdKey key, PhdEntry entry, object obj);
    public string Dump();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Perfolizer.Phd.Base.PhdIndexedEntry : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PhdProperty> <properties>P;
    [CompilerGeneratedAttribute]
private PhdKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdEntry <Entry>k__BackingField;
    public PhdKey Key { get; }
    public PhdEntry Entry { get; }
    public IReadOnlyCollection`1<PhdProperty> AllProperties { get; }
    [NullableAttribute("2")]
private PhdProperty Item { get; private set; }
    [NullableAttribute("2")]
public PhdProperty Item { get; public set; }
    public PhdIndexedEntry(PhdKey key, PhdEntry entry, Dictionary`2<string, PhdProperty> properties);
    [CompilerGeneratedAttribute]
public PhdKey get_Key();
    [CompilerGeneratedAttribute]
public PhdEntry get_Entry();
    public IReadOnlyCollection`1<PhdProperty> get_AllProperties();
    private PhdProperty get_Item(string key);
    private void set_Item(string key, PhdProperty value);
    public PhdProperty get_Item(PhdKey key);
    public void set_Item(PhdKey key, PhdProperty value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdKey : object {
    public static PhdKey Empty;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Path { get; }
    public Type Type { get; }
    public string Name { get; }
    public PhdKey(string path, Type type);
    private static PhdKey();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    public bool IsComposite();
    public bool IsMatched(string selector);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PhdKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(PhdKey left, PhdKey right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(PhdKey left, PhdKey right);
    public PhdKey Append(string subName, Type subType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdMeta : PhdObject {
    [CompilerGeneratedAttribute]
private PhdTableConfig <Table>k__BackingField;
    public PhdTableConfig Table { get; public set; }
    [CompilerGeneratedAttribute]
public PhdTableConfig get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(PhdTableConfig value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdMetric : PhdObject {
    [NullableAttribute("1")]
public static PhdMetric Empty;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    public string Id { get; public set; }
    public Nullable`1<int> Version { get; public set; }
    public bool IsEmpty { get; }
    public PhdMetric(string id, Nullable`1<int> version);
    private static PhdMetric();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public static PhdMetric op_Implicit(string id);
    public bool get_IsEmpty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdObject : object {
    [CompilerGeneratedAttribute]
private string <Display>k__BackingField;
    public string Display { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Display();
    [CompilerGeneratedAttribute]
public void set_Display(string value);
    public virtual string GetDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Key}={Value}")]
public class Perfolizer.Phd.Base.PhdProperty : object {
    [CompilerGeneratedAttribute]
private PhdKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public PhdKey Key { get; }
    public object Value { get; }
    public string Display { get; }
    public PhdProperty(PhdKey key, object value);
    [CompilerGeneratedAttribute]
public PhdKey get_Key();
    [CompilerGeneratedAttribute]
public object get_Value();
    public string get_Display();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Base.PhdSchema : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private List`1<PhdImplementation> implementations;
    public string Name { get; }
    public IReadOnlyList`1<PhdImplementation> Implementations { get; }
    public PhdSchema(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public IReadOnlyList`1<PhdImplementation> get_Implementations();
    public PhdSchema Add();
    [NullableContextAttribute("2")]
private static Type GetBaseType();
}
internal static class Perfolizer.Phd.Base.PhdSymbol : object {
    public static char Attribute;
    public static char Anchor;
    public static char Function;
}
public abstract class Perfolizer.Phd.Dto.PhdBenchmark : PhdObject {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdCpu : PhdObject {
    [CompilerGeneratedAttribute]
private string <ProcessorName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PhysicalProcessorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PhysicalCoreCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LogicalCoreCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <NominalFrequencyHz>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxFrequencyHz>k__BackingField;
    public string ProcessorName { get; public set; }
    public Nullable`1<int> PhysicalProcessorCount { get; public set; }
    public Nullable`1<int> PhysicalCoreCount { get; public set; }
    public Nullable`1<int> LogicalCoreCount { get; public set; }
    public string Architecture { get; public set; }
    public Nullable`1<long> NominalFrequencyHz { get; public set; }
    public Nullable`1<long> MaxFrequencyHz { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProcessorName();
    [CompilerGeneratedAttribute]
public void set_ProcessorName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PhysicalProcessorCount();
    [CompilerGeneratedAttribute]
public void set_PhysicalProcessorCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PhysicalCoreCount();
    [CompilerGeneratedAttribute]
public void set_PhysicalCoreCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LogicalCoreCount();
    [CompilerGeneratedAttribute]
public void set_LogicalCoreCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_NominalFrequencyHz();
    [CompilerGeneratedAttribute]
public void set_NominalFrequencyHz(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxFrequencyHz();
    [CompilerGeneratedAttribute]
public void set_MaxFrequencyHz(Nullable`1<long> value);
    public Nullable`1<Frequency> NominalFrequency();
    public Nullable`1<Frequency> MaxFrequency();
    [NullableContextAttribute("1")]
public virtual string GetDisplay();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdEngine : PhdObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Version(string value);
    public virtual string GetDisplay();
    public string ToBrandTitle();
    public virtual string ToString();
}
public abstract class Perfolizer.Phd.Dto.PhdEnvironment : PhdObject {
}
public abstract class Perfolizer.Phd.Dto.PhdExecution : PhdObject {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdHost : PhdObject {
    [CompilerGeneratedAttribute]
private PhdOs <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdCpu <Cpu>k__BackingField;
    public PhdOs Os { get; public set; }
    public PhdCpu Cpu { get; public set; }
    [CompilerGeneratedAttribute]
public PhdOs get_Os();
    [CompilerGeneratedAttribute]
public void set_Os(PhdOs value);
    [CompilerGeneratedAttribute]
public PhdCpu get_Cpu();
    [CompilerGeneratedAttribute]
public void set_Cpu(PhdCpu value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdInfo : PhdObject {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    public string Title { get; public set; }
    public Guid RunId { get; public set; }
    public long Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdJob : PhdObject {
    [CompilerGeneratedAttribute]
private PhdEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdExecution <Execution>k__BackingField;
    public PhdEnvironment Environment { get; public set; }
    public PhdExecution Execution { get; public set; }
    [CompilerGeneratedAttribute]
public PhdEnvironment get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(PhdEnvironment value);
    [CompilerGeneratedAttribute]
public PhdExecution get_Execution();
    [CompilerGeneratedAttribute]
public void set_Execution(PhdExecution value);
}
public abstract class Perfolizer.Phd.Dto.PhdLifecycle : PhdObject {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Dto.PhdOs : PhdObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Distro>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    public string Name { get; public set; }
    public string Distro { get; public set; }
    public string Version { get; public set; }
    public string KernelVersion { get; public set; }
    public string Container { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Distro();
    [CompilerGeneratedAttribute]
public void set_Distro(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_KernelVersion();
    [CompilerGeneratedAttribute]
public void set_KernelVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(string value);
    [NullableContextAttribute("1")]
public virtual string GetDisplay();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum Perfolizer.Phd.Dto.PhdRatioStyle : Enum {
    public int value__;
    public static PhdRatioStyle Value;
    public static PhdRatioStyle Percentage;
    public static PhdRatioStyle Trend;
}
public abstract class Perfolizer.Phd.Dto.PhdSource : PhdObject {
}
public enum Perfolizer.Phd.Dto.PhdTextAlignment : Enum {
    public int value__;
    public static PhdTextAlignment Auto;
    public static PhdTextAlignment Left;
    public static PhdTextAlignment Right;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Id}")]
public class Perfolizer.Phd.Functions.PhdFunction : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Sample, object> <Apply>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Legend>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    public string Id { get; }
    public string Title { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Sample, object> Apply { get; }
    [NullableAttribute("2")]
public string Legend { get; public set; }
    public Type ReturnType { get; }
    public PhdFunction(string id, string title, Func`2<Sample, object> apply);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Func`2<Sample, object> get_Apply();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Legend();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Legend(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ReturnType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Id}")]
public class Perfolizer.Phd.Functions.PhdFunction`1 : PhdFunction {
    [CompilerGeneratedAttribute]
private Func`2<Sample, T> <Apply>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    public Func`2<Sample, T> Apply { get; }
    public Type ReturnType { get; }
    public PhdFunction`1(string id, string title, Func`2<Sample, T> apply);
    public PhdFunction`1(string id, Func`2<Sample, T> apply);
    [CompilerGeneratedAttribute]
public Func`2<Sample, T> get_Apply();
    [CompilerGeneratedAttribute]
public virtual Type get_ReturnType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Functions.PhdFunctionResolver : object {
    private Dictionary`2<string, PhdFunction> registeredFunctions;
    public PhdFunctionResolver Register(PhdFunction[] functions);
    public PhdFunctionResolver RegisterDefaults();
    public PhdFunction Resolve(string id);
}
[NullableContextAttribute("1")]
public interface Perfolizer.Phd.Presenting.IPhdTablePresenter {
    public abstract virtual void Present(PhdTable table, PhdTableStyle style);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Presenting.PhdMarkdownTablePresenter : object {
    [CompilerGeneratedAttribute]
private IPresenter <presenter>P;
    public PhdMarkdownTablePresenter(IPresenter presenter);
    public sealed virtual void Present(PhdTable table, PhdTableStyle style);
    private void PresentClouds(IReadOnlyList`1<PhdCloudscape> cloudscapes, PhdTableStyle style);
    private void Present(PhdCloud cloud, PhdTableStyle style, int maxIdLength);
    private void PresentTable(PhdTableView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Presenting.PhdTableStyle : object {
    [CompilerGeneratedAttribute]
private IFormatProvider <FormatProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitPresentation <UnitPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreferredWidth>k__BackingField;
    public IFormatProvider FormatProvider { get; public set; }
    public UnitPresentation UnitPresentation { get; public set; }
    public int PreferredWidth { get; public set; }
    [CompilerGeneratedAttribute]
public IFormatProvider get_FormatProvider();
    [CompilerGeneratedAttribute]
public void set_FormatProvider(IFormatProvider value);
    [CompilerGeneratedAttribute]
public UnitPresentation get_UnitPresentation();
    [CompilerGeneratedAttribute]
public void set_UnitPresentation(UnitPresentation value);
    [CompilerGeneratedAttribute]
public int get_PreferredWidth();
    [CompilerGeneratedAttribute]
public void set_PreferredWidth(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdAnchorGenerator : object {
    private static int DefaultMaxAnchorLength;
    [CompilerGeneratedAttribute]
private int <MaxAnchorLength>k__BackingField;
    private Dictionary`2<string, string> attributeIdToAnchor;
    private HashSet`1<string> existingAnchors;
    private List`1<string> animals;
    private int MaxAnchorLength { get; }
    public PhdAnchorGenerator(Nullable`1<int> maxAnchorLength);
    [CompilerGeneratedAttribute]
private int get_MaxAnchorLength();
    public string GetAnchor(string attributeId);
    private static string Compress(string s);
    private string GenerateRandomAnchor(string attributeId);
    private static int GetStableHashCode(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdAttributeColumn : PhdColumn {
    [CompilerGeneratedAttribute]
private PhdKey <Key>k__BackingField;
    public PhdKey Key { get; }
    public PhdAttributeColumn(string title, string selector, PhdColumnDefinition definition, PhdKey key);
    [CompilerGeneratedAttribute]
public PhdKey get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Column.Title}={Value}")]
public class Perfolizer.Phd.Tables.PhdCell : object {
    [CompilerGeneratedAttribute]
private PhdColumn <Column>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public PhdColumn Column { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public PhdCell(PhdColumn column, object value);
    [CompilerGeneratedAttribute]
public PhdColumn get_Column();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdCloud : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PhdCell> <Cells>k__BackingField;
    public string Id { get; }
    public IReadOnlyList`1<PhdCell> Cells { get; }
    public PhdCloud(string id, IReadOnlyList`1<PhdCell> cells);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PhdCell> get_Cells();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdCloudscape : object {
    [CompilerGeneratedAttribute]
private List`1<PhdCloud> <Clouds>k__BackingField;
    public List`1<PhdCloud> Clouds { get; }
    [CompilerGeneratedAttribute]
public List`1<PhdCloud> get_Clouds();
    public PhdCloudscape Add(PhdCloud cloud);
    public PhdCloudscape AddRange(IEnumerable`1<PhdCloud> clouds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Selector}")]
public class Perfolizer.Phd.Tables.PhdColumn : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdColumnDefinition <Definition>k__BackingField;
    public string Title { get; }
    public string Selector { get; }
    public PhdColumnDefinition Definition { get; }
    public PhdColumn(string title, string selector, PhdColumnDefinition definition);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public PhdColumnDefinition get_Definition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Selector}")]
public class Perfolizer.Phd.Tables.PhdColumnDefinition : PhdObject {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cloud>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSelfExplanatory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CanBeShared>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAtomic>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PhdTextAlignment> <Alignment>k__BackingField;
    public string Title { get; public set; }
    public string Selector { get; public set; }
    public string Cloud { get; public set; }
    public Nullable`1<bool> IsSelfExplanatory { get; public set; }
    public Nullable`1<bool> CanBeShared { get; public set; }
    public Nullable`1<bool> Compressed { get; public set; }
    public Nullable`1<bool> IsAtomic { get; public set; }
    public Nullable`1<PhdTextAlignment> Alignment { get; public set; }
    public PhdColumnDefinition(string selector);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public string get_Cloud();
    [CompilerGeneratedAttribute]
public void set_Cloud(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSelfExplanatory();
    [CompilerGeneratedAttribute]
public void set_IsSelfExplanatory(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CanBeShared();
    [CompilerGeneratedAttribute]
public void set_CanBeShared(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Compressed();
    [CompilerGeneratedAttribute]
public void set_Compressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAtomic();
    [CompilerGeneratedAttribute]
public void set_IsAtomic(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PhdTextAlignment> get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(Nullable`1<PhdTextAlignment> value);
    public string ResolveTitle();
    public PhdColumnFlavor ResolveFlavor();
    public PhdTextAlignment ResolveAlignment();
}
public enum Perfolizer.Phd.Tables.PhdColumnFlavor : Enum {
    public int value__;
    public static PhdColumnFlavor Attribute;
    public static PhdColumnFlavor Function;
    public static PhdColumnFlavor Unknown;
}
public class Perfolizer.Phd.Tables.PhdFilter : object {
    [NullableContextAttribute("1")]
public bool IsMatched(PhdEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdFunctionColumn : PhdColumn {
    [CompilerGeneratedAttribute]
private PhdFunction <Function>k__BackingField;
    public PhdFunction Function { get; }
    public PhdFunctionColumn(PhdColumnDefinition definition, PhdFunction function);
    [CompilerGeneratedAttribute]
public PhdFunction get_Function();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdFunctionColumn`1 : PhdFunctionColumn {
    [CompilerGeneratedAttribute]
private PhdFunction`1<T> <Function>k__BackingField;
    public PhdFunction`1<T> Function { get; }
    public PhdFunctionColumn`1(PhdColumnDefinition definition, PhdFunction`1<T> function);
    [CompilerGeneratedAttribute]
public PhdFunction`1<T> get_Function();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{Measurements.Count} measurements, {cells.Count} cells")]
public class Perfolizer.Phd.Tables.PhdRow : object {
    [CompilerGeneratedAttribute]
private PhdEntry <Entry>k__BackingField;
    private Dictionary`2<string, PhdCell> cells;
    [CompilerGeneratedAttribute]
private List`1<Measurement> <Measurements>k__BackingField;
    public PhdEntry Entry { get; }
    public List`1<Measurement> Measurements { get; }
    public ICollection`1<PhdCell> Cells { get; }
    public PhdCell Item { get; public set; }
    public PhdCell Item { get; public set; }
    public PhdRow(PhdEntry entry);
    [CompilerGeneratedAttribute]
public PhdEntry get_Entry();
    [CompilerGeneratedAttribute]
public List`1<Measurement> get_Measurements();
    public ICollection`1<PhdCell> get_Cells();
    public PhdCell get_Item(PhdColumn column);
    public void set_Item(PhdColumn column, PhdCell value);
    public PhdCell get_Item(string selector);
    public void set_Item(string selector, PhdCell value);
    public string BuildAttributeId();
    public Sample ToSample();
}
public enum Perfolizer.Phd.Tables.PhdSortDirection : Enum {
    public int value__;
    public static PhdSortDirection Descending;
    public static PhdSortDirection Ascending;
}
[ExtensionAttribute]
public static class Perfolizer.Phd.Tables.PhdSortDirectionExtensions : object {
    [ExtensionAttribute]
public static int ToSign(PhdSortDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Selector}/{Direction}")]
public class Perfolizer.Phd.Tables.PhdSortPolicy : PhdObject {
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdSortDirection <Direction>k__BackingField;
    public string Selector { get; }
    public PhdSortDirection Direction { get; }
    public PhdSortPolicy(string selector, PhdSortDirection direction);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public PhdSortDirection get_Direction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Perfolizer.Phd.Tables.PhdTable : object {
    [CompilerGeneratedAttribute]
private PhdEntry <RootEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdTableConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PhdColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PhdRow> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PhdCloudscape> <Cloudscapes>k__BackingField;
    public PhdEntry RootEntry { get; }
    public PhdTableConfig Config { get; }
    public List`1<PhdColumn> Columns { get; }
    public IReadOnlyList`1<PhdRow> Rows { get; }
    public IReadOnlyList`1<PhdCloudscape> Cloudscapes { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    [NullableAttribute("2")]
public object Item { get; }
    public PhdTable(PhdEntry rootEntry);
    [CompilerGeneratedAttribute]
public PhdEntry get_RootEntry();
    [CompilerGeneratedAttribute]
public PhdTableConfig get_Config();
    [CompilerGeneratedAttribute]
public List`1<PhdColumn> get_Columns();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PhdRow> get_Rows();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PhdCloudscape> get_Cloudscapes();
    public int get_RowCount();
    public int get_ColumnCount();
    [NullableContextAttribute("2")]
public object get_Item(int row, int col);
    private static List`1<PhdColumn> BuildColumns(PhdTableConfig config, PhdIndex index);
    private static List`1<PhdRow> BuildRows(PhdEntry rootEntry, PhdTableConfig config, IReadOnlyList`1<PhdColumn> columns, PhdIndex index);
    private static void FillFunctionCells(IReadOnlyList`1<PhdRow> rows, IReadOnlyList`1<PhdColumn> columns);
    private static void SortRows(PhdTableConfig config, List`1<PhdRow> rows);
    private static IReadOnlyList`1<PhdCloudscape> ExtractCloudscapes(PhdTableConfig config, PhdIndex index, IReadOnlyList`1<PhdRow> rows, List`1<PhdColumn> columns);
    private static List`1<PhdCloudscape> ExtractSharedCloudscapes(IReadOnlyList`1<PhdRow> rows, List`1<PhdColumn> columns);
    private static List`1<PhdCloudscape> ExtractAnchorCloudscapes(PhdTableConfig config, PhdIndex index, IReadOnlyList`1<PhdRow> rows, List`1<PhdColumn> columns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdTableConfig : PhdObject {
    [CompilerGeneratedAttribute]
private List`1<PhdFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PhdColumnDefinition> <ColumnDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PhdSortPolicy> <SortPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAnchorLength>k__BackingField;
    public List`1<PhdFilter> Filters { get; public set; }
    public List`1<PhdColumnDefinition> ColumnDefinitions { get; public set; }
    public List`1<PhdSortPolicy> SortPolicies { get; public set; }
    public Nullable`1<int> MaxAnchorLength { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<PhdFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<PhdFilter> value);
    [CompilerGeneratedAttribute]
public List`1<PhdColumnDefinition> get_ColumnDefinitions();
    [CompilerGeneratedAttribute]
public void set_ColumnDefinitions(List`1<PhdColumnDefinition> value);
    [CompilerGeneratedAttribute]
public List`1<PhdSortPolicy> get_SortPolicies();
    [CompilerGeneratedAttribute]
public void set_SortPolicies(List`1<PhdSortPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAnchorLength();
    [CompilerGeneratedAttribute]
public void set_MaxAnchorLength(Nullable`1<int> value);
    public bool IsMatched(PhdEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Phd.Tables.PhdTableView : object {
    [CompilerGeneratedAttribute]
private PhdTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private PhdTableStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private String[0...,0...] <Cells>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ColumnWidths>k__BackingField;
    public PhdTable Table { get; }
    public PhdTableStyle Style { get; }
    public String[0...,0...] Cells { get; }
    public Int32[] ColumnWidths { get; }
    public IReadOnlyList`1<PhdColumn> Columns { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public IReadOnlyList`1<PhdCloudscape> Cloudscapes { get; }
    public PhdTableView(PhdTable table, PhdTableStyle style);
    [CompilerGeneratedAttribute]
public PhdTable get_Table();
    [CompilerGeneratedAttribute]
public PhdTableStyle get_Style();
    [CompilerGeneratedAttribute]
public String[0...,0...] get_Cells();
    [CompilerGeneratedAttribute]
public Int32[] get_ColumnWidths();
    public IReadOnlyList`1<PhdColumn> get_Columns();
    public int get_RowCount();
    public int get_ColumnCount();
    public IReadOnlyList`1<PhdCloudscape> get_Cloudscapes();
    private static String[0...,0...] BuildCells(PhdTable table, PhdTableStyle style);
    private static Int32[] BuildColumnWidths(PhdTable table, String[0...,0...] cells);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Perfolizer.Presenting.BufferedPresenter : object {
    protected StringBuilder Builder;
    public sealed virtual void Write(char c);
    public sealed virtual void Write(string message);
    public sealed virtual void WriteLine();
    public virtual void Flush();
    protected abstract virtual void Flush(string text);
}
public class Perfolizer.Presenting.ConsolePresenter : object {
    public sealed virtual void Write(char c);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
    public sealed virtual void WriteLine();
    public sealed virtual void Flush();
}
[NullableContextAttribute("1")]
public interface Perfolizer.Presenting.IPresenter {
    public abstract virtual void Write(char c);
    public abstract virtual void Write(string message);
    public abstract virtual void WriteLine();
    public abstract virtual void Flush();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Presenting.StringPresenter : BufferedPresenter {
    public virtual void Flush();
    protected virtual void Flush(string text);
    public string Dump();
}
internal static class Perfolizer.Properties.PerfolizerInfo : object {
    [NullableAttribute("1")]
public static string PublicKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Perfolizer.Sample : object {
    private static string DefaultFormat;
    private static char OpenBracket;
    private static char CloseBracket;
    private static char Separator;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Weights>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWeighted>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnit <Unit>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ValueTuple`2<IReadOnlyList`1<double>, IReadOnlyList`1<double>>> lazySortedData;
    [CompilerGeneratedAttribute]
private double <WeightedSize>k__BackingField;
    public IReadOnlyList`1<double> Values { get; }
    public IReadOnlyList`1<double> Weights { get; }
    public double TotalWeight { get; }
    public bool IsWeighted { get; }
    public MeasurementUnit Unit { get; }
    public IReadOnlyList`1<double> SortedValues { get; }
    public IReadOnlyList`1<double> SortedWeights { get; }
    public int Size { get; }
    public double WeightedSize { get; }
    public Sample(Double[] values);
    public Sample(Int32[] values);
    public Sample(IReadOnlyList`1<double> values, MeasurementUnit unit);
    public Sample(IReadOnlyList`1<double> values, IReadOnlyList`1<double> weights, MeasurementUnit measurementUnit);
    public Sample(IEnumerable`1<int> values, MeasurementUnit unit);
    public Sample(IEnumerable`1<long> values, MeasurementUnit unit);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Values();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<double> get_Weights();
    [CompilerGeneratedAttribute]
public double get_TotalWeight();
    [CompilerGeneratedAttribute]
public bool get_IsWeighted();
    [CompilerGeneratedAttribute]
public sealed virtual MeasurementUnit get_Unit();
    public IReadOnlyList`1<double> get_SortedValues();
    public IReadOnlyList`1<double> get_SortedWeights();
    public int get_Size();
    [CompilerGeneratedAttribute]
public double get_WeightedSize();
    public Sample Concat(Sample sample);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider, UnitPresentation unitPresentation);
    public static bool TryParse(string s, Sample& sample);
    public static Sample Parse(string s);
    public static Sample op_Multiply(Sample sample, double value);
    public static Sample op_Division(Sample sample, double value);
    public static Sample op_Addition(Sample sample, double value);
    public static Sample op_Subtraction(Sample sample, double value);
    public static Sample op_Multiply(Sample sample, int value);
    public static Sample op_Division(Sample sample, int value);
    public static Sample op_Addition(Sample sample, int value);
    public static Sample op_Subtraction(Sample sample, int value);
    private static bool IsSorted(IReadOnlyList`1<double> list);
    public double Mean();
    public double Min();
    public double Max();
    [CompilerGeneratedAttribute]
private ValueTuple`2<IReadOnlyList`1<double>, IReadOnlyList`1<double>> <.ctor>b__31_0();
    [CompilerGeneratedAttribute]
private ValueTuple`2<IReadOnlyList`1<double>, IReadOnlyList`1<double>> <.ctor>b__32_0();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<double> <Concat>g__GetValues|35_0(Sample s, <>c__DisplayClass35_0& );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
