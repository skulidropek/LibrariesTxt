public interface PerseusLibS.Api.IData2 {
    public DataType2 DataType2 { get; }
    public abstract virtual DataType2 get_DataType2();
    public abstract virtual WorkflowEdge CreateWorkflowEdge();
    public abstract virtual DataNode CreateDataNode();
}
public interface PerseusLibS.Api.NetworkApi.IGraphLoader {
    public abstract virtual Parameters GetParameters();
    public abstract virtual void Load(INetworkData ndata, Parameters parameters, ProcessInfo processInfo);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceActivity {
}
public interface PerseusLibS.Api.SequenceApi.ISequenceAnalysis {
    public abstract virtual IAnalysisResult AnalyzeData(ISequenceData ndata, Parameters param, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData sdata, String& errString);
}
[DefaultMemberAttribute("Item")]
public interface PerseusLibS.Api.SequenceApi.ISequenceData {
    public SequenceType SequenceType { get; public set; }
    public ISequenceInfo Item { get; }
    public abstract virtual SequenceType get_SequenceType();
    public abstract virtual void set_SequenceType(SequenceType value);
    public abstract virtual ISequenceInfo get_Item(int i);
    public abstract virtual void AddSequence(string sequence, string name, string description);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceExport {
    public abstract virtual void Export(Parameters parameters, ISequenceData ndata, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData data, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceFromMatrix {
    public abstract virtual void ProcessData(IMatrixData inData, ISequenceData outData, Parameters param, IData[]& supplData, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(IMatrixData mdata, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceInfo {
    public int AlignmentCount { get; }
    public abstract virtual String[] GetSequences(bool aligned);
    public abstract virtual string GetSequenceAt(int index, bool aligned);
    public abstract virtual int get_AlignmentCount();
    public abstract virtual string GetIdAt(int index);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceMergeWithMatrix {
    public abstract virtual void ProcessData(ISequenceData data, IMatrixData inMatrix, Parameters param, IData[]& supplData, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData data, IMatrixData inMatrix, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceMultiAnalysis {
    public abstract virtual IAnalysisResult AnalyzeData(ISequenceData[] ndata, Parameters param, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData[] sdata, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceMultiProcessing {
    public abstract virtual ISequenceData ProcessData(ISequenceData[] inputData, Parameters param, IData[]& supplData, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData[] inputData, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceProcessing {
    public abstract virtual void ProcessData(ISequenceData mdata, Parameters param, IData[]& supplData, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData mdata, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceToMatrix {
    public abstract virtual void ProcessData(ISequenceData inData, IMatrixData outData, Parameters param, IData[]& supplData, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(ISequenceData mdata, String& errString);
}
public interface PerseusLibS.Api.SequenceApi.ISequenceUpload {
    public abstract virtual void LoadData(ISequenceData sequenceData, Parameters parameters, IData[]& supplData, ProcessInfo processInfo);
}
public enum PerseusLibS.Api.SequenceApi.SequenceType : Enum {
    public int value__;
    public static SequenceType Dna;
    public static SequenceType Rna;
    public static SequenceType Protein;
}
internal class PerseusLibS.Cols.AnnotColumnCorum : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnEc : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnEggnog : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnEnsg : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnEnsp : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnEnst : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnFlybase : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGeneNames : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGobp : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGobpName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGobpSlim : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGobpSlimName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGocc : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGoccName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGoccSlim : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGoccSlimName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGomf : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnGomfName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnInterpro : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnInterproName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnIsoformIds : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnKegg : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnKeggName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnKeywords : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnMgi : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnMim : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnMsigdb : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPdb : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPfam : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPfamName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPrints : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPrintsName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnProsite : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnPrositeName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnProteinNames : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnReactome : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnSgd : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnSmart : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnSmartName : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnTax : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnUniprotNames : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
internal class PerseusLibS.Cols.AnnotColumnWormBase : PerseusAnnotationColumn {
    public string Title { get; }
    public AnnotType Type { get; }
    public virtual string get_Title();
    public virtual AnnotType get_Type();
    public virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
}
public interface PerseusLibS.Cols.IAnnotationInfo {
    public Dictionary`2<string, List`1<string>> CorumMap { get; }
    public GoParser Gopa { get; }
    public KeggNamesParser KeggNamesParser { get; }
    public Dictionary`2<string, List`1<string>> GseaMap { get; }
    public abstract virtual Dictionary`2<string, List`1<string>> get_CorumMap();
    public abstract virtual GoParser get_Gopa();
    public abstract virtual KeggNamesParser get_KeggNamesParser();
    public abstract virtual Dictionary`2<string, List`1<string>> get_GseaMap();
    public abstract virtual String[] GetKeggPathways(UniprotEntry entry);
}
public abstract class PerseusLibS.Cols.PerseusAnnotationColumn : object {
    public static string separator;
    public static PerseusAnnotationColumn ensg;
    public static PerseusAnnotationColumn enst;
    public static PerseusAnnotationColumn ensp;
    public static PerseusAnnotationColumn geneName;
    internal static PerseusAnnotationColumn isoformId;
    public static PerseusAnnotationColumn[] allCols;
    public string Title { get; }
    public AnnotType Type { get; }
    private static PerseusAnnotationColumn();
    internal static String[] Cleanup(String[] x);
    private static string Cleanup(string s);
    public abstract virtual string get_Title();
    public abstract virtual AnnotType get_Type();
    public abstract virtual string GetValue(UniprotEntry entry, IAnnotationInfo uaf);
    public String[] GetValues(UniprotEntry entry, IAnnotationInfo uaf);
    internal static String[] GetGo(UniprotEntry entry, IAnnotationInfo uaf, Namespace nspace);
    internal static string GetUprotNames(UniprotEntry entry, DbReferenceType type);
    internal static string GetUprot(UniprotEntry entry, DbReferenceType type);
    public static string ToString1(AnnotType type);
}
[DefaultMemberAttribute("Item")]
internal class PerseusLibS.Data.Category.BoolCategoryVectorData : object {
    private Boolean[] vector;
    private string value;
    private string falseValue;
    public String[] Item { get; }
    public int Length { get; }
    public String[] Values { get; }
    internal BoolCategoryVectorData(Array[] vals, string value);
    internal BoolCategoryVectorData(String[][] vals, string value, string falseValue);
    public BoolCategoryVectorData(Boolean[] vector, string value, string falseValue);
    public sealed virtual String[] get_Item(int i);
    public sealed virtual int get_Length();
    public sealed virtual ICategoryVectorData GetSubVector(Int32[] indices);
    public sealed virtual String[] get_Values();
    public sealed virtual ICategoryVectorData Copy();
}
[DefaultMemberAttribute("Item")]
public class PerseusLibS.Data.Category.CategoryVector : object {
    private ICategoryVectorData data;
    public String[] Item { get; }
    public int Length { get; }
    public String[] Values { get; }
    internal CategoryVector(ICategoryVectorData data);
    public CategoryVector(String[][] vals);
    public String[] get_Item(int i);
    public int get_Length();
    public String[][] GetAllData();
    public String[] get_Values();
    public CategoryVector SubArray(Int32[] indices);
    public CategoryVector Copy();
    internal static bool AllLengthOne(Array[] vals);
    internal static bool Fill(String[][] vals, UInt16[][] categoryData, String[]& allVals);
    private static void Cleanup(IList`1<String[]> vals);
}
[DefaultMemberAttribute("Item")]
internal class PerseusLibS.Data.Category.EmptyCategoryVectorData : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Length>k__BackingField;
    public int Length { get; }
    public String[] Item { get; }
    public String[] Values { get; }
    internal EmptyCategoryVectorData(int len);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    public sealed virtual String[] get_Item(int i);
    public sealed virtual ICategoryVectorData GetSubVector(Int32[] indices);
    public sealed virtual String[] get_Values();
    public sealed virtual ICategoryVectorData Copy();
}
[DefaultMemberAttribute("Item")]
internal interface PerseusLibS.Data.Category.ICategoryVectorData {
    public String[] Item { get; }
    public int Length { get; }
    public String[] Values { get; }
    public abstract virtual String[] get_Item(int i);
    public abstract virtual int get_Length();
    public abstract virtual ICategoryVectorData GetSubVector(Int32[] indices);
    public abstract virtual String[] get_Values();
    public abstract virtual ICategoryVectorData Copy();
}
[DefaultMemberAttribute("Item")]
internal class PerseusLibS.Data.Category.StringCategoryVectorData : object {
    private String[][] categoryData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Values>k__BackingField;
    public String[] Values { get; private set; }
    public String[] Item { get; }
    public int Length { get; }
    internal StringCategoryVectorData(String[][] vals);
    private StringCategoryVectorData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(String[] value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual String[] get_Item(int i);
    public sealed virtual int get_Length();
    public sealed virtual ICategoryVectorData GetSubVector(Int32[] indices);
    private static String[] GetValues(IEnumerable`1<String[]> terms);
    public sealed virtual ICategoryVectorData Copy();
}
[DefaultMemberAttribute("Item")]
internal class PerseusLibS.Data.Category.UshortCategoryVectorData : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Values>k__BackingField;
    private UInt16[][] categoryData;
    public String[] Values { get; }
    public String[] Item { get; }
    public int Length { get; }
    internal UshortCategoryVectorData(UInt16[][] categoryData, String[] allVals);
    private UshortCategoryVectorData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Values();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual String[] get_Item(int i);
    public sealed virtual int get_Length();
    public sealed virtual ICategoryVectorData GetSubVector(Int32[] indices);
    public static UInt16[][] SubArray(IList`1<UInt16[]> array, IList`1<int> indices);
    public sealed virtual ICategoryVectorData Copy();
}
public class PerseusLibS.Data.DataInfo : object {
    public static int serial;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IData2 <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IAnalysisResult> <Results>k__BackingField;
    public IData2 Data { get; public set; }
    public string Title { get; public set; }
    public List`1<IAnalysisResult> Results { get; public set; }
    public DataInfo(IData2 data, List`1<IAnalysisResult> results);
    [CompilerGeneratedAttribute]
public IData2 get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IData2 value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public List`1<IAnalysisResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<IAnalysisResult> value);
}
public enum PerseusLibS.Data.DataType2 : Enum {
    public int value__;
    public static DataType2 Matrix;
    public static DataType2 Document;
    public static DataType2 Sequence;
    public static DataType2 Network;
    public static DataType2 Image;
    public static DataType2 Visualization;
    public static DataType2 Unknown;
}
public class PerseusLibS.Data.DataWithAnnotationColumns : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <CategoryColumnNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <NumericColumnNames>k__BackingField;
    private List`1<string> stringColumnNames;
    public List`1<string> matrixNames;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <MultiNumericColumnNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <CategoryColumnDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <NumericColumnDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <StringColumnDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <MultiNumericColumnDescriptions>k__BackingField;
    private StringVectors stringColumnData;
    private MultiNumericVectors multiNumericColumnData;
    private List`1<CategoryVector> categoryColumnData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Double[]> <NumericColumns>k__BackingField;
    public List`1<string> CategoryColumnNames { get; public set; }
    public List`1<string> NumericColumnNames { get; public set; }
    public List`1<string> MultiNumericColumnNames { get; public set; }
    public List`1<string> CategoryColumnDescriptions { get; public set; }
    public List`1<string> NumericColumnDescriptions { get; public set; }
    public List`1<string> StringColumnDescriptions { get; public set; }
    public List`1<string> MultiNumericColumnDescriptions { get; public set; }
    public List`1<Double[]> NumericColumns { get; public set; }
    public List`1<Double[][]> MultiNumericColumns { get; public set; }
    unknown List`1<String[][]> CategoryColumns {public set; }
    public List`1<String[]> StringColumns { get; public set; }
    public List`1<string> StringColumnNames { get; public set; }
    public int NumericColumnCount { get; }
    public int CategoryColumnCount { get; }
    public int MultiNumericColumnCount { get; }
    public int StringColumnCount { get; }
    public int RowCount { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_CategoryColumnNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CategoryColumnNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_NumericColumnNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericColumnNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_MultiNumericColumnNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiNumericColumnNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_CategoryColumnDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CategoryColumnDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_NumericColumnDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericColumnDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_StringColumnDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StringColumnDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_MultiNumericColumnDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiNumericColumnDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Double[]> get_NumericColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericColumns(List`1<Double[]> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericColumns();
    public sealed virtual void set_MultiNumericColumns(List`1<Double[][]> value);
    public sealed virtual void set_CategoryColumns(List`1<String[][]> value);
    public sealed virtual List`1<String[]> get_StringColumns();
    public sealed virtual void set_StringColumns(List`1<String[]> value);
    public sealed virtual List`1<string> get_StringColumnNames();
    public sealed virtual void set_StringColumnNames(List`1<string> value);
    public sealed virtual void CopyAnnotationColumnsFrom(IDataWithAnnotationColumns other);
    public sealed virtual void CopyAnnotationColumnsFromRows(IDataWithAnnotationRows other);
    private int GetCategoryColumnLengthAt(int column);
    public sealed virtual String[][] GetCategoryColumnAt(int column);
    public sealed virtual String[] GetCategoryColumnEntryAt(int column, int row);
    public String[][] GetCategoryColumnsEntriesAt(int row);
    public sealed virtual String[] GetCategoryColumnValuesAt(int column);
    public sealed virtual void SetCategoryColumnAt(String[][] vals, int column);
    public sealed virtual void RemoveCategoryColumnAt(int index);
    public sealed virtual void AddCategoryColumn(string name1, string description, String[][] vals);
    public sealed virtual double NumericColumnAt(int column, int row);
    public sealed virtual void ClearCategoryColumns();
    public sealed virtual void AddNumericColumn(string name1, string description, Double[] vals);
    public sealed virtual void RemoveNumericColumnAt(int index);
    public sealed virtual void ClearStringColumns();
    public sealed virtual void AddStringColumn(string name1, string description, String[] vals);
    public sealed virtual void RemoveStringColumnAt(int index);
    public sealed virtual string StringColumnAt(int column, int row);
    public sealed virtual void ClearMultiNumericColumns();
    public sealed virtual void AddMultiNumericColumn(string name1, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericColumnAt(int index);
    public sealed virtual Double[] MultiNumericColumnAt(int column, int row);
    public sealed virtual void ClearNumericColumns();
    public sealed virtual int get_NumericColumnCount();
    public sealed virtual int get_CategoryColumnCount();
    public sealed virtual int get_MultiNumericColumnCount();
    public sealed virtual int get_StringColumnCount();
    public void Clear();
    public virtual void ExtractRows(Int32[] cols);
    public void Dispose();
    public virtual int get_RowCount();
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<string> stringColumnDescriptions, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<string> categoryColumnDescriptions, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<string> numericColumnDescriptions, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<string> multiNumericColumnDescriptions, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void ClearAnnotationColumns();
    public void Clone(IDataWithAnnotationColumns clone);
    protected static List`1<string> CloneX(IEnumerable`1<string> x);
    public static List`1<T> CreateEmpty(IList`1<T> x, T y);
    public sealed virtual bool Equals(IDataWithAnnotationColumns other);
    private static bool TwoDimEquality(T[][] multiNumerics, T[][] otherMultiNumerics);
    public bool IsConsistent(String& errString);
}
[ExtensionAttribute]
public static class PerseusLibS.Data.DataWithAnnotationColumnsExtensions : object {
    [ExtensionAttribute]
public static String[][] GetCategoryColumn(IDataWithAnnotationColumns data, string colname);
    [ExtensionAttribute]
public static bool TryGetStringColumn(IDataWithAnnotationColumns data, string colname, String[]& column);
    [ExtensionAttribute]
public static String[] GetStringColumn(IDataWithAnnotationColumns data, string colname);
    [ExtensionAttribute]
public static Double[] GetNumericColumn(IDataWithAnnotationColumns data, string colname);
    [ExtensionAttribute]
public static int AnnotationColumnCount(IDataWithAnnotationColumns data);
}
public class PerseusLibS.Data.DataWithAnnotationRows : object {
    private List`1<string> columnNames;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <ColumnDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <CategoryRowNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <NumericRowNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <StringRowNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <MultiNumericRowNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <CategoryRowDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <NumericRowDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <StringRowDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <MultiNumericRowDescriptions>k__BackingField;
    private StringVectors stringRowData;
    private List`1<CategoryVector> categoryRowData;
    private MultiNumericVectors multiNumericRowData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Double[]> <NumericRows>k__BackingField;
    public List`1<string> ColumnDescriptions { get; public set; }
    public List`1<string> CategoryRowNames { get; public set; }
    public List`1<string> NumericRowNames { get; public set; }
    public List`1<string> StringRowNames { get; public set; }
    public List`1<string> MultiNumericRowNames { get; public set; }
    public List`1<string> CategoryRowDescriptions { get; public set; }
    public List`1<string> NumericRowDescriptions { get; public set; }
    public List`1<string> StringRowDescriptions { get; public set; }
    public List`1<string> MultiNumericRowDescriptions { get; public set; }
    public List`1<Double[]> NumericRows { get; public set; }
    public List`1<Double[][]> MultiNumericRows { get; public set; }
    public List`1<string> ColumnNames { get; public set; }
    public List`1<String[]> StringRows { get; public set; }
    unknown List`1<String[][]> CategoryRows {public set; }
    public int MainColumnRowCount { get; }
    public int MainColumnDescriptionRowCount { get; }
    public int NumericRowCount { get; }
    public int CategoryRowCount { get; }
    public int MultiNumericRowCount { get; }
    public int StringRowCount { get; }
    public int ColumnCount { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_ColumnDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColumnDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_CategoryRowNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CategoryRowNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_NumericRowNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericRowNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_StringRowNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StringRowNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_MultiNumericRowNames();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiNumericRowNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_CategoryRowDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CategoryRowDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_NumericRowDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericRowDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_StringRowDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StringRowDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_MultiNumericRowDescriptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiNumericRowDescriptions(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Double[]> get_NumericRows();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumericRows(List`1<Double[]> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericRows();
    public sealed virtual void set_MultiNumericRows(List`1<Double[][]> value);
    public sealed virtual List`1<string> get_ColumnNames();
    public sealed virtual void set_ColumnNames(List`1<string> value);
    public sealed virtual List`1<String[]> get_StringRows();
    public sealed virtual void set_StringRows(List`1<String[]> value);
    public sealed virtual void set_CategoryRows(List`1<String[][]> value);
    public sealed virtual void CopyAnnotationRowsFrom(IDataWithAnnotationRows other);
    public sealed virtual void CopyAnnotationRowsFromColumns(IDataWithAnnotationColumns other);
    public sealed virtual String[][] GetCategoryRowAt(int index);
    public sealed virtual String[] GetCategoryRowEntryAt(int index, int column);
    public sealed virtual String[] GetCategoryRowValuesAt(int index);
    public sealed virtual void SetCategoryRowAt(String[][] vals, int index);
    public sealed virtual void RemoveCategoryRowAt(int index);
    public sealed virtual void AddCategoryRow(string name1, string description, String[][] vals);
    public sealed virtual void ClearCategoryRows();
    public sealed virtual void AddNumericRow(string name1, string description, Double[] vals);
    public void AddCategoryRows(IList`1<string> names, IList`1<string> descriptions, IList`1<String[][]> vals);
    public sealed virtual void RemoveNumericRowAt(int index);
    public sealed virtual void ClearStringRows();
    public sealed virtual void AddStringRow(string name1, string description, String[] vals);
    public sealed virtual void RemoveStringRowAt(int index);
    public sealed virtual void ClearMultiNumericRows();
    public sealed virtual void AddMultiNumericRow(string name1, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericRowAt(int index);
    public sealed virtual void ClearNumericRows();
    public int get_MainColumnRowCount();
    public int get_MainColumnDescriptionRowCount();
    public sealed virtual int get_NumericRowCount();
    public sealed virtual int get_CategoryRowCount();
    public sealed virtual int get_MultiNumericRowCount();
    public sealed virtual int get_StringRowCount();
    public void Clear();
    public virtual void ExtractColumns(Int32[] cols);
    public void Dispose();
    public sealed virtual int get_ColumnCount();
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<string> stringRowDescriptions, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<string> categoryRowDescriptions, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<string> numericRowDescriptions, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<string> multiNumericRowDescriptions, List`1<Double[][]> multiNumericRows);
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<Double[][]> multiNumericRows);
    public sealed virtual void ClearAnnotationRows();
    public void Clone(IDataWithAnnotationRows clone);
    protected static List`1<string> CloneX(IEnumerable`1<string> x);
    public static List`1<T> CreateEmpty(IList`1<T> x, T y);
    public sealed virtual bool Equals(IDataWithAnnotationRows other);
    private static bool TwoDimEquality(T[][] multiNumerics, T[][] otherMultiNumerics);
    public bool IsConsistent(String& errString);
}
public class PerseusLibS.Data.DocumentData : InternalDataWithAnnotationRows {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DocumentType> <Type>k__BackingField;
    public List`1<string> Text { get; public set; }
    public List`1<string> Header { get; public set; }
    public List`1<DocumentType> Type { get; public set; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Header();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Header(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<DocumentType> get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(List`1<DocumentType> value);
    public sealed virtual void AddTextBlock(string text);
    public sealed virtual void AddTextBlock(string text, string header);
    public sealed virtual void AddTextBlock(string text, string header, DocumentType type);
    public virtual DataType2 get_DataType2();
    public virtual string get_TypeName();
    public virtual Bitmap2 get_WorkflowImage();
    public virtual DataNode CreateDataNode();
    public virtual ActivityNode CreateLoadNode(int numSupplTables);
    public virtual ActivityNode CreateAnalysisNode();
    public virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData ndata, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    internal virtual ActivityNode CreateExportNode();
    public virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual WorkflowEdge CreateWorkflowEdge();
    public virtual Parameters GetExportParameters(IExport export, String& errorString);
    public virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    public virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    public virtual object Clone();
    public virtual void Dispose();
    public virtual IData CreateNewInstance();
    public virtual void Clear();
    public virtual bool Equals(IData other);
    public virtual DataType get_DataType();
    private static IDocumentData[] CastData(IList`1<InternalData> inputData);
}
public class PerseusLibS.Data.EnsgInfo : object {
    public HashSet`1<string> enst;
    public HashSet`1<string> ensp;
    public HashSet`1<string> geneName;
    public HashSet`1<string> uniprot;
}
public class PerseusLibS.Data.GeneInfo : object {
    public int min;
    public int max;
    public bool positive;
    public string chromosome;
    public GeneInfo(int start, int stop, bool positive, string chromosome);
    public void Add(int start, int stop);
}
[DefaultMemberAttribute("Item")]
public class PerseusLibS.Data.Image.ImageData : InternalDataWithAnnotationRows {
    private List`1<IImageSubject> subjectList;
    public DataType DataType { get; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public IImageSubject Item { get; }
    public int Count { get; }
    public ImageData(int id);
    public virtual void Clear();
    public virtual bool Equals(IData other);
    public virtual string ToString();
    public virtual DataType get_DataType();
    public virtual DataType2 get_DataType2();
    public virtual string get_TypeName();
    public virtual Bitmap2 get_WorkflowImage();
    public virtual WorkflowEdge CreateWorkflowEdge();
    public virtual Parameters GetExportParameters(IExport export, String& errorString);
    public virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    public virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public virtual object Clone();
    public virtual IData CreateNewInstance();
    public virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData ndata, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    internal virtual ActivityNode CreateExportNode();
    private sealed virtual override IEnumerator`1<IImageSubject> System.Collections.Generic.IEnumerable<BaseLibS.Api.Image.IImageSubject>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    public virtual DataNode CreateDataNode();
    public virtual ActivityNode CreateLoadNode(int numSupplTables);
    public virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateAnalysisNode();
    public virtual void Dispose();
    private static IImageData[] CastData(IList`1<InternalData> inputData);
    public sealed virtual void AddSubject(string name, SubjectData subjectData);
    public sealed virtual void AddAnat(Single[0...,0...,0...] data, float voxelSizeXmm, float voxelSizeYmm, float voxelSizeZmm);
    public sealed virtual void AddFunc(Single[0...,0...,0...,0...] data, float repetitionTimeSeconds, float voxelSizeXmm, float voxelSizeYmm, float voxelSizeZmm);
    public sealed virtual void AddDwi(Single[0...,0...,0...,0...] data, float repetitionTimeSeconds, float voxelSizeXmm, float voxelSizeYmm, float voxelSizeZmm);
    public sealed virtual IImageSubject get_Item(int i);
    public sealed virtual int get_Count();
    public virtual bool IsConsistent(String& errString);
}
public class PerseusLibS.Data.Image.ImageSeries : object {
    private Single[0...,0...,0...,0...] data;
    private Single[0...,0...,0...,0...] weights;
    private float minValue;
    private float maxValue;
    private Single[] thresholds;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTwoSided>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <RepetitionTimeSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeXmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeYmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeZmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public bool IsTwoSided { get; private set; }
    public float RepetitionTimeSeconds { get; }
    public float VoxelSizeXmm { get; }
    public float VoxelSizeYmm { get; }
    public float VoxelSizeZmm { get; }
    public string Name { get; }
    public int LengthT { get; }
    public int LengthX { get; }
    public int LengthY { get; }
    public int LengthZ { get; }
    public int IndicatorCount { get; }
    public float MinValue { get; }
    public float MaxValue { get; }
    public bool HasTime { get; }
    public bool IsFlat { get; }
    public int FlatDimension { get; }
    public bool HasWeights { get; }
    public int NumComponents { get; }
    public ImageSeries(Single[0...,0...,0...,0...] data, float repetitionTimeSeconds, float voxelSizeXmm, float voxelSizeYmm, float voxelSizeZmm, string name);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTwoSided();
    [CompilerGeneratedAttribute]
private void set_IsTwoSided(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_RepetitionTimeSeconds();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeXmm();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeYmm();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeZmm();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual float GetValueAt(int t, int x, int y, int z);
    public sealed virtual float GetWeightAt(int c, int x, int y, int z);
    public sealed virtual bool GetIndicatorAt(int c, int x, int y, int z);
    public sealed virtual void SetWeights(Single[0...,0...,0...,0...] weights1, bool isTwoSided1);
    private static Double[] Extract(int i, Single[0...,0...,0...,0...] f);
    public sealed virtual int get_LengthT();
    public sealed virtual int get_LengthX();
    public sealed virtual int get_LengthY();
    public sealed virtual int get_LengthZ();
    public sealed virtual int get_IndicatorCount();
    public sealed virtual float get_MinValue();
    public sealed virtual float get_MaxValue();
    public sealed virtual bool get_HasTime();
    public sealed virtual bool get_IsFlat();
    public sealed virtual int get_FlatDimension();
    public sealed virtual bool get_HasWeights();
    public sealed virtual int get_NumComponents();
    public sealed virtual object Clone();
}
public class PerseusLibS.Data.Image.SingleImage : object {
    private Single[0...,0...,0...] data;
    private float minValue;
    private float maxValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeXmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeYmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <VoxelSizeZmm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public float RepetitionTimeSeconds { get; }
    public float VoxelSizeXmm { get; }
    public float VoxelSizeYmm { get; }
    public float VoxelSizeZmm { get; }
    public string Name { get; }
    public int LengthT { get; }
    public int LengthX { get; }
    public int LengthY { get; }
    public int LengthZ { get; }
    public int IndicatorCount { get; }
    public float MinValue { get; }
    public float MaxValue { get; }
    public bool HasTime { get; }
    public bool IsFlat { get; }
    public int FlatDimension { get; }
    public bool HasWeights { get; }
    public int NumComponents { get; }
    public bool IsTwoSided { get; }
    public SingleImage(Single[0...,0...,0...] data, float voxelSizeXmm, float voxelSizeYmm, float voxelSizeZmm, string name);
    public sealed virtual float get_RepetitionTimeSeconds();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeXmm();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeYmm();
    [CompilerGeneratedAttribute]
public sealed virtual float get_VoxelSizeZmm();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual float GetValueAt(int t, int x, int y, int z);
    public sealed virtual float GetWeightAt(int c, int x, int y, int z);
    public sealed virtual bool GetIndicatorAt(int c, int x, int y, int z);
    public sealed virtual void SetWeights(Single[0...,0...,0...,0...] weights, bool isTwoSided);
    public sealed virtual int get_LengthT();
    public sealed virtual int get_LengthX();
    public sealed virtual int get_LengthY();
    public sealed virtual int get_LengthZ();
    public sealed virtual int get_IndicatorCount();
    public sealed virtual float get_MinValue();
    public sealed virtual float get_MaxValue();
    public sealed virtual bool get_HasTime();
    public sealed virtual bool get_IsFlat();
    public sealed virtual int get_FlatDimension();
    public sealed virtual bool get_HasWeights();
    public sealed virtual int get_NumComponents();
    public sealed virtual bool get_IsTwoSided();
    public sealed virtual object Clone();
}
public class PerseusLibS.Data.Image.Subject : object {
    private List`1<IImageSeries> anat;
    private List`1<IImageSeries> func;
    private List`1<IImageSeries> dwi;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SubjectData <SubjectData>k__BackingField;
    public int AnatCount { get; }
    public int FuncCount { get; }
    public int DwiCount { get; }
    public string Name { get; private set; }
    public SubjectData SubjectData { get; private set; }
    public int AtomCount { get; }
    public Subject(string name, SubjectData subjectData);
    public void AddAnat(IImageSeries s);
    public void AddFunc(IImageSeries s);
    public void AddDwi(IImageSeries s);
    public sealed virtual IImageSeries GetAnatAt(int index);
    public sealed virtual IImageSeries GetFuncAt(int index);
    public sealed virtual IImageSeries GetDwiAt(int index);
    public sealed virtual IImageSeries GetAt(MriType type, int index);
    public sealed virtual int get_AnatCount();
    public sealed virtual int get_FuncCount();
    public sealed virtual int get_DwiCount();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public SubjectData get_SubjectData();
    [CompilerGeneratedAttribute]
private void set_SubjectData(SubjectData value);
    public sealed virtual object Clone();
    public sealed virtual IAtom GetAtomAt(int index);
    public sealed virtual int get_AtomCount();
}
public abstract class PerseusLibS.Data.InternalData : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AltName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <User>k__BackingField;
    public int Id { get; public set; }
    public DataType DataType { get; }
    public string Name { get; public set; }
    public string AltName { get; public set; }
    public string Description { get; public set; }
    public string Origin { get; public set; }
    public DateTime CreationDate { get; public set; }
    public string User { get; public set; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public virtual bool IsConsistent(String& errString);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(int value);
    public abstract virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AltName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AltName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_User();
    [CompilerGeneratedAttribute]
public sealed virtual void set_User(string value);
    public abstract virtual DataType2 get_DataType2();
    public abstract virtual string get_TypeName();
    public abstract virtual Bitmap2 get_WorkflowImage();
    public abstract virtual DataNode CreateDataNode();
    public abstract virtual ActivityNode CreateLoadNode(int numSupplTables);
    public abstract virtual ActivityNode CreateAnalysisNode();
    public abstract virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public abstract virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public abstract virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public abstract virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public abstract virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public abstract virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public abstract virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public abstract virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public abstract virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal abstract virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public abstract virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public abstract virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData data, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public abstract virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    internal abstract virtual ActivityNode CreateExportNode();
    public abstract virtual WorkflowEdge CreateWorkflowEdge();
    public abstract virtual Parameters GetExportParameters(IExport export, String& errorString);
    public abstract virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public abstract virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public abstract virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public abstract virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public abstract virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    public abstract virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public abstract virtual object Clone();
    public abstract virtual void Dispose();
    public abstract virtual IData CreateNewInstance();
    public sealed virtual IData CreateNewInstance(DataType type);
    public abstract virtual void Clear();
    protected void FillClone(InternalData idataClone);
    public abstract virtual bool Equals(IData other);
}
public abstract class PerseusLibS.Data.InternalDataWithAnnotationColumns : InternalData {
    private DataWithAnnotationColumns dataWithAnnotationColumnsImplementation;
    public int RowCount { get; }
    public int CategoryColumnCount { get; }
    public List`1<string> CategoryColumnNames { get; public set; }
    public List`1<string> CategoryColumnDescriptions { get; public set; }
    unknown List`1<String[][]> CategoryColumns {public set; }
    public List`1<Double[]> NumericColumns { get; public set; }
    public int NumericColumnCount { get; }
    public List`1<string> NumericColumnNames { get; public set; }
    public List`1<string> NumericColumnDescriptions { get; public set; }
    public List`1<String[]> StringColumns { get; public set; }
    public int StringColumnCount { get; }
    public List`1<string> StringColumnNames { get; public set; }
    public List`1<string> StringColumnDescriptions { get; public set; }
    public List`1<Double[][]> MultiNumericColumns { get; public set; }
    public int MultiNumericColumnCount { get; }
    public List`1<string> MultiNumericColumnNames { get; public set; }
    public List`1<string> MultiNumericColumnDescriptions { get; public set; }
    public virtual void Clear();
    public virtual void Dispose();
    public void Clone(InternalDataWithAnnotationColumns clone);
    public sealed virtual void CopyAnnotationColumnsFrom(IDataWithAnnotationColumns other);
    public sealed virtual void CopyAnnotationColumnsFromRows(IDataWithAnnotationRows other);
    public sealed virtual String[][] GetCategoryColumnAt(int column);
    public sealed virtual String[] GetCategoryColumnEntryAt(int column, int row);
    public sealed virtual String[] GetCategoryColumnValuesAt(int column);
    public sealed virtual void SetCategoryColumnAt(String[][] vals, int column);
    public sealed virtual void RemoveCategoryColumnAt(int column);
    public sealed virtual void ClearCategoryColumns();
    public sealed virtual void AddCategoryColumn(string name, string description, String[][] vals);
    public sealed virtual double NumericColumnAt(int column, int row);
    public sealed virtual void ClearNumericColumns();
    public sealed virtual void AddNumericColumn(string name, string description, Double[] vals);
    public sealed virtual void RemoveNumericColumnAt(int index);
    public sealed virtual void ClearStringColumns();
    public sealed virtual void AddStringColumn(string name, string description, String[] vals);
    public sealed virtual void RemoveStringColumnAt(int index);
    public sealed virtual string StringColumnAt(int column, int row);
    public sealed virtual void ClearMultiNumericColumns();
    public sealed virtual void AddMultiNumericColumn(string name, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericColumnAt(int index);
    public sealed virtual Double[] MultiNumericColumnAt(int column, int row);
    public virtual void ExtractRows(Int32[] indices);
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<string> stringColumnDescriptions, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<string> categoryColumnDescriptions, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<string> numericColumnDescriptions, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<string> multiNumericColumnDescriptions, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void ClearAnnotationColumns();
    public virtual int get_RowCount();
    public sealed virtual int get_CategoryColumnCount();
    public sealed virtual List`1<string> get_CategoryColumnNames();
    public sealed virtual void set_CategoryColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_CategoryColumnDescriptions();
    public sealed virtual void set_CategoryColumnDescriptions(List`1<string> value);
    public sealed virtual void set_CategoryColumns(List`1<String[][]> value);
    public sealed virtual List`1<Double[]> get_NumericColumns();
    public sealed virtual void set_NumericColumns(List`1<Double[]> value);
    public sealed virtual int get_NumericColumnCount();
    public sealed virtual List`1<string> get_NumericColumnNames();
    public sealed virtual void set_NumericColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_NumericColumnDescriptions();
    public sealed virtual void set_NumericColumnDescriptions(List`1<string> value);
    public sealed virtual List`1<String[]> get_StringColumns();
    public sealed virtual void set_StringColumns(List`1<String[]> value);
    public sealed virtual int get_StringColumnCount();
    public sealed virtual List`1<string> get_StringColumnNames();
    public sealed virtual void set_StringColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_StringColumnDescriptions();
    public sealed virtual void set_StringColumnDescriptions(List`1<string> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericColumns();
    public sealed virtual void set_MultiNumericColumns(List`1<Double[][]> value);
    public sealed virtual int get_MultiNumericColumnCount();
    public sealed virtual List`1<string> get_MultiNumericColumnNames();
    public sealed virtual void set_MultiNumericColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_MultiNumericColumnDescriptions();
    public sealed virtual void set_MultiNumericColumnDescriptions(List`1<string> value);
    public sealed virtual bool Equals(IDataWithAnnotationColumns other);
}
public abstract class PerseusLibS.Data.InternalDataWithAnnotationRows : InternalData {
    private DataWithAnnotationRows dataWithAnnotationRowsImplementation;
    public int ColumnCount { get; }
    public int CategoryRowCount { get; }
    public List`1<string> CategoryRowNames { get; public set; }
    public List`1<string> CategoryRowDescriptions { get; public set; }
    unknown List`1<String[][]> CategoryRows {public set; }
    public List`1<Double[]> NumericRows { get; public set; }
    public int NumericRowCount { get; }
    public List`1<string> NumericRowNames { get; public set; }
    public List`1<string> NumericRowDescriptions { get; public set; }
    public List`1<String[]> StringRows { get; public set; }
    public int StringRowCount { get; }
    public List`1<string> StringRowNames { get; public set; }
    public List`1<string> StringRowDescriptions { get; public set; }
    public List`1<Double[][]> MultiNumericRows { get; public set; }
    public int MultiNumericRowCount { get; }
    public List`1<string> MultiNumericRowNames { get; public set; }
    public List`1<string> MultiNumericRowDescriptions { get; public set; }
    public List`1<string> ColumnNames { get; public set; }
    public List`1<string> ColumnDescriptions { get; public set; }
    public virtual void Clear();
    public virtual void Dispose();
    public void Clone(InternalDataWithAnnotationRows other);
    public virtual bool IsConsistent(String& errString);
    public sealed virtual void CopyAnnotationRowsFrom(IDataWithAnnotationRows other);
    public sealed virtual void CopyAnnotationRowsFromColumns(IDataWithAnnotationColumns other);
    public sealed virtual String[][] GetCategoryRowAt(int row);
    public sealed virtual String[] GetCategoryRowEntryAt(int row, int column);
    public sealed virtual String[] GetCategoryRowValuesAt(int row);
    public sealed virtual void SetCategoryRowAt(String[][] vals, int index);
    public sealed virtual void RemoveCategoryRowAt(int index);
    public sealed virtual void ClearCategoryRows();
    public sealed virtual void AddCategoryRow(string name, string description, String[][] vals);
    public sealed virtual void ClearNumericRows();
    public sealed virtual void AddNumericRow(string name, string description, Double[] vals);
    public sealed virtual void RemoveNumericRowAt(int index);
    public sealed virtual void ClearStringRows();
    public sealed virtual void AddStringRow(string name, string description, String[] vals);
    public sealed virtual void RemoveStringRowAt(int index);
    public sealed virtual void ClearMultiNumericRows();
    public sealed virtual void AddMultiNumericRow(string name, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericRowAt(int index);
    public virtual void ExtractColumns(Int32[] indices);
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<string> stringRowDescriptions, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<string> categoryRowDescriptions, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<string> numericRowDescriptions, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<string> multiNumericRowDescriptions, List`1<Double[][]> multiNumericRows);
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<Double[][]> multiNumericRows);
    public sealed virtual void ClearAnnotationRows();
    public sealed virtual int get_ColumnCount();
    public sealed virtual int get_CategoryRowCount();
    public sealed virtual List`1<string> get_CategoryRowNames();
    public sealed virtual void set_CategoryRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_CategoryRowDescriptions();
    public sealed virtual void set_CategoryRowDescriptions(List`1<string> value);
    public sealed virtual void set_CategoryRows(List`1<String[][]> value);
    public sealed virtual List`1<Double[]> get_NumericRows();
    public sealed virtual void set_NumericRows(List`1<Double[]> value);
    public sealed virtual int get_NumericRowCount();
    public sealed virtual List`1<string> get_NumericRowNames();
    public sealed virtual void set_NumericRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_NumericRowDescriptions();
    public sealed virtual void set_NumericRowDescriptions(List`1<string> value);
    public sealed virtual List`1<String[]> get_StringRows();
    public sealed virtual void set_StringRows(List`1<String[]> value);
    public sealed virtual int get_StringRowCount();
    public sealed virtual List`1<string> get_StringRowNames();
    public sealed virtual void set_StringRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_StringRowDescriptions();
    public sealed virtual void set_StringRowDescriptions(List`1<string> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericRows();
    public sealed virtual void set_MultiNumericRows(List`1<Double[][]> value);
    public sealed virtual int get_MultiNumericRowCount();
    public sealed virtual List`1<string> get_MultiNumericRowNames();
    public sealed virtual void set_MultiNumericRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_MultiNumericRowDescriptions();
    public sealed virtual void set_MultiNumericRowDescriptions(List`1<string> value);
    public sealed virtual List`1<string> get_ColumnNames();
    public sealed virtual void set_ColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_ColumnDescriptions();
    public sealed virtual void set_ColumnDescriptions(List`1<string> value);
    public sealed virtual bool Equals(IDataWithAnnotationRows other);
}
public abstract class PerseusLibS.Data.InternalDataWithAnnotationRowsAndColumns : InternalData {
    private DataWithAnnotationRows dataWithAnnotationRowsImpl;
    private DataWithAnnotationColumns dataWithAnnotationColumnsImpl;
    public int ColumnCount { get; }
    public int CategoryRowCount { get; }
    public List`1<string> CategoryRowNames { get; public set; }
    public List`1<string> CategoryRowDescriptions { get; public set; }
    unknown List`1<String[][]> CategoryRows {public set; }
    public List`1<Double[]> NumericRows { get; public set; }
    public int NumericRowCount { get; }
    public List`1<string> NumericRowNames { get; public set; }
    public List`1<string> NumericRowDescriptions { get; public set; }
    public List`1<String[]> StringRows { get; public set; }
    public int StringRowCount { get; }
    public List`1<string> StringRowNames { get; public set; }
    public List`1<string> StringRowDescriptions { get; public set; }
    public List`1<Double[][]> MultiNumericRows { get; public set; }
    public int MultiNumericRowCount { get; }
    public List`1<string> MultiNumericRowNames { get; public set; }
    public List`1<string> MultiNumericRowDescriptions { get; public set; }
    public List`1<string> ColumnNames { get; public set; }
    public List`1<string> ColumnDescriptions { get; public set; }
    public int RowCount { get; }
    public int CategoryColumnCount { get; }
    public List`1<string> CategoryColumnNames { get; public set; }
    public List`1<string> CategoryColumnDescriptions { get; public set; }
    unknown List`1<String[][]> CategoryColumns {public set; }
    public List`1<Double[]> NumericColumns { get; public set; }
    public int NumericColumnCount { get; }
    public List`1<string> NumericColumnNames { get; public set; }
    public List`1<string> NumericColumnDescriptions { get; public set; }
    public List`1<String[]> StringColumns { get; public set; }
    public int StringColumnCount { get; }
    public List`1<string> StringColumnNames { get; public set; }
    public List`1<string> StringColumnDescriptions { get; public set; }
    public List`1<Double[][]> MultiNumericColumns { get; public set; }
    public int MultiNumericColumnCount { get; }
    public List`1<string> MultiNumericColumnNames { get; public set; }
    public List`1<string> MultiNumericColumnDescriptions { get; public set; }
    public virtual void Clear();
    public virtual void Dispose();
    public void Clone(InternalDataWithAnnotationRowsAndColumns clone);
    public bool Equals(InternalDataWithAnnotationRowsAndColumns other);
    public virtual bool IsConsistent(String& errString);
    public sealed virtual void CopyAnnotationRowsFrom(IDataWithAnnotationRows other);
    public sealed virtual void CopyAnnotationRowsFromColumns(IDataWithAnnotationColumns other);
    public sealed virtual String[][] GetCategoryRowAt(int row);
    public sealed virtual String[] GetCategoryRowEntryAt(int row, int column);
    public sealed virtual String[] GetCategoryRowValuesAt(int row);
    public sealed virtual void SetCategoryRowAt(String[][] vals, int index);
    public sealed virtual void RemoveCategoryRowAt(int index);
    public sealed virtual void ClearCategoryRows();
    public sealed virtual void AddCategoryRow(string name, string description, String[][] vals);
    public sealed virtual void ClearNumericRows();
    public sealed virtual void AddNumericRow(string name, string description, Double[] vals);
    public sealed virtual void RemoveNumericRowAt(int index);
    public sealed virtual void ClearStringRows();
    public sealed virtual void AddStringRow(string name, string description, String[] vals);
    public sealed virtual void RemoveStringRowAt(int index);
    public sealed virtual void ClearMultiNumericRows();
    public sealed virtual void AddMultiNumericRow(string name, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericRowAt(int index);
    public virtual void ExtractColumns(Int32[] indices);
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<string> stringRowDescriptions, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<string> categoryRowDescriptions, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<string> numericRowDescriptions, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<string> multiNumericRowDescriptions, List`1<Double[][]> multiNumericRows);
    public sealed virtual void SetAnnotationRows(List`1<string> stringRowNames, List`1<String[]> stringRows, List`1<string> categoryRowNames, List`1<String[][]> categoryRows, List`1<string> numericRowNames, List`1<Double[]> numericRows, List`1<string> multiNumericRowNames, List`1<Double[][]> multiNumericRows);
    public sealed virtual void ClearAnnotationRows();
    public sealed virtual int get_ColumnCount();
    public sealed virtual int get_CategoryRowCount();
    public sealed virtual List`1<string> get_CategoryRowNames();
    public sealed virtual void set_CategoryRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_CategoryRowDescriptions();
    public sealed virtual void set_CategoryRowDescriptions(List`1<string> value);
    public sealed virtual void set_CategoryRows(List`1<String[][]> value);
    public sealed virtual List`1<Double[]> get_NumericRows();
    public sealed virtual void set_NumericRows(List`1<Double[]> value);
    public sealed virtual int get_NumericRowCount();
    public sealed virtual List`1<string> get_NumericRowNames();
    public sealed virtual void set_NumericRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_NumericRowDescriptions();
    public sealed virtual void set_NumericRowDescriptions(List`1<string> value);
    public sealed virtual List`1<String[]> get_StringRows();
    public sealed virtual void set_StringRows(List`1<String[]> value);
    public sealed virtual int get_StringRowCount();
    public sealed virtual List`1<string> get_StringRowNames();
    public sealed virtual void set_StringRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_StringRowDescriptions();
    public sealed virtual void set_StringRowDescriptions(List`1<string> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericRows();
    public sealed virtual void set_MultiNumericRows(List`1<Double[][]> value);
    public sealed virtual int get_MultiNumericRowCount();
    public sealed virtual List`1<string> get_MultiNumericRowNames();
    public sealed virtual void set_MultiNumericRowNames(List`1<string> value);
    public sealed virtual List`1<string> get_MultiNumericRowDescriptions();
    public sealed virtual void set_MultiNumericRowDescriptions(List`1<string> value);
    public sealed virtual List`1<string> get_ColumnNames();
    public sealed virtual void set_ColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_ColumnDescriptions();
    public sealed virtual void set_ColumnDescriptions(List`1<string> value);
    public sealed virtual bool Equals(IDataWithAnnotationRows other);
    public sealed virtual void CopyAnnotationColumnsFrom(IDataWithAnnotationColumns other);
    public sealed virtual void CopyAnnotationColumnsFromRows(IDataWithAnnotationRows other);
    public sealed virtual String[][] GetCategoryColumnAt(int column);
    public sealed virtual String[] GetCategoryColumnEntryAt(int column, int row);
    public sealed virtual String[] GetCategoryColumnValuesAt(int column);
    public sealed virtual void SetCategoryColumnAt(String[][] vals, int column);
    public sealed virtual void RemoveCategoryColumnAt(int column);
    public sealed virtual void ClearCategoryColumns();
    public sealed virtual void AddCategoryColumn(string name, string description, String[][] vals);
    public sealed virtual double NumericColumnAt(int column, int row);
    public sealed virtual void ClearNumericColumns();
    public sealed virtual void AddNumericColumn(string name, string description, Double[] vals);
    public sealed virtual void RemoveNumericColumnAt(int index);
    public sealed virtual void ClearStringColumns();
    public sealed virtual void AddStringColumn(string name, string description, String[] vals);
    public sealed virtual void RemoveStringColumnAt(int index);
    public sealed virtual string StringColumnAt(int column, int row);
    public sealed virtual void ClearMultiNumericColumns();
    public sealed virtual void AddMultiNumericColumn(string name, string description, Double[][] vals);
    public sealed virtual void RemoveMultiNumericColumnAt(int index);
    public sealed virtual Double[] MultiNumericColumnAt(int column, int row);
    public virtual void ExtractRows(Int32[] indices);
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void SetAnnotationColumns(List`1<string> stringColumnNames, List`1<string> stringColumnDescriptions, List`1<String[]> stringColumns, List`1<string> categoryColumnNames, List`1<string> categoryColumnDescriptions, List`1<String[][]> categoryColumns, List`1<string> numericColumnNames, List`1<string> numericColumnDescriptions, List`1<Double[]> numericColumns, List`1<string> multiNumericColumnNames, List`1<string> multiNumericColumnDescriptions, List`1<Double[][]> multiNumericColumns);
    public sealed virtual void ClearAnnotationColumns();
    public virtual int get_RowCount();
    public sealed virtual int get_CategoryColumnCount();
    public sealed virtual List`1<string> get_CategoryColumnNames();
    public sealed virtual void set_CategoryColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_CategoryColumnDescriptions();
    public sealed virtual void set_CategoryColumnDescriptions(List`1<string> value);
    public sealed virtual void set_CategoryColumns(List`1<String[][]> value);
    public sealed virtual List`1<Double[]> get_NumericColumns();
    public sealed virtual void set_NumericColumns(List`1<Double[]> value);
    public sealed virtual int get_NumericColumnCount();
    public sealed virtual List`1<string> get_NumericColumnNames();
    public sealed virtual void set_NumericColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_NumericColumnDescriptions();
    public sealed virtual void set_NumericColumnDescriptions(List`1<string> value);
    public sealed virtual List`1<String[]> get_StringColumns();
    public sealed virtual void set_StringColumns(List`1<String[]> value);
    public sealed virtual int get_StringColumnCount();
    public sealed virtual List`1<string> get_StringColumnNames();
    public sealed virtual void set_StringColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_StringColumnDescriptions();
    public sealed virtual void set_StringColumnDescriptions(List`1<string> value);
    public sealed virtual List`1<Double[][]> get_MultiNumericColumns();
    public sealed virtual void set_MultiNumericColumns(List`1<Double[][]> value);
    public sealed virtual int get_MultiNumericColumnCount();
    public sealed virtual List`1<string> get_MultiNumericColumnNames();
    public sealed virtual void set_MultiNumericColumnNames(List`1<string> value);
    public sealed virtual List`1<string> get_MultiNumericColumnDescriptions();
    public sealed virtual void set_MultiNumericColumnDescriptions(List`1<string> value);
    public sealed virtual bool Equals(IDataWithAnnotationColumns other);
}
public interface PerseusLibS.Data.Matrix.IMatrixFromMatrix {
    public abstract virtual void ProcessData(IMatrixData inData, IMatrixData outData, Parameters param, IMatrixData[]& supplTables, IDocumentData[]& documents, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(IMatrixData mdata, String& errString);
}
public interface PerseusLibS.Data.Matrix.IMatrixMergeWithMatrix {
    public abstract virtual void ProcessData(IMatrixData data, IMatrixData inMatrix, Parameters param, IMatrixData[]& supplTables, IDocumentData[]& documents, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(IMatrixData data, IMatrixData inMatrix, String& errString);
}
public interface PerseusLibS.Data.Matrix.IMatrixToMatrix {
    public abstract virtual void ProcessData(IMatrixData inData, IMatrixData outData, Parameters param, IMatrixData[]& supplTables, IDocumentData[]& documents, ProcessInfo processInfo);
    public abstract virtual Parameters GetParameters(IMatrixData mdata, String& errString);
}
public class PerseusLibS.Data.Matrix.MatrixData : InternalDataWithAnnotationRowsAndColumns {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MatrixIndexer <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MatrixIndexer <Values>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBoolMatrixIndexer <IsImputed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <QualityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <QualityBiggerIsBetter>k__BackingField;
    public MatrixIndexer Quality { get; public set; }
    public MatrixIndexer Values { get; public set; }
    public IBoolMatrixIndexer IsImputed { get; public set; }
    public string QualityName { get; public set; }
    public bool QualityBiggerIsBetter { get; public set; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public bool HasQuality { get; }
    public DataType DataType { get; }
    public int RowCount { get; }
    public MatrixData(int id);
    [CompilerGeneratedAttribute]
public sealed virtual MatrixIndexer get_Quality();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Quality(MatrixIndexer value);
    [CompilerGeneratedAttribute]
public sealed virtual MatrixIndexer get_Values();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Values(MatrixIndexer value);
    [CompilerGeneratedAttribute]
public sealed virtual IBoolMatrixIndexer get_IsImputed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsImputed(IBoolMatrixIndexer value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QualityName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QualityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_QualityBiggerIsBetter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QualityBiggerIsBetter(bool value);
    public virtual DataType2 get_DataType2();
    public virtual string get_TypeName();
    public virtual Bitmap2 get_WorkflowImage();
    public sealed virtual bool get_HasQuality();
    public virtual void Clear();
    public virtual bool Equals(IData other);
    public virtual DataType get_DataType();
    public virtual int get_RowCount();
    public virtual IData CreateNewInstance();
    public virtual object Clone();
    public virtual void ExtractRows(Int32[] rows);
    public virtual void ExtractColumns(Int32[] cols);
    public virtual void Dispose();
    public virtual DataNode CreateDataNode();
    public virtual ActivityNode CreateLoadNode(int numSupplTables);
    public virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData ndata, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    internal virtual ActivityNode CreateExportNode();
    public virtual ActivityNode CreateAnalysisNode();
    public virtual WorkflowEdge CreateWorkflowEdge();
    public virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public virtual Parameters GetExportParameters(IExport export, String& errorString);
    public virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    private static IMatrixData[] CastData(IList`1<InternalData> inputData);
    public virtual bool IsConsistent(String& errString);
}
public class PerseusLibS.Data.MultiNumericVectors : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Double[][]> <MultiNumericVecs>k__BackingField;
    public List`1<Double[][]> MultiNumericVecs { get; public set; }
    private MultiNumericVectors(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public List`1<Double[][]> get_MultiNumericVecs();
    [CompilerGeneratedAttribute]
public void set_MultiNumericVecs(List`1<Double[][]> value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class PerseusLibS.Data.Network.Edge : Identifiable {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INode <Target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INode <Source>k__BackingField;
    public INode Target { get; }
    public INode Source { get; }
    public Edge(INode source, INode target);
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Source();
    public sealed virtual object Clone();
    public virtual string ToString();
}
public class PerseusLibS.Data.Network.Graph : object {
    private List`1<INode> _nodes;
    private List`1<IEdge> _edges;
    private Func`1<Guid> _guidFactory;
    public IReadOnlyCollection`1<INode> Nodes { get; }
    public IReadOnlyCollection`1<IEdge> Edges { get; }
    public int Count { get; }
    public int NumberOfNodes { get; }
    public int NumberOfEdges { get; }
    public Graph(IEnumerable`1<INode> nodes, IEnumerable`1<IEdge> edges);
    public Graph(IEnumerable`1<INode> nodes, IEnumerable`1<IEdge> edges, Func`1<Guid> guidFactory);
    public IReadOnlyCollection`1<INode> get_Nodes();
    public sealed virtual IReadOnlyCollection`1<IEdge> get_Edges();
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<INode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual INode AddNode();
    public sealed virtual IEdge AddEdge(INode source, INode target);
    public sealed virtual void RemoveNodes(INode[] nodes);
    public sealed virtual void RemoveNodes(IEnumerable`1<INode> nodes);
    public sealed virtual void RemoveNodes(IEnumerable`1<INode> nodes, HashSet`1& danglingEdges, HashSet`1& orphanedNodes);
    public sealed virtual void RemoveEdges(IEdge[] edges);
    public sealed virtual void RemoveEdges(IEnumerable`1<IEdge> edges, HashSet`1& orphans);
    public sealed virtual int get_NumberOfNodes();
    public sealed virtual int get_NumberOfEdges();
    public sealed virtual IGraph Clone(Dictionary`2& nodeMapping, Dictionary`2& edgeMapping);
}
[DefaultMemberAttribute("Item")]
public class PerseusLibS.Data.Network.NetworkData : InternalDataWithAnnotationRows {
    private List`1<INetworkInfo> _networkInfos;
    public DataType DataType { get; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public INetworkInfo Item { get; }
    public NetworkData(int id);
    public virtual void Clear();
    public virtual bool Equals(IData other);
    public virtual string ToString();
    public virtual DataType get_DataType();
    public virtual DataType2 get_DataType2();
    public virtual string get_TypeName();
    public virtual Bitmap2 get_WorkflowImage();
    public virtual DataNode CreateDataNode();
    public virtual ActivityNode CreateLoadNode(int numSupplTables);
    public virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData ndata, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    internal virtual ActivityNode CreateExportNode();
    public virtual ActivityNode CreateAnalysisNode();
    public virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual WorkflowEdge CreateWorkflowEdge();
    public virtual Parameters GetExportParameters(IExport export, String& errorString);
    public virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    public virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    public virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public virtual void Dispose();
    public virtual IData CreateNewInstance();
    public virtual object Clone();
    private static INetworkData[] CastData(IList`1<InternalData> inputData);
    public sealed virtual INetworkInfo get_Item(int i);
    public sealed virtual void AddNetworks(INetworkInfo[] networks);
    private void ExtendOrAddStringColumn(List`1<string> values, string valueName, string valueDescription);
    private void ExtendOrAddNumericColumn(List`1<double> values, string valueName, string valueDescription);
    private sealed virtual override IEnumerator`1<INetworkInfo> System.Collections.Generic.IEnumerable<PerseusApi.Network.INetworkInfo>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    public virtual bool IsConsistent(String& errString);
}
[ExtensionAttribute]
public static class PerseusLibS.Data.Network.NetworkExtensions : object {
    [ExtensionAttribute]
public static bool IsOrphan(INode node);
    [ExtensionAttribute]
public static bool IsValid(IGraph graph);
    [ExtensionAttribute]
public static INode[] AddNodes(IGraph graph, int n);
}
public class PerseusLibS.Data.Network.NetworkInfo : Identifiable {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _serializedEdges;
    private int _serializedNodes;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDataWithAnnotationColumns <NodeTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<INode, int> <NodeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDataWithAnnotationColumns <EdgeTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<IEdge, int> <EdgeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IGraph <Graph>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public IDataWithAnnotationColumns NodeTable { get; }
    public IDictionary`2<INode, int> NodeIndex { get; private set; }
    public IDataWithAnnotationColumns EdgeTable { get; }
    public IDictionary`2<IEdge, int> EdgeIndex { get; private set; }
    public IGraph Graph { get; }
    public string Name { get; public set; }
    public NetworkInfo(IGraph graph, IDataWithAnnotationColumns nodeTable, Dictionary`2<INode, int> nodeIndex, IDataWithAnnotationColumns edgeTable, Dictionary`2<IEdge, int> edgeIndex, string name, Guid guid);
    public NetworkInfo(IGraph graph, IDataWithAnnotationColumns nodeTable, Dictionary`2<INode, int> nodeIndex, IDataWithAnnotationColumns edgeTable, Dictionary`2<IEdge, int> edgeIndex, string name);
    protected NetworkInfo(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual IDataWithAnnotationColumns get_NodeTable();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<INode, int> get_NodeIndex();
    [CompilerGeneratedAttribute]
private void set_NodeIndex(IDictionary`2<INode, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataWithAnnotationColumns get_EdgeTable();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<IEdge, int> get_EdgeIndex();
    [CompilerGeneratedAttribute]
private void set_EdgeIndex(IDictionary`2<IEdge, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IGraph get_Graph();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual object Clone();
    public virtual string ToString();
    public sealed virtual bool IsConsistent(String& errString);
    [CompilerGeneratedAttribute]
private ValueTuple`2<int, int> <GetObjectData>b__27_1(KeyValuePair`2<IEdge, int> kv);
    [CompilerGeneratedAttribute]
private int <Clone>b__28_1(KeyValuePair`2<INode, INode> kv);
    [CompilerGeneratedAttribute]
private int <Clone>b__28_3(KeyValuePair`2<IEdge, IEdge> kv);
}
public class PerseusLibS.Data.Network.Node : Identifiable {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IEdge> <InEdges>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IEdge> <OutEdges>k__BackingField;
    public List`1<IEdge> InEdges { get; }
    public List`1<IEdge> OutEdges { get; }
    public IEnumerable`1<INode> Neighbors { get; }
    public int InDegree { get; }
    public int OutDegree { get; }
    public Node(Guid guid);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IEdge> get_InEdges();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IEdge> get_OutEdges();
    public sealed virtual object Clone();
    public sealed virtual IEnumerable`1<INode> get_Neighbors();
    public sealed virtual int get_InDegree();
    public sealed virtual int get_OutDegree();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class PerseusLibS.Data.SequenceData : InternalDataWithAnnotationRows {
    private List`1<SequenceInfo> sequences;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SequenceType <SequenceType>k__BackingField;
    public SequenceType SequenceType { get; public set; }
    public ISequenceInfo Item { get; }
    public DataType2 DataType2 { get; }
    public string TypeName { get; }
    public Bitmap2 WorkflowImage { get; }
    public DataType DataType { get; }
    public SequenceData(int id);
    [CompilerGeneratedAttribute]
public sealed virtual SequenceType get_SequenceType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SequenceType(SequenceType value);
    public sealed virtual ISequenceInfo get_Item(int i);
    public sealed virtual void AddSequence(string sequence, string name, string description);
    public virtual DataType2 get_DataType2();
    public virtual string get_TypeName();
    public virtual Bitmap2 get_WorkflowImage();
    public virtual void ExtractColumns(Int32[] cols);
    public virtual DataNode CreateDataNode();
    public virtual ActivityNode CreateLoadNode(int numSupplTables);
    public virtual ActivityNode CreateProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateFromMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateToMatrixNode(int numSupplTables);
    public virtual ActivityNode CreateMultiProcessingNode(int numSupplTables);
    public virtual ActivityNode CreateMergeWithMatrixNode(int numSupplTables);
    public virtual void ExportAction(IExport export, Parameters parameters, ProcessInfo pinfo);
    public virtual void ProcessingAction(IProcessing processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual void FromMatrixAction(IMatrixData inData, IFromMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    internal virtual IMatrixData ToMatrixAction(IToMatrix processing, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MultiProcessingAction(IMultiProcessing processing, InternalData[] data, Parameters parameters, ProcessInfo pinfo, IData[]& supplData);
    public virtual InternalData MergeWithMatrixAction(IMergeWithMatrix processing, InternalData ndata, IMatrixData inMatrix, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    internal virtual ActivityNode CreateExportNode();
    public virtual void LoadAction(IUpload upload, Parameters parameters, ProcessInfo pinfo, IData[]& supplTables);
    public virtual WorkflowEdge CreateWorkflowEdge();
    public virtual ActivityNode CreateAnalysisNode();
    public virtual Parameters GetExportParameters(IExport export, String& errorString);
    public virtual Parameters GetProcessingParameters(IProcessing processing, String& errorString);
    public virtual Parameters GetToMatrixParameters(IToMatrix processing, String& errorString);
    public virtual Parameters GetFromMatrixParameters(IMatrixData input, IFromMatrix processing, String& errorString);
    public virtual Parameters GetMergeWithMatrixParameters(IMatrixData input, IMergeWithMatrix processing, String& errorString);
    public virtual Parameters GetMultiProcessingParameters(InternalData[] inputData, IMultiProcessing processing, String& errorString);
    public virtual IAnalysisResult AnalysisAction(IAnalysis analysis, Parameters parameters, ProcessInfo pinfo);
    public virtual Parameters GetAnalysisParameters(IAnalysis analysis, String& errorString);
    public virtual object Clone();
    public virtual void Dispose();
    public virtual IData CreateNewInstance();
    public virtual void Clear();
    public virtual bool Equals(IData other);
    public virtual DataType get_DataType();
    private static ISequenceData[] CastData(IList`1<InternalData> inputData);
}
internal class PerseusLibS.Data.SequenceInfo : DataWithAnnotationColumns {
    private List`1<AaSequence> sequences;
    private List`1<string> ids;
    public int AlignmentCount { get; }
    public int RowCount { get; }
    internal SequenceInfo(string sequence, string id);
    public sealed virtual string GetSequenceAt(int index, bool aligned);
    public sealed virtual int get_AlignmentCount();
    public sealed virtual string GetIdAt(int index);
    public char GetLetterAt(int seqInd, int position);
    public sealed virtual String[] GetSequences(bool aligned);
    public sealed virtual object Clone();
    public virtual int get_RowCount();
}
public class PerseusLibS.Data.SessionInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Serial>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataInfo[] <DataInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private WorkflowData <WorkflowData>k__BackingField;
    public int Serial { get; public set; }
    public DataInfo[] DataInfos { get; public set; }
    public WorkflowData WorkflowData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Serial();
    [CompilerGeneratedAttribute]
public void set_Serial(int value);
    [CompilerGeneratedAttribute]
public DataInfo[] get_DataInfos();
    [CompilerGeneratedAttribute]
public void set_DataInfos(DataInfo[] value);
    [CompilerGeneratedAttribute]
public WorkflowData get_WorkflowData();
    [CompilerGeneratedAttribute]
public void set_WorkflowData(WorkflowData value);
}
public class PerseusLibS.Data.StringVectors : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<String[]> <StringVecs>k__BackingField;
    public List`1<String[]> StringVecs { get; public set; }
    private StringVectors(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public List`1<String[]> get_StringVecs();
    [CompilerGeneratedAttribute]
public void set_StringVecs(List`1<String[]> value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class PerseusLibS.Data.UniprotCounter : object {
    public int count;
    public int goccCount;
    public int gobpCount;
    public int gomfCount;
    public int keggCount;
    public void Add(bool hasGocc, bool hasGobp, bool hasGomf, bool hasKegg);
}
public class PerseusLibS.Data.VisualizationData : object {
    public static int serial;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AltName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IAnalysisResult <Result>k__BackingField;
    public int Id { get; public set; }
    public DataType DataType { get; }
    public string TypeName { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string AltName { get; public set; }
    public string Origin { get; public set; }
    public DateTime CreationDate { get; public set; }
    public string User { get; public set; }
    public IAnalysisResult Result { get; public set; }
    public Bitmap2 WorkflowImage { get; }
    public DataType2 DataType2 { get; }
    public VisualizationData(IAnalysisResult result);
    public sealed virtual bool IsConsistent(String& errString);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(int value);
    public sealed virtual DataType get_DataType();
    public sealed virtual string get_TypeName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AltName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AltName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_User();
    [CompilerGeneratedAttribute]
public sealed virtual void set_User(string value);
    [CompilerGeneratedAttribute]
public IAnalysisResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IAnalysisResult value);
    public sealed virtual Bitmap2 get_WorkflowImage();
    public sealed virtual IData CreateNewInstance();
    public sealed virtual IData CreateNewInstance(DataType type);
    public sealed virtual void Clear();
    public sealed virtual void Dispose();
    public sealed virtual object Clone();
    public sealed virtual DataType2 get_DataType2();
    public sealed virtual WorkflowEdge CreateWorkflowEdge();
    public sealed virtual DataNode CreateDataNode();
    public sealed virtual bool Equals(IData other);
}
public static class PerseusLibS.HelpPage : object {
    public static string BaseUrl;
}
public static class PerseusLibS.PerseusConstants : object {
    public static String[] pluginNames;
    public static Color2 matrixLineColor;
    public static Color2 matrixFillColor;
    public static Color2 documentLineColor;
    public static Color2 documentFillColor;
    public static Color2 networkLineColor;
    public static Color2 networkFillColor;
    public static Color2 sequenceLineColor;
    public static Color2 sequenceFillColor;
    public static Color2 imageLineColor;
    public static Color2 imageFillColor;
    private static PerseusConstants();
    public static T GetPluginByName(string name);
    public static Color2 GetFillColor(DataType2 type);
    public static String[] GetValidFiles(String[] files);
    public static void StartNewInstance();
    public static String[] GetAllHeadings(IList`1<IActivityWithHeading> processings, string filename);
    private static String[] SortHeading(String[] h, string filename);
    public static IEnumerable`1<IActivity> GetActivitiesByHeading(string heading, IEnumerable`1<IActivityWithHeading> activities);
    public static IEnumerable`1<IActivity> GetActivitiesWithoutHeading(IEnumerable`1<IActivityWithHeading> activities);
    public static Bitmap2 GetImage(string file);
    public static Stream ToStream(string str);
    public static bool GuessCsv(string text);
    public static int GetRowCount(string text, Int32[] mainColIndices, List`1<Tuple`3<Relation[], Int32[], bool>> filters, char separator);
    public static String[] GetColumnNames(string text, Dictionary`2<string, String[]> annotationRows, char separator);
    public static bool TryDeserializeVersion(Stream fs, String& version);
    public static bool TryDeserializeSessionInfo(Stream fs, SessionInfo& session);
}
public static class PerseusLibS.PerseusFactoryOld : object {
    public static InternalData Create(DataType2 dataType);
}
public class PerseusLibS.PerseusPasteMatrixParam : Parameter`1<String[]> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Filter>k__BackingField;
    public string text;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<Parameters[]> <FilterParameterValues>k__BackingField;
    public string Filter { get; public set; }
    public IList`1<Parameters[]> FilterParameterValues { get; public set; }
    public string StringValue { get; public set; }
    public bool IsDropTarget { get; }
    public bool IsModified { get; }
    public float Height { get; }
    public String[] Items { get; }
    public Int32[] ExpressionColumnIndices { get; }
    public Int32[] NumericalColumnIndices { get; }
    public Int32[] CategoryColumnIndices { get; }
    public Int32[] TextColumnIndices { get; }
    public Int32[] MultiNumericalColumnIndices { get; }
    public Parameters[] MainFilterParameters { get; }
    public Parameters[] NumericalFilterParameters { get; }
    public ParamType Type { get; }
    public PerseusPasteMatrixParam(string name, string text);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public IList`1<Parameters[]> get_FilterParameterValues();
    [CompilerGeneratedAttribute]
public void set_FilterParameterValues(IList`1<Parameters[]> value);
    public virtual string get_StringValue();
    public virtual void set_StringValue(string value);
    public virtual bool get_IsDropTarget();
    public virtual bool get_IsModified();
    public virtual void Clear();
    public virtual float get_Height();
    public String[] get_Items();
    private Int32[] GetIntValues(int i);
    public Int32[] get_ExpressionColumnIndices();
    public Int32[] get_NumericalColumnIndices();
    public Int32[] get_CategoryColumnIndices();
    public Int32[] get_TextColumnIndices();
    public Int32[] get_MultiNumericalColumnIndices();
    public Parameters[] get_MainFilterParameters();
    public Parameters[] get_NumericalFilterParameters();
    public virtual ParamType get_Type();
}
public abstract class PerseusLibS.Workflow.ActivityNode : WorkflowNode {
    public Parameters parameters;
    public TimeSpan timeSpan;
    public ActivityNodeStatus status;
    public Thread thread;
    public Action cleanup;
    public ProcessInfo processInfo;
    public string TypeName { get; }
    public int Width { get; }
    public int Height { get; }
    public abstract virtual string get_TypeName();
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    public void Start();
    public void Abort();
    public virtual void WriteXml(XmlWriter writer);
    public virtual void ReadXml(XmlReader reader);
    public virtual void Paint(IGraphics g, float x1, float y1, IWorkflowDrawOptions options);
    public virtual void PaintSelected(IGraphics g, float x1, float y1);
}
public enum PerseusLibS.Workflow.ActivityNodeStatus : Enum {
    public int value__;
    public static ActivityNodeStatus NotStarted;
    public static ActivityNodeStatus Running;
    public static ActivityNodeStatus Done;
}
public class PerseusLibS.Workflow.AnalysisNode : ActivityNode {
    public string TypeName { get; }
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.DataNode : WorkflowNode {
    public List`1<string> analysisNames;
    internal List`1<Bitmap2> analysisImages;
    public List`1<Parameters> analysisParameters;
    public List`1<TimeSpan> analysisTimeSpans;
    public int selectedComponent;
    public int id;
    public string altName;
    public string description;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabled>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    internal bool HasAnalysis { get; }
    internal int AnalysisCount { get; }
    public bool IsDisabled { get; public set; }
    public DataNode(int id, DataType2 dataType2, Bitmap2 icon, string typeName);
    public DataNode(IData2 data);
    public virtual int get_Width();
    public virtual int get_Height();
    internal bool get_HasAnalysis();
    internal int get_AnalysisCount();
    public string GetDisplayName(bool showAltName);
    public void SetData(IData2 data);
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
    public virtual bool Hits(int x1, int y1);
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    private int GetComponentAt(int x1, int y1);
    public void AddAnalysis(string name1, Bitmap2 buttonImage, Parameters parameters, TimeSpan timeSpan);
    internal void RemoveSelectedAnalysis();
    public virtual void Paint(IGraphics g, float x1, float y1, IWorkflowDrawOptions options);
    public virtual void PaintSelected(IGraphics g, float x1, float y1);
    public void Disable();
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public void Enable();
    public List`1<DataNode> AnalysisResults(int resultIndex);
}
public class PerseusLibS.Workflow.ExportNode : ActivityNode {
    public string TypeName { get; }
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.FromMatrixNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public FromMatrixNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public interface PerseusLibS.Workflow.IMainWindow {
    public PerseusWorkflowModel WorkflowModel { get; }
    public bool UseAlternativeNames { get; }
    public abstract virtual PerseusWorkflowModel get_WorkflowModel();
    public abstract virtual bool get_UseAlternativeNames();
    public abstract virtual void EditProperties(float f, float f1);
}
public interface PerseusLibS.Workflow.IPerseusWorkflowModel {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataRemoved(EventHandler`1<ValueTuple`2<DataType2, int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataRemoved(EventHandler`1<ValueTuple`2<DataType2, int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnalysisRemoved(EventHandler`1<ValueTuple`3<DataType2, int, int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnalysisRemoved(EventHandler`1<ValueTuple`3<DataType2, int, int>> value);
}
public interface PerseusLibS.Workflow.IWorkflow {
    public IEnumerable`1<WorkflowEdge> Edges { get; }
    public abstract virtual bool RemoveNode(WorkflowNode[] node);
    public abstract virtual bool RemoveEdge(WorkflowEdge[] edge);
    public abstract virtual IEnumerable`1<WorkflowEdge> get_Edges();
}
public interface PerseusLibS.Workflow.IWorkflowDrawOptions {
    public bool UseAlternativeNames { get; }
    public abstract virtual bool get_UseAlternativeNames();
}
[ExtensionAttribute]
public static class PerseusLibS.Workflow.IWorkflowExtensions : object {
    [IteratorStateMachineAttribute("PerseusLibS.Workflow.IWorkflowExtensions/<ComputationUnits>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<DataNode[], ActivityNode, DataNode[]>> ComputationUnits(IWorkflow workflow);
    [ExtensionAttribute]
public static IEnumerable`1<WorkflowNode> TopologicalSorting(IWorkflow workflow);
}
public class PerseusLibS.Workflow.LoadNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public LoadNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.MergeWithMatrixNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public MergeWithMatrixNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.MultiProcessingNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public MultiProcessingNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.PerseusWorkflowModel : NetworkGraphModel`3<WorkflowNode, WorkflowEdge, WorkflowContainer> {
    public Settings settings;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<ValueTuple`2<int, DataType2>, IData2> dataRepository;
    public Dictionary`2<IData2, List`1<IAnalysisResult>> analysisRepository;
    public string fileName;
    public string folderPath;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler PerseusWorkflowModelChanged;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ValueTuple`2<DataType2, int>> DataRemoved;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ValueTuple`3<DataType2, int, int>> AnalysisRemoved;
    [CompilerGeneratedAttribute]
public void add_PerseusWorkflowModelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PerseusWorkflowModelChanged(EventHandler value);
    private void OnPerseusWorkflowModelChanged(string callerName);
    private static void Run(ActivityNode pnode);
    private void RemoveEdge(WorkflowEdge edge);
    public void CancelSelectedActivity(Action`1<string> errMsg, Func`2<string, bool> confirm);
    public void Abort();
    public void SelectFromData(int id, DataType2 type, int selectedIndex);
    public bool ValidateRemoveSelection(String& message);
    public void RemoveSelectedNodes(Action`1<string> errMsg, Func`2<string, bool> confirm);
    public void Relayout();
    public void SetData(WorkflowData workflowData);
    public void Clear();
    public void AddExport(Action`1<string> status, Action`1<int> progress, InternalData dataIn, IExport export, Parameters parameters, Action invalidateGraphics, Action`1<string> errMsg);
    public void AddUpload(Action`1<string> status, Action`1<int> progress, InternalData dataOut, IUpload upload, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    public void AddProcessing(Action`1<string> status, Action`1<int> progress, InternalData dataIn, IProcessing processing, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    public void AddAnalysis(Action`1<string> status, Action`1<int> progress, InternalData dataIn, IAnalysis analysis, Parameters parameters, Action`1<IAnalysisResult> processResult, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    public void AddDataFromAnalysis(IData2 data, DataNode inNode, int resultIndex);
    public void AddToMatrix(Action`1<string> status, Action`1<int> progress, InternalData dataIn, IToMatrix processing, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    public void AddMergeWithMatrix(Action`1<string> status, Action`1<int> progress, InternalData dataIn, MatrixData mdata, IMergeWithMatrix processing, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    public void AddFromMatrix(Action`1<string> status, Action`1<int> progress, MatrixData dataIn, IFromMatrix processing, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type, InternalData dataOut);
    public void AddMultiProcessing(Action`1<string> status, Action`1<int> progress, InternalData[] data, IMultiProcessing processing, Parameters parameters, Action`1<IData2> addData, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    public void AddVisualization(Action`1<string> status, Action`1<int> progress, InternalData[] data, IVisualization visualization, Parameters parameters, Action`1<VisualizationData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    public void CompleteSetectionDownstream();
    public void CompleteSelectionUpstream();
    private bool SelectionIsRunning();
    private void AddChildren(WorkflowNode parent, ICollection`1<WorkflowNode> remainingNodes);
    private IEnumerable`1<WorkflowNode> GetHeadNodes(HashSet`1& remaining);
    public void AddNode(WorkflowNode node);
    private WorkflowNode GetIntersectingNode(WorkflowNode node);
    private void Upload(IUpload upload, Parameters parameters, ActivityNode pnode, InternalData data, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void Process(IProcessing processing, ActivityNode pnode, InternalData dataOut, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    public void AddNewData(IData2 data, Action`1<string> message);
    private bool TryProcess(IProcessing processing, ActivityNode pnode, InternalData dataOut, Parameters parameters, IData[]& supplData, IDocumentData[]& documents, Action invalidate, Action`1<string> errMsg);
    private void FromMatrix(MatrixData dataIn, IFromMatrix processing, ActivityNode pnode, InternalData dataOut, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void ToMatrix(InternalData dataIn, IToMatrix processing, ActivityNode pnode, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void MultiProcess(IMultiProcessing processing, InternalData[] data, ActivityNode pnode, Parameters parameters, Action`1<IData2> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void MergeWithMatrix(InternalData dataIn, IMergeWithMatrix processing, MatrixData mdata, ActivityNode pnode, Parameters parameters, Action`1<InternalData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void Visualize(IVisualization visualization, InternalData[] data, ActivityNode anode, Parameters parameters, Action`1<VisualizationData> addData, Action invalidateGraphics, Action`1<string> errMsg);
    private void Analyze(ActivityNode pnode, InternalData dataIn, IAnalysis analysis, Parameters parameters, Action`1<IAnalysisResult> processResult, Action invalidateGraphics, Action`1<string> errMsg, DataType2 type);
    private void AnalyzeHelper(InternalData dataIn, ActivityNode pnode, IAnalysis analysis, InternalData mdataIn, Parameters parameters, Action invalidate, Action`1<string> errMsg, Action`1<IAnalysisResult> processResult, DataType2 type);
    private static void Run(Action act, Action cleanup, Action invalidateGraphics, Action`1<string> errMsg);
    private void Export(InternalData dataIn, IExport export, ActivityNode pnode, Parameters parameters, Action invalidate, Action`1<string> errMsg);
    private bool TryMultiProcess(IMultiProcessing processing, InternalData[] data, ActivityNode pnode, Parameters parameters, InternalData& result, IData[]& supplData, IDocumentData[]& documents, Action invalidate, Action`1<string> errMsg);
    private bool TryMergeWithMatrix(InternalData dataIn, IMergeWithMatrix processing, MatrixData mdata, ActivityNode pnode, Parameters parameters, InternalData& result, IData[]& supplData, IDocumentData[]& documents, Action invalidate, Action`1<string> errMsg);
    private bool TryVisualize(IVisualization visualization, InternalData[] data, ActivityNode pnode, Parameters parameters, VisualizationData& vdata, Action invalidate, Action`1<string> errMsg);
    private bool TryUpload(IUpload upload, Parameters parameters, ActivityNode pnode, InternalData data, IData[]& supplData, Action invalidate, Action`1<string> errMsg);
    public DataNode[] AddDataNodes(ActivityNode pnode, InternalData[] data);
    private bool TryFromMatrix(IMatrixData dataIn, IFromMatrix processing, ActivityNode pnode, InternalData dataOut, Parameters parameters, IData[]& supplData, IDocumentData[]& documents, Action invalidate, Action`1<string> errMsg);
    private bool TryToMatrix(InternalData dataIn, IToMatrix processing, ActivityNode pnode, IMatrixData& dataOut, Parameters parameters, IData[]& supplData, IDocumentData[]& documents, Action invalidate, Action`1<string> errMsg);
    public DataNode GetDataNode(int uuid, DataType2 type);
    public bool TryGetDataNode(int uuid, DataType2 type, DataNode& dataNode);
    public bool HasDataOfType(DataType2 type);
    private VisualizationDataNode GetVisualizationDataNode(int uuid);
    public DataNode[] GetSelectedDataNodes(DataType2 type);
    public DataNode[] GetSelectedDataNodes();
    private void CompleteSetectionDownstream(ISet`1<WorkflowNode> selectedNodes1);
    private void CompleteSelectionUpstream(ISet`1<WorkflowNode> selectedNodes1);
    private static void SelectChildren(WorkflowNode parent, ISet`1<WorkflowNode> selectedNodes);
    private static void SelectParents(WorkflowNode child, ISet`1<WorkflowNode> selectedNodes);
    private bool SelectionIsDownstreamComplete();
    private bool SelectionIsUpstreamComplete();
    public void WorkflowExport(string fileName1);
    public void RerunAnalyses(DataNode node, Action`1<IAnalysisResult> setResultControl, Action`1<string> setStatusString, Action`1<int> setProgress);
    public string GetCommonAltName(IList`1<DataNode> dns);
    public string GetCommonDescription(IList`1<DataNode> dns);
    public MatrixData GetMatrixData(string selectedMatrixName);
    public SessionInfo CreateSessionInfo();
    public void SaveSession(string fileName1, Action`1<string> showMessage);
    public void AddData(DataInfo dataInfo);
    public void InitData(SessionInfo si);
    public static Dictionary`2<string, List`1<int>> NamesToIndex(IList`1<string> names);
    public MatrixData Paste(Action`1<string> status, Action`1<int> progress, PerseusPasteMatrixParam par, string text);
    public InternalData[] GetMultiProcessingData(IList`1<string> names, DataType2 type);
    public InternalData[] GetVisualizationData(IList`1<string> names);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataRemoved(EventHandler`1<ValueTuple`2<DataType2, int>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataRemoved(EventHandler`1<ValueTuple`2<DataType2, int>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnalysisRemoved(EventHandler`1<ValueTuple`3<DataType2, int, int>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnalysisRemoved(EventHandler`1<ValueTuple`3<DataType2, int, int>> value);
}
public class PerseusLibS.Workflow.ProcessingNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public ProcessingNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.ToMatrixNode : ActivityNode {
    private int nSupplTables;
    public string TypeName { get; }
    public ToMatrixNode(int nSupplTables);
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.VisualizationActivityNode : ActivityNode {
    public string TypeName { get; }
    public virtual string get_TypeName();
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
}
public class PerseusLibS.Workflow.VisualizationDataNode : DataNode {
    public string altName;
    public string description;
    public Parameters parameters;
    public TimeSpan timeSpan;
    public int id;
    public int Width { get; }
    public int Height { get; }
    public VisualizationDataNode(VisualizationData data);
    public virtual int get_Width();
    public virtual int get_Height();
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public virtual void Paint(IGraphics g, float x1, float y1, IWorkflowDrawOptions options);
    public virtual void PaintSelected(IGraphics g, float x1, float y1);
    public virtual DataType2 GetInputDataType(int index);
    public virtual DataType2 GetOutputDataType(int index);
    public string GetDisplayName(bool showAltName);
}
public class PerseusLibS.Workflow.WorkflowContainer : NetworkGraphContainer {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Height>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    [CompilerGeneratedAttribute]
public virtual int get_Width();
    public virtual void Paint(IGraphics g, int x1, int y1);
    public virtual void PaintSelected(IGraphics g, int x1, int y1);
    [CompilerGeneratedAttribute]
public virtual int get_Height();
}
[XmlRootAttribute("graphml")]
public class PerseusLibS.Workflow.WorkflowData : object {
    private ThreadSafeHashSet`1<WorkflowEdge> _edges;
    private ThreadSafeHashSet`1<WorkflowNode> _nodes;
    public int Width;
    public int Height;
    public IEnumerable`1<WorkflowEdge> Edges { get; }
    public IEnumerable`1<WorkflowNode> Nodes { get; }
    public WorkflowData(ThreadSafeHashSet`1<WorkflowEdge> edges, ThreadSafeHashSet`1<WorkflowNode> nodes, int width, int height);
    public sealed virtual IEnumerable`1<WorkflowEdge> get_Edges();
    public IEnumerable`1<WorkflowNode> get_Nodes();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
    public sealed virtual IEnumerator`1<WorkflowNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool RemoveNode(WorkflowNode[] nodes);
    public sealed virtual bool RemoveEdge(WorkflowEdge[] edges);
    [CompilerGeneratedAttribute]
private bool <RemoveNode>b__15_0(WorkflowNode node);
    [CompilerGeneratedAttribute]
private bool <RemoveEdge>b__16_0(WorkflowEdge edge);
}
public class PerseusLibS.Workflow.WorkflowEdge : NetworkGraphEdge`1<WorkflowNode> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataType2 <DataType>k__BackingField;
    public DataType2 DataType { get; public set; }
    public Pen2 Pen { get; }
    [CompilerGeneratedAttribute]
public DataType2 get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType2 value);
    public virtual Pen2 get_Pen();
}
public abstract class PerseusLibS.Workflow.WorkflowNode : NetworkGraphNode`2<WorkflowEdge, IWorkflowDrawOptions> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Bitmap2 <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Color2 <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Color2 <LineColor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataType2 <DataType>k__BackingField;
    public Bitmap2 Icon { get; public set; }
    public string Name { get; public set; }
    public Color2 FillColor { get; public set; }
    public Color2 LineColor { get; public set; }
    public int ValidInputCount { get; }
    public DataType2 DataType { get; public set; }
    public int InputCount { get; }
    public int OutputCount { get; }
    [CompilerGeneratedAttribute]
public Bitmap2 get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Bitmap2 value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Color2 get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(Color2 value);
    [CompilerGeneratedAttribute]
public Color2 get_LineColor();
    [CompilerGeneratedAttribute]
public void set_LineColor(Color2 value);
    public int get_ValidInputCount();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public DataType2 get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType2 value);
    public virtual float GetInputPosX(int index);
    public virtual float GetInputPosY(int index);
    public abstract virtual DataType2 GetInputDataType(int index);
    public virtual Brush2 GetInputBrush(int index);
    public virtual Brush2 GetOutputBrush(int index);
    public virtual float GetOutputPosX(int index);
    public virtual float GetOutputPosY(int index);
    public abstract virtual DataType2 GetOutputDataType(int index);
    public void AddEdgeToOutput(WorkflowEdge edge, int outputIndex);
    public void EnsureOutput(int outputIndex);
    public void SetEdgeToInput(WorkflowEdge edge, int inputIndex);
    public virtual XmlSchema GetSchema();
    public virtual int get_InputCount();
    public virtual int get_OutputCount();
    public IEnumerable`1<WorkflowEdge> OutEdges();
    public IEnumerable`1<WorkflowEdge> InEdges();
    public IEnumerable`1<WorkflowNode> Parents();
    public IEnumerable`1<DataNode> DataParents();
}
[ExtensionAttribute]
public static class PerseusLibS.Workflow.WorkflowNodeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<WorkflowEdge> Edges(WorkflowNode node);
}
public class PerseusLibS.Workflow.WorkflowPanelModel : NetworkGraphPanelModel`5<WorkflowNode, WorkflowEdge, WorkflowContainer, PerseusWorkflowModel, IWorkflowDrawOptions> {
    internal static Pen2 selectionPen;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IMainWindow <MainWindow>k__BackingField;
    internal static Dictionary`2<DataType2, Brush2> ioBrushes;
    public IMainWindow MainWindow { get; public set; }
    public IWorkflowDrawOptions Options { get; }
    public PerseusWorkflowModel GraphModel { get; }
    public bool UseAlternativeNames { get; }
    private static WorkflowPanelModel();
    [CompilerGeneratedAttribute]
public IMainWindow get_MainWindow();
    [CompilerGeneratedAttribute]
public void set_MainWindow(IMainWindow value);
    public virtual void EditProperties(float f, float f1);
    public virtual IWorkflowDrawOptions get_Options();
    public virtual PerseusWorkflowModel get_GraphModel();
    private static Dictionary`2<DataType2, Brush2> InitBrushes();
    public sealed virtual bool get_UseAlternativeNames();
}
