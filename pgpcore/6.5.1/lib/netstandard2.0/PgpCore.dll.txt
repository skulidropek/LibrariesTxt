public interface PgpCore.Abstractions.IDecryptAsync {
    public abstract virtual Task DecryptAsync(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual Task DecryptAsync(Stream inputStream, Stream outputStream);
    public abstract virtual Task`1<string> DecryptAsync(string input);
    public abstract virtual Task DecryptAndVerifyAsync(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual Task DecryptAndVerifyAsync(Stream inputStream, Stream outputStream);
    public abstract virtual Task`1<string> DecryptAndVerifyAsync(string input);
    public abstract virtual Task DecryptFileAsync(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual Task DecryptStreamAsync(Stream inputStream, Stream outputStream);
    public abstract virtual Task`1<string> DecryptArmoredStringAsync(string input);
    public abstract virtual Task DecryptFileAndVerifyAsync(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual Task DecryptStreamAndVerifyAsync(Stream inputStream, Stream outputStream);
    public abstract virtual Task`1<string> DecryptArmoredStringAndVerifyAsync(string input);
}
public interface PgpCore.Abstractions.IDecryptSync {
    public abstract virtual void Decrypt(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual void Decrypt(Stream inputStream, Stream outputStream);
    public abstract virtual string Decrypt(string input);
    public abstract virtual void DecryptAndVerify(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual void DecryptAndVerify(Stream inputStream, Stream outputStream);
    public abstract virtual string DecryptAndVerify(string input);
    public abstract virtual void DecryptFile(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual void DecryptStream(Stream inputStream, Stream outputStream);
    public abstract virtual string DecryptArmoredString(string input);
    public abstract virtual void DecryptFileAndVerify(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual void DecryptStreamAndVerify(Stream inputStream, Stream outputStream);
    public abstract virtual string DecryptArmoredStringAndVerify(string input);
}
public interface PgpCore.Abstractions.IEncryptAsync {
    public abstract virtual Task EncryptAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> EncryptAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptAndSignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptAndSignAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> EncryptAndSignAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptFileAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptStreamAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> EncryptArmoredStringAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptFileAndSignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task EncryptStreamAndSignAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> EncryptArmoredStringAndSignAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
}
public interface PgpCore.Abstractions.IEncryptionKeys {
    public IEnumerable`1<PgpPublicKeyRingWithPreferredKey> PublicKeyRings { get; }
    public IEnumerable`1<PgpPublicKey> EncryptKeys { get; }
    public IEnumerable`1<PgpPublicKey> VerificationKeys { get; }
    public PgpPrivateKey SigningPrivateKey { get; }
    public PgpSecretKey SigningSecretKey { get; }
    public PgpPublicKey MasterKey { get; }
    [ObsoleteAttribute("This property is obsolete and will be removed in a future release. Use the MasterKey or EncryptKeys.FirstOrDefault() properties instead.")]
public PgpPublicKey PublicKey { get; }
    [ObsoleteAttribute("This property is obsolete and will be removed in a future release. Use the MasterKey and EncryptKeys properties instead.")]
public IEnumerable`1<PgpPublicKey> PublicKeys { get; }
    public PgpPrivateKey PrivateKey { get; }
    public PgpSecretKey SecretKey { get; }
    public PgpSecretKeyRingBundle SecretKeys { get; }
    public abstract virtual IEnumerable`1<PgpPublicKeyRingWithPreferredKey> get_PublicKeyRings();
    public abstract virtual IEnumerable`1<PgpPublicKey> get_EncryptKeys();
    public abstract virtual IEnumerable`1<PgpPublicKey> get_VerificationKeys();
    public abstract virtual PgpPrivateKey get_SigningPrivateKey();
    public abstract virtual PgpSecretKey get_SigningSecretKey();
    public abstract virtual PgpPublicKey get_MasterKey();
    public abstract virtual PgpPublicKey get_PublicKey();
    public abstract virtual IEnumerable`1<PgpPublicKey> get_PublicKeys();
    public abstract virtual PgpPrivateKey get_PrivateKey();
    public abstract virtual PgpSecretKey get_SecretKey();
    public abstract virtual PgpSecretKeyRingBundle get_SecretKeys();
    public abstract virtual PgpPrivateKey FindSecretKey(long keyId);
}
public interface PgpCore.Abstractions.IEncryptSync {
    public abstract virtual void Encrypt(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void Encrypt(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string Encrypt(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptAndSign(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptAndSign(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string EncryptAndSign(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptFile(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptStream(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string EncryptArmoredString(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptFileAndSign(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void EncryptStreamAndSign(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string EncryptArmoredStringAndSign(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
}
public interface PgpCore.Abstractions.IInspectAsync {
    public abstract virtual Task`1<PgpInspectResult> InspectAsync(Stream inputStream);
    public abstract virtual Task`1<PgpInspectResult> InspectAsync(FileInfo inputFile);
    public abstract virtual Task`1<PgpInspectResult> InspectAsync(string input);
}
public interface PgpCore.Abstractions.IInspectSync {
    public abstract virtual PgpInspectResult Inspect(Stream inputStream);
    public abstract virtual PgpInspectResult Inspect(FileInfo inputFile);
    public abstract virtual PgpInspectResult Inspect(string input);
}
public interface PgpCore.Abstractions.IKeyAsync {
    public abstract virtual Task GenerateKeyAsync(FileInfo publicKeyFileInfo, FileInfo privateKeyFileInfo, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    public abstract virtual Task GenerateKeyAsync(Stream publicKeyStream, Stream privateKeyStream, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
}
public interface PgpCore.Abstractions.IKeySync {
    public abstract virtual void GenerateKey(FileInfo publicKeyFileInfo, FileInfo privateKeyFileInfo, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    public abstract virtual void GenerateKey(Stream publicKeyStream, Stream privateKeyStream, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
}
public interface PgpCore.Abstractions.IPGP {
}
public interface PgpCore.Abstractions.IRecipientsSync {
    public abstract virtual IEnumerable`1<long> GetRecipients(FileInfo inputFileInfo);
    public abstract virtual IEnumerable`1<long> GetRecipients(Stream inputStream);
    public abstract virtual IEnumerable`1<long> GetRecipients(string input);
    public abstract virtual IEnumerable`1<long> GetFileRecipients(FileInfo inputFileInfo);
    public abstract virtual IEnumerable`1<long> GetStreamRecipients(Stream inputStream);
    public abstract virtual IEnumerable`1<long> GetArmoredStringRecipients(string input);
}
public interface PgpCore.Abstractions.ISignAsync {
    public abstract virtual Task SignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task SignAsync(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> SignAsync(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task ClearSignAsync(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public abstract virtual Task ClearSignAsync(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public abstract virtual Task`1<string> ClearSignAsync(string input, IDictionary`2<string, string> headers);
    public abstract virtual Task SignFileAsync(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task SignStreamAsync(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task`1<string> SignArmoredStringAsync(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual Task ClearSignFileAsync(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public abstract virtual Task ClearSignStreamAsync(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public abstract virtual Task`1<string> ClearSignArmoredStringAsync(string input, IDictionary`2<string, string> headers);
}
public interface PgpCore.Abstractions.ISignSync {
    public abstract virtual void Sign(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void Sign(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string Sign(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void ClearSign(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public abstract virtual void ClearSign(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public abstract virtual string ClearSign(string input, IDictionary`2<string, string> headers);
    public abstract virtual void SignFile(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void SignStream(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual string SignArmoredString(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public abstract virtual void ClearSignFile(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public abstract virtual void ClearSignStream(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public abstract virtual string ClearSignArmoredString(string input, IDictionary`2<string, string> headers);
}
public interface PgpCore.Abstractions.IVerifyAsync {
    public abstract virtual Task`1<bool> VerifyAsync(FileInfo inputFile, FileInfo outputFile, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyAsync(Stream inputStream, Stream outputStream, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyAsync(string input, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyClearAsync(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual Task`1<bool> VerifyClearAsync(Stream inputStream, Stream outputStream);
    public abstract virtual Task`1<bool> VerifyClearAsync(string input);
    public abstract virtual Task`1<bool> VerifyFileAsync(FileInfo inputFile, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyStreamAsync(Stream inputStream, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyArmoredStringAsync(string input, bool throwIfEncrypted);
    public abstract virtual Task`1<bool> VerifyClearFileAsync(FileInfo inputFile);
    public abstract virtual Task`1<bool> VerifyClearStreamAsync(Stream inputStream);
    public abstract virtual Task`1<bool> VerifyClearArmoredStringAsync(string input);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadClearFileAsync(FileInfo inputFile);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadClearStreamAsync(Stream inputStream);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadClearArmoredStringAsync(string input);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadSignedFileAsync(FileInfo inputFile, bool throwIfEncrypted);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadSignedStreamAsync(Stream inputStream, bool throwIfEncrypted);
    public abstract virtual Task`1<VerificationResult> VerifyAndReadSignedArmoredStringAsync(string input, bool throwIfEncrypted);
}
public interface PgpCore.Abstractions.IVerifySync {
    public abstract virtual bool Verify(FileInfo inputFile, FileInfo outputFile, bool throwIfEncrypted);
    public abstract virtual bool Verify(Stream inputStream, Stream outputStream, bool throwIfEncrypted);
    public abstract virtual bool Verify(string input, bool throwIfEncrypted);
    public abstract virtual bool VerifyClear(FileInfo inputFile, FileInfo outputFile);
    public abstract virtual bool VerifyClear(Stream inputStream, Stream outputStream);
    public abstract virtual bool VerifyClear(string input, string output);
    public abstract virtual bool VerifyFile(FileInfo inputFile, bool throwIfEncrypted);
    public abstract virtual bool VerifyStream(Stream inputStream, bool throwIfEncrypted);
    public abstract virtual bool VerifyArmoredString(string input, bool throwIfEncrypted);
    public abstract virtual bool VerifyClearFile(FileInfo inputFile);
    public abstract virtual bool VerifyClearStream(Stream inputStream);
    public abstract virtual bool VerifyClearArmoredString(string input);
    public abstract virtual VerificationResult VerifyAndReadClearFile(FileInfo inputFile);
    public abstract virtual VerificationResult VerifyAndReadClearStream(Stream inputStream);
    public abstract virtual VerificationResult VerifyAndReadClearArmoredString(string input);
    public abstract virtual VerificationResult VerifyAndReadSignedFile(FileInfo inputFile, bool throwIfEncrypted);
    public abstract virtual VerificationResult VerifyAndReadSignedStream(Stream inputStream, bool throwIfEncrypted);
    public abstract virtual VerificationResult VerifyAndReadSignedArmoredString(string input, bool throwIfEncrypted);
}
public class PgpCore.EncryptionKeys : object {
    private string _passPhrase;
    private Lazy`1<IEnumerable`1<PgpPublicKey>> _encryptKeys;
    private Lazy`1<IEnumerable`1<PgpPublicKey>> _verificationKeys;
    private Lazy`1<PgpPublicKey> _masterKey;
    private Lazy`1<PgpPrivateKey> _signingPrivateKey;
    private Lazy`1<PgpSecretKey> _signingSecretKey;
    private Lazy`1<PgpSecretKeyRingBundle> _secretKeys;
    private Lazy`1<IEnumerable`1<PgpPublicKeyRingWithPreferredKey>> _publicKeyRingsWithPreferredKey;
    public IEnumerable`1<PgpPublicKeyRingWithPreferredKey> PublicKeyRings { get; }
    public IEnumerable`1<PgpPublicKey> EncryptKeys { get; }
    public IEnumerable`1<PgpPublicKey> VerificationKeys { get; }
    public PgpPrivateKey SigningPrivateKey { get; }
    public PgpSecretKey SigningSecretKey { get; }
    public IEnumerable`1<PgpPublicKey> PublicKeys { get; }
    public PgpPublicKey MasterKey { get; }
    public PgpPublicKey PublicKey { get; }
    public PgpPrivateKey PrivateKey { get; }
    public PgpSecretKey SecretKey { get; }
    public PgpSecretKeyRingBundle SecretKeys { get; }
    public EncryptionKeys(string publicKey, string privateKey, string passPhrase);
    public EncryptionKeys(FileInfo publicKeyFile, FileInfo privateKeyFile, string passPhrase);
    public EncryptionKeys(IEnumerable`1<string> publicKeys, string privateKey, string passPhrase);
    public EncryptionKeys(IEnumerable`1<FileInfo> publicKeyFiles, FileInfo privateKeyFile, string passPhrase);
    public EncryptionKeys(string privateKey, string passPhrase);
    public EncryptionKeys(FileInfo privateKeyFile, string passPhrase);
    public EncryptionKeys(Stream publicKeyStream, Stream privateKeyStream, string passPhrase);
    public EncryptionKeys(Stream privateKeyStream, string passPhrase);
    public EncryptionKeys(IEnumerable`1<Stream> publicKeyStreams, Stream privateKeyStream, string passPhrase);
    public EncryptionKeys(string publicKey);
    public EncryptionKeys(FileInfo publicKeyFile);
    public EncryptionKeys(IEnumerable`1<string> publicKeys);
    public EncryptionKeys(IEnumerable`1<FileInfo> publicKeyFiles);
    public EncryptionKeys(Stream publicKeyStream);
    public EncryptionKeys(IEnumerable`1<Stream> publicKeyStreams);
    public sealed virtual IEnumerable`1<PgpPublicKeyRingWithPreferredKey> get_PublicKeyRings();
    public sealed virtual IEnumerable`1<PgpPublicKey> get_EncryptKeys();
    public sealed virtual IEnumerable`1<PgpPublicKey> get_VerificationKeys();
    public sealed virtual PgpPrivateKey get_SigningPrivateKey();
    public sealed virtual PgpSecretKey get_SigningSecretKey();
    public sealed virtual IEnumerable`1<PgpPublicKey> get_PublicKeys();
    public sealed virtual PgpPublicKey get_MasterKey();
    public sealed virtual PgpPublicKey get_PublicKey();
    public sealed virtual PgpPrivateKey get_PrivateKey();
    public sealed virtual PgpSecretKey get_SecretKey();
    public sealed virtual PgpSecretKeyRingBundle get_SecretKeys();
    public sealed virtual PgpPrivateKey FindSecretKey(long keyId);
    public void UseEncryptionKey(long keyId);
    private PgpPrivateKey ReadPrivateKey(PgpSecretKey secretKey, string passPhrase);
    private void InitializeKeys(IEnumerable`1<PgpPublicKeyRing> publicKeyRings);
}
public enum PgpCore.Enums.PGPFileType : Enum {
    public int value__;
    public static PGPFileType Binary;
    public static PGPFileType Text;
    public static PGPFileType UTF8;
}
[ExtensionAttribute]
internal static class PgpCore.Extensions.DisposableExtensions : object {
    [ExtensionAttribute]
public static T DisposeWith(T this, CompositeDisposable disposables);
}
[ExtensionAttribute]
internal static class PgpCore.Extensions.StreamExtensions : object {
    [ExtensionAttribute]
internal static string GetString(Stream inputStream);
    [AsyncStateMachineAttribute("PgpCore.Extensions.StreamExtensions/<GetStringAsync>d__1")]
[ExtensionAttribute]
internal static Task`1<string> GetStringAsync(Stream inputStream);
    [ExtensionAttribute]
internal static Encoding GetEncoding(Stream inputStream);
}
[ExtensionAttribute]
internal static class PgpCore.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static Stream GetStream(string s, Encoding encoding);
    [AsyncStateMachineAttribute("PgpCore.Extensions.StringExtensions/<GetStreamAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Stream> GetStreamAsync(string s, Encoding encoding);
}
public static class PgpCore.Helpers.StreamHelper : object {
    private static int BufferSize;
    public static void Drain(Stream inStr);
    public static Byte[] ReadAll(Stream inStr);
    public static Byte[] ReadAllLimited(Stream inStr, int limit);
    public static int ReadFully(Stream inStr, Byte[] buf);
    public static int ReadFully(Stream inStr, Byte[] buf, int off, int len);
    public static void PipeAll(Stream inStr, Stream outStr);
    public static long PipeAllLimited(Stream inStr, long limit, Stream outStr);
    public static void WriteBufTo(MemoryStream buf, Stream output);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<DrainAsync>d__9")]
public static Task DrainAsync(Stream inStr);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<ReadAllAsync>d__10")]
public static Task`1<Byte[]> ReadAllAsync(Stream inStr);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<ReadAllLimitedAsync>d__11")]
public static Task`1<Byte[]> ReadAllLimitedAsync(Stream inStr, int limit);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<ReadFullyAsync>d__12")]
public static Task`1<int> ReadFullyAsync(Stream inStr, Byte[] buf);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<ReadFullyAsync>d__13")]
public static Task`1<int> ReadFullyAsync(Stream inStr, Byte[] buf, int off, int len);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<PipeAllAsync>d__14")]
public static Task PipeAllAsync(Stream inStr, Stream outStr);
    [AsyncStateMachineAttribute("PgpCore.Helpers.StreamHelper/<PipeAllLimitedAsync>d__15")]
public static Task`1<long> PipeAllLimitedAsync(Stream inStr, long limit, Stream outStr);
}
internal class PgpCore.Models.CompositeDisposable : object {
    private ConcurrentQueue`1<IDisposable> _disposables;
    public void Add(IDisposable disposable);
    public sealed virtual void Dispose();
}
public class PgpCore.Models.PgpInspectBaseResult : object {
    [CompilerGeneratedAttribute]
private bool <IsCompressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIntegrityProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSigned>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricKeyAlgorithmTag <SymmetricKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModificationDateTime>k__BackingField;
    public bool IsCompressed { get; }
    public bool IsEncrypted { get; }
    public bool IsIntegrityProtected { get; }
    public bool IsSigned { get; }
    public SymmetricKeyAlgorithmTag SymmetricKeyAlgorithm { get; }
    public string FileName { get; }
    public DateTime ModificationDateTime { get; }
    public PgpInspectBaseResult(bool isCompressed, bool isEncrypted, bool isIntegrityProtected, bool isSigned, SymmetricKeyAlgorithmTag symmetricKeyAlgorithm, string fileName, DateTime modificationDateTime);
    [CompilerGeneratedAttribute]
public bool get_IsCompressed();
    [CompilerGeneratedAttribute]
public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
public bool get_IsIntegrityProtected();
    [CompilerGeneratedAttribute]
public bool get_IsSigned();
    [CompilerGeneratedAttribute]
public SymmetricKeyAlgorithmTag get_SymmetricKeyAlgorithm();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public DateTime get_ModificationDateTime();
}
public class PgpCore.Models.PgpInspectResult : PgpInspectBaseResult {
    [CompilerGeneratedAttribute]
private bool <IsArmored>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MessageHeaders>k__BackingField;
    public bool IsArmored { get; }
    public Dictionary`2<string, string> MessageHeaders { get; }
    public string Version { get; }
    public string Comment { get; }
    public PgpInspectResult(bool isArmored, bool isCompressed, bool isEncrypted, bool isIntegrityProtected, bool isSigned, SymmetricKeyAlgorithmTag symmetricKeyAlgorithm, Dictionary`2<string, string> messageHeaders, string fileName, DateTime modificationDateTime);
    public PgpInspectResult(PgpInspectBaseResult baseResult, bool isArmored, Dictionary`2<string, string> messageHeaders);
    [CompilerGeneratedAttribute]
public bool get_IsArmored();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MessageHeaders();
    public string get_Version();
    public string get_Comment();
}
public class PgpCore.Models.PgpPublicKeyRingWithPreferredKey : object {
    [CompilerGeneratedAttribute]
private PgpPublicKeyRing <PgpPublicKeyRing>k__BackingField;
    [CompilerGeneratedAttribute]
private PgpPublicKey <PreferredEncryptionKey>k__BackingField;
    private Lazy`1<PgpPublicKey> _defaultEncryptionKey;
    private Lazy`1<IEnumerable`1<PgpPublicKey>> _encryptionKeys;
    public PgpPublicKeyRing PgpPublicKeyRing { get; public set; }
    public PgpPublicKey PreferredEncryptionKey { get; private set; }
    public PgpPublicKey DefaultEncryptionKey { get; }
    public PgpPublicKeyRingWithPreferredKey(PgpPublicKeyRing publicKeyRing);
    [CompilerGeneratedAttribute]
public PgpPublicKeyRing get_PgpPublicKeyRing();
    [CompilerGeneratedAttribute]
public void set_PgpPublicKeyRing(PgpPublicKeyRing value);
    [CompilerGeneratedAttribute]
public PgpPublicKey get_PreferredEncryptionKey();
    [CompilerGeneratedAttribute]
private void set_PreferredEncryptionKey(PgpPublicKey value);
    public PgpPublicKey get_DefaultEncryptionKey();
    public void UsePreferredEncryptionKey(Nullable`1<long> keyId);
    public void ClearPreferredEncryptionKey();
    [CompilerGeneratedAttribute]
private PgpPublicKey <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<PgpPublicKey> <.ctor>b__12_1();
}
public class PgpCore.Models.VerificationResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearText>k__BackingField;
    public bool IsVerified { get; private set; }
    public string ClearText { get; private set; }
    public VerificationResult(bool isVerified, string clearText);
    [CompilerGeneratedAttribute]
public bool get_IsVerified();
    [CompilerGeneratedAttribute]
private void set_IsVerified(bool value);
    [CompilerGeneratedAttribute]
public string get_ClearText();
    [CompilerGeneratedAttribute]
private void set_ClearText(string value);
}
public class PgpCore.PGP : object {
    private static PGP _instance;
    private static int BufferSize;
    private static string DefaultFileName;
    [CompilerGeneratedAttribute]
private CompressionAlgorithmTag <CompressionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricKeyAlgorithmTag <SymmetricKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PgpSignatureType>k__BackingField;
    [CompilerGeneratedAttribute]
private PublicKeyAlgorithmTag <PublicKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private PGPFileType <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private HashAlgorithmTag <HashAlgorithmTag>k__BackingField;
    [CompilerGeneratedAttribute]
private IEncryptionKeys <EncryptionKeys>k__BackingField;
    public static PGP Instance { get; }
    public CompressionAlgorithmTag CompressionAlgorithm { get; public set; }
    public SymmetricKeyAlgorithmTag SymmetricKeyAlgorithm { get; public set; }
    public int PgpSignatureType { get; public set; }
    public PublicKeyAlgorithmTag PublicKeyAlgorithm { get; public set; }
    public PGPFileType FileType { get; public set; }
    public HashAlgorithmTag HashAlgorithmTag { get; public set; }
    public IEncryptionKeys EncryptionKeys { get; private set; }
    private static Byte[] LineSeparator { get; }
    public PGP(IEncryptionKeys encryptionKeys);
    public static PGP get_Instance();
    [CompilerGeneratedAttribute]
public CompressionAlgorithmTag get_CompressionAlgorithm();
    [CompilerGeneratedAttribute]
public void set_CompressionAlgorithm(CompressionAlgorithmTag value);
    [CompilerGeneratedAttribute]
public SymmetricKeyAlgorithmTag get_SymmetricKeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SymmetricKeyAlgorithm(SymmetricKeyAlgorithmTag value);
    [CompilerGeneratedAttribute]
public int get_PgpSignatureType();
    [CompilerGeneratedAttribute]
public void set_PgpSignatureType(int value);
    [CompilerGeneratedAttribute]
public PublicKeyAlgorithmTag get_PublicKeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_PublicKeyAlgorithm(PublicKeyAlgorithmTag value);
    [CompilerGeneratedAttribute]
public PGPFileType get_FileType();
    [CompilerGeneratedAttribute]
public void set_FileType(PGPFileType value);
    [CompilerGeneratedAttribute]
public HashAlgorithmTag get_HashAlgorithmTag();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithmTag(HashAlgorithmTag value);
    [CompilerGeneratedAttribute]
public IEncryptionKeys get_EncryptionKeys();
    [CompilerGeneratedAttribute]
private void set_EncryptionKeys(IEncryptionKeys value);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputEncryptedAsync>d__35")]
private Task OutputEncryptedAsync(FileInfo inputFile, Stream outputStream, bool withIntegrityCheck, string name, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputEncryptedAsync>d__36")]
private Task OutputEncryptedAsync(Stream inputStream, Stream outputStream, bool withIntegrityCheck, string name, bool oldFormat);
    private void OutputEncrypted(FileInfo inputFile, Stream outputStream, bool withIntegrityCheck, string name, bool oldFormat);
    private void OutputEncrypted(Stream inputStream, Stream outputStream, bool withIntegrityCheck, string name, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputSignedAsync>d__39")]
private Task OutputSignedAsync(FileInfo inputFile, Stream outputStream, string name, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputSignedAsync>d__40")]
private Task OutputSignedAsync(Stream inputStream, Stream outputStream, string name, bool oldFormat);
    private void OutputSigned(FileInfo inputFile, Stream outputStream, string name, bool oldFormat);
    private void OutputSigned(Stream inputStream, Stream outputStream, string name, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputClearSignedAsync>d__43")]
private Task OutputClearSignedAsync(FileInfo inputFile, Stream outputStream, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<OutputClearSignedAsync>d__44")]
private Task OutputClearSignedAsync(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    private void OutputClearSigned(FileInfo inputFile, Stream outputStream, IDictionary`2<string, string> headers);
    private void OutputClearSigned(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<WriteOutputAndSignAsync>d__47")]
private Task WriteOutputAndSignAsync(Stream compressedOut, Stream literalOut, FileStream inputFileStream, PgpSignatureGenerator signatureGenerator);
    private void WriteOutputAndSign(Stream compressedOut, Stream literalOut, FileStream inputFileStream, PgpSignatureGenerator signatureGenerator);
    [AsyncStateMachineAttribute("PgpCore.PGP/<WriteOutputAndSignAsync>d__49")]
private Task WriteOutputAndSignAsync(Stream compressedOut, Stream literalOut, Stream inputStream, PgpSignatureGenerator signatureGenerator);
    private void WriteOutputAndSign(Stream compressedOut, Stream literalOut, Stream inputStream, PgpSignatureGenerator signatureGenerator);
    private Stream ChainEncryptedOut(Stream outputStream, bool withIntegrityCheck);
    private Stream ChainCompressedOut(Stream encryptedOut);
    private Stream ChainLiteralOut(Stream compressedOut, FileInfo file, string name, bool oldFormat);
    private Stream ChainLiteralOut(Stream compressedOut, Stream inputStream, string name, bool oldFormat);
    private PgpSignatureGenerator InitSignatureGenerator(Stream compressedOut);
    private PgpSignatureGenerator InitClearSignatureGenerator(ArmoredOutputStream armoredOutputStream);
    private char FileTypeToChar();
    private void ExportKeyPair(Stream secretOut, Stream publicOut, PgpSecretKey secretKey, bool armor, bool emitVersion);
    private static int ReadInputLine(MemoryStream streamOut, Stream encodedFile);
    private static int ReadInputLine(MemoryStream streamOut, int lookAhead, Stream encodedFile);
    private static int ReadPassedEol(MemoryStream streamOut, int lastCharacter, Stream encodedFile);
    private static int GetLengthWithoutSeparatorOrTrailingWhitespace(Byte[] line);
    private static int GetLengthWithoutWhiteSpace(Byte[] line);
    private static bool IsWhiteSpace(byte b);
    private static bool IsLineEnding(byte b);
    private static void ProcessLine(PgpSignature sig, Byte[] line);
    private static Byte[] get_LineSeparator();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAsync>d__70")]
public sealed virtual Task DecryptAsync(FileInfo inputFile, FileInfo outputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAsync>d__71")]
public sealed virtual Task DecryptAsync(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAsync>d__72")]
public sealed virtual Task`1<string> DecryptAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptFileAsync>d__73")]
public sealed virtual Task DecryptFileAsync(FileInfo inputFile, FileInfo outputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptStreamAsync>d__74")]
public sealed virtual Task DecryptStreamAsync(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptArmoredStringAsync>d__75")]
public sealed virtual Task`1<string> DecryptArmoredStringAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAndVerifyAsync>d__76")]
public sealed virtual Task DecryptAndVerifyAsync(FileInfo inputFile, FileInfo outputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAndVerifyAsync>d__77")]
public sealed virtual Task DecryptAndVerifyAsync(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptAndVerifyAsync>d__78")]
public sealed virtual Task`1<string> DecryptAndVerifyAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptFileAndVerifyAsync>d__79")]
public sealed virtual Task DecryptFileAndVerifyAsync(FileInfo inputFile, FileInfo outputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptStreamAndVerifyAsync>d__80")]
public sealed virtual Task DecryptStreamAndVerifyAsync(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<DecryptArmoredStringAndVerifyAsync>d__81")]
public sealed virtual Task`1<string> DecryptArmoredStringAndVerifyAsync(string input);
    public sealed virtual void Decrypt(FileInfo inputFile, FileInfo outputFile);
    public sealed virtual void Decrypt(Stream inputStream, Stream outputStream);
    public sealed virtual string Decrypt(string input);
    public sealed virtual string DecryptArmoredString(string input);
    public sealed virtual void DecryptFile(FileInfo inputFile, FileInfo outputFile);
    public sealed virtual void DecryptStream(Stream inputStream, Stream outputStream);
    public sealed virtual void DecryptAndVerify(FileInfo inputFile, FileInfo outputFile);
    public sealed virtual void DecryptAndVerify(Stream inputStream, Stream outputStream);
    public sealed virtual string DecryptAndVerify(string input);
    public sealed virtual string DecryptArmoredStringAndVerify(string input);
    public sealed virtual void DecryptFileAndVerify(FileInfo inputFile, FileInfo outputFile);
    public sealed virtual void DecryptStreamAndVerify(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAsync>d__94")]
public sealed virtual Task EncryptAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAsync>d__95")]
public sealed virtual Task EncryptAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAsync>d__96")]
public sealed virtual Task`1<string> EncryptAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptFileAsync>d__97")]
public sealed virtual Task EncryptFileAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptStreamAsync>d__98")]
public sealed virtual Task EncryptStreamAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptArmoredStringAsync>d__99")]
public sealed virtual Task`1<string> EncryptArmoredStringAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAndSignAsync>d__100")]
public sealed virtual Task EncryptAndSignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAndSignAsync>d__101")]
public sealed virtual Task EncryptAndSignAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptAndSignAsync>d__102")]
public sealed virtual Task`1<string> EncryptAndSignAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptFileAndSignAsync>d__103")]
public sealed virtual Task EncryptFileAndSignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptStreamAndSignAsync>d__104")]
public sealed virtual Task EncryptStreamAndSignAsync(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<EncryptArmoredStringAndSignAsync>d__105")]
public sealed virtual Task`1<string> EncryptArmoredStringAndSignAsync(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void Encrypt(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void Encrypt(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string Encrypt(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string EncryptArmoredString(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptFile(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptStream(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptAndSign(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptAndSign(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string EncryptAndSign(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string EncryptArmoredStringAndSign(string input, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptFileAndSign(FileInfo inputFile, FileInfo outputFile, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void EncryptStreamAndSign(Stream inputStream, Stream outputStream, bool armor, bool withIntegrityCheck, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<InspectAsync>d__118")]
public sealed virtual Task`1<PgpInspectResult> InspectAsync(Stream inputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<InspectAsync>d__119")]
public sealed virtual Task`1<PgpInspectResult> InspectAsync(FileInfo inputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<InspectAsync>d__120")]
public sealed virtual Task`1<PgpInspectResult> InspectAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<IsArmoredAsync>d__121")]
private Task`1<bool> IsArmoredAsync(Stream stream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<GetMessageHeadersAsync>d__122")]
private Task`1<Dictionary`2<string, string>> GetMessageHeadersAsync(Stream inputStream);
    public sealed virtual PgpInspectResult Inspect(Stream inputStream);
    private PgpInspectBaseResult GetPgpInspectBaseResult(Stream inputStream);
    public sealed virtual PgpInspectResult Inspect(FileInfo inputFile);
    public sealed virtual PgpInspectResult Inspect(string input);
    private Dictionary`2<string, string> GetMessageHeaders(Stream inputStream);
    private bool IsArmored(Byte[] data);
    private bool IsArmored(Stream stream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<GenerateKeyAsync>d__130")]
public sealed virtual Task GenerateKeyAsync(FileInfo publicKeyFileInfo, FileInfo privateKeyFileInfo, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    [AsyncStateMachineAttribute("PgpCore.PGP/<GenerateKeyAsync>d__131")]
public sealed virtual Task GenerateKeyAsync(Stream publicKeyStream, Stream privateKeyStream, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    public sealed virtual void GenerateKey(FileInfo publicKeyFileInfo, FileInfo privateKeyFileInfo, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    public sealed virtual void GenerateKey(Stream publicKeyStream, Stream privateKeyStream, string username, string password, int strength, int certainty, bool armor, bool emitVersion, long keyExpirationInSeconds, long signatureExpirationInSeconds, CompressionAlgorithmTag[] preferredCompressionAlgorithms, HashAlgorithmTag[] preferredHashAlgorithmTags, SymmetricKeyAlgorithmTag[] preferredSymetricKeyAlgorithms);
    public sealed virtual IEnumerable`1<long> GetRecipients(FileInfo inputFileInfo);
    public sealed virtual IEnumerable`1<long> GetRecipients(Stream inputStream);
    public sealed virtual IEnumerable`1<long> GetRecipients(string input);
    public sealed virtual IEnumerable`1<long> GetFileRecipients(FileInfo inputFileInfo);
    public sealed virtual IEnumerable`1<long> GetStreamRecipients(Stream inputStream);
    public sealed virtual IEnumerable`1<long> GetArmoredStringRecipients(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignAsync>d__140")]
public sealed virtual Task SignAsync(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignAsync>d__141")]
public sealed virtual Task SignAsync(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignAsync>d__142")]
public sealed virtual Task`1<string> SignAsync(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignFileAsync>d__143")]
public sealed virtual Task SignFileAsync(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignStreamAsync>d__144")]
public sealed virtual Task SignStreamAsync(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<SignArmoredStringAsync>d__145")]
public sealed virtual Task`1<string> SignArmoredStringAsync(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignAsync>d__146")]
public sealed virtual Task ClearSignAsync(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignAsync>d__147")]
public sealed virtual Task ClearSignAsync(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignAsync>d__148")]
public sealed virtual Task`1<string> ClearSignAsync(string input, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignFileAsync>d__149")]
public sealed virtual Task ClearSignFileAsync(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignStreamAsync>d__150")]
public sealed virtual Task ClearSignStreamAsync(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<ClearSignArmoredStringAsync>d__151")]
public sealed virtual Task`1<string> ClearSignArmoredStringAsync(string input, IDictionary`2<string, string> headers);
    public sealed virtual void Sign(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void Sign(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string Sign(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void SignFile(FileInfo inputFile, FileInfo outputFile, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void SignStream(Stream inputStream, Stream outputStream, bool armor, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual string SignArmoredString(string input, string name, IDictionary`2<string, string> headers, bool oldFormat);
    public sealed virtual void ClearSign(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public sealed virtual void ClearSign(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public sealed virtual string ClearSign(string input, IDictionary`2<string, string> headers);
    public sealed virtual void ClearSignFile(FileInfo inputFile, FileInfo outputFile, IDictionary`2<string, string> headers);
    public sealed virtual void ClearSignStream(Stream inputStream, Stream outputStream, IDictionary`2<string, string> headers);
    public sealed virtual string ClearSignArmoredString(string input, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAsync>d__164")]
public sealed virtual Task`1<bool> VerifyAsync(FileInfo inputFile, FileInfo outputFile, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAsync>d__165")]
public sealed virtual Task`1<bool> VerifyAsync(Stream inputStream, Stream outputStream, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAsync>d__166")]
public sealed virtual Task`1<bool> VerifyAsync(string input, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyFileAsync>d__167")]
public sealed virtual Task`1<bool> VerifyFileAsync(FileInfo inputFile, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyStreamAsync>d__168")]
public sealed virtual Task`1<bool> VerifyStreamAsync(Stream inputStream, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyArmoredStringAsync>d__169")]
public sealed virtual Task`1<bool> VerifyArmoredStringAsync(string input, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadSignedFileAsync>d__170")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadSignedFileAsync(FileInfo inputFile, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadSignedStreamAsync>d__171")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadSignedStreamAsync(Stream inputStream, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadSignedArmoredStringAsync>d__172")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadSignedArmoredStringAsync(string input, bool throwIfEncrypted);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearAsync>d__173")]
public sealed virtual Task`1<bool> VerifyClearAsync(FileInfo inputFile, FileInfo outputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearAsync>d__174")]
public sealed virtual Task`1<bool> VerifyClearAsync(Stream inputStream, Stream outputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearAsync>d__175")]
public sealed virtual Task`1<bool> VerifyClearAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearFileAsync>d__176")]
public sealed virtual Task`1<bool> VerifyClearFileAsync(FileInfo inputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearStreamAsync>d__177")]
public sealed virtual Task`1<bool> VerifyClearStreamAsync(Stream inputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyClearArmoredStringAsync>d__178")]
public sealed virtual Task`1<bool> VerifyClearArmoredStringAsync(string input);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadClearFileAsync>d__179")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadClearFileAsync(FileInfo inputFile);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadClearStreamAsync>d__180")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadClearStreamAsync(Stream inputStream);
    [AsyncStateMachineAttribute("PgpCore.PGP/<VerifyAndReadClearArmoredStringAsync>d__181")]
public sealed virtual Task`1<VerificationResult> VerifyAndReadClearArmoredStringAsync(string input);
    public sealed virtual bool Verify(FileInfo inputFile, FileInfo outputFile, bool throwIfEncrypted);
    public sealed virtual bool Verify(Stream inputStream, Stream outputStream, bool throwIfEncrypted);
    public sealed virtual bool Verify(string input, bool throwIfEncrypted);
    public sealed virtual bool VerifyFile(FileInfo inputFile, bool throwIfEncrypted);
    public sealed virtual bool VerifyStream(Stream inputStream, bool throwIfEncrypted);
    public sealed virtual bool VerifyArmoredString(string input, bool throwIfEncrypted);
    public sealed virtual VerificationResult VerifyAndReadSignedFile(FileInfo inputFile, bool throwIfEncrypted);
    public sealed virtual VerificationResult VerifyAndReadSignedStream(Stream inputStream, bool throwIfEncrypted);
    public sealed virtual VerificationResult VerifyAndReadSignedArmoredString(string input, bool throwIfEncrypted);
    public sealed virtual bool VerifyClear(FileInfo inputFile, FileInfo outputFile);
    public sealed virtual bool VerifyClear(Stream inputStream, Stream outputStream);
    public bool VerifyClear(string input);
    public sealed virtual bool VerifyClear(string input, string output);
    public sealed virtual bool VerifyClearFile(FileInfo inputFile);
    public sealed virtual bool VerifyClearStream(Stream inputStream);
    public sealed virtual bool VerifyClearArmoredString(string input);
    public sealed virtual VerificationResult VerifyAndReadClearFile(FileInfo inputFile);
    public sealed virtual VerificationResult VerifyAndReadClearStream(Stream inputStream);
    public sealed virtual VerificationResult VerifyAndReadClearArmoredString(string input);
}
public static class PgpCore.Utilities : object {
    private static int ReadAhead;
    public static MPInteger[] DsaSigToMpi(Byte[] encoding);
    public static MPInteger[] RsaSigToMpi(Byte[] encoding);
    public static string GetDigestName(HashAlgorithmTag hashAlgorithm);
    public static string GetSignatureName(PublicKeyAlgorithmTag keyAlgorithm, HashAlgorithmTag hashAlgorithm);
    public static string GetSymmetricCipherName(SymmetricKeyAlgorithmTag algorithm);
    public static int GetKeySize(SymmetricKeyAlgorithmTag algorithm);
    public static KeyParameter MakeKey(SymmetricKeyAlgorithmTag algorithm, Byte[] keyBytes);
    public static KeyParameter MakeRandomKey(SymmetricKeyAlgorithmTag algorithm, SecureRandom random);
    public static KeyParameter MakeKeyFromPassPhrase(SymmetricKeyAlgorithmTag algorithm, S2k s2K, Char[] passPhrase);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<WriteFileToLiteralDataAsync>d__9")]
public static Task WriteFileToLiteralDataAsync(Stream output, char fileType, FileInfo file, bool oldFormat);
    public static void WriteFileToLiteralData(Stream output, char fileType, FileInfo file, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<WriteFileToLiteralDataAsync>d__11")]
public static Task WriteFileToLiteralDataAsync(Stream output, char fileType, FileInfo file, Byte[] buffer, bool oldFormat);
    public static void WriteFileToLiteralData(Stream output, char fileType, FileInfo file, Byte[] buffer, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<WriteStreamToLiteralDataAsync>d__13")]
public static Task WriteStreamToLiteralDataAsync(Stream output, char fileType, Stream input, string name, bool oldFormat);
    public static void WriteStreamToLiteralData(Stream output, char fileType, Stream input, string name, bool oldFormat);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<WriteStreamToLiteralDataAsync>d__15")]
public static Task WriteStreamToLiteralDataAsync(Stream output, char fileType, Stream input, Byte[] buffer, string name, bool oldFormat);
    public static void WriteStreamToLiteralData(Stream output, char fileType, Stream input, Byte[] buffer, string name, bool oldFormat);
    public static PgpPublicKey ReadPublicKey(Stream publicKeyStream);
    public static PgpPublicKey ReadPublicKey(string publicKey);
    public static PgpPublicKey ReadPublicKey(FileInfo publicKeyFile);
    public static PgpPublicKeyRingBundle ReadPublicKeyRingBundle(FileInfo publicKeyFile);
    public static PgpPublicKeyRingBundle ReadPublicKeyRingBundle(Stream publicKeyStream);
    public static IEnumerable`1<PgpPublicKeyRing> ReadAllKeyRings(IEnumerable`1<Stream> publicKeyStreams);
    public static IEnumerable`1<PgpPublicKeyRing> ReadAllKeyRings(Stream publicKeyStream);
    private static IEnumerable`1<PgpPublicKeyRing> ReadAllKeyRings(IEnumerable`1<PgpPublicKeyRingBundle> publicKeyRingBundles);
    public static PgpSecretKeyRingBundle ReadSecretKeyRingBundle(Stream privateKeyStream);
    public static PgpPublicKey FindBestVerificationKey(PgpPublicKeyRing publicKeys);
    public static PgpPublicKey FindBestEncryptionKey(PgpPublicKeyRing publicKeys);
    public static PgpSecretKey FindBestSigningKey(PgpSecretKeyRingBundle secretKeyRingBundle);
    public static PgpPublicKey FindMasterKey(PgpPublicKeyRing publicKeys);
    public static bool FindPublicKey(long keyId, IEnumerable`1<PgpPublicKey> verificationKeys, PgpPublicKey& verificationKey);
    public static bool FindPublicKeyInKeyRings(long keyId, IEnumerable`1<PgpPublicKeyRing> publicKeyRings, PgpPublicKey& verificationKey);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<PipeFileContentsAsync>d__32")]
private static Task PipeFileContentsAsync(FileInfo file, Stream pOut, int bufSize);
    private static void PipeFileContents(FileInfo file, Stream pOut, int bufSize);
    [AsyncStateMachineAttribute("PgpCore.Utilities/<PipeStreamContentsAsync>d__34")]
private static Task PipeStreamContentsAsync(Stream input, Stream pOut, int bufSize);
    private static void PipeStreamContents(Stream input, Stream pOut, int bufSize);
    private static bool IsPossiblyBase64(int ch);
    public static Stream GetDecoderStream(Stream inputStream);
    public static PgpPublicKeyEncryptedData ExtractPublicKeyEncryptedData(Stream encodedFile);
    public static PgpPublicKeyEncryptedData ExtractPublicKeyEncryptedData(PgpEncryptedDataList encryptedDataList);
    public static PgpObject ProcessCompressedMessage(PgpObject message);
    public static PgpObject CheckForOnePassSignatureList(PgpObjectFactory compressedFactory);
    public static PgpObject SkipSignatureList(PgpObjectFactory compressedFactory);
    public static PgpObjectFactory GetClearDataStream(PgpPrivateKey privateKey, PgpPublicKeyEncryptedData publicKeyEncryptedData);
    public static PgpPublicKeyEncryptedData ExtractPublicKey(PgpEncryptedDataList encryptedDataList);
    public static PgpEncryptedDataList GetEncryptedDataList(Stream encodedFile);
    public static PgpOnePassSignatureList GetPgpOnePassSignatureList(Stream encodedFile);
    private static int GetEncryptionScore(PgpPublicKey key);
    private static int GetSigningScore(PgpPublicKey key);
    private static int GetSigningScore(PgpSecretKey key);
}
