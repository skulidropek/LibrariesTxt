public static class PInvoke.BCrypt : object {
    private static Byte[] NonEmptyArrayReplacesNull;
    private static Byte[] NonEmptyArrayReplacesEmpty;
    private static BCrypt();
    public static NTSTATUS BCryptEnumAlgorithms(AlgorithmOperations dwAlgOperations, Int32& pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER*& ppAlgList, BCryptEnumAlgorithmsFlags dwFlags);
    public static NTSTATUS BCryptOpenAlgorithmProvider(SafeAlgorithmHandle& phAlgorithm, string pszAlgId, string pszImplementation, BCryptOpenAlgorithmProviderFlags dwFlags);
    public static NTSTATUS BCryptCreateHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, Byte* pbHashObject, int cbHashObject, Byte* pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptKeyDerivation(SafeKeyHandle hKey, BCryptBufferDesc* pParameterList, Byte* pbDerivedKey, int cbDerivedKey, Int32& pcbResult, BCryptKeyDerivationFlags dwFlags);
    public static NTSTATUS BCryptCreateMultiHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, int nHashes, Byte* pbHashObject, int cbHashObject, Byte* pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, Byte* pbInput, int cbInput, Void* pPaddingInfo, Byte* pbIV, int cbIV, Byte* pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, Byte* pbInput, int cbInput, Void* pPaddingInfo, Byte* pbIV, int cbIV, Byte* pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptHashData(SafeHashHandle hHash, Byte* pbInput, int cbInput, BCryptHashDataFlags dwFlags);
    public static NTSTATUS BCryptProcessMultiOperations(SafeHashHandle hHash, BCRYPT_MULTI_OPERATION_TYPE operationType, BCRYPT_MULTI_HASH_OPERATION* pOperations, int cbOperations, int dwFlags);
    public static NTSTATUS BCryptFinishHash(SafeHashHandle hHash, Byte* pbOutput, int cbOutput, BCryptFinishHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, Byte* pbInput, int cbInput, Byte* pbOutput, int cbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, Byte* pbHash, int cbHash, Byte* pbSignature, int cbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptGenerateKeyPair(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle& phKey, int dwLength, BCryptGenerateKeyPairFlags dwFlags);
    public static NTSTATUS BCryptGenerateSymmetricKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle& phKey, Byte* pbKeyObject, int cbKeyObject, Byte* pbSecret, int cbSecret, BCryptGenerateSymmetricKeyFlags flags);
    public static NTSTATUS BCryptFinalizeKeyPair(SafeKeyHandle hKey, BCryptFinalizeKeyPairFlags dwFlags);
    public static NTSTATUS BCryptImportKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, Byte* pbKeyObject, int cbKeyObject, Byte* pbInput, int cbInput, BCryptImportKeyFlags dwFlags);
    public static NTSTATUS BCryptImportKeyPair(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, Byte* pbInput, int cbInput, BCryptImportKeyPairFlags dwFlags);
    public static NTSTATUS BCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, Byte* pbOutput, int cbOutput, Int32& pcbResult, BCryptExportKeyFlags dwFlags);
    public static NTSTATUS BCryptSecretAgreement(SafeKeyHandle privateKey, SafeKeyHandle publicKey, SafeSecretHandle& secret, BCryptSecretAgreementFlags flags);
    public static NTSTATUS BCryptDeriveKey(SafeSecretHandle sharedSecret, string keyDerivationFunction, BCryptBufferDesc* kdfParameters, Byte* derivedKey, int derivedKeySize, Int32& resultSize, BCryptDeriveKeyFlags flags);
    public static NTSTATUS BCryptSetProperty(SafeHandle hObject, string pszProperty, Byte* pbInput, int cbInput, BCryptSetPropertyFlags dwFlags);
    public static NTSTATUS BCryptSetProperty(SafeHandle hObject, string pszProperty, string pbInput, int cbInput, BCryptSetPropertyFlags dwFlags);
    public static NTSTATUS BCryptGetProperty(SafeHandle hObject, string property, Byte* output, int outputSize, Int32& resultSize, BCryptGetPropertyFlags flags);
    public static NTSTATUS BCryptGenRandom(SafeAlgorithmHandle hAlgorithm, Byte* pbBuffer, int cbBuffer, BCryptGenRandomFlags flags);
    public static void BCryptFreeBuffer(Void* pvBuffer);
    private static NTSTATUS BCryptCloseAlgorithmProvider(IntPtr algorithmHandle, BCryptCloseAlgorithmProviderFlags flags);
    private static NTSTATUS BCryptDestroyHash(IntPtr hHash);
    private static NTSTATUS BCryptDestroyKey(IntPtr hKey);
    private static NTSTATUS BCryptDestroySecret(IntPtr hSecret);
    public static SafeAlgorithmHandle BCryptOpenAlgorithmProvider(string pszAlgId, string pszImplementation, BCryptOpenAlgorithmProviderFlags dwFlags);
    public static SafeHashHandle BCryptCreateHash(SafeAlgorithmHandle algorithm, Byte[] hashObject, Byte[] secret, BCryptCreateHashFlags flags);
    public static ArraySegment`1<byte> BCryptExportKey(SafeKeyHandle key, SafeKeyHandle exportKey, string blobType);
    public static SafeKeyHandle BCryptGenerateKeyPair(SafeAlgorithmHandle algorithm, int keyLength);
    public static SafeKeyHandle BCryptGenerateSymmetricKey(SafeAlgorithmHandle algorithm, Byte[] secret, Byte[] keyObject, BCryptGenerateSymmetricKeyFlags flags);
    public static SafeKeyHandle BCryptImportKeyPair(SafeAlgorithmHandle algorithm, string blobType, Byte[] input, BCryptImportKeyPairFlags flags);
    public static SafeKeyHandle BCryptImportKey(SafeAlgorithmHandle hAlgorithm, string pszBlobType, Byte[] pbInput, SafeKeyHandle hImportKey, Byte[] pbKeyObject, BCryptImportKeyFlags dwFlags);
    public static ArraySegment`1<byte> BCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, Void* pPaddingInfo, Byte[] pbIV, BCryptEncryptFlags dwFlags);
    [ObsoleteAttribute("Use the overload that accepts spans instead.")]
public static NTSTATUS BCryptEncrypt(SafeKeyHandle key, Nullable`1<ArraySegment`1<byte>> input, Void* paddingInfo, Nullable`1<ArraySegment`1<byte>> iv, Nullable`1<ArraySegment`1<byte>> output, Int32& outputLength, BCryptEncryptFlags flags);
    public static ArraySegment`1<byte> BCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, Void* pPaddingInfo, Byte[] pbIV, BCryptEncryptFlags dwFlags);
    [ObsoleteAttribute("Use the overload that accepts spans instead.")]
public static NTSTATUS BCryptDecrypt(SafeKeyHandle key, Nullable`1<ArraySegment`1<byte>> input, Void* paddingInfo, Nullable`1<ArraySegment`1<byte>> iv, Nullable`1<ArraySegment`1<byte>> output, Int32& outputLength, BCryptEncryptFlags flags);
    public static Byte[] BCryptFinishHash(SafeHashHandle hHash, BCryptFinishHashFlags flags);
    public static ArraySegment`1<byte> BCryptSignHash(SafeKeyHandle key, Byte[] hash, Void* paddingInfo, BCryptSignHashFlags flags);
    public static bool BCryptVerifySignature(SafeKeyHandle key, Byte[] hash, Byte[] signature, Void* paddingInfo, BCryptSignHashFlags flags);
    public static SafeSecretHandle BCryptSecretAgreement(SafeKeyHandle privateKey, SafeKeyHandle publicKey);
    public static void BCryptSetProperty(SafeHandle hObject, string propertyName, string propertyValue, BCryptSetPropertyFlags flags);
    public static void BCryptSetProperty(SafeHandle hObject, string propertyName, T propertyValue, BCryptSetPropertyFlags flags);
    public static ArraySegment`1<byte> BCryptGetProperty(SafeHandle hObject, string propertyName, BCryptGetPropertyFlags flags);
    public static T BCryptGetProperty(SafeHandle hObject, string propertyName, BCryptGetPropertyFlags flags);
    private static void EnsureNotNullOrEmpty(ArraySegment`1& buffer);
    private static ArraySegment`1<byte> ArraySegmentFor(Byte[] buffer);
    private static Byte* ArrayOrOriginalNull(ArraySegment`1<byte> buffer, Byte* pointer);
    public static NTSTATUS BCryptEnumAlgorithms(AlgorithmOperations dwAlgOperations, Int32& pAlgCount, IntPtr& ppAlgList, BCryptEnumAlgorithmsFlags dwFlags);
    public static NTSTATUS BCryptCreateHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, IntPtr pbHashObject, int cbHashObject, IntPtr pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptCreateHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, Span`1<byte> pbHashObject, ReadOnlySpan`1<byte> pbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptCreateHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, Byte[] pbHashObject, int cbHashObject, Byte[] pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptKeyDerivation(SafeKeyHandle hKey, IntPtr pParameterList, IntPtr pbDerivedKey, int cbDerivedKey, Int32& pcbResult, BCryptKeyDerivationFlags dwFlags);
    public static NTSTATUS BCryptKeyDerivation(SafeKeyHandle hKey, Nullable`1<BCryptBufferDesc> pParameterList, Span`1<byte> pbDerivedKey, int cbDerivedKey, Int32& pcbResult, BCryptKeyDerivationFlags dwFlags);
    public static NTSTATUS BCryptKeyDerivation(SafeKeyHandle hKey, Nullable`1<BCryptBufferDesc> pParameterList, Byte[] pbDerivedKey, int cbDerivedKey, Int32& pcbResult, BCryptKeyDerivationFlags dwFlags);
    public static NTSTATUS BCryptCreateMultiHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, int nHashes, IntPtr pbHashObject, int cbHashObject, IntPtr pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptCreateMultiHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, int nHashes, Span`1<byte> pbHashObject, ReadOnlySpan`1<byte> pbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptCreateMultiHash(SafeAlgorithmHandle hAlgorithm, SafeHashHandle& phHash, int nHashes, Byte[] pbHashObject, int cbHashObject, Byte[] pbSecret, int cbSecret, BCryptCreateHashFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, IntPtr pbInput, int cbInput, IntPtr pPaddingInfo, IntPtr pbIV, int cbIV, IntPtr pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbIV, Span`1<byte> pbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, IntPtr pPaddingInfo, Byte[] pbIV, int cbIV, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbIV, Span`1<byte> pbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, Void* pPaddingInfo, Byte[] pbIV, int cbIV, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, IntPtr pbInput, int cbInput, IntPtr pPaddingInfo, IntPtr pbIV, int cbIV, IntPtr pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbIV, Span`1<byte> pbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, IntPtr pPaddingInfo, Byte[] pbIV, int cbIV, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbIV, Span`1<byte> pbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, Void* pPaddingInfo, Byte[] pbIV, int cbIV, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptEncryptFlags dwFlags);
    public static NTSTATUS BCryptHashData(SafeHashHandle hHash, IntPtr pbInput, int cbInput, BCryptHashDataFlags dwFlags);
    public static NTSTATUS BCryptHashData(SafeHashHandle hHash, ReadOnlySpan`1<byte> pbInput, BCryptHashDataFlags dwFlags);
    public static NTSTATUS BCryptHashData(SafeHashHandle hHash, Byte[] pbInput, int cbInput, BCryptHashDataFlags dwFlags);
    public static NTSTATUS BCryptProcessMultiOperations(SafeHashHandle hHash, BCRYPT_MULTI_OPERATION_TYPE operationType, IntPtr pOperations, int cbOperations, int dwFlags);
    public static NTSTATUS BCryptProcessMultiOperations(SafeHashHandle hHash, BCRYPT_MULTI_OPERATION_TYPE operationType, ReadOnlySpan`1<BCRYPT_MULTI_HASH_OPERATION> pOperations, int cbOperations, int dwFlags);
    public static NTSTATUS BCryptProcessMultiOperations(SafeHashHandle hHash, BCRYPT_MULTI_OPERATION_TYPE operationType, BCRYPT_MULTI_HASH_OPERATION[] pOperations, int cbOperations, int dwFlags);
    public static NTSTATUS BCryptFinishHash(SafeHashHandle hHash, IntPtr pbOutput, int cbOutput, BCryptFinishHashFlags dwFlags);
    public static NTSTATUS BCryptFinishHash(SafeHashHandle hHash, Span`1<byte> pbOutput, BCryptFinishHashFlags dwFlags);
    public static NTSTATUS BCryptFinishHash(SafeHashHandle hHash, Byte[] pbOutput, int cbOutput, BCryptFinishHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, IntPtr pbInput, int cbInput, IntPtr pbOutput, int cbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbInput, Span`1<byte> pbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, Byte[] pbInput, int cbInput, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbInput, Span`1<byte> pbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, Byte[] pbInput, int cbInput, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, IntPtr pbHash, int cbHash, IntPtr pbSignature, int cbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbHash, ReadOnlySpan`1<byte> pbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, Byte[] pbHash, int cbHash, Byte[] pbSignature, int cbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbHash, ReadOnlySpan`1<byte> pbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, Byte[] pbHash, int cbHash, Byte[] pbSignature, int cbSignature, BCryptSignHashFlags dwFlags);
    public static NTSTATUS BCryptGenerateSymmetricKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle& phKey, IntPtr pbKeyObject, int cbKeyObject, IntPtr pbSecret, int cbSecret, BCryptGenerateSymmetricKeyFlags flags);
    public static NTSTATUS BCryptGenerateSymmetricKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle& phKey, Span`1<byte> pbKeyObject, ReadOnlySpan`1<byte> pbSecret, BCryptGenerateSymmetricKeyFlags flags);
    public static NTSTATUS BCryptGenerateSymmetricKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle& phKey, Byte[] pbKeyObject, int cbKeyObject, Byte[] pbSecret, int cbSecret, BCryptGenerateSymmetricKeyFlags flags);
    public static NTSTATUS BCryptImportKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, IntPtr pbKeyObject, int cbKeyObject, IntPtr pbInput, int cbInput, BCryptImportKeyFlags dwFlags);
    public static NTSTATUS BCryptImportKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, Span`1<byte> pbKeyObject, ReadOnlySpan`1<byte> pbInput, BCryptImportKeyFlags dwFlags);
    public static NTSTATUS BCryptImportKey(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, Byte[] pbKeyObject, int cbKeyObject, Byte[] pbInput, int cbInput, BCryptImportKeyFlags dwFlags);
    public static NTSTATUS BCryptImportKeyPair(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, IntPtr pbInput, int cbInput, BCryptImportKeyPairFlags dwFlags);
    public static NTSTATUS BCryptImportKeyPair(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, ReadOnlySpan`1<byte> pbInput, BCryptImportKeyPairFlags dwFlags);
    public static NTSTATUS BCryptImportKeyPair(SafeAlgorithmHandle hAlgorithm, SafeKeyHandle hImportKey, string pszBlobType, SafeKeyHandle& phKey, Byte[] pbInput, int cbInput, BCryptImportKeyPairFlags dwFlags);
    public static NTSTATUS BCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, IntPtr pbOutput, int cbOutput, Int32& pcbResult, BCryptExportKeyFlags dwFlags);
    public static NTSTATUS BCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, Span`1<byte> pbOutput, Int32& pcbResult, BCryptExportKeyFlags dwFlags);
    public static NTSTATUS BCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, Byte[] pbOutput, int cbOutput, Int32& pcbResult, BCryptExportKeyFlags dwFlags);
    public static NTSTATUS BCryptDeriveKey(SafeSecretHandle sharedSecret, string keyDerivationFunction, IntPtr kdfParameters, IntPtr derivedKey, int derivedKeySize, Int32& resultSize, BCryptDeriveKeyFlags flags);
    public static NTSTATUS BCryptDeriveKey(SafeSecretHandle sharedSecret, string keyDerivationFunction, Nullable`1<BCryptBufferDesc> kdfParameters, Span`1<byte> derivedKey, Int32& resultSize, BCryptDeriveKeyFlags flags);
    public static NTSTATUS BCryptDeriveKey(SafeSecretHandle sharedSecret, string keyDerivationFunction, Nullable`1<BCryptBufferDesc> kdfParameters, Byte[] derivedKey, int derivedKeySize, Int32& resultSize, BCryptDeriveKeyFlags flags);
    public static NTSTATUS BCryptSetProperty(SafeHandle hObject, string pszProperty, IntPtr pbInput, int cbInput, BCryptSetPropertyFlags dwFlags);
    public static NTSTATUS BCryptSetProperty(SafeHandle hObject, string pszProperty, ReadOnlySpan`1<byte> pbInput, BCryptSetPropertyFlags dwFlags);
    public static NTSTATUS BCryptSetProperty(SafeHandle hObject, string pszProperty, Byte[] pbInput, int cbInput, BCryptSetPropertyFlags dwFlags);
    public static NTSTATUS BCryptGetProperty(SafeHandle hObject, string property, IntPtr output, int outputSize, Int32& resultSize, BCryptGetPropertyFlags flags);
    public static NTSTATUS BCryptGetProperty(SafeHandle hObject, string property, Span`1<byte> output, Int32& resultSize, BCryptGetPropertyFlags flags);
    public static NTSTATUS BCryptGetProperty(SafeHandle hObject, string property, Byte[] output, int outputSize, Int32& resultSize, BCryptGetPropertyFlags flags);
    public static NTSTATUS BCryptGenRandom(SafeAlgorithmHandle hAlgorithm, IntPtr pbBuffer, int cbBuffer, BCryptGenRandomFlags flags);
    public static NTSTATUS BCryptGenRandom(SafeAlgorithmHandle hAlgorithm, Span`1<byte> pbBuffer, BCryptGenRandomFlags flags);
    public static NTSTATUS BCryptGenRandom(SafeAlgorithmHandle hAlgorithm, Byte[] pbBuffer, int cbBuffer, BCryptGenRandomFlags flags);
    public static void BCryptFreeBuffer(IntPtr pvBuffer);
    public static ArraySegment`1<byte> BCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, IntPtr pPaddingInfo, Byte[] pbIV, BCryptEncryptFlags dwFlags);
    [ObsoleteAttribute("Use the overload that accepts spans instead.")]
public static NTSTATUS BCryptEncrypt(SafeKeyHandle key, Nullable`1<ArraySegment`1<byte>> input, IntPtr paddingInfo, Nullable`1<ArraySegment`1<byte>> iv, Nullable`1<ArraySegment`1<byte>> output, Int32& outputLength, BCryptEncryptFlags flags);
    public static ArraySegment`1<byte> BCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, IntPtr pPaddingInfo, Byte[] pbIV, BCryptEncryptFlags dwFlags);
    [ObsoleteAttribute("Use the overload that accepts spans instead.")]
public static NTSTATUS BCryptDecrypt(SafeKeyHandle key, Nullable`1<ArraySegment`1<byte>> input, IntPtr paddingInfo, Nullable`1<ArraySegment`1<byte>> iv, Nullable`1<ArraySegment`1<byte>> output, Int32& outputLength, BCryptEncryptFlags flags);
    public static ArraySegment`1<byte> BCryptSignHash(SafeKeyHandle key, Byte[] hash, IntPtr paddingInfo, BCryptSignHashFlags flags);
    public static bool BCryptVerifySignature(SafeKeyHandle key, Byte[] hash, Byte[] signature, IntPtr paddingInfo, BCryptSignHashFlags flags);
    private static IntPtr ArrayOrOriginalNull(ArraySegment`1<byte> buffer, IntPtr pointer);
    private static IntPtr ArrayOrOriginalNull(ArraySegment`1<byte> buffer, Span`1<byte> pointer);
    private static IntPtr ArrayOrOriginalNull(ArraySegment`1<byte> buffer, Byte[] pointer);
}
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
