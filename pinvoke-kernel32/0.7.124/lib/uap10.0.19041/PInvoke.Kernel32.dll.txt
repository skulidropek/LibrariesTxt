public class Microsoft.Win32.SafeHandles.SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
public static class PInvoke.Kernel32 : object {
    public static int MAX_MODULE_NAME32;
    public static int MAX_PATH;
    public static IntPtr INVALID_HANDLE_VALUE;
    private static string api_ms_win_core_localization_l1_2_0;
    private static string api_ms_win_core_processthreads_l1_1_1;
    private static string api_ms_win_core_io_l1_1_1;
    private static string api_ms_win_core_file_l1_2_0;
    private static string api_ms_win_core_synch_l1_2_0;
    private static string api_ms_win_core_handle_l1_1_0;
    private static string api_ms_win_core_console_l1_1_0;
    private static string api_ms_win_core_console_l2_1_0;
    private static string api_ms_win_core_psapi_l1_1_0;
    private static string api_ms_win_core_namedpipe_l1_2_0;
    private static string api_ms_win_core_libraryloader_l1_1_1;
    private static string api_ms_win_core_sysinfo_l1_2_1;
    private static string api_ms_win_core_sysinfo_l1_2_0;
    private static string api_ms_win_core_errorhandling_l1_1_1;
    private static Kernel32();
    public static SafeFindFilesHandle FindFirstFileEx(string lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, WIN32_FIND_DATA& lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, Void* lpSearchFilter, FindFirstFileExFlags dwAdditionalFlags);
    public static int FormatMessage(FormatMessageFlags dwFlags, Void* lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr[] Arguments);
    public static int GetCurrentThreadId();
    public static int GetCurrentProcessId();
    public static int GetProcessId(IntPtr Process);
    public static SafeObjectHandle GetCurrentProcess();
    public static bool CancelIoEx(SafeObjectHandle hFile, OVERLAPPED* lpOverlapped);
    public static bool ReadFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToRead, Int32* lpNumberOfBytesRead, OVERLAPPED* lpOverlapped);
    public static bool WriteFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToWrite, Int32* lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped);
    public static bool SetFilePointerEx(SafeObjectHandle hFile, long liDistanceToMove, Int64& lpNewFilePointer, SeekOrigin dwMoveMethod);
    public static int SetFilePointer(SafeObjectHandle hFile, int lDistanceToMove, Int32* lpDistanceToMoveHigh, SeekOrigin dwMoveMethod);
    public static int SuspendThread(SafeObjectHandle hThread);
    public static int ResumeThread(SafeObjectHandle hThread);
    public static WaitForSingleObjectResult WaitForSingleObject(SafeHandle hHandle, int dwMilliseconds);
    public static bool CloseHandle(IntPtr hObject);
    public static bool DeviceIoControl(SafeObjectHandle hDevice, int dwIoControlCode, Void* inBuffer, int nInBufferSize, Void* outBuffer, int nOutBufferSize, Int32& pBytesReturned, OVERLAPPED* lpOverlapped);
    public static bool FlushFileBuffers(SafeObjectHandle hFile);
    public static SafeObjectHandle CreateMutex(SECURITY_ATTRIBUTES* lpMutexAttributes, bool bInitialOwner, string lpName);
    public static IntPtr GetProcAddress(SafeLibraryHandle hModule, string procName);
    public static UInt32 GetTickCount();
    public static ulong GetTickCount64();
    public static void GetSystemTime(SYSTEMTIME* lpSystemTime);
    public static void SetLastError(UInt32 dwErrCode);
    public static long VerSetConditionMask(long ConditionMask, VER_MASK TypeMask, VER_CONDITION Condition);
    public static NTSTATUS VerifyVersionInfo(OSVERSIONINFOEX* lpVersionInformation, VER_MASK dwTypeMask, long dwlConditionMask);
    public static bool FileTimeToSystemTime(FILETIME* lpFileTime, SYSTEMTIME* lpSystemTime);
    public static bool SystemTimeToFileTime(SYSTEMTIME* lpSystemTime, FILETIME* lpFileTime);
    public static int CompareFileTime(FILETIME* lpFileTime1, FILETIME* lpFileTime2);
    public static ErrorModes SetErrorMode(ErrorModes uMode);
    public static bool GetVolumeInformation(string lpRootPathName, Char* lpVolumeNameBuffer, int nVolumeNameSize, UInt32& lpVolumeSerialNumber, Int32& lpMaximumComponentLength, FileSystemFlags& lpFileSystemFlags, Char* lpFileSystemNameBuffer, int nFileSystemNameSize);
    public static bool FlushInstructionCache(SafeObjectHandle hProcess, Void* lpcBaseAddress, UIntPtr dwSize);
    public static void FlushProcessWriteBuffers();
    public static UInt32 GetCurrentProcessorNumber();
    public static void GetCurrentProcessorNumberEx(PROCESSOR_NUMBER* ProcNumber);
    public static SafeObjectHandle GetCurrentThread();
    public static void GetCurrentThreadStackLimits(UIntPtr& LowLimit, UIntPtr& HighLimit);
    public static ProcessPriorityClass GetPriorityClass(SafeObjectHandle hProcess);
    public static void GetNativeSystemInfo(SYSTEM_INFO* lpSystemInfo);
    public static bool GetProcessInformation(SafeObjectHandle hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, Void* ProcessInformation, UInt32 ProcessInformationSize);
    public static bool SetProcessInformation(SafeObjectHandle hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, Void* ProcessInformation, UInt32 ProcessInformationSize);
    private static bool FindClose(IntPtr hFindFile);
    private static bool FreeLibrary(IntPtr hModule);
    public static string FormatMessage(FormatMessageFlags dwFlags, Void* lpSource, int dwMessageId, int dwLanguageId, IntPtr[] Arguments, int maxAllowedBufferSize);
    public static Win32ErrorCode GetLastError();
    public static int WriteFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToWrite);
    public static int WriteFile(SafeObjectHandle hFile, ArraySegment`1<byte> lpBuffer);
    public static int ReadFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToRead);
    public static int ReadFile(SafeObjectHandle hFile, ArraySegment`1<byte> lpBuffer);
    public static ArraySegment`1<byte> ReadFile(SafeObjectHandle hFile, int nNumberOfBytesToRead);
    public static bool CancelIoEx(SafeObjectHandle hFile, NativeOverlapped* lpOverlapped);
    public static bool ReadFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToRead, Int32* lpNumberOfBytesRead, NativeOverlapped* lpOverlapped);
    public static bool WriteFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToWrite, Int32* lpNumberOfBytesWritten, NativeOverlapped* lpOverlapped);
    public static bool DeviceIoControl(SafeObjectHandle hDevice, int dwIoControlCode, Void* inBuffer, int nInBufferSize, Void* outBuffer, int nOutBufferSize, Int32& pBytesReturned, NativeOverlapped* lpOverlapped);
    private static bool TryGetErrorMessage(FormatMessageFlags flags, Void* source, int messageId, int languageId, StringBuilder sb, IntPtr[] arguments, String& errorMsg);
    public static SafeFindFilesHandle FindFirstFileEx(string lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, WIN32_FIND_DATA& lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, IntPtr lpSearchFilter, FindFirstFileExFlags dwAdditionalFlags);
    public static int FormatMessage(FormatMessageFlags dwFlags, IntPtr lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr[] Arguments);
    public static bool CancelIoEx(SafeObjectHandle hFile, IntPtr lpOverlapped);
    public static bool ReadFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToRead, IntPtr lpNumberOfBytesRead, IntPtr lpOverlapped);
    public static bool ReadFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToRead, Nullable`1& lpNumberOfBytesRead, IntPtr lpOverlapped);
    public static bool ReadFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToRead, Nullable`1& lpNumberOfBytesRead, OVERLAPPED* lpOverlapped);
    public static bool WriteFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToWrite, IntPtr lpNumberOfBytesWritten, IntPtr lpOverlapped);
    public static bool WriteFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToWrite, Nullable`1& lpNumberOfBytesWritten, IntPtr lpOverlapped);
    public static bool WriteFile(SafeObjectHandle hFile, Void* lpBuffer, int nNumberOfBytesToWrite, Nullable`1& lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped);
    public static int SetFilePointer(SafeObjectHandle hFile, int lDistanceToMove, IntPtr lpDistanceToMoveHigh, SeekOrigin dwMoveMethod);
    public static int SetFilePointer(SafeObjectHandle hFile, int lDistanceToMove, Nullable`1& lpDistanceToMoveHigh, SeekOrigin dwMoveMethod);
    public static bool DeviceIoControl(SafeObjectHandle hDevice, int dwIoControlCode, IntPtr inBuffer, int nInBufferSize, IntPtr outBuffer, int nOutBufferSize, Int32& pBytesReturned, IntPtr lpOverlapped);
    public static SafeObjectHandle CreateMutex(IntPtr lpMutexAttributes, bool bInitialOwner, string lpName);
    public static SafeObjectHandle CreateMutex(Nullable`1<SECURITY_ATTRIBUTES> lpMutexAttributes, bool bInitialOwner, string lpName);
    public static void GetSystemTime(IntPtr lpSystemTime);
    public static void GetSystemTime(SYSTEMTIME& lpSystemTime);
    public static NTSTATUS VerifyVersionInfo(IntPtr lpVersionInformation, VER_MASK dwTypeMask, long dwlConditionMask);
    public static NTSTATUS VerifyVersionInfo(OSVERSIONINFOEX& lpVersionInformation, VER_MASK dwTypeMask, long dwlConditionMask);
    public static bool FileTimeToSystemTime(IntPtr lpFileTime, IntPtr lpSystemTime);
    public static bool FileTimeToSystemTime(FILETIME lpFileTime, SYSTEMTIME& lpSystemTime);
    public static bool SystemTimeToFileTime(IntPtr lpSystemTime, IntPtr lpFileTime);
    public static bool SystemTimeToFileTime(SYSTEMTIME lpSystemTime, FILETIME& lpFileTime);
    public static int CompareFileTime(IntPtr lpFileTime1, IntPtr lpFileTime2);
    public static int CompareFileTime(FILETIME lpFileTime1, FILETIME lpFileTime2);
    public static bool GetVolumeInformation(string lpRootPathName, IntPtr lpVolumeNameBuffer, int nVolumeNameSize, UInt32& lpVolumeSerialNumber, Int32& lpMaximumComponentLength, FileSystemFlags& lpFileSystemFlags, IntPtr lpFileSystemNameBuffer, int nFileSystemNameSize);
    public static bool GetVolumeInformation(string lpRootPathName, Span`1<char> lpVolumeNameBuffer, UInt32& lpVolumeSerialNumber, Int32& lpMaximumComponentLength, FileSystemFlags& lpFileSystemFlags, Span`1<char> lpFileSystemNameBuffer);
    public static bool GetVolumeInformation(string lpRootPathName, Char[] lpVolumeNameBuffer, int nVolumeNameSize, UInt32& lpVolumeSerialNumber, Int32& lpMaximumComponentLength, FileSystemFlags& lpFileSystemFlags, Char[] lpFileSystemNameBuffer, int nFileSystemNameSize);
    public static bool FlushInstructionCache(SafeObjectHandle hProcess, IntPtr lpcBaseAddress, UIntPtr dwSize);
    public static void GetCurrentProcessorNumberEx(IntPtr ProcNumber);
    public static void GetCurrentProcessorNumberEx(PROCESSOR_NUMBER& ProcNumber);
    public static void GetNativeSystemInfo(IntPtr lpSystemInfo);
    public static void GetNativeSystemInfo(SYSTEM_INFO& lpSystemInfo);
    public static bool GetProcessInformation(SafeObjectHandle hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, IntPtr ProcessInformation, UInt32 ProcessInformationSize);
    public static bool SetProcessInformation(SafeObjectHandle hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, IntPtr ProcessInformation, UInt32 ProcessInformationSize);
    public static string FormatMessage(FormatMessageFlags dwFlags, IntPtr lpSource, int dwMessageId, int dwLanguageId, IntPtr[] Arguments, int maxAllowedBufferSize);
    public static int WriteFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToWrite);
    public static int ReadFile(SafeObjectHandle hFile, IntPtr lpBuffer, int nNumberOfBytesToRead);
    private static bool TryGetErrorMessage(FormatMessageFlags flags, IntPtr source, int messageId, int languageId, StringBuilder sb, IntPtr[] arguments, String& errorMsg);
}
[ExtensionAttribute]
public static class PInvoke.Kernel32Extensions : object {
    private static int MaxAllowedBufferSize;
    [ExtensionAttribute]
public static string GetMessage(Win32ErrorCode error);
    [ExtensionAttribute]
public static void ThrowOnError(Win32ErrorCode errorCode);
    [ExtensionAttribute]
public static void ThrowOnError(NTSTATUS status);
}
public class PInvoke.NTStatusException : Exception {
    [CompilerGeneratedAttribute]
private NTSTATUS <NativeErrorCode>k__BackingField;
    public NTSTATUS NativeErrorCode { get; }
    public NTStatusException(NTSTATUS statusCode);
    public NTStatusException(NTSTATUS statusCode, string message);
    public NTStatusException(NTSTATUS statusCode, string message, Exception inner);
    [CompilerGeneratedAttribute]
public NTSTATUS get_NativeErrorCode();
    private static string GetMessage(NTSTATUS status);
    private static string GetSeverityString(NTSTATUS status);
}
public class PInvoke.Win32Exception : Win32Exception {
    public Win32ErrorCode NativeErrorCode { get; }
    public Win32Exception(Win32ErrorCode error);
    public Win32Exception(int error);
    public Win32Exception(Win32ErrorCode error, string message);
    public Win32ErrorCode get_NativeErrorCode();
}
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
