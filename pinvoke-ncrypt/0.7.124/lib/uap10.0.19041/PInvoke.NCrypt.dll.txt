public static class PInvoke.NCrypt : object {
    public static SECURITY_STATUS NCryptOpenStorageProvider(SafeProviderHandle& phProvider, string pszProviderName, NCryptOpenStorageProviderFlags dwFlags);
    public static SECURITY_STATUS NCryptCreatePersistedKey(SafeProviderHandle hProvider, SafeKeyHandle& phKey, string pszAlgId, string pszKeyName, LegacyKeySpec dwLegacyKeySpec, NCryptCreatePersistedKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptOpenKey(SafeProviderHandle hProvider, SafeKeyHandle& phKey, string pszKeyName, LegacyKeySpec dwLegacyKeySpec, NCryptOpenKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptDeleteKey(SafeKeyHandle hKey, NCryptDeleteKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptSecretAgreement(SafeKeyHandle hPrivKey, SafeKeyHandle hPubKey, SafeSecretHandle& phSecret, NCryptSecretAgreementFlags dwFlags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, NCryptBufferDesc* pParameterList, Byte* pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, NCryptBufferDesc* pParameterList, Byte* pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptEnumAlgorithms(SafeProviderHandle hProvider, AlgorithmOperations dwAlgOperations, Int32& pdwAlgCount, NCryptAlgorithmName*& ppAlgList, NCryptEnumAlgorithmsFlags dwFlags);
    public static SECURITY_STATUS NCryptEnumKeys(SafeProviderHandle hProvider, string pszScope, NCryptKeyName*& ppKeyName, Void*& ppEnumState, NCryptEnumKeysFlags dwFlags);
    public static SECURITY_STATUS NCryptIsAlgSupported(SafeProviderHandle hProvider, string pszAlgId, NCryptIsAlgSupportedFlags dwFlags);
    public static SECURITY_STATUS NCryptFinalizeKey(SafeKeyHandle hKey, NCryptFinalizeKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, NCryptBufferDesc* pParameterList, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, NCryptBufferDesc* pParameterList, SafeKeyHandle& phKey, Byte* pbData, int cbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptGetProperty(SafeHandle hObject, string pszProperty, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptGetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptSetProperty(SafeHandle hObject, string pszProperty, Byte* pbInput, int cbInput, NCryptSetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptSetProperty(SafeHandle hObject, string pszProperty, string pbInput, int cbInput, NCryptSetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, Byte* pbInput, int cbInput, Void* pPaddingInfo, Byte* pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, Byte* pbInput, int cbInput, Void* pPaddingInfo, Byte* pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, Byte* pbHashValue, int cbHashValue, Byte* pbSignature, int cbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, Byte* pbHashValue, int cbHashValue, Byte* pbSignature, int cbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptFreeBuffer(Void* pvInput);
    private static SECURITY_STATUS NCryptFreeObject(IntPtr hObject);
    public static SafeProviderHandle NCryptOpenStorageProvider(string providerName, NCryptOpenStorageProviderFlags flags);
    public static SafeKeyHandle NCryptCreatePersistedKey(SafeProviderHandle provider, string algorithmId, string keyName, LegacyKeySpec legacyKeySpec, NCryptCreatePersistedKeyFlags flags);
    public static SafeKeyHandle NCryptOpenKey(SafeProviderHandle provider, string keyName, LegacyKeySpec legacyKeySpec, NCryptOpenKeyFlags flags);
    public static SafeKeyHandle NCryptOpenKey(SafeProviderHandle provider, NCryptKeyName keyName);
    public static ArraySegment`1<byte> NCryptExportKey(SafeKeyHandle key, SafeKeyHandle exportKey, string blobType, NCryptBufferDesc* parameterList, NCryptExportKeyFlags flags);
    public static SafeKeyHandle NCryptImportKey(SafeProviderHandle provider, SafeKeyHandle importKey, string blobType, NCryptBufferDesc* parameterList, Byte[] keyData, NCryptExportKeyFlags flags);
    public static Byte[] NCryptGetProperty(SafeHandle hObject, string propertyName, NCryptGetPropertyFlags flags);
    public static T NCryptGetProperty(SafeHandle hObject, string propertyName, NCryptGetPropertyFlags flags);
    public static void NCryptSetProperty(SafeHandle hObject, string propertyName, string propertyValue);
    public static void NCryptSetProperty(SafeHandle hObject, string propertyName, T propertyValue, NCryptSetPropertyFlags flags);
    public static ArraySegment`1<byte> NCryptEncrypt(SafeKeyHandle key, Byte[] plaintext, Void* paddingInfo, NCryptEncryptFlags flags);
    public static ArraySegment`1<byte> NCryptDecrypt(SafeKeyHandle key, Byte[] ciphertext, Void* paddingInfo, NCryptEncryptFlags flags);
    public static ArraySegment`1<byte> NCryptSignHash(SafeKeyHandle key, Void* paddingInfo, Byte[] hashValue, NCryptSignHashFlags flags);
    public static bool NCryptVerifySignature(SafeKeyHandle key, Void* paddingInfo, Byte[] hashValue, Byte[] signature, NCryptSignHashFlags flags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, IntPtr pParameterList, IntPtr pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, IntPtr pParameterList, Span`1<byte> pbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, IntPtr pParameterList, Byte[] pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, NCryptBufferDesc* pParameterList, Span`1<byte> pbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptKeyDerivation(SafeKeyHandle hKey, NCryptBufferDesc* pParameterList, Byte[] pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptKeyDerivationFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, IntPtr pParameterList, IntPtr pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, IntPtr pParameterList, Span`1<byte> pbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, IntPtr pParameterList, Byte[] pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, NCryptBufferDesc* pParameterList, Span`1<byte> pbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptDeriveKey(SafeSecretHandle hSharedSecret, string pwszKDF, NCryptBufferDesc* pParameterList, Byte[] pbDerivedKey, int cbDerivedKey, Int32& pcbResult, NCryptDeriveKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptEnumAlgorithms(SafeProviderHandle hProvider, AlgorithmOperations dwAlgOperations, Int32& pdwAlgCount, IntPtr& ppAlgList, NCryptEnumAlgorithmsFlags dwFlags);
    public static SECURITY_STATUS NCryptEnumKeys(SafeProviderHandle hProvider, string pszScope, IntPtr& ppKeyName, IntPtr& ppEnumState, NCryptEnumKeysFlags dwFlags);
    public static SECURITY_STATUS NCryptExportKey(SafeKeyHandle hKey, SafeKeyHandle hExportKey, string pszBlobType, IntPtr pParameterList, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, IntPtr pParameterList, SafeKeyHandle& phKey, IntPtr pbData, int cbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, IntPtr pParameterList, SafeKeyHandle& phKey, ReadOnlySpan`1<byte> pbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, IntPtr pParameterList, SafeKeyHandle& phKey, Byte[] pbData, int cbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, NCryptBufferDesc* pParameterList, SafeKeyHandle& phKey, ReadOnlySpan`1<byte> pbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptImportKey(SafeProviderHandle hProvider, SafeKeyHandle hImportKey, string pszBlobType, NCryptBufferDesc* pParameterList, SafeKeyHandle& phKey, Byte[] pbData, int cbData, NCryptExportKeyFlags dwFlags);
    public static SECURITY_STATUS NCryptSetProperty(SafeHandle hObject, string pszProperty, IntPtr pbInput, int cbInput, NCryptSetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptSetProperty(SafeHandle hObject, string pszProperty, ReadOnlySpan`1<byte> pbInput, NCryptSetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptSetProperty(SafeHandle hObject, string pszProperty, Byte[] pbInput, int cbInput, NCryptSetPropertyFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, IntPtr pbInput, int cbInput, IntPtr pPaddingInfo, IntPtr pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, IntPtr pPaddingInfo, Span`1<byte> pbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, IntPtr pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, Void* pPaddingInfo, Span`1<byte> pbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptEncrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, Void* pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, IntPtr pbInput, int cbInput, IntPtr pPaddingInfo, IntPtr pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, IntPtr pPaddingInfo, Span`1<byte> pbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, IntPtr pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, ReadOnlySpan`1<byte> pbInput, Void* pPaddingInfo, Span`1<byte> pbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptDecrypt(SafeKeyHandle hKey, Byte[] pbInput, int cbInput, Void* pPaddingInfo, Byte[] pbOutput, int cbOutput, Int32& pcbResult, NCryptEncryptFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, IntPtr pbHashValue, int cbHashValue, IntPtr pbSignature, int cbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbHashValue, Span`1<byte> pbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, IntPtr pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbHashValue, Span`1<byte> pbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptSignHash(SafeKeyHandle hKey, Void* pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, Int32& pcbResult, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, IntPtr pbHashValue, int cbHashValue, IntPtr pbSignature, int cbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, ReadOnlySpan`1<byte> pbHashValue, ReadOnlySpan`1<byte> pbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, IntPtr pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, ReadOnlySpan`1<byte> pbHashValue, ReadOnlySpan`1<byte> pbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptVerifySignature(SafeKeyHandle hKey, Void* pPaddingInfo, Byte[] pbHashValue, int cbHashValue, Byte[] pbSignature, int cbSignature, NCryptSignHashFlags dwFlags);
    public static SECURITY_STATUS NCryptFreeBuffer(IntPtr pvInput);
    public static ArraySegment`1<byte> NCryptExportKey(SafeKeyHandle key, SafeKeyHandle exportKey, string blobType, IntPtr parameterList, NCryptExportKeyFlags flags);
    public static SafeKeyHandle NCryptImportKey(SafeProviderHandle provider, SafeKeyHandle importKey, string blobType, IntPtr parameterList, Byte[] keyData, NCryptExportKeyFlags flags);
    public static ArraySegment`1<byte> NCryptEncrypt(SafeKeyHandle key, Byte[] plaintext, IntPtr paddingInfo, NCryptEncryptFlags flags);
    public static ArraySegment`1<byte> NCryptDecrypt(SafeKeyHandle key, Byte[] ciphertext, IntPtr paddingInfo, NCryptEncryptFlags flags);
    public static ArraySegment`1<byte> NCryptSignHash(SafeKeyHandle key, IntPtr paddingInfo, Byte[] hashValue, NCryptSignHashFlags flags);
    public static bool NCryptVerifySignature(SafeKeyHandle key, IntPtr paddingInfo, Byte[] hashValue, Byte[] signature, NCryptSignHashFlags flags);
}
[ExtensionAttribute]
public static class PInvoke.NCryptExtensions : object {
    private static int MaxAllowedBufferSize;
    [ExtensionAttribute]
public static void ThrowOnError(SECURITY_STATUS status);
    [ExtensionAttribute]
public static string GetMessage(SECURITY_STATUS error);
}
public class PInvoke.SecurityStatusException : Exception {
    [CompilerGeneratedAttribute]
private SECURITY_STATUS <NativeErrorCode>k__BackingField;
    public SECURITY_STATUS NativeErrorCode { get; }
    public SecurityStatusException(SECURITY_STATUS status);
    public SecurityStatusException(SECURITY_STATUS status, string message);
    public SecurityStatusException(SECURITY_STATUS status, string message, Exception inner);
    [CompilerGeneratedAttribute]
public SECURITY_STATUS get_NativeErrorCode();
    private static string GetMessage(SECURITY_STATUS status);
    private static string GetSeverityString(SECURITY_STATUS status);
}
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
