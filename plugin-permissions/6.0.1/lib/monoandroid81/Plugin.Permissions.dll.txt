public interface Plugin.Permissions.Abstractions.IPermissions {
    public abstract virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public abstract virtual Task`1<PermissionStatus> RequestPermissionAsync();
    public abstract virtual Task`1<bool> ShouldShowRequestPermissionRationaleAsync(Permission permission);
    [ObsoleteAttribute("CheckPermissionStatusAsync is deprecated, please use CheckPermissionStatusAsync<T> instead.")]
public abstract virtual Task`1<PermissionStatus> CheckPermissionStatusAsync(Permission permission);
    [ObsoleteAttribute("RequestPermissionsAsync is deprecated, please use RequestPermissionAsync<T> instead.")]
public abstract virtual Task`1<Dictionary`2<Permission, PermissionStatus>> RequestPermissionsAsync(Permission[] permissions);
    public abstract virtual bool OpenAppSettings();
}
public enum Plugin.Permissions.Abstractions.Permission : Enum {
    public int value__;
    public static Permission Unknown;
    public static Permission Calendar;
    public static Permission Camera;
    public static Permission Contacts;
    public static Permission Location;
    public static Permission Microphone;
    public static Permission Phone;
    public static Permission Photos;
    public static Permission Reminders;
    public static Permission Sensors;
    public static Permission Sms;
    public static Permission Storage;
    public static Permission Speech;
    public static Permission LocationAlways;
    public static Permission LocationWhenInUse;
    public static Permission MediaLibrary;
}
public enum Plugin.Permissions.Abstractions.PermissionStatus : Enum {
    public int value__;
    public static PermissionStatus Denied;
    public static PermissionStatus Disabled;
    public static PermissionStatus Granted;
    public static PermissionStatus Restricted;
    public static PermissionStatus Unknown;
}
public class Plugin.Permissions.BasePermission : object {
    protected Permission permission;
    public BasePermission(Permission permission);
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    [AsyncStateMachineAttribute("Plugin.Permissions.BasePermission/<RequestPermissionAsync>d__3")]
public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.CalendarPermission : BasePermission {
}
public class Plugin.Permissions.CameraPermission : BasePermission {
}
public class Plugin.Permissions.ContactsPermission : BasePermission {
}
public static class Plugin.Permissions.CrossPermissions : object {
    private static Lazy`1<IPermissions> implementation;
    public static bool IsSupported { get; }
    public static IPermissions Current { get; }
    private static CrossPermissions();
    public static bool get_IsSupported();
    public static IPermissions get_Current();
    private static IPermissions CreatePermissions();
    internal static Exception NotImplementedInReferenceAssembly();
}
public class Plugin.Permissions.LocationAlwaysPermission : BasePermission {
}
public class Plugin.Permissions.LocationPermission : BasePermission {
}
public class Plugin.Permissions.LocationWhenInUsePermission : BasePermission {
}
public class Plugin.Permissions.MediaLibraryPermission : BasePermission {
}
public class Plugin.Permissions.MicrophonePermission : BasePermission {
}
public class Plugin.Permissions.PermissionsImplementation : object {
    private object locker;
    private TaskCompletionSource`1<Dictionary`2<Permission, PermissionStatus>> tcs;
    private Dictionary`2<Permission, PermissionStatus> results;
    private IList`1<string> requestedPermissions;
    private static int permissioncode;
    public static PermissionsImplementation Current { get; }
    public static PermissionsImplementation get_Current();
    public sealed virtual Task`1<bool> ShouldShowRequestPermissionRationaleAsync(Permission permission);
    public sealed virtual Task`1<PermissionStatus> CheckPermissionStatusAsync(Permission permission);
    [AsyncStateMachineAttribute("Plugin.Permissions.PermissionsImplementation/<RequestPermissionsAsync>d__8")]
public sealed virtual Task`1<Dictionary`2<Permission, PermissionStatus>> RequestPermissionsAsync(Permission[] permissions);
    public void OnRequestPermissionsResult(int requestCode, String[] permissions, Permission[] grantResults);
    private static Permission GetPermissionForManifestName(string permission);
    private List`1<string> GetManifestNames(Permission permission);
    private Context GetContext();
    private bool HasPermissionInManifest(string permission);
    public sealed virtual bool OpenAppSettings();
    public sealed virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public sealed virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.PhonePermission : BasePermission {
}
public class Plugin.Permissions.PhotosPermission : BasePermission {
}
public class Plugin.Permissions.RemindersPermission : BasePermission {
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class Plugin.Permissions.Resource : object {
    private static Resource();
}
public class Plugin.Permissions.SensorsPermission : BasePermission {
}
public class Plugin.Permissions.SmsPermission : BasePermission {
}
public class Plugin.Permissions.SpeechPermission : BasePermission {
}
public class Plugin.Permissions.StoragePermission : BasePermission {
}
