public interface Plugin.Permissions.Abstractions.IPermissions {
    public abstract virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public abstract virtual Task`1<PermissionStatus> RequestPermissionAsync();
    public abstract virtual Task`1<bool> ShouldShowRequestPermissionRationaleAsync(Permission permission);
    [ObsoleteAttribute("CheckPermissionStatusAsync is deprecated, please use CheckPermissionStatusAsync<T> instead.")]
public abstract virtual Task`1<PermissionStatus> CheckPermissionStatusAsync(Permission permission);
    [ObsoleteAttribute("RequestPermissionsAsync is deprecated, please use RequestPermissionAsync<T> instead.")]
public abstract virtual Task`1<Dictionary`2<Permission, PermissionStatus>> RequestPermissionsAsync(Permission[] permissions);
    public abstract virtual bool OpenAppSettings();
}
public enum Plugin.Permissions.Abstractions.Permission : Enum {
    public int value__;
    public static Permission Unknown;
    public static Permission Calendar;
    public static Permission Camera;
    public static Permission Contacts;
    public static Permission Location;
    public static Permission Microphone;
    public static Permission Phone;
    public static Permission Photos;
    public static Permission Reminders;
    public static Permission Sensors;
    public static Permission Sms;
    public static Permission Storage;
    public static Permission Speech;
    public static Permission LocationAlways;
    public static Permission LocationWhenInUse;
    public static Permission MediaLibrary;
}
public enum Plugin.Permissions.Abstractions.PermissionStatus : Enum {
    public int value__;
    public static PermissionStatus Denied;
    public static PermissionStatus Disabled;
    public static PermissionStatus Granted;
    public static PermissionStatus Restricted;
    public static PermissionStatus Unknown;
}
public class Plugin.Permissions.BasePermission : object {
    protected Permission permission;
    public BasePermission(Permission permission);
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    [AsyncStateMachineAttribute("Plugin.Permissions.BasePermission/<RequestPermissionAsync>d__3")]
public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.CalendarPermission : BasePermission {
}
public class Plugin.Permissions.CameraPermission : BasePermission {
}
public class Plugin.Permissions.ContactsPermission : BasePermission {
}
public static class Plugin.Permissions.CrossPermissions : object {
    private static Lazy`1<IPermissions> implementation;
    public static bool IsSupported { get; }
    public static IPermissions Current { get; }
    private static CrossPermissions();
    public static bool get_IsSupported();
    public static IPermissions get_Current();
    private static IPermissions CreatePermissions();
    internal static Exception NotImplementedInReferenceAssembly();
}
public class Plugin.Permissions.LocationAlwaysPermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.LocationPermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.LocationWhenInUsePermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.MediaLibraryPermission : BasePermission {
}
public class Plugin.Permissions.MicrophonePermission : BasePermission {
}
public class Plugin.Permissions.PermissionsImplementation : object {
    internal static CLLocationManager locationManager;
    [CompilerGeneratedAttribute]
private static TimeSpan <LocationPermissionTimeout>k__BackingField;
    public static PermissionsImplementation Current { get; }
    internal static PermissionStatus ContactsPermissionStatus { get; }
    public static TimeSpan LocationPermissionTimeout { get; public set; }
    internal static PermissionStatus PhotosPermissionStatus { get; }
    internal static PermissionStatus SensorsPermissionStatus { get; }
    internal static PermissionStatus SpeechPermissionStatus { get; }
    internal static PermissionStatus MediaLibraryPermissionStatus { get; }
    private static PermissionsImplementation();
    public static PermissionsImplementation get_Current();
    public sealed virtual Task`1<bool> ShouldShowRequestPermissionRationaleAsync(Permission permission);
    public sealed virtual Task`1<PermissionStatus> CheckPermissionStatusAsync(Permission permission);
    [AsyncStateMachineAttribute("Plugin.Permissions.PermissionsImplementation/<RequestPermissionsAsync>d__4")]
public sealed virtual Task`1<Dictionary`2<Permission, PermissionStatus>> RequestPermissionsAsync(Permission[] permissions);
    [AsyncStateMachineAttribute("Plugin.Permissions.PermissionsImplementation/<RequestAVPermissionStatusAsync>d__5")]
internal static Task`1<PermissionStatus> RequestAVPermissionStatusAsync(NSString mediaType);
    internal static PermissionStatus GetAVPermissionStatus(NSString mediaType);
    internal static PermissionStatus get_ContactsPermissionStatus();
    internal static Task`1<PermissionStatus> RequestContactsPermission();
    [CompilerGeneratedAttribute]
public static TimeSpan get_LocationPermissionTimeout();
    [CompilerGeneratedAttribute]
public static void set_LocationPermissionTimeout(TimeSpan value);
    internal static Task`1<PermissionStatus> RequestLocationPermission(Permission permission);
    [AsyncStateMachineAttribute("Plugin.Permissions.PermissionsImplementation/<WithTimeout>d__16`1")]
internal static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeSpan);
    internal static PermissionStatus GetLocationPermissionStatus(Permission permission);
    internal static PermissionStatus get_PhotosPermissionStatus();
    internal static Task`1<PermissionStatus> RequestPhotosPermission();
    internal static PermissionStatus get_SensorsPermissionStatus();
    [AsyncStateMachineAttribute("Plugin.Permissions.PermissionsImplementation/<RequestSensorsPermission>d__23")]
internal static Task`1<PermissionStatus> RequestSensorsPermission();
    internal static Task`1<PermissionStatus> RequestSpeechPermission();
    internal static PermissionStatus get_SpeechPermissionStatus();
    internal static PermissionStatus get_MediaLibraryPermissionStatus();
    internal static Task`1<PermissionStatus> RequestMediaLibraryPermission();
    public sealed virtual bool OpenAppSettings();
    public sealed virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public sealed virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.PhonePermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.PhotosPermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
public class Plugin.Permissions.RemindersPermission : BasePermission {
}
public class Plugin.Permissions.SensorsPermission : BasePermission {
}
public class Plugin.Permissions.SmsPermission : BasePermission {
}
public class Plugin.Permissions.SpeechPermission : BasePermission {
}
public class Plugin.Permissions.StoragePermission : BasePermission {
    public virtual Task`1<PermissionStatus> CheckPermissionStatusAsync();
    public virtual Task`1<PermissionStatus> RequestPermissionAsync();
}
