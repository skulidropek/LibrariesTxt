[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.CircuitBreaker.AdvancedCircuitBehavior : CircuitBehavior {
    private HealthMetrics _metrics;
    private double _failureRatio;
    private int _minimumThroughput;
    public int FailureCount { get; }
    public double FailureRate { get; }
    public AdvancedCircuitBehavior(double failureRatio, int minimumThroughput, HealthMetrics metrics);
    public virtual void OnActionSuccess(CircuitState currentState);
    public virtual void OnActionFailure(CircuitState currentState, Boolean& shouldBreak);
    public virtual void OnCircuitClosed();
    public virtual int get_FailureCount();
    public virtual double get_FailureRate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.CircuitBreaker.BreakDurationGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private double <FailureRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HalfOpenAttempts>k__BackingField;
    public double FailureRate { get; }
    public int FailureCount { get; }
    public ResilienceContext Context { get; }
    public int HalfOpenAttempts { get; }
    [EditorBrowsableAttribute("1")]
public BreakDurationGeneratorArguments(double failureRate, int failureCount, ResilienceContext context);
    public BreakDurationGeneratorArguments(double failureRate, int failureCount, ResilienceContext context, int halfOpenAttempts);
    [CompilerGeneratedAttribute]
public double get_FailureRate();
    [CompilerGeneratedAttribute]
public int get_FailureCount();
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public int get_HalfOpenAttempts();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.CircuitBreaker.BrokenCircuitException : ExecutionRejectedException {
    internal static string DefaultMessage;
    public BrokenCircuitException(string message);
    public BrokenCircuitException(string message, Exception inner);
}
internal abstract class Polly.CircuitBreaker.CircuitBehavior : object {
    public int FailureCount { get; }
    public double FailureRate { get; }
    public abstract virtual void OnActionSuccess(CircuitState currentState);
    public abstract virtual void OnActionFailure(CircuitState currentState, Boolean& shouldBreak);
    public abstract virtual void OnCircuitClosed();
    public abstract virtual int get_FailureCount();
    public abstract virtual double get_FailureRate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.CircuitBreaker.CircuitBreakerConstants : object {
    public static string DefaultName;
    public static string OnCircuitClosed;
    public static string OnHalfOpenEvent;
    public static string OnCircuitOpened;
    public static double DefaultFailureRatio;
    public static int DefaultMinimumThroughput;
    public static int MinimumValidThroughput;
    public static TimeSpan DefaultBreakDuration;
    public static TimeSpan DefaultSamplingDuration;
    private static CircuitBreakerConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.CircuitBreaker.CircuitBreakerManualControl : object {
    private object _lock;
    private HashSet`1<Func`2<ResilienceContext, Task>> _onIsolate;
    private HashSet`1<Func`2<ResilienceContext, Task>> _onReset;
    private bool _isolated;
    internal bool IsEmpty { get; }
    public CircuitBreakerManualControl(bool isIsolated);
    internal bool get_IsEmpty();
    internal IDisposable Initialize(Func`2<ResilienceContext, Task> onIsolate, Func`2<ResilienceContext, Task> onReset);
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerManualControl/<IsolateAsync>d__9")]
internal Task IsolateAsync(ResilienceContext context);
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerManualControl/<IsolateAsync>d__10")]
public Task IsolateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerManualControl/<CloseAsync>d__11")]
internal Task CloseAsync(ResilienceContext context);
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerManualControl/<CloseAsync>d__12")]
public Task CloseAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.CircuitBreaker.CircuitBreakerPredicateArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public CircuitBreakerPredicateArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Polly.CircuitBreaker.CircuitBreakerResilienceStrategy`1 : ResilienceStrategy`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<CircuitBreakerPredicateArguments`1<T>, ValueTask`1<bool>> _handler;
    [NullableAttribute("1")]
private CircuitStateController`1<T> _controller;
    private IDisposable _manualControlRegistration;
    public CircuitBreakerResilienceStrategy`1(Func`2<CircuitBreakerPredicateArguments`1<T>, ValueTask`1<bool>> handler, CircuitStateController`1<T> controller, CircuitBreakerStateProvider stateProvider, CircuitBreakerManualControl manualControl);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerResilienceStrategy`1/<ExecuteCore>d__5`1")]
protected internal virtual ValueTask`1<Outcome`1<T>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
    [CompilerGeneratedAttribute]
private CircuitState <.ctor>b__3_0();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerResilienceStrategy`1/<<-ctor>b__3_1>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__3_1(ResilienceContext c);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitBreakerResilienceStrategy`1/<<-ctor>b__3_2>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__3_2(ResilienceContext c);
}
public class Polly.CircuitBreaker.CircuitBreakerStateProvider : object {
    [NullableAttribute("2")]
private Func`1<CircuitState> _circuitStateProvider;
    internal bool IsInitialized { get; }
    public CircuitState CircuitState { get; }
    [NullableContextAttribute("1")]
internal void Initialize(Func`1<CircuitState> circuitStateProvider);
    internal bool get_IsInitialized();
    public CircuitState get_CircuitState();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.CircuitBreaker.CircuitBreakerStrategyOptions : CircuitBreakerStrategyOptions`1<object> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.CircuitBreaker.CircuitBreakerStrategyOptions`1 : ResilienceStrategyOptions {
    [CompilerGeneratedAttribute]
private double <FailureRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SamplingDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BreakDuration>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> <BreakDurationGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<CircuitBreakerPredicateArguments`1<TResult>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnCircuitClosedArguments`1<TResult>, ValueTask> <OnClosed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnCircuitOpenedArguments`1<TResult>, ValueTask> <OnOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<OnCircuitHalfOpenedArguments, ValueTask> <OnHalfOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private CircuitBreakerManualControl <ManualControl>k__BackingField;
    [CompilerGeneratedAttribute]
private CircuitBreakerStateProvider <StateProvider>k__BackingField;
    [RangeAttribute("0", "1")]
public double FailureRatio { get; public set; }
    [RangeAttribute("2", "2147483647")]
public int MinimumThroughput { get; public set; }
    [RangeAttribute("System.TimeSpan", "00:00:00.500", "1.00:00:00")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
public TimeSpan SamplingDuration { get; public set; }
    [RangeAttribute("System.TimeSpan", "00:00:00.500", "1.00:00:00")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
public TimeSpan BreakDuration { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> BreakDurationGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<CircuitBreakerPredicateArguments`1<TResult>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnCircuitClosedArguments`1<TResult>, ValueTask> OnClosed { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnCircuitOpenedArguments`1<TResult>, ValueTask> OnOpened { get; public set; }
    public Func`2<OnCircuitHalfOpenedArguments, ValueTask> OnHalfOpened { get; public set; }
    public CircuitBreakerManualControl ManualControl { get; public set; }
    public CircuitBreakerStateProvider StateProvider { get; public set; }
    [CompilerGeneratedAttribute]
public double get_FailureRatio();
    [CompilerGeneratedAttribute]
public void set_FailureRatio(double value);
    [CompilerGeneratedAttribute]
public int get_MinimumThroughput();
    [CompilerGeneratedAttribute]
public void set_MinimumThroughput(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SamplingDuration();
    [CompilerGeneratedAttribute]
public void set_SamplingDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BreakDuration();
    [CompilerGeneratedAttribute]
public void set_BreakDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> get_BreakDurationGenerator();
    [CompilerGeneratedAttribute]
public void set_BreakDurationGenerator(Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> value);
    [CompilerGeneratedAttribute]
public Func`2<CircuitBreakerPredicateArguments`1<TResult>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public void set_ShouldHandle(Func`2<CircuitBreakerPredicateArguments`1<TResult>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnCircuitClosedArguments`1<TResult>, ValueTask> get_OnClosed();
    [CompilerGeneratedAttribute]
public void set_OnClosed(Func`2<OnCircuitClosedArguments`1<TResult>, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<OnCircuitOpenedArguments`1<TResult>, ValueTask> get_OnOpened();
    [CompilerGeneratedAttribute]
public void set_OnOpened(Func`2<OnCircuitOpenedArguments`1<TResult>, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<OnCircuitHalfOpenedArguments, ValueTask> get_OnHalfOpened();
    [CompilerGeneratedAttribute]
public void set_OnHalfOpened(Func`2<OnCircuitHalfOpenedArguments, ValueTask> value);
    [CompilerGeneratedAttribute]
public CircuitBreakerManualControl get_ManualControl();
    [CompilerGeneratedAttribute]
public void set_ManualControl(CircuitBreakerManualControl value);
    [CompilerGeneratedAttribute]
public CircuitBreakerStateProvider get_StateProvider();
    [CompilerGeneratedAttribute]
public void set_StateProvider(CircuitBreakerStateProvider value);
}
public enum Polly.CircuitBreaker.CircuitState : Enum {
    public int value__;
    public static CircuitState Closed;
    public static CircuitState Open;
    public static CircuitState HalfOpen;
    public static CircuitState Isolated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.CircuitBreaker.CircuitStateController`1 : object {
    private object _lock;
    private ScheduledTaskExecutor _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<OnCircuitOpenedArguments`1<T>, ValueTask> _onOpened;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<OnCircuitClosedArguments`1<T>, ValueTask> _onClosed;
    [NullableAttribute("2")]
private Func`2<OnCircuitHalfOpenedArguments, ValueTask> _onHalfOpen;
    private TimeProvider _timeProvider;
    private ResilienceStrategyTelemetry _telemetry;
    private CircuitBehavior _behavior;
    private TimeSpan _breakDuration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> _breakDurationGenerator;
    private DateTimeOffset _blockedUntil;
    private CircuitState _circuitState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<Outcome`1<T>> _lastOutcome;
    [NullableAttribute("2")]
private Exception _breakingException;
    private bool _disposed;
    private int _halfOpenAttempts;
    public CircuitState CircuitState { get; }
    [NullableAttribute("2")]
public Exception LastException { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Outcome`1<T>> LastHandledOutcome { get; }
    public CircuitStateController`1(TimeSpan breakDuration, Func`2<OnCircuitOpenedArguments`1<T>, ValueTask> onOpened, Func`2<OnCircuitClosedArguments`1<T>, ValueTask> onClosed, Func`2<OnCircuitHalfOpenedArguments, ValueTask> onHalfOpen, CircuitBehavior behavior, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry, Func`2<BreakDurationGeneratorArguments, ValueTask`1<TimeSpan>> breakDurationGenerator);
    public CircuitState get_CircuitState();
    [NullableContextAttribute("2")]
public Exception get_LastException();
    public Nullable`1<Outcome`1<T>> get_LastHandledOutcome();
    public ValueTask IsolateCircuitAsync(ResilienceContext context);
    public ValueTask CloseCircuitAsync(ResilienceContext context);
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitStateController`1/<OnActionPreExecuteAsync>d__25")]
public ValueTask`1<Nullable`1<Outcome`1<T>>> OnActionPreExecuteAsync(ResilienceContext context);
    public ValueTask OnUnhandledOutcomeAsync(Outcome`1<T> outcome, ResilienceContext context);
    public ValueTask OnHandledOutcomeAsync(Outcome`1<T> outcome, ResilienceContext context);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.CircuitStateController`1/<ExecuteScheduledTaskAsync>d__29")]
internal static ValueTask ExecuteScheduledTaskAsync(Task task, ResilienceContext context);
    private static bool IsDateTimeOverflow(DateTimeOffset utcNow, TimeSpan breakDuration);
    private void EnsureNotDisposed();
    private void CloseCircuit_NeedsLock(Outcome`1<T> outcome, bool manual, ResilienceContext context, Task& scheduledTask);
    private bool PermitHalfOpenCircuitTest_NeedsLock();
    private void SetLastHandledOutcome_NeedsLock(Outcome`1<T> outcome);
    private BrokenCircuitException CreateBrokenCircuitException();
    private void OpenCircuit_NeedsLock(Outcome`1<T> outcome, bool manual, ResilienceContext context, Task& scheduledTask);
    private void OpenCircuitFor_NeedsLock(Outcome`1<T> outcome, TimeSpan breakDuration, bool manual, ResilienceContext context, Task& scheduledTask);
    private Task ScheduleHalfOpenTask(ResilienceContext context);
}
[IsReadOnlyAttribute]
internal class Polly.CircuitBreaker.Health.HealthInfo : ValueType {
    [CompilerGeneratedAttribute]
private int <Throughput>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FailureRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailureCount>k__BackingField;
    public int Throughput { get; public set; }
    public double FailureRate { get; public set; }
    public int FailureCount { get; public set; }
    public HealthInfo(int Throughput, double FailureRate, int FailureCount);
    [CompilerGeneratedAttribute]
public int get_Throughput();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Throughput(int value);
    [CompilerGeneratedAttribute]
public double get_FailureRate();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FailureRate(double value);
    [CompilerGeneratedAttribute]
public int get_FailureCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FailureCount(int value);
    public static HealthInfo Create(int successes, int failures);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(HealthInfo left, HealthInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(HealthInfo left, HealthInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HealthInfo other);
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Throughput, Double& FailureRate, Int32& FailureCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Polly.CircuitBreaker.Health.HealthMetrics : object {
    private static short NumberOfWindows;
    private static TimeSpan ResolutionOfCircuitTimer;
    [CompilerGeneratedAttribute]
private TimeProvider <TimeProvider>k__BackingField;
    protected TimeProvider TimeProvider { get; }
    protected HealthMetrics(TimeProvider timeProvider);
    private static HealthMetrics();
    public static HealthMetrics Create(TimeSpan samplingDuration, TimeProvider timeProvider);
    [CompilerGeneratedAttribute]
protected TimeProvider get_TimeProvider();
    public abstract virtual void IncrementSuccess();
    public abstract virtual void IncrementFailure();
    public abstract virtual void Reset();
    public abstract virtual HealthInfo GetHealthInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.CircuitBreaker.Health.RollingHealthMetrics : HealthMetrics {
    private TimeSpan _samplingDuration;
    private TimeSpan _windowDuration;
    private Queue`1<HealthWindow> _windows;
    [NullableAttribute("2")]
private HealthWindow _currentWindow;
    public RollingHealthMetrics(TimeSpan samplingDuration, short numberOfWindows, TimeProvider timeProvider);
    public virtual void IncrementSuccess();
    public virtual void IncrementFailure();
    public virtual void Reset();
    public virtual HealthInfo GetHealthInfo();
    private HealthWindow UpdateCurrentWindow();
}
internal class Polly.CircuitBreaker.Health.SingleHealthMetrics : HealthMetrics {
    private TimeSpan _samplingDuration;
    private int _successes;
    private int _failures;
    private DateTimeOffset _startedAt;
    [NullableContextAttribute("1")]
public SingleHealthMetrics(TimeSpan samplingDuration, TimeProvider timeProvider);
    public virtual void IncrementSuccess();
    public virtual void IncrementFailure();
    public virtual void Reset();
    public virtual HealthInfo GetHealthInfo();
    private void TryReset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.CircuitBreaker.IsolatedCircuitException : BrokenCircuitException {
    public IsolatedCircuitException(string message);
    public IsolatedCircuitException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.CircuitBreaker.OnCircuitClosedArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsManual>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public bool IsManual { get; }
    public OnCircuitClosedArguments`1(ResilienceContext context, Outcome`1<TResult> outcome, bool isManual);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public bool get_IsManual();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.CircuitBreaker.OnCircuitHalfOpenedArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public OnCircuitHalfOpenedArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.CircuitBreaker.OnCircuitOpenedArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BreakDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsManual>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public TimeSpan BreakDuration { get; }
    public bool IsManual { get; }
    public OnCircuitOpenedArguments`1(ResilienceContext context, Outcome`1<TResult> outcome, TimeSpan breakDuration, bool isManual);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public TimeSpan get_BreakDuration();
    [CompilerGeneratedAttribute]
public bool get_IsManual();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.CircuitBreaker.ScheduledTaskExecutor : object {
    private ConcurrentQueue`1<Entry> _tasks;
    private SemaphoreSlim _semaphore;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Task <ProcessingTask>k__BackingField;
    public Task ProcessingTask { get; }
    [CompilerGeneratedAttribute]
public Task get_ProcessingTask();
    public void ScheduleTask(Func`1<Task> taskFactory, ResilienceContext context, Task& task);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.ScheduledTaskExecutor/<StartProcessingAsync>d__9")]
private Task StartProcessingAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.CircuitBreakerResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
[DynamicDependencyAttribute("-1", "Polly.CircuitBreaker.CircuitBreakerStrategyOptions")]
public static ResiliencePipelineBuilder AddCircuitBreaker(ResiliencePipelineBuilder builder, CircuitBreakerStrategyOptions options);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddCircuitBreaker(ResiliencePipelineBuilder`1<TResult> builder, CircuitBreakerStrategyOptions`1<TResult> options);
    internal static CircuitBreakerResilienceStrategy`1<TResult> CreateStrategy(StrategyBuilderContext context, CircuitBreakerStrategyOptions`1<TResult> options);
}
public enum Polly.DelayBackoffType : Enum {
    public int value__;
    public static DelayBackoffType Constant;
    public static DelayBackoffType Linear;
    public static DelayBackoffType Exponential;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Polly.ExecutionRejectedException : Exception {
    protected ExecutionRejectedException(string message);
    protected ExecutionRejectedException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Fallback.FallbackActionArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public FallbackActionArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Fallback.FallbackConstants : object {
    public static string DefaultName;
    public static string OnFallback;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Fallback.FallbackHandler`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FallbackPredicateArguments`1<T>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FallbackActionArguments`1<T>, ValueTask`1<Outcome`1<T>>> <ActionGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<FallbackPredicateArguments`1<T>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<FallbackActionArguments`1<T>, ValueTask`1<Outcome`1<T>>> ActionGenerator { get; public set; }
    public FallbackHandler`1(Func`2<FallbackPredicateArguments`1<T>, ValueTask`1<bool>> ShouldHandle, Func`2<FallbackActionArguments`1<T>, ValueTask`1<Outcome`1<T>>> ActionGenerator);
    [CompilerGeneratedAttribute]
private FallbackHandler`1(FallbackHandler`1<T> original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Func`2<FallbackPredicateArguments`1<T>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShouldHandle(Func`2<FallbackPredicateArguments`1<T>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<FallbackActionArguments`1<T>, ValueTask`1<Outcome`1<T>>> get_ActionGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ActionGenerator(Func`2<FallbackActionArguments`1<T>, ValueTask`1<Outcome`1<T>>> value);
    public ValueTask`1<Outcome`1<T>> GetFallbackOutcomeAsync(FallbackActionArguments`1<T> args);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FallbackHandler`1<T> left, FallbackHandler`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FallbackHandler`1<T> left, FallbackHandler`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FallbackHandler`1<T> other);
    [CompilerGeneratedAttribute]
public FallbackHandler`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Func`2& ShouldHandle, Func`2& ActionGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Fallback.FallbackPredicateArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public FallbackPredicateArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Polly.Fallback.FallbackResilienceStrategy`1 : ResilienceStrategy`1<T> {
    private FallbackHandler`1<T> _handler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<OnFallbackArguments`1<T>, ValueTask> _onFallback;
    private ResilienceStrategyTelemetry _telemetry;
    public FallbackResilienceStrategy`1(FallbackHandler`1<T> handler, Func`2<OnFallbackArguments`1<T>, ValueTask> onFallback, ResilienceStrategyTelemetry telemetry);
    [AsyncStateMachineAttribute("Polly.Fallback.FallbackResilienceStrategy`1/<ExecuteCore>d__4`1")]
protected internal virtual ValueTask`1<Outcome`1<T>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
}
public class Polly.Fallback.FallbackStrategyOptions`1 : ResilienceStrategyOptions {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FallbackPredicateArguments`1<TResult>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FallbackActionArguments`1<TResult>, ValueTask`1<Outcome`1<TResult>>> <FallbackAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnFallbackArguments`1<TResult>, ValueTask> <OnFallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<FallbackPredicateArguments`1<TResult>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<FallbackActionArguments`1<TResult>, ValueTask`1<Outcome`1<TResult>>> FallbackAction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnFallbackArguments`1<TResult>, ValueTask> OnFallback { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<FallbackPredicateArguments`1<TResult>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public void set_ShouldHandle(Func`2<FallbackPredicateArguments`1<TResult>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<FallbackActionArguments`1<TResult>, ValueTask`1<Outcome`1<TResult>>> get_FallbackAction();
    [CompilerGeneratedAttribute]
public void set_FallbackAction(Func`2<FallbackActionArguments`1<TResult>, ValueTask`1<Outcome`1<TResult>>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnFallbackArguments`1<TResult>, ValueTask> get_OnFallback();
    [CompilerGeneratedAttribute]
public void set_OnFallback(Func`2<OnFallbackArguments`1<TResult>, ValueTask> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Fallback.OnFallbackArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public OnFallbackArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.FallbackResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddFallback(ResiliencePipelineBuilder`1<TResult> builder, FallbackStrategyOptions`1<TResult> options);
    private static ResilienceStrategy`1<TResult> CreateFallback(StrategyBuilderContext context, FallbackStrategyOptions`1<TResult> options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Hedging.Controller.TaskExecution`1 : object {
    private ResilienceContext _cachedContext;
    private CancellationTokenSourcePool _cancellationTokenSourcePool;
    private TimeProvider _timeProvider;
    private ResilienceStrategyTelemetry _telemetry;
    private HedgingHandler`1<T> _handler;
    [NullableAttribute("2")]
private CancellationTokenSource _cancellationSource;
    private Nullable`1<CancellationTokenRegistration> _cancellationRegistration;
    [NullableAttribute("2")]
private ResilienceContext _activeContext;
    private long _startExecutionTimestamp;
    private long _stopExecutionTimestamp;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Task <ExecutionTaskSafe>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<T> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private HedgedTaskType <Type>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TaskExecution`1<T>> <OnReset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [NullableAttribute("2")]
public Task ExecutionTaskSafe { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<T> Outcome { get; private set; }
    public bool IsHandled { get; private set; }
    public bool IsAccepted { get; private set; }
    public ResilienceContext Context { get; }
    public HedgedTaskType Type { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TaskExecution`1<T>> OnReset { get; public set; }
    public TimeSpan ExecutionTime { get; }
    public int AttemptNumber { get; private set; }
    public TaskExecution`1(HedgingHandler`1<T> handler, CancellationTokenSourcePool cancellationTokenSourcePool, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Task get_ExecutionTaskSafe();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ExecutionTaskSafe(Task value);
    [CompilerGeneratedAttribute]
public Outcome`1<T> get_Outcome();
    [CompilerGeneratedAttribute]
private void set_Outcome(Outcome`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_IsHandled();
    [CompilerGeneratedAttribute]
private void set_IsHandled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAccepted();
    [CompilerGeneratedAttribute]
private void set_IsAccepted(bool value);
    public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public HedgedTaskType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HedgedTaskType value);
    [CompilerGeneratedAttribute]
public Action`1<TaskExecution`1<T>> get_OnReset();
    [CompilerGeneratedAttribute]
public void set_OnReset(Action`1<TaskExecution`1<T>> value);
    public TimeSpan get_ExecutionTime();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
    [CompilerGeneratedAttribute]
private void set_AttemptNumber(int value);
    public void AcceptOutcome();
    public void Cancel();
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<InitializeAsync>d__45`1")]
public ValueTask`1<bool> InitializeAsync(HedgedTaskType type, ResilienceContext primaryContext, Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> primaryCallback, TState state, int attemptNumber);
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<HandleOnHedgingAsync>d__46")]
private Task HandleOnHedgingAsync(ResilienceContext primaryContext, int attemptNumber);
    private HedgingActionGeneratorArguments`1<TResult> CreateArguments(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> primaryCallback, ResilienceContext primaryContext, TState state, int attempt);
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<ResetAsync>d__48")]
public ValueTask ResetAsync();
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<ExecuteSecondaryActionAsync>d__49")]
private Task ExecuteSecondaryActionAsync(Func`1<ValueTask`1<Outcome`1<T>>> action);
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<ExecuteCreateActionException>d__50")]
private Task ExecuteCreateActionException(Exception e);
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<ExecutePrimaryActionAsync>d__51`1")]
private Task ExecutePrimaryActionAsync(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> primaryCallback, TState state);
    [AsyncStateMachineAttribute("Polly.Hedging.Controller.TaskExecution`1/<UpdateOutcomeAsync>d__52")]
private Task UpdateOutcomeAsync(Outcome`1<T> outcome);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Hedging.HedgingActionGeneratorArguments`1 : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <PrimaryContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ResilienceContext, ValueTask`1<Outcome`1<TResult>>> <Callback>k__BackingField;
    public ResilienceContext PrimaryContext { get; }
    public ResilienceContext ActionContext { get; }
    public int AttemptNumber { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ResilienceContext, ValueTask`1<Outcome`1<TResult>>> Callback { get; }
    public HedgingActionGeneratorArguments`1(ResilienceContext primaryContext, ResilienceContext actionContext, int attemptNumber, Func`2<ResilienceContext, ValueTask`1<Outcome`1<TResult>>> callback);
    [CompilerGeneratedAttribute]
public ResilienceContext get_PrimaryContext();
    [CompilerGeneratedAttribute]
public ResilienceContext get_ActionContext();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
    [CompilerGeneratedAttribute]
public Func`2<ResilienceContext, ValueTask`1<Outcome`1<TResult>>> get_Callback();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Hedging.HedgingConstants : object {
    public static string DefaultName;
    public static string OnHedgingEventName;
    public static int DefaultMaxHedgedAttempts;
    public static int MinimumHedgedAttempts;
    public static int MaximumHedgedAttempts;
    public static TimeSpan DefaultHedgingDelay;
    private static HedgingConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Hedging.HedgingDelayGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    public ResilienceContext Context { get; }
    public int AttemptNumber { get; }
    public HedgingDelayGeneratorArguments(ResilienceContext context, int attemptNumber);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Hedging.HedgingPredicateArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public HedgingPredicateArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Polly.Hedging.HedgingResilienceStrategy`1 : ResilienceStrategy`1<T> {
    private HedgingController`1<T> _controller;
    [CompilerGeneratedAttribute]
private TimeSpan <HedgingDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalAttempts>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> <DelayGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private HedgingHandler`1<T> <HedgingHandler>k__BackingField;
    public TimeSpan HedgingDelay { get; }
    public int TotalAttempts { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> DelayGenerator { get; }
    public HedgingHandler`1<T> HedgingHandler { get; }
    public HedgingResilienceStrategy`1(TimeSpan hedgingDelay, int maxHedgedAttempts, HedgingHandler`1<T> hedgingHandler, Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> hedgingDelayGenerator, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry);
    [CompilerGeneratedAttribute]
public TimeSpan get_HedgingDelay();
    [CompilerGeneratedAttribute]
public int get_TotalAttempts();
    [CompilerGeneratedAttribute]
public Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> get_DelayGenerator();
    [CompilerGeneratedAttribute]
public HedgingHandler`1<T> get_HedgingHandler();
    [AsyncStateMachineAttribute("Polly.Hedging.HedgingResilienceStrategy`1/<ExecuteCore>d__14`1")]
[ExcludeFromCodeCoverageAttribute]
protected internal virtual ValueTask`1<Outcome`1<T>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.Hedging.HedgingResilienceStrategy`1/<ExecuteCoreAsync>d__15`1")]
private ValueTask`1<Outcome`1<T>> ExecuteCoreAsync(HedgingExecutionContext`1<T> hedgingContext, Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
    [NullableContextAttribute("0")]
internal ValueTask`1<TimeSpan> GetHedgingDelayAsync(ResilienceContext context, int attempt);
}
public class Polly.Hedging.HedgingStrategyOptions`1 : ResilienceStrategyOptions {
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHedgedAttempts>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingPredicateArguments`1<TResult>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingActionGeneratorArguments`1<TResult>, Func`1<ValueTask`1<Outcome`1<TResult>>>> <ActionGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> <DelayGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnHedgingArguments`1<TResult>, ValueTask> <OnHedging>k__BackingField;
    public TimeSpan Delay { get; public set; }
    [RangeAttribute("1", "10")]
public int MaxHedgedAttempts { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<HedgingPredicateArguments`1<TResult>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<HedgingActionGeneratorArguments`1<TResult>, Func`1<ValueTask`1<Outcome`1<TResult>>>> ActionGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> DelayGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnHedgingArguments`1<TResult>, ValueTask> OnHedging { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxHedgedAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxHedgedAttempts(int value);
    [CompilerGeneratedAttribute]
public Func`2<HedgingPredicateArguments`1<TResult>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public void set_ShouldHandle(Func`2<HedgingPredicateArguments`1<TResult>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<HedgingActionGeneratorArguments`1<TResult>, Func`1<ValueTask`1<Outcome`1<TResult>>>> get_ActionGenerator();
    [CompilerGeneratedAttribute]
public void set_ActionGenerator(Func`2<HedgingActionGeneratorArguments`1<TResult>, Func`1<ValueTask`1<Outcome`1<TResult>>>> value);
    [CompilerGeneratedAttribute]
public Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> get_DelayGenerator();
    [CompilerGeneratedAttribute]
public void set_DelayGenerator(Func`2<HedgingDelayGeneratorArguments, ValueTask`1<TimeSpan>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnHedgingArguments`1<TResult>, ValueTask> get_OnHedging();
    [CompilerGeneratedAttribute]
public void set_OnHedging(Func`2<OnHedgingArguments`1<TResult>, ValueTask> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Hedging.OnHedgingArguments`1 : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <PrimaryContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    public ResilienceContext PrimaryContext { get; }
    public ResilienceContext ActionContext { get; }
    public int AttemptNumber { get; }
    public OnHedgingArguments`1(ResilienceContext primaryContext, ResilienceContext actionContext, int attemptNumber);
    [CompilerGeneratedAttribute]
public ResilienceContext get_PrimaryContext();
    [CompilerGeneratedAttribute]
public ResilienceContext get_ActionContext();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
}
internal enum Polly.Hedging.Utils.HedgedTaskType : Enum {
    public int value__;
    public static HedgedTaskType Primary;
    public static HedgedTaskType Secondary;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Hedging.Utils.HedgingController`1 : object {
    private ObjectPool`1<HedgingExecutionContext`1<T>> _contextPool;
    private ObjectPool`1<TaskExecution`1<T>> _executionPool;
    private int _rentedContexts;
    private int _rentedExecutions;
    public int RentedContexts { get; }
    public int RentedExecutions { get; }
    public HedgingController`1(ResilienceStrategyTelemetry telemetry, TimeProvider provider, HedgingHandler`1<T> handler, int maxAttempts);
    public int get_RentedContexts();
    public int get_RentedExecutions();
    public HedgingExecutionContext`1<T> GetContext(ResilienceContext context);
    private void ReturnContext(HedgingExecutionContext`1<T> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Hedging.Utils.HedgingExecutionContext`1 : object {
    private List`1<TaskExecution`1<T>> _tasks;
    private List`1<TaskExecution`1<T>> _executingTasks;
    private ObjectPool`1<TaskExecution`1<T>> _executionPool;
    private TimeProvider _timeProvider;
    private int _maxAttempts;
    private Action`1<HedgingExecutionContext`1<T>> _onReset;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResilienceContext <PrimaryContext>k__BackingField;
    public int LoadedTasks { get; }
    [NullableAttribute("2")]
public ResilienceContext PrimaryContext { get; private set; }
    public bool IsInitialized { get; }
    public IReadOnlyList`1<TaskExecution`1<T>> Tasks { get; }
    private bool ContinueOnCapturedContext { get; }
    public HedgingExecutionContext`1(ObjectPool`1<TaskExecution`1<T>> executionPool, TimeProvider timeProvider, int maxAttempts, Action`1<HedgingExecutionContext`1<T>> onReset);
    internal void Initialize(ResilienceContext context);
    public int get_LoadedTasks();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ResilienceContext get_PrimaryContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PrimaryContext(ResilienceContext value);
    public bool get_IsInitialized();
    public IReadOnlyList`1<TaskExecution`1<T>> get_Tasks();
    private bool get_ContinueOnCapturedContext();
    [AsyncStateMachineAttribute("Polly.Hedging.Utils.HedgingExecutionContext`1/<LoadExecutionAsync>d__21`1")]
public ValueTask`1<ExecutionInfo`1<T, T>> LoadExecutionAsync(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> primaryCallback, TState state);
    [AsyncStateMachineAttribute("Polly.Hedging.Utils.HedgingExecutionContext`1/<DisposeAsync>d__22")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Polly.Hedging.Utils.HedgingExecutionContext`1/<TryWaitForCompletedExecutionAsync>d__23")]
public ValueTask`1<TaskExecution`1<T>> TryWaitForCompletedExecutionAsync(TimeSpan hedgingDelay);
    private ExecutionInfo`1<T, T> CreateExecutionInfoWhenNoExecution();
    private Task`1<Task> WaitForTaskCompetitionAsync();
    private TaskExecution`1<T> TryRemoveExecutedTask();
    private void UpdateOriginalContext();
    private void Reset();
    [AsyncStateMachineAttribute("Polly.Hedging.Utils.HedgingExecutionContext`1/<<WaitForTaskCompetitionAsync>g__AwaitTask|25_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<Task> <WaitForTaskCompetitionAsync>g__AwaitTask|25_0(TaskExecution`1<T> task, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Hedging.Utils.HedgingHandler`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingPredicateArguments`1<T>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HedgingActionGeneratorArguments`1<T>, Func`1<ValueTask`1<Outcome`1<T>>>> <ActionGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnHedgingArguments`1<T>, ValueTask> <OnHedging>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HedgingPredicateArguments`1<T>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HedgingActionGeneratorArguments`1<T>, Func`1<ValueTask`1<Outcome`1<T>>>> ActionGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnHedgingArguments`1<T>, ValueTask> OnHedging { get; public set; }
    public HedgingHandler`1(Func`2<HedgingPredicateArguments`1<T>, ValueTask`1<bool>> ShouldHandle, Func`2<HedgingActionGeneratorArguments`1<T>, Func`1<ValueTask`1<Outcome`1<T>>>> ActionGenerator, Func`2<OnHedgingArguments`1<T>, ValueTask> OnHedging);
    [CompilerGeneratedAttribute]
private HedgingHandler`1(HedgingHandler`1<T> original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Func`2<HedgingPredicateArguments`1<T>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShouldHandle(Func`2<HedgingPredicateArguments`1<T>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<HedgingActionGeneratorArguments`1<T>, Func`1<ValueTask`1<Outcome`1<T>>>> get_ActionGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ActionGenerator(Func`2<HedgingActionGeneratorArguments`1<T>, Func`1<ValueTask`1<Outcome`1<T>>>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnHedgingArguments`1<T>, ValueTask> get_OnHedging();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnHedging(Func`2<OnHedgingArguments`1<T>, ValueTask> value);
    public Func`1<ValueTask`1<Outcome`1<T>>> GenerateAction(HedgingActionGeneratorArguments`1<T> args);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(HedgingHandler`1<T> left, HedgingHandler`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(HedgingHandler`1<T> left, HedgingHandler`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HedgingHandler`1<T> other);
    [CompilerGeneratedAttribute]
public HedgingHandler`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Func`2& ShouldHandle, Func`2& ActionGenerator, Func`2& OnHedging);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.HedgingResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddHedging(ResiliencePipelineBuilder`1<TResult> builder, HedgingStrategyOptions`1<TResult> options);
    private static HedgingResilienceStrategy`1<TResult> CreateHedgingStrategy(StrategyBuilderContext context, HedgingStrategyOptions`1<TResult> options);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Polly.LegacySupport : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void SetProperties(ResilienceProperties resilienceProperties, IDictionary`2<string, object> properties, IDictionary`2& oldProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Polly.Outcome : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Outcome`1<VoidResult> Void { get; }
    [NullableContextAttribute("2")]
public static Outcome`1<TResult> FromResult(TResult value);
    public static ValueTask`1<Outcome`1<TResult>> FromResultAsValueTask(TResult value);
    public static Outcome`1<TResult> FromException(Exception exception);
    public static ValueTask`1<Outcome`1<TResult>> FromExceptionAsValueTask(Exception exception);
    internal static Outcome`1<VoidResult> get_Void();
    internal static Outcome`1<VoidResult> FromException(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Outcome`1 : ValueType {
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <ExceptionDispatchInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public Exception Exception { get; }
    internal ExceptionDispatchInfo ExceptionDispatchInfo { get; }
    public TResult Result { get; }
    internal bool HasResult { get; }
    internal bool IsVoidResult { get; }
    [NullableContextAttribute("1")]
internal Outcome`1(Exception exception);
    internal Outcome`1(TResult result);
    [NullableContextAttribute("1")]
internal Outcome`1(ExceptionDispatchInfo exceptionDispatchInfo);
    public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal ExceptionDispatchInfo get_ExceptionDispatchInfo();
    [CompilerGeneratedAttribute]
public TResult get_Result();
    internal bool get_HasResult();
    internal bool get_IsVoidResult();
    public void ThrowIfException();
    internal bool TryGetResult(TResult& result);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
internal TResult GetResultOrRethrow();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.PredicateBuilder : PredicateBuilder`1<object> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.PredicateBuilder`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Predicate`1<Outcome`1<TResult>>> _predicates;
    [EditorBrowsableAttribute("1")]
public static Func`2<RetryPredicateArguments`1<TResult>, ValueTask`1<bool>> op_Implicit(PredicateBuilder`1<TResult> builder);
    [EditorBrowsableAttribute("1")]
public static Func`2<HedgingPredicateArguments`1<TResult>, ValueTask`1<bool>> op_Implicit(PredicateBuilder`1<TResult> builder);
    [EditorBrowsableAttribute("1")]
public static Func`2<FallbackPredicateArguments`1<TResult>, ValueTask`1<bool>> op_Implicit(PredicateBuilder`1<TResult> builder);
    [EditorBrowsableAttribute("1")]
public static Func`2<CircuitBreakerPredicateArguments`1<TResult>, ValueTask`1<bool>> op_Implicit(PredicateBuilder`1<TResult> builder);
    public PredicateBuilder`1<TResult> Handle();
    public PredicateBuilder`1<TResult> Handle(Func`2<TException, bool> predicate);
    public PredicateBuilder`1<TResult> HandleInner();
    public PredicateBuilder`1<TResult> HandleInner(Func`2<TException, bool> predicate);
    public PredicateBuilder`1<TResult> HandleResult(Func`2<TResult, bool> predicate);
    public PredicateBuilder`1<TResult> HandleResult(TResult result, IEqualityComparer`1<TResult> comparer);
    public Predicate`1<Outcome`1<TResult>> Build();
    [NullableContextAttribute("0")]
internal Func`2<TArgs, ValueTask`1<bool>> Build();
    private static Predicate`1<Outcome`1<TResult>> CreatePredicate(Predicate`1[] predicates);
    private PredicateBuilder`1<TResult> Add(Predicate`1<Outcome`1<TResult>> predicate);
    [CompilerGeneratedAttribute]
internal static bool <HandleInner>g__HandleInner|8_1(Exception exception, Func`2<TException, bool> predicate);
    [CompilerGeneratedAttribute]
internal static bool <HandleInner>g__HandleNested|8_2(Func`2<TException, bool> predicate, Exception current);
}
public static class Polly.PredicateResult : object {
    public static ValueTask`1<bool> True();
    public static ValueTask`1<bool> False();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Registry.ConfigureBuilderContext`1 : object {
    [CompilerGeneratedAttribute]
private TKey <PipelineKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuilderName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BuilderInstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CancellationToken> <ReloadTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <DisposeCallbacks>k__BackingField;
    public TKey PipelineKey { get; }
    internal string BuilderName { get; }
    [NullableAttribute("2")]
internal string BuilderInstanceName { get; }
    internal List`1<CancellationToken> ReloadTokens { get; }
    internal List`1<Action> DisposeCallbacks { get; }
    internal ConfigureBuilderContext`1(TKey strategyKey, string builderName, string builderInstanceName);
    [CompilerGeneratedAttribute]
public TKey get_PipelineKey();
    [CompilerGeneratedAttribute]
internal string get_BuilderName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_BuilderInstanceName();
    [CompilerGeneratedAttribute]
internal List`1<CancellationToken> get_ReloadTokens();
    [CompilerGeneratedAttribute]
internal List`1<Action> get_DisposeCallbacks();
    public void AddReloadToken(CancellationToken cancellationToken);
    public void OnPipelineDisposed(Action callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Registry.RegistryPipelineComponentBuilder`2 : object {
    private Func`1<TBuilder> _activator;
    private TKey _key;
    private string _builderName;
    [NullableAttribute("2")]
private string _instanceName;
    private Action`2<TBuilder, ConfigureBuilderContext`1<TKey>> _configure;
    public RegistryPipelineComponentBuilder`2(Func`1<TBuilder> activator, TKey key, string builderName, string instanceName, Action`2<TBuilder, ConfigureBuilderContext`1<TKey>> configure);
    internal ValueTuple`2<ResilienceContextPool, PipelineComponent> CreateComponent();
    private Builder<TBuilder, TKey> CreateBuilder();
    [CompilerGeneratedAttribute]
private Entry <CreateComponent>b__6_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Polly.Registry.ResiliencePipelineProvider`1 : object {
    public virtual ResiliencePipeline GetPipeline(TKey key);
    public virtual ResiliencePipeline`1<TResult> GetPipeline(TKey key);
    public abstract virtual bool TryGetPipeline(TKey key, ResiliencePipeline& pipeline);
    public abstract virtual bool TryGetPipeline(TKey key, ResiliencePipeline`1& pipeline);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Registry.ResiliencePipelineRegistry`1 : ResiliencePipelineProvider`1<TKey> {
    private Func`1<ResiliencePipelineBuilder> _activator;
    private ConcurrentDictionary`2<TKey, Action`2<ResiliencePipelineBuilder, ConfigureBuilderContext`1<TKey>>> _builders;
    private ConcurrentDictionary`2<TKey, ResiliencePipeline> _pipelines;
    private ConcurrentDictionary`2<Type, object> _genericRegistry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TKey, string> _instanceNameFormatter;
    private Func`2<TKey, string> _builderNameFormatter;
    private IEqualityComparer`1<TKey> _builderComparer;
    private IEqualityComparer`1<TKey> _pipelineComparer;
    private bool _disposed;
    public ResiliencePipelineRegistry`1(ResiliencePipelineRegistryOptions`1<TKey> options);
    public virtual bool TryGetPipeline(TKey key, ResiliencePipeline`1& pipeline);
    public virtual bool TryGetPipeline(TKey key, ResiliencePipeline& pipeline);
    public ResiliencePipeline GetOrAddPipeline(TKey key, Action`1<ResiliencePipelineBuilder> configure);
    public ResiliencePipeline GetOrAddPipeline(TKey key, Action`2<ResiliencePipelineBuilder, ConfigureBuilderContext`1<TKey>> configure);
    public ResiliencePipeline`1<TResult> GetOrAddPipeline(TKey key, Action`1<ResiliencePipelineBuilder`1<TResult>> configure);
    public ResiliencePipeline`1<TResult> GetOrAddPipeline(TKey key, Action`2<ResiliencePipelineBuilder`1<TResult>, ConfigureBuilderContext`1<TKey>> configure);
    public bool TryAddBuilder(TKey key, Action`2<ResiliencePipelineBuilder, ConfigureBuilderContext`1<TKey>> configure);
    public bool TryAddBuilder(TKey key, Action`2<ResiliencePipelineBuilder`1<TResult>, ConfigureBuilderContext`1<TKey>> configure);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Polly.Registry.ResiliencePipelineRegistry`1/<DisposeAsync>d__20")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
private GenericRegistry`1<TKey, TResult> GetGenericRegistry();
    private void EnsureNotDisposed();
    [CompilerGeneratedAttribute]
private object <GetGenericRegistry>b__21_0(Type _);
    [CompilerGeneratedAttribute]
private ResiliencePipelineBuilder`1<TResult> <GetGenericRegistry>b__21_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Registry.ResiliencePipelineRegistryOptions`1 : object {
    [CompilerGeneratedAttribute]
private Func`1<ResiliencePipelineBuilder> <BuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <PipelineComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <BuilderComparer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TKey, string> <InstanceNameFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TKey, string> <BuilderNameFormatter>k__BackingField;
    [RequiredAttribute]
public Func`1<ResiliencePipelineBuilder> BuilderFactory { get; public set; }
    [RequiredAttribute]
public IEqualityComparer`1<TKey> PipelineComparer { get; public set; }
    [RequiredAttribute]
public IEqualityComparer`1<TKey> BuilderComparer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TKey, string> InstanceNameFormatter { get; public set; }
    [RequiredAttribute]
public Func`2<TKey, string> BuilderNameFormatter { get; public set; }
    [CompilerGeneratedAttribute]
public Func`1<ResiliencePipelineBuilder> get_BuilderFactory();
    [CompilerGeneratedAttribute]
public void set_BuilderFactory(Func`1<ResiliencePipelineBuilder> value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<TKey> get_PipelineComparer();
    [CompilerGeneratedAttribute]
public void set_PipelineComparer(IEqualityComparer`1<TKey> value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<TKey> get_BuilderComparer();
    [CompilerGeneratedAttribute]
public void set_BuilderComparer(IEqualityComparer`1<TKey> value);
    [CompilerGeneratedAttribute]
public Func`2<TKey, string> get_InstanceNameFormatter();
    [CompilerGeneratedAttribute]
public void set_InstanceNameFormatter(Func`2<TKey, string> value);
    [CompilerGeneratedAttribute]
public Func`2<TKey, string> get_BuilderNameFormatter();
    [CompilerGeneratedAttribute]
public void set_BuilderNameFormatter(Func`2<TKey, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.ResilienceContext : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <OperationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSynchronous>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueOnCapturedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceProperties <Properties>k__BackingField;
    [NullableAttribute("2")]
public string OperationKey { get; internal set; }
    public CancellationToken CancellationToken { get; internal set; }
    internal bool IsSynchronous { get; private set; }
    internal Type ResultType { get; private set; }
    internal bool IsVoid { get; }
    public bool ContinueOnCapturedContext { get; internal set; }
    internal bool IsInitialized { get; }
    public ResilienceProperties Properties { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_OperationKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_OperationKey(string value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
internal void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
internal bool get_IsSynchronous();
    [CompilerGeneratedAttribute]
private void set_IsSynchronous(bool value);
    [CompilerGeneratedAttribute]
internal Type get_ResultType();
    [CompilerGeneratedAttribute]
private void set_ResultType(Type value);
    internal bool get_IsVoid();
    [CompilerGeneratedAttribute]
public bool get_ContinueOnCapturedContext();
    [CompilerGeneratedAttribute]
internal void set_ContinueOnCapturedContext(bool value);
    internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public ResilienceProperties get_Properties();
    internal void InitializeFrom(ResilienceContext context, CancellationToken cancellationToken);
    [ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("DEBUG")]
internal void AssertInitialized();
    internal ResilienceContext Initialize(bool isSynchronous);
    internal bool Reset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.ResilienceContextCreationArguments : ValueType {
    [CompilerGeneratedAttribute]
private string <OperationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ContinueOnCapturedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public string OperationKey { get; }
    public Nullable`1<bool> ContinueOnCapturedContext { get; }
    public CancellationToken CancellationToken { get; }
    public ResilienceContextCreationArguments(string operationKey, Nullable`1<bool> continueOnCapturedContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_OperationKey();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ContinueOnCapturedContext();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Polly.ResilienceContextPool : object {
    [CompilerGeneratedAttribute]
private static ResilienceContextPool <Shared>k__BackingField;
    private static bool ContinueOnCapturedContextDefault;
    public static ResilienceContextPool Shared { get; }
    private static ResilienceContextPool();
    [CompilerGeneratedAttribute]
public static ResilienceContextPool get_Shared();
    public ResilienceContext Get(CancellationToken cancellationToken);
    public ResilienceContext Get(string operationKey, CancellationToken cancellationToken);
    public ResilienceContext Get(string operationKey, Nullable`1<bool> continueOnCapturedContext, CancellationToken cancellationToken);
    public ResilienceContext Get(bool continueOnCapturedContext, CancellationToken cancellationToken);
    public abstract virtual ResilienceContext Get(ResilienceContextCreationArguments arguments);
    public abstract virtual void Return(ResilienceContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.ResiliencePipeline : object {
    public static ResiliencePipeline Empty;
    [CompilerGeneratedAttribute]
private ResilienceContextPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private PipelineComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentDisposeHelper <DisposeHelper>k__BackingField;
    internal ResilienceContextPool Pool { get; }
    internal PipelineComponent Component { get; }
    internal ComponentDisposeHelper DisposeHelper { get; }
    internal ResiliencePipeline(PipelineComponent component, DisposeBehavior disposeBehavior, ResilienceContextPool pool);
    private static ResiliencePipeline();
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__0`1")]
public ValueTask ExecuteAsync(Func`3<ResilienceContext, TState, ValueTask> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__1")]
public ValueTask ExecuteAsync(Func`2<ResilienceContext, ValueTask> callback, ResilienceContext context);
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__2`1")]
public ValueTask ExecuteAsync(Func`3<TState, CancellationToken, ValueTask> callback, TState state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__3")]
public ValueTask ExecuteAsync(Func`2<CancellationToken, ValueTask> callback, CancellationToken cancellationToken);
    private ResilienceContext GetAsyncContext(CancellationToken cancellationToken);
    private void InitializeAsyncContext(ResilienceContext context);
    public ValueTask`1<Outcome`1<TResult>> ExecuteOutcomeAsync(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__7`2")]
public ValueTask`1<TResult> ExecuteAsync(Func`3<ResilienceContext, TState, ValueTask`1<TResult>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__8`1")]
public ValueTask`1<TResult> ExecuteAsync(Func`2<ResilienceContext, ValueTask`1<TResult>> callback, ResilienceContext context);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__9`2")]
public ValueTask`1<TResult> ExecuteAsync(Func`3<TState, CancellationToken, ValueTask`1<TResult>> callback, TState state, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Polly.ResiliencePipeline/<ExecuteAsync>d__10`1")]
public ValueTask`1<TResult> ExecuteAsync(Func`2<CancellationToken, ValueTask`1<TResult>> callback, CancellationToken cancellationToken);
    private ResilienceContext GetAsyncContext(CancellationToken cancellationToken);
    private void InitializeAsyncContext(ResilienceContext context);
    [CompilerGeneratedAttribute]
internal ResilienceContextPool get_Pool();
    [CompilerGeneratedAttribute]
internal PipelineComponent get_Component();
    [CompilerGeneratedAttribute]
internal ComponentDisposeHelper get_DisposeHelper();
    public void Execute(Action`2<ResilienceContext, TState> callback, ResilienceContext context, TState state);
    public void Execute(Action`1<ResilienceContext> callback, ResilienceContext context);
    public void Execute(Action`2<TState, CancellationToken> callback, TState state, CancellationToken cancellationToken);
    public void Execute(Action`1<CancellationToken> callback, CancellationToken cancellationToken);
    public void Execute(Action`1<TState> callback, TState state);
    public void Execute(Action callback);
    private ResilienceContext GetSyncContext(CancellationToken cancellationToken);
    private void InitializeSyncContext(ResilienceContext context);
    public TResult Execute(Func`3<ResilienceContext, TState, TResult> callback, ResilienceContext context, TState state);
    public TResult Execute(Func`2<ResilienceContext, TResult> callback, ResilienceContext context);
    public TResult Execute(Func`2<CancellationToken, TResult> callback, CancellationToken cancellationToken);
    public TResult Execute(Func`1<TResult> callback);
    public TResult Execute(Func`2<TState, TResult> callback, TState state);
    public TResult Execute(Func`3<TState, CancellationToken, TResult> callback, TState state, CancellationToken cancellationToken);
    private ResilienceContext GetSyncContext(CancellationToken cancellationToken);
    private void InitializeSyncContext(ResilienceContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.ResiliencePipeline`1 : object {
    public static ResiliencePipeline`1<T> Empty;
    [CompilerGeneratedAttribute]
private ComponentDisposeHelper <DisposeHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ResiliencePipeline <Pipeline>k__BackingField;
    internal PipelineComponent Component { get; }
    internal ComponentDisposeHelper DisposeHelper { get; }
    private ResiliencePipeline Pipeline { get; }
    internal ResiliencePipeline`1(PipelineComponent component, DisposeBehavior disposeBehavior, ResilienceContextPool pool);
    private static ResiliencePipeline`1();
    public ValueTask`1<TResult> ExecuteAsync(Func`3<ResilienceContext, TState, ValueTask`1<TResult>> callback, ResilienceContext context, TState state);
    public ValueTask`1<TResult> ExecuteAsync(Func`2<ResilienceContext, ValueTask`1<TResult>> callback, ResilienceContext context);
    public ValueTask`1<TResult> ExecuteAsync(Func`3<TState, CancellationToken, ValueTask`1<TResult>> callback, TState state, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<TResult> ExecuteAsync(Func`2<CancellationToken, ValueTask`1<TResult>> callback, CancellationToken cancellationToken);
    public ValueTask`1<Outcome`1<TResult>> ExecuteOutcomeAsync(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    internal PipelineComponent get_Component();
    [CompilerGeneratedAttribute]
internal ComponentDisposeHelper get_DisposeHelper();
    [CompilerGeneratedAttribute]
private ResiliencePipeline get_Pipeline();
    public TResult Execute(Func`3<ResilienceContext, TState, TResult> callback, ResilienceContext context, TState state);
    public TResult Execute(Func`2<ResilienceContext, TResult> callback, ResilienceContext context);
    public TResult Execute(Func`2<CancellationToken, TResult> callback, CancellationToken cancellationToken);
    public TResult Execute(Func`1<TResult> callback);
    public TResult Execute(Func`2<TState, TResult> callback, TState state);
    public TResult Execute(Func`3<TState, CancellationToken, TResult> callback, TState state, CancellationToken cancellationToken);
}
public class Polly.ResiliencePipelineBuilder : ResiliencePipelineBuilderBase {
    [NullableContextAttribute("1")]
public ResiliencePipeline Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.ResiliencePipelineBuilder`1 : ResiliencePipelineBuilderBase {
    internal ResiliencePipelineBuilder`1(ResiliencePipelineBuilderBase other);
    public ResiliencePipeline`1<TResult> Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Polly.ResiliencePipelineBuilderBase : object {
    [NullableAttribute("1")]
private List`1<Entry> _entries;
    private bool _used;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContextPool <ContextPool>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeProvider <TimeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryListener <TelemetryListener>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<ResilienceValidationContext> <Validator>k__BackingField;
    public string Name { get; public set; }
    public string InstanceName { get; public set; }
    public ResilienceContextPool ContextPool { get; public set; }
    public TimeProvider TimeProvider { get; public set; }
    [EditorBrowsableAttribute("1")]
public TelemetryListener TelemetryListener { get; public set; }
    [NullableAttribute("1")]
internal TimeProvider TimeProviderInternal { get; }
    [NullableAttribute("1")]
internal Action`1<ResilienceValidationContext> Validator { get; private protected set; }
    [NullableContextAttribute("1")]
private protected ResiliencePipelineBuilderBase(ResiliencePipelineBuilderBase other);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public ResilienceContextPool get_ContextPool();
    [CompilerGeneratedAttribute]
public void set_ContextPool(ResilienceContextPool value);
    [CompilerGeneratedAttribute]
public TimeProvider get_TimeProvider();
    [CompilerGeneratedAttribute]
public void set_TimeProvider(TimeProvider value);
    [CompilerGeneratedAttribute]
public TelemetryListener get_TelemetryListener();
    [CompilerGeneratedAttribute]
public void set_TelemetryListener(TelemetryListener value);
    [NullableContextAttribute("1")]
internal TimeProvider get_TimeProviderInternal();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Action`1<ResilienceValidationContext> get_Validator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private protected void set_Validator(Action`1<ResilienceValidationContext> value);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("This call validates the options using the data annotations attributes.
Make sure that the options are included by adding the '[DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(OptionsType))]' attribute to the calling method.")]
internal void AddPipelineComponent(Func`2<StrategyBuilderContext, PipelineComponent> factory, ResilienceStrategyOptions options);
    [NullableContextAttribute("1")]
internal PipelineComponent BuildPipelineComponent();
    [NullableContextAttribute("1")]
private PipelineComponent CreateComponent(Entry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.ResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddPipeline(TBuilder builder, ResiliencePipeline pipeline);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddPipeline(ResiliencePipelineBuilder`1<TResult> builder, ResiliencePipeline`1<TResult> pipeline);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This call validates the options using the data annotations attributes.
Make sure that the options are included by adding the '[DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(OptionsType))]' attribute to the calling method.")]
public static TBuilder AddStrategy(TBuilder builder, Func`2<StrategyBuilderContext, ResilienceStrategy> factory, ResilienceStrategyOptions options);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This call validates the options using the data annotations attributes.
Make sure that the options are included by adding the '[DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(OptionsType))]' attribute to the calling method.")]
public static ResiliencePipelineBuilder AddStrategy(ResiliencePipelineBuilder builder, Func`2<StrategyBuilderContext, ResilienceStrategy`1<object>> factory, ResilienceStrategyOptions options);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This call validates the options using the data annotations attributes.
Make sure that the options are included by adding the '[DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(OptionsType))]' attribute to the calling method.")]
public static ResiliencePipelineBuilder`1<TResult> AddStrategy(ResiliencePipelineBuilder`1<TResult> builder, Func`2<StrategyBuilderContext, ResilienceStrategy`1<TResult>> factory, ResilienceStrategyOptions options);
    [ExtensionAttribute]
[DynamicDependencyAttribute("-1", "Polly.ResiliencePipelineBuilderExtensions/EmptyOptions")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddStrategy(TBuilder builder, Func`2<StrategyBuilderContext, ResilienceStrategy> factory);
    [ExtensionAttribute]
[DynamicDependencyAttribute("-1", "Polly.ResiliencePipelineBuilderExtensions/EmptyOptions")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder AddStrategy(ResiliencePipelineBuilder builder, Func`2<StrategyBuilderContext, ResilienceStrategy`1<object>> factory);
    [ExtensionAttribute]
[DynamicDependencyAttribute("-1", "Polly.ResiliencePipelineBuilderExtensions/EmptyOptions")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddStrategy(ResiliencePipelineBuilder`1<TResult> builder, Func`2<StrategyBuilderContext, ResilienceStrategy`1<TResult>> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Options}")]
public class Polly.ResilienceProperties : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Options>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("3")]
internal IDictionary`2<string, object> Options { get; internal set; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(IDictionary`2<string, object> value);
    public bool TryGetValue(ResiliencePropertyKey`1<TValue> key, TValue& value);
    public TValue GetValue(ResiliencePropertyKey`1<TValue> key, TValue defaultValue);
    public void Set(ResiliencePropertyKey`1<TValue> key, TValue value);
    internal void AddOrReplaceProperties(ResilienceProperties other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.ResiliencePropertyKey`1 : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    public ResiliencePropertyKey`1(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    public virtual string ToString();
}
public abstract class Polly.ResilienceStrategy : object {
    [NullableContextAttribute("1")]
protected internal abstract virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
public abstract class Polly.ResilienceStrategy`1 : object {
    [NullableContextAttribute("1")]
protected internal abstract virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Polly.ResilienceStrategyOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.ResilienceValidationContext : object {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryMessage>k__BackingField;
    public object Instance { get; }
    public string PrimaryMessage { get; }
    public ResilienceValidationContext(object instance, string primaryMessage);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public string get_PrimaryMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Retry.OnRetryArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public int AttemptNumber { get; }
    public TimeSpan RetryDelay { get; }
    public TimeSpan Duration { get; }
    public OnRetryArguments`1(ResilienceContext context, Outcome`1<TResult> outcome, int attemptNumber, TimeSpan retryDelay, TimeSpan duration);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Retry.RetryConstants : object {
    public static string DefaultName;
    public static string OnRetryEvent;
    public static DelayBackoffType DefaultBackoffType;
    public static int DefaultRetryCount;
    public static int MaxRetryCount;
    public static TimeSpan DefaultBaseDelay;
    private static RetryConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Retry.RetryDelayGeneratorArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public int AttemptNumber { get; }
    public RetryDelayGeneratorArguments`1(ResilienceContext context, Outcome`1<TResult> outcome, int attemptNumber);
    [CompilerGeneratedAttribute]
public Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Retry.RetryHelper : object {
    private static double JitterFactor;
    private static double ExponentialFactor;
    private static double MaxTimeSpanTicks;
    private static RetryHelper();
    public static bool IsValidDelay(TimeSpan delay);
    public static TimeSpan GetRetryDelay(DelayBackoffType type, bool jitter, int attempt, TimeSpan baseDelay, Nullable`1<TimeSpan> maxDelay, Double& state, Func`1<double> randomizer);
    private static TimeSpan GetRetryDelayCore(DelayBackoffType type, bool jitter, int attempt, TimeSpan baseDelay, Double& state, Func`1<double> randomizer);
    private static TimeSpan DecorrelatedJitterBackoffV2(int attempt, TimeSpan baseDelay, Double& prev, Func`1<double> randomizer);
    private static TimeSpan ApplyJitter(TimeSpan delay, Func`1<double> randomizer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Retry.RetryPredicateArguments`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public ResilienceContext Context { get; }
    public int AttemptNumber { get; }
    public RetryPredicateArguments`1(ResilienceContext context, Outcome`1<TResult> outcome, int attemptNumber);
    [CompilerGeneratedAttribute]
public sealed virtual Outcome`1<TResult> get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Polly.Retry.RetryResilienceStrategy`1 : ResilienceStrategy`1<T> {
    private TimeProvider _timeProvider;
    private ResilienceStrategyTelemetry _telemetry;
    private Func`1<double> _randomizer;
    [CompilerGeneratedAttribute]
private TimeSpan <BaseDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private DelayBackoffType <BackoffType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RetryPredicateArguments`1<T>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RetryDelayGeneratorArguments`1<T>, ValueTask`1<Nullable`1<TimeSpan>>> <DelayGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJitter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnRetryArguments`1<T>, ValueTask> <OnRetry>k__BackingField;
    public TimeSpan BaseDelay { get; }
    public Nullable`1<TimeSpan> MaxDelay { get; }
    public DelayBackoffType BackoffType { get; }
    public int RetryCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<RetryPredicateArguments`1<T>, ValueTask`1<bool>> ShouldHandle { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<RetryDelayGeneratorArguments`1<T>, ValueTask`1<Nullable`1<TimeSpan>>> DelayGenerator { get; }
    public bool UseJitter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnRetryArguments`1<T>, ValueTask> OnRetry { get; }
    public RetryResilienceStrategy`1(RetryStrategyOptions`1<T> options, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry);
    [CompilerGeneratedAttribute]
public TimeSpan get_BaseDelay();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxDelay();
    [CompilerGeneratedAttribute]
public DelayBackoffType get_BackoffType();
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public Func`2<RetryPredicateArguments`1<T>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public Func`2<RetryDelayGeneratorArguments`1<T>, ValueTask`1<Nullable`1<TimeSpan>>> get_DelayGenerator();
    [CompilerGeneratedAttribute]
public bool get_UseJitter();
    [CompilerGeneratedAttribute]
public Func`2<OnRetryArguments`1<T>, ValueTask> get_OnRetry();
    [AsyncStateMachineAttribute("Polly.Retry.RetryResilienceStrategy`1/<ExecuteCore>d__28`1")]
protected internal virtual ValueTask`1<Outcome`1<T>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
    internal bool IsLastAttempt(int attempt, Boolean& incrementAttempts);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Retry.RetryStrategyOptions : RetryStrategyOptions`1<object> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
public class Polly.Retry.RetryStrategyOptions`1 : ResilienceStrategyOptions {
    [CompilerGeneratedAttribute]
private int <MaxRetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private DelayBackoffType <BackoffType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJitter>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxDelay>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RetryPredicateArguments`1<TResult>, ValueTask`1<bool>> <ShouldHandle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RetryDelayGeneratorArguments`1<TResult>, ValueTask`1<Nullable`1<TimeSpan>>> <DelayGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnRetryArguments`1<TResult>, ValueTask> <OnRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<double> <Randomizer>k__BackingField;
    [RangeAttribute("1", "2147483647")]
public int MaxRetryAttempts { get; public set; }
    public DelayBackoffType BackoffType { get; public set; }
    public bool UseJitter { get; public set; }
    [RangeAttribute("System.TimeSpan", "00:00:00", "1.00:00:00")]
public TimeSpan Delay { get; public set; }
    [RangeAttribute("System.TimeSpan", "00:00:00", "1.00:00:00")]
public Nullable`1<TimeSpan> MaxDelay { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<RetryPredicateArguments`1<TResult>, ValueTask`1<bool>> ShouldHandle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<RetryDelayGeneratorArguments`1<TResult>, ValueTask`1<Nullable`1<TimeSpan>>> DelayGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnRetryArguments`1<TResult>, ValueTask> OnRetry { get; public set; }
    [EditorBrowsableAttribute("1")]
[RequiredAttribute]
public Func`1<double> Randomizer { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxRetryAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxRetryAttempts(int value);
    [CompilerGeneratedAttribute]
public DelayBackoffType get_BackoffType();
    [CompilerGeneratedAttribute]
public void set_BackoffType(DelayBackoffType value);
    [CompilerGeneratedAttribute]
public bool get_UseJitter();
    [CompilerGeneratedAttribute]
public void set_UseJitter(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxDelay();
    [CompilerGeneratedAttribute]
public void set_MaxDelay(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Func`2<RetryPredicateArguments`1<TResult>, ValueTask`1<bool>> get_ShouldHandle();
    [CompilerGeneratedAttribute]
public void set_ShouldHandle(Func`2<RetryPredicateArguments`1<TResult>, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<RetryDelayGeneratorArguments`1<TResult>, ValueTask`1<Nullable`1<TimeSpan>>> get_DelayGenerator();
    [CompilerGeneratedAttribute]
public void set_DelayGenerator(Func`2<RetryDelayGeneratorArguments`1<TResult>, ValueTask`1<Nullable`1<TimeSpan>>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnRetryArguments`1<TResult>, ValueTask> get_OnRetry();
    [CompilerGeneratedAttribute]
public void set_OnRetry(Func`2<OnRetryArguments`1<TResult>, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`1<double> get_Randomizer();
    [CompilerGeneratedAttribute]
public void set_Randomizer(Func`1<double> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.RetryResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
[DynamicDependencyAttribute("-1", "Polly.Retry.RetryStrategyOptions")]
public static ResiliencePipelineBuilder AddRetry(ResiliencePipelineBuilder builder, RetryStrategyOptions options);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddRetry(ResiliencePipelineBuilder`1<TResult> builder, RetryStrategyOptions`1<TResult> options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Behavior.BehaviorGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public BehaviorGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Simmy.Behavior.ChaosBehaviorConstants : object {
    public static string DefaultName;
    public static string OnBehaviorInjectedEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Simmy.Behavior.ChaosBehaviorStrategy : ChaosStrategy {
    private ResilienceStrategyTelemetry _telemetry;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<OnBehaviorInjectedArguments, ValueTask> <OnBehaviorInjected>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<BehaviorGeneratorArguments, ValueTask> <Behavior>k__BackingField;
    [NullableAttribute("2")]
public Func`2<OnBehaviorInjectedArguments, ValueTask> OnBehaviorInjected { get; }
    public Func`2<BehaviorGeneratorArguments, ValueTask> Behavior { get; }
    public ChaosBehaviorStrategy(ChaosBehaviorStrategyOptions options, ResilienceStrategyTelemetry telemetry);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<OnBehaviorInjectedArguments, ValueTask> get_OnBehaviorInjected();
    [CompilerGeneratedAttribute]
public Func`2<BehaviorGeneratorArguments, ValueTask> get_Behavior();
    [AsyncStateMachineAttribute("Polly.Simmy.Behavior.ChaosBehaviorStrategy/<ExecuteCore>d__8`2")]
protected internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.Simmy.Behavior.ChaosBehaviorStrategyOptions : ChaosStrategyOptions {
    [CompilerGeneratedAttribute]
private Func`2<OnBehaviorInjectedArguments, ValueTask> <OnBehaviorInjected>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<BehaviorGeneratorArguments, ValueTask> <BehaviorGenerator>k__BackingField;
    public Func`2<OnBehaviorInjectedArguments, ValueTask> OnBehaviorInjected { get; public set; }
    [RequiredAttribute]
public Func`2<BehaviorGeneratorArguments, ValueTask> BehaviorGenerator { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<OnBehaviorInjectedArguments, ValueTask> get_OnBehaviorInjected();
    [CompilerGeneratedAttribute]
public void set_OnBehaviorInjected(Func`2<OnBehaviorInjectedArguments, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<BehaviorGeneratorArguments, ValueTask> get_BehaviorGenerator();
    [CompilerGeneratedAttribute]
public void set_BehaviorGenerator(Func`2<BehaviorGeneratorArguments, ValueTask> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Behavior.OnBehaviorInjectedArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public OnBehaviorInjectedArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.Simmy.ChaosBehaviorPipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddChaosBehavior(TBuilder builder, double injectionRate, Func`2<CancellationToken, ValueTask> behavior);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddChaosBehavior(TBuilder builder, ChaosBehaviorStrategyOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.Simmy.ChaosFaultPipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddChaosFault(TBuilder builder, double injectionRate, Func`1<Exception> faultGenerator);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddChaosFault(TBuilder builder, ChaosFaultStrategyOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.Simmy.ChaosLatencyPipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddChaosLatency(TBuilder builder, double injectionRate, TimeSpan latency);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddChaosLatency(TBuilder builder, ChaosLatencyStrategyOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.Simmy.ChaosOutcomePipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static ResiliencePipelineBuilder`1<TResult> AddChaosOutcome(ResiliencePipelineBuilder`1<TResult> builder, double injectionRate, Func`1<TResult> resultGenerator);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static ResiliencePipelineBuilder`1<TResult> AddChaosOutcome(ResiliencePipelineBuilder`1<TResult> builder, ChaosOutcomeStrategyOptions`1<TResult> options);
}
public abstract class Polly.Simmy.ChaosStrategy : ResilienceStrategy {
    [NullableAttribute("1")]
private Func`1<double> _randomizer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> <InjectionRateGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> <EnabledGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> InjectionRateGenerator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> EnabledGenerator { get; }
    [NullableContextAttribute("1")]
protected ChaosStrategy(ChaosStrategyOptions options);
    [CompilerGeneratedAttribute]
internal Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> get_InjectionRateGenerator();
    [CompilerGeneratedAttribute]
internal Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> get_EnabledGenerator();
    [AsyncStateMachineAttribute("Polly.Simmy.ChaosStrategy/<ShouldInjectAsync>d__8")]
protected ValueTask`1<bool> ShouldInjectAsync(ResilienceContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Polly.Simmy.ChaosStrategy`1 : ResilienceStrategy`1<T> {
    private Func`1<double> _randomizer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> <InjectionRateGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> <EnabledGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> InjectionRateGenerator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> EnabledGenerator { get; }
    protected ChaosStrategy`1(ChaosStrategyOptions options);
    [CompilerGeneratedAttribute]
internal Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> get_InjectionRateGenerator();
    [CompilerGeneratedAttribute]
internal Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> get_EnabledGenerator();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Polly.Simmy.ChaosStrategy`1/<ShouldInjectAsync>d__8")]
protected ValueTask`1<bool> ShouldInjectAsync(ResilienceContext context);
}
internal static class Polly.Simmy.ChaosStrategyConstants : object {
    public static double MinInjectionThreshold;
    public static double MaxInjectionThreshold;
    public static double DefaultInjectionRate;
    public static bool DefaultEnabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Polly.Simmy.ChaosStrategyOptions : ResilienceStrategyOptions {
    [CompilerGeneratedAttribute]
private double <InjectionRate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> <InjectionRateGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> <EnabledGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<double> <Randomizer>k__BackingField;
    [RangeAttribute("0", "1")]
public double InjectionRate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> InjectionRateGenerator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> EnabledGenerator { get; public set; }
    public bool Enabled { get; public set; }
    [RequiredAttribute]
public Func`1<double> Randomizer { get; public set; }
    [CompilerGeneratedAttribute]
public double get_InjectionRate();
    [CompilerGeneratedAttribute]
public void set_InjectionRate(double value);
    [CompilerGeneratedAttribute]
public Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> get_InjectionRateGenerator();
    [CompilerGeneratedAttribute]
public void set_InjectionRateGenerator(Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> value);
    [CompilerGeneratedAttribute]
public Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> get_EnabledGenerator();
    [CompilerGeneratedAttribute]
public void set_EnabledGenerator(Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public Func`1<double> get_Randomizer();
    [CompilerGeneratedAttribute]
public void set_Randomizer(Func`1<double> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.EnabledGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public EnabledGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Simmy.Fault.ChaosFaultConstants : object {
    public static string DefaultName;
    public static string OnFaultInjectedEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Simmy.Fault.ChaosFaultStrategy : ChaosStrategy {
    private ResilienceStrategyTelemetry _telemetry;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<OnFaultInjectedArguments, ValueTask> <OnFaultInjected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> <FaultGenerator>k__BackingField;
    [NullableAttribute("2")]
public Func`2<OnFaultInjectedArguments, ValueTask> OnFaultInjected { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> FaultGenerator { get; }
    public ChaosFaultStrategy(ChaosFaultStrategyOptions options, ResilienceStrategyTelemetry telemetry);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<OnFaultInjectedArguments, ValueTask> get_OnFaultInjected();
    [CompilerGeneratedAttribute]
public Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> get_FaultGenerator();
    [AsyncStateMachineAttribute("Polly.Simmy.Fault.ChaosFaultStrategy/<ExecuteCore>d__8`2")]
protected internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.Simmy.Fault.ChaosFaultStrategyOptions : ChaosStrategyOptions {
    [CompilerGeneratedAttribute]
private Func`2<OnFaultInjectedArguments, ValueTask> <OnFaultInjected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> <FaultGenerator>k__BackingField;
    public Func`2<OnFaultInjectedArguments, ValueTask> OnFaultInjected { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> FaultGenerator { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<OnFaultInjectedArguments, ValueTask> get_OnFaultInjected();
    [CompilerGeneratedAttribute]
public void set_OnFaultInjected(Func`2<OnFaultInjectedArguments, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> get_FaultGenerator();
    [CompilerGeneratedAttribute]
public void set_FaultGenerator(Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Simmy.Fault.FaultGenerator : object {
    private static int DefaultWeight;
    private GeneratorHelper`1<VoidResult> _helper;
    public FaultGenerator AddException(Func`1<Exception> generator, int weight);
    public FaultGenerator AddException(Func`2<ResilienceContext, Exception> generator, int weight);
    public FaultGenerator AddException(int weight);
    [EditorBrowsableAttribute("1")]
public static Func`2<FaultGeneratorArguments, ValueTask`1<Exception>> op_Implicit(FaultGenerator generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Fault.FaultGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public FaultGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Fault.OnFaultInjectedArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Fault>k__BackingField;
    public ResilienceContext Context { get; }
    public Exception Fault { get; }
    public OnFaultInjectedArguments(ResilienceContext context, Exception fault);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public Exception get_Fault();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.InjectionRateGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public InjectionRateGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Simmy.Latency.ChaosLatencyConstants : object {
    public static string DefaultName;
    public static string OnLatencyInjectedEvent;
    public static TimeSpan DefaultLatency;
    private static ChaosLatencyConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Simmy.Latency.ChaosLatencyStrategy : ChaosStrategy {
    private TimeProvider _timeProvider;
    private ResilienceStrategyTelemetry _telemetry;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<OnLatencyInjectedArguments, ValueTask> <OnLatencyInjected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> <LatencyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Latency>k__BackingField;
    [NullableAttribute("2")]
public Func`2<OnLatencyInjectedArguments, ValueTask> OnLatencyInjected { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> LatencyGenerator { get; }
    public Nullable`1<TimeSpan> Latency { get; }
    public ChaosLatencyStrategy(ChaosLatencyStrategyOptions options, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<OnLatencyInjectedArguments, ValueTask> get_OnLatencyInjected();
    [CompilerGeneratedAttribute]
public Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> get_LatencyGenerator();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Latency();
    [AsyncStateMachineAttribute("Polly.Simmy.Latency.ChaosLatencyStrategy/<ExecuteCore>d__12`2")]
protected internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.Simmy.Latency.ChaosLatencyStrategyOptions : ChaosStrategyOptions {
    [CompilerGeneratedAttribute]
private Func`2<OnLatencyInjectedArguments, ValueTask> <OnLatencyInjected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> <LatencyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Latency>k__BackingField;
    public Func`2<OnLatencyInjectedArguments, ValueTask> OnLatencyInjected { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> LatencyGenerator { get; public set; }
    public TimeSpan Latency { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<OnLatencyInjectedArguments, ValueTask> get_OnLatencyInjected();
    [CompilerGeneratedAttribute]
public void set_OnLatencyInjected(Func`2<OnLatencyInjectedArguments, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> get_LatencyGenerator();
    [CompilerGeneratedAttribute]
public void set_LatencyGenerator(Func`2<LatencyGeneratorArguments, ValueTask`1<TimeSpan>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Latency.LatencyGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public LatencyGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Latency.OnLatencyInjectedArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Latency>k__BackingField;
    public ResilienceContext Context { get; }
    public TimeSpan Latency { get; }
    public OnLatencyInjectedArguments(ResilienceContext context, TimeSpan latency);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public TimeSpan get_Latency();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Simmy.Outcomes.ChaosOutcomeConstants : object {
    public static string DefaultName;
    public static string OnOutcomeInjectedEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Polly.Simmy.Outcomes.ChaosOutcomeStrategy`1 : ChaosStrategy`1<T> {
    private ResilienceStrategyTelemetry _telemetry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<OnOutcomeInjectedArguments`1<T>, ValueTask> _onOutcomeInjected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<T>>>> _outcomeGenerator;
    public ChaosOutcomeStrategy`1(ChaosOutcomeStrategyOptions`1<T> options, ResilienceStrategyTelemetry telemetry);
    [AsyncStateMachineAttribute("Polly.Simmy.Outcomes.ChaosOutcomeStrategy`1/<ExecuteCore>d__4`1")]
protected internal virtual ValueTask`1<Outcome`1<T>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<T>>> callback, ResilienceContext context, TState state);
}
public class Polly.Simmy.Outcomes.ChaosOutcomeStrategyOptions`1 : ChaosStrategyOptions {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OnOutcomeInjectedArguments`1<TResult>, ValueTask> <OnOutcomeInjected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<TResult>>>> <OutcomeGenerator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<OnOutcomeInjectedArguments`1<TResult>, ValueTask> OnOutcomeInjected { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<TResult>>>> OutcomeGenerator { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<OnOutcomeInjectedArguments`1<TResult>, ValueTask> get_OnOutcomeInjected();
    [CompilerGeneratedAttribute]
public void set_OnOutcomeInjected(Func`2<OnOutcomeInjectedArguments`1<TResult>, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<TResult>>>> get_OutcomeGenerator();
    [CompilerGeneratedAttribute]
public void set_OutcomeGenerator(Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<TResult>>>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Outcomes.OnOutcomeInjectedArguments`1 : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Outcome`1<TResult> <Outcome>k__BackingField;
    public ResilienceContext Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public OnOutcomeInjectedArguments`1(ResilienceContext context, Outcome`1<TResult> outcome);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public Outcome`1<TResult> get_Outcome();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Simmy.Outcomes.OutcomeGenerator`1 : object {
    private static int DefaultWeight;
    private GeneratorHelper`1<TResult> _helper;
    internal OutcomeGenerator`1(Func`2<int, int> weightGenerator);
    public OutcomeGenerator`1<TResult> AddException(Func`1<Exception> generator, int weight);
    public OutcomeGenerator`1<TResult> AddException(Func`2<ResilienceContext, Exception> generator, int weight);
    public OutcomeGenerator`1<TResult> AddException(int weight);
    public OutcomeGenerator`1<TResult> AddResult(Func`1<TResult> generator, int weight);
    public OutcomeGenerator`1<TResult> AddResult(Func`2<ResilienceContext, TResult> generator, int weight);
    [EditorBrowsableAttribute("1")]
public static Func`2<OutcomeGeneratorArguments, ValueTask`1<Nullable`1<Outcome`1<TResult>>>> op_Implicit(OutcomeGenerator`1<TResult> generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Simmy.Outcomes.OutcomeGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public OutcomeGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
internal static class Polly.Simmy.Utils.ChaosStrategyHelper : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Simmy.Utils.ChaosStrategyHelper/<ShouldInjectAsync>d__0")]
public static ValueTask`1<bool> ShouldInjectAsync(ResilienceContext context, Func`2<InjectionRateGeneratorArguments, ValueTask`1<double>> injectionRateGenerator, Func`2<EnabledGeneratorArguments, ValueTask`1<bool>> enabledGenerator, Func`1<double> randomizer);
    private static double CoerceInjectionThreshold(double injectionThreshold);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Simmy.Utils.GeneratorHelper`1 : object {
    private Func`2<int, int> _weightGenerator;
    private List`1<int> _weights;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Func`2<ResilienceContext, Outcome`1<TResult>>> _factories;
    private int _totalWeight;
    public GeneratorHelper`1(Func`2<int, int> weightGenerator);
    public void AddOutcome(Func`2<ResilienceContext, Outcome`1<TResult>> generator, int weight);
    internal Func`2<ResilienceContext, Nullable`1<Outcome`1<TResult>>> CreateGenerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.StrategyBuilderContext : object {
    [CompilerGeneratedAttribute]
private ResilienceStrategyTelemetry <Telemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeProvider <TimeProvider>k__BackingField;
    public ResilienceStrategyTelemetry Telemetry { get; }
    public TimeProvider TimeProvider { get; }
    internal StrategyBuilderContext(ResilienceStrategyTelemetry telemetry, TimeProvider timeProvider);
    [CompilerGeneratedAttribute]
public ResilienceStrategyTelemetry get_Telemetry();
    [CompilerGeneratedAttribute]
public TimeProvider get_TimeProvider();
}
[IsReadOnlyAttribute]
public class Polly.Telemetry.ExecutionAttemptArguments : ValueType {
    [CompilerGeneratedAttribute]
private int <AttemptNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public int AttemptNumber { get; }
    public TimeSpan Duration { get; }
    public bool Handled { get; }
    public ExecutionAttemptArguments(int attemptNumber, TimeSpan duration, bool handled);
    [CompilerGeneratedAttribute]
public int get_AttemptNumber();
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public bool get_Handled();
}
[IsReadOnlyAttribute]
public class Polly.Telemetry.PipelineExecutedArguments : ValueType {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    public PipelineExecutedArguments(TimeSpan duration);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
}
[IsReadOnlyAttribute]
public class Polly.Telemetry.PipelineExecutingArguments : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Telemetry.ResilienceEvent : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceEventSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    public ResilienceEventSeverity Severity { get; }
    public string EventName { get; }
    public ResilienceEvent(ResilienceEventSeverity severity, string eventName);
    [CompilerGeneratedAttribute]
public ResilienceEventSeverity get_Severity();
    [CompilerGeneratedAttribute]
public string get_EventName();
    public virtual string ToString();
}
public enum Polly.Telemetry.ResilienceEventSeverity : Enum {
    public int value__;
    public static ResilienceEventSeverity None;
    public static ResilienceEventSeverity Debug;
    public static ResilienceEventSeverity Information;
    public static ResilienceEventSeverity Warning;
    public static ResilienceEventSeverity Error;
    public static ResilienceEventSeverity Critical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Telemetry.ResilienceStrategyTelemetry : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TelemetryListener <Listener>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceTelemetrySource <TelemetrySource>k__BackingField;
    internal bool Enabled { get; }
    [NullableAttribute("2")]
internal TelemetryListener Listener { get; }
    internal ResilienceTelemetrySource TelemetrySource { get; }
    internal ResilienceStrategyTelemetry(ResilienceTelemetrySource source, TelemetryListener listener);
    [CompilerGeneratedAttribute]
internal bool get_Enabled();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TelemetryListener get_Listener();
    [CompilerGeneratedAttribute]
internal ResilienceTelemetrySource get_TelemetrySource();
    public void Report(ResilienceEvent resilienceEvent, ResilienceContext context, TArgs args);
    public void Report(ResilienceEvent resilienceEvent, ResilienceContext context, Outcome`1<TResult> outcome, TArgs args);
    internal void Report(ResilienceEvent resilienceEvent, TArgs args);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.Telemetry.ResilienceTelemetrySource : object {
    [CompilerGeneratedAttribute]
private string <PipelineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipelineInstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StrategyName>k__BackingField;
    public string PipelineName { get; }
    public string PipelineInstanceName { get; }
    public string StrategyName { get; }
    public ResilienceTelemetrySource(string pipelineName, string pipelineInstanceName, string strategyName);
    [CompilerGeneratedAttribute]
public string get_PipelineName();
    [CompilerGeneratedAttribute]
public string get_PipelineInstanceName();
    [CompilerGeneratedAttribute]
public string get_StrategyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Telemetry.TelemetryEventArguments`2 : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceTelemetrySource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TArgs <Arguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<Outcome`1<TResult>> <Outcome>k__BackingField;
    public ResilienceTelemetrySource Source { get; }
    public ResilienceEvent Event { get; }
    public ResilienceContext Context { get; }
    public TArgs Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Outcome`1<TResult>> Outcome { get; }
    public TelemetryEventArguments`2(ResilienceTelemetrySource source, ResilienceEvent resilienceEvent, ResilienceContext context, TArgs args, Nullable`1<Outcome`1<TResult>> outcome);
    [CompilerGeneratedAttribute]
public ResilienceTelemetrySource get_Source();
    [CompilerGeneratedAttribute]
public ResilienceEvent get_Event();
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public TArgs get_Arguments();
    [CompilerGeneratedAttribute]
public Nullable`1<Outcome`1<TResult>> get_Outcome();
}
public abstract class Polly.Telemetry.TelemetryListener : object {
    [NullableContextAttribute("2")]
public abstract virtual void Write(TelemetryEventArguments`2& modreq(System.Runtime.InteropServices.InAttribute) args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Telemetry.TelemetryUtil : object {
    internal static string PollyDiagnosticSource;
    internal static string ExecutionAttempt;
    internal static string PipelineExecuting;
    internal static string PipelineExecuted;
    public static void ReportExecutionAttempt(ResilienceStrategyTelemetry telemetry, ResilienceContext context, Outcome`1<TResult> outcome, int attempt, TimeSpan executionTime, bool handled);
    public static void ReportFinalExecutionAttempt(ResilienceStrategyTelemetry telemetry, ResilienceContext context, Outcome`1<TResult> outcome, int attempt, TimeSpan executionTime, bool handled);
    private static void ReportAttempt(ResilienceStrategyTelemetry telemetry, ResilienceEvent resilienceEvent, ResilienceContext context, Outcome`1<TResult> outcome, ExecutionAttemptArguments args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Timeout.OnTimeoutArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public ResilienceContext Context { get; }
    public TimeSpan Timeout { get; }
    public OnTimeoutArguments(ResilienceContext context, TimeSpan timeout);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Timeout.TimeoutConstants : object {
    public static string DefaultName;
    public static string OnTimeoutEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.Timeout.TimeoutGeneratorArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public TimeoutGeneratorArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Timeout.TimeoutRejectedException : ExecutionRejectedException {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; private set; }
    public TimeoutRejectedException(string message);
    public TimeoutRejectedException(string message, Exception innerException);
    public TimeoutRejectedException(TimeSpan timeout);
    public TimeoutRejectedException(string message, TimeSpan timeout);
    public TimeoutRejectedException(string message, TimeSpan timeout, Exception innerException);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
private void set_Timeout(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Timeout.TimeoutResilienceStrategy : ResilienceStrategy {
    private ResilienceStrategyTelemetry _telemetry;
    private CancellationTokenSourcePool _cancellationTokenSourcePool;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultTimeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> <TimeoutGenerator>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<OnTimeoutArguments, ValueTask> <OnTimeout>k__BackingField;
    public TimeSpan DefaultTimeout { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> TimeoutGenerator { get; }
    [NullableAttribute("2")]
public Func`2<OnTimeoutArguments, ValueTask> OnTimeout { get; }
    public TimeoutResilienceStrategy(TimeoutStrategyOptions options, TimeProvider timeProvider, ResilienceStrategyTelemetry telemetry);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultTimeout();
    [CompilerGeneratedAttribute]
public Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> get_TimeoutGenerator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<OnTimeoutArguments, ValueTask> get_OnTimeout();
    [AsyncStateMachineAttribute("Polly.Timeout.TimeoutResilienceStrategy/<ExecuteCore>d__12`2")]
protected internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    private static CancellationTokenRegistration CreateRegistration(CancellationTokenSource cancellationSource, CancellationToken previousToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Polly.Timeout.TimeoutStrategyOptions : ResilienceStrategyOptions {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> <TimeoutGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<OnTimeoutArguments, ValueTask> <OnTimeout>k__BackingField;
    [RangeAttribute("System.TimeSpan", "00:00:00.010", "1.00:00:00")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
public TimeSpan Timeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> TimeoutGenerator { get; public set; }
    public Func`2<OnTimeoutArguments, ValueTask> OnTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> get_TimeoutGenerator();
    [CompilerGeneratedAttribute]
public void set_TimeoutGenerator(Func`2<TimeoutGeneratorArguments, ValueTask`1<TimeSpan>> value);
    [CompilerGeneratedAttribute]
public Func`2<OnTimeoutArguments, ValueTask> get_OnTimeout();
    [CompilerGeneratedAttribute]
public void set_OnTimeout(Func`2<OnTimeoutArguments, ValueTask> value);
}
internal static class Polly.Timeout.TimeoutUtil : object {
    [NullableAttribute("1")]
public static string TimeSpanInvalidMessage;
    public static bool ShouldApplyTimeout(TimeSpan timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.TimeoutResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddTimeout(TBuilder builder, TimeSpan timeout);
    [ExtensionAttribute]
[DynamicDependencyAttribute("-1", "Polly.Timeout.TimeoutStrategyOptions")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddTimeout(TBuilder builder, TimeoutStrategyOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Polly.Utils.CancellationTokenSourcePool : object {
    public static CancellationTokenSourcePool Create(TimeProvider timeProvider);
    public CancellationTokenSource Get(TimeSpan delay);
    protected abstract virtual CancellationTokenSource GetCore(TimeSpan delay);
    public abstract virtual void Return(CancellationTokenSource source);
    protected static bool IsCancellable(TimeSpan delay);
}
internal static class Polly.Utils.Constants : object {
    [NullableAttribute("1")]
public static string OptionsValidation;
}
internal static class Polly.Utils.DefaultPredicates`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`2<TArgs, ValueTask`1<bool>> HandleOutcome;
    private static DefaultPredicates`2();
}
internal enum Polly.Utils.DisposeBehavior : Enum {
    public int value__;
    public static DisposeBehavior Ignore;
    public static DisposeBehavior Allow;
    public static DisposeBehavior Reject;
}
internal static class Polly.Utils.DisposeHelper : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Utils.DisposeHelper/<TryDisposeSafeAsync>d__0`1")]
public static ValueTask TryDisposeSafeAsync(T value, bool isSynchronous);
}
[ExtensionAttribute]
internal static class Polly.Utils.ExceptionUtilities : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T TrySetStackTrace(T exception);
}
[ExcludeFromCodeCoverageAttribute]
internal static class Polly.Utils.Guard : object {
    [NullableContextAttribute("1")]
public static T NotNull(T value, string argumentName);
}
[NullableContextAttribute("1")]
internal interface Polly.Utils.IOutcomeArguments`1 {
    public ResilienceContext Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Outcome`1<TResult> Outcome { get; }
    public abstract virtual ResilienceContext get_Context();
    public abstract virtual Outcome`1<TResult> get_Outcome();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.ObjectPool`1 : object {
    internal static int MaxCapacity;
    private Func`2<ObjectPool`1<T>, T> _createFunc;
    private Func`2<T, bool> _returnFunc;
    private ConcurrentQueue`1<T> _items;
    [NullableAttribute("2")]
private T _fastItem;
    private int _numItems;
    public ObjectPool`1(Func`1<T> createFunc, Action`1<T> reset);
    public ObjectPool`1(Func`1<T> createFunc, Func`2<T, bool> returnFunc);
    public ObjectPool`1(Func`2<ObjectPool`1<T>, T> createFunc, Func`2<T, bool> returnFunc);
    private static ObjectPool`1();
    public T Get();
    public void Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Strategy}")]
internal class Polly.Utils.Pipeline.BridgeComponent : BridgeComponentBase {
    [CompilerGeneratedAttribute]
private ResilienceStrategy <Strategy>k__BackingField;
    public ResilienceStrategy Strategy { get; }
    public BridgeComponent(ResilienceStrategy strategy);
    [CompilerGeneratedAttribute]
public ResilienceStrategy get_Strategy();
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Strategy}")]
internal class Polly.Utils.Pipeline.BridgeComponent`1 : BridgeComponentBase {
    [CompilerGeneratedAttribute]
private ResilienceStrategy`1<T> <Strategy>k__BackingField;
    public ResilienceStrategy`1<T> Strategy { get; }
    public BridgeComponent`1(ResilienceStrategy`1<T> strategy);
    [CompilerGeneratedAttribute]
public ResilienceStrategy`1<T> get_Strategy();
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    private static ValueTask`1<Outcome`1<TTo>> ConvertValueTask(ValueTask`1<Outcome`1<T>> valueTask, ResilienceContext resilienceContext);
    [NullableContextAttribute("2")]
private static Outcome`1<TTo> ConvertOutcome(Outcome`1<TFrom> outcome);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Polly.Utils.Pipeline.BridgeComponent`1/<<ConvertValueTask>g__ConvertValueTaskAsync|5_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<Outcome`1<TTo>> <ConvertValueTask>g__ConvertValueTaskAsync|5_0(ValueTask`1<Outcome`1<T>> valueTask, ResilienceContext resilienceContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Polly.Utils.Pipeline.BridgeComponentBase : PipelineComponent {
    private object _strategy;
    protected BridgeComponentBase(object strategy);
    public virtual ValueTask DisposeAsync();
}
internal class Polly.Utils.Pipeline.ComponentDisposeHelper : object {
    [NullableAttribute("1")]
private PipelineComponent _component;
    private DisposeBehavior _disposeBehavior;
    private bool _disposed;
    [NullableContextAttribute("1")]
public ComponentDisposeHelper(PipelineComponent component, DisposeBehavior disposeBehavior);
    public sealed virtual ValueTask DisposeAsync();
    public void EnsureNotDisposed();
    public ValueTask ForceDisposeAsync();
    private bool EnsureDisposable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.Pipeline.ComponentWithDisposeCallbacks : PipelineComponent {
    private List`1<Action> _callbacks;
    [CompilerGeneratedAttribute]
private PipelineComponent <Component>k__BackingField;
    internal PipelineComponent Component { get; }
    public ComponentWithDisposeCallbacks(PipelineComponent component, List`1<Action> callbacks);
    [CompilerGeneratedAttribute]
internal PipelineComponent get_Component();
    public virtual ValueTask DisposeAsync();
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    private void ExecuteCallbacks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Pipeline, Strategies = {Components.Count}")]
[DebuggerTypeProxyAttribute("Polly.Utils.Pipeline.CompositeComponentDebuggerProxy")]
internal class Polly.Utils.Pipeline.CompositeComponent : PipelineComponent {
    private ResilienceStrategyTelemetry _telemetry;
    private TimeProvider _timeProvider;
    [CompilerGeneratedAttribute]
private PipelineComponent <FirstComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PipelineComponent> <Components>k__BackingField;
    internal PipelineComponent FirstComponent { get; }
    public IReadOnlyList`1<PipelineComponent> Components { get; }
    private CompositeComponent(PipelineComponent first, IReadOnlyList`1<PipelineComponent> components, ResilienceStrategyTelemetry telemetry, TimeProvider timeProvider);
    [CompilerGeneratedAttribute]
internal PipelineComponent get_FirstComponent();
    public static PipelineComponent Create(IReadOnlyList`1<PipelineComponent> components, ResilienceStrategyTelemetry telemetry, TimeProvider timeProvider);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PipelineComponent> get_Components();
    [AsyncStateMachineAttribute("Polly.Utils.Pipeline.CompositeComponent/<DisposeAsync>d__10")]
public virtual ValueTask DisposeAsync();
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    private ValueTask`1<Outcome`1<TResult>> ExecuteCoreWithoutTelemetry(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.Utils.Pipeline.CompositeComponent/<ExecuteCoreWithTelemetry>d__13`2")]
private ValueTask`1<Outcome`1<TResult>> ExecuteCoreWithTelemetry(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.Pipeline.CompositeComponentDebuggerProxy : object {
    private CompositeComponent _pipeline;
    [DebuggerBrowsableAttribute("3")]
public IEnumerable`1<PipelineComponent> Strategies { get; }
    public CompositeComponentDebuggerProxy(CompositeComponent pipeline);
    public IEnumerable`1<PipelineComponent> get_Strategies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.Pipeline.DelegatingComponent : PipelineComponent {
    private PipelineComponent _component;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PipelineComponent <Next>k__BackingField;
    [NullableAttribute("2")]
public PipelineComponent Next { get; public set; }
    public DelegatingComponent(PipelineComponent component);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PipelineComponent get_Next();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Next(PipelineComponent value);
    public virtual ValueTask DisposeAsync();
    [ExcludeFromCodeCoverageAttribute]
internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    private static ValueTask`1<Outcome`1<TResult>> ExecuteNext(PipelineComponent next, Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    internal ValueTask`1<Outcome`1<TResult>> ExecuteComponent(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    internal ValueTask`1<Outcome`1<TResult>> ExecuteComponentAot(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.Pipeline.ExecutionTrackingComponent : PipelineComponent {
    public static TimeSpan Timeout;
    public static TimeSpan SleepDelay;
    private TimeProvider _timeProvider;
    private int _pendingExecutions;
    [CompilerGeneratedAttribute]
private PipelineComponent <Component>k__BackingField;
    public PipelineComponent Component { get; }
    public bool HasPendingExecutions { get; }
    public ExecutionTrackingComponent(PipelineComponent component, TimeProvider timeProvider);
    private static ExecutionTrackingComponent();
    [CompilerGeneratedAttribute]
public PipelineComponent get_Component();
    public bool get_HasPendingExecutions();
    [AsyncStateMachineAttribute("Polly.Utils.Pipeline.ExecutionTrackingComponent/<ExecuteCore>d__10`2")]
internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.Utils.Pipeline.ExecutionTrackingComponent/<DisposeAsync>d__11")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Component}")]
internal class Polly.Utils.Pipeline.ExternalComponent : PipelineComponent {
    [CompilerGeneratedAttribute]
private PipelineComponent <Component>k__BackingField;
    internal PipelineComponent Component { get; }
    public ExternalComponent(PipelineComponent component);
    [CompilerGeneratedAttribute]
internal PipelineComponent get_Component();
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Polly.Utils.Pipeline.PipelineComponent : object {
    [CompilerGeneratedAttribute]
private static PipelineComponent <Empty>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResilienceStrategyOptions <Options>k__BackingField;
    public static PipelineComponent Empty { get; }
    [NullableAttribute("2")]
internal ResilienceStrategyOptions Options { get; internal set; }
    private static PipelineComponent();
    [CompilerGeneratedAttribute]
public static PipelineComponent get_Empty();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ResilienceStrategyOptions get_Options();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Options(ResilienceStrategyOptions value);
    internal abstract virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    internal Outcome`1<TResult> ExecuteCoreSync(Func`3<ResilienceContext, TState, Outcome`1<TResult>> callback, ResilienceContext context, TState state);
    public abstract virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.Utils.Pipeline.PipelineComponentFactory : object {
    public static PipelineComponent FromPipeline(ResiliencePipeline pipeline);
    public static PipelineComponent FromPipeline(ResiliencePipeline`1<T> pipeline);
    public static PipelineComponent FromStrategy(ResilienceStrategy strategy);
    public static PipelineComponent FromStrategy(ResilienceStrategy`1<T> strategy);
    public static PipelineComponent WithDisposableCallbacks(PipelineComponent component, IEnumerable`1<Action> callbacks);
    public static PipelineComponent WithExecutionTracking(PipelineComponent component, TimeProvider timeProvider);
    public static PipelineComponent CreateComposite(IReadOnlyList`1<PipelineComponent> components, ResilienceStrategyTelemetry telemetry, TimeProvider timeProvider);
    public static PipelineComponent CreateReloadable(Entry initial, Func`1<Entry> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.Pipeline.ReloadableComponent : PipelineComponent {
    public static string ReloadFailedEvent;
    public static string DisposeFailedEvent;
    public static string OnReloadEvent;
    private Func`1<Entry> _factory;
    private ResilienceStrategyTelemetry _telemetry;
    private CancellationTokenSource _tokenSource;
    private CancellationTokenRegistration _registration;
    private List`1<CancellationToken> _reloadTokens;
    [CompilerGeneratedAttribute]
private PipelineComponent <Component>k__BackingField;
    public PipelineComponent Component { get; private set; }
    public ReloadableComponent(Entry entry, Func`1<Entry> factory);
    [CompilerGeneratedAttribute]
public PipelineComponent get_Component();
    [CompilerGeneratedAttribute]
private void set_Component(PipelineComponent value);
    internal virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    public virtual ValueTask DisposeAsync();
    private void TryRegisterOnReload();
    [AsyncStateMachineAttribute("Polly.Utils.Pipeline.ReloadableComponent/<DisposeDiscardedComponentSafeAsync>d__16")]
private Task DisposeDiscardedComponentSafeAsync(PipelineComponent component);
    private void DisposeRegistration();
    [CompilerGeneratedAttribute]
private void <TryRegisterOnReload>b__15_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utils.RandomUtil : object {
    private ThreadLocal`1<Random> _random;
    public static RandomUtil Instance;
    public RandomUtil(Nullable`1<int> seed);
    private static RandomUtil();
    public double NextDouble();
    public int Next(int maxValue);
}
internal static class Polly.Utils.StrategyHelper : object {
    [NullableContextAttribute("1")]
public static ValueTask`1<Outcome`1<TResult>> ExecuteCallbackSafeAsync(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
    [AsyncStateMachineAttribute("Polly.Utils.StrategyHelper/<<ExecuteCallbackSafeAsync>g__AwaitTask|0_0>d`3")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<Outcome`1<T>> <ExecuteCallbackSafeAsync>g__AwaitTask|0_0(ValueTask`1<Outcome`1<T>> task, bool continueOnCapturedContext);
}
[ExtensionAttribute]
internal static class Polly.Utils.TaskHelper : object {
    [ExtensionAttribute]
public static void GetResult(ValueTask`1<VoidResult> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TResult GetResult(ValueTask`1<TResult> task);
}
[ExtensionAttribute]
internal static class Polly.Utils.TimeProviderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task DelayAsync(TimeProvider timeProvider, TimeSpan delay, ResilienceContext context);
}
internal static class Polly.Utils.TypeNameFormatter : object {
    private static int GenericSuffixLength;
    [NullableContextAttribute("1")]
public static string Format(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Polly.Utils.ValidationHelper : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static String[] GetMemberName(ValidationContext validationContext);
    [ExtensionAttribute]
public static string GetDisplayName(ValidationContext validationContext);
    [DynamicDependencyAttribute("-1", "System.TimeSpan")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static void ValidateObject(ResilienceValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.VoidResult : object {
    public static VoidResult Instance;
    private static VoidResult();
    public virtual string ToString();
}
