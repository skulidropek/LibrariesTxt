[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.RateLimiterResiliencePipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddConcurrencyLimiter(TBuilder builder, int permitLimit, int queueLimit);
    [ExtensionAttribute]
public static TBuilder AddConcurrencyLimiter(TBuilder builder, ConcurrencyLimiterOptions options);
    [ExtensionAttribute]
public static TBuilder AddRateLimiter(TBuilder builder, RateLimiter limiter);
    [ExtensionAttribute]
[DynamicDependencyAttribute("-1", "Polly.RateLimiting.RateLimiterStrategyOptions")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
public static TBuilder AddRateLimiter(TBuilder builder, RateLimiterStrategyOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.RateLimiting.DisposeWrapper : object {
    [CompilerGeneratedAttribute]
private RateLimiter <Limiter>k__BackingField;
    public RateLimiter Limiter { get; }
    internal DisposeWrapper(RateLimiter limiter);
    [CompilerGeneratedAttribute]
public RateLimiter get_Limiter();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.RateLimiting.OnRateLimiterRejectedArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimitLease <Lease>k__BackingField;
    public ResilienceContext Context { get; }
    public RateLimitLease Lease { get; }
    public OnRateLimiterRejectedArguments(ResilienceContext context, RateLimitLease lease);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
    [CompilerGeneratedAttribute]
public RateLimitLease get_Lease();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Polly.RateLimiting.RateLimiterArguments : ValueType {
    [CompilerGeneratedAttribute]
private ResilienceContext <Context>k__BackingField;
    public ResilienceContext Context { get; }
    public RateLimiterArguments(ResilienceContext context);
    [CompilerGeneratedAttribute]
public ResilienceContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.RateLimiting.RateLimiterConstants : object {
    public static string DefaultName;
    public static int DefaultPermitLimit;
    public static int DefaultQueueLimit;
    public static string OnRateLimiterRejectedEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.RateLimiting.RateLimiterRejectedException : ExecutionRejectedException {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RetryAfter>k__BackingField;
    public Nullable`1<TimeSpan> RetryAfter { get; }
    public RateLimiterRejectedException(TimeSpan retryAfter);
    public RateLimiterRejectedException(string message);
    public RateLimiterRejectedException(string message, TimeSpan retryAfter);
    public RateLimiterRejectedException(string message, Exception inner);
    public RateLimiterRejectedException(string message, TimeSpan retryAfter, Exception inner);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RetryAfter();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Polly.RateLimiting.RateLimiterResilienceStrategy : ResilienceStrategy {
    [NullableAttribute("1")]
private ResilienceStrategyTelemetry _telemetry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> <Limiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<OnRateLimiterRejectedArguments, ValueTask> <OnLeaseRejected>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposeWrapper <Wrapper>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> Limiter { get; }
    public Func`2<OnRateLimiterRejectedArguments, ValueTask> OnLeaseRejected { get; }
    public DisposeWrapper Wrapper { get; }
    public RateLimiterResilienceStrategy(Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> limiter, Func`2<OnRateLimiterRejectedArguments, ValueTask> onRejected, ResilienceStrategyTelemetry telemetry, DisposeWrapper wrapper);
    [CompilerGeneratedAttribute]
public Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> get_Limiter();
    [CompilerGeneratedAttribute]
public Func`2<OnRateLimiterRejectedArguments, ValueTask> get_OnLeaseRejected();
    [CompilerGeneratedAttribute]
public DisposeWrapper get_Wrapper();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.RateLimiting.RateLimiterResilienceStrategy/<ExecuteCore>d__13`2")]
protected virtual ValueTask`1<Outcome`1<TResult>> ExecuteCore(Func`3<ResilienceContext, TState, ValueTask`1<Outcome`1<TResult>>> callback, ResilienceContext context, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.RateLimiting.RateLimiterStrategyOptions : ResilienceStrategyOptions {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> <RateLimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrencyLimiterOptions <DefaultRateLimiterOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<OnRateLimiterRejectedArguments, ValueTask> <OnRejected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> RateLimiter { get; public set; }
    [RequiredAttribute]
public ConcurrencyLimiterOptions DefaultRateLimiterOptions { get; public set; }
    [NullableAttribute("2")]
public Func`2<OnRateLimiterRejectedArguments, ValueTask> OnRejected { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> get_RateLimiter();
    [CompilerGeneratedAttribute]
public void set_RateLimiter(Func`2<RateLimiterArguments, ValueTask`1<RateLimitLease>> value);
    [CompilerGeneratedAttribute]
public ConcurrencyLimiterOptions get_DefaultRateLimiterOptions();
    [CompilerGeneratedAttribute]
public void set_DefaultRateLimiterOptions(ConcurrencyLimiterOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<OnRateLimiterRejectedArguments, ValueTask> get_OnRejected();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OnRejected(Func`2<OnRateLimiterRejectedArguments, ValueTask> value);
}
[ExtensionAttribute]
internal static class Polly.Utils.ExceptionUtilities : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T TrySetStackTrace(T exception);
}
[ExcludeFromCodeCoverageAttribute]
internal static class Polly.Utils.Guard : object {
    [NullableContextAttribute("1")]
public static T NotNull(T value, string argumentName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
