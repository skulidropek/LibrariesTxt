[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Polly.AdvancedCircuitBreakerSyntax : object {
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy AdvancedCircuitBreaker(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`4<Exception, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.AdvancedCircuitBreakerTResultSyntax : object {
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> AdvancedCircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.AsyncAdvancedCircuitBreakerSyntax : object {
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`4<Exception, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.AsyncAdvancedCircuitBreakerTResultSyntax : object {
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> AdvancedCircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.AsyncCircuitBreakerSyntax : object {
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy CircuitBreakerAsync(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4<Exception, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.AsyncCircuitBreakerTResultSyntax : object {
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static AsyncCircuitBreakerPolicy`1<TResult> CircuitBreakerAsync(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.AsyncFallbackSyntax : object {
    [ExtensionAttribute]
public static AsyncFallbackPolicy FallbackAsync(PolicyBuilder policyBuilder, Func`2<CancellationToken, Task> fallbackAction);
    [ExtensionAttribute]
public static AsyncFallbackPolicy FallbackAsync(PolicyBuilder policyBuilder, Func`2<CancellationToken, Task> fallbackAction, Func`2<Exception, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy FallbackAsync(PolicyBuilder policyBuilder, Func`3<Context, CancellationToken, Task> fallbackAction, Func`3<Exception, Context, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy FallbackAsync(PolicyBuilder policyBuilder, Func`4<Exception, Context, CancellationToken, Task> fallbackAction, Func`3<Exception, Context, Task> onFallbackAsync);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.AsyncFallbackTResultSyntax : object {
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<CancellationToken, Task`1<TResult>> fallbackAction);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue, Func`2<DelegateResult`1<TResult>, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<CancellationToken, Task`1<TResult>> fallbackAction, Func`2<DelegateResult`1<TResult>, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue, Func`3<DelegateResult`1<TResult>, Context, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<Context, CancellationToken, Task`1<TResult>> fallbackAction, Func`3<DelegateResult`1<TResult>, Context, Task> onFallbackAsync);
    [ExtensionAttribute]
public static AsyncFallbackPolicy`1<TResult> FallbackAsync(PolicyBuilder`1<TResult> policyBuilder, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, Task`1<TResult>> fallbackAction, Func`3<DelegateResult`1<TResult>, Context, Task> onFallbackAsync);
}
public abstract class Polly.AsyncPolicy : PolicyBase {
    [NullableContextAttribute("1")]
private protected AsyncPolicy(ExceptionPredicates exceptionPredicates);
    [NullableContextAttribute("2")]
protected AsyncPolicy(PolicyBuilder policyBuilder);
    public AsyncPolicy WithPolicyKey(string policyKey);
    private sealed virtual override IAsyncPolicy Polly.IAsyncPolicy.WithPolicyKey(string policyKey);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`1<Task> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`2<Context, Task> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`2<Context, Task> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`1<Task> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<Context, Task> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<Context, Task> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`1<Task`1<TResult>> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy/<ExecuteInternalAsync>d__40")]
private Task ExecuteInternalAsync(Func`3<Context, CancellationToken, Task> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy/<ExecuteInternalAsync>d__41`1")]
private Task`1<TResult> ExecuteInternalAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy/<ExecuteAndCaptureInternalAsync>d__42")]
private Task`1<PolicyResult> ExecuteAndCaptureInternalAsync(Func`3<Context, CancellationToken, Task> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy/<ExecuteAndCaptureInternalAsync>d__43`1")]
private Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureInternalAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    protected virtual Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    protected abstract virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public AsyncPolicyWrap WrapAsync(IAsyncPolicy innerPolicy);
    public AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy`1<TResult> innerPolicy);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Polly.AsyncPolicy`1 : PolicyBase`1<TResult> {
    [NullableContextAttribute("1")]
private protected AsyncPolicy`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1<TResult> resultPredicates);
    protected AsyncPolicy`1(PolicyBuilder`1<TResult> policyBuilder);
    public AsyncPolicy`1<TResult> WithPolicyKey(string policyKey);
    private sealed virtual override IAsyncPolicy`1<TResult> Polly.IAsyncPolicy<TResult>.WithPolicyKey(string policyKey);
    protected abstract virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`1<Task`1<TResult>> action);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
public sealed virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy`1/<ExecuteInternalAsync>d__23")]
private Task`1<TResult> ExecuteInternalAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Polly.AsyncPolicy`1/<ExecuteAndCaptureInternalAsync>d__24")]
private Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureInternalAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
    public AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy innerPolicy);
    public AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy`1<TResult> innerPolicy);
}
[ExtensionAttribute]
public static class Polly.AsyncRetrySyntax : object {
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, int retryCount);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, Func`3<Exception, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, int retryCount, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`3<Exception, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, Func`4<Exception, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, int retryCount, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`4<Exception, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Action`1<Exception> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Func`2<Exception, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Func`3<Exception, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Action`2<Exception, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Func`3<Exception, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy RetryForeverAsync(PolicyBuilder policyBuilder, Func`4<Exception, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`3<Exception, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`4<Exception, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`5<Exception, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`4<Exception, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`5<Exception, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, int retryCount, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Func`5<Exception, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`3<Exception, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`4<Exception, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`5<Exception, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<Exception, int, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Func`3<Exception, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Func`4<Exception, int, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, int, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`4<Exception, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`5<Exception, int, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Func`4<Exception, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Func`5<Exception, int, TimeSpan, Context, Task> onRetryAsync);
}
[ExtensionAttribute]
public static class Polly.AsyncRetryTResultSyntax : object {
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<DelegateResult`1<TResult>, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<DelegateResult`1<TResult>, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, Func`4<DelegateResult`1<TResult>, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`4<DelegateResult`1<TResult>, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Action`1<DelegateResult`1<TResult>> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<DelegateResult`1<TResult>, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<DelegateResult`1<TResult>, int, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<DelegateResult`1<TResult>, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> RetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`4<DelegateResult`1<TResult>, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`3<DelegateResult`1<TResult>, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`4<DelegateResult`1<TResult>, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`4<DelegateResult`1<TResult>, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`3<DelegateResult`1<TResult>, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`4<DelegateResult`1<TResult>, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryAsync(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, int, TimeSpan> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Func`3<DelegateResult`1<TResult>, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Func`4<DelegateResult`1<TResult>, int, TimeSpan, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, int, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`4<DelegateResult`1<TResult>, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Func`5<DelegateResult`1<TResult>, int, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Func`4<DelegateResult`1<TResult>, TimeSpan, Context, Task> onRetryAsync);
    [ExtensionAttribute]
public static AsyncRetryPolicy`1<TResult> WaitAndRetryForeverAsync(PolicyBuilder`1<TResult> policyBuilder, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Func`5<DelegateResult`1<TResult>, int, TimeSpan, Context, Task> onRetryAsync);
}
internal static class Polly.Bulkhead.AsyncBulkheadEngine : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Bulkhead.AsyncBulkheadEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, Func`2<Context, Task> onBulkheadRejectedAsync, SemaphoreSlim maxParallelizationSemaphore, SemaphoreSlim maxQueuedActionsSemaphore, bool continueOnCapturedContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Bulkhead.AsyncBulkheadPolicy : AsyncPolicy {
    private SemaphoreSlim _maxParallelizationSemaphore;
    private SemaphoreSlim _maxQueuedActionsSemaphore;
    private int _maxQueueingActions;
    private Func`2<Context, Task> _onBulkheadRejectedAsync;
    public int BulkheadAvailableCount { get; }
    public int QueueAvailableCount { get; }
    internal AsyncBulkheadPolicy(int maxParallelization, int maxQueueingActions, Func`2<Context, Task> onBulkheadRejectedAsync);
    public sealed virtual int get_BulkheadAvailableCount();
    public sealed virtual int get_QueueAvailableCount();
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Bulkhead.AsyncBulkheadPolicy`1 : AsyncPolicy`1<TResult> {
    private SemaphoreSlim _maxParallelizationSemaphore;
    private SemaphoreSlim _maxQueuedActionsSemaphore;
    private int _maxQueueingActions;
    private Func`2<Context, Task> _onBulkheadRejectedAsync;
    public int BulkheadAvailableCount { get; }
    public int QueueAvailableCount { get; }
    internal AsyncBulkheadPolicy`1(int maxParallelization, int maxQueueingActions, Func`2<Context, Task> onBulkheadRejectedAsync);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public sealed virtual int get_BulkheadAvailableCount();
    public sealed virtual int get_QueueAvailableCount();
    public sealed virtual void Dispose();
}
internal static class Polly.Bulkhead.BulkheadEngine : object {
    [NullableContextAttribute("1")]
internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, Action`1<Context> onBulkheadRejected, SemaphoreSlim maxParallelizationSemaphore, SemaphoreSlim maxQueuedActionsSemaphore, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Bulkhead.BulkheadPolicy : Policy {
    private SemaphoreSlim _maxParallelizationSemaphore;
    private SemaphoreSlim _maxQueuedActionsSemaphore;
    private int _maxQueueingActions;
    private Action`1<Context> _onBulkheadRejected;
    public int BulkheadAvailableCount { get; }
    public int QueueAvailableCount { get; }
    internal BulkheadPolicy(int maxParallelization, int maxQueueingActions, Action`1<Context> onBulkheadRejected);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public sealed virtual int get_BulkheadAvailableCount();
    public sealed virtual int get_QueueAvailableCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Bulkhead.BulkheadPolicy`1 : Policy`1<TResult> {
    private SemaphoreSlim _maxParallelizationSemaphore;
    private SemaphoreSlim _maxQueuedActionsSemaphore;
    private int _maxQueueingActions;
    private Action`1<Context> _onBulkheadRejected;
    public int BulkheadAvailableCount { get; }
    public int QueueAvailableCount { get; }
    internal BulkheadPolicy`1(int maxParallelization, int maxQueueingActions, Action`1<Context> onBulkheadRejected);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public sealed virtual int get_BulkheadAvailableCount();
    public sealed virtual int get_QueueAvailableCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Bulkhead.BulkheadRejectedException : ExecutionRejectedException {
    public BulkheadRejectedException(string message);
    public BulkheadRejectedException(string message, Exception innerException);
}
internal static class Polly.Bulkhead.BulkheadSemaphoreFactory : object {
    public static ValueTuple`2<SemaphoreSlim, SemaphoreSlim> CreateBulkheadSemaphores(int maxParallelization, int maxQueueingActions);
}
public interface Polly.Bulkhead.IBulkheadPolicy {
    public int BulkheadAvailableCount { get; }
    public int QueueAvailableCount { get; }
    public abstract virtual int get_BulkheadAvailableCount();
    public abstract virtual int get_QueueAvailableCount();
}
public interface Polly.Bulkhead.IBulkheadPolicy`1 {
}
public class Polly.Caching.AbsoluteTtl : NonSlidingTtl {
    public AbsoluteTtl(DateTimeOffset absoluteExpirationTime);
}
internal static class Polly.Caching.AsyncCacheEngine : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Caching.AsyncCacheEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.AsyncCachePolicy : AsyncPolicy {
    private IAsyncCacheProvider _asyncCacheProvider;
    private ITtlStrategy _ttlStrategy;
    private Func`2<Context, string> _cacheKeyStrategy;
    private Action`2<Context, string> _onCacheGet;
    private Action`2<Context, string> _onCacheMiss;
    private Action`2<Context, string> _onCachePut;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCacheGetError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCachePutError;
    internal AsyncCachePolicy(IAsyncCacheProvider asyncCacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    protected virtual Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Caching.AsyncCachePolicy`1 : AsyncPolicy`1<TResult> {
    private ITtlStrategy`1<TResult> _ttlStrategy;
    private Func`2<Context, string> _cacheKeyStrategy;
    private Action`2<Context, string> _onCacheGet;
    private Action`2<Context, string> _onCacheMiss;
    private Action`2<Context, string> _onCachePut;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCacheGetError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCachePutError;
    private IAsyncCacheProvider`1<TResult> _asyncCacheProvider;
    internal AsyncCachePolicy`1(IAsyncCacheProvider`1<TResult> asyncCacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Caching.AsyncGenericCacheProvider`1 : object {
    private IAsyncCacheProvider _wrappedCacheProvider;
    internal AsyncGenericCacheProvider`1(IAsyncCacheProvider nonGenericCacheProvider);
    [AsyncStateMachineAttribute("Polly.Caching.AsyncGenericCacheProvider`1/<Polly-Caching-IAsyncCacheProvider<TCacheFormat>-TryGetAsync>d__2")]
private sealed virtual override Task`1<ValueTuple`2<bool, TCacheFormat>> Polly.Caching.IAsyncCacheProvider<TCacheFormat>.TryGetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    private sealed virtual override Task Polly.Caching.IAsyncCacheProvider<TCacheFormat>.PutAsync(string key, TCacheFormat value, Ttl ttl, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.AsyncSerializingCacheProvider`1 : object {
    private IAsyncCacheProvider`1<TSerialized> _wrappedCacheProvider;
    private ICacheItemSerializer`2<object, TSerialized> _serializer;
    public AsyncSerializingCacheProvider`1(IAsyncCacheProvider`1<TSerialized> wrappedCacheProvider, ICacheItemSerializer`2<object, TSerialized> serializer);
    [AsyncStateMachineAttribute("Polly.Caching.AsyncSerializingCacheProvider`1/<TryGetAsync>d__3")]
public sealed virtual Task`1<ValueTuple`2<bool, object>> TryGetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public sealed virtual Task PutAsync(string key, object value, Ttl ttl, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.AsyncSerializingCacheProvider`2 : object {
    private IAsyncCacheProvider`1<TSerialized> _wrappedCacheProvider;
    private ICacheItemSerializer`2<TResult, TSerialized> _serializer;
    public AsyncSerializingCacheProvider`2(IAsyncCacheProvider`1<TSerialized> wrappedCacheProvider, ICacheItemSerializer`2<TResult, TSerialized> serializer);
    [AsyncStateMachineAttribute("Polly.Caching.AsyncSerializingCacheProvider`2/<TryGetAsync>d__3")]
public sealed virtual Task`1<ValueTuple`2<bool, TResult>> TryGetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public sealed virtual Task PutAsync(string key, TResult value, Ttl ttl, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal static class Polly.Caching.CacheEngine : object {
    [NullableContextAttribute("1")]
internal static TResult Implementation(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Func`3<Context, CancellationToken, TResult> action, Context context, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.CachePolicy : Policy {
    private ISyncCacheProvider _syncCacheProvider;
    private ITtlStrategy _ttlStrategy;
    private Func`2<Context, string> _cacheKeyStrategy;
    private Action`2<Context, string> _onCacheGet;
    private Action`2<Context, string> _onCacheMiss;
    private Action`2<Context, string> _onCachePut;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCacheGetError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCachePutError;
    internal CachePolicy(ISyncCacheProvider syncCacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    protected virtual void Implementation(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Caching.CachePolicy`1 : Policy`1<TResult> {
    private Action`2<Context, string> _onCacheGet;
    private Action`2<Context, string> _onCacheMiss;
    private Action`2<Context, string> _onCachePut;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCacheGetError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Context, string, Exception> _onCachePutError;
    private ISyncCacheProvider`1<TResult> _syncCacheProvider;
    private ITtlStrategy`1<TResult> _ttlStrategy;
    private Func`2<Context, string> _cacheKeyStrategy;
    internal CachePolicy`1(ISyncCacheProvider`1<TResult> syncCacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.Caching.CacheProviderExtensions : object {
    [ExtensionAttribute]
public static ISyncCacheProvider`1<TCacheFormat> For(ISyncCacheProvider nonGenericCacheProvider);
    [ExtensionAttribute]
public static IAsyncCacheProvider`1<TCacheFormat> AsyncFor(IAsyncCacheProvider nonGenericCacheProvider);
    [ExtensionAttribute]
public static SerializingCacheProvider`1<TSerialized> WithSerializer(ISyncCacheProvider`1<TSerialized> cacheProvider, ICacheItemSerializer`2<object, TSerialized> serializer);
    [ExtensionAttribute]
public static SerializingCacheProvider`2<TResult, TSerialized> WithSerializer(ISyncCacheProvider`1<TSerialized> cacheProvider, ICacheItemSerializer`2<TResult, TSerialized> serializer);
    [ExtensionAttribute]
public static AsyncSerializingCacheProvider`1<TSerialized> WithSerializer(IAsyncCacheProvider`1<TSerialized> cacheProvider, ICacheItemSerializer`2<object, TSerialized> serializer);
    [ExtensionAttribute]
public static AsyncSerializingCacheProvider`2<TResult, TSerialized> WithSerializer(IAsyncCacheProvider`1<TSerialized> cacheProvider, ICacheItemSerializer`2<TResult, TSerialized> serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.ContextualTtl : object {
    public static string TimeSpanKey;
    public static string SlidingExpirationKey;
    private static Ttl NoTtl;
    private static ContextualTtl();
    public sealed virtual Ttl GetTtl(Context context, object result);
}
public class Polly.Caching.DefaultCacheKeyStrategy : object {
    [NullableAttribute("1")]
public static ICacheKeyStrategy Instance;
    private static DefaultCacheKeyStrategy();
    [NullableContextAttribute("1")]
public sealed virtual string GetCacheKey(Context context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Caching.GenericCacheProvider`1 : object {
    private ISyncCacheProvider _wrappedCacheProvider;
    internal GenericCacheProvider`1(ISyncCacheProvider nonGenericCacheProvider);
    private sealed virtual override ValueTuple`2<bool, TCacheFormat> Polly.Caching.ISyncCacheProvider<TCacheFormat>.TryGet(string key);
    private sealed virtual override void Polly.Caching.ISyncCacheProvider<TCacheFormat>.Put(string key, TCacheFormat value, Ttl ttl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Caching.GenericTtlStrategy`1 : object {
    private ITtlStrategy _wrappedTtlStrategy;
    internal GenericTtlStrategy`1(ITtlStrategy ttlStrategy);
    public sealed virtual Ttl GetTtl(Context context, TResult result);
}
[NullableContextAttribute("1")]
public interface Polly.Caching.IAsyncCacheProvider {
    public abstract virtual Task`1<ValueTuple`2<bool, object>> TryGetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task PutAsync(string key, object value, Ttl ttl, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
public interface Polly.Caching.IAsyncCacheProvider`1 {
    public abstract virtual Task`1<ValueTuple`2<bool, TResult>> TryGetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task PutAsync(string key, TResult value, Ttl ttl, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("2")]
public interface Polly.Caching.ICacheItemSerializer`2 {
    public abstract virtual TSerialized Serialize(TResult objectToSerialize);
    public abstract virtual TResult Deserialize(TSerialized objectToDeserialize);
}
[NullableContextAttribute("1")]
public interface Polly.Caching.ICacheKeyStrategy {
    public abstract virtual string GetCacheKey(Context context);
}
public interface Polly.Caching.ICachePolicy {
}
public interface Polly.Caching.ICachePolicy`1 {
}
[NullableContextAttribute("1")]
public interface Polly.Caching.ISyncCacheProvider {
    public abstract virtual ValueTuple`2<bool, object> TryGet(string key);
    public abstract virtual void Put(string key, object value, Ttl ttl);
}
[NullableContextAttribute("1")]
public interface Polly.Caching.ISyncCacheProvider`1 {
    public abstract virtual ValueTuple`2<bool, TResult> TryGet(string key);
    public abstract virtual void Put(string key, TResult value, Ttl ttl);
}
public interface Polly.Caching.ITtlStrategy {
}
[NullableContextAttribute("1")]
public interface Polly.Caching.ITtlStrategy`1 {
    public abstract virtual Ttl GetTtl(Context context, TResult result);
}
public abstract class Polly.Caching.NonSlidingTtl : object {
    protected DateTimeOffset absoluteExpirationTime;
    protected NonSlidingTtl(DateTimeOffset absoluteExpirationTime);
    [NullableContextAttribute("1")]
public sealed virtual Ttl GetTtl(Context context, object result);
}
public class Polly.Caching.RelativeTtl : object {
    private TimeSpan _ttl;
    public RelativeTtl(TimeSpan ttl);
    [NullableContextAttribute("1")]
public sealed virtual Ttl GetTtl(Context context, object result);
}
public class Polly.Caching.ResultTtl`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<Context, TResult, Ttl> _ttlFunc;
    public ResultTtl`1(Func`2<TResult, Ttl> ttlFunc);
    public ResultTtl`1(Func`3<Context, TResult, Ttl> ttlFunc);
    [NullableContextAttribute("1")]
public sealed virtual Ttl GetTtl(Context context, TResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.SerializingCacheProvider`1 : object {
    private ISyncCacheProvider`1<TSerialized> _wrappedCacheProvider;
    private ICacheItemSerializer`2<object, TSerialized> _serializer;
    public SerializingCacheProvider`1(ISyncCacheProvider`1<TSerialized> wrappedCacheProvider, ICacheItemSerializer`2<object, TSerialized> serializer);
    public sealed virtual ValueTuple`2<bool, object> TryGet(string key);
    public sealed virtual void Put(string key, object value, Ttl ttl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Caching.SerializingCacheProvider`2 : object {
    private ISyncCacheProvider`1<TSerialized> _wrappedCacheProvider;
    private ICacheItemSerializer`2<TResult, TSerialized> _serializer;
    public SerializingCacheProvider`2(ISyncCacheProvider`1<TSerialized> wrappedCacheProvider, ICacheItemSerializer`2<TResult, TSerialized> serializer);
    public sealed virtual ValueTuple`2<bool, TResult> TryGet(string key);
    public sealed virtual void Put(string key, TResult value, Ttl ttl);
}
public class Polly.Caching.SlidingTtl : object {
    private Ttl _ttl;
    public SlidingTtl(TimeSpan slidingTtl);
    [NullableContextAttribute("1")]
public sealed virtual Ttl GetTtl(Context context, object result);
}
public class Polly.Caching.Ttl : ValueType {
    public TimeSpan Timespan;
    public bool SlidingExpiration;
    public Ttl(TimeSpan timeSpan);
    public Ttl(TimeSpan timeSpan, bool slidingExpiration);
}
[ExtensionAttribute]
internal static class Polly.Caching.TtlStrategyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static ITtlStrategy`1<TResult> For(ITtlStrategy ttlStrategy);
}
internal class Polly.CircuitBreaker.AdvancedCircuitController`1 : CircuitStateController`1<TResult> {
    private static short NumberOfWindows;
    internal static long ResolutionOfCircuitTimer;
    private IHealthMetrics _metrics;
    private double _failureThreshold;
    private int _minimumThroughput;
    public AdvancedCircuitController`1(double failureThreshold, TimeSpan samplingDuration, int minimumThroughput, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    private static AdvancedCircuitController`1();
    public virtual void OnCircuitReset(Context context);
    public virtual void OnActionSuccess(Context context);
    public virtual void OnActionFailure(DelegateResult`1<TResult> outcome, Context context);
}
internal static class Polly.CircuitBreaker.AsyncCircuitBreakerEngine : object {
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.AsyncCircuitBreakerEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1<TResult> shouldHandleResultPredicates, ICircuitController`1<TResult> breakerController, CancellationToken cancellationToken);
}
public class Polly.CircuitBreaker.AsyncCircuitBreakerPolicy : AsyncPolicy {
    internal ICircuitController`1<EmptyStruct> BreakerController;
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    internal AsyncCircuitBreakerPolicy(PolicyBuilder policyBuilder, ICircuitController`1<EmptyStruct> breakerController);
    public sealed virtual CircuitState get_CircuitState();
    public sealed virtual Exception get_LastException();
    public sealed virtual void Isolate();
    public sealed virtual void Reset();
    [AsyncStateMachineAttribute("Polly.CircuitBreaker.AsyncCircuitBreakerPolicy/<ImplementationAsync>d__8`1")]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public class Polly.CircuitBreaker.AsyncCircuitBreakerPolicy`1 : AsyncPolicy`1<TResult> {
    internal ICircuitController`1<TResult> BreakerController;
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    public TResult LastHandledResult { get; }
    internal AsyncCircuitBreakerPolicy`1(PolicyBuilder`1<TResult> policyBuilder, ICircuitController`1<TResult> breakerController);
    public sealed virtual CircuitState get_CircuitState();
    public sealed virtual Exception get_LastException();
    public sealed virtual TResult get_LastHandledResult();
    public sealed virtual void Isolate();
    public sealed virtual void Reset();
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public class Polly.CircuitBreaker.BrokenCircuitException`1 : BrokenCircuitException {
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public TResult Result { get; }
    public BrokenCircuitException`1(TResult result);
    public BrokenCircuitException`1(string message, TResult result);
    public BrokenCircuitException`1(string message, Exception inner, TResult result);
    [CompilerGeneratedAttribute]
public TResult get_Result();
}
internal static class Polly.CircuitBreaker.CircuitBreakerEngine : object {
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1<TResult> shouldHandleResultPredicates, ICircuitController`1<TResult> breakerController, CancellationToken cancellationToken);
}
public class Polly.CircuitBreaker.CircuitBreakerPolicy : Policy {
    internal ICircuitController`1<EmptyStruct> BreakerController;
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    internal CircuitBreakerPolicy(PolicyBuilder policyBuilder, ICircuitController`1<EmptyStruct> breakerController);
    public sealed virtual CircuitState get_CircuitState();
    public sealed virtual Exception get_LastException();
    public sealed virtual void Isolate();
    public sealed virtual void Reset();
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public class Polly.CircuitBreaker.CircuitBreakerPolicy`1 : Policy`1<TResult> {
    internal ICircuitController`1<TResult> BreakerController;
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    public TResult LastHandledResult { get; }
    internal CircuitBreakerPolicy`1(PolicyBuilder`1<TResult> policyBuilder, ICircuitController`1<TResult> breakerController);
    public sealed virtual CircuitState get_CircuitState();
    public sealed virtual Exception get_LastException();
    public sealed virtual TResult get_LastHandledResult();
    public sealed virtual void Isolate();
    public sealed virtual void Reset();
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
internal abstract class Polly.CircuitBreaker.CircuitStateController`1 : object {
    protected TimeSpan DurationOfBreak;
    protected Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> OnBreak;
    protected Action`1<Context> OnReset;
    protected Action OnHalfOpen;
    protected object Lock;
    protected long BlockedTill;
    protected CircuitState InternalCircuitState;
    protected DelegateResult`1<TResult> LastOutcome;
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    public TResult LastHandledResult { get; }
    protected bool IsInAutomatedBreak_NeedsLock { get; }
    protected CircuitStateController`1(TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    public sealed virtual CircuitState get_CircuitState();
    public sealed virtual Exception get_LastException();
    public sealed virtual TResult get_LastHandledResult();
    protected bool get_IsInAutomatedBreak_NeedsLock();
    public sealed virtual void Isolate();
    protected void Break_NeedsLock(Context context);
    private void BreakFor_NeedsLock(TimeSpan durationOfBreak, Context context);
    public sealed virtual void Reset();
    protected void ResetInternal_NeedsLock(Context context);
    protected bool PermitHalfOpenCircuitTest();
    private BrokenCircuitException GetBreakingException();
    public sealed virtual void OnActionPreExecute();
    public abstract virtual void OnActionSuccess(Context context);
    public abstract virtual void OnActionFailure(DelegateResult`1<TResult> outcome, Context context);
    public abstract virtual void OnCircuitReset(Context context);
}
internal class Polly.CircuitBreaker.ConsecutiveCountCircuitController`1 : CircuitStateController`1<TResult> {
    private int _exceptionsAllowedBeforeBreaking;
    private int _consecutiveFailureCount;
    public ConsecutiveCountCircuitController`1(int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    public virtual void OnCircuitReset(Context context);
    public virtual void OnActionSuccess(Context context);
    public virtual void OnActionFailure(DelegateResult`1<TResult> outcome, Context context);
}
internal class Polly.CircuitBreaker.HealthCount : object {
    [CompilerGeneratedAttribute]
private int <Successes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Failures>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartedAt>k__BackingField;
    public int Successes { get; public set; }
    public int Failures { get; public set; }
    public int Total { get; }
    public long StartedAt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Successes();
    [CompilerGeneratedAttribute]
public void set_Successes(int value);
    [CompilerGeneratedAttribute]
public int get_Failures();
    [CompilerGeneratedAttribute]
public void set_Failures(int value);
    public int get_Total();
    [CompilerGeneratedAttribute]
public long get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(long value);
}
public interface Polly.CircuitBreaker.ICircuitBreakerPolicy {
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    public abstract virtual CircuitState get_CircuitState();
    public abstract virtual Exception get_LastException();
    public abstract virtual void Isolate();
    public abstract virtual void Reset();
}
public interface Polly.CircuitBreaker.ICircuitBreakerPolicy`1 {
    public TResult LastHandledResult { get; }
    public abstract virtual TResult get_LastHandledResult();
}
internal interface Polly.CircuitBreaker.ICircuitController`1 {
    public CircuitState CircuitState { get; }
    public Exception LastException { get; }
    public TResult LastHandledResult { get; }
    public abstract virtual CircuitState get_CircuitState();
    public abstract virtual Exception get_LastException();
    public abstract virtual TResult get_LastHandledResult();
    public abstract virtual void Isolate();
    public abstract virtual void Reset();
    public abstract virtual void OnCircuitReset(Context context);
    public abstract virtual void OnActionPreExecute();
    public abstract virtual void OnActionSuccess(Context context);
    public abstract virtual void OnActionFailure(DelegateResult`1<TResult> outcome, Context context);
}
internal interface Polly.CircuitBreaker.IHealthMetrics {
    public abstract virtual void IncrementSuccess_NeedsLock();
    public abstract virtual void IncrementFailure_NeedsLock();
    public abstract virtual void Reset_NeedsLock();
    public abstract virtual HealthCount GetHealthCount_NeedsLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.CircuitBreaker.RollingHealthMetrics : object {
    private long _samplingDuration;
    private long _windowDuration;
    private Queue`1<HealthCount> _windows;
    [NullableAttribute("2")]
private HealthCount _currentWindow;
    public RollingHealthMetrics(TimeSpan samplingDuration, short numberOfWindows);
    public sealed virtual void IncrementSuccess_NeedsLock();
    public sealed virtual void IncrementFailure_NeedsLock();
    public sealed virtual void Reset_NeedsLock();
    public sealed virtual HealthCount GetHealthCount_NeedsLock();
    private HealthCount ActualiseCurrentMetric_NeedsLock();
}
internal class Polly.CircuitBreaker.SingleHealthMetrics : object {
    private long _samplingDuration;
    [NullableAttribute("2")]
private HealthCount _current;
    public SingleHealthMetrics(TimeSpan samplingDuration);
    public sealed virtual void IncrementSuccess_NeedsLock();
    public sealed virtual void IncrementFailure_NeedsLock();
    public sealed virtual void Reset_NeedsLock();
    [NullableContextAttribute("1")]
public sealed virtual HealthCount GetHealthCount_NeedsLock();
    [NullableContextAttribute("1")]
private HealthCount ActualiseCurrentMetric_NeedsLock();
}
[ExtensionAttribute]
public static class Polly.CircuitBreakerSyntax : object {
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<Exception, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<Exception, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy CircuitBreaker(PolicyBuilder policyBuilder, int exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4<Exception, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[ExtensionAttribute]
public static class Polly.CircuitBreakerTResultSyntax : object {
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2<DelegateResult`1<TResult>, TimeSpan> onBreak, Action onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
    [ExtensionAttribute]
public static CircuitBreakerPolicy`1<TResult> CircuitBreaker(PolicyBuilder`1<TResult> policyBuilder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4<DelegateResult`1<TResult>, CircuitState, TimeSpan, Context> onBreak, Action`1<Context> onReset, Action onHalfOpen);
}
[DefaultMemberAttribute("Item")]
public class Polly.Context : object {
    private Nullable`1<Guid> _correlationId;
    [CompilerGeneratedAttribute]
private string <PolicyWrapKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PolicyKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationKey>k__BackingField;
    private Dictionary`2<string, object> _wrappedDictionary;
    public string PolicyWrapKey { get; internal set; }
    public string PolicyKey { get; internal set; }
    public string OperationKey { get; }
    public Guid CorrelationId { get; }
    private Dictionary`2<string, object> WrappedDictionary { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public object Item { get; public set; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public Context(string operationKey);
    public Context(string operationKey, IDictionary`2<string, object> contextData);
    internal Context(IDictionary`2<string, object> contextData);
    internal static Context None();
    [CompilerGeneratedAttribute]
public string get_PolicyWrapKey();
    [CompilerGeneratedAttribute]
internal void set_PolicyWrapKey(string value);
    [CompilerGeneratedAttribute]
public string get_PolicyKey();
    [CompilerGeneratedAttribute]
internal void set_PolicyKey(string value);
    [CompilerGeneratedAttribute]
public string get_OperationKey();
    public Guid get_CorrelationId();
    private Dictionary`2<string, object> get_WrappedDictionary();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
}
public class Polly.DelegateResult`1 : object {
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public TResult Result { get; }
    public Exception Exception { get; }
    public DelegateResult`1(TResult result);
    public DelegateResult`1(Exception exception);
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class Polly.ExceptionPredicate : MulticastDelegate {
    public ExceptionPredicate(object object, IntPtr method);
    public virtual Exception Invoke(Exception ex);
    public virtual IAsyncResult BeginInvoke(Exception ex, AsyncCallback callback, object object);
    public virtual Exception EndInvoke(IAsyncResult result);
}
public class Polly.ExceptionPredicates : object {
    private List`1<ExceptionPredicate> _predicates;
    public static ExceptionPredicates None;
    private static ExceptionPredicates();
    internal void Add(ExceptionPredicate predicate);
    public Exception FirstMatchOrDefault(Exception ex);
}
public enum Polly.ExceptionType : Enum {
    public int value__;
    public static ExceptionType HandledByThisPolicy;
    public static ExceptionType Unhandled;
}
internal static class Polly.Fallback.AsyncFallbackEngine : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Fallback.AsyncFallbackEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1<TResult> shouldHandleResultPredicates, Func`3<DelegateResult`1<TResult>, Context, Task> onFallbackAsync, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, Task`1<TResult>> fallbackAction, bool continueOnCapturedContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Fallback.AsyncFallbackPolicy : AsyncPolicy {
    private Func`3<Exception, Context, Task> _onFallbackAsync;
    private Func`4<Exception, Context, CancellationToken, Task> _fallbackAction;
    internal AsyncFallbackPolicy(PolicyBuilder policyBuilder, Func`3<Exception, Context, Task> onFallbackAsync, Func`4<Exception, Context, CancellationToken, Task> fallbackAction);
    protected virtual Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Fallback.AsyncFallbackPolicy`1 : AsyncPolicy`1<TResult> {
    private Func`3<DelegateResult`1<TResult>, Context, Task> _onFallbackAsync;
    private Func`4<DelegateResult`1<TResult>, Context, CancellationToken, Task`1<TResult>> _fallbackAction;
    internal AsyncFallbackPolicy`1(PolicyBuilder`1<TResult> policyBuilder, Func`3<DelegateResult`1<TResult>, Context, Task> onFallbackAsync, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, Task`1<TResult>> fallbackAction);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal static class Polly.Fallback.FallbackEngine : object {
    [NullableContextAttribute("1")]
internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1<TResult> shouldHandleResultPredicates, Action`2<DelegateResult`1<TResult>, Context> onFallback, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, TResult> fallbackAction, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.Fallback.FallbackPolicy : Policy {
    private Action`2<Exception, Context> _onFallback;
    private Action`3<Exception, Context, CancellationToken> _fallbackAction;
    internal FallbackPolicy(PolicyBuilder policyBuilder, Action`2<Exception, Context> onFallback, Action`3<Exception, Context, CancellationToken> fallbackAction);
    [DebuggerStepThroughAttribute]
protected virtual void Implementation(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Fallback.FallbackPolicy`1 : Policy`1<TResult> {
    private Action`2<DelegateResult`1<TResult>, Context> _onFallback;
    private Func`4<DelegateResult`1<TResult>, Context, CancellationToken, TResult> _fallbackAction;
    internal FallbackPolicy`1(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, Context> onFallback, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, TResult> fallbackAction);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public interface Polly.Fallback.IFallbackPolicy {
}
public interface Polly.Fallback.IFallbackPolicy`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.FallbackSyntax : object {
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action fallbackAction);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action`1<CancellationToken> fallbackAction);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action fallbackAction, Action`1<Exception> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action`1<CancellationToken> fallbackAction, Action`1<Exception> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action`1<Context> fallbackAction, Action`2<Exception, Context> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action`2<Context, CancellationToken> fallbackAction, Action`2<Exception, Context> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy Fallback(PolicyBuilder policyBuilder, Action`3<Exception, Context, CancellationToken> fallbackAction, Action`2<Exception, Context> onFallback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.FallbackTResultSyntax : object {
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`1<TResult> fallbackAction);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`2<CancellationToken, TResult> fallbackAction);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue, Action`1<DelegateResult`1<TResult>> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`1<TResult> fallbackAction, Action`1<DelegateResult`1<TResult>> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`2<CancellationToken, TResult> fallbackAction, Action`1<DelegateResult`1<TResult>> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, TResult fallbackValue, Action`2<DelegateResult`1<TResult>, Context> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`2<Context, TResult> fallbackAction, Action`2<DelegateResult`1<TResult>, Context> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`3<Context, CancellationToken, TResult> fallbackAction, Action`2<DelegateResult`1<TResult>, Context> onFallback);
    [ExtensionAttribute]
public static FallbackPolicy`1<TResult> Fallback(PolicyBuilder`1<TResult> policyBuilder, Func`4<DelegateResult`1<TResult>, Context, CancellationToken, TResult> fallbackAction, Action`2<DelegateResult`1<TResult>, Context> onFallback);
}
public enum Polly.FaultType : Enum {
    public int value__;
    public static FaultType ExceptionHandledByThisPolicy;
    public static FaultType UnhandledException;
    public static FaultType ResultHandledByThisPolicy;
}
public interface Polly.IAsyncPolicy {
    public abstract virtual IAsyncPolicy WithPolicyKey(string policyKey);
    public abstract virtual Task ExecuteAsync(Func`1<Task> action);
    public abstract virtual Task ExecuteAsync(Func`2<Context, Task> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task ExecuteAsync(Func`2<Context, Task> action, Context context);
    public abstract virtual Task ExecuteAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task ExecuteAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> action);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`1<Task> action);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<Context, Task> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<Context, Task> action, Context context);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`1<Task`1<TResult>> action);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public interface Polly.IAsyncPolicy`1 {
    public abstract virtual IAsyncPolicy`1<TResult> WithPolicyKey(string policyKey);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> action);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`1<Task`1<TResult>> action);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, IDictionary`2<string, object> contextData);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<Context, Task`1<TResult>> action, Context context);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`2<CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public abstract virtual Task`1<PolicyResult`1<TResult>> ExecuteAndCaptureAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[ExtensionAttribute]
public static class Polly.IAsyncPolicyExtensions : object {
    [ExtensionAttribute]
public static IAsyncPolicy`1<TResult> AsAsyncPolicy(IAsyncPolicy policy);
}
[ExtensionAttribute]
public static class Polly.IAsyncPolicyPolicyWrapExtensions : object {
    [ExtensionAttribute]
public static AsyncPolicyWrap WrapAsync(IAsyncPolicy outerPolicy, IAsyncPolicy innerPolicy);
    [ExtensionAttribute]
public static AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy outerPolicy, IAsyncPolicy`1<TResult> innerPolicy);
    [ExtensionAttribute]
public static AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy`1<TResult> outerPolicy, IAsyncPolicy innerPolicy);
    [ExtensionAttribute]
public static AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy`1<TResult> outerPolicy, IAsyncPolicy`1<TResult> innerPolicy);
}
public interface Polly.IsPolicy {
    public string PolicyKey { get; }
    public abstract virtual string get_PolicyKey();
}
public interface Polly.ISyncPolicy {
    public abstract virtual ISyncPolicy WithPolicyKey(string policyKey);
    public abstract virtual void Execute(Action action);
    public abstract virtual void Execute(Action`1<Context> action, IDictionary`2<string, object> contextData);
    public abstract virtual void Execute(Action`1<Context> action, Context context);
    public abstract virtual void Execute(Action`1<CancellationToken> action, CancellationToken cancellationToken);
    public abstract virtual void Execute(Action`2<Context, CancellationToken> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual void Execute(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    public abstract virtual TResult Execute(Func`1<TResult> action);
    public abstract virtual TResult Execute(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    public abstract virtual TResult Execute(Func`2<Context, TResult> action, Context context);
    public abstract virtual TResult Execute(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    public abstract virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public abstract virtual PolicyResult ExecuteAndCapture(Action action);
    public abstract virtual PolicyResult ExecuteAndCapture(Action`1<Context> action, IDictionary`2<string, object> contextData);
    public abstract virtual PolicyResult ExecuteAndCapture(Action`1<Context> action, Context context);
    public abstract virtual PolicyResult ExecuteAndCapture(Action`1<CancellationToken> action, CancellationToken cancellationToken);
    public abstract virtual PolicyResult ExecuteAndCapture(Action`2<Context, CancellationToken> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual PolicyResult ExecuteAndCapture(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`1<TResult> action);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, Context context);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public interface Polly.ISyncPolicy`1 {
    public abstract virtual ISyncPolicy`1<TResult> WithPolicyKey(string policyKey);
    public abstract virtual TResult Execute(Func`1<TResult> action);
    public abstract virtual TResult Execute(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    public abstract virtual TResult Execute(Func`2<Context, TResult> action, Context context);
    public abstract virtual TResult Execute(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    public abstract virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`1<TResult> action);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, Context context);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    public abstract virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Polly.ISyncPolicyExtensions : object {
    [ExtensionAttribute]
public static ISyncPolicy`1<TResult> AsPolicy(ISyncPolicy policy);
}
[ExtensionAttribute]
public static class Polly.ISyncPolicyPolicyWrapExtensions : object {
    [ExtensionAttribute]
public static PolicyWrap Wrap(ISyncPolicy outerPolicy, ISyncPolicy innerPolicy);
    [ExtensionAttribute]
public static PolicyWrap`1<TResult> Wrap(ISyncPolicy outerPolicy, ISyncPolicy`1<TResult> innerPolicy);
    [ExtensionAttribute]
public static PolicyWrap`1<TResult> Wrap(ISyncPolicy`1<TResult> outerPolicy, ISyncPolicy innerPolicy);
    [ExtensionAttribute]
public static PolicyWrap`1<TResult> Wrap(ISyncPolicy`1<TResult> outerPolicy, ISyncPolicy`1<TResult> innerPolicy);
}
public class Polly.NoOp.AsyncNoOpPolicy : AsyncPolicy {
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.NoOp.AsyncNoOpPolicy`1 : AsyncPolicy`1<TResult> {
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public interface Polly.NoOp.INoOpPolicy {
}
public interface Polly.NoOp.INoOpPolicy`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Polly.NoOp.NoOpEngine : object {
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken);
}
public class Polly.NoOp.NoOpPolicy : Policy {
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.NoOp.NoOpPolicy`1 : Policy`1<TResult> {
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public enum Polly.OutcomeType : Enum {
    public int value__;
    public static OutcomeType Successful;
    public static OutcomeType Failure;
}
public abstract class Polly.Policy : PolicyBase {
    private static int MinimumPoliciesRequiredForWrap;
    [NullableContextAttribute("1")]
private protected Policy(ExceptionPredicates exceptionPredicates);
    [NullableContextAttribute("2")]
protected Policy(PolicyBuilder policyBuilder);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy BulkheadAsync(int maxParallelization);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy BulkheadAsync(int maxParallelization, Func`2<Context, Task> onBulkheadRejectedAsync);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy BulkheadAsync(int maxParallelization, int maxQueuingActions);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy BulkheadAsync(int maxParallelization, int maxQueuingActions, Func`2<Context, Task> onBulkheadRejectedAsync);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy`1<TResult> BulkheadAsync(int maxParallelization);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy`1<TResult> BulkheadAsync(int maxParallelization, Func`2<Context, Task> onBulkheadRejectedAsync);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy`1<TResult> BulkheadAsync(int maxParallelization, int maxQueuingActions);
    [NullableContextAttribute("1")]
public static AsyncBulkheadPolicy`1<TResult> BulkheadAsync(int maxParallelization, int maxQueuingActions, Func`2<Context, Task> onBulkheadRejectedAsync);
    [NullableContextAttribute("1")]
public static BulkheadPolicy Bulkhead(int maxParallelization);
    [NullableContextAttribute("1")]
public static BulkheadPolicy Bulkhead(int maxParallelization, Action`1<Context> onBulkheadRejected);
    [NullableContextAttribute("1")]
public static BulkheadPolicy Bulkhead(int maxParallelization, int maxQueuingActions);
    [NullableContextAttribute("1")]
public static BulkheadPolicy Bulkhead(int maxParallelization, int maxQueuingActions, Action`1<Context> onBulkheadRejected);
    [NullableContextAttribute("1")]
public static BulkheadPolicy`1<TResult> Bulkhead(int maxParallelization);
    [NullableContextAttribute("1")]
public static BulkheadPolicy`1<TResult> Bulkhead(int maxParallelization, Action`1<Context> onBulkheadRejected);
    [NullableContextAttribute("1")]
public static BulkheadPolicy`1<TResult> Bulkhead(int maxParallelization, int maxQueuingActions);
    [NullableContextAttribute("1")]
public static BulkheadPolicy`1<TResult> Bulkhead(int maxParallelization, int maxQueuingActions, Action`1<Context> onBulkheadRejected);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncCachePolicy`1<TResult> CacheAsync(IAsyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`3<Context, string, Exception> onCacheError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, TimeSpan ttl, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static CachePolicy`1<TResult> Cache(ISyncCacheProvider`1<TResult> cacheProvider, ITtlStrategy`1<TResult> ttlStrategy, Func`2<Context, string> cacheKeyStrategy, Action`2<Context, string> onCacheGet, Action`2<Context, string> onCacheMiss, Action`2<Context, string> onCachePut, Action`3<Context, string, Exception> onCacheGetError, Action`3<Context, string, Exception> onCachePutError);
    [NullableContextAttribute("1")]
public static AsyncNoOpPolicy NoOpAsync();
    [NullableContextAttribute("1")]
public static AsyncNoOpPolicy`1<TResult> NoOpAsync();
    [NullableContextAttribute("1")]
public static NoOpPolicy NoOp();
    [NullableContextAttribute("1")]
public static NoOpPolicy`1<TResult> NoOp();
    public Policy WithPolicyKey(string policyKey);
    private sealed virtual override ISyncPolicy Polly.ISyncPolicy.WithPolicyKey(string policyKey);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action action);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action`1<Context> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action`1<Context> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action`1<CancellationToken> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action`2<Context, CancellationToken> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`1<TResult> action);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<Context, TResult> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action action);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action`1<Context> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action`1<Context> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action`1<CancellationToken> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action`2<Context, CancellationToken> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult ExecuteAndCapture(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`1<TResult> action);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, Context context);
    public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public static PolicyBuilder Handle();
    public static PolicyBuilder Handle(Func`2<TException, bool> exceptionPredicate);
    public static PolicyBuilder HandleInner();
    public static PolicyBuilder HandleInner(Func`2<TException, bool> exceptionPredicate);
    public static PolicyBuilder`1<TResult> HandleResult(Func`2<TResult, bool> resultPredicate);
    public static PolicyBuilder`1<TResult> HandleResult(TResult result);
    [DebuggerStepThroughAttribute]
protected virtual void Implementation(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    protected abstract virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy`1<TResult> RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy`1<TResult> RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy`1<TResult> RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst);
    [NullableContextAttribute("1")]
public static AsyncRateLimitPolicy`1<TResult> RateLimitAsync(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    [NullableContextAttribute("1")]
public static RateLimitPolicy RateLimit(int numberOfExecutions, TimeSpan perTimeSpan);
    [NullableContextAttribute("1")]
public static RateLimitPolicy RateLimit(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst);
    [NullableContextAttribute("1")]
public static RateLimitPolicy`1<TResult> RateLimit(int numberOfExecutions, TimeSpan perTimeSpan);
    [NullableContextAttribute("1")]
public static RateLimitPolicy`1<TResult> RateLimit(int numberOfExecutions, TimeSpan perTimeSpan, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    [NullableContextAttribute("1")]
public static RateLimitPolicy`1<TResult> RateLimit(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst);
    [NullableContextAttribute("1")]
public static RateLimitPolicy`1<TResult> RateLimit(int numberOfExecutions, TimeSpan perTimeSpan, int maxBurst, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(int seconds, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4<Context, TimeSpan, Task, Task> onTimeoutAsync);
    public static AsyncTimeoutPolicy`1<TResult> TimeoutAsync(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    public static TimeoutPolicy Timeout(int seconds);
    public static TimeoutPolicy Timeout(int seconds, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy Timeout(int seconds, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(int seconds, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(int seconds, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(int seconds, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(TimeSpan timeout);
    public static TimeoutPolicy Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy Timeout(TimeSpan timeout, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(TimeSpan timeout, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(int seconds, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`1<TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3<Context, TimeSpan, Task> onTimeout);
    public static TimeoutPolicy`1<TResult> Timeout(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    public static AsyncPolicyWrap WrapAsync(IAsyncPolicy[] policies);
    public static AsyncPolicyWrap`1<TResult> WrapAsync(IAsyncPolicy`1[] policies);
    public PolicyWrap Wrap(ISyncPolicy innerPolicy);
    public PolicyWrap`1<TResult> Wrap(ISyncPolicy`1<TResult> innerPolicy);
    public static PolicyWrap Wrap(ISyncPolicy[] policies);
    public static PolicyWrap`1<TResult> Wrap(ISyncPolicy`1[] policies);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Polly.Policy`1 : PolicyBase`1<TResult> {
    [NullableContextAttribute("1")]
private protected Policy`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1<TResult> resultPredicates);
    protected Policy`1(PolicyBuilder`1<TResult> policyBuilder);
    public Policy`1<TResult> WithPolicyKey(string policyKey);
    private sealed virtual override ISyncPolicy`1<TResult> Polly.ISyncPolicy<TResult>.WithPolicyKey(string policyKey);
    public static PolicyBuilder`1<TResult> Handle();
    public static PolicyBuilder`1<TResult> Handle(Func`2<TException, bool> exceptionPredicate);
    public static PolicyBuilder`1<TResult> HandleInner();
    public static PolicyBuilder`1<TResult> HandleInner(Func`2<TException, bool> exceptionPredicate);
    public static PolicyBuilder`1<TResult> HandleResult(Func`2<TResult, bool> resultPredicate);
    public static PolicyBuilder`1<TResult> HandleResult(TResult result);
    protected abstract virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`1<TResult> action);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<Context, TResult> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual TResult Execute(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`1<TResult> action);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, IDictionary`2<string, object> contextData);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<Context, TResult> action, Context context);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`2<CancellationToken, TResult> action, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, IDictionary`2<string, object> contextData, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
public sealed virtual PolicyResult`1<TResult> ExecuteAndCapture(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    public PolicyWrap`1<TResult> Wrap(ISyncPolicy innerPolicy);
    public PolicyWrap`1<TResult> Wrap(ISyncPolicy`1<TResult> innerPolicy);
}
public abstract class Polly.PolicyBase : object {
    protected string policyKeyInternal;
    internal static bool DefaultContinueOnCapturedContext;
    [CompilerGeneratedAttribute]
private ExceptionPredicates <ExceptionPredicates>k__BackingField;
    internal CancellationToken DefaultCancellationToken;
    public string PolicyKey { get; }
    protected internal ExceptionPredicates ExceptionPredicates { get; }
    private protected PolicyBase(ExceptionPredicates exceptionPredicates);
    protected PolicyBase(PolicyBuilder policyBuilder);
    public sealed virtual string get_PolicyKey();
    internal static ArgumentException PolicyKeyMustBeImmutableException(string policyKeyParamName);
    internal static void RestorePolicyContext(Context executionContext, string priorPolicyWrapKey, string priorPolicyKey);
    internal virtual void SetPolicyContext(Context executionContext, String& priorPolicyWrapKey, String& priorPolicyKey);
    [CompilerGeneratedAttribute]
protected internal ExceptionPredicates get_ExceptionPredicates();
    internal static ExceptionType GetExceptionType(ExceptionPredicates exceptionPredicates, Exception exception);
}
public abstract class Polly.PolicyBase`1 : PolicyBase {
    [CompilerGeneratedAttribute]
private ResultPredicates`1<TResult> <ResultPredicates>k__BackingField;
    protected internal ResultPredicates`1<TResult> ResultPredicates { get; }
    private protected PolicyBase`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1<TResult> resultPredicates);
    protected PolicyBase`1(PolicyBuilder`1<TResult> policyBuilder);
    [CompilerGeneratedAttribute]
protected internal ResultPredicates`1<TResult> get_ResultPredicates();
}
public class Polly.PolicyBuilder : object {
    [CompilerGeneratedAttribute]
private ExceptionPredicates <ExceptionPredicates>k__BackingField;
    internal ExceptionPredicates ExceptionPredicates { get; }
    internal PolicyBuilder(ExceptionPredicate exceptionPredicate);
    [CompilerGeneratedAttribute]
internal ExceptionPredicates get_ExceptionPredicates();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    public PolicyBuilder Or();
    public PolicyBuilder Or(Func`2<TException, bool> exceptionPredicate);
    public PolicyBuilder OrInner();
    public PolicyBuilder OrInner(Func`2<TException, bool> exceptionPredicate);
    internal static ExceptionPredicate HandleInner(Func`2<Exception, bool> predicate);
    private static Exception HandleInnerNested(Func`2<Exception, bool> predicate, Exception current);
    public PolicyBuilder`1<TResult> OrResult(Func`2<TResult, bool> resultPredicate);
    public PolicyBuilder`1<TResult> OrResult(TResult result);
}
public class Polly.PolicyBuilder`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionPredicates <ExceptionPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultPredicates`1<TResult> <ResultPredicates>k__BackingField;
    internal ExceptionPredicates ExceptionPredicates { get; }
    internal ResultPredicates`1<TResult> ResultPredicates { get; }
    internal PolicyBuilder`1(Func`2<TResult, bool> resultPredicate);
    internal PolicyBuilder`1(ExceptionPredicate predicate);
    internal PolicyBuilder`1(ExceptionPredicates exceptionPredicates);
    [CompilerGeneratedAttribute]
internal ExceptionPredicates get_ExceptionPredicates();
    [CompilerGeneratedAttribute]
internal ResultPredicates`1<TResult> get_ResultPredicates();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
    public PolicyBuilder`1<TResult> OrResult(Func`2<TResult, bool> resultPredicate);
    public PolicyBuilder`1<TResult> OrResult(TResult result);
    public PolicyBuilder`1<TResult> Or();
    public PolicyBuilder`1<TResult> Or(Func`2<TException, bool> exceptionPredicate);
    public PolicyBuilder`1<TResult> OrInner();
    public PolicyBuilder`1<TResult> OrInner(Func`2<TException, bool> exceptionPredicate);
}
public class Polly.PolicyResult : object {
    [CompilerGeneratedAttribute]
private OutcomeType <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <FinalException>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExceptionType> <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public OutcomeType Outcome { get; }
    public Exception FinalException { get; }
    public Nullable`1<ExceptionType> ExceptionType { get; }
    public Context Context { get; }
    internal PolicyResult(OutcomeType outcome, Exception finalException, Nullable`1<ExceptionType> exceptionType, Context context);
    [CompilerGeneratedAttribute]
public OutcomeType get_Outcome();
    [CompilerGeneratedAttribute]
public Exception get_FinalException();
    [CompilerGeneratedAttribute]
public Nullable`1<ExceptionType> get_ExceptionType();
    [CompilerGeneratedAttribute]
public Context get_Context();
    public static PolicyResult Successful(Context context);
    public static PolicyResult Failure(Exception exception, ExceptionType exceptionType, Context context);
}
public class Polly.PolicyResult`1 : object {
    [CompilerGeneratedAttribute]
private OutcomeType <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <FinalException>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExceptionType> <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <FinalHandledResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FaultType> <FaultType>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public OutcomeType Outcome { get; }
    public Exception FinalException { get; }
    public Nullable`1<ExceptionType> ExceptionType { get; }
    public TResult Result { get; }
    public TResult FinalHandledResult { get; }
    public Nullable`1<FaultType> FaultType { get; }
    public Context Context { get; }
    internal PolicyResult`1(TResult result, OutcomeType outcome, Exception finalException, Nullable`1<ExceptionType> exceptionType, Context context);
    internal PolicyResult`1(TResult result, OutcomeType outcome, Exception finalException, Nullable`1<ExceptionType> exceptionType, TResult finalHandledResult, Nullable`1<FaultType> faultType, Context context);
    [CompilerGeneratedAttribute]
public OutcomeType get_Outcome();
    [CompilerGeneratedAttribute]
public Exception get_FinalException();
    [CompilerGeneratedAttribute]
public Nullable`1<ExceptionType> get_ExceptionType();
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public TResult get_FinalHandledResult();
    [CompilerGeneratedAttribute]
public Nullable`1<FaultType> get_FaultType();
    [CompilerGeneratedAttribute]
public Context get_Context();
    public static PolicyResult`1<TResult> Successful(TResult result, Context context);
    public static PolicyResult`1<TResult> Failure(Exception exception, ExceptionType exceptionType, Context context);
    public static PolicyResult`1<TResult> Failure(TResult handledResult, Context context);
}
internal static class Polly.RateLimit.AsyncRateLimitEngine : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.RateLimit.AsyncRateLimitEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(IRateLimiter rateLimiter, Func`3<TimeSpan, Context, TResult> retryAfterFactory, Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, bool continueOnCapturedContext, CancellationToken cancellationToken);
}
public class Polly.RateLimit.AsyncRateLimitPolicy : AsyncPolicy {
    [NullableAttribute("1")]
private IRateLimiter _rateLimiter;
    [NullableContextAttribute("1")]
internal AsyncRateLimitPolicy(IRateLimiter rateLimiter);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.RateLimit.AsyncRateLimitPolicy`1 : AsyncPolicy`1<TResult> {
    private IRateLimiter _rateLimiter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TimeSpan, Context, TResult> _retryAfterFactory;
    internal AsyncRateLimitPolicy`1(IRateLimiter rateLimiter, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal interface Polly.RateLimit.IRateLimiter {
    public abstract virtual ValueTuple`2<bool, TimeSpan> PermitExecution();
}
public interface Polly.RateLimit.IRateLimitPolicy {
}
public interface Polly.RateLimit.IRateLimitPolicy`1 {
}
internal class Polly.RateLimit.LockFreeTokenBucketRateLimiter : object {
    private long _addTokenTickInterval;
    private long _bucketCapacity;
    private long _currentTokens;
    private long _addNextTokenAtTicks;
    private SpinWait _spinner;
    public LockFreeTokenBucketRateLimiter(TimeSpan onePer, long bucketCapacity);
    public sealed virtual ValueTuple`2<bool, TimeSpan> PermitExecution();
}
internal static class Polly.RateLimit.RateLimitEngine : object {
    [NullableContextAttribute("1")]
internal static TResult Implementation(IRateLimiter rateLimiter, Func`3<TimeSpan, Context, TResult> retryAfterFactory, Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
internal static class Polly.RateLimit.RateLimiterFactory : object {
    [NullableContextAttribute("1")]
public static IRateLimiter Create(TimeSpan onePer, int bucketCapacity);
}
public class Polly.RateLimit.RateLimitPolicy : Policy {
    [NullableAttribute("1")]
private IRateLimiter _rateLimiter;
    [NullableContextAttribute("1")]
internal RateLimitPolicy(IRateLimiter rateLimiter);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.RateLimit.RateLimitPolicy`1 : Policy`1<TResult> {
    private IRateLimiter _rateLimiter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TimeSpan, Context, TResult> _retryAfterFactory;
    internal RateLimitPolicy`1(IRateLimiter rateLimiter, Func`3<TimeSpan, Context, TResult> retryAfterFactory);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Polly.RateLimit.RateLimitRejectedException : ExecutionRejectedException {
    [CompilerGeneratedAttribute]
private TimeSpan <RetryAfter>k__BackingField;
    public TimeSpan RetryAfter { get; private set; }
    public RateLimitRejectedException(string message);
    public RateLimitRejectedException(string message, Exception inner);
    public RateLimitRejectedException(TimeSpan retryAfter);
    public RateLimitRejectedException(TimeSpan retryAfter, Exception innerException);
    public RateLimitRejectedException(TimeSpan retryAfter, string message);
    public RateLimitRejectedException(TimeSpan retryAfter, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryAfter();
    [CompilerGeneratedAttribute]
private void set_RetryAfter(TimeSpan value);
    private static string DefaultMessage(TimeSpan retryAfter);
    private void SetRetryAfter(TimeSpan retryAfter);
}
public interface Polly.Registry.IConcurrentPolicyRegistry`1 {
    public abstract virtual bool TryAdd(TKey key, TPolicy policy);
    public abstract virtual bool TryRemove(TKey key, TPolicy& policy);
    public abstract virtual bool TryUpdate(TKey key, TPolicy newPolicy, TPolicy comparisonPolicy);
    public abstract virtual TPolicy GetOrAdd(TKey key, Func`2<TKey, TPolicy> policyFactory);
    public abstract virtual TPolicy GetOrAdd(TKey key, TPolicy policy);
    public abstract virtual TPolicy AddOrUpdate(TKey key, Func`2<TKey, TPolicy> addPolicyFactory, Func`3<TKey, TPolicy, TPolicy> updatePolicyFactory);
    public abstract virtual TPolicy AddOrUpdate(TKey key, TPolicy addPolicy, Func`3<TKey, TPolicy, TPolicy> updatePolicyFactory);
}
[DefaultMemberAttribute("Item")]
public interface Polly.Registry.IPolicyRegistry`1 {
    public IsPolicy Item { get; public set; }
    public abstract virtual void Add(TKey key, TPolicy policy);
    public abstract virtual IsPolicy get_Item(TKey key);
    public abstract virtual void set_Item(TKey key, IsPolicy value);
    public abstract virtual bool Remove(TKey key);
    public abstract virtual void Clear();
}
[DefaultMemberAttribute("Item")]
public interface Polly.Registry.IReadOnlyPolicyRegistry`1 {
    public IsPolicy Item { get; }
    public int Count { get; }
    public abstract virtual IsPolicy get_Item(TKey key);
    public abstract virtual TPolicy Get(TKey key);
    public abstract virtual bool TryGet(TKey key, TPolicy& policy);
    public abstract virtual int get_Count();
    public abstract virtual bool ContainsKey(TKey key);
}
[DefaultMemberAttribute("Item")]
public class Polly.Registry.PolicyRegistry : object {
    private IDictionary`2<string, IsPolicy> _registry;
    public int Count { get; }
    public IsPolicy Item { get; public set; }
    internal PolicyRegistry(IDictionary`2<string, IsPolicy> registry);
    private ConcurrentDictionary`2<string, IsPolicy> ThrowIfNotConcurrentImplementation();
    public sealed virtual int get_Count();
    public sealed virtual void Add(string key, TPolicy policy);
    public sealed virtual bool TryAdd(string key, TPolicy policy);
    public sealed virtual IsPolicy get_Item(string key);
    public sealed virtual void set_Item(string key, IsPolicy value);
    public sealed virtual TPolicy Get(string key);
    public sealed virtual bool TryGet(string key, TPolicy& policy);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryRemove(string key, TPolicy& policy);
    public sealed virtual bool TryUpdate(string key, TPolicy newPolicy, TPolicy comparisonPolicy);
    public sealed virtual TPolicy GetOrAdd(string key, Func`2<string, TPolicy> policyFactory);
    public sealed virtual TPolicy GetOrAdd(string key, TPolicy policy);
    public sealed virtual TPolicy AddOrUpdate(string key, Func`2<string, TPolicy> addPolicyFactory, Func`3<string, TPolicy, TPolicy> updatePolicyFactory);
    public sealed virtual TPolicy AddOrUpdate(string key, TPolicy addPolicy, Func`3<string, TPolicy, TPolicy> updatePolicyFactory);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IsPolicy>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class Polly.ResiliencePipelineConversionExtensions : object {
    [ExtensionAttribute]
public static IAsyncPolicy AsAsyncPolicy(ResiliencePipeline strategy);
    [ExtensionAttribute]
public static IAsyncPolicy`1<TResult> AsAsyncPolicy(ResiliencePipeline`1<TResult> strategy);
    [ExtensionAttribute]
public static ISyncPolicy AsSyncPolicy(ResiliencePipeline strategy);
    [ExtensionAttribute]
public static ISyncPolicy`1<TResult> AsSyncPolicy(ResiliencePipeline`1<TResult> strategy);
}
public class Polly.ResultPredicate`1 : MulticastDelegate {
    public ResultPredicate`1(object object, IntPtr method);
    public virtual bool Invoke(TResult result);
    public virtual IAsyncResult BeginInvoke(TResult result, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Polly.ResultPredicates`1 : object {
    private List`1<ResultPredicate`1<TResult>> _predicates;
    public static ResultPredicates`1<TResult> None;
    private static ResultPredicates`1();
    internal void Add(ResultPredicate`1<TResult> predicate);
    public bool AnyMatch(TResult result);
}
internal static class Polly.Retry.AsyncRetryEngine : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Polly.Retry.AsyncRetryEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1<TResult> shouldRetryResultPredicates, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync, CancellationToken cancellationToken, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, bool continueOnCapturedContext);
}
public class Polly.Retry.AsyncRetryPolicy : AsyncPolicy {
    private Func`5<Exception, TimeSpan, int, Context, Task> _onRetryAsync;
    private int _permittedRetryCount;
    private IEnumerable`1<TimeSpan> _sleepDurationsEnumerable;
    private Func`4<int, Exception, Context, TimeSpan> _sleepDurationProvider;
    internal AsyncRetryPolicy(PolicyBuilder policyBuilder, Func`5<Exception, TimeSpan, int, Context, Task> onRetryAsync, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [CompilerGeneratedAttribute]
private TimeSpan <ImplementationAsync>b__5_0(int retryCount, DelegateResult`1<TResult> outcome, Context ctx);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <ImplementationAsync>b__5_1(DelegateResult`1<TResult> outcome, TimeSpan timespan, int retryCount, Context ctx);
}
public class Polly.Retry.AsyncRetryPolicy`1 : AsyncPolicy`1<TResult> {
    private Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> _onRetryAsync;
    private int _permittedRetryCount;
    private IEnumerable`1<TimeSpan> _sleepDurationsEnumerable;
    private Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> _sleepDurationProvider;
    internal AsyncRetryPolicy`1(PolicyBuilder`1<TResult> policyBuilder, Func`5<DelegateResult`1<TResult>, TimeSpan, int, Context, Task> onRetryAsync, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public interface Polly.Retry.IRetryPolicy {
}
public interface Polly.Retry.IRetryPolicy`1 {
}
internal static class Polly.Retry.RetryEngine : object {
    [NullableContextAttribute("1")]
internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1<TResult> shouldRetryResultPredicates, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry, CancellationToken cancellationToken, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider);
}
public class Polly.Retry.RetryPolicy : Policy {
    [NullableAttribute("1")]
private Action`4<Exception, TimeSpan, int, Context> _onRetry;
    private int _permittedRetryCount;
    [NullableAttribute("2")]
private IEnumerable`1<TimeSpan> _sleepDurationsEnumerable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<int, Exception, Context, TimeSpan> _sleepDurationProvider;
    [NullableContextAttribute("1")]
internal RetryPolicy(PolicyBuilder policyBuilder, Action`4<Exception, TimeSpan, int, Context> onRetry, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider);
    [NullableContextAttribute("1")]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private TimeSpan <Implementation>b__5_0(int retryCount, DelegateResult`1<TResult> outcome, Context ctx);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Implementation>b__5_1(DelegateResult`1<TResult> outcome, TimeSpan timespan, int retryCount, Context ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Polly.Retry.RetryPolicy`1 : Policy`1<TResult> {
    private Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> _onRetry;
    private int _permittedRetryCount;
    [NullableAttribute("2")]
private IEnumerable`1<TimeSpan> _sleepDurationsEnumerable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> _sleepDurationProvider;
    internal RetryPolicy`1(PolicyBuilder`1<TResult> policyBuilder, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry, int permittedRetryCount, IEnumerable`1<TimeSpan> sleepDurationsEnumerable, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Polly.RetrySyntax : object {
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder);
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder, int retryCount);
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder, int retryCount, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy Retry(PolicyBuilder policyBuilder, int retryCount, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy RetryForever(PolicyBuilder policyBuilder);
    [ExtensionAttribute]
public static RetryPolicy RetryForever(PolicyBuilder policyBuilder, Action`1<Exception> onRetry);
    [ExtensionAttribute]
public static RetryPolicy RetryForever(PolicyBuilder policyBuilder, Action`2<Exception, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy RetryForever(PolicyBuilder policyBuilder, Action`2<Exception, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy RetryForever(PolicyBuilder policyBuilder, Action`3<Exception, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, int retryCount, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`4<Exception, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<Exception, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<Exception, int, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, int, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Action`3<Exception, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy WaitAndRetryForever(PolicyBuilder policyBuilder, Func`4<int, Exception, Context, TimeSpan> sleepDurationProvider, Action`4<Exception, int, TimeSpan, Context> onRetry);
}
[ExtensionAttribute]
public static class Polly.RetryTResultSyntax : object {
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder, int retryCount);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> Retry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> RetryForever(PolicyBuilder`1<TResult> policyBuilder);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> RetryForever(PolicyBuilder`1<TResult> policyBuilder, Action`1<DelegateResult`1<TResult>> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> RetryForever(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, int> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> RetryForever(PolicyBuilder`1<TResult> policyBuilder, Action`2<DelegateResult`1<TResult>, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> RetryForever(PolicyBuilder`1<TResult> policyBuilder, Action`3<DelegateResult`1<TResult>, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`2<int, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, int retryCount, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetry(PolicyBuilder`1<TResult> policyBuilder, IEnumerable`1<TimeSpan> sleepDurations, Action`4<DelegateResult`1<TResult>, TimeSpan, int, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`2<DelegateResult`1<TResult>, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`2<int, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, int, TimeSpan> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`3<int, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, int, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Action`3<DelegateResult`1<TResult>, TimeSpan, Context> onRetry);
    [ExtensionAttribute]
public static RetryPolicy`1<TResult> WaitAndRetryForever(PolicyBuilder`1<TResult> policyBuilder, Func`4<int, DelegateResult`1<TResult>, Context, TimeSpan> sleepDurationProvider, Action`4<DelegateResult`1<TResult>, int, TimeSpan, Context> onRetry);
}
[ExtensionAttribute]
internal static class Polly.Timeout.AsyncTimeoutEngine : object {
    [AsyncStateMachineAttribute("Polly.Timeout.AsyncTimeoutEngine/<ImplementationAsync>d__0`1")]
internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync, bool continueOnCapturedContext, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static Task`1<TResult> AsTask(CancellationToken cancellationToken);
}
public class Polly.Timeout.AsyncTimeoutPolicy : AsyncPolicy {
    private Func`2<Context, TimeSpan> _timeoutProvider;
    private TimeoutStrategy _timeoutStrategy;
    private Func`5<Context, TimeSpan, Task, Exception, Task> _onTimeoutAsync;
    internal AsyncTimeoutPolicy(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public class Polly.Timeout.AsyncTimeoutPolicy`1 : AsyncPolicy`1<TResult> {
    private TimeoutStrategy _timeoutStrategy;
    private Func`2<Context, TimeSpan> _timeoutProvider;
    private Func`5<Context, TimeSpan, Task, Exception, Task> _onTimeoutAsync;
    internal AsyncTimeoutPolicy`1(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5<Context, TimeSpan, Task, Exception, Task> onTimeoutAsync);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public interface Polly.Timeout.ITimeoutPolicy {
}
public interface Polly.Timeout.ITimeoutPolicy`1 {
}
internal static class Polly.Timeout.TimeoutEngine : object {
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout, CancellationToken cancellationToken);
}
public class Polly.Timeout.TimeoutPolicy : Policy {
    private TimeoutStrategy _timeoutStrategy;
    private Func`2<Context, TimeSpan> _timeoutProvider;
    private Action`4<Context, TimeSpan, Task, Exception> _onTimeout;
    internal TimeoutPolicy(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public class Polly.Timeout.TimeoutPolicy`1 : Policy`1<TResult> {
    private TimeoutStrategy _timeoutStrategy;
    private Func`2<Context, TimeSpan> _timeoutProvider;
    private Action`4<Context, TimeSpan, Task, Exception> _onTimeout;
    internal TimeoutPolicy`1(Func`2<Context, TimeSpan> timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4<Context, TimeSpan, Task, Exception> onTimeout);
    protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public enum Polly.Timeout.TimeoutStrategy : Enum {
    public int value__;
    public static TimeoutStrategy Optimistic;
    public static TimeoutStrategy Pessimistic;
}
internal static class Polly.Timeout.TimeoutValidator : object {
    internal static void ValidateSecondsTimeout(int seconds);
    internal static void ValidateTimeSpanTimeout(TimeSpan timeout);
}
[IsReadOnlyAttribute]
internal class Polly.Utilities.EmptyStruct : ValueType {
    internal static EmptyStruct Instance;
}
[ExtensionAttribute]
public static class Polly.Utilities.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RethrowWithOriginalStackTraceIfDiffersFrom(Exception exceptionPossiblyToThrow, Exception exceptionToCompare);
}
internal static class Polly.Utilities.KeyHelper : object {
    private static int GuidPartLength;
    [NullableContextAttribute("1")]
public static string GuidPart();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Polly.Utilities.LockTimeoutException : Exception {
    public LockTimeoutException(string message);
    public LockTimeoutException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Polly.Utilities.SystemClock : object {
    public static Action`2<TimeSpan, CancellationToken> Sleep;
    public static Func`3<TimeSpan, CancellationToken, Task> SleepAsync;
    public static Func`1<DateTime> UtcNow;
    public static Func`1<DateTimeOffset> DateTimeOffsetUtcNow;
    public static Action`2<CancellationTokenSource, TimeSpan> CancelTokenAfter;
    private static SystemClock();
    public static void Reset();
}
public static class Polly.Utilities.TaskHelper : object {
    [NullableAttribute("1")]
public static Task EmptyTask;
    private static TaskHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Polly.Utilities.TimedLock : ValueType {
    private static TimeSpan LockTimeout;
    private object _target;
    private TimedLock(object o);
    private static TimedLock();
    public static TimedLock Lock(object o);
    private static TimedLock Lock(object o, TimeSpan timeout);
    public sealed virtual void Dispose();
}
internal static class Polly.Utilities.Wrappers.ResilienceContextFactory : object {
    public static ResilienceContext Create(Context context, bool continueOnCapturedContext, IDictionary`2& oldProperties, CancellationToken cancellationToken);
    public static void Cleanup(ResilienceContext resilienceContext, IDictionary`2<string, object> oldProperties);
}
internal class Polly.Utilities.Wrappers.ResiliencePipelineAsyncPolicy : AsyncPolicy {
    private ResiliencePipeline _pipeline;
    public ResiliencePipelineAsyncPolicy(ResiliencePipeline strategy);
    [AsyncStateMachineAttribute("Polly.Utilities.Wrappers.ResiliencePipelineAsyncPolicy/<ImplementationAsync>d__2")]
protected virtual Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("Polly.Utilities.Wrappers.ResiliencePipelineAsyncPolicy/<ImplementationAsync>d__3`1")]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal class Polly.Utilities.Wrappers.ResiliencePipelineAsyncPolicy`1 : AsyncPolicy`1<TResult> {
    private ResiliencePipeline`1<TResult> _pipeline;
    public ResiliencePipelineAsyncPolicy`1(ResiliencePipeline`1<TResult> strategy);
    [AsyncStateMachineAttribute("Polly.Utilities.Wrappers.ResiliencePipelineAsyncPolicy`1/<ImplementationAsync>d__2")]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal class Polly.Utilities.Wrappers.ResiliencePipelineSyncPolicy : Policy {
    private ResiliencePipeline _pipeline;
    public ResiliencePipelineSyncPolicy(ResiliencePipeline strategy);
    protected virtual void Implementation(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
internal class Polly.Utilities.Wrappers.ResiliencePipelineSyncPolicy`1 : Policy`1<TResult> {
    private ResiliencePipeline`1<TResult> _pipeline;
    public ResiliencePipelineSyncPolicy`1(ResiliencePipeline`1<TResult> strategy);
    protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public class Polly.Wrap.AsyncPolicyWrap : AsyncPolicy {
    private IAsyncPolicy _outer;
    private IAsyncPolicy _inner;
    public IsPolicy Outer { get; }
    public IsPolicy Inner { get; }
    internal AsyncPolicyWrap(AsyncPolicy outer, IAsyncPolicy inner);
    internal virtual void SetPolicyContext(Context executionContext, String& priorPolicyWrapKey, String& priorPolicyKey);
    public sealed virtual IsPolicy get_Outer();
    public sealed virtual IsPolicy get_Inner();
    [DebuggerStepThroughAttribute]
protected virtual Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
public class Polly.Wrap.AsyncPolicyWrap`1 : AsyncPolicy`1<TResult> {
    private IAsyncPolicy _outerNonGeneric;
    private IAsyncPolicy _innerNonGeneric;
    private IAsyncPolicy`1<TResult> _outerGeneric;
    private IAsyncPolicy`1<TResult> _innerGeneric;
    public IsPolicy Outer { get; }
    public IsPolicy Inner { get; }
    internal AsyncPolicyWrap`1(AsyncPolicy outer, IAsyncPolicy`1<TResult> inner);
    internal AsyncPolicyWrap`1(AsyncPolicy`1<TResult> outer, IAsyncPolicy inner);
    internal AsyncPolicyWrap`1(AsyncPolicy`1<TResult> outer, IAsyncPolicy`1<TResult> inner);
    internal virtual void SetPolicyContext(Context executionContext, String& priorPolicyWrapKey, String& priorPolicyKey);
    public sealed virtual IsPolicy get_Outer();
    public sealed virtual IsPolicy get_Inner();
    protected virtual Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> action, Context context, CancellationToken cancellationToken, bool continueOnCapturedContext);
}
internal static class Polly.Wrap.AsyncPolicyWrapEngine : object {
    internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> func, Context context, bool continueOnCapturedContext, IAsyncPolicy`1<TResult> outerPolicy, IAsyncPolicy`1<TResult> innerPolicy, CancellationToken cancellationToken);
    internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> func, Context context, bool continueOnCapturedContext, IAsyncPolicy`1<TResult> outerPolicy, IAsyncPolicy innerPolicy, CancellationToken cancellationToken);
    internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> func, Context context, bool continueOnCapturedContext, IAsyncPolicy outerPolicy, IAsyncPolicy`1<TResult> innerPolicy, CancellationToken cancellationToken);
    internal static Task`1<TResult> ImplementationAsync(Func`3<Context, CancellationToken, Task`1<TResult>> func, Context context, bool continueOnCapturedContext, IAsyncPolicy outerPolicy, IAsyncPolicy innerPolicy, CancellationToken cancellationToken);
    internal static Task ImplementationAsync(Func`3<Context, CancellationToken, Task> action, Context context, bool continueOnCapturedContext, IAsyncPolicy outerPolicy, IAsyncPolicy innerPolicy, CancellationToken cancellationToken);
}
public interface Polly.Wrap.IPolicyWrap {
    public IsPolicy Outer { get; }
    public IsPolicy Inner { get; }
    public abstract virtual IsPolicy get_Outer();
    public abstract virtual IsPolicy get_Inner();
}
public interface Polly.Wrap.IPolicyWrap`1 {
}
[ExtensionAttribute]
public static class Polly.Wrap.IPolicyWrapExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IsPolicy> GetPolicies(IPolicyWrap policyWrap);
    [ExtensionAttribute]
public static IEnumerable`1<TPolicy> GetPolicies(IPolicyWrap policyWrap);
    [ExtensionAttribute]
public static IEnumerable`1<TPolicy> GetPolicies(IPolicyWrap policyWrap, Func`2<TPolicy, bool> filter);
    [ExtensionAttribute]
public static TPolicy GetPolicy(IPolicyWrap policyWrap);
    [ExtensionAttribute]
public static TPolicy GetPolicy(IPolicyWrap policyWrap, Func`2<TPolicy, bool> filter);
    [IteratorStateMachineAttribute("Polly.Wrap.IPolicyWrapExtension/<GetPoliciesIterator>d__5")]
private static IEnumerable`1<IsPolicy> GetPoliciesIterator(IPolicyWrap policyWrap);
}
public class Polly.Wrap.PolicyWrap : Policy {
    private ISyncPolicy _outer;
    private ISyncPolicy _inner;
    public IsPolicy Outer { get; }
    public IsPolicy Inner { get; }
    internal PolicyWrap(Policy outer, ISyncPolicy inner);
    internal virtual void SetPolicyContext(Context executionContext, String& priorPolicyWrapKey, String& priorPolicyKey);
    public sealed virtual IsPolicy get_Outer();
    public sealed virtual IsPolicy get_Inner();
    [DebuggerStepThroughAttribute]
protected virtual void Implementation(Action`2<Context, CancellationToken> action, Context context, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
public class Polly.Wrap.PolicyWrap`1 : Policy`1<TResult> {
    private ISyncPolicy _outerNonGeneric;
    private ISyncPolicy _innerNonGeneric;
    private ISyncPolicy`1<TResult> _outerGeneric;
    private ISyncPolicy`1<TResult> _innerGeneric;
    public IsPolicy Outer { get; }
    public IsPolicy Inner { get; }
    internal PolicyWrap`1(Policy outer, ISyncPolicy`1<TResult> inner);
    internal PolicyWrap`1(Policy`1<TResult> outer, ISyncPolicy inner);
    internal PolicyWrap`1(Policy`1<TResult> outer, ISyncPolicy`1<TResult> inner);
    internal virtual void SetPolicyContext(Context executionContext, String& priorPolicyWrapKey, String& priorPolicyKey);
    public sealed virtual IsPolicy get_Outer();
    public sealed virtual IsPolicy get_Inner();
    protected virtual TResult Implementation(Func`3<Context, CancellationToken, TResult> action, Context context, CancellationToken cancellationToken);
}
internal static class Polly.Wrap.PolicyWrapEngine : object {
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> func, Context context, ISyncPolicy`1<TResult> outerPolicy, ISyncPolicy`1<TResult> innerPolicy, CancellationToken cancellationToken);
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> func, Context context, ISyncPolicy`1<TResult> outerPolicy, ISyncPolicy innerPolicy, CancellationToken cancellationToken);
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> func, Context context, ISyncPolicy outerPolicy, ISyncPolicy`1<TResult> innerPolicy, CancellationToken cancellationToken);
    internal static TResult Implementation(Func`3<Context, CancellationToken, TResult> func, Context context, ISyncPolicy outerPolicy, ISyncPolicy innerPolicy, CancellationToken cancellationToken);
    internal static void Implementation(Action`2<Context, CancellationToken> action, Context context, ISyncPolicy outerPolicy, ISyncPolicy innerPolicy, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
