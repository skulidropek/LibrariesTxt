[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.DelegationModes : Enum {
    public int value__;
    public static DelegationModes Default;
    public static DelegationModes ApplyToDatabases;
    public static DelegationModes ApplyToTables;
    public static DelegationModes ApplyToColumns;
    public static DelegationModes ApplyToAll;
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId : object {
    private static string _validationPrefix;
    public static EventId DecimalTypeDefaultWarning;
    public static EventId ByteIdentityColumnWarning;
    private static string _scaffoldingPrefix;
    private static string _migrationsPrefix;
    public static EventId ColumnFound;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnFound;
    public static EventId DefaultSchemaFound;
    public static EventId TypeAliasFound;
    public static EventId MissingSchemaWarning;
    public static EventId MissingTableWarning;
    [ObsoleteAttribute]
public static EventId SequenceNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexColumnsNotMappedWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnsNotMappedWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyNotNamedWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnMissingWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnNotNamedWarning;
    [ObsoleteAttribute]
public static EventId ColumnNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexTableMissingWarning;
    [ObsoleteAttribute]
public static EventId IndexColumnNotNamedWarning;
    public static EventId TableFound;
    [ObsoleteAttribute]
public static EventId TableSkipped;
    [ObsoleteAttribute]
public static EventId ColumnSkipped;
    [ObsoleteAttribute]
public static EventId IndexColumnFound;
    [ObsoleteAttribute]
public static EventId IndexColumnSkipped;
    public static EventId SequenceFound;
    [ObsoleteAttribute]
public static EventId ForeignKeyTableMissingWarning;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId ReflexiveConstraintIgnored;
    public static EventId DefaultValueNotSupportedWarning;
    private static MySqlEventId();
    private static EventId MakeValidationId(Id id);
    private static EventId MakeScaffoldingId(Id id);
    private static EventId MakeMigrationsId(Id id);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<MySqlDbContextOptionsBuilder, MySqlOptionsExtension> {
    public MySqlDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    [ObsoleteAttribute("Call the Fluent API extension method 'HasCharSet()' on the builder object of your model/entities/properties instead. To get the exact behavior as with `CharSet()`, call 'modelBuilder.HasCharSet(charSet, DelegationModes.ApplyToColumns)'.", "True")]
public virtual MySqlDbContextOptionsBuilder CharSet(CharSet charSet);
    public virtual MySqlDbContextOptionsBuilder EnableRetryOnFailure();
    public virtual MySqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount);
    public virtual MySqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    public virtual MySqlDbContextOptionsBuilder DisableBackslashEscaping(bool setSqlModeOnOpen);
    public virtual MySqlDbContextOptionsBuilder SetSqlModeOnOpen();
    public virtual MySqlDbContextOptionsBuilder DisableLineBreakToCharSubstition();
    public virtual MySqlDbContextOptionsBuilder DefaultDataTypeMappings(Func`2<MySqlDefaultDataTypeMappings, MySqlDefaultDataTypeMappings> defaultDataTypeMappings);
    public virtual MySqlDbContextOptionsBuilder SchemaBehavior(MySqlSchemaBehavior behavior, MySqlSchemaNameTranslator translator);
    public virtual MySqlDbContextOptionsBuilder EnableIndexOptimizedBooleanColumns(bool enable);
    public virtual MySqlDbContextOptionsBuilder LimitKeyedOrIndexedStringColumnLength(bool enable);
    public virtual MySqlDbContextOptionsBuilder EnableStringComparisonTranslations(bool enable);
    public virtual MySqlDbContextOptionsBuilder EnablePrimitiveCollectionsSupport(bool enable);
}
public class Microsoft.EntityFrameworkCore.MariaDbServerVersion : ServerVersion {
    public static string MariaDbTypeIdentifier;
    public static ServerVersion LatestSupportedServerVersion;
    [CompilerGeneratedAttribute]
private ServerVersionSupport <Supports>k__BackingField;
    public ServerVersionSupport Supports { get; }
    public MariaDbServerVersion(Version version);
    public MariaDbServerVersion(string versionString);
    public MariaDbServerVersion(ServerVersion serverVersion);
    private static MariaDbServerVersion();
    [CompilerGeneratedAttribute]
public virtual ServerVersionSupport get_Supports();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder : RelationalConventionSetBuilder {
    public MySqlConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
}
public enum Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy : Enum {
    public int value__;
    public static MySqlValueGenerationStrategy None;
    public static MySqlValueGenerationStrategy IdentityColumn;
    public static MySqlValueGenerationStrategy ComputedColumn;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.MySqlMigrationBuilderExtensions : object {
    [ExtensionAttribute]
public static bool IsMySql(MigrationBuilder migrationBuilder);
    [ExtensionAttribute]
public static OperationBuilder`1<MySqlDropPrimaryKeyAndRecreateForeignKeysOperation> DropPrimaryKey(MigrationBuilder migrationBuilder, string name, string table, string schema, bool recreateForeignKeys);
    [ExtensionAttribute]
public static OperationBuilder`1<MySqlDropUniqueConstraintAndRecreateForeignKeysOperation> DropUniqueConstraint(MigrationBuilder migrationBuilder, string name, string table, string schema, bool recreateForeignKeys);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation : DatabaseOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharSet>k__BackingField;
    public string Name { get; public set; }
    public string CharSet { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CharSet();
    [CompilerGeneratedAttribute]
public virtual void set_CharSet(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropPrimaryKeyAndRecreateForeignKeysOperation : DropPrimaryKeyOperation {
    [CompilerGeneratedAttribute]
private bool <RecreateForeignKeys>k__BackingField;
    public bool RecreateForeignKeys { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_RecreateForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_RecreateForeignKeys(bool value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropUniqueConstraintAndRecreateForeignKeysOperation : DropUniqueConstraintOperation {
    [CompilerGeneratedAttribute]
private bool <RecreateForeignKeys>k__BackingField;
    public bool RecreateForeignKeys { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_RecreateForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_RecreateForeignKeys(bool value);
}
[AttributeUsageAttribute("388")]
public class Microsoft.EntityFrameworkCore.MySqlCharSetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CharSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DelegationModes> <DelegationModes>k__BackingField;
    public string CharSetName { get; }
    public Nullable`1<DelegationModes> DelegationModes { get; }
    public MySqlCharSetAttribute(string charSet);
    public MySqlCharSetAttribute(string charSet, DelegationModes delegationModes);
    protected MySqlCharSetAttribute(string charSet, Nullable`1<DelegationModes> delegationModes);
    [CompilerGeneratedAttribute]
public virtual string get_CharSetName();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DelegationModes> get_DelegationModes();
}
[AttributeUsageAttribute("388")]
public class Microsoft.EntityFrameworkCore.MySqlCollationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CollationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DelegationModes> <DelegationModes>k__BackingField;
    public string CollationName { get; }
    public Nullable`1<DelegationModes> DelegationModes { get; }
    public MySqlCollationAttribute(string collation);
    public MySqlCollationAttribute(string collation, DelegationModes delegationModes);
    protected MySqlCollationAttribute(string collation, Nullable`1<DelegationModes> delegationModes);
    [CompilerGeneratedAttribute]
public virtual string get_CollationName();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DelegationModes> get_DelegationModes();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions : Enum {
    public int value__;
    public static MySqlCommonJsonChangeTrackingOptions RootPropertyOnly;
    public static MySqlCommonJsonChangeTrackingOptions FullHierarchyOptimizedFast;
    public static MySqlCommonJsonChangeTrackingOptions FullHierarchyOptimizedSemantically;
    public static MySqlCommonJsonChangeTrackingOptions FullHierarchySemantically;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptionsExtensions : object {
    [ExtensionAttribute]
public static MySqlJsonChangeTrackingOptions ToJsonChangeTrackingOptions(MySqlCommonJsonChangeTrackingOptions options);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsMySql(DatabaseFacade database);
    [ExtensionAttribute]
public static void SetDbDataSource(DatabaseFacade databaseFacade, DbDataSource dataSource);
    private static IRelationalDatabaseFacadeDependencies GetFacadeDependencies(DatabaseFacade databaseFacade);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySql(DbContextOptionsBuilder optionsBuilder, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySql(DbContextOptionsBuilder optionsBuilder, string connectionString, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySql(DbContextOptionsBuilder optionsBuilder, DbConnection connection, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySql(DbContextOptionsBuilder optionsBuilder, DbDataSource dataSource, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySql(DbContextOptionsBuilder`1<TContext> optionsBuilder, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySql(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySql(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySql(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbDataSource dataSource, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction);
    private static MySqlOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
    private static void ConfigureWarnings(DbContextOptionsBuilder optionsBuilder);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, DateTime dateTime, string fromTimeZone, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateOnly> ConvertTimeZone(DbFunctions _, DateOnly dateOnly, string fromTimeZone, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, Nullable`1<DateTime> dateTime, string fromTimeZone, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateOnly> ConvertTimeZone(DbFunctions _, Nullable`1<DateOnly> dateOnly, string fromTimeZone, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, DateTime dateTime, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, DateTimeOffset dateTimeOffset, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateOnly> ConvertTimeZone(DbFunctions _, DateOnly dateOnly, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, Nullable`1<DateTime> dateTime, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ConvertTimeZone(DbFunctions _, Nullable`1<DateTimeOffset> dateTimeOffset, string toTimeZone);
    [ExtensionAttribute]
public static Nullable`1<DateOnly> ConvertTimeZone(DbFunctions _, Nullable`1<DateOnly> dateOnly, string toTimeZone);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, T matchExpression, string pattern);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, T matchExpression, string pattern, string escapeCharacter);
    [ExtensionAttribute]
public static bool IsMatch(DbFunctions _, string property, string pattern, MySqlMatchSearchMode searchMode);
    [ExtensionAttribute]
public static bool IsMatch(DbFunctions _, String[] properties, string pattern, MySqlMatchSearchMode searchMode);
    [ExtensionAttribute]
public static double Match(DbFunctions _, string property, string pattern, MySqlMatchSearchMode searchMode);
    [ExtensionAttribute]
public static double Match(DbFunctions _, String[] properties, string pattern, MySqlMatchSearchMode searchMode);
    [ExtensionAttribute]
public static string Hex(DbFunctions _, T value);
    [ExtensionAttribute]
public static string Unhex(DbFunctions _, string value);
    [ExtensionAttribute]
public static double Degrees(DbFunctions _, double radians);
    [ExtensionAttribute]
public static float Degrees(DbFunctions _, float radians);
    [ExtensionAttribute]
public static double Radians(DbFunctions _, double degrees);
    [ExtensionAttribute]
public static float Radians(DbFunctions _, float degrees);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder HasCharSet(EntityTypeBuilder entityTypeBuilder, string charSet, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static EntityTypeBuilder HasCharSet(EntityTypeBuilder entityTypeBuilder, string charSet, bool explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasCharSet(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string charSet, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasCharSet(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string charSet, bool explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasCharSet(IConventionEntityTypeBuilder entityTypeBuilder, string charSet, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasCharSet(IConventionEntityTypeBuilder entityTypeBuilder, string charSet, bool explicitlyDelegateToChildren, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCharSet(IConventionEntityTypeBuilder entityTypeBuilder, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCharSetDelegation(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder UseCollation(EntityTypeBuilder entityTypeBuilder, string collation, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static EntityTypeBuilder UseCollation(EntityTypeBuilder entityTypeBuilder, string collation, bool explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseCollation(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string collation, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseCollation(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string collation, bool explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder UseCollation(IConventionEntityTypeBuilder entityTypeBuilder, string collation, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder UseCollation(IConventionEntityTypeBuilder entityTypeBuilder, string collation, bool explicitlyDelegateToChildren, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollation(IConventionEntityTypeBuilder entityTypeBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollationDelegation(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder HasTableOption(EntityTypeBuilder entityTypeBuilder, string name, string value);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasTableOption(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string value);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasTableOption(IConventionEntityTypeBuilder entityTypeBuilder, string name, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetTableOption(IConventionEntityTypeBuilder entityTypeBuilder, string name, string value, bool fromDataAnnotation);
    private static void UpdateTableOption(string key, string value, Dictionary`2<string, string> options);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions : object {
    [ExtensionAttribute]
public static string GetCharSet(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetCharSet(IMutableEntityType entityType, string charSet);
    [ExtensionAttribute]
public static string SetCharSet(IConventionEntityType entityType, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCharSetConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> GetCharSetDelegation(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetCharSetDelegation(IMutableEntityType entityType, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> SetCharSetDelegation(IConventionEntityType entityType, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCharSetDelegationConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static DelegationModes GetActualCharSetDelegation(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetCollation(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetCollation(IMutableEntityType entityType, string collation);
    [ExtensionAttribute]
public static string SetCollation(IConventionEntityType entityType, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> GetCollationDelegation(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetCollationDelegation(IMutableEntityType entityType, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> SetCollationDelegation(IConventionEntityType entityType, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationDelegationConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static DelegationModes GetActualCollationDelegation(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetTableOptions(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetTableOptions(IMutableEntityType entityType, Dictionary`2<string, string> options);
    [ExtensionAttribute]
public static Dictionary`2<string, string> SetTableOptions(IConventionEntityType entityType, Dictionary`2<string, string> options, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTableOptionsConfigurationSource(IConventionEntityType entityType);
    internal static string SerializeTableOptions(Dictionary`2<string, string> options);
    internal static Dictionary`2<string, string> DeserializeTableOptions(string optionsString);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This extension method is obsolete. Use IsFullText instead.")]
public static IndexBuilder ForMySqlIsFullText(IndexBuilder indexBuilder, bool fullText);
    [ExtensionAttribute]
[ObsoleteAttribute("This extension method is obsolete. Use IsFullText instead.")]
public static IndexBuilder`1<TEntity> ForMySqlIsFullText(IndexBuilder`1<TEntity> indexBuilder, bool fullText);
    [ExtensionAttribute]
public static IndexBuilder IsFullText(IndexBuilder indexBuilder, bool fullText, string parser);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsFullText(IndexBuilder`1<TEntity> indexBuilder, bool fullText, string parser);
    [ExtensionAttribute]
[ObsoleteAttribute("This extension method is obsolete. Use IsSpatial instead.")]
public static IndexBuilder ForMySqlIsSpatial(IndexBuilder indexBuilder, bool spatial);
    [ExtensionAttribute]
[ObsoleteAttribute("This extension method is obsolete. Use IsSpatial instead.")]
public static IndexBuilder`1<TEntity> ForMySqlIsSpatial(IndexBuilder`1<TEntity> indexBuilder, bool spatial);
    [ExtensionAttribute]
public static IndexBuilder IsSpatial(IndexBuilder indexBuilder, bool spatial);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsSpatial(IndexBuilder`1<TEntity> indexBuilder, bool spatial);
    [ExtensionAttribute]
public static IndexBuilder HasPrefixLength(IndexBuilder indexBuilder, Int32[] prefixLengths);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasPrefixLength(IndexBuilder`1<TEntity> indexBuilder, Int32[] prefixLengths);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlIndexExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsFullText(IIndex index);
    [ExtensionAttribute]
public static void SetIsFullText(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsFullText(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsFullTextConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string FullTextParser(IIndex index);
    [ExtensionAttribute]
public static void SetFullTextParser(IMutableIndex index, string value);
    [ExtensionAttribute]
public static string SetFullTextParser(IConventionIndex index, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetFullTextParserConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
public static Int32[] PrefixLength(IIndex index);
    [ExtensionAttribute]
public static void SetPrefixLength(IMutableIndex index, Int32[] values);
    [ExtensionAttribute]
public static Int32[] SetPrefixLength(IConventionIndex index, Int32[] values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPrefixLengthConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
public static Nullable`1<bool> IsSpatial(IIndex index);
    [ExtensionAttribute]
public static void SetIsSpatial(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsSpatial(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsSpatialConfigurationSource(IConventionIndex property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static MySqlJsonString AsJson(DbFunctions _, string value);
    [ExtensionAttribute]
public static string JsonType(DbFunctions _, object json);
    [ExtensionAttribute]
public static string JsonQuote(DbFunctions _, string value);
    [ExtensionAttribute]
public static string JsonUnquote(DbFunctions _, object json);
    [ExtensionAttribute]
public static T JsonExtract(DbFunctions _, object json, String[] paths);
    [ExtensionAttribute]
public static bool JsonContains(DbFunctions _, object json, object candidate);
    [ExtensionAttribute]
public static bool JsonContains(DbFunctions _, object json, object candidate, string path);
    [ExtensionAttribute]
public static bool JsonContainsPath(DbFunctions _, object json, string path);
    [ExtensionAttribute]
public static bool JsonContainsPathAny(DbFunctions _, object json, String[] paths);
    [ExtensionAttribute]
public static bool JsonContainsPathAll(DbFunctions _, object json, String[] paths);
    [ExtensionAttribute]
public static bool JsonSearchAny(DbFunctions _, object json, string searchString);
    [ExtensionAttribute]
public static bool JsonSearchAny(DbFunctions _, object json, string searchString, string path);
    [ExtensionAttribute]
public static bool JsonSearchAny(DbFunctions _, object json, string searchString, string path, string escapeChar);
}
public class Microsoft.EntityFrameworkCore.MySqlJsonString : object {
    private string _json;
    private MySqlJsonString(string json);
    public static string op_Implicit(MySqlJsonString jsonStringObject);
    public static MySqlJsonString op_Implicit(string stringObject);
    public static bool op_Equality(MySqlJsonString left, MySqlJsonString right);
    public static bool op_Inequality(MySqlJsonString left, MySqlJsonString right);
    public static bool op_Equality(MySqlJsonString left, string right);
    public static bool op_Inequality(MySqlJsonString left, string right);
    private bool Equals(MySqlJsonString other);
    private bool Equals(string other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder HasPrefixLength(KeyBuilder keyBuilder, Int32[] prefixLengths);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlKeyExtensions : object {
    [ExtensionAttribute]
public static Int32[] PrefixLength(IKey key);
    [ExtensionAttribute]
public static void SetPrefixLength(IMutableKey key, Int32[] values);
    [ExtensionAttribute]
public static void SetPrefixLength(IConventionKey key, Int32[] values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPrefixLengthConfigurationSource(IConventionKey property);
}
public enum Microsoft.EntityFrameworkCore.MySqlMatchSearchMode : Enum {
    public int value__;
    public static MySqlMatchSearchMode NaturalLanguage;
    public static MySqlMatchSearchMode NaturalLanguageWithQueryExpansion;
    public static MySqlMatchSearchMode Boolean;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder AutoIncrementColumns(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static IConventionModelBuilder HasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<MySqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<MySqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasCharSet(ModelBuilder modelBuilder, string charSet, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static ModelBuilder HasCharSet(ModelBuilder modelBuilder, string charSet, bool explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static IConventionModelBuilder HasCharSet(IConventionModelBuilder modelBuilder, string charSet, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasCharSet(IConventionModelBuilder modelBuilder, string charSet, bool explicitlyDelegateToChildren, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCharSet(IConventionModelBuilder modelBuilder, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCharSetDelegation(IConventionModelBuilder modelBuilder, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseCollation(ModelBuilder modelBuilder, string collation, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static ModelBuilder UseCollation(ModelBuilder modelBuilder, string collation, Nullable`1<bool> explicitlyDelegateToChildren);
    [ExtensionAttribute]
public static IConventionModelBuilder UseCollation(IConventionModelBuilder modelBuilder, string collation, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder UseCollation(IConventionModelBuilder modelBuilder, string collation, Nullable`1<bool> explicitlyDelegateToChildren, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollationDelegation(IConventionModelBuilder modelBuilder, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseGuidCollation(ModelBuilder modelBuilder, string collation);
    [ExtensionAttribute]
public static IConventionModelBuilder UseGuidCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetGuidCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlModelExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<MySqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionModel model, Nullable`1<MySqlValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetCharSet(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetCharSet(IMutableModel model, string charSet);
    [ExtensionAttribute]
public static string SetCharSet(IConventionModel model, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCharSetConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> GetCharSetDelegation(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetCharSetDelegation(IMutableModel model, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> SetCharSetDelegation(IConventionModel model, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCharSetDelegationConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static DelegationModes GetActualCharSetDelegation(IReadOnlyModel model);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> GetCollationDelegation(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetCollationDelegation(IMutableModel model, Nullable`1<DelegationModes> delegationModes);
    [ExtensionAttribute]
public static Nullable`1<DelegationModes> SetCollationDelegation(IConventionModel model, Nullable`1<DelegationModes> delegationModes, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationDelegationConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static DelegationModes GetActualCollationDelegation(IReadOnlyModel model);
    [ExtensionAttribute]
public static string GetGuidCollation(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetGuidCollation(IMutableModel model, string collation);
    [ExtensionAttribute]
public static string SetGuidCollation(IConventionModel model, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetGuidCollationConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetActualGuidCollation(IReadOnlyModel model, string defaultCollation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseMySqlIdentityColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseMySqlIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<MySqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<MySqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseMySqlComputedColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseMySqlComputedColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder HasCharSet(PropertyBuilder propertyBuilder, string charSet);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasCharSet(PropertyBuilder`1<TProperty> propertyBuilder, string charSet);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasCharSet(IConventionPropertyBuilder propertyBuilder, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCharSet(IConventionPropertyBuilder propertyBuilder, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Call 'UseCollation()' instead.")]
public static PropertyBuilder HasCollation(PropertyBuilder propertyBuilder, string collation);
    [ExtensionAttribute]
[ObsoleteAttribute("Call 'UseCollation()' instead.")]
public static PropertyBuilder`1<TProperty> HasCollation(PropertyBuilder`1<TProperty> propertyBuilder, string collation);
    [ExtensionAttribute]
public static PropertyBuilder HasSpatialReferenceSystem(PropertyBuilder propertyBuilder, Nullable`1<int> srid);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasSpatialReferenceSystem(PropertyBuilder`1<TProperty> propertyBuilder, Nullable`1<int> srid);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySqlPropertyExtensions : object {
    [ExtensionAttribute]
public static MySqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property);
    [ExtensionAttribute]
public static MySqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
internal static MySqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides overrides);
    private static MySqlValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property);
    private static MySqlValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<MySqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<MySqlValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<MySqlValueGenerationStrategy> value, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<MySqlValueGenerationStrategy> value, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableRelationalPropertyOverrides overrides, Nullable`1<MySqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<MySqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionRelationalPropertyOverrides overrides, Nullable`1<MySqlValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    private static Nullable`1<MySqlValueGenerationStrategy> CheckValueGenerationStrategy(IReadOnlyProperty property, Nullable`1<MySqlValueGenerationStrategy> value);
    public static bool IsCompatibleIdentityColumn(IReadOnlyProperty property);
    private static bool IsCompatibleIdentityColumn(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    public static bool IsCompatibleAutoIncrementColumn(IReadOnlyProperty property);
    private static bool IsCompatibleAutoIncrementColumn(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    public static bool IsCompatibleCurrentTimestampColumn(IReadOnlyProperty property);
    private static bool IsCompatibleCurrentTimestampColumn(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    public static bool IsCompatibleComputedColumn(IReadOnlyProperty property);
    private static bool IsCompatibleComputedColumn(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    private static ValueConverter GetConverter(IReadOnlyProperty property);
    private static ValueConverter GetConverter(IReadOnlyProperty property, StoreObjectIdentifier storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static string GetCharSet(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetCharSet(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
internal static string GetMySqlLegacyCharSet(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetCharSet(IMutableProperty property, string charSet);
    [ExtensionAttribute]
public static string SetCharSet(IConventionProperty property, string charSet, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCharSetConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
internal static string GetMySqlLegacyCollation(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetSpatialReferenceSystem(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetSpatialReferenceSystem(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSpatialReferenceSystem(IMutableProperty property, Nullable`1<int> srid);
    [ExtensionAttribute]
public static Nullable`1<int> SetSpatialReferenceSystem(IConventionProperty property, Nullable`1<int> srid, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSpatialReferenceSystemConfigurationSource(IConventionProperty property);
}
public class Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy : ExecutionStrategy {
    private ICollection`1<int> _additionalErrorNumbers;
    public MySqlRetryingExecutionStrategy(DbContext context);
    public MySqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public MySqlRetryingExecutionStrategy(DbContext context, int maxRetryCount);
    public MySqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public MySqlRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    public MySqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    protected virtual bool ShouldRetryOn(Exception exception);
}
public class Microsoft.EntityFrameworkCore.MySqlServerVersion : ServerVersion {
    public static string MySqlTypeIdentifier;
    public static ServerVersion LatestSupportedServerVersion;
    [CompilerGeneratedAttribute]
private ServerVersionSupport <Supports>k__BackingField;
    public ServerVersionSupport Supports { get; }
    public MySqlServerVersion(Version version);
    public MySqlServerVersion(string versionString);
    public MySqlServerVersion(ServerVersion serverVersion);
    private static MySqlServerVersion();
    [CompilerGeneratedAttribute]
public virtual ServerVersionSupport get_Supports();
}
public abstract class Microsoft.EntityFrameworkCore.ServerVersion : object {
    private static Regex _versionRegex;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeIdentifier>k__BackingField;
    public Version Version { get; }
    public ServerType Type { get; }
    public string TypeIdentifier { get; }
    public ServerVersionSupport Supports { get; }
    public int MaxKeyLength { get; }
    public CharSet DefaultCharSet { get; }
    public string DefaultUtf8CsCollation { get; }
    public string DefaultUtf8CiCollation { get; }
    protected ServerVersion(Version version, ServerType type, string typeIdentifier);
    private static ServerVersion();
    [CompilerGeneratedAttribute]
public virtual Version get_Version();
    [CompilerGeneratedAttribute]
public virtual ServerType get_Type();
    [CompilerGeneratedAttribute]
public virtual string get_TypeIdentifier();
    public abstract virtual ServerVersionSupport get_Supports();
    public virtual int get_MaxKeyLength();
    public virtual CharSet get_DefaultCharSet();
    public virtual string get_DefaultUtf8CsCollation();
    public virtual string get_DefaultUtf8CiCollation();
    public virtual bool Equals(object obj);
    private bool Equals(ServerVersion other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ServerVersion AutoDetect(string connectionString);
    public static ServerVersion AutoDetect(MySqlConnection connection);
    public static ServerVersion Parse(string versionString);
    public static ServerVersion Parse(string versionString, Nullable`1<ServerType> serverType);
    public static bool TryParse(string versionString, ServerVersion& serverVersion);
    public static bool TryParse(string versionString, Nullable`1<ServerType> serverType, ServerVersion& serverVersion);
    public static ServerVersion Create(Version version, ServerType serverType);
    public static ServerVersion Create(int major, int minor, int patch, ServerType serverType);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    public static Nullable`1<TEnum> EnumValue(Nullable`1<TEnum> value, string parameterName);
    public static Nullable`1<TEnum> NullOrEnumValue(Nullable`1<TEnum> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MySqlServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMySql(IServiceCollection serviceCollection, string connectionString, ServerVersion serverVersion, Action`1<MySqlDbContextOptionsBuilder> mySqlOptionsAction, Action`1<DbContextOptionsBuilder> optionsAction);
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkMySql(IServiceCollection serviceCollection);
}
public class Pomelo.EntityFrameworkCore.MySql.Design.Internal.MySqlAnnotationCodeGenerator : AnnotationCodeGenerator {
    private static MethodInfo _modelUseIdentityColumnsMethodInfo;
    private static MethodInfo _modelHasCharSetMethodInfo;
    private static MethodInfo _modelUseCollationMethodInfo;
    private static MethodInfo _modelUseGuidCollationMethodInfo;
    private static MethodInfo _modelHasAnnotationMethodInfo;
    private static MethodInfo _entityTypeHasCharSetMethodInfo;
    private static MethodInfo _entityTypeUseCollationMethodInfo;
    private static MethodInfo _propertyUseIdentityColumnMethodInfo;
    private static MethodInfo _propertyUseComputedColumnMethodInfo;
    private static MethodInfo _propertyHasCharSetMethodInfo;
    public MySqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    private static MySqlAnnotationCodeGenerator();
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Design.Internal.MySqlAnnotationCodeGenerator/<FilterIgnoredAnnotations>d__11")]
public virtual IEnumerable`1<IAnnotation> FilterIgnoredAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation);
    protected virtual AttributeCodeFragment GenerateDataAnnotation(IEntityType entityType, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation);
    protected virtual AttributeCodeFragment GenerateDataAnnotation(IProperty property, IAnnotation annotation);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    private MethodCallCodeFragment GenerateValueGenerationStrategy(IDictionary`2<string, IAnnotation> annotations, bool onModel);
    private static bool TryGetAndRemove(IDictionary`2<string, IAnnotation> annotations, string annotationName, T& annotationValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IAnnotation> <>n__0(IEnumerable`1<IAnnotation> annotations);
}
public class Pomelo.EntityFrameworkCore.MySql.Design.Internal.MySqlCSharpRuntimeAnnotationCodeGenerator : RelationalCSharpRuntimeAnnotationCodeGenerator {
    public MySqlCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies);
    public virtual bool Create(CoreTypeMapping typeMapping, CSharpRuntimeAnnotationCodeGeneratorParameters parameters, ValueComparer valueComparer, ValueComparer keyValueComparer, ValueComparer providerValueComparer);
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IRelationalModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITable table, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IColumn column, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITableIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IKey key, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Design.Internal.MySqlDesignTimeServices : object {
    public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Pomelo.EntityFrameworkCore.MySql.Diagnostics.Internal.MySqlLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogDefaultDecimalTypeColumn;
    public EventDefinitionBase LogByteIdentityColumn;
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundTypeAlias;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogReflexiveConstraintIgnored;
    public EventDefinitionBase LogDefaultValueNotSupported;
}
[ExtensionAttribute]
internal static class Pomelo.EntityFrameworkCore.MySql.Extensions.StringExtensions : object {
    [ExtensionAttribute]
internal static string NullIfEmpty(string value);
}
public class Pomelo.EntityFrameworkCore.MySql.Infrastructure.CharSet : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBytesPerChar>k__BackingField;
    public static CharSet ArmScii8;
    public static CharSet Ascii;
    public static CharSet Big5;
    public static CharSet Binary;
    public static CharSet Cp1250;
    public static CharSet Cp1251;
    public static CharSet Cp1256;
    public static CharSet Cp1257;
    public static CharSet Cp850;
    public static CharSet Cp852;
    public static CharSet Cp866;
    public static CharSet Cp932;
    public static CharSet Dec8;
    public static CharSet EucJpMs;
    public static CharSet EucKr;
    public static CharSet Gb18030;
    public static CharSet Gb2312;
    public static CharSet Gbk;
    public static CharSet GeoStd8;
    public static CharSet Greek;
    public static CharSet Hebrew;
    public static CharSet Hp8;
    public static CharSet KeyBcs2;
    public static CharSet Koi8R;
    public static CharSet Koi8U;
    public static CharSet Latin1;
    public static CharSet Latin2;
    public static CharSet Latin5;
    public static CharSet Latin7;
    public static CharSet MacCe;
    public static CharSet MacRoman;
    public static CharSet SJis;
    public static CharSet Swe7;
    public static CharSet Tis620;
    public static CharSet Ucs2;
    public static CharSet UJis;
    public static CharSet Utf16;
    public static CharSet Utf16Le;
    public static CharSet Utf32;
    [ObsoleteAttribute("Use 'Utf8Mb4' instead.")]
public static CharSet Utf8;
    public static CharSet Utf8Mb3;
    public static CharSet Utf8Mb4;
    public string Name { get; }
    public int MaxBytesPerChar { get; }
    public bool IsUnicode { get; }
    public CharSet(string name, int maxBytesPerChar);
    private static CharSet();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBytesPerChar();
    public static string op_Implicit(CharSet charSet);
    public virtual bool get_IsUnicode();
    public virtual string ToString();
    protected virtual bool Equals(CharSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CharSet GetCharSetFromName(string name);
    internal static FieldInfo GetFieldInfoFromName(string name);
}
public interface Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions {
    public MySqlConnectionSettings ConnectionSettings { get; }
    public DbDataSource DataSource { get; }
    public ServerVersion ServerVersion { get; }
    public CharSet DefaultCharSet { get; }
    public CharSet NationalCharSet { get; }
    public string DefaultGuidCollation { get; }
    public bool NoBackslashEscapes { get; }
    public bool ReplaceLineBreaksWithCharFunction { get; }
    public MySqlDefaultDataTypeMappings DefaultDataTypeMappings { get; }
    public MySqlSchemaNameTranslator SchemaNameTranslator { get; }
    public bool IndexOptimizedBooleanColumns { get; }
    public MySqlJsonChangeTrackingOptions JsonChangeTrackingOptions { get; }
    public bool LimitKeyedOrIndexedStringColumnLength { get; }
    public bool StringComparisonTranslations { get; }
    public bool PrimitiveCollectionsSupport { get; }
    public abstract virtual MySqlConnectionSettings get_ConnectionSettings();
    public abstract virtual DbDataSource get_DataSource();
    public abstract virtual ServerVersion get_ServerVersion();
    public abstract virtual CharSet get_DefaultCharSet();
    public abstract virtual CharSet get_NationalCharSet();
    public abstract virtual string get_DefaultGuidCollation();
    public abstract virtual bool get_NoBackslashEscapes();
    public abstract virtual bool get_ReplaceLineBreaksWithCharFunction();
    public abstract virtual MySqlDefaultDataTypeMappings get_DefaultDataTypeMappings();
    public abstract virtual MySqlSchemaNameTranslator get_SchemaNameTranslator();
    public abstract virtual bool get_IndexOptimizedBooleanColumns();
    public abstract virtual MySqlJsonChangeTrackingOptions get_JsonChangeTrackingOptions();
    public abstract virtual bool get_LimitKeyedOrIndexedStringColumnLength();
    public abstract virtual bool get_StringComparisonTranslations();
    public abstract virtual bool get_PrimitiveCollectionsSupport();
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension : object {
    private DbContextOptionsExtensionInfo _info;
    [CompilerGeneratedAttribute]
private MySqlJsonChangeTrackingOptions <JsonChangeTrackingOptions>k__BackingField;
    public DbContextOptionsExtensionInfo Info { get; }
    public MySqlJsonChangeTrackingOptions JsonChangeTrackingOptions { get; public set; }
    public string UseJsonOptionName { get; }
    public string AddEntityFrameworkName { get; }
    public Type TypeMappingSourcePluginType { get; }
    protected MySqlJsonOptionsExtension(MySqlJsonOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected abstract virtual MySqlJsonOptionsExtension Clone();
    [CompilerGeneratedAttribute]
public virtual MySqlJsonChangeTrackingOptions get_JsonChangeTrackingOptions();
    [CompilerGeneratedAttribute]
public virtual void set_JsonChangeTrackingOptions(MySqlJsonChangeTrackingOptions value);
    public abstract virtual string get_UseJsonOptionName();
    public abstract virtual string get_AddEntityFrameworkName();
    public abstract virtual Type get_TypeMappingSourcePluginType();
    public virtual MySqlJsonOptionsExtension WithJsonChangeTrackingOptions(MySqlCommonJsonChangeTrackingOptions options);
    [EditorBrowsableAttribute("1")]
public virtual MySqlJsonOptionsExtension WithJsonChangeTrackingOptions(MySqlJsonChangeTrackingOptions options);
    public abstract virtual void ApplyServices(IServiceCollection services);
    public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
private bool <Validate>b__19_0(IRelationalTypeMappingSourcePlugin s);
}
public class Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension : RelationalOptionsExtension {
    private DbContextOptionsExtensionInfo _info;
    [CompilerGeneratedAttribute]
private DbDataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerVersion <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBackslashEscapes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateSqlModeOnOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceLineBreaksWithCharFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDefaultDataTypeMappings <DefaultDataTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlSchemaBehavior <SchemaBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlSchemaNameTranslator <SchemaNameTranslator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndexOptimizedBooleanColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitKeyedOrIndexedStringColumnLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StringComparisonTranslations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrimitiveCollectionsSupport>k__BackingField;
    public DbContextOptionsExtensionInfo Info { get; }
    public DbDataSource DataSource { get; private set; }
    public ServerVersion ServerVersion { get; private set; }
    public bool NoBackslashEscapes { get; private set; }
    public bool UpdateSqlModeOnOpen { get; private set; }
    public bool ReplaceLineBreaksWithCharFunction { get; private set; }
    public MySqlDefaultDataTypeMappings DefaultDataTypeMappings { get; private set; }
    public MySqlSchemaBehavior SchemaBehavior { get; private set; }
    public MySqlSchemaNameTranslator SchemaNameTranslator { get; private set; }
    public bool IndexOptimizedBooleanColumns { get; private set; }
    public bool LimitKeyedOrIndexedStringColumnLength { get; private set; }
    public bool StringComparisonTranslations { get; private set; }
    public bool PrimitiveCollectionsSupport { get; private set; }
    public MySqlOptionsExtension(MySqlOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual RelationalOptionsExtension Clone();
    [CompilerGeneratedAttribute]
public virtual DbDataSource get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(DbDataSource value);
    [CompilerGeneratedAttribute]
public virtual ServerVersion get_ServerVersion();
    [CompilerGeneratedAttribute]
private void set_ServerVersion(ServerVersion value);
    [CompilerGeneratedAttribute]
public virtual bool get_NoBackslashEscapes();
    [CompilerGeneratedAttribute]
private void set_NoBackslashEscapes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpdateSqlModeOnOpen();
    [CompilerGeneratedAttribute]
private void set_UpdateSqlModeOnOpen(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ReplaceLineBreaksWithCharFunction();
    [CompilerGeneratedAttribute]
private void set_ReplaceLineBreaksWithCharFunction(bool value);
    [CompilerGeneratedAttribute]
public virtual MySqlDefaultDataTypeMappings get_DefaultDataTypeMappings();
    [CompilerGeneratedAttribute]
private void set_DefaultDataTypeMappings(MySqlDefaultDataTypeMappings value);
    [CompilerGeneratedAttribute]
public virtual MySqlSchemaBehavior get_SchemaBehavior();
    [CompilerGeneratedAttribute]
private void set_SchemaBehavior(MySqlSchemaBehavior value);
    [CompilerGeneratedAttribute]
public virtual MySqlSchemaNameTranslator get_SchemaNameTranslator();
    [CompilerGeneratedAttribute]
private void set_SchemaNameTranslator(MySqlSchemaNameTranslator value);
    [CompilerGeneratedAttribute]
public virtual bool get_IndexOptimizedBooleanColumns();
    [CompilerGeneratedAttribute]
private void set_IndexOptimizedBooleanColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LimitKeyedOrIndexedStringColumnLength();
    [CompilerGeneratedAttribute]
private void set_LimitKeyedOrIndexedStringColumnLength(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_StringComparisonTranslations();
    [CompilerGeneratedAttribute]
private void set_StringComparisonTranslations(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_PrimitiveCollectionsSupport();
    [CompilerGeneratedAttribute]
private void set_PrimitiveCollectionsSupport(bool value);
    public virtual RelationalOptionsExtension WithDataSource(DbDataSource dataSource);
    public virtual RelationalOptionsExtension WithConnectionString(string connectionString);
    public virtual RelationalOptionsExtension WithConnection(DbConnection connection);
    public virtual MySqlOptionsExtension WithServerVersion(ServerVersion serverVersion);
    public virtual MySqlOptionsExtension WithDisabledBackslashEscaping();
    public virtual MySqlOptionsExtension WithSettingSqlModeOnOpen();
    public virtual MySqlOptionsExtension WithDisabledLineBreakToCharSubstition();
    public virtual MySqlOptionsExtension WithDefaultDataTypeMappings(MySqlDefaultDataTypeMappings defaultDataTypeMappings);
    public virtual MySqlOptionsExtension WithSchemaBehavior(MySqlSchemaBehavior behavior, MySqlSchemaNameTranslator translator);
    public virtual MySqlOptionsExtension WithIndexOptimizedBooleanColumns(bool enable);
    public virtual MySqlOptionsExtension WithKeyedOrIndexedStringColumnLengthLimit(bool enable);
    public virtual MySqlOptionsExtension WithStringComparisonTranslations(bool enable);
    public virtual MySqlOptionsExtension WithPrimitiveCollectionsSupport(bool enable);
    public virtual void ApplyServices(IServiceCollection services);
}
public enum Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlBooleanType : Enum {
    public int value__;
    public static MySqlBooleanType None;
    public static MySqlBooleanType Default;
    public static MySqlBooleanType TinyInt1;
    public static MySqlBooleanType Bit1;
}
public enum Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType : Enum {
    public int value__;
    public static MySqlDateTimeType Default;
    public static MySqlDateTimeType DateTime;
    public static MySqlDateTimeType DateTime6;
    public static MySqlDateTimeType Timestamp6;
    public static MySqlDateTimeType Timestamp;
}
public class Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDefaultDataTypeMappings : object {
    [CompilerGeneratedAttribute]
private MySqlBooleanType <ClrBoolean>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDateTimeType <ClrDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDateTimeType <ClrDateTimeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlTimeSpanType <ClrTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClrTimeOnlyPrecision>k__BackingField;
    public MySqlBooleanType ClrBoolean { get; private set; }
    public MySqlDateTimeType ClrDateTime { get; private set; }
    public MySqlDateTimeType ClrDateTimeOffset { get; private set; }
    public MySqlTimeSpanType ClrTimeSpan { get; private set; }
    public int ClrTimeOnlyPrecision { get; private set; }
    protected MySqlDefaultDataTypeMappings(MySqlDefaultDataTypeMappings copyFrom);
    [CompilerGeneratedAttribute]
public virtual MySqlBooleanType get_ClrBoolean();
    [CompilerGeneratedAttribute]
private void set_ClrBoolean(MySqlBooleanType value);
    [CompilerGeneratedAttribute]
public virtual MySqlDateTimeType get_ClrDateTime();
    [CompilerGeneratedAttribute]
private void set_ClrDateTime(MySqlDateTimeType value);
    [CompilerGeneratedAttribute]
public virtual MySqlDateTimeType get_ClrDateTimeOffset();
    [CompilerGeneratedAttribute]
private void set_ClrDateTimeOffset(MySqlDateTimeType value);
    [CompilerGeneratedAttribute]
public virtual MySqlTimeSpanType get_ClrTimeSpan();
    [CompilerGeneratedAttribute]
private void set_ClrTimeSpan(MySqlTimeSpanType value);
    [CompilerGeneratedAttribute]
public virtual int get_ClrTimeOnlyPrecision();
    [CompilerGeneratedAttribute]
private void set_ClrTimeOnlyPrecision(int value);
    public virtual MySqlDefaultDataTypeMappings WithClrBoolean(MySqlBooleanType mysqlBooleanType);
    public virtual MySqlDefaultDataTypeMappings WithClrDateTime(MySqlDateTimeType mysqlDateTimeType);
    public virtual MySqlDefaultDataTypeMappings WithClrDateTimeOffset(MySqlDateTimeType mysqlDateTimeType);
    public virtual MySqlDefaultDataTypeMappings WithClrTimeSpan(MySqlTimeSpanType mysqlTimeSpanType);
    public virtual MySqlDefaultDataTypeMappings WithClrTimeOnly(Nullable`1<int> precision);
    protected virtual MySqlDefaultDataTypeMappings Clone();
    protected virtual bool Equals(MySqlDefaultDataTypeMappings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior : Enum {
    public int value__;
    public static MySqlSchemaBehavior Throw;
    public static MySqlSchemaBehavior Ignore;
    public static MySqlSchemaBehavior Translate;
}
public class Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaNameTranslator : MulticastDelegate {
    public MySqlSchemaNameTranslator(object object, IntPtr method);
    public virtual string Invoke(string schemaName, string objectName);
    public virtual IAsyncResult BeginInvoke(string schemaName, string objectName, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public enum Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlTimeSpanType : Enum {
    public int value__;
    public static MySqlTimeSpanType Default;
    public static MySqlTimeSpanType Time;
    public static MySqlTimeSpanType Time6;
}
public enum Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType : Enum {
    public int value__;
    public static ServerType Custom;
    public static ServerType MySql;
    public static ServerType MariaDb;
}
public class Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerVersionSupport : object {
    [CompilerGeneratedAttribute]
private ServerVersion <ServerVersion>k__BackingField;
    public ServerVersion ServerVersion { get; }
    public bool DateTimeCurrentTimestamp { get; }
    public bool DateTime6 { get; }
    public bool LargerKeyLength { get; }
    public bool RenameIndex { get; }
    public bool RenameColumn { get; }
    public bool WindowFunctions { get; }
    public bool FloatCast { get; }
    public bool DoubleCast { get; }
    public bool OuterApply { get; }
    public bool CrossApply { get; }
    public bool OuterReferenceInMultiLevelSubquery { get; }
    public bool Json { get; }
    public bool GeneratedColumns { get; }
    public bool NullableGeneratedColumns { get; }
    public bool ParenthesisEnclosedGeneratedColumnExpressions { get; }
    public bool DefaultCharSetUtf8Mb4 { get; }
    public bool DefaultExpression { get; }
    public bool AlternativeDefaultExpression { get; }
    public bool SpatialIndexes { get; }
    public bool SpatialReferenceSystemRestrictedColumns { get; }
    public bool SpatialFunctionAdditions { get; }
    public bool SpatialSupportFunctionAdditions { get; }
    public bool SpatialSetSridFunction { get; }
    public bool SpatialDistanceFunctionImplementsAndoyer { get; }
    public bool SpatialDistanceSphereFunction { get; }
    public bool SpatialGeographic { get; }
    public bool ExceptIntercept { get; }
    public bool ExceptInterceptPrecedence { get; }
    public bool JsonDataTypeEmulation { get; }
    public bool ImplicitBoolCheckUsesIndex { get; }
    public bool Sequences { get; }
    public bool MySqlBug96947Workaround { get; }
    public bool MySqlBug104294Workaround { get; }
    public bool FullTextParser { get; }
    public bool InformationSchemaCheckConstraintsTable { get; }
    public bool IdentifyJsonColumsByCheckConstraints { get; }
    public bool MySqlBugLimit0Offset0ExistsWorkaround { get; }
    public bool DescendingIndexes { get; }
    public bool Returning { get; }
    public bool CommonTableExpressions { get; }
    public bool LimitWithinInAllAnySomeSubquery { get; }
    public bool LimitWithNonConstantValue { get; }
    public bool JsonTable { get; }
    public bool JsonValue { get; }
    public bool Values { get; }
    public bool ValuesWithRows { get; }
    public bool WhereSubqueryReferencesOuterQuery { get; }
    public bool JsonTableImplementationStable { get; }
    public bool JsonTableImplementationWithoutMySqlBugs { get; }
    public bool JsonTableImplementationWithoutMariaDbBugs { get; }
    public bool JsonTableImplementationUsingParameterAsSourceWithoutEngineCrash { get; }
    public bool JsonTableImplementationWithAggregate { get; }
    public ServerVersionSupport(ServerVersion serverVersion);
    [CompilerGeneratedAttribute]
public virtual ServerVersion get_ServerVersion();
    public virtual string ToString();
    public virtual bool Version(string versionString);
    public virtual bool Version(ServerVersion serverVersion);
    public virtual bool PropertyOrVersion(string propertyNameOrServerVersion);
    public virtual bool get_DateTimeCurrentTimestamp();
    public virtual bool get_DateTime6();
    public virtual bool get_LargerKeyLength();
    public virtual bool get_RenameIndex();
    public virtual bool get_RenameColumn();
    public virtual bool get_WindowFunctions();
    public virtual bool get_FloatCast();
    public virtual bool get_DoubleCast();
    public virtual bool get_OuterApply();
    public virtual bool get_CrossApply();
    public virtual bool get_OuterReferenceInMultiLevelSubquery();
    public virtual bool get_Json();
    public virtual bool get_GeneratedColumns();
    public virtual bool get_NullableGeneratedColumns();
    public virtual bool get_ParenthesisEnclosedGeneratedColumnExpressions();
    public virtual bool get_DefaultCharSetUtf8Mb4();
    public virtual bool get_DefaultExpression();
    public virtual bool get_AlternativeDefaultExpression();
    public virtual bool get_SpatialIndexes();
    public virtual bool get_SpatialReferenceSystemRestrictedColumns();
    public virtual bool get_SpatialFunctionAdditions();
    public virtual bool get_SpatialSupportFunctionAdditions();
    public virtual bool get_SpatialSetSridFunction();
    public virtual bool get_SpatialDistanceFunctionImplementsAndoyer();
    public virtual bool get_SpatialDistanceSphereFunction();
    public virtual bool get_SpatialGeographic();
    public virtual bool get_ExceptIntercept();
    public virtual bool get_ExceptInterceptPrecedence();
    public virtual bool get_JsonDataTypeEmulation();
    public virtual bool get_ImplicitBoolCheckUsesIndex();
    public virtual bool get_Sequences();
    public virtual bool get_MySqlBug96947Workaround();
    public virtual bool get_MySqlBug104294Workaround();
    public virtual bool get_FullTextParser();
    public virtual bool get_InformationSchemaCheckConstraintsTable();
    public virtual bool get_IdentifyJsonColumsByCheckConstraints();
    public virtual bool get_MySqlBugLimit0Offset0ExistsWorkaround();
    public virtual bool get_DescendingIndexes();
    public virtual bool get_Returning();
    public virtual bool get_CommonTableExpressions();
    public virtual bool get_LimitWithinInAllAnySomeSubquery();
    public virtual bool get_LimitWithNonConstantValue();
    public virtual bool get_JsonTable();
    public virtual bool get_JsonValue();
    public virtual bool get_Values();
    public virtual bool get_ValuesWithRows();
    public virtual bool get_WhereSubqueryReferencesOuterQuery();
    public virtual bool get_JsonTableImplementationStable();
    public virtual bool get_JsonTableImplementationWithoutMySqlBugs();
    public virtual bool get_JsonTableImplementationWithoutMariaDbBugs();
    public virtual bool get_JsonTableImplementationUsingParameterAsSourceWithoutEngineCrash();
    public virtual bool get_JsonTableImplementationWithAggregate();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string JsonServicesMissing { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_JsonServicesMissing();
}
[ExtensionAttribute]
public static class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions : object {
    private static string DecimalTypeKeyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DecimalTypeDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ByteIdentityColumnWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ByteIdentityColumnWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ColumnFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName, int ordinal, string dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, string defaultValue, string computedValue, Nullable`1<bool> stored);
    [ExtensionAttribute]
public static void ForeignKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction);
    [ExtensionAttribute]
public static void DefaultSchemaFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void TypeAliasFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string typeAliasName, string systemTypeName);
    [ExtensionAttribute]
public static void PrimaryKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string primaryKeyName, string tableName);
    [ExtensionAttribute]
public static void UniqueConstraintFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string uniqueConstraintName, string tableName);
    [ExtensionAttribute]
public static void IndexFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName, bool unique);
    [ExtensionAttribute]
public static void ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName);
    [ExtensionAttribute]
public static void ForeignKeyPrincipalColumnMissingWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);
    [ExtensionAttribute]
public static void MissingSchemaWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void MissingTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void SequenceFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int increment, long start, long min, long max);
    [ExtensionAttribute]
public static void TableFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void DefaultValueNotSupportedWarning(IDiagnosticsLogger`1<Migrations> diagnostics, string defaultValue, ServerVersion serverVersion, string columnType);
}
public class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator : RelationalModelValidator {
    public MySqlModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    protected virtual void ValidateJsonEntities(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateStoredProcedures(IModel model, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
internal static void <ValidateStoredProcedures>g__ValidateSproc|2_0(IStoredProcedure sproc, IDiagnosticsLogger`1<Validation> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlOptions : object {
    private static MySqlSchemaNameTranslator _ignoreSchemaNameTranslator;
    [CompilerGeneratedAttribute]
private MySqlConnectionSettings <ConnectionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerVersion <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CharSet <DefaultCharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private CharSet <NationalCharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultGuidCollation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBackslashEscapes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceLineBreaksWithCharFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDefaultDataTypeMappings <DefaultDataTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlSchemaNameTranslator <SchemaNameTranslator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndexOptimizedBooleanColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlJsonChangeTrackingOptions <JsonChangeTrackingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitKeyedOrIndexedStringColumnLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StringComparisonTranslations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrimitiveCollectionsSupport>k__BackingField;
    public MySqlConnectionSettings ConnectionSettings { get; private set; }
    public DbDataSource DataSource { get; private set; }
    public ServerVersion ServerVersion { get; private set; }
    public CharSet DefaultCharSet { get; private set; }
    public CharSet NationalCharSet { get; }
    public string DefaultGuidCollation { get; private set; }
    public bool NoBackslashEscapes { get; private set; }
    public bool ReplaceLineBreaksWithCharFunction { get; private set; }
    public MySqlDefaultDataTypeMappings DefaultDataTypeMappings { get; private set; }
    public MySqlSchemaNameTranslator SchemaNameTranslator { get; private set; }
    public bool IndexOptimizedBooleanColumns { get; private set; }
    public MySqlJsonChangeTrackingOptions JsonChangeTrackingOptions { get; private set; }
    public bool LimitKeyedOrIndexedStringColumnLength { get; private set; }
    public bool StringComparisonTranslations { get; private set; }
    public bool PrimitiveCollectionsSupport { get; private set; }
    private static MySqlOptions();
    public virtual void Initialize(IDbContextOptions options);
    public virtual void Validate(IDbContextOptions options);
    protected virtual MySqlDefaultDataTypeMappings ApplyDefaultDataTypeMappings(MySqlDefaultDataTypeMappings defaultDataTypeMappings, MySqlConnectionSettings connectionSettings);
    private static MySqlConnectionSettings GetConnectionSettings(MySqlOptionsExtension relationalOptions);
    protected virtual bool Equals(MySqlOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual MySqlConnectionSettings get_ConnectionSettings();
    [CompilerGeneratedAttribute]
private void set_ConnectionSettings(MySqlConnectionSettings value);
    [CompilerGeneratedAttribute]
public virtual DbDataSource get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(DbDataSource value);
    [CompilerGeneratedAttribute]
public virtual ServerVersion get_ServerVersion();
    [CompilerGeneratedAttribute]
private void set_ServerVersion(ServerVersion value);
    [CompilerGeneratedAttribute]
public virtual CharSet get_DefaultCharSet();
    [CompilerGeneratedAttribute]
private void set_DefaultCharSet(CharSet value);
    [CompilerGeneratedAttribute]
public virtual CharSet get_NationalCharSet();
    [CompilerGeneratedAttribute]
public virtual string get_DefaultGuidCollation();
    [CompilerGeneratedAttribute]
private void set_DefaultGuidCollation(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_NoBackslashEscapes();
    [CompilerGeneratedAttribute]
private void set_NoBackslashEscapes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ReplaceLineBreaksWithCharFunction();
    [CompilerGeneratedAttribute]
private void set_ReplaceLineBreaksWithCharFunction(bool value);
    [CompilerGeneratedAttribute]
public virtual MySqlDefaultDataTypeMappings get_DefaultDataTypeMappings();
    [CompilerGeneratedAttribute]
private void set_DefaultDataTypeMappings(MySqlDefaultDataTypeMappings value);
    [CompilerGeneratedAttribute]
public virtual MySqlSchemaNameTranslator get_SchemaNameTranslator();
    [CompilerGeneratedAttribute]
private void set_SchemaNameTranslator(MySqlSchemaNameTranslator value);
    [CompilerGeneratedAttribute]
public virtual bool get_IndexOptimizedBooleanColumns();
    [CompilerGeneratedAttribute]
private void set_IndexOptimizedBooleanColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual MySqlJsonChangeTrackingOptions get_JsonChangeTrackingOptions();
    [CompilerGeneratedAttribute]
private void set_JsonChangeTrackingOptions(MySqlJsonChangeTrackingOptions value);
    [CompilerGeneratedAttribute]
public virtual bool get_LimitKeyedOrIndexedStringColumnLength();
    [CompilerGeneratedAttribute]
private void set_LimitKeyedOrIndexedStringColumnLength(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_StringComparisonTranslations();
    [CompilerGeneratedAttribute]
private void set_StringComparisonTranslations(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_PrimitiveCollectionsSupport();
    [CompilerGeneratedAttribute]
private void set_PrimitiveCollectionsSupport(bool value);
}
public static class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources : object {
    private static ResourceManager _resourceManager;
    private static MySqlResources();
    public static EventDefinition`2<string, string> LogDefaultDecimalTypeColumn(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogByteIdentityColumn(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundDefaultSchema(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundTypeAlias(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingSchema(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingTable(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundTable(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogDefaultValueNotSupported(IDiagnosticsLogger logger);
}
public static class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings : object {
    private static ResourceManager _resourceManager;
    public static string IndexTableRequired { get; }
    public static string AlterMemoryOptimizedTable { get; }
    public static string AlterIdentityColumn { get; }
    public static string TransientExceptionDetected { get; }
    public static string NoInitialCatalog { get; }
    public static string ExpressionTypeMismatch { get; }
    public static string Ef7CoreJsonMappingNotSupported { get; }
    private static MySqlStrings();
    public static string TwoDataSourcesInSameServiceProvider(object useInternalServiceProvider);
    public static string IdentityBadType(object property, object entityType, object propertyType);
    public static string UnqualifiedDataType(object dataType);
    public static string UnqualifiedDataTypeOnProperty(object dataType, object property);
    public static string SequenceBadType(object property, object entityType, object propertyType);
    public static string get_IndexTableRequired();
    public static string get_AlterMemoryOptimizedTable();
    public static string get_AlterIdentityColumn();
    public static string get_TransientExceptionDetected();
    public static string NonKeyValueGeneration(object property, object entityType);
    public static string MultipleIdentityColumns(object properties, object table);
    public static string IncompatibleTableMemoryOptimizedMismatch(object table, object entityType, object otherEntityType, object memoryOptimizedEntityType, object nonMemoryOptimizedEntityType);
    public static string get_NoInitialCatalog();
    public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string InvalidTableToIncludeInScaffolding(object table);
    public static string FunctionOnClient(object methodName);
    public static string ComputedBadType(object property, object entityType, object propertyType);
    public static string get_ExpressionTypeMismatch();
    public static string QueryUnableToTranslateMethodWithStringComparison(object declaringTypeName, object methodName, object optionName);
    public static string StoredProcedureResultColumnsNotSupported(object entityType, object sproc);
    public static string StoredProcedureReturnValueNotSupported(object entityType, object sproc);
    public static string get_Ef7CoreJsonMappingNotSupported();
    private static string GetString(string name, String[] formatterNames);
}
public static class Pomelo.EntityFrameworkCore.MySql.Internal.MySqlValueGenerationStrategyCompatibility : object {
    public static Nullable`1<MySqlValueGenerationStrategy> GetValueGenerationStrategy(IAnnotation[] annotations);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCharSetAttributeConvention : PropertyAttributeConventionBase`1<MySqlCharSetAttribute> {
    public ColumnCharSetAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MySqlCharSetAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCollationAttributeConvention : PropertyAttributeConventionBase`1<MySqlCollationAttribute> {
    public ColumnCollationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MySqlCollationAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlRuntimeModelConvention : RelationalRuntimeModelConvention {
    public MySqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    protected virtual void ProcessIndexAnnotations(Dictionary`2<string, object> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime);
    protected virtual void ProcessKeyAnnotations(Dictionary`2<string, object> annotations, IKey key, RuntimeKey runtimeKey, bool runtime);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention : RelationalValueGenerationConvention {
    public MySqlValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public MySqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    [CompilerGeneratedAttribute]
private bool <ProcessModelFinalizing>g__IsStrategyNoneNeeded|8_0(IReadOnlyProperty property, StoreObjectIdentifier storeObject);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCharSetAttributeConvention : TypeAttributeConventionBase`1<MySqlCharSetAttribute> {
    public TableCharSetAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MySqlCharSetAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCollationAttributeConvention : TypeAttributeConventionBase`1<MySqlCollationAttribute> {
    public TableCollationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MySqlCollationAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public static class Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames : object {
    public static string Prefix;
    public static string ValueGenerationStrategy;
    public static string LegacyValueGeneratedOnAdd;
    public static string LegacyValueGeneratedOnAddOrUpdate;
    public static string FullTextIndex;
    public static string FullTextParser;
    public static string SpatialIndex;
    public static string CharSet;
    public static string CharSetDelegation;
    public static string CollationDelegation;
    public static string IndexPrefixLength;
    public static string SpatialReferenceSystemId;
    public static string GuidCollation;
    public static string StoreOptions;
    [ObsoleteAttribute("Use 'RelationalAnnotationNames.Collation' instead.")]
public static string Collation;
}
public class Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider : RelationalAnnotationProvider {
    [NotNullAttribute]
private IMySqlOptions _options;
    public MySqlAnnotationProvider(RelationalAnnotationProviderDependencies dependencies, IMySqlOptions options);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider/<For>d__2")]
public virtual IEnumerable`1<IAnnotation> For(IRelationalModel model, bool designTime);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider/<For>d__3")]
public virtual IEnumerable`1<IAnnotation> For(ITable table, bool designTime);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider/<For>d__4")]
public virtual IEnumerable`1<IAnnotation> For(IUniqueConstraint constraint, bool designTime);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider/<For>d__5")]
public virtual IEnumerable`1<IAnnotation> For(ITableIndex index, bool designTime);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationProvider/<For>d__6")]
public virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
    protected virtual string GetActualModelCharSet(IModel model, DelegationModes currentLevel);
    protected virtual string GetActualModelCollation(IModel model, DelegationModes currentLevel);
    protected virtual string GetActualEntityTypeCharSet(IEntityType entityType, DelegationModes currentLevel);
    protected virtual string GetActualEntityTypeCollation(IEntityType entityType, DelegationModes currentLevel);
    protected virtual string GetActualPropertyCharSet(IProperty[] properties, DelegationModes currentLevel);
    protected virtual string GetActualPropertyCollation(IProperty[] properties, DelegationModes currentLevel);
}
public static class Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.ObjectToEnumConverter : object {
    public static Nullable`1<T> GetEnumValue(object value);
}
public class Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository : HistoryRepository {
    private static string MigrationsScript;
    private MySqlSqlGenerationHelper _sqlGenerationHelper;
    private IModel _model;
    private string _migrationIdColumnName;
    private string _productVersionColumnName;
    protected string ExistsSql { get; }
    protected string MigrationIdColumnName { get; }
    protected string ProductVersionColumnName { get; }
    public MySqlHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual void ConfigureTable(EntityTypeBuilder`1<HistoryRow> history);
    protected virtual string get_ExistsSql();
    protected virtual bool InterpretExistsResult(object value);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetBeginIfScript(string migrationId, bool notExists);
    public virtual string GetEndIfScript();
    public virtual void ConfigureModel(ModelBuilder modelBuilder);
    protected virtual IModel EnsureModel();
    public virtual string GetCreateScript();
    protected virtual string get_MigrationIdColumnName();
    protected virtual string get_ProductVersionColumnName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <EnsureModel>b__16_0(EntityTypeBuilder`1<HistoryRow> x);
}
public class Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer : MigrationsModelDiffer {
    public MySqlMigrationsModelDiffer(IRelationalTypeMappingSource typeMappingSource, IMigrationsAnnotationProvider migrationsAnnotationProvider, IRowIdentityMapFactory rowIdentityMapFactory, CommandBatchPreparerDependencies commandBatchPreparerDependencies);
    public virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IRelationalModel source, IRelationalModel target);
    protected virtual IReadOnlyList`1<MigrationOperation> Sort(IEnumerable`1<MigrationOperation> operations, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Add(IRelationalModel target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IRelationalModel source, IRelationalModel target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Add(ITable target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(ITable source, ITable target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Add(IColumn target, DiffContext diffContext, bool inline);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IColumn source, IColumn target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer/<MakeStringColumnsRequiredWithoutUnexpectedDefaultValue>d__10")]
private static IEnumerable`1<MigrationOperation> MakeStringColumnsRequiredWithoutUnexpectedDefaultValue(IColumn source, IColumn target, IEnumerable`1<MigrationOperation> migrationOperations);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer/<SkipRedundantCharSetSpecifyingAlterColumnOperations>d__11")]
private IEnumerable`1<MigrationOperation> SkipRedundantCharSetSpecifyingAlterColumnOperations(IEnumerable`1<MigrationOperation> migrationOperations);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer/<PostFilterOperations>d__12")]
protected virtual IEnumerable`1<MigrationOperation> PostFilterOperations(IEnumerable`1<MigrationOperation> migrationOperations);
    protected virtual AlterDatabaseOperation PostFilterOperation(AlterDatabaseOperation operation);
    protected virtual CreateTableOperation PostFilterOperation(CreateTableOperation operation);
    protected virtual AlterTableOperation PostFilterOperation(AlterTableOperation operation);
    protected virtual AddColumnOperation PostFilterOperation(AddColumnOperation operation);
    protected virtual AlterColumnOperation PostFilterOperation(AlterColumnOperation operation);
    private static void ApplyCollationAnnotation(TOperation operation, Action`2<TOperation, string> applyCollation);
    private static void HandleCollationDelegation(TOperation operation, DelegationModes delegationModes, Action`1<TOperation> resetCollationProperty);
    private static void HandleCharSetDelegation(MigrationOperation operation, DelegationModes delegationModes);
    [ConditionalAttribute("DEBUG")]
private static void AssertAllMigrationOperationProperties();
    [ConditionalAttribute("DEBUG")]
private static void AssertMigrationOperationProperties(Type migrationOperationType, IEnumerable`1<string> propertyNames);
    [ConditionalAttribute("DEBUG")]
private static void AssertInternalLocalAnnotations(IReadOnlyList`1<MigrationOperation> operations);
}
public class Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrator : Migrator {
    private static Dictionary`2<Type, Tuple`2<string, string>> _customMigrationCommands;
    private IMigrationsAssembly _migrationsAssembly;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private ICurrentDbContext _currentContext;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    private static string BeforeDropPrimaryKeyMigrationBegin;
    private static string BeforeDropPrimaryKeyMigrationEnd;
    private static string AfterAddPrimaryKeyMigrationBegin;
    private static string AfterAddPrimaryKeyMigrationEnd;
    public MySqlMigrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ICurrentDbContext currentContext, IModelRuntimeInitializer modelRuntimeInitializer, IDiagnosticsLogger`1<Migrations> logger, IRelationalCommandDiagnosticsLogger commandLogger, IDatabaseProvider databaseProvider);
    private static MySqlMigrator();
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateUpSql(Migration migration, MigrationsSqlGenerationOptions options);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateDownSql(Migration migration, Migration previousMigration, MigrationsSqlGenerationOptions options);
    public virtual string GenerateScript(string fromMigration, string toMigration, MigrationsSqlGenerationOptions options);
    protected virtual List`1<MigrationOperation> GetAllMigrationOperations(string fromMigration, string toMigration);
    protected virtual IReadOnlyList`1<MigrationCommand> WrapWithCustomCommands(IReadOnlyList`1<MigrationOperation> migrationOperations, IReadOnlyList`1<MigrationCommand> migrationCommands, MigrationsSqlGenerationOptions options);
    protected virtual String[] GetMigrationCommandTexts(IReadOnlyList`1<MigrationOperation> migrationOperations, bool beginTexts, MigrationsSqlGenerationOptions options);
    protected virtual IReadOnlyList`1<Tuple`2<string, string>> GetCustomCommands(IReadOnlyList`1<MigrationOperation> migrationOperations);
    protected virtual string CleanUpScriptSpecificPseudoStatements(string commandText);
    protected virtual string PrepareString(string str, MigrationsSqlGenerationOptions options);
    [CompilerGeneratedAttribute]
private MigrationCommand <WrapWithCustomCommands>b__10_0(string t);
    [CompilerGeneratedAttribute]
private MigrationCommand <WrapWithCustomCommands>b__10_1(string t);
}
public class Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator : MigrationsSqlGenerator {
    private static string InternalAnnotationPrefix;
    private static string OutputPrimaryKeyConstraintOnAutoIncrementAnnotationName;
    private static Regex _typeRegex;
    private static HashSet`1<string> _spatialStoreTypes;
    private ICommandBatchPreparer _commandBatchPreparer;
    private IMySqlOptions _options;
    private RelationalTypeMapping _stringTypeMapping;
    public MySqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, ICommandBatchPreparer commandBatchPreparer, IMySqlOptions options);
    private static MySqlMigrationsSqlGenerator();
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
    private static void CleanUpInternalAnnotations(IReadOnlyList`1<MigrationOperation> filteredOperations);
    protected virtual IReadOnlyList`1<MigrationOperation> FilterOperations(IReadOnlyList`1<MigrationOperation> operations, IModel model);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CheckSchema(MigrationOperation operation);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MySqlCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MySqlDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MySqlDropUniqueConstraintAndRecreateForeignKeysOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void TemporarilyDropForeignKeys(IModel model, MigrationCommandListBuilder builder, string schemaName, string tableName, Action action);
    protected static ReferentialAction ToReferentialAction(DeleteBehavior deleteBehavior);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual ValueTuple`2<string, string> GetColumBaseTypeAndLength(ColumnOperation operation, IModel model);
    protected virtual ValueTuple`2<string, string> GetColumBaseTypeAndLength(string schema, string table, string name, ColumnOperation operation, IModel model);
    protected virtual bool IsAutoIncrement(ColumnOperation operation, string columnType, Nullable`1<MySqlValueGenerationStrategy> valueGenerationStrategy);
    private void GenerateComment(string comment, MigrationCommandListBuilder builder);
    private void ColumnDefinitionWithCharSet(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual string GetColumnType(string schema, string table, string name, ColumnOperation operation, IModel model);
    private static string GetColumnTypeWithCharSetAndCollation(ColumnOperation operation, string columnType);
    protected virtual void DefaultValue(object defaultValue, string defaultValueSql, string columnType, MigrationCommandListBuilder builder);
    private bool IsDefaultValueSqlSupported(string defaultValueSql, string columnType);
    protected virtual void CreateTablePrimaryKeyConstraint(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void UniqueConstraint(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(MySqlDropPrimaryKeyAndRecreateForeignKeysOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void ForeignKeyConstraint(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    private string ColumnListWithIndexPrefixLengthAndSortOrder(MigrationOperation operation, String[] columns, Int32[] prefixValues, Boolean[] isDescending);
    protected virtual string ColumnList(String[] columns, Func`3<string, int, string> columnPostfix);
    private string IntegerConstant(Nullable`1<long> value);
    private static string Truncate(string source, int maxLength);
    private static bool IsSpatialStoreType(string storeType);
    private static bool IsDefaultValueSupported(string columnType);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private MySqlBinaryExpressionOperatorType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public MySqlBinaryExpressionOperatorType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public MySqlBinaryExpression(MySqlBinaryExpressionOperatorType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual MySqlBinaryExpressionOperatorType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlBinaryExpression Update(SqlExpression left, SqlExpression right);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    private bool RequiresBrackets(SqlExpression expression);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
}
public enum Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpressionOperatorType : Enum {
    public int value__;
    public static MySqlBinaryExpressionOperatorType IntegerDivision;
    public static MySqlBinaryExpressionOperatorType NonOptimizedEqual;
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBipolarExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <DefaultExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AlternativeExpression>k__BackingField;
    public Expression DefaultExpression { get; }
    public Expression AlternativeExpression { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public MySqlBipolarExpression(Expression defaultExpression, Expression alternativeExpression);
    [CompilerGeneratedAttribute]
public virtual Expression get_DefaultExpression();
    [CompilerGeneratedAttribute]
public virtual Expression get_AlternativeExpression();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlBipolarExpression Update(Expression defaultExpression, Expression alternativeExpression);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(MySqlBipolarExpression bipolarExpression);
    public virtual int GetHashCode();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression : SqlExpression {
    private SqlExpression _valueExpression;
    private string _charset;
    private string _collation;
    public SqlExpression ValueExpression { get; }
    public string Charset { get; }
    public string Collation { get; }
    public MySqlCollateExpression(SqlExpression valueExpression, string charset, string collation, RelationalTypeMapping typeMapping);
    public virtual SqlExpression get_ValueExpression();
    public virtual string get_Charset();
    public virtual string get_Collation();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlCollateExpression Update(SqlExpression valueExpression);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlCollateExpression other);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlColumnAliasReferenceExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [NotNullAttribute]
public string Alias { get; }
    [NotNullAttribute]
public SqlExpression Expression { get; }
    public MySqlColumnAliasReferenceExpression(string alias, SqlExpression expression, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlColumnAliasReferenceExpression Update(string alias, SqlExpression expression);
    public virtual bool Equals(object obj);
    public virtual bool Equals(MySqlColumnAliasReferenceExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public virtual SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <ArgumentParts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    public IReadOnlyList`1<SqlExpression> ArgumentParts { get; }
    public string Delimiter { get; }
    public MySqlComplexFunctionArgumentExpression(IEnumerable`1<SqlExpression> argumentParts, string delimiter, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_ArgumentParts();
    [CompilerGeneratedAttribute]
public virtual string get_Delimiter();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlComplexFunctionArgumentExpression Update(IReadOnlyList`1<SqlExpression> argumentParts, string delimiter);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlComplexFunctionArgumentExpression other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlInlinedParameterExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private Expression <ParameterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlConstantExpression <ValueExpression>k__BackingField;
    public Expression ParameterExpression { get; }
    public SqlConstantExpression ValueExpression { get; }
    public MySqlInlinedParameterExpression(SqlParameterExpression parameterExpression, SqlConstantExpression valueExpression);
    [CompilerGeneratedAttribute]
public virtual Expression get_ParameterExpression();
    [CompilerGeneratedAttribute]
public virtual SqlConstantExpression get_ValueExpression();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual MySqlInlinedParameterExpression Update(SqlParameterExpression parameterExpression, SqlConstantExpression valueExpression);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlInlinedParameterExpression inlinedParameterExpression);
    public virtual int GetHashCode();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [NotNullAttribute]
public SqlExpression Expression { get; }
    public MySqlJsonArrayIndexExpression(SqlExpression expression, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlJsonArrayIndexExpression Update(SqlExpression expression);
    public virtual bool Equals(object obj);
    public virtual bool Equals(MySqlJsonArrayIndexExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public virtual SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnsText>k__BackingField;
    [NotNullAttribute]
public SqlExpression Expression { get; }
    [NotNullAttribute]
public IReadOnlyList`1<SqlExpression> Path { get; }
    public bool ReturnsText { get; }
    public MySqlJsonTraversalExpression(SqlExpression expression, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    protected MySqlJsonTraversalExpression(SqlExpression expression, IReadOnlyList`1<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Path();
    [CompilerGeneratedAttribute]
public virtual bool get_ReturnsText();
    public virtual MySqlJsonTraversalExpression Clone(bool returnsText, Type type, RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlJsonTraversalExpression Update(SqlExpression expression, IReadOnlyList`1<SqlExpression> path);
    public virtual MySqlJsonTraversalExpression Append(SqlExpression pathComponent, Type returnType, RelationalTypeMapping typeMapping);
    public virtual bool Equals(object obj);
    public virtual bool Equals(MySqlJsonTraversalExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public static bool TypeReturnsText(Type type);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlMatchExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private MySqlMatchSearchMode <SearchMode>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Against>k__BackingField;
    public MySqlMatchSearchMode SearchMode { get; }
    public SqlExpression Match { get; }
    public SqlExpression Against { get; }
    public MySqlMatchExpression(SqlExpression match, SqlExpression against, MySqlMatchSearchMode searchMode, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual MySqlMatchSearchMode get_SearchMode();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Against();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlMatchExpression Update(SqlExpression match, SqlExpression against);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlMatchExpression matchExpression);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlRegexpExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Pattern>k__BackingField;
    public SqlExpression Match { get; }
    public SqlExpression Pattern { get; }
    public MySqlRegexpExpression(SqlExpression match, SqlExpression pattern, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Pattern();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySqlRegexpExpression Update(SqlExpression match, SqlExpression pattern);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlRegexpExpression other);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
}
public interface Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.IMySqlJsonPocoTranslator {
    public abstract virtual SqlExpression TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType);
    public abstract virtual SqlExpression TranslateArrayLength(SqlExpression expression);
    public abstract virtual string GetJsonPropertyName(MemberInfo member);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlByteArrayMethodTranslator : object {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo _containsMethod;
    private static MethodInfo _firstWithoutPredicate;
    public MySqlByteArrayMethodTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    private static MySqlByteArrayMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlConvertTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo[] _supportedMethods;
    public MySqlConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlConvertTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlDbFunctionsExtensionsMethodTranslator : object {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private static HashSet`1<MethodInfo> _convertTimeZoneMethodInfos;
    private static Type[] _supportedLikeTypes;
    private static MethodInfo[] _likeMethodInfos;
    private static MethodInfo _isMatchMethodInfo;
    private static MethodInfo _isMatchWithMultiplePropertiesMethodInfo;
    private static MethodInfo _matchMethodInfo;
    private static MethodInfo _matchWithMultiplePropertiesMethodInfo;
    private static Type[] _supportedHexTypes;
    private static MethodInfo[] _hexMethodInfos;
    private static MethodInfo _unhexMethodInfo;
    private static MethodInfo _degreesDoubleMethodInfo;
    private static MethodInfo _degreesFloatMethodInfo;
    private static MethodInfo _radiansDoubleMethodInfo;
    private static MethodInfo _radiansFloatMethodInfo;
    public MySqlDbFunctionsExtensionsMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlDbFunctionsExtensionsMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression InferStringTypeMappingOrApplyDefault(SqlExpression expression, RelationalTypeMapping inferenceSourceTypeMapping);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlJsonDbFunctionsTranslator : object {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlJsonDbFunctionsTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
internal static SqlExpression <Translate>g__EnsureJson|2_1(SqlExpression e);
    [CompilerGeneratedAttribute]
internal static SqlExpression <Translate>g__RemoveConvert|2_2(SqlExpression e);
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlJsonPocoTranslator : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _unquotedStringTypeMapping;
    private RelationalTypeMapping _intTypeMapping;
    public MySqlJsonPocoTranslator(IRelationalTypeMappingSource typeMappingSource, MySqlSqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    public abstract virtual string GetJsonPropertyName(MemberInfo member);
    public virtual SqlExpression TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType);
    public virtual SqlExpression TranslateArrayLength(SqlExpression expression);
    protected virtual SqlExpression ConvertFromJsonExtract(SqlExpression expression, Type returnType);
    protected virtual RelationalTypeMapping FindPocoTypeMapping(Type type);
    protected virtual RelationalTypeMapping GetJsonSpecificTypeMapping(RelationalTypeMapping typeMapping);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlJsonTableExpression : TableValuedFunctionExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathSegment> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ColumnInfo> <ColumnInfos>k__BackingField;
    public SqlExpression JsonExpression { get; }
    public IReadOnlyList`1<PathSegment> Path { get; }
    public IReadOnlyList`1<ColumnInfo> ColumnInfos { get; }
    public MySqlJsonTableExpression(string alias, SqlExpression jsonExpression, IReadOnlyList`1<PathSegment> path, IReadOnlyList`1<ColumnInfo> columnInfos);
    public virtual SqlExpression get_JsonExpression();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<PathSegment> get_Path();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ColumnInfo> get_ColumnInfos();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual TableValuedFunctionExpression Update(IReadOnlyList`1<SqlExpression> arguments);
    public virtual MySqlJsonTableExpression Update(SqlExpression jsonExpression, IReadOnlyList`1<PathSegment> path, IReadOnlyList`1<ColumnInfo> columnInfos);
    public virtual TableExpressionBase Clone();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(MySqlJsonTableExpression other);
    public virtual int GetHashCode();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlRegexIsMatchTranslator : object {
    private static MethodInfo _methodInfo;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlRegexIsMatchTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlRegexIsMatchTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlStringComparisonMethodTranslator : MySqlQueryCompilationContextMethodTranslator {
    private static MethodInfo _equalsMethodInfo;
    private static MethodInfo _staticEqualsMethodInfo;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _indexOfMethodInfo;
    private static MethodInfo _indexOfMethodInfoWithStartIndexArg;
    internal static MethodInfo[] StringComparisonMethodInfos;
    internal static MethodInfo[] RelationalErrorHandledStringComparisonMethodInfos;
    private IReadOnlyList`1<SqlExpression> _caseSensitiveComparisons;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private IMySqlOptions _options;
    private static MethodInfo _escapeLikePatternParameterMethod;
    private static char LikeEscapeChar;
    public MySqlStringComparisonMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, Func`1<QueryCompilationContext> queryCompilationContextResolver, IMySqlOptions options);
    private static MySqlStringComparisonMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, QueryCompilationContext queryCompilationContext);
    public virtual SqlExpression MakeStringEqualsExpression(SqlExpression leftValue, SqlExpression rightValue, SqlExpression stringComparison);
    public virtual SqlExpression MakeStartsWithExpression(QueryCompilationContext queryCompilationContext, SqlExpression target, SqlExpression prefix, SqlExpression stringComparison);
    public virtual SqlExpression MakeEndsWithExpression(QueryCompilationContext queryCompilationContext, SqlExpression target, SqlExpression suffix, SqlExpression stringComparison);
    public virtual SqlExpression MakeContainsExpression(QueryCompilationContext queryCompilationContext, SqlExpression target, SqlExpression search, SqlExpression stringComparison);
    private SqlExpression MakeStartsWithEndsWithExpressionImpl(QueryCompilationContext queryCompilationContext, SqlExpression target, Func`2<SqlExpression, SqlExpression> targetTransform, SqlExpression prefixSuffix, Func`2<SqlExpression, SqlExpression> prefixSuffixTransform, bool startsWith);
    private SqlExpression MakeContainsExpressionImpl(QueryCompilationContext queryCompilationContext, SqlExpression target, Func`2<SqlExpression, SqlExpression> targetTransform, SqlExpression pattern, Func`2<SqlExpression, SqlExpression> patternTransform);
    protected virtual SqlExpression GetLikeExpressionUsingParameter(QueryCompilationContext queryCompilationContext, SqlExpression target, Func`2<SqlExpression, SqlExpression> targetTransform, SqlExpression pattern, RelationalTypeMapping stringTypeMapping, StartsEndsWithContains methodType);
    public virtual SqlExpression MakeIndexOfExpression(SqlExpression target, SqlExpression search, SqlExpression stringComparison, SqlExpression startIndex);
    private SqlExpression MakeIndexOfExpressionImpl(SqlExpression target, Func`2<SqlExpression, SqlExpression> targetTransform, SqlExpression pattern, Func`2<SqlExpression, SqlExpression> patternTransform, SqlExpression startIndex);
    private static bool TryGetExpressionValue(SqlExpression expression, T& value);
    private static SqlExpression CreateExpressionForCaseSensitivity(StringComparison cmp, Func`1<SqlExpression> ifCaseSensitive, Func`1<SqlExpression> ifCaseInsensitive);
    private SqlExpression LCase(SqlExpression value);
    private SqlExpression Utf8Bin(SqlExpression value);
    private SqlExpression CharLength(SqlExpression value);
    private SqlExpression Locate(SqlExpression sub, SqlExpression str, SqlExpression startIndex);
    private static bool IsLikeWildChar(char c);
    private static string EscapeLikePattern(string pattern);
    private static string ConstructLikePatternParameter(QueryContext queryContext, string baseParameterName, StartsEndsWithContains methodType);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBoolOptimizingExpressionVisitor : SqlExpressionVisitor {
    private bool _optimize;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySqlBoolOptimizingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    private Expression ApplyConversion(SqlExpression sqlExpression, bool condition);
    protected virtual Expression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitCollate(CollateExpression collateExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitDistinct(DistinctExpression distinctExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitRowValue(RowValueExpression rowValueExpression);
    protected virtual Expression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    protected virtual Expression VisitValues(ValuesExpression valuesExpression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBug96947WorkaroundExpressionVisitor : ExpressionVisitor {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private bool _usesOrderBy;
    private bool _insideLeftJoin;
    private bool _insideLeftJoinSelect;
    public MySqlBug96947WorkaroundExpressionVisitor(MySqlSqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlCompatibilityExpressionVisitor : ExpressionVisitor {
    private static string Issue1792SkipFlagName;
    private static bool _mySql8EngineCrashWhenUsingJsonTableSkip;
    private IMySqlOptions _options;
    private SelectExpression _currentSelectExpression;
    private SelectExpression _parentSelectExpression;
    private MySqlContainsAggregateFunctionExpressionVisitor _mySqlContainsAggregateFunctionExpressionVisitor;
    public MySqlCompatibilityExpressionVisitor(IMySqlOptions options);
    private static MySqlCompatibilityExpressionVisitor();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    protected virtual Expression VisitJsonTable(MySqlJsonTableExpression jsonTableExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression CheckSupport(Expression expression, bool isSupported);
    protected virtual Expression CheckTranslated(Expression translated, Expression original);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlContainsAggregateFunctionExpressionVisitor : ExpressionVisitor {
    private static SortedSet`1<string> _aggregateFunctions;
    [CompilerGeneratedAttribute]
private bool <AggregateFunctionFound>k__BackingField;
    public bool AggregateFunctionFound { get; private set; }
    private static MySqlContainsAggregateFunctionExpressionVisitor();
    [CompilerGeneratedAttribute]
public bool get_AggregateFunctionFound();
    [CompilerGeneratedAttribute]
private void set_AggregateFunctionFound(bool value);
    public bool ProcessUntilSelect(Expression node);
    public bool ProcessSelect(SelectExpression selectExpression);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlHavingExpressionVisitor : ExpressionVisitor {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private MySqlContainsAggregateFunctionExpressionVisitor _containsAggregateFunctionExpressionVisitor;
    public MySqlHavingExpressionVisitor(MySqlSqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlJsonParameterExpressionVisitor : ExpressionVisitor {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private IMySqlOptions _options;
    public MySqlJsonParameterExpressionVisitor(MySqlSqlExpressionFactory sqlExpressionFactory, IMySqlOptions options);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual SqlExpression VisitParameter(SqlParameterExpression sqlParameterExpression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlParameterInliningExpressionVisitor : ExpressionVisitor {
    private IRelationalTypeMappingSource _typeMappingSource;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IMySqlOptions _options;
    private IReadOnlyDictionary`2<string, object> _parametersValues;
    private bool _canCache;
    private bool _shouldInlineParameters;
    public MySqlParameterInliningExpressionVisitor(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IMySqlOptions options);
    public virtual Expression Process(Expression expression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitJsonTable(MySqlJsonTableExpression jsonTableExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual T NewInlineParametersScope(bool inlineParameters, Func`1<T> func);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Expression <>n__0(Expression node);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryableMethodNormalizingExpressionVisitor : QueryableMethodNormalizingExpressionVisitor {
    public MySqlQueryableMethodNormalizingExpressionVisitor(QueryCompilationContext queryCompilationContext);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    [IteratorStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryableMethodNormalizingExpressionVisitor/<<VisitMethodCall>g__VisitArguments|2_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<Expression> <VisitMethodCall>g__VisitArguments|2_0(IEnumerable`1<Expression> arguments);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator : QuerySqlGenerator {
    private static Dictionary`2<string, String[]> _castMappings;
    private static ulong LimitUpperBound;
    private IRelationalTypeMappingSource _typeMappingSource;
    private IMySqlOptions _options;
    private string _removeTableAliasOld;
    private string _removeTableAliasNew;
    private static bool _useOldBehavior32375;
    public MySqlQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, IMySqlOptions options);
    private static MySqlQuerySqlGenerator();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitColumnAliasReference(MySqlColumnAliasReferenceExpression columnAliasReferenceExpression);
    private Expression VisitInlinedParameterExpression(MySqlInlinedParameterExpression inlinedParameterExpression);
    protected virtual Expression VisitJsonPathTraversal(MySqlJsonTraversalExpression expression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    protected virtual void GenerateValues(ValuesExpression valuesExpression);
    protected virtual Expression VisitRowValue(RowValueExpression rowValueExpression);
    protected virtual void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    private static bool RequiresBrackets(SqlExpression expression);
    public virtual Expression VisitMySqlRegexp(MySqlRegexpExpression mySqlRegexpExpression);
    public virtual Expression VisitMySqlMatch(MySqlMatchExpression mySqlMatchExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    private SqlUnaryExpression VisitConvert(SqlUnaryExpression sqlUnaryExpression);
    private string GetCastStoreType(RelationalTypeMapping typeMapping);
    public virtual Expression VisitMySqlComplexFunctionArgumentExpression(MySqlComplexFunctionArgumentExpression mySqlComplexFunctionArgumentExpression);
    public virtual Expression VisitMySqlCollateExpression(MySqlCollateExpression mySqlCollateExpression);
    public virtual Expression VisitMySqlBinaryExpression(MySqlBinaryExpression mySqlBinaryExpression);
    protected virtual Expression VisitJsonTableExpression(MySqlJsonTableExpression jsonTableExpression);
    protected virtual bool JsonPathNeedsConcat(IReadOnlyList`1<PathSegment> path);
    protected virtual void GenerateJsonPath(IReadOnlyList`1<PathSegment> path, Nullable`1<bool> needsConcat);
    protected virtual void CheckComposableSql(string sql);
    [CompilerGeneratedAttribute]
private void <VisitDelete>b__19_0(TableExpressionBase e);
    [CompilerGeneratedAttribute]
private void <VisitJsonTableExpression>g__GenerateColumnInfo|34_0(ColumnInfo columnInfo);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGeneratorFactory : object {
    private QuerySqlGeneratorDependencies _dependencies;
    private IRelationalTypeMappingSource _typeMappingSource;
    private IMySqlOptions _options;
    public MySqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, IMySqlOptions options);
    public virtual QuerySqlGenerator Create();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor {
    private IMySqlOptions _options;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext, IMySqlOptions options, MySqlSqlExpressionFactory sqlExpressionFactory);
    public virtual Expression Process(Expression query);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryTranslationPostprocessorFactory : object {
    private QueryTranslationPostprocessorDependencies _dependencies;
    private RelationalQueryTranslationPostprocessorDependencies _relationalDependencies;
    private IMySqlOptions _options;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, IMySqlOptions options, ISqlExpressionFactory sqlExpressionFactory);
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryTranslationPreprocessor : RelationalQueryTranslationPreprocessor {
    private RelationalQueryCompilationContext _relationalQueryCompilationContext;
    public MySqlQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    public virtual Expression NormalizeQueryableMethod(Expression expression);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQueryTranslationPreprocessorFactory : object {
    private QueryTranslationPreprocessorDependencies _dependencies;
    private RelationalQueryTranslationPreprocessorDependencies _relationalDependencies;
    public MySqlQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies);
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private QueryCompilationContext _queryCompilationContext;
    private IMySqlJsonPocoTranslator _jsonPocoTranslator;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    protected static MethodInfo[] NewArrayExpressionSupportMethodInfos;
    protected static MethodInfo ElementAtMethodInfo;
    public MySqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor, IMySqlJsonPocoTranslator jsonPocoTranslator);
    private static MySqlSqlTranslatingExpressionVisitor();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitMySqlBipolarExpression(MySqlBipolarExpression bipolarExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    private Expression TranslateByteArrayElementAccess(Expression array, Expression index);
    protected virtual Expression VisitMethodCallNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression CallBaseVisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual void ResetTranslationErrorDetails();
    private static Expression TryRemoveImplicitConvert(Expression expression);
    [DebuggerStepThroughAttribute]
private bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    [CompilerGeneratedAttribute]
private SqlExpression <VisitMethodCallNewArray>b__11_0(Expression e);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlSqlTranslatingExpressionVisitorFactory : object {
    private RelationalSqlTranslatingExpressionVisitorDependencies _dependencies;
    private IMySqlJsonPocoTranslator _jsonPocoTranslator;
    public MySqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, IServiceProvider serviceProvider);
    public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
public interface Pomelo.EntityFrameworkCore.MySql.Query.Internal.IMySqlEvaluatableExpressionFilter {
    public abstract virtual Nullable`1<bool> IsEvaluatableExpression(Expression expression, IModel model);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCommandParser : object {
    [CompilerGeneratedAttribute]
private string <SqlFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <States>k__BackingField;
    public string SqlFragment { get; }
    public Char[] States { get; }
    public MySqlCommandParser(string sqlFragment);
    [CompilerGeneratedAttribute]
public virtual string get_SqlFragment();
    [CompilerGeneratedAttribute]
public virtual Char[] get_States();
    public virtual IReadOnlyList`1<int> GetStateIndices(char state, int start, int length);
    public virtual IReadOnlyList`1<int> GetStateIndices(Char[] states, int start, int length);
    protected virtual void Parse();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    public MySqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    public virtual object GenerateCacheKey(Expression query, bool async);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlDateDiffFunctionsTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlDateDiffFunctionsTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlDateTimeMemberTranslator : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, ValueTuple`2<string, int>> _datePartMapping;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlDateTimeMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlDateTimeMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private static Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private static MethodInfo _timeOnlyAddTimeSpanMethod;
    private static MethodInfo _timeOnlyIsBetweenMethod;
    private static MethodInfo _dateOnlyFromDateTimeMethod;
    private static MethodInfo _dateOnlyToDateTimeMethod;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlDateTimeMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter {
    private IEnumerable`1<IMySqlEvaluatableExpressionFilter> _mySqlEvaluatableExpressionFilters;
    public MySqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies, IEnumerable`1<IMySqlEvaluatableExpressionFilter> mySqlEvaluatableExpressionFilters);
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMethodCallTranslator> <Translators>k__BackingField;
    public IEnumerable`1<IMethodCallTranslator> Translators { get; }
    public MySqlJsonMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IMethodCallTranslator> get_Translators();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlMathMethodTranslator : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<MethodInfo, ValueTuple`2<string, bool>> _methodToFunctionName;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlMathMethodTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    private static MySqlMathMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    public MySqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    [CompilerGeneratedAttribute]
private QueryCompilationContext <QueryCompilationContext>k__BackingField;
    public QueryCompilationContext QueryCompilationContext { get; public set; }
    public MySqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies, IMySqlOptions options);
    [CompilerGeneratedAttribute]
public virtual QueryCompilationContext get_QueryCompilationContext();
    [CompilerGeneratedAttribute]
public virtual void set_QueryCompilationContext(QueryCompilationContext value);
    public virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
private QueryCompilationContext <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private QueryCompilationContext <.ctor>b__0_1();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlNewGuidTranslator : object {
    private static MethodInfo _methodInfo;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlNewGuidTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    private static MySqlNewGuidTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlObjectToStringTranslator : object {
    private static List`1<Type> _supportedTypes;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySqlObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySqlObjectToStringTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor {
    private IMySqlOptions _options;
    public MySqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls, IMySqlOptions options);
    public virtual Expression Optimize(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression ProcessSqlNullability(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlParameterBasedSqlProcessorFactory : object {
    private RelationalParameterBasedSqlProcessorDependencies _dependencies;
    [NotNullAttribute]
private IMySqlOptions _options;
    public MySqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies, IMySqlOptions options);
    public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor {
    private static string Issue1792SkipWithParameterFlagName;
    private static bool _mySql8EngineCrashWhenUsingJsonTableWithPrimitiveCollectionInParametersSkip;
    private IMySqlOptions _options;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public MySqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext, IMySqlOptions options);
    protected MySqlQueryableMethodTranslatingExpressionVisitor(MySqlQueryableMethodTranslatingExpressionVisitor parentVisitor);
    private static MySqlQueryableMethodTranslatingExpressionVisitor();
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected virtual bool IsNaturallyOrdered(SelectExpression selectExpression);
    protected virtual bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, StructuralTypeShaperExpression shaper, TableExpression& tableExpression);
    protected virtual bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, TableExpressionBase targetTable, TableExpression& tableExpression);
    protected virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected virtual ShapedQueryExpression TransformJsonQueryToTable(JsonQueryExpression jsonQueryExpression);
    protected virtual ShapedQueryExpression TranslatePrimitiveCollection(SqlExpression sqlExpression, IProperty property, string tableAlias);
    protected virtual Expression ApplyInferredTypeMappings(Expression expression, IReadOnlyDictionary`2<ValueTuple`2<TableExpressionBase, string>, RelationalTypeMapping> inferredTypeMappings);
    private static SqlExpression ApplyJsonSqlConversion(SqlExpression expression, ISqlExpressionFactory sqlExpressionFactory, RelationalTypeMapping typeMapping, bool isNullable);
    [CompilerGeneratedAttribute]
internal static bool <IsNaturallyOrdered>g__IsJsonEachKeyColumn|8_0(ColumnExpression orderingColumn);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitorFactory : object {
    private IMySqlOptions _options;
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public MySqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, IMySqlOptions options);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryCompilationContext : RelationalQueryCompilationContext {
    public bool IsBuffering { get; }
    public MySqlQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async);
    public virtual bool get_IsBuffering();
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryCompilationContextFactory : object {
    private QueryCompilationContextDependencies _dependencies;
    private RelationalQueryCompilationContextDependencies _relationalDependencies;
    public MySqlQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies);
    public virtual QueryCompilationContext Create(bool async);
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryCompilationContextMethodTranslator : object {
    private Func`1<QueryCompilationContext> _queryCompilationContextResolver;
    protected MySqlQueryCompilationContextMethodTranslator(Func`1<QueryCompilationContext> queryCompilationContextResolver);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    public abstract virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, QueryCompilationContext queryCompilationContext);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryStringFactory : object {
    private static Lazy`1<Regex> _limitExpressionParameterRegex;
    private static Lazy`1<Regex> _extractParameterRegex;
    private IRelationalTypeMappingSource _typeMapper;
    public MySqlQueryStringFactory(IRelationalTypeMappingSource typeMapper);
    private static MySqlQueryStringFactory();
    public virtual string Create(DbCommand command);
    private string GetParameterValue(DbParameter parameter);
    protected virtual void PrepareCommand(DbCommand command);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlExpressionFactory : SqlExpressionFactory {
    private IRelationalTypeMappingSource _typeMappingSource;
    private RelationalTypeMapping _boolTypeMapping;
    private RelationalTypeMapping _doubleTypeMapping;
    public MySqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    public virtual RelationalTypeMapping FindMapping(Type type, string storeTypeName, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    public virtual SqlFunctionExpression NullableFunction(string name, IEnumerable`1<SqlExpression> arguments, Type returnType, bool onlyNullWhenAnyNullPropagatingArgumentIsNull);
    public virtual SqlFunctionExpression NullableFunction(string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping, bool onlyNullWhenAnyNullPropagatingArgumentIsNull, IEnumerable`1<bool> argumentsPropagateNullability);
    public virtual SqlFunctionExpression NonNullableFunction(string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public virtual MySqlComplexFunctionArgumentExpression ComplexFunctionArgument(IEnumerable`1<SqlExpression> argumentParts, string delimiter, Type argumentType, RelationalTypeMapping typeMapping);
    public virtual MySqlCollateExpression Collate(SqlExpression valueExpression, string charset, string collation);
    public virtual MySqlRegexpExpression Regexp(SqlExpression match, SqlExpression pattern);
    public virtual MySqlBinaryExpression MySqlIntegerDivide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual MySqlBinaryExpression NonOptimizedEqual(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual MySqlColumnAliasReferenceExpression ColumnAliasReference(string alias, SqlExpression expression, Type type, RelationalTypeMapping typeMapping);
    public virtual MySqlBinaryExpression MakeBinary(MySqlBinaryExpressionOperatorType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual MySqlMatchExpression MakeMatch(SqlExpression match, SqlExpression against, MySqlMatchSearchMode searchMode);
    public virtual MySqlJsonTraversalExpression JsonTraversal(SqlExpression expression, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    public virtual MySqlJsonArrayIndexExpression JsonArrayIndex(SqlExpression expression);
    public virtual MySqlJsonArrayIndexExpression JsonArrayIndex(SqlExpression expression, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyNewTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlBinaryExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression sqlBinaryExpression, RelationalTypeMapping typeMapping);
    private MySqlComplexFunctionArgumentExpression ApplyTypeMappingOnComplexFunctionArgument(MySqlComplexFunctionArgumentExpression complexFunctionArgumentExpression);
    private MySqlCollateExpression ApplyTypeMappingOnCollate(MySqlCollateExpression collateExpression);
    private SqlExpression ApplyTypeMappingOnMatch(MySqlMatchExpression matchExpression);
    private SqlExpression ApplyTypeMappingOnRegexp(MySqlRegexpExpression regexpExpression);
    private SqlExpression ApplyTypeMappingOnMySqlBinary(MySqlBinaryExpression sqlBinaryExpression, RelationalTypeMapping typeMapping);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor : SqlNullabilityProcessor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    protected virtual SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, Boolean& nullable);
    private SqlExpression VisitColumnAliasReference(MySqlColumnAliasReferenceExpression columnAliasReferenceExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitBinary(MySqlBinaryExpression binaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitCollate(MySqlCollateExpression collateExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitComplexFunctionArgument(MySqlComplexFunctionArgumentExpression complexFunctionArgumentExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitMatch(MySqlMatchExpression matchExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitJsonArrayIndex(MySqlJsonArrayIndexExpression jsonArrayIndexExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitJsonTraversal(MySqlJsonTraversalExpression jsonTraversalExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitRegexp(MySqlRegexpExpression regexpExpression, bool allowOptimizedExpansion, Boolean& nullable);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlStringMemberTranslator : object {
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlStringMemberTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlStringMethodTranslator : MySqlQueryCompilationContextMethodTranslator {
    private IRelationalTypeMappingSource _typeMappingSource;
    private Func`1<QueryCompilationContext> _queryCompilationContextResolver;
    private IMySqlOptions _options;
    private static MethodInfo _indexOfMethodInfo;
    private static MethodInfo _indexOfMethodInfoWithOneArg;
    private static MethodInfo _replaceMethodInfo;
    private static MethodInfo _toLowerMethodInfo;
    private static MethodInfo _toUpperMethodInfo;
    private static MethodInfo _substringMethodInfoWithOneArg;
    private static MethodInfo _substringMethodInfoWithTwoArgs;
    private static MethodInfo _isNullOrWhiteSpaceMethodInfo;
    private static MethodInfo _trimStartMethodInfoWithoutArgs;
    private static MethodInfo _trimStartMethodInfoWithCharArg;
    private static MethodInfo _trimEndMethodInfoWithoutArgs;
    private static MethodInfo _trimEndMethodInfoWithCharArg;
    private static MethodInfo _trimMethodInfoWithoutArgs;
    private static MethodInfo _trimMethodInfoWithCharArg;
    private static MethodInfo _trimStartMethodInfoWithCharArrayArg;
    private static MethodInfo _trimEndMethodInfoWithCharArrayArg;
    private static MethodInfo _trimMethodInfoWithCharArrayArg;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static MethodInfo _padLeftWithOneArg;
    private static MethodInfo _padRightWithOneArg;
    private static MethodInfo _padLeftWithTwoArgs;
    private static MethodInfo _padRightWithTwoArgs;
    private static MethodInfo _firstOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo _lastOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo _removeMethodInfoWithOneArg;
    private static MethodInfo _removeMethodInfoWithTwoArgs;
    private static MethodInfo[] _concatMethodInfos;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlStringMethodTranslator(MySqlSqlExpressionFactory sqlExpressionFactory, MySqlTypeMappingSource typeMappingSource, Func`1<QueryCompilationContext> queryCompilationContextResolver, IMySqlOptions options);
    private static MySqlStringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, QueryCompilationContext queryCompilationContext);
    private SqlExpression TranslatePadLeftRight(bool leftPad, SqlExpression instance, SqlExpression length, SqlExpression padString, Type returnType);
    private SqlExpression ProcessTrimMethod(SqlExpression instance, SqlExpression trimChar, string locationSpecifier);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>b__34_0(SqlExpression e);
}
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlTimeSpanMemberTranslator : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, ValueTuple`2<string, int>> _datePartMapping;
    private MySqlSqlExpressionFactory _sqlExpressionFactory;
    public MySqlTimeSpanMemberTranslator(MySqlSqlExpressionFactory sqlExpressionFactory);
    private static MySqlTimeSpanMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Pomelo.EntityFrameworkCore.MySql.Query.Internal.SkipTakeCollapsingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _parameterValues;
    private bool _canCache;
    public SkipTakeCollapsingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    public virtual Expression Process(Expression selectExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private bool <VisitExtension>g__IsZero|5_0(SqlExpression sqlExpression);
}
internal class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerationMemberAccess : object {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    public MemberInfo MemberInfo { get; }
    public MySqlCodeGenerationMemberAccess(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
}
internal class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerationMemberAccessTypeMapping : RelationalTypeMapping {
    private static string DummyStoreType;
    [CompilerGeneratedAttribute]
private static MySqlCodeGenerationMemberAccessTypeMapping <Default>k__BackingField;
    public static MySqlCodeGenerationMemberAccessTypeMapping Default { get; }
    protected MySqlCodeGenerationMemberAccessTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlCodeGenerationMemberAccessTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlCodeGenerationMemberAccessTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual string GenerateSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
internal class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerationServerVersionCreation : object {
    [CompilerGeneratedAttribute]
private ServerVersion <ServerVersion>k__BackingField;
    public ServerVersion ServerVersion { get; }
    public MySqlCodeGenerationServerVersionCreation(ServerVersion serverVersion);
    [CompilerGeneratedAttribute]
public ServerVersion get_ServerVersion();
}
internal class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerationServerVersionCreationTypeMapping : RelationalTypeMapping {
    private static string DummyStoreType;
    [CompilerGeneratedAttribute]
private static MySqlCodeGenerationServerVersionCreationTypeMapping <Default>k__BackingField;
    public static MySqlCodeGenerationServerVersionCreationTypeMapping Default { get; }
    protected MySqlCodeGenerationServerVersionCreationTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlCodeGenerationServerVersionCreationTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlCodeGenerationServerVersionCreationTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual string GenerateSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
public class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerator : ProviderCodeGenerator {
    private static MethodInfo _useMySqlMethodInfo;
    private IMySqlOptions _options;
    public MySqlCodeGenerator(ProviderCodeGeneratorDependencies dependencies, IMySqlOptions options);
    private static MySqlCodeGenerator();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
public class Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory : DatabaseModelFactory {
    private IDiagnosticsLogger`1<Scaffolding> _logger;
    private IRelationalTypeMappingSource _typeMappingSource;
    private IMySqlOptions _options;
    [CompilerGeneratedAttribute]
private MySqlScaffoldingConnectionSettings <Settings>k__BackingField;
    private static string GetDatabaseSettings;
    private static string GetTablesQuery;
    private static string GetColumnsQuery;
    private static string GetPrimaryQuery;
    private static string GetIndexesQuery;
    private static string GetCreateTableStatementQuery;
    private static string GetConstraintsQuery;
    private static string GetCheckConstraintsQuery;
    protected MySqlScaffoldingConnectionSettings Settings { get; protected set; }
    public MySqlDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger, IRelationalTypeMappingSource typeMappingSource, IMySqlOptions options);
    [CompilerGeneratedAttribute]
protected virtual MySqlScaffoldingConnectionSettings get_Settings();
    [CompilerGeneratedAttribute]
protected virtual void set_Settings(MySqlScaffoldingConnectionSettings value);
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
    protected virtual void SetupMySqlOptions(DbConnection connection);
    protected virtual DatabaseModel GetDatabase(DbConnection connection, DatabaseModelFactoryOptions options);
    protected virtual string GetDefaultSchema(DbConnection connection);
    protected virtual Func`3<string, string, bool> GenerateTableFilter(IReadOnlyList`1<string> tables, IReadOnlyList`1<string> schemas);
    private static Func`2<string, string> GenerateSchemaFilter(IReadOnlyList`1<string> schemas);
    private static string EscapeLiteral(string s);
    protected virtual IEnumerable`1<DatabaseTable> GetTables(DbConnection connection, Func`3<string, string, bool> filter, string defaultCharSet, string defaultCollation);
    private static IEnumerable`1<DatabaseSequence> GetSequences(DbConnection connection);
    protected virtual void GetColumns(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, Func`3<string, string, bool> tableFilter, string defaultCharSet, string defaultCollation);
    private bool IsDefaultValueSqlFunction(string defaultValue, string dataType);
    protected virtual string ConvertDefaultValueFromMariaDbToMySql(string defaultValue, Boolean& isDefaultValueExpression);
    private static bool IsSimpleNumericDefaultValue(string defaultValue);
    protected virtual string FilterClrDefaults(string dataTypeName, bool nullable, string defaultValue);
    protected virtual string CreateDefaultValueString(string defaultValue, string dataType, bool isSqlFunction, bool isDefaultValueExpression);
    protected virtual void GetPrimaryKeys(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables);
    protected virtual void GetIndexes(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, Func`3<string, string, bool> tableFilter);
    private static Dictionary`2<string, string> GetFullTextParsers(string createTableQuery);
    private static string GetCreateTableQuery(DbConnection connection, DatabaseTable table);
    protected virtual void GetConstraints(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables);
    protected virtual Dictionary`2<string, Func`2<ValueTuple`3<string, string, string>, string>> GetColumnTypeOverrides(DbConnection connection, DatabaseTable table);
    protected virtual Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
    private DatabaseColumn GetColumn(DatabaseTable table, string columnName);
    private DatabaseColumn FindColumn(DatabaseTable table, string columnName);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.ByteArrayComparer : ValueComparer`1<Byte[]> {
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.BytesToDateTimeConverter : ValueConverter`2<Byte[], DateTime> {
    private static NumberToBytesConverter`1<long> _longToBytes;
    private static BytesToDateTimeConverter();
    public static Byte[] ToBytes(DateTime v);
    public static DateTime FromBytes(Byte[] v);
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IDefaultValueCompatibilityAware {
    public abstract virtual RelationalTypeMapping Clone(bool isDefaultValueCompatible);
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IJsonSpecificTypeMapping {
    public abstract virtual RelationalTypeMapping CloneAsJsonCompatible();
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlConnectionStringOptionsValidator {
    public abstract virtual bool EnsureMandatoryOptions(String& connectionString);
    public abstract virtual bool EnsureMandatoryOptions(DbConnection connection);
    public abstract virtual bool EnsureMandatoryOptions(DbDataSource dataSource);
    public abstract virtual void ThrowException(Exception innerException);
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlCSharpRuntimeAnnotationTypeMappingCodeGenerator {
    public abstract virtual void Create(CSharpRuntimeAnnotationCodeGeneratorParameters codeGeneratorParameters, CSharpRuntimeAnnotationCodeGeneratorDependencies codeGeneratorDependencies);
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection {
    public abstract virtual IMySqlRelationalConnection CreateMasterConnection();
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.Json.MySqlJsonByteArrayAsHexStringReaderWriter : JsonValueReaderWriter`1<Byte[]> {
    [CompilerGeneratedAttribute]
private static MySqlJsonByteArrayAsHexStringReaderWriter <Instance>k__BackingField;
    public static MySqlJsonByteArrayAsHexStringReaderWriter Instance { get; }
    private static MySqlJsonByteArrayAsHexStringReaderWriter();
    [CompilerGeneratedAttribute]
public static MySqlJsonByteArrayAsHexStringReaderWriter get_Instance();
    public virtual Byte[] FromJsonTyped(Utf8JsonReaderManager& manager, object existingObject);
    public virtual void ToJsonTyped(Utf8JsonWriter writer, Byte[] value);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping : BoolTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlBoolTypeMapping <Default>k__BackingField;
    public static MySqlBoolTypeMapping Default { get; }
    public MySqlBoolTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size);
    protected MySqlBoolTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlBoolTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlBoolTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping : ByteArrayTypeMapping {
    private static int MaxSize;
    private int _maxSpecificSize;
    [CompilerGeneratedAttribute]
private static MySqlByteArrayTypeMapping <Default>k__BackingField;
    public static MySqlByteArrayTypeMapping Default { get; }
    public MySqlByteArrayTypeMapping(string storeType, Nullable`1<int> size, bool fixedLength);
    protected MySqlByteArrayTypeMapping(DbType type, string storeType, Nullable`1<int> size, bool fixedLength);
    protected MySqlByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlByteArrayTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlByteArrayTypeMapping get_Default();
    private static string GetBaseType(Nullable`1<int> size, bool isFixedLength);
    private static StoreTypePostfix GetStoreTypePostfix(Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    private static int CalculateSize(Nullable`1<int> size);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping : ByteTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlByteTypeMapping <Default>k__BackingField;
    public static MySqlByteTypeMapping Default { get; }
    public MySqlByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlByteTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlByteTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlByteTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlConnectionSettings : object {
    [CompilerGeneratedAttribute]
private MySqlGuidFormat <GuidFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TreatTinyAsBoolean>k__BackingField;
    public MySqlGuidFormat GuidFormat { get; }
    public Nullable`1<bool> TreatTinyAsBoolean { get; }
    public MySqlConnectionSettings(DbConnection connection);
    public MySqlConnectionSettings(string connectionString);
    [CompilerGeneratedAttribute]
public virtual MySqlGuidFormat get_GuidFormat();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_TreatTinyAsBoolean();
    protected virtual bool Equals(MySqlConnectionSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlConnectionStringOptionsValidator : object {
    public virtual bool EnsureMandatoryOptions(String& connectionString);
    public virtual bool EnsureMandatoryOptions(DbConnection connection);
    public virtual bool EnsureMandatoryOptions(DbDataSource dataSource);
    public virtual void ThrowException(Exception innerException);
    protected virtual bool ValidateMandatoryOptions(MySqlConnectionStringBuilder csb);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator : RelationalDatabaseCreator {
    private IMySqlRelationalConnection _relationalConnection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    public TimeSpan RetryDelay { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public MySqlDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, IMySqlRelationalConnection relationalConnection, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public virtual void set_RetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_RetryTimeout(TimeSpan value);
    public virtual void Create();
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator/<CreateAsync>d__12")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IReadOnlyList`1<MigrationCommand> CreateCreateOperations();
    public virtual bool Exists();
    private bool Exists(bool retryOnNotExists);
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    private Task`1<bool> ExistsAsync(bool retryOnNotExists, CancellationToken cancellationToken);
    private static bool IsDoesNotExist(MySqlException exception);
    private bool RetryOnExistsFailure(MySqlException exception);
    public virtual void Delete();
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator/<DeleteAsync>d__24")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    private IReadOnlyList`1<MigrationCommand> CreateDropCommands();
    private static void ClearAllPools();
    private void ClearPool();
    [CompilerGeneratedAttribute]
private bool <HasTables>b__13_0(IMySqlRelationalConnection connection);
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator/<<HasTablesAsync>b__14_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <HasTablesAsync>b__14_0(IMySqlRelationalConnection connection, CancellationToken ct);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping : DateTimeOffsetTypeMapping {
    private bool _isDefaultValueCompatible;
    [CompilerGeneratedAttribute]
private static MySqlDateTimeOffsetTypeMapping <Default>k__BackingField;
    public static MySqlDateTimeOffsetTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public MySqlDateTimeOffsetTypeMapping(string storeType, Nullable`1<int> precision, bool isDefaultValueCompatible);
    protected MySqlDateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters, bool isDefaultValueCompatible);
    private static MySqlDateTimeOffsetTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlDateTimeOffsetTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(bool isDefaultValueCompatible);
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual string GenerateProviderValueSqlLiteral(object value);
    protected virtual string get_SqlLiteralFormatString();
    public virtual string GetFormatString();
    public static string GetDateTimeOffsetFormatString(Nullable`1<int> precision);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping : DateTimeTypeMapping {
    private bool _isDefaultValueCompatible;
    [CompilerGeneratedAttribute]
private static MySqlDateTimeTypeMapping <Default>k__BackingField;
    public static MySqlDateTimeTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public MySqlDateTimeTypeMapping(string storeType, Nullable`1<int> precision, Type clrType, ValueConverter converter, ValueComparer comparer, bool isDefaultValueCompatible);
    protected MySqlDateTimeTypeMapping(RelationalTypeMappingParameters parameters, bool isDefaultValueCompatible);
    private static MySqlDateTimeTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlDateTimeTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(bool isDefaultValueCompatible);
    protected virtual string get_SqlLiteralFormatString();
    public virtual string GetFormatString();
    public static string GetDateTimeFormatString(Nullable`1<int> precision);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping : RelationalTypeMapping {
    private bool _isDefaultValueCompatible;
    [CompilerGeneratedAttribute]
private static MySqlDateTypeMapping <Default>k__BackingField;
    public static MySqlDateTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public MySqlDateTypeMapping(string storeType, Type clrType, bool isDefaultValueCompatible);
    protected MySqlDateTypeMapping(RelationalTypeMappingParameters parameters, bool isDefaultValueCompatible);
    private static MySqlDateTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlDateTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(bool isDefaultValueCompatible);
    protected virtual string get_SqlLiteralFormatString();
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping : DecimalTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlDecimalTypeMapping <Default>k__BackingField;
    public static MySqlDecimalTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public MySqlDecimalTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> precision, Nullable`1<int> scale, StoreTypePostfix storeTypePostfix);
    protected MySqlDecimalTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlDecimalTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlDecimalTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping : DoubleTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlDoubleTypeMapping <Default>k__BackingField;
    public static MySqlDoubleTypeMapping Default { get; }
    public MySqlDoubleTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlDoubleTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlDoubleTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlDoubleTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public MySqlExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy/<ExecuteAsync>d__7`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    public MySqlExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping : FloatTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlFloatTypeMapping <Default>k__BackingField;
    public static MySqlFloatTypeMapping Default { get; }
    public MySqlFloatTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlFloatTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlFloatTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlFloatTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlGuidTypeMapping : GuidTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlGuidTypeMapping <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlGuidFormat <GuidFormat>k__BackingField;
    public static MySqlGuidTypeMapping Default { get; }
    public MySqlGuidFormat GuidFormat { get; }
    public bool IsCharBasedStoreType { get; }
    public MySqlGuidTypeMapping(MySqlGuidFormat guidFormat);
    protected MySqlGuidTypeMapping(RelationalTypeMappingParameters parameters, MySqlGuidFormat guidFormat);
    private static MySqlGuidTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlGuidTypeMapping get_Default();
    [CompilerGeneratedAttribute]
public virtual MySqlGuidFormat get_GuidFormat();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(MySqlGuidFormat guidFormat);
    public virtual bool get_IsCharBasedStoreType();
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private static string GetStoreType(MySqlGuidFormat guidFormat);
    private static int GetSize(MySqlGuidFormat guidFormat);
    public static bool IsValidGuidFormat(MySqlGuidFormat guidFormat);
    protected static Byte[] GetBytesFromGuid(MySqlGuidFormat guidFormat, Guid guid);
    public virtual RelationalTypeMapping CloneAsJsonCompatible();
    private sealed virtual override void Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlCSharpRuntimeAnnotationTypeMappingCodeGenerator.Create(CSharpRuntimeAnnotationCodeGeneratorParameters codeGeneratorParameters, CSharpRuntimeAnnotationCodeGeneratorDependencies codeGeneratorDependencies);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlIntTypeMapping : IntTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlIntTypeMapping <Default>k__BackingField;
    public static MySqlIntTypeMapping Default { get; }
    public MySqlIntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlIntTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlIntTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlIntTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[FlagsAttribute]
public enum Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions : Enum {
    public int value__;
    public static MySqlJsonChangeTrackingOptions None;
    public static MySqlJsonChangeTrackingOptions CompareRootPropertyOnly;
    public static MySqlJsonChangeTrackingOptions CompareStringRootPropertyByEquals;
    public static MySqlJsonChangeTrackingOptions CompareDomRootPropertyByEquals;
    public static MySqlJsonChangeTrackingOptions CompareDomSemantically;
    public static MySqlJsonChangeTrackingOptions HashDomSemantially;
    public static MySqlJsonChangeTrackingOptions HashDomSemantiallyOptimized;
    public static MySqlJsonChangeTrackingOptions SnapshotCallsDeepClone;
    public static MySqlJsonChangeTrackingOptions SnapshotCallsClone;
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonTypeMapping : MySqlStringTypeMapping {
    public MySqlJsonTypeMapping(string storeType, Type clrType, ValueConverter valueConverter, ValueComparer valueComparer, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction);
    protected MySqlJsonTypeMapping(RelationalTypeMappingParameters parameters, MySqlDbType mySqlDbType, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction);
    protected abstract virtual RelationalTypeMapping Clone(Nullable`1<bool> noBackslashEscapes, Nullable`1<bool> replaceLineBreaksWithCharFunction);
    protected virtual void ConfigureParameter(DbParameter parameter);
    private sealed virtual override void Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlCSharpRuntimeAnnotationTypeMappingCodeGenerator.Create(CSharpRuntimeAnnotationCodeGeneratorParameters codeGeneratorParameters, CSharpRuntimeAnnotationCodeGeneratorDependencies codeGeneratorDependencies);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonTypeMapping`1 : MySqlJsonTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlJsonTypeMapping`1<T> <Default>k__BackingField;
    public static MySqlJsonTypeMapping`1<T> Default { get; }
    public MySqlJsonTypeMapping`1(string storeType, ValueConverter valueConverter, ValueComparer valueComparer, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction);
    protected MySqlJsonTypeMapping`1(RelationalTypeMappingParameters parameters, MySqlDbType mySqlDbType, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction);
    private static MySqlJsonTypeMapping`1();
    [CompilerGeneratedAttribute]
public static MySqlJsonTypeMapping`1<T> get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(Nullable`1<bool> noBackslashEscapes, Nullable`1<bool> replaceLineBreaksWithCharFunction);
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonTypeMappingSourcePlugin : object {
    [CompilerGeneratedAttribute]
private IMySqlOptions <Options>k__BackingField;
    [NotNullAttribute]
public IMySqlOptions Options { get; }
    protected Type MySqlJsonTypeMappingType { get; }
    protected MySqlJsonTypeMappingSourcePlugin(IMySqlOptions options);
    [CompilerGeneratedAttribute]
public virtual IMySqlOptions get_Options();
    public virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    protected abstract virtual Type get_MySqlJsonTypeMappingType();
    protected abstract virtual RelationalTypeMapping FindDomMapping(RelationalTypeMappingInfo mappingInfo);
    protected abstract virtual ValueConverter GetValueConverter(Type clrType);
    protected abstract virtual ValueComparer GetValueComparer(Type clrType);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLongTypeMapping : LongTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlLongTypeMapping <Default>k__BackingField;
    public static MySqlLongTypeMapping Default { get; }
    public MySqlLongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlLongTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlLongTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlLongTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlRelationalConnection : RelationalConnection {
    private IMySqlConnectionStringOptionsValidator _mySqlConnectionStringOptionsValidator;
    private static string NoBackslashEscapes;
    private MySqlOptionsExtension _mySqlOptionsExtension;
    private DbDataSource _dataSource;
    [CompilerGeneratedAttribute]
private bool <IsMasterConnection>k__BackingField;
    private bool IsMasterConnection { get; private set; }
    public string ConnectionString { get; public set; }
    public MySqlConnection DbConnection { get; public set; }
    public DbDataSource DbDataSource { get; public set; }
    protected bool SupportsAmbientTransactions { get; }
    public MySqlRelationalConnection(RelationalConnectionDependencies dependencies, IMySqlConnectionStringOptionsValidator mySqlConnectionStringOptionsValidator, IMySqlOptions mySqlSingletonOptions);
    public MySqlRelationalConnection(RelationalConnectionDependencies dependencies, IMySqlConnectionStringOptionsValidator mySqlConnectionStringOptionsValidator, DbDataSource dataSource);
    protected static DbDataSource GetEffectiveDataSource(IMySqlOptions mySqlSingletonOptions, IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
private bool get_IsMasterConnection();
    [CompilerGeneratedAttribute]
private void set_IsMasterConnection(bool value);
    protected virtual DbConnection CreateDbConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual void SetDbConnection(DbConnection value, bool contextOwnsConnection);
    public virtual MySqlConnection get_DbConnection();
    public virtual void set_DbConnection(MySqlConnection value);
    public virtual DbDataSource get_DbDataSource();
    public virtual void set_DbDataSource(DbDataSource value);
    public virtual IMySqlRelationalConnection CreateMasterConnection();
    protected virtual IMySqlRelationalConnection CreateMasterConnectionCore(DbContextOptionsBuilder optionsBuilder, IMySqlConnectionStringOptionsValidator mySqlConnectionStringOptionsValidator);
    protected virtual MySqlConnectionStringBuilder AddConnectionStringOptions(MySqlConnectionStringBuilder builder);
    protected virtual bool get_SupportsAmbientTransactions();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual bool Open(bool errorsExpected);
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlRelationalConnection/<OpenAsync>d__29")]
public virtual Task`1<bool> OpenAsync(CancellationToken cancellationToken, bool errorsExpected);
    public virtual void AddSqlMode(string mode);
    public virtual Task AddSqlModeAsync(string mode, CancellationToken cancellationToken);
    public virtual void RemoveSqlMode(string mode);
    public virtual Task RemoveSqlModeAsync(string mode, CancellationToken cancellationToken);
    protected virtual void ExecuteNonQuery(string sql);
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlRelationalConnection/<ExecuteNonQueryAsync>d__35")]
protected virtual Task ExecuteNonQueryAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__0(CancellationToken cancellationToken, bool errorsExpected);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSByteTypeMapping : SByteTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlSByteTypeMapping <Default>k__BackingField;
    public static MySqlSByteTypeMapping Default { get; }
    public MySqlSByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlSByteTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlSByteTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlSByteTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlScaffoldingConnectionSettings : object {
    public static string ScaffoldPrefix;
    public static string CharSetKey;
    public static string CollationKey;
    public static string ViewsKey;
    private DbConnectionStringBuilder _csb;
    [CompilerGeneratedAttribute]
private bool <CharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Views>k__BackingField;
    public bool CharSet { get; public set; }
    public bool Collation { get; public set; }
    public bool Views { get; public set; }
    public MySqlScaffoldingConnectionSettings(string connectionString);
    [CompilerGeneratedAttribute]
public virtual bool get_CharSet();
    [CompilerGeneratedAttribute]
public virtual void set_CharSet(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_Collation();
    [CompilerGeneratedAttribute]
public virtual void set_Collation(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_Views();
    [CompilerGeneratedAttribute]
public virtual void set_Views(bool value);
    public virtual string GetProviderCompatibleConnectionString();
    protected virtual bool GetBoolean(string key, bool defaultValue);
    protected virtual bool Equals(MySqlScaffoldingConnectionSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlShortTypeMapping : ShortTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlShortTypeMapping <Default>k__BackingField;
    public static MySqlShortTypeMapping Default { get; }
    public MySqlShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlShortTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlShortTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlShortTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper : RelationalSqlGenerationHelper {
    private IMySqlOptions _options;
    public MySqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies, IMySqlOptions options);
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string name, string schema);
    public virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    public virtual string GetObjectName(string name, string schema);
    public virtual string GetSchemaName(string name, string schema);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping : MySqlTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlStringTypeMapping <Default>k__BackingField;
    private static int UnicodeMax;
    private static int AnsiMax;
    private int _maxSpecificSize;
    [CompilerGeneratedAttribute]
private bool <NoBackslashEscapes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceLineBreaksWithCharFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnquoted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceToString>k__BackingField;
    public static MySqlStringTypeMapping Default { get; }
    public bool NoBackslashEscapes { get; }
    public bool ReplaceLineBreaksWithCharFunction { get; }
    public bool IsUnquoted { get; }
    public bool ForceToString { get; }
    public bool IsNationalChar { get; }
    public MySqlStringTypeMapping(string storeType, StoreTypePostfix storeTypePostfix, bool unicode, Nullable`1<int> size, bool fixedLength, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction, bool unquoted, bool forceToString);
    protected MySqlStringTypeMapping(RelationalTypeMappingParameters parameters, MySqlDbType mySqlDbType, bool noBackslashEscapes, bool replaceLineBreaksWithCharFunction, bool isUnquoted, bool forceToString);
    private static MySqlStringTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlStringTypeMapping get_Default();
    [CompilerGeneratedAttribute]
public virtual bool get_NoBackslashEscapes();
    [CompilerGeneratedAttribute]
public virtual bool get_ReplaceLineBreaksWithCharFunction();
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnquoted();
    [CompilerGeneratedAttribute]
public virtual bool get_ForceToString();
    public virtual bool get_IsNationalChar();
    private static int CalculateSize(bool unicode, Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(Nullable`1<bool> unquoted, Nullable`1<bool> forceToString, Nullable`1<bool> noBackslashEscapes, Nullable`1<bool> replaceLineBreaksWithCharFunction);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public static string EscapeSqlLiteralWithLineBreaks(string value, bool escapeBackslashes, bool replaceLineBreaksWithCharFunction);
    public static string EscapeSqlLiteral(string literal, bool escapeBackslashes);
    public static string EscapeBackslashes(string literal, bool escapeBackslashes);
    private sealed virtual override void Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlCSharpRuntimeAnnotationTypeMappingCodeGenerator.Create(CSharpRuntimeAnnotationCodeGeneratorParameters codeGeneratorParameters, CSharpRuntimeAnnotationCodeGeneratorDependencies codeGeneratorDependencies);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping : RelationalTypeMapping {
    private bool _isDefaultValueCompatible;
    [CompilerGeneratedAttribute]
private static MySqlTimeTypeMapping <Default>k__BackingField;
    public static MySqlTimeTypeMapping Default { get; }
    public MySqlTimeTypeMapping(string storeType, Type clrType, Nullable`1<int> precision, bool isDefaultValueCompatible);
    protected MySqlTimeTypeMapping(RelationalTypeMappingParameters parameters, bool isDefaultValueCompatible);
    private static MySqlTimeTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlTimeTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(bool isDefaultValueCompatible);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected static string GetTimeFormatString(object value, Nullable`1<int> precision);
}
public static class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTransientExceptionDetector : object {
    public static bool ShouldRetryOn(Exception ex);
}
public abstract class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private MySqlDbType <MySqlDbType>k__BackingField;
    public MySqlDbType MySqlDbType { get; }
    public MySqlTypeMapping(string storeType, Type clrType, MySqlDbType mySqlDbType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, ValueConverter valueConverter, ValueComparer valueComparer, JsonValueReaderWriter jsonValueReaderWriter);
    protected MySqlTypeMapping(RelationalTypeMappingParameters parameters, MySqlDbType mySqlDbType);
    [CompilerGeneratedAttribute]
public virtual MySqlDbType get_MySqlDbType();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMappingSource : RelationalTypeMappingSource {
    private MySqlBoolTypeMapping _bit1;
    private MySqlBoolTypeMapping _tinyint1;
    private MySqlULongTypeMapping _bit;
    private MySqlSByteTypeMapping _tinyint;
    private MySqlByteTypeMapping _utinyint;
    private MySqlShortTypeMapping _smallint;
    private MySqlUShortTypeMapping _usmallint;
    private MySqlIntTypeMapping _int;
    private MySqlUIntTypeMapping _uint;
    private MySqlLongTypeMapping _bigint;
    private MySqlULongTypeMapping _ubigint;
    private MySqlDecimalTypeMapping _decimal;
    private MySqlDoubleTypeMapping _double;
    private MySqlFloatTypeMapping _float;
    private RelationalTypeMapping _binary;
    private RelationalTypeMapping _varbinary;
    private MySqlStringTypeMapping _charUnicode;
    private MySqlStringTypeMapping _varcharUnicode;
    private MySqlStringTypeMapping _tinytextUnicode;
    private MySqlStringTypeMapping _textUnicode;
    private MySqlStringTypeMapping _mediumtextUnicode;
    private MySqlStringTypeMapping _longtextUnicode;
    private MySqlStringTypeMapping _nchar;
    private MySqlStringTypeMapping _nvarchar;
    private MySqlStringTypeMapping _enum;
    private MySqlYearTypeMapping _year;
    private MySqlDateTypeMapping _dateDateOnly;
    private MySqlDateTypeMapping _dateDateTime;
    private MySqlTimeTypeMapping _timeTimeOnly;
    private MySqlTimeTypeMapping _timeTimeSpan;
    private MySqlDateTimeTypeMapping _dateTime;
    private MySqlDateTimeTypeMapping _timeStamp;
    private MySqlDateTimeOffsetTypeMapping _dateTimeOffset;
    private MySqlDateTimeOffsetTypeMapping _timeStampOffset;
    private RelationalTypeMapping _binaryRowVersion;
    private RelationalTypeMapping _binaryRowVersion6;
    private GuidTypeMapping _guid;
    private MySqlJsonTypeMapping`1<string> _jsonDefaultString;
    private MySqlCodeGenerationMemberAccessTypeMapping _codeGenerationMemberAccess;
    private MySqlCodeGenerationServerVersionCreationTypeMapping _codeGenerationServerVersionCreation;
    private Dictionary`2<string, RelationalTypeMapping[]> _storeTypeMappings;
    private Dictionary`2<Type, RelationalTypeMapping> _clrTypeMappings;
    private Dictionary`2<Type, RelationalTypeMapping> _scaffoldingClrTypeMappings;
    private IMySqlOptions _options;
    private bool _initialized;
    private object _initializationLock;
    public MySqlTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, IMySqlOptions options);
    private void Initialize();
    protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindRawMapping(RelationalTypeMappingInfo mappingInfo);
    protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlUIntTypeMapping : UIntTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlUIntTypeMapping <Default>k__BackingField;
    public static MySqlUIntTypeMapping Default { get; }
    public MySqlUIntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlUIntTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlUIntTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlUIntTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlULongTypeMapping : ULongTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlULongTypeMapping <Default>k__BackingField;
    public static MySqlULongTypeMapping Default { get; }
    public MySqlULongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlULongTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlULongTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlULongTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlUShortTypeMapping : UShortTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlUShortTypeMapping <Default>k__BackingField;
    public static MySqlUShortTypeMapping Default { get; }
    public MySqlUShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected MySqlUShortTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySqlUShortTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlUShortTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlYearTypeMapping : MySqlTypeMapping {
    [CompilerGeneratedAttribute]
private static MySqlYearTypeMapping <Default>k__BackingField;
    public static MySqlYearTypeMapping Default { get; }
    public MySqlYearTypeMapping(string storeType);
    protected MySqlYearTypeMapping(RelationalTypeMappingParameters parameters, MySqlDbType mySqlDbType);
    private static MySqlYearTypeMapping();
    [CompilerGeneratedAttribute]
public static MySqlYearTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public interface Pomelo.EntityFrameworkCore.MySql.Storage.ValueComparison.Internal.IMySqlJsonValueComparer {
    public abstract virtual ValueComparer Clone(MySqlJsonChangeTrackingOptions options);
}
public interface Pomelo.EntityFrameworkCore.MySql.Update.Internal.IMySqlUpdateSqlGenerator {
    public abstract virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
}
public class Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommand : ModificationCommand {
    private bool _detailedErrorsEnabled;
    public MySqlModificationCommand(ModificationCommandParameters& modificationCommandParameters);
    public MySqlModificationCommand(NonTrackedModificationCommandParameters& modificationCommandParameters);
    public virtual void PropagateResults(RelationalDataReader relationalReader);
}
public class Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch : AffectedCountModificationCommandBatch {
    private List`1<IReadOnlyModificationCommand> _pendingBulkInsertCommands;
    private int _pendingParameters;
    protected IMySqlUpdateSqlGenerator UpdateSqlGenerator { get; }
    public MySqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize);
    protected virtual IMySqlUpdateSqlGenerator get_UpdateSqlGenerator();
    protected virtual void RollbackLastCommand(IReadOnlyModificationCommand modificationCommand);
    private void ApplyPendingBulkInsertCommands();
    protected virtual void AddCommand(IReadOnlyModificationCommand modificationCommand);
    private static bool CanBeInsertedInSameStatement(IReadOnlyModificationCommand firstCommand, IReadOnlyModificationCommand secondCommand);
    public virtual void Complete(bool moreBatchesExpected);
    protected virtual int ConsumeResultSet(int startCommandIndex, RelationalDataReader reader);
    [AsyncStateMachineAttribute("Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch/<ConsumeResultSetAsync>d__10")]
protected virtual Task`1<int> ConsumeResultSetAsync(int startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual void ConsumeRowsAffectedFromResultSet(IReadOnlyModificationCommand command, RelationalDataReader reader, int commandIndex);
    protected virtual void AddParameter(IColumnModification columnModification);
    public virtual bool TryAddCommand(IReadOnlyModificationCommand modificationCommand);
    [CompilerGeneratedAttribute]
private void <AddParameter>g__AddParameterCore|12_0(string name, object value, <>c__DisplayClass12_0& );
}
public class Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory : object {
    private static int DefaultMaxBatchSize;
    private static int MaxMaxBatchSize;
    private int _maxBatchSize;
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies <Dependencies>k__BackingField;
    protected ModificationCommandBatchFactoryDependencies Dependencies { get; }
    public MySqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    [CompilerGeneratedAttribute]
protected virtual ModificationCommandBatchFactoryDependencies get_Dependencies();
    public virtual ModificationCommandBatch Create();
}
public class Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandFactory : object {
    public virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
public class Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlUpdateSqlGenerator : UpdateAndSelectSqlGenerator {
    [NotNullAttribute]
private IMySqlOptions _options;
    public MySqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies, IMySqlOptions options);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
    private ResultSetMapping AppendInsertMultipleRowsInSingleStatementOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, List`1<IColumnModification> writeOperations, Boolean& requiresTransaction);
    protected virtual void AppendInsertCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendValuesHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendValues(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> operations);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    protected virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification);
    protected virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    public virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual string GetProcedureCallOutParameterVariableName(string commandParameterName);
    protected virtual bool IsIdentityOperation(IColumnModification modification);
    public virtual void PrependEnsureAutocommit(StringBuilder commandStringBuilder);
    private static ValueTuple`2<string, string> GetTableNameAndSchema(IColumnModification modification, IProperty property);
}
internal static class Pomelo.EntityFrameworkCore.MySql.Utilities.Statics : object {
    internal static Boolean[][] TrueArrays;
    internal static Boolean[][] FalseArrays;
    private static Statics();
    internal static IEnumerable`1<bool> GetTrueValues(int dimensions);
    internal static IEnumerable`1<bool> GetFalseValues(int dimensions);
}
public class Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlSequentialGuidValueGenerator : ValueGenerator`1<Guid> {
    private IMySqlOptions _options;
    private static RandomNumberGenerator _rng;
    public bool GeneratesTemporaryValues { get; }
    public MySqlSequentialGuidValueGenerator(IMySqlOptions options);
    private static MySqlSequentialGuidValueGenerator();
    public virtual Guid Next(EntityEntry entry);
    public virtual Guid Next();
    public virtual Guid Next(DateTimeOffset timeNow);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlValueGeneratorSelector : RelationalValueGeneratorSelector {
    private IMySqlOptions _options;
    public MySqlValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, IMySqlOptions options);
    protected virtual ValueGenerator FindForType(IProperty property, ITypeBase typeBase, Type clrType);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Collections.Generic.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [AsyncStateMachineAttribute("System.Collections.Generic.EnumerableExtensions/<ToListAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Data.Common.DbDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
public static bool HasName(DbDataReader reader, string columnName);
}
[ExtensionAttribute]
internal static class System.Data.Common.DbDataRecordExtensions : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataRecord record, string name);
}
[ExtensionAttribute]
internal static class System.Linq.IEnumerableExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<T> AppendIfTrue(IEnumerable`1<T> source, bool condition, Func`1<T> elementGetter);
    [ExtensionAttribute]
internal static IEnumerable`1<T> AppendIfTrue(IEnumerable`1<T> source, bool condition, T element);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [ExtensionAttribute]
internal static bool IsClosedFormOf(MethodInfo methodInfo, MethodInfo genericMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.TypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsGenericList(Type type);
    [ExtensionAttribute]
internal static bool IsArrayOrGenericList(Type type);
    [ExtensionAttribute]
internal static bool TryGetElementType(Type type, Type& elementType);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsIntegerForSerial(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__15")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static MethodInfo GetRequiredRuntimeMethod(Type type, string name, Type[] parameters);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
