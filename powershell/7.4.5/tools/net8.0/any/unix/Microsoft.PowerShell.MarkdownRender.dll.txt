internal class Microsoft.PowerShell.MarkdownRender.CodeInlineRenderer : VT100ObjectRenderer`1<CodeInline> {
    protected virtual void Write(VT100Renderer renderer, CodeInline obj);
}
internal class Microsoft.PowerShell.MarkdownRender.EmphasisInlineRenderer : VT100ObjectRenderer`1<EmphasisInline> {
    protected virtual void Write(VT100Renderer renderer, EmphasisInline obj);
}
internal class Microsoft.PowerShell.MarkdownRender.FencedCodeBlockRenderer : VT100ObjectRenderer`1<FencedCodeBlock> {
    protected virtual void Write(VT100Renderer renderer, FencedCodeBlock obj);
}
internal class Microsoft.PowerShell.MarkdownRender.HeaderBlockRenderer : VT100ObjectRenderer`1<HeadingBlock> {
    protected virtual void Write(VT100Renderer renderer, HeadingBlock obj);
}
internal class Microsoft.PowerShell.MarkdownRender.LeafInlineRenderer : VT100ObjectRenderer`1<LeafInline> {
    protected virtual void Write(VT100Renderer renderer, LeafInline obj);
}
internal class Microsoft.PowerShell.MarkdownRender.LineBreakRenderer : VT100ObjectRenderer`1<LineBreakInline> {
    protected virtual void Write(VT100Renderer renderer, LineBreakInline obj);
}
internal class Microsoft.PowerShell.MarkdownRender.LinkInlineRenderer : VT100ObjectRenderer`1<LinkInline> {
    protected virtual void Write(VT100Renderer renderer, LinkInline obj);
}
internal class Microsoft.PowerShell.MarkdownRender.ListBlockRenderer : VT100ObjectRenderer`1<ListBlock> {
    protected virtual void Write(VT100Renderer renderer, ListBlock obj);
    private static void RenderNumberedList(VT100Renderer renderer, ListItemBlock block, int index);
}
internal class Microsoft.PowerShell.MarkdownRender.ListItemBlockRenderer : VT100ObjectRenderer`1<ListItemBlock> {
    private static int IndentCacheMax;
    private static String[] IndentCache;
    private static ListItemBlockRenderer();
    protected virtual void Write(VT100Renderer renderer, ListItemBlock obj);
    private static void RenderWithIndent(VT100Renderer renderer, MarkdownObject block, char listBullet, int indentLevel);
    internal static string Padding(int countOfSpaces);
}
[FlagsAttribute]
public enum Microsoft.PowerShell.MarkdownRender.MarkdownConversionType : Enum {
    public int value__;
    public static MarkdownConversionType HTML;
    public static MarkdownConversionType VT100;
}
public class Microsoft.PowerShell.MarkdownRender.MarkdownConverter : object {
    public static MarkdownInfo Convert(string markdownString, MarkdownConversionType conversionType, PSMarkdownOptionInfo optionInfo);
}
public class Microsoft.PowerShell.MarkdownRender.MarkdownInfo : object {
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VT100EncodedString>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownDocument <Tokens>k__BackingField;
    public string Html { get; internal set; }
    public string VT100EncodedString { get; internal set; }
    public MarkdownDocument Tokens { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
internal void set_Html(string value);
    [CompilerGeneratedAttribute]
public string get_VT100EncodedString();
    [CompilerGeneratedAttribute]
internal void set_VT100EncodedString(string value);
    [CompilerGeneratedAttribute]
public MarkdownDocument get_Tokens();
    [CompilerGeneratedAttribute]
internal void set_Tokens(MarkdownDocument value);
}
public enum Microsoft.PowerShell.MarkdownRender.MarkdownOptionInfoProperty : Enum {
    public int value__;
    public static MarkdownOptionInfoProperty Header1;
    public static MarkdownOptionInfoProperty Header2;
    public static MarkdownOptionInfoProperty Header3;
    public static MarkdownOptionInfoProperty Header4;
    public static MarkdownOptionInfoProperty Header5;
    public static MarkdownOptionInfoProperty Header6;
    public static MarkdownOptionInfoProperty Code;
    public static MarkdownOptionInfoProperty Link;
    public static MarkdownOptionInfoProperty Image;
    public static MarkdownOptionInfoProperty EmphasisBold;
    public static MarkdownOptionInfoProperty EmphasisItalics;
}
internal class Microsoft.PowerShell.MarkdownRender.ParagraphBlockRenderer : VT100ObjectRenderer`1<ParagraphBlock> {
    protected virtual void Write(VT100Renderer renderer, ParagraphBlock obj);
}
public class Microsoft.PowerShell.MarkdownRender.PSMarkdownOptionInfo : object {
    private static char Esc;
    private static string EndSequence;
    [CompilerGeneratedAttribute]
private string <Header1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header4>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header5>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header6>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmphasisBold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmphasisItalics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableVT100Encoding>k__BackingField;
    private static string Header1Dark;
    private static string Header2Dark;
    private static string Header3Dark;
    private static string Header4Dark;
    private static string Header5Dark;
    private static string Header6Dark;
    private static string CodeDark;
    private static string CodeMacOS;
    private static string LinkDark;
    private static string ImageDark;
    private static string EmphasisBoldDark;
    private static string EmphasisItalicsDark;
    private static string Header1Light;
    private static string Header2Light;
    private static string Header3Light;
    private static string Header4Light;
    private static string Header5Light;
    private static string Header6Light;
    private static string CodeLight;
    private static string LinkLight;
    private static string ImageLight;
    private static string EmphasisBoldLight;
    private static string EmphasisItalicsLight;
    public string Header1 { get; public set; }
    public string Header2 { get; public set; }
    public string Header3 { get; public set; }
    public string Header4 { get; public set; }
    public string Header5 { get; public set; }
    public string Header6 { get; public set; }
    public string Code { get; public set; }
    public string Link { get; public set; }
    public string Image { get; public set; }
    public string EmphasisBold { get; public set; }
    public string EmphasisItalics { get; public set; }
    public bool EnableVT100Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Header1();
    [CompilerGeneratedAttribute]
public void set_Header1(string value);
    [CompilerGeneratedAttribute]
public string get_Header2();
    [CompilerGeneratedAttribute]
public void set_Header2(string value);
    [CompilerGeneratedAttribute]
public string get_Header3();
    [CompilerGeneratedAttribute]
public void set_Header3(string value);
    [CompilerGeneratedAttribute]
public string get_Header4();
    [CompilerGeneratedAttribute]
public void set_Header4(string value);
    [CompilerGeneratedAttribute]
public string get_Header5();
    [CompilerGeneratedAttribute]
public void set_Header5(string value);
    [CompilerGeneratedAttribute]
public string get_Header6();
    [CompilerGeneratedAttribute]
public void set_Header6(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_EmphasisBold();
    [CompilerGeneratedAttribute]
public void set_EmphasisBold(string value);
    [CompilerGeneratedAttribute]
public string get_EmphasisItalics();
    [CompilerGeneratedAttribute]
public void set_EmphasisItalics(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableVT100Encoding();
    [CompilerGeneratedAttribute]
public void set_EnableVT100Encoding(bool value);
    public string AsEscapeSequence(MarkdownOptionInfoProperty propertyName);
    public void SetDarkTheme();
    public void SetLightTheme();
    private void SetCodeColor(bool isDarkTheme);
}
internal class Microsoft.PowerShell.MarkdownRender.QuoteBlockRenderer : VT100ObjectRenderer`1<QuoteBlock> {
    protected virtual void Write(VT100Renderer renderer, QuoteBlock obj);
}
public class Microsoft.PowerShell.MarkdownRender.VT100EscapeSequences : object {
    private static char Esc;
    private string endSequence;
    private static string LongBackgroundCodeBlock;
    private PSMarkdownOptionInfo options;
    public VT100EscapeSequences(PSMarkdownOptionInfo optionInfo);
    public string FormatHeader1(string headerText);
    public string FormatHeader2(string headerText);
    public string FormatHeader3(string headerText);
    public string FormatHeader4(string headerText);
    public string FormatHeader5(string headerText);
    public string FormatHeader6(string headerText);
    public string FormatCode(string codeText, bool isInline);
    public string FormatLink(string linkText, string url, bool hideUrl);
    public string FormatEmphasis(string emphasisText, bool isBold);
    public string FormatImage(string altText);
    private string FormatHeader(string headerText, string headerEscapeSequence);
}
public abstract class Microsoft.PowerShell.MarkdownRender.VT100ObjectRenderer`1 : MarkdownObjectRenderer`2<VT100Renderer, T> {
}
public class Microsoft.PowerShell.MarkdownRender.VT100Renderer : TextRendererBase`1<VT100Renderer> {
    [CompilerGeneratedAttribute]
private VT100EscapeSequences <EscapeSequences>k__BackingField;
    public VT100EscapeSequences EscapeSequences { get; }
    public VT100Renderer(TextWriter writer, PSMarkdownOptionInfo optionInfo);
    [CompilerGeneratedAttribute]
public VT100EscapeSequences get_EscapeSequences();
}
