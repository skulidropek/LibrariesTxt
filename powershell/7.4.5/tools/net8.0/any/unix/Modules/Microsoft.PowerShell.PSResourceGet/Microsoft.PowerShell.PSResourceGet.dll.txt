public class InstallPkgParams : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reinstall>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrustRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoClobber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDependencyCheck>k__BackingField;
    public string Name { get; public set; }
    public VersionRange Version { get; public set; }
    public string Repository { get; public set; }
    public bool AcceptLicense { get; public set; }
    public bool Prerelease { get; public set; }
    public ScopeType Scope { get; public set; }
    public bool Quiet { get; public set; }
    public bool Reinstall { get; public set; }
    public bool Force { get; public set; }
    public bool TrustRepository { get; public set; }
    public bool NoClobber { get; public set; }
    public bool SkipDependencyCheck { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(VersionRange value);
    [CompilerGeneratedAttribute]
public string get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(string value);
    [CompilerGeneratedAttribute]
public bool get_AcceptLicense();
    [CompilerGeneratedAttribute]
public void set_AcceptLicense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public ScopeType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ScopeType value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reinstall();
    [CompilerGeneratedAttribute]
public void set_Reinstall(bool value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrustRepository();
    [CompilerGeneratedAttribute]
public void set_TrustRepository(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoClobber();
    [CompilerGeneratedAttribute]
public void set_NoClobber(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDependencyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependencyCheck(bool value);
    public void SetProperty(string propertyName, string propertyValue, ErrorRecord& ParameterParsingError);
}
public interface IServerAPICalls {
    public abstract virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType _type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.AssemblyLoadContextProxy : object {
    private object _customContext;
    private MethodInfo _loadFromAssemblyPath;
    private AssemblyLoadContextProxy(Type alc, string loadContextName);
    internal Assembly LoadFromAssemblyPath(string assemblyPath);
    internal static AssemblyLoadContextProxy CreateLoadContext(string name);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper : object {
    private CancellationToken _cancellationToken;
    private PSCmdlet _cmdletPassedIn;
    private HashSet`1<string> _pkgsLeftToFind;
    private List`1<string> _tagsLeftToFind;
    private ResourceType _type;
    private string _version;
    private VersionRange _versionRange;
    private NuGetVersion _nugetVersion;
    private VersionType _versionType;
    private bool _prerelease;
    private String[] _tag;
    private bool _includeDependencies;
    private bool _repositoryNameContainsWildcard;
    private NetworkCredential _networkCredential;
    private Dictionary`2<string, List`1<string>> _packagesFound;
    public FindHelper(CancellationToken cancellationToken, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper/<FindByResourceName>d__17")]
public IEnumerable`1<PSResourceInfo> FindByResourceName(String[] name, ResourceType type, VersionRange versionRange, NuGetVersion nugetVersion, VersionType versionType, string version, bool prerelease, String[] tag, String[] repository, bool includeDependencies, bool suppressErrors);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper/<FindByCommandOrDscResource>d__18")]
public IEnumerable`1<PSCommandResourceInfo> FindByCommandOrDscResource(bool isSearchingForCommands, bool prerelease, String[] tag, String[] repository);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper/<FindByTag>d__19")]
public IEnumerable`1<PSResourceInfo> FindByTag(ResourceType type, bool prerelease, String[] tag, String[] repository);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper/<SearchByNames>d__20")]
private IEnumerable`1<PSResourceInfo> SearchByNames(ServerApiCall currentServer, ResponseUtil currentResponseUtil, PSRepositoryInfo repository, bool shouldReportErrorForEachRepo);
    private HashSet`1<string> GetPackageNamesPopulated(String[] pkgNames);
    private bool TryAddToPackagesFound(PSResourceInfo foundPkg);
    private string FormatPkgVersionString(PSResourceInfo pkg);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.FindHelper/<FindDependencyPackages>d__24")]
internal IEnumerable`1<PSResourceInfo> FindDependencyPackages(ServerApiCall currentServer, ResponseUtil currentResponseUtil, PSResourceInfo currentPkg, PSRepositoryInfo repository);
}
[CmdletAttribute("Find", "PSResource")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.FindPSResource : PSCmdlet {
    private static string NameParameterSet;
    private static string CommandNameParameterSet;
    private static string DscResourceNameParameterSet;
    private CancellationTokenSource _cancellationTokenSource;
    private FindHelper _findHelper;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DscResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IncludeDependencies>k__BackingField;
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public ResourceType Type { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
public SwitchParameter Prerelease { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] CommandName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DscResourceName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public String[] Tag { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Repository { get; public set; }
    [ParameterAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter IncludeDependencies { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public ResourceType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ResourceType value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DscResourceName();
    [CompilerGeneratedAttribute]
public void set_DscResourceName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeDependencies();
    [CompilerGeneratedAttribute]
public void set_IncludeDependencies(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void StopProcessing();
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
    private void ProcessResourceNameParameterSet();
    private void ProcessCommandOrDscParameterSet(bool isSearchingForCommands);
    private void ProcessTags();
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.GetHelper : object {
    private PSCmdlet _cmdletPassedIn;
    private Dictionary`2<string, PSResourceInfo> _scriptDictionary;
    public static string PSScriptFileExt;
    public GetHelper(PSCmdlet cmdletPassedIn);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.GetHelper/<GetInstalledPackages>d__4")]
public IEnumerable`1<PSResourceInfo> GetInstalledPackages(IEnumerable`1<PSResourceInfo> pkgs, List`1<string> pathsToSearch);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.GetHelper/<GetPackagesFromPath>d__5")]
public IEnumerable`1<PSResourceInfo> GetPackagesFromPath(String[] name, VersionRange versionRange, List`1<string> pathsToSearch, bool selectPrereleaseOnly);
    public List`1<string> FilterPkgPathsByName(String[] names, List`1<string> dirsToSearch);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.GetHelper/<FilterPkgPathsByVersion>d__7")]
public IEnumerable`1<string> FilterPkgPathsByVersion(VersionRange versionRange, List`1<string> dirsToSearch, bool selectPrereleaseOnly);
    public PSResourceInfo OutputPackageObject(string pkgPath, Dictionary`2<string, PSResourceInfo> scriptDictionary);
    private static string GetResourceNameFromPath(string path);
}
[CmdletAttribute("Get", "InstalledPSResource")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.GetInstalledPSResourceCommand : PSCmdlet {
    private VersionRange _versionRange;
    private List`1<string> _pathsToSearch;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Scope>k__BackingField;
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] Name { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public ScopeType Scope { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public ScopeType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ScopeType value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "PSResourceRepository")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.GetPSResourceRepository : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "PSScriptFileInfo")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.GetPSScriptFileInfo : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.InstallHelper : object {
    public static string PSDataFileExt;
    public static string PSScriptFileExt;
    private static string MsgRepositoryNotTrusted;
    private static string MsgInstallUntrustedPackage;
    private static string ScriptPATHWarning;
    private CancellationToken _cancellationToken;
    private PSCmdlet _cmdletPassedIn;
    private List`1<string> _pathsToInstallPkg;
    private VersionRange _versionRange;
    private NuGetVersion _nugetVersion;
    private VersionType _versionType;
    private string _versionString;
    private bool _prerelease;
    private bool _acceptLicense;
    private bool _quiet;
    private bool _reinstall;
    private bool _force;
    private bool _trustRepository;
    private bool _asNupkg;
    private bool _includeXml;
    private bool _noClobber;
    private bool _authenticodeCheck;
    private bool _savePkg;
    private List`1<string> _pathsToSearch;
    private List`1<string> _pkgNamesToInstall;
    private string _tmpPath;
    private NetworkCredential _networkCredential;
    private HashSet`1<string> _packagesOnMachine;
    public InstallHelper(PSCmdlet cmdletPassedIn, NetworkCredential networkCredential);
    public IEnumerable`1<PSResourceInfo> BeginInstallPackages(String[] names, VersionRange versionRange, NuGetVersion nugetVersion, VersionType versionType, string versionString, bool prerelease, String[] repository, bool acceptLicense, bool quiet, bool reinstall, bool force, bool trustRepository, bool noClobber, bool asNupkg, bool includeXml, bool skipDependencyCheck, bool authenticodeCheck, bool savePkg, List`1<string> pathsToInstallPkg, Nullable`1<ScopeType> scope, string tmpPath, HashSet`1<string> pkgsInstalled);
    private List`1<PSResourceInfo> ProcessRepositories(String[] repository, bool trustRepository, bool skipDependencyCheck, ScopeType scope);
    private List`1<PSResourceInfo> FilterByInstalledPkgs(List`1<PSResourceInfo> packages);
    private bool TryDeleteDirectory(string tempInstallPath, ErrorRecord& errorMsg);
    private void MoveFilesIntoInstallPath(PSResourceInfo pkgInfo, bool isModule, bool isLocalRepo, string dirNameVersion, string tempInstallPath, string installPath, string newVersion, string moduleManifestVersion, string scriptPath);
    private List`1<PSResourceInfo> InstallPackages(String[] pkgNamesToInstall, PSRepositoryInfo repository, ServerApiCall currentServer, ResponseUtil currentResponseUtil, ScopeType scope, bool skipDependencyCheck, FindHelper findHelper);
    private Hashtable BeginPackageInstall(VersionType searchVersionType, NuGetVersion specificVersion, VersionRange versionRange, string pkgNameToInstall, PSRepositoryInfo repository, ServerApiCall currentServer, ResponseUtil currentResponseUtil, string tempInstallPath, Hashtable packagesHash, ErrorRecord& errRecord);
    private string CreateInstallationTempPath();
    private void DeleteInstallationTempPath(string tempInstallPath);
    private bool TryInstallToTempPath(Stream responseStream, string tempInstallPath, string pkgName, string normalizedPkgVersion, PSResourceInfo pkgToInstall, Hashtable packagesHash, Hashtable& updatedPackagesHash, ErrorRecord& error);
    private bool TrySaveNupkgToTempPath(Stream responseStream, string tempInstallPath, string pkgName, string normalizedPkgVersion, PSResourceInfo pkgToInstall, Hashtable packagesHash, Hashtable& updatedPackagesHash, ErrorRecord& error);
    private bool TryExtractToDirectory(string zipPath, string extractPath, ErrorRecord& error);
    private bool TryMoveInstallContent(string tempInstallPath, ScopeType scope, Hashtable packagesHash);
    private bool CallAcceptLicense(PSResourceInfo p, string moduleManifest, string tempInstallPath, string newVersion, ErrorRecord& error);
    private bool DetectClobber(string pkgName, Hashtable parsedMetadataHashtable, ErrorRecord& error);
    private bool CreateMetadataXMLFile(string dirNameVersion, string installPath, PSResourceInfo pkg, bool isModule, ErrorRecord& error);
    private void DeleteExtraneousFiles(string packageName, string dirNameVersion);
}
[CmdletAttribute("Install", "PSResource")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.InstallPSResource : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Scope>k__BackingField;
    private string _tmpPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <TrustRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Reinstall>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AcceptLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoClobber>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipDependencyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AuthenticodeCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private PSResourceInfo[] <InputObject>k__BackingField;
    private static string NameParameterSet;
    private static string InputObjectParameterSet;
    private static string RequiredResourceFileParameterSet;
    private static string RequiredResourceParameterSet;
    private static string CredentialKey;
    private List`1<string> _pathsToInstallPkg;
    private string _requiredResourceFile;
    private string _requiredResourceJson;
    private Hashtable _requiredResourceHash;
    private HashSet`1<string> _packagesOnMachine;
    private InstallHelper _installHelper;
    private ResourceFileType _resourceFileType;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Prerelease { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Repository { get; public set; }
    [ParameterAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public ScopeType Scope { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TemporaryPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter TrustRepository { get; public set; }
    [ParameterAttribute]
public SwitchParameter Reinstall { get; public set; }
    [ParameterAttribute]
public SwitchParameter Quiet { get; public set; }
    [ParameterAttribute]
public SwitchParameter AcceptLicense { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipDependencyCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter AuthenticodeCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public PSResourceInfo[] InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string RequiredResourceFile { get; public set; }
    [ParameterAttribute]
public object RequiredResource { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public ScopeType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ScopeType value);
    public string get_TemporaryPath();
    public void set_TemporaryPath(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_TrustRepository();
    [CompilerGeneratedAttribute]
public void set_TrustRepository(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Reinstall();
    [CompilerGeneratedAttribute]
public void set_Reinstall(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AcceptLicense();
    [CompilerGeneratedAttribute]
public void set_AcceptLicense(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoClobber();
    [CompilerGeneratedAttribute]
public void set_NoClobber(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipDependencyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependencyCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AuthenticodeCheck();
    [CompilerGeneratedAttribute]
public void set_AuthenticodeCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSResourceInfo[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSResourceInfo[] value);
    public string get_RequiredResourceFile();
    public void set_RequiredResourceFile(string value);
    public object get_RequiredResource();
    public void set_RequiredResource(object value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void RequiredResourceHelper(Hashtable reqResourceHash);
    private void ProcessInstallHelper(String[] pkgNames, string pkgVersion, bool pkgPrerelease, String[] pkgRepository, PSCredential pkgCredential, InstallPkgParams reqResourceParams);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.LocalResponseUtil : ResponseUtil {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    private string _fileTypeKey;
    internal PSRepositoryInfo Repository { get; internal set; }
    public LocalResponseUtil(PSRepositoryInfo repository);
    [CompilerGeneratedAttribute]
internal virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
internal virtual void set_Repository(PSRepositoryInfo value);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.LocalResponseUtil/<ConvertToPSResourceResult>d__6")]
public virtual IEnumerable`1<PSResourceResult> ConvertToPSResourceResult(FindResults responseResults);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.LocalServerAPICalls : ServerApiCall {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    private PSCmdlet _cmdletPassedIn;
    private FindResponseType _localServerFindResponseType;
    private string _fileTypeKey;
    public PSRepositoryInfo Repository { get; public set; }
    public LocalServerAPICalls(PSRepositoryInfo repository, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential);
    [CompilerGeneratedAttribute]
public virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public virtual void set_Repository(PSRepositoryInfo value);
    public virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType _type, ErrorRecord& errRecord);
    public virtual FindResults FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, ErrorRecord& errRecord);
    public virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
    private FindResults FindNameHelper(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    private FindResults FindNameGlobbingHelper(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    private FindResults FindVersionHelper(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    private FindResults FindTagsHelper(String[] tags, bool includePrerelease, ErrorRecord& errRecord);
    private Stream InstallName(string packageName, bool includePrerelease, ErrorRecord& errRecord);
    private Stream InstallVersion(string packageName, string version, ErrorRecord& errRecord);
    private Hashtable GetMetadataFromNupkg(string packageName, string packagePath, String[] requiredTags, ErrorRecord& errRecord);
    private Hashtable GetMatchingFilesGivenSpecificName(string packageName, bool includePrerelease, VersionRange versionRange, String& actualName, ErrorRecord& errRecord);
    private Hashtable GetMatchingFilesGivenNamePattern(string packageNameWithWildcard, bool includePrerelease);
    private NuGetVersion GetInfoFromFileName(string packageFullName, string packageName, String& actualName, ErrorRecord& errRecord);
    private XmlDocument LoadXmlDocument(string filePath, ErrorRecord& errRecord);
    private bool DeterminePkgTagsSatisfyRequiredTags(String[] pkgTags, String[] requiredTags);
    private Hashtable GetHashtableForNuspec(string filePath, ErrorRecord& errRecord);
    private void GetPrivateDataFromHashtable(Hashtable pkgMetadata, String& prereleaseLabel, Uri& licenseUri, Uri& projectUri, Uri& iconUri, String& releaseNotes, String[]& tags);
    private String[] GetCmdsOrDSCTags(String[] tags, bool isSearchingForCommands);
}
[CmdletAttribute("New", "PSScriptFileInfo")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.NewPSScriptFile : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <RequiredModules>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalModuleDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalScriptDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateData>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Author { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Guid Guid { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CompanyName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Copyright { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable[] RequiredModules { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] ExternalModuleDependencies { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] RequiredScripts { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] ExternalScriptDependencies { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public String[] Tags { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ProjectUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string LicenseUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string IconUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ReleaseNotes { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string PrivateData { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_RequiredModules();
    [CompilerGeneratedAttribute]
public void set_RequiredModules(Hashtable[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalModuleDependencies();
    [CompilerGeneratedAttribute]
public void set_ExternalModuleDependencies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RequiredScripts();
    [CompilerGeneratedAttribute]
public void set_RequiredScripts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalScriptDependencies();
    [CompilerGeneratedAttribute]
public void set_ExternalScriptDependencies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectUri();
    [CompilerGeneratedAttribute]
public void set_ProjectUri(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseUri();
    [CompilerGeneratedAttribute]
public void set_LicenseUri(string value);
    [CompilerGeneratedAttribute]
public string get_IconUri();
    [CompilerGeneratedAttribute]
public void set_IconUri(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateData();
    [CompilerGeneratedAttribute]
public void set_PrivateData(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.NuGetServerAPICalls : ServerApiCall {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    private PSCmdlet _cmdletPassedIn;
    [CompilerGeneratedAttribute]
private HttpClient <_sessionClient>k__BackingField;
    private static Hashtable[] emptyHashResponses;
    public FindResponseType FindResponseType;
    public PSRepositoryInfo Repository { get; public set; }
    private HttpClient _sessionClient { get; private set; }
    public NuGetServerAPICalls(PSRepositoryInfo repository, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential, string userAgentString);
    private static NuGetServerAPICalls();
    [CompilerGeneratedAttribute]
public virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public virtual void set_Repository(PSRepositoryInfo value);
    [CompilerGeneratedAttribute]
private HttpClient get__sessionClient();
    [CompilerGeneratedAttribute]
private void set__sessionClient(HttpClient value);
    public virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType _type, ErrorRecord& errRecord);
    public virtual FindResults FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, ErrorRecord& errRecord);
    public virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
    private string HttpRequestCall(string requestUrl, ErrorRecord& errRecord);
    private HttpContent HttpRequestCallForContent(string requestUrl, ErrorRecord& errRecord);
    private string FindAllFromEndPoint(bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindTagFromEndpoint(String[] tags, bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindNameGlobbing(string packageName, bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, int skip, bool getOnlyLatest, ErrorRecord& errRecord);
    private Stream InstallName(string packageName, ErrorRecord& errRecord);
    private Stream InstallVersion(string packageName, string version, ErrorRecord& errRecord);
    public int GetCountFromResponse(string httpResponse, ErrorRecord& errRecord);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.NuGetServerAPICalls/<SendRequestAsync>d__33")]
public static Task`1<string> SendRequestAsync(HttpRequestMessage message, HttpClient s_client);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.NuGetServerAPICalls/<SendRequestForContentAsync>d__34")]
public static Task`1<HttpContent> SendRequestForContentAsync(HttpRequestMessage message, HttpClient s_client);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.NuGetServerResponseUtil : ResponseUtil {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    internal PSRepositoryInfo Repository { get; internal set; }
    public NuGetServerResponseUtil(PSRepositoryInfo repository);
    [CompilerGeneratedAttribute]
internal virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
internal virtual void set_Repository(PSRepositoryInfo value);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.NuGetServerResponseUtil/<ConvertToPSResourceResult>d__5")]
public virtual IEnumerable`1<PSResourceResult> ConvertToPSResourceResult(FindResults responseResults);
    public XmlNode[] ConvertResponseToXML(string httpResponse);
}
[CmdletAttribute("Publish", "PSResource")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.PublishPSResource : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipDependenciesCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipModuleManifestValidate>k__BackingField;
    private string resolvedPath;
    private CancellationToken _cancellationToken;
    private NuGetVersion _pkgVersion;
    private string _pkgName;
    private static Char[] _PathSeparators;
    public static string PSDataFileExt;
    public static string PSScriptFileExt;
    private static string PSScriptInfoCommentString;
    private string pathToScriptFileToPublish;
    private string pathToModuleManifestToPublish;
    private string pathToModuleDirToPublish;
    private ResourceType resourceType;
    private NetworkCredential _networkCredential;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApiKey { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
public string Repository { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string DestinationPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipDependenciesCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipModuleManifestValidate { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
unknown Uri Proxy {public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
unknown PSCredential ProxyCredential {public set; }
    private static PublishPSResource();
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public string get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationPath();
    [CompilerGeneratedAttribute]
public void set_DestinationPath(string value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipDependenciesCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependenciesCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipModuleManifestValidate();
    [CompilerGeneratedAttribute]
public void set_SkipModuleManifestValidate(SwitchParameter value);
    public void set_Proxy(Uri value);
    public void set_ProxyCredential(PSCredential value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    private string CreateNuspec(string outputDir, string filePath, Hashtable parsedMetadataHash, Hashtable& requiredModules);
    private Hashtable ParseRequiredModules(Hashtable parsedMetadataHash);
    private bool CheckDependenciesExist(Hashtable dependencies, string repositoryName);
    private bool PackNupkg(string outputDir, string outputNupkgDir, string nuspecFile, ErrorRecord& error);
    private bool PushNupkg(string outputNupkgDir, string repoName, string repoUri, ErrorRecord& error);
    private void InjectCredentialsToSettings(ISettings settings, IPackageSourceProvider sourceProvider, string source);
}
[CmdletAttribute]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.RegisterPSResourceRepository : PSCmdlet {
    private string PSGalleryRepoName;
    private string PSGalleryRepoUri;
    private static int DefaultPriority;
    private static bool DefaultTrusted;
    private static string NameParameterSet;
    private static string PSGalleryParameterSet;
    private static string RepositoriesParameterSet;
    private Uri _uri;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PSGallery>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Trusted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private APIVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredentialInfo <CredentialInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Uri { get; public set; }
    [ParameterAttribute]
public SwitchParameter PSGallery { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable[] Repository { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Trusted { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Priority { get; public set; }
    [ParameterAttribute]
public APIVersion ApiVersion { get; public set; }
    [ParameterAttribute]
public PSCredentialInfo CredentialInfo { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PSGallery();
    [CompilerGeneratedAttribute]
public void set_PSGallery(SwitchParameter value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(Hashtable[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Trusted();
    [CompilerGeneratedAttribute]
public void set_Trusted(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public APIVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(APIVersion value);
    [CompilerGeneratedAttribute]
public PSCredentialInfo get_CredentialInfo();
    [CompilerGeneratedAttribute]
public void set_CredentialInfo(PSCredentialInfo value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private PSRepositoryInfo PSGalleryParameterSetHelper(int repoPriority, bool repoTrusted);
    private List`1<PSRepositoryInfo> RepositoriesParameterSetHelper();
    private PSRepositoryInfo RepoValidationHelper(Hashtable repo);
}
internal abstract class Microsoft.PowerShell.PSResourceGet.Cmdlets.ResponseUtil : object {
    internal PSRepositoryInfo Repository { get; internal set; }
    public ResponseUtil(PSRepositoryInfo repository);
    internal abstract virtual PSRepositoryInfo get_Repository();
    internal abstract virtual void set_Repository(PSRepositoryInfo value);
    public abstract virtual IEnumerable`1<PSResourceResult> ConvertToPSResourceResult(FindResults responseResults);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.ResponseUtilFactory : object {
    public static ResponseUtil GetResponseUtil(PSRepositoryInfo repository);
}
[CmdletAttribute]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.SavePSResource : PSCmdlet {
    private static string InputObjectParameterSet;
    private static string AsNupkgParameterSet;
    private static string IncludeXmlParameterSet;
    private InstallHelper _installHelper;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsNupkg>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IncludeXml>k__BackingField;
    private string _path;
    private string _tmpPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <TrustRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private PSResourceInfo[] <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipDependencyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AuthenticodeCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Quiet>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Prerelease { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Repository { get; public set; }
    [ParameterAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter AsNupkg { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IncludeXml { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TemporaryPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter TrustRepository { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSResourceInfo[] InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipDependencyCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter AuthenticodeCheck { get; public set; }
    public SwitchParameter Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsNupkg();
    [CompilerGeneratedAttribute]
public void set_AsNupkg(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeXml();
    [CompilerGeneratedAttribute]
public void set_IncludeXml(SwitchParameter value);
    public string get_Path();
    public void set_Path(string value);
    public string get_TemporaryPath();
    public void set_TemporaryPath(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_TrustRepository();
    [CompilerGeneratedAttribute]
public void set_TrustRepository(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSResourceInfo[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSResourceInfo[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipDependencyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependencyCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AuthenticodeCheck();
    [CompilerGeneratedAttribute]
public void set_AuthenticodeCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void ProcessSaveHelper(String[] pkgNames, string pkgVersion, bool pkgPrerelease, String[] pkgRepository);
}
internal abstract class Microsoft.PowerShell.PSResourceGet.Cmdlets.ServerApiCall : object {
    [CompilerGeneratedAttribute]
private HttpClient <_sessionClient>k__BackingField;
    public PSRepositoryInfo Repository { get; public set; }
    private HttpClient _sessionClient { get; private set; }
    public ServerApiCall(PSRepositoryInfo repository, NetworkCredential networkCredential);
    public abstract virtual PSRepositoryInfo get_Repository();
    public abstract virtual void set_Repository(PSRepositoryInfo value);
    [CompilerGeneratedAttribute]
private HttpClient get__sessionClient();
    [CompilerGeneratedAttribute]
private void set__sessionClient(HttpClient value);
    public abstract virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType _type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, ErrorRecord& errRecord);
    public abstract virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public abstract virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.ServerFactory : object {
    public static ServerApiCall GetServer(PSRepositoryInfo repository, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential);
}
[CmdletAttribute("Set", "PSResourceRepository")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.SetPSResourceRepository : PSCmdlet {
    private static string NameParameterSet;
    private static string RepositoriesParameterSet;
    private static int DefaultPriority;
    private Uri _uri;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <Repository>k__BackingField;
    private SwitchParameter _trusted;
    private bool isSet;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private APIVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredentialInfo <CredentialInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Uri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable[] Repository { get; public set; }
    [ParameterAttribute]
public SwitchParameter Trusted { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Priority { get; public set; }
    [ParameterAttribute]
public APIVersion ApiVersion { get; public set; }
    [ParameterAttribute]
public PSCredentialInfo CredentialInfo { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(Hashtable[] value);
    public SwitchParameter get_Trusted();
    public void set_Trusted(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public APIVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(APIVersion value);
    [CompilerGeneratedAttribute]
public PSCredentialInfo get_CredentialInfo();
    [CompilerGeneratedAttribute]
public void set_CredentialInfo(PSCredentialInfo value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private List`1<PSRepositoryInfo> RepositoriesParameterSetHelper();
    private PSRepositoryInfo RepoValidationHelper(Hashtable repo);
}
[CmdletAttribute("Test", "PSScriptFileInfo")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.TestPSScriptFileInfo : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Uninstall", "PSResource")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UninstallPSResource : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private PSResourceInfo[] <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipDependencyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Scope>k__BackingField;
    private static string NameParameterSet;
    private static string InputObjectParameterSet;
    public static string PSScriptFileExt;
    public static string OsPlatform;
    private VersionRange _versionRange;
    private List`1<string> _pathsToSearch;
    private Collection`1<PSModuleInfo> _dependentModules;
    private PowerShell _pwsh;
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
public SwitchParameter Prerelease { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSResourceInfo[] InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipDependencyCheck { get; public set; }
    [ParameterAttribute]
public ScopeType Scope { get; public set; }
    private static UninstallPSResource();
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSResourceInfo[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSResourceInfo[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipDependencyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependencyCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public ScopeType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ScopeType value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private bool UninstallPkgHelper(List`1& errRecords);
    private bool UninstallModuleHelper(string pkgPath, string pkgName, ErrorRecord& errRecord);
    private bool UninstallScriptHelper(string pkgPath, string pkgName, ErrorRecord& errRecord);
    private bool CheckIfDependency(string pkgName, string version, ErrorRecord& errorRecord);
}
[CmdletAttribute("Unregister", "PSResourceRepository")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UnregisterPSResourceRepository : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UnsafeAssemblyHandler : object {
    private static Assembly s_self;
    private static string s_dependencyFolder;
    private static HashSet`1<string> s_dependencies;
    private static AssemblyLoadContextProxy s_proxy;
    private static UnsafeAssemblyHandler();
    public sealed virtual void OnImport();
    public sealed virtual void OnRemove(PSModuleInfo psModuleInfo);
    private static bool IsAssemblyMatching(AssemblyName assemblyName, Assembly requestingAssembly);
    private static Assembly HandleAssemblyResolve(object sender, ResolveEventArgs args);
}
[CmdletAttribute("Update", "PSModuleManifest")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UpdateModuleManifest : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <NestedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootModule>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ModuleVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorArchitecture <ProcessorArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CompatiblePSEditions>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <PowerShellVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <DotNetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PowerShellHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <PowerShellHostVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <RequiredModules>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TypesToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FormatsToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ScriptsToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FileList>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ModuleList>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FunctionsToExport>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AliasesToExport>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VariablesToExport>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CmdletsToExport>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DscResourcesToExport>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HelpInfoUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultCommandPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalModuleDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable <PrivateData>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public Object[] NestedModules { get; public set; }
    [ParameterAttribute]
public Guid Guid { get; public set; }
    [ParameterAttribute]
public string Author { get; public set; }
    [ParameterAttribute]
public string CompanyName { get; public set; }
    [ParameterAttribute]
public string Copyright { get; public set; }
    [ParameterAttribute]
public string RootModule { get; public set; }
    [ParameterAttribute]
public Version ModuleVersion { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProcessorArchitecture ProcessorArchitecture { get; public set; }
    [ParameterAttribute]
public String[] CompatiblePSEditions { get; public set; }
    [ParameterAttribute]
public Version PowerShellVersion { get; public set; }
    [ParameterAttribute]
public Version ClrVersion { get; public set; }
    [ParameterAttribute]
public Version DotNetFrameworkVersion { get; public set; }
    [ParameterAttribute]
public string PowerShellHostName { get; public set; }
    [ParameterAttribute]
public Version PowerShellHostVersion { get; public set; }
    [ParameterAttribute]
public Object[] RequiredModules { get; public set; }
    [ParameterAttribute]
public String[] TypesToProcess { get; public set; }
    [ParameterAttribute]
public String[] FormatsToProcess { get; public set; }
    [ParameterAttribute]
public String[] ScriptsToProcess { get; public set; }
    [ParameterAttribute]
public String[] RequiredAssemblies { get; public set; }
    [ParameterAttribute]
public String[] FileList { get; public set; }
    [ParameterAttribute]
public Object[] ModuleList { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] FunctionsToExport { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] AliasesToExport { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] VariablesToExport { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] CmdletsToExport { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
public String[] DscResourcesToExport { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Tags { get; public set; }
    [ParameterAttribute]
public Uri ProjectUri { get; public set; }
    [ParameterAttribute]
public Uri LicenseUri { get; public set; }
    [ParameterAttribute]
public Uri IconUri { get; public set; }
    [ParameterAttribute]
public string ReleaseNotes { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Prerelease { get; public set; }
    [ParameterAttribute]
public Uri HelpInfoUri { get; public set; }
    [ParameterAttribute]
public string DefaultCommandPrefix { get; public set; }
    [ParameterAttribute]
public String[] ExternalModuleDependencies { get; public set; }
    [ParameterAttribute]
public SwitchParameter RequireLicenseAcceptance { get; public set; }
    [ParameterAttribute]
public Hashtable PrivateData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Object[] get_NestedModules();
    [CompilerGeneratedAttribute]
public void set_NestedModules(Object[] value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_RootModule();
    [CompilerGeneratedAttribute]
public void set_RootModule(string value);
    [CompilerGeneratedAttribute]
public Version get_ModuleVersion();
    [CompilerGeneratedAttribute]
public void set_ModuleVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ProcessorArchitecture get_ProcessorArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProcessorArchitecture(ProcessorArchitecture value);
    [CompilerGeneratedAttribute]
public String[] get_CompatiblePSEditions();
    [CompilerGeneratedAttribute]
public void set_CompatiblePSEditions(String[] value);
    [CompilerGeneratedAttribute]
public Version get_PowerShellVersion();
    [CompilerGeneratedAttribute]
public void set_PowerShellVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_ClrVersion();
    [CompilerGeneratedAttribute]
public void set_ClrVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_DotNetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_DotNetFrameworkVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_PowerShellHostName();
    [CompilerGeneratedAttribute]
public void set_PowerShellHostName(string value);
    [CompilerGeneratedAttribute]
public Version get_PowerShellHostVersion();
    [CompilerGeneratedAttribute]
public void set_PowerShellHostVersion(Version value);
    [CompilerGeneratedAttribute]
public Object[] get_RequiredModules();
    [CompilerGeneratedAttribute]
public void set_RequiredModules(Object[] value);
    [CompilerGeneratedAttribute]
public String[] get_TypesToProcess();
    [CompilerGeneratedAttribute]
public void set_TypesToProcess(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_FormatsToProcess();
    [CompilerGeneratedAttribute]
public void set_FormatsToProcess(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ScriptsToProcess();
    [CompilerGeneratedAttribute]
public void set_ScriptsToProcess(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RequiredAssemblies();
    [CompilerGeneratedAttribute]
public void set_RequiredAssemblies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_FileList();
    [CompilerGeneratedAttribute]
public void set_FileList(String[] value);
    [CompilerGeneratedAttribute]
public Object[] get_ModuleList();
    [CompilerGeneratedAttribute]
public void set_ModuleList(Object[] value);
    [CompilerGeneratedAttribute]
public String[] get_FunctionsToExport();
    [CompilerGeneratedAttribute]
public void set_FunctionsToExport(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AliasesToExport();
    [CompilerGeneratedAttribute]
public void set_AliasesToExport(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_VariablesToExport();
    [CompilerGeneratedAttribute]
public void set_VariablesToExport(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CmdletsToExport();
    [CompilerGeneratedAttribute]
public void set_CmdletsToExport(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DscResourcesToExport();
    [CompilerGeneratedAttribute]
public void set_DscResourcesToExport(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    [CompilerGeneratedAttribute]
public void set_ProjectUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUri();
    [CompilerGeneratedAttribute]
public void set_LicenseUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_IconUri();
    [CompilerGeneratedAttribute]
public void set_IconUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(string value);
    [CompilerGeneratedAttribute]
public Uri get_HelpInfoUri();
    [CompilerGeneratedAttribute]
public void set_HelpInfoUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_DefaultCommandPrefix();
    [CompilerGeneratedAttribute]
public void set_DefaultCommandPrefix(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalModuleDependencies();
    [CompilerGeneratedAttribute]
public void set_ExternalModuleDependencies(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(SwitchParameter value);
    [CompilerGeneratedAttribute]
public Hashtable get_PrivateData();
    [CompilerGeneratedAttribute]
public void set_PrivateData(Hashtable value);
    protected virtual void EndProcessing();
    private void CreateModuleManifestHelper(Hashtable parsedMetadata, string resolvedManifestPath, ErrorRecord& errorRecord);
    private void CreateModuleManifestForWinPSHelper(Hashtable parsedMetadata, string resolvedManifestPath, ErrorRecord& errorRecord);
    private string GetPrivateDataString(String[] tags, Uri licenseUri, Uri projectUri, Uri iconUri, string releaseNotes, string prerelease, Nullable`1<bool> requireLicenseAcceptance, String[] externalModuleDependencies);
    private bool TryCreateNewPsd1WithUpdatedPrivateData(string privateDataString, string tmpModuleManifestPath, string newTmpModuleManifestPath, ErrorRecord& errorRecord);
}
[CmdletAttribute("Update", "PSResource")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UpdatePSResource : PSCmdlet {
    private List`1<string> _pathsToInstallPkg;
    private CancellationTokenSource _cancellationTokenSource;
    private FindHelper _findHelper;
    private InstallHelper _installHelper;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Scope>k__BackingField;
    private string _tmpPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <TrustRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AcceptLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipDependencyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AuthenticodeCheck>k__BackingField;
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [ParameterAttribute]
public SwitchParameter Prerelease { get; public set; }
    [SupportsWildcardsAttribute]
[ParameterAttribute]
[ArgumentCompleterAttribute("RepositoryNameCompleter")]
[ValidateNotNullOrEmptyAttribute]
public String[] Repository { get; public set; }
    [ParameterAttribute]
public ScopeType Scope { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TemporaryPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter TrustRepository { get; public set; }
    [ParameterAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter Quiet { get; public set; }
    [ParameterAttribute]
public SwitchParameter AcceptLicense { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipDependencyCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter AuthenticodeCheck { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(String[] value);
    [CompilerGeneratedAttribute]
public ScopeType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ScopeType value);
    public string get_TemporaryPath();
    public void set_TemporaryPath(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_TrustRepository();
    [CompilerGeneratedAttribute]
public void set_TrustRepository(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AcceptLicense();
    [CompilerGeneratedAttribute]
public void set_AcceptLicense(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipDependencyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDependencyCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AuthenticodeCheck();
    [CompilerGeneratedAttribute]
public void set_AuthenticodeCheck(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    protected virtual void EndProcessing();
    private String[] ProcessPackageNames(String[] namesToProcess, VersionRange versionRange, NuGetVersion nuGetVersion, VersionType versionType, Boolean& latestInstalledIsPrerelease);
}
[CmdletAttribute("Update", "PSScriptFileInfo")]
public class Microsoft.PowerShell.PSResourceGet.Cmdlets.UpdatePSScriptFileInfo : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalModuleDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalScriptDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <RemoveSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <RequiredModules>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Author { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CompanyName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Copyright { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] ExternalModuleDependencies { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] ExternalScriptDependencies { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Guid Guid { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string IconUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string LicenseUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string PrivateData { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ProjectUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ReleaseNotes { get; public set; }
    [ParameterAttribute]
public SwitchParameter RemoveSignature { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable[] RequiredModules { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] RequiredScripts { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public String[] Tags { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalModuleDependencies();
    [CompilerGeneratedAttribute]
public void set_ExternalModuleDependencies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalScriptDependencies();
    [CompilerGeneratedAttribute]
public void set_ExternalScriptDependencies(String[] value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_IconUri();
    [CompilerGeneratedAttribute]
public void set_IconUri(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseUri();
    [CompilerGeneratedAttribute]
public void set_LicenseUri(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateData();
    [CompilerGeneratedAttribute]
public void set_PrivateData(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectUri();
    [CompilerGeneratedAttribute]
public void set_ProjectUri(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_RemoveSignature();
    [CompilerGeneratedAttribute]
public void set_RemoveSignature(SwitchParameter value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_RequiredModules();
    [CompilerGeneratedAttribute]
public void set_RequiredModules(Hashtable[] value);
    [CompilerGeneratedAttribute]
public String[] get_RequiredScripts();
    [CompilerGeneratedAttribute]
public void set_RequiredScripts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    protected virtual void EndProcessing();
}
internal static class Microsoft.PowerShell.PSResourceGet.Cmdlets.UserAgentInfo : object {
    private static string _psVersion;
    private static string _psResourceGetVersion;
    private static string _distributionChannel;
    private static UserAgentInfo();
    internal static string UserAgentString();
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.V2ResponseUtil : ResponseUtil {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    internal PSRepositoryInfo Repository { get; internal set; }
    public V2ResponseUtil(PSRepositoryInfo repository);
    [CompilerGeneratedAttribute]
internal virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
internal virtual void set_Repository(PSRepositoryInfo value);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V2ResponseUtil/<ConvertToPSResourceResult>d__5")]
public virtual IEnumerable`1<PSResourceResult> ConvertToPSResourceResult(FindResults responseResults);
    public XmlNode[] ConvertResponseToXML(string httpResponse);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.V2ServerAPICalls : ServerApiCall {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    private PSCmdlet _cmdletPassedIn;
    [CompilerGeneratedAttribute]
private HttpClient <_sessionClient>k__BackingField;
    private static Hashtable[] emptyHashResponses;
    public FindResponseType v2FindResponseType;
    private bool _isADORepo;
    private bool _isJFrogRepo;
    private bool _isPSGalleryRepo;
    public PSRepositoryInfo Repository { get; public set; }
    private HttpClient _sessionClient { get; private set; }
    public V2ServerAPICalls(PSRepositoryInfo repository, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential, string userAgentString);
    private static V2ServerAPICalls();
    [CompilerGeneratedAttribute]
public virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public virtual void set_Repository(PSRepositoryInfo value);
    [CompilerGeneratedAttribute]
private HttpClient get__sessionClient();
    [CompilerGeneratedAttribute]
private void set__sessionClient(HttpClient value);
    public virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType _type, ErrorRecord& errRecord);
    public virtual FindResults FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, ErrorRecord& errRecord);
    public virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
    private string HttpRequestCall(string requestUrlV2, ErrorRecord& errRecord);
    private HttpContent HttpRequestCallForContent(string requestUrlV2, ErrorRecord& errRecord);
    private string FindAllFromTypeEndPoint(bool includePrerelease, bool isSearchingModule, int skip, ErrorRecord& errRecord);
    private string FindTagFromEndpoint(String[] tags, bool includePrerelease, bool isSearchingModule, int skip, ErrorRecord& errRecord);
    private string FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, int skip, ErrorRecord& errRecord);
    private string FindNameGlobbing(string packageName, ResourceType type, bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindNameGlobbingWithTag(string packageName, String[] tags, ResourceType type, bool includePrerelease, int skip, ErrorRecord& errRecord);
    private string FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, int skip, bool getOnlyLatest, ErrorRecord& errRecord);
    private Stream InstallName(string packageName, ErrorRecord& errRecord);
    private Stream InstallVersion(string packageName, string version, ErrorRecord& errRecord);
    private string GetTypeFilterForRequest(ResourceType type);
    public int GetCountFromResponse(string httpResponse, ErrorRecord& errRecord);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V2ServerAPICalls/<SendV2RequestAsync>d__38")]
public static Task`1<string> SendV2RequestAsync(HttpRequestMessage message, HttpClient s_client);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V2ServerAPICalls/<SendV2RequestForContentAsync>d__39")]
public static Task`1<HttpContent> SendV2RequestForContentAsync(HttpRequestMessage message, HttpClient s_client);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.V3ResponseUtil : ResponseUtil {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    internal PSRepositoryInfo Repository { get; internal set; }
    public V3ResponseUtil(PSRepositoryInfo repository);
    [CompilerGeneratedAttribute]
internal virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
internal virtual void set_Repository(PSRepositoryInfo value);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V3ResponseUtil/<ConvertToPSResourceResult>d__5")]
public virtual IEnumerable`1<PSResourceResult> ConvertToPSResourceResult(FindResults responseResults);
}
internal class Microsoft.PowerShell.PSResourceGet.Cmdlets.V3ServerAPICalls : ServerApiCall {
    [CompilerGeneratedAttribute]
private PSRepositoryInfo <Repository>k__BackingField;
    private PSCmdlet _cmdletPassedIn;
    [CompilerGeneratedAttribute]
private HttpClient <_sessionClient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isNuGetRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isJFrogRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isGHPkgsRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isMyGetRepo>k__BackingField;
    public FindResponseType v3FindResponseType;
    private static Hashtable[] emptyHashResponses;
    private static string nugetRepoUri;
    private static string resourcesName;
    private static string itemsName;
    private static string versionName;
    private static string dataName;
    private static string idName;
    private static string idLinkName;
    private static string tagsName;
    private static string catalogEntryProperty;
    private static string packageContentProperty;
    private int myGetTotalHitsBuffer;
    public PSRepositoryInfo Repository { get; public set; }
    private HttpClient _sessionClient { get; private set; }
    private bool _isNuGetRepo { get; private set; }
    private bool _isJFrogRepo { get; private set; }
    private bool _isGHPkgsRepo { get; private set; }
    private bool _isMyGetRepo { get; private set; }
    public V3ServerAPICalls(PSRepositoryInfo repository, PSCmdlet cmdletPassedIn, NetworkCredential networkCredential, string userAgentString);
    private static V3ServerAPICalls();
    [CompilerGeneratedAttribute]
public virtual PSRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public virtual void set_Repository(PSRepositoryInfo value);
    [CompilerGeneratedAttribute]
private HttpClient get__sessionClient();
    [CompilerGeneratedAttribute]
private void set__sessionClient(HttpClient value);
    [CompilerGeneratedAttribute]
private bool get__isNuGetRepo();
    [CompilerGeneratedAttribute]
private void set__isNuGetRepo(bool value);
    [CompilerGeneratedAttribute]
private bool get__isJFrogRepo();
    [CompilerGeneratedAttribute]
private void set__isJFrogRepo(bool value);
    [CompilerGeneratedAttribute]
private bool get__isGHPkgsRepo();
    [CompilerGeneratedAttribute]
private void set__isGHPkgsRepo(bool value);
    [CompilerGeneratedAttribute]
private bool get__isMyGetRepo();
    [CompilerGeneratedAttribute]
private void set__isMyGetRepo(bool value);
    public virtual FindResults FindAll(bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindTags(String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindCommandOrDscResource(String[] tags, bool includePrerelease, bool isSearchingForCommands, ErrorRecord& errRecord);
    public virtual FindResults FindName(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbing(string packageName, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindNameGlobbingWithTag(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionGlobbing(string packageName, VersionRange versionRange, bool includePrerelease, ResourceType type, bool getOnlyLatest, ErrorRecord& errRecord);
    public virtual FindResults FindVersion(string packageName, string version, ResourceType type, ErrorRecord& errRecord);
    public virtual FindResults FindVersionWithTag(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    public virtual Stream InstallPackage(string packageName, string packageVersion, bool includePrerelease, ErrorRecord& errRecord);
    private FindResults FindNameGlobbingFromNuGetRepo(string packageName, String[] tags, bool includePrerelease, ErrorRecord& errRecord);
    private FindResults FindTagsFromNuGetRepo(String[] tags, bool includePrerelease, ErrorRecord& errRecord);
    private FindResults FindNameHelper(string packageName, String[] tags, bool includePrerelease, ResourceType type, ErrorRecord& errRecord);
    private FindResults FindVersionHelper(string packageName, string version, String[] tags, ResourceType type, ErrorRecord& errRecord);
    private Stream InstallName(string packageName, ErrorRecord& errRecord);
    private Stream InstallVersion(string packageName, string version, ErrorRecord& errRecord);
    private Stream InstallHelper(string packageName, NuGetVersion version, ErrorRecord& errRecord);
    private String[] GetVersionedPackageEntriesFromRegistrationsResource(string packageName, string propertyName, bool isSearch, ErrorRecord& errRecord);
    private List`1<JsonElement> GetVersionedPackageEntriesFromSearchQueryResource(string queryTerm, bool includePrerelease, ErrorRecord& errRecord);
    private Dictionary`2<string, string> GetResourcesFromServiceIndex(ErrorRecord& errRecord);
    private string FindRegistrationsBaseUrl(Dictionary`2<string, string> resources, ErrorRecord& errRecord);
    private string FindSearchQueryService(Dictionary`2<string, string> resources, ErrorRecord& errRecord);
    private JsonElement[] GetMetadataElementFromIdLinkElement(JsonElement idLinkElement, string packageName, String& upperVersion, ErrorRecord& errRecord);
    private JsonElement[] GetMetadataElementFromItemsElement(JsonElement itemsElement, string packageName, ErrorRecord& errRecord);
    private String[] GetMetadataElementsFromResponse(string response, string property, string packageName, String& upperVersion, ErrorRecord& errRecord);
    private String[] GetVersionedResponsesFromRegistrationsResource(string registrationsBaseUrl, string packageName, string property, bool isSearch, ErrorRecord& errRecord);
    private bool IsLatestVersionFirstForSearch(String[] versionedResponses, ErrorRecord& errRecord);
    private bool IsLatestVersionFirstForInstall(String[] versionedResponses, string upperVersion, ErrorRecord& errRecord);
    private bool IsRequiredTagSatisfied(JsonElement tagsElement, String[] tags, ErrorRecord& errRecord);
    private JsonElement[] GetJsonElementArr(string request, string propertyName, Int32& totalHits, ErrorRecord& errRecord);
    private string HttpRequestCall(string requestUrlV3, ErrorRecord& errRecord);
    private HttpContent HttpRequestCallForContent(string requestUrlV3, ErrorRecord& errRecord);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V3ServerAPICalls/<SendV3RequestAsync>d__72")]
private static Task`1<string> SendV3RequestAsync(HttpRequestMessage message, HttpClient s_client);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.PSResourceGet.Cmdlets.V3ServerAPICalls/<SendV3RequestForContentAsync>d__73")]
private static Task`1<HttpContent> SendV3RequestForContentAsync(HttpRequestMessage message, HttpClient s_client);
}
internal static class Microsoft.PowerShell.PSResourceGet.UtilClasses.AuthenticodeSignature : object {
    internal static bool CheckAuthenticodeSignature(string pkgName, string tempDirNameVersion, PSCmdlet cmdletPassedIn, ErrorRecord& errorRecord);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.ConvertToPSResourceException : Exception {
    public ConvertToPSResourceException(string message, Exception innerException);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Name { get; }
    public VersionRange VersionRange { get; }
    public Dependency(string dependencyName, VersionRange dependencyVersionRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
}
public enum Microsoft.PowerShell.PSResourceGet.UtilClasses.FindResponseType : Enum {
    public int value__;
    public static FindResponseType None;
    public static FindResponseType ResponseString;
    public static FindResponseType ResponseHashtable;
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.FindResults : object {
    [CompilerGeneratedAttribute]
private String[] <StringResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <HashtableResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private FindResponseType <ResponseType>k__BackingField;
    public String[] StringResponse { get; private set; }
    public Hashtable[] HashtableResponse { get; private set; }
    public FindResponseType ResponseType { get; public set; }
    public FindResults(String[] stringResponse, Hashtable[] hashtableResponse, FindResponseType responseType);
    [CompilerGeneratedAttribute]
public String[] get_StringResponse();
    [CompilerGeneratedAttribute]
private void set_StringResponse(String[] value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_HashtableResponse();
    [CompilerGeneratedAttribute]
private void set_HashtableResponse(Hashtable[] value);
    [CompilerGeneratedAttribute]
public FindResponseType get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(FindResponseType value);
    public bool IsFindResultsEmpty();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.InternalHooks : object {
    internal static bool InvokedFromCompat;
    public static void SetTestHook(string property, object value);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.InvalidOrEmptyResponse : Exception {
    public InvalidOrEmptyResponse(string message, Exception innerException);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.JsonParsingException : Exception {
    public JsonParsingException(string message, Exception innerException);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.LocalResourceEmpty : Exception {
    public LocalResourceEmpty(string message, Exception innerException);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.LocalResourceNotFoundException : Exception {
    public LocalResourceNotFoundException(string message, Exception innerException);
}
internal static class Microsoft.PowerShell.PSResourceGet.UtilClasses.PowerShellInvoker : object {
    private static bool _isHostDefault;
    private static string DefaultHost;
    private static Runspace _runspace;
    public static Collection`1<PSObject> InvokeScriptWithHost(PSCmdlet cmdlet, string script, Object[] args, Exception& terminatingError);
    public static Collection`1<T> InvokeScriptWithHost(PSCmdlet cmdlet, string script, Object[] args, Exception& terminatingError);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCommandResourceInfo : object {
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private PSResourceInfo <ParentResource>k__BackingField;
    public String[] Names { get; }
    public PSResourceInfo ParentResource { get; }
    public PSCommandResourceInfo(String[] names, PSResourceInfo parentResource);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    [CompilerGeneratedAttribute]
public PSResourceInfo get_ParentResource();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo : object {
    private string _vaultName;
    private string _secretName;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    internal static string VaultNameAttribute;
    internal static string SecretNameAttribute;
    internal static string CredentialAttribute;
    public string VaultName { get; private set; }
    public string SecretName { get; private set; }
    public PSCredential Credential { get; private set; }
    public PSCredentialInfo(string vaultName, string secretName, PSCredential credential);
    public PSCredentialInfo(Hashtable hashtable);
    public PSCredentialInfo(PSObject psObject);
    private static PSCredentialInfo();
    public string get_VaultName();
    private void set_VaultName(string value);
    public string get_SecretName();
    private void set_SecretName(string value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
private void set_Credential(PSCredential value);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSRepositoryInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trusted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredentialInfo <CredentialInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private APIVersion <ApiVersion>k__BackingField;
    public string Name { get; }
    public Uri Uri { get; }
    public bool Trusted { get; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Priority { get; }
    public PSCredentialInfo CredentialInfo { get; }
    public APIVersion ApiVersion { get; }
    public PSRepositoryInfo(string name, Uri uri, int priority, bool trusted, PSCredentialInfo credentialInfo, APIVersion apiVersion);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public bool get_Trusted();
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public PSCredentialInfo get_CredentialInfo();
    [CompilerGeneratedAttribute]
public APIVersion get_ApiVersion();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSResourceInfo : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private Dependency[] <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceIncludes <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InstalledDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PowerShellGetFormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <PublishedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositorySourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <UpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    private static Char[] Delimeter;
    public Dictionary`2<string, string> AdditionalMetadata { get; }
    public string Author { get; public set; }
    public string CompanyName { get; public set; }
    public string Copyright { get; public set; }
    public Dependency[] Dependencies { get; public set; }
    public string Description { get; public set; }
    public Uri IconUri { get; public set; }
    public ResourceIncludes Includes { get; }
    public Nullable`1<DateTime> InstalledDate { get; public set; }
    public string InstalledLocation { get; public set; }
    public bool IsPrerelease { get; public set; }
    public Uri LicenseUri { get; public set; }
    public string Name { get; public set; }
    private string PowerShellGetFormatVersion { get; }
    public string Prerelease { get; }
    public Uri ProjectUri { get; public set; }
    public Nullable`1<DateTime> PublishedDate { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Repository { get; public set; }
    public string RepositorySourceLocation { get; public set; }
    public String[] Tags { get; public set; }
    public ResourceType Type { get; }
    public Nullable`1<DateTime> UpdatedDate { get; }
    public Version Version { get; }
    private PSResourceInfo(Dictionary`2<string, string> additionalMetadata, string author, string companyName, string copyright, Dependency[] dependencies, string description, Uri iconUri, ResourceIncludes includes, Nullable`1<DateTime> installedDate, string installedLocation, bool isPrerelease, Uri licenseUri, string name, string powershellGetFormatVersion, string prerelease, Uri projectUri, Nullable`1<DateTime> publishedDate, string releaseNotes, string repository, string repositorySourceLocation, String[] tags, ResourceType type, Nullable`1<DateTime> updatedDate, Version version);
    private static PSResourceInfo();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalMetadata();
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public Dependency[] get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(Dependency[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Uri get_IconUri();
    [CompilerGeneratedAttribute]
public void set_IconUri(Uri value);
    [CompilerGeneratedAttribute]
public ResourceIncludes get_Includes();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InstalledDate();
    [CompilerGeneratedAttribute]
public void set_InstalledDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_InstalledLocation();
    [CompilerGeneratedAttribute]
public void set_InstalledLocation(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrerelease();
    [CompilerGeneratedAttribute]
public void set_IsPrerelease(bool value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUri();
    [CompilerGeneratedAttribute]
public void set_LicenseUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
private string get_PowerShellGetFormatVersion();
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    [CompilerGeneratedAttribute]
public void set_ProjectUri(Uri value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_PublishedDate();
    [CompilerGeneratedAttribute]
public void set_PublishedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public string get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(string value);
    [CompilerGeneratedAttribute]
public string get_RepositorySourceLocation();
    [CompilerGeneratedAttribute]
public void set_RepositorySourceLocation(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public ResourceType get_Type();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_UpdatedDate();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public bool TryWrite(string filePath, String& errorMsg);
    public static bool TryRead(string filePath, PSResourceInfo& psGetInfo, String& errorMsg);
    private static string GetStringProperty(string name, PSObject psObjectInfo);
    private static Version GetVersionInfo(PSObject psObjectInfo, Dictionary`2<string, string> additionalMetadata, String& prerelease);
    public static bool TryConvertFromXml(XmlNode entry, PSResourceInfo& psGetInfo, PSRepositoryInfo repository, String& errorMsg);
    public static bool TryConvertFromJson(JsonDocument pkgJson, PSResourceInfo& psGetInfo, PSRepositoryInfo repository, String& errorMsg);
    public static bool TryConvertFromHashtableForPsd1(Hashtable pkgMetadata, PSResourceInfo& psGetInfo, String& errorMsg, PSRepositoryInfo repository);
    public static bool TryConvertFromHashtableForPs1(Hashtable pkgMetadata, PSResourceInfo& psGetInfo, String& errorMsg, PSRepositoryInfo repository);
    public static bool TryConvertFromHashtableForNuspec(Hashtable pkgMetadata, PSResourceInfo& psGetInfo, String& errorMsg, PSRepositoryInfo repository);
    private static T ConvertToType(PSObject psObject);
    private static T GetProperty(string Name, PSObject psObjectInfo);
    private static Dependency[] GetDependencies(ArrayList dependencyInfos);
    private static string ConcatenateVersionWithPrerelease(string version, string prerelease);
    private static Version ParseHttpVersion(string versionString, String& prereleaseLabel);
    public static Uri ParseHttpUrl(string uriString);
    public static Nullable`1<DateTime> ParseHttpDateTime(string publishedString);
    public static Dependency[] ParseHttpDependencies(string dependencyString);
    private static ResourceType ParseHttpMetadataType(String[] tags, ArrayList& commandNames, ArrayList& cmdletNames, ArrayList& dscResourceNames);
    private static ResourceType ParseHttpMetadataTypeForLocalRepo(Hashtable pkgMetadata, ArrayList& commandNames, ArrayList& cmdletNames, ArrayList& dscResourceNames);
    private PSObject ConvertToCustomObject();
    private static Dependency[] GetDependenciesForPs1(ModuleSpecification[] requiredModules);
    private static Dependency[] GetDependenciesForPsd1(Hashtable[] requiredModules);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSResourceResult : object {
    [CompilerGeneratedAttribute]
private PSResourceInfo <returnedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCommandResourceInfo <returnedCmdObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isTerminatingError>k__BackingField;
    internal PSResourceInfo returnedObject { get; internal set; }
    internal PSCommandResourceInfo returnedCmdObject { get; internal set; }
    internal Exception exception { get; internal set; }
    internal bool isTerminatingError { get; internal set; }
    public PSResourceResult(PSResourceInfo returnedObject, Exception exception, bool isTerminatingError);
    public PSResourceResult(PSCommandResourceInfo returnedCmdObject, Exception exception, bool isTerminatingError);
    [CompilerGeneratedAttribute]
internal PSResourceInfo get_returnedObject();
    [CompilerGeneratedAttribute]
internal void set_returnedObject(PSResourceInfo value);
    [CompilerGeneratedAttribute]
internal PSCommandResourceInfo get_returnedCmdObject();
    [CompilerGeneratedAttribute]
internal void set_returnedCmdObject(PSCommandResourceInfo value);
    [CompilerGeneratedAttribute]
internal Exception get_exception();
    [CompilerGeneratedAttribute]
internal void set_exception(Exception value);
    [CompilerGeneratedAttribute]
internal bool get_isTerminatingError();
    [CompilerGeneratedAttribute]
internal void set_isTerminatingError(bool value);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSScriptContents : object {
    [CompilerGeneratedAttribute]
private String[] <ScriptContents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsSignature>k__BackingField;
    private static string signatureStartString;
    private int _signatureStartIndex;
    public String[] ScriptContents { get; private set; }
    public bool ContainsSignature { get; public set; }
    public PSScriptContents(String[] endOfFileContents);
    [CompilerGeneratedAttribute]
public String[] get_ScriptContents();
    [CompilerGeneratedAttribute]
private void set_ScriptContents(String[] value);
    [CompilerGeneratedAttribute]
public bool get_ContainsSignature();
    [CompilerGeneratedAttribute]
public void set_ContainsSignature(bool value);
    internal void ParseContent(String[] commentLines);
    internal String[] EmitContent();
    private bool CheckForSignature();
    private void RemoveSignatureString();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSScriptFileInfo : object {
    [CompilerGeneratedAttribute]
private PSScriptMetadata <ScriptMetadataComment>k__BackingField;
    [CompilerGeneratedAttribute]
private PSScriptHelp <ScriptHelpComment>k__BackingField;
    [CompilerGeneratedAttribute]
private PSScriptRequires <ScriptRequiresComment>k__BackingField;
    [CompilerGeneratedAttribute]
private PSScriptContents <ScriptContent>k__BackingField;
    public PSScriptMetadata ScriptMetadataComment { get; public set; }
    public PSScriptHelp ScriptHelpComment { get; public set; }
    public PSScriptRequires ScriptRequiresComment { get; public set; }
    public PSScriptContents ScriptContent { get; public set; }
    public PSScriptFileInfo(string version, Guid guid, string author, string companyName, string copyright, String[] tags, Uri licenseUri, Uri projectUri, Uri iconUri, ModuleSpecification[] requiredModules, String[] externalModuleDependencies, String[] requiredScripts, String[] externalScriptDependencies, string releaseNotes, string privateData, string description);
    public PSScriptFileInfo(PSScriptMetadata scriptMetadataComment, PSScriptHelp scriptHelpComment, PSScriptRequires scriptRequiresComment, PSScriptContents scriptRemainingContent);
    [CompilerGeneratedAttribute]
public PSScriptMetadata get_ScriptMetadataComment();
    [CompilerGeneratedAttribute]
public void set_ScriptMetadataComment(PSScriptMetadata value);
    [CompilerGeneratedAttribute]
public PSScriptHelp get_ScriptHelpComment();
    [CompilerGeneratedAttribute]
public void set_ScriptHelpComment(PSScriptHelp value);
    [CompilerGeneratedAttribute]
public PSScriptRequires get_ScriptRequiresComment();
    [CompilerGeneratedAttribute]
public void set_ScriptRequiresComment(PSScriptRequires value);
    [CompilerGeneratedAttribute]
public PSScriptContents get_ScriptContent();
    [CompilerGeneratedAttribute]
public void set_ScriptContent(PSScriptContents value);
    internal static bool TryParseScriptFileContents(string scriptFileInfoPath, List`1& psScriptInfoCommentContent, List`1& helpInfoCommentContent, List`1& requiresCommentContent, String[]& remainingFileContent, ErrorRecord& error);
    internal static bool TryPopulateScriptClassesWithParsedContent(List`1<string> psScriptInfoCommentContent, List`1<string> helpInfoCommentContent, List`1<string> requiresCommentContent, String[] remainingFileContent, PSScriptMetadata& currentMetadata, PSScriptHelp& currentHelpInfo, PSScriptRequires& currentRequiresComment, PSScriptContents& currentEndOfFileContents, ErrorRecord[]& errors, String[]& verboseMsgs);
    internal static bool TryTestPSScriptFileInfo(string scriptFileInfoPath, PSScriptFileInfo& parsedScript, ErrorRecord[]& errors, String[]& verboseMsgs);
    internal static bool TryUpdateScriptFileContents(PSScriptFileInfo scriptInfo, String[]& updatedPSScriptFileContents, ErrorRecord[]& errors, string version, Guid guid, string author, string companyName, string copyright, String[] tags, Uri licenseUri, Uri projectUri, Uri iconUri, ModuleSpecification[] requiredModules, String[] externalModuleDependencies, String[] requiredScripts, String[] externalScriptDependencies, string releaseNotes, string privateData, string description);
    internal bool TryCreateScriptFileInfoString(String[]& psScriptFileContents, ErrorRecord[]& errors);
    internal Hashtable ToHashtable();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSScriptHelp : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <HelpContent>k__BackingField;
    public string Description { get; private set; }
    public List`1<string> HelpContent { get; private set; }
    public PSScriptHelp(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_HelpContent();
    [CompilerGeneratedAttribute]
private void set_HelpContent(List`1<string> value);
    internal bool ParseContentIntoObj(String[] commentLines, ErrorRecord& error);
    public static Hashtable ParseHelpContentHelper(String[] commentLines);
    internal bool ValidateParsedContent(Hashtable parsedHelpMetadata, ErrorRecord& error);
    internal bool ValidateContent(ErrorRecord& error);
    internal String[] EmitContent();
    internal bool UpdateContent(string description, ErrorRecord& error);
    private bool StringContainsComment(string stringToValidate);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSScriptMetadata : object {
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalModuleDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExternalScriptDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateData>k__BackingField;
    public NuGetVersion Version { get; private set; }
    public Guid Guid { get; private set; }
    public string Author { get; private set; }
    public string CompanyName { get; private set; }
    public string Copyright { get; private set; }
    public String[] Tags { get; private set; }
    public Uri LicenseUri { get; private set; }
    public Uri ProjectUri { get; private set; }
    public Uri IconUri { get; private set; }
    public String[] ExternalModuleDependencies { get; private set; }
    public String[] RequiredScripts { get; private set; }
    public String[] ExternalScriptDependencies { get; private set; }
    public string ReleaseNotes { get; private set; }
    public string PrivateData { get; private set; }
    public PSScriptMetadata(string version, Guid guid, string author, string companyName, string copyright, String[] tags, Uri licenseUri, Uri projectUri, Uri iconUri, String[] externalModuleDependencies, String[] requiredScripts, String[] externalScriptDependencies, string releaseNotes, string privateData);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(NuGetVersion value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
private void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
private void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUri();
    [CompilerGeneratedAttribute]
private void set_LicenseUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    [CompilerGeneratedAttribute]
private void set_ProjectUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_IconUri();
    [CompilerGeneratedAttribute]
private void set_IconUri(Uri value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalModuleDependencies();
    [CompilerGeneratedAttribute]
private void set_ExternalModuleDependencies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RequiredScripts();
    [CompilerGeneratedAttribute]
private void set_RequiredScripts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExternalScriptDependencies();
    [CompilerGeneratedAttribute]
private void set_ExternalScriptDependencies(String[] value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
private void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateData();
    [CompilerGeneratedAttribute]
private void set_PrivateData(string value);
    internal bool ParseContentIntoObj(String[] commentLines, ErrorRecord[]& errors, String[]& msgs);
    public static Hashtable ParseMetadataContentHelper(String[] commentLines, ErrorRecord[]& errors);
    internal bool ValidateParsedContent(Hashtable parsedMetadata, ErrorRecord[]& errors);
    internal bool ValidateContent(ErrorRecord[]& errors);
    internal String[] EmitContent();
    internal bool UpdateContent(string version, Guid guid, string author, string companyName, string copyright, String[] tags, Uri licenseUri, Uri projectUri, Uri iconUri, String[] externalModuleDependencies, String[] requiredScripts, String[] externalScriptDependencies, string releaseNotes, string privateData, ErrorRecord& error);
    internal Hashtable ToHashtable();
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.PSScriptRequires : object {
    [CompilerGeneratedAttribute]
private ModuleSpecification[] <RequiredModules>k__BackingField;
    public ModuleSpecification[] RequiredModules { get; private set; }
    public PSScriptRequires(ModuleSpecification[] requiredModules);
    [CompilerGeneratedAttribute]
public ModuleSpecification[] get_RequiredModules();
    [CompilerGeneratedAttribute]
private void set_RequiredModules(ModuleSpecification[] value);
    internal bool ParseContentIntoObj(String[] commentLines, ErrorRecord[]& errors);
    internal String[] EmitContent();
    internal void UpdateContent(ModuleSpecification[] requiredModules);
}
internal static class Microsoft.PowerShell.PSResourceGet.UtilClasses.RepositorySettings : object {
    private static string PSGalleryRepoName;
    private static string PSGalleryRepoUri;
    private static int DefaultPriority;
    private static bool DefaultTrusted;
    private static string RepositoryFileName;
    private static string RepositoryPath;
    private static string FullRepositoryPath;
    private static XmlReaderSettings XDocReaderSettings;
    private static RepositorySettings();
    public static void CheckRepositoryStore();
    public static PSRepositoryInfo AddRepository(string repoName, Uri repoUri, int repoPriority, bool repoTrusted, Nullable`1<APIVersion> apiVersion, PSCredentialInfo repoCredentialInfo, bool force, PSCmdlet cmdletPassedIn, String& errorMsg);
    public static PSRepositoryInfo AddToRepositoryStore(string repoName, Uri repoUri, int repoPriority, bool repoTrusted, Nullable`1<APIVersion> apiVersion, PSCredentialInfo repoCredentialInfo, bool force, PSCmdlet cmdletPassedIn, String& errorMsg);
    public static PSRepositoryInfo UpdateRepositoryStore(string repoName, Uri repoUri, int repoPriority, bool repoTrusted, bool isSet, int defaultPriority, Nullable`1<APIVersion> apiVersion, PSCredentialInfo repoCredentialInfo, PSCmdlet cmdletPassedIn, String& errorMsg);
    public static PSRepositoryInfo Add(string repoName, Uri repoUri, int repoPriority, bool repoTrusted, PSCredentialInfo repoCredentialInfo, APIVersion apiVersion, bool force);
    public static PSRepositoryInfo Update(string repoName, Uri repoUri, int repoPriority, Nullable`1<bool> repoTrusted, Nullable`1<APIVersion> apiVersion, PSCredentialInfo repoCredentialInfo, PSCmdlet cmdletPassedIn, String& errorMsg);
    public static List`1<PSRepositoryInfo> Remove(String[] repoNames, String[]& errorList);
    public static List`1<PSRepositoryInfo> Read(String[] repoNames, String[]& errorList);
    private static XElement FindRepositoryElement(XDocument doc, string name);
    private static XDocument LoadXDocument(string filePath);
    private static APIVersion GetRepoAPIVersion(Uri repoUri);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.ResourceIncludes : object {
    [CompilerGeneratedAttribute]
private String[] <Cmdlet>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DscResource>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RoleCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Workflow>k__BackingField;
    public String[] Cmdlet { get; }
    public String[] Command { get; }
    public String[] DscResource { get; }
    public String[] Function { get; }
    public String[] RoleCapability { get; }
    public String[] Workflow { get; }
    internal ResourceIncludes(Hashtable includes);
    [CompilerGeneratedAttribute]
public String[] get_Cmdlet();
    [CompilerGeneratedAttribute]
public String[] get_Command();
    [CompilerGeneratedAttribute]
public String[] get_DscResource();
    [CompilerGeneratedAttribute]
public String[] get_Function();
    [CompilerGeneratedAttribute]
public String[] get_RoleCapability();
    [CompilerGeneratedAttribute]
public String[] get_Workflow();
    public Hashtable ConvertToHashtable();
    private String[] GetHashTableItem(Hashtable table, string name);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.ResourceNotFoundException : Exception {
    public ResourceNotFoundException(string message, Exception innerException);
}
public enum Microsoft.PowerShell.PSResourceGet.UtilClasses.ResourceType : Enum {
    public int value__;
    public static ResourceType None;
    public static ResourceType Module;
    public static ResourceType Script;
}
public enum Microsoft.PowerShell.PSResourceGet.UtilClasses.ScopeType : Enum {
    public int value__;
    public static ScopeType CurrentUser;
    public static ScopeType AllUsers;
}
public static class Microsoft.PowerShell.PSResourceGet.UtilClasses.TestHooks : object {
    public static PSObject ReadPSGetResourceInfo(string filePath);
    public static void WritePSGetResourceInfo(string filePath, PSObject psObjectGetInfo);
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.UnauthorizedException : Exception {
    public UnauthorizedException(string message, Exception innerException);
}
internal static class Microsoft.PowerShell.PSResourceGet.UtilClasses.Utils : object {
    public static String[] EmptyStrArray;
    public static Char[] WhitespaceSeparator;
    public static string PSDataFileExt;
    private static string ConvertJsonToHashtableScript;
    private static string s_tempHome;
    private static Version PSVersion6;
    private static String[] ManifestFileVariables;
    private static Utils();
    public static string TrimQuotes(string name);
    public static string QuoteName(string name);
    public static String[] GetStringArrayFromString(String[] delimeter, string stringToConvertToArray);
    public static String[] GetStringArray(ArrayList list);
    public static String[] ProcessNameWildcards(String[] pkgNames, bool removeWildcardEntries, String[]& errorMsgs, Boolean& isContainWildcard);
    public static string FormatRequestsExceptions(Exception exception, HttpRequestMessage request);
    public static string FormatCredentialRequestExceptions(Exception exception);
    public static bool TryGetVersionType(string version, NuGetVersion& nugetVersion, VersionRange& versionRange, VersionType& versionType, String& error);
    public static string GetNormalizedVersionString(string versionString, string prerelease);
    public static bool TryParseVersionOrVersionRange(string version, VersionRange& versionRange);
    public static bool GetVersionForInstallPath(string installedPkgPath, bool isModule, PSCmdlet cmdletPassedIn, NuGetVersion& pkgNuGetVersion);
    public static bool TryCreateValidUri(string uriString, PSCmdlet cmdletPassedIn, Uri& uriResult, ErrorRecord& errorRecord);
    public static bool TryCreateValidPSCredentialInfo(PSObject credentialInfoCandidate, PSCmdlet cmdletPassedIn, PSCredentialInfo& repoCredentialInfo, ErrorRecord& errorRecord);
    public static PSCredential GetRepositoryCredentialFromSecretManagement(string repositoryName, PSCredentialInfo repositoryCredentialInfo, PSCmdlet cmdletPassedIn);
    public static void SaveRepositoryCredentialToSecretManagementVault(string repositoryName, PSCredentialInfo repositoryCredentialInfo, PSCmdlet cmdletPassedIn);
    public static bool IsSecretManagementModuleAvailable(string repositoryName, PSCmdlet cmdletPassedIn);
    public static bool IsSecretManagementVaultAccessible(string repositoryName, PSCredentialInfo repositoryCredentialInfo, PSCmdlet cmdletPassedIn);
    public static NetworkCredential SetNetworkCredential(PSRepositoryInfo repository, NetworkCredential networkCredential, PSCmdlet cmdletPassedIn);
    public static String[] GetSubDirectories(string dirPath);
    public static String[] GetDirectoryFiles(string dirPath);
    public static string GetInstalledPackageName(string pkgPath);
    public static List`1<string> GetPathsFromEnvVarAndScope(PSCmdlet psCmdlet, Nullable`1<ScopeType> scope);
    public static List`1<string> GetAllResourcePaths(PSCmdlet psCmdlet, Nullable`1<ScopeType> scope);
    public static List`1<string> GetAllInstallationPaths(PSCmdlet psCmdlet, Nullable`1<ScopeType> scope);
    private static string GetHomeOrCreateTempHome();
    private static void GetStandardPlatformPaths(PSCmdlet psCmdlet, String& localUserDir, String& allUsersDir);
    public static bool GetIsWindowsPowerShell(PSCmdlet psCmdlet);
    internal static HashSet`1<string> GetInstalledPackages(List`1<string> pathsToSearch, PSCmdlet cmdletPassedIn);
    public static bool TryReadManifestFile(string manifestFilePath, Hashtable& manifestInfo, Exception& error);
    public static bool TryReadRequiredResourceFile(string resourceFilePath, Hashtable& resourceInfo, Exception& error);
    private static bool TryReadPSDataFile(string filePath, String[] allowedVariables, String[] allowedCommands, bool allowEnvironmentVariables, Hashtable& dataFileInfo, Exception& error);
    public static bool ValidateModuleManifest(string moduleManifestPath, String& errorMsg);
    public static void WriteVerboseOnCmdlet(PSCmdlet cmdlet, string message);
    public static Hashtable ConvertJsonToHashtable(PSCmdlet cmdlet, string json);
    public static bool TryCreateModuleSpecification(Hashtable[] moduleSpecHashtables, ModuleSpecification[]& validatedModuleSpecs, ErrorRecord[]& errors);
    public static void DeleteDirectoryWithRestore(string dirPath);
    public static void DeleteDirectory(string dirPath);
    public static void MoveFiles(string sourceFilePath, string destFilePath, bool overwrite);
    public static void MoveDirectory(string sourceDirPath, string destDirPath, bool overwrite);
    private static void CopyDirContents(string sourceDirPath, string destDirPath, bool overwrite);
    private static void RestoreDirContents(string sourceDirPath, string destDirPath);
}
public enum Microsoft.PowerShell.PSResourceGet.UtilClasses.VersionType : Enum {
    public int value__;
    public static VersionType NoVersion;
    public static VersionType SpecificVersion;
    public static VersionType VersionRange;
}
public class Microsoft.PowerShell.PSResourceGet.UtilClasses.XmlParsingException : Exception {
    public XmlParsingException(string message, Exception innerException);
}
internal class RepositoryNameCompleter : object {
    [IteratorStateMachineAttribute("RepositoryNameCompleter/<CompleteArgument>d__0")]
public sealed virtual IEnumerable`1<CompletionResult> CompleteArgument(string commandName, string parameterName, string wordToComplete, CommandAst commandAst, IDictionary fakeBoundParameters);
}
