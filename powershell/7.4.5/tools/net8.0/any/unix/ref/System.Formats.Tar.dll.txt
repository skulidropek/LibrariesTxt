[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.GnuTarEntry : PosixTarEntry {
    public DateTimeOffset AccessTime { get; public set; }
    public DateTimeOffset ChangeTime { get; public set; }
    public GnuTarEntry(TarEntry other);
    public GnuTarEntry(TarEntryType entryType, string entryName);
    public DateTimeOffset get_AccessTime();
    public void set_AccessTime(DateTimeOffset value);
    public DateTimeOffset get_ChangeTime();
    public void set_ChangeTime(DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.PaxGlobalExtendedAttributesTarEntry : PosixTarEntry {
    public IReadOnlyDictionary`2<string, string> GlobalExtendedAttributes { get; }
    public PaxGlobalExtendedAttributesTarEntry(IEnumerable`1<KeyValuePair`2<string, string>> globalExtendedAttributes);
    public IReadOnlyDictionary`2<string, string> get_GlobalExtendedAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.PaxTarEntry : PosixTarEntry {
    public IReadOnlyDictionary`2<string, string> ExtendedAttributes { get; }
    public PaxTarEntry(TarEntry other);
    public PaxTarEntry(TarEntryType entryType, string entryName);
    public PaxTarEntry(TarEntryType entryType, string entryName, IEnumerable`1<KeyValuePair`2<string, string>> extendedAttributes);
    public IReadOnlyDictionary`2<string, string> get_ExtendedAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Formats.Tar.PosixTarEntry : TarEntry {
    public int DeviceMajor { get; public set; }
    public int DeviceMinor { get; public set; }
    public string GroupName { get; public set; }
    public string UserName { get; public set; }
    public int get_DeviceMajor();
    public void set_DeviceMajor(int value);
    public int get_DeviceMinor();
    public void set_DeviceMinor(int value);
    public string get_GroupName();
    public void set_GroupName(string value);
    public string get_UserName();
    public void set_UserName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Formats.Tar.TarEntry : object {
    public int Checksum { get; }
    [NullableAttribute("2")]
public Stream DataStream { get; public set; }
    public TarEntryType EntryType { get; }
    public TarEntryFormat Format { get; }
    public int Gid { get; public set; }
    public long Length { get; }
    public string LinkName { get; public set; }
    public UnixFileMode Mode { get; public set; }
    public DateTimeOffset ModificationTime { get; public set; }
    public string Name { get; public set; }
    public int Uid { get; public set; }
    public int get_Checksum();
    [NullableContextAttribute("2")]
public Stream get_DataStream();
    [NullableContextAttribute("2")]
public void set_DataStream(Stream value);
    public TarEntryType get_EntryType();
    public TarEntryFormat get_Format();
    public int get_Gid();
    public void set_Gid(int value);
    public long get_Length();
    public string get_LinkName();
    public void set_LinkName(string value);
    public UnixFileMode get_Mode();
    public void set_Mode(UnixFileMode value);
    public DateTimeOffset get_ModificationTime();
    public void set_ModificationTime(DateTimeOffset value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Uid();
    public void set_Uid(int value);
    public void ExtractToFile(string destinationFileName, bool overwrite);
    public Task ExtractToFileAsync(string destinationFileName, bool overwrite, CancellationToken cancellationToken);
    public virtual string ToString();
}
public enum System.Formats.Tar.TarEntryFormat : Enum {
    public int value__;
    public static TarEntryFormat Unknown;
    public static TarEntryFormat V7;
    public static TarEntryFormat Ustar;
    public static TarEntryFormat Pax;
    public static TarEntryFormat Gnu;
}
public enum System.Formats.Tar.TarEntryType : Enum {
    public byte value__;
    public static TarEntryType V7RegularFile;
    public static TarEntryType RegularFile;
    public static TarEntryType HardLink;
    public static TarEntryType SymbolicLink;
    public static TarEntryType CharacterDevice;
    public static TarEntryType BlockDevice;
    public static TarEntryType Directory;
    public static TarEntryType Fifo;
    public static TarEntryType ContiguousFile;
    public static TarEntryType DirectoryList;
    public static TarEntryType LongLink;
    public static TarEntryType LongPath;
    public static TarEntryType MultiVolume;
    public static TarEntryType RenamedOrSymlinked;
    public static TarEntryType SparseFile;
    public static TarEntryType TapeVolume;
    public static TarEntryType GlobalExtendedAttributes;
    public static TarEntryType ExtendedAttributes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Formats.Tar.TarFile : object {
    public static void CreateFromDirectory(string sourceDirectoryName, Stream destination, bool includeBaseDirectory);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory);
    public static Task CreateFromDirectoryAsync(string sourceDirectoryName, Stream destination, bool includeBaseDirectory, CancellationToken cancellationToken);
    public static Task CreateFromDirectoryAsync(string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory, CancellationToken cancellationToken);
    public static void ExtractToDirectory(Stream source, string destinationDirectoryName, bool overwriteFiles);
    public static void ExtractToDirectory(string sourceFileName, string destinationDirectoryName, bool overwriteFiles);
    public static Task ExtractToDirectoryAsync(Stream source, string destinationDirectoryName, bool overwriteFiles, CancellationToken cancellationToken);
    public static Task ExtractToDirectoryAsync(string sourceFileName, string destinationDirectoryName, bool overwriteFiles, CancellationToken cancellationToken);
}
public class System.Formats.Tar.TarReader : object {
    [NullableContextAttribute("1")]
public TarReader(Stream archiveStream, bool leaveOpen);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
public TarEntry GetNextEntry(bool copyData);
    public ValueTask`1<TarEntry> GetNextEntryAsync(bool copyData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.TarWriter : object {
    public TarEntryFormat Format { get; }
    public TarWriter(Stream archiveStream);
    public TarWriter(Stream archiveStream, bool leaveOpen);
    public TarWriter(Stream archiveStream, TarEntryFormat format, bool leaveOpen);
    public TarEntryFormat get_Format();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    public void WriteEntry(TarEntry entry);
    public void WriteEntry(string fileName, string entryName);
    public Task WriteEntryAsync(TarEntry entry, CancellationToken cancellationToken);
    public Task WriteEntryAsync(string fileName, string entryName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.UstarTarEntry : PosixTarEntry {
    public UstarTarEntry(TarEntry other);
    public UstarTarEntry(TarEntryType entryType, string entryName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Formats.Tar.V7TarEntry : TarEntry {
    public V7TarEntry(TarEntry other);
    public V7TarEntry(TarEntryType entryType, string entryName);
}
