[FlagsAttribute]
public enum System.Net.AuthenticationSchemes : Enum {
    public int value__;
    public static AuthenticationSchemes None;
    public static AuthenticationSchemes Digest;
    public static AuthenticationSchemes Negotiate;
    public static AuthenticationSchemes Ntlm;
    public static AuthenticationSchemes IntegratedWindowsAuthentication;
    public static AuthenticationSchemes Basic;
    public static AuthenticationSchemes Anonymous;
}
public enum System.Net.Cache.RequestCacheLevel : Enum {
    public int value__;
    public static RequestCacheLevel Default;
    public static RequestCacheLevel BypassCache;
    public static RequestCacheLevel CacheOnly;
    public static RequestCacheLevel CacheIfAvailable;
    public static RequestCacheLevel Revalidate;
    public static RequestCacheLevel Reload;
    public static RequestCacheLevel NoCacheNoStore;
}
public class System.Net.Cache.RequestCachePolicy : object {
    public RequestCacheLevel Level { get; }
    public RequestCachePolicy(RequestCacheLevel level);
    public RequestCacheLevel get_Level();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Cookie : object {
    public string Comment { get; public set; }
    [NullableAttribute("2")]
public Uri CommentUri { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; }
    public string Value { get; public set; }
    public int Version { get; public set; }
    public Cookie(string name, string value);
    [NullableContextAttribute("2")]
public Cookie(string name, string value, string path);
    [NullableContextAttribute("2")]
public Cookie(string name, string value, string path, string domain);
    public string get_Comment();
    public void set_Comment(string value);
    [NullableContextAttribute("2")]
public Uri get_CommentUri();
    [NullableContextAttribute("2")]
public void set_CommentUri(Uri value);
    public bool get_Discard();
    public void set_Discard(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_Expired();
    public void set_Expired(bool value);
    public DateTime get_Expires();
    public void set_Expires(DateTime value);
    public bool get_HttpOnly();
    public void set_HttpOnly(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_Port();
    public void set_Port(string value);
    public bool get_Secure();
    public void set_Secure(bool value);
    public DateTime get_TimeStamp();
    public string get_Value();
    public void set_Value(string value);
    public int get_Version();
    public void set_Version(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.CookieCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Cookie Item { get; }
    [NullableAttribute("2")]
public Cookie Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public Cookie get_Item(int index);
    public Cookie get_Item(string name);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void Add(Cookie cookie);
    public void Add(CookieCollection cookies);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Cookie cookie);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void CopyTo(Cookie[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool Remove(Cookie cookie);
    private sealed virtual override IEnumerator`1<Cookie> System.Collections.Generic.IEnumerable<System.Net.Cookie>.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.CookieContainer : object {
    public static int DefaultCookieLengthLimit;
    public static int DefaultCookieLimit;
    public static int DefaultPerDomainCookieLimit;
    public int Capacity { get; public set; }
    public int Count { get; }
    public int MaxCookieSize { get; public set; }
    public int PerDomainCapacity { get; public set; }
    public CookieContainer(int capacity);
    public CookieContainer(int capacity, int perDomainCapacity, int maxCookieSize);
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public int get_MaxCookieSize();
    public void set_MaxCookieSize(int value);
    public int get_PerDomainCapacity();
    public void set_PerDomainCapacity(int value);
    public void Add(Cookie cookie);
    public void Add(CookieCollection cookies);
    public void Add(Uri uri, Cookie cookie);
    public void Add(Uri uri, CookieCollection cookies);
    public CookieCollection GetAllCookies();
    public string GetCookieHeader(Uri uri);
    public CookieCollection GetCookies(Uri uri);
    public void SetCookies(Uri uri, string cookieHeader);
}
public class System.Net.CookieException : FormatException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected CookieException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.CredentialCache : object {
    public static ICredentials DefaultCredentials { get; }
    public static NetworkCredential DefaultNetworkCredentials { get; }
    public static ICredentials get_DefaultCredentials();
    public static NetworkCredential get_DefaultNetworkCredentials();
    public void Add(string host, int port, string authenticationType, NetworkCredential credential);
    public void Add(Uri uriPrefix, string authType, NetworkCredential cred);
    public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(Uri uriPrefix, string authType);
    public sealed virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("2")]
public void Remove(string host, int port, string authenticationType);
    [NullableContextAttribute("2")]
public void Remove(Uri uriPrefix, string authType);
}
[FlagsAttribute]
public enum System.Net.DecompressionMethods : Enum {
    public int value__;
    public static DecompressionMethods All;
    public static DecompressionMethods None;
    public static DecompressionMethods GZip;
    public static DecompressionMethods Deflate;
    public static DecompressionMethods Brotli;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.DnsEndPoint : EndPoint {
    public AddressFamily AddressFamily { get; }
    public string Host { get; }
    public int Port { get; }
    public DnsEndPoint(string host, int port);
    public DnsEndPoint(string host, int port, AddressFamily addressFamily);
    public virtual AddressFamily get_AddressFamily();
    public string get_Host();
    public int get_Port();
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.EndPoint : object {
    public AddressFamily AddressFamily { get; }
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
}
public enum System.Net.HttpStatusCode : Enum {
    public int value__;
    public static HttpStatusCode Continue;
    public static HttpStatusCode SwitchingProtocols;
    public static HttpStatusCode Processing;
    public static HttpStatusCode EarlyHints;
    public static HttpStatusCode OK;
    public static HttpStatusCode Created;
    public static HttpStatusCode Accepted;
    public static HttpStatusCode NonAuthoritativeInformation;
    public static HttpStatusCode NoContent;
    public static HttpStatusCode ResetContent;
    public static HttpStatusCode PartialContent;
    public static HttpStatusCode MultiStatus;
    public static HttpStatusCode AlreadyReported;
    public static HttpStatusCode IMUsed;
    public static HttpStatusCode Ambiguous;
    public static HttpStatusCode MultipleChoices;
    public static HttpStatusCode Moved;
    public static HttpStatusCode MovedPermanently;
    public static HttpStatusCode Found;
    public static HttpStatusCode Redirect;
    public static HttpStatusCode RedirectMethod;
    public static HttpStatusCode SeeOther;
    public static HttpStatusCode NotModified;
    public static HttpStatusCode UseProxy;
    public static HttpStatusCode Unused;
    public static HttpStatusCode RedirectKeepVerb;
    public static HttpStatusCode TemporaryRedirect;
    public static HttpStatusCode PermanentRedirect;
    public static HttpStatusCode BadRequest;
    public static HttpStatusCode Unauthorized;
    public static HttpStatusCode PaymentRequired;
    public static HttpStatusCode Forbidden;
    public static HttpStatusCode NotFound;
    public static HttpStatusCode MethodNotAllowed;
    public static HttpStatusCode NotAcceptable;
    public static HttpStatusCode ProxyAuthenticationRequired;
    public static HttpStatusCode RequestTimeout;
    public static HttpStatusCode Conflict;
    public static HttpStatusCode Gone;
    public static HttpStatusCode LengthRequired;
    public static HttpStatusCode PreconditionFailed;
    public static HttpStatusCode RequestEntityTooLarge;
    public static HttpStatusCode RequestUriTooLong;
    public static HttpStatusCode UnsupportedMediaType;
    public static HttpStatusCode RequestedRangeNotSatisfiable;
    public static HttpStatusCode ExpectationFailed;
    public static HttpStatusCode MisdirectedRequest;
    public static HttpStatusCode UnprocessableEntity;
    public static HttpStatusCode UnprocessableContent;
    public static HttpStatusCode Locked;
    public static HttpStatusCode FailedDependency;
    public static HttpStatusCode UpgradeRequired;
    public static HttpStatusCode PreconditionRequired;
    public static HttpStatusCode TooManyRequests;
    public static HttpStatusCode RequestHeaderFieldsTooLarge;
    public static HttpStatusCode UnavailableForLegalReasons;
    public static HttpStatusCode InternalServerError;
    public static HttpStatusCode NotImplemented;
    public static HttpStatusCode BadGateway;
    public static HttpStatusCode ServiceUnavailable;
    public static HttpStatusCode GatewayTimeout;
    public static HttpStatusCode HttpVersionNotSupported;
    public static HttpStatusCode VariantAlsoNegotiates;
    public static HttpStatusCode InsufficientStorage;
    public static HttpStatusCode LoopDetected;
    public static HttpStatusCode NotExtended;
    public static HttpStatusCode NetworkAuthenticationRequired;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Net.HttpVersion : object {
    public static Version Unknown;
    public static Version Version10;
    public static Version Version11;
    public static Version Version20;
    public static Version Version30;
}
[NullableContextAttribute("1")]
public interface System.Net.ICredentials {
    public abstract virtual NetworkCredential GetCredential(Uri uri, string authType);
}
[NullableContextAttribute("1")]
public interface System.Net.ICredentialsByHost {
    public abstract virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.IPAddress : object {
    public static IPAddress Any;
    public static IPAddress Broadcast;
    public static IPAddress IPv6Any;
    public static IPAddress IPv6Loopback;
    public static IPAddress IPv6None;
    public static IPAddress Loopback;
    public static IPAddress None;
    [ObsoleteAttribute("IPAddress.Address is address family dependent and has been deprecated. Use IPAddress.Equals to perform comparisons instead.")]
public long Address { get; public set; }
    public AddressFamily AddressFamily { get; }
    public bool IsIPv4MappedToIPv6 { get; }
    public bool IsIPv6LinkLocal { get; }
    public bool IsIPv6Multicast { get; }
    public bool IsIPv6SiteLocal { get; }
    public bool IsIPv6Teredo { get; }
    public bool IsIPv6UniqueLocal { get; }
    public long ScopeId { get; public set; }
    public IPAddress(Byte[] address);
    public IPAddress(Byte[] address, long scopeid);
    public IPAddress(long newAddress);
    [NullableContextAttribute("0")]
public IPAddress(ReadOnlySpan`1<byte> address);
    [NullableContextAttribute("0")]
public IPAddress(ReadOnlySpan`1<byte> address, long scopeid);
    public long get_Address();
    public void set_Address(long value);
    public AddressFamily get_AddressFamily();
    public bool get_IsIPv4MappedToIPv6();
    public bool get_IsIPv6LinkLocal();
    public bool get_IsIPv6Multicast();
    public bool get_IsIPv6SiteLocal();
    public bool get_IsIPv6Teredo();
    public bool get_IsIPv6UniqueLocal();
    public long get_ScopeId();
    public void set_ScopeId(long value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public Byte[] GetAddressBytes();
    public virtual int GetHashCode();
    public static short HostToNetworkOrder(short host);
    public static int HostToNetworkOrder(int host);
    public static long HostToNetworkOrder(long host);
    public static bool IsLoopback(IPAddress address);
    public IPAddress MapToIPv4();
    public IPAddress MapToIPv6();
    public static short NetworkToHostOrder(short network);
    public static int NetworkToHostOrder(int network);
    public static long NetworkToHostOrder(long network);
    [NullableContextAttribute("0")]
public static IPAddress Parse(ReadOnlySpan`1<char> ipSpan);
    public static IPAddress Parse(string ipString);
    private static override IPAddress System.ISpanParsable<System.Net.IPAddress>.Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    private static override IPAddress System.IParsable<System.Net.IPAddress>.Parse(string s, IFormatProvider provider);
    public virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("0")]
public bool TryFormat(Span`1<char> destination, Int32& charsWritten);
    [NullableContextAttribute("0")]
public bool TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    private sealed virtual override bool System.IUtf8SpanFormattable.TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("0")]
public static bool TryParse(ReadOnlySpan`1<char> ipSpan, IPAddress& address);
    [NullableContextAttribute("2")]
public static bool TryParse(string ipString, IPAddress& address);
    private static override bool System.ISpanParsable<System.Net.IPAddress>.TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, IPAddress& result);
    private static override bool System.IParsable<System.Net.IPAddress>.TryParse(string s, IFormatProvider provider, IPAddress& result);
    [NullableContextAttribute("0")]
public bool TryWriteBytes(Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.IPEndPoint : EndPoint {
    public static int MaxPort;
    public static int MinPort;
    public IPAddress Address { get; public set; }
    public AddressFamily AddressFamily { get; }
    public int Port { get; public set; }
    public IPEndPoint(long address, int port);
    public IPEndPoint(IPAddress address, int port);
    public IPAddress get_Address();
    public void set_Address(IPAddress value);
    public virtual AddressFamily get_AddressFamily();
    public int get_Port();
    public void set_Port(int value);
    public virtual EndPoint Create(SocketAddress socketAddress);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    [NullableContextAttribute("0")]
public static IPEndPoint Parse(ReadOnlySpan`1<char> s);
    public static IPEndPoint Parse(string s);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    [NullableContextAttribute("0")]
public static bool TryParse(ReadOnlySpan`1<char> s, IPEndPoint& result);
    public static bool TryParse(string s, IPEndPoint& result);
}
[IsReadOnlyAttribute]
public class System.Net.IPNetwork : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableAttribute("1")]
public IPAddress BaseAddress { get; }
    public int PrefixLength { get; }
    [NullableContextAttribute("1")]
public IPNetwork(IPAddress baseAddress, int prefixLength);
    [NullableContextAttribute("1")]
public IPAddress get_BaseAddress();
    public int get_PrefixLength();
    [NullableContextAttribute("1")]
public bool Contains(IPAddress address);
    public sealed virtual bool Equals(IPNetwork other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(IPNetwork left, IPNetwork right);
    public static bool op_Inequality(IPNetwork left, IPNetwork right);
    public static IPNetwork Parse(ReadOnlySpan`1<char> s);
    [NullableContextAttribute("1")]
public static IPNetwork Parse(string s);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
    private static override IPNetwork System.IParsable<System.Net.IPNetwork>.Parse(string s, IFormatProvider provider);
    private static override bool System.IParsable<System.Net.IPNetwork>.TryParse(string s, IFormatProvider provider, IPNetwork& result);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    private sealed virtual override bool System.IUtf8SpanFormattable.TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    private static override IPNetwork System.ISpanParsable<System.Net.IPNetwork>.Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    private static override bool System.ISpanParsable<System.Net.IPNetwork>.TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, IPNetwork& result);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public bool TryFormat(Span`1<char> destination, Int32& charsWritten);
    public bool TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten);
    public static bool TryParse(ReadOnlySpan`1<char> s, IPNetwork& result);
    [NullableContextAttribute("2")]
public static bool TryParse(string s, IPNetwork& result);
}
[NullableContextAttribute("2")]
public interface System.Net.IWebProxy {
    public ICredentials Credentials { get; public set; }
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    [NullableContextAttribute("1")]
public abstract virtual Uri GetProxy(Uri destination);
    [NullableContextAttribute("1")]
public abstract virtual bool IsBypassed(Uri host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkCredential : object {
    public string Domain { get; public set; }
    public string Password { get; public set; }
    [CLSCompliantAttribute("False")]
public SecureString SecurePassword { get; public set; }
    public string UserName { get; public set; }
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public NetworkCredential(string userName, SecureString password);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public NetworkCredential(string userName, SecureString password, string domain);
    [NullableContextAttribute("2")]
public NetworkCredential(string userName, string password);
    [NullableContextAttribute("2")]
public NetworkCredential(string userName, string password, string domain);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Password();
    public void set_Password(string value);
    public SecureString get_SecurePassword();
    public void set_SecurePassword(SecureString value);
    public string get_UserName();
    public void set_UserName(string value);
    [NullableContextAttribute("2")]
public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
    [NullableContextAttribute("2")]
public sealed virtual NetworkCredential GetCredential(Uri uri, string authenticationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddress Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IPAddress get_Item(int index);
    public virtual void Add(IPAddress address);
    public virtual void Clear();
    public virtual bool Contains(IPAddress address);
    public virtual void CopyTo(IPAddress[] array, int offset);
    public virtual IEnumerator`1<IPAddress> GetEnumerator();
    public virtual bool Remove(IPAddress address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Net.Security.AuthenticationLevel : Enum {
    public int value__;
    public static AuthenticationLevel None;
    public static AuthenticationLevel MutualAuthRequested;
    public static AuthenticationLevel MutualAuthRequired;
}
[FlagsAttribute]
public enum System.Net.Security.SslPolicyErrors : Enum {
    public int value__;
    public static SslPolicyErrors None;
    public static SslPolicyErrors RemoteCertificateNotAvailable;
    public static SslPolicyErrors RemoteCertificateNameMismatch;
    public static SslPolicyErrors RemoteCertificateChainErrors;
}
[DefaultMemberAttribute("Item")]
public class System.Net.SocketAddress : object {
    public AddressFamily Family { get; }
    public byte Item { get; public set; }
    public int Size { get; public set; }
    public Memory`1<byte> Buffer { get; }
    public SocketAddress(AddressFamily family);
    public SocketAddress(AddressFamily family, int size);
    public AddressFamily get_Family();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    public int get_Size();
    public void set_Size(int value);
    public static int GetMaximumAddressSize(AddressFamily addressFamily);
    public Memory`1<byte> get_Buffer();
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SocketAddress comparand);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum System.Net.Sockets.AddressFamily : Enum {
    public int value__;
    public static AddressFamily Unknown;
    public static AddressFamily Unspecified;
    public static AddressFamily Unix;
    public static AddressFamily InterNetwork;
    public static AddressFamily ImpLink;
    public static AddressFamily Pup;
    public static AddressFamily Chaos;
    public static AddressFamily Ipx;
    public static AddressFamily NS;
    public static AddressFamily Iso;
    public static AddressFamily Osi;
    public static AddressFamily Ecma;
    public static AddressFamily DataKit;
    public static AddressFamily Ccitt;
    public static AddressFamily Sna;
    public static AddressFamily DecNet;
    public static AddressFamily DataLink;
    public static AddressFamily Lat;
    public static AddressFamily HyperChannel;
    public static AddressFamily AppleTalk;
    public static AddressFamily NetBios;
    public static AddressFamily VoiceView;
    public static AddressFamily FireFox;
    public static AddressFamily Banyan;
    public static AddressFamily Atm;
    public static AddressFamily InterNetworkV6;
    public static AddressFamily Cluster;
    public static AddressFamily Ieee12844;
    public static AddressFamily Irda;
    public static AddressFamily NetworkDesigners;
    public static AddressFamily Max;
    public static AddressFamily Packet;
    public static AddressFamily ControllerAreaNetwork;
}
public enum System.Net.Sockets.SocketError : Enum {
    public int value__;
    public static SocketError SocketError;
    public static SocketError Success;
    public static SocketError OperationAborted;
    public static SocketError IOPending;
    public static SocketError Interrupted;
    public static SocketError AccessDenied;
    public static SocketError Fault;
    public static SocketError InvalidArgument;
    public static SocketError TooManyOpenSockets;
    public static SocketError WouldBlock;
    public static SocketError InProgress;
    public static SocketError AlreadyInProgress;
    public static SocketError NotSocket;
    public static SocketError DestinationAddressRequired;
    public static SocketError MessageSize;
    public static SocketError ProtocolType;
    public static SocketError ProtocolOption;
    public static SocketError ProtocolNotSupported;
    public static SocketError SocketNotSupported;
    public static SocketError OperationNotSupported;
    public static SocketError ProtocolFamilyNotSupported;
    public static SocketError AddressFamilyNotSupported;
    public static SocketError AddressAlreadyInUse;
    public static SocketError AddressNotAvailable;
    public static SocketError NetworkDown;
    public static SocketError NetworkUnreachable;
    public static SocketError NetworkReset;
    public static SocketError ConnectionAborted;
    public static SocketError ConnectionReset;
    public static SocketError NoBufferSpaceAvailable;
    public static SocketError IsConnected;
    public static SocketError NotConnected;
    public static SocketError Shutdown;
    public static SocketError TimedOut;
    public static SocketError ConnectionRefused;
    public static SocketError HostDown;
    public static SocketError HostUnreachable;
    public static SocketError ProcessLimit;
    public static SocketError SystemNotReady;
    public static SocketError VersionNotSupported;
    public static SocketError NotInitialized;
    public static SocketError Disconnecting;
    public static SocketError TypeNotFound;
    public static SocketError HostNotFound;
    public static SocketError TryAgain;
    public static SocketError NoRecovery;
    public static SocketError NoData;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.SocketException : Win32Exception {
    public int ErrorCode { get; }
    public string Message { get; }
    public SocketError SocketErrorCode { get; }
    public SocketException(int errorCode);
    [NullableContextAttribute("2")]
public SocketException(int errorCode, string message);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SocketException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual int get_ErrorCode();
    public virtual string get_Message();
    public SocketError get_SocketErrorCode();
}
public abstract class System.Net.TransportContext : object {
    [NullableContextAttribute("2")]
public abstract virtual ChannelBinding GetChannelBinding(ChannelBindingKind kind);
}
public enum System.Security.Authentication.CipherAlgorithmType : Enum {
    public int value__;
    public static CipherAlgorithmType None;
    public static CipherAlgorithmType Null;
    public static CipherAlgorithmType Des;
    public static CipherAlgorithmType Rc2;
    public static CipherAlgorithmType TripleDes;
    public static CipherAlgorithmType Aes128;
    public static CipherAlgorithmType Aes192;
    public static CipherAlgorithmType Aes256;
    public static CipherAlgorithmType Aes;
    public static CipherAlgorithmType Rc4;
}
public enum System.Security.Authentication.ExchangeAlgorithmType : Enum {
    public int value__;
    public static ExchangeAlgorithmType None;
    public static ExchangeAlgorithmType RsaSign;
    public static ExchangeAlgorithmType RsaKeyX;
    public static ExchangeAlgorithmType DiffieHellman;
}
public abstract class System.Security.Authentication.ExtendedProtection.ChannelBinding : SafeHandleZeroOrMinusOneIsInvalid {
    public int Size { get; }
    protected ChannelBinding(bool ownsHandle);
    public abstract virtual int get_Size();
}
public enum System.Security.Authentication.ExtendedProtection.ChannelBindingKind : Enum {
    public int value__;
    public static ChannelBindingKind Unknown;
    public static ChannelBindingKind Unique;
    public static ChannelBindingKind Endpoint;
}
public enum System.Security.Authentication.HashAlgorithmType : Enum {
    public int value__;
    public static HashAlgorithmType None;
    public static HashAlgorithmType Md5;
    public static HashAlgorithmType Sha1;
    public static HashAlgorithmType Sha256;
    public static HashAlgorithmType Sha384;
    public static HashAlgorithmType Sha512;
}
[FlagsAttribute]
public enum System.Security.Authentication.SslProtocols : Enum {
    public int value__;
    public static SslProtocols None;
    [ObsoleteAttribute("SslProtocols.Ssl2 has been deprecated and is not supported.")]
public static SslProtocols Ssl2;
    [ObsoleteAttribute("SslProtocols.Ssl3 has been deprecated and is not supported.")]
public static SslProtocols Ssl3;
    [ObsoleteAttribute("TLS versions 1.0 and 1.1 have known vulnerabilities and are not recommended. Use a newer TLS version instead, or use SslProtocols.None to defer to OS defaults.")]
public static SslProtocols Tls;
    [ObsoleteAttribute("SslProtocols.Default has been deprecated and is not supported.")]
public static SslProtocols Default;
    [ObsoleteAttribute("TLS versions 1.0 and 1.1 have known vulnerabilities and are not recommended. Use a newer TLS version instead, or use SslProtocols.None to defer to OS defaults.")]
public static SslProtocols Tls11;
    public static SslProtocols Tls12;
    public static SslProtocols Tls13;
}
