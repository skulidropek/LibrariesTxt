public class System.Net.BindIPEndPoint : MulticastDelegate {
    public BindIPEndPoint(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IPEndPoint Invoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount);
    public virtual IAsyncResult BeginInvoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount, AsyncCallback callback, object object);
    public virtual IPEndPoint EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Net.SecurityProtocolType : Enum {
    public int value__;
    public static SecurityProtocolType SystemDefault;
    [ObsoleteAttribute("SecurityProtocolType.Ssl3 has been deprecated and is not supported.")]
public static SecurityProtocolType Ssl3;
    public static SecurityProtocolType Tls;
    public static SecurityProtocolType Tls11;
    public static SecurityProtocolType Tls12;
    public static SecurityProtocolType Tls13;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.ServicePoint : object {
    public Uri Address { get; }
    [NullableAttribute("2")]
public BindIPEndPoint BindIPEndPointDelegate { get; public set; }
    [NullableAttribute("2")]
public X509Certificate Certificate { get; }
    [NullableAttribute("2")]
public X509Certificate ClientCertificate { get; }
    public int ConnectionLeaseTimeout { get; public set; }
    public int ConnectionLimit { get; public set; }
    public string ConnectionName { get; }
    public int CurrentConnections { get; }
    public bool Expect100Continue { get; public set; }
    public DateTime IdleSince { get; }
    public int MaxIdleTime { get; public set; }
    public Version ProtocolVersion { get; }
    public int ReceiveBufferSize { get; public set; }
    public bool SupportsPipelining { get; }
    public bool UseNagleAlgorithm { get; public set; }
    public Uri get_Address();
    [NullableContextAttribute("2")]
public BindIPEndPoint get_BindIPEndPointDelegate();
    [NullableContextAttribute("2")]
public void set_BindIPEndPointDelegate(BindIPEndPoint value);
    [NullableContextAttribute("2")]
public X509Certificate get_Certificate();
    [NullableContextAttribute("2")]
public X509Certificate get_ClientCertificate();
    public int get_ConnectionLeaseTimeout();
    public void set_ConnectionLeaseTimeout(int value);
    public int get_ConnectionLimit();
    public void set_ConnectionLimit(int value);
    public string get_ConnectionName();
    public int get_CurrentConnections();
    public bool get_Expect100Continue();
    public void set_Expect100Continue(bool value);
    public DateTime get_IdleSince();
    public int get_MaxIdleTime();
    public void set_MaxIdleTime(int value);
    public virtual Version get_ProtocolVersion();
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public bool get_SupportsPipelining();
    public bool get_UseNagleAlgorithm();
    public void set_UseNagleAlgorithm(bool value);
    public bool CloseConnectionGroup(string connectionGroupName);
    public void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.ServicePointManager : object {
    public static int DefaultNonPersistentConnectionLimit;
    public static int DefaultPersistentConnectionLimit;
    public static bool CheckCertificateRevocationList { get; public set; }
    public static int DefaultConnectionLimit { get; public set; }
    public static int DnsRefreshTimeout { get; public set; }
    public static bool EnableDnsRoundRobin { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public static EncryptionPolicy EncryptionPolicy { get; }
    public static bool Expect100Continue { get; public set; }
    public static int MaxServicePointIdleTime { get; public set; }
    public static int MaxServicePoints { get; public set; }
    public static bool ReusePort { get; public set; }
    public static SecurityProtocolType SecurityProtocol { get; public set; }
    [NullableAttribute("2")]
public static RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public static bool UseNagleAlgorithm { get; public set; }
    public static bool get_CheckCertificateRevocationList();
    public static void set_CheckCertificateRevocationList(bool value);
    public static int get_DefaultConnectionLimit();
    public static void set_DefaultConnectionLimit(int value);
    public static int get_DnsRefreshTimeout();
    public static void set_DnsRefreshTimeout(int value);
    public static bool get_EnableDnsRoundRobin();
    public static void set_EnableDnsRoundRobin(bool value);
    public static EncryptionPolicy get_EncryptionPolicy();
    public static bool get_Expect100Continue();
    public static void set_Expect100Continue(bool value);
    public static int get_MaxServicePointIdleTime();
    public static void set_MaxServicePointIdleTime(int value);
    public static int get_MaxServicePoints();
    public static void set_MaxServicePoints(int value);
    public static bool get_ReusePort();
    public static void set_ReusePort(bool value);
    public static SecurityProtocolType get_SecurityProtocol();
    public static void set_SecurityProtocol(SecurityProtocolType value);
    [NullableContextAttribute("2")]
public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    [NullableContextAttribute("2")]
public static void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public static bool get_UseNagleAlgorithm();
    public static void set_UseNagleAlgorithm(bool value);
    [ObsoleteAttribute("WebRequest, HttpWebRequest, ServicePoint, and WebClient are obsolete. Use HttpClient instead.")]
public static ServicePoint FindServicePoint(string uriString, IWebProxy proxy);
    [ObsoleteAttribute("WebRequest, HttpWebRequest, ServicePoint, and WebClient are obsolete. Use HttpClient instead.")]
public static ServicePoint FindServicePoint(Uri address);
    [ObsoleteAttribute("WebRequest, HttpWebRequest, ServicePoint, and WebClient are obsolete. Use HttpClient instead.")]
public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy);
    public static void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
}
