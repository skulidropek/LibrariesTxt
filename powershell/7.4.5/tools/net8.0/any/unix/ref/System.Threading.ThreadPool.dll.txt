public interface System.Threading.IThreadPoolWorkItem {
    public abstract virtual void Execute();
}
[UnsupportedOSPlatformAttribute("browser")]
public class System.Threading.RegisteredWaitHandle : MarshalByRefObject {
    [NullableContextAttribute("2")]
public bool Unregister(WaitHandle waitObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.ThreadPool : object {
    public static long CompletedWorkItemCount { get; }
    public static long PendingWorkItemCount { get; }
    public static int ThreadCount { get; }
    public static long get_CompletedWorkItemCount();
    public static long get_PendingWorkItemCount();
    public static int get_ThreadCount();
    [ObsoleteAttribute("ThreadPool.BindHandle(IntPtr) has been deprecated. Use ThreadPool.BindHandle(SafeHandle) instead.")]
[SupportedOSPlatformAttribute("windows")]
public static bool BindHandle(IntPtr osHandle);
    [SupportedOSPlatformAttribute("windows")]
public static bool BindHandle(SafeHandle osHandle);
    public static void GetAvailableThreads(Int32& workerThreads, Int32& completionPortThreads);
    public static void GetMaxThreads(Int32& workerThreads, Int32& completionPortThreads);
    public static void GetMinThreads(Int32& workerThreads, Int32& completionPortThreads);
    public static bool QueueUserWorkItem(WaitCallback callBack);
    public static bool QueueUserWorkItem(WaitCallback callBack, object state);
    public static bool QueueUserWorkItem(Action`1<TState> callBack, TState state, bool preferLocal);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);
    [CLSCompliantAttribute("False")]
[UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);
    public static bool SetMaxThreads(int workerThreads, int completionPortThreads);
    public static bool SetMinThreads(int workerThreads, int completionPortThreads);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public static bool UnsafeQueueNativeOverlapped(NativeOverlapped* overlapped);
    public static bool UnsafeQueueUserWorkItem(IThreadPoolWorkItem callBack, bool preferLocal);
    public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state);
    public static bool UnsafeQueueUserWorkItem(Action`1<TState> callBack, TState state, bool preferLocal);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);
    [UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);
    [CLSCompliantAttribute("False")]
[UnsupportedOSPlatformAttribute("browser")]
public static RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);
}
public class System.Threading.WaitCallback : MulticastDelegate {
    public WaitCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.WaitOrTimerCallback : MulticastDelegate {
    public WaitOrTimerCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(object state, bool timedOut);
    public virtual IAsyncResult BeginInvoke(object state, bool timedOut, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
