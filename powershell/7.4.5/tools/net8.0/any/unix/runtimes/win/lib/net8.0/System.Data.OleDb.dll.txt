internal static class FxResources.System.Data.OleDb.SR : object {
}
internal static class Interop : object {
}
internal static class System.Data.Common.ADP : object {
    private static Type StackOverflowType;
    private static Type OutOfMemoryType;
    private static Type ThreadAbortType;
    private static Type NullReferenceType;
    private static Type AccessViolationType;
    private static Type SecurityType;
    internal static string BeginTransaction;
    internal static string ChangeDatabase;
    internal static string CommandTimeout;
    internal static string ConnectionString;
    internal static string DeriveParameters;
    internal static string ExecuteReader;
    internal static string ExecuteNonQuery;
    internal static string ExecuteScalar;
    internal static string GetBytes;
    internal static string GetChars;
    internal static string GetOleDbSchemaTable;
    internal static string GetSchema;
    internal static string GetSchemaTable;
    internal static string Parameter;
    internal static string ParameterName;
    internal static string Prepare;
    internal static string QuoteIdentifier;
    internal static string SetProperties;
    internal static string UnquoteIdentifier;
    internal static CompareOptions compareOptions;
    internal static int DefaultCommandTimeout;
    internal static int DefaultConnectionTimeout;
    internal static IntPtr RecordsUnaffected;
    internal static int CharSize;
    internal static bool IsWindowsNT;
    internal static bool IsPlatformNT5;
    private static ADP();
    internal static Exception ExceptionWithStackTrace(Exception e);
    private static void TraceException(string trace, Exception e);
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionForCapture(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentException Argument(string error, string parameter, Exception inner);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static ConfigurationException Configuration(string message);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static TimeoutException TimeoutException(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static NotSupportedException NotSupported();
    internal static InvalidCastException InvalidCast();
    internal static InvalidOperationException DataAdapter(string error);
    internal static InvalidOperationException DataAdapter(string error, Exception inner);
    private static InvalidOperationException Provider(string error);
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static void CheckArgumentLength(string value, string parameterName);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException UdlFileError(Exception inner);
    internal static ArgumentException InvalidUDL();
    internal static InvalidOperationException InvalidDataDirectory();
    internal static ArgumentException InvalidKeyname(string parameterName);
    internal static ArgumentException InvalidValue(string parameterName);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static InvalidOperationException NoConnectionString();
    private static string ConnectionStateMsg(ConnectionState state);
    internal static ConfigurationException ConfigUnableToLoadXmlMetaDataFile(string settingName);
    internal static ConfigurationException ConfigWrongNumberOfValues(string settingName);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static Exception CommandTextRequired(string method);
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static Exception NoStoredProcedureExists(string sproc);
    internal static Exception OpenReaderExists();
    internal static Exception OpenReaderExists(Exception e);
    internal static Exception TransactionCompleted();
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception NumericToDecimalOverflow();
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static Exception FillRequiresSourceTableName(string parameter);
    internal static Exception InvalidCommandTimeout(int value);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static Exception PrepareParameterType(IDbCommand cmd);
    internal static Exception PrepareParameterSize(IDbCommand cmd);
    internal static Exception PrepareParameterScale(IDbCommand cmd, string type);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception TransactionPresent();
    internal static Exception LocalTransactionPresent();
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception InternalError(InternalErrorCode internalError, Exception innerException);
    internal static Exception InvalidConnectTimeoutValue();
    internal static Exception DataReaderNoData();
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static Exception InvalidDataLength(long length);
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, IDataParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, IDataParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, IDataParameterCollection collection, Type parameterType);
    internal static Exception InvalidParameterType(IDataParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(IDbConnection obj);
    internal static Exception TransactionZombied(IDbTransaction obj);
    internal static Exception AmbiguousCollectionName(string collectionName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static ArgumentException InvalidRestrictionValue(string collectionName, string restrictionName, string restrictionValue);
    internal static Exception InvalidXml();
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception MissingRestrictionColumn();
    internal static Exception MissingRestrictionRow();
    internal static Exception NoColumns();
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static InvalidOperationException QuotePrefixNotSet(string method);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static Transaction GetCurrentTransaction();
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static IDtcTransaction GetOletxTransaction(Transaction transaction);
    internal static bool NeedManualEnlistment();
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static void EscapeSpecialCharacters(string unescapedString, StringBuilder escapedString);
    internal static string GetFullPath(string filename);
    internal static Stream GetFileStream(string filename);
    internal static FileVersionInfo GetVersionInfo(string filename);
    internal static Stream GetXmlStreamFromValues(String[] values, string errorString);
    internal static Stream GetXmlStream(string value, string errorString);
    internal static object ClassesRootRegistryValue(string subkey, string queryvalue);
    internal static object LocalMachineRegistryValue(string subkey, string queryvalue);
    internal static void CheckVersionMDAC(bool ifodbcelseoledb);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static IntPtr IntPtrOffset(IntPtr pbase, int offset);
    internal static int IntPtrToInt32(IntPtr value);
    internal static int SrcCompare(string strA, string strB);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsDirection(IDataParameter value, ParameterDirection condition);
    internal static bool IsEmpty(string str);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
}
internal static class System.Data.Common.DbConnectionOptionKeywords : object {
    internal static string Driver;
    internal static string Pwd;
    internal static string UID;
    internal static string DataProvider;
    internal static string ExtendedProperties;
    internal static string FileName;
    internal static string Provider;
    internal static string RemoteProvider;
    internal static string Password;
    internal static string UserID;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DbConnectionOptions : object {
    internal static string DataDirectory;
    private static Regex ConnectionStringValidKeyRegex;
    private static Regex ConnectionStringQuoteValueRegex;
    private static Regex ConnectionStringQuoteOdbcValueRegex;
    private string _usersConnectionString;
    private Hashtable _parsetable;
    internal NameValuePair KeyChain;
    internal bool HasPasswordKeyword;
    internal bool HasUserIdKeyword;
    internal bool UseOdbcRules;
    internal bool HasPersistablePassword { get; }
    public bool IsEmpty { get; }
    public string Item { get; }
    public DbConnectionOptions(string connectionString);
    public DbConnectionOptions(string connectionString, Hashtable synonyms, bool useOdbcRules);
    private static DbConnectionOptions();
    [GeneratedRegexAttribute("^(?![;\s])[^\p{Cc}]+(?<!\s)$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
private static Regex CreateConnectionStringValidKeyRegex();
    [GeneratedRegexAttribute("^[^"'=;\s\p{Cc}]*$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
private static Regex CreateConnectionStringQuoteValueRegex();
    [GeneratedRegexAttribute("^\{([^\} ]|\}\})*\}$", "4")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
private static Regex CreateConnectionStringQuoteOdbcValueRegex();
    public string UsersConnectionString(bool hidePassword);
    private string UsersConnectionString(bool hidePassword, bool forceHidePassword);
    internal bool get_HasPersistablePassword();
    public bool get_IsEmpty();
    public string get_Item(string keyword);
    internal static void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules);
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    private static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    public bool ContainsKey(string keyword);
    protected internal virtual string Expand();
    internal static string ExpandDataDirectory(string keyword, string value, String& datadir);
    internal string ExpandDataDirectories(String& filename, Int32& position);
    [ConditionalAttribute("DEBUG")]
private static void DebugTraceKeyValuePair(string keyname, string keyvalue, Hashtable synonyms);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Hashtable parsetable, string connectionString, bool buildChain, Hashtable synonyms, bool firstKey);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
}
internal class System.Data.Common.DbConnectionPoolKey : object {
    private string _connectionString;
    internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    private DbConnectionPoolKey(DbConnectionPoolKey key);
    private sealed virtual override object System.ICloneable.Clone();
    internal string get_ConnectionString();
    internal void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    internal static bool ConvertToBoolean(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
}
internal static class System.Data.Common.DbConnectionStringDefaults : object {
    internal static string FileName;
    internal static int OleDbServices;
    internal static string Provider;
    internal static int ConnectTimeout;
    internal static bool PersistSecurityInfo;
    internal static string DataSource;
}
internal static class System.Data.Common.DbConnectionStringKeywords : object {
    internal static string Driver;
    internal static string FileName;
    internal static string OleDbServices;
    internal static string Provider;
    internal static string DataSource;
    internal static string PersistSecurityInfo;
}
internal static class System.Data.Common.MultipartIdentifier : object {
    private static int MaxParts;
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    private static void IncrementStringCount(string name, String[] ary, Int32& position, string property);
    private static bool IsWhitespace(char ch);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class System.Data.Common.NameValuePair : object {
    private string _name;
    private string _value;
    private int _length;
    private NameValuePair _next;
    internal int Length { get; }
    internal string Name { get; }
    internal string Value { get; }
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal static class System.Data.Common.NativeMethods : object {
}
internal class System.Data.Common.ReadOnlyCollection`1 : object {
    private T[] _items;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public int Count { get; }
    internal ReadOnlyCollection`1(T[] items);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T value);
    public sealed virtual int get_Count();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.Common.SafeNativeMethods : object {
    internal static void ZeroMemory(IntPtr ptr, int length);
    internal static IntPtr InterlockedExchangePointer(IntPtr lpAddress, IntPtr lpValue);
}
internal static class System.Data.Common.UnsafeNativeMethods : object {
    [LibraryImportAttribute("oleaut32.dll")]
internal static OleDbHResult GetErrorInfo(int dwReserved, IntPtr* ppIErrorInfo);
    internal static OleDbHResult GetErrorInfo(int dwReserved, IErrorInfo& ppIErrorInfo);
    internal static void ReleaseErrorInfoObject(IErrorInfo errorInfo);
}
[EventSourceAttribute]
internal class System.Data.DataCommonEventSource : EventSource {
    internal static DataCommonEventSource Log;
    private static int TraceEventId;
    private static DataCommonEventSource();
    [EventAttribute("1")]
internal void Trace(string message);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0);
}
internal class System.Data.OleDb.Bindings : object {
    private tagDBPARAMBINDINFO[] _bindInfo;
    private tagDBBINDING[] _dbbindings;
    private tagDBCOLUMNACCESS[] _dbcolumns;
    private OleDbParameter[] _parameters;
    private int _collectionChangeID;
    private OleDbDataReader _dataReader;
    private ColumnBinding[] _columnBindings;
    private RowBinding _rowBinding;
    private int _index;
    private int _count;
    private int _dataBufferSize;
    private bool _ifIRowsetElseIRow;
    private bool _forceRebind;
    private bool _needToReset;
    internal tagDBPARAMBINDINFO[] BindInfo { get; }
    internal tagDBCOLUMNACCESS[] DBColumnAccess { get; }
    unknown int CurrentIndex {internal set; }
    internal bool ForceRebind { get; internal set; }
    unknown IntPtr DataSourceType {internal set; }
    unknown IntPtr Name {internal set; }
    internal IntPtr ParamSize { get; internal set; }
    unknown int Flags {internal set; }
    unknown IntPtr Ordinal {internal set; }
    unknown int Part {internal set; }
    unknown int ParamIO {internal set; }
    unknown int MaxLen {internal set; }
    internal int DbType { get; internal set; }
    unknown byte Precision {internal set; }
    unknown byte Scale {internal set; }
    private Bindings(int count);
    internal Bindings(OleDbParameter[] parameters, int collectionChangeID);
    internal Bindings(OleDbDataReader dataReader, bool ifIRowsetElseIRow, int count);
    internal tagDBPARAMBINDINFO[] get_BindInfo();
    internal tagDBCOLUMNACCESS[] get_DBColumnAccess();
    internal void set_CurrentIndex(int value);
    internal ColumnBinding[] ColumnBindings();
    internal OleDbParameter[] Parameters();
    internal RowBinding RowBinding();
    internal bool get_ForceRebind();
    internal void set_ForceRebind(bool value);
    internal void set_DataSourceType(IntPtr value);
    internal void set_Name(IntPtr value);
    internal IntPtr get_ParamSize();
    internal void set_ParamSize(IntPtr value);
    internal void set_Flags(int value);
    internal void set_Ordinal(IntPtr value);
    internal void set_Part(int value);
    internal void set_ParamIO(int value);
    internal void set_MaxLen(int value);
    internal int get_DbType();
    internal void set_DbType(int value);
    internal void set_Precision(byte value);
    internal void set_Scale(byte value);
    internal int AllocateForAccessor(OleDbDataReader dataReader, int indexStart, int indexForAccessor);
    internal void ApplyInputParameters();
    internal void ApplyOutputParameters();
    internal bool AreParameterBindingsInvalid(OleDbParameterCollection collection);
    internal void CleanupBindings();
    internal void CloseFromConnection();
    internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags);
    public void Dispose();
    internal void GuidKindName(Guid guid, int eKind, IntPtr propid);
    internal void ParameterStatus(StringBuilder builder);
}
internal class System.Data.OleDb.BLOB : ValueType {
    public UInt32 cbSize;
    public IntPtr pBlobData;
}
internal class System.Data.OleDb.BSTRBLOB : ValueType {
    public UInt32 cbSize;
    public IntPtr pData;
}
internal class System.Data.OleDb.CArray : ValueType {
    public UInt32 cElems;
    public IntPtr pElems;
}
internal class System.Data.OleDb.ChapterHandle : WrappedIUnknown {
    internal static ChapterHandle DB_NULL_HCHAPTER;
    private IntPtr _chapterHandle;
    internal IntPtr HChapter { get; }
    private ChapterHandle(IntPtr chapter);
    private ChapterHandle(object chapteredRowset, RowBinding binding, int valueOffset);
    private static ChapterHandle();
    internal static ChapterHandle CreateChapterHandle(object chapteredRowset, RowBinding binding, int valueOffset);
    internal static ChapterHandle CreateChapterHandle(IntPtr chapter);
    internal IntPtr get_HChapter();
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.ColumnBinding : object {
    private OleDbDataReader _dataReader;
    private RowBinding _rowbinding;
    private Bindings _bindings;
    private OleDbParameter _parameter;
    private int _parameterChangeID;
    private int _offsetStatus;
    private int _offsetLength;
    private int _offsetValue;
    private static Func`2<object, IntPtr> s_getIDispatchForObject;
    private int _ordinal;
    private int _maxLen;
    private short _wType;
    private byte _precision;
    private int _index;
    private int _indexForAccessor;
    private int _indexWithinAccessor;
    private bool _ifIRowsetElseIRow;
    private int _valueBindingOffset;
    private int _valueBindingSize;
    internal StringMemHandle _sptr;
    private GCHandle _pinnedBuffer;
    private object _value;
    internal Bindings Bindings { get; }
    internal RowBinding RowBinding { get; }
    internal int ColumnBindingOrdinal { get; }
    private int ColumnBindingMaxLen { get; }
    private byte ColumnBindingPrecision { get; }
    private short DbType { get; }
    private Type ExpectedType { get; }
    internal int Index { get; }
    internal int IndexForAccessor { get; }
    internal int IndexWithinAccessor { get; }
    private int ValueBindingOffset { get; }
    private int ValueBindingSize { get; }
    internal int ValueOffset { get; }
    internal ColumnBinding(OleDbDataReader dataReader, int index, int indexForAccessor, int indexWithinAccessor, OleDbParameter parameter, RowBinding rowbinding, Bindings bindings, tagDBBINDING binding, int offset, bool ifIRowsetElseIRow);
    internal Bindings get_Bindings();
    internal RowBinding get_RowBinding();
    internal int get_ColumnBindingOrdinal();
    private int get_ColumnBindingMaxLen();
    private byte get_ColumnBindingPrecision();
    private short get_DbType();
    private Type get_ExpectedType();
    internal int get_Index();
    internal int get_IndexForAccessor();
    internal int get_IndexWithinAccessor();
    private int get_ValueBindingOffset();
    private int get_ValueBindingSize();
    internal int get_ValueOffset();
    private OleDbDataReader DataReader();
    internal bool IsParameterBindingInvalid(OleDbParameter parameter);
    internal bool IsValueNull();
    private int LengthValue();
    private void LengthValue(int value);
    internal OleDbParameter Parameter();
    internal void ResetValue();
    internal DBStatus StatusValue();
    internal void StatusValue(DBStatus value);
    internal void SetOffset(int offset);
    internal void SetSize(int size);
    private void SetValueDBNull();
    private void SetValueEmpty();
    internal object Value();
    internal void Value(object value);
    internal bool Value_BOOL();
    private void Value_BOOL(bool value);
    private string Value_BSTR();
    private void Value_BSTR(string value);
    private Byte[] Value_ByRefBYTES();
    private void Value_ByRefBYTES(Byte[] value);
    private string Value_ByRefWSTR();
    private void Value_ByRefWSTR(string value);
    private void Value_ByRefWSTR(Char[] value);
    private Byte[] Value_BYTES();
    private void Value_BYTES(Byte[] value);
    private decimal Value_CY();
    private void Value_CY(decimal value);
    private DateTime Value_DATE();
    private void Value_DATE(DateTime value);
    private DateTime Value_DBDATE();
    private void Value_DBDATE(DateTime value);
    private TimeSpan Value_DBTIME();
    private void Value_DBTIME(TimeSpan value);
    private DateTime Value_DBTIMESTAMP();
    private void Value_DBTIMESTAMP(DateTime value);
    private decimal Value_DECIMAL();
    private void Value_DECIMAL(decimal value);
    private int Value_ERROR();
    private void Value_ERROR(int value);
    private DateTime Value_FILETIME();
    private void Value_FILETIME(DateTime value);
    internal Guid Value_GUID();
    private void Value_GUID(Guid value);
    internal OleDbDataReader Value_HCHAPTER();
    private sbyte Value_I1();
    private void Value_I1(sbyte value);
    internal short Value_I2();
    private void Value_I2(short value);
    private int Value_I4();
    private void Value_I4(int value);
    private long Value_I8();
    private void Value_I8(long value);
    private object Value_IDISPATCH();
    private void Value_IDISPATCH(object value);
    private object Value_IUNKNOWN();
    private void Value_IUNKNOWN(object value);
    private decimal Value_NUMERIC();
    private void Value_NUMERIC(decimal value);
    private float Value_R4();
    private void Value_R4(float value);
    private double Value_R8();
    private void Value_R8(double value);
    private byte Value_UI1();
    private void Value_UI1(byte value);
    internal ushort Value_UI2();
    private void Value_UI2(ushort value);
    internal UInt32 Value_UI4();
    private void Value_UI4(UInt32 value);
    internal ulong Value_UI8();
    private void Value_UI8(ulong value);
    private string Value_WSTR();
    private void Value_WSTR(string value);
    private void Value_WSTR(Char[] value);
    private object Value_VARIANT();
    private void Value_VARIANT(object value);
    internal bool ValueBoolean();
    internal Byte[] ValueByteArray();
    internal byte ValueByte();
    internal OleDbDataReader ValueChapter();
    internal DateTime ValueDateTime();
    internal decimal ValueDecimal();
    internal Guid ValueGuid();
    internal short ValueInt16();
    internal int ValueInt32();
    internal long ValueInt64();
    internal float ValueSingle();
    internal double ValueDouble();
    internal string ValueString();
    private object ValueVariant();
    private Exception CheckTypeValueStatusValue();
    private Exception CheckTypeValueStatusValue(Type expectedType);
}
internal class System.Data.OleDb.CY : ValueType {
    public UInt32 Lo;
    public int Hi;
}
internal class System.Data.OleDb.DataSourceWrapper : WrappedIUnknown {
    internal OleDbHResult InitializeAndCreateSession(OleDbConnectionString constr, SessionWrapper& sessionWrapper);
    internal IDBInfoWrapper IDBInfo();
    internal IDBPropertiesWrapper IDBProperties();
}
internal enum System.Data.OleDb.DBBindStatus : Enum {
    public int value__;
    public static DBBindStatus OK;
    public static DBBindStatus BADORDINAL;
    public static DBBindStatus UNSUPPORTEDCONVERSION;
    public static DBBindStatus BADBINDINFO;
    public static DBBindStatus BADSTORAGEFLAGS;
    public static DBBindStatus NOINTERFACE;
    public static DBBindStatus MULTIPLESTORAGE;
}
internal class System.Data.OleDb.DBPropSet : SafeHandle {
    private int propertySetCount;
    private Exception lastErrorFromProvider;
    public bool IsInvalid { get; }
    internal int PropertySetCount { get; }
    internal DBPropSet(int propertysetCount);
    internal DBPropSet(IDBProperties properties, PropertyIDSet propidset, OleDbHResult& hr);
    internal DBPropSet(IRowsetInfo properties, PropertyIDSet propidset, OleDbHResult& hr);
    internal DBPropSet(ICommandProperties properties, PropertyIDSet propidset, OleDbHResult& hr);
    private void SetLastErrorInfo(OleDbHResult lastErrorHr);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal int get_PropertySetCount();
    internal ItagDBPROP[] GetPropertySet(int index, Guid& propertyset);
    internal void SetPropertySet(int index, Guid propertySet, ItagDBPROP[] properties);
    internal static DBPropSet CreateProperty(Guid propertySet, int propertyId, bool required, object value);
}
internal enum System.Data.OleDb.DBStatus : Enum {
    public int value__;
    public static DBStatus S_OK;
    public static DBStatus E_BADACCESSOR;
    public static DBStatus E_CANTCONVERTVALUE;
    public static DBStatus S_ISNULL;
    public static DBStatus S_TRUNCATED;
    public static DBStatus E_SIGNMISMATCH;
    public static DBStatus E_DATAOVERFLOW;
    public static DBStatus E_CANTCREATE;
    public static DBStatus E_UNAVAILABLE;
    public static DBStatus E_PERMISSIONDENIED;
    public static DBStatus E_INTEGRITYVIOLATION;
    public static DBStatus E_SCHEMAVIOLATION;
    public static DBStatus E_BADSTATUS;
    public static DBStatus S_DEFAULT;
    public static DBStatus S_CELLEMPTY;
    public static DBStatus S_IGNORE;
    public static DBStatus E_DOESNOTEXIST;
    public static DBStatus E_INVALIDURL;
    public static DBStatus E_RESOURCELOCKED;
    public static DBStatus E_RESOURCEEXISTS;
    public static DBStatus E_CANNOTCOMPLETE;
    public static DBStatus E_VOLUMENOTFOUND;
    public static DBStatus E_OUTOFSPACE;
    public static DBStatus S_CANNOTDELETESOURCE;
    public static DBStatus E_READONLY;
    public static DBStatus E_RESOURCEOUTOFSCOPE;
    public static DBStatus S_ALREADYEXISTS;
    public static DBStatus E_CANCELED;
    public static DBStatus E_NOTCOLLECTION;
    public static DBStatus S_ROWSETCOLUMN;
}
internal class System.Data.OleDb.DualCoTaskMem : SafeHandle {
    private IntPtr handle2;
    public bool IsInvalid { get; }
    internal DualCoTaskMem(IDBInfo dbInfo, Int32[] literals, Int32& literalCount, IntPtr& literalInfo, OleDbHResult& hr);
    internal DualCoTaskMem(IColumnsInfo columnsInfo, IntPtr& columnCount, IntPtr& columnInfos, OleDbHResult& hr);
    internal DualCoTaskMem(IDBSchemaRowset dbSchemaRowset, Int32& schemaCount, IntPtr& schemaGuids, IntPtr& schemaRestrictions, OleDbHResult& hr);
    internal DualCoTaskMem(IColumnsRowset icolumnsRowset, IntPtr& cOptColumns, OleDbHResult& hr);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.IDBInfoWrapper : ValueType {
    private object _unknown;
    private IDBInfo _value;
    internal IDBInfo Value { get; }
    internal IDBInfoWrapper(object unknown);
    internal IDBInfo get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IDBPropertiesWrapper : ValueType {
    private object _unknown;
    private IDBProperties _value;
    internal IDBProperties Value { get; }
    internal IDBPropertiesWrapper(object unknown);
    internal IDBProperties get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IDBSchemaRowsetWrapper : ValueType {
    private object _unknown;
    private IDBSchemaRowset _value;
    internal IDBSchemaRowset Value { get; }
    internal IDBSchemaRowsetWrapper(object unknown);
    internal IDBSchemaRowset get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IOpenRowsetWrapper : ValueType {
    private object _unknown;
    private IOpenRowset _value;
    internal IOpenRowset Value { get; }
    internal IOpenRowsetWrapper(object unknown);
    internal IOpenRowset get_Value();
    public sealed virtual void Dispose();
}
internal interface System.Data.OleDb.ItagDBPROP {
    public OleDbPropertyStatus dwStatus { get; }
    public object vValue { get; }
    public int dwPropertyID { get; }
    public abstract virtual OleDbPropertyStatus get_dwStatus();
    public abstract virtual object get_vValue();
    public abstract virtual int get_dwPropertyID();
}
internal interface System.Data.OleDb.ItagDBPROPINFO {
    public int dwPropertyID { get; }
    public int dwFlags { get; }
    public int vtType { get; }
    public object vValue { get; }
    public string pwszDescription { get; }
    public abstract virtual int get_dwPropertyID();
    public abstract virtual int get_dwFlags();
    public abstract virtual int get_vtType();
    public abstract virtual object get_vValue();
    public abstract virtual string get_pwszDescription();
}
internal class System.Data.OleDb.ITransactionJoinWrapper : ValueType {
    private object _unknown;
    private ITransactionJoin _value;
    internal ITransactionJoin Value { get; }
    internal ITransactionJoinWrapper(object unknown);
    internal ITransactionJoin get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.MetaData : object {
    internal Bindings bindings;
    internal ColumnBinding columnBinding;
    internal string columnName;
    internal Guid guid;
    internal int kind;
    internal IntPtr propid;
    internal string idname;
    internal NativeDBType type;
    internal IntPtr ordinal;
    internal int size;
    internal int flags;
    internal byte precision;
    internal byte scale;
    internal bool isAutoIncrement;
    internal bool isUnique;
    internal bool isKeyColumn;
    internal bool isHidden;
    internal string baseSchemaName;
    internal string baseCatalogName;
    internal string baseTableName;
    internal string baseColumnName;
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
internal class System.Data.OleDb.NativeDBType : object {
    internal static short EMPTY;
    internal static short NULL;
    internal static short I2;
    internal static short I4;
    internal static short R4;
    internal static short R8;
    internal static short CY;
    internal static short DATE;
    internal static short BSTR;
    internal static short IDISPATCH;
    internal static short ERROR;
    internal static short BOOL;
    internal static short VARIANT;
    internal static short IUNKNOWN;
    internal static short DECIMAL;
    internal static short I1;
    internal static short UI1;
    internal static short UI2;
    internal static short UI4;
    internal static short I8;
    internal static short UI8;
    internal static short FILETIME;
    internal static short DBUTCDATETIME;
    internal static short DBTIME_EX;
    internal static short GUID;
    internal static short BYTES;
    internal static short STR;
    internal static short WSTR;
    internal static short NUMERIC;
    internal static short UDT;
    internal static short DBDATE;
    internal static short DBTIME;
    internal static short DBTIMESTAMP;
    internal static short HCHAPTER;
    internal static short PROPVARIANT;
    internal static short VARNUMERIC;
    internal static short XML;
    internal static short VECTOR;
    internal static short ARRAY;
    internal static short BYREF;
    internal static short RESERVED;
    internal static short HighMask;
    private static string S_BINARY;
    private static string S_BOOL;
    private static string S_BSTR;
    private static string S_CHAR;
    private static string S_CY;
    private static string S_DATE;
    private static string S_DBDATE;
    private static string S_DBTIME;
    private static string S_DBTIMESTAMP;
    private static string S_DECIMAL;
    private static string S_ERROR;
    private static string S_FILETIME;
    private static string S_GUID;
    private static string S_I1;
    private static string S_I2;
    private static string S_I4;
    private static string S_I8;
    private static string S_IDISPATCH;
    private static string S_IUNKNOWN;
    private static string S_LONGVARBINARY;
    private static string S_LONGVARCHAR;
    private static string S_NUMERIC;
    private static string S_PROPVARIANT;
    private static string S_R4;
    private static string S_R8;
    private static string S_UDT;
    private static string S_UI1;
    private static string S_UI2;
    private static string S_UI4;
    private static string S_UI8;
    private static string S_VARBINARY;
    private static string S_VARCHAR;
    private static string S_VARIANT;
    private static string S_VARNUMERIC;
    private static string S_WCHAR;
    private static string S_WVARCHAR;
    private static string S_WLONGVARCHAR;
    private static string S_XML;
    private static NativeDBType D_Binary;
    private static NativeDBType D_Boolean;
    private static NativeDBType D_BSTR;
    private static NativeDBType D_Char;
    private static NativeDBType D_Currency;
    private static NativeDBType D_Date;
    private static NativeDBType D_DBDate;
    private static NativeDBType D_DBTime;
    private static NativeDBType D_DBTimeStamp;
    private static NativeDBType D_Decimal;
    private static NativeDBType D_Error;
    private static NativeDBType D_Filetime;
    private static NativeDBType D_Guid;
    private static NativeDBType D_TinyInt;
    private static NativeDBType D_SmallInt;
    private static NativeDBType D_Integer;
    private static NativeDBType D_BigInt;
    private static NativeDBType D_IDispatch;
    private static NativeDBType D_IUnknown;
    private static NativeDBType D_LongVarBinary;
    private static NativeDBType D_LongVarChar;
    private static NativeDBType D_Numeric;
    private static NativeDBType D_PropVariant;
    private static NativeDBType D_Single;
    private static NativeDBType D_Double;
    private static NativeDBType D_UnsignedTinyInt;
    private static NativeDBType D_UnsignedSmallInt;
    private static NativeDBType D_UnsignedInt;
    private static NativeDBType D_UnsignedBigInt;
    private static NativeDBType D_VarBinary;
    private static NativeDBType D_VarChar;
    private static NativeDBType D_Variant;
    private static NativeDBType D_VarNumeric;
    private static NativeDBType D_WChar;
    private static NativeDBType D_VarWChar;
    private static NativeDBType D_LongVarWChar;
    private static NativeDBType D_Chapter;
    private static NativeDBType D_Empty;
    private static NativeDBType D_Xml;
    private static NativeDBType D_Udt;
    internal static NativeDBType Default;
    internal static byte MaximumDecimalPrecision;
    private static int FixedDbPart;
    private static int VarblDbPart;
    internal OleDbType enumOleDbType;
    internal DbType enumDbType;
    internal short dbType;
    internal short wType;
    internal Type dataType;
    internal int dbPart;
    internal bool isfixed;
    internal bool islong;
    internal byte maxpre;
    internal int fixlen;
    internal string dataSourceType;
    internal StringMemHandle dbString;
    internal bool IsVariableLength { get; }
    private NativeDBType(byte maxpre, int fixlen, bool isfixed, bool islong, OleDbType enumOleDbType, short dbType, string dbstring, Type dataType, short wType, DbType enumDbType);
    private static NativeDBType();
    internal bool get_IsVariableLength();
    internal static NativeDBType FromDataType(OleDbType enumOleDbType);
    internal static NativeDBType FromSystemType(object value);
    internal static NativeDBType FromDbType(DbType dbType);
    internal static NativeDBType FromDBType(short dbType, bool isLong, bool isFixed);
}
internal static class System.Data.OleDb.NativeOledbWrapper : object {
    internal static OleDbHResult IChapteredRowsetReleaseChapter(IntPtr ptr, IntPtr chapter);
    internal static OleDbHResult ITransactionAbort(IntPtr ptr);
    internal static OleDbHResult ITransactionCommit(IntPtr ptr);
    internal static bool MemoryCompare(IntPtr buf1, IntPtr buf2, int count);
    internal static void MemoryCopy(IntPtr dst, IntPtr src, int count);
}
internal static class System.Data.OleDb.ODB : object {
    internal static int ADODB_AlreadyClosedError;
    internal static int ADODB_NextResultError;
    internal static int InternalStateExecuting;
    internal static int InternalStateFetching;
    internal static int InternalStateClosed;
    internal static int ExecutedIMultipleResults;
    internal static int ExecutedIRowset;
    internal static int ExecutedIRow;
    internal static int PrepareICommandText;
    internal static int InternalStateExecutingNot;
    internal static int InternalStateFetchingNot;
    internal static int InternalStateConnecting;
    internal static int InternalStateOpen;
    internal static int LargeDataSize;
    internal static int CacheIncrement;
    internal static IntPtr DBRESULTFLAG_DEFAULT;
    internal static short VARIANT_TRUE;
    internal static short VARIANT_FALSE;
    internal static int CLSCTX_ALL;
    internal static int MaxProgIdLength;
    internal static int DBLITERAL_CATALOG_SEPARATOR;
    internal static int DBLITERAL_QUOTE_PREFIX;
    internal static int DBLITERAL_QUOTE_SUFFIX;
    internal static int DBLITERAL_SCHEMA_SEPARATOR;
    internal static int DBLITERAL_TABLE_NAME;
    internal static int DBPROP_ACCESSORDER;
    internal static int DBPROP_AUTH_CACHE_AUTHINFO;
    internal static int DBPROP_AUTH_ENCRYPT_PASSWORD;
    internal static int DBPROP_AUTH_INTEGRATED;
    internal static int DBPROP_AUTH_MASK_PASSWORD;
    internal static int DBPROP_AUTH_PASSWORD;
    internal static int DBPROP_AUTH_PERSIST_ENCRYPTED;
    internal static int DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO;
    internal static int DBPROP_AUTH_USERID;
    internal static int DBPROP_CATALOGLOCATION;
    internal static int DBPROP_COMMANDTIMEOUT;
    internal static int DBPROP_CONNECTIONSTATUS;
    internal static int DBPROP_CURRENTCATALOG;
    internal static int DBPROP_DATASOURCENAME;
    internal static int DBPROP_DBMSNAME;
    internal static int DBPROP_DBMSVER;
    internal static int DBPROP_GROUPBY;
    internal static int DBPROP_HIDDENCOLUMNS;
    internal static int DBPROP_IColumnsRowset;
    internal static int DBPROP_IDENTIFIERCASE;
    internal static int DBPROP_INIT_ASYNCH;
    internal static int DBPROP_INIT_BINDFLAGS;
    internal static int DBPROP_INIT_CATALOG;
    internal static int DBPROP_INIT_DATASOURCE;
    internal static int DBPROP_INIT_GENERALTIMEOUT;
    internal static int DBPROP_INIT_HWND;
    internal static int DBPROP_INIT_IMPERSONATION_LEVEL;
    internal static int DBPROP_INIT_LCID;
    internal static int DBPROP_INIT_LOCATION;
    internal static int DBPROP_INIT_LOCKOWNER;
    internal static int DBPROP_INIT_MODE;
    internal static int DBPROP_INIT_OLEDBSERVICES;
    internal static int DBPROP_INIT_PROMPT;
    internal static int DBPROP_INIT_PROTECTION_LEVEL;
    internal static int DBPROP_INIT_PROVIDERSTRING;
    internal static int DBPROP_INIT_TIMEOUT;
    internal static int DBPROP_IRow;
    internal static int DBPROP_MAXROWS;
    internal static int DBPROP_MULTIPLERESULTS;
    internal static int DBPROP_ORDERBYCOLUNSINSELECT;
    internal static int DBPROP_PROVIDERFILENAME;
    internal static int DBPROP_QUOTEDIDENTIFIERCASE;
    internal static int DBPROP_RESETDATASOURCE;
    internal static int DBPROP_SQLSUPPORT;
    internal static int DBPROP_UNIQUEROWS;
    internal static int DBPROPSTATUS_OK;
    internal static int DBPROPSTATUS_NOTSUPPORTED;
    internal static int DBPROPSTATUS_BADVALUE;
    internal static int DBPROPSTATUS_BADOPTION;
    internal static int DBPROPSTATUS_BADCOLUMN;
    internal static int DBPROPSTATUS_NOTALLSETTABLE;
    internal static int DBPROPSTATUS_NOTSETTABLE;
    internal static int DBPROPSTATUS_NOTSET;
    internal static int DBPROPSTATUS_CONFLICTING;
    internal static int DBPROPSTATUS_NOTAVAILABLE;
    internal static int DBPROPOPTIONS_REQUIRED;
    internal static int DBPROPOPTIONS_OPTIONAL;
    internal static int DBPROPFLAGS_WRITE;
    internal static int DBPROPFLAGS_SESSION;
    internal static int DBPROPVAL_AO_RANDOM;
    internal static int DBPROPVAL_CL_END;
    internal static int DBPROPVAL_CL_START;
    internal static int DBPROPVAL_CS_COMMUNICATIONFAILURE;
    internal static int DBPROPVAL_CS_INITIALIZED;
    internal static int DBPROPVAL_CS_UNINITIALIZED;
    internal static int DBPROPVAL_GB_COLLATE;
    internal static int DBPROPVAL_GB_CONTAINS_SELECT;
    internal static int DBPROPVAL_GB_EQUALS_SELECT;
    internal static int DBPROPVAL_GB_NO_RELATION;
    internal static int DBPROPVAL_GB_NOT_SUPPORTED;
    internal static int DBPROPVAL_IC_LOWER;
    internal static int DBPROPVAL_IC_MIXED;
    internal static int DBPROPVAL_IC_SENSITIVE;
    internal static int DBPROPVAL_IC_UPPER;
    internal static int DBPROPVAL_IN_ALLOWNULL;
    internal static int DBPROPVAL_MR_NOTSUPPORTED;
    internal static int DBPROPVAL_RD_RESETALL;
    internal static int DBPROPVAL_OS_RESOURCEPOOLING;
    internal static int DBPROPVAL_OS_TXNENLISTMENT;
    internal static int DBPROPVAL_OS_CLIENTCURSOR;
    internal static int DBPROPVAL_OS_AGR_AFTERSESSION;
    internal static int DBPROPVAL_SQL_ODBC_MINIMUM;
    internal static int DBPROPVAL_SQL_ESCAPECLAUSES;
    internal static int DBKIND_GUID_NAME;
    internal static int DBKIND_GUID_PROPID;
    internal static int DBKIND_NAME;
    internal static int DBKIND_PGUID_NAME;
    internal static int DBKIND_PGUID_PROPID;
    internal static int DBKIND_PROPID;
    internal static int DBKIND_GUID;
    internal static int DBCOLUMNFLAGS_ISBOOKMARK;
    internal static int DBCOLUMNFLAGS_ISLONG;
    internal static int DBCOLUMNFLAGS_ISFIXEDLENGTH;
    internal static int DBCOLUMNFLAGS_ISNULLABLE;
    internal static int DBCOLUMNFLAGS_ISROWSET;
    internal static int DBCOLUMNFLAGS_ISROW;
    internal static int DBCOLUMNFLAGS_ISROWSET_DBCOLUMNFLAGS_ISROW;
    internal static int DBCOLUMNFLAGS_ISLONG_DBCOLUMNFLAGS_ISSTREAM;
    internal static int DBCOLUMNFLAGS_ISROWID_DBCOLUMNFLAGS_ISROWVER;
    internal static int DBCOLUMNFLAGS_WRITE_DBCOLUMNFLAGS_WRITEUNKNOWN;
    internal static int DBCOLUMNFLAGS_ISNULLABLE_DBCOLUMNFLAGS_MAYBENULL;
    internal static int DBACCESSOR_ROWDATA;
    internal static int DBACCESSOR_PARAMETERDATA;
    internal static int DBPARAMTYPE_INPUT;
    internal static int DBPARAMTYPE_INPUTOUTPUT;
    internal static int DBPARAMTYPE_OUTPUT;
    internal static int DBPARAMTYPE_RETURNVALUE;
    internal static int ParameterDirectionFlag;
    internal static UInt32 DB_UNSEARCHABLE;
    internal static UInt32 DB_LIKE_ONLY;
    internal static UInt32 DB_ALL_EXCEPT_LIKE;
    internal static UInt32 DB_SEARCHABLE;
    internal static IntPtr DB_INVALID_HACCESSOR;
    internal static IntPtr DB_NULL_HCHAPTER;
    internal static IntPtr DB_NULL_HROW;
    internal static bool IsRunningOnX86;
    internal static int SizeOf_tagDBBINDING;
    internal static int SizeOf_tagDBCOLUMNINFO;
    internal static int SizeOf_tagDBLITERALINFO;
    internal static int SizeOf_tagDBPROPSET;
    internal static int SizeOf_tagDBPROP;
    internal static int SizeOf_tagDBPROPINFOSET;
    internal static int SizeOf_tagDBPROPINFO;
    internal static int SizeOf_tagDBPROPIDSET;
    internal static int SizeOf_Guid;
    internal static int SizeOf_Variant;
    internal static int OffsetOf_tagDBPROP_Status;
    internal static int OffsetOf_tagDBPROP_Value;
    internal static int OffsetOf_tagDBPROPSET_Properties;
    internal static int OffsetOf_tagDBPROPINFO_Value;
    internal static int OffsetOf_tagDBPROPIDSET_PropertySet;
    internal static int OffsetOf_tagDBLITERALINFO_it;
    internal static int OffsetOf_tagDBBINDING_obValue;
    internal static int OffsetOf_tagDBBINDING_wType;
    internal static Guid IID_NULL;
    internal static Guid IID_IUnknown;
    internal static Guid IID_IDBInitialize;
    internal static Guid IID_IDBCreateSession;
    internal static Guid IID_IDBCreateCommand;
    internal static Guid IID_ICommandText;
    internal static Guid IID_IMultipleResults;
    internal static Guid IID_IRow;
    internal static Guid IID_IRowset;
    internal static Guid IID_ISQLErrorInfo;
    internal static Guid CLSID_DataLinks;
    internal static Guid DBGUID_DEFAULT;
    internal static Guid DBGUID_ROWSET;
    internal static Guid DBGUID_ROW;
    internal static Guid DBGUID_ROWDEFAULTSTREAM;
    internal static Guid CLSID_MSDASQL;
    internal static object DBCOL_SPECIALCOL;
    internal static Char[] ErrorTrimCharacters;
    internal static string Asynchronous_Processing;
    internal static string AttachDBFileName;
    internal static string Connect_Timeout;
    internal static string Data_Source;
    internal static string File_Name;
    internal static string Initial_Catalog;
    internal static string Password;
    internal static string Persist_Security_Info;
    internal static string Provider;
    internal static string Pwd;
    internal static string User_ID;
    internal static string Current_Catalog;
    internal static string DBMS_Version;
    internal static string Properties;
    internal static string DataLinks_CLSID;
    internal static string OLEDB_SERVICES;
    internal static string DefaultDescription_MSDASQL;
    internal static string MSDASQL;
    internal static string MSDASQLdot;
    internal static string _Add;
    internal static string _Keyword;
    internal static string _Name;
    internal static string _Value;
    internal static string DBCOLUMN_BASECATALOGNAME;
    internal static string DBCOLUMN_BASECOLUMNNAME;
    internal static string DBCOLUMN_BASESCHEMANAME;
    internal static string DBCOLUMN_BASETABLENAME;
    internal static string DBCOLUMN_COLUMNSIZE;
    internal static string DBCOLUMN_FLAGS;
    internal static string DBCOLUMN_GUID;
    internal static string DBCOLUMN_IDNAME;
    internal static string DBCOLUMN_ISAUTOINCREMENT;
    internal static string DBCOLUMN_ISUNIQUE;
    internal static string DBCOLUMN_KEYCOLUMN;
    internal static string DBCOLUMN_NAME;
    internal static string DBCOLUMN_NUMBER;
    internal static string DBCOLUMN_PRECISION;
    internal static string DBCOLUMN_PROPID;
    internal static string DBCOLUMN_SCALE;
    internal static string DBCOLUMN_TYPE;
    internal static string DBCOLUMN_TYPEINFO;
    internal static string PRIMARY_KEY;
    internal static string UNIQUE;
    internal static string COLUMN_NAME;
    internal static string NULLS;
    internal static string INDEX_NAME;
    internal static string PARAMETER_NAME;
    internal static string ORDINAL_POSITION;
    internal static string PARAMETER_TYPE;
    internal static string IS_NULLABLE;
    internal static string DATA_TYPE;
    internal static string CHARACTER_MAXIMUM_LENGTH;
    internal static string NUMERIC_PRECISION;
    internal static string NUMERIC_SCALE;
    internal static string TYPE_NAME;
    internal static string ORDINAL_POSITION_ASC;
    internal static string SchemaGuids;
    internal static string Schema;
    internal static string RestrictionSupport;
    internal static string DbInfoKeywords;
    internal static string Keyword;
    private static ODB();
    internal static void CommandParameterStatus(StringBuilder builder, int index, DBStatus status);
    internal static Exception CommandParameterStatus(string value, Exception inner);
    internal static Exception UninitializedParameters(int index, OleDbType dbtype);
    internal static Exception BadStatus_ParamAcc(int index, DBBindStatus status);
    internal static Exception NoProviderSupportForParameters(string provider, Exception inner);
    internal static Exception NoProviderSupportForSProcResetParameters(string provider);
    internal static void PropsetSetFailure(StringBuilder builder, string description, OleDbPropertyStatus status);
    internal static Exception PropsetSetFailure(string value, Exception inner);
    internal static ArgumentException SchemaRowsetsNotSupported(string provider);
    internal static OleDbException NoErrorInformation(string provider, OleDbHResult hr, Exception inner);
    internal static InvalidOperationException MDACNotAvailable(Exception inner);
    internal static ArgumentException MSDASQLNotSupported();
    internal static InvalidOperationException CommandTextNotSupported(string provider, Exception inner);
    internal static InvalidOperationException PossiblePromptNotUserInteractive();
    internal static InvalidOperationException ProviderUnavailable(string provider, Exception inner);
    internal static InvalidOperationException TransactionsNotSupported(string provider, Exception inner);
    internal static ArgumentException AsynchronousNotSupported();
    internal static ArgumentException NoProviderSpecified();
    internal static ArgumentException InvalidProviderSpecified();
    internal static ArgumentException InvalidRestrictionsDbInfoKeywords(string parameter);
    internal static ArgumentException InvalidRestrictionsDbInfoLiteral(string parameter);
    internal static ArgumentException InvalidRestrictionsSchemaGuids(string parameter);
    internal static ArgumentException NotSupportedSchemaTable(Guid schema, OleDbConnection connection);
    internal static Exception InvalidOleDbType(OleDbType value);
    internal static InvalidOperationException BadAccessor();
    internal static InvalidCastException ConversionRequired();
    internal static InvalidCastException CantConvertValue();
    internal static InvalidOperationException SignMismatch(Type type);
    internal static InvalidOperationException DataOverflow(Type type);
    internal static InvalidOperationException CantCreate(Type type);
    internal static InvalidOperationException Unavailable(Type type);
    internal static InvalidOperationException UnexpectedStatusValue(DBStatus status);
    internal static InvalidOperationException GVtUnknown(int wType);
    internal static InvalidOperationException SVtUnknown(int wType);
    internal static InvalidOperationException BadStatusRowAccessor(int i, DBBindStatus rowStatus);
    internal static InvalidOperationException ThreadApartmentState(Exception innerException);
    internal static ArgumentException Fill_NotADODB(string parameter);
    internal static ArgumentException Fill_EmptyRecordSet(string parameter, Exception innerException);
    internal static ArgumentException Fill_EmptyRecord(string parameter, Exception innerException);
    internal static string NoErrorMessage(OleDbHResult errorcode);
    internal static string FailedGetDescription(OleDbHResult errorcode);
    internal static string FailedGetSource(OleDbHResult errorcode);
    internal static InvalidOperationException DBBindingGetVector();
    internal static OleDbHResult GetErrorDescription(IErrorInfo errorInfo, OleDbHResult hresult, String& message);
    internal static ArgumentException ISourcesRowsetNotSupported();
    internal static InvalidOperationException IDBInfoNotSupported();
    internal static string ELookup(OleDbHResult hr);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OleDbCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
public class System.Data.OleDb.OleDbCommand : DbCommand {
    private string _commandText;
    private CommandType _commandType;
    private int _commandTimeout;
    private UpdateRowSource _updatedRowSource;
    private bool _designTimeInvisible;
    private OleDbConnection _connection;
    private OleDbTransaction _transaction;
    private OleDbParameterCollection _parameters;
    private ICommandText _icommandText;
    private CommandBehavior commandBehavior;
    private Bindings _dbBindings;
    internal bool canceling;
    private bool _isPrepared;
    private bool _executeQuery;
    private bool _trackingForClose;
    private bool _hasDataReader;
    private IntPtr _recordsAffected;
    private int _changeID;
    private int _lastChangeID;
    private Bindings ParameterBindings { get; private set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.ADO.Design.OleDbCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("1")]
protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    [NullableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
public OleDbParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OleDbTransaction Transaction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public OleDbCommand(string cmdText);
    public OleDbCommand(string cmdText, OleDbConnection connection);
    public OleDbCommand(string cmdText, OleDbConnection connection, OleDbTransaction transaction);
    private OleDbCommand(OleDbCommand from);
    private Bindings get_ParameterBindings();
    private void set_ParameterBindings(Bindings value);
    [NullableContextAttribute("1")]
public virtual string get_CommandText();
    [NullableContextAttribute("1")]
public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OleDbConnection get_Connection();
    public void set_Connection(OleDbConnection value);
    private void ResetConnection();
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("1")]
protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    [NullableContextAttribute("1")]
public OleDbParameterCollection get_Parameters();
    private bool HasParameters();
    public OleDbTransaction get_Transaction();
    public void set_Transaction(OleDbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    private IAccessor IAccessor();
    internal ICommandProperties ICommandProperties();
    private ICommandPrepare ICommandPrepare();
    private ICommandWithParameters ICommandWithParameters();
    private void CreateAccessor();
    private void ApplyParameterBindings(ICommandWithParameters commandWithParameters, tagDBPARAMBINDINFO[] bindInfo);
    public virtual void Cancel();
    [NullableContextAttribute("1")]
public OleDbCommand Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal void CloseCommandFromConnection(bool canceling);
    internal void CloseInternal();
    internal void CloseFromDataReader(Bindings bindings);
    private void CloseInternalCommand();
    private void CloseInternalParameters();
    [NullableContextAttribute("1")]
public OleDbParameter CreateParameter();
    [NullableContextAttribute("1")]
protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public OleDbDataReader ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    [NullableContextAttribute("1")]
public OleDbDataReader ExecuteReader(CommandBehavior behavior);
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    [NullableContextAttribute("1")]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    private OleDbDataReader ExecuteReaderInternal(CommandBehavior behavior, string method);
    private int ExecuteCommand(CommandBehavior behavior, Object& executeResult);
    private int ExecuteCommandText(Object& executeResult);
    private int ExecuteCommandTextForMultpleResults(tagDBPARAMS dbParams, Object& executeResult);
    private int ExecuteCommandTextForSingleResult(tagDBPARAMS dbParams, Object& executeResult);
    private int ExecuteCommandTextForSingleRow(tagDBPARAMS dbParams, Object& executeResult);
    private void ExecuteCommandTextErrorHandling(OleDbHResult hr);
    private Exception ExecuteCommandTextSpecialErrorHandling(OleDbHResult hr, Exception e);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    private int ExecuteTableDirect(CommandBehavior behavior, Object& executeResult);
    private string ExpandCommandText();
    private string ExpandOdbcMaximumToText(string sproctext, int parameterCount);
    private static string ExpandOdbcMinimumToText(string sproctext, int parameterCount);
    private string ExpandStoredProcedureToText(string sproctext);
    private void ParameterCleanup();
    private bool InitializeCommand(CommandBehavior behavior);
    private void PropertyChanging();
    public virtual void Prepare();
    private void PrepareCommandText(int expectedExecutionCount);
    private void ProcessResults(OleDbHResult hr);
    private static void ProcessResultsNoReset(OleDbHResult hr);
    internal object GetPropertyValue(Guid propertySet, int propertyID);
    private bool PropertiesOnCommand(bool throwNotSupported);
    private DBPropSet CommandPropertySets();
    internal Bindings TakeBindingOwnerShip();
    private void ValidateConnection(string method);
    private void ValidateConnectionAndTransaction(string method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbCommandBuilder : DbCommandBuilder {
    private static Char[] s_trimChars;
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
public OleDbDataAdapter DataAdapter { get; public set; }
    [NullableContextAttribute("2")]
public OleDbCommandBuilder(OleDbDataAdapter adapter);
    private static OleDbCommandBuilder();
    [NullableContextAttribute("2")]
public OleDbDataAdapter get_DataAdapter();
    [NullableContextAttribute("2")]
public void set_DataAdapter(OleDbDataAdapter value);
    private void OleDbRowUpdatingHandler(object sender, OleDbRowUpdatingEventArgs ruevent);
    public OleDbCommand GetInsertCommand();
    public OleDbCommand GetInsertCommand(bool useColumnsForParameterNames);
    public OleDbCommand GetUpdateCommand();
    public OleDbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public OleDbCommand GetDeleteCommand();
    public OleDbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OleDbCommand command);
    private static OleDbParameter[] DeriveParametersFromStoredProcedure(OleDbConnection connection, OleDbCommand command);
    private static ParameterDirection ConvertToParameterDirection(int value);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OleDbConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OleDbConnection connection);
}
internal class System.Data.OleDb.OleDbComWrappers : ComWrappers {
    private static int S_OK;
    private static Guid IID_IErrorInfo;
    [CompilerGeneratedAttribute]
private static OleDbComWrappers <Instance>k__BackingField;
    internal static OleDbComWrappers Instance { get; }
    private static OleDbComWrappers();
    [CompilerGeneratedAttribute]
internal static OleDbComWrappers get_Instance();
    protected virtual ComInterfaceEntry* ComputeVtables(object obj, CreateComInterfaceFlags flags, Int32& count);
    protected virtual object CreateObject(IntPtr externalComObject, CreateObjectFlags flags);
    protected virtual void ReleaseObjects(IEnumerable objects);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("InfoMessage")]
public class System.Data.OleDb.OleDbConnection : DbConnection {
    private static object EventInfoMessage;
    private static DbConnectionFactory _connectionFactory;
    private DbConnectionOptions _userConnectionOptions;
    private DbConnectionPoolGroup _poolGroup;
    private DbConnectionInternal _innerConnection;
    private int _closeCount;
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RecommendedAsConfigurableAttribute("True")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string ConnectionString { get; public set; }
    [NullableAttribute("2")]
private OleDbConnectionString OleDbConnectionStringValue { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [BrowsableAttribute("True")]
public string DataSource { get; }
    internal bool IsOpen { get; }
    [NullableAttribute("2")]
unknown OleDbTransaction LocalTransaction {internal set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string Provider { get; }
    internal OleDbConnectionPoolGroupProviderInfo ProviderInfo { get; }
    public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    private static DbConnectionFactory ConnectionFactory { get; }
    [NullableAttribute("2")]
internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    [NullableAttribute("2")]
internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    [NullableAttribute("2")]
internal DbConnectionOptions UserConnectionOptions { get; }
    [NullableContextAttribute("2")]
public OleDbConnection(string connectionString);
    private OleDbConnection(OleDbConnection connection);
    private static OleDbConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    private OleDbConnectionString get_OleDbConnectionStringValue();
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    internal bool get_IsOpen();
    internal void set_LocalTransaction(OleDbTransaction value);
    public string get_Provider();
    internal OleDbConnectionPoolGroupProviderInfo get_ProviderInfo();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    [EditorBrowsableAttribute("2")]
public void ResetState();
    [NullableContextAttribute("2")]
public void add_InfoMessage(OleDbInfoMessageEventHandler value);
    [NullableContextAttribute("2")]
public void remove_InfoMessage(OleDbInfoMessageEventHandler value);
    internal ICommandText ICommandText();
    private IDBPropertiesWrapper IDBProperties();
    internal IOpenRowsetWrapper IOpenRowset();
    internal int SqlSupport();
    internal bool SupportMultipleResults();
    internal bool SupportIRow(OleDbCommand cmd);
    internal int QuotedIdentifierCase();
    public OleDbTransaction BeginTransaction();
    public OleDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string value);
    internal void CheckStateOpen(string method);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual void Close();
    public OleDbCommand CreateCommand();
    private void DisposeMe(bool disposing);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID);
    internal object GetDataSourceValue(Guid propertySet, int propertyID);
    private OleDbConnectionInternal GetOpenConnection();
    internal void GetLiteralQuotes(string method, String& quotePrefix, String& quoteSuffix);
    [NullableContextAttribute("2")]
public DataTable GetOleDbSchemaTable(Guid schema, Object[] restrictions);
    internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions);
    internal bool HasLiveReader(OleDbCommand cmd);
    internal void OnInfoMessage(IErrorInfo errorInfo, OleDbHResult errorCode);
    public virtual void Open();
    internal void SetDataSourcePropertyValue(Guid propertySet, int propertyID, string description, bool required, object value);
    internal bool SupportSchemaRowset(Guid schema);
    internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method);
    internal static Exception ProcessResults(OleDbHResult hresult, OleDbConnection connection);
    public static void ReleaseObjectPool();
    private static void ResetState(OleDbConnection connection);
    private void CopyFrom(OleDbConnection connection);
    private static DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(string value);
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
}
internal class System.Data.OleDb.OleDbConnectionFactory : DbConnectionFactory {
    private static string _metaDataXml;
    private static string _defaultMetaDataXml;
    public static OleDbConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static OleDbConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal class System.Data.OleDb.OleDbConnectionInternal : DbConnectionInternal {
    private static OleDbServicesWrapper modreq(System.Runtime.CompilerServices.IsVolatile) idataInitialize;
    private static object dataInitializeLock;
    internal OleDbConnectionString ConnectionString;
    private DataSourceWrapper _datasrcwrp;
    private SessionWrapper _sessionwrp;
    private WeakReference weakTransaction;
    private bool _unEnlistDuringDeactivate;
    internal static Char[] s_comma;
    internal OleDbConnection Connection { get; }
    internal bool HasSession { get; }
    internal OleDbTransaction LocalTransaction { get; internal set; }
    private string Provider { get; }
    public string ServerVersion { get; }
    internal OleDbConnectionInternal(OleDbConnectionString constr, OleDbConnection connection);
    private static OleDbConnectionInternal();
    internal OleDbConnection get_Connection();
    internal bool get_HasSession();
    internal OleDbTransaction get_LocalTransaction();
    internal void set_LocalTransaction(OleDbTransaction value);
    private string get_Provider();
    public virtual string get_ServerVersion();
    internal IDBPropertiesWrapper IDBProperties();
    internal IOpenRowsetWrapper IOpenRowset();
    private IDBInfoWrapper IDBInfo();
    internal IDBSchemaRowsetWrapper IDBSchemaRowset();
    internal ITransactionJoinWrapper ITransactionJoin();
    internal ICommandText ICommandText();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    public virtual void Dispose();
    public virtual void EnlistTransaction(Transaction transaction);
    internal void EnlistTransactionInternal(Transaction transaction);
    internal object GetDataSourceValue(Guid propertySet, int propertyID);
    internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID);
    internal DataTable BuildInfoLiterals();
    internal DataTable BuildInfoKeywords();
    internal bool AddInfoKeywordsToTable(DataTable table, DataColumn keyword);
    internal DataTable BuildSchemaGuids();
    internal string GetLiteralInfo(int literal);
    internal SchemaSupport[] GetSchemaRowsetInformation();
    internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions);
    internal bool HasLiveReader(OleDbCommand cmd);
    private void ProcessResults(OleDbHResult hr);
    internal bool SupportSchemaRowset(Guid schema);
    private static object CreateInstanceDataLinks();
    private static OleDbServicesWrapper GetObjectPool();
    private static void VersionCheck();
    private static void SetMTAApartmentState();
    public static void ReleaseObjectPool();
    internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method);
    internal Dictionary`2<string, OleDbPropertyInfo> GetPropertyInfo(Guid[] propertySets);
}
internal class System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    private bool _hasQuoteFix;
    private string _quotePrefix;
    private string _quoteSuffix;
    internal bool HasQuoteFix { get; }
    internal string QuotePrefix { get; }
    internal string QuoteSuffix { get; }
    internal bool get_HasQuoteFix();
    internal string get_QuotePrefix();
    internal string get_QuoteSuffix();
    internal void SetQuoteFix(string prefix, string suffix);
}
internal class System.Data.OleDb.OleDbConnectionString : DbConnectionOptions {
    internal bool PossiblePrompt;
    internal string ActualConnectionString;
    private string _expandedConnectionString;
    internal SchemaSupport[] _schemaSupport;
    internal int _sqlSupport;
    internal bool _supportMultipleResults;
    internal bool _supportIRow;
    internal bool _hasSqlSupport;
    internal bool _hasSupportMultipleResults;
    internal bool _hasSupportIRow;
    private int _oledbServices;
    internal IUnknownQueryInterface DangerousDataSourceIUnknownQueryInterface;
    internal IDBInitializeInitialize DangerousIDBInitializeInitialize;
    internal IDBCreateSessionCreateSession DangerousIDBCreateSessionCreateSession;
    internal IDBCreateCommandCreateCommand DangerousIDBCreateCommandCreateCommand;
    internal bool HaveQueriedForCreateCommand;
    internal int ConnectTimeout { get; }
    internal string DataSource { get; }
    internal string InitialCatalog { get; }
    internal string Provider { get; }
    internal int OleDbServices { get; }
    internal SchemaSupport[] SchemaSupport { get; internal set; }
    private static int UdlPoolSize { get; }
    internal OleDbConnectionString(string connectionString, bool validate);
    internal int get_ConnectTimeout();
    internal string get_DataSource();
    internal string get_InitialCatalog();
    internal string get_Provider();
    internal int get_OleDbServices();
    internal SchemaSupport[] get_SchemaSupport();
    internal void set_SchemaSupport(SchemaSupport[] value);
    protected internal virtual string Expand();
    internal int GetSqlSupport(OleDbConnection connection);
    internal bool GetSupportIRow(OleDbCommand command);
    internal bool GetSupportMultipleResults(OleDbConnection connection);
    private static int get_UdlPoolSize();
    private static string LoadStringFromStorage(string udlfilename);
    private static string LoadStringFromFileStorage(string udlfilename);
    private string ValidateConnectionString(string connectionString);
    internal static bool IsMSDASQL(string progid);
    private static void ValidateProvider(string progid);
    internal static void ReleaseObjectPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("Provider")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbConnectionStringBuilderConverter")]
public class System.Data.OleDb.OleDbConnectionStringBuilder : DbConnectionStringBuilder {
    private static String[] s_validKeywords;
    private static Dictionary`2<string, Keywords> s_keywords;
    private String[] _knownKeywords;
    private Dictionary`2<string, OleDbPropertyInfo> _propertyInfo;
    private string _fileName;
    private string _dataSource;
    private string _provider;
    private int _oleDbServices;
    private bool _persistSecurityInfo;
    public object Item { get; public set; }
    [DisplayNameAttribute("Data Source")]
[RefreshPropertiesAttribute("1")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("File Name")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string FileName { get; public set; }
    [DisplayNameAttribute("OLE DB Services")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbServicesConverter")]
public int OleDbServices { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Provider")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbProviderConverter")]
public string Provider { get; public set; }
    public ICollection Keys { get; }
    [NullableContextAttribute("2")]
public OleDbConnectionStringBuilder(string connectionString);
    private static OleDbConnectionStringBuilder();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_OleDbServices();
    public void set_OleDbServices(int value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual ICollection get_Keys();
    public virtual bool ContainsKey(string keyword);
    private static bool ConvertToBoolean(object value);
    private static int ConvertToInt32(object value);
    private static string ConvertToString(object value);
    public virtual void Clear();
    private object GetAt(Keywords index);
    public virtual bool Remove(string keyword);
    private void Reset(Keywords index);
    private void ClearPropertyDescriptors();
    private void RestartProvider();
    private void SetValue(string keyword, bool value);
    private void SetValue(string keyword, int value);
    private void SetValue(string keyword, string value);
    public virtual bool TryGetValue(string keyword, Object& value);
    private Dictionary`2<string, OleDbPropertyInfo> GetProviderInfo(string provider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.OleDb.OleDbDataAdapter : DbDataAdapter {
    private static object EventRowUpdated;
    private static object EventRowUpdating;
    private OleDbCommand _deleteCommand;
    private OleDbCommand _insertCommand;
    private OleDbCommand _selectCommand;
    private OleDbCommand _updateCommand;
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public OleDbDataAdapter(OleDbCommand selectCommand);
    public OleDbDataAdapter(string selectCommandText, string selectConnectionString);
    public OleDbDataAdapter(string selectCommandText, OleDbConnection selectConnection);
    private OleDbDataAdapter(OleDbDataAdapter from);
    private static OleDbDataAdapter();
    public OleDbCommand get_DeleteCommand();
    public void set_DeleteCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public OleDbCommand get_InsertCommand();
    public void set_InsertCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public OleDbCommand get_SelectCommand();
    public void set_SelectCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public OleDbCommand get_UpdateCommand();
    public void set_UpdateCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(OleDbRowUpdatedEventHandler value);
    public void remove_RowUpdated(OleDbRowUpdatedEventHandler value);
    public void add_RowUpdating(OleDbRowUpdatingEventHandler value);
    public void remove_RowUpdating(OleDbRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    internal static void FillDataTable(OleDbDataReader dataReader, DataTable[] dataTables);
    [NullableContextAttribute("1")]
public int Fill(DataTable dataTable, object ADODBRecordSet);
    [NullableContextAttribute("1")]
public int Fill(DataSet dataSet, object ADODBRecordSet, string srcTable);
    private int FillFromADODB(object data, object adodb, string srcTable, bool multipleResults);
    private int FillFromRecordset(object data, ADORecordsetConstruction recordset, string srcTable, Boolean& incrementResultCount);
    private int FillFromRecord(object data, ADORecordConstruction record, string srcTable);
    private static void FillClose(bool isrecordset, object value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private static string GetSourceTableName(string srcTable, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Data.OleDb.OleDbDataReader : DbDataReader {
    private CommandBehavior _commandBehavior;
    private OleDbConnection _connection;
    private OleDbCommand _command;
    private Bindings _parameterBindings;
    private IMultipleResults _imultipleResults;
    private IRowset _irowset;
    private IRow _irow;
    private ChapterHandle _chapterHandle;
    private int _depth;
    private bool _isClosed;
    private bool _isRead;
    private bool _hasRows;
    private bool _hasRowsReadCheck;
    private long _sequentialBytesRead;
    private int _sequentialOrdinal;
    private Bindings[] _bindings;
    private int _nextAccessorForRetrieval;
    private int _nextValueForRetrieval;
    private IntPtr _recordsAffected;
    private bool _useIColumnsRowset;
    private bool _sequentialAccess;
    private bool _singleRow;
    private IntPtr _rowHandleFetchCount;
    private RowHandleBuffer _rowHandleNativeBuffer;
    private IntPtr _rowFetchedCount;
    private int _currentRow;
    private DataTable _dbSchemaTable;
    private int _visibleFieldCount;
    private MetaData[] _metadata;
    private FieldNameLookup _fieldNameLookup;
    [NullableAttribute("2")]
internal OleDbCommand Command { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MetaData[] MetaData { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    internal OleDbDataReader(OleDbConnection connection, OleDbCommand command, int depth, CommandBehavior commandBehavior);
    private void Initialize();
    internal void InitializeIMultipleResults(object result);
    internal void InitializeIRowset(object result, ChapterHandle chapterHandle, IntPtr recordsAffected);
    internal void InitializeIRow(object result, IntPtr recordsAffected);
    internal OleDbCommand get_Command();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    private MetaData[] get_MetaData();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    private IAccessor IAccessor();
    private IRowsetInfo IRowsetInfo();
    private IRowset IRowset();
    private IRow IRow();
    [NullableContextAttribute("2")]
public virtual DataTable GetSchemaTable();
    internal void BuildMetaInfo();
    private DataTable BuildSchemaTable(MetaData[] metadata);
    private void BuildSchemaTableInfo(object handle, bool filterITypeInfo, bool filterChapters);
    private void BuildSchemaTableInfoTable(int columnCount, IntPtr columnInfos, bool filterITypeInfo, bool filterChapters);
    private void BuildSchemaTableRowset(object handle);
    public virtual void Close();
    internal void CloseReaderFromConnection(bool canceling);
    private void DisposeManagedRowset();
    private void DisposeNativeMultipleResults();
    private void DisposeNativeRowset();
    private void DisposeNativeRow();
    private void DisposeOpenResults();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    private ColumnBinding DoSequentialCheck(int ordinal, long dataIndex, string method);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int ordinal);
    [EditorBrowsableAttribute("2")]
public OleDbDataReader GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    internal OleDbDataReader ResetChapter(int bindingIndex, int index, RowBinding rowbinding, int valueOffset);
    private OleDbDataReader GetDataForReader(IntPtr ordinal, RowBinding rowbinding, int valueOffset);
    public virtual string GetDataTypeName(int index);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int index);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int index);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    private MetaData DoValueCheck(int ordinal);
    private ColumnBinding GetColumnBinding(int ordinal);
    private ColumnBinding GetValueBinding(MetaData info);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    private bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool IsDBNull(int ordinal);
    private void ProcessResults(OleDbHResult hr);
    private static IntPtr AddRecordsAffected(IntPtr recordsAffected, IntPtr affected);
    public virtual int get_VisibleFieldCount();
    internal void HasRowsRead();
    internal static OleDbException NextResults(IMultipleResults imultipleResults, OleDbConnection connection, OleDbCommand command, IntPtr& recordsAffected);
    private static void NextResultsInfinite();
    public virtual bool NextResult();
    public virtual bool Read();
    private bool ReadRow();
    private bool ReadRowset();
    private void ReleaseCurrentRow();
    private void CreateAccessors(bool allowMultipleAccessor);
    private Bindings[] CreateBindingsFromMetaData(bool allowMultipleAccessor);
    private void GetRowHandles();
    private void GetRowDataFromHandle();
    private void ReleaseRowHandles();
    private object GetPropertyValue(int propertyId);
    private object GetPropertyOnRowset(Guid propertySet, int propertyID);
    private void GetRowValue();
    private static int IndexOf(Hashtable hash, string name);
    private void AppendSchemaInfo();
    private int AppendSchemaPrimaryKey(Hashtable baseColumnNames, Object[] restrictions);
    private void AppendSchemaUniqueIndexAsKey(Hashtable baseColumnNames, Object[] restrictions);
    private MetaData FindMetaData(string name);
    internal void DumpToSchemaTable(IRowset rowset);
    internal static void GenerateSchemaTable(OleDbDataReader dataReader, object handle, CommandBehavior behavior);
    private static bool DoColumnDropFilter(int flags);
    private static bool IsLong(int flags);
    private static bool IsFixed(int flags);
    private static bool IsRowVersion(int flags);
    private static bool AllowDBNull(int flags);
    private static bool AllowDBNullMaybeNull(int flags);
    private static bool IsReadOnly(int flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbEnumerator : object {
    public DataTable GetElements();
    public static OleDbDataReader GetEnumerator(Type type);
    internal static OleDbDataReader GetEnumeratorFromType(Type type);
    private static OleDbDataReader GetEnumeratorReader(object value);
    public static OleDbDataReader GetRootEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbError : object {
    private string message;
    private string source;
    private string sqlState;
    private int nativeError;
    public string Message { get; }
    public int NativeError { get; }
    public string Source { get; }
    public string SQLState { get; }
    internal OleDbError(IErrorRecords errorRecords, int index);
    public string get_Message();
    public int get_NativeError();
    public string get_Source();
    public string get_SQLState();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Data.OleDb.OleDbErrorCollection : object {
    private ArrayList items;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public OleDbError Item { get; }
    internal OleDbErrorCollection(IErrorInfo errorInfo);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual int get_Count();
    public OleDbError get_Item(int index);
    internal void AddRange(ICollection c);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(OleDbError[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbException : DbException {
    private OleDbErrorCollection oledbErrors;
    [TypeConverterAttribute("System.Data.OleDb.OleDbException/ErrorCodeConverter")]
public int ErrorCode { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public OleDbErrorCollection Errors { get; }
    internal OleDbException(string message, OleDbHResult errorCode, Exception inner);
    internal OleDbException(OleDbException previous, Exception inner);
    private OleDbException(string message, Exception inner, string source, OleDbHResult errorCode, OleDbErrorCollection errors);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    internal static OleDbException CreateException(IErrorInfo errorInfo, OleDbHResult errorCode, Exception inner);
    internal static OleDbException CombineExceptions(List`1<OleDbException> exceptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbFactory : DbProviderFactory {
    public static OleDbFactory Instance;
    private static OleDbFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
internal enum System.Data.OleDb.OleDbHResult : Enum {
    public int value__;
    public static OleDbHResult CO_E_CLASSSTRING;
    public static OleDbHResult REGDB_E_CLASSNOTREG;
    public static OleDbHResult CO_E_NOTINITIALIZED;
    public static OleDbHResult S_OK;
    public static OleDbHResult S_FALSE;
    public static OleDbHResult E_UNEXPECTED;
    public static OleDbHResult E_NOTIMPL;
    public static OleDbHResult E_OUTOFMEMORY;
    public static OleDbHResult E_INVALIDARG;
    public static OleDbHResult E_NOINTERFACE;
    public static OleDbHResult E_POINTER;
    public static OleDbHResult E_HANDLE;
    public static OleDbHResult E_ABORT;
    public static OleDbHResult E_FAIL;
    public static OleDbHResult E_ACCESSDENIED;
    public static OleDbHResult DB_E_BADACCESSORHANDLE;
    public static OleDbHResult DB_E_ROWLIMITEXCEEDED;
    public static OleDbHResult DB_E_REOLEDBNLYACCESSOR;
    public static OleDbHResult DB_E_SCHEMAVIOLATION;
    public static OleDbHResult DB_E_BADROWHANDLE;
    public static OleDbHResult DB_E_OBJECTOPEN;
    public static OleDbHResult DB_E_BADCHAPTER;
    public static OleDbHResult DB_E_CANTCONVERTVALUE;
    public static OleDbHResult DB_E_BADBINDINFO;
    public static OleDbHResult DB_SEC_E_PERMISSIONDENIED;
    public static OleDbHResult DB_E_NOTAREFERENCECOLUMN;
    public static OleDbHResult DB_E_LIMITREJECTED;
    public static OleDbHResult DB_E_NOCOMMAND;
    public static OleDbHResult DB_E_COSTLIMIT;
    public static OleDbHResult DB_E_BADBOOKMARK;
    public static OleDbHResult DB_E_BADLOCKMODE;
    public static OleDbHResult DB_E_PARAMNOTOPTIONAL;
    public static OleDbHResult DB_E_BADCOLUMNID;
    public static OleDbHResult DB_E_BADRATIO;
    public static OleDbHResult DB_E_BADVALUES;
    public static OleDbHResult DB_E_ERRORSINCOMMAND;
    public static OleDbHResult DB_E_CANTCANCEL;
    public static OleDbHResult DB_E_DIALECTNOTSUPPORTED;
    public static OleDbHResult DB_E_DUPLICATEDATASOURCE;
    public static OleDbHResult DB_E_CANNOTRESTART;
    public static OleDbHResult DB_E_NOTFOUND;
    public static OleDbHResult DB_E_NEWLYINSERTED;
    public static OleDbHResult DB_E_CANNOTFREE;
    public static OleDbHResult DB_E_GOALREJECTED;
    public static OleDbHResult DB_E_UNSUPPORTEDCONVERSION;
    public static OleDbHResult DB_E_BADSTARTPOSITION;
    public static OleDbHResult DB_E_NOQUERY;
    public static OleDbHResult DB_E_NOTREENTRANT;
    public static OleDbHResult DB_E_ERRORSOCCURRED;
    public static OleDbHResult DB_E_NOAGGREGATION;
    public static OleDbHResult DB_E_DELETEDROW;
    public static OleDbHResult DB_E_CANTFETCHBACKWARDS;
    public static OleDbHResult DB_E_ROWSNOTRELEASED;
    public static OleDbHResult DB_E_BADSTORAGEFLAG;
    public static OleDbHResult DB_E_BADCOMPAREOP;
    public static OleDbHResult DB_E_BADSTATUSVALUE;
    public static OleDbHResult DB_E_CANTSCROLLBACKWARDS;
    public static OleDbHResult DB_E_BADREGIONHANDLE;
    public static OleDbHResult DB_E_NONCONTIGUOUSRANGE;
    public static OleDbHResult DB_E_INVALIDTRANSITION;
    public static OleDbHResult DB_E_NOTASUBREGION;
    public static OleDbHResult DB_E_MULTIPLESTATEMENTS;
    public static OleDbHResult DB_E_INTEGRITYVIOLATION;
    public static OleDbHResult DB_E_BADTYPENAME;
    public static OleDbHResult DB_E_ABORTLIMITREACHED;
    public static OleDbHResult DB_E_ROWSETINCOMMAND;
    public static OleDbHResult DB_E_CANTTRANSLATE;
    public static OleDbHResult DB_E_DUPLICATEINDEXID;
    public static OleDbHResult DB_E_NOINDEX;
    public static OleDbHResult DB_E_INDEXINUSE;
    public static OleDbHResult DB_E_NOTABLE;
    public static OleDbHResult DB_E_CONCURRENCYVIOLATION;
    public static OleDbHResult DB_E_BADCOPY;
    public static OleDbHResult DB_E_BADPRECISION;
    public static OleDbHResult DB_E_BADSCALE;
    public static OleDbHResult DB_E_BADTABLEID;
    public static OleDbHResult DB_E_BADTYPE;
    public static OleDbHResult DB_E_DUPLICATECOLUMNID;
    public static OleDbHResult DB_E_DUPLICATETABLEID;
    public static OleDbHResult DB_E_TABLEINUSE;
    public static OleDbHResult DB_E_NOLOCALE;
    public static OleDbHResult DB_E_BADRECORDNUM;
    public static OleDbHResult DB_E_BOOKMARKSKIPPED;
    public static OleDbHResult DB_E_BADPROPERTYVALUE;
    public static OleDbHResult DB_E_INVALID;
    public static OleDbHResult DB_E_BADACCESSORFLAGS;
    public static OleDbHResult DB_E_BADSTORAGEFLAGS;
    public static OleDbHResult DB_E_BYREFACCESSORNOTSUPPORTED;
    public static OleDbHResult DB_E_NULLACCESSORNOTSUPPORTED;
    public static OleDbHResult DB_E_NOTPREPARED;
    public static OleDbHResult DB_E_BADACCESSORTYPE;
    public static OleDbHResult DB_E_WRITEONLYACCESSOR;
    public static OleDbHResult DB_SEC_E_AUTH_FAILED;
    public static OleDbHResult DB_E_CANCELED;
    public static OleDbHResult DB_E_CHAPTERNOTRELEASED;
    public static OleDbHResult DB_E_BADSOURCEHANDLE;
    public static OleDbHResult DB_E_PARAMUNAVAILABLE;
    public static OleDbHResult DB_E_ALREADYINITIALIZED;
    public static OleDbHResult DB_E_NOTSUPPORTED;
    public static OleDbHResult DB_E_MAXPENDCHANGESEXCEEDED;
    public static OleDbHResult DB_E_BADORDINAL;
    public static OleDbHResult DB_E_PENDINGCHANGES;
    public static OleDbHResult DB_E_DATAOVERFLOW;
    public static OleDbHResult DB_E_BADHRESULT;
    public static OleDbHResult DB_E_BADLOOKUPID;
    public static OleDbHResult DB_E_BADDYNAMICERRORID;
    public static OleDbHResult DB_E_PENDINGINSERT;
    public static OleDbHResult DB_E_BADCONVERTFLAG;
    public static OleDbHResult DB_E_BADPARAMETERNAME;
    public static OleDbHResult DB_E_MULTIPLESTORAGE;
    public static OleDbHResult DB_E_CANTFILTER;
    public static OleDbHResult DB_E_CANTORDER;
    public static OleDbHResult MD_E_BADTUPLE;
    public static OleDbHResult MD_E_BADCOORDINATE;
    public static OleDbHResult MD_E_INVALIDAXIS;
    public static OleDbHResult MD_E_INVALIDCELLRANGE;
    public static OleDbHResult DB_E_NOCOLUMN;
    public static OleDbHResult DB_E_COMMANDNOTPERSISTED;
    public static OleDbHResult DB_E_DUPLICATEID;
    public static OleDbHResult DB_E_OBJECTCREATIONLIMITREACHED;
    public static OleDbHResult DB_E_BADINDEXID;
    public static OleDbHResult DB_E_BADINITSTRING;
    public static OleDbHResult DB_E_NOPROVIDERSREGISTERED;
    public static OleDbHResult DB_E_MISMATCHEDPROVIDER;
    public static OleDbHResult DB_E_BADCOMMANDID;
    public static OleDbHResult SEC_E_BADTRUSTEEID;
    public static OleDbHResult SEC_E_NOTRUSTEEID;
    public static OleDbHResult SEC_E_NOMEMBERSHIPSUPPORT;
    public static OleDbHResult SEC_E_INVALIDOBJECT;
    public static OleDbHResult SEC_E_NOOWNER;
    public static OleDbHResult SEC_E_INVALIDACCESSENTRYLIST;
    public static OleDbHResult SEC_E_INVALIDOWNER;
    public static OleDbHResult SEC_E_INVALIDACCESSENTRY;
    public static OleDbHResult DB_E_BADCONSTRAINTTYPE;
    public static OleDbHResult DB_E_BADCONSTRAINTFORM;
    public static OleDbHResult DB_E_BADDEFERRABILITY;
    public static OleDbHResult DB_E_BADMATCHTYPE;
    public static OleDbHResult DB_E_BADUPDATEDELETERULE;
    public static OleDbHResult DB_E_BADCONSTRAINTID;
    public static OleDbHResult DB_E_BADCOMMANDFLAGS;
    public static OleDbHResult DB_E_OBJECTMISMATCH;
    public static OleDbHResult DB_E_NOSOURCEOBJECT;
    public static OleDbHResult DB_E_RESOURCELOCKED;
    public static OleDbHResult DB_E_NOTCOLLECTION;
    public static OleDbHResult DB_E_REOLEDBNLY;
    public static OleDbHResult DB_E_ASYNCNOTSUPPORTED;
    public static OleDbHResult DB_E_CANNOTCONNECT;
    public static OleDbHResult DB_E_TIMEOUT;
    public static OleDbHResult DB_E_RESOURCEEXISTS;
    public static OleDbHResult DB_E_RESOURCEOUTOFSCOPE;
    public static OleDbHResult DB_E_DROPRESTRICTED;
    public static OleDbHResult DB_E_DUPLICATECONSTRAINTID;
    public static OleDbHResult DB_E_OUTOFSPACE;
    public static OleDbHResult DB_SEC_E_SAFEMODE_DENIED;
    public static OleDbHResult DB_S_ROWLIMITEXCEEDED;
    public static OleDbHResult DB_S_COLUMNTYPEMISMATCH;
    public static OleDbHResult DB_S_TYPEINFOOVERRIDDEN;
    public static OleDbHResult DB_S_BOOKMARKSKIPPED;
    public static OleDbHResult DB_S_NONEXTROWSET;
    public static OleDbHResult DB_S_ENDOFROWSET;
    public static OleDbHResult DB_S_COMMANDREEXECUTED;
    public static OleDbHResult DB_S_BUFFERFULL;
    public static OleDbHResult DB_S_NORESULT;
    public static OleDbHResult DB_S_CANTRELEASE;
    public static OleDbHResult DB_S_GOALCHANGED;
    public static OleDbHResult DB_S_UNWANTEDOPERATION;
    public static OleDbHResult DB_S_DIALECTIGNORED;
    public static OleDbHResult DB_S_UNWANTEDPHASE;
    public static OleDbHResult DB_S_UNWANTEDREASON;
    public static OleDbHResult DB_S_ASYNCHRONOUS;
    public static OleDbHResult DB_S_COLUMNSCHANGED;
    public static OleDbHResult DB_S_ERRORSRETURNED;
    public static OleDbHResult DB_S_BADROWHANDLE;
    public static OleDbHResult DB_S_DELETEDROW;
    public static OleDbHResult DB_S_TOOMANYCHANGES;
    public static OleDbHResult DB_S_STOPLIMITREACHED;
    public static OleDbHResult DB_S_LOCKUPGRADED;
    public static OleDbHResult DB_S_PROPERTIESCHANGED;
    public static OleDbHResult DB_S_ERRORSOCCURRED;
    public static OleDbHResult DB_S_PARAMUNAVAILABLE;
    public static OleDbHResult DB_S_MULTIPLECHANGES;
    public static OleDbHResult DB_S_NOTSINGLETON;
    public static OleDbHResult DB_S_NOROWSPECIFICCOLUMNS;
    public static OleDbHResult XACT_E_FIRST;
    public static OleDbHResult XACT_E_LAST;
    public static OleDbHResult XACT_S_FIRST;
    public static OleDbHResult XACT_S_LAST;
    public static OleDbHResult XACT_E_ALREADYOTHERSINGLEPHASE;
    public static OleDbHResult XACT_E_CANTRETAIN;
    public static OleDbHResult XACT_E_COMMITFAILED;
    public static OleDbHResult XACT_E_COMMITPREVENTED;
    public static OleDbHResult XACT_E_HEURISTICABORT;
    public static OleDbHResult XACT_E_HEURISTICCOMMIT;
    public static OleDbHResult XACT_E_HEURISTICDAMAGE;
    public static OleDbHResult XACT_E_HEURISTICDANGER;
    public static OleDbHResult XACT_E_ISOLATIONLEVEL;
    public static OleDbHResult XACT_E_NOASYNC;
    public static OleDbHResult XACT_E_NOENLIST;
    public static OleDbHResult XACT_E_NOISORETAIN;
    public static OleDbHResult XACT_E_NORESOURCE;
    public static OleDbHResult XACT_E_NOTCURRENT;
    public static OleDbHResult XACT_E_NOTRANSACTION;
    public static OleDbHResult XACT_E_NOTSUPPORTED;
    public static OleDbHResult XACT_E_UNKNOWNRMGRID;
    public static OleDbHResult XACT_E_WRONGSTATE;
    public static OleDbHResult XACT_E_WRONGUOW;
    public static OleDbHResult XACT_E_XTIONEXISTS;
    public static OleDbHResult XACT_E_NOIMPORTOBJECT;
    public static OleDbHResult XACT_E_INVALIDCOOKIE;
    public static OleDbHResult XACT_E_INDOUBT;
    public static OleDbHResult XACT_E_NOTIMEOUT;
    public static OleDbHResult XACT_E_ALREADYINPROGRESS;
    public static OleDbHResult XACT_E_ABORTED;
    public static OleDbHResult XACT_E_LOGFULL;
    public static OleDbHResult XACT_E_TMNOTAVAILABLE;
    public static OleDbHResult XACT_E_CONNECTION_DOWN;
    public static OleDbHResult XACT_E_CONNECTION_DENIED;
    public static OleDbHResult XACT_E_REENLISTTIMEOUT;
    public static OleDbHResult XACT_E_TIP_CONNECT_FAILED;
    public static OleDbHResult XACT_E_TIP_PROTOCOL_ERROR;
    public static OleDbHResult XACT_E_TIP_PULL_FAILED;
    public static OleDbHResult XACT_E_DEST_TMNOTAVAILABLE;
    public static OleDbHResult XACT_E_CLERKNOTFOUND;
    public static OleDbHResult XACT_E_CLERKEXISTS;
    public static OleDbHResult XACT_E_RECOVERYINPROGRESS;
    public static OleDbHResult XACT_E_TRANSACTIONCLOSED;
    public static OleDbHResult XACT_E_INVALIDLSN;
    public static OleDbHResult XACT_E_REPLAYREQUEST;
    public static OleDbHResult XACT_S_ASYNC;
    public static OleDbHResult XACT_S_DEFECT;
    public static OleDbHResult XACT_S_REOLEDBNLY;
    public static OleDbHResult XACT_S_SOMENORETAIN;
    public static OleDbHResult XACT_S_OKINFORM;
    public static OleDbHResult XACT_S_MADECHANGESCONTENT;
    public static OleDbHResult XACT_S_MADECHANGESINFORM;
    public static OleDbHResult XACT_S_ALLNORETAIN;
    public static OleDbHResult XACT_S_ABORTING;
    public static OleDbHResult XACT_S_SINGLEPHASE;
    public static OleDbHResult STG_E_INVALIDFUNCTION;
    public static OleDbHResult STG_E_FILENOTFOUND;
    public static OleDbHResult STG_E_PATHNOTFOUND;
    public static OleDbHResult STG_E_TOOMANYOPENFILES;
    public static OleDbHResult STG_E_ACCESSDENIED;
    public static OleDbHResult STG_E_INVALIDHANDLE;
    public static OleDbHResult STG_E_INSUFFICIENTMEMORY;
    public static OleDbHResult STG_E_INVALIDPOINTER;
    public static OleDbHResult STG_E_NOMOREFILES;
    public static OleDbHResult STG_E_DISKISWRITEPROTECTED;
    public static OleDbHResult STG_E_SEEKERROR;
    public static OleDbHResult STG_E_WRITEFAULT;
    public static OleDbHResult STG_E_READFAULT;
    public static OleDbHResult STG_E_SHAREVIOLATION;
    public static OleDbHResult STG_E_LOCKVIOLATION;
    public static OleDbHResult STG_E_FILEALREADYEXISTS;
    public static OleDbHResult STG_E_INVALIDPARAMETER;
    public static OleDbHResult STG_E_MEDIUMFULL;
    public static OleDbHResult STG_E_PROPSETMISMATCHED;
    public static OleDbHResult STG_E_ABNORMALAPIEXIT;
    public static OleDbHResult STG_E_INVALIDHEADER;
    public static OleDbHResult STG_E_INVALIDNAME;
    public static OleDbHResult STG_E_UNKNOWN;
    public static OleDbHResult STG_E_UNIMPLEMENTEDFUNCTION;
    public static OleDbHResult STG_E_INVALIDFLAG;
    public static OleDbHResult STG_E_INUSE;
    public static OleDbHResult STG_E_NOTCURRENT;
    public static OleDbHResult STG_E_REVERTED;
    public static OleDbHResult STG_E_CANTSAVE;
    public static OleDbHResult STG_E_OLDFORMAT;
    public static OleDbHResult STG_E_OLDDLL;
    public static OleDbHResult STG_E_SHAREREQUIRED;
    public static OleDbHResult STG_E_NOTFILEBASEDSTORAGE;
    public static OleDbHResult STG_E_EXTANTMARSHALLINGS;
    public static OleDbHResult STG_E_DOCFILECORRUPT;
    public static OleDbHResult STG_E_BADBASEADDRESS;
    public static OleDbHResult STG_E_INCOMPLETE;
    public static OleDbHResult STG_E_TERMINATED;
    public static OleDbHResult STG_S_CONVERTED;
    public static OleDbHResult STG_S_BLOCK;
    public static OleDbHResult STG_S_RETRYNOW;
    public static OleDbHResult STG_S_MONITORING;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbInfoMessageEventArgs : EventArgs {
    private OleDbException exception;
    public int ErrorCode { get; }
    public OleDbErrorCollection Errors { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public string Source { get; }
    internal OleDbInfoMessageEventArgs(OleDbException exception);
    public int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    public string get_Message();
    [NullableContextAttribute("2")]
public string get_Source();
    public virtual string ToString();
}
public class System.Data.OleDb.OleDbInfoMessageEventHandler : MulticastDelegate {
    public OleDbInfoMessageEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OleDbInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.OleDb.OleDbLiteral : Enum {
    public int value__;
    public static OleDbLiteral Invalid;
    public static OleDbLiteral Binary_Literal;
    public static OleDbLiteral Catalog_Name;
    public static OleDbLiteral Catalog_Separator;
    public static OleDbLiteral Char_Literal;
    public static OleDbLiteral Column_Alias;
    public static OleDbLiteral Column_Name;
    public static OleDbLiteral Correlation_Name;
    public static OleDbLiteral Cursor_Name;
    public static OleDbLiteral Escape_Percent_Prefix;
    public static OleDbLiteral Escape_Underscore_Prefix;
    public static OleDbLiteral Index_Name;
    public static OleDbLiteral Like_Percent;
    public static OleDbLiteral Like_Underscore;
    public static OleDbLiteral Procedure_Name;
    public static OleDbLiteral Quote_Prefix;
    public static OleDbLiteral Schema_Name;
    public static OleDbLiteral Table_Name;
    public static OleDbLiteral Text_Command;
    public static OleDbLiteral User_Name;
    public static OleDbLiteral View_Name;
    public static OleDbLiteral Cube_Name;
    public static OleDbLiteral Dimension_Name;
    public static OleDbLiteral Hierarchy_Name;
    public static OleDbLiteral Level_Name;
    public static OleDbLiteral Member_Name;
    public static OleDbLiteral Property_Name;
    public static OleDbLiteral Schema_Separator;
    public static OleDbLiteral Quote_Suffix;
    public static OleDbLiteral Escape_Percent_Suffix;
    public static OleDbLiteral Escape_Underscore_Suffix;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Data.OleDb.OleDbMetaDataCollectionNames : object {
    public static string Catalogs;
    public static string Collations;
    public static string Columns;
    public static string Indexes;
    public static string Procedures;
    public static string ProcedureColumns;
    public static string ProcedureParameters;
    public static string Tables;
    public static string Views;
    private static OleDbMetaDataCollectionNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Data.OleDb.OleDbMetaDataColumnNames : object {
    public static string BooleanFalseLiteral;
    public static string BooleanTrueLiteral;
    public static string NativeDataType;
    public static string DateTimeDigits;
    private static OleDbMetaDataColumnNames();
}
internal class System.Data.OleDb.OleDbMetaDataFactory : DbMetaDataFactory {
    private static string _collectionName;
    private static string _populationMechanism;
    private static string _prepareCollection;
    private SchemaRowsetName[] _schemaMapping;
    internal OleDbMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized, SchemaSupport[] schemaSupport);
    private static string BuildRegularExpression(string invalidChars, string invalidStartingChars);
    private DataTable GetDataSourceInformationTable(OleDbConnection connection, OleDbConnectionInternal internalConnection);
    private DataTable GetDataTypesTable(OleDbConnection connection);
    private DataTable GetReservedWordsTable(OleDbConnectionInternal internalConnection);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private static void SetIdentifierCase(string columnName, int propertyID, DataRow row, OleDbConnection connection);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Data.OleDb.OleDbParameter/OleDbParameterConverter")]
public class System.Data.OleDb.OleDbParameter : DbParameter {
    private object _value;
    private object _parent;
    private ParameterDirection _direction;
    private int _size;
    private string _sourceColumn;
    private DataRowVersion _sourceVersion;
    private bool _sourceColumnNullMapping;
    private bool _isNullable;
    private object _coercedValue;
    internal static int Offset;
    private NativeDBType _metaType;
    private int _changeID;
    private string _parameterName;
    private byte _precision;
    private byte _scale;
    private bool _hasScale;
    private NativeDBType _coerceMetaType;
    private object CoercedValue { get; private set; }
    [RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public int Size { get; public set; }
    [NullableAttribute("1")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    internal int ChangeID { get; }
    public DbType DbType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public OleDbType OleDbType { get; public set; }
    [NullableAttribute("1")]
public string ParameterName { get; public set; }
    [DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    [DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    private OleDbParameter(OleDbParameter source);
    public OleDbParameter(string name, object value);
    public OleDbParameter(string name, OleDbType dataType);
    public OleDbParameter(string name, OleDbType dataType, int size);
    public OleDbParameter(string name, OleDbType dataType, int size, string srcColumn);
    [EditorBrowsableAttribute("2")]
public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    [EditorBrowsableAttribute("2")]
public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private void ResetSize();
    private bool ShouldSerializeSize();
    [NullableContextAttribute("1")]
public virtual string get_SourceColumn();
    [NullableContextAttribute("1")]
public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private void CloneHelperCore(OleDbParameter destination);
    internal void CopyTo(DbParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private static byte ValuePrecisionCore(object value);
    private static byte ValueScaleCore(object value);
    private static int ValueSizeCore(object value);
    internal int get_ChangeID();
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public OleDbType get_OleDbType();
    public void set_OleDbType(OleDbType value);
    private bool ShouldSerializeOleDbType();
    public void ResetOleDbType();
    [NullableContextAttribute("1")]
public virtual string get_ParameterName();
    [NullableContextAttribute("1")]
public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    private bool ShouldSerializePrecision();
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    private bool ShouldSerializeScale(byte scale);
    private sealed virtual override object System.ICloneable.Clone();
    private void CloneHelper(OleDbParameter destination);
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal bool BindParameter(int index, Bindings bindings);
    private static object CoerceValue(object value, NativeDBType destinationType);
    private NativeDBType GetBindType(object value);
    internal object GetCoercedValue();
    internal bool IsParameterComputed();
    internal void Prepare(OleDbCommand cmd);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    private static byte ValuePrecision(object value);
    private static byte ValueScale(object value);
    private static int ValueSize(object value);
    private static int GetBindDirection(ParameterDirection direction);
    private static int GetBindFlags(ParameterDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.OleDb.OleDbParameterCollection : DbParameterCollection {
    private int _changeID;
    private static Type s_itemType;
    private List`1<OleDbParameter> _items;
    internal int ChangeID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OleDbParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OleDbParameter Item { get; public set; }
    public int Count { get; }
    private List`1<OleDbParameter> InnerList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static OleDbParameterCollection();
    internal int get_ChangeID();
    public OleDbParameter get_Item(int index);
    public void set_Item(int index, OleDbParameter value);
    public OleDbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OleDbParameter value);
    public OleDbParameter Add(OleDbParameter value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated. Use AddWithValue(String parameterName, Object value) instead.")]
public OleDbParameter Add(string parameterName, object value);
    [NullableContextAttribute("2")]
public OleDbParameter AddWithValue(string parameterName, object value);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size);
    [NullableContextAttribute("2")]
public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size, string sourceColumn);
    public void AddRange(OleDbParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(OleDbParameter value);
    public void CopyTo(OleDbParameter[] array, int index);
    public int IndexOf(OleDbParameter value);
    public void Insert(int index, OleDbParameter value);
    private void OnChange();
    public void Remove(OleDbParameter value);
    public virtual int get_Count();
    private List`1<OleDbParameter> get_InnerList();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(List`1<OleDbParameter> items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private void ValidateType(object value);
}
internal class System.Data.OleDb.OleDbPropertyInfo : object {
    public Guid _propertySet;
    public int _propertyID;
    public string _description;
    public string _lowercase;
    public Type _type;
    public int _flags;
    public int _vtype;
    public object _supportedValues;
    public object _defaultValue;
}
internal class System.Data.OleDb.OleDbPropertySetGuid : object {
    internal static Guid Column;
    internal static Guid DataSource;
    internal static Guid DataSourceInfo;
    internal static Guid DBInit;
    internal static Guid Index;
    internal static Guid PropertiesInError;
    internal static Guid Rowset;
    internal static Guid Session;
    internal static Guid Stream;
    internal static Guid Table;
    internal static Guid Trustee;
    internal static Guid View;
    internal static Guid DataSourceAll;
    internal static Guid DataSourceInfoAll;
    internal static Guid DBInitAll;
    internal static Guid ColumnAll;
    internal static Guid ConstraintAll;
    internal static Guid IndexAll;
    internal static Guid RowsetAll;
    internal static Guid SessionAll;
    internal static Guid StreamAll;
    internal static Guid TableAll;
    internal static Guid TrusteeAll;
    internal static Guid ViewAll;
    private static OleDbPropertySetGuid();
}
internal enum System.Data.OleDb.OleDbPropertyStatus : Enum {
    public int value__;
    public static OleDbPropertyStatus Ok;
    public static OleDbPropertyStatus NotSupported;
    public static OleDbPropertyStatus BadValue;
    public static OleDbPropertyStatus BadOption;
    public static OleDbPropertyStatus BadColumn;
    public static OleDbPropertyStatus NotAllSettable;
    public static OleDbPropertyStatus NotSettable;
    public static OleDbPropertyStatus NotSet;
    public static OleDbPropertyStatus Conflicting;
    public static OleDbPropertyStatus NotAvailable;
}
internal class System.Data.OleDb.OleDbReferenceCollection : DbReferenceCollection {
    internal static int Closing;
    internal static int Canceling;
    internal static int CommandTag;
    internal static int DataReaderTag;
    public virtual void Add(object value, int tag);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbRowUpdatedEventArgs : RowUpdatedEventArgs {
    public OleDbCommand Command { get; }
    [NullableContextAttribute("1")]
public OleDbRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OleDbCommand get_Command();
}
public class System.Data.OleDb.OleDbRowUpdatedEventHandler : MulticastDelegate {
    public OleDbRowUpdatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OleDbRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbRowUpdatingEventArgs : RowUpdatingEventArgs {
    public OleDbCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    [NullableContextAttribute("1")]
public OleDbRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OleDbCommand get_Command();
    public void set_Command(OleDbCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.OleDb.OleDbRowUpdatingEventHandler : MulticastDelegate {
    public OleDbRowUpdatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OleDbRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.OleDb.OleDbSchemaGuid : object {
    public static Guid Tables_Info;
    public static Guid Trustee;
    public static Guid Assertions;
    public static Guid Catalogs;
    public static Guid Character_Sets;
    public static Guid Collations;
    public static Guid Columns;
    public static Guid Check_Constraints;
    public static Guid Constraint_Column_Usage;
    public static Guid Constraint_Table_Usage;
    public static Guid Key_Column_Usage;
    public static Guid Referential_Constraints;
    public static Guid Table_Constraints;
    public static Guid Column_Domain_Usage;
    public static Guid Indexes;
    public static Guid Column_Privileges;
    public static Guid Table_Privileges;
    public static Guid Usage_Privileges;
    public static Guid Procedures;
    public static Guid Schemata;
    public static Guid Sql_Languages;
    public static Guid Statistics;
    public static Guid Tables;
    public static Guid Translations;
    public static Guid Provider_Types;
    public static Guid Views;
    public static Guid View_Column_Usage;
    public static Guid View_Table_Usage;
    public static Guid Procedure_Parameters;
    public static Guid Foreign_Keys;
    public static Guid Primary_Keys;
    public static Guid Procedure_Columns;
    public static Guid Table_Statistics;
    public static Guid Check_Constraints_By_Table;
    public static Guid SchemaGuids;
    public static Guid DbInfoKeywords;
    public static Guid DbInfoLiterals;
    private static OleDbSchemaGuid();
    internal static string GetTextFromValue(Guid guid);
}
internal class System.Data.OleDb.OleDbServicesWrapper : WrappedIUnknown {
    private IDataInitializeGetDataSource DangerousIDataInitializeGetDataSource;
    internal OleDbServicesWrapper(object unknown);
    internal void GetDataSource(OleDbConnectionString constr, DataSourceWrapper& datasrcWrapper);
}
internal static class System.Data.OleDb.OleDbStructHelpers : object {
    internal static ItagDBPROPINFO CreateTagDbPropInfo();
    internal static ItagDBPROP CreateTagDbProp(int propertyID, bool required, object value);
    internal static ItagDBPROP CreateTagDbProp();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.OleDb.OleDbTransaction : DbTransaction {
    private OleDbTransaction _parentTransaction;
    private IsolationLevel _isolationLevel;
    private WeakReference _nestedTransaction;
    private WrappedTransaction _transaction;
    internal OleDbConnection _parentConnection;
    public OleDbConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal OleDbTransaction Parent { get; }
    internal OleDbTransaction(OleDbConnection connection, OleDbTransaction transaction, IsolationLevel isolevel);
    public OleDbConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    internal OleDbTransaction get_Parent();
    [NullableContextAttribute("1")]
public OleDbTransaction Begin(IsolationLevel isolevel);
    [NullableContextAttribute("1")]
public OleDbTransaction Begin();
    internal void BeginInternal(ITransactionLocal transaction);
    public virtual void Commit();
    private void CommitInternal();
    protected virtual void Dispose(bool disposing);
    private void DisposeManaged();
    private void ProcessResults(OleDbHResult hr);
    public virtual void Rollback();
    internal OleDbHResult RollbackInternal(bool exceptionHandling);
    internal static OleDbTransaction TransactionLast(OleDbTransaction head);
    internal static OleDbTransaction TransactionUpdate(OleDbTransaction transaction);
}
public enum System.Data.OleDb.OleDbType : Enum {
    public int value__;
    public static OleDbType BigInt;
    public static OleDbType Binary;
    public static OleDbType Boolean;
    public static OleDbType BSTR;
    public static OleDbType Char;
    public static OleDbType Currency;
    public static OleDbType Date;
    public static OleDbType DBDate;
    public static OleDbType DBTime;
    public static OleDbType DBTimeStamp;
    public static OleDbType Decimal;
    public static OleDbType Double;
    public static OleDbType Empty;
    public static OleDbType Error;
    public static OleDbType Filetime;
    public static OleDbType Guid;
    public static OleDbType IDispatch;
    public static OleDbType Integer;
    public static OleDbType IUnknown;
    public static OleDbType LongVarBinary;
    public static OleDbType LongVarChar;
    public static OleDbType LongVarWChar;
    public static OleDbType Numeric;
    public static OleDbType PropVariant;
    public static OleDbType Single;
    public static OleDbType SmallInt;
    public static OleDbType TinyInt;
    public static OleDbType UnsignedBigInt;
    public static OleDbType UnsignedInt;
    public static OleDbType UnsignedSmallInt;
    public static OleDbType UnsignedTinyInt;
    public static OleDbType VarBinary;
    public static OleDbType VarChar;
    public static OleDbType Variant;
    public static OleDbType VarNumeric;
    public static OleDbType VarWChar;
    public static OleDbType WChar;
}
internal class System.Data.OleDb.PropertyIDSet : DbBuffer {
    private static int PropertyIDSetAndValueSize;
    private static int PropertyIDSetSize;
    private int _count;
    internal int Count { get; }
    internal PropertyIDSet(Guid propertySet, int propertyID);
    internal PropertyIDSet(Guid[] propertySets);
    private static PropertyIDSet();
    internal int get_Count();
}
internal class System.Data.OleDb.PropertyInfoSet : SafeHandle {
    private int setCount;
    private IntPtr descBuffer;
    public bool IsInvalid { get; }
    internal PropertyInfoSet(IDBProperties idbProperties, PropertyIDSet propIDSet);
    public virtual bool get_IsInvalid();
    internal Dictionary`2<string, OleDbPropertyInfo> GetValues();
    protected virtual bool ReleaseHandle();
    internal static Type FromVtType(int vartype);
}
internal class System.Data.OleDb.PROPVARIANT : ValueType {
    internal VARTYPE vt;
    internal ushort wReserved1;
    internal ushort wReserved2;
    internal ushort wReserved3;
    internal PropVariantUnion union;
}
internal class System.Data.OleDb.PropVariantUnion : ValueType {
    internal sbyte cVal;
    internal byte bVal;
    internal short iVal;
    internal ushort uiVal;
    internal int lVal;
    internal UInt32 ulVal;
    internal int intVal;
    internal UInt32 uintVal;
    internal long hVal;
    internal ulong uhVal;
    internal float fltVal;
    internal double dblVal;
    internal short boolVal;
    internal int scode;
    internal CY cyVal;
    internal double date;
    internal FILETIME filetime;
    internal IntPtr puuid;
    internal IntPtr pclipdata;
    internal IntPtr bstrVal;
    internal BSTRBLOB bstrblobVal;
    internal BLOB blob;
    internal IntPtr pszVal;
    internal IntPtr pwszVal;
    internal IntPtr punkVal;
    internal IntPtr pdispVal;
    internal IntPtr pStream;
    internal IntPtr pStorage;
    internal IntPtr pVersionedStream;
    internal IntPtr parray;
    internal CArray cArray;
    internal IntPtr pcVal;
    internal IntPtr pbVal;
    internal IntPtr piVal;
    internal IntPtr puiVal;
    internal IntPtr plVal;
    internal IntPtr pulVal;
    internal IntPtr pintVal;
    internal IntPtr puintVal;
    internal IntPtr pfltVal;
    internal IntPtr pdblVal;
    internal IntPtr pboolVal;
    internal IntPtr pdecVal;
    internal IntPtr pscode;
    internal IntPtr pcyVal;
    internal IntPtr pdate;
    internal IntPtr pbstrVal;
    internal IntPtr ppunkVal;
    internal IntPtr ppdispVal;
    internal IntPtr pparray;
    internal IntPtr pvarVal;
}
internal class System.Data.OleDb.RowBinding : DbBuffer {
    private int _bindingCount;
    private int _headerLength;
    private int _dataLength;
    private int _emptyStringOffset;
    private IAccessor _iaccessor;
    private IntPtr _accessorHandle;
    private bool _needToReset;
    private bool _haveData;
    private RowBinding(int bindingCount, int headerLength, int dataLength, int length, bool needToReset);
    internal static RowBinding CreateBuffer(int bindingCount, int databuffersize, bool needToReset);
    internal void StartDataBlock();
    internal int BindingCount();
    internal IntPtr DangerousGetAccessorHandle();
    internal IntPtr DangerousGetDataPtr();
    internal IntPtr DangerousGetDataPtr(int valueOffset);
    internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags, ColumnBinding[] bindings);
    internal ColumnBinding[] SetBindings(OleDbDataReader dataReader, Bindings bindings, int indexStart, int indexForAccessor, OleDbParameter[] parameters, tagDBBINDING[] dbbindings, bool ifIRowsetElseIRow);
    internal static int AlignDataSize(int value);
    internal object GetVariantValue(int offset);
    internal void SetVariantValue(int offset, object value);
    internal void SetBstrValue(int offset, string value);
    internal void SetByRefValue(int offset, IntPtr pinnedValue);
    internal void CloseFromConnection();
    internal void Dispose();
    internal void ResetValues();
    private void ResetValues(IntPtr buffer, object iaccessor);
    private static void FreeChapter(IntPtr buffer, int valueOffset, object iaccessor);
    private static void FreeBstr(IntPtr buffer, int valueOffset);
    private static void FreeCoTaskMem(IntPtr buffer, int valueOffset);
    private static void FreeVariant(IntPtr buffer, int valueOffset);
    private static void FreePropVariant(IntPtr buffer, int valueOffset);
    internal IntPtr InterlockedExchangePointer(int offset);
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.RowHandleBuffer : DbBuffer {
    internal RowHandleBuffer(IntPtr rowHandleFetchCount);
    internal IntPtr GetRowHandle(int index);
}
internal class System.Data.OleDb.SchemaSupport : ValueType {
    internal Guid _schemaRowset;
    internal int _restrictions;
}
internal class System.Data.OleDb.SessionWrapper : WrappedIUnknown {
    private IDBCreateCommandCreateCommand DangerousIDBCreateCommandCreateCommand;
    internal void QueryInterfaceIDBCreateCommand(OleDbConnectionString constr);
    internal void VerifyIDBCreateCommand(OleDbConnectionString constr);
    internal OleDbHResult CreateCommand(Object& icommandText);
    internal IDBSchemaRowsetWrapper IDBSchemaRowset();
    internal IOpenRowsetWrapper IOpenRowset();
    internal ITransactionJoinWrapper ITransactionJoin();
}
internal class System.Data.OleDb.StringMemHandle : DbBuffer {
    internal StringMemHandle(string value);
}
internal class System.Data.OleDb.tagDBBINDING : object {
    internal IntPtr iOrdinal;
    internal IntPtr obValue;
    internal IntPtr obLength;
    internal IntPtr obStatus;
    internal IntPtr pTypeInfo;
    internal IntPtr pObject;
    internal IntPtr pBindExt;
    internal int dwPart;
    internal int dwMemOwner;
    internal int eParamIO;
    internal IntPtr cbMaxLen;
    internal int dwFlags;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBCOLUMNACCESS : ValueType {
    internal IntPtr pData;
    internal tagDBIDX columnid;
    internal IntPtr cbDataLen;
    internal int dwStatus;
    internal IntPtr cbMaxLen;
    internal IntPtr dwReserved;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBCOLUMNINFO : object {
    internal string pwszName;
    internal IntPtr pTypeInfo;
    internal IntPtr iOrdinal;
    internal int dwFlags;
    internal IntPtr ulColumnSize;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
    internal tagDBIDX columnid;
}
internal class System.Data.OleDb.tagDBID : object {
    internal Guid uGuid;
    internal int eKind;
    internal IntPtr ulPropid;
}
internal class System.Data.OleDb.tagDBIDX : ValueType {
    internal Guid uGuid;
    internal int eKind;
    internal IntPtr ulPropid;
}
internal class System.Data.OleDb.tagDBLITERALINFO : object {
    internal string pwszLiteralValue;
    internal string pwszInvalidChars;
    internal string pwszInvalidStartingChars;
    internal int it;
    internal int fSupported;
    internal int cchMaxLen;
}
internal class System.Data.OleDb.tagDBPARAMBINDINFO : ValueType {
    internal IntPtr pwszDataSourceType;
    internal IntPtr pwszName;
    internal IntPtr ulParamSize;
    internal int dwFlags;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBPARAMBINDINFO_x86 : ValueType {
    internal IntPtr pwszDataSourceType;
    internal IntPtr pwszName;
    internal IntPtr ulParamSize;
    internal int dwFlags;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBPARAMS : object {
    internal IntPtr pData;
    internal int cParamSets;
    internal IntPtr hAccessor;
}
internal class System.Data.OleDb.tagDBPROP : object {
    internal int dwPropertyID;
    internal int dwOptions;
    internal OleDbPropertyStatus dwStatus;
    internal tagDBIDX columnid;
    internal object vValue;
    private OleDbPropertyStatus System.Data.OleDb.ItagDBPROP.dwStatus { get; }
    private object System.Data.OleDb.ItagDBPROP.vValue { get; }
    private int System.Data.OleDb.ItagDBPROP.dwPropertyID { get; }
    internal tagDBPROP(int propertyID, bool required, object value);
    private sealed virtual override OleDbPropertyStatus System.Data.OleDb.ItagDBPROP.get_dwStatus();
    private sealed virtual override object System.Data.OleDb.ItagDBPROP.get_vValue();
    private sealed virtual override int System.Data.OleDb.ItagDBPROP.get_dwPropertyID();
}
internal class System.Data.OleDb.tagDBPROP_x86 : object {
    internal int dwPropertyID;
    internal int dwOptions;
    internal OleDbPropertyStatus dwStatus;
    internal tagDBIDX columnid;
    internal object vValue;
    private OleDbPropertyStatus System.Data.OleDb.ItagDBPROP.dwStatus { get; }
    private object System.Data.OleDb.ItagDBPROP.vValue { get; }
    private int System.Data.OleDb.ItagDBPROP.dwPropertyID { get; }
    internal tagDBPROP_x86(int propertyID, bool required, object value);
    private sealed virtual override OleDbPropertyStatus System.Data.OleDb.ItagDBPROP.get_dwStatus();
    private sealed virtual override object System.Data.OleDb.ItagDBPROP.get_vValue();
    private sealed virtual override int System.Data.OleDb.ItagDBPROP.get_dwPropertyID();
}
internal class System.Data.OleDb.tagDBPROPIDSET : ValueType {
    internal IntPtr rgPropertyIDs;
    internal int cPropertyIDs;
    internal Guid guidPropertySet;
}
internal class System.Data.OleDb.tagDBPROPINFO : object {
    internal string pwszDescription;
    internal int dwPropertyID;
    internal int dwFlags;
    internal short vtType;
    internal object vValue;
    private int System.Data.OleDb.ItagDBPROPINFO.dwPropertyID { get; }
    private int System.Data.OleDb.ItagDBPROPINFO.dwFlags { get; }
    private int System.Data.OleDb.ItagDBPROPINFO.vtType { get; }
    private object System.Data.OleDb.ItagDBPROPINFO.vValue { get; }
    private string System.Data.OleDb.ItagDBPROPINFO.pwszDescription { get; }
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_dwPropertyID();
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_dwFlags();
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_vtType();
    private sealed virtual override object System.Data.OleDb.ItagDBPROPINFO.get_vValue();
    private sealed virtual override string System.Data.OleDb.ItagDBPROPINFO.get_pwszDescription();
}
internal class System.Data.OleDb.tagDBPROPINFO_x86 : object {
    internal string pwszDescription;
    internal int dwPropertyID;
    internal int dwFlags;
    internal short vtType;
    internal object vValue;
    private int System.Data.OleDb.ItagDBPROPINFO.dwPropertyID { get; }
    private int System.Data.OleDb.ItagDBPROPINFO.dwFlags { get; }
    private int System.Data.OleDb.ItagDBPROPINFO.vtType { get; }
    private object System.Data.OleDb.ItagDBPROPINFO.vValue { get; }
    private string System.Data.OleDb.ItagDBPROPINFO.pwszDescription { get; }
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_dwPropertyID();
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_dwFlags();
    private sealed virtual override int System.Data.OleDb.ItagDBPROPINFO.get_vtType();
    private sealed virtual override object System.Data.OleDb.ItagDBPROPINFO.get_vValue();
    private sealed virtual override string System.Data.OleDb.ItagDBPROPINFO.get_pwszDescription();
}
internal class System.Data.OleDb.tagDBPROPINFOSET : object {
    internal IntPtr rgPropertyInfos;
    internal int cPropertyInfos;
    internal Guid guidPropertySet;
}
internal class System.Data.OleDb.tagDBPROPSET : object {
    internal IntPtr rgProperties;
    internal int cProperties;
    internal Guid guidPropertySet;
    internal tagDBPROPSET(int propertyCount, Guid propertySet);
}
internal enum System.Data.OleDb.VARTYPE : Enum {
    public short value__;
    public static VARTYPE VT_BSTR;
    public static VARTYPE VT_LPSTR;
    public static VARTYPE VT_FILETIME;
}
internal enum System.Data.OleDb.XACTTC : Enum {
    public int value__;
    public static XACTTC XACTTC_NONE;
    public static XACTTC XACTTC_SYNC_PHASEONE;
    public static XACTTC XACTTC_SYNC_PHASETWO;
    public static XACTTC XACTTC_SYNC;
    public static XACTTC XACTTC_ASYNC_PHASEONE;
    public static XACTTC XACTTC_ASYNC;
}
internal abstract class System.Data.ProviderBase.DbBuffer : SafeHandle {
    private int _bufferLength;
    private static int BaseOffset;
    public bool IsInvalid { get; }
    internal int Length { get; }
    protected DbBuffer(int initialSize);
    protected DbBuffer(IntPtr invalidHandleValue, bool ownsHandle);
    public virtual bool get_IsInvalid();
    internal int get_Length();
    internal string PtrToStringUni(int offset, int length);
    internal byte ReadByte(int offset);
    internal Byte[] ReadBytes(int offset, int length);
    internal Byte[] ReadBytes(int offset, Byte[] destination, int startIndex, int length);
    internal char ReadChar(int offset);
    internal Char[] ReadChars(int offset, Char[] destination, int startIndex, int length);
    internal double ReadDouble(int offset);
    internal short ReadInt16(int offset);
    internal void ReadInt16Array(int offset, Int16[] destination, int startIndex, int length);
    internal int ReadInt32(int offset);
    internal void ReadInt32Array(int offset, Int32[] destination, int startIndex, int length);
    internal long ReadInt64(int offset);
    internal IntPtr ReadIntPtr(int offset);
    internal float ReadSingle(int offset);
    protected virtual bool ReleaseHandle();
    private void StructureToPtr(int offset, object structure);
    internal void WriteByte(int offset, byte value);
    internal void WriteBytes(int offset, Byte[] source, int startIndex, int length);
    internal void WriteCharArray(int offset, Char[] source, int startIndex, int length);
    internal void WriteDouble(int offset, double value);
    internal void WriteInt16(int offset, short value);
    internal void WriteInt16Array(int offset, Int16[] source, int startIndex, int length);
    internal void WriteInt32(int offset, int value);
    internal void WriteInt32Array(int offset, Int32[] source, int startIndex, int length);
    internal void WriteInt64(int offset, long value);
    internal void WriteIntPtr(int offset, IntPtr value);
    internal void WriteSingle(int offset, float value);
    internal Guid ReadGuid(int offset);
    internal void WriteGuid(int offset, Guid value);
    internal DateTime ReadDate(int offset);
    internal void WriteDate(int offset, DateTime value);
    internal TimeSpan ReadTime(int offset);
    internal void WriteTime(int offset, TimeSpan value);
    internal DateTime ReadDateTime(int offset);
    internal void WriteDateTime(int offset, DateTime value);
    internal decimal ReadNumeric(int offset);
    internal void WriteNumeric(int offset, decimal value, byte precision);
    [ConditionalAttribute("DEBUG")]
protected void ValidateCheck(int offset, int count);
    protected void Validate(int offset, int count);
}
internal abstract class System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    public virtual void EnlistTransaction(Transaction transaction);
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
}
internal abstract class System.Data.ProviderBase.DbConnectionFactory : object {
    private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups;
    private List`1<DbConnectionPool> _poolsToRelease;
    private List`1<DbConnectionPoolGroup> _poolGroupsToRelease;
    private DbConnectionPoolCounters _performanceCounters;
    private Timer _pruningTimer;
    private static int PruningDueTime;
    private static int PruningPeriod;
    private static int s_pendingOpenNonPooledNext;
    private static Task`1[] s_pendingOpenNonPooled;
    private static Task`1<DbConnectionInternal> s_completedTask;
    internal DbConnectionPoolCounters PerformanceCounters { get; }
    public DbProviderFactory ProviderFactory { get; }
    protected DbConnectionFactory(DbConnectionPoolCounters performanceCounters);
    private static DbConnectionFactory();
    internal DbConnectionPoolCounters get_PerformanceCounters();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    public void ClearAllPools();
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    private Timer CreatePruningTimer();
    private static Task`1<DbConnectionInternal> GetCompletedTask();
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
    private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    private void PruneConnectionPoolGroups(object state);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal abstract class System.Data.ProviderBase.DbConnectionInternal : object {
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    private bool _allowSetConnectionString;
    private bool _hidePassword;
    private ConnectionState _state;
    private WeakReference _owningObject;
    private DbConnectionPool _connectionPool;
    private DbConnectionPoolCounters _performanceCounters;
    private DbReferenceCollection _referenceCollection;
    private int _pooledCount;
    private bool _connectionIsDoomed;
    private bool _cannotBePooled;
    private bool _isInStasis;
    private DateTime _createTime;
    private Transaction _enlistedTransaction;
    private Transaction _enlistedTransactionOriginal;
    internal bool AllowSetConnectionString { get; }
    internal bool CanBePooled { get; }
    protected internal Transaction EnlistedTransaction { get; protected internal set; }
    internal bool IsTxRootWaitingForTxEnd { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    protected internal bool IsConnectionDoomed { get; }
    internal bool IsEmancipated { get; }
    protected internal object Owner { get; }
    internal DbConnectionPool Pool { get; }
    protected DbConnectionPoolCounters PerformanceCounters { get; }
    protected internal DbReferenceCollection ReferenceCollection { get; }
    public string ServerVersion { get; }
    public bool ShouldHidePassword { get; }
    public ConnectionState State { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal void ActivateConnection(Transaction transaction);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    public virtual void Dispose();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal Transaction get_EnlistedTransaction();
    protected internal void set_EnlistedTransaction(Transaction value);
    internal bool get_IsTxRootWaitingForTxEnd();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    protected internal object get_Owner();
    internal DbConnectionPool get_Pool();
    protected DbConnectionPoolCounters get_PerformanceCounters();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    protected abstract virtual void Activate(Transaction transaction);
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    internal virtual void DelegatedTransactionEnded();
    protected internal void DoNotPoolThisConnection();
    protected internal void DoomThisConnection();
    public abstract virtual void EnlistTransaction(Transaction transaction);
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(object owningObject, DbConnectionPoolCounters performanceCounters);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(object newOwner);
    internal void RemoveWeakReference(object value);
    internal void DetachCurrentTransactionIfEnded();
    internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing);
    internal void SetInStasis();
    private void TerminateStasis();
    internal virtual bool IsConnectionAlive(bool throwOnException);
}
internal class System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class System.Data.ProviderBase.DbConnectionPool : object {
    private static int MAX_Q_SIZE;
    private static int SEMAPHORE_HANDLE;
    private static int ERROR_HANDLE;
    private static int CREATION_HANDLE;
    private static int BOGUS_HANDLE;
    private static int WAIT_OBJECT_0;
    private static int WAIT_TIMEOUT;
    private static int WAIT_ABANDONED;
    private static int WAIT_FAILED;
    private static int ERROR_WAIT_DEFAULT;
    private static Random _random;
    private int _cleanupWait;
    private DbConnectionPoolIdentity _identity;
    private DbConnectionFactory _connectionFactory;
    private DbConnectionPoolGroup _connectionPoolGroup;
    private DbConnectionPoolGroupOptions _connectionPoolGroupOptions;
    private State _state;
    private ConcurrentStack`1<DbConnectionInternal> _stackOld;
    private ConcurrentStack`1<DbConnectionInternal> _stackNew;
    private ConcurrentQueue`1<PendingGetConnection> _pendingOpens;
    private int _pendingOpensWaiting;
    private WaitCallback _poolCreateRequest;
    private int _waitCount;
    private PoolWaitHandles _waitHandles;
    private Exception _resError;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred;
    private int _errorWait;
    private Timer _errorTimer;
    private Timer _cleanupTimer;
    private TransactedConnectionPool _transactedConnectionPool;
    private List`1<DbConnectionInternal> _objectList;
    private int _totalObjects;
    private int CreationTimeout { get; }
    internal int Count { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal bool ErrorOccurred { get; }
    private bool HasTransactionAffinity { get; }
    internal TimeSpan LoadBalanceTimeout { get; }
    private bool NeedToReplenish { get; }
    internal bool IsRunning { get; }
    private int MaxPoolSize { get; }
    private int MinPoolSize { get; }
    internal DbConnectionPoolCounters PerformanceCounters { get; }
    internal DbConnectionPoolGroup PoolGroup { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal bool UseLoadBalancing { get; }
    private bool UsingIntegrateSecurity { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity);
    private static DbConnectionPool();
    private int get_CreationTimeout();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    private bool get_HasTransactionAffinity();
    internal TimeSpan get_LoadBalanceTimeout();
    private bool get_NeedToReplenish();
    internal bool get_IsRunning();
    private int get_MaxPoolSize();
    private int get_MinPoolSize();
    internal DbConnectionPoolCounters get_PerformanceCounters();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal bool get_UseLoadBalancing();
    private bool get_UsingIntegrateSecurity();
    private void CleanupCallback(object state);
    internal void Clear();
    private Timer CreateCleanupTimer();
    private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private void DeactivateObject(DbConnectionInternal obj);
    internal void DestroyObject(DbConnectionInternal obj);
    private void ErrorCallback(object state);
    private Exception TryCloneCachedException();
    private void WaitForPendingOpen();
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private DbConnectionInternal GetFromGeneralPool();
    private DbConnectionInternal GetFromTransactedPool(Transaction& transaction);
    private void PoolCreateRequest(object state);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    internal void PutObjectFromTransactedPool(DbConnectionInternal obj);
    private void QueuePoolCreateRequest();
    private bool ReclaimEmancipatedObjects();
    internal void Startup();
    internal void Shutdown();
    private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
}
internal abstract class System.Data.ProviderBase.DbConnectionPoolCounters : object {
    private static int CounterInstanceNameMaxLength;
    internal Counter HardConnectsPerSecond;
    internal Counter HardDisconnectsPerSecond;
    internal Counter SoftConnectsPerSecond;
    internal Counter SoftDisconnectsPerSecond;
    internal Counter NumberOfNonPooledConnections;
    internal Counter NumberOfPooledConnections;
    internal Counter NumberOfActiveConnectionPoolGroups;
    internal Counter NumberOfInactiveConnectionPoolGroups;
    internal Counter NumberOfActiveConnectionPools;
    internal Counter NumberOfInactiveConnectionPools;
    internal Counter NumberOfActiveConnections;
    internal Counter NumberOfFreeConnections;
    internal Counter NumberOfStasisConnections;
    internal Counter NumberOfReclaimedConnections;
    protected DbConnectionPoolCounters(string categoryName);
    private static string GetAssemblyName();
    private static string GetInstanceName();
    public void Dispose();
    private static void SafeDispose(Counter counter);
    private void ExceptionEventHandler(object sender, UnhandledExceptionEventArgs e);
    private void ExitEventHandler(object sender, EventArgs e);
    private void UnloadEventHandler(object sender, EventArgs e);
}
internal class System.Data.ProviderBase.DbConnectionPoolCountersNoCounters : DbConnectionPoolCounters {
    public static DbConnectionPoolCountersNoCounters SingletonInstance;
    private static DbConnectionPoolCountersNoCounters();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroup : object {
    private DbConnectionOptions _connectionOptions;
    private DbConnectionPoolKey _poolKey;
    private DbConnectionPoolGroupOptions _poolGroupOptions;
    private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection;
    private int _state;
    private DbConnectionPoolGroupProviderInfo _providerInfo;
    private DbMetaDataFactory _metaDataFactory;
    private static int PoolGroupStateActive;
    private static int PoolGroupStateIdle;
    private static int PoolGroupStateDisabled;
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionPoolKey PoolKey { get; }
    internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    internal bool IsDisabled { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    private bool MarkPoolGroupAsActive();
    internal bool Prune();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    private bool _poolByIdentity;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _creationTimeout;
    private TimeSpan _loadBalanceTimeout;
    private bool _hasTransactionAffinity;
    private bool _useLoadBalancing;
    public int CreationTimeout { get; }
    public bool HasTransactionAffinity { get; }
    public TimeSpan LoadBalanceTimeout { get; }
    public int MaxPoolSize { get; }
    public int MinPoolSize { get; }
    public bool PoolByIdentity { get; }
    public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity);
    public int get_CreationTimeout();
    public bool get_HasTransactionAffinity();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    private DbConnectionPoolGroup _poolGroup;
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class System.Data.ProviderBase.DbConnectionPoolIdentity : object {
    private static int E_NotImpersonationToken;
    private static int Win32_CheckTokenMembership;
    public static DbConnectionPoolIdentity NoIdentity;
    private string _sidString;
    private bool _isRestricted;
    private bool _isNetwork;
    private int _hashCode;
    internal bool IsRestricted { get; }
    private DbConnectionPoolIdentity(string sidString, bool isRestricted, bool isNetwork);
    private static DbConnectionPoolIdentity();
    internal bool get_IsRestricted();
    public virtual bool Equals(object value);
    internal static DbConnectionPoolIdentity GetCurrent();
    public virtual int GetHashCode();
    private static void IntegratedSecurityError(int caller);
}
internal class System.Data.ProviderBase.DbMetaDataFactory : object {
    private DataSet _metaDataCollectionsDataSet;
    private string _normalizedServerVersion;
    private string _serverVersionString;
    private static string _collectionName;
    private static string _populationMechanism;
    private static string _populationString;
    private static string _maximumVersion;
    private static string _minimumVersion;
    private static string _dataSourceProductVersionNormalized;
    private static string _dataSourceProductVersion;
    private static string _restrictionNumber;
    private static string _numberOfRestrictions;
    private static string _restrictionName;
    private static string _parameterName;
    private static string _dataTable;
    private static string _sqlCommand;
    private static string _prepareCollection;
    protected DataSet CollectionDataSet { get; }
    protected string ServerVersion { get; }
    protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection);
    private static DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    private void FixUpVersion(DataTable dataSourceInfoTable);
    private string GetParameterName(string neededCollectionName, int neededRestrictionNumber);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    private static bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private bool SupportedByCurrentVersion(DataRow requestedCollectionRow);
}
internal abstract class System.Data.ProviderBase.DbReferenceCollection : object {
    private static int LockPollTime;
    private static int DefaultCollectionSize;
    private CollectionEntry[] _items;
    private object _itemLock;
    private int _optimisticCount;
    private int _lastItemIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying;
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
    private void TryEnterItemLock(Boolean& lockObtained);
    private void ExitItemLockIfNeeded(bool lockObtained);
}
internal class System.Data.ProviderBase.FieldNameLookup : object {
    private Hashtable _fieldNameLookup;
    private String[] _fieldNames;
    private CompareInfo _compareInfo;
    private int _defaultLocaleID;
    public FieldNameLookup(IDataRecord reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal class System.Data.ProviderBase.WrappedIUnknown : SafeHandle {
    public bool IsInvalid { get; }
    internal WrappedIUnknown(object unknown);
    public virtual bool get_IsInvalid();
    internal object ComWrapper();
    protected virtual bool ReleaseHandle();
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string ADP_InvalidConnectionOptionValue { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_InvalidMultipartName { get; }
    internal static string ADP_InvalidMultipartNameQuoteUsage { get; }
    internal static string ADP_InvalidMultipartNameToManyParts { get; }
    internal static string OLEDB_OLEDBCommandText { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string OleDb_SchemaRowsetsNotSupported { get; }
    internal static string OleDb_NoErrorInformation2 { get; }
    internal static string OleDb_NoErrorInformation { get; }
    internal static string OleDb_MDACNotAvailable { get; }
    internal static string OleDb_MSDASQLNotSupported { get; }
    internal static string OleDb_PossiblePromptNotUserInteractive { get; }
    internal static string OleDb_ProviderUnavailable { get; }
    internal static string OleDb_CommandTextNotSupported { get; }
    internal static string OleDb_TransactionsNotSupported { get; }
    internal static string OleDb_AsynchronousNotSupported { get; }
    internal static string OleDb_NoProviderSpecified { get; }
    internal static string OleDb_InvalidProviderSpecified { get; }
    internal static string OleDb_InvalidRestrictionsDbInfoKeywords { get; }
    internal static string OleDb_InvalidRestrictionsDbInfoLiteral { get; }
    internal static string OleDb_InvalidRestrictionsSchemaGuids { get; }
    internal static string OleDb_NotSupportedSchemaTable { get; }
    internal static string OleDb_CommandParameterBadAccessor { get; }
    internal static string OleDb_CommandParameterCantConvertValue { get; }
    internal static string OleDb_CommandParameterSignMismatch { get; }
    internal static string OleDb_CommandParameterDataOverflow { get; }
    internal static string OleDb_CommandParameterUnavailable { get; }
    internal static string OleDb_CommandParameterDefault { get; }
    internal static string OleDb_CommandParameterError { get; }
    internal static string OleDb_BadStatus_ParamAcc { get; }
    internal static string OleDb_UninitializedParameters { get; }
    internal static string OleDb_NoProviderSupportForParameters { get; }
    internal static string OleDb_NoProviderSupportForSProcResetParameters { get; }
    internal static string OleDb_Fill_NotADODB { get; }
    internal static string OleDb_Fill_EmptyRecordSet { get; }
    internal static string OleDb_Fill_EmptyRecord { get; }
    internal static string OleDb_ISourcesRowsetNotSupported { get; }
    internal static string OleDb_IDBInfoNotSupported { get; }
    internal static string OleDb_PropertyNotSupported { get; }
    internal static string OleDb_PropertyBadValue { get; }
    internal static string OleDb_PropertyBadOption { get; }
    internal static string OleDb_PropertyBadColumn { get; }
    internal static string OleDb_PropertyNotAllSettable { get; }
    internal static string OleDb_PropertyNotSettable { get; }
    internal static string OleDb_PropertyNotSet { get; }
    internal static string OleDb_PropertyConflicting { get; }
    internal static string OleDb_PropertyNotAvailable { get; }
    internal static string OleDb_PropertyStatusUnknown { get; }
    internal static string OleDb_BadAccessor { get; }
    internal static string OleDb_BadStatusRowAccessor { get; }
    internal static string OleDb_CantConvertValue { get; }
    internal static string OleDb_CantCreate { get; }
    internal static string OleDb_DataOverflow { get; }
    internal static string OleDb_GVtUnknown { get; }
    internal static string OleDb_SignMismatch { get; }
    internal static string OleDb_SVtUnknown { get; }
    internal static string OleDb_Unavailable { get; }
    internal static string OleDb_UnexpectedStatusValue { get; }
    internal static string OleDb_ThreadApartmentState { get; }
    internal static string OleDb_NoErrorMessage { get; }
    internal static string OleDb_FailedGetDescription { get; }
    internal static string OleDb_FailedGetSource { get; }
    internal static string OleDb_DBBindingGetVector { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string PlatformNotSupported_OleDb { get; }
    internal static string PlatformNotSupported_GetIDispatchForObject { get; }
    internal static string ADP_EmptyString { get; }
    internal static string ADP_UdlFileError { get; }
    internal static string ADP_InvalidUDL { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidKey { get; }
    internal static string ADP_InvalidValue { get; }
    internal static string ADP_NoConnectionString { get; }
    internal static string OleDb_ConfigUnableToLoadXmlMetaDataFile { get; }
    internal static string OleDb_ConfigWrongNumberOfValues { get; }
    internal static string ADP_PooledOpenTimeout { get; }
    internal static string ADP_NonPooledOpenTimeout { get; }
    internal static string ADP_TransactionConnectionMismatch { get; }
    internal static string ADP_TransactionRequired { get; }
    internal static string ADP_CommandTextRequired { get; }
    internal static string ADP_ConnectionRequired { get; }
    internal static string ADP_OpenConnectionRequired { get; }
    internal static string ADP_NoStoredProcedureExists { get; }
    internal static string ADP_OpenReaderExists { get; }
    internal static string ADP_TransactionCompleted { get; }
    internal static string ADP_NonSeqByteAccess { get; }
    internal static string ADP_NumericToDecimalOverflow { get; }
    internal static string ADP_NonSequentialColumnAccess { get; }
    internal static string ADP_FillRequiresSourceTableName { get; }
    internal static string ADP_InvalidCommandTimeout { get; }
    internal static string ADP_DeriveParametersNotSupported { get; }
    internal static string ADP_UninitializedParameterSize { get; }
    internal static string ADP_PrepareParameterType { get; }
    internal static string ADP_PrepareParameterSize { get; }
    internal static string ADP_PrepareParameterScale { get; }
    internal static string ADP_ClosedConnectionError { get; }
    internal static string ADP_ConnectionAlreadyOpen { get; }
    internal static string ADP_TransactionPresent { get; }
    internal static string ADP_LocalTransactionPresent { get; }
    internal static string ADP_OpenConnectionPropertySet { get; }
    internal static string ADP_EmptyDatabaseName { get; }
    internal static string ADP_InternalConnectionError { get; }
    internal static string ADP_InvalidConnectTimeoutValue { get; }
    internal static string ADP_DataReaderNoData { get; }
    internal static string ADP_InvalidDataType { get; }
    internal static string ADP_DbTypeNotSupported { get; }
    internal static string ADP_UnknownDataTypeCode { get; }
    internal static string ADP_InvalidOffsetValue { get; }
    internal static string ADP_InvalidSizeValue { get; }
    internal static string ADP_ParameterConversionFailed { get; }
    internal static string ADP_ParallelTransactionsNotSupported { get; }
    internal static string ADP_TransactionZombied { get; }
    internal static string MDF_AmbiguousCollectionName { get; }
    internal static string MDF_CollectionNameISNotUnique { get; }
    internal static string MDF_DataTableDoesNotExist { get; }
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows { get; }
    internal static string MDF_InvalidRestrictionValue { get; }
    internal static string MDF_InvalidXml { get; }
    internal static string MDF_InvalidXmlMissingColumn { get; }
    internal static string MDF_InvalidXmlInvalidValue { get; }
    internal static string MDF_MissingDataSourceInformationColumn { get; }
    internal static string MDF_MissingRestrictionColumn { get; }
    internal static string MDF_MissingRestrictionRow { get; }
    internal static string MDF_NoColumns { get; }
    internal static string MDF_QueryFailed { get; }
    internal static string MDF_TooManyRestrictions { get; }
    internal static string MDF_UnableToBuildCollection { get; }
    internal static string MDF_UndefinedCollection { get; }
    internal static string MDF_UndefinedPopulationMechanism { get; }
    internal static string MDF_UnsupportedVersion { get; }
    internal static string ADP_QuotePrefixNotSet { get; }
    internal static string Odbc_MDACWrongVersion { get; }
    internal static string OleDb_MDACWrongVersion { get; }
    private static SR();
    internal static string GetString(string value);
    internal static string GetString(string format, Object[] args);
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_ADP_InvalidConnectionOptionValue();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_InvalidMultipartName();
    internal static string get_ADP_InvalidMultipartNameQuoteUsage();
    internal static string get_ADP_InvalidMultipartNameToManyParts();
    internal static string get_OLEDB_OLEDBCommandText();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_OleDb_SchemaRowsetsNotSupported();
    internal static string get_OleDb_NoErrorInformation2();
    internal static string get_OleDb_NoErrorInformation();
    internal static string get_OleDb_MDACNotAvailable();
    internal static string get_OleDb_MSDASQLNotSupported();
    internal static string get_OleDb_PossiblePromptNotUserInteractive();
    internal static string get_OleDb_ProviderUnavailable();
    internal static string get_OleDb_CommandTextNotSupported();
    internal static string get_OleDb_TransactionsNotSupported();
    internal static string get_OleDb_AsynchronousNotSupported();
    internal static string get_OleDb_NoProviderSpecified();
    internal static string get_OleDb_InvalidProviderSpecified();
    internal static string get_OleDb_InvalidRestrictionsDbInfoKeywords();
    internal static string get_OleDb_InvalidRestrictionsDbInfoLiteral();
    internal static string get_OleDb_InvalidRestrictionsSchemaGuids();
    internal static string get_OleDb_NotSupportedSchemaTable();
    internal static string get_OleDb_CommandParameterBadAccessor();
    internal static string get_OleDb_CommandParameterCantConvertValue();
    internal static string get_OleDb_CommandParameterSignMismatch();
    internal static string get_OleDb_CommandParameterDataOverflow();
    internal static string get_OleDb_CommandParameterUnavailable();
    internal static string get_OleDb_CommandParameterDefault();
    internal static string get_OleDb_CommandParameterError();
    internal static string get_OleDb_BadStatus_ParamAcc();
    internal static string get_OleDb_UninitializedParameters();
    internal static string get_OleDb_NoProviderSupportForParameters();
    internal static string get_OleDb_NoProviderSupportForSProcResetParameters();
    internal static string get_OleDb_Fill_NotADODB();
    internal static string get_OleDb_Fill_EmptyRecordSet();
    internal static string get_OleDb_Fill_EmptyRecord();
    internal static string get_OleDb_ISourcesRowsetNotSupported();
    internal static string get_OleDb_IDBInfoNotSupported();
    internal static string get_OleDb_PropertyNotSupported();
    internal static string get_OleDb_PropertyBadValue();
    internal static string get_OleDb_PropertyBadOption();
    internal static string get_OleDb_PropertyBadColumn();
    internal static string get_OleDb_PropertyNotAllSettable();
    internal static string get_OleDb_PropertyNotSettable();
    internal static string get_OleDb_PropertyNotSet();
    internal static string get_OleDb_PropertyConflicting();
    internal static string get_OleDb_PropertyNotAvailable();
    internal static string get_OleDb_PropertyStatusUnknown();
    internal static string get_OleDb_BadAccessor();
    internal static string get_OleDb_BadStatusRowAccessor();
    internal static string get_OleDb_CantConvertValue();
    internal static string get_OleDb_CantCreate();
    internal static string get_OleDb_DataOverflow();
    internal static string get_OleDb_GVtUnknown();
    internal static string get_OleDb_SignMismatch();
    internal static string get_OleDb_SVtUnknown();
    internal static string get_OleDb_Unavailable();
    internal static string get_OleDb_UnexpectedStatusValue();
    internal static string get_OleDb_ThreadApartmentState();
    internal static string get_OleDb_NoErrorMessage();
    internal static string get_OleDb_FailedGetDescription();
    internal static string get_OleDb_FailedGetSource();
    internal static string get_OleDb_DBBindingGetVector();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_PlatformNotSupported_OleDb();
    internal static string get_PlatformNotSupported_GetIDispatchForObject();
    internal static string get_ADP_EmptyString();
    internal static string get_ADP_UdlFileError();
    internal static string get_ADP_InvalidUDL();
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidKey();
    internal static string get_ADP_InvalidValue();
    internal static string get_ADP_NoConnectionString();
    internal static string get_OleDb_ConfigUnableToLoadXmlMetaDataFile();
    internal static string get_OleDb_ConfigWrongNumberOfValues();
    internal static string get_ADP_PooledOpenTimeout();
    internal static string get_ADP_NonPooledOpenTimeout();
    internal static string get_ADP_TransactionConnectionMismatch();
    internal static string get_ADP_TransactionRequired();
    internal static string get_ADP_CommandTextRequired();
    internal static string get_ADP_ConnectionRequired();
    internal static string get_ADP_OpenConnectionRequired();
    internal static string get_ADP_NoStoredProcedureExists();
    internal static string get_ADP_OpenReaderExists();
    internal static string get_ADP_TransactionCompleted();
    internal static string get_ADP_NonSeqByteAccess();
    internal static string get_ADP_NumericToDecimalOverflow();
    internal static string get_ADP_NonSequentialColumnAccess();
    internal static string get_ADP_FillRequiresSourceTableName();
    internal static string get_ADP_InvalidCommandTimeout();
    internal static string get_ADP_DeriveParametersNotSupported();
    internal static string get_ADP_UninitializedParameterSize();
    internal static string get_ADP_PrepareParameterType();
    internal static string get_ADP_PrepareParameterSize();
    internal static string get_ADP_PrepareParameterScale();
    internal static string get_ADP_ClosedConnectionError();
    internal static string get_ADP_ConnectionAlreadyOpen();
    internal static string get_ADP_TransactionPresent();
    internal static string get_ADP_LocalTransactionPresent();
    internal static string get_ADP_OpenConnectionPropertySet();
    internal static string get_ADP_EmptyDatabaseName();
    internal static string get_ADP_InternalConnectionError();
    internal static string get_ADP_InvalidConnectTimeoutValue();
    internal static string get_ADP_DataReaderNoData();
    internal static string get_ADP_InvalidDataType();
    internal static string get_ADP_DbTypeNotSupported();
    internal static string get_ADP_UnknownDataTypeCode();
    internal static string get_ADP_InvalidOffsetValue();
    internal static string get_ADP_InvalidSizeValue();
    internal static string get_ADP_ParameterConversionFailed();
    internal static string get_ADP_ParallelTransactionsNotSupported();
    internal static string get_ADP_TransactionZombied();
    internal static string get_MDF_AmbiguousCollectionName();
    internal static string get_MDF_CollectionNameISNotUnique();
    internal static string get_MDF_DataTableDoesNotExist();
    internal static string get_MDF_IncorrectNumberOfDataSourceInformationRows();
    internal static string get_MDF_InvalidRestrictionValue();
    internal static string get_MDF_InvalidXml();
    internal static string get_MDF_InvalidXmlMissingColumn();
    internal static string get_MDF_InvalidXmlInvalidValue();
    internal static string get_MDF_MissingDataSourceInformationColumn();
    internal static string get_MDF_MissingRestrictionColumn();
    internal static string get_MDF_MissingRestrictionRow();
    internal static string get_MDF_NoColumns();
    internal static string get_MDF_QueryFailed();
    internal static string get_MDF_TooManyRestrictions();
    internal static string get_MDF_UnableToBuildCollection();
    internal static string get_MDF_UndefinedCollection();
    internal static string get_MDF_UndefinedPopulationMechanism();
    internal static string get_MDF_UnsupportedVersion();
    internal static string get_ADP_QuotePrefixNotSet();
    internal static string get_Odbc_MDACWrongVersion();
    internal static string get_OleDb_MDACWrongVersion();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteOdbcValueRegex_2 : Regex {
    internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteOdbcValueRegex_2 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteOdbcValueRegex_2();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteValueRegex_1 : Regex {
    internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteValueRegex_1 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringQuoteValueRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringValidKeyRegex_0 : Regex {
    internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringValidKeyRegex_0 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CreateConnectionStringValidKeyRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities();
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|2_0(Int32[]& stack, Int32& pos, int arg0);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|3_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
}
