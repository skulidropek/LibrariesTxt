internal static class FxResources.System.Management.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLibraryHandle(IntPtr value);
    protected virtual bool ReleaseHandle();
}
public enum System.Management.AuthenticationLevel : Enum {
    public int value__;
    public static AuthenticationLevel Default;
    public static AuthenticationLevel None;
    public static AuthenticationLevel Connect;
    public static AuthenticationLevel Call;
    public static AuthenticationLevel Packet;
    public static AuthenticationLevel PacketIntegrity;
    public static AuthenticationLevel PacketPrivacy;
    public static AuthenticationLevel Unchanged;
}
public enum System.Management.CimType : Enum {
    public int value__;
    public static CimType None;
    public static CimType SInt8;
    public static CimType UInt8;
    public static CimType SInt16;
    public static CimType UInt16;
    public static CimType SInt32;
    public static CimType UInt32;
    public static CimType SInt64;
    public static CimType UInt64;
    public static CimType Real32;
    public static CimType Real64;
    public static CimType Boolean;
    public static CimType String;
    public static CimType DateTime;
    public static CimType Reference;
    public static CimType Char16;
    public static CimType Object;
}
public enum System.Management.CodeLanguage : Enum {
    public int value__;
    public static CodeLanguage CSharp;
    public static CodeLanguage JScript;
    public static CodeLanguage VB;
    public static CodeLanguage VJSharp;
    public static CodeLanguage Mcpp;
}
[FlagsAttribute]
public enum System.Management.ComparisonSettings : Enum {
    public int value__;
    public static ComparisonSettings IncludeAll;
    public static ComparisonSettings IgnoreQualifiers;
    public static ComparisonSettings IgnoreObjectSource;
    public static ComparisonSettings IgnoreDefaultValues;
    public static ComparisonSettings IgnoreClass;
    public static ComparisonSettings IgnoreCase;
    public static ComparisonSettings IgnoreFlavor;
}
internal static class System.Management.CompatSwitches : object {
    internal static string DotNetVersion;
    private static string RegKeyLocation;
    private static object s_syncLock;
    private static int s_allowManagementObjectQI;
    private static string c_WMIDisableCOMSecurity;
    public static bool AllowIManagementObjectQI { get; }
    private static CompatSwitches();
    public static bool get_AllowIManagementObjectQI();
    private static bool GetSwitchValueFromRegistry();
}
public class System.Management.CompletedEventArgs : ManagementEventArgs {
    private int status;
    private ManagementBaseObject wmiObject;
    public ManagementBaseObject StatusObject { get; }
    public ManagementStatus Status { get; }
    internal CompletedEventArgs(object context, int status, ManagementBaseObject wmiStatusObject);
    public ManagementBaseObject get_StatusObject();
    public ManagementStatus get_Status();
}
public class System.Management.CompletedEventHandler : MulticastDelegate {
    public CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ConnectionOptions : ManagementOptions {
    internal static string DEFAULTLOCALE;
    internal static string DEFAULTAUTHORITY;
    internal static ImpersonationLevel DEFAULTIMPERSONATION;
    internal static AuthenticationLevel DEFAULTAUTHENTICATION;
    internal static bool DEFAULTENABLEPRIVILEGES;
    private string locale;
    private string username;
    private SecureString securePassword;
    private string authority;
    private ImpersonationLevel impersonation;
    private AuthenticationLevel authentication;
    private bool enablePrivileges;
    public string Locale { get; public set; }
    public string Username { get; public set; }
    unknown string Password {public set; }
    unknown SecureString SecurePassword {public set; }
    public string Authority { get; public set; }
    public ImpersonationLevel Impersonation { get; public set; }
    public AuthenticationLevel Authentication { get; public set; }
    public bool EnablePrivileges { get; public set; }
    public ConnectionOptions(string locale, string username, string password, string authority, ImpersonationLevel impersonation, AuthenticationLevel authentication, bool enablePrivileges, ManagementNamedValueCollection context, TimeSpan timeout);
    public ConnectionOptions(string locale, string username, SecureString password, string authority, ImpersonationLevel impersonation, AuthenticationLevel authentication, bool enablePrivileges, ManagementNamedValueCollection context, TimeSpan timeout);
    internal ConnectionOptions(ManagementNamedValueCollection context, TimeSpan timeout, int flags);
    internal ConnectionOptions(ManagementNamedValueCollection context);
    public string get_Locale();
    public void set_Locale(string value);
    public string get_Username();
    public void set_Username(string value);
    public void set_Password(string value);
    public void set_SecurePassword(SecureString value);
    public string get_Authority();
    public void set_Authority(string value);
    public ImpersonationLevel get_Impersonation();
    public void set_Impersonation(ImpersonationLevel value);
    public AuthenticationLevel get_Authentication();
    public void set_Authentication(AuthenticationLevel value);
    public bool get_EnablePrivileges();
    public void set_EnablePrivileges(bool value);
    public virtual object Clone();
    internal IntPtr GetPassword();
    internal SecureString GetSecurePassword();
    internal static ConnectionOptions _Clone(ConnectionOptions options);
    internal static ConnectionOptions _Clone(ConnectionOptions options, IdentifierChangedEventHandler handler);
}
public class System.Management.DeleteOptions : ManagementOptions {
    public DeleteOptions(ManagementNamedValueCollection context, TimeSpan timeout);
    public virtual object Clone();
}
public class System.Management.EnumerationOptions : ManagementOptions {
    private int blockSize;
    public bool ReturnImmediately { get; public set; }
    public int BlockSize { get; public set; }
    public bool Rewindable { get; public set; }
    public bool UseAmendedQualifiers { get; public set; }
    public bool EnsureLocatable { get; public set; }
    public bool PrototypeOnly { get; public set; }
    public bool DirectRead { get; public set; }
    public bool EnumerateDeep { get; public set; }
    public EnumerationOptions(ManagementNamedValueCollection context, TimeSpan timeout, int blockSize, bool rewindable, bool returnImmediatley, bool useAmendedQualifiers, bool ensureLocatable, bool prototypeOnly, bool directRead, bool enumerateDeep);
    public bool get_ReturnImmediately();
    public void set_ReturnImmediately(bool value);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public bool get_Rewindable();
    public void set_Rewindable(bool value);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public bool get_EnsureLocatable();
    public void set_EnsureLocatable(bool value);
    public bool get_PrototypeOnly();
    public void set_PrototypeOnly(bool value);
    public bool get_DirectRead();
    public void set_DirectRead(bool value);
    public bool get_EnumerateDeep();
    public void set_EnumerateDeep(bool value);
    public virtual object Clone();
}
public class System.Management.EventArrivedEventArgs : ManagementEventArgs {
    private ManagementBaseObject eventObject;
    public ManagementBaseObject NewEvent { get; }
    internal EventArrivedEventArgs(object context, ManagementBaseObject eventObject);
    public ManagementBaseObject get_NewEvent();
}
public class System.Management.EventArrivedEventHandler : MulticastDelegate {
    public EventArrivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArrivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArrivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.EventQuery : ManagementQuery {
    public EventQuery(string query);
    public EventQuery(string language, string query);
    public virtual object Clone();
}
public class System.Management.EventWatcherOptions : ManagementOptions {
    private int blockSize;
    public int BlockSize { get; public set; }
    public EventWatcherOptions(ManagementNamedValueCollection context, TimeSpan timeout, int blockSize);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public virtual object Clone();
}
internal class System.Management.IdentifierChangedEventArgs : EventArgs {
}
internal class System.Management.IdentifierChangedEventHandler : MulticastDelegate {
    public IdentifierChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, IdentifierChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, IdentifierChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("027947E1-D731-11CE-A357-000000000001")]
internal interface System.Management.IEnumWbemClassObject {
    public abstract virtual int Reset_();
    public abstract virtual int Next_(int lTimeout, UInt32 uCount, IWbemClassObject_DoNotMarshal[] apObjects, UInt32& puReturned);
    public abstract virtual int NextAsync_(UInt32 uCount, IWbemObjectSink pSink);
    public abstract virtual int Clone_(IEnumWbemClassObject& ppEnum);
    public abstract virtual int Skip_(int lTimeout, UInt32 nCount);
}
[GuidAttribute("1CF2B120-547D-101B-8E65-08002B2BD119")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IErrorInfo {
    public abstract virtual Guid GetGUID();
    public abstract virtual string GetSource();
    public abstract virtual string GetDescription();
    public abstract virtual string GetHelpFile();
    public abstract virtual UInt32 GetHelpContext();
}
public enum System.Management.ImpersonationLevel : Enum {
    public int value__;
    public static ImpersonationLevel Default;
    public static ImpersonationLevel Anonymous;
    public static ImpersonationLevel Identify;
    public static ImpersonationLevel Impersonate;
    public static ImpersonationLevel Delegate;
}
internal class System.Management.InternalObjectPutEventArgs : EventArgs {
    private ManagementPath path;
    internal ManagementPath Path { get; }
    internal InternalObjectPutEventArgs(ManagementPath path);
    internal ManagementPath get_Path();
}
internal class System.Management.InternalObjectPutEventHandler : MulticastDelegate {
    public InternalObjectPutEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InternalObjectPutEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InternalObjectPutEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.InvokeMethodOptions : ManagementOptions {
    public InvokeMethodOptions(ManagementNamedValueCollection context, TimeSpan timeout);
    public virtual object Clone();
}
[GuidAttribute("44ACA675-E8FC-11D0-A07C-00C04FB68820")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemCallResult {
    public abstract virtual int GetResultObject_(int lTimeout, IWbemClassObjectFreeThreaded& ppResultObject);
    public abstract virtual int GetResultString_(int lTimeout, String& pstrResultString);
    public abstract virtual int GetResultServices_(int lTimeout, IWbemServices& ppServices);
    public abstract virtual int GetCallStatus_(int lTimeout, Int32& plStatus);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DC12A681-737F-11CF-884D-00AA004B2E24")]
internal interface System.Management.IWbemClassObject_DoNotMarshal {
    public abstract virtual int GetQualifierSet_(IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int Get_(string wszName, int lFlags, Object& pVal, Int32& pType, Int32& plFlavor);
    public abstract virtual int Put_(string wszName, int lFlags, Object& pVal, int Type);
    public abstract virtual int Delete_(string wszName);
    public abstract virtual int GetNames_(string wszQualifierName, int lFlags, Object& pQualifierVal, String[]& pNames);
    public abstract virtual int BeginEnumeration_(int lEnumFlags);
    public abstract virtual int Next_(int lFlags, String& strName, Object& pVal, Int32& pType, Int32& plFlavor);
    public abstract virtual int EndEnumeration_();
    public abstract virtual int GetPropertyQualifierSet_(string wszProperty, IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int Clone_(IWbemClassObject_DoNotMarshal& ppCopy);
    public abstract virtual int GetObjectText_(int lFlags, String& pstrObjectText);
    public abstract virtual int SpawnDerivedClass_(int lFlags, IWbemClassObject_DoNotMarshal& ppNewClass);
    public abstract virtual int SpawnInstance_(int lFlags, IWbemClassObject_DoNotMarshal& ppNewInstance);
    public abstract virtual int CompareTo_(int lFlags, IWbemClassObject_DoNotMarshal pCompareTo);
    public abstract virtual int GetPropertyOrigin_(string wszName, String& pstrClassName);
    public abstract virtual int InheritsFrom_(string strAncestor);
    public abstract virtual int GetMethod_(string wszName, int lFlags, IWbemClassObject_DoNotMarshal& ppInSignature, IWbemClassObject_DoNotMarshal& ppOutSignature);
    public abstract virtual int PutMethod_(string wszName, int lFlags, IWbemClassObject_DoNotMarshal pInSignature, IWbemClassObject_DoNotMarshal pOutSignature);
    public abstract virtual int DeleteMethod_(string wszName);
    public abstract virtual int BeginMethodEnumeration_(int lEnumFlags);
    public abstract virtual int NextMethod_(int lFlags, String& pstrName, IWbemClassObject_DoNotMarshal& ppInSignature, IWbemClassObject_DoNotMarshal& ppOutSignature);
    public abstract virtual int EndMethodEnumeration_();
    public abstract virtual int GetMethodQualifierSet_(string wszMethod, IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int GetMethodOrigin_(string wszMethodName, String& pstrClassName);
}
internal class System.Management.IWbemClassObjectFreeThreaded : object {
    private static string name;
    public static Guid IID_IWbemClassObject;
    private IntPtr pWbemClassObject;
    public IWbemClassObjectFreeThreaded(IntPtr pWbemClassObject);
    private static IWbemClassObjectFreeThreaded();
    public static IntPtr op_Implicit(IWbemClassObjectFreeThreaded wbemClassObject);
    public sealed virtual void Dispose();
    private void Dispose_(bool finalization);
    protected virtual override void Finalize();
    public int GetQualifierSet_(IWbemQualifierSetFreeThreaded& ppQualSet);
    public int Get_(string wszName, int lFlags, Object& pVal, Int32& pType, Int32& plFlavor);
    public int Put_(string wszName, int lFlags, Object& pVal, int Type);
    public int Delete_(string wszName);
    public int GetNames_(string wszQualifierName, int lFlags, Object& pQualifierVal, String[]& pNames);
    public int BeginEnumeration_(int lEnumFlags);
    public int Next_(int lFlags, String& strName, Object& pVal, Int32& pType, Int32& plFlavor);
    public int EndEnumeration_();
    public int GetPropertyQualifierSet_(string wszProperty, IWbemQualifierSetFreeThreaded& ppQualSet);
    public int Clone_(IWbemClassObjectFreeThreaded& ppCopy);
    public int GetObjectText_(int lFlags, String& pstrObjectText);
    public int SpawnDerivedClass_(int lFlags, IWbemClassObjectFreeThreaded& ppNewClass);
    public int SpawnInstance_(int lFlags, IWbemClassObjectFreeThreaded& ppNewInstance);
    public int CompareTo_(int lFlags, IWbemClassObjectFreeThreaded pCompareTo);
    public int GetPropertyOrigin_(string wszName, String& pstrClassName);
    public int InheritsFrom_(string strAncestor);
    public int GetMethod_(string wszName, int lFlags, IWbemClassObjectFreeThreaded& ppInSignature, IWbemClassObjectFreeThreaded& ppOutSignature);
    public int PutMethod_(string wszName, int lFlags, IWbemClassObjectFreeThreaded pInSignature, IWbemClassObjectFreeThreaded pOutSignature);
    public int DeleteMethod_(string wszName);
    public int BeginMethodEnumeration_(int lEnumFlags);
    public int NextMethod_(int lFlags, String& pstrName, IWbemClassObjectFreeThreaded& ppInSignature, IWbemClassObjectFreeThreaded& ppOutSignature);
    public int EndMethodEnumeration_();
    public int GetMethodQualifierSet_(string wszMethod, IWbemQualifierSetFreeThreaded& ppQualSet);
    public int GetMethodOrigin_(string wszMethodName, String& pstrClassName);
}
[GuidAttribute("44ACA674-E8FC-11D0-A07C-00C04FB68820")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemContext {
    public abstract virtual int Clone_(IWbemContext& ppNewCopy);
    public abstract virtual int GetNames_(int lFlags, String[]& pNames);
    public abstract virtual int BeginEnumeration_(int lFlags);
    public abstract virtual int Next_(int lFlags, String& pstrName, Object& pValue);
    public abstract virtual int EndEnumeration_();
    public abstract virtual int SetValue_(string wszName, int lFlags, Object& pValue);
    public abstract virtual int GetValue_(string wszName, int lFlags, Object& pValue);
    public abstract virtual int DeleteValue_(string wszName, int lFlags);
    public abstract virtual int DeleteAll_();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3AE0080A-7E3A-4366-BF89-0FEEDC931659")]
internal interface System.Management.IWbemEventSink {
    public abstract virtual int Indicate_(int lObjectCount, IWbemClassObject_DoNotMarshal& apObjArray);
    public abstract virtual int SetStatus_(int lFlags, int hResult, string strParam, IWbemClassObject_DoNotMarshal pObjParam);
    public abstract virtual int IndicateWithSD_(int lNumObjects, Object& apObjects, int lSDLength, Byte& pSD);
    public abstract virtual int SetSinkSecurity_(int lSDLength, Byte& pSD);
    public abstract virtual int IsActive_();
    public abstract virtual int GetRestrictedSink_(int lNumQueries, String& awszQueries, object pCallback, IWbemEventSink& ppSink);
    public abstract virtual int SetBatchingParameters_(int lFlags, UInt32 dwMaxBufferSize, UInt32 dwMaxSendLatency);
}
[GuidAttribute("49353C9A-516B-11D1-AEA6-00C04FB68820")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemObjectAccess {
    public abstract virtual int GetQualifierSet_(IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int Get_(string wszName, int lFlags, Object& pVal, Int32& pType, Int32& plFlavor);
    public abstract virtual int Put_(string wszName, int lFlags, Object& pVal, int Type);
    public abstract virtual int Delete_(string wszName);
    public abstract virtual int GetNames_(string wszQualifierName, int lFlags, Object& pQualifierVal, String[]& pNames);
    public abstract virtual int BeginEnumeration_(int lEnumFlags);
    public abstract virtual int Next_(int lFlags, String& strName, Object& pVal, Int32& pType, Int32& plFlavor);
    public abstract virtual int EndEnumeration_();
    public abstract virtual int GetPropertyQualifierSet_(string wszProperty, IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int Clone_(IWbemClassObject_DoNotMarshal& ppCopy);
    public abstract virtual int GetObjectText_(int lFlags, String& pstrObjectText);
    public abstract virtual int SpawnDerivedClass_(int lFlags, IWbemClassObject_DoNotMarshal& ppNewClass);
    public abstract virtual int SpawnInstance_(int lFlags, IWbemClassObject_DoNotMarshal& ppNewInstance);
    public abstract virtual int CompareTo_(int lFlags, IWbemClassObject_DoNotMarshal pCompareTo);
    public abstract virtual int GetPropertyOrigin_(string wszName, String& pstrClassName);
    public abstract virtual int InheritsFrom_(string strAncestor);
    public abstract virtual int GetMethod_(string wszName, int lFlags, IWbemClassObject_DoNotMarshal& ppInSignature, IWbemClassObject_DoNotMarshal& ppOutSignature);
    public abstract virtual int PutMethod_(string wszName, int lFlags, IWbemClassObject_DoNotMarshal pInSignature, IWbemClassObject_DoNotMarshal pOutSignature);
    public abstract virtual int DeleteMethod_(string wszName);
    public abstract virtual int BeginMethodEnumeration_(int lEnumFlags);
    public abstract virtual int NextMethod_(int lFlags, String& pstrName, IWbemClassObject_DoNotMarshal& ppInSignature, IWbemClassObject_DoNotMarshal& ppOutSignature);
    public abstract virtual int EndMethodEnumeration_();
    public abstract virtual int GetMethodQualifierSet_(string wszMethod, IWbemQualifierSet_DoNotMarshal& ppQualSet);
    public abstract virtual int GetMethodOrigin_(string wszMethodName, String& pstrClassName);
    public abstract virtual int GetPropertyHandle_(string wszPropertyName, Int32& pType, Int32& plHandle);
    public abstract virtual int WritePropertyValue_(int lHandle, int lNumBytes, Byte& aData);
    public abstract virtual int ReadPropertyValue_(int lHandle, int lBufferSize, Int32& plNumBytes, Byte& aData);
    public abstract virtual int ReadDWORD_(int lHandle, UInt32& pdw);
    public abstract virtual int WriteDWORD_(int lHandle, UInt32 dw);
    public abstract virtual int ReadQWORD_(int lHandle, UInt64& pqw);
    public abstract virtual int WriteQWORD_(int lHandle, ulong pw);
    public abstract virtual int GetPropertyInfoByHandle_(int lHandle, String& pstrName, Int32& pType);
    public abstract virtual int Lock_(int lFlags);
    public abstract virtual int Unlock_(int lFlags);
}
[GuidAttribute("7C857801-7381-11CF-884D-00AA004B2E24")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemObjectSink {
    public abstract virtual int Indicate_(int lObjectCount, IntPtr[] apObjArray);
    public abstract virtual int SetStatus_(int lFlags, int hResult, string strParam, IntPtr pObjParam);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BFBF883A-CAD7-11D3-A11B-00105A1F515A")]
internal interface System.Management.IWbemObjectTextSrc {
    public abstract virtual int GetText_(int lFlags, IWbemClassObject_DoNotMarshal pObj, UInt32 uObjTextFormat, IWbemContext pCtx, String& strText);
    public abstract virtual int CreateFromText_(int lFlags, string strText, UInt32 uObjTextFormat, IWbemContext pCtx, IWbemClassObject_DoNotMarshal& pNewObj);
}
[GuidAttribute("3BC15AF2-736C-477E-9E51-238AF8667DCC")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemPath {
    public abstract virtual int SetText_(UInt32 uMode, string pszPath);
    public abstract virtual int GetText_(int lFlags, UInt32& puBuffLength, Char[] pszText);
    public abstract virtual int GetInfo_(UInt32 uRequestedInfo, UInt64& puResponse);
    public abstract virtual int SetServer_(string Name);
    public abstract virtual int GetServer_(UInt32& puNameBufLength, Char[] pName);
    public abstract virtual int GetNamespaceCount_(UInt32& puCount);
    public abstract virtual int SetNamespaceAt_(UInt32 uIndex, Char[] pszName);
    public abstract virtual int GetNamespaceAt_(UInt32 uIndex, UInt32& puNameBufLength, Char[] pName);
    public abstract virtual int RemoveNamespaceAt_(UInt32 uIndex);
    public abstract virtual int RemoveAllNamespaces_();
    public abstract virtual int GetScopeCount_(UInt32& puCount);
    public abstract virtual int SetScope_(UInt32 uIndex, string pszClass);
    public abstract virtual int SetScopeFromText_(UInt32 uIndex, string pszText);
    public abstract virtual int GetScope_(UInt32 uIndex, UInt32& puClassNameBufSize, Char[] pszClass, IWbemPathKeyList& pKeyList);
    public abstract virtual int GetScopeAsText_(UInt32 uIndex, UInt32& puTextBufSize, Char[] pszText);
    public abstract virtual int RemoveScope_(UInt32 uIndex);
    public abstract virtual int RemoveAllScopes_();
    public abstract virtual int SetClassName_(string Name);
    public abstract virtual int GetClassName_(UInt32& puBuffLength, Char[] pszName);
    public abstract virtual int GetKeyList_(IWbemPathKeyList& pOut);
    public abstract virtual int CreateClassPart_(int lFlags, string Name);
    public abstract virtual int DeleteClassPart_(int lFlags);
    public abstract virtual int IsRelative_(string wszMachine, string wszNamespace);
    public abstract virtual int IsRelativeOrChild_(string wszMachine, string wszNamespace, int lFlags);
    public abstract virtual int IsLocal_(string wszMachine);
    public abstract virtual int IsSameClassName_(string wszClass);
}
[GuidAttribute("9AE62877-7544-4BB0-AA26-A13824659ED6")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemPathKeyList {
    public abstract virtual int GetCount_(UInt32& puKeyCount);
    public abstract virtual int SetKey_(string wszName, UInt32 uFlags, UInt32 uCimType, IntPtr pKeyVal);
    public abstract virtual int SetKey2_(string wszName, UInt32 uFlags, UInt32 uCimType, Object& pKeyVal);
    public abstract virtual int GetKey_(UInt32 uKeyIx, UInt32 uFlags, UInt32& puNameBufSize, Char[] pszKeyName, UInt32& puKeyValBufSize, IntPtr pKeyVal, UInt32& puApparentCimType);
    public abstract virtual int GetKey2_(UInt32 uKeyIx, UInt32 uFlags, UInt32& puNameBufSize, Char[] pszKeyName, Object& pKeyValue, UInt32& puApparentCimType);
    public abstract virtual int RemoveKey_(string wszName, UInt32 uFlags);
    public abstract virtual int RemoveAllKeys_(UInt32 uFlags);
    public abstract virtual int MakeSingleton_(sbyte bSet);
    public abstract virtual int GetInfo_(UInt32 uRequestedInfo, UInt64& puResponse);
    public abstract virtual int GetText_(int lFlags, UInt32& puBuffLength, Char[] pszText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DC12A680-737F-11CF-884D-00AA004B2E24")]
internal interface System.Management.IWbemQualifierSet_DoNotMarshal {
    public abstract virtual int Get_(string wszName, int lFlags, Object& pVal, Int32& plFlavor);
    public abstract virtual int Put_(string wszName, Object& pVal, int lFlavor);
    public abstract virtual int Delete_(string wszName);
    public abstract virtual int GetNames_(int lFlags, String[]& pNames);
    public abstract virtual int BeginEnumeration_(int lFlags);
    public abstract virtual int Next_(int lFlags, String& pstrName, Object& pVal, Int32& plFlavor);
    public abstract virtual int EndEnumeration_();
}
internal class System.Management.IWbemQualifierSetFreeThreaded : object {
    private static string name;
    public static Guid IID_IWbemClassObject;
    private IntPtr pWbemQualifierSet;
    public IWbemQualifierSetFreeThreaded(IntPtr pWbemQualifierSet);
    private static IWbemQualifierSetFreeThreaded();
    public sealed virtual void Dispose();
    private void Dispose_(bool finalization);
    protected virtual override void Finalize();
    public int Get_(string wszName, int lFlags, Object& pVal, Int32& plFlavor);
    public int Put_(string wszName, Object& pVal, int lFlavor);
    public int Delete_(string wszName);
    public int GetNames_(int lFlags, String[]& pNames);
    public int BeginEnumeration_(int lFlags);
    public int Next_(int lFlags, String& pstrName, Object& pVal, Int32& plFlavor);
    public int EndEnumeration_();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9556DC99-828C-11CF-A37E-00AA003240C7")]
internal interface System.Management.IWbemServices {
    public abstract virtual int OpenNamespace_(string strNamespace, int lFlags, IWbemContext pCtx, IWbemServices& ppWorkingNamespace, IntPtr ppCallResult);
    public abstract virtual int CancelAsyncCall_(IWbemObjectSink pSink);
    public abstract virtual int QueryObjectSink_(int lFlags, IWbemObjectSink& ppResponseHandler);
    public abstract virtual int GetObject_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemClassObjectFreeThreaded& ppObject, IntPtr ppCallResult);
    public abstract virtual int GetObjectAsync_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int PutClass_(IntPtr pObject, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    public abstract virtual int PutClassAsync_(IntPtr pObject, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int DeleteClass_(string strClass, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    public abstract virtual int DeleteClassAsync_(string strClass, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int CreateClassEnum_(string strSuperclass, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    public abstract virtual int CreateClassEnumAsync_(string strSuperclass, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int PutInstance_(IntPtr pInst, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    public abstract virtual int PutInstanceAsync_(IntPtr pInst, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int DeleteInstance_(string strObjectPath, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    public abstract virtual int DeleteInstanceAsync_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int CreateInstanceEnum_(string strFilter, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    public abstract virtual int CreateInstanceEnumAsync_(string strFilter, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int ExecQuery_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    public abstract virtual int ExecQueryAsync_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int ExecNotificationQuery_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    public abstract virtual int ExecNotificationQueryAsync_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    public abstract virtual int ExecMethod_(string strObjectPath, string strMethodName, int lFlags, IWbemContext pCtx, IntPtr pInParams, IWbemClassObjectFreeThreaded& ppOutParams, IntPtr ppCallResult);
    public abstract virtual int ExecMethodAsync_(string strObjectPath, string strMethodName, int lFlags, IWbemContext pCtx, IntPtr pInParams, IWbemObjectSink pResponseHandler);
}
[GuidAttribute("EB87E1BC-3233-11D2-AEC9-00C04FB68820")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWbemStatusCodeText {
    public abstract virtual int GetErrorCodeText_(int hRes, UInt32 LocaleId, int lFlags, String& MessageText);
    public abstract virtual int GetFacilityCodeText_(int hRes, UInt32 LocaleId, int lFlags, String& MessageText);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E246107B-B06E-11D0-AD61-00C04FD8FDFF")]
internal interface System.Management.IWbemUnboundObjectSink {
    public abstract virtual int IndicateToConsumer_(IWbemClassObject_DoNotMarshal pLogicalConsumer, int lNumObjects, IWbemClassObject_DoNotMarshal& apObjects);
}
[GuidAttribute("87A5AD68-A38A-43ef-ACA9-EFE910E5D24C")]
[InterfaceTypeAttribute("1")]
internal interface System.Management.IWmiEventSource {
    public abstract virtual void Indicate(IntPtr pIWbemClassObject);
    public abstract virtual void SetStatus(int lFlags, int hResult, string strParam, IntPtr pObjParam);
}
[DefaultMemberAttribute("Item")]
[ToolboxItemAttribute("False")]
public class System.Management.ManagementBaseObject : Component {
    private static WbemContext lockOnFastProx;
    internal IWbemClassObjectFreeThreaded _wbemObject;
    private PropertyDataCollection properties;
    private PropertyDataCollection systemProperties;
    private QualifierDataCollection qualifiers;
    internal IWbemClassObjectFreeThreaded wbemObject { get; internal set; }
    public PropertyDataCollection Properties { get; }
    public PropertyDataCollection SystemProperties { get; }
    public QualifierDataCollection Qualifiers { get; }
    public ManagementPath ClassPath { get; }
    public object Item { get; public set; }
    internal string ClassName { get; }
    internal bool IsClass { get; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ManagementBaseObject(SerializationInfo info, StreamingContext context);
    internal ManagementBaseObject(IWbemClassObjectFreeThreaded wbemObject);
    internal IWbemClassObjectFreeThreaded get_wbemObject();
    internal void set_wbemObject(IWbemClassObjectFreeThreaded value);
    public void Dispose();
    public static IntPtr op_Explicit(ManagementBaseObject managementObject);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static ManagementBaseObject GetBaseObject(IWbemClassObjectFreeThreaded wbemObject, ManagementScope scope);
    public virtual object Clone();
    internal virtual void Initialize(bool getObject);
    public virtual PropertyDataCollection get_Properties();
    public virtual PropertyDataCollection get_SystemProperties();
    public virtual QualifierDataCollection get_Qualifiers();
    public virtual ManagementPath get_ClassPath();
    public object get_Item(string propertyName);
    public void set_Item(string propertyName, object value);
    public object GetPropertyValue(string propertyName);
    public object GetQualifierValue(string qualifierName);
    public void SetQualifierValue(string qualifierName, object qualifierValue);
    public object GetPropertyQualifierValue(string propertyName, string qualifierName);
    public void SetPropertyQualifierValue(string propertyName, string qualifierName, object qualifierValue);
    public string GetText(TextFormat format);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool CompareTo(ManagementBaseObject otherObject, ComparisonSettings settings);
    internal string get_ClassName();
    private static bool _IsClass(IWbemClassObjectFreeThreaded wbemObject);
    internal bool get_IsClass();
    public void SetPropertyValue(string propertyName, object propertyValue);
}
public class System.Management.ManagementClass : ManagementObject {
    private MethodDataCollection methods;
    public ManagementPath Path { get; public set; }
    public StringCollection Derivation { get; }
    public MethodDataCollection Methods { get; }
    public ManagementClass(ManagementPath path);
    public ManagementClass(string path);
    public ManagementClass(ManagementPath path, ObjectGetOptions options);
    public ManagementClass(string path, ObjectGetOptions options);
    public ManagementClass(ManagementScope scope, ManagementPath path, ObjectGetOptions options);
    public ManagementClass(string scope, string path, ObjectGetOptions options);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ManagementClass(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static ManagementClass GetManagementClass(IWbemClassObjectFreeThreaded wbemObject, ManagementClass mgObj);
    internal static ManagementClass GetManagementClass(IWbemClassObjectFreeThreaded wbemObject, ManagementScope scope);
    public virtual ManagementPath get_Path();
    public virtual void set_Path(ManagementPath value);
    public StringCollection get_Derivation();
    public MethodDataCollection get_Methods();
    public ManagementObjectCollection GetInstances();
    public ManagementObjectCollection GetInstances(EnumerationOptions options);
    public void GetInstances(ManagementOperationObserver watcher);
    public void GetInstances(ManagementOperationObserver watcher, EnumerationOptions options);
    public ManagementObjectCollection GetSubclasses();
    public ManagementObjectCollection GetSubclasses(EnumerationOptions options);
    public void GetSubclasses(ManagementOperationObserver watcher);
    public void GetSubclasses(ManagementOperationObserver watcher, EnumerationOptions options);
    public ManagementClass Derive(string newClassName);
    public ManagementObject CreateInstance();
    public virtual object Clone();
    public ManagementObjectCollection GetRelatedClasses();
    public ManagementObjectCollection GetRelatedClasses(string relatedClass);
    public ManagementObjectCollection GetRelatedClasses(string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, EnumerationOptions options);
    public void GetRelatedClasses(ManagementOperationObserver watcher);
    public void GetRelatedClasses(ManagementOperationObserver watcher, string relatedClass);
    public void GetRelatedClasses(ManagementOperationObserver watcher, string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, EnumerationOptions options);
    public ManagementObjectCollection GetRelationshipClasses();
    public ManagementObjectCollection GetRelationshipClasses(string relationshipClass);
    public ManagementObjectCollection GetRelationshipClasses(string relationshipClass, string relationshipQualifier, string thisRole, EnumerationOptions options);
    public void GetRelationshipClasses(ManagementOperationObserver watcher);
    public void GetRelationshipClasses(ManagementOperationObserver watcher, string relationshipClass);
    public void GetRelationshipClasses(ManagementOperationObserver watcher, string relationshipClass, string relationshipQualifier, string thisRole, EnumerationOptions options);
    public CodeTypeDeclaration GetStronglyTypedClassCode(bool includeSystemClassInClassDef, bool systemPropertyClass);
    public bool GetStronglyTypedClassCode(CodeLanguage lang, string filePath, string classNamespace);
}
internal class System.Management.ManagementClassGenerator : object {
    private string VSVERSION;
    private string OriginalServer;
    private string OriginalNamespace;
    private string OriginalClassName;
    private string OriginalPath;
    private bool bSingletonClass;
    private bool bUnsignedSupported;
    private string NETNamespace;
    private string arrConvFuncName;
    private string enumType;
    private static int DMTF_DATETIME_STR_LENGTH;
    private bool bDateConversionFunctionsAdded;
    private bool bTimeSpanConversionFunctionsAdded;
    private ManagementClass classobj;
    private CodeDomProvider cp;
    private StreamWriter tw;
    private string genFileName;
    private CodeTypeDeclaration cc;
    private CodeTypeDeclaration ccc;
    private CodeTypeDeclaration ecc;
    private CodeTypeDeclaration EnumObj;
    private CodeNamespace cn;
    private CodeMemberProperty cmp;
    private CodeConstructor cctor;
    private CodeMemberField cf;
    private CodeObjectCreateExpression coce;
    private CodeParameterDeclarationExpression cpde;
    private CodeIndexerExpression cie;
    private CodeMemberField cmf;
    private CodeMemberMethod cmm;
    private CodePropertyReferenceExpression cpre;
    private CodeMethodInvokeExpression cmie;
    private CodeExpressionStatement cmis;
    private CodeConditionStatement cis;
    private CodeBinaryOperatorExpression cboe;
    private CodeIterationStatement cfls;
    private CodeAttributeArgument caa;
    private CodeAttributeDeclaration cad;
    private ArrayList arrKeyType;
    private ArrayList arrKeys;
    private ArrayList BitMap;
    private ArrayList BitValues;
    private ArrayList ValueMap;
    private ArrayList Values;
    private SortedList PublicProperties;
    private SortedList PublicMethods;
    private SortedList PublicNamesUsed;
    private SortedList PrivateNamesUsed;
    private bool bHasEmbeddedProperties;
    public string GeneratedFileName { get; }
    public string GeneratedTypeName { get; }
    public ManagementClassGenerator(ManagementClass cls);
    public CodeTypeDeclaration GenerateCode(bool includeSystemProperties, bool systemPropertyClass);
    public bool GenerateCode(CodeLanguage lang, string filePath, string netNamespace);
    private void CheckIfClassIsProperlyInitialized();
    private void InitializeCodeGeneration();
    private CodeTypeDeclaration GetCodeTypeDeclarationForClass(bool bIncludeSystemClassinClassDef);
    private bool GenerateAndWriteCode(CodeLanguage lang);
    private void InitializeClassObject();
    private void InitilializePublicPrivateMembers();
    private void ProcessNamingCollisions();
    private string ResolveCollision(string inString, bool bCheckthisFirst);
    private void ProcessNamespaceAndClassName();
    private void InitializeCodeTypeDeclaration(CodeLanguage lang);
    private void GeneratePublicReadOnlyProperty(string propName, string propType, string propValue, bool isLiteral, bool isBrowsable, string Comment);
    private void GeneratePublicProperty(string propName, string propType, CodeExpression Value, bool isBrowsable, string Comment, bool isStatic);
    private void GeneratePathProperty();
    private CodeTypeDeclaration GenerateSystemPropertiesClass();
    private void GenerateProperties();
    private string ProcessPropertyQualifiers(PropertyData prop, Boolean& bRead, Boolean& bWrite, Boolean& bStatic, bool bDynamicClass, Boolean& nullable);
    private bool GeneratePropertyHelperEnums(PropertyData prop, string strPropertyName, bool bNullable);
    private void GenerateConstructPath();
    private void GenerateDefaultConstructor();
    private void GenerateConstructorWithKeys();
    private void GenerateConstructorWithScopeKeys();
    private void GenerateConstructorWithPath();
    private void GenerateConstructorWithPathOptions();
    private void GenerateConstructorWithScopePath();
    private void GenerateConstructorWithScope();
    private void GenerateConstructorWithOptions();
    private void GenerateConstructorWithScopeOptions();
    private void GenerateConstructorWithScopePathOptions();
    private void GenarateConstructorWithLateBound();
    private void GenarateConstructorWithLateBoundForEmbedded();
    private void GenerateInitializeObject();
    private void GenerateMethods();
    private void GenerateGetInstancesWithNoParameters();
    private void GenerateGetInstancesWithCondition();
    private void GenerateGetInstancesWithProperties();
    private void GenerateGetInstancesWithWhereProperties();
    private void GenerateGetInstancesWithScope();
    private void GenerateGetInstancesWithScopeCondition();
    private void GenerateGetInstancesWithScopeProperties();
    private void GenerateGetInstancesWithScopeWhereProperties();
    private void GeneratePrivateMember(string memberName, string MemberType, string Comment);
    private void GeneratePrivateMember(string memberName, string MemberType, CodeExpression initExpression, bool isStatic, string Comment);
    private CodeTypeDeclaration GenerateTypeConverterClass();
    private void GenerateCollectionClass();
    private void GenerateEnumeratorClass();
    private int IsContainedIn(string strToFind, SortedList& sortedList);
    private CodeTypeReference ConvertCIMType(CimType cType, bool isArray);
    private static bool isTypeInt(CimType cType);
    public string get_GeneratedFileName();
    public string get_GeneratedTypeName();
    private static string ConvertValuesToName(string str);
    private void ResolveEnumNameValues(ArrayList arrIn, ArrayList& arrayOut);
    private static bool IsContainedInArray(string strToFind, ArrayList arrToSearch);
    private bool InitializeCodeGenerator(CodeLanguage lang);
    private void GetUnsignedSupport(CodeLanguage Language);
    private void GenerateCommitMethod();
    private static int ConvertBitMapValueToInt32(string bitMap);
    private string GetConversionFunction(CimType cimType);
    private static bool IsDesignerSerializationVisibilityToBeSet(string propName);
    private static bool IsPropertyValueType(CimType cType);
    private bool IsDynamicClass();
    private static string ConvertToNumericValueAndAddToArray(CimType cimType, string numericValue, ArrayList arrayToAdd, String& enumType);
    private void AddClassComments(CodeTypeDeclaration cc);
    private void GenerateClassNameProperty();
    private void GenerateIfClassvalidFuncWithAllParams();
    private void GenerateIfClassvalidFunction();
    private void GenerateCodeForRefAndDateTimeTypes(CodeIndexerExpression prop, bool bArray, CodeStatementCollection statColl, string strType, CodeVariableReferenceExpression varToAssign, bool bIsValueProprequired);
    private void AddPropertySet(CodeIndexerExpression prop, bool bArray, CodeStatementCollection statColl, string strType, CodeVariableReferenceExpression varValue);
    private CodeExpression CreateObjectForProperty(string strType, CodeExpression param);
    private CodeExpression ConvertPropertyToString(string strType, CodeExpression beginningExpression);
    private void GenerateScopeProperty();
    private void AddGetStatementsForEnumArray(CodeIndexerExpression ciProp, CodeMemberProperty cmProp);
    private void AddCommentsForEmbeddedProperties();
    private bool GetDateTimeType(PropertyData prop, CodeTypeReference& codeType);
    private void GenerateCreateInstance();
    private void GenerateDeleteInstance();
    private void GenerateDateTimeConversionFunction();
    private void GenerateTimeSpanConversionFunction();
    private void AddToDateTimeFunction();
    private static void DateTimeConversionFunctionHelper(CodeStatementCollection cmmdt, string toCompare, string tempVarName, string dmtfVarName, string toAssign, int SubStringParam1, int SubStringParam2);
    private void AddToDMTFTimeIntervalFunction();
    private void AddToDMTFDateTimeFunction();
    private void ToDMTFDateHelper(string dateTimeMember, CodeMemberMethod cmmdt, string strType);
    private void AddToTimeSpanFunction();
    private static void ToTimeSpanHelper(int start, int numOfCharacters, string strVarToAssign, CodeStatementCollection statCol);
    private void InitPrivateMemberVariables(CodeMemberMethod cmMethod);
    private void GenerateMethodToInitializeVariables();
    private static CodeMethodInvokeExpression GenerateConcatStrings(CodeExpression ce1, CodeExpression ce2);
}
public class System.Management.ManagementDateTimeConverter : object {
    private static int SIZEOFDMTFDATETIME;
    private static int MAXSIZE_UTC_DMTF;
    private static long MAXDATE_INTIMESPAN;
    public static DateTime ToDateTime(string dmtfDate);
    public static string ToDmtfDateTime(DateTime date);
    public static TimeSpan ToTimeSpan(string dmtfTimespan);
    public static string ToDmtfTimeInterval(TimeSpan timespan);
}
public abstract class System.Management.ManagementEventArgs : EventArgs {
    private object context;
    public object Context { get; }
    internal ManagementEventArgs(object context);
    public object get_Context();
}
[ToolboxItemAttribute("False")]
public class System.Management.ManagementEventWatcher : Component {
    private ManagementScope scope;
    private EventQuery query;
    private EventWatcherOptions options;
    private IEnumWbemClassObject enumWbem;
    private IWbemClassObjectFreeThreaded[] cachedObjects;
    private UInt32 cachedCount;
    private UInt32 cacheIndex;
    private SinkForEventQuery sink;
    private WmiDelegateInvoker delegateInvoker;
    [CompilerGeneratedAttribute]
private EventArrivedEventHandler EventArrived;
    [CompilerGeneratedAttribute]
private StoppedEventHandler Stopped;
    public ManagementScope Scope { get; public set; }
    public EventQuery Query { get; public set; }
    public EventWatcherOptions Options { get; public set; }
    public ManagementEventWatcher(EventQuery query);
    public ManagementEventWatcher(string query);
    public ManagementEventWatcher(ManagementScope scope, EventQuery query);
    public ManagementEventWatcher(string scope, string query);
    public ManagementEventWatcher(string scope, string query, EventWatcherOptions options);
    public ManagementEventWatcher(ManagementScope scope, EventQuery query, EventWatcherOptions options);
    private void HandleIdentifierChange(object sender, IdentifierChangedEventArgs e);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public void add_EventArrived(EventArrivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EventArrived(EventArrivedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Stopped(StoppedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(StoppedEventHandler value);
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public EventQuery get_Query();
    public void set_Query(EventQuery value);
    public EventWatcherOptions get_Options();
    public void set_Options(EventWatcherOptions value);
    public ManagementBaseObject WaitForNextEvent();
    public void Start();
    public void Stop();
    private void Initialize();
    internal void FireStopped(StoppedEventArgs args);
    internal void FireEventArrived(EventArrivedEventArgs args);
}
public class System.Management.ManagementException : SystemException {
    private ManagementBaseObject errorObject;
    private ManagementStatus errorCode;
    public ManagementBaseObject ErrorInformation { get; }
    public ManagementStatus ErrorCode { get; }
    internal ManagementException(ManagementStatus errorCode, string msg, ManagementBaseObject errObj);
    internal ManagementException(Exception e, string msg, ManagementBaseObject errObj);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ManagementException(SerializationInfo info, StreamingContext context);
    public ManagementException(string message);
    public ManagementException(string message, Exception innerException);
    internal static void ThrowWithExtendedInfo(ManagementStatus errorCode);
    internal static void ThrowWithExtendedInfo(Exception e);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string GetMessage(Exception e);
    private static string GetMessage(ManagementStatus errorCode);
    public ManagementBaseObject get_ErrorInformation();
    public ManagementStatus get_ErrorCode();
}
[DefaultMemberAttribute("Item")]
public class System.Management.ManagementNamedValueCollection : NameObjectCollectionBase {
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    public object Item { get; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ManagementNamedValueCollection(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    private void FireIdentifierChanged();
    internal IWbemContext GetContext();
    public void Add(string name, object value);
    public void Remove(string name);
    public void RemoveAll();
    public ManagementNamedValueCollection Clone();
    public object get_Item(string name);
}
public class System.Management.ManagementObject : ManagementBaseObject {
    internal static string ID;
    internal static string RETURNVALUE;
    private IWbemClassObjectFreeThreaded wmiClass;
    internal ManagementScope scope;
    internal ManagementPath path;
    internal ObjectGetOptions options;
    private bool putButNotGot;
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    internal bool PutButNotGot { get; internal set; }
    internal bool IsBound { get; }
    public ManagementScope Scope { get; public set; }
    public ManagementPath Path { get; public set; }
    public ObjectGetOptions Options { get; public set; }
    public ManagementPath ClassPath { get; }
    public ManagementObject(ManagementPath path);
    public ManagementObject(string path);
    public ManagementObject(ManagementPath path, ObjectGetOptions options);
    public ManagementObject(string path, ObjectGetOptions options);
    public ManagementObject(ManagementScope scope, ManagementPath path, ObjectGetOptions options);
    public ManagementObject(string scopeString, string pathString, ObjectGetOptions options);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ManagementObject(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public void Dispose();
    internal void FireIdentifierChanged();
    internal bool get_PutButNotGot();
    internal void set_PutButNotGot(bool value);
    private void HandleIdentifierChange(object sender, IdentifierChangedEventArgs e);
    internal bool get_IsBound();
    internal static ManagementObject GetManagementObject(IWbemClassObjectFreeThreaded wbemObject, ManagementObject mgObj);
    internal static ManagementObject GetManagementObject(IWbemClassObjectFreeThreaded wbemObject, ManagementScope scope);
    private void ManagementObjectCTOR(ManagementScope scope, ManagementPath path, ObjectGetOptions options);
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public virtual ManagementPath get_Path();
    public virtual void set_Path(ManagementPath value);
    public ObjectGetOptions get_Options();
    public void set_Options(ObjectGetOptions value);
    public virtual ManagementPath get_ClassPath();
    public void Get();
    public void Get(ManagementOperationObserver watcher);
    public ManagementObjectCollection GetRelated();
    public ManagementObjectCollection GetRelated(string relatedClass);
    public ManagementObjectCollection GetRelated(string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public void GetRelated(ManagementOperationObserver watcher);
    public void GetRelated(ManagementOperationObserver watcher, string relatedClass);
    public void GetRelated(ManagementOperationObserver watcher, string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public ManagementObjectCollection GetRelationships();
    public ManagementObjectCollection GetRelationships(string relationshipClass);
    public ManagementObjectCollection GetRelationships(string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public void GetRelationships(ManagementOperationObserver watcher);
    public void GetRelationships(ManagementOperationObserver watcher, string relationshipClass);
    public void GetRelationships(ManagementOperationObserver watcher, string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public ManagementPath Put();
    public ManagementPath Put(PutOptions options);
    private ManagementPath GetPath(IWbemCallResult callResult);
    public void Put(ManagementOperationObserver watcher);
    public void Put(ManagementOperationObserver watcher, PutOptions options);
    internal void HandleObjectPut(object sender, InternalObjectPutEventArgs e);
    public ManagementPath CopyTo(ManagementPath path);
    public ManagementPath CopyTo(string path);
    public ManagementPath CopyTo(string path, PutOptions options);
    public ManagementPath CopyTo(ManagementPath path, PutOptions options);
    public void CopyTo(ManagementOperationObserver watcher, ManagementPath path);
    public void CopyTo(ManagementOperationObserver watcher, string path);
    public void CopyTo(ManagementOperationObserver watcher, string path, PutOptions options);
    public void CopyTo(ManagementOperationObserver watcher, ManagementPath path, PutOptions options);
    public void Delete();
    public void Delete(DeleteOptions options);
    public void Delete(ManagementOperationObserver watcher);
    public void Delete(ManagementOperationObserver watcher, DeleteOptions options);
    public object InvokeMethod(string methodName, Object[] args);
    public void InvokeMethod(ManagementOperationObserver watcher, string methodName, Object[] args);
    public ManagementBaseObject InvokeMethod(string methodName, ManagementBaseObject inParameters, InvokeMethodOptions options);
    public void InvokeMethod(ManagementOperationObserver watcher, string methodName, ManagementBaseObject inParameters, InvokeMethodOptions options);
    public ManagementBaseObject GetMethodParameters(string methodName);
    private void GetMethodParameters(string methodName, ManagementBaseObject& inParameters, IWbemClassObjectFreeThreaded& inParametersClass, IWbemClassObjectFreeThreaded& outParametersClass);
    public virtual object Clone();
    public virtual string ToString();
    internal virtual void Initialize(bool getObject);
    private static void MapInParameters(Object[] args, ManagementBaseObject inParams, IWbemClassObjectFreeThreaded inParamsClass);
    private static object MapOutParameters(Object[] args, ManagementBaseObject outParams, IWbemClassObjectFreeThreaded outParamsClass);
}
public class System.Management.ManagementObjectCollection : object {
    private static string name;
    internal ManagementScope scope;
    internal EnumerationOptions options;
    private IEnumWbemClassObject enumWbem;
    private bool isDisposed;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal ManagementObjectCollection(ManagementScope scope, EnumerationOptions options, IEnumWbemClassObject enumWbem);
    private static ManagementObjectCollection();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(ManagementBaseObject[] objectCollection, int index);
    public ManagementObjectEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ToolboxItemAttribute("False")]
public class System.Management.ManagementObjectSearcher : Component {
    private ManagementScope scope;
    private ObjectQuery query;
    private EnumerationOptions options;
    public ManagementScope Scope { get; public set; }
    public ObjectQuery Query { get; public set; }
    public EnumerationOptions Options { get; public set; }
    public ManagementObjectSearcher(string queryString);
    public ManagementObjectSearcher(ObjectQuery query);
    public ManagementObjectSearcher(string scope, string queryString);
    public ManagementObjectSearcher(ManagementScope scope, ObjectQuery query);
    public ManagementObjectSearcher(string scope, string queryString, EnumerationOptions options);
    public ManagementObjectSearcher(ManagementScope scope, ObjectQuery query, EnumerationOptions options);
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public ObjectQuery get_Query();
    public void set_Query(ObjectQuery value);
    public EnumerationOptions get_Options();
    public void set_Options(EnumerationOptions value);
    public ManagementObjectCollection Get();
    public void Get(ManagementOperationObserver watcher);
    private void Initialize();
}
public class System.Management.ManagementOperationObserver : object {
    private Hashtable m_sinkCollection;
    private WmiDelegateInvoker delegateInvoker;
    [CompilerGeneratedAttribute]
private ObjectReadyEventHandler ObjectReady;
    [CompilerGeneratedAttribute]
private CompletedEventHandler Completed;
    [CompilerGeneratedAttribute]
private ProgressEventHandler Progress;
    [CompilerGeneratedAttribute]
private ObjectPutEventHandler ObjectPut;
    internal bool HaveListenersForProgress { get; }
    [CompilerGeneratedAttribute]
public void add_ObjectReady(ObjectReadyEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectReady(ObjectReadyEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Completed(CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Progress(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Progress(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectPut(ObjectPutEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectPut(ObjectPutEventHandler value);
    public void Cancel();
    internal WmiEventSink GetNewSink(ManagementScope scope, object context);
    internal bool get_HaveListenersForProgress();
    internal WmiEventSink GetNewPutSink(ManagementScope scope, object context, string path, string className);
    internal WmiGetEventSink GetNewGetSink(ManagementScope scope, object context, ManagementObject managementObject);
    internal void RemoveSink(WmiEventSink eventSink);
    internal void FireObjectReady(ObjectReadyEventArgs args);
    internal void FireCompleted(CompletedEventArgs args);
    internal void FireProgress(ProgressEventArgs args);
    internal void FireObjectPut(ObjectPutEventArgs args);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public abstract class System.Management.ManagementOptions : object {
    public static TimeSpan InfiniteTimeout;
    internal int flags;
    internal ManagementNamedValueCollection context;
    internal TimeSpan timeout;
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    internal int Flags { get; internal set; }
    public ManagementNamedValueCollection Context { get; public set; }
    public TimeSpan Timeout { get; public set; }
    internal bool SendStatus { get; internal set; }
    internal ManagementOptions(ManagementNamedValueCollection context, TimeSpan timeout);
    internal ManagementOptions(ManagementNamedValueCollection context, TimeSpan timeout, int flags);
    private static ManagementOptions();
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    internal void FireIdentifierChanged();
    internal void HandleIdentifierChange(object sender, IdentifierChangedEventArgs args);
    internal int get_Flags();
    internal void set_Flags(int value);
    public ManagementNamedValueCollection get_Context();
    public void set_Context(ManagementNamedValueCollection value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    internal IWbemContext GetContext();
    internal bool get_SendStatus();
    internal void set_SendStatus(bool value);
    public abstract virtual object Clone();
}
[TypeConverterAttribute("System.Management.ManagementPathConverter")]
public class System.Management.ManagementPath : object {
    private static ManagementPath defaultPath;
    private bool isWbemPathShared;
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    private IWbemPath wmiPath;
    public static ManagementPath DefaultPath { get; public set; }
    internal bool IsEmpty { get; }
    [RefreshPropertiesAttribute("1")]
public string Path { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string RelativePath { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string Server { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string NamespacePath { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string ClassName { get; public set; }
    internal string internalClassName { get; internal set; }
    public bool IsClass { get; }
    public bool IsInstance { get; }
    public bool IsSingleton { get; }
    public ManagementPath(string path);
    private static ManagementPath();
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    private void FireIdentifierChanged();
    internal static string GetManagementPath(IWbemClassObjectFreeThreaded wbemObject);
    internal static bool IsValidNamespaceSyntax(string nsPath);
    internal static ManagementPath _Clone(ManagementPath path);
    internal static ManagementPath _Clone(ManagementPath path, IdentifierChangedEventHandler handler);
    public virtual string ToString();
    public ManagementPath Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public static ManagementPath get_DefaultPath();
    public static void set_DefaultPath(ManagementPath value);
    private IWbemPath CreateWbemPath(string path);
    private void SetWbemPath(string path);
    private static void SetWbemPath(IWbemPath wbemPath, string path);
    private string GetWbemPath();
    private static string GetWbemPath(IWbemPath wbemPath);
    private void ClearKeys(bool setAsSingleton);
    internal bool get_IsEmpty();
    public void SetAsClass();
    public void SetAsSingleton();
    public string get_Path();
    public void set_Path(string value);
    public string get_RelativePath();
    public void set_RelativePath(string value);
    internal void SetRelativePath(string relPath);
    internal void UpdateRelativePath(string relPath);
    public string get_Server();
    public void set_Server(string value);
    internal string SetNamespacePath(string nsPath, Boolean& bChange);
    internal string GetNamespacePath(int flags);
    internal static string GetNamespacePath(IWbemPath wbemPath, int flags);
    public string get_NamespacePath();
    public void set_NamespacePath(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    internal string get_internalClassName();
    internal void set_internalClassName(string value);
    public bool get_IsClass();
    public bool get_IsInstance();
    public bool get_IsSingleton();
}
internal class System.Management.ManagementPathConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.Management.ManagementQueryConverter")]
public abstract class System.Management.ManagementQuery : object {
    internal static string DEFAULTQUERYLANGUAGE;
    internal static string TokenSelect;
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    private string queryLanguage;
    private string queryString;
    public string QueryString { get; public set; }
    public string QueryLanguage { get; public set; }
    internal ManagementQuery(string query);
    internal ManagementQuery(string language, string query);
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    internal void FireIdentifierChanged();
    internal void SetQueryString(string qString);
    protected internal virtual void ParseQuery(string query);
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public virtual string get_QueryLanguage();
    public virtual void set_QueryLanguage(string value);
    public abstract virtual object Clone();
    internal static void ParseToken(String& q, string token, string op, Boolean& bTokenFound, String& tokenValue);
    internal static void ParseToken(String& q, string token, Boolean& bTokenFound);
}
internal class System.Management.ManagementQueryConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.Management.ManagementScopeConverter")]
public class System.Management.ManagementScope : object {
    private ManagementPath validatedPath;
    private IWbemServices wbemServices;
    private ConnectionOptions options;
    [CompilerGeneratedAttribute]
private IdentifierChangedEventHandler IdentifierChanged;
    internal bool IsDefaulted;
    private ManagementPath prvpath { get; private set; }
    public bool IsConnected { get; }
    public ConnectionOptions Options { get; public set; }
    public ManagementPath Path { get; public set; }
    internal ManagementScope(ManagementPath path, IWbemServices wbemServices, ConnectionOptions options);
    internal ManagementScope(ManagementPath path, ManagementScope scope);
    public ManagementScope(ManagementPath path);
    public ManagementScope(string path);
    public ManagementScope(string path, ConnectionOptions options);
    public ManagementScope(ManagementPath path, ConnectionOptions options);
    [CompilerGeneratedAttribute]
internal void add_IdentifierChanged(IdentifierChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IdentifierChanged(IdentifierChangedEventHandler value);
    private void FireIdentifierChanged();
    private void HandleIdentifierChange(object sender, IdentifierChangedEventArgs args);
    private ManagementPath get_prvpath();
    private void set_prvpath(ManagementPath value);
    internal IWbemServices GetIWbemServices();
    public bool get_IsConnected();
    internal static ManagementScope _Clone(ManagementScope scope);
    internal static ManagementScope _Clone(ManagementScope scope, IdentifierChangedEventHandler handler);
    public ConnectionOptions get_Options();
    public void set_Options(ConnectionOptions value);
    public ManagementPath get_Path();
    public void set_Path(ManagementPath value);
    public ManagementScope Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public void Connect();
    internal void Initialize();
    private void InitializeGuts(object o);
    internal SecurityHandler GetSecurityHandler();
    internal SecuredConnectHandler GetSecuredConnectHandler();
    internal SecuredIEnumWbemClassObjectHandler GetSecuredIEnumWbemClassObjectHandler(IEnumWbemClassObject pEnumWbemClassObject);
    internal SecuredIWbemServicesHandler GetSecuredIWbemServicesHandler(IWbemServices pWbemServiecs);
}
internal class System.Management.ManagementScopeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Management.ManagementStatus : Enum {
    public int value__;
    public static ManagementStatus NoError;
    public static ManagementStatus False;
    public static ManagementStatus ResetToDefault;
    public static ManagementStatus Different;
    public static ManagementStatus Timedout;
    public static ManagementStatus NoMoreData;
    public static ManagementStatus OperationCanceled;
    public static ManagementStatus Pending;
    public static ManagementStatus DuplicateObjects;
    public static ManagementStatus PartialResults;
    public static ManagementStatus Failed;
    public static ManagementStatus NotFound;
    public static ManagementStatus AccessDenied;
    public static ManagementStatus ProviderFailure;
    public static ManagementStatus TypeMismatch;
    public static ManagementStatus OutOfMemory;
    public static ManagementStatus InvalidContext;
    public static ManagementStatus InvalidParameter;
    public static ManagementStatus NotAvailable;
    public static ManagementStatus CriticalError;
    public static ManagementStatus InvalidStream;
    public static ManagementStatus NotSupported;
    public static ManagementStatus InvalidSuperclass;
    public static ManagementStatus InvalidNamespace;
    public static ManagementStatus InvalidObject;
    public static ManagementStatus InvalidClass;
    public static ManagementStatus ProviderNotFound;
    public static ManagementStatus InvalidProviderRegistration;
    public static ManagementStatus ProviderLoadFailure;
    public static ManagementStatus InitializationFailure;
    public static ManagementStatus TransportFailure;
    public static ManagementStatus InvalidOperation;
    public static ManagementStatus InvalidQuery;
    public static ManagementStatus InvalidQueryType;
    public static ManagementStatus AlreadyExists;
    public static ManagementStatus OverrideNotAllowed;
    public static ManagementStatus PropagatedQualifier;
    public static ManagementStatus PropagatedProperty;
    public static ManagementStatus Unexpected;
    public static ManagementStatus IllegalOperation;
    public static ManagementStatus CannotBeKey;
    public static ManagementStatus IncompleteClass;
    public static ManagementStatus InvalidSyntax;
    public static ManagementStatus NondecoratedObject;
    public static ManagementStatus ReadOnly;
    public static ManagementStatus ProviderNotCapable;
    public static ManagementStatus ClassHasChildren;
    public static ManagementStatus ClassHasInstances;
    public static ManagementStatus QueryNotImplemented;
    public static ManagementStatus IllegalNull;
    public static ManagementStatus InvalidQualifierType;
    public static ManagementStatus InvalidPropertyType;
    public static ManagementStatus ValueOutOfRange;
    public static ManagementStatus CannotBeSingleton;
    public static ManagementStatus InvalidCimType;
    public static ManagementStatus InvalidMethod;
    public static ManagementStatus InvalidMethodParameters;
    public static ManagementStatus SystemProperty;
    public static ManagementStatus InvalidProperty;
    public static ManagementStatus CallCanceled;
    public static ManagementStatus ShuttingDown;
    public static ManagementStatus PropagatedMethod;
    public static ManagementStatus UnsupportedParameter;
    public static ManagementStatus MissingParameterID;
    public static ManagementStatus InvalidParameterID;
    public static ManagementStatus NonconsecutiveParameterIDs;
    public static ManagementStatus ParameterIDOnRetval;
    public static ManagementStatus InvalidObjectPath;
    public static ManagementStatus OutOfDiskSpace;
    public static ManagementStatus BufferTooSmall;
    public static ManagementStatus UnsupportedPutExtension;
    public static ManagementStatus UnknownObjectType;
    public static ManagementStatus UnknownPacketType;
    public static ManagementStatus MarshalVersionMismatch;
    public static ManagementStatus MarshalInvalidSignature;
    public static ManagementStatus InvalidQualifier;
    public static ManagementStatus InvalidDuplicateParameter;
    public static ManagementStatus TooMuchData;
    public static ManagementStatus ServerTooBusy;
    public static ManagementStatus InvalidFlavor;
    public static ManagementStatus CircularReference;
    public static ManagementStatus UnsupportedClassUpdate;
    public static ManagementStatus CannotChangeKeyInheritance;
    public static ManagementStatus CannotChangeIndexInheritance;
    public static ManagementStatus TooManyProperties;
    public static ManagementStatus UpdateTypeMismatch;
    public static ManagementStatus UpdateOverrideNotAllowed;
    public static ManagementStatus UpdatePropagatedMethod;
    public static ManagementStatus MethodNotImplemented;
    public static ManagementStatus MethodDisabled;
    public static ManagementStatus RefresherBusy;
    public static ManagementStatus UnparsableQuery;
    public static ManagementStatus NotEventClass;
    public static ManagementStatus MissingGroupWithin;
    public static ManagementStatus MissingAggregationList;
    public static ManagementStatus PropertyNotAnObject;
    public static ManagementStatus AggregatingByObject;
    public static ManagementStatus UninterpretableProviderQuery;
    public static ManagementStatus BackupRestoreWinmgmtRunning;
    public static ManagementStatus QueueOverflow;
    public static ManagementStatus PrivilegeNotHeld;
    public static ManagementStatus InvalidOperator;
    public static ManagementStatus LocalCredentials;
    public static ManagementStatus CannotBeAbstract;
    public static ManagementStatus AmendedObject;
    public static ManagementStatus ClientTooSlow;
    public static ManagementStatus RegistrationTooBroad;
    public static ManagementStatus RegistrationTooPrecise;
}
internal class System.Management.MarshalWbemObject : object {
    private string cookie;
    private MarshalWbemObject(string cookie);
    public static ICustomMarshaler GetInstance(string cookie);
    public sealed virtual void CleanUpManagedData(object obj);
    public sealed virtual void CleanUpNativeData(IntPtr pObj);
    public sealed virtual int GetNativeDataSize();
    public sealed virtual IntPtr MarshalManagedToNative(object obj);
    public sealed virtual object MarshalNativeToManaged(IntPtr pObj);
}
public class System.Management.MethodData : object {
    private ManagementObject parent;
    private string methodName;
    private IWbemClassObjectFreeThreaded wmiInParams;
    private IWbemClassObjectFreeThreaded wmiOutParams;
    private QualifierDataCollection qualifiers;
    public string Name { get; }
    public ManagementBaseObject InParameters { get; }
    public ManagementBaseObject OutParameters { get; }
    public string Origin { get; }
    public QualifierDataCollection Qualifiers { get; }
    internal MethodData(ManagementObject parent, string methodName);
    private void RefreshMethodInfo();
    public string get_Name();
    public ManagementBaseObject get_InParameters();
    public ManagementBaseObject get_OutParameters();
    public string get_Origin();
    public QualifierDataCollection get_Qualifiers();
}
[DefaultMemberAttribute("Item")]
public class System.Management.MethodDataCollection : object {
    private ManagementObject parent;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MethodData Item { get; }
    internal MethodDataCollection(ManagementObject parent);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(MethodData[] methodArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public MethodDataEnumerator GetEnumerator();
    public virtual MethodData get_Item(string methodName);
    public virtual void Remove(string methodName);
    public virtual void Add(string methodName);
    public virtual void Add(string methodName, ManagementBaseObject inParameters, ManagementBaseObject outParameters);
}
internal static class System.Management.MTAHelper : object {
    private static ArrayList reqList;
    private static object critSec;
    private static AutoResetEvent evtGo;
    private static bool workerThreadInitialized;
    private static Guid IID_IObjectContext;
    private static Guid IID_IComThreadingInfo;
    private static bool CanCallCoGetObjectContext;
    private static MTAHelper();
    private static void InitWorkerThread();
    public static object CreateInMTA(Type type);
    private static void WorkerThread();
    public static bool IsNoContextMTA();
    private static bool IsWindows2000OrHigher();
}
public class System.Management.ObjectGetOptions : ManagementOptions {
    public bool UseAmendedQualifiers { get; public set; }
    public ObjectGetOptions(ManagementNamedValueCollection context);
    public ObjectGetOptions(ManagementNamedValueCollection context, TimeSpan timeout, bool useAmendedQualifiers);
    internal static ObjectGetOptions _Clone(ObjectGetOptions options);
    internal static ObjectGetOptions _Clone(ObjectGetOptions options, IdentifierChangedEventHandler handler);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public virtual object Clone();
}
public class System.Management.ObjectPutEventArgs : ManagementEventArgs {
    private ManagementPath wmiPath;
    public ManagementPath Path { get; }
    internal ObjectPutEventArgs(object context, ManagementPath path);
    public ManagementPath get_Path();
}
public class System.Management.ObjectPutEventHandler : MulticastDelegate {
    public ObjectPutEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectPutEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectPutEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ObjectQuery : ManagementQuery {
    public ObjectQuery(string query);
    public ObjectQuery(string language, string query);
    public virtual object Clone();
}
public class System.Management.ObjectReadyEventArgs : ManagementEventArgs {
    private ManagementBaseObject wmiObject;
    public ManagementBaseObject NewObject { get; }
    internal ObjectReadyEventArgs(object context, ManagementBaseObject wmiObject);
    public ManagementBaseObject get_NewObject();
}
public class System.Management.ObjectReadyEventHandler : MulticastDelegate {
    public ObjectReadyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectReadyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectReadyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ProgressEventArgs : ManagementEventArgs {
    private int upperBound;
    private int current;
    private string message;
    public int UpperBound { get; }
    public int Current { get; }
    public string Message { get; }
    internal ProgressEventArgs(object context, int upperBound, int current, string message);
    public int get_UpperBound();
    public int get_Current();
    public string get_Message();
}
public class System.Management.ProgressEventHandler : MulticastDelegate {
    public ProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.PropertyData : object {
    private ManagementBaseObject parent;
    private string propertyName;
    private object propertyValue;
    private long propertyNullEnumValue;
    private int propertyType;
    private int propertyFlavor;
    private QualifierDataCollection qualifiers;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType Type { get; }
    public bool IsLocal { get; }
    public bool IsArray { get; }
    public string Origin { get; }
    public QualifierDataCollection Qualifiers { get; }
    internal long NullEnumValue { get; internal set; }
    internal PropertyData(ManagementBaseObject parent, string propName);
    private void RefreshPropertyInfo();
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public CimType get_Type();
    public bool get_IsLocal();
    public bool get_IsArray();
    public string get_Origin();
    public QualifierDataCollection get_Qualifiers();
    internal long get_NullEnumValue();
    internal void set_NullEnumValue(long value);
    internal static object MapWmiValueToValue(object wmiValue, CimType type, bool isArray);
    internal static object MapValueToWmiValue(object val, CimType type, bool isArray);
    internal static object MapValueToWmiValue(object val, Boolean& isArray, CimType& type);
}
[DefaultMemberAttribute("Item")]
public class System.Management.PropertyDataCollection : object {
    private ManagementBaseObject parent;
    private bool isSystem;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PropertyData Item { get; }
    internal PropertyDataCollection(ManagementBaseObject parent, bool isSystem);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(PropertyData[] propertyArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public PropertyDataEnumerator GetEnumerator();
    public virtual PropertyData get_Item(string propertyName);
    public virtual void Remove(string propertyName);
    public virtual void Add(string propertyName, object propertyValue);
    public void Add(string propertyName, object propertyValue, CimType propertyType);
    public void Add(string propertyName, CimType propertyType, bool isArray);
}
public class System.Management.PutOptions : ManagementOptions {
    public bool UseAmendedQualifiers { get; public set; }
    public PutType Type { get; public set; }
    public PutOptions(ManagementNamedValueCollection context);
    public PutOptions(ManagementNamedValueCollection context, TimeSpan timeout, bool useAmendedQualifiers, PutType putType);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public PutType get_Type();
    public void set_Type(PutType value);
    public virtual object Clone();
}
public enum System.Management.PutType : Enum {
    public int value__;
    public static PutType None;
    public static PutType UpdateOnly;
    public static PutType CreateOnly;
    public static PutType UpdateOrCreate;
}
public class System.Management.QualifierData : object {
    private ManagementBaseObject parent;
    private string propertyOrMethodName;
    private string qualifierName;
    private QualifierType qualifierType;
    private object qualifierValue;
    private int qualifierFlavor;
    private IWbemQualifierSetFreeThreaded qualifierSet;
    public string Name { get; }
    public object Value { get; public set; }
    public bool IsAmended { get; public set; }
    public bool IsLocal { get; }
    public bool PropagatesToInstance { get; public set; }
    public bool PropagatesToSubclass { get; public set; }
    public bool IsOverridable { get; public set; }
    internal QualifierData(ManagementBaseObject parent, string propName, string qualName, QualifierType type);
    private void RefreshQualifierInfo();
    private static object MapQualValueToWmiValue(object qualVal);
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsAmended();
    public void set_IsAmended(bool value);
    public bool get_IsLocal();
    public bool get_PropagatesToInstance();
    public void set_PropagatesToInstance(bool value);
    public bool get_PropagatesToSubclass();
    public void set_PropagatesToSubclass(bool value);
    public bool get_IsOverridable();
    public void set_IsOverridable(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Management.QualifierDataCollection : object {
    private ManagementBaseObject parent;
    private string propertyOrMethodName;
    private QualifierType qualifierSetType;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public QualifierData Item { get; }
    internal QualifierDataCollection(ManagementBaseObject parent);
    internal QualifierDataCollection(ManagementBaseObject parent, string propertyOrMethodName, QualifierType type);
    private IWbemQualifierSetFreeThreaded GetTypeQualifierSet();
    private IWbemQualifierSetFreeThreaded GetTypeQualifierSet(QualifierType qualifierSetType);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(QualifierData[] qualifierArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public QualifierDataEnumerator GetEnumerator();
    public virtual QualifierData get_Item(string qualifierName);
    public virtual void Remove(string qualifierName);
    public virtual void Add(string qualifierName, object qualifierValue);
    public virtual void Add(string qualifierName, object qualifierValue, bool isAmended, bool propagatesToInstance, bool propagatesToSubclass, bool isOverridable);
}
internal enum System.Management.QualifierType : Enum {
    public int value__;
    public static QualifierType ObjectQualifier;
    public static QualifierType PropertyQualifier;
    public static QualifierType MethodQualifier;
}
public class System.Management.RelatedObjectQuery : WqlObjectQuery {
    private static string TokenAssociators;
    private static string TokenOf;
    private static string TokenWhere;
    private static string TokenResultClass;
    private static string TokenAssocClass;
    private static string TokenResultRole;
    private static string TokenRole;
    private static string TokenRequiredQualifier;
    private static string TokenRequiredAssocQualifier;
    private static string TokenClassDefsOnly;
    private static string TokenSchemaOnly;
    private bool isSchemaQuery;
    private string sourceObject;
    private string relatedClass;
    private string relationshipClass;
    private string relatedQualifier;
    private string relationshipQualifier;
    private string relatedRole;
    private string thisRole;
    private bool classDefinitionsOnly;
    public bool IsSchemaQuery { get; public set; }
    public string SourceObject { get; public set; }
    public string RelatedClass { get; public set; }
    public string RelationshipClass { get; public set; }
    public string RelatedQualifier { get; public set; }
    public string RelationshipQualifier { get; public set; }
    public string RelatedRole { get; public set; }
    public string ThisRole { get; public set; }
    public bool ClassDefinitionsOnly { get; public set; }
    public RelatedObjectQuery(string queryOrSourceObject);
    public RelatedObjectQuery(string sourceObject, string relatedClass);
    public RelatedObjectQuery(string sourceObject, string relatedClass, string relationshipClass, string relatedQualifier, string relationshipQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly);
    public RelatedObjectQuery(bool isSchemaQuery, string sourceObject, string relatedClass, string relationshipClass, string relatedQualifier, string relationshipQualifier, string relatedRole, string thisRole);
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_SourceObject();
    public void set_SourceObject(string value);
    public string get_RelatedClass();
    public void set_RelatedClass(string value);
    public string get_RelationshipClass();
    public void set_RelationshipClass(string value);
    public string get_RelatedQualifier();
    public void set_RelatedQualifier(string value);
    public string get_RelationshipQualifier();
    public void set_RelationshipQualifier(string value);
    public string get_RelatedRole();
    public void set_RelatedRole(string value);
    public string get_ThisRole();
    public void set_ThisRole(string value);
    public bool get_ClassDefinitionsOnly();
    public void set_ClassDefinitionsOnly(bool value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.RelationshipQuery : WqlObjectQuery {
    private static string TokenReferences;
    private static string TokenOf;
    private static string TokenWhere;
    private static string TokenResultClass;
    private static string TokenRole;
    private static string TokenRequiredQualifier;
    private static string TokenClassDefsOnly;
    private static string TokenSchemaOnly;
    private string sourceObject;
    private string relationshipClass;
    private string relationshipQualifier;
    private string thisRole;
    private bool classDefinitionsOnly;
    private bool isSchemaQuery;
    public bool IsSchemaQuery { get; public set; }
    public string SourceObject { get; public set; }
    public string RelationshipClass { get; public set; }
    public string RelationshipQualifier { get; public set; }
    public string ThisRole { get; public set; }
    public bool ClassDefinitionsOnly { get; public set; }
    public RelationshipQuery(string queryOrSourceObject);
    public RelationshipQuery(string sourceObject, string relationshipClass);
    public RelationshipQuery(string sourceObject, string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly);
    public RelationshipQuery(bool isSchemaQuery, string sourceObject, string relationshipClass, string relationshipQualifier, string thisRole);
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_SourceObject();
    public void set_SourceObject(string value);
    public string get_RelationshipClass();
    public void set_RelationshipClass(string value);
    public string get_RelationshipQualifier();
    public void set_RelationshipQualifier(string value);
    public string get_ThisRole();
    public void set_ThisRole(string value);
    public bool get_ClassDefinitionsOnly();
    public void set_ClassDefinitionsOnly(bool value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
internal class System.Management.SecuredConnectHandler : object {
    private ManagementScope scope;
    internal SecuredConnectHandler(ManagementScope theScope);
    internal int ConnectNSecureIWbemServices(string path, IWbemServices& pServices);
}
internal class System.Management.SecuredIEnumWbemClassObjectHandler : object {
    private IEnumWbemClassObject pEnumWbemClassObjectsecurityHelper;
    private ManagementScope scope;
    internal SecuredIEnumWbemClassObjectHandler(ManagementScope theScope, IEnumWbemClassObject pEnumWbemClassObject);
    internal int Reset_();
    internal int Next_(int lTimeout, UInt32 uCount, IWbemClassObject_DoNotMarshal[] ppOutParams, UInt32& puReturned);
    internal int NextAsync_(UInt32 uCount, IWbemObjectSink pSink);
    internal int Clone_(IEnumWbemClassObject& ppEnum);
    internal int Skip_(int lTimeout, UInt32 nCount);
}
internal class System.Management.SecuredIWbemServicesHandler : object {
    private IWbemServices pWbemServiecsSecurityHelper;
    private ManagementScope scope;
    internal SecuredIWbemServicesHandler(ManagementScope theScope, IWbemServices pWbemServiecs);
    internal int OpenNamespace_(string strNamespace, int lFlags, IWbemServices& ppWorkingNamespace, IntPtr ppCallResult);
    internal int CancelAsyncCall_(IWbemObjectSink pSink);
    internal int QueryObjectSink_(int lFlags, IWbemObjectSink& ppResponseHandler);
    internal int GetObject_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemClassObjectFreeThreaded& ppObject, IntPtr ppCallResult);
    internal int GetObjectAsync_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int PutClass_(IWbemClassObjectFreeThreaded pObject, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    internal int PutClassAsync_(IWbemClassObjectFreeThreaded pObject, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int DeleteClass_(string strClass, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    internal int DeleteClassAsync_(string strClass, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int CreateClassEnum_(string strSuperClass, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    internal int CreateClassEnumAsync_(string strSuperClass, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int PutInstance_(IWbemClassObjectFreeThreaded pInst, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    internal int PutInstanceAsync_(IWbemClassObjectFreeThreaded pInst, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int DeleteInstance_(string strObjectPath, int lFlags, IWbemContext pCtx, IntPtr ppCallResult);
    internal int DeleteInstanceAsync_(string strObjectPath, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int CreateInstanceEnum_(string strFilter, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    internal int CreateInstanceEnumAsync_(string strFilter, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int ExecQuery_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    internal int ExecQueryAsync_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int ExecNotificationQuery_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IEnumWbemClassObject& ppEnum);
    internal int ExecNotificationQueryAsync_(string strQueryLanguage, string strQuery, int lFlags, IWbemContext pCtx, IWbemObjectSink pResponseHandler);
    internal int ExecMethod_(string strObjectPath, string strMethodName, int lFlags, IWbemContext pCtx, IWbemClassObjectFreeThreaded pInParams, IWbemClassObjectFreeThreaded& ppOutParams, IntPtr ppCallResult);
    internal int ExecMethodAsync_(string strObjectPath, string strMethodName, int lFlags, IWbemContext pCtx, IWbemClassObjectFreeThreaded pInParams, IWbemObjectSink pResponseHandler);
}
internal class System.Management.SecurityHandler : object {
    private bool needToReset;
    private IntPtr handle;
    private ManagementScope scope;
    internal SecurityHandler(ManagementScope theScope);
    internal void Reset();
    internal void Secure(IWbemServices services);
    internal void SecureIUnknown(object unknown);
}
public class System.Management.SelectQuery : WqlObjectQuery {
    private bool isSchemaQuery;
    private string className;
    private string condition;
    private StringCollection selectedProperties;
    public string QueryString { get; public set; }
    public bool IsSchemaQuery { get; public set; }
    public string ClassName { get; public set; }
    public string Condition { get; public set; }
    public StringCollection SelectedProperties { get; public set; }
    public SelectQuery(string queryOrClassName);
    public SelectQuery(string className, string condition);
    public SelectQuery(string className, string condition, String[] selectedProperties);
    public SelectQuery(bool isSchemaQuery, string condition);
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public StringCollection get_SelectedProperties();
    public void set_SelectedProperties(StringCollection value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
internal class System.Management.SinkForEventQuery : object {
    private ManagementEventWatcher eventWatcher;
    private object context;
    private IWbemServices services;
    private IWbemObjectSink stub;
    private int status;
    private bool isLocal;
    public int Status { get; public set; }
    internal IWbemObjectSink Stub { get; }
    public SinkForEventQuery(ManagementEventWatcher eventWatcher, object context, IWbemServices services);
    public int get_Status();
    public void set_Status(int value);
    private void HackToCreateStubInMTA(object param);
    internal IWbemObjectSink get_Stub();
    public sealed virtual void Indicate(IntPtr pWbemClassObject);
    public sealed virtual void SetStatus(int flags, int hResult, string message, IntPtr pErrObj);
    private void Cancel2(object o);
    internal void Cancel();
    internal void ReleaseStub();
}
public class System.Management.StoppedEventArgs : ManagementEventArgs {
    private int status;
    public ManagementStatus Status { get; }
    internal StoppedEventArgs(object context, int status);
    public ManagementStatus get_Status();
}
public class System.Management.StoppedEventHandler : MulticastDelegate {
    public StoppedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StoppedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StoppedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Management.tag_CIMTYPE_ENUMERATION : Enum {
    public int value__;
    public static tag_CIMTYPE_ENUMERATION CIM_ILLEGAL;
    public static tag_CIMTYPE_ENUMERATION CIM_EMPTY;
    public static tag_CIMTYPE_ENUMERATION CIM_SINT8;
    public static tag_CIMTYPE_ENUMERATION CIM_UINT8;
    public static tag_CIMTYPE_ENUMERATION CIM_SINT16;
    public static tag_CIMTYPE_ENUMERATION CIM_UINT16;
    public static tag_CIMTYPE_ENUMERATION CIM_SINT32;
    public static tag_CIMTYPE_ENUMERATION CIM_UINT32;
    public static tag_CIMTYPE_ENUMERATION CIM_SINT64;
    public static tag_CIMTYPE_ENUMERATION CIM_UINT64;
    public static tag_CIMTYPE_ENUMERATION CIM_REAL32;
    public static tag_CIMTYPE_ENUMERATION CIM_REAL64;
    public static tag_CIMTYPE_ENUMERATION CIM_BOOLEAN;
    public static tag_CIMTYPE_ENUMERATION CIM_STRING;
    public static tag_CIMTYPE_ENUMERATION CIM_DATETIME;
    public static tag_CIMTYPE_ENUMERATION CIM_REFERENCE;
    public static tag_CIMTYPE_ENUMERATION CIM_CHAR16;
    public static tag_CIMTYPE_ENUMERATION CIM_OBJECT;
    public static tag_CIMTYPE_ENUMERATION CIM_FLAG_ARRAY;
}
internal enum System.Management.tag_WBEM_CHANGE_FLAG_TYPE : Enum {
    public int value__;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_CREATE_OR_UPDATE;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_UPDATE_ONLY;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_CREATE_ONLY;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_UPDATE_COMPATIBLE;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_UPDATE_SAFE_MODE;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_UPDATE_FORCE_MODE;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_MASK_UPDATE_MODE;
    public static tag_WBEM_CHANGE_FLAG_TYPE WBEM_FLAG_ADVISORY;
}
internal enum System.Management.tag_WBEM_CONDITION_FLAG_TYPE : Enum {
    public int value__;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_ALWAYS;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_ONLY_IF_TRUE;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_ONLY_IF_FALSE;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_ONLY_IF_IDENTICAL;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_MASK_PRIMARY_CONDITION;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_KEYS_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_REFS_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_LOCAL_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_PROPAGATED_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_SYSTEM_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_NONSYSTEM_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_MASK_CONDITION_ORIGIN;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_CLASS_OVERRIDES_ONLY;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES;
    public static tag_WBEM_CONDITION_FLAG_TYPE WBEM_MASK_CLASS_CONDITION;
}
internal enum System.Management.tag_WBEM_CONNECT_OPTIONS : Enum {
    public int value__;
    public static tag_WBEM_CONNECT_OPTIONS WBEM_FLAG_CONNECT_REPOSITORY_ONLY;
    public static tag_WBEM_CONNECT_OPTIONS WBEM_FLAG_CONNECT_USE_MAX_WAIT;
}
internal enum System.Management.tag_WBEM_FLAVOR_TYPE : Enum {
    public int value__;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_DONT_PROPAGATE;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_MASK_PROPAGATION;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_OVERRIDABLE;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_NOT_OVERRIDABLE;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_MASK_PERMISSIONS;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_ORIGIN_LOCAL;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_ORIGIN_PROPAGATED;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_ORIGIN_SYSTEM;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_MASK_ORIGIN;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_NOT_AMENDED;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_AMENDED;
    public static tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_MASK_AMENDED;
}
internal enum System.Management.tag_WBEM_GENERIC_FLAG_TYPE : Enum {
    public int value__;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_RETURN_IMMEDIATELY;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_RETURN_WBEM_COMPLETE;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_BIDIRECTIONAL;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_FORWARD_ONLY;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_NO_ERROR_OBJECT;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_RETURN_ERROR_OBJECT;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_SEND_STATUS;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_DONT_SEND_STATUS;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_ENSURE_LOCATABLE;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_DIRECT_READ;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_SEND_ONLY_SELECTED;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_RETURN_WHEN_COMPLETE;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_RETURN_IMMEDIATELY;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_MASK_RESERVED_FLAGS;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_USE_AMENDED_QUALIFIERS;
    public static tag_WBEM_GENERIC_FLAG_TYPE WBEM_FLAG_STRONG_VALIDATION;
}
internal enum System.Management.tag_WBEM_GENUS_TYPE : Enum {
    public int value__;
    public static tag_WBEM_GENUS_TYPE WBEM_GENUS_CLASS;
    public static tag_WBEM_GENUS_TYPE WBEM_GENUS_INSTANCE;
}
internal enum System.Management.tag_WBEM_GET_TEXT_FLAGS : Enum {
    public int value__;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_COMPRESSED;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_GET_RELATIVE_ONLY;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_GET_SERVER_TOO;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_GET_NAMESPACE_ONLY;
    public static tag_WBEM_GET_TEXT_FLAGS WBEMPATH_GET_ORIGINAL;
}
internal enum System.Management.tag_WBEM_PATH_CREATE_FLAG : Enum {
    public int value__;
    public static tag_WBEM_PATH_CREATE_FLAG WBEMPATH_CREATE_ACCEPT_RELATIVE;
    public static tag_WBEM_PATH_CREATE_FLAG WBEMPATH_CREATE_ACCEPT_ABSOLUTE;
    public static tag_WBEM_PATH_CREATE_FLAG WBEMPATH_CREATE_ACCEPT_ALL;
    public static tag_WBEM_PATH_CREATE_FLAG WBEMPATH_TREAT_SINGLE_IDENT_AS_NS;
}
internal enum System.Management.tag_WBEM_PATH_STATUS_FLAG : Enum {
    public int value__;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_ANON_LOCAL_MACHINE;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_HAS_MACHINE_NAME;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_IS_CLASS_REF;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_IS_INST_REF;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_HAS_SUBSCOPES;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_IS_COMPOUND;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_HAS_V2_REF_PATHS;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_HAS_IMPLIED_KEY;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_CONTAINS_SINGLETON;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_V1_COMPLIANT;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_V2_COMPLIANT;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_CIM_COMPLIANT;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_IS_SINGLETON;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_IS_PARENT;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_SERVER_NAMESPACE_ONLY;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_NATIVE_PATH;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_WMI_PATH;
    public static tag_WBEM_PATH_STATUS_FLAG WBEMPATH_INFO_PATH_HAD_SERVER;
}
internal enum System.Management.tag_WBEM_QUERY_FLAG_TYPE : Enum {
    public int value__;
    public static tag_WBEM_QUERY_FLAG_TYPE WBEM_FLAG_DEEP;
    public static tag_WBEM_QUERY_FLAG_TYPE WBEM_FLAG_SHALLOW;
    public static tag_WBEM_QUERY_FLAG_TYPE WBEM_FLAG_PROTOTYPE;
}
internal enum System.Management.tag_WBEM_STATUS_TYPE : Enum {
    public int value__;
    public static tag_WBEM_STATUS_TYPE WBEM_STATUS_COMPLETE;
    public static tag_WBEM_STATUS_TYPE WBEM_STATUS_REQUIREMENTS;
    public static tag_WBEM_STATUS_TYPE WBEM_STATUS_PROGRESS;
}
internal enum System.Management.tag_WBEM_TIMEOUT_TYPE : Enum {
    public int value__;
    public static tag_WBEM_TIMEOUT_TYPE WBEM_NO_WAIT;
    public static tag_WBEM_TIMEOUT_TYPE WBEM_INFINITE;
}
internal enum System.Management.tag_WBEMSTATUS : Enum {
    public int value__;
    public static tag_WBEMSTATUS WBEM_NO_ERROR;
    public static tag_WBEMSTATUS WBEM_S_NO_ERROR;
    public static tag_WBEMSTATUS WBEM_S_SAME;
    public static tag_WBEMSTATUS WBEM_S_FALSE;
    public static tag_WBEMSTATUS WBEM_S_ALREADY_EXISTS;
    public static tag_WBEMSTATUS WBEM_S_RESET_TO_DEFAULT;
    public static tag_WBEMSTATUS WBEM_S_DIFFERENT;
    public static tag_WBEMSTATUS WBEM_S_TIMEDOUT;
    public static tag_WBEMSTATUS WBEM_S_NO_MORE_DATA;
    public static tag_WBEMSTATUS WBEM_S_OPERATION_CANCELLED;
    public static tag_WBEMSTATUS WBEM_S_PENDING;
    public static tag_WBEMSTATUS WBEM_S_DUPLICATE_OBJECTS;
    public static tag_WBEMSTATUS WBEM_S_ACCESS_DENIED;
    public static tag_WBEMSTATUS WBEM_S_PARTIAL_RESULTS;
    public static tag_WBEMSTATUS WBEM_S_NO_POSTHOOK;
    public static tag_WBEMSTATUS WBEM_S_POSTHOOK_WITH_BOTH;
    public static tag_WBEMSTATUS WBEM_S_POSTHOOK_WITH_NEW;
    public static tag_WBEMSTATUS WBEM_S_POSTHOOK_WITH_STATUS;
    public static tag_WBEMSTATUS WBEM_S_POSTHOOK_WITH_OLD;
    public static tag_WBEMSTATUS WBEM_S_REDO_PREHOOK_WITH_ORIGINAL_OBJECT;
    public static tag_WBEMSTATUS WBEM_S_SOURCE_NOT_AVAILABLE;
    public static tag_WBEMSTATUS WBEM_E_FAILED;
    public static tag_WBEMSTATUS WBEM_E_NOT_FOUND;
    public static tag_WBEMSTATUS WBEM_E_ACCESS_DENIED;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_FAILURE;
    public static tag_WBEMSTATUS WBEM_E_TYPE_MISMATCH;
    public static tag_WBEMSTATUS WBEM_E_OUT_OF_MEMORY;
    public static tag_WBEMSTATUS WBEM_E_INVALID_CONTEXT;
    public static tag_WBEMSTATUS WBEM_E_INVALID_PARAMETER;
    public static tag_WBEMSTATUS WBEM_E_NOT_AVAILABLE;
    public static tag_WBEMSTATUS WBEM_E_CRITICAL_ERROR;
    public static tag_WBEMSTATUS WBEM_E_INVALID_STREAM;
    public static tag_WBEMSTATUS WBEM_E_NOT_SUPPORTED;
    public static tag_WBEMSTATUS WBEM_E_INVALID_SUPERCLASS;
    public static tag_WBEMSTATUS WBEM_E_INVALID_NAMESPACE;
    public static tag_WBEMSTATUS WBEM_E_INVALID_OBJECT;
    public static tag_WBEMSTATUS WBEM_E_INVALID_CLASS;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_NOT_FOUND;
    public static tag_WBEMSTATUS WBEM_E_INVALID_PROVIDER_REGISTRATION;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_LOAD_FAILURE;
    public static tag_WBEMSTATUS WBEM_E_INITIALIZATION_FAILURE;
    public static tag_WBEMSTATUS WBEM_E_TRANSPORT_FAILURE;
    public static tag_WBEMSTATUS WBEM_E_INVALID_OPERATION;
    public static tag_WBEMSTATUS WBEM_E_INVALID_QUERY;
    public static tag_WBEMSTATUS WBEM_E_INVALID_QUERY_TYPE;
    public static tag_WBEMSTATUS WBEM_E_ALREADY_EXISTS;
    public static tag_WBEMSTATUS WBEM_E_OVERRIDE_NOT_ALLOWED;
    public static tag_WBEMSTATUS WBEM_E_PROPAGATED_QUALIFIER;
    public static tag_WBEMSTATUS WBEM_E_PROPAGATED_PROPERTY;
    public static tag_WBEMSTATUS WBEM_E_UNEXPECTED;
    public static tag_WBEMSTATUS WBEM_E_ILLEGAL_OPERATION;
    public static tag_WBEMSTATUS WBEM_E_CANNOT_BE_KEY;
    public static tag_WBEMSTATUS WBEM_E_INCOMPLETE_CLASS;
    public static tag_WBEMSTATUS WBEM_E_INVALID_SYNTAX;
    public static tag_WBEMSTATUS WBEM_E_NONDECORATED_OBJECT;
    public static tag_WBEMSTATUS WBEM_E_READ_ONLY;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_NOT_CAPABLE;
    public static tag_WBEMSTATUS WBEM_E_CLASS_HAS_CHILDREN;
    public static tag_WBEMSTATUS WBEM_E_CLASS_HAS_INSTANCES;
    public static tag_WBEMSTATUS WBEM_E_QUERY_NOT_IMPLEMENTED;
    public static tag_WBEMSTATUS WBEM_E_ILLEGAL_NULL;
    public static tag_WBEMSTATUS WBEM_E_INVALID_QUALIFIER_TYPE;
    public static tag_WBEMSTATUS WBEM_E_INVALID_PROPERTY_TYPE;
    public static tag_WBEMSTATUS WBEM_E_VALUE_OUT_OF_RANGE;
    public static tag_WBEMSTATUS WBEM_E_CANNOT_BE_SINGLETON;
    public static tag_WBEMSTATUS WBEM_E_INVALID_CIM_TYPE;
    public static tag_WBEMSTATUS WBEM_E_INVALID_METHOD;
    public static tag_WBEMSTATUS WBEM_E_INVALID_METHOD_PARAMETERS;
    public static tag_WBEMSTATUS WBEM_E_SYSTEM_PROPERTY;
    public static tag_WBEMSTATUS WBEM_E_INVALID_PROPERTY;
    public static tag_WBEMSTATUS WBEM_E_CALL_CANCELLED;
    public static tag_WBEMSTATUS WBEM_E_SHUTTING_DOWN;
    public static tag_WBEMSTATUS WBEM_E_PROPAGATED_METHOD;
    public static tag_WBEMSTATUS WBEM_E_UNSUPPORTED_PARAMETER;
    public static tag_WBEMSTATUS WBEM_E_MISSING_PARAMETER_ID;
    public static tag_WBEMSTATUS WBEM_E_INVALID_PARAMETER_ID;
    public static tag_WBEMSTATUS WBEM_E_NONCONSECUTIVE_PARAMETER_IDS;
    public static tag_WBEMSTATUS WBEM_E_PARAMETER_ID_ON_RETVAL;
    public static tag_WBEMSTATUS WBEM_E_INVALID_OBJECT_PATH;
    public static tag_WBEMSTATUS WBEM_E_OUT_OF_DISK_SPACE;
    public static tag_WBEMSTATUS WBEM_E_BUFFER_TOO_SMALL;
    public static tag_WBEMSTATUS WBEM_E_UNSUPPORTED_PUT_EXTENSION;
    public static tag_WBEMSTATUS WBEM_E_UNKNOWN_OBJECT_TYPE;
    public static tag_WBEMSTATUS WBEM_E_UNKNOWN_PACKET_TYPE;
    public static tag_WBEMSTATUS WBEM_E_MARSHAL_VERSION_MISMATCH;
    public static tag_WBEMSTATUS WBEM_E_MARSHAL_INVALID_SIGNATURE;
    public static tag_WBEMSTATUS WBEM_E_INVALID_QUALIFIER;
    public static tag_WBEMSTATUS WBEM_E_INVALID_DUPLICATE_PARAMETER;
    public static tag_WBEMSTATUS WBEM_E_TOO_MUCH_DATA;
    public static tag_WBEMSTATUS WBEM_E_SERVER_TOO_BUSY;
    public static tag_WBEMSTATUS WBEM_E_INVALID_FLAVOR;
    public static tag_WBEMSTATUS WBEM_E_CIRCULAR_REFERENCE;
    public static tag_WBEMSTATUS WBEM_E_UNSUPPORTED_CLASS_UPDATE;
    public static tag_WBEMSTATUS WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE;
    public static tag_WBEMSTATUS WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE;
    public static tag_WBEMSTATUS WBEM_E_TOO_MANY_PROPERTIES;
    public static tag_WBEMSTATUS WBEM_E_UPDATE_TYPE_MISMATCH;
    public static tag_WBEMSTATUS WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED;
    public static tag_WBEMSTATUS WBEM_E_UPDATE_PROPAGATED_METHOD;
    public static tag_WBEMSTATUS WBEM_E_METHOD_NOT_IMPLEMENTED;
    public static tag_WBEMSTATUS WBEM_E_METHOD_DISABLED;
    public static tag_WBEMSTATUS WBEM_E_REFRESHER_BUSY;
    public static tag_WBEMSTATUS WBEM_E_UNPARSABLE_QUERY;
    public static tag_WBEMSTATUS WBEM_E_NOT_EVENT_CLASS;
    public static tag_WBEMSTATUS WBEM_E_MISSING_GROUP_WITHIN;
    public static tag_WBEMSTATUS WBEM_E_MISSING_AGGREGATION_LIST;
    public static tag_WBEMSTATUS WBEM_E_PROPERTY_NOT_AN_OBJECT;
    public static tag_WBEMSTATUS WBEM_E_AGGREGATING_BY_OBJECT;
    public static tag_WBEMSTATUS WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY;
    public static tag_WBEMSTATUS WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING;
    public static tag_WBEMSTATUS WBEM_E_QUEUE_OVERFLOW;
    public static tag_WBEMSTATUS WBEM_E_PRIVILEGE_NOT_HELD;
    public static tag_WBEMSTATUS WBEM_E_INVALID_OPERATOR;
    public static tag_WBEMSTATUS WBEM_E_LOCAL_CREDENTIALS;
    public static tag_WBEMSTATUS WBEM_E_CANNOT_BE_ABSTRACT;
    public static tag_WBEMSTATUS WBEM_E_AMENDED_OBJECT;
    public static tag_WBEMSTATUS WBEM_E_CLIENT_TOO_SLOW;
    public static tag_WBEMSTATUS WBEM_E_NULL_SECURITY_DESCRIPTOR;
    public static tag_WBEMSTATUS WBEM_E_TIMED_OUT;
    public static tag_WBEMSTATUS WBEM_E_INVALID_ASSOCIATION;
    public static tag_WBEMSTATUS WBEM_E_AMBIGUOUS_OPERATION;
    public static tag_WBEMSTATUS WBEM_E_QUOTA_VIOLATION;
    public static tag_WBEMSTATUS WBEM_E_RESERVED_001;
    public static tag_WBEMSTATUS WBEM_E_RESERVED_002;
    public static tag_WBEMSTATUS WBEM_E_UNSUPPORTED_LOCALE;
    public static tag_WBEMSTATUS WBEM_E_HANDLE_OUT_OF_DATE;
    public static tag_WBEMSTATUS WBEM_E_CONNECTION_FAILED;
    public static tag_WBEMSTATUS WBEM_E_INVALID_HANDLE_REQUEST;
    public static tag_WBEMSTATUS WBEM_E_PROPERTY_NAME_TOO_WIDE;
    public static tag_WBEMSTATUS WBEM_E_CLASS_NAME_TOO_WIDE;
    public static tag_WBEMSTATUS WBEM_E_METHOD_NAME_TOO_WIDE;
    public static tag_WBEMSTATUS WBEM_E_QUALIFIER_NAME_TOO_WIDE;
    public static tag_WBEMSTATUS WBEM_E_RERUN_COMMAND;
    public static tag_WBEMSTATUS WBEM_E_DATABASE_VER_MISMATCH;
    public static tag_WBEMSTATUS WBEM_E_VETO_DELETE;
    public static tag_WBEMSTATUS WBEM_E_VETO_PUT;
    public static tag_WBEMSTATUS WBEM_E_INVALID_LOCALE;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_SUSPENDED;
    public static tag_WBEMSTATUS WBEM_E_SYNCHRONIZATION_REQUIRED;
    public static tag_WBEMSTATUS WBEM_E_NO_SCHEMA;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_ALREADY_REGISTERED;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_NOT_REGISTERED;
    public static tag_WBEMSTATUS WBEM_E_FATAL_TRANSPORT_ERROR;
    public static tag_WBEMSTATUS WBEM_E_ENCRYPTED_CONNECTION_REQUIRED;
    public static tag_WBEMSTATUS WBEM_E_PROVIDER_TIMED_OUT;
    public static tag_WBEMSTATUS WBEM_E_NO_KEY;
    public static tag_WBEMSTATUS WBEMESS_E_REGISTRATION_TOO_BROAD;
    public static tag_WBEMSTATUS WBEMESS_E_REGISTRATION_TOO_PRECISE;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_QUALIFIER_NAME;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_SEMI;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_OPEN_BRACE;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_CLOSE_BRACE;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_CLOSE_BRACKET;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_CLOSE_PAREN;
    public static tag_WBEMSTATUS WBEMMOF_E_ILLEGAL_CONSTANT_VALUE;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_OPEN_PAREN;
    public static tag_WBEMSTATUS WBEMMOF_E_UNRECOGNIZED_TOKEN;
    public static tag_WBEMSTATUS WBEMMOF_E_UNRECOGNIZED_TYPE;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_PROPERTY_NAME;
    public static tag_WBEMSTATUS WBEMMOF_E_TYPEDEF_NOT_SUPPORTED;
    public static tag_WBEMSTATUS WBEMMOF_E_UNEXPECTED_ALIAS;
    public static tag_WBEMSTATUS WBEMMOF_E_UNEXPECTED_ARRAY_INIT;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_AMENDMENT_SYNTAX;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_PRAGMA;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_NAMESPACE_SYNTAX;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_CLASS_NAME;
    public static tag_WBEMSTATUS WBEMMOF_E_TYPE_MISMATCH;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_ALIAS_NAME;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_CLASS_DECLARATION;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_INSTANCE_DECLARATION;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_DOLLAR;
    public static tag_WBEMSTATUS WBEMMOF_E_CIMTYPE_QUALIFIER;
    public static tag_WBEMSTATUS WBEMMOF_E_DUPLICATE_PROPERTY;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION;
    public static tag_WBEMSTATUS WBEMMOF_E_OUT_OF_RANGE;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_FILE;
    public static tag_WBEMSTATUS WBEMMOF_E_ALIASES_IN_EMBEDDED;
    public static tag_WBEMSTATUS WBEMMOF_E_NULL_ARRAY_ELEM;
    public static tag_WBEMSTATUS WBEMMOF_E_DUPLICATE_QUALIFIER;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_FLAVOR_TYPE;
    public static tag_WBEMSTATUS WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES;
    public static tag_WBEMSTATUS WBEMMOF_E_MULTIPLE_ALIASES;
    public static tag_WBEMSTATUS WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2;
    public static tag_WBEMSTATUS WBEMMOF_E_NO_ARRAYS_RETURNED;
    public static tag_WBEMSTATUS WBEMMOF_E_MUST_BE_IN_OR_OUT;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_FLAGS_SYNTAX;
    public static tag_WBEMSTATUS WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE;
    public static tag_WBEMSTATUS WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE;
    public static tag_WBEMSTATUS WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_QUALIFIER_SYNTAX;
    public static tag_WBEMSTATUS WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE;
    public static tag_WBEMSTATUS WBEMMOF_E_ERROR_CREATING_TEMP_FILE;
    public static tag_WBEMSTATUS WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE;
    public static tag_WBEMSTATUS WBEMMOF_E_INVALID_DELETECLASS_SYNTAX;
}
public enum System.Management.TextFormat : Enum {
    public int value__;
    public static TextFormat Mof;
    public static TextFormat CimDtd20;
    public static TextFormat WmiDtd20;
}
internal class System.Management.ThreadDispatch : object {
    private Thread thread;
    private Exception exception;
    private ThreadWorkerMethodWithReturn threadWorkerMethodWithReturn;
    private ThreadWorkerMethodWithReturnAndParam threadWorkerMethodWithReturnAndParam;
    private ThreadWorkerMethod threadWorkerMethod;
    private ThreadWorkerMethodWithParam threadWorkerMethodWithParam;
    private object threadReturn;
    private object threadParams;
    private bool backgroundThread;
    private ApartmentState apartmentType;
    public Exception Exception { get; }
    public object Parameter { get; public set; }
    public bool IsBackgroundThread { get; public set; }
    public object Result { get; }
    public ApartmentState ApartmentType { get; public set; }
    public ThreadDispatch(ThreadWorkerMethodWithReturn workerMethod);
    public ThreadDispatch(ThreadWorkerMethodWithReturnAndParam workerMethod);
    public ThreadDispatch(ThreadWorkerMethodWithParam workerMethod);
    public ThreadDispatch(ThreadWorkerMethod workerMethod);
    public Exception get_Exception();
    public object get_Parameter();
    public void set_Parameter(object value);
    public bool get_IsBackgroundThread();
    public void set_IsBackgroundThread(bool value);
    public object get_Result();
    public ApartmentState get_ApartmentType();
    public void set_ApartmentType(ApartmentState value);
    public void Start();
    private void InitializeThreadState(object threadParams, ThreadWorkerMethodWithReturn workerMethod, ApartmentState aptState, bool background);
    private void InitializeThreadState(object threadParams, ThreadWorkerMethodWithReturnAndParam workerMethod, ApartmentState aptState, bool background);
    private void InitializeThreadState(object threadParams, ThreadWorkerMethod workerMethod, ApartmentState aptState, bool background);
    private void InitializeThreadState(object threadParams, ThreadWorkerMethodWithParam workerMethod, ApartmentState aptState, bool background);
    private void DispatchThread();
    private void ThreadEntryPoint();
    private void ThreadEntryPointMethodWithParam();
    private void ThreadEntryPointMethodWithReturn();
    private void ThreadEntryPointMethodWithReturnAndParam();
}
internal static class System.Management.ValueTypeSafety : object {
    public static object GetSafeObject(object theValue);
}
[GuidAttribute("9A653086-174F-11D2-B5F9-00104B703EFD")]
[ClassInterfaceAttribute("0")]
internal class System.Management.WbemClassObject : object {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("674B6698-EE92-11D0-AD71-00C04FD8FDFF")]
internal class System.Management.WbemContext : object {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA")]
internal class System.Management.WbemDefPath : object {
}
internal static class System.Management.WbemErrorInfo : object {
    public static IWbemClassObjectFreeThreaded GetErrorInfo();
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("8D1C559D-84F0-4BB3-A7D5-56A7435A9BA6")]
internal class System.Management.WbemObjectTextSrc : object {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("EB87E1BD-3233-11D2-AEC9-00C04FB68820")]
internal class System.Management.WbemStatusCodeText : object {
}
internal class System.Management.WmiDelegateInvoker : object {
    internal object sender;
    internal WmiDelegateInvoker(object sender);
    internal void FireEventToDelegates(MulticastDelegate md, ManagementEventArgs args);
}
internal class System.Management.WmiEventSink : object {
    private static int s_hash;
    private int hash;
    private ManagementOperationObserver watcher;
    private object context;
    private ManagementScope scope;
    private object stub;
    [CompilerGeneratedAttribute]
private InternalObjectPutEventHandler InternalObjectPut;
    private ManagementPath path;
    private string className;
    private bool isLocal;
    private static ManagementOperationObserver watcherParameter;
    private static object contextParameter;
    private static ManagementScope scopeParameter;
    private static string pathParameter;
    private static string classNameParameter;
    private static WmiEventSink wmiEventSinkNew;
    public IWbemObjectSink Stub { get; }
    protected WmiEventSink(ManagementOperationObserver watcher, object context, ManagementScope scope, string path, string className);
    [CompilerGeneratedAttribute]
internal void add_InternalObjectPut(InternalObjectPutEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_InternalObjectPut(InternalObjectPutEventHandler value);
    internal static WmiEventSink GetWmiEventSink(ManagementOperationObserver watcher, object context, ManagementScope scope, string path, string className);
    private static void HackToCreateWmiEventSink();
    public virtual int GetHashCode();
    public IWbemObjectSink get_Stub();
    public virtual void Indicate(IntPtr pIWbemClassObject);
    public sealed virtual void SetStatus(int flags, int hResult, string message, IntPtr pErrorObj);
    internal void Cancel();
    internal void ReleaseStub();
}
internal class System.Management.WmiEventState : object {
    private Delegate d;
    private ManagementEventArgs args;
    private AutoResetEvent h;
    public Delegate Delegate { get; }
    public ManagementEventArgs Args { get; }
    public AutoResetEvent AutoResetEvent { get; }
    internal WmiEventState(Delegate d, ManagementEventArgs args, AutoResetEvent h);
    public Delegate get_Delegate();
    public ManagementEventArgs get_Args();
    public AutoResetEvent get_AutoResetEvent();
}
internal class System.Management.WmiGetEventSink : WmiEventSink {
    private ManagementObject managementObject;
    private static ManagementOperationObserver watcherParameter;
    private static object contextParameter;
    private static ManagementScope scopeParameter;
    private static ManagementObject managementObjectParameter;
    private static WmiGetEventSink wmiGetEventSinkNew;
    private WmiGetEventSink(ManagementOperationObserver watcher, object context, ManagementScope scope, ManagementObject managementObject);
    internal static WmiGetEventSink GetWmiGetEventSink(ManagementOperationObserver watcher, object context, ManagementScope scope, ManagementObject managementObject);
    private static void HackToCreateWmiGetEventSink();
    public virtual void Indicate(IntPtr pIWbemClassObject);
}
internal static class System.Management.WmiNetUtilsHelper : object {
    internal static ResetSecurity ResetSecurity_f;
    internal static SetSecurity SetSecurity_f;
    internal static BlessIWbemServices BlessIWbemServices_f;
    internal static BlessIWbemServicesObject BlessIWbemServicesObject_f;
    internal static GetPropertyHandle GetPropertyHandle_f27;
    internal static WritePropertyValue WritePropertyValue_f28;
    internal static GetQualifierSet GetQualifierSet_f;
    internal static Get Get_f;
    internal static Put Put_f;
    internal static Delete Delete_f;
    internal static GetNames GetNames_f;
    internal static BeginEnumeration BeginEnumeration_f;
    internal static Next Next_f;
    internal static EndEnumeration EndEnumeration_f;
    internal static GetPropertyQualifierSet GetPropertyQualifierSet_f;
    internal static Clone Clone_f;
    internal static GetObjectText GetObjectText_f;
    internal static SpawnDerivedClass SpawnDerivedClass_f;
    internal static SpawnInstance SpawnInstance_f;
    internal static CompareTo CompareTo_f;
    internal static GetPropertyOrigin GetPropertyOrigin_f;
    internal static InheritsFrom InheritsFrom_f;
    internal static GetMethod GetMethod_f;
    internal static PutMethod PutMethod_f;
    internal static DeleteMethod DeleteMethod_f;
    internal static BeginMethodEnumeration BeginMethodEnumeration_f;
    internal static NextMethod NextMethod_f;
    internal static EndMethodEnumeration EndMethodEnumeration_f;
    internal static GetMethodQualifierSet GetMethodQualifierSet_f;
    internal static GetMethodOrigin GetMethodOrigin_f;
    internal static QualifierSet_Get QualifierGet_f;
    internal static QualifierSet_Put QualifierPut_f;
    internal static QualifierSet_Delete QualifierDelete_f;
    internal static QualifierSet_GetNames QualifierGetNames_f;
    internal static QualifierSet_BeginEnumeration QualifierBeginEnumeration_f;
    internal static QualifierSet_Next QualifierNext_f;
    internal static QualifierSet_EndEnumeration QualifierEndEnumeration_f;
    internal static GetCurrentApartmentType GetCurrentApartmentType_f;
    internal static VerifyClientKey VerifyClientKey_f;
    internal static Clone Clone_f12;
    internal static GetDemultiplexedStub GetDemultiplexedStub_f;
    internal static CreateInstanceEnumWmi CreateInstanceEnumWmi_f;
    internal static CreateClassEnumWmi CreateClassEnumWmi_f;
    internal static ExecQueryWmi ExecQueryWmi_f;
    internal static ExecNotificationQueryWmi ExecNotificationQueryWmi_f;
    internal static PutInstanceWmi PutInstanceWmi_f;
    internal static PutClassWmi PutClassWmi_f;
    internal static CloneEnumWbemClassObject CloneEnumWbemClassObject_f;
    internal static ConnectServerWmi ConnectServerWmi_f;
    internal static GetErrorInfo GetErrorInfo_f;
    internal static Initialize Initialize_f;
    private static WmiNetUtilsHelper();
    private static bool LoadDelegate(TDelegate& delegate_f, IntPtr hModule, string procName);
    private static void LoadPlatformNotSupportedDelegates(string exceptionMessage);
}
public class System.Management.WqlEventQuery : EventQuery {
    private static string TokenSelectAll;
    private string eventClassName;
    private TimeSpan withinInterval;
    private string condition;
    private TimeSpan groupWithinInterval;
    private StringCollection groupByPropertyList;
    private string havingCondition;
    public string QueryLanguage { get; }
    public string QueryString { get; public set; }
    public string EventClassName { get; public set; }
    public string Condition { get; public set; }
    public TimeSpan WithinInterval { get; public set; }
    public TimeSpan GroupWithinInterval { get; public set; }
    public StringCollection GroupByPropertyList { get; public set; }
    public string HavingCondition { get; public set; }
    public WqlEventQuery(string queryOrEventClassName);
    public WqlEventQuery(string eventClassName, string condition);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval, string condition);
    public WqlEventQuery(string eventClassName, string condition, TimeSpan groupWithinInterval);
    public WqlEventQuery(string eventClassName, string condition, TimeSpan groupWithinInterval, String[] groupByPropertyList);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval, string condition, TimeSpan groupWithinInterval, String[] groupByPropertyList, string havingCondition);
    public virtual string get_QueryLanguage();
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public string get_EventClassName();
    public void set_EventClassName(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public TimeSpan get_WithinInterval();
    public void set_WithinInterval(TimeSpan value);
    public TimeSpan get_GroupWithinInterval();
    public void set_GroupWithinInterval(TimeSpan value);
    public StringCollection get_GroupByPropertyList();
    public void set_GroupByPropertyList(StringCollection value);
    public string get_HavingCondition();
    public void set_HavingCondition(string value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.WqlObjectQuery : ObjectQuery {
    public string QueryLanguage { get; }
    public WqlObjectQuery(string query);
    public virtual string get_QueryLanguage();
    public virtual object Clone();
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidQuery { get; }
    internal static string InvalidQueryDuplicatedToken { get; }
    internal static string InvalidQueryNullToken { get; }
    internal static string WorkerThreadWakeupFailed { get; }
    internal static string ClassNameNotInitializedException { get; }
    internal static string ClassNameNotFoundException { get; }
    internal static string CommentAttributeProperty { get; }
    internal static string CommentAutoCommitProperty { get; }
    internal static string CommentClassBegin { get; }
    internal static string CommentConstructors { get; }
    internal static string CommentCreatedClass { get; }
    internal static string CommentCreatedWmiNamespace { get; }
    internal static string CommentCurrentObject { get; }
    internal static string CommentDateConversionFunction { get; }
    internal static string CommentEmbeddedObject { get; }
    internal static string CommentEnumeratorImplementation { get; }
    internal static string CommentFlagForEmbedded { get; }
    internal static string CommentGetInstances { get; }
    internal static string CommentIsPropNull { get; }
    internal static string CommentLateBoundObject { get; }
    internal static string CommentLateBoundProperty { get; }
    internal static string CommentManagementPath { get; }
    internal static string CommentManagementScope { get; }
    internal static string CommentOriginNamespace { get; }
    internal static string CommentPrivateAutoCommit { get; }
    internal static string CommentPrototypeConverter { get; }
    internal static string CommentResetProperty { get; }
    internal static string CommentShouldSerialize { get; }
    internal static string CommentStaticManagementScope { get; }
    internal static string CommentStaticScopeProperty { get; }
    internal static string CommentSystemObject { get; }
    internal static string CommentSystemPropertiesClass { get; }
    internal static string CommentTimeSpanConversionFunction { get; }
    internal static string CommentToDateTime { get; }
    internal static string CommentToDmtfDateTime { get; }
    internal static string CommentToDmtfTimeInterval { get; }
    internal static string CommentToTimeSpan { get; }
    internal static string EmbeddedComment { get; }
    internal static string EmbeddedComment2 { get; }
    internal static string EmbeddedComment3 { get; }
    internal static string EmbeddedComment4 { get; }
    internal static string EmbeddedComment5 { get; }
    internal static string EmbeddedComment6 { get; }
    internal static string EmbeddedComment7 { get; }
    internal static string EmbeddedComment8 { get; }
    internal static string EmbeddedCSharpComment1 { get; }
    internal static string EmbeddedCSharpComment10 { get; }
    internal static string EmbeddedCSharpComment11 { get; }
    internal static string EmbeddedCSharpComment12 { get; }
    internal static string EmbeddedCSharpComment13 { get; }
    internal static string EmbeddedCSharpComment14 { get; }
    internal static string EmbeddedCSharpComment15 { get; }
    internal static string EmbeddedCSharpComment2 { get; }
    internal static string EmbeddedCSharpComment3 { get; }
    internal static string EmbeddedCSharpComment4 { get; }
    internal static string EmbeddedCSharpComment5 { get; }
    internal static string EmbeddedCSharpComment6 { get; }
    internal static string EmbeddedCSharpComment7 { get; }
    internal static string EmbeddedCSharpComment8 { get; }
    internal static string EmbeddedCSharpComment9 { get; }
    internal static string EmbeddedVisualBasicComment1 { get; }
    internal static string EmbeddedVisualBasicComment10 { get; }
    internal static string EmbeddedVisualBasicComment2 { get; }
    internal static string EmbeddedVisualBasicComment3 { get; }
    internal static string EmbeddedVisualBasicComment4 { get; }
    internal static string EmbeddedVisualBasicComment5 { get; }
    internal static string EmbeddedVisualBasicComment6 { get; }
    internal static string EmbeddedVisualBasicComment7 { get; }
    internal static string EmbeddedVisualBasicComment8 { get; }
    internal static string EmbeddedVisualBasicComment9 { get; }
    internal static string EmptyFilePathException { get; }
    internal static string NamespaceNotInitializedException { get; }
    internal static string NullFilePathException { get; }
    internal static string UnableToCreateCodeGeneratorException { get; }
    internal static string PlatformNotSupported_SystemManagement { get; }
    internal static string PlatformNotSupported_FullFrameworkRequired { get; }
    internal static string LoadLibraryFailed { get; }
    internal static string PlatformNotSupported_FrameworkUpdatedRequired { get; }
    internal static string InvalidQueryTokenExpected { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidQuery();
    internal static string get_InvalidQueryDuplicatedToken();
    internal static string get_InvalidQueryNullToken();
    internal static string get_WorkerThreadWakeupFailed();
    internal static string get_ClassNameNotInitializedException();
    internal static string get_ClassNameNotFoundException();
    internal static string get_CommentAttributeProperty();
    internal static string get_CommentAutoCommitProperty();
    internal static string get_CommentClassBegin();
    internal static string get_CommentConstructors();
    internal static string get_CommentCreatedClass();
    internal static string get_CommentCreatedWmiNamespace();
    internal static string get_CommentCurrentObject();
    internal static string get_CommentDateConversionFunction();
    internal static string get_CommentEmbeddedObject();
    internal static string get_CommentEnumeratorImplementation();
    internal static string get_CommentFlagForEmbedded();
    internal static string get_CommentGetInstances();
    internal static string get_CommentIsPropNull();
    internal static string get_CommentLateBoundObject();
    internal static string get_CommentLateBoundProperty();
    internal static string get_CommentManagementPath();
    internal static string get_CommentManagementScope();
    internal static string get_CommentOriginNamespace();
    internal static string get_CommentPrivateAutoCommit();
    internal static string get_CommentPrototypeConverter();
    internal static string get_CommentResetProperty();
    internal static string get_CommentShouldSerialize();
    internal static string get_CommentStaticManagementScope();
    internal static string get_CommentStaticScopeProperty();
    internal static string get_CommentSystemObject();
    internal static string get_CommentSystemPropertiesClass();
    internal static string get_CommentTimeSpanConversionFunction();
    internal static string get_CommentToDateTime();
    internal static string get_CommentToDmtfDateTime();
    internal static string get_CommentToDmtfTimeInterval();
    internal static string get_CommentToTimeSpan();
    internal static string get_EmbeddedComment();
    internal static string get_EmbeddedComment2();
    internal static string get_EmbeddedComment3();
    internal static string get_EmbeddedComment4();
    internal static string get_EmbeddedComment5();
    internal static string get_EmbeddedComment6();
    internal static string get_EmbeddedComment7();
    internal static string get_EmbeddedComment8();
    internal static string get_EmbeddedCSharpComment1();
    internal static string get_EmbeddedCSharpComment10();
    internal static string get_EmbeddedCSharpComment11();
    internal static string get_EmbeddedCSharpComment12();
    internal static string get_EmbeddedCSharpComment13();
    internal static string get_EmbeddedCSharpComment14();
    internal static string get_EmbeddedCSharpComment15();
    internal static string get_EmbeddedCSharpComment2();
    internal static string get_EmbeddedCSharpComment3();
    internal static string get_EmbeddedCSharpComment4();
    internal static string get_EmbeddedCSharpComment5();
    internal static string get_EmbeddedCSharpComment6();
    internal static string get_EmbeddedCSharpComment7();
    internal static string get_EmbeddedCSharpComment8();
    internal static string get_EmbeddedCSharpComment9();
    internal static string get_EmbeddedVisualBasicComment1();
    internal static string get_EmbeddedVisualBasicComment10();
    internal static string get_EmbeddedVisualBasicComment2();
    internal static string get_EmbeddedVisualBasicComment3();
    internal static string get_EmbeddedVisualBasicComment4();
    internal static string get_EmbeddedVisualBasicComment5();
    internal static string get_EmbeddedVisualBasicComment6();
    internal static string get_EmbeddedVisualBasicComment7();
    internal static string get_EmbeddedVisualBasicComment8();
    internal static string get_EmbeddedVisualBasicComment9();
    internal static string get_EmptyFilePathException();
    internal static string get_NamespaceNotInitializedException();
    internal static string get_NullFilePathException();
    internal static string get_UnableToCreateCodeGeneratorException();
    internal static string get_PlatformNotSupported_SystemManagement();
    internal static string get_PlatformNotSupported_FullFrameworkRequired();
    internal static string get_LoadLibraryFailed();
    internal static string get_PlatformNotSupported_FrameworkUpdatedRequired();
    internal static string get_InvalidQueryTokenExpected();
}
