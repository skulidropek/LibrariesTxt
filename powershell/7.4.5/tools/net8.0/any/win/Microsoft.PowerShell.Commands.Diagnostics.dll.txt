[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class GetEventResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CounterNotALogFile { get; }
    internal static string CounterApiError { get; }
    internal static string LogProviderOrPathNeeded { get; }
    internal static string NoMatchingProvidersFound { get; }
    internal static string NullNotAllowedInHashtable { get; }
    internal static string QueryTrace { get; }
    internal static string ProviderLogLink { get; }
    internal static string CounterInvalidDateRange { get; }
    internal static string NoMatchingLogsFound { get; }
    internal static string Vendor { get; }
    internal static string CounterCircularNoMaxSize { get; }
    internal static string FileOpenFailed { get; }
    internal static string KeywordLongExpected { get; }
    internal static string CounterExportSampleNotInInitialSet { get; }
    internal static string NoMatchingEventsFound { get; }
    internal static string CounterPathTranslationFailed { get; }
    internal static string CounterNoMixedLogTypes { get; }
    internal static string NotAFileSystemPath { get; }
    internal static string EventIdNotSpecified { get; }
    internal static string ProviderMetadataUnavailable { get; }
    internal static string SpecifyOldestForLog { get; }
    internal static string ExportDestPathAmbiguous { get; }
    internal static string CounterPathIsInvalid { get; }
    internal static string CounterSampleDataInvalid { get; }
    internal static string PayloadMismatch { get; }
    internal static string NoMatchingCounterSetsFound { get; }
    internal static string CounterPathsInFilesInvalid { get; }
    internal static string FileCreateFailed { get; }
    internal static string NoCounterSetsOnComputer { get; }
    internal static string IncorrectEventId { get; }
    internal static string InvalidContext { get; }
    internal static string IncorrectEventVersion { get; }
    internal static string Counter32FileLimit { get; }
    internal static string SpecifiedProvidersDontWriteToLog { get; }
    internal static string InvalidSIDFormat { get; }
    internal static string NoProviderFound { get; }
    internal static string CounterSetEnumAccessDenied { get; }
    internal static string VersionNotSpecified { get; }
    internal static string SpecifyOldestForEtlEvt { get; }
    internal static string ProviderNotSpecified { get; }
    internal static string NotALogFile { get; }
    internal static string CounterPathInvalidOrNotInFile { get; }
    internal static string Timestamp { get; }
    internal static string DateTimeExpected { get; }
    internal static string LogInfoUnavailable { get; }
    internal static string NoEventMessage { get; }
    internal static string CounterFileExists { get; }
    internal static string CounterContinuousOrMaxSamples { get; }
    internal static string ExportCtrWin7Required { get; }
    internal static string Description { get; }
    internal static string NoMatchingCounterSetsInFile { get; }
    internal static string LogsAndProvidersDontOverlap { get; }
    internal static string CookedValues { get; }
    internal static string Counter1FileLimit { get; }
    internal static string LogCountLimitExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CounterNotALogFile();
    internal static string get_CounterApiError();
    internal static string get_LogProviderOrPathNeeded();
    internal static string get_NoMatchingProvidersFound();
    internal static string get_NullNotAllowedInHashtable();
    internal static string get_QueryTrace();
    internal static string get_ProviderLogLink();
    internal static string get_CounterInvalidDateRange();
    internal static string get_NoMatchingLogsFound();
    internal static string get_Vendor();
    internal static string get_CounterCircularNoMaxSize();
    internal static string get_FileOpenFailed();
    internal static string get_KeywordLongExpected();
    internal static string get_CounterExportSampleNotInInitialSet();
    internal static string get_NoMatchingEventsFound();
    internal static string get_CounterPathTranslationFailed();
    internal static string get_CounterNoMixedLogTypes();
    internal static string get_NotAFileSystemPath();
    internal static string get_EventIdNotSpecified();
    internal static string get_ProviderMetadataUnavailable();
    internal static string get_SpecifyOldestForLog();
    internal static string get_ExportDestPathAmbiguous();
    internal static string get_CounterPathIsInvalid();
    internal static string get_CounterSampleDataInvalid();
    internal static string get_PayloadMismatch();
    internal static string get_NoMatchingCounterSetsFound();
    internal static string get_CounterPathsInFilesInvalid();
    internal static string get_FileCreateFailed();
    internal static string get_NoCounterSetsOnComputer();
    internal static string get_IncorrectEventId();
    internal static string get_InvalidContext();
    internal static string get_IncorrectEventVersion();
    internal static string get_Counter32FileLimit();
    internal static string get_SpecifiedProvidersDontWriteToLog();
    internal static string get_InvalidSIDFormat();
    internal static string get_NoProviderFound();
    internal static string get_CounterSetEnumAccessDenied();
    internal static string get_VersionNotSpecified();
    internal static string get_SpecifyOldestForEtlEvt();
    internal static string get_ProviderNotSpecified();
    internal static string get_NotALogFile();
    internal static string get_CounterPathInvalidOrNotInFile();
    internal static string get_Timestamp();
    internal static string get_DateTimeExpected();
    internal static string get_LogInfoUnavailable();
    internal static string get_NoEventMessage();
    internal static string get_CounterFileExists();
    internal static string get_CounterContinuousOrMaxSamples();
    internal static string get_ExportCtrWin7Required();
    internal static string get_Description();
    internal static string get_NoMatchingCounterSetsInFile();
    internal static string get_LogsAndProvidersDontOverlap();
    internal static string get_CookedValues();
    internal static string get_Counter1FileLimit();
    internal static string get_LogCountLimitExceeded();
}
internal static class Microsoft.PowerShell.Commands.Diagnostics.Common.CommonUtilities : object {
    private static string LibraryLoadDllName;
    private static string LocalizationDllName;
    private static UInt32 FORMAT_MESSAGE_IGNORE_INSERTS;
    private static UInt32 FORMAT_MESSAGE_FROM_SYSTEM;
    private static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    private static UInt32 FORMAT_MESSAGE_FROM_HMODULE;
    private static UInt32 FormatMessage(UInt32 dwFlags, IntPtr lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, StringBuilder lpBuffer, UInt32 nSize, IntPtr Arguments);
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, UInt32 dwFlags);
    private static bool FreeLibrary(IntPtr hModule);
    private static ushort GetUserDefaultLangID();
    public static UInt32 FormatMessageFromModule(UInt32 lastError, string moduleName, String& msg);
    public static ResourceManager GetResourceManager();
}
internal class Microsoft.PowerShell.Commands.EventWriteException : Exception {
    internal EventWriteException(string msg, Exception innerException);
    internal EventWriteException(string msg);
}
public class Microsoft.PowerShell.Commands.GetCounter.CounterSet : object {
    [CompilerGeneratedAttribute]
private string <CounterSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterCategoryType <CounterSetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, String[]> <CounterInstanceMapping>k__BackingField;
    public string CounterSetName { get; }
    public string MachineName { get; }
    public PerformanceCounterCategoryType CounterSetType { get; }
    public string Description { get; }
    internal Dictionary`2<string, String[]> CounterInstanceMapping { get; }
    public StringCollection Paths { get; }
    public StringCollection PathsWithInstances { get; }
    internal CounterSet(string setName, string machineName, PerformanceCounterCategoryType categoryType, string setHelp, Dictionary`2& counterInstanceMapping);
    [CompilerGeneratedAttribute]
public string get_CounterSetName();
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public PerformanceCounterCategoryType get_CounterSetType();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, String[]> get_CounterInstanceMapping();
    public StringCollection get_Paths();
    public StringCollection get_PathsWithInstances();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.CounterHandleNInstance : ValueType {
    public IntPtr hCounter;
    public string InstanceName;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhFormat : object {
    public static UInt32 PDH_FMT_RAW;
    public static UInt32 PDH_FMT_ANSI;
    public static UInt32 PDH_FMT_UNICODE;
    public static UInt32 PDH_FMT_LONG;
    public static UInt32 PDH_FMT_DOUBLE;
    public static UInt32 PDH_FMT_LARGE;
    public static UInt32 PDH_FMT_NOSCALE;
    public static UInt32 PDH_FMT_1000;
    public static UInt32 PDH_FMT_NODATA;
    public static UInt32 PDH_FMT_NOCAP100;
    public static UInt32 PERF_DETAIL_COSTLY;
    public static UInt32 PERF_DETAIL_STANDARD;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhHelper : object {
    private PdhSafeDataSourceHandle _hDataSource;
    private PdhSafeQueryHandle _hQuery;
    private bool _firstReading;
    private PdhSafeLogHandle _hOutputLog;
    private Dictionary`2<string, CounterHandleNInstance> _consumerPathToHandleAndInstanceMap;
    private static UInt32 PdhBindInputDataSource(PdhSafeDataSourceHandle& phDataSource, string szLogFileNameList);
    private static UInt32 PdhOpenQueryH(PdhSafeDataSourceHandle hDataSource, IntPtr dwUserData, PdhSafeQueryHandle& phQuery);
    private static UInt32 PdhAddCounter(PdhSafeQueryHandle queryHandle, string counterPath, IntPtr userData, IntPtr& counterHandle);
    private static UInt32 PdhCollectQueryDataWithTime(PdhSafeQueryHandle queryHandle, Int64& pllTimeStamp);
    private static UInt32 PdhCollectQueryData(PdhSafeQueryHandle queryHandle);
    internal static UInt32 PdhCloseQuery(IntPtr queryHandle);
    internal static UInt32 PdhCloseLog(IntPtr logHandle, UInt32 dwFlags);
    private static UInt32 PdhOpenLog(string szLogFileName, UInt32 dwAccessFlags, PdhLogFileType& lpdwLogType, PdhSafeQueryHandle hQuery, UInt32 dwMaxSize, string szUserCaption, PdhSafeLogHandle& phLog);
    private static UInt32 PdhGetFormattedCounterValue(IntPtr counterHandle, UInt32 dwFormat, IntPtr& lpdwType, PDH_FMT_COUNTERVALUE_DOUBLE& pValue);
    private static UInt32 PdhGetRawCounterValue(IntPtr hCounter, IntPtr& lpdwType, PDH_RAW_COUNTER& pValue);
    private static UInt32 PdhEnumMachinesH(PdhSafeDataSourceHandle hDataSource, IntPtr mszMachineNameList, IntPtr& pcchBufferLength);
    private static UInt32 PdhEnumObjectsH(PdhSafeDataSourceHandle hDataSource, string szMachineName, IntPtr mszObjectList, IntPtr& pcchBufferLength, UInt32 dwDetailLevel, bool bRefresh);
    private static UInt32 PdhEnumObjectItemsH(PdhSafeDataSourceHandle hDataSource, string szMachineName, string szObjectName, IntPtr mszCounterList, IntPtr& pcchCounterListLength, IntPtr mszInstanceList, IntPtr& pcchInstanceListLength, UInt32 dwDetailLevel, UInt32 dwFlags);
    private static UInt32 PdhMakeCounterPath(PDH_COUNTER_PATH_ELEMENTS& pCounterPathElements, IntPtr szFullPathBuffer, IntPtr& pcchBufferSize, UInt32 dwFlags);
    private static UInt32 PdhParseCounterPath(string szFullPathBuffer, IntPtr pCounterPathElements, IntPtr& pdwBufferSize, UInt32 dwFlags);
    private static UInt32 PdhExpandWildCardPathH(PdhSafeDataSourceHandle hDataSource, string szWildCardPath, IntPtr mszExpandedPathList, IntPtr& pcchPathListLength, UInt32 dwFlags);
    private static UInt32 PdhValidatePathEx(PdhSafeDataSourceHandle hDataSource, string szFullPathBuffer);
    private static UInt32 PdhValidatePath(string szFullPathBuffer);
    private static UInt32 PdhGetCounterInfo(IntPtr hCounter, bool bRetrieveExplainText, IntPtr& pdwBufferSize, IntPtr lpBuffer);
    private static UInt32 PdhGetCounterTimeBase(IntPtr hCounter, UInt64& pTimeBase);
    private static UInt32 PdhGetDataSourceTimeRangeH(PdhSafeDataSourceHandle hDataSource, IntPtr& pdwNumEntries, PDH_TIME_INFO& pInfo, IntPtr& pdwBufferSize);
    private static UInt32 PdhSetQueryTimeRange(PdhSafeQueryHandle hQuery, PDH_TIME_INFO& pInfo);
    private static UInt32 PdhLookupPerfNameByIndex(string szMachineName, UInt32 dwNameIndex, IntPtr szNameBuffer, Int32& pcchNameBufferSize);
    public sealed virtual void Dispose();
    private static void ReadPdhMultiString(IntPtr& strNative, int strSize, StringCollection& strColl);
    private static UInt32 GetCounterInfoPlus(IntPtr hCounter, UInt32& counterType, UInt32& defaultScale, UInt64& timeBase);
    public UInt32 ConnectToDataSource();
    public UInt32 ConnectToDataSource(string dataSourceName);
    public UInt32 ConnectToDataSource(StringCollection blgFileNames);
    public UInt32 OpenQuery();
    public UInt32 OpenLogForWriting(string logName, PdhLogFileType logFileType, bool bOverwrite, UInt32 maxSize, bool bCircular, string caption);
    public UInt32 SetQueryTimeRange(DateTime startTime, DateTime endTime);
    public UInt32 EnumBlgFilesMachines(StringCollection& machineNames);
    public UInt32 EnumObjects(string machineName, StringCollection& objectNames);
    public UInt32 EnumObjectItems(string machineName, string objectName, StringCollection& counterNames, StringCollection& instanceNames);
    public UInt32 GetValidPathsFromFiles(StringCollection& validPaths);
    private bool IsPathValid(PDH_COUNTER_PATH_ELEMENTS& pathElts, String& outPath);
    public bool IsPathValid(string path);
    private static UInt32 MakePath(PDH_COUNTER_PATH_ELEMENTS pathElts, String& outPath, bool bWildcardInstances);
    private static UInt32 MakeAllInstancePath(string origPath, String& unifiedPath);
    private static UInt32 ParsePath(string fullPath, PDH_COUNTER_PATH_ELEMENTS& pCounterPathElements);
    public UInt32 TranslateLocalCounterPath(string englishPath, String& localizedPath);
    public UInt32 LookupPerfNameByIndex(string machineName, UInt32 index, String& locName);
    public UInt32 GetValidPaths(string machineName, string objectName, StringCollection& counters, StringCollection& instances, StringCollection& validPaths);
    public UInt32 AddCounters(StringCollection& validPaths, bool bFlushOldCounters);
    public string GetCounterSetHelp(string szMachineName, string szObjectName);
    public UInt32 ReadNextSet(PerformanceCounterSampleSet& nextSet, bool bSkipReading);
    public UInt32 ExpandWildCardPath(string path, StringCollection& expandedPaths);
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogAccess : object {
    public static UInt32 PDH_LOG_READ_ACCESS;
    public static UInt32 PDH_LOG_WRITE_ACCESS;
    public static UInt32 PDH_LOG_UPDATE_ACCESS;
    public static UInt32 PDH_LOG_ACCESS_MASK;
}
internal enum Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogFileType : Enum {
    public int value__;
    public static PdhLogFileType PDH_LOG_TYPE_UNDEFINED;
    public static PdhLogFileType PDH_LOG_TYPE_CSV;
    public static PdhLogFileType PDH_LOG_TYPE_TSV;
    public static PdhLogFileType PDH_LOG_TYPE_TRACE_KERNEL;
    public static PdhLogFileType PDH_LOG_TYPE_TRACE_GENERIC;
    public static PdhLogFileType PDH_LOG_TYPE_PERFMON;
    public static PdhLogFileType PDH_LOG_TYPE_SQL;
    public static PdhLogFileType PDH_LOG_TYPE_BINARY;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogOpenMode : object {
    public static UInt32 PDH_LOG_CREATE_NEW;
    public static UInt32 PDH_LOG_CREATE_ALWAYS;
    public static UInt32 PDH_LOG_OPEN_ALWAYS;
    public static UInt32 PDH_LOG_OPEN_EXISTING;
    public static UInt32 PDH_LOG_CREATE_MASK;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogOpenOption : object {
    public static UInt32 PDH_LOG_OPT_USER_STRING;
    public static UInt32 PDH_LOG_OPT_CIRCULAR;
    public static UInt32 PDH_LOG_OPT_MAX_IS_BYTES;
    public static UInt32 PDH_LOG_OPT_APPEND;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhResults : object {
    public static UInt32 PDH_CSTATUS_VALID_DATA;
    public static UInt32 PDH_CSTATUS_NEW_DATA;
    public static UInt32 PDH_CSTATUS_NO_MACHINE;
    public static UInt32 PDH_CSTATUS_NO_INSTANCE;
    public static UInt32 PDH_MORE_DATA;
    public static UInt32 PDH_CSTATUS_ITEM_NOT_VALIDATED;
    public static UInt32 PDH_RETRY;
    public static UInt32 PDH_NO_DATA;
    public static UInt32 PDH_CALC_NEGATIVE_DENOMINATOR;
    public static UInt32 PDH_CALC_NEGATIVE_TIMEBASE;
    public static UInt32 PDH_CALC_NEGATIVE_VALUE;
    public static UInt32 PDH_DIALOG_CANCELLED;
    public static UInt32 PDH_END_OF_LOG_FILE;
    public static UInt32 PDH_ASYNC_QUERY_TIMEOUT;
    public static UInt32 PDH_CANNOT_SET_DEFAULT_REALTIME_DATASOURCE;
    public static UInt32 PDH_UNABLE_MAP_NAME_FILES;
    public static UInt32 PDH_PLA_VALIDATION_WARNING;
    public static UInt32 PDH_CSTATUS_NO_OBJECT;
    public static UInt32 PDH_CSTATUS_NO_COUNTER;
    public static UInt32 PDH_CSTATUS_INVALID_DATA;
    public static UInt32 PDH_MEMORY_ALLOCATION_FAILURE;
    public static UInt32 PDH_INVALID_HANDLE;
    public static UInt32 PDH_INVALID_ARGUMENT;
    public static UInt32 PDH_FUNCTION_NOT_FOUND;
    public static UInt32 PDH_CSTATUS_NO_COUNTERNAME;
    public static UInt32 PDH_CSTATUS_BAD_COUNTERNAME;
    public static UInt32 PDH_INVALID_BUFFER;
    public static UInt32 PDH_INSUFFICIENT_BUFFER;
    public static UInt32 PDH_CANNOT_CONNECT_MACHINE;
    public static UInt32 PDH_INVALID_PATH;
    public static UInt32 PDH_INVALID_INSTANCE;
    public static UInt32 PDH_INVALID_DATA;
    public static UInt32 PDH_NO_DIALOG_DATA;
    public static UInt32 PDH_CANNOT_READ_NAME_STRINGS;
    public static UInt32 PDH_LOG_FILE_CREATE_ERROR;
    public static UInt32 PDH_LOG_FILE_OPEN_ERROR;
    public static UInt32 PDH_LOG_TYPE_NOT_FOUND;
    public static UInt32 PDH_NO_MORE_DATA;
    public static UInt32 PDH_ENTRY_NOT_IN_LOG_FILE;
    public static UInt32 PDH_DATA_SOURCE_IS_LOG_FILE;
    public static UInt32 PDH_DATA_SOURCE_IS_REAL_TIME;
    public static UInt32 PDH_UNABLE_READ_LOG_HEADER;
    public static UInt32 PDH_FILE_NOT_FOUND;
    public static UInt32 PDH_FILE_ALREADY_EXISTS;
    public static UInt32 PDH_NOT_IMPLEMENTED;
    public static UInt32 PDH_STRING_NOT_FOUND;
    public static UInt32 PDH_UNKNOWN_LOG_FORMAT;
    public static UInt32 PDH_UNKNOWN_LOGSVC_COMMAND;
    public static UInt32 PDH_LOGSVC_QUERY_NOT_FOUND;
    public static UInt32 PDH_LOGSVC_NOT_OPENED;
    public static UInt32 PDH_WBEM_ERROR;
    public static UInt32 PDH_ACCESS_DENIED;
    public static UInt32 PDH_LOG_FILE_TOO_SMALL;
    public static UInt32 PDH_INVALID_DATASOURCE;
    public static UInt32 PDH_INVALID_SQLDB;
    public static UInt32 PDH_NO_COUNTERS;
    public static UInt32 PDH_SQL_ALLOC_FAILED;
    public static UInt32 PDH_SQL_ALLOCCON_FAILED;
    public static UInt32 PDH_SQL_EXEC_DIRECT_FAILED;
    public static UInt32 PDH_SQL_FETCH_FAILED;
    public static UInt32 PDH_SQL_ROWCOUNT_FAILED;
    public static UInt32 PDH_SQL_MORE_RESULTS_FAILED;
    public static UInt32 PDH_SQL_CONNECT_FAILED;
    public static UInt32 PDH_SQL_BIND_FAILED;
    public static UInt32 PDH_CANNOT_CONNECT_WMI_SERVER;
    public static UInt32 PDH_PLA_COLLECTION_ALREADY_RUNNING;
    public static UInt32 PDH_PLA_ERROR_SCHEDULE_OVERLAP;
    public static UInt32 PDH_PLA_COLLECTION_NOT_FOUND;
    public static UInt32 PDH_PLA_ERROR_SCHEDULE_ELAPSED;
    public static UInt32 PDH_PLA_ERROR_NOSTART;
    public static UInt32 PDH_PLA_ERROR_ALREADY_EXISTS;
    public static UInt32 PDH_PLA_ERROR_TYPE_MISMATCH;
    public static UInt32 PDH_PLA_ERROR_FILEPATH;
    public static UInt32 PDH_PLA_SERVICE_ERROR;
    public static UInt32 PDH_PLA_VALIDATION_ERROR;
    public static UInt32 PDH_PLA_ERROR_NAME_TOO_LONG;
    public static UInt32 PDH_INVALID_SQL_LOG_FORMAT;
    public static UInt32 PDH_COUNTER_ALREADY_IN_QUERY;
    public static UInt32 PDH_BINARY_LOG_CORRUPT;
    public static UInt32 PDH_LOG_SAMPLE_TOO_SMALL;
    public static UInt32 PDH_OS_LATER_VERSION;
    public static UInt32 PDH_OS_EARLIER_VERSION;
    public static UInt32 PDH_INCORRECT_APPEND_TIME;
    public static UInt32 PDH_UNMATCHED_APPEND_COUNTER;
    public static UInt32 PDH_SQL_ALTER_DETAIL_FAILED;
    public static UInt32 PDH_QUERY_PERF_DATA_TIMEOUT;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeDataSourceHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeLogHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeQueryHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhWildCardFlag : object {
    public static UInt32 PDH_NOEXPANDCOUNTERS;
    public static UInt32 PDH_NOEXPANDINSTANCES;
    public static UInt32 PDH_REFRESHCOUNTERS;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PerfDetail : object {
    public static UInt32 PERF_DETAIL_NOVICE;
    public static UInt32 PERF_DETAIL_ADVANCED;
    public static UInt32 PERF_DETAIL_EXPERT;
    public static UInt32 PERF_DETAIL_WIZARD;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.SYSTEMTIME : ValueType {
    public ushort year;
    public ushort month;
    public ushort dayOfWeek;
    public ushort day;
    public ushort hour;
    public ushort minute;
    public ushort second;
    public ushort milliseconds;
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSample : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CookedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SecondValue>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MultipleCount>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterType <CounterType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Timestamp100NSec>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultScale>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TimeBase>k__BackingField;
    public string Path { get; public set; }
    public string InstanceName { get; public set; }
    public double CookedValue { get; public set; }
    public ulong RawValue { get; public set; }
    public ulong SecondValue { get; public set; }
    public UInt32 MultipleCount { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    public DateTime Timestamp { get; public set; }
    public ulong Timestamp100NSec { get; public set; }
    public UInt32 Status { get; public set; }
    public UInt32 DefaultScale { get; public set; }
    public ulong TimeBase { get; public set; }
    internal PerformanceCounterSample(string path, string instanceName, double cookedValue, ulong rawValue, ulong secondValue, UInt32 multiCount, PerformanceCounterType counterType, UInt32 defaultScale, ulong timeBase, DateTime timeStamp, ulong timeStamp100nSec, UInt32 status);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public double get_CookedValue();
    [CompilerGeneratedAttribute]
public void set_CookedValue(double value);
    [CompilerGeneratedAttribute]
public ulong get_RawValue();
    [CompilerGeneratedAttribute]
public void set_RawValue(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_SecondValue();
    [CompilerGeneratedAttribute]
public void set_SecondValue(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_MultipleCount();
    [CompilerGeneratedAttribute]
public void set_MultipleCount(UInt32 value);
    [CompilerGeneratedAttribute]
public PerformanceCounterType get_CounterType();
    [CompilerGeneratedAttribute]
public void set_CounterType(PerformanceCounterType value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public ulong get_Timestamp100NSec();
    [CompilerGeneratedAttribute]
public void set_Timestamp100NSec(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DefaultScale();
    [CompilerGeneratedAttribute]
public void set_DefaultScale(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_TimeBase();
    [CompilerGeneratedAttribute]
public void set_TimeBase(ulong value);
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterSample[] <CounterSamples>k__BackingField;
    private ResourceManager _resourceMgr;
    public DateTime Timestamp { get; public set; }
    public PerformanceCounterSample[] CounterSamples { get; public set; }
    internal PerformanceCounterSampleSet(DateTime timeStamp, PerformanceCounterSample[] counterSamples, bool firstSet);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public PerformanceCounterSample[] get_CounterSamples();
    [CompilerGeneratedAttribute]
public void set_CounterSamples(PerformanceCounterSample[] value);
}
[CmdletAttribute("Get", "Counter")]
public class Microsoft.PowerShell.Commands.GetCounterCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <ListSet>k__BackingField;
    private String[] _counter;
    private bool _defaultCounters;
    private List`1<string> _accumulatedCounters;
    [CompilerGeneratedAttribute]
private int <SampleInterval>k__BackingField;
    private static long KEEP_ON_SAMPLING;
    private long _maxSamples;
    private bool _maxSamplesSpecified;
    private bool _continuous;
    [CompilerGeneratedAttribute]
private String[] <ComputerName>k__BackingField;
    private ResourceManager _resourceMgr;
    private PdhHelper _pdhHelper;
    private EventWaitHandle _cancelEventArrived;
    private static string FrenchCultureId;
    private Dictionary`2<string, List`1<Tuple`2<char, char>>> _cultureAndSpecialCharacterMap;
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListSet { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] Counter { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SampleInterval { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public long MaxSamples { get; public set; }
    [ParameterAttribute]
public SwitchParameter Continuous { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[AllowEmptyCollectionAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ComputerName { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_ListSet();
    [CompilerGeneratedAttribute]
public void set_ListSet(String[] value);
    public String[] get_Counter();
    public void set_Counter(String[] value);
    [CompilerGeneratedAttribute]
public int get_SampleInterval();
    [CompilerGeneratedAttribute]
public void set_SampleInterval(int value);
    public long get_MaxSamples();
    public void set_MaxSamples(long value);
    public SwitchParameter get_Continuous();
    public void set_Continuous(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual void ProcessRecord();
    private void AccumulatePipelineCounters();
    private void ProcessListSet();
    private void ProcessListSetPerMachine(string machine);
    private void ProcessGetCounter();
    private void ReportPdhError(UInt32 res, bool bTerminate);
    private List`1<string> CombineMachinesAndCounterPaths();
    private void WriteSampleSetObject(PerformanceCounterSampleSet set);
    private static CultureInfo GetCurrentCulture();
}
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "WinEvent")]
public class Microsoft.PowerShell.Commands.GetWinEventCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <ListLog>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ListProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterXPath>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <FilterXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable[] <FilterHashtable>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    private bool _oldest;
    private static string queryListOpen;
    private static string queryListClose;
    private static string queryTemplate;
    private static string queryOpenerTemplate;
    private static string queryCloser;
    private static string SelectCloser;
    private static string suppressOpener;
    private static string suppressCloser;
    private static char propOpen;
    private static char propClose;
    private static string filePrefix;
    private static string NamedDataTemplate;
    private static string DataTemplate;
    private static string SystemTimePeriodTemplate;
    private static string SystemTimeStartTemplate;
    private static string SystemTimeEndTemplate;
    private static string SystemLevelTemplate;
    private static string SystemEventIDTemplate;
    private static string SystemSecurityTemplate;
    private static string SystemKeywordsTemplate;
    private ResourceManager _resourceMgr;
    private Dictionary`2<string, StringCollection> _providersByLogMap;
    private StringCollection _logNamesMatchingWildcard;
    private StringCollection _resolvedPaths;
    private List`1<string> _accumulatedLogNames;
    private List`1<string> _accumulatedProviderNames;
    private List`1<string> _accumulatedFileNames;
    private static UInt32 MAX_EVENT_BATCH;
    private static string hashkey_logname_lc;
    private static string hashkey_providername_lc;
    private static string hashkey_path_lc;
    private static string hashkey_keywords_lc;
    private static string hashkey_id_lc;
    private static string hashkey_level_lc;
    private static string hashkey_starttime_lc;
    private static string hashkey_endtime_lc;
    private static string hashkey_userid_lc;
    private static string hashkey_data_lc;
    private static string hashkey_supress_lc;
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListLog { get; public set; }
    [ParameterAttribute]
public String[] LogName { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListProvider { get; public set; }
    [ParameterAttribute]
public String[] ProviderName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public long MaxEvents { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public string FilterXPath { get; public set; }
    [ParameterAttribute]
public XmlDocument FilterXml { get; public set; }
    [ParameterAttribute]
public Hashtable[] FilterHashtable { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Oldest { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_ListLog();
    [CompilerGeneratedAttribute]
public void set_ListLog(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ListProvider();
    [CompilerGeneratedAttribute]
public void set_ListProvider(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public long get_MaxEvents();
    [CompilerGeneratedAttribute]
public void set_MaxEvents(long value);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_FilterXPath();
    [CompilerGeneratedAttribute]
public void set_FilterXPath(string value);
    [CompilerGeneratedAttribute]
public XmlDocument get_FilterXml();
    [CompilerGeneratedAttribute]
public void set_FilterXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_FilterHashtable();
    [CompilerGeneratedAttribute]
public void set_FilterHashtable(Hashtable[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    public SwitchParameter get_Oldest();
    public void set_Oldest(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
    private void AccumulatePipelineLogNames();
    private void AccumulatePipelineProviderNames();
    private void AccumulatePipelineFileNames();
    private void ProcessGetLog();
    private void ProcessGetProvider();
    private void ProcessListLog();
    private void ProcessListProvider();
    private void ProcessFilterXml();
    private void ProcessFile();
    private void ProcessHashQuery();
    private EventLogSession CreateSession();
    private void ReadEvents(EventLogQuery logQuery);
    private string BuildStructuredQuery(EventLogSession eventLogSession);
    private string BuildXPathFromHashTable(Hashtable hash);
    private string BuildStructuredQueryFromHashTable(EventLogSession eventLogSession);
    private static string HandleEventIdHashValue(object value);
    private static string HandleLevelHashValue(object value);
    private string HandleKeywordHashValue(object value);
    private string HandleContextHashValue(object value);
    private string HandleStartTimeHashValue(object value, Hashtable hash);
    private string HandleEndTimeHashValue(object value, Hashtable hash);
    private static string HandleDataHashValue(object value);
    private static string HandleNamedDataHashValue(string key, object value);
    private void CheckHashTableForQueryPathPresence(Hashtable hash);
    private void TerminateForNonEvtxFileWithoutOldest(string fileName);
    private bool ValidateLogName(string logName, EventLogSession eventLogSession);
    private bool KeywordStringToInt64(string keyString, Int64& keyLong);
    private bool StringToDateTime(string dtString, DateTime& dt);
    private StringCollection ValidateAndResolveFilePath(string path);
    private void CheckHashTablesForNullValues();
    private string AddProviderPredicatesToFilter(StringCollection providers);
    private static string BuildProvidersPredicate(StringCollection providers);
    private string BuildAllProvidersPredicate();
    private void AddLogsForProviderToInternalMap(EventLogSession eventLogSession, string providerName);
    private void FindLogNamesMatchingWildcards(EventLogSession eventLogSession, IEnumerable`1<string> logPatterns);
    private void FindProvidersByLogForWildcardPatterns(EventLogSession eventLogSession, IEnumerable`1<string> providerPatterns);
}
[CmdletAttribute("New", "WinEvent")]
public class Microsoft.PowerShell.Commands.NewWinEventCommand : PSCmdlet {
    private ProviderMetadata _providerMetadata;
    private Nullable`1<EventDescriptor> _eventDescriptor;
    private static string TemplateTag;
    private static string DataTag;
    private ResourceManager _resourceMgr;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    private int _id;
    private bool _idSpecified;
    private byte _version;
    private bool _versionSpecified;
    [CompilerGeneratedAttribute]
private Object[] <Payload>k__BackingField;
    [ParameterAttribute]
public string ProviderName { get; public set; }
    [ParameterAttribute]
public int Id { get; public set; }
    [ParameterAttribute]
public byte Version { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public Object[] Payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    public int get_Id();
    public void set_Id(int value);
    public byte get_Version();
    public void set_Version(byte value);
    [CompilerGeneratedAttribute]
public Object[] get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Object[] value);
    protected virtual void BeginProcessing();
    private void LoadProvider();
    private void LoadEventDescriptor();
    private bool VerifyTemplate(EventMetadata emd);
    private static EventDescriptor CreateEventDescriptor(ProviderMetadata providerMetaData, EventMetadata emd);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
