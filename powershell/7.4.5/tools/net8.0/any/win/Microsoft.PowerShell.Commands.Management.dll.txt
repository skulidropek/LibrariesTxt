[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ClearRecycleBinResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ClearRecycleBinContent { get; }
    internal static string ClearRecycleBinContentForDrive { get; }
    internal static string ClearRecycleBinProgressActivity { get; }
    internal static string ClearRecycleBinStatusDescriptionByDrive { get; }
    internal static string ClearRecycleBinStatusDescriptionForAllDrives { get; }
    internal static string DriveNotFound { get; }
    internal static string InvalidDriveNameFormat { get; }
    internal static string InvalidDriveType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ClearRecycleBinContent();
    internal static string get_ClearRecycleBinContentForDrive();
    internal static string get_ClearRecycleBinProgressActivity();
    internal static string get_ClearRecycleBinStatusDescriptionByDrive();
    internal static string get_ClearRecycleBinStatusDescriptionForAllDrives();
    internal static string get_DriveNotFound();
    internal static string get_InvalidDriveNameFormat();
    internal static string get_InvalidDriveType();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ClipboardResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SetClipboardContent { get; }
    internal static string AppendClipboardContent { get; }
    internal static string SetSingleFileToClipboard { get; }
    internal static string AppendSingleFileToClipboard { get; }
    internal static string SetMultipleFilesToClipboard { get; }
    internal static string AppendMultipleFilesToClipboard { get; }
    internal static string NoAppendableClipboardContent { get; }
    internal static string ClipboardCleared { get; }
    internal static string InvalidTypeCombine { get; }
    internal static string InvalidRawCombine { get; }
    internal static string InvalidHtmlCombine { get; }
    internal static string UnsupportedFormat { get; }
    internal static string UnsupportedPlatform { get; }
    internal static string AsHtmlUnsupported { get; }
    internal static string TextFormatUnsupported { get; }
    internal static string PathUnsupported { get; }
    internal static string LiteralPathUnsupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SetClipboardContent();
    internal static string get_AppendClipboardContent();
    internal static string get_SetSingleFileToClipboard();
    internal static string get_AppendSingleFileToClipboard();
    internal static string get_SetMultipleFilesToClipboard();
    internal static string get_AppendMultipleFilesToClipboard();
    internal static string get_NoAppendableClipboardContent();
    internal static string get_ClipboardCleared();
    internal static string get_InvalidTypeCombine();
    internal static string get_InvalidRawCombine();
    internal static string get_InvalidHtmlCombine();
    internal static string get_UnsupportedFormat();
    internal static string get_UnsupportedPlatform();
    internal static string get_AsHtmlUnsupported();
    internal static string get_TextFormatUnsupported();
    internal static string get_PathUnsupported();
    internal static string get_LiteralPathUnsupported();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CmdletizationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CimJob_InvalidClassName { get; }
    internal static string CimJob_MethodDescription { get; }
    internal static string CimJob_GenericCimFailure { get; }
    internal static string CimJob_VerboseExecutionMessage { get; }
    internal static string SessionBasedWrapper_ShouldProcessVsJobConflict { get; }
    internal static string CimJob_SafeQueryDescription { get; }
    internal static string CimJob_ErrorCodeFromMethod { get; }
    internal static string CimJob_SafeMethodDescription { get; }
    internal static string CimConversion_CimIntrinsicValue { get; }
    internal static string CimConversion_WqlQuery { get; }
    internal static string CimJob_InvalidOutputParameterName { get; }
    internal static string CimJob_NotFound_ComplexCase { get; }
    internal static string CimJob_NotFound_SimpleGranularCase_Equality { get; }
    internal static string CimJob_MismatchedTypeOfPropertyReturnedByQuery { get; }
    internal static string CimJob_SafeAssociationDescription { get; }
    internal static string CimJob_AssociationDescription { get; }
    internal static string CimJob_SleepAndRetryVerboseMessage { get; }
    internal static string CimJob_BrokenSession { get; }
    internal static string CimCmdletAdapter_DebugInquire { get; }
    internal static string CimCmdletAdapter_WarningInquire { get; }
    internal static string CimCmdletAdapter_WarningStop { get; }
    internal static string CimJob_ComputerNameConcatenationTemplate { get; }
    internal static string CimCmdletAdapter_RemoteDcomDoesntSupportExtendedSemantics { get; }
    internal static string CimJob_NotFound_SimpleGranularCase_Wildcard { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CimJob_InvalidClassName();
    internal static string get_CimJob_MethodDescription();
    internal static string get_CimJob_GenericCimFailure();
    internal static string get_CimJob_VerboseExecutionMessage();
    internal static string get_SessionBasedWrapper_ShouldProcessVsJobConflict();
    internal static string get_CimJob_SafeQueryDescription();
    internal static string get_CimJob_ErrorCodeFromMethod();
    internal static string get_CimJob_SafeMethodDescription();
    internal static string get_CimConversion_CimIntrinsicValue();
    internal static string get_CimConversion_WqlQuery();
    internal static string get_CimJob_InvalidOutputParameterName();
    internal static string get_CimJob_NotFound_ComplexCase();
    internal static string get_CimJob_NotFound_SimpleGranularCase_Equality();
    internal static string get_CimJob_MismatchedTypeOfPropertyReturnedByQuery();
    internal static string get_CimJob_SafeAssociationDescription();
    internal static string get_CimJob_AssociationDescription();
    internal static string get_CimJob_SleepAndRetryVerboseMessage();
    internal static string get_CimJob_BrokenSession();
    internal static string get_CimCmdletAdapter_DebugInquire();
    internal static string get_CimCmdletAdapter_WarningInquire();
    internal static string get_CimCmdletAdapter_WarningStop();
    internal static string get_CimJob_ComputerNameConcatenationTemplate();
    internal static string get_CimCmdletAdapter_RemoteDcomDoesntSupportExtendedSemantics();
    internal static string get_CimJob_NotFound_SimpleGranularCase_Wildcard();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ComputerInfoResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LoadingOperationSystemInfo { get; }
    internal static string LoadingHotPatchInfo { get; }
    internal static string LoadingRegistryInfo { get; }
    internal static string LoadingBiosInfo { get; }
    internal static string LoadingMotherboardInfo { get; }
    internal static string LoadingComputerInfo { get; }
    internal static string LoadingProcessorInfo { get; }
    internal static string LoadingNetworkAdapterInfo { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LoadingOperationSystemInfo();
    internal static string get_LoadingHotPatchInfo();
    internal static string get_LoadingRegistryInfo();
    internal static string get_LoadingBiosInfo();
    internal static string get_LoadingMotherboardInfo();
    internal static string get_LoadingComputerInfo();
    internal static string get_LoadingProcessorInfo();
    internal static string get_LoadingNetworkAdapterInfo();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ComputerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NotSupported { get; }
    internal static string NotEnabled { get; }
    internal static string InvalidDrive { get; }
    internal static string NoSystemDrive { get; }
    internal static string NotValidDrive { get; }
    internal static string NotDisabled { get; }
    internal static string ServiceDisabled { get; }
    internal static string RestorePointNotCreated { get; }
    internal static string RestoreFailed { get; }
    internal static string RestoreSuccess { get; }
    internal static string RestoreInterrupted { get; }
    internal static string NoRestorePoint { get; }
    internal static string DoubleComputerName { get; }
    internal static string RestartcomputerFailed { get; }
    internal static string OperationFailed { get; }
    internal static string StopcomputerFailed { get; }
    internal static string InvalidRestorePoint { get; }
    internal static string RestartNeeded { get; }
    internal static string RemoveComputerConfirm { get; }
    internal static string InvalidComputerNameFormat { get; }
    internal static string InvalidDomainNameFormat { get; }
    internal static string ComputerNamesAreEqual { get; }
    internal static string ResetComputerMachinePassword { get; }
    internal static string SystemRestoreServiceDisabled { get; }
    internal static string ProgressActivity { get; }
    internal static string ProgressStatusCreatingRestorePoint { get; }
    internal static string ProgressStatusCompleted { get; }
    internal static string NetworkPathNotFound { get; }
    internal static string PrivilegeNotEnabled { get; }
    internal static string RestartComputerAction { get; }
    internal static string LocalShutdownPrivilege { get; }
    internal static string RemoteShutdownPrivilege { get; }
    internal static string CannotWaitLocalComputer { get; }
    internal static string RestartComputerInvalidParameter { get; }
    internal static string RestartMultipleComputersActivity { get; }
    internal static string RestartSingleComputerActivity { get; }
    internal static string WaitForMultipleComputers { get; }
    internal static string VerifyRebootStage { get; }
    internal static string WaitForPowerShell { get; }
    internal static string WaitForRestartToBegin { get; }
    internal static string WaitForWinRM { get; }
    internal static string WaitForWMI { get; }
    internal static string RestartComplete { get; }
    internal static string NoSupportForCombinedServiceType { get; }
    internal static string CannotResolveComputerName { get; }
    internal static string IncorrectNewNameNumber { get; }
    internal static string InvalidNewName { get; }
    internal static string NewNameIsOldName { get; }
    internal static string ComputerNotInDomain { get; }
    internal static string FailToJoinWorkGroup { get; }
    internal static string NetworkDown { get; }
    internal static string FailToRename { get; }
    internal static string AddComputerActionDomain { get; }
    internal static string AddComputerActionWorkgroup { get; }
    internal static string AddComputerToSameDomain { get; }
    internal static string AddComputerToSameWorkgroup { get; }
    internal static string FailToRenameAfterJoinWorkgroup { get; }
    internal static string FailToSwitchFromDomainToWorkgroup { get; }
    internal static string FailToUnjoinDomain { get; }
    internal static string FailToConnectToComputer { get; }
    internal static string FailToJoinDomainFromWorkgroup { get; }
    internal static string FailToJoinNewDomainAfterUnjoinOldDomain { get; }
    internal static string FailToRenameAfterJoinDomain { get; }
    internal static string InvalidJoinOptions { get; }
    internal static string CannotRenameMultipleComputers { get; }
    internal static string CannotFindMachineAccountFromDomain { get; }
    internal static string CannotFindMachineAccountFromServer { get; }
    internal static string FailToGetDomainInformation { get; }
    internal static string FailToResetPasswordOnDomain { get; }
    internal static string FailToResetPasswordOnLocalMachine { get; }
    internal static string NeedAdminPrivilegeToResetPassword { get; }
    internal static string ResetComputerNotInDomain { get; }
    internal static string TruncateNetBIOSName { get; }
    internal static string TruncateNetBIOSNameCaption { get; }
    internal static string CannotResolveServerName { get; }
    internal static string CannotCreateRestorePointWarning { get; }
    internal static string CannotGetOperatingSystemObject { get; }
    internal static string RestartComputerSkipped { get; }
    internal static string FailToTestSecureChannel { get; }
    internal static string RepairSecureChannelFail { get; }
    internal static string RepairSecureChannelSucceed { get; }
    internal static string SecureChannelAlive { get; }
    internal static string SecureChannelBroken { get; }
    internal static string TestComputerNotInDomain { get; }
    internal static string SystemRestoreNotSupported { get; }
    internal static string TimeoutError { get; }
    internal static string FailToRetrieveLastRestorePoint { get; }
    internal static string InvalidParameterSetAsJob { get; }
    internal static string InvalidParameterForCoreClr { get; }
    internal static string ShutdownCommandNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NotSupported();
    internal static string get_NotEnabled();
    internal static string get_InvalidDrive();
    internal static string get_NoSystemDrive();
    internal static string get_NotValidDrive();
    internal static string get_NotDisabled();
    internal static string get_ServiceDisabled();
    internal static string get_RestorePointNotCreated();
    internal static string get_RestoreFailed();
    internal static string get_RestoreSuccess();
    internal static string get_RestoreInterrupted();
    internal static string get_NoRestorePoint();
    internal static string get_DoubleComputerName();
    internal static string get_RestartcomputerFailed();
    internal static string get_OperationFailed();
    internal static string get_StopcomputerFailed();
    internal static string get_InvalidRestorePoint();
    internal static string get_RestartNeeded();
    internal static string get_RemoveComputerConfirm();
    internal static string get_InvalidComputerNameFormat();
    internal static string get_InvalidDomainNameFormat();
    internal static string get_ComputerNamesAreEqual();
    internal static string get_ResetComputerMachinePassword();
    internal static string get_SystemRestoreServiceDisabled();
    internal static string get_ProgressActivity();
    internal static string get_ProgressStatusCreatingRestorePoint();
    internal static string get_ProgressStatusCompleted();
    internal static string get_NetworkPathNotFound();
    internal static string get_PrivilegeNotEnabled();
    internal static string get_RestartComputerAction();
    internal static string get_LocalShutdownPrivilege();
    internal static string get_RemoteShutdownPrivilege();
    internal static string get_CannotWaitLocalComputer();
    internal static string get_RestartComputerInvalidParameter();
    internal static string get_RestartMultipleComputersActivity();
    internal static string get_RestartSingleComputerActivity();
    internal static string get_WaitForMultipleComputers();
    internal static string get_VerifyRebootStage();
    internal static string get_WaitForPowerShell();
    internal static string get_WaitForRestartToBegin();
    internal static string get_WaitForWinRM();
    internal static string get_WaitForWMI();
    internal static string get_RestartComplete();
    internal static string get_NoSupportForCombinedServiceType();
    internal static string get_CannotResolveComputerName();
    internal static string get_IncorrectNewNameNumber();
    internal static string get_InvalidNewName();
    internal static string get_NewNameIsOldName();
    internal static string get_ComputerNotInDomain();
    internal static string get_FailToJoinWorkGroup();
    internal static string get_NetworkDown();
    internal static string get_FailToRename();
    internal static string get_AddComputerActionDomain();
    internal static string get_AddComputerActionWorkgroup();
    internal static string get_AddComputerToSameDomain();
    internal static string get_AddComputerToSameWorkgroup();
    internal static string get_FailToRenameAfterJoinWorkgroup();
    internal static string get_FailToSwitchFromDomainToWorkgroup();
    internal static string get_FailToUnjoinDomain();
    internal static string get_FailToConnectToComputer();
    internal static string get_FailToJoinDomainFromWorkgroup();
    internal static string get_FailToJoinNewDomainAfterUnjoinOldDomain();
    internal static string get_FailToRenameAfterJoinDomain();
    internal static string get_InvalidJoinOptions();
    internal static string get_CannotRenameMultipleComputers();
    internal static string get_CannotFindMachineAccountFromDomain();
    internal static string get_CannotFindMachineAccountFromServer();
    internal static string get_FailToGetDomainInformation();
    internal static string get_FailToResetPasswordOnDomain();
    internal static string get_FailToResetPasswordOnLocalMachine();
    internal static string get_NeedAdminPrivilegeToResetPassword();
    internal static string get_ResetComputerNotInDomain();
    internal static string get_TruncateNetBIOSName();
    internal static string get_TruncateNetBIOSNameCaption();
    internal static string get_CannotResolveServerName();
    internal static string get_CannotCreateRestorePointWarning();
    internal static string get_CannotGetOperatingSystemObject();
    internal static string get_RestartComputerSkipped();
    internal static string get_FailToTestSecureChannel();
    internal static string get_RepairSecureChannelFail();
    internal static string get_RepairSecureChannelSucceed();
    internal static string get_SecureChannelAlive();
    internal static string get_SecureChannelBroken();
    internal static string get_TestComputerNotInDomain();
    internal static string get_SystemRestoreNotSupported();
    internal static string get_TimeoutError();
    internal static string get_FailToRetrieveLastRestorePoint();
    internal static string get_InvalidParameterSetAsJob();
    internal static string get_InvalidParameterForCoreClr();
    internal static string get_ShutdownCommandNotFound();
}
[ExtensionAttribute]
internal static class Extensions.CIMExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<CimInstance> QueryInstances(CimSession session, string nameSpace, string query);
    [ExtensionAttribute]
internal static CimInstance QueryFirstInstance(CimSession session, string nameSpace, string query);
    [ExtensionAttribute]
internal static CimInstance QueryFirstInstance(CimSession session, string query);
    [ExtensionAttribute]
internal static T GetFirst(CimSession session, string wmiClassName);
    [ExtensionAttribute]
internal static T GetFirst(CimSession session, string wmiNamespace, string wmiClassName);
    [ExtensionAttribute]
internal static T[] GetAll(CimSession session, string wmiClassName);
    [ExtensionAttribute]
internal static T[] GetAll(CimSession session, string wmiNamespace, string wmiClassName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotFixResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoEntriesFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoEntriesFound();
}
internal class Microsoft.PowerShell.Cim.CimSensitiveValueConverter : object {
    private List`1<IDisposable> _trackedDisposables;
    private static string PSCredentialDelimiter;
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal object ConvertFromDotNetToCim(object dotNetObject);
    internal static Type GetCimType(Type dotNetType);
}
internal static class Microsoft.PowerShell.Cim.CimValueConverter : object {
    internal static object ConvertFromDotNetToCim(object dotNetObject);
    internal static object ConvertFromCimToDotNet(object cimObject, Type expectedDotNetType);
    internal static CimType GetCimTypeEnum(Type dotNetType);
    internal static Type GetCimType(Type dotNetType);
    private static Type GetConvertibleCimType(Type dotNetType);
    internal static Type GetElementType(Type arrayType);
    internal static PSInvalidCastException GetInvalidCastException(Exception innerException, string errorId, object sourceValue, string descriptionOfTargetType);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIntrinsicCimValue(object value);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIntrinsicCimType(Type type);
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1 : StartableJob {
    private static long s_globalJobNumberCounter;
    private long _myJobNumber;
    private static string CIMJobType;
    private CimJobContext _jobContext;
    private CimSensitiveValueConverter _cimSensitiveValueConverter;
    private static Random s_globalRandom;
    private Random _random;
    private int _sleepAndRetryDelayRangeMs;
    private int _sleepAndRetryExtraDelayMs;
    private static int MaxRetryDelayMs;
    private static int MinRetryDelayMs;
    private Timer _sleepAndRetryTimer;
    private Lazy`1<CimCustomOptionsDictionary> _jobSpecificCustomOptions;
    private CancellationTokenSource _cancellationTokenSource;
    private object _jobStateLock;
    private bool _jobHadErrors;
    private bool _jobWasStarted;
    private bool _jobWasStopped;
    private bool _alreadyReachedCompletedState;
    private ConcurrentDictionary`2<int, ProgressRecord> _activityIdToLastProgressRecord;
    private bool _userWasPromptedForContinuationOfProcessing;
    private bool _userRespondedYesToAtLeastOneShouldProcess;
    internal CimJobContext JobContext { get; }
    internal CimSensitiveValueConverter CimSensitiveValueConverter { get; }
    public string Location { get; }
    public string StatusMessage { get; }
    public bool HasMoreData { get; }
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal bool JobHadErrors { get; }
    internal bool DidUserSuppressTheOperation { get; }
    internal CimChildJobBase`1(CimJobContext jobContext);
    private static CimChildJobBase`1();
    internal CimJobContext get_JobContext();
    internal CimSensitiveValueConverter get_CimSensitiveValueConverter();
    internal abstract virtual IObservable`1<T> GetCimOperation();
    public abstract virtual void OnNext(T item);
    private static bool IsWsManQuotaReached(Exception exception);
    public virtual void OnError(Exception exception);
    public virtual void OnCompleted();
    private void SleepAndRetry_OnWakeup(object state);
    private void SleepAndRetry();
    public virtual string get_Location();
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    internal void WriteVerboseStartOfCimOperation();
    internal virtual void StartJob();
    internal string GetDescription();
    internal abstract virtual string get_Description();
    internal abstract virtual string get_FailSafeDescription();
    internal void ExceptionSafeWrapper(Action action);
    internal virtual string GetProviderVersionExpectedByJob();
    internal CimOperationOptions CreateOperationOptions();
    internal abstract virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    private CimCustomOptionsDictionary GetJobSpecificCustomOptions();
    public virtual void StopJob();
    internal bool get_JobHadErrors();
    internal void ReportJobFailure(IContainsErrorRecord exception);
    internal virtual void WriteWarning(string message);
    internal virtual void WriteVerbose(string message);
    internal virtual void WriteDebug(string message);
    internal void SetCompletedJobState(JobState state, Exception reason);
    internal virtual void WriteProgress(ProgressRecord progressRecord);
    internal void FinishProgressReporting();
    private void WriteProgressCallback(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    private void WriteMessageCallback(UInt32 channel, string message);
    private CimResponseType BlockingWriteError(ErrorRecord errorRecord);
    private CimResponseType WriteErrorCallback(CimInstance cimError);
    internal bool get_DidUserSuppressTheOperation();
    internal CimResponseType ShouldProcess(string target, string action);
    internal CimResponseType ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    private CimResponseType PromptUserCallback(string message, CimPromptType promptType);
    internal static bool IsShowComputerNameMarkerPresent(CimInstance cimInstance);
    internal static void AddShowComputerNameMarker(PSObject pso);
    internal virtual void WriteObject(object outputObject);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <OnCompleted>b__15_0();
    [CompilerGeneratedAttribute]
private void <SleepAndRetry_OnWakeup>b__23_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <StartJob>b__32_0(object <p0>);
    [CompilerGeneratedAttribute]
private void <StartJob>b__32_1();
}
public class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter : SessionBasedCmdletAdapter`2<CimInstance, CimSession> {
    internal static string CreateInstance_MethodName;
    internal static string ModifyInstance_MethodName;
    internal static string DeleteInstance_MethodName;
    private bool _throttleLimitIsSetExplicitly;
    private CimCmdletInvocationContext _cmdletInvocationContext;
    private CimCmdletDefinitionContext _cmdletDefinitionContext;
    private static long s_jobNumber;
    private static ConditionalWeakTable`2<CimInstance, CimSession> s_cimInstanceToSessionOfOrigin;
    private RuntimeDefinedParameterDictionary _dynamicParameters;
    private static string CimNamespaceParameter;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
public int ThrottleLimit { get; public set; }
    internal CimCmdletInvocationContext CmdletInvocationContext { get; }
    internal CimCmdletDefinitionContext CmdletDefinitionContext { get; }
    internal InvocationInfo CmdletInvocationInfo { get; }
    protected CimSession DefaultSession { get; }
    private static CimCmdletAdapter();
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public virtual int get_ThrottleLimit();
    public virtual void set_ThrottleLimit(int value);
    public virtual QueryBuilder GetQueryBuilder();
    internal CimCmdletInvocationContext get_CmdletInvocationContext();
    internal CimCmdletDefinitionContext get_CmdletDefinitionContext();
    internal InvocationInfo get_CmdletInvocationInfo();
    protected virtual string GenerateParentJobName();
    protected virtual CimSession get_DefaultSession();
    private CimJobContext CreateJobContext(CimSession session, object targetObject);
    internal virtual StartableJob CreateQueryJob(CimSession session, QueryBuilder baseQuery);
    internal virtual StartableJob CreateInstanceMethodInvocationJob(CimSession session, CimInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    private bool IsSupportedSession(CimSession cimSession, TerminatingErrorTracker terminatingErrorTracker);
    internal virtual StartableJob CreateStaticMethodInvocationJob(CimSession session, MethodInvocationInfo methodInvocationInfo);
    internal static void AssociateSessionOfOriginWithInstance(CimInstance cimInstance, CimSession sessionOfOrigin);
    internal static CimSession GetSessionOfOriginFromCimInstance(CimInstance instance);
    internal virtual CimSession GetSessionOfOriginFromInstance(CimInstance instance);
    private string GetDynamicNamespace();
    private sealed virtual override object System.Management.Automation.IDynamicParameters.GetDynamicParameters();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletDefinitionContext : object {
    [CompilerGeneratedAttribute]
private string <CmdletizationClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CmdletizationClassVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <CmdletizationModuleVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsShouldProcess>k__BackingField;
    private IDictionary`2<string, string> _privateData;
    private static string QueryLanguageKey;
    private Nullable`1<bool> _useEnumerateInstancesInsteadOfWql;
    private static int FallbackDefaultThrottleLimit;
    private Uri _resourceUri;
    private bool _resourceUriHasBeenCalculated;
    private Nullable`1<CimOperationFlags> _schemaConformanceLevel;
    public string CmdletizationClassName { get; }
    public string CmdletizationClassVersion { get; }
    public Version CmdletizationModuleVersion { get; }
    public bool SupportsShouldProcess { get; }
    public bool UseEnumerateInstancesInsteadOfWql { get; }
    public int DefaultThrottleLimit { get; }
    public bool ExposeCimNamespaceParameter { get; }
    public bool ClientSideWriteVerbose { get; }
    public bool ClientSideShouldProcess { get; }
    public Uri ResourceUri { get; }
    public bool SkipTestConnection { get; }
    public CimOperationFlags SchemaConformanceLevel { get; }
    internal CimCmdletDefinitionContext(string cmdletizationClassName, string cmdletizationClassVersion, Version cmdletizationModuleVersion, bool supportsShouldProcess, IDictionary`2<string, string> privateData);
    [CompilerGeneratedAttribute]
public string get_CmdletizationClassName();
    [CompilerGeneratedAttribute]
public string get_CmdletizationClassVersion();
    [CompilerGeneratedAttribute]
public Version get_CmdletizationModuleVersion();
    [CompilerGeneratedAttribute]
public bool get_SupportsShouldProcess();
    public bool get_UseEnumerateInstancesInsteadOfWql();
    public int get_DefaultThrottleLimit();
    public bool get_ExposeCimNamespaceParameter();
    public bool get_ClientSideWriteVerbose();
    public bool get_ClientSideShouldProcess();
    public Uri get_ResourceUri();
    public bool get_SkipTestConnection();
    public CimOperationFlags get_SchemaConformanceLevel();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletInvocationContext : object {
    [CompilerGeneratedAttribute]
private CimCmdletDefinitionContext <CmdletDefinitionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private InvocationInfo <CmdletInvocationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ShouldProcessPossibleOptimization <ShouldProcessOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionPreference <ErrorActionPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionPreference <WarningActionPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionPreference <VerboseActionPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionPreference <DebugActionPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceOverride>k__BackingField;
    private Lazy`1<CimSession> _defaultCimSession;
    public CimCmdletDefinitionContext CmdletDefinitionContext { get; }
    public InvocationInfo CmdletInvocationInfo { get; }
    public ShouldProcessPossibleOptimization ShouldProcessOptimization { get; }
    public ActionPreference ErrorActionPreference { get; }
    public ActionPreference WarningActionPreference { get; }
    public ActionPreference VerboseActionPreference { get; }
    public ActionPreference DebugActionPreference { get; }
    public string NamespaceOverride { get; }
    public bool IsRunningInBackground { get; }
    public bool ShowComputerName { get; }
    internal CimCmdletInvocationContext(CimCmdletDefinitionContext cmdletDefinitionContext, Cmdlet cmdlet, string namespaceOverride);
    private static void WarnAboutUnsupportedActionPreferences(Cmdlet cmdlet, ActionPreference effectiveActionPreference, string nameOfCommandLineParameter, Func`1<string> inquireMessageGetter, Func`1<string> stopMessageGetter);
    [CompilerGeneratedAttribute]
public CimCmdletDefinitionContext get_CmdletDefinitionContext();
    [CompilerGeneratedAttribute]
public InvocationInfo get_CmdletInvocationInfo();
    [CompilerGeneratedAttribute]
public ShouldProcessPossibleOptimization get_ShouldProcessOptimization();
    [CompilerGeneratedAttribute]
public ActionPreference get_ErrorActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_WarningActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_VerboseActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_DebugActionPreference();
    [CompilerGeneratedAttribute]
public string get_NamespaceOverride();
    public bool get_IsRunningInBackground();
    public bool get_ShowComputerName();
    private static CimSession CreateDefaultCimSession();
    public CimSession GetDefaultCimSession();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCustomOptionsDictionary : object {
    private IDictionary`2<string, object> _dict;
    private object _dictModificationLock;
    private static ConditionalWeakTable`2<CimInstance, CimCustomOptionsDictionary> s_cimInstanceToCustomOptions;
    private CimCustomOptionsDictionary(IEnumerable`1<KeyValuePair`2<string, object>> wrappedDictionary);
    private static CimCustomOptionsDictionary();
    private IEnumerable`1<KeyValuePair`2<string, object>> GetSnapshot();
    internal static CimCustomOptionsDictionary Create(IEnumerable`1<KeyValuePair`2<string, object>> wrappedDictionary);
    internal static void AssociateCimInstanceWithCustomOptions(CimInstance cimInstance, CimCustomOptionsDictionary newCustomOptions);
    internal static CimCustomOptionsDictionary MergeOptions(CimCustomOptionsDictionary optionsFromCommandLine, CimInstance instanceRelatedToThisOperation);
    internal static CimCustomOptionsDictionary MergeOptions(CimCustomOptionsDictionary optionsFromCommandLine, IEnumerable`1<CimInstance> instancesRelatedToThisOperation);
    internal void Apply(CimOperationOptions cimOperationOptions, CimSensitiveValueConverter cimSensitiveValueConverter);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimJobContext : object {
    [CompilerGeneratedAttribute]
private CimCmdletInvocationContext <CmdletInvocationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private CimSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    public CimCmdletInvocationContext CmdletInvocationContext { get; }
    public CimSession Session { get; }
    public object TargetObject { get; }
    public string ClassName { get; }
    public string ClassNameOrNullIfResourceUriIsUsed { get; }
    public string Namespace { get; }
    public InvocationInfo CmdletInvocationInfo { get; }
    public string CmdletizationClassName { get; }
    public Version CmdletizationModuleVersion { get; }
    public ActionPreference ErrorActionPreference { get; }
    public ActionPreference WarningActionPreference { get; }
    public ActionPreference VerboseActionPreference { get; }
    public ActionPreference DebugActionPreference { get; }
    public bool IsRunningInBackground { get; }
    public ShouldProcessPossibleOptimization ShouldProcessOptimization { get; }
    public bool ShowComputerName { get; }
    public bool SupportsShouldProcess { get; }
    internal CimJobContext(CimCmdletInvocationContext cmdletInvocationContext, CimSession session, object targetObject);
    [CompilerGeneratedAttribute]
public CimCmdletInvocationContext get_CmdletInvocationContext();
    [CompilerGeneratedAttribute]
public CimSession get_Session();
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    public string get_ClassName();
    public string get_ClassNameOrNullIfResourceUriIsUsed();
    public string get_Namespace();
    private static void ExtractCimNamespaceAndClassName(string cmdletizationClassName, String& cimNamespace, String& cimClassName);
    private static string GetCimClassName(string cmdletizationClassName);
    private static string GetCimNamespace(string cmdletizationClassName);
    internal string PrependComputerNameToMessage(string message);
    public InvocationInfo get_CmdletInvocationInfo();
    public string get_CmdletizationClassName();
    public Version get_CmdletizationModuleVersion();
    public ActionPreference get_ErrorActionPreference();
    public ActionPreference get_WarningActionPreference();
    public ActionPreference get_VerboseActionPreference();
    public ActionPreference get_DebugActionPreference();
    public bool get_IsRunningInBackground();
    public ShouldProcessPossibleOptimization get_ShouldProcessOptimization();
    public bool get_ShowComputerName();
    public bool get_SupportsShouldProcess();
}
public class Microsoft.PowerShell.Cmdletization.Cim.CimJobException : SystemException {
    private ErrorRecord _errorRecord;
    public ErrorRecord ErrorRecord { get; }
    internal bool IsTerminatingError { get; }
    public CimJobException(string message);
    public CimJobException(string message, Exception inner);
    [ObsoleteAttribute("Legacy serialization support is deprecated since .NET 8")]
protected CimJobException(SerializationInfo info, StreamingContext context);
    internal static CimJobException CreateFromCimException(string jobDescription, CimJobContext jobContext, CimException cimException);
    internal static CimJobException CreateFromAnyException(string jobDescription, CimJobContext jobContext, Exception inner);
    internal static CimJobException CreateWithFullControl(CimJobContext jobContext, string message, string errorId, ErrorCategory errorCategory, Exception inner);
    internal static CimJobException CreateWithoutJobContext(string message, string errorId, ErrorCategory errorCategory, Exception inner);
    internal static CimJobException CreateFromMethodErrorCode(string jobDescription, CimJobContext jobContext, string methodName, string errorCodeFromMethod);
    private static string BuildErrorMessage(string jobDescription, CimJobContext jobContext, string errorMessage);
    private void InitializeErrorRecordCore(CimJobContext jobContext, Exception exception, string errorId, ErrorCategory errorCategory);
    private void InitializeErrorRecord(CimJobContext jobContext, string errorId, ErrorCategory errorCategory);
    private void InitializeErrorRecord(CimJobContext jobContext, CimException cimException);
    private static ErrorCategory ConvertCimExceptionToErrorCategory(CimException cimException);
    private static ErrorCategory ConvertCimNativeErrorCodeToErrorCategory(NativeErrorCode nativeErrorCode);
    private static ErrorCategory ConvertCimErrorToErrorCategory(CimInstance cimError);
    public sealed virtual ErrorRecord get_ErrorRecord();
    internal bool get_IsTerminatingError();
}
internal static class Microsoft.PowerShell.Cmdletization.Cim.CimOperationOptionsHelper : object {
    internal static void SetCustomOptions(CimOperationOptions operationOptions, IEnumerable`1<KeyValuePair`2<string, object>> customOptions, CimSensitiveValueConverter cimSensitiveValueConverter);
    internal static void SetCustomOption(CimOperationOptions operationOptions, string optionName, object optionValue, CimSensitiveValueConverter cimSensitiveValueConverter);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimQuery : QueryBuilder {
    private StringBuilder _wqlCondition;
    private CimInstance _associatedObject;
    private string _associationName;
    private string _resultRole;
    private string _sourceRole;
    internal Dictionary`2<string, object> queryOptions;
    [CompilerGeneratedAttribute]
private ClientSideQuery <ClientSideQuery>k__BackingField;
    internal ClientSideQuery ClientSideQuery { get; }
    [CompilerGeneratedAttribute]
internal ClientSideQuery get_ClientSideQuery();
    private void AddWqlCondition(string condition);
    private static string ObjectToWqlLiteral(object o);
    private static string WildcardToWqlLikeOperand(WildcardPattern wildcardPattern, Boolean& needsClientSideFiltering);
    private static string GetMatchConditionForEqualityOperator(string propertyName, object propertyValue);
    private static string GetMatchConditionForLikeOperator(string propertyName, object propertyValue);
    private static string GetMatchCondition(string propertyName, IEnumerable propertyValues, bool wildcardsEnabled);
    public virtual void FilterByProperty(string propertyName, IEnumerable allowedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void ExcludeByProperty(string propertyName, IEnumerable excludedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMinPropertyValue(string propertyName, object minPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMaxPropertyValue(string propertyName, object maxPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByAssociatedInstance(object associatedInstance, string associationName, string sourceRole, string resultRole, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void AddQueryOption(string optionName, object optionValue);
    internal StartableJob GetQueryJob(CimJobContext jobContext);
    internal bool IsMatchingResult(CimInstance result);
    internal IEnumerable`1<NotFoundError> GenerateNotFoundErrors();
    private sealed virtual override CimSession Microsoft.PowerShell.Cmdletization.ISessionBoundQueryBuilder<Microsoft.Management.Infrastructure.CimSession>.GetTargetSession();
    public virtual string ToString();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.ClientSideQuery : QueryBuilder {
    private int _numberOfResultsFromMi;
    private int _numberOfMatchingResults;
    private List`1<CimInstanceFilterBase> _filters;
    private object _myLock;
    internal bool IsResultMatchingClientSideQuery(CimInstance result);
    internal IEnumerable`1<NotFoundError> GenerateNotFoundErrors();
    public virtual void FilterByProperty(string propertyName, IEnumerable allowedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void ExcludeByProperty(string propertyName, IEnumerable excludedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMinPropertyValue(string propertyName, object minPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMaxPropertyValue(string propertyName, object maxPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByAssociatedInstance(object associatedInstance, string associationName, string sourceRole, string resultRole, BehaviorOnNoMatch behaviorOnNoMatch);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CreateInstanceJob : PropertySettingJob`1<CimInstance> {
    private CimInstance _resultFromCreateInstance;
    private CimInstance _resultFromGetInstance;
    internal object PassThruObject { get; }
    internal CreateInstanceJob(CimJobContext jobContext, MethodInvocationInfo methodInvocationInfo);
    private static CimInstance GetEmptyInstance(CimJobContext jobContext);
    private IObservable`1<CimInstance> GetCreateInstanceOperation();
    private IObservable`1<CimInstance> GetGetInstanceOperation();
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    public virtual void OnNext(CimInstance item);
    public virtual void OnError(Exception exception);
    public virtual void OnCompleted();
    internal virtual object get_PassThruObject();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.DeleteInstanceJob : MethodInvocationJobBase`1<object> {
    private CimInstance _objectToDelete;
    internal object PassThruObject { get; }
    internal DeleteInstanceJob(CimJobContext jobContext, bool passThru, CimInstance objectToDelete, MethodInvocationInfo methodInvocationInfo);
    internal virtual IObservable`1<object> GetCimOperation();
    public virtual void OnNext(object item);
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.EnumerateAssociatedInstancesJob : QueryJobBase {
    private CimInstance _associatedObject;
    private string _associationName;
    private string _resultRole;
    private string _sourceRole;
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal EnumerateAssociatedInstancesJob(CimJobContext jobContext, CimQuery cimQuery, CimInstance associatedObject, string associationName, string resultRole, string sourceRole);
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    internal virtual void WriteObject(object outputObject);
    internal virtual string GetProviderVersionExpectedByJob();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.ExtrinsicMethodInvocationJob : MethodInvocationJobBase`1<CimMethodResultBase> {
    internal ExtrinsicMethodInvocationJob(CimJobContext jobContext, bool passThru, string methodSubject, MethodInvocationInfo methodInvocationInfo);
    internal CimMethodParametersCollection GetCimMethodParametersCollection();
    private void ProcessOutParameter(CimMethodResult methodResult, MethodParameter methodParameter, IDictionary`2<string, MethodParameter> cmdletOutput);
    private void OnNext(CimMethodResult methodResult);
    private void OnNext(CimMethodStreamedResult streamedResult);
    private void WriteObject(object cmdletOutput, MethodParameter methodParameter);
    public virtual void OnNext(CimMethodResultBase item);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.InstanceMethodInvocationJob : ExtrinsicMethodInvocationJob {
    private CimInstance _targetInstance;
    internal object PassThruObject { get; }
    internal InstanceMethodInvocationJob(CimJobContext jobContext, bool passThru, CimInstance targetInstance, MethodInvocationInfo methodInvocationInfo);
    internal virtual IObservable`1<CimMethodResultBase> GetCimOperation();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.MethodInvocationJobBase`1 : CimChildJobBase`1<T> {
    private bool _passThru;
    private MethodInvocationInfo _methodInvocationInfo;
    private static string CustomOperationOptionPrefix;
    [CompilerGeneratedAttribute]
private string <MethodSubject>k__BackingField;
    internal string MethodName { get; }
    internal string MethodSubject { get; }
    internal object PassThruObject { get; }
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal MethodInvocationJobBase`1(CimJobContext jobContext, bool passThru, string methodSubject, MethodInvocationInfo methodInvocationInfo);
    internal string get_MethodName();
    private IEnumerable`1<MethodParameter> GetMethodInputParametersCore(Func`2<MethodParameter, bool> filter);
    internal IEnumerable`1<MethodParameter> GetMethodInputParameters();
    internal IEnumerable`1<CimInstance> GetCimInstancesFromArguments();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    internal IEnumerable`1<MethodParameter> GetMethodOutputParameters();
    [CompilerGeneratedAttribute]
internal string get_MethodSubject();
    internal bool ShouldProcess();
    internal abstract virtual object get_PassThruObject();
    internal bool IsPassThruObjectNeeded();
    public virtual void OnCompleted();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
    [CompilerGeneratedAttribute]
private void <OnCompleted>b__18_0();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.ModifyInstanceJob : PropertySettingJob`1<CimInstance> {
    private CimInstance _resultFromModifyInstance;
    private bool _resultFromModifyInstanceHasBeenPassedThru;
    private CimInstance _originalInstance;
    private CimInstance _temporaryInstance;
    internal object PassThruObject { get; }
    internal ModifyInstanceJob(CimJobContext jobContext, bool passThru, CimInstance managementObject, MethodInvocationInfo methodInvocationInfo);
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    public virtual void OnNext(CimInstance item);
    public virtual void OnCompleted();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.PropertySettingJob`1 : MethodInvocationJobBase`1<T> {
    internal PropertySettingJob`1(CimJobContext jobContext, bool passThru, CimInstance objectToModify, MethodInvocationInfo methodInvocationInfo);
    internal void ModifyLocalCimInstance(CimInstance cimInstance);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.QueryInstancesJob : QueryJobBase {
    private string _wqlQuery;
    private bool _useEnumerateInstances;
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal QueryInstancesJob(CimJobContext jobContext, CimQuery cimQuery, string wqlCondition);
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.QueryJobBase : CimChildJobBase`1<CimInstance> {
    private CimQuery _cimQuery;
    internal QueryJobBase(CimJobContext jobContext, CimQuery cimQuery);
    public virtual void OnNext(CimInstance item);
    public virtual void OnCompleted();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    [CompilerGeneratedAttribute]
private void <OnCompleted>b__3_0();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.StaticMethodInvocationJob : ExtrinsicMethodInvocationJob {
    internal object PassThruObject { get; }
    internal StaticMethodInvocationJob(CimJobContext jobContext, MethodInvocationInfo methodInvocationInfo);
    internal virtual IObservable`1<CimMethodResultBase> GetCimOperation();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.TerminatingErrorTracker : object {
    private static ConditionalWeakTable`2<InvocationInfo, TerminatingErrorTracker> s_invocationToTracker;
    private int _numberOfSessions;
    private int _numberOfReportedSessionTerminatingErrors;
    private ConcurrentDictionary`2<CimSession, bool> _sessionToIsConnected;
    private ConcurrentDictionary`2<CimSession, bool> _sessionToIsTerminated;
    private TerminatingErrorTracker(int numberOfSessions);
    private static TerminatingErrorTracker();
    private static int GetNumberOfSessions(InvocationInfo invocationInfo);
    internal static TerminatingErrorTracker GetTracker(InvocationInfo invocationInfo, bool isStaticCmdlet);
    internal static TerminatingErrorTracker GetTracker(InvocationInfo invocationInfo);
    internal void MarkSessionAsConnected(CimSession connectedSession);
    internal bool DidSessionAlreadyPassedConnectivityTest(CimSession session);
    internal Exception GetExceptionIfBrokenSession(CimSession potentiallyBrokenSession, bool skipTestConnection, Boolean& sessionWasAlreadyTerminated);
    internal void MarkSessionAsTerminated(CimSession terminatedSession, Boolean& sessionWasAlreadyTerminated);
    internal bool IsSessionTerminated(CimSession session);
    internal CmdletMethodInvoker`1<bool> GetErrorReportingDelegate(ErrorRecord errorRecord);
}
internal interface Microsoft.PowerShell.Cmdletization.ISessionBoundQueryBuilder`1 {
    public abstract virtual TSession GetTargetSession();
}
public abstract class Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2 : CmdletAdapter`1<TObjectInstance> {
    private static string CIMJobType;
    private bool _disposed;
    private TSession[] _session;
    private bool _sessionWasSpecified;
    private bool _asJob;
    [CompilerGeneratedAttribute]
private int <ThrottleLimit>k__BackingField;
    private ThrottlingJob _parentJob;
    protected TSession[] Session { get; protected set; }
    [ParameterAttribute]
public SwitchParameter AsJob { get; public set; }
    [ParameterAttribute]
public int ThrottleLimit { get; public set; }
    protected TSession DefaultSession { get; }
    internal PSModuleInfo PSModuleInfo { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected TSession[] get_Session();
    protected void set_Session(TSession[] value);
    public SwitchParameter get_AsJob();
    public void set_AsJob(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual int get_ThrottleLimit();
    [CompilerGeneratedAttribute]
public virtual void set_ThrottleLimit(int value);
    internal abstract virtual StartableJob CreateQueryJob(TSession session, QueryBuilder query);
    private StartableJob DoCreateQueryJob(TSession sessionForJob, QueryBuilder query, Action`2<TSession, TObjectInstance> actionAgainstResults);
    internal abstract virtual StartableJob CreateInstanceMethodInvocationJob(TSession session, TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    private StartableJob DoCreateInstanceMethodInvocationJob(TSession sessionForJob, TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru, bool asJob);
    internal abstract virtual StartableJob CreateStaticMethodInvocationJob(TSession session, MethodInvocationInfo methodInvocationInfo);
    private StartableJob DoCreateStaticMethodInvocationJob(TSession sessionForJob, MethodInvocationInfo methodInvocationInfo);
    private static void HandleJobOutput(Job job, TSession sessionForJob, bool discardNonPipelineResults, Action`1<PSObject> outputAction);
    internal virtual TSession GetSessionOfOriginFromInstance(TObjectInstance instance);
    protected abstract virtual TSession get_DefaultSession();
    protected abstract virtual string GenerateParentJobName();
    private static void DiscardJobOutputs(PSDataCollection`1<T> psDataCollection);
    private static void DiscardJobOutputs(Job job, JobOutputs<TObjectInstance, TSession> jobOutputsToDiscard);
    public virtual void ProcessRecord(QueryBuilder query);
    public virtual void ProcessRecord(QueryBuilder query, MethodInvocationInfo methodInvocationInfo, bool passThru);
    private IEnumerable`1<TSession> GetSessionsToActAgainst(TObjectInstance objectInstance);
    private TSession GetSessionAssociatedWithPipelineObject();
    private IEnumerable`1<TSession> GetSessionsToActAgainst(QueryBuilder queryBuilder);
    private IEnumerable`1<TSession> GetSessionsToActAgainst(MethodInvocationInfo methodInvocationInfo);
    internal PSModuleInfo get_PSModuleInfo();
    private TSession GetImpliedSession();
    public virtual void ProcessRecord(TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    public virtual void ProcessRecord(MethodInvocationInfo methodInvocationInfo);
    public virtual void BeginProcessing();
    public virtual void EndProcessing();
    public virtual void StopProcessing();
}
[CmdletAttribute("Add", "Content")]
public class Microsoft.PowerShell.Commands.AddContentCommand : WriteContentCommandBase {
    internal virtual void SeekContentPosition(List`1<ContentHolder> contentHolders);
    internal virtual bool CallShouldProcess(string path);
}
public enum Microsoft.PowerShell.Commands.AdminPasswordStatus : Enum {
    public int value__;
    public static AdminPasswordStatus Disabled;
    public static AdminPasswordStatus Enabled;
    public static AdminPasswordStatus NotImplemented;
    public static AdminPasswordStatus Unknown;
}
public enum Microsoft.PowerShell.Commands.BootOptionAction : Enum {
    public int value__;
    public static BootOptionAction OperatingSystem;
    public static BootOptionAction SystemUtilities;
    public static BootOptionAction DoNotReboot;
}
internal static class Microsoft.PowerShell.Commands.CIMHelper : object {
    internal static string DefaultNamespace;
    internal static string DeviceGuardNamespace;
    internal static string MicrosoftNetworkAdapterNamespace;
    internal static string DefaultQueryDialect;
    internal static string WqlQueryAll(string from);
    internal static T GetFirst(CimSession session, string nameSpace, string wmiClassName);
    internal static T[] GetAll(CimSession session, string nameSpace, string wmiClassName);
    internal static T[] GetAll(CimSession session, string wmiClassName);
    internal static void SetObjectDataMember(object obj, BindingFlags binding, CimProperty cimProperty);
    internal static void SetObjectDataMembers(object obj, BindingFlags binding, CimInstance instance);
    internal static string EscapePath(string path);
}
[CmdletAttribute("Clear", "Content")]
public class Microsoft.PowerShell.Commands.ClearContentCommand : ContentCommandBase {
    protected bool ProviderSupportsShouldProcess { get; }
    protected virtual void ProcessRecord();
    protected virtual bool get_ProviderSupportsShouldProcess();
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
}
[CmdletAttribute("Clear", "Item")]
public class Microsoft.PowerShell.Commands.ClearItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private String[] _paths;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Clear", "ItemProperty")]
public class Microsoft.PowerShell.Commands.ClearItemPropertyCommand : PassThroughItemPropertyCommandBase {
    private string _property;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public string get_Name();
    public void set_Name(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Clear", "RecycleBin")]
public class Microsoft.PowerShell.Commands.ClearRecycleBinCommand : PSCmdlet {
    private String[] _drivesList;
    private DriveInfo[] _availableDrives;
    private bool _force;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DriveLetter { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_DriveLetter();
    public void set_DriveLetter(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private bool ValidDrivePath(string drivePath);
    private static bool IsValidPattern(string input);
    private static string GetDrivePath(string driveName);
    private void EmptyRecycleBin(string drivePath);
}
public class Microsoft.PowerShell.Commands.ComputerChangeInfo : object {
    private static string MatchFormat;
    [CompilerGeneratedAttribute]
private bool <HasSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    public bool HasSucceeded { get; public set; }
    public string ComputerName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasSucceeded();
    [CompilerGeneratedAttribute]
public void set_HasSucceeded(bool value);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(string value);
    public virtual string ToString();
    private static string FormatLine(string HasSucceeded, string computername);
}
public class Microsoft.PowerShell.Commands.ComputerInfo : object {
    [CompilerGeneratedAttribute]
private string <WindowsBuildLabEx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsCurrentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsEditionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsInstallationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <WindowsInstallDateFromRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsProductId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsRegisteredOrganization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsRegisteredOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsSystemRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WindowsUBR>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <BiosCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BiosBIOSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosCodeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosCurrentLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <BiosEmbeddedControllerMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <BiosEmbeddedControllerMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FirmwareType> <BiosFirmwareType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosIdentificationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosInstallableLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BiosInstallDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosLanguageEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BiosListOfLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosManufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosOtherTargetOS>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BiosPrimaryBIOS>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <BiosReleaseDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosSerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosSMBIOSBIOSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosSMBIOSMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosSMBIOSMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BiosSMBIOSPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SoftwareElementState> <BiosSoftwareElementState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosSystemBiosMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosSystemBiosMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <BiosTargetOperatingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HardwareSecurity> <CsAdminPasswordStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsAutomaticManagedPagefile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsAutomaticResetBootOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsAutomaticResetCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BootOptionAction> <CsBootOptionOnLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BootOptionAction> <CsBootOptionOnWatchDog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsBootROMSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <CsBootStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsBootupState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SystemElementState> <CsChassisBootupState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsChassisSKUNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <CsCurrentTimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsDaylightInEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsDNSHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DomainRole> <CsDomainRole>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsEnableDaylightSavingsTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HardwareSecurity> <CsFrontPanelResetStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsHypervisorPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsInfraredSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsInitialLoadInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CsInstallDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HardwareSecurity> <CsKeyboardPasswordStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsLastLoadInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsManufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsName>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkAdapter[] <CsNetworkAdapters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsNetworkServerModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CsNumberOfLogicalProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CsNumberOfProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private Processor[] <CsProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CsOEMStringArray>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsPartOfDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CsPauseAfterReset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PCSystemType> <CsPCSystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PCSystemTypeEx> <CsPCSystemTypeEx>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerManagementCapabilities[] <CsPowerManagementCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CsPowerManagementSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HardwareSecurity> <CsPowerOnPasswordStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PowerState> <CsPowerState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SystemElementState> <CsPowerSupplyState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsPrimaryOwnerContact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsPrimaryOwnerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResetCapability> <CsResetCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <CsResetCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <CsResetLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CsRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CsSupportContactDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsSystemFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsSystemSKUNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsSystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SystemElementState> <CsThermalState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <CsTotalPhysicalMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <CsPhysicallyInstalledMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WakeUpType> <CsWakeUpType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsWorkgroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OSType> <OsType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OperatingSystemSKU> <OsOperatingSystemSKU>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsCSDVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private HotFix[] <OsHotFixes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsBootDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsSystemDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsSystemDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsSystemDrive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsWindowsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsCountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <OsCurrentTimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsLocaleID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsLocale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <OsLocalDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <OsLastBootUpTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OsUptime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsBuildType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsCodeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsDataExecutionPreventionAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsDataExecutionPrevention32BitApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsDataExecutionPreventionDrivers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DataExecutionPreventionSupportPolicy> <OsDataExecutionPreventionSupportPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsDistributed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OSEncryptionLevel> <OsEncryptionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForegroundApplicationBoost> <OsForegroundApplicationBoost>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsTotalVisibleMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsFreePhysicalMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsTotalVirtualMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsFreeVirtualMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsInUseVirtualMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsTotalSwapSpaceSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsSizeStoredInPagingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsFreeSpaceInPagingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OsPagingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsHardwareAbstractionLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <OsInstallDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsManufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OsMaxNumberOfProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <OsMaxProcessMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OsMuiLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OsNumberOfLicensedUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OsNumberOfProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OsNumberOfUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsOrganization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private OSProductSuite[] <OsProductSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsOtherTypeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsPAEEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsPortableOperatingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OsPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProductType> <OsProductType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsRegisteredUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsSerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <OsServicePackMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <OsServicePackMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private OSProductSuite[] <OsSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ServerLevel> <OsServerLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyboardLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogonServer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PowerPlatformRole> <PowerPlatformRole>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HyperVisorPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HyperVRequirementDataExecutionPreventionAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HyperVRequirementSecondLevelAddressTranslation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HyperVRequirementVirtualizationFirmwareEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HyperVRequirementVMMonitorModeExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceGuardSmartStatus> <DeviceGuardSmartStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardHardwareSecure[] <DeviceGuardRequiredSecurityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardHardwareSecure[] <DeviceGuardAvailableSecurityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardSoftwareSecure[] <DeviceGuardSecurityServicesConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardSoftwareSecure[] <DeviceGuardSecurityServicesRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceGuardConfigCodeIntegrityStatus> <DeviceGuardCodeIntegrityPolicyEnforcementStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceGuardConfigCodeIntegrityStatus> <DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus>k__BackingField;
    public string WindowsBuildLabEx { get; internal set; }
    public string WindowsCurrentVersion { get; internal set; }
    public string WindowsEditionId { get; internal set; }
    public string WindowsInstallationType { get; internal set; }
    public Nullable`1<DateTime> WindowsInstallDateFromRegistry { get; internal set; }
    public string WindowsProductId { get; internal set; }
    public string WindowsProductName { get; internal set; }
    public string WindowsRegisteredOrganization { get; internal set; }
    public string WindowsRegisteredOwner { get; internal set; }
    public string WindowsSystemRoot { get; internal set; }
    public string WindowsVersion { get; internal set; }
    public Nullable`1<int> WindowsUBR { get; internal set; }
    public UInt16[] BiosCharacteristics { get; internal set; }
    public String[] BiosBIOSVersion { get; internal set; }
    public string BiosBuildNumber { get; internal set; }
    public string BiosCaption { get; internal set; }
    public string BiosCodeSet { get; internal set; }
    public string BiosCurrentLanguage { get; internal set; }
    public string BiosDescription { get; internal set; }
    public Nullable`1<short> BiosEmbeddedControllerMajorVersion { get; internal set; }
    public Nullable`1<short> BiosEmbeddedControllerMinorVersion { get; internal set; }
    public Nullable`1<FirmwareType> BiosFirmwareType { get; internal set; }
    public string BiosIdentificationCode { get; internal set; }
    public Nullable`1<ushort> BiosInstallableLanguages { get; internal set; }
    public Nullable`1<DateTime> BiosInstallDate { get; internal set; }
    public string BiosLanguageEdition { get; internal set; }
    public String[] BiosListOfLanguages { get; internal set; }
    public string BiosManufacturer { get; internal set; }
    public string BiosName { get; internal set; }
    public string BiosOtherTargetOS { get; internal set; }
    public Nullable`1<bool> BiosPrimaryBIOS { get; internal set; }
    public Nullable`1<DateTime> BiosReleaseDate { get; internal set; }
    public string BiosSerialNumber { get; internal set; }
    public string BiosSMBIOSBIOSVersion { get; internal set; }
    public Nullable`1<ushort> BiosSMBIOSMajorVersion { get; internal set; }
    public Nullable`1<ushort> BiosSMBIOSMinorVersion { get; internal set; }
    public Nullable`1<bool> BiosSMBIOSPresent { get; internal set; }
    public Nullable`1<SoftwareElementState> BiosSoftwareElementState { get; internal set; }
    public string BiosStatus { get; internal set; }
    public Nullable`1<ushort> BiosSystemBiosMajorVersion { get; internal set; }
    public Nullable`1<ushort> BiosSystemBiosMinorVersion { get; internal set; }
    public Nullable`1<ushort> BiosTargetOperatingSystem { get; internal set; }
    public string BiosVersion { get; internal set; }
    public Nullable`1<HardwareSecurity> CsAdminPasswordStatus { get; internal set; }
    public Nullable`1<bool> CsAutomaticManagedPagefile { get; internal set; }
    public Nullable`1<bool> CsAutomaticResetBootOption { get; internal set; }
    public Nullable`1<bool> CsAutomaticResetCapability { get; internal set; }
    public Nullable`1<BootOptionAction> CsBootOptionOnLimit { get; internal set; }
    public Nullable`1<BootOptionAction> CsBootOptionOnWatchDog { get; internal set; }
    public Nullable`1<bool> CsBootROMSupported { get; internal set; }
    public UInt16[] CsBootStatus { get; internal set; }
    public string CsBootupState { get; internal set; }
    public string CsCaption { get; internal set; }
    public Nullable`1<SystemElementState> CsChassisBootupState { get; internal set; }
    public string CsChassisSKUNumber { get; internal set; }
    public Nullable`1<short> CsCurrentTimeZone { get; internal set; }
    public Nullable`1<bool> CsDaylightInEffect { get; internal set; }
    public string CsDescription { get; internal set; }
    public string CsDNSHostName { get; internal set; }
    public string CsDomain { get; internal set; }
    public Nullable`1<DomainRole> CsDomainRole { get; internal set; }
    public Nullable`1<bool> CsEnableDaylightSavingsTime { get; internal set; }
    public Nullable`1<HardwareSecurity> CsFrontPanelResetStatus { get; internal set; }
    public Nullable`1<bool> CsHypervisorPresent { get; internal set; }
    public Nullable`1<bool> CsInfraredSupported { get; internal set; }
    public string CsInitialLoadInfo { get; internal set; }
    public Nullable`1<DateTime> CsInstallDate { get; internal set; }
    public Nullable`1<HardwareSecurity> CsKeyboardPasswordStatus { get; internal set; }
    public string CsLastLoadInfo { get; internal set; }
    public string CsManufacturer { get; internal set; }
    public string CsModel { get; internal set; }
    public string CsName { get; internal set; }
    public NetworkAdapter[] CsNetworkAdapters { get; internal set; }
    public Nullable`1<bool> CsNetworkServerModeEnabled { get; internal set; }
    public Nullable`1<UInt32> CsNumberOfLogicalProcessors { get; internal set; }
    public Nullable`1<UInt32> CsNumberOfProcessors { get; internal set; }
    public Processor[] CsProcessors { get; internal set; }
    public String[] CsOEMStringArray { get; internal set; }
    public Nullable`1<bool> CsPartOfDomain { get; internal set; }
    public Nullable`1<long> CsPauseAfterReset { get; internal set; }
    public Nullable`1<PCSystemType> CsPCSystemType { get; internal set; }
    public Nullable`1<PCSystemTypeEx> CsPCSystemTypeEx { get; internal set; }
    public PowerManagementCapabilities[] CsPowerManagementCapabilities { get; internal set; }
    public Nullable`1<bool> CsPowerManagementSupported { get; internal set; }
    public Nullable`1<HardwareSecurity> CsPowerOnPasswordStatus { get; internal set; }
    public Nullable`1<PowerState> CsPowerState { get; internal set; }
    public Nullable`1<SystemElementState> CsPowerSupplyState { get; internal set; }
    public string CsPrimaryOwnerContact { get; internal set; }
    public string CsPrimaryOwnerName { get; internal set; }
    public Nullable`1<ResetCapability> CsResetCapability { get; internal set; }
    public Nullable`1<short> CsResetCount { get; internal set; }
    public Nullable`1<short> CsResetLimit { get; internal set; }
    public String[] CsRoles { get; internal set; }
    public string CsStatus { get; internal set; }
    public String[] CsSupportContactDescription { get; internal set; }
    public string CsSystemFamily { get; internal set; }
    public string CsSystemSKUNumber { get; internal set; }
    public string CsSystemType { get; internal set; }
    public Nullable`1<SystemElementState> CsThermalState { get; internal set; }
    public Nullable`1<ulong> CsTotalPhysicalMemory { get; internal set; }
    public Nullable`1<ulong> CsPhysicallyInstalledMemory { get; internal set; }
    public string CsUserName { get; internal set; }
    public Nullable`1<WakeUpType> CsWakeUpType { get; internal set; }
    public string CsWorkgroup { get; internal set; }
    public string OsName { get; internal set; }
    public Nullable`1<OSType> OsType { get; internal set; }
    public Nullable`1<OperatingSystemSKU> OsOperatingSystemSKU { get; internal set; }
    public string OsVersion { get; internal set; }
    public string OsCSDVersion { get; internal set; }
    public string OsBuildNumber { get; internal set; }
    public HotFix[] OsHotFixes { get; internal set; }
    public string OsBootDevice { get; internal set; }
    public string OsSystemDevice { get; internal set; }
    public string OsSystemDirectory { get; internal set; }
    public string OsSystemDrive { get; internal set; }
    public string OsWindowsDirectory { get; internal set; }
    public string OsCountryCode { get; internal set; }
    public Nullable`1<short> OsCurrentTimeZone { get; internal set; }
    public string OsLocaleID { get; internal set; }
    public string OsLocale { get; internal set; }
    public Nullable`1<DateTime> OsLocalDateTime { get; internal set; }
    public Nullable`1<DateTime> OsLastBootUpTime { get; internal set; }
    public Nullable`1<TimeSpan> OsUptime { get; internal set; }
    public string OsBuildType { get; internal set; }
    public string OsCodeSet { get; internal set; }
    public Nullable`1<bool> OsDataExecutionPreventionAvailable { get; internal set; }
    public Nullable`1<bool> OsDataExecutionPrevention32BitApplications { get; internal set; }
    public Nullable`1<bool> OsDataExecutionPreventionDrivers { get; internal set; }
    public Nullable`1<DataExecutionPreventionSupportPolicy> OsDataExecutionPreventionSupportPolicy { get; internal set; }
    public Nullable`1<bool> OsDebug { get; internal set; }
    public Nullable`1<bool> OsDistributed { get; internal set; }
    public Nullable`1<OSEncryptionLevel> OsEncryptionLevel { get; internal set; }
    public Nullable`1<ForegroundApplicationBoost> OsForegroundApplicationBoost { get; internal set; }
    public Nullable`1<ulong> OsTotalVisibleMemorySize { get; internal set; }
    public Nullable`1<ulong> OsFreePhysicalMemory { get; internal set; }
    public Nullable`1<ulong> OsTotalVirtualMemorySize { get; internal set; }
    public Nullable`1<ulong> OsFreeVirtualMemory { get; internal set; }
    public Nullable`1<ulong> OsInUseVirtualMemory { get; internal set; }
    public Nullable`1<ulong> OsTotalSwapSpaceSize { get; internal set; }
    public Nullable`1<ulong> OsSizeStoredInPagingFiles { get; internal set; }
    public Nullable`1<ulong> OsFreeSpaceInPagingFiles { get; internal set; }
    public String[] OsPagingFiles { get; internal set; }
    public string OsHardwareAbstractionLayer { get; internal set; }
    public Nullable`1<DateTime> OsInstallDate { get; internal set; }
    public string OsManufacturer { get; internal set; }
    public Nullable`1<UInt32> OsMaxNumberOfProcesses { get; internal set; }
    public Nullable`1<ulong> OsMaxProcessMemorySize { get; internal set; }
    public String[] OsMuiLanguages { get; internal set; }
    public Nullable`1<UInt32> OsNumberOfLicensedUsers { get; internal set; }
    public Nullable`1<UInt32> OsNumberOfProcesses { get; internal set; }
    public Nullable`1<UInt32> OsNumberOfUsers { get; internal set; }
    public string OsOrganization { get; internal set; }
    public string OsArchitecture { get; internal set; }
    public string OsLanguage { get; internal set; }
    public OSProductSuite[] OsProductSuites { get; internal set; }
    public string OsOtherTypeDescription { get; internal set; }
    public Nullable`1<bool> OsPAEEnabled { get; internal set; }
    public Nullable`1<bool> OsPortableOperatingSystem { get; internal set; }
    public Nullable`1<bool> OsPrimary { get; internal set; }
    public Nullable`1<ProductType> OsProductType { get; internal set; }
    public string OsRegisteredUser { get; internal set; }
    public string OsSerialNumber { get; internal set; }
    public Nullable`1<ushort> OsServicePackMajorVersion { get; internal set; }
    public Nullable`1<ushort> OsServicePackMinorVersion { get; internal set; }
    public string OsStatus { get; internal set; }
    public OSProductSuite[] OsSuites { get; internal set; }
    public Nullable`1<ServerLevel> OsServerLevel { get; internal set; }
    public string KeyboardLayout { get; internal set; }
    public string TimeZone { get; internal set; }
    public string LogonServer { get; internal set; }
    public Nullable`1<PowerPlatformRole> PowerPlatformRole { get; internal set; }
    public Nullable`1<bool> HyperVisorPresent { get; internal set; }
    public Nullable`1<bool> HyperVRequirementDataExecutionPreventionAvailable { get; internal set; }
    public Nullable`1<bool> HyperVRequirementSecondLevelAddressTranslation { get; internal set; }
    public Nullable`1<bool> HyperVRequirementVirtualizationFirmwareEnabled { get; internal set; }
    public Nullable`1<bool> HyperVRequirementVMMonitorModeExtensions { get; internal set; }
    public Nullable`1<DeviceGuardSmartStatus> DeviceGuardSmartStatus { get; internal set; }
    public DeviceGuardHardwareSecure[] DeviceGuardRequiredSecurityProperties { get; internal set; }
    public DeviceGuardHardwareSecure[] DeviceGuardAvailableSecurityProperties { get; internal set; }
    public DeviceGuardSoftwareSecure[] DeviceGuardSecurityServicesConfigured { get; internal set; }
    public DeviceGuardSoftwareSecure[] DeviceGuardSecurityServicesRunning { get; internal set; }
    public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> DeviceGuardCodeIntegrityPolicyEnforcementStatus { get; internal set; }
    public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_WindowsBuildLabEx();
    [CompilerGeneratedAttribute]
internal void set_WindowsBuildLabEx(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsCurrentVersion();
    [CompilerGeneratedAttribute]
internal void set_WindowsCurrentVersion(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsEditionId();
    [CompilerGeneratedAttribute]
internal void set_WindowsEditionId(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsInstallationType();
    [CompilerGeneratedAttribute]
internal void set_WindowsInstallationType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_WindowsInstallDateFromRegistry();
    [CompilerGeneratedAttribute]
internal void set_WindowsInstallDateFromRegistry(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_WindowsProductId();
    [CompilerGeneratedAttribute]
internal void set_WindowsProductId(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsProductName();
    [CompilerGeneratedAttribute]
internal void set_WindowsProductName(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsRegisteredOrganization();
    [CompilerGeneratedAttribute]
internal void set_WindowsRegisteredOrganization(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsRegisteredOwner();
    [CompilerGeneratedAttribute]
internal void set_WindowsRegisteredOwner(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsSystemRoot();
    [CompilerGeneratedAttribute]
internal void set_WindowsSystemRoot(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsVersion();
    [CompilerGeneratedAttribute]
internal void set_WindowsVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WindowsUBR();
    [CompilerGeneratedAttribute]
internal void set_WindowsUBR(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public UInt16[] get_BiosCharacteristics();
    [CompilerGeneratedAttribute]
internal void set_BiosCharacteristics(UInt16[] value);
    [CompilerGeneratedAttribute]
public String[] get_BiosBIOSVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosBIOSVersion(String[] value);
    [CompilerGeneratedAttribute]
public string get_BiosBuildNumber();
    [CompilerGeneratedAttribute]
internal void set_BiosBuildNumber(string value);
    [CompilerGeneratedAttribute]
public string get_BiosCaption();
    [CompilerGeneratedAttribute]
internal void set_BiosCaption(string value);
    [CompilerGeneratedAttribute]
public string get_BiosCodeSet();
    [CompilerGeneratedAttribute]
internal void set_BiosCodeSet(string value);
    [CompilerGeneratedAttribute]
public string get_BiosCurrentLanguage();
    [CompilerGeneratedAttribute]
internal void set_BiosCurrentLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_BiosDescription();
    [CompilerGeneratedAttribute]
internal void set_BiosDescription(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_BiosEmbeddedControllerMajorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosEmbeddedControllerMajorVersion(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_BiosEmbeddedControllerMinorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosEmbeddedControllerMinorVersion(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FirmwareType> get_BiosFirmwareType();
    [CompilerGeneratedAttribute]
internal void set_BiosFirmwareType(Nullable`1<FirmwareType> value);
    [CompilerGeneratedAttribute]
public string get_BiosIdentificationCode();
    [CompilerGeneratedAttribute]
internal void set_BiosIdentificationCode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosInstallableLanguages();
    [CompilerGeneratedAttribute]
internal void set_BiosInstallableLanguages(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_BiosInstallDate();
    [CompilerGeneratedAttribute]
internal void set_BiosInstallDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_BiosLanguageEdition();
    [CompilerGeneratedAttribute]
internal void set_BiosLanguageEdition(string value);
    [CompilerGeneratedAttribute]
public String[] get_BiosListOfLanguages();
    [CompilerGeneratedAttribute]
internal void set_BiosListOfLanguages(String[] value);
    [CompilerGeneratedAttribute]
public string get_BiosManufacturer();
    [CompilerGeneratedAttribute]
internal void set_BiosManufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_BiosName();
    [CompilerGeneratedAttribute]
internal void set_BiosName(string value);
    [CompilerGeneratedAttribute]
public string get_BiosOtherTargetOS();
    [CompilerGeneratedAttribute]
internal void set_BiosOtherTargetOS(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BiosPrimaryBIOS();
    [CompilerGeneratedAttribute]
internal void set_BiosPrimaryBIOS(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_BiosReleaseDate();
    [CompilerGeneratedAttribute]
internal void set_BiosReleaseDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_BiosSerialNumber();
    [CompilerGeneratedAttribute]
internal void set_BiosSerialNumber(string value);
    [CompilerGeneratedAttribute]
public string get_BiosSMBIOSBIOSVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosSMBIOSBIOSVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosSMBIOSMajorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosSMBIOSMajorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosSMBIOSMinorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosSMBIOSMinorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BiosSMBIOSPresent();
    [CompilerGeneratedAttribute]
internal void set_BiosSMBIOSPresent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SoftwareElementState> get_BiosSoftwareElementState();
    [CompilerGeneratedAttribute]
internal void set_BiosSoftwareElementState(Nullable`1<SoftwareElementState> value);
    [CompilerGeneratedAttribute]
public string get_BiosStatus();
    [CompilerGeneratedAttribute]
internal void set_BiosStatus(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosSystemBiosMajorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosSystemBiosMajorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosSystemBiosMinorVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosSystemBiosMinorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_BiosTargetOperatingSystem();
    [CompilerGeneratedAttribute]
internal void set_BiosTargetOperatingSystem(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public string get_BiosVersion();
    [CompilerGeneratedAttribute]
internal void set_BiosVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<HardwareSecurity> get_CsAdminPasswordStatus();
    [CompilerGeneratedAttribute]
internal void set_CsAdminPasswordStatus(Nullable`1<HardwareSecurity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsAutomaticManagedPagefile();
    [CompilerGeneratedAttribute]
internal void set_CsAutomaticManagedPagefile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsAutomaticResetBootOption();
    [CompilerGeneratedAttribute]
internal void set_CsAutomaticResetBootOption(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsAutomaticResetCapability();
    [CompilerGeneratedAttribute]
internal void set_CsAutomaticResetCapability(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BootOptionAction> get_CsBootOptionOnLimit();
    [CompilerGeneratedAttribute]
internal void set_CsBootOptionOnLimit(Nullable`1<BootOptionAction> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BootOptionAction> get_CsBootOptionOnWatchDog();
    [CompilerGeneratedAttribute]
internal void set_CsBootOptionOnWatchDog(Nullable`1<BootOptionAction> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsBootROMSupported();
    [CompilerGeneratedAttribute]
internal void set_CsBootROMSupported(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public UInt16[] get_CsBootStatus();
    [CompilerGeneratedAttribute]
internal void set_CsBootStatus(UInt16[] value);
    [CompilerGeneratedAttribute]
public string get_CsBootupState();
    [CompilerGeneratedAttribute]
internal void set_CsBootupState(string value);
    [CompilerGeneratedAttribute]
public string get_CsCaption();
    [CompilerGeneratedAttribute]
internal void set_CsCaption(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SystemElementState> get_CsChassisBootupState();
    [CompilerGeneratedAttribute]
internal void set_CsChassisBootupState(Nullable`1<SystemElementState> value);
    [CompilerGeneratedAttribute]
public string get_CsChassisSKUNumber();
    [CompilerGeneratedAttribute]
internal void set_CsChassisSKUNumber(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_CsCurrentTimeZone();
    [CompilerGeneratedAttribute]
internal void set_CsCurrentTimeZone(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsDaylightInEffect();
    [CompilerGeneratedAttribute]
internal void set_CsDaylightInEffect(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CsDescription();
    [CompilerGeneratedAttribute]
internal void set_CsDescription(string value);
    [CompilerGeneratedAttribute]
public string get_CsDNSHostName();
    [CompilerGeneratedAttribute]
internal void set_CsDNSHostName(string value);
    [CompilerGeneratedAttribute]
public string get_CsDomain();
    [CompilerGeneratedAttribute]
internal void set_CsDomain(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DomainRole> get_CsDomainRole();
    [CompilerGeneratedAttribute]
internal void set_CsDomainRole(Nullable`1<DomainRole> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsEnableDaylightSavingsTime();
    [CompilerGeneratedAttribute]
internal void set_CsEnableDaylightSavingsTime(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HardwareSecurity> get_CsFrontPanelResetStatus();
    [CompilerGeneratedAttribute]
internal void set_CsFrontPanelResetStatus(Nullable`1<HardwareSecurity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsHypervisorPresent();
    [CompilerGeneratedAttribute]
internal void set_CsHypervisorPresent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsInfraredSupported();
    [CompilerGeneratedAttribute]
internal void set_CsInfraredSupported(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CsInitialLoadInfo();
    [CompilerGeneratedAttribute]
internal void set_CsInitialLoadInfo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CsInstallDate();
    [CompilerGeneratedAttribute]
internal void set_CsInstallDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HardwareSecurity> get_CsKeyboardPasswordStatus();
    [CompilerGeneratedAttribute]
internal void set_CsKeyboardPasswordStatus(Nullable`1<HardwareSecurity> value);
    [CompilerGeneratedAttribute]
public string get_CsLastLoadInfo();
    [CompilerGeneratedAttribute]
internal void set_CsLastLoadInfo(string value);
    [CompilerGeneratedAttribute]
public string get_CsManufacturer();
    [CompilerGeneratedAttribute]
internal void set_CsManufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_CsModel();
    [CompilerGeneratedAttribute]
internal void set_CsModel(string value);
    [CompilerGeneratedAttribute]
public string get_CsName();
    [CompilerGeneratedAttribute]
internal void set_CsName(string value);
    [CompilerGeneratedAttribute]
public NetworkAdapter[] get_CsNetworkAdapters();
    [CompilerGeneratedAttribute]
internal void set_CsNetworkAdapters(NetworkAdapter[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsNetworkServerModeEnabled();
    [CompilerGeneratedAttribute]
internal void set_CsNetworkServerModeEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CsNumberOfLogicalProcessors();
    [CompilerGeneratedAttribute]
internal void set_CsNumberOfLogicalProcessors(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CsNumberOfProcessors();
    [CompilerGeneratedAttribute]
internal void set_CsNumberOfProcessors(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Processor[] get_CsProcessors();
    [CompilerGeneratedAttribute]
internal void set_CsProcessors(Processor[] value);
    [CompilerGeneratedAttribute]
public String[] get_CsOEMStringArray();
    [CompilerGeneratedAttribute]
internal void set_CsOEMStringArray(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsPartOfDomain();
    [CompilerGeneratedAttribute]
internal void set_CsPartOfDomain(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CsPauseAfterReset();
    [CompilerGeneratedAttribute]
internal void set_CsPauseAfterReset(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PCSystemType> get_CsPCSystemType();
    [CompilerGeneratedAttribute]
internal void set_CsPCSystemType(Nullable`1<PCSystemType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PCSystemTypeEx> get_CsPCSystemTypeEx();
    [CompilerGeneratedAttribute]
internal void set_CsPCSystemTypeEx(Nullable`1<PCSystemTypeEx> value);
    [CompilerGeneratedAttribute]
public PowerManagementCapabilities[] get_CsPowerManagementCapabilities();
    [CompilerGeneratedAttribute]
internal void set_CsPowerManagementCapabilities(PowerManagementCapabilities[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CsPowerManagementSupported();
    [CompilerGeneratedAttribute]
internal void set_CsPowerManagementSupported(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HardwareSecurity> get_CsPowerOnPasswordStatus();
    [CompilerGeneratedAttribute]
internal void set_CsPowerOnPasswordStatus(Nullable`1<HardwareSecurity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PowerState> get_CsPowerState();
    [CompilerGeneratedAttribute]
internal void set_CsPowerState(Nullable`1<PowerState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SystemElementState> get_CsPowerSupplyState();
    [CompilerGeneratedAttribute]
internal void set_CsPowerSupplyState(Nullable`1<SystemElementState> value);
    [CompilerGeneratedAttribute]
public string get_CsPrimaryOwnerContact();
    [CompilerGeneratedAttribute]
internal void set_CsPrimaryOwnerContact(string value);
    [CompilerGeneratedAttribute]
public string get_CsPrimaryOwnerName();
    [CompilerGeneratedAttribute]
internal void set_CsPrimaryOwnerName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ResetCapability> get_CsResetCapability();
    [CompilerGeneratedAttribute]
internal void set_CsResetCapability(Nullable`1<ResetCapability> value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_CsResetCount();
    [CompilerGeneratedAttribute]
internal void set_CsResetCount(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_CsResetLimit();
    [CompilerGeneratedAttribute]
internal void set_CsResetLimit(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public String[] get_CsRoles();
    [CompilerGeneratedAttribute]
internal void set_CsRoles(String[] value);
    [CompilerGeneratedAttribute]
public string get_CsStatus();
    [CompilerGeneratedAttribute]
internal void set_CsStatus(string value);
    [CompilerGeneratedAttribute]
public String[] get_CsSupportContactDescription();
    [CompilerGeneratedAttribute]
internal void set_CsSupportContactDescription(String[] value);
    [CompilerGeneratedAttribute]
public string get_CsSystemFamily();
    [CompilerGeneratedAttribute]
internal void set_CsSystemFamily(string value);
    [CompilerGeneratedAttribute]
public string get_CsSystemSKUNumber();
    [CompilerGeneratedAttribute]
internal void set_CsSystemSKUNumber(string value);
    [CompilerGeneratedAttribute]
public string get_CsSystemType();
    [CompilerGeneratedAttribute]
internal void set_CsSystemType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SystemElementState> get_CsThermalState();
    [CompilerGeneratedAttribute]
internal void set_CsThermalState(Nullable`1<SystemElementState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_CsTotalPhysicalMemory();
    [CompilerGeneratedAttribute]
internal void set_CsTotalPhysicalMemory(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_CsPhysicallyInstalledMemory();
    [CompilerGeneratedAttribute]
internal void set_CsPhysicallyInstalledMemory(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public string get_CsUserName();
    [CompilerGeneratedAttribute]
internal void set_CsUserName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WakeUpType> get_CsWakeUpType();
    [CompilerGeneratedAttribute]
internal void set_CsWakeUpType(Nullable`1<WakeUpType> value);
    [CompilerGeneratedAttribute]
public string get_CsWorkgroup();
    [CompilerGeneratedAttribute]
internal void set_CsWorkgroup(string value);
    [CompilerGeneratedAttribute]
public string get_OsName();
    [CompilerGeneratedAttribute]
internal void set_OsName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<OSType> get_OsType();
    [CompilerGeneratedAttribute]
internal void set_OsType(Nullable`1<OSType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OperatingSystemSKU> get_OsOperatingSystemSKU();
    [CompilerGeneratedAttribute]
internal void set_OsOperatingSystemSKU(Nullable`1<OperatingSystemSKU> value);
    [CompilerGeneratedAttribute]
public string get_OsVersion();
    [CompilerGeneratedAttribute]
internal void set_OsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_OsCSDVersion();
    [CompilerGeneratedAttribute]
internal void set_OsCSDVersion(string value);
    [CompilerGeneratedAttribute]
public string get_OsBuildNumber();
    [CompilerGeneratedAttribute]
internal void set_OsBuildNumber(string value);
    [CompilerGeneratedAttribute]
public HotFix[] get_OsHotFixes();
    [CompilerGeneratedAttribute]
internal void set_OsHotFixes(HotFix[] value);
    [CompilerGeneratedAttribute]
public string get_OsBootDevice();
    [CompilerGeneratedAttribute]
internal void set_OsBootDevice(string value);
    [CompilerGeneratedAttribute]
public string get_OsSystemDevice();
    [CompilerGeneratedAttribute]
internal void set_OsSystemDevice(string value);
    [CompilerGeneratedAttribute]
public string get_OsSystemDirectory();
    [CompilerGeneratedAttribute]
internal void set_OsSystemDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OsSystemDrive();
    [CompilerGeneratedAttribute]
internal void set_OsSystemDrive(string value);
    [CompilerGeneratedAttribute]
public string get_OsWindowsDirectory();
    [CompilerGeneratedAttribute]
internal void set_OsWindowsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OsCountryCode();
    [CompilerGeneratedAttribute]
internal void set_OsCountryCode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_OsCurrentTimeZone();
    [CompilerGeneratedAttribute]
internal void set_OsCurrentTimeZone(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_OsLocaleID();
    [CompilerGeneratedAttribute]
internal void set_OsLocaleID(string value);
    [CompilerGeneratedAttribute]
public string get_OsLocale();
    [CompilerGeneratedAttribute]
internal void set_OsLocale(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_OsLocalDateTime();
    [CompilerGeneratedAttribute]
internal void set_OsLocalDateTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_OsLastBootUpTime();
    [CompilerGeneratedAttribute]
internal void set_OsLastBootUpTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_OsUptime();
    [CompilerGeneratedAttribute]
internal void set_OsUptime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_OsBuildType();
    [CompilerGeneratedAttribute]
internal void set_OsBuildType(string value);
    [CompilerGeneratedAttribute]
public string get_OsCodeSet();
    [CompilerGeneratedAttribute]
internal void set_OsCodeSet(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsDataExecutionPreventionAvailable();
    [CompilerGeneratedAttribute]
internal void set_OsDataExecutionPreventionAvailable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsDataExecutionPrevention32BitApplications();
    [CompilerGeneratedAttribute]
internal void set_OsDataExecutionPrevention32BitApplications(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsDataExecutionPreventionDrivers();
    [CompilerGeneratedAttribute]
internal void set_OsDataExecutionPreventionDrivers(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DataExecutionPreventionSupportPolicy> get_OsDataExecutionPreventionSupportPolicy();
    [CompilerGeneratedAttribute]
internal void set_OsDataExecutionPreventionSupportPolicy(Nullable`1<DataExecutionPreventionSupportPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsDebug();
    [CompilerGeneratedAttribute]
internal void set_OsDebug(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsDistributed();
    [CompilerGeneratedAttribute]
internal void set_OsDistributed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OSEncryptionLevel> get_OsEncryptionLevel();
    [CompilerGeneratedAttribute]
internal void set_OsEncryptionLevel(Nullable`1<OSEncryptionLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForegroundApplicationBoost> get_OsForegroundApplicationBoost();
    [CompilerGeneratedAttribute]
internal void set_OsForegroundApplicationBoost(Nullable`1<ForegroundApplicationBoost> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsTotalVisibleMemorySize();
    [CompilerGeneratedAttribute]
internal void set_OsTotalVisibleMemorySize(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsFreePhysicalMemory();
    [CompilerGeneratedAttribute]
internal void set_OsFreePhysicalMemory(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsTotalVirtualMemorySize();
    [CompilerGeneratedAttribute]
internal void set_OsTotalVirtualMemorySize(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsFreeVirtualMemory();
    [CompilerGeneratedAttribute]
internal void set_OsFreeVirtualMemory(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsInUseVirtualMemory();
    [CompilerGeneratedAttribute]
internal void set_OsInUseVirtualMemory(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsTotalSwapSpaceSize();
    [CompilerGeneratedAttribute]
internal void set_OsTotalSwapSpaceSize(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsSizeStoredInPagingFiles();
    [CompilerGeneratedAttribute]
internal void set_OsSizeStoredInPagingFiles(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsFreeSpaceInPagingFiles();
    [CompilerGeneratedAttribute]
internal void set_OsFreeSpaceInPagingFiles(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public String[] get_OsPagingFiles();
    [CompilerGeneratedAttribute]
internal void set_OsPagingFiles(String[] value);
    [CompilerGeneratedAttribute]
public string get_OsHardwareAbstractionLayer();
    [CompilerGeneratedAttribute]
internal void set_OsHardwareAbstractionLayer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_OsInstallDate();
    [CompilerGeneratedAttribute]
internal void set_OsInstallDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_OsManufacturer();
    [CompilerGeneratedAttribute]
internal void set_OsManufacturer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OsMaxNumberOfProcesses();
    [CompilerGeneratedAttribute]
internal void set_OsMaxNumberOfProcesses(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_OsMaxProcessMemorySize();
    [CompilerGeneratedAttribute]
internal void set_OsMaxProcessMemorySize(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public String[] get_OsMuiLanguages();
    [CompilerGeneratedAttribute]
internal void set_OsMuiLanguages(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OsNumberOfLicensedUsers();
    [CompilerGeneratedAttribute]
internal void set_OsNumberOfLicensedUsers(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OsNumberOfProcesses();
    [CompilerGeneratedAttribute]
internal void set_OsNumberOfProcesses(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OsNumberOfUsers();
    [CompilerGeneratedAttribute]
internal void set_OsNumberOfUsers(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_OsOrganization();
    [CompilerGeneratedAttribute]
internal void set_OsOrganization(string value);
    [CompilerGeneratedAttribute]
public string get_OsArchitecture();
    [CompilerGeneratedAttribute]
internal void set_OsArchitecture(string value);
    [CompilerGeneratedAttribute]
public string get_OsLanguage();
    [CompilerGeneratedAttribute]
internal void set_OsLanguage(string value);
    [CompilerGeneratedAttribute]
public OSProductSuite[] get_OsProductSuites();
    [CompilerGeneratedAttribute]
internal void set_OsProductSuites(OSProductSuite[] value);
    [CompilerGeneratedAttribute]
public string get_OsOtherTypeDescription();
    [CompilerGeneratedAttribute]
internal void set_OsOtherTypeDescription(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsPAEEnabled();
    [CompilerGeneratedAttribute]
internal void set_OsPAEEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsPortableOperatingSystem();
    [CompilerGeneratedAttribute]
internal void set_OsPortableOperatingSystem(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OsPrimary();
    [CompilerGeneratedAttribute]
internal void set_OsPrimary(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProductType> get_OsProductType();
    [CompilerGeneratedAttribute]
internal void set_OsProductType(Nullable`1<ProductType> value);
    [CompilerGeneratedAttribute]
public string get_OsRegisteredUser();
    [CompilerGeneratedAttribute]
internal void set_OsRegisteredUser(string value);
    [CompilerGeneratedAttribute]
public string get_OsSerialNumber();
    [CompilerGeneratedAttribute]
internal void set_OsSerialNumber(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_OsServicePackMajorVersion();
    [CompilerGeneratedAttribute]
internal void set_OsServicePackMajorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_OsServicePackMinorVersion();
    [CompilerGeneratedAttribute]
internal void set_OsServicePackMinorVersion(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public string get_OsStatus();
    [CompilerGeneratedAttribute]
internal void set_OsStatus(string value);
    [CompilerGeneratedAttribute]
public OSProductSuite[] get_OsSuites();
    [CompilerGeneratedAttribute]
internal void set_OsSuites(OSProductSuite[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<ServerLevel> get_OsServerLevel();
    [CompilerGeneratedAttribute]
internal void set_OsServerLevel(Nullable`1<ServerLevel> value);
    [CompilerGeneratedAttribute]
public string get_KeyboardLayout();
    [CompilerGeneratedAttribute]
internal void set_KeyboardLayout(string value);
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
internal void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public string get_LogonServer();
    [CompilerGeneratedAttribute]
internal void set_LogonServer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PowerPlatformRole> get_PowerPlatformRole();
    [CompilerGeneratedAttribute]
internal void set_PowerPlatformRole(Nullable`1<PowerPlatformRole> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HyperVisorPresent();
    [CompilerGeneratedAttribute]
internal void set_HyperVisorPresent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HyperVRequirementDataExecutionPreventionAvailable();
    [CompilerGeneratedAttribute]
internal void set_HyperVRequirementDataExecutionPreventionAvailable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HyperVRequirementSecondLevelAddressTranslation();
    [CompilerGeneratedAttribute]
internal void set_HyperVRequirementSecondLevelAddressTranslation(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HyperVRequirementVirtualizationFirmwareEnabled();
    [CompilerGeneratedAttribute]
internal void set_HyperVRequirementVirtualizationFirmwareEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HyperVRequirementVMMonitorModeExtensions();
    [CompilerGeneratedAttribute]
internal void set_HyperVRequirementVMMonitorModeExtensions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceGuardSmartStatus> get_DeviceGuardSmartStatus();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardSmartStatus(Nullable`1<DeviceGuardSmartStatus> value);
    [CompilerGeneratedAttribute]
public DeviceGuardHardwareSecure[] get_DeviceGuardRequiredSecurityProperties();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardRequiredSecurityProperties(DeviceGuardHardwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardHardwareSecure[] get_DeviceGuardAvailableSecurityProperties();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardAvailableSecurityProperties(DeviceGuardHardwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardSoftwareSecure[] get_DeviceGuardSecurityServicesConfigured();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardSecurityServicesConfigured(DeviceGuardSoftwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardSoftwareSecure[] get_DeviceGuardSecurityServicesRunning();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardSecurityServicesRunning(DeviceGuardSoftwareSecure[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> get_DeviceGuardCodeIntegrityPolicyEnforcementStatus();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardCodeIntegrityPolicyEnforcementStatus(Nullable`1<DeviceGuardConfigCodeIntegrityStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> get_DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus();
    [CompilerGeneratedAttribute]
internal void set_DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus(Nullable`1<DeviceGuardConfigCodeIntegrityStatus> value);
}
internal static class Microsoft.PowerShell.Commands.ComputerWMIHelper : object {
    internal static int NetBIOSNameMaxLength;
    internal static string WMI_Class_SystemRestore;
    internal static string WMI_Class_OperatingSystem;
    internal static string WMI_Class_Service;
    internal static string WMI_Class_ComputerSystem;
    internal static string WMI_Class_PingStatus;
    internal static string WMI_Path_CIM;
    internal static string WMI_Path_Default;
    internal static int ErrorCode_Interface;
    internal static int ErrorCode_Service;
    internal static string SE_SHUTDOWN_NAME;
    internal static string SE_REMOTE_SHUTDOWN_NAME;
    internal static string CimUriPrefix;
    internal static string CimOperatingSystemNamespace;
    internal static string CimOperatingSystemShutdownMethod;
    internal static string CimQueryDialect;
    internal static string localhostStr;
    internal static string GetLocalAdminUserName(string computerName, PSCredential psLocalCredential);
    internal static string GetRandomPassword(int passwordLength);
    internal static string GetScopeString(string computer, string namespaceParameter);
    internal static bool IsValidDrive(string drive);
    internal static bool ContainsSystemDrive(String[] drives, string sysdrive);
    internal static string GetMachineNames(String[] computerNames);
    internal static ComputerChangeInfo GetComputerStatusObject(int errorcode, string computername);
    internal static RenameComputerChangeInfo GetRenameComputerStatusObject(int errorcode, string newcomputername, string oldcomputername);
    internal static void WriteNonTerminatingError(int errorcode, PSCmdlet cmdlet, string computername);
    internal static bool IsComputerNameValid(string computerName);
    internal static bool SkipSystemRestoreOperationForARMPlatform(PSCmdlet cmdlet);
    internal static bool InvokeWin32ShutdownUsingWsman(PSCmdlet cmdlet, bool isLocalhost, string computerName, Object[] flags, PSCredential credential, string authentication, string formatErrorMessage, string ErrorFQEID, CancellationToken cancelToken);
    internal static string ValidateComputerName(string nameToCheck, string shortLocalMachineName, string fullLocalMachineName, ErrorRecord& error);
}
public class Microsoft.PowerShell.Commands.ContentCommandBase : CoreCommandWithCredentialsBase {
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    internal List`1<ContentHolder> contentStreams;
    private ContentPathsCache _currentContentItem;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal void WriteContentObject(object content, long readCount, PathInfo pathInfo, CmdletProviderContext context);
    internal void CloseContent(List`1<ContentHolder> contentHolders, bool disposing);
    internal virtual bool CallShouldProcess(string path);
    internal List`1<ContentHolder> GetContentReaders(String[] readerPaths, CmdletProviderContext currentCommandContext);
    internal Collection`1<PathInfo> ResolvePaths(String[] pathsToResolve, bool allowNonexistingPaths, bool allowEmptyResult, CmdletProviderContext currentCommandContext);
    internal void Dispose(bool isDisposing);
    public sealed virtual void Dispose();
}
internal static class Microsoft.PowerShell.Commands.Conversion : object {
    internal static bool TryParseHex(string hexString, UInt32& value);
    internal static string GetLocaleName(string locale);
    internal static DateTime UnixSecondsToDateTime(long seconds);
}
[CmdletAttribute("Convert", "Path")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ConvertPathCommand : CoreCommandBase {
    private String[] _paths;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Copy", "Item")]
public class Microsoft.PowerShell.Commands.CopyItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    private String[] _paths;
    private bool _container;
    private bool _containerSpecified;
    private bool _recurse;
    private bool _passThrough;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    [ParameterAttribute]
public SwitchParameter Container { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    public SwitchParameter get_Container();
    public void set_Container(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Copy", "ItemProperty")]
public class Microsoft.PowerShell.Commands.CopyItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.CoreCommandBase : PSCmdlet {
    [TraceSourceAttribute("NavigationCommands", "The namespace navigation tracer")]
internal static PSTraceSource tracer;
    private bool _suppressWildcardExpansion;
    private object _dynamicParameters;
    internal Collection`1<CmdletProviderContext> stopContextCollection;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Exclude>k__BackingField;
    private bool _force;
    internal CmdletProviderContext CmdletProviderContext { get; }
    internal SwitchParameter SuppressWildcardExpansion { get; internal set; }
    protected bool ProviderSupportsShouldProcess { get; }
    protected internal object RetrievedDynamicParameters { get; }
    public string Filter { get; public set; }
    public String[] Include { get; public set; }
    public String[] Exclude { get; public set; }
    public SwitchParameter Force { get; public set; }
    public bool SupportsShouldProcess { get; }
    private static CoreCommandBase();
    internal virtual CmdletProviderContext get_CmdletProviderContext();
    internal virtual SwitchParameter get_SuppressWildcardExpansion();
    internal virtual void set_SuppressWildcardExpansion(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected bool DoesProviderSupportShouldProcess(String[] paths);
    protected internal object get_RetrievedDynamicParameters();
    protected virtual void StopProcessing();
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Include();
    [CompilerGeneratedAttribute]
public virtual void set_Include(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Exclude();
    [CompilerGeneratedAttribute]
public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public sealed virtual object GetDynamicParameters();
    public bool get_SupportsShouldProcess();
}
public class Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase : CoreCommandBase {
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    internal CmdletProviderContext CmdletProviderContext { get; }
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    internal virtual CmdletProviderContext get_CmdletProviderContext();
}
public enum Microsoft.PowerShell.Commands.CpuArchitecture : Enum {
    public int value__;
    public static CpuArchitecture x86;
    public static CpuArchitecture MIPs;
    public static CpuArchitecture Alpha;
    public static CpuArchitecture PowerPC;
    public static CpuArchitecture ARM;
    public static CpuArchitecture ia64;
    public static CpuArchitecture x64;
}
public enum Microsoft.PowerShell.Commands.CpuAvailability : Enum {
    public int value__;
    public static CpuAvailability Other;
    public static CpuAvailability Unknown;
    public static CpuAvailability RunningOrFullPower;
    public static CpuAvailability Warning;
    public static CpuAvailability InTest;
    public static CpuAvailability NotApplicable;
    public static CpuAvailability PowerOff;
    public static CpuAvailability OffLine;
    public static CpuAvailability OffDuty;
    public static CpuAvailability Degraded;
    public static CpuAvailability NotInstalled;
    public static CpuAvailability InstallError;
    public static CpuAvailability PowerSaveUnknown;
    public static CpuAvailability PowerSaveLowPowerMode;
    public static CpuAvailability PowerSaveStandby;
    public static CpuAvailability PowerCycle;
    public static CpuAvailability PowerSaveWarning;
    public static CpuAvailability Paused;
    public static CpuAvailability NotReady;
    public static CpuAvailability NotConfigured;
    public static CpuAvailability Quiesced;
}
public enum Microsoft.PowerShell.Commands.CpuStatus : Enum {
    public int value__;
    public static CpuStatus Unknown;
    public static CpuStatus Enabled;
    public static CpuStatus DisabledByUser;
    public static CpuStatus DisabledByBIOS;
    public static CpuStatus Idle;
    public static CpuStatus Other;
}
public enum Microsoft.PowerShell.Commands.DataExecutionPreventionSupportPolicy : Enum {
    public int value__;
    public static DataExecutionPreventionSupportPolicy AlwaysOff;
    public static DataExecutionPreventionSupportPolicy AlwaysOn;
    public static DataExecutionPreventionSupportPolicy OptIn;
    public static DataExecutionPreventionSupportPolicy OptOut;
}
[CmdletAttribute("Debug", "Process")]
public class Microsoft.PowerShell.Commands.DebugProcessCommand : ProcessBaseCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    protected virtual void ProcessRecord();
    private void AttachDebuggerToProcess(Process process);
    private static string MapReturnCodeToErrorMessage(int returnCode);
}
public class Microsoft.PowerShell.Commands.DeviceGuard : object {
    [CompilerGeneratedAttribute]
private DeviceGuardHardwareSecure[] <RequiredSecurityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardHardwareSecure[] <AvailableSecurityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardSoftwareSecure[] <SecurityServicesConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceGuardSoftwareSecure[] <SecurityServicesRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceGuardConfigCodeIntegrityStatus> <CodeIntegrityPolicyEnforcementStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceGuardConfigCodeIntegrityStatus> <UserModeCodeIntegrityPolicyEnforcementStatus>k__BackingField;
    public DeviceGuardHardwareSecure[] RequiredSecurityProperties { get; internal set; }
    public DeviceGuardHardwareSecure[] AvailableSecurityProperties { get; internal set; }
    public DeviceGuardSoftwareSecure[] SecurityServicesConfigured { get; internal set; }
    public DeviceGuardSoftwareSecure[] SecurityServicesRunning { get; internal set; }
    public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> CodeIntegrityPolicyEnforcementStatus { get; internal set; }
    public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> UserModeCodeIntegrityPolicyEnforcementStatus { get; internal set; }
    [CompilerGeneratedAttribute]
public DeviceGuardHardwareSecure[] get_RequiredSecurityProperties();
    [CompilerGeneratedAttribute]
internal void set_RequiredSecurityProperties(DeviceGuardHardwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardHardwareSecure[] get_AvailableSecurityProperties();
    [CompilerGeneratedAttribute]
internal void set_AvailableSecurityProperties(DeviceGuardHardwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardSoftwareSecure[] get_SecurityServicesConfigured();
    [CompilerGeneratedAttribute]
internal void set_SecurityServicesConfigured(DeviceGuardSoftwareSecure[] value);
    [CompilerGeneratedAttribute]
public DeviceGuardSoftwareSecure[] get_SecurityServicesRunning();
    [CompilerGeneratedAttribute]
internal void set_SecurityServicesRunning(DeviceGuardSoftwareSecure[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> get_CodeIntegrityPolicyEnforcementStatus();
    [CompilerGeneratedAttribute]
internal void set_CodeIntegrityPolicyEnforcementStatus(Nullable`1<DeviceGuardConfigCodeIntegrityStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceGuardConfigCodeIntegrityStatus> get_UserModeCodeIntegrityPolicyEnforcementStatus();
    [CompilerGeneratedAttribute]
internal void set_UserModeCodeIntegrityPolicyEnforcementStatus(Nullable`1<DeviceGuardConfigCodeIntegrityStatus> value);
}
public enum Microsoft.PowerShell.Commands.DeviceGuardConfigCodeIntegrityStatus : Enum {
    public int value__;
    public static DeviceGuardConfigCodeIntegrityStatus Off;
    public static DeviceGuardConfigCodeIntegrityStatus AuditMode;
    public static DeviceGuardConfigCodeIntegrityStatus EnforcementMode;
}
public enum Microsoft.PowerShell.Commands.DeviceGuardHardwareSecure : Enum {
    public int value__;
    public static DeviceGuardHardwareSecure BaseVirtualizationSupport;
    public static DeviceGuardHardwareSecure SecureBoot;
    public static DeviceGuardHardwareSecure DMAProtection;
    public static DeviceGuardHardwareSecure SecureMemoryOverwrite;
    public static DeviceGuardHardwareSecure UEFICodeReadonly;
    public static DeviceGuardHardwareSecure SMMSecurityMitigations;
    public static DeviceGuardHardwareSecure ModeBasedExecutionControl;
}
public enum Microsoft.PowerShell.Commands.DeviceGuardSmartStatus : Enum {
    public int value__;
    public static DeviceGuardSmartStatus Off;
    public static DeviceGuardSmartStatus Configured;
    public static DeviceGuardSmartStatus Running;
}
public enum Microsoft.PowerShell.Commands.DeviceGuardSoftwareSecure : Enum {
    public int value__;
    public static DeviceGuardSoftwareSecure CredentialGuard;
    public static DeviceGuardSoftwareSecure HypervisorEnforcedCodeIntegrity;
}
public enum Microsoft.PowerShell.Commands.DomainRole : Enum {
    public int value__;
    public static DomainRole StandaloneWorkstation;
    public static DomainRole MemberWorkstation;
    public static DomainRole StandaloneServer;
    public static DomainRole MemberServer;
    public static DomainRole BackupDomainController;
    public static DomainRole PrimaryDomainController;
}
public class Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase : CoreCommandBase {
    internal List`1<PSDriveInfo> GetMatchingDrives(string driveName, String[] providerNames, string scope);
}
internal static class Microsoft.PowerShell.Commands.EnumConverter`1 : object {
    private static Func`2<int, Nullable`1<T>> s_convert;
    private static EnumConverter`1();
    internal static Nullable`1<T> Convert(Nullable`1<int> value);
    internal static Func`2<int, Nullable`1<T>> MakeConverter();
}
public enum Microsoft.PowerShell.Commands.FirmwareType : Enum {
    public int value__;
    public static FirmwareType Unknown;
    public static FirmwareType Bios;
    public static FirmwareType Uefi;
    public static FirmwareType Max;
}
public enum Microsoft.PowerShell.Commands.ForegroundApplicationBoost : Enum {
    public int value__;
    public static ForegroundApplicationBoost None;
    public static ForegroundApplicationBoost Minimum;
    public static ForegroundApplicationBoost Maximum;
}
public enum Microsoft.PowerShell.Commands.FrontPanelResetStatus : Enum {
    public int value__;
    public static FrontPanelResetStatus Disabled;
    public static FrontPanelResetStatus Enabled;
    public static FrontPanelResetStatus NotImplemented;
    public static FrontPanelResetStatus Unknown;
}
[CmdletAttribute("Get", "ChildItem")]
public class Microsoft.PowerShell.Commands.GetChildItemCommand : CoreCommandBase {
    private static string childrenSet;
    private static string literalChildrenSet;
    private String[] _paths;
    private bool _recurse;
    private UInt32 _depth;
    private bool _childNames;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public UInt32 Depth { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public UInt32 get_Depth();
    public void set_Depth(UInt32 value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_Name();
    public void set_Name(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Clipboard")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.GetClipboardCommand : PSCmdlet {
    private bool _raw;
    [ParameterAttribute]
public SwitchParameter Raw { get; public set; }
    public SwitchParameter get_Raw();
    public void set_Raw(SwitchParameter value);
    protected virtual void BeginProcessing();
    private List`1<string> GetClipboardContentAsText();
}
[CmdletAttribute("Get", "ComputerInfo")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetComputerInfoCommand : PSCmdlet {
    private static string activity;
    private static string localMachineName;
    private string _machineName;
    private List`1<string> _namedProperties;
    [CompilerGeneratedAttribute]
private String[] <Property>k__BackingField;
    [ParameterAttribute]
public String[] Property { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void UpdateProgress(string status);
    private static string GetHalVersion(CimSession session, string systemDirectory);
    private static NetworkAdapter[] GetNetworkAdapters(CimSession session);
    private static Processor[] GetProcessors(CimSession session);
    private static bool CheckDeviceGuardLicense();
    private static DeviceGuardInfo GetDeviceGuard(CimSession session);
    private static Nullable`1<bool> GetBooleanProperty(CimInstance instance, string propertyName);
    private static HyperVInfo GetHyperVisorInfo(CimSession session);
    private static MiscInfoGroup GetOtherInfo(CimSession session);
    private static Nullable`1<FirmwareType> GetFirmwareType();
    private static Nullable`1<ulong> GetPhysicallyInstalledSystemMemory();
    private static ComputerInfo CreateFullOutputObject(SystemInfoGroup systemInfo, OSInfoGroup osInfo, MiscInfoGroup otherInfo);
    private static PSObject CreateCustomOutputObject(ComputerInfo info, List`1<string> namedProperties);
    private static List`1<string> GetComputerInfoPropertyNames();
    private static List`1<string> ExpandWildcardPropertyNames(List`1<string> propertyNames, string pattern);
    private static List`1<string> CollectPropertyNames(String[] requestedProperties);
}
[CmdletAttribute("Get", "Content")]
public class Microsoft.PowerShell.Commands.GetContentCommand : ContentCommandBase {
    [CompilerGeneratedAttribute]
private long <ReadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Tail>k__BackingField;
    [ParameterAttribute]
public long ReadCount { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public long TotalCount { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Tail { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ReadCount();
    [CompilerGeneratedAttribute]
public void set_ReadCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public int get_Tail();
    [CompilerGeneratedAttribute]
public void set_Tail(int value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
    private bool ScanForwardsForTail(ContentHolder& holder, CmdletProviderContext currentContext);
    private bool SeekPositionForTail(IContentReader reader);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "HotFix")]
[OutputTypeAttribute("System.Management.ManagementObject#root\cimv2\Win32_QuickFixEngineering")]
public class Microsoft.PowerShell.Commands.GetHotFixCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    private ManagementObjectSearcher _searchProcess;
    private bool _inputContainsWildcard;
    private ConnectionOptions _connectionOptions;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Id { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Description { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSCredential Credential { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    private bool FilterMatch(ManagementObject obj);
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
[CmdletAttribute("Get", "Item")]
public class Microsoft.PowerShell.Commands.GetItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private String[] _paths;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "ItemProperty")]
public class Microsoft.PowerShell.Commands.GetItemPropertyCommand : ItemPropertyCommandBase {
    private String[] _property;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "ItemPropertyValue")]
public class Microsoft.PowerShell.Commands.GetItemPropertyValueCommand : ItemPropertyCommandBase {
    private String[] _property;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Location")]
[OutputTypeAttribute("System.Management.Automation.PathInfo")]
[OutputTypeAttribute("System.Management.Automation.PathInfoStack")]
public class Microsoft.PowerShell.Commands.GetLocationCommand : DriveMatchingCoreCommandBase {
    private static string LocationParameterSet;
    private static string StackParameterSet;
    [CompilerGeneratedAttribute]
private String[] <PSDrive>k__BackingField;
    private bool _stackSwitch;
    private String[] _provider;
    private String[] _stackNames;
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    [ParameterAttribute]
public String[] PSDrive { get; public set; }
    [ParameterAttribute]
public SwitchParameter Stack { get; public set; }
    [ParameterAttribute]
public String[] StackName { get; public set; }
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PSDrive();
    [CompilerGeneratedAttribute]
public void set_PSDrive(String[] value);
    public SwitchParameter get_Stack();
    public void set_Stack(SwitchParameter value);
    public String[] get_StackName();
    public void set_StackName(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Process")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetProcessCommand : ProcessBaseCommand {
    private static string NameParameterSet;
    private static string IdParameterSet;
    private static string InputObjectParameterSet;
    private static string NameWithUserNameParameterSet;
    private static string IdWithUserNameParameterSet;
    private static string InputObjectWithUserNameParameterSet;
    [CompilerGeneratedAttribute]
private SwitchParameter <IncludeUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <FileVersionInfo>k__BackingField;
    private static string TypeNameForProcessWithUserName;
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Process[] InputObject { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IncludeUserName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public SwitchParameter Module { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullAttribute]
public SwitchParameter FileVersionInfo { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public virtual Process[] get_InputObject();
    public virtual void set_InputObject(Process[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeUserName();
    [CompilerGeneratedAttribute]
public void set_IncludeUserName(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_FileVersionInfo();
    [CompilerGeneratedAttribute]
public void set_FileVersionInfo(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private static PSObject AddUserNameToProcess(Process process);
    private static string RetrieveProcessUserName(Process process);
}
[CmdletAttribute("Get", "PSDrive")]
[OutputTypeAttribute("System.Management.Automation.PSDriveInfo")]
public class Microsoft.PowerShell.Commands.GetPSDriveCommand : DriveMatchingCoreCommandBase {
    private static string NameParameterSet;
    private static string LiteralNameParameterSet;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private String[] _name;
    private String[] _provider;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] LiteralName { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_LiteralName();
    public void set_LiteralName(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "PSProvider")]
[OutputTypeAttribute("System.Management.Automation.ProviderInfo")]
public class Microsoft.PowerShell.Commands.GetPSProviderCommand : CoreCommandBase {
    private String[] _provider;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] PSProvider { get; public set; }
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.GetServiceCommand : MultipleServiceCommandBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <DependentServices>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <RequiredServices>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter DependentServices { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter RequiredServices { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_DependentServices();
    [CompilerGeneratedAttribute]
public void set_DependentServices(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_RequiredServices();
    [CompilerGeneratedAttribute]
public void set_RequiredServices(SwitchParameter value);
    protected virtual void ProcessRecord();
    private PSObject AddProperties(ServiceController service);
}
[CmdletAttribute("Get", "TimeZone")]
[OutputTypeAttribute("System.TimeZoneInfo")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetTimeZoneCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <ListAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [ParameterAttribute]
public String[] Id { get; public set; }
    [ParameterAttribute]
public SwitchParameter ListAvailable { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ListAvailable();
    [CompilerGeneratedAttribute]
public void set_ListAvailable(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.HardwareSecurity : Enum {
    public int value__;
    public static HardwareSecurity Disabled;
    public static HardwareSecurity Enabled;
    public static HardwareSecurity NotImplemented;
    public static HardwareSecurity Unknown;
}
public class Microsoft.PowerShell.Commands.HotFix : object {
    [CompilerGeneratedAttribute]
private string <HotFixID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FixComments>k__BackingField;
    public string HotFixID { get; internal set; }
    public string Description { get; internal set; }
    public string InstalledOn { get; internal set; }
    public string FixComments { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_HotFixID();
    [CompilerGeneratedAttribute]
internal void set_HotFixID(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_InstalledOn();
    [CompilerGeneratedAttribute]
internal void set_InstalledOn(string value);
    [CompilerGeneratedAttribute]
public string get_FixComments();
    [CompilerGeneratedAttribute]
internal void set_FixComments(string value);
}
internal static class Microsoft.PowerShell.Commands.Internal.Clipboard : object {
    private static Nullable`1<bool> _clipboardSupported;
    private static string _internalClipboard;
    private static UInt32 GMEM_MOVEABLE;
    private static UInt32 GMEM_ZEROINIT;
    private static UInt32 GHND;
    private static UInt32 CF_TEXT;
    private static UInt32 CF_UNICODETEXT;
    private static UInt32 s_CF_RTF;
    private static string StartProcess(string tool, string args, string stdin, bool readStdout);
    public static string GetText();
    public static void SetText(string text);
    public static void SetRtf(string plainText, string rtfText);
    [LibraryImportAttribute("kernel32.dll")]
private static IntPtr GlobalAlloc(UInt32 flags, UIntPtr dwBytes);
    [LibraryImportAttribute("kernel32.dll")]
private static IntPtr GlobalFree(IntPtr hMem);
    [LibraryImportAttribute("kernel32.dll")]
private static IntPtr GlobalLock(IntPtr hMem);
    [LibraryImportAttribute("kernel32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static bool GlobalUnlock(IntPtr hMem);
    [LibraryImportAttribute("kernel32.dll")]
private static void CopyMemory(IntPtr dest, IntPtr src, UInt32 count);
    [LibraryImportAttribute("user32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static bool IsClipboardFormatAvailable(UInt32 format);
    [LibraryImportAttribute("user32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static bool OpenClipboard(IntPtr hWndNewOwner);
    [LibraryImportAttribute("user32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static bool CloseClipboard();
    [LibraryImportAttribute("user32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static bool EmptyClipboard();
    [LibraryImportAttribute("user32.dll")]
private static IntPtr GetClipboardData(UInt32 format);
    [LibraryImportAttribute("user32.dll")]
private static IntPtr SetClipboardData(UInt32 format, IntPtr data);
    [LibraryImportAttribute("user32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
private static UInt32 RegisterClipboardFormat(string lpszFormat);
    private static bool GetTextImpl(String& text);
    private static bool SetClipboardData(Tuple`2[] data);
    private static bool SetSingleClipboardData(string text, UInt32 format);
    private static void ExecuteOnStaThread(Func`1<bool> action);
    [CompilerGeneratedAttribute]
internal static int <GlobalUnlock>g____PInvoke|12_0(IntPtr __hMem_native);
    [CompilerGeneratedAttribute]
internal static int <IsClipboardFormatAvailable>g____PInvoke|14_0(UInt32 __format_native);
    [CompilerGeneratedAttribute]
internal static int <OpenClipboard>g____PInvoke|15_0(IntPtr __hWndNewOwner_native);
    [CompilerGeneratedAttribute]
internal static int <CloseClipboard>g____PInvoke|16_0();
    [CompilerGeneratedAttribute]
internal static int <EmptyClipboard>g____PInvoke|17_0();
    [CompilerGeneratedAttribute]
internal static UInt32 <RegisterClipboardFormat>g____PInvoke|20_0(UInt16* __lpszFormat_native);
}
[CmdletAttribute("Invoke", "Item")]
public class Microsoft.PowerShell.Commands.InvokeItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private String[] _paths;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ItemPropertyCommandBase : CoreCommandWithCredentialsBase {
    internal String[] paths;
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
}
internal class Microsoft.PowerShell.Commands.JOBOBJECT_BASIC_PROCESS_ID_LIST : ValueType {
    public UInt32 NumberOfAssignedProcess;
    public UInt32 NumberOfProcessIdsInList;
    public IntPtr ProcessIdList;
}
[CmdletAttribute("Join", "Path")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.JoinPathCommand : CoreCommandWithCredentialsBase {
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalChildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Resolve>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
public string ChildPath { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
[AllowEmptyCollectionAttribute]
public String[] AdditionalChildPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public string get_ChildPath();
    [CompilerGeneratedAttribute]
public void set_ChildPath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalChildPath();
    [CompilerGeneratedAttribute]
public void set_AdditionalChildPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Move", "Item")]
public class Microsoft.PowerShell.Commands.MoveItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    private String[] _paths;
    private bool _passThrough;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    private Collection`1<PathInfo> GetResolvedPaths(string path);
    protected virtual void ProcessRecord();
    private void MoveItem(string path, bool literalPath);
}
[CmdletAttribute("Move", "ItemProperty")]
public class Microsoft.PowerShell.Commands.MoveItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    private String[] _property;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.MultipleServiceCommandBase : ServiceBaseCommand {
    internal SelectionMode selectionMode;
    internal String[] serviceNames;
    internal String[] displayNames;
    internal String[] include;
    internal String[] exclude;
    private ServiceController[] _inputObject;
    private ServiceController[] _allServices;
    [ParameterAttribute]
public String[] DisplayName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ServiceController[] InputObject { get; public set; }
    internal ServiceController[] AllServices { get; }
    public String[] get_DisplayName();
    public void set_DisplayName(String[] value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    public ServiceController[] get_InputObject();
    public void set_InputObject(ServiceController[] value);
    internal ServiceController[] get_AllServices();
    internal ServiceController GetOneService(string nameOfService);
    internal List`1<ServiceController> MatchingServices();
    private static int ServiceComparison(ServiceController x, ServiceController y);
    private List`1<ServiceController> MatchingServicesByServiceName();
    private List`1<ServiceController> MatchingServicesByDisplayName();
    private List`1<ServiceController> MatchingServicesByInput();
    private void IncludeExcludeAdd(List`1<ServiceController> list, ServiceController service, bool checkDuplicates);
    private bool Matches(ServiceController service, String[] matchList);
}
internal static class Microsoft.PowerShell.Commands.Native : object {
    public static int LOCALE_NAME_MAX_LENGTH;
    public static UInt32 POWER_PLATFORM_ROLE_V1;
    public static UInt32 POWER_PLATFORM_ROLE_V2;
    public static UInt32 S_OK;
    [LibraryImportAttribute("api-ms-win-power-base-l1-1-0.dll")]
public static UInt32 PowerDeterminePlatformRoleEx(UInt32 version);
    [LibraryImportAttribute("api-ms-win-core-sysinfo-l1-2-1.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
public static bool GetPhysicallyInstalledSystemMemory(UInt64& MemoryInKilobytes);
    [LibraryImportAttribute("api-ms-win-core-kernel32-legacy-l1-1-1")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
public static bool GetFirmwareType(FirmwareType& firmwareType);
    [LibraryImportAttribute("slc.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static int SLGetWindowsInformationDWORD(string licenseProperty, Int32& propertyValue);
    [CompilerGeneratedAttribute]
internal static int <GetPhysicallyInstalledSystemMemory>g____PInvoke|6_0(UInt64* __MemoryInKilobytes_native);
    [CompilerGeneratedAttribute]
internal static int <GetFirmwareType>g____PInvoke|7_0(FirmwareType* __firmwareType_native);
    [CompilerGeneratedAttribute]
internal static int <SLGetWindowsInformationDWORD>g____PInvoke|8_0(UInt16* __licenseProperty_native, Int32* __propertyValue_native);
}
internal static class Microsoft.PowerShell.Commands.NativeMethod : object {
    [LibraryImportAttribute("Shell32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static UInt32 SHEmptyRecycleBin(IntPtr hwnd, string pszRootPath, RecycleFlags dwFlags);
    [CompilerGeneratedAttribute]
internal static UInt32 <SHEmptyRecycleBin>g____PInvoke|1_0(IntPtr __hwnd_native, UInt16* __pszRootPath_native, RecycleFlags __dwFlags_native);
}
internal static class Microsoft.PowerShell.Commands.NativeMethods : object {
    internal static int ERROR_SERVICE_ALREADY_RUNNING;
    internal static int ERROR_SERVICE_NOT_ACTIVE;
    internal static int ERROR_INSUFFICIENT_BUFFER;
    internal static UInt32 ERROR_ACCESS_DENIED;
    internal static UInt32 SC_MANAGER_CONNECT;
    internal static UInt32 SC_MANAGER_CREATE_SERVICE;
    internal static UInt32 SC_MANAGER_ALL_ACCESS;
    internal static UInt32 SERVICE_QUERY_CONFIG;
    internal static UInt32 SERVICE_CHANGE_CONFIG;
    internal static UInt32 SERVICE_DELETE;
    internal static UInt32 SERVICE_NO_CHANGE;
    internal static UInt32 SERVICE_AUTO_START;
    internal static UInt32 SERVICE_DEMAND_START;
    internal static UInt32 SERVICE_DISABLED;
    internal static UInt32 SERVICE_CONFIG_DESCRIPTION;
    internal static UInt32 SERVICE_CONFIG_DELAYED_AUTO_START_INFO;
    internal static UInt32 SERVICE_CONFIG_SERVICE_SID_INFO;
    internal static UInt32 WRITE_DAC;
    internal static UInt32 WRITE_OWNER;
    internal static UInt32 SERVICE_WIN32_OWN_PROCESS;
    internal static UInt32 SERVICE_ERROR_NORMAL;
    internal static IntPtr OpenSCManagerW(string lpMachineName, string lpDatabaseName, UInt32 dwDesiredAccess);
    internal static IntPtr OpenServiceW(IntPtr hSCManager, string lpServiceName, UInt32 dwDesiredAccess);
    internal static bool QueryServiceConfigW(IntPtr hSCManager, IntPtr lpServiceConfig, UInt32 cbBufSize, UInt32& pcbBytesNeeded);
    internal static bool QueryServiceConfig2W(IntPtr hService, UInt32 dwInfoLevel, IntPtr lpBuffer, UInt32 cbBufSize, UInt32& pcbBytesNeeded);
    internal static bool CloseServiceHandle(IntPtr hSCManagerOrService);
    internal static bool DeleteService(IntPtr hService);
    internal static bool ChangeServiceConfigW(IntPtr hService, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, IntPtr lpdwTagId, string lpDependencies, string lpServiceStartName, IntPtr lpPassword, string lpDisplayName);
    internal static bool ChangeServiceConfig2W(IntPtr hService, UInt32 dwInfoLevel, IntPtr lpInfo);
    internal static IntPtr CreateServiceW(IntPtr hSCManager, string lpServiceName, string lpDisplayName, UInt32 dwDesiredAccess, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, string lpdwTagId, IntPtr lpDependencies, string lpServiceStartName, IntPtr lpPassword);
    internal static bool SetServiceObjectSecurity(IntPtr hSCManager, SecurityInfos dwSecurityInformation, Byte[] lpSecurityDescriptor);
    internal static IntPtr CreateJobObject(IntPtr lpJobAttributes, string lpName);
    public static bool QueryInformationJobObject(SafeHandle hJob, int JobObjectInfoClass, JOBOBJECT_BASIC_PROCESS_ID_LIST& lpJobObjectInfo, int cbJobObjectLength, IntPtr lpReturnLength);
    internal static bool QueryServiceConfig(IntPtr hService, QUERY_SERVICE_CONFIG& configStructure);
    internal static bool QueryServiceConfig2(IntPtr hService, UInt32 infolevel, T& configStructure);
    internal static bool TryGetNativeStartupType(ServiceStartupType StartupType, UInt32& dwStartType);
    internal static ServiceStartupType GetServiceStartupType(ServiceStartMode startMode, bool delayedAutoStart);
}
public enum Microsoft.PowerShell.Commands.NetConnectionStatus : Enum {
    public int value__;
    public static NetConnectionStatus Disconnected;
    public static NetConnectionStatus Connecting;
    public static NetConnectionStatus Connected;
    public static NetConnectionStatus Disconnecting;
    public static NetConnectionStatus HardwareNotPresent;
    public static NetConnectionStatus HardwareDisabled;
    public static NetConnectionStatus HardwareMalfunction;
    public static NetConnectionStatus MediaDisconnected;
    public static NetConnectionStatus Authenticating;
    public static NetConnectionStatus AuthenticationSucceeded;
    public static NetConnectionStatus AuthenticationFailed;
    public static NetConnectionStatus InvalidAddress;
    public static NetConnectionStatus CredentialsRequired;
    public static NetConnectionStatus Other;
}
public class Microsoft.PowerShell.Commands.NetworkAdapter : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionID>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DHCPEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DHCPServer>k__BackingField;
    [CompilerGeneratedAttribute]
private NetConnectionStatus <ConnectionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IPAddresses>k__BackingField;
    public string Description { get; internal set; }
    public string ConnectionID { get; internal set; }
    public Nullable`1<bool> DHCPEnabled { get; internal set; }
    public string DHCPServer { get; internal set; }
    public NetConnectionStatus ConnectionStatus { get; internal set; }
    public String[] IPAddresses { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionID();
    [CompilerGeneratedAttribute]
internal void set_ConnectionID(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DHCPEnabled();
    [CompilerGeneratedAttribute]
internal void set_DHCPEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DHCPServer();
    [CompilerGeneratedAttribute]
internal void set_DHCPServer(string value);
    [CompilerGeneratedAttribute]
public NetConnectionStatus get_ConnectionStatus();
    [CompilerGeneratedAttribute]
internal void set_ConnectionStatus(NetConnectionStatus value);
    [CompilerGeneratedAttribute]
public String[] get_IPAddresses();
    [CompilerGeneratedAttribute]
internal void set_IPAddresses(String[] value);
}
[CmdletAttribute("New", "Item")]
public class Microsoft.PowerShell.Commands.NewItemCommand : CoreCommandWithCredentialsBase {
    private static string NameParameterSet;
    private static string PathParameterSet;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ItemType { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "ItemProperty")]
public class Microsoft.PowerShell.Commands.NewItemPropertyCommand : ItemPropertyCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PropertyType { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "PSDrive")]
public class Microsoft.PowerShell.Commands.NewPSDriveCommand : CoreCommandWithCredentialsBase {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private bool _persist;
    private string _name;
    private string _provider;
    private string _root;
    private string _description;
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string PSProvider { get; public set; }
    [ParameterAttribute]
[AllowEmptyStringAttribute]
public string Root { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter Persist { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_PSProvider();
    public void set_PSProvider(string value);
    public string get_Root();
    public void set_Root(string value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public SwitchParameter get_Persist();
    public void set_Persist(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.NewServiceCommand : ServiceBaseCommand {
    internal string serviceName;
    internal string binaryPathName;
    internal string displayName;
    internal string description;
    internal ServiceStartupType startupType;
    internal PSCredential credential;
    [CompilerGeneratedAttribute]
private string <SecurityDescriptorSddl>k__BackingField;
    internal String[] dependsOn;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string BinaryPathName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string DisplayName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public ServiceStartupType StartupType { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string SecurityDescriptorSddl { get; public set; }
    [ParameterAttribute]
public String[] DependsOn { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_BinaryPathName();
    public void set_BinaryPathName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public ServiceStartupType get_StartupType();
    public void set_StartupType(ServiceStartupType value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_SecurityDescriptorSddl();
    [CompilerGeneratedAttribute]
public void set_SecurityDescriptorSddl(string value);
    public String[] get_DependsOn();
    public void set_DependsOn(String[] value);
    protected virtual void BeginProcessing();
}
public enum Microsoft.PowerShell.Commands.OperatingSystemSKU : Enum {
    public int value__;
    public static OperatingSystemSKU Undefined;
    public static OperatingSystemSKU UltimateEdition;
    public static OperatingSystemSKU HomeBasicEdition;
    public static OperatingSystemSKU HomePremiumEdition;
    public static OperatingSystemSKU EnterpriseEdition;
    public static OperatingSystemSKU HomeBasicNEdition;
    public static OperatingSystemSKU BusinessEdition;
    public static OperatingSystemSKU StandardServerEdition;
    public static OperatingSystemSKU DatacenterServerEdition;
    public static OperatingSystemSKU SmallBusinessServerEdition;
    public static OperatingSystemSKU EnterpriseServerEdition;
    public static OperatingSystemSKU StarterEdition;
    public static OperatingSystemSKU DatacenterServerCoreEdition;
    public static OperatingSystemSKU StandardServerCoreEdition;
    public static OperatingSystemSKU EnterpriseServerCoreEdition;
    public static OperatingSystemSKU EnterpriseServerIA64Edition;
    public static OperatingSystemSKU BusinessNEdition;
    public static OperatingSystemSKU WebServerEdition;
    public static OperatingSystemSKU ClusterServerEdition;
    public static OperatingSystemSKU HomeServerEdition;
    public static OperatingSystemSKU StorageExpressServerEdition;
    public static OperatingSystemSKU StorageStandardServerEdition;
    public static OperatingSystemSKU StorageWorkgroupServerEdition;
    public static OperatingSystemSKU StorageEnterpriseServerEdition;
    public static OperatingSystemSKU ServerForSmallBusinessEdition;
    public static OperatingSystemSKU SmallBusinessServerPremiumEdition;
    public static OperatingSystemSKU TBD;
    public static OperatingSystemSKU WindowsEnterprise;
    public static OperatingSystemSKU WindowsUltimate;
    public static OperatingSystemSKU WebServerCore;
    public static OperatingSystemSKU ServerFoundation;
    public static OperatingSystemSKU WindowsHomeServer;
    public static OperatingSystemSKU WindowsServerStandardNoHyperVFull;
    public static OperatingSystemSKU WindowsServerDatacenterNoHyperVFull;
    public static OperatingSystemSKU WindowsServerEnterpriseNoHyperVFull;
    public static OperatingSystemSKU WindowsServerDatacenterNoHyperVCore;
    public static OperatingSystemSKU WindowsServerStandardNoHyperVCore;
    public static OperatingSystemSKU WindowsServerEnterpriseNoHyperVCore;
    public static OperatingSystemSKU MicrosoftHyperVServer;
    public static OperatingSystemSKU StorageServerExpressCore;
    public static OperatingSystemSKU StorageServerStandardCore;
    public static OperatingSystemSKU StorageServerWorkgroupCore;
    public static OperatingSystemSKU StorageServerEnterpriseCore;
    public static OperatingSystemSKU WindowsSmallBusinessServer2011Essentials;
    public static OperatingSystemSKU SmallBusinessServerPremiumCore;
    public static OperatingSystemSKU WindowsServerHyperCoreV;
    public static OperatingSystemSKU WindowsThinPC;
    public static OperatingSystemSKU WindowsEmbeddedIndustry;
    public static OperatingSystemSKU WindowsRT;
    public static OperatingSystemSKU WindowsHome;
    public static OperatingSystemSKU WindowsProfessionalWithMediaCenter;
    public static OperatingSystemSKU WindowsMobile;
    public static OperatingSystemSKU WindowsEmbeddedHandheld;
    public static OperatingSystemSKU WindowsIotCore;
}
public enum Microsoft.PowerShell.Commands.OSEncryptionLevel : Enum {
    public int value__;
    public static OSEncryptionLevel Encrypt40Bits;
    public static OSEncryptionLevel Encrypt128Bits;
    public static OSEncryptionLevel EncryptNBits;
}
[FlagsAttribute]
public enum Microsoft.PowerShell.Commands.OSProductSuite : Enum {
    public int value__;
    public static OSProductSuite SmallBusinessServer;
    public static OSProductSuite Server2008Enterprise;
    public static OSProductSuite BackOfficeComponents;
    public static OSProductSuite CommunicationsServer;
    public static OSProductSuite TerminalServices;
    public static OSProductSuite SmallBusinessServerRestricted;
    public static OSProductSuite WindowsEmbedded;
    public static OSProductSuite DatacenterEdition;
    public static OSProductSuite TerminalServicesSingleSession;
    public static OSProductSuite HomeEdition;
    public static OSProductSuite WebServerEdition;
    public static OSProductSuite StorageServerEdition;
    public static OSProductSuite ComputeClusterEdition;
}
public enum Microsoft.PowerShell.Commands.OSType : Enum {
    public int value__;
    public static OSType Unknown;
    public static OSType Other;
    public static OSType MACROS;
    public static OSType ATTUNIX;
    public static OSType DGUX;
    public static OSType DECNT;
    public static OSType DigitalUNIX;
    public static OSType OpenVMS;
    public static OSType HPUX;
    public static OSType AIX;
    public static OSType MVS;
    public static OSType OS400;
    public static OSType OS2;
    public static OSType JavaVM;
    public static OSType MSDOS;
    public static OSType WIN3x;
    public static OSType WIN95;
    public static OSType WIN98;
    public static OSType WINNT;
    public static OSType WINCE;
    public static OSType NCR3000;
    public static OSType NetWare;
    public static OSType OSF;
    public static OSType DC_OS;
    public static OSType ReliantUNIX;
    public static OSType SCOUnixWare;
    public static OSType SCOOpenServer;
    public static OSType Sequent;
    public static OSType IRIX;
    public static OSType Solaris;
    public static OSType SunOS;
    public static OSType U6000;
    public static OSType ASERIES;
    public static OSType TandemNSK;
    public static OSType TandemNT;
    public static OSType BS2000;
    public static OSType LINUX;
    public static OSType Lynx;
    public static OSType XENIX;
    public static OSType VM_ESA;
    public static OSType InteractiveUNIX;
    public static OSType BSDUNIX;
    public static OSType FreeBSD;
    public static OSType NetBSD;
    public static OSType GNUHurd;
    public static OSType OS9;
    public static OSType MACHKernel;
    public static OSType Inferno;
    public static OSType QNX;
    public static OSType EPOC;
    public static OSType IxWorks;
    public static OSType VxWorks;
    public static OSType MiNT;
    public static OSType BeOS;
    public static OSType HP_MPE;
    public static OSType NextStep;
    public static OSType PalmPilot;
    public static OSType Rhapsody;
    public static OSType Windows2000;
    public static OSType Dedicated;
    public static OSType OS_390;
    public static OSType VSE;
    public static OSType TPF;
}
public class Microsoft.PowerShell.Commands.PassThroughContentCommandBase : ContentCommandBase {
    private bool _passThrough;
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
    internal CmdletProviderContext GetCurrentContext();
}
public class Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase : ItemPropertyCommandBase {
    private bool _passThrough;
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
    internal CmdletProviderContext GetCurrentContext();
}
public enum Microsoft.PowerShell.Commands.PCSystemType : Enum {
    public int value__;
    public static PCSystemType Unspecified;
    public static PCSystemType Desktop;
    public static PCSystemType Mobile;
    public static PCSystemType Workstation;
    public static PCSystemType EnterpriseServer;
    public static PCSystemType SOHOServer;
    public static PCSystemType AppliancePC;
    public static PCSystemType PerformanceServer;
    public static PCSystemType Maximum;
}
public enum Microsoft.PowerShell.Commands.PCSystemTypeEx : Enum {
    public int value__;
    public static PCSystemTypeEx Unspecified;
    public static PCSystemTypeEx Desktop;
    public static PCSystemTypeEx Mobile;
    public static PCSystemTypeEx Workstation;
    public static PCSystemTypeEx EnterpriseServer;
    public static PCSystemTypeEx SOHOServer;
    public static PCSystemTypeEx AppliancePC;
    public static PCSystemTypeEx PerformanceServer;
    public static PCSystemTypeEx Slate;
    public static PCSystemTypeEx Maximum;
}
[CmdletAttribute("Pop", "Location")]
public class Microsoft.PowerShell.Commands.PopLocationCommand : CoreCommandBase {
    private bool _passThrough;
    private string _stackName;
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_StackName();
    public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.PowerManagementCapabilities : Enum {
    public int value__;
    public static PowerManagementCapabilities Unknown;
    public static PowerManagementCapabilities NotSupported;
    public static PowerManagementCapabilities Disabled;
    public static PowerManagementCapabilities Enabled;
    public static PowerManagementCapabilities PowerSavingModesEnteredAutomatically;
    public static PowerManagementCapabilities PowerStateSettable;
    public static PowerManagementCapabilities PowerCyclingSupported;
    public static PowerManagementCapabilities TimedPowerOnSupported;
}
public enum Microsoft.PowerShell.Commands.PowerPlatformRole : Enum {
    public int value__;
    public static PowerPlatformRole Unspecified;
    public static PowerPlatformRole Desktop;
    public static PowerPlatformRole Mobile;
    public static PowerPlatformRole Workstation;
    public static PowerPlatformRole EnterpriseServer;
    public static PowerPlatformRole SOHOServer;
    public static PowerPlatformRole AppliancePC;
    public static PowerPlatformRole PerformanceServer;
    public static PowerPlatformRole Slate;
    public static PowerPlatformRole MaximumEnumValue;
}
public enum Microsoft.PowerShell.Commands.PowerState : Enum {
    public int value__;
    public static PowerState Unknown;
    public static PowerState FullPower;
    public static PowerState PowerSaveLowPowerMode;
    public static PowerState PowerSaveStandby;
    public static PowerState PowerSaveUnknown;
    public static PowerState PowerCycle;
    public static PowerState PowerOff;
    public static PowerState PowerSaveWarning;
    public static PowerState PowerSaveHibernate;
    public static PowerState PowerSaveSoftOff;
}
public abstract class Microsoft.PowerShell.Commands.ProcessBaseCommand : Cmdlet {
    internal MatchMode myMode;
    internal String[] processNames;
    internal Int32[] processIds;
    private Process[] _input;
    private List`1<Process> _matchingProcesses;
    private Dictionary`2<int, Process> _keys;
    private Process[] _allProcesses;
    [ParameterAttribute]
public Process[] InputObject { get; public set; }
    internal Process[] AllProcesses { get; }
    public virtual Process[] get_InputObject();
    public virtual void set_InputObject(Process[] value);
    internal List`1<Process> MatchingProcesses();
    private static int ProcessComparison(Process x, Process y);
    private void RetrieveMatchingProcessesByProcessName();
    private void RetrieveMatchingProcessesById();
    private void RetrieveProcessesByInput();
    internal Process[] get_AllProcesses();
    private void AddIdempotent(Process process);
    internal void WriteNonTerminatingError(Process process, Exception innerException, string resourceId, string errorId, ErrorCategory category);
    internal void WriteNonTerminatingError(string processName, int processId, object targetObject, Exception innerException, string resourceId, string errorId, ErrorCategory category);
    internal static string SafeGetProcessName(Process process);
    internal static int SafeGetProcessId(Process process);
    internal static void SafeRefresh(Process process);
    internal static bool TryHasExited(Process process);
}
internal class Microsoft.PowerShell.Commands.ProcessCollection : object {
    private SafeJobHandle _jobObjectHandle;
    internal bool AssignProcessToJobObject(SafeProcessHandle process);
    internal void CheckJobStatus(object stateInfo);
    internal void WaitOne(ManualResetEvent waitHandleToUse);
}
public class Microsoft.PowerShell.Commands.ProcessCommandException : SystemException {
    private string _processName;
    public string ProcessName { get; public set; }
    public ProcessCommandException(string message);
    public ProcessCommandException(string message, Exception innerException);
    [ObsoleteAttribute("Legacy serialization support is deprecated since .NET 8")]
protected ProcessCommandException(SerializationInfo info, StreamingContext context);
    public string get_ProcessName();
    public void set_ProcessName(string value);
}
internal class Microsoft.PowerShell.Commands.ProcessInformation : object {
    [CompilerGeneratedAttribute]
private SafeProcessHandle <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeProcessHandle <Thread>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    public SafeProcessHandle Process { get; }
    public SafeProcessHandle Thread { get; }
    public int ProcessId { get; }
    public int ThreadId { get; }
    internal ProcessInformation(PROCESS_INFORMATION info);
    [CompilerGeneratedAttribute]
public SafeProcessHandle get_Process();
    [CompilerGeneratedAttribute]
public SafeProcessHandle get_Thread();
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    public void Resume();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
internal static class Microsoft.PowerShell.Commands.ProcessNativeMethods : object {
    public static IntPtr GetStdHandle(int whichHandle);
    internal static bool CreateProcessWithLogonW(string userName, string domain, IntPtr password, LogonFlags logonFlags, string appName, StringBuilder cmdLine, int creationFlags, IntPtr environmentBlock, string lpCurrentDirectory, STARTUPINFO lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    public static bool CreateProcess(string lpApplicationName, StringBuilder lpCommandLine, SECURITY_ATTRIBUTES lpProcessAttributes, SECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, int dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    public static UInt32 ResumeThread(IntPtr threadHandle);
    public static bool CreateEnvironmentBlock(IntPtr& lpEnvironment, IntPtr hToken, bool bInherit);
    public static bool DestroyEnvironmentBlock(IntPtr lpEnvironment);
}
public class Microsoft.PowerShell.Commands.Processor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CpuArchitecture> <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <AddressWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <DataWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxClockSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CurrentClockSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <NumberOfCores>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <NumberOfLogicalProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessorID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SocketDesignation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProcessorType> <ProcessorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CpuStatus> <CpuStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CpuAvailability> <Availability>k__BackingField;
    public string Name { get; internal set; }
    public string Manufacturer { get; internal set; }
    public string Description { get; internal set; }
    public Nullable`1<CpuArchitecture> Architecture { get; internal set; }
    public Nullable`1<ushort> AddressWidth { get; internal set; }
    public Nullable`1<ushort> DataWidth { get; internal set; }
    public Nullable`1<UInt32> MaxClockSpeed { get; internal set; }
    public Nullable`1<UInt32> CurrentClockSpeed { get; internal set; }
    public Nullable`1<UInt32> NumberOfCores { get; internal set; }
    public Nullable`1<UInt32> NumberOfLogicalProcessors { get; internal set; }
    public string ProcessorID { get; internal set; }
    public string SocketDesignation { get; internal set; }
    public Nullable`1<ProcessorType> ProcessorType { get; internal set; }
    public string Role { get; internal set; }
    public string Status { get; internal set; }
    public Nullable`1<CpuStatus> CpuStatus { get; internal set; }
    public Nullable`1<CpuAvailability> Availability { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Manufacturer();
    [CompilerGeneratedAttribute]
internal void set_Manufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<CpuArchitecture> get_Architecture();
    [CompilerGeneratedAttribute]
internal void set_Architecture(Nullable`1<CpuArchitecture> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_AddressWidth();
    [CompilerGeneratedAttribute]
internal void set_AddressWidth(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_DataWidth();
    [CompilerGeneratedAttribute]
internal void set_DataWidth(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MaxClockSpeed();
    [CompilerGeneratedAttribute]
internal void set_MaxClockSpeed(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CurrentClockSpeed();
    [CompilerGeneratedAttribute]
internal void set_CurrentClockSpeed(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_NumberOfCores();
    [CompilerGeneratedAttribute]
internal void set_NumberOfCores(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_NumberOfLogicalProcessors();
    [CompilerGeneratedAttribute]
internal void set_NumberOfLogicalProcessors(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_ProcessorID();
    [CompilerGeneratedAttribute]
internal void set_ProcessorID(string value);
    [CompilerGeneratedAttribute]
public string get_SocketDesignation();
    [CompilerGeneratedAttribute]
internal void set_SocketDesignation(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProcessorType> get_ProcessorType();
    [CompilerGeneratedAttribute]
internal void set_ProcessorType(Nullable`1<ProcessorType> value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
internal void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<CpuStatus> get_CpuStatus();
    [CompilerGeneratedAttribute]
internal void set_CpuStatus(Nullable`1<CpuStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CpuAvailability> get_Availability();
    [CompilerGeneratedAttribute]
internal void set_Availability(Nullable`1<CpuAvailability> value);
}
public enum Microsoft.PowerShell.Commands.ProcessorType : Enum {
    public int value__;
    public static ProcessorType Other;
    public static ProcessorType Unknown;
    public static ProcessorType CentralProcessor;
    public static ProcessorType MathProcessor;
    public static ProcessorType DSPProcessor;
    public static ProcessorType VideoProcessor;
}
public enum Microsoft.PowerShell.Commands.ProductType : Enum {
    public int value__;
    public static ProductType Unknown;
    public static ProductType WorkStation;
    public static ProductType DomainController;
    public static ProductType Server;
}
[CmdletAttribute("Push", "Location")]
public class Microsoft.PowerShell.Commands.PushLocationCommand : CoreCommandBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private string _path;
    private bool _passThrough;
    private string _stackName;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_StackName();
    public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
internal static class Microsoft.PowerShell.Commands.RegistryInfo : object {
    public static Dictionary`2<string, UInt32> GetServerLevels();
    public static string GetLogonServer();
    public static RegWinNtCurrentVersion GetWinNtCurrentVersion();
}
internal class Microsoft.PowerShell.Commands.RegWinNtCurrentVersion : object {
    public string BuildLabEx;
    public string CurrentVersion;
    public string EditionId;
    public string InstallationType;
    public Nullable`1<DateTime> InstallDate;
    public string ProductId;
    public string ProductName;
    public string RegisteredOrganization;
    public string RegisteredOwner;
    public string SystemRoot;
    public string ReleaseId;
    public Nullable`1<int> UBR;
}
[CmdletAttribute("Remove", "Item")]
public class Microsoft.PowerShell.Commands.RemoveItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private String[] _paths;
    private bool _recurse;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "ItemProperty")]
public class Microsoft.PowerShell.Commands.RemoveItemPropertyCommand : ItemPropertyCommandBase {
    private String[] _property;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "PSDrive")]
public class Microsoft.PowerShell.Commands.RemovePSDriveCommand : DriveMatchingCoreCommandBase {
    private static string NameParameterSet;
    private static string LiteralNameParameterSet;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private String[] _names;
    private String[] _provider;
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] LiteralName { get; public set; }
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_LiteralName();
    public void set_LiteralName(String[] value);
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "Service")]
public class Microsoft.PowerShell.Commands.RemoveServiceCommand : ServiceBaseCommand {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceController <InputObject>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public ServiceController InputObject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ServiceController get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(ServiceController value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.RenameComputerChangeInfo : object {
    private static string MatchFormat;
    [CompilerGeneratedAttribute]
private bool <HasSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldComputerName>k__BackingField;
    public bool HasSucceeded { get; public set; }
    public string NewComputerName { get; public set; }
    public string OldComputerName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasSucceeded();
    [CompilerGeneratedAttribute]
public void set_HasSucceeded(bool value);
    [CompilerGeneratedAttribute]
public string get_NewComputerName();
    [CompilerGeneratedAttribute]
public void set_NewComputerName(string value);
    [CompilerGeneratedAttribute]
public string get_OldComputerName();
    [CompilerGeneratedAttribute]
public void set_OldComputerName(string value);
    public virtual string ToString();
    private static string FormatLine(string HasSucceeded, string newcomputername, string oldcomputername);
}
[CmdletAttribute("Rename", "Computer")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.RenameComputerChangeInfo")]
public class Microsoft.PowerShell.Commands.RenameComputerCommand : PSCmdlet {
    private bool _containsLocalHost;
    private string _newNameForLocalHost;
    private string _shortLocalMachineName;
    private string _fullLocalMachineName;
    [CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <DomainCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <LocalCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    private bool _force;
    private bool _restart;
    [CompilerGeneratedAttribute]
private string <WsmanAuthentication>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ComputerName { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential DomainCredential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential LocalCredential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string NewName { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Restart { get; public set; }
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WsmanAuthentication { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSCredential get_DomainCredential();
    [CompilerGeneratedAttribute]
public void set_DomainCredential(PSCredential value);
    [CompilerGeneratedAttribute]
public PSCredential get_LocalCredential();
    [CompilerGeneratedAttribute]
public void set_LocalCredential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Restart();
    public void set_Restart(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_WsmanAuthentication();
    [CompilerGeneratedAttribute]
public void set_WsmanAuthentication(string value);
    private string ValidateComputerName();
    private void DoRenameComputerAction(string computer, string newName, bool isLocalhost);
    private void DoRenameComputerWsman(string computer, string computerName, string newName, bool isLocalhost);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Rename", "Item")]
public class Microsoft.PowerShell.Commands.RenameItemCommand : CoreCommandWithCredentialsBase {
    private static string ByPathParameterSet;
    private static string ByLiteralPathParameterSet;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    private string _path;
    private bool _passThrough;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public string NewName { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    private Collection`1<PathInfo> GetResolvedPaths(string path);
    protected virtual void ProcessRecord();
    private void RenameItem(string path, bool literalPath);
}
[CmdletAttribute("Rename", "ItemProperty")]
public class Microsoft.PowerShell.Commands.RenameItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    private string _path;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public string NewName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.ResetCapability : Enum {
    public int value__;
    public static ResetCapability Other;
    public static ResetCapability Unknown;
    public static ResetCapability Disabled;
    public static ResetCapability Enabled;
    public static ResetCapability NotImplemented;
}
[CmdletAttribute("Resolve", "Path")]
public class Microsoft.PowerShell.Commands.ResolvePathCommand : CoreCommandWithCredentialsBase {
    private SwitchParameter _relative;
    private String[] _paths;
    private PSDriveInfo _relativeDrive;
    private string _relativeBasePath;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Relative { get; public set; }
    [ParameterAttribute]
public string RelativeBasePath { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public SwitchParameter get_Relative();
    public void set_Relative(SwitchParameter value);
    public string get_RelativeBasePath();
    public void set_RelativeBasePath(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Restart", "Computer")]
public class Microsoft.PowerShell.Commands.RestartComputerCommand : PSCmdlet {
    private static string DefaultParameterSet;
    private static int forcedReboot;
    [CompilerGeneratedAttribute]
private string <WsmanAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ComputerName>k__BackingField;
    private List`1<string> _validatedComputerNames;
    private List`1<string> _waitOnComputers;
    private HashSet`1<string> _uniqueComputerNames;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Wait>k__BackingField;
    private int _timeout;
    private bool _timeoutSpecified;
    private WaitForServiceTypes _waitFor;
    private bool _waitForSpecified;
    private int _delay;
    private bool _delaySpecified;
    private static string TestPowershellScript;
    private String[] _indicator;
    private int _activityId;
    private static int SecondsToWaitForRestartToBegin;
    private int _timeoutInMilliseconds;
    private bool _exit;
    private bool _timeUp;
    private CancellationTokenSource _cancel;
    private ManualResetEventSlim _waitHandler;
    private Dictionary`2<string, ComputerInfo> _computerInfos;
    private string _shortLocalMachineName;
    private string _fullLocalMachineName;
    private int _percent;
    private string _status;
    private string _activity;
    private Timer _timer;
    private PowerShell _powershell;
    private static string StageVerification;
    private static string WmiConnectionTest;
    private static string WinrmConnectionTest;
    private static string PowerShellConnectionTest;
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WsmanAuthentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Wait { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Timeout { get; public set; }
    [ParameterAttribute]
public WaitForServiceTypes For { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public short Delay { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WsmanAuthentication();
    [CompilerGeneratedAttribute]
public void set_WsmanAuthentication(string value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(SwitchParameter value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public WaitForServiceTypes get_For();
    public void set_For(WaitForServiceTypes value);
    public short get_Delay();
    public void set_Delay(short value);
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
    private void ValidateComputerNames();
    private void WriteProgress(string activity, string status, int percent, ProgressRecordType progressRecordType);
    private int CalculateProgressPercentage(string currentStage);
    private void OnTimedEvent(object s);
    private List`1<string> TestRestartStageUsingWsman(IEnumerable`1<string> computerNames, List`1<string> nextTestList, CancellationToken token);
    private List`1<string> SetUpComputerInfoUsingWsman(IEnumerable`1<string> computerNames, CancellationToken token);
    private void WriteOutTimeoutError(IEnumerable`1<string> computerNames);
    internal static List`1<string> TestWmiConnectionUsingWsman(List`1<string> computerNames, List`1<string> nextTestList, PSCredential credential, string wsmanAuthentication, PSCmdlet cmdlet, CancellationToken token);
    internal static List`1<string> TestPowerShell(List`1<string> computerNames, List`1<string> nextTestList, PowerShell powershell, PSCredential credential);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.RestartComputerTimeoutException : RuntimeException {
    [CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public string ComputerName { get; }
    public int Timeout { get; }
    internal RestartComputerTimeoutException(string computerName, int timeout, string message, string errorId);
    public RestartComputerTimeoutException(string message);
    public RestartComputerTimeoutException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public int get_Timeout();
}
[CmdletAttribute("Restart", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.RestartServiceCommand : ServiceOperationBaseCommand {
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Resume", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.ResumeServiceCommand : ServiceOperationBaseCommand {
    protected virtual void ProcessRecord();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class Microsoft.PowerShell.Commands.SafeJobHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeJobHandle(IntPtr jobHandle);
    protected virtual bool ReleaseHandle();
}
public enum Microsoft.PowerShell.Commands.ServerLevel : Enum {
    public int value__;
    public static ServerLevel Unknown;
    public static ServerLevel NanoServer;
    public static ServerLevel ServerCore;
    public static ServerLevel ServerCoreWithManagementTools;
    public static ServerLevel FullServer;
}
public abstract class Microsoft.PowerShell.Commands.ServiceBaseCommand : Cmdlet {
    protected bool ShouldProcessServiceOperation(ServiceController service);
    protected bool ShouldProcessServiceOperation(string displayName, string serviceName);
    internal void WriteNonTerminatingError(ServiceController service, Exception innerException, string errorId, string errorMessage, ErrorCategory category);
    internal void WriteNonTerminatingError(string serviceName, string displayName, object targetObject, Exception innerException, string errorId, string errorMessage, ErrorCategory category);
    internal void SetServiceSecurityDescriptor(ServiceController service, string securityDescriptorSddl, IntPtr hService);
}
public class Microsoft.PowerShell.Commands.ServiceCommandException : SystemException {
    private string _serviceName;
    public string ServiceName { get; public set; }
    public ServiceCommandException(string message);
    public ServiceCommandException(string message, Exception innerException);
    [ObsoleteAttribute("Legacy serialization support is deprecated since .NET 8, hence this method is now marked as obsolete")]
protected ServiceCommandException(SerializationInfo info, StreamingContext context);
    public string get_ServiceName();
    public void set_ServiceName(string value);
}
public abstract class Microsoft.PowerShell.Commands.ServiceOperationBaseCommand : MultipleServiceCommandBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ServiceController[] InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public ServiceController[] get_InputObject();
    public void set_InputObject(ServiceController[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    internal bool DoWaitForStatus(ServiceController serviceController, ServiceControllerStatus targetStatus, ServiceControllerStatus pendingStatus, string resourceIdPending, string errorId, string errorMessage);
    internal bool DoStartService(ServiceController serviceController);
    internal List`1<ServiceController> DoStopService(ServiceController serviceController, bool force, bool waitForServiceToStop);
    private static bool HaveAllDependentServicesStopped(ServiceController[] dependentServices);
    internal void RemoveNotStoppedServices(List`1<ServiceController> services);
    internal bool DoPauseService(ServiceController serviceController);
    internal bool DoResumeService(ServiceController serviceController);
}
public enum Microsoft.PowerShell.Commands.ServiceStartupType : Enum {
    public int value__;
    public static ServiceStartupType InvalidValue;
    public static ServiceStartupType Automatic;
    public static ServiceStartupType Manual;
    public static ServiceStartupType Disabled;
    public static ServiceStartupType AutomaticDelayedStart;
}
[CmdletAttribute("Set", "Clipboard")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.SetClipboardCommand : PSCmdlet {
    private List`1<string> _contentList;
    [CompilerGeneratedAttribute]
private String[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Append>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsOSC52>k__BackingField;
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter AsOSC52 { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsOSC52();
    [CompilerGeneratedAttribute]
public void set_AsOSC52(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void SetClipboardContent(List`1<string> contentList, bool append);
    private void SetClipboardContent(string content);
}
[CmdletAttribute("Set", "Content")]
public class Microsoft.PowerShell.Commands.SetContentCommand : WriteContentCommandBase {
    internal virtual void BeforeOpenStreams(String[] paths);
    internal virtual bool CallShouldProcess(string path);
}
[CmdletAttribute("Set", "Item")]
public class Microsoft.PowerShell.Commands.SetItemCommand : CoreCommandWithCredentialsBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private String[] _paths;
    private bool _passThrough;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "ItemProperty")]
public class Microsoft.PowerShell.Commands.SetItemPropertyCommand : PassThroughItemPropertyCommandBase {
    private static string propertyValuePathSet;
    private static string propertyValueLiteralPathSet;
    private static string propertyPSObjectPathSet;
    private static string propertyPSObjectLiteralPathSet;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AllowNullAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "Location")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.SetLocationCommand : CoreCommandBase {
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private static string StackParameterSet;
    [CompilerGeneratedAttribute]
private string <StackName>k__BackingField;
    private string _path;
    private bool _passThrough;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_StackName();
    [CompilerGeneratedAttribute]
public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.SetServiceCommand : ServiceOperationBaseCommand {
    internal string serviceName;
    [CompilerGeneratedAttribute]
private ServiceController <InputObject>k__BackingField;
    internal string displayName;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    internal string description;
    internal ServiceStartupType startupType;
    [CompilerGeneratedAttribute]
private string <SecurityDescriptorSddl>k__BackingField;
    internal string serviceStatus;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    internal String[] include;
    internal String[] exclude;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public ServiceController InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string DisplayName { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public ServiceStartupType StartupType { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string SecurityDescriptorSddl { get; public set; }
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Status { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] Include { get; public set; }
    public String[] Exclude { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ServiceController get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(ServiceController value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    public string get_Description();
    public void set_Description(string value);
    public ServiceStartupType get_StartupType();
    public void set_StartupType(ServiceStartupType value);
    [CompilerGeneratedAttribute]
public string get_SecurityDescriptorSddl();
    [CompilerGeneratedAttribute]
public void set_SecurityDescriptorSddl(string value);
    public string get_Status();
    public void set_Status(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "TimeZone")]
[OutputTypeAttribute("System.TimeZoneInfo")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.SetTimeZoneCommand : PSCmdlet {
    private static string TimeZoneTarget;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
public string Id { get; public set; }
    [ParameterAttribute]
public TimeZoneInfo InputObject { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool HasAccess { get; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected bool get_HasAccess();
    protected void SetAccessToken(bool enable);
    protected void ThrowWin32Error();
}
public enum Microsoft.PowerShell.Commands.SoftwareElementState : Enum {
    public int value__;
    public static SoftwareElementState Deployable;
    public static SoftwareElementState Installable;
    public static SoftwareElementState Executable;
    public static SoftwareElementState Running;
}
[CmdletAttribute("Split", "Path")]
[OutputTypeAttribute("System.String")]
[OutputTypeAttribute("System.Boolean")]
public class Microsoft.PowerShell.Commands.SplitPathCommand : CoreCommandWithCredentialsBase {
    private static string parentSet;
    private static string leafSet;
    private static string leafBaseSet;
    private static string extensionSet;
    private static string qualifierSet;
    private static string noQualifierSet;
    private static string isAbsoluteSet;
    private static string literalPathSet;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Qualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoQualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Leaf>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <LeafBase>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Resolve>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IsAbsolute>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Qualifier { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoQualifier { get; public set; }
    [ParameterAttribute]
public SwitchParameter Parent { get; public set; }
    [ParameterAttribute]
public SwitchParameter Leaf { get; public set; }
    [ParameterAttribute]
public SwitchParameter LeafBase { get; public set; }
    [ParameterAttribute]
public SwitchParameter Extension { get; public set; }
    [ParameterAttribute]
public SwitchParameter Resolve { get; public set; }
    [ParameterAttribute]
public SwitchParameter IsAbsolute { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Qualifier();
    [CompilerGeneratedAttribute]
public void set_Qualifier(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoQualifier();
    [CompilerGeneratedAttribute]
public void set_NoQualifier(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Leaf();
    [CompilerGeneratedAttribute]
public void set_Leaf(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_LeafBase();
    [CompilerGeneratedAttribute]
public void set_LeafBase(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IsAbsolute();
    [CompilerGeneratedAttribute]
public void set_IsAbsolute(SwitchParameter value);
    protected virtual void ProcessRecord();
    private string RemoveQualifier(string path);
}
[CmdletAttribute("Start", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.StartProcessCommand : PSCmdlet {
    private ManualResetEvent _waithandle;
    private bool _isDefaultSetParameterSpecified;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ArgumentList>k__BackingField;
    private PSCredential _credential;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    private SwitchParameter _loaduserprofile;
    private SwitchParameter _nonewwindow;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    private string _redirectstandarderror;
    private string _redirectstandardinput;
    private string _redirectstandardoutput;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    private ProcessWindowStyle _windowstyle;
    private bool _windowstyleSpecified;
    [CompilerGeneratedAttribute]
private SwitchParameter <Wait>k__BackingField;
    private SwitchParameter _UseNewEnvironment;
    private Hashtable _environment;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ArgumentList { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string WorkingDirectory { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter LoadUserProfile { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoNewWindow { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardError { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardInput { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardOutput { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Verb { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProcessWindowStyle WindowStyle { get; public set; }
    [ParameterAttribute]
public SwitchParameter Wait { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseNewEnvironment { get; public set; }
    [ParameterAttribute]
public Hashtable Environment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_ArgumentList();
    [CompilerGeneratedAttribute]
public void set_ArgumentList(String[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    public SwitchParameter get_LoadUserProfile();
    public void set_LoadUserProfile(SwitchParameter value);
    public SwitchParameter get_NoNewWindow();
    public void set_NoNewWindow(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    public string get_RedirectStandardError();
    public void set_RedirectStandardError(string value);
    public string get_RedirectStandardInput();
    public void set_RedirectStandardInput(string value);
    public string get_RedirectStandardOutput();
    public void set_RedirectStandardOutput(string value);
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    public ProcessWindowStyle get_WindowStyle();
    public void set_WindowStyle(ProcessWindowStyle value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(SwitchParameter value);
    public SwitchParameter get_UseNewEnvironment();
    public void set_UseNewEnvironment(SwitchParameter value);
    public Hashtable get_Environment();
    public void set_Environment(Hashtable value);
    protected virtual void BeginProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    private void Dispose(bool isDisposing);
    private string ResolveFilePath(string path);
    private static void LoadEnvironmentVariable(ProcessStartInfo startinfo, IDictionary EnvironmentVariables);
    private SafeFileHandle GetSafeFileHandleForRedirection(string RedirectionPath, FileMode mode);
    private static StringBuilder BuildCommandLine(string executableFileName, string arguments);
    private static Byte[] ConvertEnvVarsToByteArray(StringDictionary sd);
    private void SetStartupInfo(ProcessStartInfo startinfo, STARTUPINFO& lpStartupInfo, Int32& creationFlags);
    private ProcessInformation StartWithCreateProcess(ProcessStartInfo startinfo);
    private Process StartWithShellExecute(ProcessStartInfo startInfo);
}
[CmdletAttribute("Start", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.StartServiceCommand : ServiceOperationBaseCommand {
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Stop", "Computer")]
public class Microsoft.PowerShell.Commands.StopComputerCommand : PSCmdlet {
    private CancellationTokenSource _cancel;
    private static int forcedShutdown;
    [CompilerGeneratedAttribute]
private string <WsmanAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WsmanAuthentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WsmanAuthentication();
    [CompilerGeneratedAttribute]
public void set_WsmanAuthentication(string value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    public sealed virtual void Dispose();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    private void ProcessWSManProtocol(Object[] flags);
}
[CmdletAttribute("Stop", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.StopProcessCommand : ProcessBaseCommand {
    private bool _passThru;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    private bool _shouldKillCurrentProcess;
    private bool _yesToAll;
    private bool _noToAll;
    private string _currentUserName;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
public Process[] InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public Process[] get_InputObject();
    public void set_InputObject(Process[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private bool IsProcessOwnedByCurrentUser(Process process);
    private void StopDependentService(Process process);
    private void StopProcess(Process process);
}
[CmdletAttribute("Stop", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.StopServiceCommand : ServiceOperationBaseCommand {
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoWait>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoWait { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoWait();
    [CompilerGeneratedAttribute]
public void set_NoWait(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Suspend", "Service")]
[OutputTypeAttribute("System.ServiceProcess.ServiceController")]
public class Microsoft.PowerShell.Commands.SuspendServiceCommand : ServiceOperationBaseCommand {
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.SystemElementState : Enum {
    public int value__;
    public static SystemElementState Other;
    public static SystemElementState Unknown;
    public static SystemElementState Safe;
    public static SystemElementState Warning;
    public static SystemElementState Critical;
    public static SystemElementState NonRecoverable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CmdletAttribute("Test", "Connection")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingStatus")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingStatus")]
[OutputTypeAttribute("System.Boolean")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingMtuStatus")]
[OutputTypeAttribute("System.Int32")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/TraceStatus")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/TcpPortStatus")]
public class Microsoft.PowerShell.Commands.TestConnectionCommand : PSCmdlet {
    private static string DefaultPingParameterSet;
    private static string RepeatPingParameterSet;
    private static string TraceRouteParameterSet;
    private static string TcpPortParameterSet;
    private static string MtuSizeDetectParameterSet;
    private static UInt32 DefaultTraceRoutePingCount;
    private static int DefaultSendBufferSize;
    private static int DefaultMaxHops;
    private static string TestConnectionExceptionId;
    private static Byte[] s_DefaultSendBuffer;
    private CancellationTokenSource _dnsLookupCancel;
    private bool _disposed;
    [NullableAttribute("2")]
private Ping _sender;
    [CompilerGeneratedAttribute]
private SwitchParameter <Ping>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IPv4>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <ResolveDestination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHops>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <DontFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Repeat>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Quiet>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Detailed;
    [CompilerGeneratedAttribute]
private int <TimeoutSeconds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <MtuSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Traceroute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TcpPort>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Ping { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IPv4 { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IPv6 { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter ResolveDestination { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Source { get; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int MaxHops { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("0")]
public int Count { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("0")]
public int Delay { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int BufferSize { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter DontFragment { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Repeat { get; public set; }
    [ParameterAttribute]
public SwitchParameter Quiet { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("0")]
public int TimeoutSeconds { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] TargetName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter MtuSize { get; public set; }
    [ParameterAttribute]
public SwitchParameter Traceroute { get; public set; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[ParameterAttribute]
public int TcpPort { get; public set; }
    private static TestConnectionCommand();
    [CompilerGeneratedAttribute]
public SwitchParameter get_Ping();
    [CompilerGeneratedAttribute]
public void set_Ping(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IPv4();
    [CompilerGeneratedAttribute]
public void set_IPv4(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IPv6();
    [CompilerGeneratedAttribute]
public void set_IPv6(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ResolveDestination();
    [CompilerGeneratedAttribute]
public void set_ResolveDestination(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public int get_MaxHops();
    [CompilerGeneratedAttribute]
public void set_MaxHops(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(int value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_DontFragment();
    [CompilerGeneratedAttribute]
public void set_DontFragment(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Repeat();
    [CompilerGeneratedAttribute]
public void set_Repeat(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_TimeoutSeconds();
    [CompilerGeneratedAttribute]
public void set_TimeoutSeconds(int value);
    [CompilerGeneratedAttribute]
public String[] get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_MtuSize();
    [CompilerGeneratedAttribute]
public void set_MtuSize(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Traceroute();
    [CompilerGeneratedAttribute]
public void set_Traceroute(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_TcpPort();
    [CompilerGeneratedAttribute]
public void set_TcpPort(int value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    private void SetCountForTcpTest();
    private void ProcessConnectionByTCPPort(string targetNameOrAddress);
    private void ProcessTraceroute(string targetNameOrAddress);
    private void ProcessMTUSize(string targetNameOrAddress);
    private void ProcessPing(string targetNameOrAddress);
    private bool TryResolveNameOrAddress(string targetNameOrAddress, String& resolvedTargetName, IPAddress& targetAddress);
    private IPHostEntry GetCancellableHostEntry(string targetNameOrAddress);
    private IPAddress GetHostAddress(IPHostEntry hostEntry);
    private static Byte[] GetSendBuffer(int bufferSize);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private PingReply SendCancellablePing(IPAddress targetAddress, int timeout, Byte[] buffer, PingOptions pingOptions, Stopwatch timer);
    protected virtual override void Finalize();
}
[CmdletAttribute("Test", "Path")]
[OutputTypeAttribute("System.Boolean")]
public class Microsoft.PowerShell.Commands.TestPathCommand : CoreCommandWithCredentialsBase {
    [CompilerGeneratedAttribute]
private TestPathType <PathType>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IsValid>k__BackingField;
    private String[] _paths;
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TestPathType PathType { get; public set; }
    [ParameterAttribute]
public SwitchParameter IsValid { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    [CompilerGeneratedAttribute]
public TestPathType get_PathType();
    [CompilerGeneratedAttribute]
public void set_PathType(TestPathType value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.TestPathType : Enum {
    public int value__;
    public static TestPathType Any;
    public static TestPathType Container;
    public static TestPathType Leaf;
}
internal static class Microsoft.PowerShell.Commands.TimeZoneHelper : object {
    internal static string TimeZoneNotFoundError;
    internal static string MultipleMatchingTimeZonesError;
    internal static string InsufficientPermissionsError;
    internal static string SetTimeZoneFailedError;
    internal static TimeZoneInfo[] LookupSystemTimeZoneInfoByName(string name);
}
public enum Microsoft.PowerShell.Commands.WaitForServiceTypes : Enum {
    public int value__;
    public static WaitForServiceTypes Wmi;
    public static WaitForServiceTypes WinRM;
    public static WaitForServiceTypes PowerShell;
}
[CmdletAttribute("Wait", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.WaitProcessCommand : ProcessBaseCommand {
    [CompilerGeneratedAttribute]
private SwitchParameter <Any>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    private int _timeout;
    private bool _timeOutSpecified;
    private bool _disposed;
    private List`1<Process> _processList;
    private ManualResetEvent _waitHandle;
    private int _numberOfProcessesToWaitFor;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Timeout { get; public set; }
    [ParameterAttribute]
public SwitchParameter Any { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public int get_Timeout();
    public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Any();
    [CompilerGeneratedAttribute]
public void set_Any(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    public void Dispose();
    private void myProcess_Exited(object sender, EventArgs e);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
public enum Microsoft.PowerShell.Commands.WakeUpType : Enum {
    public int value__;
    public static WakeUpType Other;
    public static WakeUpType Unknown;
    public static WakeUpType APMTimer;
    public static WakeUpType ModemRing;
    public static WakeUpType LANRemote;
    public static WakeUpType PowerSwitch;
    public static WakeUpType PCIPME;
    public static WakeUpType ACPowerRestored;
}
internal class Microsoft.PowerShell.Commands.WmiBaseBoard : object {
    public string Caption;
    public String[] ConfigOptions;
    public Nullable`1<float> Depth;
    public string Description;
    public Nullable`1<float> Height;
    public Nullable`1<bool> HostingBoard;
    public Nullable`1<bool> HotSwappable;
    public Nullable`1<DateTime> InstallDate;
    public string Manufacturer;
    public string Model;
    public string Name;
    public string OtherIdentifyingInfo;
    public string PartNumber;
    public Nullable`1<bool> PoweredOn;
    public string Product;
    public Nullable`1<bool> Removable;
    public Nullable`1<bool> Replaceable;
    public string RequirementsDescription;
    public Nullable`1<bool> RequiresDaughterBoard;
    public string SerialNumber;
    public string SKU;
    public string SlotLayout;
    public Nullable`1<bool> SpecialRequirements;
    public string Status;
    public string Tag;
    public string Version;
    public Nullable`1<float> Weight;
    public Nullable`1<float> Width;
}
internal class Microsoft.PowerShell.Commands.WmiBios : WmiClassBase {
    public UInt16[] BiosCharacteristics;
    public String[] BIOSVersion;
    public string BuildNumber;
    public string Caption;
    public string CodeSet;
    public string CurrentLanguage;
    public string Description;
    public Nullable`1<byte> EmbeddedControllerMajorVersion;
    public Nullable`1<byte> EmbeddedControllerMinorVersion;
    public string IdentificationCode;
    public Nullable`1<ushort> InstallableLanguages;
    public Nullable`1<DateTime> InstallDate;
    public string LanguageEdition;
    public String[] ListOfLanguages;
    public string Manufacturer;
    public string Name;
    public string OtherTargetOS;
    public Nullable`1<bool> PrimaryBIOS;
    public Nullable`1<DateTime> ReleaseDate;
    public string SerialNumber;
    public string SMBIOSBIOSVersion;
    public Nullable`1<ushort> SMBIOSMajorVersion;
    public Nullable`1<ushort> SMBIOSMinorVersion;
    public Nullable`1<bool> SMBIOSPresent;
    public Nullable`1<ushort> SoftwareElementState;
    public string Status;
    public Nullable`1<byte> SystemBiosMajorVersion;
    public Nullable`1<byte> SystemBiosMinorVersion;
    public Nullable`1<ushort> TargetOperatingSystem;
    public string Version;
}
internal abstract class Microsoft.PowerShell.Commands.WmiClassBase : object {
    protected static string GetLanguageName(Nullable`1<UInt32> lcid);
}
internal class Microsoft.PowerShell.Commands.WmiComputerSystem : object {
    public Nullable`1<ushort> AdminPasswordStatus;
    public Nullable`1<bool> AutomaticManagedPagefile;
    public Nullable`1<bool> AutomaticResetBootOption;
    public Nullable`1<bool> AutomaticResetCapability;
    public Nullable`1<ushort> BootOptionOnLimit;
    public Nullable`1<ushort> BootOptionOnWatchDog;
    public Nullable`1<bool> BootROMSupported;
    public string BootupState;
    public UInt16[] BootStatus;
    public string Caption;
    public Nullable`1<ushort> ChassisBootupState;
    public string ChassisSKUNumber;
    public Nullable`1<short> CurrentTimeZone;
    public Nullable`1<bool> DaylightInEffect;
    public string Description;
    public string DNSHostName;
    public string Domain;
    public Nullable`1<ushort> DomainRole;
    public Nullable`1<bool> EnableDaylightSavingsTime;
    public Nullable`1<ushort> FrontPanelResetStatus;
    public Nullable`1<bool> HypervisorPresent;
    public Nullable`1<bool> InfraredSupported;
    public string InitialLoadInfo;
    public Nullable`1<DateTime> InstallDate;
    public Nullable`1<ushort> KeyboardPasswordStatus;
    public string LastLoadInfo;
    public string Manufacturer;
    public string Model;
    public string Name;
    public Nullable`1<bool> NetworkServerModeEnabled;
    public Nullable`1<UInt32> NumberOfLogicalProcessors;
    public Nullable`1<UInt32> NumberOfProcessors;
    public String[] OEMStringArray;
    public Nullable`1<bool> PartOfDomain;
    public Nullable`1<long> PauseAfterReset;
    public Nullable`1<ushort> PCSystemType;
    public Nullable`1<ushort> PCSystemTypeEx;
    public UInt16[] PowerManagementCapabilities;
    public Nullable`1<bool> PowerManagementSupported;
    public Nullable`1<ushort> PowerOnPasswordStatus;
    public Nullable`1<ushort> PowerState;
    public Nullable`1<ushort> PowerSupplyState;
    public string PrimaryOwnerContact;
    public string PrimaryOwnerName;
    public Nullable`1<ushort> ResetCapability;
    public Nullable`1<short> ResetCount;
    public Nullable`1<short> ResetLimit;
    public String[] Roles;
    public string Status;
    public String[] SupportContactDescription;
    public string SystemFamily;
    public string SystemSKUNumber;
    public string SystemType;
    public Nullable`1<ushort> ThermalState;
    public Nullable`1<ulong> TotalPhysicalMemory;
    public string UserName;
    public Nullable`1<ushort> WakeUpType;
    public string Workgroup;
    public PowerManagementCapabilities[] GetPowerManagementCapabilities();
}
internal class Microsoft.PowerShell.Commands.WmiDeviceGuard : object {
    public UInt32[] AvailableSecurityProperties;
    public Nullable`1<UInt32> CodeIntegrityPolicyEnforcementStatus;
    public Nullable`1<UInt32> UsermodeCodeIntegrityPolicyEnforcementStatus;
    public UInt32[] RequiredSecurityProperties;
    public UInt32[] SecurityServicesConfigured;
    public UInt32[] SecurityServicesRunning;
    public Nullable`1<UInt32> VirtualizationBasedSecurityStatus;
    public DeviceGuard AsOutputType { get; }
    public DeviceGuard get_AsOutputType();
}
internal class Microsoft.PowerShell.Commands.WmiKeyboard : object {
    public Nullable`1<ushort> Availability;
    public string Caption;
    public Nullable`1<UInt32> ConfigManagerErrorCode;
    public Nullable`1<bool> ConfigManagerUserConfig;
    public string Description;
    public string DeviceID;
    public Nullable`1<bool> ErrorCleared;
    public string ErrorDescription;
    public Nullable`1<DateTime> InstallDate;
    public Nullable`1<bool> IsLocked;
    public Nullable`1<UInt32> LastErrorCode;
    public string Layout;
    public string Name;
    public Nullable`1<ushort> NumberOfFunctionKeys;
    public Nullable`1<ushort> Password;
    public string PNPDeviceID;
    public UInt16[] PowerManagementCapabilities;
    public Nullable`1<bool> PowerManagementSupported;
    public string Status;
    public Nullable`1<ushort> StatusInfo;
    public string SystemCreationClassName;
    public string SystemName;
}
internal class Microsoft.PowerShell.Commands.WMiLogicalMemory : object {
    public Nullable`1<UInt32> TotalPhysicalMemory;
}
internal class Microsoft.PowerShell.Commands.WmiMsftNetAdapter : object {
    public string Caption;
    public string Description;
    public Nullable`1<DateTime> InstallDate;
    public string Name;
    public string Status;
    public Nullable`1<ushort> Availability;
    public Nullable`1<UInt32> ConfigManagerErrorCode;
    public Nullable`1<bool> ConfigManagerUserConfig;
    public string DeviceID;
    public Nullable`1<bool> ErrorCleared;
    public string ErrorDescription;
    public Nullable`1<UInt32> LastErrorCode;
    public string PNPDeviceID;
    public UInt16[] PowerManagementCapabilities;
    public Nullable`1<bool> PowerManagementSupported;
    public Nullable`1<ushort> StatusInfo;
    public string SystemCreationClassName;
    public string SystemName;
    public Nullable`1<ulong> Speed;
    public Nullable`1<ulong> MaxSpeed;
    public Nullable`1<ulong> RequestedSpeed;
    public Nullable`1<ushort> UsageRestriction;
    public Nullable`1<ushort> PortType;
    public string OtherPortType;
    public string OtherNetworkPortType;
    public Nullable`1<ushort> PortNumber;
    public Nullable`1<ushort> LinkTechnology;
    public string OtherLinkTechnology;
    public string PermanentAddress;
    public String[] NetworkAddresses;
    public Nullable`1<bool> FullDuplex;
    public Nullable`1<bool> AutoSense;
    public Nullable`1<ulong> SupportedMaximumTransmissionUnit;
    public Nullable`1<ulong> ActiveMaximumTransmissionUnit;
    public string InterfaceDescription;
    public string InterfaceName;
    public Nullable`1<ulong> NetLuid;
    public string InterfaceGuid;
    public Nullable`1<UInt32> InterfaceIndex;
    public string DeviceName;
    public Nullable`1<UInt32> NetLuidIndex;
    public Nullable`1<bool> Virtual;
    public Nullable`1<bool> Hidden;
    public Nullable`1<bool> NotUserRemovable;
    public Nullable`1<bool> IMFilter;
    public Nullable`1<UInt32> InterfaceType;
    public Nullable`1<bool> HardwareInterface;
    public Nullable`1<bool> WdmInterface;
    public Nullable`1<bool> EndPointInterface;
    public Nullable`1<bool> iSCSIInterface;
    public Nullable`1<UInt32> State;
    public Nullable`1<UInt32> NdisMedium;
    public Nullable`1<UInt32> NdisPhysicalMedium;
    public Nullable`1<UInt32> InterfaceOperationalStatus;
    public Nullable`1<bool> OperationalStatusDownDefaultPortNotAuthenticated;
    public Nullable`1<bool> OperationalStatusDownMediaDisconnected;
    public Nullable`1<bool> OperationalStatusDownInterfacePaused;
    public Nullable`1<bool> OperationalStatusDownLowPowerState;
    public Nullable`1<UInt32> InterfaceAdminStatus;
    public Nullable`1<UInt32> MediaConnectState;
    public Nullable`1<UInt32> MtuSize;
    public Nullable`1<ushort> VlanID;
    public Nullable`1<ulong> TransmitLinkSpeed;
    public Nullable`1<ulong> ReceiveLinkSpeed;
    public Nullable`1<bool> PromiscuousMode;
    public Nullable`1<bool> DeviceWakeUpEnable;
    public Nullable`1<bool> ConnectorPresent;
    public Nullable`1<UInt32> MediaDuplexState;
    public string DriverDate;
    public Nullable`1<ulong> DriverDateData;
    public string DriverVersionString;
    public string DriverName;
    public string DriverDescription;
    public Nullable`1<ushort> MajorDriverVersion;
    public Nullable`1<ushort> MinorDriverVersion;
    public Nullable`1<byte> DriverMajorNdisVersion;
    public Nullable`1<byte> DriverMinorNdisVersion;
    public string PnPDeviceID;
    public string DriverProvider;
    public string ComponentID;
    public UInt32[] LowerLayerInterfaceIndices;
    public UInt32[] HigherLayerInterfaceIndices;
    public Nullable`1<bool> AdminLocked;
}
internal class Microsoft.PowerShell.Commands.WmiNetworkAdapter : object {
    public string AdapterType;
    public Nullable`1<ushort> AdapterTypeID;
    public Nullable`1<bool> AutoSense;
    public Nullable`1<ushort> Availability;
    public string Caption;
    public Nullable`1<UInt32> ConfigManagerErrorCode;
    public Nullable`1<bool> ConfigManagerUserConfig;
    public string Description;
    public string DeviceID;
    public Nullable`1<bool> ErrorCleared;
    public string ErrorDescription;
    public string GUID;
    public Nullable`1<UInt32> Index;
    public Nullable`1<DateTime> InstallDate;
    public Nullable`1<bool> Installed;
    public Nullable`1<UInt32> InterfaceIndex;
    public Nullable`1<UInt32> LastErrorCode;
    public string MACAddress;
    public string Manufacturer;
    public Nullable`1<UInt32> MaxNumberControlled;
    public Nullable`1<ulong> MaxSpeed;
    public string Name;
    public string NetConnectionID;
    public Nullable`1<ushort> NetConnectionStatus;
    public Nullable`1<bool> NetEnabled;
    public String[] NetworkAddresses;
    public string PermanentAddress;
    public Nullable`1<bool> PhysicalAdapter;
    public string PNPDeviceID;
    public UInt16[] PowerManagementCapabilities;
    public Nullable`1<bool> PowerManagementSupported;
    public string ProductName;
    public string ServiceName;
    public Nullable`1<ulong> Speed;
    public string Status;
    public Nullable`1<ushort> StatusInfo;
    public string SystemCreationClassName;
    public string SystemName;
    public Nullable`1<DateTime> TimeOfLastReset;
}
internal class Microsoft.PowerShell.Commands.WmiNetworkAdapterConfiguration : object {
    public Nullable`1<bool> ArpAlwaysSourceRoute;
    public Nullable`1<bool> ArpUseEtherSNAP;
    public string Caption;
    public string DatabasePath;
    public Nullable`1<bool> DeadGWDetectEnabled;
    public String[] DefaultIPGateway;
    public Nullable`1<byte> DefaultTOS;
    public Nullable`1<byte> DefaultTTL;
    public string Description;
    public Nullable`1<bool> DHCPEnabled;
    public Nullable`1<DateTime> DHCPLeaseExpires;
    public Nullable`1<DateTime> DHCPLeaseObtained;
    public string DHCPServer;
    public string DNSDomain;
    public String[] DNSDomainSuffixSearchOrder;
    public Nullable`1<bool> DNSEnabledForWINSResolution;
    public string DNSHostName;
    public String[] DNSServerSearchOrder;
    public Nullable`1<bool> DomainDNSRegistrationEnabled;
    public Nullable`1<UInt32> ForwardBufferMemory;
    public Nullable`1<bool> FullDNSRegistrationEnabled;
    public UInt16[] GatewayCostMetric;
    public Nullable`1<byte> IGMPLevel;
    public Nullable`1<UInt32> Index;
    public Nullable`1<UInt32> InterfaceIndex;
    public String[] IPAddress;
    public Nullable`1<UInt32> IPConnectionMetric;
    public Nullable`1<bool> IPEnabled;
    public Nullable`1<bool> IPFilterSecurityEnabled;
    public Nullable`1<bool> IPPortSecurityEnabled;
    public String[] IPSecPermitIPProtocols;
    public String[] IPSecPermitTCPPorts;
    public String[] IPSecPermitUDPPorts;
    public String[] IPSubnet;
    public Nullable`1<bool> IPUseZeroBroadcast;
    public string IPXAddress;
    public Nullable`1<bool> IPXEnabled;
    public UInt32[] IPXFrameType;
    public Nullable`1<UInt32> IPXMediaType;
    public String[] IPXNetworkNumber;
    public string IPXVirtualNetNumber;
    public Nullable`1<UInt32> KeepAliveInterval;
    public Nullable`1<UInt32> KeepAliveTime;
    public string MACAddress;
    public Nullable`1<UInt32> MTU;
    public Nullable`1<UInt32> NumForwardPackets;
    public Nullable`1<bool> PMTUBHDetectEnabled;
    public Nullable`1<bool> PMTUDiscoveryEnabled;
    public string ServiceName;
    public string SettingID;
    public Nullable`1<UInt32> TcpipNetbiosOptions;
    public Nullable`1<UInt32> TcpMaxConnectRetransmissions;
    public Nullable`1<UInt32> TcpMaxDataRetransmissions;
    public Nullable`1<UInt32> TcpNumConnections;
    public Nullable`1<bool> TcpUseRFC1122UrgentPointer;
    public Nullable`1<ushort> TcpWindowSize;
    public Nullable`1<bool> WINSEnableLMHostsLookup;
    public string WINSHostLookupFile;
    public string WINSPrimaryServer;
    public string WINSScopeID;
    public string WINSSecondaryServer;
}
internal class Microsoft.PowerShell.Commands.WmiOperatingSystem : WmiClassBase {
    public string BootDevice;
    public string BuildNumber;
    public string BuildType;
    public string Caption;
    public string CodeSet;
    public string CountryCode;
    public string CSDVersion;
    public string CSName;
    public Nullable`1<short> CurrentTimeZone;
    public Nullable`1<bool> DataExecutionPrevention_Available;
    public Nullable`1<bool> DataExecutionPrevention_32BitApplications;
    public Nullable`1<bool> DataExecutionPrevention_Drivers;
    public Nullable`1<byte> DataExecutionPrevention_SupportPolicy;
    public Nullable`1<bool> Debug;
    public string Description;
    public Nullable`1<bool> Distributed;
    public Nullable`1<UInt32> EncryptionLevel;
    public Nullable`1<byte> ForegroundApplicationBoost;
    public Nullable`1<ulong> FreePhysicalMemory;
    public Nullable`1<ulong> FreeSpaceInPagingFiles;
    public Nullable`1<ulong> FreeVirtualMemory;
    public Nullable`1<DateTime> InstallDate;
    public Nullable`1<DateTime> LastBootUpTime;
    public Nullable`1<DateTime> LocalDateTime;
    public string Locale;
    public string Manufacturer;
    public Nullable`1<UInt32> MaxNumberOfProcesses;
    public Nullable`1<ulong> MaxProcessMemorySize;
    public String[] MUILanguages;
    public string Name;
    public Nullable`1<UInt32> NumberOfLicensedUsers;
    public Nullable`1<UInt32> NumberOfProcesses;
    public Nullable`1<UInt32> NumberOfUsers;
    public Nullable`1<UInt32> OperatingSystemSKU;
    public string Organization;
    public string OSArchitecture;
    public Nullable`1<UInt32> OSLanguage;
    public Nullable`1<UInt32> OSProductSuite;
    public Nullable`1<ushort> OSType;
    public string OtherTypeDescription;
    public Nullable`1<bool> PAEEnabled;
    public Nullable`1<bool> PortableOperatingSystem;
    public Nullable`1<bool> Primary;
    public Nullable`1<UInt32> ProductType;
    public string RegisteredUser;
    public string SerialNumber;
    public Nullable`1<ushort> ServicePackMajorVersion;
    public Nullable`1<ushort> ServicePackMinorVersion;
    public Nullable`1<ulong> SizeStoredInPagingFiles;
    public string Status;
    public Nullable`1<UInt32> SuiteMask;
    public string SystemDevice;
    public string SystemDirectory;
    public string SystemDrive;
    public Nullable`1<ulong> TotalSwapSpaceSize;
    public Nullable`1<ulong> TotalVirtualMemorySize;
    public Nullable`1<ulong> TotalVisibleMemorySize;
    public string Version;
    public string WindowsDirectory;
    public string LanguageName { get; }
    public OSProductSuite[] ProductSuites { get; }
    public OSProductSuite[] Suites { get; }
    public string get_LanguageName();
    public OSProductSuite[] get_ProductSuites();
    public OSProductSuite[] get_Suites();
    public string GetLocale();
    private static OSProductSuite[] MakeProductSuites(Nullable`1<UInt32> suiteMask);
}
internal class Microsoft.PowerShell.Commands.WmiPageFileUsage : object {
    public Nullable`1<UInt32> AllocatedBaseSize;
    public string Caption;
    public Nullable`1<UInt32> CurrentUsage;
    public string Description;
    public Nullable`1<DateTime> InstallDate;
    public string Name;
    public Nullable`1<UInt32> PeakUsage;
    public string Status;
    public Nullable`1<bool> TempPageFile;
}
internal class Microsoft.PowerShell.Commands.WmiProcessor : object {
    public Nullable`1<ushort> AddressWidth;
    public Nullable`1<ushort> Architecture;
    public string AssetTag;
    public Nullable`1<ushort> Availability;
    public string Caption;
    public Nullable`1<UInt32> Characteristics;
    public Nullable`1<UInt32> ConfigManagerErrorCode;
    public Nullable`1<bool> ConfigManagerUserConfig;
    public Nullable`1<ushort> CpuStatus;
    public Nullable`1<UInt32> CurrentClockSpeed;
    public Nullable`1<ushort> CurrentVoltage;
    public Nullable`1<ushort> DataWidth;
    public string Description;
    public string DeviceID;
    public Nullable`1<bool> ErrorCleared;
    public string ErrorDescription;
    public Nullable`1<UInt32> ExtClock;
    public Nullable`1<ushort> Family;
    public Nullable`1<DateTime> InstallDate;
    public Nullable`1<UInt32> L2CacheSize;
    public Nullable`1<UInt32> L2CacheSpeed;
    public Nullable`1<UInt32> L3CacheSize;
    public Nullable`1<UInt32> L3CacheSpeed;
    public Nullable`1<UInt32> LastErrorCode;
    public Nullable`1<ushort> Level;
    public Nullable`1<ushort> LoadPercentage;
    public string Manufacturer;
    public Nullable`1<UInt32> MaxClockSpeed;
    public string Name;
    public Nullable`1<UInt32> NumberOfCores;
    public Nullable`1<UInt32> NumberOfEnabledCore;
    public Nullable`1<UInt32> NumberOfLogicalProcessors;
    public string OtherFamilyDescription;
    public string PartNumber;
    public string PNPDeviceID;
    public UInt16[] PowerManagementCapabilities;
    public Nullable`1<bool> PowerManagementSupported;
    public string ProcessorId;
    public Nullable`1<ushort> ProcessorType;
    public Nullable`1<ushort> Revision;
    public string Role;
    public Nullable`1<bool> SecondLevelAddressTranslationExtensions;
    public string SerialNumber;
    public string SocketDesignation;
    public string Status;
    public Nullable`1<ushort> StatusInfo;
    public string Stepping;
    public string SystemName;
    public Nullable`1<UInt32> ThreadCount;
    public string UniqueId;
    public Nullable`1<ushort> UpgradeMethod;
    public string Version;
    public Nullable`1<bool> VirtualizationFirmwareEnabled;
    public Nullable`1<bool> VMMonitorModeExtensions;
    public Nullable`1<UInt32> VoltageCaps;
}
public class Microsoft.PowerShell.Commands.WriteContentCommandBase : PassThroughContentCommandBase {
    private Object[] _content;
    private bool _pipingPaths;
    private bool _contentWritersOpen;
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
public Object[] Value { get; public set; }
    public Object[] get_Value();
    public void set_Value(Object[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    internal virtual void SeekContentPosition(List`1<ContentHolder> contentHolders);
    internal virtual void BeforeOpenStreams(String[] paths);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    internal List`1<ContentHolder> GetContentWriters(String[] writerPaths, CmdletProviderContext currentCommandContext);
    private String[] GetAcceptedPaths(String[] unfilteredPaths, CmdletProviderContext currentContext);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NavigationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DeleteHasChildrenPrompt { get; }
    internal static string DeletePrompt { get; }
    internal static string CopyToExistingPrompt { get; }
    internal static string NewDriveConfirmAction { get; }
    internal static string NewDriveConfirmResourceTemplate { get; }
    internal static string RemoveDriveConfirmAction { get; }
    internal static string RemoveDriveConfirmResourceTemplate { get; }
    internal static string RemoveDriveInUse { get; }
    internal static string RemoveItemWithChildren { get; }
    internal static string RemoveItemInUse { get; }
    internal static string ItemNotFound { get; }
    internal static string SetContentAction { get; }
    internal static string SetContentTarget { get; }
    internal static string AddContentAction { get; }
    internal static string AddContentTarget { get; }
    internal static string MoveItemDoesntExist { get; }
    internal static string MoveItemInUse { get; }
    internal static string RenameItemDoesntExist { get; }
    internal static string RenamedItemInUse { get; }
    internal static string ParsePathFormatError { get; }
    internal static string CreateAction { get; }
    internal static string RollbackAction { get; }
    internal static string CommitAction { get; }
    internal static string TransactionResource { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DeleteHasChildrenPrompt();
    internal static string get_DeletePrompt();
    internal static string get_CopyToExistingPrompt();
    internal static string get_NewDriveConfirmAction();
    internal static string get_NewDriveConfirmResourceTemplate();
    internal static string get_RemoveDriveConfirmAction();
    internal static string get_RemoveDriveConfirmResourceTemplate();
    internal static string get_RemoveDriveInUse();
    internal static string get_RemoveItemWithChildren();
    internal static string get_RemoveItemInUse();
    internal static string get_ItemNotFound();
    internal static string get_SetContentAction();
    internal static string get_SetContentTarget();
    internal static string get_AddContentAction();
    internal static string get_AddContentTarget();
    internal static string get_MoveItemDoesntExist();
    internal static string get_MoveItemInUse();
    internal static string get_RenameItemDoesntExist();
    internal static string get_RenamedItemInUse();
    internal static string get_ParsePathFormatError();
    internal static string get_CreateAction();
    internal static string get_RollbackAction();
    internal static string get_CommitAction();
    internal static string get_TransactionResource();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProcessCommandHelpResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GetProcessShortDescription { get; }
    internal static string GetProcessDetailedDescription { get; }
    internal static string GetProcessNote1 { get; }
    internal static string GetProcessExample1Description { get; }
    internal static string GetProcessExample2Description { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GetProcessShortDescription();
    internal static string get_GetProcessDetailedDescription();
    internal static string get_GetProcessNote1();
    internal static string get_GetProcessExample1Description();
    internal static string get_GetProcessExample2Description();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProcessResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoProcessFoundForGivenName { get; }
    internal static string RecommendIdTagForGivenName { get; }
    internal static string NoDebuggerFound { get; }
    internal static string NoProcessFoundForGivenId { get; }
    internal static string CouldNotStopProcess { get; }
    internal static string ProcessNameForConfirmation { get; }
    internal static string StartProcessTarget { get; }
    internal static string CouldNotEnumerateModules { get; }
    internal static string CouldNotEnumerateFileVer { get; }
    internal static string CouldNotEnumerateModuleFileVer { get; }
    internal static string ConfirmStopProcess { get; }
    internal static string UseShell { get; }
    internal static string ProcessIsNotTerminated { get; }
    internal static string RedirectionParams { get; }
    internal static string NoComputerNameWithFileVersion { get; }
    internal static string DebuggerError { get; }
    internal static string WaitOnIdleProcess { get; }
    internal static string WaitOnItself { get; }
    internal static string ProcessNotTerminated { get; }
    internal static string InvalidStartProcess { get; }
    internal static string InvalidApplication { get; }
    internal static string InvalidInput { get; }
    internal static string DuplicateEntry { get; }
    internal static string CannotStarttheProcess { get; }
    internal static string FailedToCreateProcessObject { get; }
    internal static string InvalidUserError { get; }
    internal static string JoinNetworkFailed { get; }
    internal static string RemoveFailed { get; }
    internal static string RenameFailed { get; }
    internal static string ContradictParametersSpecified { get; }
    internal static string IncludeUserNameRequiresElevation { get; }
    internal static string CouldNotDebugProcess { get; }
    internal static string AttachDebuggerReturnCode2 { get; }
    internal static string AttachDebuggerReturnCode21 { get; }
    internal static string AttachDebuggerReturnCode3 { get; }
    internal static string AttachDebuggerReturnCode8 { get; }
    internal static string AttachDebuggerReturnCode9 { get; }
    internal static string ParameterNotSupported { get; }
    internal static string ParameterNotSupportedOnPSEdition { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoProcessFoundForGivenName();
    internal static string get_RecommendIdTagForGivenName();
    internal static string get_NoDebuggerFound();
    internal static string get_NoProcessFoundForGivenId();
    internal static string get_CouldNotStopProcess();
    internal static string get_ProcessNameForConfirmation();
    internal static string get_StartProcessTarget();
    internal static string get_CouldNotEnumerateModules();
    internal static string get_CouldNotEnumerateFileVer();
    internal static string get_CouldNotEnumerateModuleFileVer();
    internal static string get_ConfirmStopProcess();
    internal static string get_UseShell();
    internal static string get_ProcessIsNotTerminated();
    internal static string get_RedirectionParams();
    internal static string get_NoComputerNameWithFileVersion();
    internal static string get_DebuggerError();
    internal static string get_WaitOnIdleProcess();
    internal static string get_WaitOnItself();
    internal static string get_ProcessNotTerminated();
    internal static string get_InvalidStartProcess();
    internal static string get_InvalidApplication();
    internal static string get_InvalidInput();
    internal static string get_DuplicateEntry();
    internal static string get_CannotStarttheProcess();
    internal static string get_FailedToCreateProcessObject();
    internal static string get_InvalidUserError();
    internal static string get_JoinNetworkFailed();
    internal static string get_RemoveFailed();
    internal static string get_RenameFailed();
    internal static string get_ContradictParametersSpecified();
    internal static string get_IncludeUserNameRequiresElevation();
    internal static string get_CouldNotDebugProcess();
    internal static string get_AttachDebuggerReturnCode2();
    internal static string get_AttachDebuggerReturnCode21();
    internal static string get_AttachDebuggerReturnCode3();
    internal static string get_AttachDebuggerReturnCode8();
    internal static string get_AttachDebuggerReturnCode9();
    internal static string get_ParameterNotSupported();
    internal static string get_ParameterNotSupportedOnPSEdition();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ServiceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ServiceNameForConfirmation { get; }
    internal static string NoServiceFoundForGivenName { get; }
    internal static string NoServiceFoundForGivenDisplayName { get; }
    internal static string ServiceHasDependentServices { get; }
    internal static string ServiceHasDependentServicesNoForce { get; }
    internal static string CouldNotStopService { get; }
    internal static string CouldNotStartService { get; }
    internal static string CouldNotSuspendService { get; }
    internal static string CouldNotSuspendServiceNotSupported { get; }
    internal static string CouldNotSuspendServiceNotRunning { get; }
    internal static string CouldNotResumeService { get; }
    internal static string CouldNotResumeServiceNotSupported { get; }
    internal static string CouldNotResumeServiceNotRunning { get; }
    internal static string CouldNotSetService { get; }
    internal static string CouldNotGetServiceInfo { get; }
    internal static string CouldNotSetServiceDescription { get; }
    internal static string CouldNotSetServiceDelayedAutoStart { get; }
    internal static string CouldNotSetServiceSecurityDescriptorSddl { get; }
    internal static string CouldNotNewService { get; }
    internal static string CouldNotNewServiceDescription { get; }
    internal static string CouldNotNewServiceDelayedAutoStart { get; }
    internal static string CouldNotRemoveService { get; }
    internal static string CouldNotAccessDependentServices { get; }
    internal static string StartingService { get; }
    internal static string StoppingService { get; }
    internal static string SuspendingService { get; }
    internal static string ResumingService { get; }
    internal static string StartServiceFailed { get; }
    internal static string StopServiceFailed { get; }
    internal static string SuspendServiceFailed { get; }
    internal static string ResumeServiceFailed { get; }
    internal static string FailToOpenServiceControlManager { get; }
    internal static string UnsupportedStartupType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ServiceNameForConfirmation();
    internal static string get_NoServiceFoundForGivenName();
    internal static string get_NoServiceFoundForGivenDisplayName();
    internal static string get_ServiceHasDependentServices();
    internal static string get_ServiceHasDependentServicesNoForce();
    internal static string get_CouldNotStopService();
    internal static string get_CouldNotStartService();
    internal static string get_CouldNotSuspendService();
    internal static string get_CouldNotSuspendServiceNotSupported();
    internal static string get_CouldNotSuspendServiceNotRunning();
    internal static string get_CouldNotResumeService();
    internal static string get_CouldNotResumeServiceNotSupported();
    internal static string get_CouldNotResumeServiceNotRunning();
    internal static string get_CouldNotSetService();
    internal static string get_CouldNotGetServiceInfo();
    internal static string get_CouldNotSetServiceDescription();
    internal static string get_CouldNotSetServiceDelayedAutoStart();
    internal static string get_CouldNotSetServiceSecurityDescriptorSddl();
    internal static string get_CouldNotNewService();
    internal static string get_CouldNotNewServiceDescription();
    internal static string get_CouldNotNewServiceDelayedAutoStart();
    internal static string get_CouldNotRemoveService();
    internal static string get_CouldNotAccessDependentServices();
    internal static string get_StartingService();
    internal static string get_StoppingService();
    internal static string get_SuspendingService();
    internal static string get_ResumingService();
    internal static string get_StartServiceFailed();
    internal static string get_StopServiceFailed();
    internal static string get_SuspendServiceFailed();
    internal static string get_ResumeServiceFailed();
    internal static string get_FailToOpenServiceControlManager();
    internal static string get_UnsupportedStartupType();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TestConnectionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoPingResult { get; }
    internal static string CannotResolveTargetName { get; }
    internal static string TargetAddressAbsent { get; }
    internal static string MaxHopsExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoPingResult();
    internal static string get_CannotResolveTargetName();
    internal static string get_TargetAddressAbsent();
    internal static string get_MaxHopsExceeded();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TestPathResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PathIsNullOrEmptyCollection { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PathIsNullOrEmptyCollection();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TimeZoneResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MultipleMatchingTimeZones { get; }
    internal static string TimeZoneNameNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MultipleMatchingTimeZones();
    internal static string get_TimeZoneNameNotFound();
}
