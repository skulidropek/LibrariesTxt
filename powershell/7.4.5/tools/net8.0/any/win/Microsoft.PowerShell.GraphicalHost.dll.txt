[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class GraphicalHostResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string OutGridViewWindowObjectName { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_OutGridViewWindowObjectName();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class HelpWindowResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CancelText { get; }
    public static string CaseSensitiveTitle { get; }
    public static string CommonParameters { get; }
    public static string DescriptionTitle { get; }
    public static string ExamplesTitle { get; }
    public static string FindText { get; }
    public static string HelpSectionsTitle { get; }
    public static string HelpTitleFormat { get; }
    public static string InputsTitle { get; }
    public static string LinkTextFormat { get; }
    public static string MethodsTitle { get; }
    public static string NextText { get; }
    public static string NoMatches { get; }
    public static string NotesTitle { get; }
    public static string OKText { get; }
    public static string OneMatch { get; }
    public static string OutputsTitle { get; }
    public static string ParameterAcceptWildcard { get; }
    public static string ParameterDefaultValue { get; }
    public static string ParameterPipelineInput { get; }
    public static string ParameterPosition { get; }
    public static string ParameterRequired { get; }
    public static string ParametersTitle { get; }
    public static string PreviousText { get; }
    public static string PropertiesTitle { get; }
    public static string RelatedLinksTitle { get; }
    public static string RemarksTitle { get; }
    public static string SearchOptionsTitle { get; }
    public static string SettingsText { get; }
    public static string SomeMatchesFormat { get; }
    public static string SynopsisTitle { get; }
    public static string SyntaxTitle { get; }
    public static string Title { get; }
    public static string WholeWordTitle { get; }
    public static string ZoomLabelTextFormat { get; }
    public static string ZoomSlider { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CancelText();
    public static string get_CaseSensitiveTitle();
    public static string get_CommonParameters();
    public static string get_DescriptionTitle();
    public static string get_ExamplesTitle();
    public static string get_FindText();
    public static string get_HelpSectionsTitle();
    public static string get_HelpTitleFormat();
    public static string get_InputsTitle();
    public static string get_LinkTextFormat();
    public static string get_MethodsTitle();
    public static string get_NextText();
    public static string get_NoMatches();
    public static string get_NotesTitle();
    public static string get_OKText();
    public static string get_OneMatch();
    public static string get_OutputsTitle();
    public static string get_ParameterAcceptWildcard();
    public static string get_ParameterDefaultValue();
    public static string get_ParameterPipelineInput();
    public static string get_ParameterPosition();
    public static string get_ParameterRequired();
    public static string get_ParametersTitle();
    public static string get_PreviousText();
    public static string get_PropertiesTitle();
    public static string get_RelatedLinksTitle();
    public static string get_RemarksTitle();
    public static string get_SearchOptionsTitle();
    public static string get_SettingsText();
    public static string get_SomeMatchesFormat();
    public static string get_SynopsisTitle();
    public static string get_SyntaxTitle();
    public static string get_Title();
    public static string get_WholeWordTitle();
    public static string get_ZoomLabelTextFormat();
    public static string get_ZoomSlider();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
internal class HelpWindowSettings : ApplicationSettingsBase {
    private static HelpWindowSettings defaultInstance;
    public static HelpWindowSettings Default { get; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpRemarksDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpSyntaxDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpExamplesDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpSynopsysDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpDescriptionDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpParametersDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpInputsDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpOutputsDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpNotesDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool HelpRelatedLinksDisplayed { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool HelpSearchMatchCase { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool HelpSearchWholeWord { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("400")]
public double HelpWindowHeight { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("600")]
public double HelpWindowWidth { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double HelpWindowTop { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double HelpWindowLeft { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool HelpWindowMaximized { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("100")]
public double HelpZoom { get; public set; }
    private static HelpWindowSettings();
    public static HelpWindowSettings get_Default();
    public bool get_HelpRemarksDisplayed();
    public void set_HelpRemarksDisplayed(bool value);
    public bool get_HelpSyntaxDisplayed();
    public void set_HelpSyntaxDisplayed(bool value);
    public bool get_HelpExamplesDisplayed();
    public void set_HelpExamplesDisplayed(bool value);
    public bool get_HelpSynopsysDisplayed();
    public void set_HelpSynopsysDisplayed(bool value);
    public bool get_HelpDescriptionDisplayed();
    public void set_HelpDescriptionDisplayed(bool value);
    public bool get_HelpParametersDisplayed();
    public void set_HelpParametersDisplayed(bool value);
    public bool get_HelpInputsDisplayed();
    public void set_HelpInputsDisplayed(bool value);
    public bool get_HelpOutputsDisplayed();
    public void set_HelpOutputsDisplayed(bool value);
    public bool get_HelpNotesDisplayed();
    public void set_HelpNotesDisplayed(bool value);
    public bool get_HelpRelatedLinksDisplayed();
    public void set_HelpRelatedLinksDisplayed(bool value);
    public bool get_HelpSearchMatchCase();
    public void set_HelpSearchMatchCase(bool value);
    public bool get_HelpSearchWholeWord();
    public void set_HelpSearchWholeWord(bool value);
    public double get_HelpWindowHeight();
    public void set_HelpWindowHeight(double value);
    public double get_HelpWindowWidth();
    public void set_HelpWindowWidth(double value);
    public double get_HelpWindowTop();
    public void set_HelpWindowTop(double value);
    public double get_HelpWindowLeft();
    public void set_HelpWindowLeft(double value);
    public bool get_HelpWindowMaximized();
    public void set_HelpWindowMaximized(bool value);
    public double get_HelpZoom();
    public void set_HelpZoom(double value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class InvariantResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CannotModified { get; }
    public static string Columns { get; }
    public static string ManagementListDateTimeColumnFormatString { get; }
    public static string ManagementListDefaultColumnFormatString { get; }
    public static string ManagementListFloatColumnFormatString { get; }
    public static string ManagementListIntegerColumnFormatString { get; }
    public static string NotSupportAddingToItems { get; }
    public static string ViewSetWithType { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CannotModified();
    public static string get_Columns();
    public static string get_ManagementListDateTimeColumnFormatString();
    public static string get_ManagementListDefaultColumnFormatString();
    public static string get_ManagementListFloatColumnFormatString();
    public static string get_ManagementListIntegerColumnFormatString();
    public static string get_NotSupportAddingToItems();
    public static string get_ViewSetWithType();
}
internal static class Microsoft.Management.UI.CommonHelper : object {
    internal static void SetStartingPositionAndSize(Window target, double userSettingTop, double userSettingLeft, double userSettingWidth, double userSettingHeight, double defaultWidth, double defaultHeight, bool userSettingMaximized);
}
public class Microsoft.Management.UI.HelpWindow : Window {
    private HelpViewModel viewModel;
    internal Grid MainGrid;
    internal Grid HeaderGrid;
    internal Grid FindLabelAndTextGrid;
    internal Label FindLabel;
    internal TextBox Find;
    internal Button PreviousMatch;
    internal Button NextMatch;
    internal Label MatchCountLabel;
    internal Button Settings;
    internal ScrollViewer Scroll;
    internal RichTextBox HelpText;
    internal Paragraph DocumentParagraph;
    internal Slider ZoomSlider;
    private bool _contentLoaded;
    public static double MinimumZoom { get; }
    public static double MaximumZoom { get; }
    public static double ZoomInterval { get; }
    public HelpWindow(PSObject helpObject);
    public static double get_MinimumZoom();
    public static double get_MaximumZoom();
    public static double get_ZoomInterval();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void ReadZoomUserSetting();
    private void HandleZoomInAndZoomOut(KeyEventArgs e);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HelpDialog_Closed(object sender, EventArgs e);
    private void HelpDialog_StateChanged(object sender, EventArgs e);
    private void HelpDialog_Loaded(object sender, RoutedEventArgs e);
    private void HelpDialog_SizeChanged(object sender, SizeChangedEventArgs e);
    private void HelpDialog_LocationChanged(object sender, EventArgs e);
    private void Settings_Click(object sender, RoutedEventArgs e);
    private void PreviousMatch_Click(object sender, RoutedEventArgs e);
    private void NextMatch_Click(object sender, RoutedEventArgs e);
    private void MoveToNextMatch(bool forward);
    private void MoveToRun(Run run);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.AddFilterRulePicker : Control {
    private ObservableCollection`1<AddFilterRulePickerItem> shortcutFilterRules;
    private ObservableCollection`1<AddFilterRulePickerItem> columnFilterRules;
    public static RoutedCommand CancelAddFilterRulesCommand;
    public static RoutedCommand OkAddFilterRulesCommand;
    public static DependencyProperty AddFilterRulesCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ICommand>> AddFilterRulesCommandChanged;
    public static DependencyProperty AddFilterRulesCommandTargetProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<IInputElement>> AddFilterRulesCommandTargetChanged;
    public static DependencyProperty IsOpenProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsOpenChanged;
    public ObservableCollection`1<AddFilterRulePickerItem> ShortcutFilterRules { get; }
    public ObservableCollection`1<AddFilterRulePickerItem> ColumnFilterRules { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the command used to communicate that the action has occurred.")]
[LocalizabilityAttribute]
public ICommand AddFilterRulesCommand { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a target of the Command.")]
[LocalizabilityAttribute]
public IInputElement AddFilterRulesCommandTarget { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the Popup is visible.")]
[LocalizabilityAttribute]
public bool IsOpen { get; public set; }
    private static AddFilterRulePicker();
    public ObservableCollection`1<AddFilterRulePickerItem> get_ShortcutFilterRules();
    public ObservableCollection`1<AddFilterRulePickerItem> get_ColumnFilterRules();
    private static void CancelAddFilterRulesCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnCancelAddFilterRulesExecuted(ExecutedRoutedEventArgs e);
    private void OnCancelAddFilterRulesExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void OkAddFilterRulesCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void OkAddFilterRulesCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnOkAddFilterRulesCanExecute(CanExecuteRoutedEventArgs e);
    private void OnOkAddFilterRulesCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnOkAddFilterRulesExecuted(ExecutedRoutedEventArgs e);
    private void OnOkAddFilterRulesExecutedImplementation(ExecutedRoutedEventArgs e);
    public ICommand get_AddFilterRulesCommand();
    public void set_AddFilterRulesCommand(ICommand value);
    private static void AddFilterRulesCommandProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AddFilterRulesCommandChanged(EventHandler`1<PropertyChangedEventArgs`1<ICommand>> value);
    [CompilerGeneratedAttribute]
public void remove_AddFilterRulesCommandChanged(EventHandler`1<PropertyChangedEventArgs`1<ICommand>> value);
    protected virtual void OnAddFilterRulesCommandChanged(PropertyChangedEventArgs`1<ICommand> e);
    public IInputElement get_AddFilterRulesCommandTarget();
    public void set_AddFilterRulesCommandTarget(IInputElement value);
    private static void AddFilterRulesCommandTargetProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AddFilterRulesCommandTargetChanged(EventHandler`1<PropertyChangedEventArgs`1<IInputElement>> value);
    [CompilerGeneratedAttribute]
public void remove_AddFilterRulesCommandTargetChanged(EventHandler`1<PropertyChangedEventArgs`1<IInputElement>> value);
    protected virtual void OnAddFilterRulesCommandTargetChanged(PropertyChangedEventArgs`1<IInputElement> e);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    private static void IsOpenProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsOpenChanged(PropertyChangedEventArgs`1<bool> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
}
public class Microsoft.Management.UI.Internal.AddFilterRulePickerItem : object {
    private bool isChecked;
    [CompilerGeneratedAttribute]
private FilterRulePanelItem <FilterRule>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool IsChecked { get; public set; }
    public FilterRulePanelItem FilterRule { get; private set; }
    public AddFilterRulePickerItem(FilterRulePanelItem filterRule);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public FilterRulePanelItem get_FilterRule();
    [CompilerGeneratedAttribute]
private void set_FilterRule(FilterRulePanelItem value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
}
[DescriptionAttribute("Provides a System.Windows.Controls.Button control that is always visible in the automation tree.")]
public class Microsoft.Management.UI.Internal.AutomationButton : Button {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Microsoft.Management.UI.Internal.AutomationButtonAutomationPeer : ButtonAutomationPeer {
    public AutomationButtonAutomationPeer(Button owner);
    protected virtual bool IsControlElementCore();
}
public class Microsoft.Management.UI.Internal.AutomationGroup : ContentControl {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DescriptionAttribute("Provides a System.Windows.Controls.Image control that is always visible in the automation tree.")]
public class Microsoft.Management.UI.Internal.AutomationImage : Image {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Microsoft.Management.UI.Internal.AutomationImageAutomationPeer : ImageAutomationPeer {
    public AutomationImageAutomationPeer(Image owner);
    protected virtual bool IsControlElementCore();
}
[DescriptionAttribute("Provides a System.Windows.Controls.TextBlock control that is always visible in the automation tree.")]
public class Microsoft.Management.UI.Internal.AutomationTextBlock : TextBlock {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer : TextBlockAutomationPeer {
    public AutomationTextBlockAutomationPeer(TextBlock owner);
    protected virtual bool IsControlElementCore();
    protected virtual string GetClassNameCore();
}
internal static class Microsoft.Management.UI.Internal.BooleanBoxes : object {
    private static object trueBox;
    private static object falseBox;
    internal static object TrueBox { get; }
    internal static object FalseBox { get; }
    private static BooleanBoxes();
    internal static object get_TrueBox();
    internal static object get_FalseBox();
    internal static object Box(bool value);
}
public class Microsoft.Management.UI.Internal.ColumnPicker : Window {
    private ObservableCollection`1<InnerListColumn> notSelectedColumns;
    private ObservableCollection`1<InnerListColumn> selectedColumns;
    internal Label NotSelectedLabel;
    internal ListBox PART_NotSelectedList;
    internal Button AddButton;
    internal Button RemoveButton;
    internal Label SelectedLabel;
    internal ListBox PART_SelectedList;
    internal Button MoveUpButton;
    internal Button MoveDownButton;
    internal AutomationTextBlock RequiredColumnText;
    internal AutomationTextBlock LastColumnText;
    internal Rectangle Rectangle_1;
    internal Button OKButton;
    internal Button CancelButton;
    private bool _contentLoaded;
    internal ObservableCollection`1<InnerListColumn> SelectedColumns { get; }
    internal ObservableCollection`1<InnerListColumn> NotSelectedColumns { get; }
    internal ColumnPicker(ICollection`1<GridViewColumn> columns, ICollection`1<InnerListColumn> availableColumns);
    internal ObservableCollection`1<InnerListColumn> get_SelectedColumns();
    internal ObservableCollection`1<InnerListColumn> get_NotSelectedColumns();
    internal void OkButtonClick(object sender, RoutedEventArgs e);
    internal void MoveUpButtonClick(object sender, RoutedEventArgs e);
    internal void MoveDownButtonClick(object sender, RoutedEventArgs e);
    internal void AddButtonClick(object sender, RoutedEventArgs e);
    internal void RemoveButtonClick(object sender, RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void ListSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OnSelectionChanged();
    private void NotSelectedList_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void SelectedList_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class Microsoft.Management.UI.Internal.CommandHelper : object {
    internal static void ExecuteCommand(ICommand command, object parameter, IInputElement target);
    internal static bool CanExecuteCommand(ICommand command, object parameter, IInputElement target);
}
public abstract class Microsoft.Management.UI.Internal.ComparableValueFilterRule`1 : FilterRule {
    [CompilerGeneratedAttribute]
private bool <DefaultNullValueEvaluation>k__BackingField;
    protected bool DefaultNullValueEvaluation { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_DefaultNullValueEvaluation();
    [CompilerGeneratedAttribute]
protected void set_DefaultNullValueEvaluation(bool value);
    public virtual bool Evaluate(object item);
    protected abstract virtual bool Evaluate(T data);
}
public enum Microsoft.Management.UI.Internal.ControlState : Enum {
    public int value__;
    public static ControlState Ready;
    public static ControlState Error;
    public static ControlState Refreshing;
}
public static class Microsoft.Management.UI.Internal.CustomTypeComparer : object {
    private static Dictionary`2<Type, object> comparers;
    private static CustomTypeComparer();
    public static int Compare(T value1, T value2);
    private static bool TryGetCustomComparer(IComparer`1& comparer);
}
public class Microsoft.Management.UI.Internal.DataErrorInfoValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private bool <IsUserVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    private static DataErrorInfoValidationResult valid;
    public bool IsUserVisible { get; private set; }
    public string ErrorMessage { get; private set; }
    public static DataErrorInfoValidationResult ValidResult { get; }
    public DataErrorInfoValidationResult(bool isValid, object errorContent, string errorMessage);
    private static DataErrorInfoValidationResult();
    [CompilerGeneratedAttribute]
public bool get_IsUserVisible();
    [CompilerGeneratedAttribute]
private void set_IsUserVisible(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    public static DataErrorInfoValidationResult get_ValidResult();
}
public abstract class Microsoft.Management.UI.Internal.DataErrorInfoValidationRule : object {
    public abstract virtual DataErrorInfoValidationResult Validate(object value, CultureInfo cultureInfo);
}
public class Microsoft.Management.UI.Internal.DataRoutedEventArgs`1 : RoutedEventArgs {
    private T data;
    public T Data { get; }
    public DataRoutedEventArgs`1(T data, RoutedEvent routedEvent);
    public T get_Data();
}
public class Microsoft.Management.UI.Internal.DateTimeApproximationComparer : object {
    public sealed virtual int Compare(DateTime value1, DateTime value2);
    private static void GetRoundedValues(DateTime value1, DateTime value2, DateTime& roundedValue1, DateTime& roundedValue2);
    private static bool HasTimeComponent(DateTime value);
}
public class Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory : FilterRuleCustomizationFactory {
    private IPropertyValueGetter propertyValueGetter;
    public IPropertyValueGetter PropertyValueGetter { get; public set; }
    public virtual IPropertyValueGetter get_PropertyValueGetter();
    public virtual void set_PropertyValueGetter(IPropertyValueGetter value);
    public virtual ICollection`1<FilterRule> CreateDefaultFilterRulesForPropertyValueSelectorFilterRule();
    public virtual void TransferValues(FilterRule oldRule, FilterRule newRule);
    public virtual void ClearValues(FilterRule rule);
    public virtual string GetErrorMessageForInvalidValue(string value, Type typeToParseTo);
    private bool TryGetGenericParameterForComparableValueFilterRule(FilterRule rule, Type& genericParameter);
    private object GetValueFromValidatingValue(FilterRule rule, string propertyName);
    private void SetValueOnValidatingValue(FilterRule rule, string propertyName, object value);
    private bool TryTransferValuesAsSingleValueComparableValueFilterRule(FilterRule oldRule, FilterRule newRule);
    private bool TryClearValueFromSingleValueComparableValueFilterRule(FilterRule rule);
    private bool IsSingleValueComparableValueFilterRule(FilterRule rule);
    private bool TryClearIsBetweenFilterRule(FilterRule rule);
    private bool IsIsBetweenFilterRule(FilterRule rule);
}
public class Microsoft.Management.UI.Internal.DefaultStringConverter : object {
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.DismissiblePopup : Popup {
    public static RoutedCommand DismissPopupCommand;
    public static DependencyProperty CloseOnEscapeProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> CloseOnEscapeChanged;
    public static DependencyProperty FocusChildOnOpenProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> FocusChildOnOpenChanged;
    public static DependencyProperty SetFocusOnCloseProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> SetFocusOnCloseChanged;
    public static DependencyProperty SetFocusOnCloseElementProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<UIElement>> SetFocusOnCloseElementChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the popup closes when ESC is pressed.")]
[LocalizabilityAttribute]
public bool CloseOnEscape { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether focus should be set on the child when the popup opens.")]
[LocalizabilityAttribute]
public bool FocusChildOnOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Indicates whether the focus returns to either a defined by the FocusOnCloseTarget dependency property UIElement or PlacementTarget or not.")]
[LocalizabilityAttribute]
public bool SetFocusOnClose { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("If the SetFocusOnClose property is set True and this property is set to a valid UIElement, focus returns to this UIElement after the DismissiblePopup is closed.")]
[LocalizabilityAttribute]
public UIElement SetFocusOnCloseElement { get; public set; }
    private static DismissiblePopup();
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    private void SetFocus(UIElement element);
    private void SetupAutomationIdBinding();
    private FrameworkElement FindPopupRoot();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void FocusChild();
    private static void DismissPopupCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnDismissPopupExecuted(ExecutedRoutedEventArgs e);
    private void OnDismissPopupExecutedImplementation(ExecutedRoutedEventArgs e);
    public bool get_CloseOnEscape();
    public void set_CloseOnEscape(bool value);
    private static void CloseOnEscapeProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CloseOnEscapeChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_CloseOnEscapeChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnCloseOnEscapeChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_FocusChildOnOpen();
    public void set_FocusChildOnOpen(bool value);
    private static void FocusChildOnOpenProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_FocusChildOnOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_FocusChildOnOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnFocusChildOnOpenChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_SetFocusOnClose();
    public void set_SetFocusOnClose(bool value);
    private static void SetFocusOnCloseProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SetFocusOnCloseChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_SetFocusOnCloseChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnSetFocusOnCloseChanged(PropertyChangedEventArgs`1<bool> e);
    public UIElement get_SetFocusOnCloseElement();
    public void set_SetFocusOnCloseElement(UIElement value);
    private static void SetFocusOnCloseElementProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SetFocusOnCloseElementChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    [CompilerGeneratedAttribute]
public void remove_SetFocusOnCloseElementChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    protected virtual void OnSetFocusOnCloseElementChanged(PropertyChangedEventArgs`1<UIElement> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
}
public class Microsoft.Management.UI.Internal.DoesNotEqualFilterRule`1 : EqualsFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.EqualsFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ExpanderButton : ToggleButton {
    protected string ExpandToolTip { get; }
    protected string CollapseToolTip { get; }
    protected virtual string get_ExpandToolTip();
    protected virtual string get_CollapseToolTip();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected void OnIsCheckedChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs args);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs args);
    private void SetToolTip();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer : ToggleButtonAutomationPeer {
    private ExpanderButton expanderButton;
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public ExpanderButtonAutomationPeer(ExpanderButton owner);
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
}
public class Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer : FrameworkElementAutomationPeer {
    private AutomationControlType controlType;
    private bool isControlElement;
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner);
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner, AutomationControlType controlType);
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner, AutomationControlType controlType, bool isControlElement);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsControlElementCore();
}
public abstract class Microsoft.Management.UI.Internal.FilterEvaluator : object {
    private Collection`1<IFilterExpressionProvider> filterExpressionProviders;
    private FilterStatus filterStatus;
    private bool startFilterOnExpressionChanged;
    private bool hasFilterExpression;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler FilterExpressionChanged;
    public ReadOnlyCollection`1<IFilterExpressionProvider> FilterExpressionProviders { get; }
    public FilterStatus FilterStatus { get; protected set; }
    public bool StartFilterOnExpressionChanged { get; public set; }
    public bool HasFilterExpression { get; protected set; }
    public FilterExpressionNode FilterExpression { get; }
    public ReadOnlyCollection`1<IFilterExpressionProvider> get_FilterExpressionProviders();
    public FilterStatus get_FilterStatus();
    protected void set_FilterStatus(FilterStatus value);
    public bool get_StartFilterOnExpressionChanged();
    public void set_StartFilterOnExpressionChanged(bool value);
    public sealed virtual bool get_HasFilterExpression();
    protected void set_HasFilterExpression(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual void StartFilter();
    public abstract virtual void StopFilter();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public void AddFilterExpressionProvider(IFilterExpressionProvider provider);
    public void RemoveFilterExpressionProvider(IFilterExpressionProvider provider);
    protected void NotifyPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    protected virtual void NotifyFilterExpressionChanged();
    private void FilterProvider_FilterExpressionChanged(object sender, EventArgs e);
}
public class Microsoft.Management.UI.Internal.FilterExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public FilterExceptionEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
public class Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode : FilterExpressionNode {
    private List`1<FilterExpressionNode> children;
    public ICollection`1<FilterExpressionNode> Children { get; }
    public FilterExpressionAndOperatorNode(IEnumerable`1<FilterExpressionNode> children);
    public ICollection`1<FilterExpressionNode> get_Children();
    public virtual bool Evaluate(object item);
}
public abstract class Microsoft.Management.UI.Internal.FilterExpressionNode : object {
    public abstract virtual bool Evaluate(object item);
    public ICollection`1<T> FindAll();
}
public class Microsoft.Management.UI.Internal.FilterExpressionOperandNode : FilterExpressionNode {
    [CompilerGeneratedAttribute]
private FilterRule <Rule>k__BackingField;
    public FilterRule Rule { get; protected set; }
    public FilterExpressionOperandNode(FilterRule rule);
    [CompilerGeneratedAttribute]
public FilterRule get_Rule();
    [CompilerGeneratedAttribute]
protected void set_Rule(FilterRule value);
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode : FilterExpressionNode {
    private List`1<FilterExpressionNode> children;
    public ICollection`1<FilterExpressionNode> Children { get; }
    public FilterExpressionOrOperatorNode(IEnumerable`1<FilterExpressionNode> children);
    public ICollection`1<FilterExpressionNode> get_Children();
    public virtual bool Evaluate(object item);
}
public abstract class Microsoft.Management.UI.Internal.FilterRule : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler EvaluationResultInvalidated;
    public bool IsValid { get; }
    public string DisplayName { get; protected set; }
    public virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    public abstract virtual bool Evaluate(object item);
    [CompilerGeneratedAttribute]
public void add_EvaluationResultInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EvaluationResultInvalidated(EventHandler value);
    protected void NotifyEvaluationResultInvalidated();
}
public abstract class Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory : object {
    private static FilterRuleCustomizationFactory factoryInstance;
    public static FilterRuleCustomizationFactory FactoryInstance { get; public set; }
    public IPropertyValueGetter PropertyValueGetter { get; public set; }
    private static FilterRuleCustomizationFactory();
    public static FilterRuleCustomizationFactory get_FactoryInstance();
    public static void set_FactoryInstance(FilterRuleCustomizationFactory value);
    public abstract virtual IPropertyValueGetter get_PropertyValueGetter();
    public abstract virtual void set_PropertyValueGetter(IPropertyValueGetter value);
    public abstract virtual ICollection`1<FilterRule> CreateDefaultFilterRulesForPropertyValueSelectorFilterRule();
    public abstract virtual void TransferValues(FilterRule oldRule, FilterRule newRule);
    public abstract virtual void ClearValues(FilterRule rule);
    public abstract virtual string GetErrorMessageForInvalidValue(string value, Type typeToParseTo);
}
[ExtensionAttribute]
public static class Microsoft.Management.UI.Internal.FilterRuleExtensions : object {
    [ExtensionAttribute]
public static FilterRule DeepCopy(FilterRule rule);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.FilterRulePanel : Control {
    private FilterRulePanelController controller;
    private FilterRuleTemplateSelector filterRuleTemplateSelector;
    [CompilerGeneratedAttribute]
private EventHandler FilterExpressionChanged;
    public static RoutedCommand AddRulesCommand;
    public static RoutedCommand RemoveRuleCommand;
    public ReadOnlyCollection`1<FilterRulePanelItem> FilterRulePanelItems { get; }
    public FilterExpressionNode FilterExpression { get; }
    public FilterRulePanelController Controller { get; }
    public DataTemplateSelector FilterRuleTemplateSelector { get; }
    public bool HasFilterExpression { get; }
    private static FilterRulePanel();
    public ReadOnlyCollection`1<FilterRulePanelItem> get_FilterRulePanelItems();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public FilterRulePanelController get_Controller();
    public DataTemplateSelector get_FilterRuleTemplateSelector();
    public sealed virtual bool get_HasFilterExpression();
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    public void AddFilterRulePanelItemContentTemplate(Type type, DataTemplate dataTemplate);
    public void RemoveFilterRulePanelItemContentTemplate(Type type);
    public bool TryGetContentTemplate(Type type, DataTemplate& dataTemplate);
    public void ClearContentTemplates();
    protected virtual void NotifyFilterExpressionChanged();
    private void Controller_FilterExpressionChanged(object sender, EventArgs e);
    private void InitializeTemplates();
    private void InitializeTemplatesForInputTypes();
    private void AddFilterRulePanelItemContentTemplate(Type type, string resourceName);
    private void AddFilterRuleInternal(FilterRulePanelItem item);
    private void RemoveFilterRuleInternal(FilterRulePanelItem item);
    private static void AddRulesCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnAddRulesExecuted(ExecutedRoutedEventArgs e);
    private void OnAddRulesExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void RemoveRuleCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnRemoveRuleExecuted(ExecutedRoutedEventArgs e);
    private void OnRemoveRuleExecutedImplementation(ExecutedRoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
private void <InitializeTemplates>b__22_0(KeyValuePair`2<Type, string> templateInfo);
    [CompilerGeneratedAttribute]
private void <InitializeTemplatesForInputTypes>b__23_0(Type type);
}
public class Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter : ContentPresenter {
    [CompilerGeneratedAttribute]
private IValueConverter <ContentConverter>k__BackingField;
    public IValueConverter ContentConverter { get; public set; }
    [CompilerGeneratedAttribute]
public IValueConverter get_ContentConverter();
    [CompilerGeneratedAttribute]
public void set_ContentConverter(IValueConverter value);
    protected virtual DataTemplate ChooseTemplate();
}
public class Microsoft.Management.UI.Internal.FilterRulePanelController : object {
    private ObservableCollection`1<FilterRulePanelItem> filterRulePanelItems;
    private ReadOnlyObservableCollection`1<FilterRulePanelItem> readOnlyFilterRulePanelItems;
    [CompilerGeneratedAttribute]
private EventHandler FilterExpressionChanged;
    public ReadOnlyCollection`1<FilterRulePanelItem> FilterRulePanelItems { get; }
    public FilterExpressionNode FilterExpression { get; }
    public bool HasFilterExpression { get; }
    public ReadOnlyCollection`1<FilterRulePanelItem> get_FilterRulePanelItems();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public sealed virtual bool get_HasFilterExpression();
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    public void AddFilterRulePanelItem(FilterRulePanelItem item);
    private void Rule_EvaluationResultInvalidated(object sender, EventArgs e);
    public void RemoveFilterRulePanelItem(FilterRulePanelItem item);
    public void ClearFilterRulePanelItems();
    private FilterExpressionNode CreateFilterExpression();
    private int GetExclusiveEndIndexForGroupStartingAt(int startIndex);
    private FilterExpressionOrOperatorNode CreateFilterExpressionForGroup(int startIndex, int endIndex);
    private int GetInsertionIndex(FilterRulePanelItem item);
    private void UpdateFilterRulePanelItemTypes();
    protected virtual void NotifyFilterExpressionChanged();
}
public class Microsoft.Management.UI.Internal.FilterRulePanelItem : object {
    [CompilerGeneratedAttribute]
private FilterRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    private FilterRulePanelItemType itemType;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public FilterRule Rule { get; private set; }
    public string GroupId { get; private set; }
    public FilterRulePanelItemType ItemType { get; protected internal set; }
    public FilterRulePanelItem(FilterRule rule, string groupId);
    [CompilerGeneratedAttribute]
public FilterRule get_Rule();
    [CompilerGeneratedAttribute]
private void set_Rule(FilterRule value);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
private void set_GroupId(string value);
    public FilterRulePanelItemType get_ItemType();
    protected internal void set_ItemType(FilterRulePanelItemType value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
}
public enum Microsoft.Management.UI.Internal.FilterRulePanelItemType : Enum {
    public int value__;
    public static FilterRulePanelItemType FirstHeader;
    public static FilterRulePanelItemType Header;
    public static FilterRulePanelItemType Item;
}
public class Microsoft.Management.UI.Internal.FilterRuleTemplateSelector : DataTemplateSelector {
    private Dictionary`2<Type, DataTemplate> templateDictionary;
    public IDictionary`2<Type, DataTemplate> TemplateDictionary { get; }
    public IDictionary`2<Type, DataTemplate> get_TemplateDictionary();
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
public class Microsoft.Management.UI.Internal.FilterRuleToDisplayNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Microsoft.Management.UI.Internal.FilterStatus : Enum {
    public int value__;
    public static FilterStatus NotApplied;
    public static FilterStatus InProgress;
    public static FilterStatus Applied;
}
internal static class Microsoft.Management.UI.Internal.FilterUtilities : object {
    internal static bool TryCastItem(object item, T& castItem);
}
internal class Microsoft.Management.UI.Internal.HelpParagraphBuilder : ParagraphBuilder {
    internal static int IndentSize;
    private static String[] Separators;
    private PSObject psObj;
    internal HelpParagraphBuilder(Paragraph paragraph, PSObject psObj);
    private static HelpParagraphBuilder();
    internal static string GetPropertyString(PSObject psObj, string propertyName);
    internal void AddTextToParagraphBuilder();
    private static PSPropertyInfo GetProperty(PSObject psObj, string propertyName);
    private static string GetInnerPSObjectPropertyString(PSObject psObj, string psObjectName, string propertyName);
    private static object GetPropertyObject(PSObject psObj, string propertyName);
    private static string GetTextFromArray(PSObject psObj, string propertyText);
    private static int LargestSize(String[] strs);
    private static string AddIndent(string str);
    private static string AddIndent(string str, int numberOfIdents);
    private static string AddIndent(string str, string indentString);
    private static Object[] GetPropertyObjectArray(PSObject obj, string propertyName);
    private void AddStringSection(bool setting, string sectionName, string sectionTitle);
    private void AddSyntax(bool setting, string sectionTitle);
    private void AddDescription(bool setting, string sectionTitle, string propertyName);
    private void AddExamples(bool setting, string sectionTitle);
    private void AddMembers(bool setting, string sectionTitle);
    private static void FormatMethodData(PSObject member, string name, String& memberText, String& description);
    private void AddParameters(bool setting, string sectionTitle, string paramPropertyName, HelpCategory helpCategory);
    private void AddNavigationLink(bool setting, string sectionTitle);
    private void AddInputOrOutputEntries(bool setting, string sectionTitle, string inputOrOutputProperty, string inputOrOutputInnerProperty);
    private void AddNotes(bool setting, string sectionTitle);
}
internal class Microsoft.Management.UI.Internal.HelpViewModel : object {
    private HelpParagraphBuilder helpBuilder;
    private ParagraphSearcher searcher;
    private string helpTitle;
    private double zoom;
    private string findText;
    private string matchesLabel;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public double Zoom { get; public set; }
    public double ZoomLevel { get; }
    public string ZoomLabel { get; }
    public string FindText { get; public set; }
    public string HelpTitle { get; }
    public string MatchesLabel { get; public set; }
    public bool CanGoToNextOrPrevious { get; }
    internal ParagraphSearcher Searcher { get; }
    internal HelpParagraphBuilder HelpBuilder { get; }
    internal HelpViewModel(PSObject psObj, Paragraph documentParagraph);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_ZoomLevel();
    public string get_ZoomLabel();
    public string get_FindText();
    public void set_FindText(string value);
    public string get_HelpTitle();
    public string get_MatchesLabel();
    public void set_MatchesLabel(string value);
    public bool get_CanGoToNextOrPrevious();
    internal ParagraphSearcher get_Searcher();
    internal HelpParagraphBuilder get_HelpBuilder();
    internal void Search();
    internal void ZoomIn();
    internal void ZoomOut();
    private void HelpBuilder_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetMatchesLabel();
    private void OnNotifyPropertyChanged(string propertyName);
}
public interface Microsoft.Management.UI.Internal.IAsyncProgress {
    public bool OperationInProgress { get; }
    public Exception OperationError { get; }
    public abstract virtual bool get_OperationInProgress();
    public abstract virtual Exception get_OperationError();
}
public interface Microsoft.Management.UI.Internal.IEvaluate {
    public abstract virtual bool Evaluate(object item);
}
public interface Microsoft.Management.UI.Internal.IFilterExpressionProvider {
    public FilterExpressionNode FilterExpression { get; }
    public bool HasFilterExpression { get; }
    public abstract virtual FilterExpressionNode get_FilterExpression();
    public abstract virtual bool get_HasFilterExpression();
    [CompilerGeneratedAttribute]
public abstract virtual void add_FilterExpressionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FilterExpressionChanged(EventHandler value);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.InnerList : ListView {
    internal ICollectionView CollectionView;
    private InnerListGridView innerGrid;
    private InnerListColumn sortedColumn;
    private ContextMenu contextMenu;
    private ObservableCollection`1<InnerListColumn> columns;
    private bool itemsSourceIsEmpty;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler ItemSourcesPropertyChanged;
    public static DependencyProperty AutoGenerateColumnsProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> AutoGenerateColumnsChanged;
    public static DependencyProperty IsGroupsExpandedProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsGroupsExpandedChanged;
    private static DependencyPropertyKey IsPrimarySortColumnPropertyKey;
    public static DependencyProperty IsPrimarySortColumnProperty;
    [BrowsableAttribute("False")]
public ItemCollection Items { get; }
    public InnerListColumn SortedColumn { get; }
    public InnerListGridView InnerGrid { get; protected set; }
    public ObservableCollection`1<InnerListColumn> Columns { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether this list's columns should be automatically generated based on its data.")]
[LocalizabilityAttribute]
public bool AutoGenerateColumns { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether is groups expanded or not.")]
[LocalizabilityAttribute]
public bool IsGroupsExpanded { get; public set; }
    private static InnerList();
    [CompilerGeneratedAttribute]
public void add_ItemSourcesPropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ItemSourcesPropertyChanged(PropertyChangedEventHandler value);
    public ItemCollection get_Items();
    public InnerListColumn get_SortedColumn();
    public InnerListGridView get_InnerGrid();
    protected void set_InnerGrid(InnerListGridView value);
    public ObservableCollection`1<InnerListColumn> get_Columns();
    public void ScrollIntoView(object item);
    public void ScrollIntoViewFromTop(object item);
    public void RefreshColumns();
    public void ApplySort(InnerListColumn column, bool shouldScrollIntoView);
    private void UpdatePrimarySortColumn();
    private List`1<UIPropertyGroupDescription> GetDescriptionsForSorting();
    public void ClearSort();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private static void InnerList_OnViewChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static NotSupportedException GetItemsException();
    private void SetCollectionView(IEnumerable newValue);
    private void UpdateViewAndCollectionView(IEnumerable value);
    private void UpdateView(IEnumerable value);
    private void ReleaseInnerGridReferences();
    internal void SetColumnHeaderActions();
    protected internal string GetClipboardTextForSelectedItems();
    private string GetClipboardTextLineForSelectedItem(object value);
    private void SetClipboardWithSelectedItemsText(string text);
    private void Header_KeyDown(object sender, KeyEventArgs e);
    private void Header_Click(object sender, RoutedEventArgs e);
    private void HeaderActionProcess(object sender);
    private ContextMenu GetListColumnsContextMenu();
    private bool SetColumnPickerContextMenuItem();
    private static void CopyCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void CopyCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnCopyCanExecute(CanExecuteRoutedEventArgs e);
    private void OnCopyCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnCopyExecuted(ExecutedRoutedEventArgs e);
    private void OnCopyExecutedImplementation(ExecutedRoutedEventArgs e);
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    private static void AutoGenerateColumnsProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AutoGenerateColumnsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_AutoGenerateColumnsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnAutoGenerateColumnsChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsGroupsExpanded();
    public void set_IsGroupsExpanded(bool value);
    private static void IsGroupsExpandedProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsGroupsExpandedChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsGroupsExpandedChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsGroupsExpandedChanged(PropertyChangedEventArgs`1<bool> e);
    public static bool GetIsPrimarySortColumn(DependencyObject element);
    private static void SetIsPrimarySortColumn(DependencyObject element, bool value);
    private static void IsPrimarySortColumnProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    private static void StaticConstructorImplementation();
    [CompilerGeneratedAttribute]
private object <ScrollIntoView>b__19_0(object arg);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.InnerListColumn : GridViewColumn {
    public static DependencyProperty DataDescriptionProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty RequiredProperty;
    public static DependencyProperty VisibleProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the data description.")]
[LocalizabilityAttribute]
public UIPropertyGroupDescription DataDescription { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that dictates the minimum allowable width of the column.")]
[LocalizabilityAttribute]
public double MinWidth { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the column may not be removed.")]
[LocalizabilityAttribute]
public bool Required { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the columns we want to have available in the list.")]
[LocalizabilityAttribute]
public bool Visible { get; public set; }
    private static InnerListColumn();
    public InnerListColumn(UIPropertyGroupDescription dataDescription);
    public InnerListColumn(UIPropertyGroupDescription dataDescription, bool isVisible);
    public InnerListColumn(UIPropertyGroupDescription dataDescription, bool isVisible, bool createDefaultBinding);
    private static object WidthProperty_CoerceProperty(DependencyObject d, object baseValue);
    private static string GetDefaultStringFormat(Type type);
    public virtual string ToString();
    public UIPropertyGroupDescription get_DataDescription();
    public void set_DataDescription(UIPropertyGroupDescription value);
    private static void DataDescriptionProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnDataDescriptionChanged(PropertyChangedEventArgs`1<UIPropertyGroupDescription> e);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    private static void MinWidthProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinWidthChanged(PropertyChangedEventArgs`1<double> e);
    private void OnMinWidthChangedImplementation(PropertyChangedEventArgs`1<double> e);
    private static bool MinWidthProperty_ValidateProperty(object value);
    private static void MinWidthProperty_ValidatePropertyImplementation(double value, Boolean& isValid);
    public bool get_Required();
    public void set_Required(bool value);
    private static void RequiredProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnRequiredChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_Visible();
    public void set_Visible(bool value);
    private static void VisibleProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnVisibleChanged(PropertyChangedEventArgs`1<bool> e);
}
[ContentPropertyAttribute("AvailableColumns")]
public class Microsoft.Management.UI.Internal.InnerListGridView : GridView {
    private bool canChangeColumns;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<InnerListColumn> <AvailableColumns>k__BackingField;
    internal ObservableCollection`1<InnerListColumn> AvailableColumns { get; private set; }
    internal InnerListGridView(ObservableCollection`1<InnerListColumn> availableColumns);
    [CompilerGeneratedAttribute]
internal ObservableCollection`1<InnerListColumn> get_AvailableColumns();
    [CompilerGeneratedAttribute]
private void set_AvailableColumns(ObservableCollection`1<InnerListColumn> value);
    public void ReleaseReferences();
    internal void PopulateColumns(IEnumerable newValue);
    internal void OnColumnPicker(object sender, RoutedEventArgs e);
    private void Columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AvailableColumns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddOrRemoveNotifications(NotifyCollectionChangedEventArgs e);
    private void SynchronizeColumns();
    private void Column_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Microsoft.Management.UI.Internal.InputFieldBackgroundTextConverter : object {
    private static Type ValidatingValueGenericType;
    private static InputFieldBackgroundTextConverter();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private bool IsOfTypeValidatingValue(object value);
    private Type GetGenericParameter(object value, CultureInfo culture);
    private object GetBackgroundTextForType(Type inputType);
}
public class Microsoft.Management.UI.Internal.IntegralConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.InverseBooleanConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Microsoft.Management.UI.Internal.IPropertyValueGetter {
    public abstract virtual bool TryGetPropertyValue(string propertyName, object value, Object& propertyValue);
    public abstract virtual bool TryGetPropertyValue(string propertyName, object value, T& propertyValue);
}
public class Microsoft.Management.UI.Internal.IsBetweenFilterRule`1 : ComparableValueFilterRule`1<T> {
    [CompilerGeneratedAttribute]
private ValidatingValue`1<T> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatingValue`1<T> <EndValue>k__BackingField;
    public bool IsValid { get; }
    public ValidatingValue`1<T> StartValue { get; protected set; }
    public ValidatingValue`1<T> EndValue { get; protected set; }
    public virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public ValidatingValue`1<T> get_StartValue();
    [CompilerGeneratedAttribute]
protected void set_StartValue(ValidatingValue`1<T> value);
    [CompilerGeneratedAttribute]
public ValidatingValue`1<T> get_EndValue();
    [CompilerGeneratedAttribute]
protected void set_EndValue(ValidatingValue`1<T> value);
    protected virtual bool Evaluate(T data);
    private void Value_PropertyChanged(object sender, PropertyChangedEventArgs e);
    [OnDeserializedAttribute]
private void Initialize(StreamingContext context);
}
public class Microsoft.Management.UI.Internal.IsEmptyFilterRule : FilterRule {
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.IsEqualConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.IsGreaterThanFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.IsLessThanFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T item);
}
public class Microsoft.Management.UI.Internal.IsNotEmptyFilterRule : IsEmptyFilterRule {
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.IsNotEmptyValidationRule : DataErrorInfoValidationRule {
    private static DataErrorInfoValidationResult EmptyValueResult;
    private static IsNotEmptyValidationRule();
    public virtual DataErrorInfoValidationResult Validate(object value, CultureInfo cultureInfo);
    internal static bool IsStringNotEmpty(string value);
}
public class Microsoft.Management.UI.Internal.IsNotNullConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Microsoft.Management.UI.Internal.IStateDescriptorFactory`1 {
    public abstract virtual StateDescriptor`1<T> Create();
}
public class Microsoft.Management.UI.Internal.IsValidatingValueValidConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator : FilterEvaluator {
    private ItemsControl filterTarget;
    [CompilerGeneratedAttribute]
private FilterExpressionNode <CachedFilterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<FilterExceptionEventArgs> FilterExceptionOccurred;
    public ItemsControl FilterTarget { get; public set; }
    private FilterExpressionNode CachedFilterExpression { get; private set; }
    public ItemsControl get_FilterTarget();
    public void set_FilterTarget(ItemsControl value);
    [CompilerGeneratedAttribute]
private FilterExpressionNode get_CachedFilterExpression();
    [CompilerGeneratedAttribute]
private void set_CachedFilterExpression(FilterExpressionNode value);
    [CompilerGeneratedAttribute]
public void add_FilterExceptionOccurred(EventHandler`1<FilterExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FilterExceptionOccurred(EventHandler`1<FilterExceptionEventArgs> value);
    public virtual void StartFilter();
    public virtual void StopFilter();
    private bool FilterExpressionAdapter(object item);
    private bool TryNotifyFilterException(Exception e);
}
internal static class Microsoft.Management.UI.Internal.KeyboardHelp : object {
    public static LogicalDirection GetLogicalDirection(DependencyObject element, Key key);
    public static FocusNavigationDirection GetNavigationDirection(DependencyObject element, Key key);
    public static bool IsControlPressed();
    private static bool IsFlowDirectionKey(Key key);
    private static bool IsElementRightToLeft(DependencyObject element);
}
[TemplatePartAttribute]
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ListOrganizer : ContentControl {
    private PickerBase picker;
    public static RoutedEvent ItemDeletedEvent;
    public static RoutedEvent ItemSelectedEvent;
    public static RoutedCommand DeleteItemCommand;
    public static RoutedCommand SelectItemCommand;
    public static DependencyProperty DropDownButtonTemplateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> DropDownButtonTemplateChanged;
    public static DependencyProperty DropDownStyleProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<Style>> DropDownStyleChanged;
    public static DependencyProperty HighlightedItemProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<object>> HighlightedItemChanged;
    public static DependencyProperty ItemsSourceProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<IEnumerable>> ItemsSourceChanged;
    public static DependencyProperty NoItemsTextProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> NoItemsTextChanged;
    public static DependencyProperty TextContentPropertyNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> TextContentPropertyNameChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that controls the visual tree of the DropDown button.")]
[LocalizabilityAttribute]
public ControlTemplate DropDownButtonTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the style of the drop-down.")]
[LocalizabilityAttribute]
public Style DropDownStyle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that controls the highlighted item in the list.")]
[LocalizabilityAttribute]
public object HighlightedItem { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that controls the items in the list.")]
[LocalizabilityAttribute]
public IEnumerable ItemsSource { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that appears to inform the user that there are no items in the list.")]
[LocalizabilityAttribute]
public string NoItemsText { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value which dictates what binding is used to provide content for the items in the list.")]
[LocalizabilityAttribute]
public string TextContentPropertyName { get; public set; }
    private static ListOrganizer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    public void add_ItemDeleted(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void remove_ItemDeleted(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void add_ItemSelected(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void remove_ItemSelected(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    private static void DeleteItemCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnDeleteItemExecuted(ExecutedRoutedEventArgs e);
    private void OnDeleteItemExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void SelectItemCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnSelectItemExecuted(ExecutedRoutedEventArgs e);
    private void OnSelectItemExecutedImplementation(ExecutedRoutedEventArgs e);
    public ControlTemplate get_DropDownButtonTemplate();
    public void set_DropDownButtonTemplate(ControlTemplate value);
    private static void DropDownButtonTemplateProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    protected virtual void OnDropDownButtonTemplateChanged(PropertyChangedEventArgs`1<ControlTemplate> e);
    public Style get_DropDownStyle();
    public void set_DropDownStyle(Style value);
    private static void DropDownStyleProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    protected virtual void OnDropDownStyleChanged(PropertyChangedEventArgs`1<Style> e);
    public object get_HighlightedItem();
    public void set_HighlightedItem(object value);
    private static void HighlightedItemProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_HighlightedItemChanged(EventHandler`1<PropertyChangedEventArgs`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_HighlightedItemChanged(EventHandler`1<PropertyChangedEventArgs`1<object>> value);
    protected virtual void OnHighlightedItemChanged(PropertyChangedEventArgs`1<object> e);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    private static void ItemsSourceProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ItemsSourceChanged(EventHandler`1<PropertyChangedEventArgs`1<IEnumerable>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemsSourceChanged(EventHandler`1<PropertyChangedEventArgs`1<IEnumerable>> value);
    protected virtual void OnItemsSourceChanged(PropertyChangedEventArgs`1<IEnumerable> e);
    public string get_NoItemsText();
    public void set_NoItemsText(string value);
    private static void NoItemsTextProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_NoItemsTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_NoItemsTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnNoItemsTextChanged(PropertyChangedEventArgs`1<string> e);
    public string get_TextContentPropertyName();
    public void set_TextContentPropertyName(string value);
    private static void TextContentPropertyNameProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextContentPropertyNameChanged(PropertyChangedEventArgs`1<string> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    public virtual void OnApplyTemplate();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ListOrganizerItem : Control {
    private string startingText;
    private FrameworkElement templatedParent;
    private Button deleteButton;
    private TextBox editBox;
    private Button linkButton;
    private ToggleButton renameButton;
    public static DependencyProperty TextContentPropertyNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> TextContentPropertyNameChanged;
    public bool IsInEditMode { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value which dictates what binding is used to provide content for the items in the list.")]
[LocalizabilityAttribute]
public string TextContentPropertyName { get; public set; }
    private static ListOrganizerItem();
    public bool get_IsInEditMode();
    public void Select();
    public void Rename();
    public void Delete();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void TemplatedParent_OnKeyDown(object sender, KeyEventArgs e);
    private void ListOrganizerItem_Loaded_SelectItem(object sender, RoutedEventArgs e);
    private void EditBox_LostFocus(object sender, RoutedEventArgs e);
    private void EditBox_KeyDown(object sender, KeyEventArgs e);
    private void RevertTextAndChangeFromEditToDisplayMode();
    private void ChangeFromEditToDisplayMode();
    private void EditBox_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void UpdateTextContentBindings();
    private void ListOrganizerItem_Loaded_UpdateTextContentBindings(object sender, RoutedEventArgs e);
    private void AttachToVisualTree();
    private void DetachFromVisualTree();
    public string get_TextContentPropertyName();
    public void set_TextContentPropertyName(string value);
    private static void TextContentPropertyNameProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextContentPropertyNameChanged(PropertyChangedEventArgs`1<string> e);
    private void OnTextContentPropertyNameChangedImplementation(PropertyChangedEventArgs`1<string> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    public virtual void OnApplyTemplate();
    private void PreOnApplyTemplate();
    private void PostOnApplyTemplate();
}
internal enum Microsoft.Management.UI.Internal.LogicalDirection : Enum {
    public int value__;
    public static LogicalDirection None;
    public static LogicalDirection Left;
    public static LogicalDirection Right;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ManagementList : Control {
    private ReadOnlyCollection`1<object> logicalChildren;
    private PropertiesTextContainsFilterRule defaultFullTextSearchRule;
    private ObservableCollection`1<StateDescriptor`1<ManagementList>> views;
    private IStateDescriptorFactory`1<ManagementList> savedViewFactory;
    private ListOrganizer viewManager;
    private PickerBase viewSaver;
    public static RoutedEvent ViewsChangedEvent;
    public static RoutedCommand ClearFilterCommand;
    public static RoutedCommand SaveViewCommand;
    public static RoutedCommand StartFilterCommand;
    public static RoutedCommand StopFilterCommand;
    private static DependencyPropertyKey AddFilterRulePickerPropertyKey;
    public static DependencyProperty AddFilterRulePickerProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<AddFilterRulePicker>> AddFilterRulePickerChanged;
    private static DependencyPropertyKey CurrentViewPropertyKey;
    public static DependencyProperty CurrentViewProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>>> CurrentViewChanged;
    public static DependencyProperty EvaluatorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ItemsControlFilterEvaluator>> EvaluatorChanged;
    private static DependencyPropertyKey FilterRulePanelPropertyKey;
    public static DependencyProperty FilterRulePanelProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<FilterRulePanel>> FilterRulePanelChanged;
    public static DependencyProperty IsFilterShownProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsFilterShownChanged;
    public static DependencyProperty IsLoadingItemsProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsLoadingItemsChanged;
    public static DependencyProperty IsSearchShownProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsSearchShownChanged;
    private static DependencyPropertyKey ListPropertyKey;
    public static DependencyProperty ListProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<InnerList>> ListChanged;
    private static DependencyPropertyKey SearchBoxPropertyKey;
    public static DependencyProperty SearchBoxProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<SearchBox>> SearchBoxChanged;
    public static DependencyProperty ViewManagerUserActionStateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> ViewManagerUserActionStateChanged;
    public static DependencyProperty ViewSaverUserActionStateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> ViewSaverUserActionStateChanged;
    public ObservableCollection`1<StateDescriptor`1<ManagementList>> Views { get; }
    public IStateDescriptorFactory`1<ManagementList> SavedViewFactory { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets the filter rule picker.")]
[LocalizabilityAttribute]
public AddFilterRulePicker AddFilterRulePicker { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets current view.")]
[LocalizabilityAttribute]
public StateDescriptor`1<ManagementList> CurrentView { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the FilterEvaluator.")]
[LocalizabilityAttribute]
public ItemsControlFilterEvaluator Evaluator { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets the filter rule panel.")]
[LocalizabilityAttribute]
public FilterRulePanel FilterRulePanel { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the filter is shown.")]
[LocalizabilityAttribute]
public bool IsFilterShown { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether items are loading.")]
[LocalizabilityAttribute]
public bool IsLoadingItems { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the search box is shown.")]
[LocalizabilityAttribute]
public bool IsSearchShown { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets the list.")]
[LocalizabilityAttribute]
public InnerList List { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets the search box.")]
[LocalizabilityAttribute]
public SearchBox SearchBox { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the user interaction state of the view manager.")]
[LocalizabilityAttribute]
public UserActionState ViewManagerUserActionState { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the user interaction state of the view saver.")]
[LocalizabilityAttribute]
public UserActionState ViewSaverUserActionState { get; public set; }
    private static ManagementList();
    public ObservableCollection`1<StateDescriptor`1<ManagementList>> get_Views();
    public IStateDescriptorFactory`1<ManagementList> get_SavedViewFactory();
    public void set_SavedViewFactory(IStateDescriptorFactory`1<ManagementList> value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual IEnumerator get_LogicalChildren();
    private void Evaluator_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public void AddColumn(InnerListColumn column);
    public void AddColumn(InnerListColumn column, bool addDefaultFilterRules);
    public void AddRule(FilterRule rule);
    public void ResetView();
    private StateDescriptor`1<ManagementList> DoesViewAlreadyExist(string viewName);
    private void ViewManager_ItemSelected(object sender, DataRoutedEventArgs`1<object> e);
    private void ViewManager_ItemDeleted(object sender, DataRoutedEventArgs`1<object> e);
    private void Evaluator_FilterExpressionChanged(object sender, EventArgs e);
    public void add_ViewsChanged(RoutedEventHandler value);
    public void remove_ViewsChanged(RoutedEventHandler value);
    private static void ClearFilterCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void ClearFilterCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnClearFilterCanExecute(CanExecuteRoutedEventArgs e);
    private void OnClearFilterCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnClearFilterExecuted(ExecutedRoutedEventArgs e);
    private void OnClearFilterExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void SaveViewCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void SaveViewCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnSaveViewCanExecute(CanExecuteRoutedEventArgs e);
    private void OnSaveViewCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnSaveViewExecuted(ExecutedRoutedEventArgs e);
    private void OnSaveViewExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void StartFilterCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void StartFilterCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnStartFilterCanExecute(CanExecuteRoutedEventArgs e);
    private void OnStartFilterCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnStartFilterExecuted(ExecutedRoutedEventArgs e);
    private void OnStartFilterExecutedImplementation(ExecutedRoutedEventArgs e);
    private static void StopFilterCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void StopFilterCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnStopFilterCanExecute(CanExecuteRoutedEventArgs e);
    private void OnStopFilterCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnStopFilterExecuted(ExecutedRoutedEventArgs e);
    private void OnStopFilterExecutedImplementation(ExecutedRoutedEventArgs e);
    public AddFilterRulePicker get_AddFilterRulePicker();
    private void set_AddFilterRulePicker(AddFilterRulePicker value);
    private static void AddFilterRulePickerProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AddFilterRulePickerChanged(EventHandler`1<PropertyChangedEventArgs`1<AddFilterRulePicker>> value);
    [CompilerGeneratedAttribute]
public void remove_AddFilterRulePickerChanged(EventHandler`1<PropertyChangedEventArgs`1<AddFilterRulePicker>> value);
    protected virtual void OnAddFilterRulePickerChanged(PropertyChangedEventArgs`1<AddFilterRulePicker> e);
    public StateDescriptor`1<ManagementList> get_CurrentView();
    private void set_CurrentView(StateDescriptor`1<ManagementList> value);
    private static void CurrentViewProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CurrentViewChanged(EventHandler`1<PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>>> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentViewChanged(EventHandler`1<PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>>> value);
    protected virtual void OnCurrentViewChanged(PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>> e);
    public ItemsControlFilterEvaluator get_Evaluator();
    public void set_Evaluator(ItemsControlFilterEvaluator value);
    private static void EvaluatorProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_EvaluatorChanged(EventHandler`1<PropertyChangedEventArgs`1<ItemsControlFilterEvaluator>> value);
    [CompilerGeneratedAttribute]
public void remove_EvaluatorChanged(EventHandler`1<PropertyChangedEventArgs`1<ItemsControlFilterEvaluator>> value);
    protected virtual void OnEvaluatorChanged(PropertyChangedEventArgs`1<ItemsControlFilterEvaluator> e);
    private void OnEvaluatorChangedImplementation(PropertyChangedEventArgs`1<ItemsControlFilterEvaluator> e);
    public FilterRulePanel get_FilterRulePanel();
    private void set_FilterRulePanel(FilterRulePanel value);
    private static void FilterRulePanelProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_FilterRulePanelChanged(EventHandler`1<PropertyChangedEventArgs`1<FilterRulePanel>> value);
    [CompilerGeneratedAttribute]
public void remove_FilterRulePanelChanged(EventHandler`1<PropertyChangedEventArgs`1<FilterRulePanel>> value);
    protected virtual void OnFilterRulePanelChanged(PropertyChangedEventArgs`1<FilterRulePanel> e);
    public bool get_IsFilterShown();
    public void set_IsFilterShown(bool value);
    private static void IsFilterShownProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsFilterShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsFilterShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsFilterShownChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsLoadingItems();
    public void set_IsLoadingItems(bool value);
    private static void IsLoadingItemsProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsLoadingItemsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsLoadingItemsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsLoadingItemsChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsSearchShown();
    public void set_IsSearchShown(bool value);
    private static void IsSearchShownProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsSearchShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsSearchShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsSearchShownChanged(PropertyChangedEventArgs`1<bool> e);
    public InnerList get_List();
    private void set_List(InnerList value);
    private static void ListProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<InnerList>> value);
    [CompilerGeneratedAttribute]
public void remove_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<InnerList>> value);
    protected virtual void OnListChanged(PropertyChangedEventArgs`1<InnerList> e);
    public SearchBox get_SearchBox();
    private void set_SearchBox(SearchBox value);
    private static void SearchBoxProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SearchBoxChanged(EventHandler`1<PropertyChangedEventArgs`1<SearchBox>> value);
    [CompilerGeneratedAttribute]
public void remove_SearchBoxChanged(EventHandler`1<PropertyChangedEventArgs`1<SearchBox>> value);
    protected virtual void OnSearchBoxChanged(PropertyChangedEventArgs`1<SearchBox> e);
    public UserActionState get_ViewManagerUserActionState();
    public void set_ViewManagerUserActionState(UserActionState value);
    private static void ViewManagerUserActionStateProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ViewManagerUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    [CompilerGeneratedAttribute]
public void remove_ViewManagerUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    protected virtual void OnViewManagerUserActionStateChanged(PropertyChangedEventArgs`1<UserActionState> e);
    public UserActionState get_ViewSaverUserActionState();
    public void set_ViewSaverUserActionState(UserActionState value);
    private static void ViewSaverUserActionStateProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ViewSaverUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    [CompilerGeneratedAttribute]
public void remove_ViewSaverUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    protected virtual void OnViewSaverUserActionStateChanged(PropertyChangedEventArgs`1<UserActionState> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    public virtual void OnApplyTemplate();
    private void PreOnApplyTemplate();
    private void PostOnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ManagementListStateDescriptor : StateDescriptor`1<ManagementList> {
    private Dictionary`2<string, ColumnStateDescriptor> columns;
    private string searchBoxText;
    private List`1<RuleStateDescriptor> rulesSelected;
    private string sortOrderPropertyName;
    public ManagementListStateDescriptor(string name);
    public virtual void SaveState(ManagementList subject);
    public virtual void RestoreState(ManagementList subject);
    public void RestoreState(ManagementList subject, bool applyRestoredFilter);
    private static bool VerifyColumnsSavable(ManagementList subject, RetryActionCallback`1<ManagementList> callback);
    private static bool VerifyColumnsRestorable(ManagementList subject, RetryActionCallback`1<ManagementList> callback);
    private static bool VerifyRulesSavableAndRestorable(ManagementList subject, RetryActionCallback`1<ManagementList> callback);
    private void SaveColumns(ManagementList subject);
    private void RestoreColumns(ManagementList subject);
    private void RestoreColumnsState(ManagementList subject);
    private void RestoreColumnsOrder(ManagementList subject);
    private void SaveRulesSelected(ManagementList subject);
    private void RestoreRulesSelected(ManagementList subject);
    private void AddSelectedRules(ManagementList subject);
    private static void AddSelectedRule(ManagementList subject, RuleStateDescriptor rsd, Dictionary`2<string, FilterRulePanelItem> rulesCache);
    private void SaveSortOrder(ManagementList subject);
    private void RestoreSortOrder(ManagementList subject);
    private static ColumnStateDescriptor CreateColumnStateDescriptor(InnerListColumn ilc, bool isInUse);
    private static void SetColumnSortDirection(InnerListColumn ilc, ListSortDirection sortDirection);
    private static void SetColumnIsInUse(InnerListColumn ilc, bool isInUse);
    private static double GetColumnWidth(InnerListColumn ilc);
    private static void SetColumnWidth(GridViewColumn ilc, double width);
    public virtual string ToString();
}
public class Microsoft.Management.UI.Internal.ManagementListStateDescriptorFactory : object {
    public sealed virtual StateDescriptor`1<ManagementList> Create();
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ManagementListTitle : Control {
    public static DependencyProperty ListProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ManagementList>> ListChanged;
    public static DependencyProperty ListStatusProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> ListStatusChanged;
    public static DependencyProperty TitleProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> TitleChanged;
    public static DependencyProperty TotalItemCountProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<int>> TotalItemCountChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the list this title is for. This is a dependency property.")]
[LocalizabilityAttribute]
public ManagementList List { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets the status of the list. This is a dependency property.")]
[LocalizabilityAttribute]
public string ListStatus { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the title. This is a dependency property.")]
[LocalizabilityAttribute]
public string Title { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the number of items in the list before filtering is applied. This is a dependency property.")]
[LocalizabilityAttribute]
public int TotalItemCount { get; public set; }
    private static ManagementListTitle();
    public ManagementList get_List();
    public void set_List(ManagementList value);
    private static void ListProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<ManagementList>> value);
    [CompilerGeneratedAttribute]
public void remove_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<ManagementList>> value);
    protected virtual void OnListChanged(PropertyChangedEventArgs`1<ManagementList> e);
    public string get_ListStatus();
    public void set_ListStatus(string value);
    private static void ListStatusProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ListStatusChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_ListStatusChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnListStatusChanged(PropertyChangedEventArgs`1<string> e);
    public string get_Title();
    public void set_Title(string value);
    private static void TitleProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TitleChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_TitleChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTitleChanged(PropertyChangedEventArgs`1<string> e);
    public int get_TotalItemCount();
    public void set_TotalItemCount(int value);
    private static void TotalItemCountProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TotalItemCountChanged(EventHandler`1<PropertyChangedEventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_TotalItemCountChanged(EventHandler`1<PropertyChangedEventArgs`1<int>> value);
    protected virtual void OnTotalItemCountChanged(PropertyChangedEventArgs`1<int> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.MessageTextBox : TextBox {
    public static DependencyProperty BackgroundTextProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> BackgroundTextChanged;
    private static DependencyPropertyKey IsBackgroundTextShownPropertyKey;
    public static DependencyProperty IsBackgroundTextShownProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsBackgroundTextShownChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value for text presented to user when TextBox is empty.")]
[LocalizabilityAttribute]
public string BackgroundText { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets a value indicating if the background text is being shown.")]
[LocalizabilityAttribute]
public bool IsBackgroundTextShown { get; private set; }
    private static MessageTextBox();
    private void UpdateIsBackgroundTextShown(string text);
    private static object OnTextBoxTextCoerce(DependencyObject o, object baseValue);
    public string get_BackgroundText();
    public void set_BackgroundText(string value);
    private static void BackgroundTextProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnBackgroundTextChanged(PropertyChangedEventArgs`1<string> e);
    public bool get_IsBackgroundTextShown();
    private void set_IsBackgroundTextShown(bool value);
    private static void IsBackgroundTextShownProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsBackgroundTextShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsBackgroundTextShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsBackgroundTextShownChanged(PropertyChangedEventArgs`1<bool> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    private static void StaticConstructorImplementation();
}
internal class Microsoft.Management.UI.Internal.OutGridViewWindow : object {
    private static double ZOOM_INCREMENT;
    private static double ZOOM_MAX;
    private static double ZOOM_MIN;
    private Window gridViewWindow;
    private ManagementList managementList;
    private ObservableCollection`1<PSObject> listItems;
    private AutoResetEvent gridViewWindowLoaded;
    private Exception exception;
    private AutoResetEvent closedEvent;
    private static string OKButtonContent;
    private static string CancelButtonContent;
    private List`1<PSObject> selectedItems;
    private Thread guiThread;
    private double zoomLevel;
    private static OutGridViewWindow();
    private void StartWindow(string invocation, string outputModeOptions, AutoResetEvent closedEvent);
    private void ZoomEventHandlerPlus(object sender, ExecutedRoutedEventArgs e);
    private void ZoomEventHandlerMinus(object sender, ExecutedRoutedEventArgs e);
    private ManagementList CreateManagementList(string outputMode);
    private Grid CreateMainGrid(string outputMode);
    private Grid CreateButtonGrid();
    private Button CreateOKButton();
    private Button CreateCancelButton();
    private void OK_Click(object sender, RoutedEventArgs e);
    private void Cancel_Click(object sender, RoutedEventArgs e);
    private List`1<PSObject> SelectedItems();
    public void CloseWindow();
    private void AddColumns(String[] propertyNames, String[] displayNames, Type[] types);
    private void AddItem(PSObject value);
    private bool GetWindowClosedStatus();
    private Exception GetLastException();
    private void GridViewWindowClosed(object sender, EventArgs e);
    private void GridViewWindowLoaded(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <CloseWindow>b__27_0();
}
internal class Microsoft.Management.UI.Internal.ParagraphBuilder : object {
    private List`1<TextSpan> boldSpans;
    private List`1<TextSpan> highlightedSpans;
    private StringBuilder textBuilder;
    private Paragraph paragraph;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal int HighlightCount { get; }
    internal Paragraph Paragraph { get; }
    internal ParagraphBuilder(Paragraph paragraph);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal int get_HighlightCount();
    internal Paragraph get_Paragraph();
    internal void BuildParagraph();
    internal void HighlightAllInstancesOf(string search, bool caseSensitive, bool wholeWord);
    internal void AddText(string str, bool bold);
    internal void ResetAllText();
    private static void AddInline(Paragraph currentParagraph, bool currentBold, bool currentHighlighted, StringBuilder sequence);
    private static void MoveSpanToPosition(Int32& currentSpanIndex, Nullable`1& currentSpan, int caracterPosition, List`1<TextSpan> allSpans);
    private void AddHighlight(int start, int length);
    private void OnNotifyPropertyChanged(string propertyName);
}
internal class Microsoft.Management.UI.Internal.ParagraphSearcher : object {
    internal static Brush HighlightBrush;
    private static Brush CurrentHighlightBrush;
    private Run currentHighlightedMatch;
    private static ParagraphSearcher();
    internal Run MoveAndHighlightNextNextMatch(bool forward, TextPointer caretPosition);
    internal void ResetSearch();
    private static bool Ishighlighted(Run run);
    private static Run GetNextRun(Run currentRun, bool forward);
    private static Run GetRun(Inline inline);
    private static Run GetNextMatch(Run currentRun, bool forward);
    private static Paragraph GetParagraph(Run run);
    private static bool IsFirstRun(Run run);
    private static Run GetFirstOrLastRun(Run caretRun, bool forward);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.PickerBase : HeaderedContentControl {
    private DismissiblePopup dropDown;
    private ToggleButton dropDownButton;
    public static RoutedCommand CloseDropDownCommand;
    public static DependencyProperty DropDownButtonTemplateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> DropDownButtonTemplateChanged;
    public static DependencyProperty DropDownStyleProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<Style>> DropDownStyleChanged;
    public static DependencyProperty IsOpenProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsOpenChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that controls the visual tree of the DropDown button.")]
[LocalizabilityAttribute]
public ControlTemplate DropDownButtonTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the style of the drop-down.")]
[LocalizabilityAttribute]
public Style DropDownStyle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the Popup is visible.")]
[LocalizabilityAttribute]
public bool IsOpen { get; public set; }
    private static PickerBase();
    private void ApplyDropDownButtonTemplate();
    private void PickerBase_Loaded_ApplyDropDownButtonTemplate(object sender, RoutedEventArgs e);
    private void DropDown_Opened(object sender, EventArgs e);
    private void FocusDropDown();
    private void DropDown_Loaded_FocusDropDown(object sender, RoutedEventArgs e);
    private void DropDown_Closed(object sender, EventArgs e);
    private void AttachToVisualTree();
    private void DetachFromVisualTree();
    private static void CloseDropDownCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnCloseDropDownExecuted(ExecutedRoutedEventArgs e);
    private void OnCloseDropDownExecutedImplementation(ExecutedRoutedEventArgs e);
    public ControlTemplate get_DropDownButtonTemplate();
    public void set_DropDownButtonTemplate(ControlTemplate value);
    private static void DropDownButtonTemplateProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    protected virtual void OnDropDownButtonTemplateChanged(PropertyChangedEventArgs`1<ControlTemplate> e);
    private void OnDropDownButtonTemplateChangedImplementation(PropertyChangedEventArgs`1<ControlTemplate> e);
    public Style get_DropDownStyle();
    public void set_DropDownStyle(Style value);
    private static void DropDownStyleProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    protected virtual void OnDropDownStyleChanged(PropertyChangedEventArgs`1<Style> e);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    private static void IsOpenProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsOpenChanged(PropertyChangedEventArgs`1<bool> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    public virtual void OnApplyTemplate();
    private void PreOnApplyTemplate();
    private void PostOnApplyTemplate();
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.PopupControlButton : ExpanderButton {
    private bool isClickInProgress;
    public static DependencyProperty IsPopupOpenProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> IsPopupOpenChanged;
    protected string ExpandToolTip { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the popup is open or not.")]
[LocalizabilityAttribute]
public bool IsPopupOpen { get; public set; }
    private static PopupControlButton();
    protected virtual string get_ExpandToolTip();
    protected virtual void OnChecked(RoutedEventArgs e);
    protected virtual void OnUnchecked(RoutedEventArgs e);
    private void UpdateIsPopupOpen();
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    private bool GetIsMouseReallyOver();
    private void UpdateIsChecked();
    public bool get_IsPopupOpen();
    public void set_IsPopupOpen(bool value);
    private static void IsPopupOpenProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_IsPopupOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsPopupOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsPopupOpenChanged(PropertyChangedEventArgs`1<bool> e);
    private void OnIsPopupOpenChangedImplementation(PropertyChangedEventArgs`1<bool> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
}
public class Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule : TextFilterRule {
    private static string TextContainsCharactersRegexPattern;
    private static string TextContainsWordsRegexPattern;
    private Regex cachedRegex;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <PropertyNames>k__BackingField;
    public ICollection`1<string> PropertyNames { get; private set; }
    private static PropertiesTextContainsFilterRule();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_PropertyNames();
    [CompilerGeneratedAttribute]
private void set_PropertyNames(ICollection`1<string> value);
    public virtual bool Evaluate(object item);
    protected virtual bool Evaluate(string data);
    protected virtual void OnEvaluationResultInvalidated();
    private void UpdateCachedRegex();
    private void PropertiesTextContainsFilterRule_EvaluationResultInvalidated(object sender, EventArgs e);
    [OnDeserializedAttribute]
private void Initialize(StreamingContext context);
}
public class Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    public T OldValue { get; private set; }
    public T NewValue { get; private set; }
    public PropertyChangedEventArgs`1(T oldValue, T newValue);
    [CompilerGeneratedAttribute]
public T get_OldValue();
    [CompilerGeneratedAttribute]
private void set_OldValue(T value);
    [CompilerGeneratedAttribute]
public T get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(T value);
}
internal class Microsoft.Management.UI.Internal.PropertyValueComparer : object {
    private IPropertyValueGetter propertyValueGetter;
    private List`1<UIPropertyGroupDescription> dataDescriptions;
    private bool sortRecursively;
    public PropertyValueComparer(List`1<UIPropertyGroupDescription> dataDescriptions, bool sortRecursively, IPropertyValueGetter valueGetter);
    public sealed virtual int Compare(object a, object b);
    private void GetPropertyValues(string propertyName, object a, object b, Object& firstValue, Object& secondValue);
    private int CompareData(object firstValue, object secondValue, StringComparison stringComparison);
}
public class Microsoft.Management.UI.Internal.PropertyValueGetter : object {
    private static string PropertyDescriptorColumnId;
    private DataTable cachedProperties;
    public virtual bool TryGetPropertyValue(string propertyName, object value, Object& propertyValue);
    public virtual bool TryGetPropertyValue(string propertyName, object value, T& propertyValue);
    private PropertyDescriptor GetPropertyDescriptor(string propertyName, object value);
    private bool TryGetPropertyValueInternal(PropertyDescriptor descriptor, object value, Object& propertyValue);
}
public class Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1 : SelectorFilterRule {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; protected set; }
    public PropertyValueSelectorFilterRule`1(string propertyName, string propertyDisplayName);
    public PropertyValueSelectorFilterRule`1(string propertyName, string propertyDisplayName, IEnumerable`1<FilterRule> rules);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected void set_PropertyName(string value);
    public virtual bool Evaluate(object item);
    private bool TryGetPropertyValue(object item, T& propertyValue);
}
public class Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1 : ReadOnlyCollection`1<T> {
    private IAsyncProgress asyncProgress;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool OperationInProgress { get; }
    public Exception OperationError { get; }
    public ReadOnlyObservableAsyncCollection`1(IList`1<T> list);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual bool get_OperationInProgress();
    public sealed virtual Exception get_OperationError();
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    private void OnPropertyChanged(PropertyChangedEventArgs args);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
}
public enum Microsoft.Management.UI.Internal.ResizeGripLocation : Enum {
    public int value__;
    public static ResizeGripLocation Right;
    public static ResizeGripLocation Left;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.Resizer : ContentControl {
    private AdornerLayer adornerLayer;
    private UIElementAdorner adorner;
    private ContentControl adornerContent;
    private Thumb leftGrip;
    private Thumb rightGrip;
    public static DependencyProperty DraggingTemplateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<DataTemplate>> DraggingTemplateChanged;
    public static DependencyProperty GripBrushProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<Brush>> GripBrushChanged;
    public static DependencyProperty GripLocationProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ResizeGripLocation>> GripLocationChanged;
    public static DependencyProperty GripWidthProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<double>> GripWidthChanged;
    public static DependencyProperty ResizeWhileDraggingProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<bool>> ResizeWhileDraggingChanged;
    public static DependencyProperty ThumbGripLocationProperty;
    public static DependencyProperty VisibleGripWidthProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<double>> VisibleGripWidthChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the template used for the dragging indicator when ResizeWhileDragging is false.")]
[LocalizabilityAttribute]
public DataTemplate DraggingTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the color of the resize grips.")]
[LocalizabilityAttribute]
public Brush GripBrush { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value of what grips.")]
[LocalizabilityAttribute]
public ResizeGripLocation GripLocation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the width of the grips.")]
[LocalizabilityAttribute]
public double GripWidth { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating if resizing occurs while dragging.")]
[LocalizabilityAttribute]
public bool ResizeWhileDragging { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the visible width of the grips.")]
[LocalizabilityAttribute]
public double VisibleGripWidth { get; public set; }
    private static Resizer();
    internal static Thickness CreateGripThickness(double visibleGripWidth, ResizeGripLocation gripLocation);
    private void CreateAdorner();
    private void RemoveAdorner();
    private void OnLeftGripDragCompleted(object sender, DragCompletedEventArgs e);
    private void OnLeftGripDragStarted(object sender, DragStartedEventArgs e);
    private void OnLeftGripDragDelta(object sender, DragDeltaEventArgs e);
    private void OnRightGripDragCompleted(object sender, DragCompletedEventArgs e);
    private void OnRightGripDragStarted(object sender, DragStartedEventArgs e);
    private void OnRightGripDragDelta(object sender, DragDeltaEventArgs e);
    private void PerformDrag(ResizeGripLocation location, DragDeltaEventArgs e);
    private void StartDragging(ResizeGripLocation location);
    private void StopDragging(ResizeGripLocation location, DragCompletedEventArgs e);
    private double GetNewWidth(ResizeGripLocation location, double horzDelta);
    private double GetHorizontalDelta(ResizeGripLocation location, double horzDelta);
    private double GetConstrainedValue(double value, double max, double min);
    public DataTemplate get_DraggingTemplate();
    public void set_DraggingTemplate(DataTemplate value);
    private static void DraggingTemplateProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DraggingTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<DataTemplate>> value);
    [CompilerGeneratedAttribute]
public void remove_DraggingTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<DataTemplate>> value);
    protected virtual void OnDraggingTemplateChanged(PropertyChangedEventArgs`1<DataTemplate> e);
    public Brush get_GripBrush();
    public void set_GripBrush(Brush value);
    private static void GripBrushProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_GripBrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    [CompilerGeneratedAttribute]
public void remove_GripBrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    protected virtual void OnGripBrushChanged(PropertyChangedEventArgs`1<Brush> e);
    public ResizeGripLocation get_GripLocation();
    public void set_GripLocation(ResizeGripLocation value);
    private static void GripLocationProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_GripLocationChanged(EventHandler`1<PropertyChangedEventArgs`1<ResizeGripLocation>> value);
    [CompilerGeneratedAttribute]
public void remove_GripLocationChanged(EventHandler`1<PropertyChangedEventArgs`1<ResizeGripLocation>> value);
    protected virtual void OnGripLocationChanged(PropertyChangedEventArgs`1<ResizeGripLocation> e);
    public double get_GripWidth();
    public void set_GripWidth(double value);
    private static void GripWidthProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_GripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    [CompilerGeneratedAttribute]
public void remove_GripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    protected virtual void OnGripWidthChanged(PropertyChangedEventArgs`1<double> e);
    public bool get_ResizeWhileDragging();
    public void set_ResizeWhileDragging(bool value);
    private static void ResizeWhileDraggingProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ResizeWhileDraggingChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_ResizeWhileDraggingChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnResizeWhileDraggingChanged(PropertyChangedEventArgs`1<bool> e);
    public static ResizeGripLocation GetThumbGripLocation(DependencyObject element);
    public static void SetThumbGripLocation(DependencyObject element, ResizeGripLocation value);
    private static void ThumbGripLocationProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public double get_VisibleGripWidth();
    public void set_VisibleGripWidth(double value);
    private static void VisibleGripWidthProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_VisibleGripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    [CompilerGeneratedAttribute]
public void remove_VisibleGripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    protected virtual void OnVisibleGripWidthChanged(PropertyChangedEventArgs`1<double> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    public virtual void OnApplyTemplate();
    private void PreOnApplyTemplate();
    private void PostOnApplyTemplate();
}
public class Microsoft.Management.UI.Internal.ResizerGripThicknessConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class Microsoft.Management.UI.Internal.RetryActionCallback`1 : MulticastDelegate {
    public RetryActionCallback`1(object object, IntPtr method);
    public virtual void Invoke(T item);
    public virtual IAsyncResult BeginInvoke(T item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ScalableImage : FrameworkElement {
    public static DependencyProperty SourceProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ScalableImageSource>> SourceChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the ScalableImageSource used to render the image. This is a dependency property.")]
[LocalizabilityAttribute]
public ScalableImageSource Source { get; public set; }
    private static ScalableImage();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    public ScalableImageSource get_Source();
    public void set_Source(ScalableImageSource value);
    private static void SourceProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SourceChanged(EventHandler`1<PropertyChangedEventArgs`1<ScalableImageSource>> value);
    [CompilerGeneratedAttribute]
public void remove_SourceChanged(EventHandler`1<PropertyChangedEventArgs`1<ScalableImageSource>> value);
    protected virtual void OnSourceChanged(PropertyChangedEventArgs`1<ScalableImageSource> e);
    private void OnSourceChangedImplementation(PropertyChangedEventArgs`1<ScalableImageSource> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.ScalableImageSource : Freezable {
    public static DependencyProperty AccessibleNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> AccessibleNameChanged;
    public static DependencyProperty BrushProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<Brush>> BrushChanged;
    public static DependencyProperty ImageProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ImageSource>> ImageChanged;
    public static DependencyProperty SizeProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<Size>> SizeChanged;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the accessible name of the image.  This is used by accessibility clients to describe the image, and must be localized.")]
[LocalizabilityAttribute]
public string AccessibleName { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the source used to render the image as a vector.If this is set, the Image property will be ignored.")]
[LocalizabilityAttribute]
public Brush Brush { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the source used to render the image as a bitmap. If the Brush property is set, this will be ignored.")]
[LocalizabilityAttribute]
public ImageSource Image { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the suggested size of the image.")]
[LocalizabilityAttribute]
public Size Size { get; public set; }
    private static ScalableImageSource();
    protected virtual Freezable CreateInstanceCore();
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    private static void AccessibleNameProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AccessibleNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_AccessibleNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnAccessibleNameChanged(PropertyChangedEventArgs`1<string> e);
    public Brush get_Brush();
    public void set_Brush(Brush value);
    private static void BrushProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_BrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    [CompilerGeneratedAttribute]
public void remove_BrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    protected virtual void OnBrushChanged(PropertyChangedEventArgs`1<Brush> e);
    public ImageSource get_Image();
    public void set_Image(ImageSource value);
    private static void ImageProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ImageChanged(EventHandler`1<PropertyChangedEventArgs`1<ImageSource>> value);
    [CompilerGeneratedAttribute]
public void remove_ImageChanged(EventHandler`1<PropertyChangedEventArgs`1<ImageSource>> value);
    protected virtual void OnImageChanged(PropertyChangedEventArgs`1<ImageSource> e);
    public Size get_Size();
    public void set_Size(Size value);
    private static void SizeProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SizeChanged(EventHandler`1<PropertyChangedEventArgs`1<Size>> value);
    [CompilerGeneratedAttribute]
public void remove_SizeChanged(EventHandler`1<PropertyChangedEventArgs`1<Size>> value);
    protected virtual void OnSizeChanged(PropertyChangedEventArgs`1<Size> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
}
[LocalizabilityAttribute]
public class Microsoft.Management.UI.Internal.SearchBox : Control {
    private SearchTextParser parser;
    [CompilerGeneratedAttribute]
private EventHandler FilterExpressionChanged;
    public static RoutedCommand ClearTextCommand;
    public static DependencyProperty BackgroundTextProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> BackgroundTextChanged;
    public static DependencyProperty TextProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<string>> TextChanged;
    public FilterExpressionNode FilterExpression { get; }
    public bool HasFilterExpression { get; }
    public SearchTextParser Parser { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the background text of the search box.")]
[LocalizabilityAttribute]
public string BackgroundText { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the text contents of the search box.")]
[LocalizabilityAttribute]
public string Text { get; public set; }
    private static SearchBox();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public sealed virtual bool get_HasFilterExpression();
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    protected virtual void NotifyFilterExpressionChanged();
    public SearchTextParser get_Parser();
    public void set_Parser(SearchTextParser value);
    protected static FilterExpressionNode ConvertToFilterExpression(ICollection`1<SearchTextParseResult> searchBoxItems);
    private static void ClearTextCommand_CommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void ClearTextCommand_CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnClearTextCanExecute(CanExecuteRoutedEventArgs e);
    private void OnClearTextCanExecuteImplementation(CanExecuteRoutedEventArgs e);
    protected virtual void OnClearTextExecuted(ExecutedRoutedEventArgs e);
    private void OnClearTextExecutedImplementation(ExecutedRoutedEventArgs e);
    public string get_BackgroundText();
    public void set_BackgroundText(string value);
    private static void BackgroundTextProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnBackgroundTextChanged(PropertyChangedEventArgs`1<string> e);
    public string get_Text();
    public void set_Text(string value);
    private static void TextProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextChanged(PropertyChangedEventArgs`1<string> e);
    private void OnTextChangedImplementation(PropertyChangedEventArgs`1<string> e);
    private void RaisePropertyChangedEvent(EventHandler`1<PropertyChangedEventArgs`1<T>> eh, PropertyChangedEventArgs`1<T> e);
}
public class Microsoft.Management.UI.Internal.SearchTextParser : object {
    [CompilerGeneratedAttribute]
private TextFilterRule <FullTextRule>k__BackingField;
    protected static string FullTextRuleGroupName;
    protected static string ValueGroupName;
    protected static string ValuePattern;
    [CompilerGeneratedAttribute]
private List`1<SearchableRule> <SearchableRules>k__BackingField;
    public TextFilterRule FullTextRule { get; public set; }
    protected List`1<SearchableRule> SearchableRules { get; private set; }
    private static SearchTextParser();
    [CompilerGeneratedAttribute]
public TextFilterRule get_FullTextRule();
    [CompilerGeneratedAttribute]
public void set_FullTextRule(TextFilterRule value);
    public bool TryAddSearchableRule(SelectorFilterRule selectorRule);
    public void ClearSearchableRules();
    public virtual ReadOnlyCollection`1<SearchTextParseResult> Parse(string text);
    protected virtual string GetPattern();
    [CompilerGeneratedAttribute]
protected List`1<SearchableRule> get_SearchableRules();
    [CompilerGeneratedAttribute]
private void set_SearchableRules(List`1<SearchableRule> value);
    private List`1<SearchTextParseResult> ParseMatches(MatchCollection matches);
}
public class Microsoft.Management.UI.Internal.SearchTextParseResult : object {
    [CompilerGeneratedAttribute]
private FilterRule <FilterRule>k__BackingField;
    public FilterRule FilterRule { get; private set; }
    public SearchTextParseResult(FilterRule rule);
    [CompilerGeneratedAttribute]
public FilterRule get_FilterRule();
    [CompilerGeneratedAttribute]
private void set_FilterRule(FilterRule value);
}
public class Microsoft.Management.UI.Internal.SelectorFilterRule : FilterRule {
    [CompilerGeneratedAttribute]
private ValidatingSelectorValue`1<FilterRule> <AvailableRules>k__BackingField;
    public bool IsValid { get; }
    public ValidatingSelectorValue`1<FilterRule> AvailableRules { get; protected set; }
    public virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public ValidatingSelectorValue`1<FilterRule> get_AvailableRules();
    [CompilerGeneratedAttribute]
protected void set_AvailableRules(ValidatingSelectorValue`1<FilterRule> value);
    public virtual bool Evaluate(object item);
    protected void OnSelectedValueChanged(FilterRule oldValue, FilterRule newValue);
    private void SelectedValue_EvaluationResultInvalidated(object sender, EventArgs e);
    [OnDeserializedAttribute]
private void Initialize(StreamingContext context);
    private void AvailableRules_SelectedValueChanged(object sender, PropertyChangedEventArgs`1<FilterRule> e);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
internal class Microsoft.Management.UI.Internal.ShowCommand.ShowCommandSettings : ApplicationSettingsBase {
    private static ShowCommandSettings defaultInstance;
    public static ShowCommandSettings Default { get; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowOneCommandTop { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowOneCommandLeft { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowOneCommandWidth { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowOneCommandHeight { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowCommandsTop { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowCommandsLeft { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowCommandsWidth { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("-1")]
public double ShowCommandsHeight { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool ShowCommandsWindowMaximized { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool ShowOneCommandWindowMaximized { get; public set; }
    private static ShowCommandSettings();
    public static ShowCommandSettings get_Default();
    public double get_ShowOneCommandTop();
    public void set_ShowOneCommandTop(double value);
    public double get_ShowOneCommandLeft();
    public void set_ShowOneCommandLeft(double value);
    public double get_ShowOneCommandWidth();
    public void set_ShowOneCommandWidth(double value);
    public double get_ShowOneCommandHeight();
    public void set_ShowOneCommandHeight(double value);
    public double get_ShowCommandsTop();
    public void set_ShowCommandsTop(double value);
    public double get_ShowCommandsLeft();
    public void set_ShowCommandsLeft(double value);
    public double get_ShowCommandsWidth();
    public void set_ShowCommandsWidth(double value);
    public double get_ShowCommandsHeight();
    public void set_ShowCommandsHeight(double value);
    public bool get_ShowCommandsWindowMaximized();
    public void set_ShowCommandsWindowMaximized(bool value);
    public bool get_ShowOneCommandWindowMaximized();
    public void set_ShowOneCommandWindowMaximized(bool value);
}
public abstract class Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1 : ComparableValueFilterRule`1<T> {
    [CompilerGeneratedAttribute]
private ValidatingValue`1<T> <Value>k__BackingField;
    public ValidatingValue`1<T> Value { get; protected set; }
    public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public ValidatingValue`1<T> get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(ValidatingValue`1<T> value);
    public virtual bool get_IsValid();
    private void Value_PropertyChanged(object sender, PropertyChangedEventArgs e);
    [OnDeserializedAttribute]
private void Initialize(StreamingContext context);
}
public abstract class Microsoft.Management.UI.Internal.StateDescriptor`1 : object {
    private Guid id;
    private string name;
    public Guid Id { get; protected set; }
    public string Name { get; public set; }
    protected StateDescriptor`1(string name);
    public Guid get_Id();
    protected void set_Id(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public abstract virtual void SaveState(T subject);
    public abstract virtual void RestoreState(T subject);
}
public class Microsoft.Management.UI.Internal.StringFormatConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
public static class Microsoft.Management.UI.Internal.TextBlockService : object {
    private static DependencyPropertyKey IsTextTrimmedPropertyKey;
    public static DependencyProperty IsTextTrimmedProperty;
    public static DependencyProperty IsTextTrimmedExternallyProperty;
    public static DependencyProperty IsTextTrimmedMonitoringEnabledProperty;
    public static DependencyProperty UntrimmedTextProperty;
    private static TextBlockService();
    private static void OnTextBlockSizeChanged(object sender, SizeChangedEventArgs e);
    private static void OnTextBlockPropertyChanged(object sender, EventArgs e);
    private static void UpdateIsTextTrimmed(TextBlock textBlock);
    private static bool CalculateIsTextTrimmed(TextBlock textBlock);
    public static bool GetIsTextTrimmed(DependencyObject element);
    private static void SetIsTextTrimmed(DependencyObject element, bool value);
    private static void IsTextTrimmedProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public static bool GetIsTextTrimmedExternally(DependencyObject element);
    public static void SetIsTextTrimmedExternally(DependencyObject element, bool value);
    private static void IsTextTrimmedExternallyProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public static bool GetIsTextTrimmedMonitoringEnabled(DependencyObject element);
    public static void SetIsTextTrimmedMonitoringEnabled(DependencyObject element, bool value);
    private static void IsTextTrimmedMonitoringEnabledProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void IsTextTrimmedMonitoringEnabledProperty_PropertyChangedImplementation(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public static string GetUntrimmedText(DependencyObject element);
    public static void SetUntrimmedText(DependencyObject element, string value);
    private static void UntrimmedTextProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
}
public class Microsoft.Management.UI.Internal.TextContainsFilterRule : TextFilterRule {
    private static string TextContainsCharactersRegexPattern;
    private static string TextContainsWordsRegexPattern;
    private static TextContainsFilterRule();
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextDoesNotContainFilterRule : TextContainsFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextDoesNotEqualFilterRule : TextEqualsFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextEndsWithFilterRule : TextFilterRule {
    private static string TextEndsWithCharactersRegexPattern;
    private static string TextEndsWithWordsRegexPattern;
    private static TextEndsWithFilterRule();
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextEqualsFilterRule : TextFilterRule {
    private static string TextEqualsCharactersRegexPattern;
    private static TextEqualsFilterRule();
    protected virtual bool Evaluate(string data);
}
public abstract class Microsoft.Management.UI.Internal.TextFilterRule : SingleValueComparableValueFilterRule`1<string> {
    protected static string WordBoundaryRegexPattern;
    private bool ignoreCase;
    private bool cultureInvariant;
    public bool IgnoreCase { get; public set; }
    public bool CultureInvariant { get; public set; }
    private static TextFilterRule();
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_CultureInvariant();
    public void set_CultureInvariant(bool value);
    protected internal string GetParsedValue(Boolean& evaluateAsExactMatch);
    protected internal string GetRegexPattern(string pattern, string exactMatchPattern);
    protected internal RegexOptions GetRegexOptions();
    protected internal bool ExactMatchEvaluate(string data, string pattern, string exactMatchPattern);
}
public class Microsoft.Management.UI.Internal.TextStartsWithFilterRule : TextFilterRule {
    private static string TextStartsWithCharactersRegexPattern;
    private static string TextStartsWithWordsRegexPattern;
    private static TextStartsWithFilterRule();
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextTrimConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    private static object TrimValue(object value);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
internal class Microsoft.Management.UI.Internal.UIElementAdorner : Adorner {
    private VisualCollection children;
    public static DependencyProperty ChildProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<UIElement>> ChildChanged;
    protected int VisualChildrenCount { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the child element.")]
[LocalizabilityAttribute]
public UIElement Child { get; public set; }
    public UIElementAdorner(UIElement adornedElement);
    private static UIElementAdorner();
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    public UIElement get_Child();
    public void set_Child(UIElement value);
    private static void ChildProperty_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ChildChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    [CompilerGeneratedAttribute]
public void remove_ChildChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    private void RaiseChildChanged(PropertyChangedEventArgs`1<UIElement> e);
    protected virtual void OnChildChanged(PropertyChangedEventArgs`1<UIElement> e);
    private void OnChildChangedImplementation(PropertyChangedEventArgs`1<UIElement> e);
}
public class Microsoft.Management.UI.Internal.UIPropertyGroupDescription : PropertyGroupDescription {
    private ListSortDirection sortDirection;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DisplayContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    public string DisplayName { get; public set; }
    public object DisplayContent { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    public Type DataType { get; public set; }
    public UIPropertyGroupDescription(string propertyName, string displayName);
    public UIPropertyGroupDescription(string propertyName, string displayName, Type dataType);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public object get_DisplayContent();
    [CompilerGeneratedAttribute]
public void set_DisplayContent(object value);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(Type value);
    public ListSortDirection ReverseSortDirection();
    public virtual string ToString();
}
public enum Microsoft.Management.UI.Internal.UserActionState : Enum {
    public int value__;
    public static UserActionState Enabled;
    public static UserActionState Disabled;
    public static UserActionState Hidden;
}
[ExtensionAttribute]
public static class Microsoft.Management.UI.Internal.Utilities : object {
    public static bool AreAllItemsOfType(IEnumerable items);
    [ExtensionAttribute]
public static T Find(IEnumerable items);
    public static string NullCheckTrim(string value);
    public static void ResortObservableCollection(ObservableCollection`1<T> modify, IEnumerable sorted);
}
public class Microsoft.Management.UI.Internal.ValidatingSelectorValue`1 : ValidatingValueBase {
    private static DataErrorInfoValidationResult InvalidSelectionResult;
    private List`1<T> availableValues;
    private static string SelectedIndexPropertyName;
    private int selectedIndex;
    private static string SelectedValuePropertyName;
    private IValueConverter displayNameConverter;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<T>> SelectedValueChanged;
    public IList`1<T> AvailableValues { get; }
    public int SelectedIndex { get; public set; }
    public T SelectedValue { get; }
    public IValueConverter DisplayNameConverter { get; public set; }
    private static ValidatingSelectorValue`1();
    public IList`1<T> get_AvailableValues();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public T get_SelectedValue();
    public IValueConverter get_DisplayNameConverter();
    public void set_DisplayNameConverter(IValueConverter value);
    [CompilerGeneratedAttribute]
public void add_SelectedValueChanged(EventHandler`1<PropertyChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedValueChanged(EventHandler`1<PropertyChangedEventArgs`1<T>> value);
    protected virtual DataErrorInfoValidationResult Validate();
    protected virtual DataErrorInfoValidationResult Validate(string columnName);
    protected void NotifySelectedValueChanged(T oldValue, T newValue);
    private bool IsIndexWithinBounds(int value);
    private void NotifySelectedValueChanged(int oldIndex, int newIndex);
}
public class Microsoft.Management.UI.Internal.ValidatingSelectorValueToDisplayNameConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.ValidatingValue`1 : ValidatingValueBase {
    private static string ValuePropertyName;
    private object value;
    public object Value { get; public set; }
    public object get_Value();
    public void set_Value(object value);
    public T GetCastValue();
    public void ForceValidationUpdate();
    protected virtual DataErrorInfoValidationResult Validate();
    protected virtual DataErrorInfoValidationResult Validate(string columnName);
    private bool IsValueEmpty();
    private bool TryGetCastValue(object rawValue, T& castValue);
    private bool TryGetEnumValue(object rawValue, T& castValue);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Management.UI.Internal.ValidatingValueBase : object {
    private List`1<DataErrorInfoValidationRule> validationRules;
    private ReadOnlyCollection`1<DataErrorInfoValidationRule> readonlyValidationRules;
    private bool isValidationRulesCollectionDirty;
    private DataErrorInfoValidationResult cachedValidationResult;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ReadOnlyCollection`1<DataErrorInfoValidationRule> ValidationRules { get; }
    public bool IsValid { get; }
    public string Item { get; }
    public string Error { get; }
    public ReadOnlyCollection`1<DataErrorInfoValidationRule> get_ValidationRules();
    public bool get_IsValid();
    public sealed virtual string get_Item(string columnName);
    public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void AddValidationRule(DataErrorInfoValidationRule rule);
    public void RemoveValidationRule(DataErrorInfoValidationRule rule);
    public void ClearValidationRules();
    protected abstract virtual DataErrorInfoValidationResult Validate();
    protected abstract virtual DataErrorInfoValidationResult Validate(string propertyName);
    internal DataErrorInfoValidationResult EvaluateValidationRules(object value, CultureInfo cultureInfo);
    protected void InvalidateValidationResult();
    protected void NotifyPropertyChanged(string propertyName);
    private DataErrorInfoValidationResult GetValidationResult();
    private void UpdateValidationResult();
    private void UpdateValidationResult(string columnName);
    private void NotifyValidationResultUpdated();
    private void ClearValidationResult();
}
public class Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter : object {
    public static ValidatingValueToGenericParameterTypeConverter Instance { get; }
    public static ValidatingValueToGenericParameterTypeConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.Management.UI.Internal.ViewGroupToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.VisualToAncestorDataConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.WaitRing : Control {
    private static WaitRing();
}
internal class Microsoft.Management.UI.Internal.WeakEventListener`1 : object {
    private EventHandler`1<TEventArgs> realHander;
    public WeakEventListener`1(EventHandler`1<TEventArgs> handler);
    public sealed virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
[ExtensionAttribute]
internal static class Microsoft.Management.UI.Internal.WpfHelp : object {
    private static Dictionary`2<FrameworkElement, RetryActionAfterLoadedDataQueue> retryActionData;
    private static WpfHelp();
    public static bool RetryActionAfterLoaded(FrameworkElement element, RetryActionCallback`1<T> callback, T parameter);
    private static void Element_Loaded(object sender, RoutedEventArgs e);
    public static void RemoveFromParent(FrameworkElement element);
    public static void AddChild(FrameworkElement parent, FrameworkElement element);
    public static T GetVisualChild(DependencyObject obj);
    public static List`1<T> FindVisualChildren(DependencyObject obj);
    [ExtensionAttribute]
public static T FindVisualAncestorData(DependencyObject obj);
    [ExtensionAttribute]
public static T FindVisualAncestor(DependencyObject object);
    [ExtensionAttribute]
public static bool TryExecute(RoutedCommand command, object parameter, IInputElement target);
    public static T GetOptionalTemplateChild(Control templateParent, string childName);
    public static T GetTemplateChild(Control templateParent, string childName);
    private static void HandleWrongTemplatePartType(string name);
    public static void HandleMissingTemplatePart(string name);
    public static void SetComponentResourceStyle(FrameworkElement element, string keyName);
    public static RoutedPropertyChangedEventArgs`1<T> CreateRoutedPropertyChangedEventArgs(DependencyPropertyChangedEventArgs propertyEventArgs);
    public static RoutedPropertyChangedEventArgs`1<T> CreateRoutedPropertyChangedEventArgs(DependencyPropertyChangedEventArgs propertyEventArgs, RoutedEvent routedEvent);
    public static void ChangeIndex(ItemCollection items, object item, int newIndex);
}
public class Microsoft.Management.UI.SettingsDialog : Window {
    internal Grid MainGrid;
    internal GroupBox HelpSectionsGroup;
    internal Grid HelpSectionsGrid;
    internal CheckBox Synopsys;
    internal CheckBox Syntax;
    internal CheckBox Description;
    internal CheckBox Parameters;
    internal CheckBox Inputs;
    internal CheckBox Outputs;
    internal CheckBox Notes;
    internal CheckBox Examples;
    internal CheckBox RelatedLinks;
    internal CheckBox Remarks;
    internal GroupBox SearchOptions;
    internal CheckBox CaseSensitive;
    internal CheckBox WholeWord;
    internal Grid ButtonGrid;
    internal Button OK;
    internal Button Cancel;
    private bool _contentLoaded;
    private void OK_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class Microsoft.PowerShell.Commands.Internal.HelpWindowHelper : object {
    private static void ShowHelpWindow(PSObject helpObj, PSCmdlet cmdlet);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl : UserControl {
    internal TextBlock WaitMessageText;
    internal ComboBox ModulesCombo;
    internal Button RefreshButton;
    internal TextBox CommandName;
    internal ShowModuleControl ShowModuleControl;
    private bool _contentLoaded;
    internal ShowModuleControl CurrentShowModuleControl { get; }
    internal ShowModuleControl get_CurrentShowModuleControl();
    private void RefreshButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object obj, RoutedEventArgs args);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel : object {
    private bool waitMessageDisplayed;
    private bool noCommonParameter;
    private string commandNameFilter;
    private List`1<ModuleViewModel> modules;
    private bool canRun;
    private bool canCopy;
    private ModuleViewModel selectedModule;
    private Visibility refreshVisibility;
    private object extraViewModel;
    private double zoomLevel;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<HelpNeededEventArgs> SelectedCommandInSelectedModuleNeedsHelp;
    [CompilerGeneratedAttribute]
private EventHandler`1<ImportModuleEventArgs> SelectedCommandInSelectedModuleNeedsImportModule;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommandEventArgs> RunSelectedCommandInSelectedModule;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Refresh;
    public double ZoomLevel { get; public set; }
    public static string RefreshTooltip { get; }
    public Visibility RefreshVisibility { get; public set; }
    public bool NoCommonParameter { get; }
    public string CommandNameFilter { get; public set; }
    public ModuleViewModel SelectedModule { get; public set; }
    public bool CanRun { get; }
    public bool CanCopy { get; }
    public List`1<ModuleViewModel> Modules { get; }
    public Visibility WaitMessageVisibility { get; }
    public Visibility MainGridVisibility { get; }
    public bool MainGridDisplayed { get; }
    public bool WaitMessageDisplayed { get; public set; }
    public object ExtraViewModel { get; public set; }
    public AllModulesViewModel(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands);
    public AllModulesViewModel(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, bool noCommonParameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectedCommandInSelectedModuleNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedCommandInSelectedModuleNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectedCommandInSelectedModuleNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedCommandInSelectedModuleNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RunSelectedCommandInSelectedModule(EventHandler`1<CommandEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RunSelectedCommandInSelectedModule(EventHandler`1<CommandEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Refresh(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Refresh(EventHandler`1<EventArgs> value);
    public double get_ZoomLevel();
    public void set_ZoomLevel(double value);
    public static string get_RefreshTooltip();
    public Visibility get_RefreshVisibility();
    public void set_RefreshVisibility(Visibility value);
    public bool get_NoCommonParameter();
    public string get_CommandNameFilter();
    public void set_CommandNameFilter(string value);
    public ModuleViewModel get_SelectedModule();
    public void set_SelectedModule(ModuleViewModel value);
    public bool get_CanRun();
    public bool get_CanCopy();
    public List`1<ModuleViewModel> get_Modules();
    public Visibility get_WaitMessageVisibility();
    public Visibility get_MainGridVisibility();
    public bool get_MainGridDisplayed();
    public bool get_WaitMessageDisplayed();
    public void set_WaitMessageDisplayed(bool value);
    public object get_ExtraViewModel();
    public void set_ExtraViewModel(object value);
    public string GetScript();
    internal void OnRefresh();
    private static bool IsAll(string name);
    private void SelectedModule_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetCanRun();
    private void SetCanCopy();
    private void Initialization(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, bool noCommonParameterInModel);
    private int Compare(ModuleViewModel source, ModuleViewModel target);
    private void SelectedModule_SelectedCommandNeedsHelp(object sender, HelpNeededEventArgs e);
    private void SelectedModule_SelectedCommandNeedsImportModule(object sender, ImportModuleEventArgs e);
    private void OnSelectedCommandInSelectedModuleNeedsHelp(HelpNeededEventArgs e);
    private void OnSelectedCommandInSelectedModuleNeedsImportModule(ImportModuleEventArgs e);
    private void SelectedModule_RunSelectedCommand(object sender, CommandEventArgs e);
    private void OnRunSelectedCommandInSelectedModule(CommandEventArgs e);
    private void OnNotifyPropertyChanged(string propertyName);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl : UserControl {
    private CommandViewModel currentCommandViewModel;
    internal ImageButton helpButton;
    internal TextBlock NoParametersText;
    internal ParameterSetControl ParameterSetControl;
    internal NotImportedCmdletControl NotImportedControl;
    internal TabControl ParameterSetTabControl;
    internal Border UbiquitousBorder;
    private bool _contentLoaded;
    private CommandViewModel CurrentCommandViewModel { get; }
    private CommandViewModel get_CurrentCommandViewModel();
    private void ParameterSetTabControl_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void CmdletControl_KeyDown(object sender, KeyEventArgs e);
    private void HelpButton_Click(object sender, RoutedEventArgs e);
    private void ImportModuleButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs : EventArgs {
    private CommandViewModel command;
    public CommandViewModel Command { get; }
    public CommandEventArgs(CommandViewModel command);
    public CommandViewModel get_Command();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel : object {
    private static string SharedParameterSetName;
    private static GridLength star;
    private ModuleViewModel parentModule;
    private string defaultParameterSetName;
    private bool areCommonParametersExpanded;
    private ParameterSetViewModel selectedParameterSet;
    private List`1<ParameterSetViewModel> parameterSets;
    private bool noCommonParameters;
    private ParameterSetViewModel comonParameters;
    private ShowCommandCommandInfo commandInfo;
    private bool selectedParameterSetAllMandatoryParametersHaveValues;
    private bool moduleQualifyCommandName;
    private GridLength commonParametersHeight;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<HelpNeededEventArgs> HelpNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ImportModule;
    public bool ModuleQualifyCommandName { get; public set; }
    public bool AreCommonParametersExpanded { get; public set; }
    public ParameterSetViewModel SelectedParameterSet { get; public set; }
    public bool SelectedParameterSetAllMandatoryParametersHaveValues { get; public set; }
    public List`1<ParameterSetViewModel> ParameterSets { get; }
    public Visibility ParameterSetTabControlVisibility { get; }
    public Visibility SingleParameterSetControlVisibility { get; }
    public ParameterSetViewModel CommonParameters { get; }
    public Visibility CommonParameterVisibility { get; }
    public GridLength CommonParametersHeight { get; public set; }
    public Visibility NotImportedVisibility { get; }
    public Visibility NoParameterVisibility { get; }
    public bool IsImported { get; }
    public string Name { get; }
    public string ModuleName { get; }
    public ModuleViewModel ParentModule { get; }
    public string ToolTip { get; }
    public string ImportModuleMessage { get; }
    public string DetailsTitle { get; }
    internal static GridLength Star { get; }
    private static CommandViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_HelpNeeded(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_HelpNeeded(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImportModule(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImportModule(EventHandler`1<EventArgs> value);
    public bool get_ModuleQualifyCommandName();
    public void set_ModuleQualifyCommandName(bool value);
    public bool get_AreCommonParametersExpanded();
    public void set_AreCommonParametersExpanded(bool value);
    public ParameterSetViewModel get_SelectedParameterSet();
    public void set_SelectedParameterSet(ParameterSetViewModel value);
    public bool get_SelectedParameterSetAllMandatoryParametersHaveValues();
    public void set_SelectedParameterSetAllMandatoryParametersHaveValues(bool value);
    public List`1<ParameterSetViewModel> get_ParameterSets();
    public Visibility get_ParameterSetTabControlVisibility();
    public Visibility get_SingleParameterSetControlVisibility();
    public ParameterSetViewModel get_CommonParameters();
    public Visibility get_CommonParameterVisibility();
    public GridLength get_CommonParametersHeight();
    public void set_CommonParametersHeight(GridLength value);
    public Visibility get_NotImportedVisibility();
    public Visibility get_NoParameterVisibility();
    public bool get_IsImported();
    public string get_Name();
    public string get_ModuleName();
    public ModuleViewModel get_ParentModule();
    public string get_ToolTip();
    public string get_ImportModuleMessage();
    public string get_DetailsTitle();
    internal static GridLength get_Star();
    public string GetScript();
    public void OpenHelpWindow();
    internal static bool IsSharedParameterSetName(string name);
    internal static CommandViewModel GetCommandViewModel(ModuleViewModel module, ShowCommandCommandInfo commandInfo, bool noCommonParameters);
    internal void OnHelpNeeded();
    internal void OnImportModule();
    private void SetCommonParametersHeight();
    private int Compare(ParameterSetViewModel source, ParameterSetViewModel target);
    private void OnNotifyPropertyChanged(string propertyName);
    private void SelectedParameterSet_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs : EventArgs {
    private string commandName;
    public string CommandName { get; }
    public HelpNeededEventArgs(string commandName);
    public string get_CommandName();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton : ImageButtonBase {
    internal Button innerButton;
    private bool _contentLoaded;
    private void ImageButton_Loaded(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase : Grid {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty EnabledImageSourceProperty;
    public static DependencyProperty DisabledImageSourceProperty;
    public ImageSource EnabledImageSource { get; public set; }
    public ImageSource DisabledImageSource { get; public set; }
    public RoutedUICommand Command { get; public set; }
    private static ImageButtonBase();
    public ImageSource get_EnabledImageSource();
    public void set_EnabledImageSource(ImageSource value);
    public ImageSource get_DisabledImageSource();
    public void set_DisabledImageSource(ImageSource value);
    public RoutedUICommand get_Command();
    public void set_Command(RoutedUICommand value);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonToolTipConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton : ImageButtonBase {
    public static DependencyProperty IsCheckedProperty;
    internal ToggleButton toggleInnerButton;
    private bool _contentLoaded;
    public bool IsChecked { get; public set; }
    private static ImageToggleButton();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    private void ImageButton_Loaded(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs : EventArgs {
    private string commandName;
    private string parentModuleName;
    private string selectedModuleName;
    public string CommandName { get; }
    public string ParentModuleName { get; }
    public string SelectedModuleName { get; }
    public ImportModuleEventArgs(string commandName, string parentModuleName, string selectedModuleName);
    public string get_CommandName();
    public string get_ParentModuleName();
    public string get_SelectedModuleName();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel : object {
    private bool isModuleImported;
    private string name;
    private ObservableCollection`1<CommandViewModel> filteredCommands;
    private CommandViewModel selectedCommand;
    private List`1<CommandViewModel> commands;
    private bool isThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues;
    private bool isThereASelectedCommand;
    private AllModulesViewModel allModules;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<HelpNeededEventArgs> SelectedCommandNeedsHelp;
    [CompilerGeneratedAttribute]
private EventHandler`1<ImportModuleEventArgs> SelectedCommandNeedsImportModule;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommandEventArgs> RunSelectedCommand;
    public string Name { get; }
    public string DisplayName { get; }
    public Visibility CommandControlVisibility { get; }
    public GridLength CommandRowHeight { get; }
    public List`1<CommandViewModel> Commands { get; }
    public ObservableCollection`1<CommandViewModel> FilteredCommands { get; }
    public CommandViewModel SelectedCommand { get; public set; }
    public bool IsThereASelectedCommand { get; public set; }
    public bool IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues { get; public set; }
    public AllModulesViewModel AllModules { get; }
    internal bool IsModuleImported { get; }
    public ModuleViewModel(string name, Dictionary`2<string, ShowCommandModuleInfo> importedModules);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectedCommandNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedCommandNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectedCommandNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedCommandNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RunSelectedCommand(EventHandler`1<CommandEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RunSelectedCommand(EventHandler`1<CommandEventArgs> value);
    public string get_Name();
    public string get_DisplayName();
    public Visibility get_CommandControlVisibility();
    public GridLength get_CommandRowHeight();
    public List`1<CommandViewModel> get_Commands();
    public ObservableCollection`1<CommandViewModel> get_FilteredCommands();
    public CommandViewModel get_SelectedCommand();
    public void set_SelectedCommand(CommandViewModel value);
    public bool get_IsThereASelectedCommand();
    public void set_IsThereASelectedCommand(bool value);
    public bool get_IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues();
    public void set_IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues(bool value);
    public AllModulesViewModel get_AllModules();
    internal bool get_IsModuleImported();
    internal void SetAllModules(AllModulesViewModel parentAllModules);
    internal void SortCommands(bool markRepeatedCmdlets);
    internal void RefreshFilteredCommands(string filter);
    internal void OnRunSelectedCommand();
    internal void OnSelectedCommandNeedsHelp(HelpNeededEventArgs e);
    internal void OnSelectedCommandNeedsImportModule();
    private static bool Matches(WildcardPattern filterPattern, string commandName, string filter);
    private static bool MatchesEvenIfInPlural(string commandName, string filter);
    private void SelectedCommand_HelpNeeded(object sender, HelpNeededEventArgs e);
    private void SelectedCommand_ImportModule(object sender, EventArgs e);
    private void SelectedCommand_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetIsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues();
    private int Compare(CommandViewModel source, CommandViewModel target);
    private void OnNotifyPropertyChanged(string propertyName);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl : UserControl {
    internal ComboBox comboxParameter;
    internal Button multipleValueButton;
    private bool _contentLoaded;
    private void ButtonBrowse_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog : Window {
    internal ListBox listboxParameter;
    internal Button OK;
    internal Button Cancel;
    private bool _contentLoaded;
    private void ButtonOK_Click(object sender, RoutedEventArgs e);
    private void ButtonCancel_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.NotImportedCmdletControl : UserControl {
    internal TextBlock ImportModuleMessage;
    internal Button ImportModuleButton;
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl : UserControl {
    private UIElement firstFocusableElement;
    private ParameterSetViewModel currentParameterSetViewModel;
    internal ScrollViewer scrollViewerParameter;
    internal Grid MainGrid;
    private bool _contentLoaded;
    private ParameterSetViewModel CurrentParameterSetViewModel { get; }
    public void FocusFirstElement();
    private ParameterSetViewModel get_CurrentParameterSetViewModel();
    private static CheckBox CreateCheckBox(ParameterViewModel parameterViewModel, int rowNumber);
    private static ComboBox CreateComboBoxControl(ParameterViewModel parameterViewModel, int rowNumber, IEnumerable itemsSource);
    private static MultipleSelectionControl CreateMultiSelectComboControl(ParameterViewModel parameterViewModel, int rowNumber, IEnumerable itemsSource);
    private static TextBox CreateTextBoxControl(ParameterViewModel parameterViewModel, int rowNumber);
    private static void MultiLineTextBox_Loaded(object sender, RoutedEventArgs e);
    private void ParameterSetControl_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void CheckBox_Click(object sender, RoutedEventArgs e);
    private RowDefinition CreateNewRow();
    private void AddControlToMainGrid(UIElement uiControl);
    private void CreateAndAddLabel(ParameterViewModel parameterViewModel, int rowNumber);
    private Label CreateLabel(ParameterViewModel parameterViewModel, int rowNumber);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel : object {
    private string name;
    private bool allMandatoryParametersHaveValues;
    private List`1<ParameterViewModel> parameters;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public List`1<ParameterViewModel> Parameters { get; }
    public bool AllMandatoryParametersHaveValues { get; public set; }
    public ParameterSetViewModel(string name, List`1<ParameterViewModel> parameters);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public string get_Name();
    public List`1<ParameterViewModel> get_Parameters();
    public bool get_AllMandatoryParametersHaveValues();
    public void set_AllMandatoryParametersHaveValues(bool value);
    public string GetScript();
    public int GetIndividualParameterCount();
    internal static int Compare(ParameterViewModel source, ParameterViewModel target);
    private static string GetDelimitedParameter(string parameterValue, string openDelimiter, string closeDelimiter);
    private static char ParameterNeedsDelimitation(string parameterValue, bool requireScriptblock);
    private void EvaluateAllMandatoryParametersHaveValues();
    private void OnNotifyPropertyChanged(string propertyName);
    private void MandatoryParameter_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel : object {
    private ShowCommandParameterInfo parameter;
    private object parameterValue;
    private string parameterSetName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ShowCommandParameterInfo Parameter { get; }
    public object Value { get; public set; }
    public string Name { get; }
    public string ParameterSetName { get; }
    public bool IsInSharedParameterSet { get; }
    public string NameTextLabel { get; }
    public string NameCheckLabel { get; }
    public string ToolTip { get; }
    public bool IsMandatory { get; }
    public bool HasValue { get; }
    public ParameterViewModel(ShowCommandParameterInfo parameter, string parameterSetName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public ShowCommandParameterInfo get_Parameter();
    public object get_Value();
    public void set_Value(object value);
    public string get_Name();
    public string get_ParameterSetName();
    public bool get_IsInSharedParameterSet();
    public string get_NameTextLabel();
    public string get_NameCheckLabel();
    public string get_ToolTip();
    public bool get_IsMandatory();
    public bool get_HasValue();
    internal static string EvaluateTooltip(string typeName, int position, bool mandatory, bool shared, bool valueFromPipeline);
    private void OnNotifyPropertyChanged(string propertyName);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow : Window {
    private double zoomLevel;
    private static double ZOOM_INCREMENT;
    private static double ZOOM_MAX;
    private static double ZOOM_MIN;
    internal Grid MainGrid;
    internal AllModulesControl AllModulesControl;
    internal Grid ButtonsGrid;
    internal Button Run;
    internal Button Copy;
    internal Button Cancel;
    private bool _contentLoaded;
    protected virtual void OnClosed(EventArgs e);
    private void ShowAllModulesWindow_Loaded(object sender, RoutedEventArgs e);
    private void ShowAllModulesWindow_SizeChanged(object sender, SizeChangedEventArgs e);
    private void ShowAllModulesWindow_LocationChanged(object sender, EventArgs e);
    private void ShowAllModulesWindow_StateChanged(object sender, EventArgs e);
    private void ZoomEventHandlerPlus(object sender, ExecutedRoutedEventArgs e);
    private void ZoomEventHandlerMinus(object sender, ExecutedRoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper : object {
    internal static string CommandTypeSegment;
    private DispatcherOperationCallback methodThatReturnsDialog;
    private AutoResetEvent windowClosed;
    private AutoResetEvent helpNeeded;
    private AutoResetEvent importModuleNeeded;
    private AutoResetEvent windowLoaded;
    private string commandNeedingHelp;
    private string commandNeedingImportModule;
    private string parentModuleNeedingImportModule;
    private string selectedModuleNeedingImportModule;
    private Window window;
    private Window hostWindow;
    private AllModulesViewModel allModulesViewModel;
    private CommandViewModel commandViewModel;
    private bool dialogCanceled;
    private static string ScriptGetSerializedCommand;
    private static double ScreenWidth { get; }
    private static double ScreenHeight { get; }
    private AutoResetEvent WindowClosed { get; }
    private AutoResetEvent HelpNeeded { get; }
    private AutoResetEvent ImportModuleNeeded { get; }
    private AutoResetEvent WindowLoaded { get; }
    private string CommandNeedingHelp { get; }
    private string ParentModuleNeedingImportModule { get; }
    private bool HasHostWindow { get; }
    protected virtual override void Finalize();
    private static double get_ScreenWidth();
    private static double get_ScreenHeight();
    private AutoResetEvent get_WindowClosed();
    private AutoResetEvent get_HelpNeeded();
    private AutoResetEvent get_ImportModuleNeeded();
    private AutoResetEvent get_WindowLoaded();
    private string get_CommandNeedingHelp();
    private string get_ParentModuleNeedingImportModule();
    private bool get_HasHostWindow();
    public sealed virtual void Dispose();
    internal static void SetClipboardText(string text);
    internal static string GetShowAllModulesCommand(bool isRemoteRunspace, bool isFirstChance);
    private static string GetSerializedCommandScript();
    internal static string GetHelpCommand(string command);
    internal static Dictionary`2<string, ShowCommandModuleInfo> GetImportedModulesDictionary(Object[] moduleObjects);
    internal static List`1<ShowCommandCommandInfo> GetCommandList(Object[] commandObjects);
    internal static Object[] ObjectArrayFromObjectCollection(object commandObjects);
    internal static AllModulesViewModel GetNewAllModulesViewModel(AllModulesViewModel oldViewModel, Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, string selectedModuleNeedingImportModule, string parentModuleNeedingImportModule, string commandNeedingImportModule);
    internal static string GetImportModuleFailedMessage(string command, string module, string error);
    internal static string SingleQuote(string str);
    internal static Window GetHostWindow(PSCmdlet cmdlet);
    private static object GetPropertyValue(Type type, object obj, string propertyName, BindingFlags bindingFlags);
    private static bool SetPropertyValue(Type type, object obj, string propertyName, object value, BindingFlags bindingFlags);
    private static string GetGetModuleSuffix();
    private static string GetShowCommandCommand(string commandName, bool includeAliasAndModules);
    private static object GetCommandViewModel(ShowCommandCommandInfo command, bool noCommonParameter, Dictionary`2<string, ShowCommandModuleInfo> importedModules, bool moduleQualify);
    private static void ActivateWindow(Window window);
    private void ShowAllModulesWindow(PSCmdlet cmdlet, Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, bool noCommonParameter, double windowWidth, double windowHeight, bool passThrough);
    private void CallShowDialog(PSCmdlet cmdlet);
    private void PlainInvokeAndShowDialog();
    private void ShowCommandWindow(PSCmdlet cmdlet, object commandViewModelObj, double windowWidth, double windowHeight, bool passThrough);
    private void ImportModuleDone(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands);
    private void ImportModuleFailed(Exception reason);
    private void DisplayHelp(Collection`1<PSObject> getHelpResults);
    private void ActivateWindow();
    private string GetScript();
    private void SetupWindow(Window commandWindow);
    private void CommandNeedsImportModule(object sender, ImportModuleEventArgs e);
    private void CommandNeedsHelp(object sender, HelpNeededEventArgs e);
    private void Window_Closed(object sender, EventArgs e);
    private void Window_Loaded(object sender, RoutedEventArgs e);
    private void SetupButtonEvents(Button run, Button copy, Button cancel, bool passThrough);
    private void SetupViewModel();
    private void Buttons_CopyClick(object sender, RoutedEventArgs e);
    private void Buttons_RunClick(object sender, RoutedEventArgs e);
    private void Buttons_CancelClick(object sender, RoutedEventArgs e);
    private void CloseWindow();
    private void ShowErrorString(string errorString);
    private string InternalGetScript();
    private void Dispose(bool isDisposing);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <CallShowDialog>b__55_0(object _);
    [CompilerGeneratedAttribute]
private void <CloseWindow>b__73_0();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow : Window {
    internal Grid MainGrid;
    internal Grid ButtonsGrid;
    internal Button Run;
    internal Button Copy;
    internal Button Cancel;
    private bool _contentLoaded;
    protected virtual void OnClosed(EventArgs e);
    private void ShowCommandWindow_SizeChanged(object sender, SizeChangedEventArgs e);
    private void ShowCommandWindow_LocationChanged(object sender, EventArgs e);
    private void ShowCommandWindow_StateChanged(object sender, EventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl : UserControl {
    private Window owner;
    internal ListBox CommandList;
    internal CmdletControl CmdletControl;
    private bool _contentLoaded;
    public Window Owner { get; public set; }
    public Window get_Owner();
    public void set_Owner(Window value);
    private void CommandList_PreviewMouseMove(object sender, MouseEventArgs e);
    private void CommandList_SelectionChanged(object sender, SelectionChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.8.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class ShowCommandResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ActionButtons_Button_Cancel { get; }
    public static string ActionButtons_Button_Copy { get; }
    public static string ActionButtons_Button_Run { get; }
    public static string All { get; }
    public static string AllModulesControl_Label_Modules { get; }
    public static string CmdletControl_Button_GetHelp { get; }
    public static string CmdletControl_Button_ToolTip_Help { get; }
    public static string CmdletControl_Header_CommonParameters { get; }
    public static string CmdletControl_Header_Errors { get; }
    public static string DetailsParameterTitleFormat { get; }
    public static string CmdletTooltipFormat { get; }
    public static string EndProcessingErrorMessage { get; }
    public static string MandatoryLabelSegment { get; }
    public static string MandatoryNameLabelFormat { get; }
    public static string NameLabelFormat { get; }
    public static string ShowModuleControl_Label_Name { get; }
    public static string ActionButtons_Button_Ok { get; }
    public static string MultiParameter_Button_Browse { get; }
    public static string CommandNameAutomationName { get; }
    public static string ModulesAutomationName { get; }
    public static string NoModuleName { get; }
    public static string SelectMultipleValuesForParameterFormat { get; }
    public static string CanReceiveValueFromPipeline { get; }
    public static string CommonToAllParameterSets { get; }
    public static string Mandatory { get; }
    public static string Optional { get; }
    public static string PositionFormat { get; }
    public static string TypeFormat { get; }
    public static string Imported { get; }
    public static string NotImported { get; }
    public static string ImportModuleButtonText { get; }
    public static string ImportModuleFailedFormat { get; }
    public static string NotImportedFormat { get; }
    public static string ShowCommandError { get; }
    public static string PleaseWaitMessage { get; }
    public static string ShowModuleControl_RefreshButton { get; }
    public static string NoParameters { get; }
    public static string RefreshShowCommandTooltipFormat { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ActionButtons_Button_Cancel();
    public static string get_ActionButtons_Button_Copy();
    public static string get_ActionButtons_Button_Run();
    public static string get_All();
    public static string get_AllModulesControl_Label_Modules();
    public static string get_CmdletControl_Button_GetHelp();
    public static string get_CmdletControl_Button_ToolTip_Help();
    public static string get_CmdletControl_Header_CommonParameters();
    public static string get_CmdletControl_Header_Errors();
    public static string get_DetailsParameterTitleFormat();
    public static string get_CmdletTooltipFormat();
    public static string get_EndProcessingErrorMessage();
    public static string get_MandatoryLabelSegment();
    public static string get_MandatoryNameLabelFormat();
    public static string get_NameLabelFormat();
    public static string get_ShowModuleControl_Label_Name();
    public static string get_ActionButtons_Button_Ok();
    public static string get_MultiParameter_Button_Browse();
    public static string get_CommandNameAutomationName();
    public static string get_ModulesAutomationName();
    public static string get_NoModuleName();
    public static string get_SelectMultipleValuesForParameterFormat();
    public static string get_CanReceiveValueFromPipeline();
    public static string get_CommonToAllParameterSets();
    public static string get_Mandatory();
    public static string get_Optional();
    public static string get_PositionFormat();
    public static string get_TypeFormat();
    public static string get_Imported();
    public static string get_NotImported();
    public static string get_ImportModuleButtonText();
    public static string get_ImportModuleFailedFormat();
    public static string get_NotImportedFormat();
    public static string get_ShowCommandError();
    public static string get_PleaseWaitMessage();
    public static string get_ShowModuleControl_RefreshButton();
    public static string get_NoParameters();
    public static string get_RefreshShowCommandTooltipFormat();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class UICultureResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ColumnPicker { get; }
    public static string GroupTitleNone { get; }
    public static string ErrorTextBoxTypeConversionErrorText { get; }
    public static string ValidatingSelectorValueOutOfBounds { get; }
    public static string FilterRule_Contains { get; }
    public static string FilterRule_DoesNotContain { get; }
    public static string FilterRule_DoesNotEqual { get; }
    public static string FilterRule_Equals { get; }
    public static string FilterRule_GreaterThanOrEqual { get; }
    public static string FilterRule_IsBetween { get; }
    public static string FilterRule_IsEmpty { get; }
    public static string FilterRule_IsNotEmpty { get; }
    public static string FilterRule_LessThanOrEqual { get; }
    public static string FilterRule_TextEndsWith { get; }
    public static string FilterRule_TextStartsWith { get; }
    public static string BackForwardHistory_BrowseBack_Disabled_Helptext { get; }
    public static string BackForwardHistory_BrowseForward_Disabled_Helptext { get; }
    public static string ErrorMessageForUnparsableDateTimeType { get; }
    public static string ErrorMessageForUnparsableNumericType { get; }
    public static string SearchBox_BackgroundText { get; }
    public static string FlowDirection { get; }
    public static string Ellipsis { get; }
    public static string ZoomIn1Shortcut { get; }
    public static string ZoomIn2Shortcut { get; }
    public static string ZoomIn3Shortcut { get; }
    public static string ZoomIn4Shortcut { get; }
    public static string ZoomOut1Shortcut { get; }
    public static string ZoomOut2Shortcut { get; }
    public static string ZoomOut3Shortcut { get; }
    public static string ZoomOut4Shortcut { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ColumnPicker();
    public static string get_GroupTitleNone();
    public static string get_ErrorTextBoxTypeConversionErrorText();
    public static string get_ValidatingSelectorValueOutOfBounds();
    public static string get_FilterRule_Contains();
    public static string get_FilterRule_DoesNotContain();
    public static string get_FilterRule_DoesNotEqual();
    public static string get_FilterRule_Equals();
    public static string get_FilterRule_GreaterThanOrEqual();
    public static string get_FilterRule_IsBetween();
    public static string get_FilterRule_IsEmpty();
    public static string get_FilterRule_IsNotEmpty();
    public static string get_FilterRule_LessThanOrEqual();
    public static string get_FilterRule_TextEndsWith();
    public static string get_FilterRule_TextStartsWith();
    public static string get_BackForwardHistory_BrowseBack_Disabled_Helptext();
    public static string get_BackForwardHistory_BrowseForward_Disabled_Helptext();
    public static string get_ErrorMessageForUnparsableDateTimeType();
    public static string get_ErrorMessageForUnparsableNumericType();
    public static string get_SearchBox_BackgroundText();
    public static string get_FlowDirection();
    public static string get_Ellipsis();
    public static string get_ZoomIn1Shortcut();
    public static string get_ZoomIn2Shortcut();
    public static string get_ZoomIn3Shortcut();
    public static string get_ZoomIn4Shortcut();
    public static string get_ZoomOut1Shortcut();
    public static string get_ZoomOut2Shortcut();
    public static string get_ZoomOut3Shortcut();
    public static string get_ZoomOut4Shortcut();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class XamlLocalizableResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_49 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_75 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_86 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_104 { get; }
    public static string AutoResXGen_BackForwardHistory_AutomationPropertiesName_613 { get; }
    public static string AutoResXGen_BackForwardHistory_AutomationPropertiesName_619 { get; }
    public static string AutoResXGen_BreadcrumbItem_Text_144 { get; }
    public static string AutoResXGen_DesignerStyleResources_Tooltip_148 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_95 { get; }
    public static string AutoResXGen_ManagementList_Text_602 { get; }
    public static string AutoResXGen_TaskPane_Text_74 { get; }
    public static string AutoResXGen_Tile_AutomationPropertiesName_674 { get; }
    public static string AutoResXGen_WaitingRing_AutomationPropertiesName_74 { get; }
    public static string AutoResXGen_ManagementList2_Text_124 { get; }
    public static string AutoResXGen_ManagementList2_Text_166 { get; }
    public static string AutoResXGen_ManagementList2_Content_186 { get; }
    public static string AutoResXGen_ManagementList2_Content_196 { get; }
    public static string AutoResXGen_ManagementList2_AutomationPropertiesName_314 { get; }
    public static string AutoResXGen_ColumnPicker_Content_42 { get; }
    public static string AutoResXGen_ColumnPicker_Content_73 { get; }
    public static string AutoResXGen_ColumnPicker_Content_84 { get; }
    public static string AutoResXGen_ColumnPicker_Content_127 { get; }
    public static string AutoResXGen_ColumnPicker_Content_134 { get; }
    public static string AutoResXGen_ColumnPicker_Content_189 { get; }
    public static string AutoResXGen_ColumnPicker_Content_199 { get; }
    public static string AutoResXGen_ColumnPicker_Content_5 { get; }
    public static string AutoResXGen_ColumnPicker_Tooltip_76 { get; }
    public static string AutoResXGen_ColumnPicker_Tooltip_84 { get; }
    public static string AutoResXGen_ColumnPicker_Text_142 { get; }
    public static string AutoResXGen_ColumnPicker_Text_152 { get; }
    public static string AutoResXGen_ColumnPicker_Content_93 { get; }
    public static string ColumnsExplorer_Column_FindTextBox_BackgroundText { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_97 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_104 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_132 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_32 { get; }
    public static string AutoResXGen_ManagementList2_NoItemsText_50 { get; }
    public static string AutoResXGen_ManagementList2_AutomationPropertiesName_52 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_47 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_72 { get; }
    public static string FilterRule_AccessibleName { get; }
    public static string AutoResXGen_AddFilterRulePicker_Content_214 { get; }
    public static string AutoResXGen_AddFilterRulePicker_Content_223 { get; }
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293 { get; }
    public static string AutoResXGen_FilterRulePanel_AutomationPropertiesName_199 { get; }
    public static string AutoResXGen_FilterRulePanel_BackgroundText_200 { get; }
    public static string AutoResXGen_FilterRulePanel_AutomationPropertiesName_257 { get; }
    public static string AutoResXGen_ManagementList_AutomationPropertiesName_302 { get; }
    public static string AutoResXGen_ManagementList2_Content_19 { get; }
    public static string AutoResXGen_ManagementList2_Content_33 { get; }
    public static string AutoResXGen_SearchBox_AutomationPropertiesName_75 { get; }
    public static string ManagementListTitle_ListStatus_FilterApplied { get; }
    public static string ManagementListTitle_ListStatus_FilterInProgress { get; }
    public static string ManagementListTitle_ListStatus_FilterNotApplied { get; }
    public static string AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142 { get; }
    public static string ColumnsExplorer_Column_FindTextBox_AutomationName { get; }
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157 { get; }
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180 { get; }
    public static string ManagementList_SortGlyph_Ascending_AutomationName { get; }
    public static string ManagementList_SortGlyph_Descending_AutomationName { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_119 { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_160 { get; }
    public static string InnerList_GridViewColumnHeader_ItemStatus_Ascending { get; }
    public static string InnerList_GridViewColumnHeader_ItemStatus_Descending { get; }
    public static string CollapsingTabControl_ExpandButton_AutomationName { get; }
    public static string CollapsingTabControl_CollapseButton_AutomationName { get; }
    public static string AutoResXGen_ManagementList_TextBlock_83 { get; }
    public static string AutoResXGen_ManagementList_TextBlock_106 { get; }
    public static string AutoResXGen_ManagementList_TextBlock_129 { get; }
    public static string AutoResXGen_ManagementList_AutomationPropertiesName_395 { get; }
    public static string AutoResXGen_SearchBox_AutomationPropertiesName_85 { get; }
    public static string AutoResXGen_TaskPane_AutomationPropertiesName_133 { get; }
    public static string ManagementList_StartFilterButton_AutomationName { get; }
    public static string ManagementList_StopFilterButton_AutomationName { get; }
    public static string ManagementList_ToggleFilterPanelButton_AutomationName { get; }
    public static string ManagementList_SearchBox_BackgroundText_Live { get; }
    public static string AutoResXGen_ManagementList_ToolTip_314 { get; }
    public static string AutoResXGen_ManagementList_Text_392 { get; }
    public static string FilterRulePanel_LogicalOperatorText_FirstHeader { get; }
    public static string FilterRulePanel_LogicalOperatorText_Header { get; }
    public static string FilterRulePanel_LogicalOperatorText_Item { get; }
    public static string ManagementList_NoMatchesFound_Message { get; }
    public static string CollapsingTabControl_CollapseButton_ToolTip { get; }
    public static string CollapsingTabControl_ExpandButton_ToolTip { get; }
    public static string NavigationList_ShownChildrenButton_ToolTip { get; }
    public static string NavigationList_ShownChildrenButton_AutomationName { get; }
    public static string ManagementListTitle_Title_WithViewName { get; }
    public static string OutGridView_Button_Cancel { get; }
    public static string OutGridView_Button_OK { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_49();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_75();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_86();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_104();
    public static string get_AutoResXGen_BackForwardHistory_AutomationPropertiesName_613();
    public static string get_AutoResXGen_BackForwardHistory_AutomationPropertiesName_619();
    public static string get_AutoResXGen_BreadcrumbItem_Text_144();
    public static string get_AutoResXGen_DesignerStyleResources_Tooltip_148();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_95();
    public static string get_AutoResXGen_ManagementList_Text_602();
    public static string get_AutoResXGen_TaskPane_Text_74();
    public static string get_AutoResXGen_Tile_AutomationPropertiesName_674();
    public static string get_AutoResXGen_WaitingRing_AutomationPropertiesName_74();
    public static string get_AutoResXGen_ManagementList2_Text_124();
    public static string get_AutoResXGen_ManagementList2_Text_166();
    public static string get_AutoResXGen_ManagementList2_Content_186();
    public static string get_AutoResXGen_ManagementList2_Content_196();
    public static string get_AutoResXGen_ManagementList2_AutomationPropertiesName_314();
    public static string get_AutoResXGen_ColumnPicker_Content_42();
    public static string get_AutoResXGen_ColumnPicker_Content_73();
    public static string get_AutoResXGen_ColumnPicker_Content_84();
    public static string get_AutoResXGen_ColumnPicker_Content_127();
    public static string get_AutoResXGen_ColumnPicker_Content_134();
    public static string get_AutoResXGen_ColumnPicker_Content_189();
    public static string get_AutoResXGen_ColumnPicker_Content_199();
    public static string get_AutoResXGen_ColumnPicker_Content_5();
    public static string get_AutoResXGen_ColumnPicker_Tooltip_76();
    public static string get_AutoResXGen_ColumnPicker_Tooltip_84();
    public static string get_AutoResXGen_ColumnPicker_Text_142();
    public static string get_AutoResXGen_ColumnPicker_Text_152();
    public static string get_AutoResXGen_ColumnPicker_Content_93();
    public static string get_ColumnsExplorer_Column_FindTextBox_BackgroundText();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_97();
    public static string get_AutoResXGen_ManagementList2_ToolTip_104();
    public static string get_AutoResXGen_ManagementList2_ToolTip_132();
    public static string get_AutoResXGen_ManagementList2_ToolTip_32();
    public static string get_AutoResXGen_ManagementList2_NoItemsText_50();
    public static string get_AutoResXGen_ManagementList2_AutomationPropertiesName_52();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_47();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_72();
    public static string get_FilterRule_AccessibleName();
    public static string get_AutoResXGen_AddFilterRulePicker_Content_214();
    public static string get_AutoResXGen_AddFilterRulePicker_Content_223();
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293();
    public static string get_AutoResXGen_FilterRulePanel_AutomationPropertiesName_199();
    public static string get_AutoResXGen_FilterRulePanel_BackgroundText_200();
    public static string get_AutoResXGen_FilterRulePanel_AutomationPropertiesName_257();
    public static string get_AutoResXGen_ManagementList_AutomationPropertiesName_302();
    public static string get_AutoResXGen_ManagementList2_Content_19();
    public static string get_AutoResXGen_ManagementList2_Content_33();
    public static string get_AutoResXGen_SearchBox_AutomationPropertiesName_75();
    public static string get_ManagementListTitle_ListStatus_FilterApplied();
    public static string get_ManagementListTitle_ListStatus_FilterInProgress();
    public static string get_ManagementListTitle_ListStatus_FilterNotApplied();
    public static string get_AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142();
    public static string get_ColumnsExplorer_Column_FindTextBox_AutomationName();
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157();
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180();
    public static string get_ManagementList_SortGlyph_Ascending_AutomationName();
    public static string get_ManagementList_SortGlyph_Descending_AutomationName();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_119();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_160();
    public static string get_InnerList_GridViewColumnHeader_ItemStatus_Ascending();
    public static string get_InnerList_GridViewColumnHeader_ItemStatus_Descending();
    public static string get_CollapsingTabControl_ExpandButton_AutomationName();
    public static string get_CollapsingTabControl_CollapseButton_AutomationName();
    public static string get_AutoResXGen_ManagementList_TextBlock_83();
    public static string get_AutoResXGen_ManagementList_TextBlock_106();
    public static string get_AutoResXGen_ManagementList_TextBlock_129();
    public static string get_AutoResXGen_ManagementList_AutomationPropertiesName_395();
    public static string get_AutoResXGen_SearchBox_AutomationPropertiesName_85();
    public static string get_AutoResXGen_TaskPane_AutomationPropertiesName_133();
    public static string get_ManagementList_StartFilterButton_AutomationName();
    public static string get_ManagementList_StopFilterButton_AutomationName();
    public static string get_ManagementList_ToggleFilterPanelButton_AutomationName();
    public static string get_ManagementList_SearchBox_BackgroundText_Live();
    public static string get_AutoResXGen_ManagementList_ToolTip_314();
    public static string get_AutoResXGen_ManagementList_Text_392();
    public static string get_FilterRulePanel_LogicalOperatorText_FirstHeader();
    public static string get_FilterRulePanel_LogicalOperatorText_Header();
    public static string get_FilterRulePanel_LogicalOperatorText_Item();
    public static string get_ManagementList_NoMatchesFound_Message();
    public static string get_CollapsingTabControl_CollapseButton_ToolTip();
    public static string get_CollapsingTabControl_ExpandButton_ToolTip();
    public static string get_NavigationList_ShownChildrenButton_ToolTip();
    public static string get_NavigationList_ShownChildrenButton_AutomationName();
    public static string get_ManagementListTitle_Title_WithViewName();
    public static string get_OutGridView_Button_Cancel();
    public static string get_OutGridView_Button_OK();
}
