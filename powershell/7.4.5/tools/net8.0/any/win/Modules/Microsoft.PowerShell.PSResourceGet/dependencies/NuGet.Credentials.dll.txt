[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NuGet.Credentials.CredentialResponse : object {
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private CredentialStatus <Status>k__BackingField;
    public ICredentials Credentials { get; }
    public CredentialStatus Status { get; }
    public CredentialResponse(CredentialStatus status);
    public CredentialResponse(ICredentials credentials);
    private CredentialResponse(ICredentials credentials, CredentialStatus status);
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public CredentialStatus get_Status();
}
public static class NuGet.Credentials.CredentialsConstants : object {
    public static int ProviderTimeoutSecondsDefault;
    public static string ProviderTimeoutSecondsEnvar;
    public static string ProviderTimeoutSecondsSetting;
    private static CredentialsConstants();
}
public class NuGet.Credentials.CredentialService : object {
    private ConcurrentDictionary`2<string, bool> _retryCache;
    private ConcurrentDictionary`2<string, CredentialResponse> _providerCredentialCache;
    private bool _nonInteractive;
    private static Semaphore ProviderSemaphore;
    [CompilerGeneratedAttribute]
private Action`1<string> <ErrorDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandlesDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncLazy`1<IEnumerable`1<ICredentialProvider>> <_providers>k__BackingField;
    private Action`1<string> ErrorDelegate { get; }
    public bool HandlesDefaultCredentials { get; }
    private AsyncLazy`1<IEnumerable`1<ICredentialProvider>> _providers { get; }
    public CredentialService(AsyncLazy`1<IEnumerable`1<ICredentialProvider>> providers, bool nonInteractive, bool handlesDefaultCredentials);
    private static CredentialService();
    [CompilerGeneratedAttribute]
private Action`1<string> get_ErrorDelegate();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HandlesDefaultCredentials();
    [AsyncStateMachineAttribute("NuGet.Credentials.CredentialService/<GetCredentialsAsync>d__11")]
public sealed virtual Task`1<ICredentials> GetCredentialsAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, CancellationToken cancellationToken);
    public sealed virtual bool TryGetLastKnownGoodCredentialsFromCache(Uri uri, bool isProxy, ICredentials& credentials);
    [CompilerGeneratedAttribute]
private AsyncLazy`1<IEnumerable`1<ICredentialProvider>> get__providers();
    private bool TryFromCredentialCache(Uri uri, CredentialRequestType type, bool isRetry, ICredentialProvider provider, CredentialResponse& credentials);
    private void AddToCredentialCache(Uri uri, CredentialRequestType type, ICredentialProvider provider, CredentialResponse credentials);
    private static string RetryCacheKey(Uri uri, CredentialRequestType type, ICredentialProvider provider);
    private static string CredentialCacheKey(Uri uri, CredentialRequestType type, ICredentialProvider provider);
    private static Uri GetRootUri(Uri uri);
    private static string GetUriKey(Uri uri, CredentialRequestType type, ICredentialProvider provider);
}
public enum NuGet.Credentials.CredentialStatus : Enum {
    public int value__;
    public static CredentialStatus Success;
    public static CredentialStatus ProviderNotApplicable;
    public static CredentialStatus UserCanceled;
}
public static class NuGet.Credentials.DefaultCredentialServiceUtility : object {
    private static DelegatingLogger DelegatingLogger;
    public static void SetupDefaultCredentialService(ILogger logger, bool nonInteractive);
    public static void UpdateCredentialServiceDelegatingLogger(ILogger log);
    [AsyncStateMachineAttribute("NuGet.Credentials.DefaultCredentialServiceUtility/<GetCredentialProvidersAsync>d__3")]
private static Task`1<IEnumerable`1<ICredentialProvider>> GetCredentialProvidersAsync(ILogger logger);
}
public class NuGet.Credentials.DefaultNetworkCredentialsCredentialProvider : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public sealed virtual Task`1<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken);
}
internal class NuGet.Credentials.DelegatingLogger : LoggerBase {
    private SemaphoreSlim _semaphore;
    private ILogger _delegateLogger;
    private bool _disposed;
    internal DelegatingLogger(ILogger delegateLogger);
    internal void UpdateDelegate(ILogger logger);
    public virtual void Log(ILogMessage message);
    [AsyncStateMachineAttribute("NuGet.Credentials.DelegatingLogger/<LogAsync>d__6")]
public virtual Task LogAsync(ILogMessage message);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public interface NuGet.Credentials.ICredentialProvider {
    public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual Task`1<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken);
}
public class NuGet.Credentials.PluginCredentialProvider : object {
    private ILogger _logger;
    private string _verbosity;
    private static string NormalVerbosity;
    private static string CrossPlatformPluginLink;
    private int _deprecationMessageWarningLogged;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutSeconds>k__BackingField;
    public string Id { get; }
    public string Path { get; }
    public int TimeoutSeconds { get; }
    public PluginCredentialProvider(ILogger logger, string path, int timeoutSeconds, string verbosity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public sealed virtual Task`1<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public int get_TimeoutSeconds();
    private PluginCredentialResponse GetPluginResponse(PluginCredentialRequest request, CancellationToken cancellationToken);
    public virtual int Execute(ProcessStartInfo startInfo, CancellationToken cancellationToken, String& stdOut);
    private bool PassVerbosityFlag(PluginCredentialRequest request);
    private static void Kill(Process p);
}
public class NuGet.Credentials.PluginCredentialProviderBuilder : object {
    private ISettings _settings;
    private IEnvironmentVariableReader _envarReader;
    private IExtensionLocator _extensionLocator;
    private ILogger _logger;
    private int TimeoutSeconds { get; }
    public PluginCredentialProviderBuilder(IExtensionLocator extensionLocator, ISettings settings, ILogger logger);
    public PluginCredentialProviderBuilder(IExtensionLocator extensionLocator, ISettings settings, ILogger logger, IEnvironmentVariableReader envarReader);
    public IEnumerable`1<ICredentialProvider> BuildAll(string verbosity);
    private int get_TimeoutSeconds();
}
public class NuGet.Credentials.PluginCredentialRequest : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verbosity>k__BackingField;
    public string Uri { get; public set; }
    public bool NonInteractive { get; public set; }
    public bool IsRetry { get; public set; }
    public string Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public bool get_NonInteractive();
    [CompilerGeneratedAttribute]
public void set_NonInteractive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRetry();
    [CompilerGeneratedAttribute]
public void set_IsRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(string value);
}
public class NuGet.Credentials.PluginCredentialResponse : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthTypes>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Message { get; public set; }
    public IList`1<string> AuthTypes { get; public set; }
    public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthTypes();
    [CompilerGeneratedAttribute]
public void set_AuthTypes(IList`1<string> value);
    public bool get_IsValid();
}
public enum NuGet.Credentials.PluginCredentialResponseExitCode : Enum {
    public int value__;
    public static PluginCredentialResponseExitCode Success;
    public static PluginCredentialResponseExitCode ProviderNotApplicable;
    public static PluginCredentialResponseExitCode Failure;
}
public class NuGet.Credentials.PluginException : Exception {
    private static string RedactedPassword;
    public PluginException(string message);
    public PluginException(string message, Exception inner);
    protected PluginException(SerializationInfo info, StreamingContext context);
    public static PluginException Create(string path, Exception inner);
    public static PluginException CreateTimeoutMessage(string path, int timeoutMillis);
    public static PluginException CreateNotStartedMessage(string path);
    public static PluginException CreatePathNotFoundMessage(string path, string attempted);
    public static PluginException CreateAbortMessage(string path, string message);
    public static PluginException CreateUnreadableResponseExceptionMessage(string path, PluginCredentialResponseExitCode status);
    public static PluginException CreateInvalidResponseExceptionMessage(string path, PluginCredentialResponseExitCode status, PluginCredentialResponse response);
}
public class NuGet.Credentials.PluginUnexpectedStatusException : PluginException {
    public PluginUnexpectedStatusException(string message);
    public PluginUnexpectedStatusException(string message, Exception inner);
    protected PluginUnexpectedStatusException(SerializationInfo info, StreamingContext context);
    public static PluginException CreateUnexpectedStatusMessage(string path, PluginCredentialResponseExitCode status);
}
public static class NuGet.Credentials.PreviewFeatureSettings : object {
    public static string DefaultCredentialsAfterCredentialProvidersEnvironmentVariableName;
    [CompilerGeneratedAttribute]
private static bool <DefaultCredentialsAfterCredentialProviders>k__BackingField;
    public static bool DefaultCredentialsAfterCredentialProviders { get; public set; }
    private static PreviewFeatureSettings();
    [CompilerGeneratedAttribute]
public static bool get_DefaultCredentialsAfterCredentialProviders();
    [CompilerGeneratedAttribute]
public static void set_DefaultCredentialsAfterCredentialProviders(bool value);
    private static bool GetFlagFromEnvironmentVariable(string variableName);
}
public class NuGet.Credentials.ProviderException : Exception {
    public ProviderException(string message);
    public ProviderException(string message, Exception inner);
    protected ProviderException(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Credentials.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PluginException_Abort_Format { get; }
    internal static string PluginException_Exception_Format { get; }
    internal static string PluginException_InvalidResponse_Format { get; }
    internal static string PluginException_NotStarted_Format { get; }
    internal static string PluginException_PathNotFound_Format { get; }
    internal static string PluginException_Timeout_Format { get; }
    internal static string PluginException_UnexpectedStatus_Format { get; }
    internal static string PluginException_UnreadableResponse_Format { get; }
    internal static string PluginWarning_PluginIsBeingDeprecated { get; }
    internal static string ProviderException_InvalidCredentialResponse { get; }
    internal static string ProviderException_MalformedResponse { get; }
    internal static string SecurePluginNotice_UsingPluginAsProvider { get; }
    internal static string SecurePluginWarning_UseInteractiveOption { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PluginException_Abort_Format();
    internal static string get_PluginException_Exception_Format();
    internal static string get_PluginException_InvalidResponse_Format();
    internal static string get_PluginException_NotStarted_Format();
    internal static string get_PluginException_PathNotFound_Format();
    internal static string get_PluginException_Timeout_Format();
    internal static string get_PluginException_UnexpectedStatus_Format();
    internal static string get_PluginException_UnreadableResponse_Format();
    internal static string get_PluginWarning_PluginIsBeingDeprecated();
    internal static string get_ProviderException_InvalidCredentialResponse();
    internal static string get_ProviderException_MalformedResponse();
    internal static string get_SecurePluginNotice_UsingPluginAsProvider();
    internal static string get_SecurePluginWarning_UseInteractiveOption();
}
public class NuGet.Credentials.SecurePluginCredentialProvider : object {
    private static string _basicAuthenticationType;
    private PluginDiscoveryResult _discoveredPlugin;
    private ILogger _logger;
    private IPluginManager _pluginManager;
    private bool _canShowDialog;
    private bool _isAnAuthenticationPlugin;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public SecurePluginCredentialProvider(IPluginManager pluginManager, PluginDiscoveryResult pluginDiscoveryResult, bool canShowDialog, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [AsyncStateMachineAttribute("NuGet.Credentials.SecurePluginCredentialProvider/<GetAsync>d__10")]
public sealed virtual Task`1<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.Credentials.SecurePluginCredentialProvider/<SetPluginLogLevelAsync>d__11")]
private Task SetPluginLogLevelAsync(PluginCreationResult plugin, ILogger logger, CancellationToken cancellationToken);
    private void AddOrUpdateLogger(IPlugin plugin);
    [AsyncStateMachineAttribute("NuGet.Credentials.SecurePluginCredentialProvider/<SetProxyCredentialsToPlugin>d__13")]
private Task SetProxyCredentialsToPlugin(Uri uri, IWebProxy proxy, PluginCreationResult plugin, CancellationToken cancellationToken);
    private static CredentialResponse GetAuthenticationCredentialsResponseToCredentialResponse(GetAuthenticationCredentialsResponse credentialResponse);
    [CompilerGeneratedAttribute]
private IRequestHandler <AddOrUpdateLogger>b__12_0();
    [CompilerGeneratedAttribute]
private IRequestHandler <AddOrUpdateLogger>b__12_1(IRequestHandler existingHandler);
}
public class NuGet.Credentials.SecurePluginCredentialProviderBuilder : object {
    private ILogger _logger;
    private IPluginManager _pluginManager;
    private bool _canShowDialog;
    public SecurePluginCredentialProviderBuilder(IPluginManager pluginManager, bool canShowDialog, ILogger logger);
    [AsyncStateMachineAttribute("NuGet.Credentials.SecurePluginCredentialProviderBuilder/<BuildAllAsync>d__4")]
public Task`1<IEnumerable`1<ICredentialProvider>> BuildAllAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
internal static class NuGet.Shared.EncodingUtility : object {
    [NullableContextAttribute("1")]
internal static string ToHex(Byte[] bytes, int length);
    private static char ToHexChar(int input);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(ICollection`1<TSource> self, ICollection`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(IList`1<TSource> self, IList`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(ICollection`1<T> self, ICollection`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IList`1<T> self, IList`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("1")]
internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    [NullableContextAttribute("1")]
internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    [NullableContextAttribute("1")]
internal static bool EqualsWithNullCheck(T self, T other);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool EqualsFalse(string value);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(T o, IEqualityComparer`1<T> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    [NullableContextAttribute("2")]
internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list, IEqualityComparer`1<T> comparer);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
}
internal static class NuGet.Shared.XmlUtility : object {
    internal static XDocument Load(string path);
    internal static XDocument Load(string path, LoadOptions options);
    internal static XDocument Load(Stream input);
    internal static XDocument Load(Stream input, LoadOptions options);
    internal static string GetEncodedXMLName(string name);
    internal static XmlReaderSettings GetXmlReaderSettings(LoadOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.SimplePool`1 : object {
    private ConcurrentStack`1<T> _values;
    private Func`1<T> _allocate;
    public SimplePool`1(Func`1<T> allocate);
    public T Allocate();
    public void Free(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.StringBuilderPool : object {
    private static int MaxPoolSize;
    private SimplePool`1<StringBuilder> _pool;
    public static StringBuilderPool Shared;
    private static StringBuilderPool();
    public StringBuilder Rent(int minimumCapacity);
    public string ToStringAndReturn(StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.TaskResult : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <One>k__BackingField;
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    public static Task`1<int> Zero { get; }
    public static Task`1<int> One { get; }
    private static TaskResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_True();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_False();
    public static Task`1<bool> Boolean(bool b);
    [CompilerGeneratedAttribute]
public static Task`1<int> get_Zero();
    [CompilerGeneratedAttribute]
public static Task`1<int> get_One();
    public static Task`1<int> Integer(int i);
    public static Task`1<T> Null();
    public static Task`1<IEnumerable`1<T>> EmptyEnumerable();
    public static Task`1<T[]> EmptyArray();
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DeconstructionExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> pair, TKey& key, TValue& value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
