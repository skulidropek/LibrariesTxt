[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Microsoft.PowerShell.AddToHistoryOption : Enum {
    public int value__;
    public static AddToHistoryOption SkipAdding;
    public static AddToHistoryOption MemoryOnly;
    public static AddToHistoryOption MemoryAndFile;
}
public enum Microsoft.PowerShell.BellStyle : Enum {
    public int value__;
    public static BellStyle None;
    public static BellStyle Visual;
    public static BellStyle Audible;
}
public class Microsoft.PowerShell.ChangePSReadLineKeyHandlerCommandBase : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Chord>k__BackingField;
    [CompilerGeneratedAttribute]
private ViMode <ViMode>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public String[] Chord { get; public set; }
    [ParameterAttribute]
public ViMode ViMode { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Chord();
    [CompilerGeneratedAttribute]
public void set_Chord(String[] value);
    [CompilerGeneratedAttribute]
public ViMode get_ViMode();
    [CompilerGeneratedAttribute]
public void set_ViMode(ViMode value);
    [ExcludeFromCodeCoverageAttribute]
protected IDisposable UseRequestedDispatchTables();
}
public static class Microsoft.PowerShell.Character : object {
    public static bool IsInWord(char c, string wordDelimiters);
}
public static class Microsoft.PowerShell.ConsoleKeyChordConverter : object {
    private static Dictionary`2<string, KeyPair> KeyMappings;
    private static ConsoleKeyChordConverter();
    private static Exception CantConvert(string s, Object[] args);
    public static ConsoleKeyInfo[] Convert(string chord);
    private static ConsoleKeyInfo GetOneKey(string chord, Int32& start);
    private static ConsoleModifiers GetModifier(string sequence, Int32& start);
    private static bool MapKeyChar(string input, ConsoleModifiers& mods, ConsoleKey& key, Char& keyChar);
}
internal class Microsoft.PowerShell.Disposable : object {
    private Action m_onDispose;
    internal static Disposable NonOp;
    public Disposable(Action onDispose);
    private static Disposable();
    public sealed virtual void Dispose();
}
internal class Microsoft.PowerShell.DotNetCharMap : object {
    private ConsoleKeyInfo _key;
    [CompilerGeneratedAttribute]
private bool <KeyAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InEscapeSequence>k__BackingField;
    public long EscapeTimeout { get; public set; }
    public bool KeyAvailable { get; private set; }
    public bool InEscapeSequence { get; }
    public sealed virtual long get_EscapeTimeout();
    public sealed virtual void set_EscapeTimeout(long value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeyAvailable();
    [CompilerGeneratedAttribute]
private void set_KeyAvailable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InEscapeSequence();
    public sealed virtual ConsoleKeyInfo ReadKey();
    public sealed virtual void ProcessKey(ConsoleKeyInfo key);
}
public enum Microsoft.PowerShell.EditMode : Enum {
    public int value__;
    public static EditMode Windows;
    public static EditMode Emacs;
    public static EditMode Vi;
}
internal class Microsoft.PowerShell.ExitException : Exception {
}
internal class Microsoft.PowerShell.FNV1a32Hash : object {
    private static UInt32 FNV32_PRIME;
    private static UInt32 FNV32_OFFSETBASIS;
    internal static UInt32 ComputeHash(string input);
}
[CmdletAttribute("Get", "PSReadLineKeyHandler")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.GetKeyHandlerCommand : PSCmdlet {
    private Nullable`1<SwitchParameter> _bound;
    private Nullable`1<SwitchParameter> _unbound;
    [CompilerGeneratedAttribute]
private String[] <Chord>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Bound { get; public set; }
    [ParameterAttribute]
public SwitchParameter Unbound { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Chord { get; public set; }
    public SwitchParameter get_Bound();
    public void set_Bound(SwitchParameter value);
    public SwitchParameter get_Unbound();
    public void set_Unbound(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Chord();
    [CompilerGeneratedAttribute]
public void set_Chord(String[] value);
    [ExcludeFromCodeCoverageAttribute]
protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "PSReadLineOption")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.GetPSReadLineOption : PSCmdlet {
    [ExcludeFromCodeCoverageAttribute]
protected virtual void EndProcessing();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Microsoft.PowerShell.QueueDebugView`1")]
internal class Microsoft.PowerShell.HistoryQueue`1 : object {
    private T[] _array;
    private int _head;
    private int _tail;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    [ExcludeFromCodeCoverageAttribute]
public T Item { get; public set; }
    public HistoryQueue`1(int capacity);
    public void Clear();
    public bool Contains(T item);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public int IndexOf(T item);
    public void Enqueue(T item);
    public T Dequeue();
    public T[] ToArray();
    public T get_Item(int index);
    public void set_Item(int index, T value);
}
public enum Microsoft.PowerShell.HistorySaveStyle : Enum {
    public int value__;
    public static HistorySaveStyle SaveIncrementally;
    public static HistorySaveStyle SaveAtExit;
    public static HistorySaveStyle SaveNothing;
}
internal interface Microsoft.PowerShell.ICharMap {
    public long EscapeTimeout { get; public set; }
    public bool KeyAvailable { get; }
    public bool InEscapeSequence { get; }
    public abstract virtual long get_EscapeTimeout();
    public abstract virtual void set_EscapeTimeout(long value);
    public abstract virtual bool get_KeyAvailable();
    public abstract virtual bool get_InEscapeSequence();
    public abstract virtual ConsoleKeyInfo ReadKey();
    public abstract virtual void ProcessKey(ConsoleKeyInfo key);
}
internal class Microsoft.PowerShell.Internal.Accessibility : object {
    internal static bool IsScreenReaderActive();
}
internal static class Microsoft.PowerShell.Internal.Clipboard : object {
    private static Nullable`1<bool> _clipboardSupported;
    private static string _internalClipboard;
    private static UInt32 GMEM_MOVEABLE;
    private static UInt32 GMEM_ZEROINIT;
    private static UInt32 GHND;
    private static UInt32 CF_TEXT;
    private static UInt32 CF_UNICODETEXT;
    private static UInt32 CF_RTF;
    private static string StartProcess(string tool, string args, string stdin);
    public static string GetText();
    public static void SetText(string text);
    public static void SetRtf(string plainText, string rtfText);
    private static IntPtr GlobalAlloc(UInt32 uFlags, UIntPtr dwBytes);
    private static IntPtr GlobalFree(IntPtr hMem);
    private static IntPtr GlobalLock(IntPtr hMem);
    private static bool GlobalUnlock(IntPtr hMem);
    private static void CopyMemory(IntPtr dest, IntPtr src, UInt32 count);
    private static bool IsClipboardFormatAvailable(UInt32 uFormat);
    private static bool OpenClipboard(IntPtr hWndNewOwner);
    private static bool CloseClipboard();
    private static bool EmptyClipboard();
    private static IntPtr GetClipboardData(UInt32 uFormat);
    private static IntPtr SetClipboardData(UInt32 uFormat, IntPtr data);
    private static UInt32 RegisterClipboardFormat(string lpszFormat);
    private static bool GetTextImpl(String& text);
    private static bool SetClipboardData(Tuple`2[] data);
    private static bool SetSingleClipboardData(string text, UInt32 format);
    private static void ExecuteOnStaThread(Func`1<bool> action);
}
public interface Microsoft.PowerShell.Internal.IConsole {
    public bool KeyAvailable { get; }
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public int CursorSize { get; public set; }
    public bool CursorVisible { get; public set; }
    public int BufferWidth { get; public set; }
    public int BufferHeight { get; public set; }
    public int WindowWidth { get; public set; }
    public int WindowHeight { get; public set; }
    public int WindowTop { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public Encoding OutputEncoding { get; public set; }
    public abstract virtual ConsoleKeyInfo ReadKey();
    public abstract virtual bool get_KeyAvailable();
    public abstract virtual int get_CursorLeft();
    public abstract virtual void set_CursorLeft(int value);
    public abstract virtual int get_CursorTop();
    public abstract virtual void set_CursorTop(int value);
    public abstract virtual int get_CursorSize();
    public abstract virtual void set_CursorSize(int value);
    public abstract virtual bool get_CursorVisible();
    public abstract virtual void set_CursorVisible(bool value);
    public abstract virtual int get_BufferWidth();
    public abstract virtual void set_BufferWidth(int value);
    public abstract virtual int get_BufferHeight();
    public abstract virtual void set_BufferHeight(int value);
    public abstract virtual int get_WindowWidth();
    public abstract virtual void set_WindowWidth(int value);
    public abstract virtual int get_WindowHeight();
    public abstract virtual void set_WindowHeight(int value);
    public abstract virtual int get_WindowTop();
    public abstract virtual void set_WindowTop(int value);
    public abstract virtual ConsoleColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ConsoleColor value);
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual Encoding get_OutputEncoding();
    public abstract virtual void set_OutputEncoding(Encoding value);
    public abstract virtual void SetWindowPosition(int left, int top);
    public abstract virtual void SetCursorPosition(int left, int top);
    public abstract virtual void WriteLine(string s);
    public abstract virtual void Write(string s);
    public abstract virtual void BlankRestOfLine();
}
public interface Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods {
    public abstract virtual void Ding();
    public abstract virtual CommandCompletion CompleteInput(string input, int cursorIndex, Hashtable options, PowerShell powershell);
    public abstract virtual bool RunspaceIsRemote(Runspace runspace);
    public abstract virtual Task`1<List`1<PredictionResult>> PredictInputAsync(Ast ast, Token[] tokens);
    public abstract virtual void OnCommandLineAccepted(IReadOnlyList`1<string> history);
    public abstract virtual void OnCommandLineExecuted(string commandLine, bool success);
    public abstract virtual void OnSuggestionDisplayed(Guid predictorId, UInt32 session, int countOrIndex);
    public abstract virtual void OnSuggestionAccepted(Guid predictorId, UInt32 session, string suggestionText);
    public abstract virtual void RenderFullHelp(string content, string regexPatternToScrollTo);
    public abstract virtual object GetDynamicHelpContent(string commandName, string parameterName, bool isFullHelp);
}
internal class Microsoft.PowerShell.Internal.VirtualTerminal : object {
    private static Func`2<bool, ConsoleKeyInfo> _readKeyOverride;
    private static Lazy`1<Func`2<bool, ConsoleKeyInfo>> _readKeyMethod;
    protected int _unixCursorSize;
    public int CursorLeft { get; public set; }
    public int CursorTop { get; public set; }
    public int CursorSize { get; public set; }
    public bool CursorVisible { get; public set; }
    public int BufferWidth { get; public set; }
    public int BufferHeight { get; public set; }
    public int WindowWidth { get; public set; }
    public int WindowHeight { get; public set; }
    public int WindowTop { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public Encoding OutputEncoding { get; public set; }
    public bool KeyAvailable { get; }
    private static VirtualTerminal();
    public sealed virtual int get_CursorLeft();
    public sealed virtual void set_CursorLeft(int value);
    public sealed virtual int get_CursorTop();
    public sealed virtual void set_CursorTop(int value);
    public virtual int get_CursorSize();
    public virtual void set_CursorSize(int value);
    public sealed virtual bool get_CursorVisible();
    public sealed virtual void set_CursorVisible(bool value);
    public sealed virtual int get_BufferWidth();
    public sealed virtual void set_BufferWidth(int value);
    public sealed virtual int get_BufferHeight();
    public sealed virtual void set_BufferHeight(int value);
    public sealed virtual int get_WindowWidth();
    public sealed virtual void set_WindowWidth(int value);
    public sealed virtual int get_WindowHeight();
    public sealed virtual void set_WindowHeight(int value);
    public sealed virtual int get_WindowTop();
    public sealed virtual void set_WindowTop(int value);
    public sealed virtual ConsoleColor get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(ConsoleColor value);
    public sealed virtual ConsoleColor get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(ConsoleColor value);
    public sealed virtual Encoding get_OutputEncoding();
    public sealed virtual void set_OutputEncoding(Encoding value);
    private static T _TryIgnoreIOE(Func`1<T> f);
    public sealed virtual ConsoleKeyInfo ReadKey();
    public sealed virtual bool get_KeyAvailable();
    public sealed virtual void SetWindowPosition(int left, int top);
    public sealed virtual void SetCursorPosition(int left, int top);
    public virtual void Write(string value);
    public virtual void WriteLine(string value);
    public virtual void BlankRestOfLine();
}
public class Microsoft.PowerShell.KeyHandler : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    private string _description;
    [CompilerGeneratedAttribute]
private KeyHandlerGroup <Group>k__BackingField;
    public string Key { get; public set; }
    public string Function { get; public set; }
    public string Description { get; public set; }
    public KeyHandlerGroup Group { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public KeyHandlerGroup get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(KeyHandlerGroup value);
    public static string GetGroupingDescription(KeyHandlerGroup grouping);
}
public enum Microsoft.PowerShell.KeyHandlerGroup : Enum {
    public int value__;
    public static KeyHandlerGroup Basic;
    public static KeyHandlerGroup CursorMovement;
    public static KeyHandlerGroup History;
    public static KeyHandlerGroup Completion;
    public static KeyHandlerGroup Prediction;
    public static KeyHandlerGroup Miscellaneous;
    public static KeyHandlerGroup Selection;
    public static KeyHandlerGroup Search;
    public static KeyHandlerGroup Custom;
}
internal static class Microsoft.PowerShell.Keys : object {
    public static PSKeyInfo F1;
    public static PSKeyInfo F2;
    public static PSKeyInfo F3;
    public static PSKeyInfo F4;
    public static PSKeyInfo F5;
    public static PSKeyInfo F6;
    public static PSKeyInfo F7;
    public static PSKeyInfo F8;
    public static PSKeyInfo F9;
    public static PSKeyInfo F10;
    public static PSKeyInfo F11;
    public static PSKeyInfo F12;
    public static PSKeyInfo F13;
    public static PSKeyInfo F14;
    public static PSKeyInfo F15;
    public static PSKeyInfo F16;
    public static PSKeyInfo F17;
    public static PSKeyInfo F18;
    public static PSKeyInfo F19;
    public static PSKeyInfo F20;
    public static PSKeyInfo F21;
    public static PSKeyInfo F22;
    public static PSKeyInfo F23;
    public static PSKeyInfo F24;
    public static PSKeyInfo _0;
    public static PSKeyInfo _1;
    public static PSKeyInfo _2;
    public static PSKeyInfo _3;
    public static PSKeyInfo _4;
    public static PSKeyInfo _5;
    public static PSKeyInfo _6;
    public static PSKeyInfo _7;
    public static PSKeyInfo _8;
    public static PSKeyInfo _9;
    public static PSKeyInfo A;
    public static PSKeyInfo B;
    public static PSKeyInfo C;
    public static PSKeyInfo D;
    public static PSKeyInfo E;
    public static PSKeyInfo F;
    public static PSKeyInfo G;
    public static PSKeyInfo H;
    public static PSKeyInfo I;
    public static PSKeyInfo J;
    public static PSKeyInfo K;
    public static PSKeyInfo L;
    public static PSKeyInfo M;
    public static PSKeyInfo N;
    public static PSKeyInfo O;
    public static PSKeyInfo P;
    public static PSKeyInfo Q;
    public static PSKeyInfo R;
    public static PSKeyInfo S;
    public static PSKeyInfo T;
    public static PSKeyInfo U;
    public static PSKeyInfo V;
    public static PSKeyInfo W;
    public static PSKeyInfo X;
    public static PSKeyInfo Y;
    public static PSKeyInfo Z;
    public static PSKeyInfo ucA;
    public static PSKeyInfo ucB;
    public static PSKeyInfo ucC;
    public static PSKeyInfo ucD;
    public static PSKeyInfo ucE;
    public static PSKeyInfo ucF;
    public static PSKeyInfo ucG;
    public static PSKeyInfo ucH;
    public static PSKeyInfo ucI;
    public static PSKeyInfo ucJ;
    public static PSKeyInfo ucK;
    public static PSKeyInfo ucL;
    public static PSKeyInfo ucM;
    public static PSKeyInfo ucN;
    public static PSKeyInfo ucO;
    public static PSKeyInfo ucP;
    public static PSKeyInfo ucQ;
    public static PSKeyInfo ucR;
    public static PSKeyInfo ucS;
    public static PSKeyInfo ucT;
    public static PSKeyInfo ucU;
    public static PSKeyInfo ucV;
    public static PSKeyInfo ucW;
    public static PSKeyInfo ucX;
    public static PSKeyInfo ucY;
    public static PSKeyInfo ucZ;
    public static PSKeyInfo Bang;
    public static PSKeyInfo At;
    public static PSKeyInfo Pound;
    public static PSKeyInfo Dollar;
    public static PSKeyInfo Percent;
    public static PSKeyInfo Uphat;
    public static PSKeyInfo Ampersand;
    public static PSKeyInfo Star;
    public static PSKeyInfo LParen;
    public static PSKeyInfo RParen;
    public static PSKeyInfo Colon;
    public static PSKeyInfo Semicolon;
    public static PSKeyInfo Question;
    public static PSKeyInfo Slash;
    public static PSKeyInfo Tilde;
    public static PSKeyInfo Backtick;
    public static PSKeyInfo LCurly;
    public static PSKeyInfo LBracket;
    public static PSKeyInfo Pipe;
    public static PSKeyInfo Backslash;
    public static PSKeyInfo RCurly;
    public static PSKeyInfo RBracket;
    public static PSKeyInfo SQuote;
    public static PSKeyInfo DQuote;
    public static PSKeyInfo LessThan;
    public static PSKeyInfo Comma;
    public static PSKeyInfo GreaterThan;
    public static PSKeyInfo Period;
    public static PSKeyInfo Underbar;
    public static PSKeyInfo Minus;
    public static PSKeyInfo Plus;
    public static PSKeyInfo Eq;
    public static PSKeyInfo Space;
    public static PSKeyInfo Backspace;
    public static PSKeyInfo Delete;
    public static PSKeyInfo DownArrow;
    public static PSKeyInfo End;
    public static PSKeyInfo Enter;
    public static PSKeyInfo Escape;
    public static PSKeyInfo Home;
    public static PSKeyInfo LeftArrow;
    public static PSKeyInfo PageUp;
    public static PSKeyInfo PageDown;
    public static PSKeyInfo RightArrow;
    public static PSKeyInfo Tab;
    public static PSKeyInfo UpArrow;
    public static PSKeyInfo AltF1;
    public static PSKeyInfo AltF2;
    public static PSKeyInfo AltF3;
    public static PSKeyInfo AltF4;
    public static PSKeyInfo AltF5;
    public static PSKeyInfo AltF6;
    public static PSKeyInfo AltF7;
    public static PSKeyInfo AltF8;
    public static PSKeyInfo AltF9;
    public static PSKeyInfo AltF10;
    public static PSKeyInfo AltF11;
    public static PSKeyInfo AltF12;
    public static PSKeyInfo AltF13;
    public static PSKeyInfo AltF14;
    public static PSKeyInfo AltF15;
    public static PSKeyInfo AltF16;
    public static PSKeyInfo AltF17;
    public static PSKeyInfo AltF18;
    public static PSKeyInfo AltF19;
    public static PSKeyInfo AltF20;
    public static PSKeyInfo AltF21;
    public static PSKeyInfo AltF22;
    public static PSKeyInfo AltF23;
    public static PSKeyInfo AltF24;
    public static PSKeyInfo Alt0;
    public static PSKeyInfo Alt1;
    public static PSKeyInfo Alt2;
    public static PSKeyInfo Alt3;
    public static PSKeyInfo Alt4;
    public static PSKeyInfo Alt5;
    public static PSKeyInfo Alt6;
    public static PSKeyInfo Alt7;
    public static PSKeyInfo Alt8;
    public static PSKeyInfo Alt9;
    public static PSKeyInfo AltA;
    public static PSKeyInfo AltB;
    public static PSKeyInfo AltC;
    public static PSKeyInfo AltD;
    public static PSKeyInfo AltE;
    public static PSKeyInfo AltF;
    public static PSKeyInfo AltG;
    public static PSKeyInfo AltH;
    public static PSKeyInfo AltI;
    public static PSKeyInfo AltJ;
    public static PSKeyInfo AltK;
    public static PSKeyInfo AltL;
    public static PSKeyInfo AltM;
    public static PSKeyInfo AltN;
    public static PSKeyInfo AltO;
    public static PSKeyInfo AltP;
    public static PSKeyInfo AltQ;
    public static PSKeyInfo AltR;
    public static PSKeyInfo AltS;
    public static PSKeyInfo AltT;
    public static PSKeyInfo AltU;
    public static PSKeyInfo AltV;
    public static PSKeyInfo AltW;
    public static PSKeyInfo AltX;
    public static PSKeyInfo AltY;
    public static PSKeyInfo AltZ;
    public static PSKeyInfo AltShiftB;
    public static PSKeyInfo AltShiftF;
    public static PSKeyInfo AltSpace;
    public static PSKeyInfo AltPeriod;
    public static PSKeyInfo AltEquals;
    public static PSKeyInfo AltMinus;
    public static PSKeyInfo AltUnderbar;
    public static PSKeyInfo AltBackspace;
    public static PSKeyInfo AltLess;
    public static PSKeyInfo AltGreater;
    public static PSKeyInfo AltQuestion;
    public static PSKeyInfo CtrlAt;
    public static PSKeyInfo CtrlSpace;
    public static PSKeyInfo CtrlA;
    public static PSKeyInfo CtrlB;
    public static PSKeyInfo CtrlC;
    public static PSKeyInfo CtrlD;
    public static PSKeyInfo CtrlE;
    public static PSKeyInfo CtrlF;
    public static PSKeyInfo CtrlG;
    public static PSKeyInfo CtrlH;
    public static PSKeyInfo CtrlI;
    public static PSKeyInfo CtrlJ;
    public static PSKeyInfo CtrlK;
    public static PSKeyInfo CtrlL;
    public static PSKeyInfo CtrlM;
    public static PSKeyInfo CtrlN;
    public static PSKeyInfo CtrlO;
    public static PSKeyInfo CtrlP;
    public static PSKeyInfo CtrlQ;
    public static PSKeyInfo CtrlR;
    public static PSKeyInfo CtrlS;
    public static PSKeyInfo CtrlT;
    public static PSKeyInfo CtrlU;
    public static PSKeyInfo CtrlV;
    public static PSKeyInfo CtrlW;
    public static PSKeyInfo CtrlX;
    public static PSKeyInfo CtrlY;
    public static PSKeyInfo CtrlZ;
    public static PSKeyInfo CtrlLBracket;
    public static PSKeyInfo CtrlBackslash;
    public static PSKeyInfo CtrlRBracket;
    public static PSKeyInfo CtrlCaret;
    public static PSKeyInfo CtrlUnderbar;
    public static PSKeyInfo CtrlBackspace;
    public static PSKeyInfo CtrlDelete;
    public static PSKeyInfo CtrlEnd;
    public static PSKeyInfo CtrlHome;
    public static PSKeyInfo CtrlPageUp;
    public static PSKeyInfo CtrlPageDown;
    public static PSKeyInfo CtrlLeftArrow;
    public static PSKeyInfo CtrlRightArrow;
    public static PSKeyInfo CtrlEnter;
    public static PSKeyInfo ShiftF3;
    public static PSKeyInfo ShiftF8;
    public static PSKeyInfo ShiftEnd;
    public static PSKeyInfo ShiftEnter;
    public static PSKeyInfo ShiftHome;
    public static PSKeyInfo ShiftPageUp;
    public static PSKeyInfo ShiftPageDown;
    public static PSKeyInfo ShiftLeftArrow;
    public static PSKeyInfo ShiftRightArrow;
    public static PSKeyInfo ShiftUpArrow;
    public static PSKeyInfo ShiftDownArrow;
    public static PSKeyInfo ShiftTab;
    public static PSKeyInfo ShiftInsert;
    public static PSKeyInfo CtrlShiftC;
    public static PSKeyInfo CtrlShiftEnter;
    public static PSKeyInfo CtrlShiftLeftArrow;
    public static PSKeyInfo CtrlShiftRightArrow;
    public static PSKeyInfo CtrlAltY;
    public static PSKeyInfo CtrlAltRBracket;
    public static PSKeyInfo CtrlAltQuestion;
    private static Keys();
    private static PSKeyInfo Key(char c);
    private static PSKeyInfo Key(ConsoleKey key);
    private static PSKeyInfo Alt(char c);
    private static PSKeyInfo Alt(ConsoleKey key);
    private static PSKeyInfo Ctrl(char c);
    private static PSKeyInfo Ctrl(ConsoleKey key);
    private static PSKeyInfo Shift(ConsoleKey key);
    private static PSKeyInfo CtrlShift(ConsoleKey key);
    private static PSKeyInfo CtrlAlt(char c);
}
internal class Microsoft.PowerShell.Point : ValueType {
    public int X;
    public int Y;
    public virtual string ToString();
}
public enum Microsoft.PowerShell.PredictionSource : Enum {
    public int value__;
    public static PredictionSource None;
    public static PredictionSource History;
    public static PredictionSource Plugin;
    public static PredictionSource HistoryAndPlugin;
}
public enum Microsoft.PowerShell.PredictionViewStyle : Enum {
    public int value__;
    public static PredictionViewStyle InlineView;
    public static PredictionViewStyle ListView;
}
public class Microsoft.PowerShell.PSConsoleReadLine : object {
    private int _tabCommandCount;
    private CommandCompletion _tabCompletions;
    private Runspace _runspace;
    private static Dictionary`2<CompletionResultType, PSKeyInfo[]> KeysEndingCompletion;
    private static Char[] EolChars;
    private static string DirectorySeparatorString;
    private Pager _pager;
    private HistoryQueue`1<HistoryItem> _history;
    private HistoryQueue`1<string> _recentHistory;
    private HistoryItem _previousHistoryItem;
    private Dictionary`2<string, int> _hashedHistory;
    private int _currentHistoryIndex;
    private int _getNextHistoryIndex;
    private int _searchHistoryCommandCount;
    private int _recallHistoryCommandCount;
    private int _anyHistoryCommandCount;
    private string _searchHistoryPrefix;
    private HistoryItem _savedCurrentLine;
    private Mutex _historyFileMutex;
    private long _historyFileLastSavedSize;
    private static string _forwardISearchPrompt;
    private static string _backwardISearchPrompt;
    private static string _failedForwardISearchPrompt;
    private static string _failedBackwardISearchPrompt;
    private static Regex s_sensitivePattern;
    private static HashSet`1<string> s_SecretMgmtCommands;
    private int historyErrorReportedCount;
    private Dictionary`2<PSKeyInfo, KeyHandler> _dispatchTable;
    private Dictionary`2<PSKeyInfo, Dictionary`2<PSKeyInfo, KeyHandler>> _chordDispatchTable;
    private int _normalCursorSize;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viInsKeyMap;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viCmdKeyMap;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordDTable;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordGTable;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordCTable;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordYTable;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordDGTable;
    private static Dictionary`2<PSKeyInfo, KeyHandler> _viChordTextObjectsTable;
    private static Dictionary`2<PSKeyInfo, Dictionary`2<PSKeyInfo, KeyHandler>> _viCmdChordTable;
    private static Dictionary`2<PSKeyInfo, Dictionary`2<PSKeyInfo, KeyHandler>> _viInsChordTable;
    private List`1<string> _killRing;
    private int _killIndex;
    private int _killCommandCount;
    private int _yankCommandCount;
    private int _yankStartPoint;
    private int _yankLastArgCommandCount;
    private YankLastArgState _yankLastArgState;
    private int _visualSelectionCommandCount;
    private int _moveToEndOfLineCommandCount;
    private int _moveToLineCommandCount;
    private int _moveToLineDesiredColumn;
    private PSConsoleReadLineOptions _options;
    private static string DefaultName;
    private static PredictionClient s_predictionClient;
    private static PropertyInfo s_pCurrentLocation;
    private Prediction _prediction;
    private static int ConsoleExiting;
    private static PSConsoleReadLine _singleton;
    private static Action`1<CancellationToken> _handleIdleOverride;
    private bool _delayedOneTimeInitCompleted;
    private IPSConsoleReadLineMockableMethods _mockableMethods;
    private IConsole _console;
    private ICharMap _charMap;
    private Encoding _initialOutputEncoding;
    private bool _skipOutputEncodingChange;
    private EngineIntrinsics _engineIntrinsics;
    private Thread _readKeyThread;
    private AutoResetEvent _readKeyWaitHandle;
    private AutoResetEvent _keyReadWaitHandle;
    private CancellationToken _cancelReadCancellationToken;
    internal ManualResetEvent _closingWaitHandle;
    private WaitHandle[] _threadProcWaitHandles;
    private WaitHandle[] _requestKeyWaitHandles;
    private StringBuilder _buffer;
    private StringBuilder _statusBuffer;
    private bool _statusIsErrorMessage;
    private string _statusLinePrompt;
    private string _acceptedCommandLine;
    private List`1<EditItem> _edits;
    private int _editGroupStart;
    private int _undoEditIndex;
    private int _mark;
    private bool _inputAccepted;
    private Queue`1<PSKeyInfo> _queuedKeys;
    private Stopwatch _lastRenderTime;
    private static Stopwatch _readkeyStopwatch;
    private static HistoryQueue`1<PSKeyInfo> _lastNKeys;
    private Token[] _tokens;
    private Ast _ast;
    private ParseError[] _parseErrors;
    private bool _searchHistoryBackward;
    private static int COMMON_WIDEST_CONSOLE_WIDTH;
    private List`1<StringBuilder> _consoleBufferLines;
    private static String[] _spaces;
    private RenderData _previousRender;
    private static RenderData _initialPrevRender;
    private int _initialX;
    private int _initialY;
    private bool _waitingToRender;
    private bool _handlePotentialResizing;
    private ConsoleColor _initialForeground;
    private ConsoleColor _initialBackground;
    private int _current;
    private int _emphasisStart;
    private int _emphasisLength;
    private TextObjectOperation _textObjectOperation;
    private TextObjectSpan _textObjectSpan;
    private Dictionary`2<TextObjectOperation, Dictionary`2<TextObjectSpan, KeyHandler>> _textObjectHandlers;
    private GroupUndoHelper _groupUndoHelper;
    private char _lastWordDelimiter;
    private bool _shouldAppend;
    private static ViRegister _viRegister;
    private static int ViEndOfLineFactor { get; }
    private PSConsoleReadLineOptions Options { get; }
    private bool IsLastEditItemReplaceable { get; }
    private static PSConsoleReadLine();
    public static void SelfInsert(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void RevertLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CancelLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardDeleteInput(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardDeleteLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ForwardDeleteImpl(int endPosition, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator);
    public static void BackwardDeleteInput(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardDeleteLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void BackwardDeleteSubstring(int position, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator);
    public static void BackwardDeleteChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void DeleteCharImpl(int qty, bool orExit);
    public static void DeleteChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteCharOrExit(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void UpdateWordCase(bool toUpper);
    public static void UpcaseWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DowncaseWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CapitalizeWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private bool AcceptLineImpl(bool validate);
    private string Validate(Ast rootAst);
    private bool UnresolvedCommandCouldSucceed(string commandName, Ast rootAst);
    public static void AcceptLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ValidateAndAcceptLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AcceptAndGetNext(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AddLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void InsertLineAbove(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void InsertLineBelow(Nullable`1<ConsoleKeyInfo> key, object arg);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override CommandCompletion Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.CompleteInput(string input, int cursorIndex, Hashtable options, PowerShell powershell);
    public static void TabCompleteNext(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void TabCompletePrevious(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static bool IsSingleQuote(char c);
    private static bool IsDoubleQuote(char c);
    private static bool IsQuotedVariable(string s);
    private static bool IsQuoted(string s);
    private static string GetUnquotedText(string s, bool consistentQuoting);
    private static string GetUnquotedText(CompletionResult match, bool consistentQuoting);
    public static void Complete(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void MenuComplete(Nullable`1<ConsoleKeyInfo> key, object arg);
    private bool IsConsistentQuoting(Collection`1<CompletionResult> matches);
    private string GetUnambiguousPrefix(Collection`1<CompletionResult> matches, Boolean& ambiguous);
    private void CompleteImpl(bool menuSelect);
    private CommandCompletion GetCompletions();
    private void Complete(bool forward);
    private void DoReplacementForCompletion(CompletionResult completionResult, CommandCompletion completions);
    private static string GetReplacementTextForDirectory(string replacementText, Int32& cursorAdjustment);
    public static void PossibleCompletions(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static string HandleNewlinesForPossibleCompletions(string s);
    private Menu CreateCompletionMenu(Collection`1<CompletionResult> matches);
    private Collection`1<CompletionResult> FilterCompletions(CommandCompletion completion, string completionFilter);
    private int FindUserCompletionTextPosition(CompletionResult match, string userCompletionText);
    private bool IsDoneWithCompletions(CompletionResult currentCompletion, PSKeyInfo nextKey);
    private void PossibleCompletionsImpl(CommandCompletion completions, bool menuSelect);
    private static string GetMenuItem(string item, int columnWidth);
    private void MenuCompleteImpl(Menu menu, CommandCompletion completions);
    public static void ViTabCompleteNext(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViTabCompletePrevious(Nullable`1<ConsoleKeyInfo> key, object arg);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.RenderFullHelp(string content, string regexPatternToScrollTo);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override object Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.GetDynamicHelpContent(string commandName, string parameterName, bool isFullHelp);
    public static void ShowCommandHelp(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShowParameterHelp(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void WriteDynamicHelpContent(string commandName, string parameterName, bool isFullHelp);
    private void DynamicHelpImpl(bool isFullHelp);
    private void WriteDynamicHelpBlock(Collection`1<string> helpBlock);
    private void WriteParameterHelp(object helpContent);
    private void ClearSavedCurrentLine();
    private AddToHistoryOption GetAddToHistoryOption(string line, bool fromHistoryFile);
    private string MaybeAddToHistory(string result, List`1<EditItem> edits, int undoEditIndex, bool fromDifferentSession, bool fromInitialRead);
    private string GetHistorySaveFileMutexName();
    private void IncrementalHistoryWrite();
    private void SaveHistoryAtExit();
    private void ReportHistoryFileError(Exception e);
    private bool WithHistoryFileMutexDo(int timeout, Action action);
    private void WriteHistoryRange(int start, int end, bool overwritten);
    private List`1<string> ReadHistoryFileIncrementally();
    private bool MaybeReadHistoryFile();
    private void ReadHistoryFile();
    private void UpdateHistoryFromFile(IEnumerable`1<string> historyLines, bool fromDifferentSession, bool fromInitialRead);
    private static bool IsOnLeftSideOfAnAssignment(Ast ast, Ast& rhs);
    private static bool IsRightSideOfAnAssignmentSafe(Ast rhs);
    private static bool IsSecretMgmtCommand(StringConstantExpressionAst strConst, CommandAst& command);
    private static bool IsSafePropertyUsage(Ast member);
    private static ExpressionAst GetArgumentForParameter(CommandParameterAst param);
    private static bool IsCloudTokenOrSecretAccess(StringConstantExpressionAst arg2Ast, CommandAst& command);
    public static AddToHistoryOption GetDefaultAddToHistoryOption(string line);
    public static void AddToHistory(string command);
    public static void ClearHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static HistoryItem[] GetHistoryItems();
    private void UpdateFromHistory(HistoryMoveCursor moveCursor);
    private void SaveCurrentLine();
    private void HistoryRecall(int direction);
    public static void PreviousHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void HistorySearch(int direction);
    public static void BeginningOfHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void EndOfHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void GoToEndOfHistory();
    public static void HistorySearchBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void HistorySearchForward(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void UpdateHistoryDuringInteractiveSearch(string toMatch, int direction, Int32& searchFromPoint);
    private void InteractiveHistorySearchLoop(int direction);
    private void InteractiveHistorySearch(int direction);
    public static void ForwardSearchHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ReverseSearchHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static KeyHandler MakeKeyHandler(Action`2<Nullable`1<ConsoleKeyInfo>, object> action, string briefDescription, string longDescription, ScriptBlock scriptBlock);
    private void SetDefaultBindings(EditMode editMode);
    private void SetDefaultWindowsBindings();
    private void SetDefaultEmacsBindings();
    public static KeyHandlerGroup GetDisplayGrouping(string function);
    public static void ShowKeyBindings(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void WhatIsKey(Nullable`1<ConsoleKeyInfo> key, object arg);
    internal static ConsoleColor AlternateBackground(ConsoleColor bg);
    private void SetDefaultViBindings();
    public static void SetMark(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ExchangePointAndMark(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ClearKillRing();
    private void Kill(int start, int length, bool prepend);
    public static void KillLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardKillInput(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardKillLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void KillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void UnixWordRubout(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellBackwardKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void KillRegion(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void YankImpl();
    public static void Yank(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void YankPopImpl();
    public static void YankPop(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void YankArgImpl(YankLastArgState yankLastArgState);
    public static void YankNthArg(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void YankLastArg(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void VisualSelectionCommon(Action action, bool forceSetMark);
    public static void SelectBackwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectForwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectAll(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectBackwardsLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectCommandArgument(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Paste(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Copy(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CopyOrCancelLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Cut(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void EndOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BeginningOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViForwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViBackwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViOffsetCursorPosition(int count);
    private void MoveToLine(int lineOffset);
    private void MoveToLineImpl(int lineOffset);
    public static void PreviousLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static bool CheckIsBound(Action`2<Nullable`1<ConsoleKeyInfo>, object> action);
    public static void BackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void GotoBrace(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ClearScreen(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static char TryGetArgAsChar(object arg);
    public static void CharacterSearch(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CharacterSearchBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViBackwardGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViNextGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViEndOfGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViEndOfPreviousGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static int get_ViEndOfLineFactor();
    public static void MoveToEndOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextWordEnd(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void GotoColumn(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void GotoFirstNonBlankOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViGotoBrace(Nullable`1<ConsoleKeyInfo> key, object arg);
    private int ViFindBrace(int i);
    private int ViFindBackward(int start, char target, char withoutPassing);
    private int ViFindForward(int start, char target, char withoutPassing);
    public void MoveToFirstLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public void MoveToLastLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void ViMoveToLine(int lineOffset);
    private PSConsoleReadLineOptions get_Options();
    private void SetOptionsInternal(SetPSReadLineOption options);
    private void SetKeyHandlerInternal(String[] keys, Action`2<Nullable`1<ConsoleKeyInfo>, object> handler, string briefDescription, string longDescription, ScriptBlock scriptBlock);
    private void RemoveKeyHandlerInternal(String[] keys);
    public static void SetOptions(SetPSReadLineOption options);
    public static PSConsoleReadLineOptions GetOptions();
    public static void SetKeyHandler(String[] key, ScriptBlock scriptBlock, string briefDescription, string longDescription);
    public static void SetKeyHandler(String[] key, Action`2<Nullable`1<ConsoleKeyInfo>, object> handler, string briefDescription, string longDescription);
    public static void RemoveKeyHandler(String[] key);
    public static IEnumerable`1<KeyHandler> GetKeyHandlers();
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSConsoleReadLine/<GetKeyHandlers>d__262")]
public static IEnumerable`1<KeyHandler> GetKeyHandlers(bool includeBound, bool includeUnbound);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.PSConsoleReadLine/<GetKeyHandlers>d__263")]
public static IEnumerable`1<KeyHandler> GetKeyHandlers(String[] Chord);
    private static int GetBeginningOfLinePos(int current);
    private static int GetBeginningOfNthLinePos(int lineIndex);
    private static int GetEndOfLogicalLinePos(int current);
    private static int GetEndOfNthLogicalLinePos(int lineIndex);
    private static int GetFirstNonBlankOfLogicalLinePos(int current);
    private static void InitializePropertyInfo();
    private static void UpdatePredictionClient(Runspace runspace, EngineIntrinsics engineIntrinsics);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override Task`1<List`1<PredictionResult>> Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.PredictInputAsync(Ast ast, Token[] tokens);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.OnSuggestionDisplayed(Guid predictorId, UInt32 session, int countOrIndex);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.OnSuggestionAccepted(Guid predictorId, UInt32 session, string suggestionText);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.OnCommandLineAccepted(IReadOnlyList`1<string> history);
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.OnCommandLineExecuted(string commandLine, bool success);
    private void ReportExecutionStatus(bool success);
    public static void AcceptSuggestion(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AcceptNextSuggestionWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void AcceptNextSuggestionWord(int numericArg);
    public static void NextSuggestion(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PreviousSuggestion(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShowFullPredictionTooltip(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static bool UpdateListSelection(int numericArg);
    private static bool UpdateListByPaging(bool pageUp, int numericArg);
    private static bool UpdateListByLoopingSources(bool jumpUp, int numericArg);
    private static void ReplaceSelection(string selectedItemText);
    public static void SwitchPredictionView(Nullable`1<ConsoleKeyInfo> key, object arg);
    internal static void WarnWhenWindowSizeTooSmallForView(PredictionViewStyle viewStyle, PSCmdlet cmdlet);
    public static void Insert(char c);
    public static void Insert(string s);
    public static void Delete(int start, int length);
    public static void Replace(int start, int length, string replacement, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator, object instigatorArg);
    public static void GetBufferState(String& input, Int32& cursor);
    public static void GetBufferState(Ast& ast, Token[]& tokens, ParseError[]& parseErrors, Int32& cursor);
    public static void GetSelectionState(Int32& start, Int32& length);
    public static void SetCursorPosition(int cursor);
    public static bool TryGetArgAsInt(object arg, Int32& numericArg, int defaultNumericArg);
    private sealed virtual override bool Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.RunspaceIsRemote(Runspace runspace);
    private void ReadOneOrMoreKeys();
    private void ReadKeyThreadProc();
    internal static PSKeyInfo ReadKey();
    private void PrependQueuedKeys(PSKeyInfo key);
    public static string ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics, Nullable`1<bool> lastRunStatus);
    public static string ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics, CancellationToken cancellationToken, Nullable`1<bool> lastRunStatus);
    private string InputLoop();
    private T CallPossibleExternalApplication(Func`1<T> func);
    private void CallPossibleExternalApplication(Action action);
    private void ProcessOneKey(PSKeyInfo key, Dictionary`2<PSKeyInfo, KeyHandler> dispatchTable, bool ignoreIfNoAction, object arg);
    private void Initialize(Runspace runspace, EngineIntrinsics engineIntrinsics);
    private void DelayedOneTimeInitialize();
    private static void Chord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Abort(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DigitArgument(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void InvokePrompt(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static string GetPrompt();
    internal static bool IsRunningCI(IConsole console);
    public static void RepeatLastCharSearch(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void RepeatLastCharSearchBackwards(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SearchChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SearchCharBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SearchCharWithBackoff(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SearchCharBackwardWithBackoff(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViExit(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteToEnd(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void DeleteToEndPoint(object arg, int endPoint, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator);
    private static void DeleteBackwardToEndPoint(object arg, int endPoint, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator);
    public static void ViDeleteGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteEndOfWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteEndOfGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToChar(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToCharBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToCharBack(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToBeforeChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToBeforeChar(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteToBeforeCharBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViDeleteToBeforeCharBack(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void Ding(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViCommandMode(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViInsertMode(Nullable`1<ConsoleKeyInfo> key, object arg);
    internal static bool InViEditMode();
    public static bool InViCommandMode();
    public static bool InViInsertMode();
    internal static IDisposable UseViCommandModeTables();
    internal static IDisposable UseViInsertModeTables();
    private void ViIndicateCommandMode();
    private void ViIndicateInsertMode();
    public static void ViInsertAtBegining(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViInsertAtEnd(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViInsertWithAppend(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViInsertWithDelete(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViAcceptLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PrependAndAccept(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void InvertCase(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SwapCharacters(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void SwapCharactersImpl(int cursor);
    public static void DeleteLineToFirstChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static int DeleteLineImpl(int lineIndex, int lineCount);
    public static void DeleteEndOfBuffer(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void DeleteNextLines(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeletePreviousLines(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void DeleteRelativeLines(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardDeleteWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViBackwardDeleteGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViDeleteBrace(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void DeleteRange(int first, int last, Action`2<Nullable`1<ConsoleKeyInfo>, object> action);
    public static void ViSearchHistoryBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SearchForward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void RepeatSearch(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void RepeatSearchBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void StartSearch(bool backward);
    private void HistorySearch();
    public static void RepeatLastCommand(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViChord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViChordHandler(Dictionary`2<PSKeyInfo, KeyHandler> secondKeyDispatchTable, object arg);
    private static void ViDGChord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static bool IsNumeric(PSKeyInfo key);
    public static void ViDigitArgumentInChord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViAcceptLineOrExit(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViInsertLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void MoveToBeginningOfPhrase();
    private bool IsAtBeginningOfPhrase();
    public static void ViAppendLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void MoveToEndOfPhrase();
    private bool IsAtEndOfPhrase();
    public static void ViJoinLines(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void MaybeParseInput();
    private string ParseInput();
    private void ClearStatusMessage(bool render);
    private void RenderWithPredictionQueryPaused();
    private void Render();
    private void ForceRender();
    private int GenerateRender(string defaultColor);
    private static StringBuilder NextBufferLine(List`1<StringBuilder> consoleBufferLines, Int32& current);
    private bool RenderErrorPrompt(RenderData renderData, string defaultColor);
    private void CalculateWhereAndWhatToRender(bool cursorMovedToInitialPos, RenderData renderData, LineInfoForRendering& lineInfoForRendering);
    private void ReallyRender(RenderData renderData, string defaultColor);
    private string GetTokenColor(Token token);
    private void GetRegion(Int32& start, Int32& length);
    private void RecomputeInitialCoords(bool isTextBufferUnchanged);
    private void MoveCursor(int newCursor);
    internal Point EndOfBufferPosition();
    internal Point ConvertOffsetToPoint(int offset);
    private int ConvertLineAndColumnToOffset(Point point);
    internal Point ConvertRenderDataOffsetToPoint(int initialX, int initialY, int bufferWidth, RenderData renderData, RenderDataOffset offset);
    internal RenderDataOffset ConvertPointToRenderDataOffset(int initialX, int initialY, RenderData renderData);
    private int GetLogicalLineNumber();
    private int GetLogicalLineCount();
    private bool LineIsMultiLine();
    private int GetStatusLineCount();
    [ExcludeFromCodeCoverageAttribute]
private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.Ding();
    public static void Ding();
    private bool PromptYesOrNo(string s);
    public static void ScrollDisplayUp(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayUpLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayDown(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayDownLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayTop(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayToCursor(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void WriteBlankLines(int count);
    private void WriteBlankLines(int top, int count);
    private void WriteBlankRestOfLine(int left, int top);
    private static string Spaces(int cnt);
    internal static int LengthInBufferCells(string str);
    internal static int LengthInBufferCells(string str, int start, int end);
    internal static int LengthInBufferCells(StringBuilder sb, int start, int end);
    internal static int LengthInBufferCells(char c);
    private static string SubstringByCells(string text, int countOfCells);
    private static string SubstringByCells(string text, int start, int countOfCells);
    private static int SubstringLengthByCells(string text, int countOfCells);
    private static int SubstringLengthByCells(string text, int start, int countOfCells);
    private static int SubstringLengthByCellsFromEnd(string text, int countOfCells);
    private static int SubstringLengthByCellsFromEnd(string text, int start, int countOfCells);
    private static ValueTuple`2<int, int> TrimSubstringInPlace(string text, int start, int end);
    private static void ViReplaceUntilEsc(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceBrace(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViBackwardReplaceLineToFirstChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViBackwardReplaceLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void BackwardReplaceChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViBackwardReplaceWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViBackwardReplaceGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceToEnd(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViReplaceLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceEndOfWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceEndOfGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ReplaceChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ReplaceCharInPlace(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViReplaceToChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceToChar(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViReplaceToCharBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceToCharBack(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViReplaceToBeforeChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceToBeforeChar(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViReplaceToBeforeCharBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ViReplaceToBeforeCharBack(char keyChar, Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CaptureScreen(Nullable`1<ConsoleKeyInfo> key, object arg);
    internal static void CaptureScreenImpl();
    private void ViChordDeleteTextObject(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void ViChordTextObject(Nullable`1<ConsoleKeyInfo> key, object arg);
    private TextObjectSpan GetRequestedTextObjectSpan(ConsoleKeyInfo key);
    private static void ViHandleTextObject(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static void ResetTextObjectState();
    private static void ViDeleteInnerWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    private int AdjustCursorPosition(int position);
    private void RemoveEditsAfterUndo();
    private void SaveEditItem(EditItem editItem);
    private void StartEditGroup();
    private void EndEditGroup(Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator, object instigatorArg);
    private bool get_IsLastEditItemReplaceable();
    public static void Undo(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Redo(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void UndoAll(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViEditVisually(Nullable`1<ConsoleKeyInfo> key, object arg);
    private static string GetTemporaryPowerShellFile();
    private void ProcessViVisualEditing(string tempFileName);
    private static string GetPreferredEditor();
    private static bool OffsetWithinToken(int offset, Token token);
    private Token FindNestedToken(int offset, IList`1<Token> tokens, FindTokenMode mode);
    private Token FindToken(int current, FindTokenMode mode);
    private bool InWord(int index, string wordDelimiters);
    private int FindForwardWordPoint(string wordDelimiters);
    private int FindNextWordPoint(string wordDelimiters);
    private int FindBackwardWordPoint(string wordDelimiters);
    private int ViFindNextWordPoint(string wordDelimiters);
    private int ViFindNextWordPoint(int i, string wordDelimiters);
    private int ViFindNextWordFromWhiteSpace(int i, string wordDelimiters);
    private int ViFindNextWordFromDelimiter(int i, string wordDelimiters);
    private bool IsAtEndOfLine(int i);
    private int ViFindNextWordFromWord(int i, string wordDelimiters);
    private bool IsWhiteSpace(int i);
    private int ViFindPreviousWordPoint(string wordDelimiters);
    private int ViFindPreviousWordPoint(int i, string wordDelimiters);
    private int FindPreviousWordFromWord(int i, string wordDelimiters);
    private bool IsDelimiter(int i, string wordDelimiters);
    private bool IsDelimiter(char c, string wordDelimiters);
    private int FindPreviousWordFromDelimiter(int i, string wordDelimiters);
    private int FindPreviousWordFromWhiteSpace(int i, string wordDelimiters);
    private int ViFindPreviousGlob(int i);
    private int ViFindNextGlob(int i);
    private int ViFindEndOfGlob();
    private int ViFindNextWordEnd(string wordDelimiters);
    private int ViFindNextWordEnd(int i, string wordDelimiters);
    private int ViFindGlobEnd(int i);
    private int ViFindEndOfPreviousGlob();
    private int ViFindEndOfPreviousGlob(int i);
    public static void PasteAfter(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PasteBefore(Nullable`1<ConsoleKeyInfo> key, object arg);
    private void PasteAfterImpl();
    private void PasteBeforeImpl();
    private void SaveToClipboard(int startIndex, int length);
    private void SaveLinesToClipboard(int lineIndex, int lineCount);
    private void RemoveTextToViRegister(int start, int count, Action`2<Nullable`1<ConsoleKeyInfo>, object> instigator, object arg, bool moveCursorToEndWhenUndoDelete);
    public static void ViYankLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankRight(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankLeft(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankToEndOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankPreviousWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankEndOfWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankEndOfGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankBeginningOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankToFirstChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankPercent(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankPreviousGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ViYankNextGlob(Nullable`1<ConsoleKeyInfo> key, object arg);
    [CompilerGeneratedAttribute]
private void <MaybeReadHistoryFile>b__105_0();
    [CompilerGeneratedAttribute]
private void <ReadHistoryFile>b__106_0();
    [CompilerGeneratedAttribute]
private void <PrependQueuedKeys>b__346_0(PSKeyInfo k);
    [CompilerGeneratedAttribute]
internal static bool <ReadLine>g__IsValid|348_0(ConsoleColor color);
    [CompilerGeneratedAttribute]
private void <DelayedOneTimeInitialize>b__356_0(object x, EventArgs y);
    [CompilerGeneratedAttribute]
private void <GenerateRender>g__UpdateColorsIfNecessary|459_0(string newColor, <>c__DisplayClass459_0& );
    [CompilerGeneratedAttribute]
private void <GenerateRender>g__RenderOneChar|459_1(char charToRender, bool toEmphasize, <>c__DisplayClass459_0& );
    [CompilerGeneratedAttribute]
private void <ReallyRender>g__UpdateColorsIfNecessary|463_0(string newColor, <>c__DisplayClass463_0& );
    [CompilerGeneratedAttribute]
internal static bool <CaptureScreenImpl>g__TooCloseToTop|525_0(<>c__DisplayClass525_0& );
    [CompilerGeneratedAttribute]
internal static bool <CaptureScreenImpl>g__TooCloseToBottom|525_1(<>c__DisplayClass525_0& );
    [CompilerGeneratedAttribute]
internal static void <CaptureScreenImpl>g__UpdateSelection|525_2(<>c__DisplayClass525_0& );
}
public class Microsoft.PowerShell.PSConsoleReadLineOptions : object {
    public static ConsoleColor DefaultCommentColor;
    public static ConsoleColor DefaultKeywordColor;
    public static ConsoleColor DefaultStringColor;
    public static ConsoleColor DefaultOperatorColor;
    public static ConsoleColor DefaultVariableColor;
    public static ConsoleColor DefaultCommandColor;
    public static ConsoleColor DefaultParameterColor;
    public static ConsoleColor DefaultTypeColor;
    public static ConsoleColor DefaultNumberColor;
    public static ConsoleColor DefaultMemberColor;
    public static ConsoleColor DefaultEmphasisColor;
    public static ConsoleColor DefaultErrorColor;
    public static string DefaultListPredictionColor;
    public static string DefaultListPredictionSelectedColor;
    public static string DefaultInlinePredictionColor;
    public static string DefaultListPredictionTooltipColor;
    public static EditMode DefaultEditMode;
    public static string DefaultContinuationPrompt;
    public static int DefaultMaximumHistoryCount;
    public static int DefaultMaximumKillRingCount;
    public static bool DefaultHistorySearchCursorMovesToEnd;
    public static bool DefaultShowToolTips;
    public static int DefaultDingTone;
    public static int DefaultDingDuration;
    public static int DefaultCompletionQueryItems;
    public static string DefaultWordDelimiters;
    public static BellStyle DefaultBellStyle;
    public static bool DefaultHistorySearchCaseSensitive;
    public static HistorySaveStyle DefaultHistorySaveStyle;
    public static PredictionSource DefaultPredictionSource;
    public static PredictionViewStyle DefaultPredictionViewStyle;
    public static int DefaultAnsiEscapeTimeout;
    [CompilerGeneratedAttribute]
private EditMode <EditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationPrompt>k__BackingField;
    internal string _continuationPromptColor;
    [CompilerGeneratedAttribute]
private int <ExtraPromptLineCount>k__BackingField;
    public static int DefaultExtraPromptLineCount;
    [CompilerGeneratedAttribute]
private Func`2<string, object> <AddToHistoryHandler>k__BackingField;
    public static Func`2<string, object> DefaultAddToHistoryHandler;
    [CompilerGeneratedAttribute]
private Action`1<CommandAst> <CommandValidationHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <CommandsToValidateScriptBlockArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HistoryNoDuplicates>k__BackingField;
    public static bool DefaultHistoryNoDuplicates;
    [CompilerGeneratedAttribute]
private int <MaximumHistoryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumKillRingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HistorySearchCursorMovesToEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowToolTips>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DingTone>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CompletionQueryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WordDelimiters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DingDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private BellStyle <BellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HistorySearchCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private ViModeStyle <ViModeIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptBlock <ViModeChangeHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistorySavePath>k__BackingField;
    [CompilerGeneratedAttribute]
private HistorySaveStyle <HistorySaveStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private PredictionSource <PredictionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private PredictionViewStyle <PredictionViewStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnsiEscapeTimeout>k__BackingField;
    private String[] _promptText;
    [CompilerGeneratedAttribute]
private bool <TerminateOrphanedConsoleApps>k__BackingField;
    internal string _defaultTokenColor;
    internal string _commentColor;
    internal string _keywordColor;
    internal string _stringColor;
    internal string _operatorColor;
    internal string _variableColor;
    internal string _commandColor;
    internal string _parameterColor;
    internal string _typeColor;
    internal string _numberColor;
    internal string _memberColor;
    internal string _emphasisColor;
    internal string _errorColor;
    internal string _selectionColor;
    internal string _inlinePredictionColor;
    internal string _listPredictionColor;
    internal string _listPredictionSelectedColor;
    internal string _listPredictionTooltipColor;
    private static Dictionary`2<string, Action`2<PSConsoleReadLineOptions, object>> ColorSetters;
    public EditMode EditMode { get; public set; }
    public string ContinuationPrompt { get; public set; }
    public object ContinuationPromptColor { get; public set; }
    public int ExtraPromptLineCount { get; public set; }
    public Func`2<string, object> AddToHistoryHandler { get; public set; }
    public Action`1<CommandAst> CommandValidationHandler { get; public set; }
    public HashSet`1<string> CommandsToValidateScriptBlockArguments { get; public set; }
    public bool HistoryNoDuplicates { get; public set; }
    public int MaximumHistoryCount { get; public set; }
    public int MaximumKillRingCount { get; public set; }
    public bool HistorySearchCursorMovesToEnd { get; public set; }
    public bool ShowToolTips { get; public set; }
    public int DingTone { get; public set; }
    public int CompletionQueryItems { get; public set; }
    public string WordDelimiters { get; public set; }
    public int DingDuration { get; public set; }
    public BellStyle BellStyle { get; public set; }
    public bool HistorySearchCaseSensitive { get; public set; }
    internal StringComparison HistoryStringComparison { get; }
    internal StringComparer HistoryStringComparer { get; }
    public ViModeStyle ViModeIndicator { get; public set; }
    public ScriptBlock ViModeChangeHandler { get; public set; }
    public string HistorySavePath { get; public set; }
    public HistorySaveStyle HistorySaveStyle { get; public set; }
    public PredictionSource PredictionSource { get; public set; }
    public PredictionViewStyle PredictionViewStyle { get; public set; }
    public int AnsiEscapeTimeout { get; public set; }
    public String[] PromptText { get; public set; }
    public object DefaultTokenColor { get; public set; }
    public object CommentColor { get; public set; }
    public object KeywordColor { get; public set; }
    public object StringColor { get; public set; }
    public object OperatorColor { get; public set; }
    public object VariableColor { get; public set; }
    public object CommandColor { get; public set; }
    public object ParameterColor { get; public set; }
    public object TypeColor { get; public set; }
    public object NumberColor { get; public set; }
    public object MemberColor { get; public set; }
    public object EmphasisColor { get; public set; }
    public object ErrorColor { get; public set; }
    public object SelectionColor { get; public set; }
    public object InlinePredictionColor { get; public set; }
    public object ListPredictionColor { get; public set; }
    public object ListPredictionSelectedColor { get; public set; }
    public object ListPredictionTooltipColor { get; public set; }
    public bool TerminateOrphanedConsoleApps { get; public set; }
    private static PSConsoleReadLineOptions();
    public PSConsoleReadLineOptions(string hostName, bool usingLegacyConsole);
    [CompilerGeneratedAttribute]
public EditMode get_EditMode();
    [CompilerGeneratedAttribute]
public void set_EditMode(EditMode value);
    [CompilerGeneratedAttribute]
public string get_ContinuationPrompt();
    [CompilerGeneratedAttribute]
public void set_ContinuationPrompt(string value);
    public object get_ContinuationPromptColor();
    public void set_ContinuationPromptColor(object value);
    [CompilerGeneratedAttribute]
public int get_ExtraPromptLineCount();
    [CompilerGeneratedAttribute]
public void set_ExtraPromptLineCount(int value);
    [CompilerGeneratedAttribute]
public Func`2<string, object> get_AddToHistoryHandler();
    [CompilerGeneratedAttribute]
public void set_AddToHistoryHandler(Func`2<string, object> value);
    [CompilerGeneratedAttribute]
public Action`1<CommandAst> get_CommandValidationHandler();
    [CompilerGeneratedAttribute]
public void set_CommandValidationHandler(Action`1<CommandAst> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_CommandsToValidateScriptBlockArguments();
    [CompilerGeneratedAttribute]
public void set_CommandsToValidateScriptBlockArguments(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_HistoryNoDuplicates();
    [CompilerGeneratedAttribute]
public void set_HistoryNoDuplicates(bool value);
    [CompilerGeneratedAttribute]
public int get_MaximumHistoryCount();
    [CompilerGeneratedAttribute]
public void set_MaximumHistoryCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumKillRingCount();
    [CompilerGeneratedAttribute]
public void set_MaximumKillRingCount(int value);
    [CompilerGeneratedAttribute]
public bool get_HistorySearchCursorMovesToEnd();
    [CompilerGeneratedAttribute]
public void set_HistorySearchCursorMovesToEnd(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowToolTips();
    [CompilerGeneratedAttribute]
public void set_ShowToolTips(bool value);
    [CompilerGeneratedAttribute]
public int get_DingTone();
    [CompilerGeneratedAttribute]
public void set_DingTone(int value);
    [CompilerGeneratedAttribute]
public int get_CompletionQueryItems();
    [CompilerGeneratedAttribute]
public void set_CompletionQueryItems(int value);
    [CompilerGeneratedAttribute]
public string get_WordDelimiters();
    [CompilerGeneratedAttribute]
public void set_WordDelimiters(string value);
    [CompilerGeneratedAttribute]
public int get_DingDuration();
    [CompilerGeneratedAttribute]
public void set_DingDuration(int value);
    [CompilerGeneratedAttribute]
public BellStyle get_BellStyle();
    [CompilerGeneratedAttribute]
public void set_BellStyle(BellStyle value);
    [CompilerGeneratedAttribute]
public bool get_HistorySearchCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_HistorySearchCaseSensitive(bool value);
    internal StringComparison get_HistoryStringComparison();
    internal StringComparer get_HistoryStringComparer();
    [CompilerGeneratedAttribute]
public ViModeStyle get_ViModeIndicator();
    [CompilerGeneratedAttribute]
public void set_ViModeIndicator(ViModeStyle value);
    [CompilerGeneratedAttribute]
public ScriptBlock get_ViModeChangeHandler();
    [CompilerGeneratedAttribute]
public void set_ViModeChangeHandler(ScriptBlock value);
    [CompilerGeneratedAttribute]
public string get_HistorySavePath();
    [CompilerGeneratedAttribute]
public void set_HistorySavePath(string value);
    [CompilerGeneratedAttribute]
public HistorySaveStyle get_HistorySaveStyle();
    [CompilerGeneratedAttribute]
public void set_HistorySaveStyle(HistorySaveStyle value);
    [CompilerGeneratedAttribute]
public PredictionSource get_PredictionSource();
    [CompilerGeneratedAttribute]
public void set_PredictionSource(PredictionSource value);
    [CompilerGeneratedAttribute]
public PredictionViewStyle get_PredictionViewStyle();
    [CompilerGeneratedAttribute]
public void set_PredictionViewStyle(PredictionViewStyle value);
    [CompilerGeneratedAttribute]
public int get_AnsiEscapeTimeout();
    [CompilerGeneratedAttribute]
public void set_AnsiEscapeTimeout(int value);
    public String[] get_PromptText();
    public void set_PromptText(String[] value);
    public object get_DefaultTokenColor();
    public void set_DefaultTokenColor(object value);
    public object get_CommentColor();
    public void set_CommentColor(object value);
    public object get_KeywordColor();
    public void set_KeywordColor(object value);
    public object get_StringColor();
    public void set_StringColor(object value);
    public object get_OperatorColor();
    public void set_OperatorColor(object value);
    public object get_VariableColor();
    public void set_VariableColor(object value);
    public object get_CommandColor();
    public void set_CommandColor(object value);
    public object get_ParameterColor();
    public void set_ParameterColor(object value);
    public object get_TypeColor();
    public void set_TypeColor(object value);
    public object get_NumberColor();
    public void set_NumberColor(object value);
    public object get_MemberColor();
    public void set_MemberColor(object value);
    public object get_EmphasisColor();
    public void set_EmphasisColor(object value);
    public object get_ErrorColor();
    public void set_ErrorColor(object value);
    public object get_SelectionColor();
    public void set_SelectionColor(object value);
    public object get_InlinePredictionColor();
    public void set_InlinePredictionColor(object value);
    public object get_ListPredictionColor();
    public void set_ListPredictionColor(object value);
    public object get_ListPredictionSelectedColor();
    public void set_ListPredictionSelectedColor(object value);
    public object get_ListPredictionTooltipColor();
    public void set_ListPredictionTooltipColor(object value);
    [CompilerGeneratedAttribute]
public bool get_TerminateOrphanedConsoleApps();
    [CompilerGeneratedAttribute]
public void set_TerminateOrphanedConsoleApps(bool value);
    internal void ResetColors();
    internal void SetColor(string property, object value);
}
internal class Microsoft.PowerShell.PSKeyInfo : object {
    [CompilerGeneratedAttribute]
private string <KeyStr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shift>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Control>k__BackingField;
    private static ThreadLocal`1<Char[]> toUnicodeBuffer;
    private static ThreadLocal`1<Byte[]> toUnicodeStateBuffer;
    private static ThreadLocal`1<StringBuilder> keyInfoStringBuilder;
    public char KeyChar { get; }
    public string KeyStr { get; }
    public bool Shift { get; private set; }
    public bool Alt { get; private set; }
    public bool Control { get; private set; }
    private PSKeyInfo(string s);
    private static PSKeyInfo();
    internal static PSKeyInfo From(char c);
    internal static PSKeyInfo From(ConsoleKey key);
    internal static PSKeyInfo WithAlt(char c);
    internal static PSKeyInfo WithAlt(ConsoleKey key);
    internal static PSKeyInfo WithCtrl(char c);
    internal static PSKeyInfo WithCtrl(ConsoleKey key);
    internal static PSKeyInfo WithShift(ConsoleKey key);
    internal static PSKeyInfo WithShiftCtrl(ConsoleKey key);
    internal static PSKeyInfo WithCtrlAlt(char c);
    public virtual string ToString();
    public char get_KeyChar();
    [CompilerGeneratedAttribute]
public string get_KeyStr();
    [CompilerGeneratedAttribute]
public bool get_Shift();
    [CompilerGeneratedAttribute]
private void set_Shift(bool value);
    [CompilerGeneratedAttribute]
public bool get_Alt();
    [CompilerGeneratedAttribute]
private void set_Alt(bool value);
    [CompilerGeneratedAttribute]
public bool get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(bool value);
    public ConsoleKeyInfo AsConsoleKeyInfo();
    public static PSKeyInfo FromConsoleKeyInfo(ConsoleKeyInfo keyInfo);
    public sealed virtual bool Equals(PSKeyInfo other);
    public virtual bool Equals(object obj);
    internal static bool Equals(PSKeyInfo left, PSKeyInfo right);
    public static bool op_Equality(PSKeyInfo left, PSKeyInfo right);
    public static bool op_Inequality(PSKeyInfo left, PSKeyInfo right);
    public virtual int GetHashCode();
    public static UInt32 MapVirtualKey(ConsoleKey uCode, UInt32 uMapType);
    public static int ToUnicode(ConsoleKey uVirtKey, UInt32 uScanCode, Byte[] lpKeyState, Char[] chars, int charMaxCount, UInt32 flags);
    internal static void TryGetCharFromConsoleKey(ConsoleKeyInfo key, Char& result, Boolean& isDeadKey);
    private static string KeyInfoAsString(ConsoleKeyInfo key);
    [CompilerGeneratedAttribute]
internal static void <KeyInfoAsString>g__AppendPart|42_0(string str, <>c__DisplayClass42_0& );
}
public class Microsoft.PowerShell.PSReadLine.OnModuleImportAndRemove : object {
    public sealed virtual void OnImport();
    public sealed virtual void OnRemove(PSModuleInfo module);
    private static Assembly ResolveAssembly(object sender, ResolveEventArgs args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.PowerShell.PSReadLine.PSReadLineResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbortDescription { get; }
    internal static string AcceptAndGetNextDescription { get; }
    internal static string AcceptLineDescription { get; }
    internal static string AddLineDescription { get; }
    internal static string BackwardCharDescription { get; }
    internal static string BackwardDeleteCharDescription { get; }
    internal static string BackwardDeleteInputDescription { get; }
    internal static string BackwardDeleteLineDescription { get; }
    internal static string BackwardDeleteWordDescription { get; }
    internal static string BackwardKillInputDescription { get; }
    internal static string BackwardKillLineDescription { get; }
    internal static string BackwardKillWordDescription { get; }
    internal static string BackwardReplaceCharDescription { get; }
    internal static string BackwardWordDescription { get; }
    internal static string BasicGrouping { get; }
    internal static string BeginningOfHistoryDescription { get; }
    internal static string BeginningOfLineDescription { get; }
    internal static string CancelLineDescription { get; }
    internal static string CantTranslateKey { get; }
    internal static string CaptureScreenDescription { get; }
    internal static string CharacterSearchBackwardDescription { get; }
    internal static string CharacterSearchDescription { get; }
    internal static string ChordWithTooManyKeys { get; }
    internal static string ClearHistoryDescription { get; }
    internal static string ClearKillRingDescription { get; }
    internal static string ClearScreenDescription { get; }
    internal static string CommandNotFoundError { get; }
    internal static string CompleteDescription { get; }
    internal static string CompletionGrouping { get; }
    internal static string PredictionGrouping { get; }
    internal static string CopyDescription { get; }
    internal static string CopyOrCancelLineDescription { get; }
    internal static string CursorMovementGrouping { get; }
    internal static string CustomActionDescription { get; }
    internal static string CustomGrouping { get; }
    internal static string CutDescription { get; }
    internal static string DeleteCharDescription { get; }
    internal static string DeleteCharOrExitDescription { get; }
    internal static string DeleteEndOfWordDescription { get; }
    internal static string DeleteLineDescription { get; }
    internal static string DeleteLineToFirstCharDescription { get; }
    internal static string DeleteToEndDescription { get; }
    internal static string DeleteToEndOfWordDescription { get; }
    internal static string DeleteWordDescription { get; }
    internal static string DigitArgumentDescription { get; }
    internal static string DisplayAllPossibilities { get; }
    internal static string EmacsCtrlXDescription { get; }
    internal static string EmacsMetaDescription { get; }
    internal static string EndOfHistoryDescription { get; }
    internal static string EndOfLineDescription { get; }
    internal static string ExchangePointAndMarkDescription { get; }
    internal static string ForwardCharDescription { get; }
    internal static string ForwardDeleteInputDescription { get; }
    internal static string ForwardDeleteLineDescription { get; }
    internal static string ForwardSearchHistoryDescription { get; }
    internal static string ForwardWordDescription { get; }
    internal static string GotoBraceDescription { get; }
    internal static string GotoColumnDescription { get; }
    internal static string GotoFirstNonBlankOfLineDescription { get; }
    internal static string HistoryFileErrorFinalMessage { get; }
    internal static string HistoryFileErrorMessage { get; }
    internal static string HistoryGrouping { get; }
    internal static string HistorySearchBackwardDescription { get; }
    internal static string HistorySearchForwardDescription { get; }
    internal static string IgnoreDescription { get; }
    internal static string InsertCharacterDescription { get; }
    internal static string InsertLineAboveDescription { get; }
    internal static string InsertLineBelowDescription { get; }
    internal static string AcceptSuggestionDescription { get; }
    internal static string AcceptNextSuggestionWordDescription { get; }
    internal static string PredictiveSuggestionNotSupported { get; }
    internal static string PredictionPluginNotSupported { get; }
    internal static string InvalidColorProperty { get; }
    internal static string InvalidColorValue { get; }
    internal static string InvalidModifier { get; }
    internal static string InvalidSequence { get; }
    internal static string InvertCaseDescription { get; }
    internal static string InvokePromptDescription { get; }
    internal static string KeyIsUnbound { get; }
    internal static string KillLineDescription { get; }
    internal static string KillRegionDescription { get; }
    internal static string KillWordDescription { get; }
    internal static string MenuCompleteDescription { get; }
    internal static string MiscellaneousGrouping { get; }
    internal static string MoveToEndOfLineDescription { get; }
    internal static string NextHistoryDescription { get; }
    internal static string NextLineDescription { get; }
    internal static string NextWordDescription { get; }
    internal static string NextWordEndDescription { get; }
    internal static string NotInViMode { get; }
    internal static string OopsAnErrorMessage1 { get; }
    internal static string OopsAnErrorMessage2 { get; }
    internal static string OopsCustomHandlerException { get; }
    internal static string PasteAfterDescription { get; }
    internal static string PasteBeforeDescription { get; }
    internal static string PasteDescription { get; }
    internal static string PossibleCompletionsDescription { get; }
    internal static string PrependAndAcceptDescription { get; }
    internal static string PreviousHistoryDescription { get; }
    internal static string PreviousLineDescription { get; }
    internal static string RedoDescription { get; }
    internal static string RepeatLastCharSearchBackwardsDescription { get; }
    internal static string RepeatLastCharSearchDescription { get; }
    internal static string RepeatLastCommandDescription { get; }
    internal static string RepeatLastSearchDescription { get; }
    internal static string RepeatSearchBackwardDescription { get; }
    internal static string RepeatSearchDescription { get; }
    internal static string ReplaceCharDescription { get; }
    internal static string ReplaceCharInPlaceDescription { get; }
    internal static string ReplacementLengthInvalid { get; }
    internal static string ReverseSearchHistoryDescription { get; }
    internal static string RevertLineDescription { get; }
    internal static string ScrollDisplayDownDescription { get; }
    internal static string ScrollDisplayDownLineDescription { get; }
    internal static string ScrollDisplayToCursorDescription { get; }
    internal static string ScrollDisplayTopDescription { get; }
    internal static string ScrollDisplayUpDescription { get; }
    internal static string ScrollDisplayUpLineDescription { get; }
    internal static string SearchBackwardCharDescription { get; }
    internal static string SearchCharBackwardDescription { get; }
    internal static string SearchCharBackwardWithBackoffDescription { get; }
    internal static string SearchCharDescription { get; }
    internal static string SearchCharWithBackoffDescription { get; }
    internal static string SearchDescription { get; }
    internal static string SearchForwardDescription { get; }
    internal static string SearchGrouping { get; }
    internal static string SelectAllDescription { get; }
    internal static string SelectBackwardCharDescription { get; }
    internal static string SelectBackwardsLineDescription { get; }
    internal static string SelectBackwardWordDescription { get; }
    internal static string SelectForwardCharDescription { get; }
    internal static string SelectForwardWordDescription { get; }
    internal static string SelectionGrouping { get; }
    internal static string SelectLineDescription { get; }
    internal static string SelectNextWordDescription { get; }
    internal static string SelectShellBackwardWordDescription { get; }
    internal static string SelectShellForwardWordDescription { get; }
    internal static string SelectShellNextWordDescription { get; }
    internal static string SelfInsertDescription { get; }
    internal static string SetMarkDescription { get; }
    internal static string ShellBackwardKillWordDescription { get; }
    internal static string ShellBackwardWordDescription { get; }
    internal static string ShellForwardWordDescription { get; }
    internal static string ShellKillWordDescription { get; }
    internal static string ShellNextWordDescription { get; }
    internal static string ShowKeyBindingsDescription { get; }
    internal static string StartOutOfRange { get; }
    internal static string SwapCharactersDescription { get; }
    internal static string TabCompleteNextDescription { get; }
    internal static string TabCompletePreviousDescription { get; }
    internal static string UndoAllDescription { get; }
    internal static string UndoDescription { get; }
    internal static string UnixWordRuboutDescription { get; }
    internal static string UnrecognizedKey { get; }
    internal static string ValidateAndAcceptLineDescription { get; }
    internal static string ViAcceptLineDescription { get; }
    internal static string ViAcceptLineOrExitDescription { get; }
    internal static string ViAppendAtEndDescription { get; }
    internal static string ViAppendLineDescription { get; }
    internal static string ViBackwardDeleteGlobDescription { get; }
    internal static string ViBackwardGlobDescription { get; }
    internal static string ViBackwardReplaceGlobDescription { get; }
    internal static string ViBackwardReplaceLineDescription { get; }
    internal static string ViBackwardReplaceLineToFirstCharDescription { get; }
    internal static string ViBackwardReplaceWordDescription { get; }
    internal static string ViBackwardWordDescription { get; }
    internal static string ViCommandModeDescription { get; }
    internal static string ViDeleteBraceDescription { get; }
    internal static string ViDeleteEndOfGlobDescription { get; }
    internal static string ViDeleteGlobDescription { get; }
    internal static string ViDeleteToBeforeCharBackwardDescription { get; }
    internal static string ViDeleteToBeforeCharDescription { get; }
    internal static string ViDeleteToCharBackwardDescription { get; }
    internal static string ViDeleteToCharDescription { get; }
    internal static string ViDigitArgumentInChordDescription { get; }
    internal static string ViEditVisuallyDescription { get; }
    internal static string ViEndOfGlobDescription { get; }
    internal static string ViEndOfPreviousGlobDescription { get; }
    internal static string ViExitDescription { get; }
    internal static string ViGotoBraceDescription { get; }
    internal static string ViInsertAtBeginingDescription { get; }
    internal static string ViInsertAtEndDescription { get; }
    internal static string ViInsertLineDescription { get; }
    internal static string ViInsertModeDescription { get; }
    internal static string ViInsertWithAppendDescription { get; }
    internal static string ViInsertWithDeleteDescription { get; }
    internal static string ViJoinLinesDescription { get; }
    internal static string ViNextGlobDescription { get; }
    internal static string ViNextWordDescription { get; }
    internal static string ViReplaceBraceDescription { get; }
    internal static string ViReplaceEndOfGlobDescription { get; }
    internal static string ViReplaceEndOfWordDescription { get; }
    internal static string ViReplaceGlobDescription { get; }
    internal static string ViReplaceLineDescription { get; }
    internal static string ViReplaceToBeforeCharBackwardDescription { get; }
    internal static string ViReplaceToBeforeCharDescription { get; }
    internal static string ViReplaceToCharBackwardDescription { get; }
    internal static string ViReplaceToCharDescription { get; }
    internal static string ViReplaceToEndDescription { get; }
    internal static string ViReplaceUntilEscDescription { get; }
    internal static string ViReplaceWordDescription { get; }
    internal static string ViSearchHistoryBackwardDescription { get; }
    internal static string ViTabCompleteNextDescription { get; }
    internal static string ViTabCompletePreviousDescription { get; }
    internal static string ViTransposeCharsDescription { get; }
    internal static string ViYankBeginningOfLineDescription { get; }
    internal static string ViYankEndOfGlobDescription { get; }
    internal static string ViYankEndOfWordDescription { get; }
    internal static string ViYankLeftDescription { get; }
    internal static string ViYankLineDescription { get; }
    internal static string ViYankNextGlobDescription { get; }
    internal static string ViYankNextWordDescription { get; }
    internal static string ViYankPercentDescription { get; }
    internal static string ViYankPreviousGlobDescription { get; }
    internal static string ViYankPreviousWordDescription { get; }
    internal static string ViYankRightDescription { get; }
    internal static string ViYankToEndOfLineDescription { get; }
    internal static string ViYankToFirstCharDescription { get; }
    internal static string WhatIsKeyDescription { get; }
    internal static string WindowSizeTooSmallForListView { get; }
    internal static string WindowSizeTooSmallWarning { get; }
    internal static string YankDescription { get; }
    internal static string YankLastArgDescription { get; }
    internal static string YankNthArgDescription { get; }
    internal static string YankPopDescription { get; }
    internal static string NeedsUpdateHelp { get; }
    internal static string FullHelpNotSupportedInLegacyConsole { get; }
    internal static string ShowCommandHelpDescription { get; }
    internal static string ShowParameterHelpDescription { get; }
    internal static string NextSuggestionDescription { get; }
    internal static string PreviousSuggestionDescription { get; }
    internal static string SwitchPredictionViewDescription { get; }
    internal static string ShowFullPredictionTooltipDescription { get; }
    internal static string SelectCommandArgumentDescription { get; }
    internal static string FailedToConvertPointToRenderDataOffset { get; }
    internal static string CapitalizeWordDescription { get; }
    internal static string DowncaseWordDescription { get; }
    internal static string UpcaseWordDescription { get; }
    internal static string OptionNotSupportedOnNonWindows { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbortDescription();
    internal static string get_AcceptAndGetNextDescription();
    internal static string get_AcceptLineDescription();
    internal static string get_AddLineDescription();
    internal static string get_BackwardCharDescription();
    internal static string get_BackwardDeleteCharDescription();
    internal static string get_BackwardDeleteInputDescription();
    internal static string get_BackwardDeleteLineDescription();
    internal static string get_BackwardDeleteWordDescription();
    internal static string get_BackwardKillInputDescription();
    internal static string get_BackwardKillLineDescription();
    internal static string get_BackwardKillWordDescription();
    internal static string get_BackwardReplaceCharDescription();
    internal static string get_BackwardWordDescription();
    internal static string get_BasicGrouping();
    internal static string get_BeginningOfHistoryDescription();
    internal static string get_BeginningOfLineDescription();
    internal static string get_CancelLineDescription();
    internal static string get_CantTranslateKey();
    internal static string get_CaptureScreenDescription();
    internal static string get_CharacterSearchBackwardDescription();
    internal static string get_CharacterSearchDescription();
    internal static string get_ChordWithTooManyKeys();
    internal static string get_ClearHistoryDescription();
    internal static string get_ClearKillRingDescription();
    internal static string get_ClearScreenDescription();
    internal static string get_CommandNotFoundError();
    internal static string get_CompleteDescription();
    internal static string get_CompletionGrouping();
    internal static string get_PredictionGrouping();
    internal static string get_CopyDescription();
    internal static string get_CopyOrCancelLineDescription();
    internal static string get_CursorMovementGrouping();
    internal static string get_CustomActionDescription();
    internal static string get_CustomGrouping();
    internal static string get_CutDescription();
    internal static string get_DeleteCharDescription();
    internal static string get_DeleteCharOrExitDescription();
    internal static string get_DeleteEndOfWordDescription();
    internal static string get_DeleteLineDescription();
    internal static string get_DeleteLineToFirstCharDescription();
    internal static string get_DeleteToEndDescription();
    internal static string get_DeleteToEndOfWordDescription();
    internal static string get_DeleteWordDescription();
    internal static string get_DigitArgumentDescription();
    internal static string get_DisplayAllPossibilities();
    internal static string get_EmacsCtrlXDescription();
    internal static string get_EmacsMetaDescription();
    internal static string get_EndOfHistoryDescription();
    internal static string get_EndOfLineDescription();
    internal static string get_ExchangePointAndMarkDescription();
    internal static string get_ForwardCharDescription();
    internal static string get_ForwardDeleteInputDescription();
    internal static string get_ForwardDeleteLineDescription();
    internal static string get_ForwardSearchHistoryDescription();
    internal static string get_ForwardWordDescription();
    internal static string get_GotoBraceDescription();
    internal static string get_GotoColumnDescription();
    internal static string get_GotoFirstNonBlankOfLineDescription();
    internal static string get_HistoryFileErrorFinalMessage();
    internal static string get_HistoryFileErrorMessage();
    internal static string get_HistoryGrouping();
    internal static string get_HistorySearchBackwardDescription();
    internal static string get_HistorySearchForwardDescription();
    internal static string get_IgnoreDescription();
    internal static string get_InsertCharacterDescription();
    internal static string get_InsertLineAboveDescription();
    internal static string get_InsertLineBelowDescription();
    internal static string get_AcceptSuggestionDescription();
    internal static string get_AcceptNextSuggestionWordDescription();
    internal static string get_PredictiveSuggestionNotSupported();
    internal static string get_PredictionPluginNotSupported();
    internal static string get_InvalidColorProperty();
    internal static string get_InvalidColorValue();
    internal static string get_InvalidModifier();
    internal static string get_InvalidSequence();
    internal static string get_InvertCaseDescription();
    internal static string get_InvokePromptDescription();
    internal static string get_KeyIsUnbound();
    internal static string get_KillLineDescription();
    internal static string get_KillRegionDescription();
    internal static string get_KillWordDescription();
    internal static string get_MenuCompleteDescription();
    internal static string get_MiscellaneousGrouping();
    internal static string get_MoveToEndOfLineDescription();
    internal static string get_NextHistoryDescription();
    internal static string get_NextLineDescription();
    internal static string get_NextWordDescription();
    internal static string get_NextWordEndDescription();
    internal static string get_NotInViMode();
    internal static string get_OopsAnErrorMessage1();
    internal static string get_OopsAnErrorMessage2();
    internal static string get_OopsCustomHandlerException();
    internal static string get_PasteAfterDescription();
    internal static string get_PasteBeforeDescription();
    internal static string get_PasteDescription();
    internal static string get_PossibleCompletionsDescription();
    internal static string get_PrependAndAcceptDescription();
    internal static string get_PreviousHistoryDescription();
    internal static string get_PreviousLineDescription();
    internal static string get_RedoDescription();
    internal static string get_RepeatLastCharSearchBackwardsDescription();
    internal static string get_RepeatLastCharSearchDescription();
    internal static string get_RepeatLastCommandDescription();
    internal static string get_RepeatLastSearchDescription();
    internal static string get_RepeatSearchBackwardDescription();
    internal static string get_RepeatSearchDescription();
    internal static string get_ReplaceCharDescription();
    internal static string get_ReplaceCharInPlaceDescription();
    internal static string get_ReplacementLengthInvalid();
    internal static string get_ReverseSearchHistoryDescription();
    internal static string get_RevertLineDescription();
    internal static string get_ScrollDisplayDownDescription();
    internal static string get_ScrollDisplayDownLineDescription();
    internal static string get_ScrollDisplayToCursorDescription();
    internal static string get_ScrollDisplayTopDescription();
    internal static string get_ScrollDisplayUpDescription();
    internal static string get_ScrollDisplayUpLineDescription();
    internal static string get_SearchBackwardCharDescription();
    internal static string get_SearchCharBackwardDescription();
    internal static string get_SearchCharBackwardWithBackoffDescription();
    internal static string get_SearchCharDescription();
    internal static string get_SearchCharWithBackoffDescription();
    internal static string get_SearchDescription();
    internal static string get_SearchForwardDescription();
    internal static string get_SearchGrouping();
    internal static string get_SelectAllDescription();
    internal static string get_SelectBackwardCharDescription();
    internal static string get_SelectBackwardsLineDescription();
    internal static string get_SelectBackwardWordDescription();
    internal static string get_SelectForwardCharDescription();
    internal static string get_SelectForwardWordDescription();
    internal static string get_SelectionGrouping();
    internal static string get_SelectLineDescription();
    internal static string get_SelectNextWordDescription();
    internal static string get_SelectShellBackwardWordDescription();
    internal static string get_SelectShellForwardWordDescription();
    internal static string get_SelectShellNextWordDescription();
    internal static string get_SelfInsertDescription();
    internal static string get_SetMarkDescription();
    internal static string get_ShellBackwardKillWordDescription();
    internal static string get_ShellBackwardWordDescription();
    internal static string get_ShellForwardWordDescription();
    internal static string get_ShellKillWordDescription();
    internal static string get_ShellNextWordDescription();
    internal static string get_ShowKeyBindingsDescription();
    internal static string get_StartOutOfRange();
    internal static string get_SwapCharactersDescription();
    internal static string get_TabCompleteNextDescription();
    internal static string get_TabCompletePreviousDescription();
    internal static string get_UndoAllDescription();
    internal static string get_UndoDescription();
    internal static string get_UnixWordRuboutDescription();
    internal static string get_UnrecognizedKey();
    internal static string get_ValidateAndAcceptLineDescription();
    internal static string get_ViAcceptLineDescription();
    internal static string get_ViAcceptLineOrExitDescription();
    internal static string get_ViAppendAtEndDescription();
    internal static string get_ViAppendLineDescription();
    internal static string get_ViBackwardDeleteGlobDescription();
    internal static string get_ViBackwardGlobDescription();
    internal static string get_ViBackwardReplaceGlobDescription();
    internal static string get_ViBackwardReplaceLineDescription();
    internal static string get_ViBackwardReplaceLineToFirstCharDescription();
    internal static string get_ViBackwardReplaceWordDescription();
    internal static string get_ViBackwardWordDescription();
    internal static string get_ViCommandModeDescription();
    internal static string get_ViDeleteBraceDescription();
    internal static string get_ViDeleteEndOfGlobDescription();
    internal static string get_ViDeleteGlobDescription();
    internal static string get_ViDeleteToBeforeCharBackwardDescription();
    internal static string get_ViDeleteToBeforeCharDescription();
    internal static string get_ViDeleteToCharBackwardDescription();
    internal static string get_ViDeleteToCharDescription();
    internal static string get_ViDigitArgumentInChordDescription();
    internal static string get_ViEditVisuallyDescription();
    internal static string get_ViEndOfGlobDescription();
    internal static string get_ViEndOfPreviousGlobDescription();
    internal static string get_ViExitDescription();
    internal static string get_ViGotoBraceDescription();
    internal static string get_ViInsertAtBeginingDescription();
    internal static string get_ViInsertAtEndDescription();
    internal static string get_ViInsertLineDescription();
    internal static string get_ViInsertModeDescription();
    internal static string get_ViInsertWithAppendDescription();
    internal static string get_ViInsertWithDeleteDescription();
    internal static string get_ViJoinLinesDescription();
    internal static string get_ViNextGlobDescription();
    internal static string get_ViNextWordDescription();
    internal static string get_ViReplaceBraceDescription();
    internal static string get_ViReplaceEndOfGlobDescription();
    internal static string get_ViReplaceEndOfWordDescription();
    internal static string get_ViReplaceGlobDescription();
    internal static string get_ViReplaceLineDescription();
    internal static string get_ViReplaceToBeforeCharBackwardDescription();
    internal static string get_ViReplaceToBeforeCharDescription();
    internal static string get_ViReplaceToCharBackwardDescription();
    internal static string get_ViReplaceToCharDescription();
    internal static string get_ViReplaceToEndDescription();
    internal static string get_ViReplaceUntilEscDescription();
    internal static string get_ViReplaceWordDescription();
    internal static string get_ViSearchHistoryBackwardDescription();
    internal static string get_ViTabCompleteNextDescription();
    internal static string get_ViTabCompletePreviousDescription();
    internal static string get_ViTransposeCharsDescription();
    internal static string get_ViYankBeginningOfLineDescription();
    internal static string get_ViYankEndOfGlobDescription();
    internal static string get_ViYankEndOfWordDescription();
    internal static string get_ViYankLeftDescription();
    internal static string get_ViYankLineDescription();
    internal static string get_ViYankNextGlobDescription();
    internal static string get_ViYankNextWordDescription();
    internal static string get_ViYankPercentDescription();
    internal static string get_ViYankPreviousGlobDescription();
    internal static string get_ViYankPreviousWordDescription();
    internal static string get_ViYankRightDescription();
    internal static string get_ViYankToEndOfLineDescription();
    internal static string get_ViYankToFirstCharDescription();
    internal static string get_WhatIsKeyDescription();
    internal static string get_WindowSizeTooSmallForListView();
    internal static string get_WindowSizeTooSmallWarning();
    internal static string get_YankDescription();
    internal static string get_YankLastArgDescription();
    internal static string get_YankNthArgDescription();
    internal static string get_YankPopDescription();
    internal static string get_NeedsUpdateHelp();
    internal static string get_FullHelpNotSupportedInLegacyConsole();
    internal static string get_ShowCommandHelpDescription();
    internal static string get_ShowParameterHelpDescription();
    internal static string get_NextSuggestionDescription();
    internal static string get_PreviousSuggestionDescription();
    internal static string get_SwitchPredictionViewDescription();
    internal static string get_ShowFullPredictionTooltipDescription();
    internal static string get_SelectCommandArgumentDescription();
    internal static string get_FailedToConvertPointToRenderDataOffset();
    internal static string get_CapitalizeWordDescription();
    internal static string get_DowncaseWordDescription();
    internal static string get_UpcaseWordDescription();
    internal static string get_OptionNotSupportedOnNonWindows();
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.PowerShell.QueueDebugView`1 : object {
    private HistoryQueue`1<T> _queue;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public QueueDebugView`1(HistoryQueue`1<T> queue);
    public T[] get_Items();
}
internal class Microsoft.PowerShell.Range : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    internal int Offset { get; }
    internal int Count { get; }
    internal Range(int offset, int count);
    [CompilerGeneratedAttribute]
internal int get_Offset();
    [CompilerGeneratedAttribute]
internal int get_Count();
}
[CmdletAttribute("Remove", "PSReadLineKeyHandler")]
public class Microsoft.PowerShell.RemoveKeyHandlerCommand : ChangePSReadLineKeyHandlerCommandBase {
    [ExcludeFromCodeCoverageAttribute]
protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.RenderData : object {
    public int bufferWidth;
    public int bufferHeight;
    public int cursorLeft;
    public int cursorTop;
    public int initialY;
    public bool errorPrompt;
    public RenderedLineData[] lines;
    public void UpdateConsoleInfo(IConsole console);
}
[IsReadOnlyAttribute]
internal class Microsoft.PowerShell.RenderDataOffset : ValueType {
    public int LogicalLineIndex;
    public int VisibleCharIndex;
    public RenderDataOffset(int logicalLineIndex, int visibleCharIndex);
}
internal class Microsoft.PowerShell.RenderedLineData : object {
    public string Line;
    private bool _isFirstLogicalLine;
    private int _physicalLineCount;
    private int _lengthOfLastPhsicalLine;
    private int _bufferWidth;
    private int _initialX;
    public RenderedLineData(string line, bool isFirstLogicalLine);
    public int PhysicalLineCount(int bufferWidth, int initialX, Int32& lenLastPhysicalLine);
}
internal static class Microsoft.PowerShell.ScreenCapture : object {
    internal static string CmdColorTable;
    internal static string PowerShellColorTable;
    private static bool WriteConsoleOutput(IntPtr consoleOutput, CHAR_INFO[] buffer, COORD bufferSize, COORD bufferCoord, SMALL_RECT& writeRegion);
    private static bool ReadConsoleOutput(IntPtr consoleOutput, CHAR_INFO[] buffer, COORD bufferSize, COORD bufferCoord, SMALL_RECT& readRegion);
    private static bool GetConsoleScreenBufferInfoEx(IntPtr hConsoleOutput, CONSOLE_SCREEN_BUFFER_INFO_EX& csbe);
    internal static CHAR_INFO[] ReadBufferLines(int top, int count, int bufferWidth);
    internal static void WriteBufferLines(CHAR_INFO[] buffer, int top, IConsole console);
    internal static void InvertLines(int start, int count, IConsole console);
    private static string GetRTFColorFromColorRef(COLORREF colorref);
    internal static string GetColorTable(IConsole console);
    internal static void DumpScreenToClipboard(int top, int count, IConsole console);
}
[CmdletAttribute("Set", "PSReadLineKeyHandler")]
public class Microsoft.PowerShell.SetPSReadLineKeyHandlerCommand : ChangePSReadLineKeyHandlerCommandBase {
    [CompilerGeneratedAttribute]
private ScriptBlock <ScriptBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BriefDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    private static string FunctionParameter;
    private static string FunctionParameterSet;
    private Lazy`1<RuntimeDefinedParameterDictionary> _dynamicParameters;
    [ParameterAttribute]
[ValidateNotNullAttribute]
public ScriptBlock ScriptBlock { get; public set; }
    [ParameterAttribute]
public string BriefDescription { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public ScriptBlock get_ScriptBlock();
    [CompilerGeneratedAttribute]
public void set_ScriptBlock(ScriptBlock value);
    [CompilerGeneratedAttribute]
public string get_BriefDescription();
    [CompilerGeneratedAttribute]
public void set_BriefDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [ExcludeFromCodeCoverageAttribute]
protected virtual void EndProcessing();
    private static RuntimeDefinedParameterDictionary CreateDynamicParametersResult();
    public sealed virtual object GetDynamicParameters();
}
[CmdletAttribute("Set", "PSReadLineOption")]
public class Microsoft.PowerShell.SetPSReadLineOption : PSCmdlet {
    internal Nullable`1<EditMode> _editMode;
    [CompilerGeneratedAttribute]
private string <ContinuationPrompt>k__BackingField;
    internal Nullable`1<SwitchParameter> _historyNoDuplicates;
    private Func`2<string, object> _addToHistoryHandler;
    internal bool _addToHistoryHandlerSpecified;
    private Action`1<CommandAst> _commandValidationHandler;
    internal bool _commandValidationHandlerSpecified;
    internal Nullable`1<SwitchParameter> _historySearchCursorMovesToEnd;
    internal Nullable`1<int> _maximumHistoryCount;
    internal Nullable`1<int> _maximumKillRingCount;
    internal Nullable`1<SwitchParameter> _showToolTips;
    internal Nullable`1<int> _extraPromptLineCount;
    internal Nullable`1<int> _dingTone;
    internal Nullable`1<int> _dingDuration;
    internal Nullable`1<BellStyle> _bellStyle;
    internal Nullable`1<int> _completionQueryItems;
    [CompilerGeneratedAttribute]
private string <WordDelimiters>k__BackingField;
    internal Nullable`1<SwitchParameter> _historySearchCaseSensitive;
    internal Nullable`1<HistorySaveStyle> _historySaveStyle;
    private string _historySavePath;
    internal Nullable`1<int> _ansiEscapeTimeout;
    [CompilerGeneratedAttribute]
private String[] <PromptText>k__BackingField;
    internal Nullable`1<ViModeStyle> _viModeIndicator;
    [CompilerGeneratedAttribute]
private ScriptBlock <ViModeChangeHandler>k__BackingField;
    internal Nullable`1<PredictionSource> _predictionSource;
    internal Nullable`1<PredictionViewStyle> _predictionViewStyle;
    [CompilerGeneratedAttribute]
private Hashtable <Colors>k__BackingField;
    internal Nullable`1<SwitchParameter> _terminateOrphanedConsoleApps;
    [ParameterAttribute]
public EditMode EditMode { get; public set; }
    [ParameterAttribute]
[AllowEmptyStringAttribute]
public string ContinuationPrompt { get; public set; }
    [ParameterAttribute]
public SwitchParameter HistoryNoDuplicates { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public Func`2<string, object> AddToHistoryHandler { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public Action`1<CommandAst> CommandValidationHandler { get; public set; }
    [ParameterAttribute]
public SwitchParameter HistorySearchCursorMovesToEnd { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int MaximumHistoryCount { get; public set; }
    [ParameterAttribute]
public int MaximumKillRingCount { get; public set; }
    [ParameterAttribute]
public SwitchParameter ShowToolTips { get; public set; }
    [ParameterAttribute]
public int ExtraPromptLineCount { get; public set; }
    [ParameterAttribute]
public int DingTone { get; public set; }
    [ParameterAttribute]
public int DingDuration { get; public set; }
    [ParameterAttribute]
public BellStyle BellStyle { get; public set; }
    [ParameterAttribute]
public int CompletionQueryItems { get; public set; }
    [ParameterAttribute]
public string WordDelimiters { get; public set; }
    [ParameterAttribute]
public SwitchParameter HistorySearchCaseSensitive { get; public set; }
    [ParameterAttribute]
public HistorySaveStyle HistorySaveStyle { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string HistorySavePath { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int AnsiEscapeTimeout { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public String[] PromptText { get; public set; }
    [ParameterAttribute]
public ViModeStyle ViModeIndicator { get; public set; }
    [ParameterAttribute]
public ScriptBlock ViModeChangeHandler { get; public set; }
    [ParameterAttribute]
public PredictionSource PredictionSource { get; public set; }
    [ParameterAttribute]
public PredictionViewStyle PredictionViewStyle { get; public set; }
    [ParameterAttribute]
public Hashtable Colors { get; public set; }
    [ParameterAttribute]
public SwitchParameter TerminateOrphanedConsoleApps { get; public set; }
    public EditMode get_EditMode();
    public void set_EditMode(EditMode value);
    [CompilerGeneratedAttribute]
public string get_ContinuationPrompt();
    [CompilerGeneratedAttribute]
public void set_ContinuationPrompt(string value);
    public SwitchParameter get_HistoryNoDuplicates();
    public void set_HistoryNoDuplicates(SwitchParameter value);
    public Func`2<string, object> get_AddToHistoryHandler();
    public void set_AddToHistoryHandler(Func`2<string, object> value);
    public Action`1<CommandAst> get_CommandValidationHandler();
    public void set_CommandValidationHandler(Action`1<CommandAst> value);
    public SwitchParameter get_HistorySearchCursorMovesToEnd();
    public void set_HistorySearchCursorMovesToEnd(SwitchParameter value);
    public int get_MaximumHistoryCount();
    public void set_MaximumHistoryCount(int value);
    public int get_MaximumKillRingCount();
    public void set_MaximumKillRingCount(int value);
    public SwitchParameter get_ShowToolTips();
    public void set_ShowToolTips(SwitchParameter value);
    public int get_ExtraPromptLineCount();
    public void set_ExtraPromptLineCount(int value);
    public int get_DingTone();
    public void set_DingTone(int value);
    public int get_DingDuration();
    public void set_DingDuration(int value);
    public BellStyle get_BellStyle();
    public void set_BellStyle(BellStyle value);
    public int get_CompletionQueryItems();
    public void set_CompletionQueryItems(int value);
    [CompilerGeneratedAttribute]
public string get_WordDelimiters();
    [CompilerGeneratedAttribute]
public void set_WordDelimiters(string value);
    public SwitchParameter get_HistorySearchCaseSensitive();
    public void set_HistorySearchCaseSensitive(SwitchParameter value);
    public HistorySaveStyle get_HistorySaveStyle();
    public void set_HistorySaveStyle(HistorySaveStyle value);
    public string get_HistorySavePath();
    public void set_HistorySavePath(string value);
    public int get_AnsiEscapeTimeout();
    public void set_AnsiEscapeTimeout(int value);
    [CompilerGeneratedAttribute]
public String[] get_PromptText();
    [CompilerGeneratedAttribute]
public void set_PromptText(String[] value);
    public ViModeStyle get_ViModeIndicator();
    public void set_ViModeIndicator(ViModeStyle value);
    [CompilerGeneratedAttribute]
public ScriptBlock get_ViModeChangeHandler();
    [CompilerGeneratedAttribute]
public void set_ViModeChangeHandler(ScriptBlock value);
    public PredictionSource get_PredictionSource();
    public void set_PredictionSource(PredictionSource value);
    public PredictionViewStyle get_PredictionViewStyle();
    public void set_PredictionViewStyle(PredictionViewStyle value);
    [CompilerGeneratedAttribute]
public Hashtable get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(Hashtable value);
    public SwitchParameter get_TerminateOrphanedConsoleApps();
    public void set_TerminateOrphanedConsoleApps(SwitchParameter value);
    [ExcludeFromCodeCoverageAttribute]
protected virtual void EndProcessing();
}
[ExtensionAttribute]
internal static class Microsoft.PowerShell.StringBuilderCharacterExtensions : object {
    [ExtensionAttribute]
public static bool IsVisibleBlank(StringBuilder buffer, int i);
    [ExtensionAttribute]
public static bool InWord(StringBuilder buffer, int i, string wordDelimiters);
    [ExtensionAttribute]
public static bool IsAtEndOfBuffer(StringBuilder buffer, int i);
    [ExtensionAttribute]
public static bool IsWhiteSpace(StringBuilder buffer, int i);
}
[ExtensionAttribute]
internal static class Microsoft.PowerShell.StringBuilderLinewiseExtensions : object {
    [ExtensionAttribute]
internal static Range GetRange(StringBuilder buffer, int lineIndex, int lineCount);
    [ExtensionAttribute]
public static bool IsLogigalLineEmpty(StringBuilder buffer, int cursor);
}
[ExtensionAttribute]
internal static class Microsoft.PowerShell.StringBuilderPredictionExtensions : object {
    [ExtensionAttribute]
internal static StringBuilder EndColorSection(StringBuilder buffer, string selectionHighlighting);
}
[ExtensionAttribute]
internal static class Microsoft.PowerShell.StringBuilderTextObjectExtensions : object {
    private static string WhiteSpace;
    [ExtensionAttribute]
public static int ViFindBeginningOfWordObjectBoundary(StringBuilder buffer, int position, string wordDelimiters);
    [ExtensionAttribute]
public static int ViFindBeginningOfNextWordObjectBoundary(StringBuilder buffer, int position, string wordDelimiters);
}
public enum Microsoft.PowerShell.ViMode : Enum {
    public int value__;
    public static ViMode Insert;
    public static ViMode Command;
}
public enum Microsoft.PowerShell.ViModeStyle : Enum {
    public int value__;
    public static ViModeStyle None;
    public static ViModeStyle Prompt;
    public static ViModeStyle Cursor;
    public static ViModeStyle Script;
}
public static class Microsoft.PowerShell.VTColorUtils : object {
    internal static string AnsiReset;
    internal static string DefaultForeground;
    internal static string DefaultBackground;
    internal static string DefaultColor;
    public static ConsoleColor UnknownColor;
    private static Dictionary`2<string, ConsoleColor> ConsoleColors;
    private static String[] BackgroundColorMap;
    private static String[] ForegroundColorMap;
    private static VTColorUtils();
    public static bool IsValidColor(object o);
    public static string AsEscapeSequence(object o);
    public static string AsEscapeSequence(object o, bool isBackground);
    public static string AsEscapeSequence(ConsoleColor fg, ConsoleColor bg);
    internal static string MapColorToEscapeSequence(ConsoleColor color, bool isBackground);
    public static string FormatEscape(string esc);
    public static string FormatColor(object seq);
    [CompilerGeneratedAttribute]
internal static string <AsEscapeSequence>g__ExtractCode|9_0(string s);
}
internal class Microsoft.PowerShell.WindowsAnsiCharMap : object {
    private List`1<ConsoleKeyInfo> _pendingKeys;
    private Stopwatch _escTimeoutStopwatch;
    private int _addKeyIndex;
    private int _readKeyIndexFrom;
    private int _readKeyIndexTo;
    [CompilerGeneratedAttribute]
private long <EscapeTimeout>k__BackingField;
    private static Char[] _escOOrBracket1Chars;
    private static Char[] _escBracketChars;
    private static ConsoleKey[] _escBracketConsoleKeys;
    private static ConsoleModifiers[] _escBracketModifiers;
    public long EscapeTimeout { get; public set; }
    public bool KeyAvailable { get; }
    public bool InEscapeSequence { get; }
    public WindowsAnsiCharMap(long escapeTimeout);
    private static WindowsAnsiCharMap();
    [CompilerGeneratedAttribute]
public sealed virtual long get_EscapeTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EscapeTimeout(long value);
    public sealed virtual bool get_KeyAvailable();
    public sealed virtual bool get_InEscapeSequence();
    public sealed virtual ConsoleKeyInfo ReadKey();
    public sealed virtual void ProcessKey(ConsoleKeyInfo key);
    private void CondenseState();
    public void SetKey(int index, ConsoleKeyInfo key);
    private void ProcessSingleKey(ConsoleKeyInfo key);
    private void ProcessControlKey(int i, char ch);
    private char GetSeqChar(int i);
    private bool ProcessAltSequence();
    private void ProcessMultipleKeys();
    private bool ProcessSequencePart();
    private bool ProcessBracket1Sequence();
    private bool ProcessBracketNTildeSequence();
}
internal static class PlatformWindows : object {
    internal static int FILE_TYPE_CHAR;
    internal static IntPtr INVALID_HANDLE_VALUE;
    private static PSConsoleReadLine _singleton;
    private static UInt32 ENABLE_PROCESSED_INPUT;
    private static UInt32 ENABLE_LINE_INPUT;
    private static UInt32 ENABLE_WINDOW_INPUT;
    private static UInt32 ENABLE_MOUSE_INPUT;
    private static UInt32 ENABLE_VIRTUAL_TERMINAL_INPUT;
    private static UInt32 ENABLE_VIRTUAL_TERMINAL_PROCESSING;
    private static UInt32 _prePSReadLineConsoleInputMode;
    private static bool _enableVtInput;
    private static bool _enableVtOutput;
    private static Lazy`1<SafeFileHandle> _inputHandle;
    private static Lazy`1<SafeFileHandle> _outputHandle;
    internal static UInt32 SPI_GETSCREENREADER;
    internal static int InvalidProcessId;
    private static UInt32[] _allowedPids;
    private static Lazy`1<UInt32> _myPid;
    private static int DefaultGraceMillis;
    private static int MaxRounds;
    private static PlatformWindows();
    public static IntPtr CreateFile(string fileName, UInt32 desiredAccess, UInt32 ShareModes, IntPtr securityAttributes, UInt32 creationDisposition, UInt32 flagsAndAttributes, IntPtr templateFileWin32Handle);
    internal static int GetFileType(IntPtr handle);
    internal static IntPtr GetStdHandle(UInt32 handleId);
    private static bool SetConsoleCtrlHandler(BreakHandler handlerRoutine, bool add);
    private static bool OnBreak(ConsoleBreakSignal signal);
    private static bool GetCurrentConsoleFontEx(IntPtr consoleOutput, bool bMaximumWindow, CONSOLE_FONT_INFO_EX& consoleFontInfo);
    internal static bool IsUsingRasterFont();
    internal static IConsole OneTimeInit(PSConsoleReadLine singleton);
    internal static void Init(ICharMap& charMap);
    internal static void SetOurInputMode();
    private static void EnableAnsiInput(ICharMap& charMap);
    internal static void Complete();
    internal static T CallPossibleExternalApplication(Func`1<T> func);
    internal static void CallUsingOurInputMode(Action a);
    private static SafeFileHandle OpenConsoleHandle(string name);
    private static bool GetConsoleMode(IntPtr hConsole, UInt32& dwMode);
    private static UInt32 GetConsoleInputMode();
    private static UInt32 GetConsoleOutputMode();
    private static bool SetConsoleMode(IntPtr hConsole, UInt32 dwMode);
    private static void SetConsoleInputMode(UInt32 mode);
    private static bool SetConsoleOutputVirtualTerminalProcessing();
    internal static bool IsConsoleInput();
    private static bool IsHandleRedirected(bool stdin);
    public static bool IsConsoleApiAvailable(bool input, bool output);
    internal static bool SystemParametersInfo(UInt32 uiAction, UInt32 uiParam, Boolean& pvParam, UInt32 fWinIni);
    internal static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, PROCESS_BASIC_INFORMATION& processInformation, int processInformationLength, Int32& returnLength);
    internal static int GetParentPid(Process process);
    private static UInt32 native_GetConsoleProcessList(UInt32[] lpdwProcessList, UInt32 dwProcessCount);
    private static UInt32[] GetConsoleProcessList();
    internal static void SetTerminateOrphanedConsoleApps(bool enabled);
    private static bool ItLooksLikeWeAreInTerminal();
    private static IntPtr GetConsoleWindow();
    private static int GatherStragglers(List`1<Process> procsToTerminate);
    internal static ulong GetTickCount64();
    private static int MillisLeftUntilDeadline(ulong deadline);
    private static void TerminateStragglers();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
