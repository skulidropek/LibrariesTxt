internal class Microsoft.PackageManagement.NuGetProvider.CatalogUrlConverter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual string Make(object jsonObject);
    public sealed virtual string Make(object jsonObject, string existingObject);
    public sealed virtual string Make(object jsonObject, object args);
}
internal class Microsoft.PackageManagement.NuGetProvider.ConcurrentInMemoryCache : object {
    private static ConcurrentInMemoryCache instance;
    private Dictionary`2<string, object> cache;
    public static ConcurrentInMemoryCache Instance { get; }
    private static ConcurrentInMemoryCache();
    public static ConcurrentInMemoryCache get_Instance();
    public T GetOrAdd(string key, Func`1<T> constructor);
    public bool TryGet(string key, T& val);
}
internal static class Microsoft.PackageManagement.NuGetProvider.Constants : object {
    internal static string MinVersion;
    internal static string MSGPrefix;
    internal static string Download;
    internal static string Install;
    public static String[] FeaturePresent;
    internal static string CurrentUser;
    internal static string AllUsers;
    internal static string SearchPageCount;
    internal static int SearchPageCountInt;
    internal static string PackageIdTemplateParameter;
    internal static string PackageVersionTemplateParameter;
    internal static string PackageIdLowerTemplateParameter;
    internal static string PackageVersionLowerTemplateParameter;
    internal static string PackageIdQueryParam;
    internal static string PrereleaseQueryParam;
    internal static string QueryQueryParam;
    internal static string TakeQueryParam;
    internal static string SkipQueryParam;
    internal static string NuGetDownloadUriTemplate;
    internal static Regex MyGetFeedRegex;
    internal static string MyGetGalleryUriTemplate;
    internal static string NuGetGalleryUriTemplate;
    internal static string DummyPackageId;
    internal static string PackageServiceType;
    internal static string PackageVersionServiceType;
    internal static string RegistrationBaseServiceType;
    internal static string SearchQueryServiceType;
    internal static string PackageBaseAddressType;
    internal static string ReportAbuseAddressType;
    internal static string AutocompleteAddressType;
    internal static string TagQueryParam;
    internal static string DescriptionQueryParam;
    internal static string NuGetOrgHost;
    internal static string MyGetOrgHost;
    internal static string XmlStartContent;
    internal static string NuGetRegistrationUrlTemplatePackage;
    internal static string NuGetRegistrationUrlTemplatePackageVersion;
    internal static string SemVerLevelQueryParam;
    internal static string SemVerLevel2;
    internal static string VersionIndexTemplate;
    internal static int DefaultRetryCount;
    internal static Func`2<int, int> SimpleBackoffStrategy;
    internal static int DefaultExtraPackageCount;
    private static Constants();
}
internal class Microsoft.PackageManagement.NuGetProvider.DependencyGroupConverter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual PackageDependencySet Make(object jsonObject);
    public sealed virtual PackageDependencySet Make(object jsonObject, PackageDependencySet existingObject);
    public sealed virtual PackageDependencySet Make(object jsonObject, object args);
}
public class Microsoft.PackageManagement.NuGetProvider.DynamicJsonParser : object {
    private static object psCreateLock;
    private static PowerShell powershell;
    private static PowerShell PowerShellInstance { get; }
    private static DynamicJsonParser();
    private static PowerShell get_PowerShellInstance();
    private static PowerShell Init();
    public static object Parse(string json, string numericalPrefix, bool lowercaseProperties);
    public static string Serialize(object obj, string numericalPrefix);
    private static object GetDynamic(PSObject obj, string numericalPrefix, bool lowercaseProperties);
    private static object ConvertObject(object o);
    private static Dictionary`2<string, object> FlattenDynamic(object obj, string numericalPrefix, int currentFlattenDepth, Int32& maxFlattenDepth);
    private static void FlattenDepthCheck(int currentFlattenDepth, Int32& maxFlattenDepth);
    private static object FlattenObject(object o, string numericalPrefix, int currentFlattenDepth, Int32& maxFlattenDepth);
}
public enum Microsoft.PackageManagement.NuGetProvider.ErrorCategory : Enum {
    public int value__;
    public static ErrorCategory NotSpecified;
    public static ErrorCategory OpenError;
    public static ErrorCategory CloseError;
    public static ErrorCategory DeviceError;
    public static ErrorCategory DeadlockDetected;
    public static ErrorCategory InvalidArgument;
    public static ErrorCategory InvalidData;
    public static ErrorCategory InvalidOperation;
    public static ErrorCategory InvalidResult;
    public static ErrorCategory InvalidType;
    public static ErrorCategory MetadataError;
    public static ErrorCategory NotImplemented;
    public static ErrorCategory NotInstalled;
    public static ErrorCategory ObjectNotFound;
    public static ErrorCategory OperationStopped;
    public static ErrorCategory OperationTimeout;
    public static ErrorCategory SyntaxError;
    public static ErrorCategory ParserError;
    public static ErrorCategory PermissionDenied;
    public static ErrorCategory ResourceBusy;
    public static ErrorCategory ResourceExists;
    public static ErrorCategory ResourceUnavailable;
    public static ErrorCategory ReadError;
    public static ErrorCategory WriteError;
    public static ErrorCategory FromStdErr;
    public static ErrorCategory SecurityError;
    public static ErrorCategory ProtocolError;
    public static ErrorCategory ConnectionError;
    public static ErrorCategory AuthenticationError;
    public static ErrorCategory LimitsExceeded;
    public static ErrorCategory QuotaExceeded;
    public static ErrorCategory NotEnabled;
}
[ExtensionAttribute]
internal static class Microsoft.PackageManagement.NuGetProvider.ExceptionExtensions : object {
    [ExtensionAttribute]
internal static void Dump(Exception ex, NuGetRequest request);
}
public class Microsoft.PackageManagement.NuGetProvider.HttpQueryBuilder : object {
    private StringBuilder sb;
    private bool appendAmpersand;
    private HttpQueryBuilder innerQueryBuilder;
    public HttpQueryBuilder Add(string name, string val, string separator, bool encode);
    public HttpQueryBuilder CloneAdd(string name, string val, string separator);
    public string ToQueryString();
    public string AddQueryString(string baseUrl);
}
public interface Microsoft.PackageManagement.NuGetProvider.IDynamicJsonObjectConverter`2 {
    public abstract virtual T Make(object jsonObject);
    public abstract virtual T Make(object jsonObject, A args);
    public abstract virtual T Make(object jsonObject, T existingObject);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetAbuseFeed {
    public abstract virtual string MakeAbuseUri(string packageId, string packageVersion);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetAutoCompleteFeed {
    public abstract virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, NuGetRequest request);
    public abstract virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, RequestWrapper networkAccess, bool allowPrerelease);
    public abstract virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, RequestWrapper networkAccess, WildcardPattern acceptedPattern, bool allowPrerelease);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetFeed {
    public abstract virtual bool IsAvailable(RequestWrapper request);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetFilesFeed {
    public abstract virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public abstract virtual bool DownloadPackage(PublicObjectView packageView, string destination, RequestWrapper request);
    public abstract virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
    public abstract virtual bool InstallPackage(PublicObjectView packageView, RequestWrapper request);
    public abstract virtual string MakeDownloadUri(PackageBase package);
    public abstract virtual PackageEntryInfo GetVersionInfo(PackageEntryInfo packageInfo, RequestWrapper request);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetGalleryFeed {
    public abstract virtual string MakeGalleryUri(string packageId, string packageVersion);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetPackageFeed {
    public abstract virtual NuGetSearchResult Find(NuGetSearchContext findContext, NuGetRequest request);
    public abstract virtual NuGetSearchResult Find(NuGetSearchContext findContext, RequestWrapper request);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetQueryFeed {
    public abstract virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest nugetRequest);
    public abstract virtual NuGetSearchResult Search(NuGetSearchContext searchContext, RequestWrapper request);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetResource {
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public abstract virtual INuGetResourceCollection get_ResourcesCollection();
    public abstract virtual void set_ResourcesCollection(INuGetResourceCollection value);
}
public interface Microsoft.PackageManagement.NuGetProvider.INuGetResourceCollection {
    public INuGetPackageFeed PackagesFeed { get; }
    public INuGetQueryFeed QueryFeed { get; }
    public INuGetFilesFeed FilesFeed { get; }
    public INuGetAbuseFeed AbuseFeed { get; }
    public INuGetGalleryFeed GalleryFeed { get; }
    public INuGetAutoCompleteFeed AutoCompleteFeed { get; }
    public Func`2<IEnumerable`1<NuGetSearchTerm>, string> GetSearchQueryDelegate { get; }
    public IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> PackageConverter { get; }
    public IDynamicJsonObjectConverter`2<string, object> CatalogUrlConverter { get; }
    public IDynamicJsonObjectConverter`2<PackageDependency, object> PackageDependencyConverter { get; }
    public IDynamicJsonObjectConverter`2<PackageDependencySet, object> PackageDependencySetConverter { get; }
    public abstract virtual INuGetPackageFeed get_PackagesFeed();
    public abstract virtual INuGetQueryFeed get_QueryFeed();
    public abstract virtual INuGetFilesFeed get_FilesFeed();
    public abstract virtual INuGetAbuseFeed get_AbuseFeed();
    public abstract virtual INuGetGalleryFeed get_GalleryFeed();
    public abstract virtual INuGetAutoCompleteFeed get_AutoCompleteFeed();
    public abstract virtual Func`2<IEnumerable`1<NuGetSearchTerm>, string> get_GetSearchQueryDelegate();
    public abstract virtual IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> get_PackageConverter();
    public abstract virtual IDynamicJsonObjectConverter`2<string, object> get_CatalogUrlConverter();
    public abstract virtual IDynamicJsonObjectConverter`2<PackageDependency, object> get_PackageDependencyConverter();
    public abstract virtual IDynamicJsonObjectConverter`2<PackageDependencySet, object> get_PackageDependencySetConverter();
}
public interface Microsoft.PackageManagement.NuGetProvider.IPackage {
    public Uri ReportAbuseUrl { get; }
    public Uri LicenseReportUrl { get; }
    public long DownloadCount { get; }
    public long PackageSize { get; }
    public long VersionDownloadCount { get; }
    public bool IsAbsoluteLatestVersion { get; }
    public bool IsLatestVersion { get; }
    public bool Listed { get; }
    public Nullable`1<DateTimeOffset> Published { get; }
    public Nullable`1<DateTimeOffset> Created { get; }
    public Nullable`1<DateTimeOffset> LastUpdated { get; }
    public Nullable`1<DateTimeOffset> LastEdited { get; }
    public string FullFilePath { get; public set; }
    public string Title { get; }
    public IEnumerable`1<string> Authors { get; }
    public IEnumerable`1<string> Owners { get; }
    public Uri IconUrl { get; }
    public Uri LicenseUrl { get; }
    public Uri ProjectUrl { get; }
    public Uri GalleryDetailsUrl { get; }
    public bool RequireLicenseAcceptance { get; }
    public bool DevelopmentDependency { get; }
    public string LicenseNames { get; }
    public string Description { get; }
    public string Summary { get; }
    public string ContentSrcUrl { get; }
    public string ReleaseNotes { get; }
    public string Language { get; }
    public string Tags { get; }
    public string Copyright { get; }
    public Version MinClientVersion { get; }
    public List`1<PackageDependencySet> DependencySetList { get; }
    public string PackageHash { get; }
    public string PackageHashAlgorithm { get; }
    public bool IsPrerelease { get; }
    public abstract virtual Uri get_ReportAbuseUrl();
    public abstract virtual Uri get_LicenseReportUrl();
    public abstract virtual long get_DownloadCount();
    public abstract virtual long get_PackageSize();
    public abstract virtual long get_VersionDownloadCount();
    public abstract virtual bool get_IsAbsoluteLatestVersion();
    public abstract virtual bool get_IsLatestVersion();
    public abstract virtual bool get_Listed();
    public abstract virtual Nullable`1<DateTimeOffset> get_Published();
    public abstract virtual Nullable`1<DateTimeOffset> get_Created();
    public abstract virtual Nullable`1<DateTimeOffset> get_LastUpdated();
    public abstract virtual Nullable`1<DateTimeOffset> get_LastEdited();
    public abstract virtual string get_FullFilePath();
    public abstract virtual void set_FullFilePath(string value);
    public abstract virtual string get_Title();
    public abstract virtual IEnumerable`1<string> get_Authors();
    public abstract virtual IEnumerable`1<string> get_Owners();
    public abstract virtual Uri get_IconUrl();
    public abstract virtual Uri get_LicenseUrl();
    public abstract virtual Uri get_ProjectUrl();
    public abstract virtual Uri get_GalleryDetailsUrl();
    public abstract virtual bool get_RequireLicenseAcceptance();
    public abstract virtual bool get_DevelopmentDependency();
    public abstract virtual string get_LicenseNames();
    public abstract virtual string get_Description();
    public abstract virtual string get_Summary();
    public abstract virtual string get_ContentSrcUrl();
    public abstract virtual string get_ReleaseNotes();
    public abstract virtual string get_Language();
    public abstract virtual string get_Tags();
    public abstract virtual string get_Copyright();
    public abstract virtual Version get_MinClientVersion();
    public abstract virtual List`1<PackageDependencySet> get_DependencySetList();
    public abstract virtual string get_PackageHash();
    public abstract virtual string get_PackageHashAlgorithm();
    public abstract virtual bool get_IsPrerelease();
}
public interface Microsoft.PackageManagement.NuGetProvider.IPackageName {
    public string Id { get; }
    public SemanticVersion Version { get; }
    public abstract virtual string get_Id();
    public abstract virtual SemanticVersion get_Version();
}
public interface Microsoft.PackageManagement.NuGetProvider.IPackageRepository {
    public INuGetResourceCollection ResourceProvider { get; }
    public string Source { get; }
    public bool IsFile { get; }
    public abstract virtual INuGetResourceCollection get_ResourceProvider();
    public abstract virtual string get_Source();
    public abstract virtual bool get_IsFile();
    public abstract virtual IPackage FindPackage(NuGetSearchContext findContext, NuGetRequest request);
    public abstract virtual NuGetSearchResult FindPackagesById(NuGetSearchContext findContext, NuGetRequest request);
    public abstract virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest request);
    public abstract virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public abstract virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
}
public interface Microsoft.PackageManagement.NuGetProvider.IPackageRepositoryFactory {
    public abstract virtual IPackageRepository CreateRepository(PackageRepositoryCreateParameters parameters);
}
public interface Microsoft.PackageManagement.NuGetProvider.IRequestOutput {
    public abstract virtual void Verbose(string msg, Object[] args);
    public abstract virtual void Debug(string msg, Object[] args);
    public abstract virtual void Warning(string msg, Object[] args);
}
internal class Microsoft.PackageManagement.NuGetProvider.LocalPackageRepository : object {
    private string _path;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourceProvider>k__BackingField;
    public string Source { get; }
    public INuGetResourceCollection ResourceProvider { get; private set; }
    public bool IsFile { get; }
    public LocalPackageRepository(string physicalPath, NuGetRequest request);
    public sealed virtual string get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourceProvider();
    [CompilerGeneratedAttribute]
private void set_ResourceProvider(INuGetResourceCollection value);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.LocalPackageRepository/<GetPackages>d__8")]
private static IEnumerable`1<IPackage> GetPackages(Func`3<string, Request, IPackage> openPackage, string packageId, IEnumerable`1<string> packagePaths, Request request);
    private static IPackage GetPackage(Func`3<string, Request, IPackage> openPackage, string path, Request request);
    private static IPackage OpenPackage(string path, Request request);
    private static PackageBase ProcessZipPackage(string nupkgPath);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.LocalPackageRepository/<GetPackageFiles>d__12")]
private IEnumerable`1<string> GetPackageFiles(string filter);
    public virtual IPackage FindPackage(NuGetSearchContext findContext, NuGetRequest request);
    private IPackage FindPackage(Func`3<string, Request, IPackage> openPackage, string packageId, SemanticVersion version, NuGetRequest nugetRequest);
    private IEnumerable`1<string> GetPackageLookupPaths(string packageId, SemanticVersion version);
    private static bool FileNameMatchesPattern(string packageId, SemanticVersion version, string path);
    public sealed virtual NuGetSearchResult FindPackagesById(NuGetSearchContext findContext, NuGetRequest request);
    private IEnumerable`1<IPackage> FindPackagesById(Func`3<string, Request, IPackage> openPackage, string packageId, Request request);
    public sealed virtual bool get_IsFile();
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest nugetRequest);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.LocalPackageRepository/<SearchImpl>d__22")]
private IEnumerable`1<IPackage> SearchImpl(string searchTerm, NuGetRequest nugetRequest);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetAbuseFeed3 : object {
    private string uriTemplate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public NuGetAbuseFeed3(string uriTemplate);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeAbuseUri(string packageId, string packageVersion);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetAutoCompleteFeed3 : NuGetRemoteFeedBase {
    public NuGetAutoCompleteFeed3(NuGetServiceInfo primaryServiceEndpoint);
    public sealed virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, NuGetRequest request);
    public virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, RequestWrapper request, bool allowPrerelease);
    public sealed virtual IEnumerable`1<string> Autocomplete(NuGetSearchTerm autocompleteSearchTerm, RequestWrapper request, WildcardPattern acceptedPattern, bool allowPrerelease);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetAutoCompleteFeed3/<GetAutoCompleteResults>d__5")]
private IEnumerable`1<IEnumerable`1<string>> GetAutoCompleteResults(object root, NuGetSearchTerm autocompleteSearchTerm, WildcardPattern acceptedPattern);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetAutoCompleteFeed3/<YieldResultAsEnumerable>d__6")]
private IEnumerable`1<string> YieldResultAsEnumerable(string result);
}
internal static class Microsoft.PackageManagement.NuGetProvider.NuGetClient : object {
    internal static IEnumerable`1<PackageBase> FindPackage(string query, NuGetRequest request);
    internal static IEnumerable`1<PackageBase> FindPackage(string query, RequestWrapper request);
    internal static PackageItem InstallPackage(string packageName, string version, NuGetRequest request, PackageSource source, string queryUrl, string packageHash, string packageHashAlgorithm, ProgressTracker progressTracker);
    internal static bool InstallSinglePackage(PackageItem pkgItem, NuGetRequest request, ProgressTracker progressTracker);
    internal static bool DownloadSinglePackage(PackageItem pkgItem, NuGetRequest request, string destLocation, ProgressTracker progressTracker);
    internal static bool InstallOrDownloadPackageHelper(PackageItem pkgItem, NuGetRequest request, string operation, Func`3<PackageItem, ProgressTracker, bool> installOrDownloadFunction);
    internal static IEnumerable`1<PackageItem> GetPackageDependenciesToInstall(NuGetRequest request, PackageItem packageItem, Boolean& hasDependencyLoop);
    private static List`1<DependencyVersion> ReduceConstraints(List`1<DependencyVersion> constraints);
    internal static bool DepthFirstVisit(Tuple`2<PackageItem, DependencyVersion> packageItem, HashSet`1<PackageItem> temporarilyMarked, HashSet`1<PackageItem> permanentlyMarked, List`1<Tuple`2<PackageItem, DependencyVersion>> dependencyToBeInstalled, HashSet`1<string> dependenciesProcessed, NuGetRequest request, Dictionary`2<string, HashSet`1<PackageItem>> reducedConstraintDuplicatedPackages);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetClient/<GetPackageDependenciesHelper>d__9")]
private static IEnumerable`1<Tuple`2<PackageItem, DependencyVersion>> GetPackageDependenciesHelper(PackageItem packageItem, HashSet`1<string> depedenciesToProcessed, NuGetRequest request, Dictionary`2<string, HashSet`1<PackageItem>> reducedConstraintDuplicatedPackages);
    internal static PackageItem InstallPackageLocal(string packageName, string version, NuGetRequest request, PackageSource source, string sourceFilePath, ProgressTracker progressTracker);
    internal static void UninstallPackage(NuGetRequest request, PackageItem pkg);
    internal static bool DownloadPackage(string packageName, string version, string destination, string queryUrl, NuGetRequest request, PackageSource pkgSource, ProgressTracker progressTracker);
    private static Stream GetStreamBasedOnEncoding(HttpResponseMessage response);
    internal static Stream DownloadDataToStream(string query, RequestWrapper request, bool ignoreNullResponse, int tries);
    internal static Stream DownloadDataToStream(string query, NuGetRequest request, bool ignoreNullResponse);
    internal static Stream InitialDownloadDataToStream(UriBuilder query, int startPoint, int bufferSize, NuGetRequest request);
    internal static Stream InitialDownloadDataToStream(UriBuilder query, int startPoint, int bufferSize, RequestWrapper request);
    [AsyncStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetClient/<DownloadDataToFileAsync>d__18")]
[DebuggerStepThroughAttribute]
internal static Task`1<long> DownloadDataToFileAsync(string fileName, string query, NuGetRequest request, NetworkCredential networkCredential, ProgressTracker progressTracker);
}
public static class Microsoft.PackageManagement.NuGetProvider.NuGetConstant : object {
    public static string PackageExtension;
    public static string ManifestExtension;
    public static string NugetSite;
    public static string ProviderName;
    public static string ProviderVersion;
    public static string FindPackagesById;
    public static string SkipAndTop;
    public static string SearchTerm;
    public static string SearchFilterAllVersions;
    public static string SearchFilter;
    public static string SettingsFileName;
    public static DateTimeOffset Unpublished;
    private static NuGetConstant();
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetFilesFeed2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeDownloadUri(PackageBase package);
    public sealed virtual PackageEntryInfo GetVersionInfo(PackageEntryInfo packageInfo, RequestWrapper request);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, RequestWrapper request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetFilesFeed3 : object {
    private string baseUrl;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public NuGetFilesFeed3(string baseUrl);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeDownloadUri(PackageBase package);
    public sealed virtual PackageEntryInfo GetVersionInfo(PackageEntryInfo packageInfo, RequestWrapper request);
    private string MakeDownloadUri(PackageItem package);
    private bool InstallSinglePackage(PackageItem pkgItem, NuGetRequest request, ProgressTracker progressTracker);
    private bool DownloadSinglePackage(PackageItem pkgItem, NuGetRequest request, string destLocation, ProgressTracker progressTracker);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, RequestWrapper request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetGalleryFeedMyGet : object {
    private string galleryTemplateUri;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public NuGetGalleryFeedMyGet(string myGetUrl);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeGalleryUri(string packageId, string packageVersion);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetGalleryFeedOrg : object {
    private string galleryTemplateUri;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeGalleryUri(string packageId, string packageVersion);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetLocalPackageFeed : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, NuGetRequest request);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual string MakeDownloadUri(PackageBase package);
    public sealed virtual PackageEntryInfo GetVersionInfo(PackageEntryInfo packageInfo, RequestWrapper request);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, RequestWrapper request);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, RequestWrapper request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetPackageFeed2 : object {
    private string baseUrl;
    private string nugetFindPackageIdQueryFormat;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public NuGetPackageFeed2(string baseUrl);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, NuGetRequest request);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetPackageFeed3 : NuGetRemoteFeedBase {
    public NuGetPackageFeed3(NuGetServiceInfo primaryServiceEndpoint);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, NuGetRequest request);
    internal IEnumerable`1<PackageBase> Find(string registrationUrl, NuGetSearchContext context, RequestWrapper request, bool finalAttempt);
    private PackageBase GetPackageFromCatalogUrl(string catalogUrl, RequestWrapper request, HashSet`1<SemanticVersion> packageSemanticVersions, NuGetSearchContext context);
    private HashSet`1<SemanticVersion> FilterVersionsByRequirements(NuGetSearchContext findContext, PackageEntryInfo packageInfo);
    private IEnumerable`1<IPackage> FindImpl(NuGetSearchContext findContext, RequestWrapper request);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetPackageFeed3/<GetPackagesForBaseUrl>d__6")]
private IEnumerable`1<IPackage> GetPackagesForBaseUrl(string baseUrl, NuGetSearchContext findContext, RequestWrapper request);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetPackageFeed3/<GetCandidateUrls>d__7")]
private IEnumerable`1<string> GetCandidateUrls(string packageId, SemanticVersion version, string baseUrl);
    private string GetPackageVersionUrl(string packageId, string version, string baseUrl);
    public virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual NuGetSearchResult Find(NuGetSearchContext findContext, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetPackageRepository : object {
    private string baseUrl;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourceProvider>k__BackingField;
    public string Source { get; }
    public bool IsFile { get; }
    public INuGetResourceCollection ResourceProvider { get; private set; }
    public NuGetPackageRepository(PackageRepositoryCreateParameters parameters);
    public sealed virtual string get_Source();
    public sealed virtual bool get_IsFile();
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourceProvider();
    [CompilerGeneratedAttribute]
private void set_ResourceProvider(INuGetResourceCollection value);
    public sealed virtual IPackage FindPackage(NuGetSearchContext findContext, NuGetRequest request);
    public sealed virtual NuGetSearchResult FindPackagesById(NuGetSearchContext findContext, NuGetRequest request);
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest request);
    public sealed virtual bool DownloadPackage(PublicObjectView packageView, string destination, NuGetRequest request);
    public sealed virtual bool InstallPackage(PublicObjectView packageView, NuGetRequest request);
}
internal static class Microsoft.PackageManagement.NuGetProvider.NuGetPathUtility : object {
    private static Char[] _invalidPathChars;
    private static NuGetPathUtility();
    internal static bool IsManifest(string path);
    internal static bool IsPackageFile(string path);
    internal static bool ValidateSourceUri(IEnumerable`1<string> supportedSchemes, Uri srcUri, NuGetRequest request);
    internal static Uri ValidateUri(Uri query, NuGetRequest request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetProvider : object {
    internal static Dictionary`2<string, String[]> Features;
    public string PackageProviderName { get; }
    public string ProviderVersion { get; }
    private static NuGetProvider();
    public string get_PackageProviderName();
    public string get_ProviderVersion();
    public void OnUnhandledException(string methodName, Exception exception);
    public void InitializeProvider(NuGetRequest request);
    public void GetFeatures(Request request);
    public void GetDynamicOptions(string category, Request request);
    public void ResolvePackageSources(NuGetRequest request);
    public void AddPackageSource(string name, string location, bool trusted, NuGetRequest request);
    public void RemovePackageSource(string name, NuGetRequest request);
    public void FindPackage(string name, string requiredVersion, string minimumVersion, string maximumVersion, int id, NuGetRequest request);
    public bool SearchPackages(string name, string requiredVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive, int id, NuGetRequest request);
    public void FindPackageByFile(string file, int id, NuGetRequest request);
    public void DownloadPackage(string fastPackageReference, string destLocation, NuGetRequest request);
    public void InstallPackage(string fastPackageReference, NuGetRequest request);
    public void UninstallPackage(string fastPackageReference, NuGetRequest request);
    public void GetInstalledPackages(string name, string requiredVersion, string minimumVersion, string maximumVersion, NuGetRequest request);
    private static void NormalizeVersion(NuGetRequest request, String& requiredVersion, String& minimumVersion, String& maximumVersion);
    internal static bool IsNameMatch(string packageName, string filePath);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetQueryFeed2 : object {
    private string baseUrl;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    public NuGetQueryFeed2(string baseUrl);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual bool IsAvailable(RequestWrapper request);
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest nugetRequest);
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetQueryFeed3 : NuGetRemoteFeedBase {
    public NuGetQueryFeed3(NuGetServiceInfo primaryServiceEndpoint);
    public virtual bool IsAvailable(RequestWrapper request);
    private bool IsSingleEndpointAvailable(NuGetServiceInfo endpoint, RequestWrapper request);
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, NuGetRequest nugetRequest);
    public sealed virtual NuGetSearchResult Search(NuGetSearchContext searchContext, RequestWrapper request);
    private IEnumerable`1<IPackage> SearchPackagesWithBackup(string baseUrl, HttpQueryBuilder qb, RequestWrapper request, NuGetSearchContext searchContext, NuGetSearchTerm searchTerm);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetQueryFeed3/<GetPackageCollectionsForSearchResult>d__6")]
private IEnumerable`1<IEnumerable`1<PackageBase>> GetPackageCollectionsForSearchResult(object searchResult, NuGetSearchContext searchContext, NuGetSearchTerm searchTerm, HashSet`1<string> foundPackageIds, RequestWrapper request);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetQueryFeed3/<GetPackagesForPackageEntry>d__7")]
private IEnumerable`1<PackageBase> GetPackagesForPackageEntry(object packageEntry, NuGetSearchContext searchContext, RequestWrapper request);
    private static string LongestCommonSubstring(String[] s);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetQueryFeed3/<GetIndexCombinations>d__9")]
private static IEnumerable`1<Int32[]> GetIndexCombinations(int startingIndex, String[] s);
}
public abstract class Microsoft.PackageManagement.NuGetProvider.NuGetRemoteFeedBase : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<NuGetServiceInfo> <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public IList`1<NuGetServiceInfo> Endpoints { get; private set; }
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<NuGetServiceInfo> get_Endpoints();
    [CompilerGeneratedAttribute]
private void set_Endpoints(IList`1<NuGetServiceInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public abstract virtual bool IsAvailable(RequestWrapper request);
    internal T Execute(Func`2<string, T> executeWithBaseUrl);
    internal T Execute(Func`2<string, T> executeWithBaseUrl, int retryCount, Func`2<int, int> backoffStrategy);
    internal T SingleExecuteWithRetries(NuGetServiceInfo endpointInfo, Func`2<string, T> executeWithBaseUrl, int retryCount, Func`2<int, int> backoffStrategy);
}
public abstract class Microsoft.PackageManagement.NuGetProvider.NuGetRequest : Request {
    private static Regex _regexFastPath;
    private static Byte[] _nugetBytes;
    private string _configurationFileLocation;
    private XDocument _config;
    internal Lazy`1<bool> AllowPrereleaseVersions;
    internal Lazy`1<bool> AllVersions;
    internal Lazy`1<string> Contains;
    internal Lazy`1<bool> ExcludeVersion;
    internal Lazy`1<String[]> FilterOnTag;
    internal Lazy`1<String[]> Headers;
    internal Lazy`1<string> Scope;
    internal Lazy`1<PackageBase[]> InstalledPackages;
    private static IDictionary`2<string, PackageSource> _registeredPackageSources;
    private static IDictionary`2<string, PackageSource> _checkedUnregisteredPackageSources;
    private string _destinationPath;
    internal Lazy`1<bool> SkipValidate;
    internal Lazy`1<bool> SkipDependencies;
    private HttpClient _httpClient;
    private HttpClient _httpClientWithoutAcceptHeader;
    private Nullable`1<bool> _isCalledFromPowerShellGet;
    private string _CredentialUsername;
    private SecureString _CredentialPassword;
    internal bool suppressCredentialProvider;
    internal static string DefaultConfig;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <OriginalSources>k__BackingField;
    public string CredentialUsername { get; public set; }
    public SecureString CredentialPassword { get; public set; }
    internal String[] OriginalSources { get; internal set; }
    internal IEnumerable`1<string> InstalledPath { get; }
    internal string Destination { get; }
    internal string CurrentUserDefaultInstallLocation { get; }
    internal string AllUserDefaultInstallLocation { get; }
    internal static IEnumerable`1<string> SupportedSchemes { get; }
    internal bool IsCalledFromPowerShellGet { get; internal set; }
    internal HttpClient Client { get; }
    internal HttpClient ClientWithoutAcceptHeader { get; }
    internal IEnumerable`1<PackageSource> SelectedSources { get; }
    private XDocument Config { get; private set; }
    private string ConfigurationFileLocation { get; }
    private IDictionary`2<string, PackageSource> RegisteredPackageSources { get; }
    private static NuGetRequest();
    public HttpClient SetHttpClient(HttpClient client);
    public virtual string get_CredentialUsername();
    public virtual void set_CredentialUsername(string value);
    public virtual SecureString get_CredentialPassword();
    public virtual void set_CredentialPassword(SecureString value);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetRequest/<GetInstalledPackagesOptionValue>d__32")]
private IEnumerable`1<PackageBase> GetInstalledPackagesOptionValue();
    [CompilerGeneratedAttribute]
internal String[] get_OriginalSources();
    [CompilerGeneratedAttribute]
internal void set_OriginalSources(String[] value);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetRequest/<get_InstalledPath>d__38")]
internal IEnumerable`1<string> get_InstalledPath();
    internal string get_Destination();
    internal void CreateDirectoryInternal(string dirPath);
    internal string get_CurrentUserDefaultInstallLocation();
    internal string get_AllUserDefaultInstallLocation();
    internal PackageItem GetPackageByFastpath(string fastPath);
    internal PackageItem GetPackageByFilePath(string filePath, string packageName);
    internal PackageItem GetPackageByFilePath(string filePath);
    internal void RemovePackageSource(string id);
    internal void AddPackageSource(string name, string location, bool isTrusted, bool isValidated);
    internal bool ValidateSourceLocation(string location);
    internal static IEnumerable`1<string> get_SupportedSchemes();
    internal PackageSource FindRegisteredSource(string name);
    internal bool YieldPackages(IEnumerable`1<PackageItem> packageReferences, string searchKey);
    private string MakeTagId(PackageItem pkg);
    internal bool get_IsCalledFromPowerShellGet();
    internal void set_IsCalledFromPowerShellGet(bool value);
    internal HttpClient get_Client();
    internal HttpClient get_ClientWithoutAcceptHeader();
    internal bool YieldPackage(PackageItem pkg, string searchKey, string destinationPath);
    internal bool MinAndMaxVersionMatched(SemanticVersion packageVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive);
    internal bool GetInstalledPackages(string name, string requiredVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive, bool terminateFirstFound);
    internal IEnumerable`1<PackageItem> GetPackageById(string name, NuGetRequest request, string requiredVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive, bool isDependency);
    internal string MakeFastPath(PackageSource source, string id, string version);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetRequest/<get_SelectedSources>d__70")]
internal IEnumerable`1<PackageSource> get_SelectedSources();
    private XDocument get_Config();
    private void set_Config(XDocument value);
    private string get_ConfigurationFileLocation();
    private IDictionary`2<string, PackageSource> get_RegisteredPackageSources();
    private IEnumerable`1<PackageItem> GetPackageById(PackageSource source, string name, NuGetRequest request, string requiredVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive, bool isDependency);
    private PackageSource ResolvePackageSource(string nameOrLocation);
    private bool TryParseFastPath(string fastPath, String& source, String& id, String& version, String[]& sources);
    private bool LocationCloseEnoughMatch(string givenLocation, string knownLocation);
    internal IEnumerable`1<PackageItem> SearchForPackages(string name);
    private IEnumerable`1<PackageItem> SearchForPackages(PackageSource source, string name);
    internal NetworkCredential GetCredsFromCredProvider(string query, NuGetRequest request, bool isRetry);
    [CompilerGeneratedAttribute]
private String[] <.ctor>b__31_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__31_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_2();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_3();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_4();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_5();
    [CompilerGeneratedAttribute]
private string <.ctor>b__31_6();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_7();
    [CompilerGeneratedAttribute]
private String[] <.ctor>b__31_8();
    [CompilerGeneratedAttribute]
private PackageBase[] <.ctor>b__31_9();
    [CompilerGeneratedAttribute]
private bool <YieldPackage>b__64_0(string author);
    [CompilerGeneratedAttribute]
private bool <YieldPackage>b__64_1(string owner);
    [CompilerGeneratedAttribute]
private PackageSource <get_RegisteredPackageSources>b__77_2(XElement each);
}
internal class Microsoft.PackageManagement.NuGetProvider.NuGetRequestOutput : object {
    private NuGetRequest internalRequest;
    public NuGetRequestOutput(NuGetRequest request);
    public sealed virtual void Debug(string msg, Object[] args);
    public sealed virtual void Verbose(string msg, Object[] args);
    public sealed virtual void Warning(string msg, Object[] args);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetResourceCollection2 : NuGetResourceCollectionBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public void set_ResourcesCollection(INuGetResourceCollection value);
    public static NuGetResourceCollection2 Make(string baseUrl);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetResourceCollection3 : NuGetResourceCollectionBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public void set_ResourcesCollection(INuGetResourceCollection value);
    public static NuGetResourceCollection3 Make(object root, string baseUrl, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetResourceCollectionBase : object {
    private INuGetPackageFeed packagesFeed;
    private INuGetQueryFeed queryFeed;
    private INuGetFilesFeed filesFeed;
    private INuGetAbuseFeed abuseFeed;
    private INuGetGalleryFeed galleryFeed;
    private INuGetAutoCompleteFeed autoCompleteFeed;
    private IDynamicJsonObjectConverter`2<string, object> catalogUrlConverter;
    private IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> packageConverter;
    private IDynamicJsonObjectConverter`2<PackageDependency, object> packageDependencyConverter;
    private IDynamicJsonObjectConverter`2<PackageDependencySet, object> packageDependencySetConverter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<IEnumerable`1<NuGetSearchTerm>, string> <GetSearchQueryDelegate>k__BackingField;
    public INuGetPackageFeed PackagesFeed { get; protected set; }
    public INuGetQueryFeed QueryFeed { get; protected set; }
    public INuGetFilesFeed FilesFeed { get; protected set; }
    public INuGetAbuseFeed AbuseFeed { get; protected set; }
    public INuGetGalleryFeed GalleryFeed { get; protected set; }
    public INuGetAutoCompleteFeed AutoCompleteFeed { get; protected set; }
    public IDynamicJsonObjectConverter`2<string, object> CatalogUrlConverter { get; protected set; }
    public IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> PackageConverter { get; protected set; }
    public IDynamicJsonObjectConverter`2<PackageDependency, object> PackageDependencyConverter { get; protected set; }
    public IDynamicJsonObjectConverter`2<PackageDependencySet, object> PackageDependencySetConverter { get; protected set; }
    public Func`2<IEnumerable`1<NuGetSearchTerm>, string> GetSearchQueryDelegate { get; protected set; }
    public sealed virtual INuGetPackageFeed get_PackagesFeed();
    protected void set_PackagesFeed(INuGetPackageFeed value);
    public sealed virtual INuGetQueryFeed get_QueryFeed();
    protected void set_QueryFeed(INuGetQueryFeed value);
    public sealed virtual INuGetFilesFeed get_FilesFeed();
    protected void set_FilesFeed(INuGetFilesFeed value);
    public sealed virtual INuGetAbuseFeed get_AbuseFeed();
    protected void set_AbuseFeed(INuGetAbuseFeed value);
    public sealed virtual INuGetGalleryFeed get_GalleryFeed();
    protected void set_GalleryFeed(INuGetGalleryFeed value);
    public sealed virtual INuGetAutoCompleteFeed get_AutoCompleteFeed();
    protected void set_AutoCompleteFeed(INuGetAutoCompleteFeed value);
    public sealed virtual IDynamicJsonObjectConverter`2<string, object> get_CatalogUrlConverter();
    protected void set_CatalogUrlConverter(IDynamicJsonObjectConverter`2<string, object> value);
    public sealed virtual IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> get_PackageConverter();
    protected void set_PackageConverter(IDynamicJsonObjectConverter`2<PackageBase, PackageEntryInfo> value);
    public sealed virtual IDynamicJsonObjectConverter`2<PackageDependency, object> get_PackageDependencyConverter();
    protected void set_PackageDependencyConverter(IDynamicJsonObjectConverter`2<PackageDependency, object> value);
    public sealed virtual IDynamicJsonObjectConverter`2<PackageDependencySet, object> get_PackageDependencySetConverter();
    protected void set_PackageDependencySetConverter(IDynamicJsonObjectConverter`2<PackageDependencySet, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IEnumerable`1<NuGetSearchTerm>, string> get_GetSearchQueryDelegate();
    [CompilerGeneratedAttribute]
protected void set_GetSearchQueryDelegate(Func`2<IEnumerable`1<NuGetSearchTerm>, string> value);
    private void SetParentCollection(INuGetResource resource);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetResourceCollectionFactory : object {
    private static Dictionary`2<string, INuGetResourceCollection> sessionResourceCollectionCache;
    private static Dictionary`2<string, object> sessionResourceCollectionCacheLocks;
    private static NuGetResourceCollectionFactory();
    public static INuGetResourceCollection GetResources(string baseUrl, NuGetRequest request);
    public static INuGetResourceCollection GetResources(string baseUrl, RequestWrapper request);
    private static INuGetResourceCollection GetResourcesImpl(string baseUrl, RequestWrapper request);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetResourceCollectionLocal : NuGetResourceCollectionBase {
    public static NuGetResourceCollectionLocal Make();
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetSearchContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PackageEntryInfo <PackageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<NuGetSearchTerm> <SearchTerms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SemanticVersion <RequiredVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SemanticVersion <MinimumVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SemanticVersion <MaximumVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllVersions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableDeepMetadataBypass>k__BackingField;
    public PackageEntryInfo PackageInfo { get; public set; }
    public IEnumerable`1<NuGetSearchTerm> SearchTerms { get; public set; }
    public SemanticVersion RequiredVersion { get; public set; }
    public SemanticVersion MinimumVersion { get; public set; }
    public SemanticVersion MaximumVersion { get; public set; }
    public bool AllowPrerelease { get; public set; }
    public bool AllVersions { get; public set; }
    public bool EnableDeepMetadataBypass { get; public set; }
    [CompilerGeneratedAttribute]
public PackageEntryInfo get_PackageInfo();
    [CompilerGeneratedAttribute]
public void set_PackageInfo(PackageEntryInfo value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<NuGetSearchTerm> get_SearchTerms();
    [CompilerGeneratedAttribute]
public void set_SearchTerms(IEnumerable`1<NuGetSearchTerm> value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_RequiredVersion();
    [CompilerGeneratedAttribute]
public void set_RequiredVersion(SemanticVersion value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_MinimumVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumVersion(SemanticVersion value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_MaximumVersion();
    [CompilerGeneratedAttribute]
public void set_MaximumVersion(SemanticVersion value);
    [CompilerGeneratedAttribute]
public bool get_AllowPrerelease();
    [CompilerGeneratedAttribute]
public void set_AllowPrerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllVersions();
    [CompilerGeneratedAttribute]
public void set_AllVersions(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDeepMetadataBypass();
    [CompilerGeneratedAttribute]
public void set_EnableDeepMetadataBypass(bool value);
    public NuGetSearchResult MakeResult(IEnumerable`1<IPackage> result, bool versionPostFilterRequired, bool namePostFilterRequired, bool containsPostFilterRequired);
    public NuGetSearchResult MakeResult();
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetSearchResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IPackage> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <VersionPostFilterRequired>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <NamePostFilterRequired>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ContainsPostFilterRequired>k__BackingField;
    public IEnumerable`1<IPackage> Result { get; public set; }
    public bool VersionPostFilterRequired { get; public set; }
    public bool NamePostFilterRequired { get; public set; }
    public bool ContainsPostFilterRequired { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<IPackage> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IEnumerable`1<IPackage> value);
    [CompilerGeneratedAttribute]
public bool get_VersionPostFilterRequired();
    [CompilerGeneratedAttribute]
public void set_VersionPostFilterRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_NamePostFilterRequired();
    [CompilerGeneratedAttribute]
public void set_NamePostFilterRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContainsPostFilterRequired();
    [CompilerGeneratedAttribute]
public void set_ContainsPostFilterRequired(bool value);
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetSearchTerm : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NuGetSearchTermType <Term>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Text>k__BackingField;
    public NuGetSearchTermType Term { get; private set; }
    public string Text { get; private set; }
    public NuGetSearchTerm(NuGetSearchTermType type, string text);
    [CompilerGeneratedAttribute]
public NuGetSearchTermType get_Term();
    [CompilerGeneratedAttribute]
private void set_Term(NuGetSearchTermType value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    public virtual string ToString();
}
public class Microsoft.PackageManagement.NuGetProvider.NuGetServiceInfo : object {
    private static Dictionary`2<string, NuGetServiceInfo> KnownServiceTypeStrings;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NuGetServiceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Preference>k__BackingField;
    public string Url { get; public set; }
    public NuGetServiceType Type { get; private set; }
    public int Preference { get; private set; }
    public NuGetServiceInfo(string serviceUrl, NuGetServiceType type, int preference);
    public NuGetServiceInfo(NuGetServiceType type, int preference);
    private static NuGetServiceInfo();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public NuGetServiceType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(NuGetServiceType value);
    [CompilerGeneratedAttribute]
public int get_Preference();
    [CompilerGeneratedAttribute]
private void set_Preference(int value);
    public static NuGetServiceInfo GetV3Endpoint(object serviceEntryRoot);
}
public enum Microsoft.PackageManagement.NuGetProvider.NuGetServiceType : Enum {
    public int value__;
    public static NuGetServiceType Query;
    public static NuGetServiceType Files;
    public static NuGetServiceType Registrations;
    public static NuGetServiceType AutoComplete;
    public static NuGetServiceType ReportAbuse;
}
internal class Microsoft.PackageManagement.NuGetProvider.NuGetWebUtility : object {
    public static IEnumerable`1<PackageBase> SendRequest(string query, NuGetRequest request);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetWebUtility/<SendRequest>d__1")]
public static IEnumerable`1<PackageBase> SendRequest(string query, RequestWrapper request);
    public static IEnumerable`1<R> GetResults(NuGetRequest request, Func`2<B, long> getTotalResultsCountFromResponse, Func`2<B, IEnumerable`1<IEnumerable`1<R>>> getResultsFromResponse, Func`2<long, string> getNextResponseQuery, Func`2<string, B> parseResponseBody, int pageCount);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetWebUtility/<GetResults>d__3`2")]
public static IEnumerable`1<R> GetResults(RequestWrapper request, Func`2<B, long> getTotalResultsCountFromResponse, Func`2<B, IEnumerable`1<IEnumerable`1<R>>> getResultsFromResponse, Func`2<long, string> getNextResponseQuery, Func`2<string, B> parseResponseBody, int pageCount);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.NuGetWebUtility/<GetPageResults>d__4`2")]
public static IEnumerable`1<R> GetPageResults(RequestWrapper request, Func`2<B, IEnumerable`1<IEnumerable`1<R>>> getResultsFromResponse, B response);
}
internal class Microsoft.PackageManagement.NuGetProvider.NullRequestOutput : object {
    public sealed virtual void Debug(string msg, Object[] args);
    public sealed virtual void Verbose(string msg, Object[] args);
    public sealed virtual void Warning(string msg, Object[] args);
}
public class Microsoft.PackageManagement.NuGetProvider.PackageBase : object {
    private long _downloadCount;
    private long _versionDownloadCount;
    private long _packageSize;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAbsoluteLatestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLatestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Listed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FullFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTimeOffset> <Published>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTimeOffset> <Created>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTimeOffset> <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTimeOffset> <LastEdited>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <GalleryDetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DevelopmentDependency>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ContentSrcUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LicenseNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Version <MinClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <ReportAbuseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <LicenseReportUrl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Owners>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<PackageDependencySet> <DependencySetList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PackageHashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PackageHash>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrerelease>k__BackingField;
    private string Microsoft.PackageManagement.NuGetProvider.IPackageName.Id { get; }
    private SemanticVersion Microsoft.PackageManagement.NuGetProvider.IPackageName.Version { get; }
    public bool IsAbsoluteLatestVersion { get; public set; }
    public bool IsLatestVersion { get; public set; }
    public bool Listed { get; public set; }
    public string FullFilePath { get; public set; }
    public Nullable`1<DateTimeOffset> Published { get; public set; }
    public Nullable`1<DateTimeOffset> Created { get; public set; }
    public Nullable`1<DateTimeOffset> LastUpdated { get; public set; }
    public Nullable`1<DateTimeOffset> LastEdited { get; public set; }
    public string Title { get; public set; }
    public Uri IconUrl { get; public set; }
    public Uri LicenseUrl { get; public set; }
    public Uri ProjectUrl { get; public set; }
    public Uri GalleryDetailsUrl { get; public set; }
    public bool RequireLicenseAcceptance { get; public set; }
    public bool DevelopmentDependency { get; public set; }
    public string Description { get; public set; }
    public string Summary { get; public set; }
    public string ContentSrcUrl { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Language { get; public set; }
    public string Tags { get; public set; }
    public string Copyright { get; public set; }
    public string LicenseNames { get; public set; }
    public Version MinClientVersion { get; public set; }
    public long DownloadCount { get; public set; }
    public Uri ReportAbuseUrl { get; public set; }
    public Uri LicenseReportUrl { get; public set; }
    public long VersionDownloadCount { get; public set; }
    public long PackageSize { get; public set; }
    private IEnumerable`1<string> Microsoft.PackageManagement.NuGetProvider.IPackage.Authors { get; }
    private IEnumerable`1<string> Microsoft.PackageManagement.NuGetProvider.IPackage.Owners { get; }
    internal string Id { get; internal set; }
    internal string Version { get; internal set; }
    internal string Authors { get; internal set; }
    internal string Owners { get; internal set; }
    public List`1<PackageDependencySet> DependencySetList { get; public set; }
    public string PackageHashAlgorithm { get; public set; }
    public string PackageHash { get; public set; }
    public Dictionary`2<string, string> AdditionalProperties { get; public set; }
    public bool IsPrerelease { get; public set; }
    private sealed virtual override string Microsoft.PackageManagement.NuGetProvider.IPackageName.get_Id();
    private sealed virtual override SemanticVersion Microsoft.PackageManagement.NuGetProvider.IPackageName.get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAbsoluteLatestVersion();
    [CompilerGeneratedAttribute]
public void set_IsAbsoluteLatestVersion(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLatestVersion();
    [CompilerGeneratedAttribute]
public void set_IsLatestVersion(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Listed();
    [CompilerGeneratedAttribute]
public void set_Listed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FullFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_LastUpdated();
    [CompilerGeneratedAttribute]
public void set_LastUpdated(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_LastEdited();
    [CompilerGeneratedAttribute]
public void set_LastEdited(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ProjectUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_GalleryDetailsUrl();
    [CompilerGeneratedAttribute]
public void set_GalleryDetailsUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DevelopmentDependency();
    [CompilerGeneratedAttribute]
public void set_DevelopmentDependency(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentSrcUrl();
    [CompilerGeneratedAttribute]
public void set_ContentSrcUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseNames();
    [CompilerGeneratedAttribute]
public void set_LicenseNames(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_MinClientVersion();
    [CompilerGeneratedAttribute]
public void set_MinClientVersion(Version value);
    public sealed virtual long get_DownloadCount();
    public void set_DownloadCount(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ReportAbuseUrl();
    [CompilerGeneratedAttribute]
public void set_ReportAbuseUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_LicenseReportUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseReportUrl(Uri value);
    public sealed virtual long get_VersionDownloadCount();
    public void set_VersionDownloadCount(long value);
    public sealed virtual long get_PackageSize();
    public void set_PackageSize(long value);
    private sealed virtual override IEnumerable`1<string> Microsoft.PackageManagement.NuGetProvider.IPackage.get_Authors();
    private sealed virtual override IEnumerable`1<string> Microsoft.PackageManagement.NuGetProvider.IPackage.get_Owners();
    [CompilerGeneratedAttribute]
internal string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
internal string get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(string value);
    [CompilerGeneratedAttribute]
internal string get_Authors();
    [CompilerGeneratedAttribute]
internal void set_Authors(string value);
    [CompilerGeneratedAttribute]
internal string get_Owners();
    [CompilerGeneratedAttribute]
internal void set_Owners(string value);
    public string GetFullName();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<PackageDependencySet> get_DependencySetList();
    [CompilerGeneratedAttribute]
public void set_DependencySetList(List`1<PackageDependencySet> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PackageHashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_PackageHashAlgorithm(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PackageHash();
    [CompilerGeneratedAttribute]
public void set_PackageHash(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrerelease();
    [CompilerGeneratedAttribute]
public void set_IsPrerelease(bool value);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageBaseConverter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual PackageBase Make(object jsonObject);
    public sealed virtual PackageBase Make(object jsonObject, PackageBase pb);
    public sealed virtual PackageBase Make(object jsonObject, PackageEntryInfo args);
}
public class Microsoft.PackageManagement.NuGetProvider.PackageDependency : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DependencyVersion <DependencyVersion>k__BackingField;
    public string Id { get; public set; }
    public DependencyVersion DependencyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DependencyVersion get_DependencyVersion();
    [CompilerGeneratedAttribute]
public void set_DependencyVersion(DependencyVersion value);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageDependencyConverter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INuGetResourceCollection <ResourcesCollection>k__BackingField;
    public INuGetResourceCollection ResourcesCollection { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INuGetResourceCollection get_ResourcesCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourcesCollection(INuGetResourceCollection value);
    public sealed virtual PackageDependency Make(object jsonObject);
    public sealed virtual PackageDependency Make(object jsonObject, PackageDependency existingObject);
    public sealed virtual PackageDependency Make(object jsonObject, object args);
}
public class Microsoft.PackageManagement.NuGetProvider.PackageDependencySet : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<PackageDependency> <Dependencies>k__BackingField;
    public string TargetFramework { get; public set; }
    public List`1<PackageDependency> Dependencies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public List`1<PackageDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(List`1<PackageDependency> value);
}
public class Microsoft.PackageManagement.NuGetProvider.PackageEntryInfo : object {
    private HashSet`1<string> allVersionsSet;
    private object addVersionLock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<SemanticVersion> <AllVersions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SemanticVersion <LatestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SemanticVersion <AbsoluteLatestVersion>k__BackingField;
    public string Id { get; private set; }
    public IList`1<SemanticVersion> AllVersions { get; private set; }
    public SemanticVersion LatestVersion { get; private set; }
    public SemanticVersion AbsoluteLatestVersion { get; private set; }
    public PackageEntryInfo(string packageId);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public IList`1<SemanticVersion> get_AllVersions();
    [CompilerGeneratedAttribute]
private void set_AllVersions(IList`1<SemanticVersion> value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_LatestVersion();
    [CompilerGeneratedAttribute]
private void set_LatestVersion(SemanticVersion value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_AbsoluteLatestVersion();
    [CompilerGeneratedAttribute]
private void set_AbsoluteLatestVersion(SemanticVersion value);
    public PackageEntryInfo AddVersion(SemanticVersion version);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageFilterUtility : object {
    public static IEnumerable`1<IPackage> FilterOnTags(IEnumerable`1<IPackage> pkgs, String[] tag);
    public static IEnumerable`1<IPackage> FilterOnContains(IEnumerable`1<IPackage> pkgs, string containsPattern);
    public static IEnumerable`1<IPackage> FilterOnVersion(IEnumerable`1<IPackage> pkgs, string requiredVersion, string minimumVersion, string maximumVersion, bool minInclusive, bool maxInclusive);
    public static IEnumerable`1<IPackage> FilterOnName(IEnumerable`1<IPackage> pkgs, string searchTerm, bool useWildCard);
    public static bool IsValidByName(PackageEntryInfo packageEntry, NuGetSearchContext searchContext);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageItem : object {
    private string _fullPath;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PackageSource <PackageSource>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FastPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPackageFile>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Sources>k__BackingField;
    internal IPackage Package { get; internal set; }
    internal PackageSource PackageSource { get; internal set; }
    internal string FastPath { get; internal set; }
    internal bool IsPackageFile { get; internal set; }
    internal String[] Sources { get; internal set; }
    internal string Id { get; }
    internal string InstalledDirectory { get; }
    internal bool IsInstalled { get; }
    internal string Version { get; }
    internal string PackageFilename { get; }
    internal string FullPath { get; internal set; }
    [CompilerGeneratedAttribute]
internal IPackage get_Package();
    [CompilerGeneratedAttribute]
internal void set_Package(IPackage value);
    [CompilerGeneratedAttribute]
internal PackageSource get_PackageSource();
    [CompilerGeneratedAttribute]
internal void set_PackageSource(PackageSource value);
    [CompilerGeneratedAttribute]
internal string get_FastPath();
    [CompilerGeneratedAttribute]
internal void set_FastPath(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsPackageFile();
    [CompilerGeneratedAttribute]
internal void set_IsPackageFile(bool value);
    [CompilerGeneratedAttribute]
internal String[] get_Sources();
    [CompilerGeneratedAttribute]
internal void set_Sources(String[] value);
    internal string get_Id();
    internal string get_InstalledDirectory();
    internal bool get_IsInstalled();
    internal string get_Version();
    internal string get_PackageFilename();
    internal string get_FullPath();
    internal void set_FullPath(string value);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageItemComparer : object {
    public sealed virtual bool Equals(PackageItem packageOne, PackageItem packageTwo);
    public sealed virtual int GetHashCode(PackageItem obj);
}
public class Microsoft.PackageManagement.NuGetProvider.PackageName : object {
    private string _packageId;
    private SemanticVersion _version;
    public string Id { get; }
    public SemanticVersion Version { get; }
    public string Name { get; }
    public PackageName(string packageId, SemanticVersion version);
    public sealed virtual string get_Id();
    public sealed virtual SemanticVersion get_Version();
    public string get_Name();
    public sealed virtual bool Equals(PackageName other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.PackageManagement.NuGetProvider.PackageRepositoryCreateParameters : object {
    private object validationLock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <LocationValid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NuGetRequest <Request>k__BackingField;
    public string Location { get; public set; }
    public Nullable`1<bool> LocationValid { get; public set; }
    public NuGetRequest Request { get; public set; }
    public PackageRepositoryCreateParameters(string location, NuGetRequest request);
    public PackageRepositoryCreateParameters(string location, NuGetRequest request, Nullable`1<bool> locationValid);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LocationValid();
    [CompilerGeneratedAttribute]
public void set_LocationValid(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public NuGetRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(NuGetRequest value);
    public bool ValidateLocation();
}
public class Microsoft.PackageManagement.NuGetProvider.PackageRepositoryFactory : object {
    private static PackageRepositoryFactory _default;
    public static PackageRepositoryFactory Default { get; }
    private static PackageRepositoryFactory();
    public static PackageRepositoryFactory get_Default();
    public sealed virtual IPackageRepository CreateRepository(PackageRepositoryCreateParameters parameters);
}
internal class Microsoft.PackageManagement.NuGetProvider.PackageSource : object {
    private IPackageRepository _repository;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Trusted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRegistered>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsValidated>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NuGetRequest <Request>k__BackingField;
    internal string Name { get; internal set; }
    internal string Location { get; internal set; }
    internal bool Trusted { get; internal set; }
    internal bool IsRegistered { get; internal set; }
    internal bool IsValidated { get; internal set; }
    internal NuGetRequest Request { get; internal set; }
    internal IPackageRepository Repository { get; }
    internal bool IsSourceAFile { get; }
    internal string Serialized { get; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    [CompilerGeneratedAttribute]
internal bool get_Trusted();
    [CompilerGeneratedAttribute]
internal void set_Trusted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsRegistered();
    [CompilerGeneratedAttribute]
internal void set_IsRegistered(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsValidated();
    [CompilerGeneratedAttribute]
internal void set_IsValidated(bool value);
    [CompilerGeneratedAttribute]
internal NuGetRequest get_Request();
    [CompilerGeneratedAttribute]
internal void set_Request(NuGetRequest value);
    internal IPackageRepository get_Repository();
    internal bool get_IsSourceAFile();
    internal string get_Serialized();
}
internal static class Microsoft.PackageManagement.NuGetProvider.PackageUtility : object {
    private static string VersionPattern;
    private static PackageUtility();
    internal static string GetPackageNameWithoutVersionInfo(string packageName);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.NuGetProvider.PackageUtility/<ProcessPackagesFeed>d__2")]
internal static IEnumerable`1<PackageBase> ProcessPackagesFeed(Stream stream);
    internal static void ReadEntryElement(PackageBase& package, XElement xElement);
    private static void ReadEntryChildNode(PackageBase& package, XElement element);
    internal static Nullable`1<DateTimeOffset> GetDateTime(string dateTime);
    private static List`1<PackageDependencySet> ParseDependencySet(string value);
    private static Tuple`3<string, DependencyVersion, string> ParseDependency(string value);
    private static string ExtractId(string longId);
    internal static PackageBase ProcessNuspec(string nuspecFileFullPath);
    private static PackageBase ProcessNuspec(XDocument rootDocument);
    private static void ReadPackageMetadata(PackageBase& package, XElement xElement);
    private static void ReadPackageMetadataElement(PackageBase& package, XElement element);
    private static List`1<PackageDependencySet> ReadDependencyList(XElement dependenciesElement);
    private static List`1<PackageDependency> ReadDependencies(XElement containerElement);
    private static void EnsureRequiredXmlTags(PackageBase package);
    internal static string DecompressFile(string fullZipPath);
    internal static PackageBase DecompressFile(string nupkgFilePath, string packageName);
    private static XDocument ReadNuSpecFromNuPkg(string nupkgPath);
}
public class Microsoft.PackageManagement.NuGetProvider.PublicObjectView : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    internal object Value { get; private set; }
    public PublicObjectView(object val);
    [CompilerGeneratedAttribute]
internal object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    internal T GetValue();
}
public abstract class Microsoft.PackageManagement.NuGetProvider.Request : object {
    private String[] _packageSources;
    [DynamicAttribute]
public object PackageManagementService { get; }
    public IProviderServices ProviderServices { get; }
    public bool IsCanceled { get; }
    public IEnumerable`1<string> OptionKeys { get; }
    public IEnumerable`1<string> Sources { get; }
    public string CredentialUsername { get; public set; }
    public SecureString CredentialPassword { get; public set; }
    public IWebProxy WebProxy { get; }
    public bool IsInteractive { get; }
    public int CallCount { get; }
    internal IEnumerable`1<string> PackageSources { get; }
    public abstract virtual object get_PackageManagementService();
    public abstract virtual IProviderServices get_ProviderServices();
    public abstract virtual bool get_IsCanceled();
    public abstract virtual string GetMessageString(string messageText, string defaultText);
    public abstract virtual bool Warning(string messageText);
    public abstract virtual bool Error(string id, string category, string targetObjectValue, string messageText);
    public abstract virtual bool Message(string messageText);
    public abstract virtual bool Verbose(string messageText);
    public abstract virtual bool Debug(string messageText);
    public abstract virtual int StartProgress(int parentActivityId, string messageText);
    public abstract virtual bool Progress(int activityId, int progressPercentage, string messageText);
    public abstract virtual bool CompleteProgress(int activityId, bool isSuccessful);
    public abstract virtual IEnumerable`1<string> get_OptionKeys();
    public abstract virtual IEnumerable`1<string> GetOptionValues(string key);
    public abstract virtual IEnumerable`1<string> get_Sources();
    public abstract virtual string get_CredentialUsername();
    public abstract virtual void set_CredentialUsername(string value);
    public abstract virtual SecureString get_CredentialPassword();
    public abstract virtual void set_CredentialPassword(SecureString value);
    public abstract virtual IWebProxy get_WebProxy();
    public abstract virtual bool ShouldBootstrapProvider(string requestor, string providerName, string providerVersion, string providerType, string location, string destination);
    public abstract virtual bool ShouldContinueWithUntrustedPackageSource(string package, string packageSource);
    public abstract virtual bool ShouldContinue(string query, string caption, Boolean& yesToAll, Boolean& noToAll);
    public abstract virtual bool ShouldContinue(string query, string caption);
    public abstract virtual bool AskPermission(string permission);
    public abstract virtual bool get_IsInteractive();
    public abstract virtual int get_CallCount();
    public abstract virtual string YieldSoftwareIdentity(string fastPath, string name, string version, string versionScheme, string summary, string source, string searchKey, string fullPath, string packageFileName);
    public abstract virtual string AddMetadata(string name, string value);
    public abstract virtual string AddMetadata(string elementPath, string name, string value);
    public abstract virtual string AddMetadata(string elementPath, Uri namespace, string name, string value);
    public abstract virtual string AddTagId(string tagId);
    public abstract virtual string AddCulture(string xmlLang);
    public abstract virtual string AddMeta(string elementPath);
    public abstract virtual string AddEntity(string name, string regid, string role, string thumbprint);
    public abstract virtual string AddLink(Uri referenceUri, string relationship, string mediaType, string ownership, string use, string appliesToMedia, string artifact);
    public abstract virtual string AddDependency(string providerName, string packageName, string version, string source, string appliesTo);
    public abstract virtual string AddPayload();
    public abstract virtual string AddEvidence(DateTime dateTime, string deviceId);
    public abstract virtual string AddDirectory(string elementPath, string directoryName, string location, string root, bool isKey);
    public abstract virtual string AddFile(string elementPath, string fileName, string location, string root, bool isKey, long size, string version);
    public abstract virtual string AddProcess(string elementPath, string processName, int pid);
    public abstract virtual string AddResource(string elementPath, string type);
    public abstract virtual bool YieldPackageSource(string name, string location, bool isTrusted, bool isRegistered, bool isValidated);
    public abstract virtual bool YieldDynamicOption(string name, string expectedType, bool isRequired);
    public bool YieldDynamicOption(string name, string expectedType, bool isRequired, IEnumerable`1<string> permittedValues);
    public abstract virtual bool YieldKeyValuePair(string key, string value);
    public abstract virtual bool YieldValue(string value);
    internal bool Yield(Dictionary`2<string, String[]> dictionary);
    internal bool Yield(KeyValuePair`2<string, String[]> pair);
    internal bool WriteError(ErrorCategory category, string targetObjectValue, string messageText, Object[] args);
    internal bool Warning(string messageText, Object[] args);
    internal bool Verbose(string messageText, Object[] args);
    internal bool Debug(string messageText, Object[] args);
    internal string GetOptionValue(string name);
    private static string FixMeFormat(string formatString, Object[] args);
    internal string GetMessageStringInternal(string messageText);
    internal string FormatMessageString(string messageText, Object[] args);
    internal IEnumerable`1<string> get_PackageSources();
}
public class Microsoft.PackageManagement.NuGetProvider.RequestWrapper : object {
    private object lockObjNoHeaders;
    private object lockObjHeaders;
    private HttpClient clientWithoutHeaders;
    private HttpClient clientWithHeaders;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecureString <UserPassword>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NuGetRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IRequestOutput <Output>k__BackingField;
    public string UserName { get; private set; }
    public SecureString UserPassword { get; private set; }
    public IWebProxy Proxy { get; private set; }
    public String[] Headers { get; private set; }
    public NuGetRequest Request { get; private set; }
    public IRequestOutput Output { get; private set; }
    public RequestWrapper(IRequestOutput output);
    public RequestWrapper(string userName, SecureString userPassword, IWebProxy proxy, String[] headers, IRequestOutput output);
    public RequestWrapper(NuGetRequest request);
    public RequestWrapper(NuGetRequest request, NetworkCredential credential);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public SecureString get_UserPassword();
    [CompilerGeneratedAttribute]
private void set_UserPassword(SecureString value);
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
private void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public String[] get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(String[] value);
    [CompilerGeneratedAttribute]
public NuGetRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(NuGetRequest value);
    [CompilerGeneratedAttribute]
public IRequestOutput get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(IRequestOutput value);
    public HttpClient GetClient();
    public HttpClient GetClientWithHeaders();
    public void Warning(string msg, Object[] args);
    public bool IsCanceled();
    public void Verbose(string msg, Object[] args);
    public void Debug(string msg, Object[] args);
    public void RetryLog(string msg, int num);
    public int StartProgress(int activityId, string message);
    public void Progress(int activityId, int progress, string message);
    public void CompleteProgress(int activityId, bool successful);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.PackageManagement.NuGetProvider.Resources.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessPermissionDenied { get; }
    internal static string AlreadyInstalled { get; }
    internal static string CompletedDownload { get; }
    internal static string CompletedIterating { get; }
    internal static string CopyUnzippedFiles { get; }
    internal static string CouldNotGetResponseFromQuery { get; }
    internal static string CreateDirectory { get; }
    internal static string CreateFile { get; }
    internal static string DebugInfoCallMethod { get; }
    internal static string DebugInfoCallMethod3 { get; }
    internal static string DebugInfoReturnCall { get; }
    internal static string DependencyHasBothElements { get; }
    internal static string DependencyLoopDetected { get; }
    internal static string DependentPackageFailedInstallOrDownload { get; }
    internal static string DownloadingPackage { get; }
    internal static string DownloadingProgress { get; }
    internal static string FailedDownloadPackage { get; }
    internal static string FileNotFound { get; }
    internal static string FinishInstalling { get; }
    internal static string FoundRegisteredSource { get; }
    internal static string FoundTotalRegisteredSource { get; }
    internal static string HashAlgorithmNotSupported { get; }
    internal static string HashNotFound { get; }
    internal static string HashNotMatch { get; }
    internal static string HashNotSupported { get; }
    internal static string HeaderIgnored { get; }
    internal static string IncompleteDownload { get; }
    internal static string InstalledOrDownloadedDependencyPackage { get; }
    internal static string InstallingOrDownloadingDependencyPackage { get; }
    internal static string InstallingOrDownloadingPackage { get; }
    internal static string InstallRequiresCurrentUserScopeParameterForNonAdminUser { get; }
    internal static string InstallRequiresCurrentUserScopeParameterForNonSudoUser { get; }
    internal static string InvalidFileExtension { get; }
    internal static string InvalidNuspec { get; }
    internal static string InvalidPackage { get; }
    internal static string InvalidPackageSaveModeArgument { get; }
    internal static string InvalidQueryUrl { get; }
    internal static string InvalidVersionString { get; }
    internal static string Iterating { get; }
    internal static string LoadedConfigurationFile { get; }
    internal static string LoadingConfigurationFile { get; }
    internal static string ManifestRequiredXmlElementMissing { get; }
    internal static string MissingConfigurationElement { get; }
    internal static string NotFoundRegisteredSource { get; }
    internal static string NuspecRequiredXmlElementMissing { get; }
    internal static string PackageFailedInstallOrDownload { get; }
    internal static string PackageFailedToInstallReason { get; }
    internal static string PackagesReceived { get; }
    internal static string ReadingManifest { get; }
    internal static string RegisteredSources { get; }
    internal static string RemovedPackageSource { get; }
    internal static string RequestCanceled { get; }
    internal static string RetryingDownload { get; }
    internal static string SavingConfigurationWithFile { get; }
    internal static string SearchingRepository { get; }
    internal static string SettingConfigurationToNull { get; }
    internal static string SkippedDownloadedPackage { get; }
    internal static string SourceIsADirectory { get; }
    internal static string SourceIsAFilePath { get; }
    internal static string SourceLocationNotValid { get; }
    internal static string SuccessfullyDownloaded { get; }
    internal static string SuccessfullyInstalled { get; }
    internal static string SuccessfullyValidated { get; }
    internal static string TotalPackageYield { get; }
    internal static string TypeMustBeASemanticVersion { get; }
    internal static string UnableToInstallPackage { get; }
    internal static string UnableToResolveDependency { get; }
    internal static string UnableToResolveSource { get; }
    internal static string UnexpectedFileType { get; }
    internal static string UninstalledPackage { get; }
    internal static string UnknownCategory { get; }
    internal static string Unzipping { get; }
    internal static string UriSchemeNotSupported { get; }
    internal static string UseDefaultConfig { get; }
    internal static string VariableCheck { get; }
    internal static string Yielding { get; }
    internal static string YieldingPackageSource { get; }
    internal static string FailedToCreateDownloadUri { get; }
    internal static string JsonSchemaMismatch { get; }
    internal static string JsonObjectDump { get; }
    internal static string FailedToParseTotalHitsCount { get; }
    internal static string NuGetEndpointDiscovered { get; }
    internal static string NuGetEndpointDiscoveryFailed { get; }
    internal static string TotalPackagesDiscovered { get; }
    internal static string NuGetServerReadStarted { get; }
    internal static string NuGetServerReadProgress { get; }
    internal static string VersionIndexDownloadFailed { get; }
    internal static string AllVersionsSearchNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessPermissionDenied();
    internal static string get_AlreadyInstalled();
    internal static string get_CompletedDownload();
    internal static string get_CompletedIterating();
    internal static string get_CopyUnzippedFiles();
    internal static string get_CouldNotGetResponseFromQuery();
    internal static string get_CreateDirectory();
    internal static string get_CreateFile();
    internal static string get_DebugInfoCallMethod();
    internal static string get_DebugInfoCallMethod3();
    internal static string get_DebugInfoReturnCall();
    internal static string get_DependencyHasBothElements();
    internal static string get_DependencyLoopDetected();
    internal static string get_DependentPackageFailedInstallOrDownload();
    internal static string get_DownloadingPackage();
    internal static string get_DownloadingProgress();
    internal static string get_FailedDownloadPackage();
    internal static string get_FileNotFound();
    internal static string get_FinishInstalling();
    internal static string get_FoundRegisteredSource();
    internal static string get_FoundTotalRegisteredSource();
    internal static string get_HashAlgorithmNotSupported();
    internal static string get_HashNotFound();
    internal static string get_HashNotMatch();
    internal static string get_HashNotSupported();
    internal static string get_HeaderIgnored();
    internal static string get_IncompleteDownload();
    internal static string get_InstalledOrDownloadedDependencyPackage();
    internal static string get_InstallingOrDownloadingDependencyPackage();
    internal static string get_InstallingOrDownloadingPackage();
    internal static string get_InstallRequiresCurrentUserScopeParameterForNonAdminUser();
    internal static string get_InstallRequiresCurrentUserScopeParameterForNonSudoUser();
    internal static string get_InvalidFileExtension();
    internal static string get_InvalidNuspec();
    internal static string get_InvalidPackage();
    internal static string get_InvalidPackageSaveModeArgument();
    internal static string get_InvalidQueryUrl();
    internal static string get_InvalidVersionString();
    internal static string get_Iterating();
    internal static string get_LoadedConfigurationFile();
    internal static string get_LoadingConfigurationFile();
    internal static string get_ManifestRequiredXmlElementMissing();
    internal static string get_MissingConfigurationElement();
    internal static string get_NotFoundRegisteredSource();
    internal static string get_NuspecRequiredXmlElementMissing();
    internal static string get_PackageFailedInstallOrDownload();
    internal static string get_PackageFailedToInstallReason();
    internal static string get_PackagesReceived();
    internal static string get_ReadingManifest();
    internal static string get_RegisteredSources();
    internal static string get_RemovedPackageSource();
    internal static string get_RequestCanceled();
    internal static string get_RetryingDownload();
    internal static string get_SavingConfigurationWithFile();
    internal static string get_SearchingRepository();
    internal static string get_SettingConfigurationToNull();
    internal static string get_SkippedDownloadedPackage();
    internal static string get_SourceIsADirectory();
    internal static string get_SourceIsAFilePath();
    internal static string get_SourceLocationNotValid();
    internal static string get_SuccessfullyDownloaded();
    internal static string get_SuccessfullyInstalled();
    internal static string get_SuccessfullyValidated();
    internal static string get_TotalPackageYield();
    internal static string get_TypeMustBeASemanticVersion();
    internal static string get_UnableToInstallPackage();
    internal static string get_UnableToResolveDependency();
    internal static string get_UnableToResolveSource();
    internal static string get_UnexpectedFileType();
    internal static string get_UninstalledPackage();
    internal static string get_UnknownCategory();
    internal static string get_Unzipping();
    internal static string get_UriSchemeNotSupported();
    internal static string get_UseDefaultConfig();
    internal static string get_VariableCheck();
    internal static string get_Yielding();
    internal static string get_YieldingPackageSource();
    internal static string get_FailedToCreateDownloadUri();
    internal static string get_JsonSchemaMismatch();
    internal static string get_JsonObjectDump();
    internal static string get_FailedToParseTotalHitsCount();
    internal static string get_NuGetEndpointDiscovered();
    internal static string get_NuGetEndpointDiscoveryFailed();
    internal static string get_TotalPackagesDiscovered();
    internal static string get_NuGetServerReadStarted();
    internal static string get_NuGetServerReadProgress();
    internal static string get_VersionIndexDownloadFailed();
    internal static string get_AllVersionsSearchNotSupported();
}
[ExtensionAttribute]
internal static class Microsoft.PackageManagement.NuGetProvider.StringExtensions : object {
    [ExtensionAttribute]
internal static string MakeFindPackageByIdQuery(string packageId, string urlFormat);
    [ExtensionAttribute]
internal static string MakeSearchQuery(string searchTerm, string baseUrl, bool allowPrereleaseVersions, bool allVersions);
    [ExtensionAttribute]
internal static string InsertSkipAndTop(string query);
}
internal class Microsoft.PackageManagement.NuGetProvider.TaskGroup`1 : object {
    private List`1<Task`1<TResult>> tasks;
    public bool HasAny { get; }
    public bool get_HasAny();
    public void Add(Task`1<TResult> task);
    public TResult WaitAny();
}
internal class Microsoft.PackageManagement.NuGetProvider.Utility.ProgressTracker : object {
    private static Random randomGen;
    internal int ProgressID;
    internal int StartPercent;
    internal int EndPercent;
    internal ProgressTracker(int progressID);
    internal ProgressTracker(int progressID, int startPercent, int endPercent);
    private static ProgressTracker();
    internal int ConvertPercentToProgress(double percent);
    internal static ProgressTracker StartProgress(ProgressTracker parentTracker, string message, NuGetRequest request);
    internal static int GetRandomId();
}
