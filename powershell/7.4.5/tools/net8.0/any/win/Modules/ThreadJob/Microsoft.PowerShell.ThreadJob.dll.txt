[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ThreadJob.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotParseScriptFile { get; }
    internal static string CannotStartJob { get; }
    internal static string FilePathExt { get; }
    internal static string FilePathWildcards { get; }
    internal static string NoScriptToRun { get; }
    internal static string UsingNotVariableExpression { get; }
    internal static string UsingVariableNotFound { get; }
    internal static string CannotRunTrustedFileInFL { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotParseScriptFile();
    internal static string get_CannotStartJob();
    internal static string get_FilePathExt();
    internal static string get_FilePathWildcards();
    internal static string get_NoScriptToRun();
    internal static string get_UsingNotVariableExpression();
    internal static string get_UsingVariableNotFound();
    internal static string get_CannotRunTrustedFileInFL();
}
[CmdletAttribute("Start", "ThreadJob")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ThreadJob.StartThreadJobCommand : PSCmdlet {
    private bool _processFirstRecord;
    private string _command;
    private string _currentLocationPath;
    private ThreadJob _threadJob;
    private static string ScriptBlockParameterSet;
    private static string FilePathParameterSet;
    [CompilerGeneratedAttribute]
private ScriptBlock <ScriptBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptBlock <InitializationScript>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ArgumentList>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThrottleLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private PSHost <StreamingHost>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullAttribute]
public ScriptBlock ScriptBlock { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public ScriptBlock InitializationScript { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Object[] ArgumentList { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int ThrottleLimit { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public PSHost StreamingHost { get; public set; }
    [CompilerGeneratedAttribute]
public ScriptBlock get_ScriptBlock();
    [CompilerGeneratedAttribute]
public void set_ScriptBlock(ScriptBlock value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ScriptBlock get_InitializationScript();
    [CompilerGeneratedAttribute]
public void set_InitializationScript(ScriptBlock value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public Object[] get_ArgumentList();
    [CompilerGeneratedAttribute]
public void set_ArgumentList(Object[] value);
    [CompilerGeneratedAttribute]
public int get_ThrottleLimit();
    [CompilerGeneratedAttribute]
public void set_ThrottleLimit(int value);
    [CompilerGeneratedAttribute]
public PSHost get_StreamingHost();
    [CompilerGeneratedAttribute]
public void set_StreamingHost(PSHost value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class ThreadJob.ThreadJob : Job2 {
    private ScriptBlock _sb;
    private string _filePath;
    private ScriptBlock _initSb;
    private Object[] _argumentList;
    private Dictionary`2<string, object> _usingValuesMap;
    private PSDataCollection`1<object> _input;
    private Runspace _rs;
    private PowerShell _ps;
    private PSDataCollection`1<PSObject> _output;
    private bool _runningInitScript;
    private PSHost _streamingHost;
    private Debugger _jobDebugger;
    private string _currentLocationPath;
    private static string VERBATIM_ARGUMENT;
    private static ThreadJobQueue s_JobQueue;
    [CompilerGeneratedAttribute]
private JobDefinition <ThreadJobDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public JobDefinition ThreadJobDefinition { get; private set; }
    public string StatusMessage { get; }
    public bool HasMoreData { get; }
    public string Location { get; }
    public Debugger Debugger { get; }
    public bool IsAsync { get; public set; }
    private static ThreadJob();
    public ThreadJob(string name, string command, ScriptBlock sb, string filePath, ScriptBlock initSb, Object[] argumentList, PSObject inputObject, PSCmdlet psCmdlet, string currentLocationPath);
    public ThreadJob(string name, string command, ScriptBlock sb, string filePath, ScriptBlock initSb, Object[] argumentList, PSObject inputObject, PSCmdlet psCmdlet, string currentLocationPath, PSHost streamingHost);
    [CompilerGeneratedAttribute]
public JobDefinition get_ThreadJobDefinition();
    [CompilerGeneratedAttribute]
private void set_ThreadJobDefinition(JobDefinition value);
    public virtual void StartJob();
    public void InjectInput(PSObject psObject);
    public void CloseInputStream();
    public static void StartJob(ThreadJob job, int throttleLimit);
    protected virtual void Dispose(bool disposing);
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    public virtual string get_Location();
    public virtual void StopJob();
    public void ReportError(Exception e);
    protected virtual void OnStartJobCompleted(AsyncCompletedEventArgs eventArgs);
    public virtual void StartJobAsync();
    public virtual void StopJob(bool force, string reason);
    protected virtual void OnStopJobCompleted(AsyncCompletedEventArgs eventArgs);
    public virtual void StopJobAsync();
    public virtual void StopJobAsync(bool force, string reason);
    public virtual void SuspendJob();
    public virtual void SuspendJob(bool force, string reason);
    public virtual void ResumeJobAsync();
    public virtual void ResumeJob();
    public virtual void SuspendJobAsync();
    public virtual void SuspendJobAsync(bool force, string reason);
    public virtual void UnblockJobAsync();
    public virtual void UnblockJob();
    public sealed virtual Debugger get_Debugger();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAsync(bool value);
    private void RunScript();
    private ScriptBlock GetScriptBlockFromFile(string filePath, PSCmdlet psCmdlet);
    private void SetJobState(JobState jobState, Exception reason, bool disposeRunspace);
    private static Dictionary`2<string, object> GetUsingValuesAsDictionary(IEnumerable`1<UsingExpressionAst> usingAsts, PSCmdlet psCmdlet);
    private static string GetUsingExpressionKey(UsingExpressionAst usingAst);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0(object sender, PSInvocationStateChangedEventArgs psStateChanged);
    [CompilerGeneratedAttribute]
private void <StopJobAsync>b__40_0(IAsyncResult iasync);
    [CompilerGeneratedAttribute]
private void <StopJobAsync>b__41_0(IAsyncResult iasync);
}
internal class ThreadJob.ThreadJobDebugger : Debugger {
    private Debugger _wrappedDebugger;
    private string _jobName;
    public bool InBreakpoint { get; }
    public ThreadJobDebugger(Debugger debugger, string jobName);
    public virtual DebuggerCommandResults ProcessCommand(PSCommand command, PSDataCollection`1<PSObject> output);
    public virtual void SetBreakpoints(IEnumerable`1<Breakpoint> breakpoints);
    public virtual void SetDebuggerAction(DebuggerResumeAction resumeAction);
    public virtual void StopProcessCommand();
    public virtual DebuggerStopEventArgs GetDebuggerStopArgs();
    public virtual void SetParent(Debugger parent, IEnumerable`1<Breakpoint> breakPoints, Nullable`1<DebuggerResumeAction> startAction, PSHost host, PathInfo path);
    public virtual void SetDebugMode(DebugModes mode);
    public virtual IEnumerable`1<CallStackFrame> GetCallStack();
    public virtual void SetDebuggerStepMode(bool enabled);
    public virtual bool get_InBreakpoint();
    private void HandleDebuggerStop(object sender, DebuggerStopEventArgs e);
    private void HandleBreakpointUpdated(object sender, BreakpointUpdatedEventArgs e);
    private DebuggerCommandResults HandlePromptCommand(PSDataCollection`1<PSObject> output);
}
internal class ThreadJob.ThreadJobQueue : object {
    private ConcurrentQueue`1<ThreadJob> _jobQueue;
    private object _syncObject;
    private int _throttleLimit;
    private int _currentJobs;
    private bool _haveRunningJobs;
    private ManualResetEvent _processJobsHandle;
    public int ThrottleLimit { get; public set; }
    public int CurrentJobs { get; }
    public int Count { get; }
    public ThreadJobQueue(int throttleLimit);
    public int get_ThrottleLimit();
    public void set_ThrottleLimit(int value);
    public int get_CurrentJobs();
    public int get_Count();
    public void EnqueueJob(ThreadJob job, int throttleLimit);
    private void HandleJobStateChanged(object sender, JobStateEventArgs e);
    private void IncrementCurrentJobs();
    private void DecrementCurrentJobs();
    private void ServiceJobs(object toProcess);
}
public class ThreadJob.ThreadJobSourceAdapter : JobSourceAdapter {
    private ConcurrentDictionary`2<Guid, Job2> _repository;
    public virtual Job2 NewJob(JobInvocationInfo specification);
    public virtual IList`1<Job2> GetJobs();
    public virtual IList`1<Job2> GetJobsByName(string name, bool recurse);
    public virtual IList`1<Job2> GetJobsByCommand(string command, bool recurse);
    public virtual Job2 GetJobByInstanceId(Guid instanceId, bool recurse);
    public virtual Job2 GetJobBySessionId(int id, bool recurse);
    public virtual IList`1<Job2> GetJobsByState(JobState state, bool recurse);
    public virtual IList`1<Job2> GetJobsByFilter(Dictionary`2<string, object> filter, bool recurse);
    public virtual void RemoveJob(Job2 job);
}
