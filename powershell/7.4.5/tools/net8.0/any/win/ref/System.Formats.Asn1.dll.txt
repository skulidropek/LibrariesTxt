[IsReadOnlyAttribute]
public class System.Formats.Asn1.Asn1Tag : ValueType {
    private int _dummyPrimitive;
    public static Asn1Tag Boolean;
    public static Asn1Tag ConstructedBitString;
    public static Asn1Tag ConstructedOctetString;
    public static Asn1Tag Enumerated;
    public static Asn1Tag GeneralizedTime;
    public static Asn1Tag Integer;
    public static Asn1Tag Null;
    public static Asn1Tag ObjectIdentifier;
    public static Asn1Tag PrimitiveBitString;
    public static Asn1Tag PrimitiveOctetString;
    public static Asn1Tag Sequence;
    public static Asn1Tag SetOf;
    public static Asn1Tag UtcTime;
    public bool IsConstructed { get; }
    public TagClass TagClass { get; }
    public int TagValue { get; }
    public Asn1Tag(TagClass tagClass, int tagValue, bool isConstructed);
    public Asn1Tag(UniversalTagNumber universalTagNumber, bool isConstructed);
    public bool get_IsConstructed();
    public TagClass get_TagClass();
    public int get_TagValue();
    public Asn1Tag AsConstructed();
    public Asn1Tag AsPrimitive();
    public int CalculateEncodedSize();
    public static Asn1Tag Decode(ReadOnlySpan`1<byte> source, Int32& bytesConsumed);
    public int Encode(Span`1<byte> destination);
    public sealed virtual bool Equals(Asn1Tag other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool HasSameClassAndValue(Asn1Tag other);
    public static bool op_Equality(Asn1Tag left, Asn1Tag right);
    public static bool op_Inequality(Asn1Tag left, Asn1Tag right);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool TryDecode(ReadOnlySpan`1<byte> source, Asn1Tag& tag, Int32& bytesConsumed);
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Formats.Asn1.AsnContentException : Exception {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected AsnContentException(SerializationInfo info, StreamingContext context);
    public AsnContentException(string message);
    public AsnContentException(string message, Exception inner);
}
public static class System.Formats.Asn1.AsnDecoder : object {
    public static Byte[] ReadBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& unusedBitCount, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool ReadBoolean(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static string ReadCharacterString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UniversalTagNumber encodingType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static Asn1Tag ReadEncodedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed);
    public static ReadOnlySpan`1<byte> ReadEnumeratedBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public static Enum ReadEnumeratedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Type enumType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static TEnum ReadEnumeratedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static DateTimeOffset ReadGeneralizedTime(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static BigInteger ReadInteger(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static ReadOnlySpan`1<byte> ReadIntegerBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static BitArray ReadNamedBitList(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public static Enum ReadNamedBitListValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Type flagsEnumType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static TFlagsEnum ReadNamedBitListValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static void ReadNull(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static string ReadObjectIdentifier(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static Byte[] ReadOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static void ReadSequence(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static void ReadSetOf(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed, bool skipSortOrderValidation, Nullable`1<Asn1Tag> expectedTag);
    public static DateTimeOffset ReadUtcTime(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, int twoDigitYearMax, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadBitString(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Int32& unusedBitCount, Int32& bytesConsumed, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadCharacterString(ReadOnlySpan`1<byte> source, Span`1<char> destination, AsnEncodingRules ruleSet, UniversalTagNumber encodingType, Int32& bytesConsumed, Int32& charsWritten, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadCharacterStringBytes(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Asn1Tag expectedTag, Int32& bytesConsumed, Int32& bytesWritten);
    public static bool TryReadEncodedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag& tag, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed);
    public static bool TryReadInt32(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadInt64(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int64& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadOctetString(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Int32& bytesConsumed, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadPrimitiveBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& unusedBitCount, ReadOnlySpan`1& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadPrimitiveCharacterStringBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, ReadOnlySpan`1& value, Int32& bytesConsumed);
    public static bool TryReadPrimitiveOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, ReadOnlySpan`1& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public static bool TryReadUInt32(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UInt32& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public static bool TryReadUInt64(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UInt64& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
}
public enum System.Formats.Asn1.AsnEncodingRules : Enum {
    public int value__;
    public static AsnEncodingRules BER;
    public static AsnEncodingRules CER;
    public static AsnEncodingRules DER;
}
public class System.Formats.Asn1.AsnReader : object {
    public bool HasData { get; }
    public AsnEncodingRules RuleSet { get; }
    public AsnReader(ReadOnlyMemory`1<byte> data, AsnEncodingRules ruleSet, AsnReaderOptions options);
    public bool get_HasData();
    public AsnEncodingRules get_RuleSet();
    [NullableContextAttribute("1")]
public AsnReader Clone();
    public ReadOnlyMemory`1<byte> PeekContentBytes();
    public ReadOnlyMemory`1<byte> PeekEncodedValue();
    public Asn1Tag PeekTag();
    [NullableContextAttribute("1")]
public Byte[] ReadBitString(Int32& unusedBitCount, Nullable`1<Asn1Tag> expectedTag);
    public bool ReadBoolean(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public string ReadCharacterString(UniversalTagNumber encodingType, Nullable`1<Asn1Tag> expectedTag);
    public ReadOnlyMemory`1<byte> ReadEncodedValue();
    public ReadOnlyMemory`1<byte> ReadEnumeratedBytes(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Enum ReadEnumeratedValue(Type enumType, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public TEnum ReadEnumeratedValue(Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadGeneralizedTime(Nullable`1<Asn1Tag> expectedTag);
    public BigInteger ReadInteger(Nullable`1<Asn1Tag> expectedTag);
    public ReadOnlyMemory`1<byte> ReadIntegerBytes(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public BitArray ReadNamedBitList(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Enum ReadNamedBitListValue(Type flagsEnumType, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public TFlagsEnum ReadNamedBitListValue(Nullable`1<Asn1Tag> expectedTag);
    public void ReadNull(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public string ReadObjectIdentifier(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Byte[] ReadOctetString(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSequence(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSetOf(bool skipSortOrderValidation, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSetOf(Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadUtcTime(int twoDigitYearMax, Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadUtcTime(Nullable`1<Asn1Tag> expectedTag);
    public void ThrowIfNotEmpty();
    public bool TryReadBitString(Span`1<byte> destination, Int32& unusedBitCount, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadCharacterString(Span`1<char> destination, UniversalTagNumber encodingType, Int32& charsWritten, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadCharacterStringBytes(Span`1<byte> destination, Asn1Tag expectedTag, Int32& bytesWritten);
    public bool TryReadInt32(Int32& value, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadInt64(Int64& value, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadOctetString(Span`1<byte> destination, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadPrimitiveBitString(Int32& unusedBitCount, ReadOnlyMemory`1& value, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadPrimitiveCharacterStringBytes(Asn1Tag expectedTag, ReadOnlyMemory`1& contents);
    public bool TryReadPrimitiveOctetString(ReadOnlyMemory`1& contents, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public bool TryReadUInt32(UInt32& value, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public bool TryReadUInt64(UInt64& value, Nullable`1<Asn1Tag> expectedTag);
}
public class System.Formats.Asn1.AsnReaderOptions : ValueType {
    private int _dummyPrimitive;
    public bool SkipSetSortOrderVerification { get; public set; }
    public int UtcTimeTwoDigitYearMax { get; public set; }
    [IsReadOnlyAttribute]
public bool get_SkipSetSortOrderVerification();
    public void set_SkipSetSortOrderVerification(bool value);
    public int get_UtcTimeTwoDigitYearMax();
    public void set_UtcTimeTwoDigitYearMax(int value);
}
public class System.Formats.Asn1.AsnWriter : object {
    public AsnEncodingRules RuleSet { get; }
    public AsnWriter(AsnEncodingRules ruleSet);
    public AsnWriter(AsnEncodingRules ruleSet, int initialCapacity);
    public AsnEncodingRules get_RuleSet();
    [NullableContextAttribute("1")]
public void CopyTo(AsnWriter destination);
    [NullableContextAttribute("1")]
public Byte[] Encode();
    public int Encode(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public bool EncodedValueEquals(AsnWriter other);
    public bool EncodedValueEquals(ReadOnlySpan`1<byte> other);
    public int GetEncodedLength();
    public void PopOctetString(Nullable`1<Asn1Tag> tag);
    public void PopSequence(Nullable`1<Asn1Tag> tag);
    public void PopSetOf(Nullable`1<Asn1Tag> tag);
    public Scope PushOctetString(Nullable`1<Asn1Tag> tag);
    public Scope PushSequence(Nullable`1<Asn1Tag> tag);
    public Scope PushSetOf(Nullable`1<Asn1Tag> tag);
    public void Reset();
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
    public void WriteBitString(ReadOnlySpan`1<byte> value, int unusedBitCount, Nullable`1<Asn1Tag> tag);
    public void WriteBoolean(bool value, Nullable`1<Asn1Tag> tag);
    public void WriteCharacterString(UniversalTagNumber encodingType, ReadOnlySpan`1<char> str, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteCharacterString(UniversalTagNumber encodingType, string value, Nullable`1<Asn1Tag> tag);
    public void WriteEncodedValue(ReadOnlySpan`1<byte> value);
    [NullableContextAttribute("1")]
public void WriteEnumeratedValue(Enum value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteEnumeratedValue(TEnum value, Nullable`1<Asn1Tag> tag);
    public void WriteGeneralizedTime(DateTimeOffset value, bool omitFractionalSeconds, Nullable`1<Asn1Tag> tag);
    public void WriteInteger(long value, Nullable`1<Asn1Tag> tag);
    public void WriteInteger(BigInteger value, Nullable`1<Asn1Tag> tag);
    public void WriteInteger(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    [CLSCompliantAttribute("False")]
public void WriteInteger(ulong value, Nullable`1<Asn1Tag> tag);
    public void WriteIntegerUnsigned(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(BitArray value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(Enum value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(TEnum value, Nullable`1<Asn1Tag> tag);
    public void WriteNull(Nullable`1<Asn1Tag> tag);
    public void WriteObjectIdentifier(ReadOnlySpan`1<char> oidValue, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteObjectIdentifier(string oidValue, Nullable`1<Asn1Tag> tag);
    public void WriteOctetString(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    public void WriteUtcTime(DateTimeOffset value, int twoDigitYearMax, Nullable`1<Asn1Tag> tag);
    public void WriteUtcTime(DateTimeOffset value, Nullable`1<Asn1Tag> tag);
}
public enum System.Formats.Asn1.TagClass : Enum {
    public int value__;
    public static TagClass Universal;
    public static TagClass Application;
    public static TagClass ContextSpecific;
    public static TagClass Private;
}
public enum System.Formats.Asn1.UniversalTagNumber : Enum {
    public int value__;
    public static UniversalTagNumber EndOfContents;
    public static UniversalTagNumber Boolean;
    public static UniversalTagNumber Integer;
    public static UniversalTagNumber BitString;
    public static UniversalTagNumber OctetString;
    public static UniversalTagNumber Null;
    public static UniversalTagNumber ObjectIdentifier;
    public static UniversalTagNumber ObjectDescriptor;
    public static UniversalTagNumber External;
    public static UniversalTagNumber InstanceOf;
    public static UniversalTagNumber Real;
    public static UniversalTagNumber Enumerated;
    public static UniversalTagNumber Embedded;
    public static UniversalTagNumber UTF8String;
    public static UniversalTagNumber RelativeObjectIdentifier;
    public static UniversalTagNumber Time;
    public static UniversalTagNumber Sequence;
    public static UniversalTagNumber SequenceOf;
    public static UniversalTagNumber Set;
    public static UniversalTagNumber SetOf;
    public static UniversalTagNumber NumericString;
    public static UniversalTagNumber PrintableString;
    public static UniversalTagNumber T61String;
    public static UniversalTagNumber TeletexString;
    public static UniversalTagNumber VideotexString;
    public static UniversalTagNumber IA5String;
    public static UniversalTagNumber UtcTime;
    public static UniversalTagNumber GeneralizedTime;
    public static UniversalTagNumber GraphicString;
    public static UniversalTagNumber ISO646String;
    public static UniversalTagNumber VisibleString;
    public static UniversalTagNumber GeneralString;
    public static UniversalTagNumber UniversalString;
    public static UniversalTagNumber UnrestrictedCharacterString;
    public static UniversalTagNumber BMPString;
    public static UniversalTagNumber Date;
    public static UniversalTagNumber TimeOfDay;
    public static UniversalTagNumber DateTime;
    public static UniversalTagNumber Duration;
    public static UniversalTagNumber ObjectIdentifierIRI;
    public static UniversalTagNumber RelativeObjectIdentifierIRI;
}
