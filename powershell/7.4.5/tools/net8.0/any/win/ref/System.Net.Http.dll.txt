[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.ByteArrayContent : HttpContent {
    public ByteArrayContent(Byte[] content);
    public ByteArrayContent(Byte[] content, int offset, int count);
    protected virtual Stream CreateContentReadStream(CancellationToken cancellationToken);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected internal virtual bool TryComputeLength(Int64& length);
}
public enum System.Net.Http.ClientCertificateOption : Enum {
    public int value__;
    public static ClientCertificateOption Manual;
    public static ClientCertificateOption Automatic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.Http.DelegatingHandler : HttpMessageHandler {
    [NullableAttribute("2")]
public HttpMessageHandler InnerHandler { get; public set; }
    protected DelegatingHandler(HttpMessageHandler innerHandler);
    [NullableContextAttribute("2")]
public HttpMessageHandler get_InnerHandler();
    [NullableContextAttribute("2")]
public void set_InnerHandler(HttpMessageHandler value);
    protected virtual void Dispose(bool disposing);
    protected internal virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    protected internal virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.FormUrlEncodedContent : ByteArrayContent {
    public FormUrlEncodedContent(IEnumerable`1<KeyValuePair`2<string, string>> nameValueCollection);
    [NullableContextAttribute("1")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
}
public class System.Net.Http.HeaderEncodingSelector`1 : MulticastDelegate {
    public HeaderEncodingSelector`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Encoding Invoke(string headerName, TContext context);
    public virtual IAsyncResult BeginInvoke(string headerName, TContext context, AsyncCallback callback, object object);
    public virtual Encoding EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.AuthenticationHeaderValue : object {
    [NullableAttribute("2")]
public string Parameter { get; }
    public string Scheme { get; }
    public AuthenticationHeaderValue(string scheme);
    public AuthenticationHeaderValue(string scheme, string parameter);
    [NullableContextAttribute("2")]
public string get_Parameter();
    public string get_Scheme();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static AuthenticationHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, AuthenticationHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.CacheControlHeaderValue : object {
    public ICollection`1<NameValueHeaderValue> Extensions { get; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public bool MaxStale { get; public set; }
    public Nullable`1<TimeSpan> MaxStaleLimit { get; public set; }
    public Nullable`1<TimeSpan> MinFresh { get; public set; }
    public bool MustRevalidate { get; public set; }
    public bool NoCache { get; public set; }
    public ICollection`1<string> NoCacheHeaders { get; }
    public bool NoStore { get; public set; }
    public bool NoTransform { get; public set; }
    public bool OnlyIfCached { get; public set; }
    public bool Private { get; public set; }
    public ICollection`1<string> PrivateHeaders { get; }
    public bool ProxyRevalidate { get; public set; }
    public bool Public { get; public set; }
    public Nullable`1<TimeSpan> SharedMaxAge { get; public set; }
    public ICollection`1<NameValueHeaderValue> get_Extensions();
    public Nullable`1<TimeSpan> get_MaxAge();
    public void set_MaxAge(Nullable`1<TimeSpan> value);
    public bool get_MaxStale();
    public void set_MaxStale(bool value);
    public Nullable`1<TimeSpan> get_MaxStaleLimit();
    public void set_MaxStaleLimit(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MinFresh();
    public void set_MinFresh(Nullable`1<TimeSpan> value);
    public bool get_MustRevalidate();
    public void set_MustRevalidate(bool value);
    public bool get_NoCache();
    public void set_NoCache(bool value);
    public ICollection`1<string> get_NoCacheHeaders();
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public bool get_NoTransform();
    public void set_NoTransform(bool value);
    public bool get_OnlyIfCached();
    public void set_OnlyIfCached(bool value);
    public bool get_Private();
    public void set_Private(bool value);
    public ICollection`1<string> get_PrivateHeaders();
    public bool get_ProxyRevalidate();
    public void set_ProxyRevalidate(bool value);
    public bool get_Public();
    public void set_Public(bool value);
    public Nullable`1<TimeSpan> get_SharedMaxAge();
    public void set_SharedMaxAge(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CacheControlHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, CacheControlHeaderValue& parsedValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.ContentDispositionHeaderValue : object {
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    [NullableAttribute("1")]
public string DispositionType { get; public set; }
    public string FileName { get; public set; }
    public string FileNameStar { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("1")]
public ICollection`1<NameValueHeaderValue> Parameters { get; }
    public Nullable`1<DateTimeOffset> ReadDate { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    [NullableContextAttribute("1")]
protected ContentDispositionHeaderValue(ContentDispositionHeaderValue source);
    [NullableContextAttribute("1")]
public ContentDispositionHeaderValue(string dispositionType);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    [NullableContextAttribute("1")]
public string get_DispositionType();
    [NullableContextAttribute("1")]
public void set_DispositionType(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_FileNameStar();
    public void set_FileNameStar(string value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("1")]
public ICollection`1<NameValueHeaderValue> get_Parameters();
    public Nullable`1<DateTimeOffset> get_ReadDate();
    public void set_ReadDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public static ContentDispositionHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool TryParse(string input, ContentDispositionHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.ContentRangeHeaderValue : object {
    public Nullable`1<long> From { get; }
    public bool HasLength { get; }
    public bool HasRange { get; }
    public Nullable`1<long> Length { get; }
    public Nullable`1<long> To { get; }
    public string Unit { get; public set; }
    public ContentRangeHeaderValue(long length);
    public ContentRangeHeaderValue(long from, long to);
    public ContentRangeHeaderValue(long from, long to, long length);
    public Nullable`1<long> get_From();
    public bool get_HasLength();
    public bool get_HasRange();
    public Nullable`1<long> get_Length();
    public Nullable`1<long> get_To();
    public string get_Unit();
    public void set_Unit(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ContentRangeHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, ContentRangeHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.EntityTagHeaderValue : object {
    public static EntityTagHeaderValue Any { get; }
    public bool IsWeak { get; }
    public string Tag { get; }
    public EntityTagHeaderValue(string tag);
    public EntityTagHeaderValue(string tag, bool isWeak);
    public static EntityTagHeaderValue get_Any();
    public bool get_IsWeak();
    public string get_Tag();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static EntityTagHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, EntityTagHeaderValue& parsedValue);
}
[IsReadOnlyAttribute]
public class System.Net.Http.Headers.HeaderStringValues : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.HttpContentHeaders : HttpHeaders {
    [NullableAttribute("1")]
public ICollection`1<string> Allow { get; }
    public ContentDispositionHeaderValue ContentDisposition { get; public set; }
    [NullableAttribute("1")]
public ICollection`1<string> ContentEncoding { get; }
    [NullableAttribute("1")]
public ICollection`1<string> ContentLanguage { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public Uri ContentLocation { get; public set; }
    public Byte[] ContentMD5 { get; public set; }
    public ContentRangeHeaderValue ContentRange { get; public set; }
    public MediaTypeHeaderValue ContentType { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    [NullableContextAttribute("1")]
public ICollection`1<string> get_Allow();
    public ContentDispositionHeaderValue get_ContentDisposition();
    public void set_ContentDisposition(ContentDispositionHeaderValue value);
    [NullableContextAttribute("1")]
public ICollection`1<string> get_ContentEncoding();
    [NullableContextAttribute("1")]
public ICollection`1<string> get_ContentLanguage();
    public Nullable`1<long> get_ContentLength();
    public void set_ContentLength(Nullable`1<long> value);
    public Uri get_ContentLocation();
    public void set_ContentLocation(Uri value);
    public Byte[] get_ContentMD5();
    public void set_ContentMD5(Byte[] value);
    public ContentRangeHeaderValue get_ContentRange();
    public void set_ContentRange(ContentRangeHeaderValue value);
    public MediaTypeHeaderValue get_ContentType();
    public void set_ContentType(MediaTypeHeaderValue value);
    public Nullable`1<DateTimeOffset> get_Expires();
    public void set_Expires(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public void set_LastModified(Nullable`1<DateTimeOffset> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.Http.Headers.HttpHeaders : object {
    public HttpHeadersNonValidated NonValidated { get; }
    public HttpHeadersNonValidated get_NonValidated();
    public void Add(string name, IEnumerable`1<string> values);
    public void Add(string name, string value);
    public void Clear();
    public bool Contains(string name);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    public IEnumerable`1<string> GetValues(string name);
    public bool Remove(string name);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public bool TryAddWithoutValidation(string name, IEnumerable`1<string> values);
    public bool TryAddWithoutValidation(string name, string value);
    public bool TryGetValues(string name, IEnumerable`1& values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Net.Http.Headers.HttpHeadersNonValidated : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public HeaderStringValues Item { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.Keys { get; }
    private IEnumerable`1<HeaderStringValues> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.Values { get; }
    public sealed virtual int get_Count();
    public sealed virtual HeaderStringValues get_Item(string headerName);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.get_Keys();
    private sealed virtual override IEnumerable`1<HeaderStringValues> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.get_Values();
    public bool Contains(string headerName);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.ContainsKey(string key);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, HeaderStringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Net.Http.Headers.HeaderStringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool TryGetValues(string headerName, HeaderStringValues& values);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Net.Http.Headers.HeaderStringValues>.TryGetValue(string key, HeaderStringValues& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.HttpHeaderValueCollection`1 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [NullableContextAttribute("2")]
public void ParseAdd(string input);
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public bool TryParseAdd(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.HttpRequestHeaders : HttpHeaders {
    public HttpHeaderValueCollection`1<MediaTypeWithQualityHeaderValue> Accept { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptCharset { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptEncoding { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptLanguage { get; }
    [NullableAttribute("2")]
public AuthenticationHeaderValue Authorization { get; public set; }
    [NullableAttribute("2")]
public CacheControlHeaderValue CacheControl { get; public set; }
    public HttpHeaderValueCollection`1<string> Connection { get; }
    public Nullable`1<bool> ConnectionClose { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public HttpHeaderValueCollection`1<NameValueWithParametersHeaderValue> Expect { get; }
    public Nullable`1<bool> ExpectContinue { get; public set; }
    [NullableAttribute("2")]
public string From { get; public set; }
    [NullableAttribute("2")]
public string Host { get; public set; }
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> IfMatch { get; }
    public Nullable`1<DateTimeOffset> IfModifiedSince { get; public set; }
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> IfNoneMatch { get; }
    [NullableAttribute("2")]
public RangeConditionHeaderValue IfRange { get; public set; }
    public Nullable`1<DateTimeOffset> IfUnmodifiedSince { get; public set; }
    public Nullable`1<int> MaxForwards { get; public set; }
    public HttpHeaderValueCollection`1<NameValueHeaderValue> Pragma { get; }
    [NullableAttribute("2")]
public string Protocol { get; public set; }
    [NullableAttribute("2")]
public AuthenticationHeaderValue ProxyAuthorization { get; public set; }
    [NullableAttribute("2")]
public RangeHeaderValue Range { get; public set; }
    [NullableAttribute("2")]
public Uri Referrer { get; public set; }
    public HttpHeaderValueCollection`1<TransferCodingWithQualityHeaderValue> TE { get; }
    public HttpHeaderValueCollection`1<string> Trailer { get; }
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> TransferEncoding { get; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public HttpHeaderValueCollection`1<ProductHeaderValue> Upgrade { get; }
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> UserAgent { get; }
    public HttpHeaderValueCollection`1<ViaHeaderValue> Via { get; }
    public HttpHeaderValueCollection`1<WarningHeaderValue> Warning { get; }
    public HttpHeaderValueCollection`1<MediaTypeWithQualityHeaderValue> get_Accept();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptCharset();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptEncoding();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptLanguage();
    [NullableContextAttribute("2")]
public AuthenticationHeaderValue get_Authorization();
    [NullableContextAttribute("2")]
public void set_Authorization(AuthenticationHeaderValue value);
    [NullableContextAttribute("2")]
public CacheControlHeaderValue get_CacheControl();
    [NullableContextAttribute("2")]
public void set_CacheControl(CacheControlHeaderValue value);
    public HttpHeaderValueCollection`1<string> get_Connection();
    public Nullable`1<bool> get_ConnectionClose();
    public void set_ConnectionClose(Nullable`1<bool> value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    public HttpHeaderValueCollection`1<NameValueWithParametersHeaderValue> get_Expect();
    public Nullable`1<bool> get_ExpectContinue();
    public void set_ExpectContinue(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
public string get_From();
    [NullableContextAttribute("2")]
public void set_From(string value);
    [NullableContextAttribute("2")]
public string get_Host();
    [NullableContextAttribute("2")]
public void set_Host(string value);
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> get_IfMatch();
    public Nullable`1<DateTimeOffset> get_IfModifiedSince();
    public void set_IfModifiedSince(Nullable`1<DateTimeOffset> value);
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> get_IfNoneMatch();
    [NullableContextAttribute("2")]
public RangeConditionHeaderValue get_IfRange();
    [NullableContextAttribute("2")]
public void set_IfRange(RangeConditionHeaderValue value);
    public Nullable`1<DateTimeOffset> get_IfUnmodifiedSince();
    public void set_IfUnmodifiedSince(Nullable`1<DateTimeOffset> value);
    public Nullable`1<int> get_MaxForwards();
    public void set_MaxForwards(Nullable`1<int> value);
    public HttpHeaderValueCollection`1<NameValueHeaderValue> get_Pragma();
    [NullableContextAttribute("2")]
public string get_Protocol();
    [NullableContextAttribute("2")]
public void set_Protocol(string value);
    [NullableContextAttribute("2")]
public AuthenticationHeaderValue get_ProxyAuthorization();
    [NullableContextAttribute("2")]
public void set_ProxyAuthorization(AuthenticationHeaderValue value);
    [NullableContextAttribute("2")]
public RangeHeaderValue get_Range();
    [NullableContextAttribute("2")]
public void set_Range(RangeHeaderValue value);
    [NullableContextAttribute("2")]
public Uri get_Referrer();
    [NullableContextAttribute("2")]
public void set_Referrer(Uri value);
    public HttpHeaderValueCollection`1<TransferCodingWithQualityHeaderValue> get_TE();
    public HttpHeaderValueCollection`1<string> get_Trailer();
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> get_TransferEncoding();
    public Nullable`1<bool> get_TransferEncodingChunked();
    public void set_TransferEncodingChunked(Nullable`1<bool> value);
    public HttpHeaderValueCollection`1<ProductHeaderValue> get_Upgrade();
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> get_UserAgent();
    public HttpHeaderValueCollection`1<ViaHeaderValue> get_Via();
    public HttpHeaderValueCollection`1<WarningHeaderValue> get_Warning();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.HttpResponseHeaders : HttpHeaders {
    public HttpHeaderValueCollection`1<string> AcceptRanges { get; }
    public Nullable`1<TimeSpan> Age { get; public set; }
    [NullableAttribute("2")]
public CacheControlHeaderValue CacheControl { get; public set; }
    public HttpHeaderValueCollection`1<string> Connection { get; }
    public Nullable`1<bool> ConnectionClose { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    [NullableAttribute("2")]
public EntityTagHeaderValue ETag { get; public set; }
    [NullableAttribute("2")]
public Uri Location { get; public set; }
    public HttpHeaderValueCollection`1<NameValueHeaderValue> Pragma { get; }
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> ProxyAuthenticate { get; }
    [NullableAttribute("2")]
public RetryConditionHeaderValue RetryAfter { get; public set; }
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> Server { get; }
    public HttpHeaderValueCollection`1<string> Trailer { get; }
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> TransferEncoding { get; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public HttpHeaderValueCollection`1<ProductHeaderValue> Upgrade { get; }
    public HttpHeaderValueCollection`1<string> Vary { get; }
    public HttpHeaderValueCollection`1<ViaHeaderValue> Via { get; }
    public HttpHeaderValueCollection`1<WarningHeaderValue> Warning { get; }
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> WwwAuthenticate { get; }
    public HttpHeaderValueCollection`1<string> get_AcceptRanges();
    public Nullable`1<TimeSpan> get_Age();
    public void set_Age(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public CacheControlHeaderValue get_CacheControl();
    [NullableContextAttribute("2")]
public void set_CacheControl(CacheControlHeaderValue value);
    public HttpHeaderValueCollection`1<string> get_Connection();
    public Nullable`1<bool> get_ConnectionClose();
    public void set_ConnectionClose(Nullable`1<bool> value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    [NullableContextAttribute("2")]
public EntityTagHeaderValue get_ETag();
    [NullableContextAttribute("2")]
public void set_ETag(EntityTagHeaderValue value);
    [NullableContextAttribute("2")]
public Uri get_Location();
    [NullableContextAttribute("2")]
public void set_Location(Uri value);
    public HttpHeaderValueCollection`1<NameValueHeaderValue> get_Pragma();
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> get_ProxyAuthenticate();
    [NullableContextAttribute("2")]
public RetryConditionHeaderValue get_RetryAfter();
    [NullableContextAttribute("2")]
public void set_RetryAfter(RetryConditionHeaderValue value);
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> get_Server();
    public HttpHeaderValueCollection`1<string> get_Trailer();
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> get_TransferEncoding();
    public Nullable`1<bool> get_TransferEncodingChunked();
    public void set_TransferEncodingChunked(Nullable`1<bool> value);
    public HttpHeaderValueCollection`1<ProductHeaderValue> get_Upgrade();
    public HttpHeaderValueCollection`1<string> get_Vary();
    public HttpHeaderValueCollection`1<ViaHeaderValue> get_Via();
    public HttpHeaderValueCollection`1<WarningHeaderValue> get_Warning();
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> get_WwwAuthenticate();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.MediaTypeHeaderValue : object {
    public string CharSet { get; public set; }
    public string MediaType { get; public set; }
    [NullableAttribute("1")]
public ICollection`1<NameValueHeaderValue> Parameters { get; }
    [NullableContextAttribute("1")]
protected MediaTypeHeaderValue(MediaTypeHeaderValue source);
    [NullableContextAttribute("1")]
public MediaTypeHeaderValue(string mediaType);
    [NullableContextAttribute("1")]
public MediaTypeHeaderValue(string mediaType, string charSet);
    public string get_CharSet();
    public void set_CharSet(string value);
    public string get_MediaType();
    public void set_MediaType(string value);
    [NullableContextAttribute("1")]
public ICollection`1<NameValueHeaderValue> get_Parameters();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public static MediaTypeHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool TryParse(string input, MediaTypeHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue : MediaTypeHeaderValue {
    public Nullable`1<double> Quality { get; public set; }
    public MediaTypeWithQualityHeaderValue(string mediaType);
    public MediaTypeWithQualityHeaderValue(string mediaType, double quality);
    public Nullable`1<double> get_Quality();
    public void set_Quality(Nullable`1<double> value);
    public static MediaTypeWithQualityHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, MediaTypeWithQualityHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.NameValueHeaderValue : object {
    public string Name { get; }
    [NullableAttribute("2")]
public string Value { get; public set; }
    protected NameValueHeaderValue(NameValueHeaderValue source);
    public NameValueHeaderValue(string name);
    public NameValueHeaderValue(string name, string value);
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_Value();
    [NullableContextAttribute("2")]
public void set_Value(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static NameValueHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, NameValueHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.NameValueWithParametersHeaderValue : NameValueHeaderValue {
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    protected NameValueWithParametersHeaderValue(NameValueWithParametersHeaderValue source);
    public NameValueWithParametersHeaderValue(string name);
    public NameValueWithParametersHeaderValue(string name, string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static NameValueWithParametersHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, NameValueWithParametersHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.ProductHeaderValue : object {
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; }
    public ProductHeaderValue(string name);
    public ProductHeaderValue(string name, string version);
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_Version();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ProductHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, ProductHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.ProductInfoHeaderValue : object {
    [NullableAttribute("2")]
public string Comment { get; }
    [NullableAttribute("2")]
public ProductHeaderValue Product { get; }
    public ProductInfoHeaderValue(ProductHeaderValue product);
    public ProductInfoHeaderValue(string comment);
    public ProductInfoHeaderValue(string productName, string productVersion);
    [NullableContextAttribute("2")]
public string get_Comment();
    [NullableContextAttribute("2")]
public ProductHeaderValue get_Product();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ProductInfoHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    public static bool TryParse(string input, ProductInfoHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.RangeConditionHeaderValue : object {
    public Nullable`1<DateTimeOffset> Date { get; }
    [NullableAttribute("2")]
public EntityTagHeaderValue EntityTag { get; }
    public RangeConditionHeaderValue(DateTimeOffset date);
    public RangeConditionHeaderValue(EntityTagHeaderValue entityTag);
    public RangeConditionHeaderValue(string entityTag);
    public Nullable`1<DateTimeOffset> get_Date();
    [NullableContextAttribute("2")]
public EntityTagHeaderValue get_EntityTag();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeConditionHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, RangeConditionHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.RangeHeaderValue : object {
    public ICollection`1<RangeItemHeaderValue> Ranges { get; }
    public string Unit { get; public set; }
    public RangeHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    public ICollection`1<RangeItemHeaderValue> get_Ranges();
    public string get_Unit();
    public void set_Unit(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, RangeHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.RangeItemHeaderValue : object {
    public Nullable`1<long> From { get; }
    public Nullable`1<long> To { get; }
    public RangeItemHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    public Nullable`1<long> get_From();
    public Nullable`1<long> get_To();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class System.Net.Http.Headers.RetryConditionHeaderValue : object {
    public Nullable`1<DateTimeOffset> Date { get; }
    public Nullable`1<TimeSpan> Delta { get; }
    public RetryConditionHeaderValue(DateTimeOffset date);
    public RetryConditionHeaderValue(TimeSpan delta);
    public Nullable`1<DateTimeOffset> get_Date();
    public Nullable`1<TimeSpan> get_Delta();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public static RetryConditionHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, RetryConditionHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.StringWithQualityHeaderValue : object {
    public Nullable`1<double> Quality { get; }
    public string Value { get; }
    public StringWithQualityHeaderValue(string value);
    public StringWithQualityHeaderValue(string value, double quality);
    public Nullable`1<double> get_Quality();
    public string get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static StringWithQualityHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, StringWithQualityHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.TransferCodingHeaderValue : object {
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    public string Value { get; }
    protected TransferCodingHeaderValue(TransferCodingHeaderValue source);
    public TransferCodingHeaderValue(string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    public string get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TransferCodingHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, TransferCodingHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.TransferCodingWithQualityHeaderValue : TransferCodingHeaderValue {
    public Nullable`1<double> Quality { get; public set; }
    public TransferCodingWithQualityHeaderValue(string value);
    public TransferCodingWithQualityHeaderValue(string value, double quality);
    public Nullable`1<double> get_Quality();
    public void set_Quality(Nullable`1<double> value);
    public static TransferCodingWithQualityHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, TransferCodingWithQualityHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.ViaHeaderValue : object {
    [NullableAttribute("2")]
public string Comment { get; }
    [NullableAttribute("2")]
public string ProtocolName { get; }
    public string ProtocolVersion { get; }
    public string ReceivedBy { get; }
    public ViaHeaderValue(string protocolVersion, string receivedBy);
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName);
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment);
    [NullableContextAttribute("2")]
public string get_Comment();
    [NullableContextAttribute("2")]
public string get_ProtocolName();
    public string get_ProtocolVersion();
    public string get_ReceivedBy();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ViaHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, ViaHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Headers.WarningHeaderValue : object {
    public string Agent { get; }
    public int Code { get; }
    public Nullable`1<DateTimeOffset> Date { get; }
    public string Text { get; }
    public WarningHeaderValue(int code, string agent, string text);
    public WarningHeaderValue(int code, string agent, string text, DateTimeOffset date);
    public string get_Agent();
    public int get_Code();
    public Nullable`1<DateTimeOffset> get_Date();
    public string get_Text();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static WarningHeaderValue Parse(string input);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryParse(string input, WarningHeaderValue& parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpClient : HttpMessageInvoker {
    [NullableAttribute("2")]
public Uri BaseAddress { get; public set; }
    public static IWebProxy DefaultProxy { get; public set; }
    public HttpRequestHeaders DefaultRequestHeaders { get; }
    public Version DefaultRequestVersion { get; public set; }
    public HttpVersionPolicy DefaultVersionPolicy { get; public set; }
    public long MaxResponseContentBufferSize { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public HttpClient(HttpMessageHandler handler);
    public HttpClient(HttpMessageHandler handler, bool disposeHandler);
    [NullableContextAttribute("2")]
public Uri get_BaseAddress();
    [NullableContextAttribute("2")]
public void set_BaseAddress(Uri value);
    public static IWebProxy get_DefaultProxy();
    public static void set_DefaultProxy(IWebProxy value);
    public HttpRequestHeaders get_DefaultRequestHeaders();
    public Version get_DefaultRequestVersion();
    public void set_DefaultRequestVersion(Version value);
    public HttpVersionPolicy get_DefaultVersionPolicy();
    public void set_DefaultVersionPolicy(HttpVersionPolicy value);
    public long get_MaxResponseContentBufferSize();
    public void set_MaxResponseContentBufferSize(long value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public void CancelPendingRequests();
    public Task`1<HttpResponseMessage> DeleteAsync(string requestUri);
    public Task`1<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> DeleteAsync(Uri requestUri);
    public Task`1<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken);
    public Task`1<Byte[]> GetByteArrayAsync(string requestUri);
    public Task`1<Byte[]> GetByteArrayAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<Byte[]> GetByteArrayAsync(Uri requestUri);
    public Task`1<Byte[]> GetByteArrayAsync(Uri requestUri, CancellationToken cancellationToken);
    public Task`1<Stream> GetStreamAsync(string requestUri);
    public Task`1<Stream> GetStreamAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<Stream> GetStreamAsync(Uri requestUri);
    public Task`1<Stream> GetStreamAsync(Uri requestUri, CancellationToken cancellationToken);
    public Task`1<string> GetStringAsync(string requestUri);
    public Task`1<string> GetStringAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<string> GetStringAsync(Uri requestUri);
    public Task`1<string> GetStringAsync(Uri requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PatchAsync(Uri requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PatchAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content);
    [NullableContextAttribute("2")]
public Task`1<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public HttpResponseMessage Send(HttpRequestMessage request);
    [UnsupportedOSPlatformAttribute("browser")]
public HttpResponseMessage Send(HttpRequestMessage request, HttpCompletionOption completionOption);
    [UnsupportedOSPlatformAttribute("browser")]
public HttpResponseMessage Send(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.HttpClientHandler : HttpMessageHandler {
    public bool AllowAutoRedirect { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public DecompressionMethods AutomaticDecompression { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool CheckCertificateRevocationList { get; public set; }
    public ClientCertificateOption ClientCertificateOptions { get; public set; }
    [NullableAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public X509CertificateCollection ClientCertificates { get; }
    [NullableAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public CookieContainer CookieContainer { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public ICredentials Credentials { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
public static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> DangerousAcceptAnyServerCertificateValidator { get; }
    [UnsupportedOSPlatformAttribute("browser")]
public ICredentials DefaultProxyCredentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public int MaxAutomaticRedirections { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public int MaxConnectionsPerServer { get; public set; }
    public long MaxRequestContentBufferSize { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public int MaxResponseHeadersLength { get; public set; }
    [CLSCompliantAttribute("False")]
public IMeterFactory MeterFactory { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool PreAuthenticate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    [UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public SslProtocols SslProtocols { get; public set; }
    public bool SupportsAutomaticDecompression { get; }
    public bool SupportsProxy { get; }
    public bool SupportsRedirectConfiguration { get; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool UseCookies { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool UseDefaultCredentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool UseProxy { get; public set; }
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public DecompressionMethods get_AutomaticDecompression();
    public void set_AutomaticDecompression(DecompressionMethods value);
    public bool get_CheckCertificateRevocationList();
    public void set_CheckCertificateRevocationList(bool value);
    public ClientCertificateOption get_ClientCertificateOptions();
    public void set_ClientCertificateOptions(ClientCertificateOption value);
    [NullableContextAttribute("1")]
public X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("1")]
public CookieContainer get_CookieContainer();
    [NullableContextAttribute("1")]
public void set_CookieContainer(CookieContainer value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_DangerousAcceptAnyServerCertificateValidator();
    public ICredentials get_DefaultProxyCredentials();
    public void set_DefaultProxyCredentials(ICredentials value);
    public int get_MaxAutomaticRedirections();
    public void set_MaxAutomaticRedirections(int value);
    public int get_MaxConnectionsPerServer();
    public void set_MaxConnectionsPerServer(int value);
    public long get_MaxRequestContentBufferSize();
    public void set_MaxRequestContentBufferSize(long value);
    public int get_MaxResponseHeadersLength();
    public void set_MaxResponseHeadersLength(int value);
    public IMeterFactory get_MeterFactory();
    public void set_MeterFactory(IMeterFactory value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public IDictionary`2<string, object> get_Properties();
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ServerCertificateCustomValidationCallback();
    public void set_ServerCertificateCustomValidationCallback(Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    public SslProtocols get_SslProtocols();
    public void set_SslProtocols(SslProtocols value);
    public virtual bool get_SupportsAutomaticDecompression();
    public virtual bool get_SupportsProxy();
    public virtual bool get_SupportsRedirectConfiguration();
    public bool get_UseCookies();
    public void set_UseCookies(bool value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public bool get_UseProxy();
    public void set_UseProxy(bool value);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
protected internal virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected internal virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public enum System.Net.Http.HttpCompletionOption : Enum {
    public int value__;
    public static HttpCompletionOption ResponseContentRead;
    public static HttpCompletionOption ResponseHeadersRead;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.Http.HttpContent : object {
    public HttpContentHeaders Headers { get; }
    public HttpContentHeaders get_Headers();
    public void CopyTo(Stream stream, TransportContext context, CancellationToken cancellationToken);
    public Task CopyToAsync(Stream stream);
    public Task CopyToAsync(Stream stream, TransportContext context);
    public Task CopyToAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    public Task CopyToAsync(Stream stream, CancellationToken cancellationToken);
    protected virtual Stream CreateContentReadStream(CancellationToken cancellationToken);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual Task`1<Stream> CreateContentReadStreamAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public Task LoadIntoBufferAsync();
    public Task LoadIntoBufferAsync(long maxBufferSize);
    public Task`1<Byte[]> ReadAsByteArrayAsync();
    public Task`1<Byte[]> ReadAsByteArrayAsync(CancellationToken cancellationToken);
    public Stream ReadAsStream();
    public Stream ReadAsStream(CancellationToken cancellationToken);
    public Task`1<Stream> ReadAsStreamAsync();
    public Task`1<Stream> ReadAsStreamAsync(CancellationToken cancellationToken);
    public Task`1<string> ReadAsStringAsync();
    public Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected abstract virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected internal abstract virtual bool TryComputeLength(Int64& length);
}
public class System.Net.Http.HttpIOException : IOException {
    public HttpRequestError HttpRequestError { get; }
    [NullableContextAttribute("2")]
public HttpIOException(HttpRequestError httpRequestError, string message, Exception innerException);
    public HttpRequestError get_HttpRequestError();
}
public enum System.Net.Http.HttpKeepAlivePingPolicy : Enum {
    public int value__;
    public static HttpKeepAlivePingPolicy WithActiveRequests;
    public static HttpKeepAlivePingPolicy Always;
}
public abstract class System.Net.Http.HttpMessageHandler : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected internal virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected internal abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpMessageInvoker : object {
    public HttpMessageInvoker(HttpMessageHandler handler);
    public HttpMessageInvoker(HttpMessageHandler handler, bool disposeHandler);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [UnsupportedOSPlatformAttribute("browser")]
public virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    public virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpMethod : object {
    public static HttpMethod Delete { get; }
    public static HttpMethod Get { get; }
    public static HttpMethod Head { get; }
    public string Method { get; }
    public static HttpMethod Options { get; }
    public static HttpMethod Patch { get; }
    public static HttpMethod Post { get; }
    public static HttpMethod Put { get; }
    public static HttpMethod Trace { get; }
    public static HttpMethod Connect { get; }
    public HttpMethod(string method);
    public static HttpMethod get_Delete();
    public static HttpMethod get_Get();
    public static HttpMethod get_Head();
    public string get_Method();
    public static HttpMethod get_Options();
    public static HttpMethod get_Patch();
    public static HttpMethod get_Post();
    public static HttpMethod get_Put();
    public static HttpMethod get_Trace();
    public static HttpMethod get_Connect();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(HttpMethod other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(HttpMethod left, HttpMethod right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(HttpMethod left, HttpMethod right);
    [NullableContextAttribute("0")]
public static HttpMethod Parse(ReadOnlySpan`1<char> method);
    public virtual string ToString();
}
public class System.Net.Http.HttpProtocolException : HttpIOException {
    public long ErrorCode { get; }
    [NullableContextAttribute("2")]
public HttpProtocolException(long errorCode, string message, Exception innerException);
    public long get_ErrorCode();
}
public enum System.Net.Http.HttpRequestError : Enum {
    public int value__;
    public static HttpRequestError Unknown;
    public static HttpRequestError NameResolutionError;
    public static HttpRequestError ConnectionError;
    public static HttpRequestError SecureConnectionError;
    public static HttpRequestError HttpProtocolError;
    public static HttpRequestError ExtendedConnectNotSupported;
    public static HttpRequestError VersionNegotiationError;
    public static HttpRequestError UserAuthenticationError;
    public static HttpRequestError ProxyTunnelError;
    public static HttpRequestError InvalidResponse;
    public static HttpRequestError ResponseEnded;
    public static HttpRequestError ConfigurationLimitExceeded;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.HttpRequestException : Exception {
    public HttpRequestError HttpRequestError { get; }
    public Nullable`1<HttpStatusCode> StatusCode { get; }
    public HttpRequestException(string message);
    public HttpRequestException(string message, Exception inner);
    public HttpRequestException(string message, Exception inner, Nullable`1<HttpStatusCode> statusCode);
    public HttpRequestException(HttpRequestError httpRequestError, string message, Exception inner, Nullable`1<HttpStatusCode> statusCode);
    public HttpRequestError get_HttpRequestError();
    public Nullable`1<HttpStatusCode> get_StatusCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpRequestMessage : object {
    [NullableAttribute("2")]
public HttpContent Content { get; public set; }
    public HttpRequestHeaders Headers { get; }
    public HttpMethod Method { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("HttpRequestMessage.Properties has been deprecated. Use Options instead.")]
public IDictionary`2<string, object> Properties { get; }
    public HttpRequestOptions Options { get; }
    [NullableAttribute("2")]
public Uri RequestUri { get; public set; }
    public Version Version { get; public set; }
    public HttpVersionPolicy VersionPolicy { get; public set; }
    public HttpRequestMessage(HttpMethod method, string requestUri);
    public HttpRequestMessage(HttpMethod method, Uri requestUri);
    [NullableContextAttribute("2")]
public HttpContent get_Content();
    [NullableContextAttribute("2")]
public void set_Content(HttpContent value);
    public HttpRequestHeaders get_Headers();
    public HttpMethod get_Method();
    public void set_Method(HttpMethod value);
    public IDictionary`2<string, object> get_Properties();
    public HttpRequestOptions get_Options();
    [NullableContextAttribute("2")]
public Uri get_RequestUri();
    [NullableContextAttribute("2")]
public void set_RequestUri(Uri value);
    public Version get_Version();
    public void set_Version(Version value);
    public HttpVersionPolicy get_VersionPolicy();
    public void set_VersionPolicy(HttpVersionPolicy value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpRequestOptions : object {
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    [NullableAttribute("2")]
private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Item { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool TryGetValue(HttpRequestOptionsKey`1<TValue> key, TValue& value);
    public void Set(HttpRequestOptionsKey`1<TValue> key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    private sealed virtual override object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Net.Http.HttpRequestOptionsKey`1 : ValueType {
    public string Key { get; }
    public HttpRequestOptionsKey`1(string key);
    public string get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.HttpResponseMessage : object {
    public HttpContent Content { get; public set; }
    public HttpResponseHeaders Headers { get; }
    public bool IsSuccessStatusCode { get; }
    [NullableAttribute("2")]
public string ReasonPhrase { get; public set; }
    [NullableAttribute("2")]
public HttpRequestMessage RequestMessage { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public HttpResponseHeaders TrailingHeaders { get; }
    public Version Version { get; public set; }
    public HttpResponseMessage(HttpStatusCode statusCode);
    public HttpContent get_Content();
    public void set_Content(HttpContent value);
    public HttpResponseHeaders get_Headers();
    public bool get_IsSuccessStatusCode();
    [NullableContextAttribute("2")]
public string get_ReasonPhrase();
    [NullableContextAttribute("2")]
public void set_ReasonPhrase(string value);
    [NullableContextAttribute("2")]
public HttpRequestMessage get_RequestMessage();
    [NullableContextAttribute("2")]
public void set_RequestMessage(HttpRequestMessage value);
    public HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public HttpResponseHeaders get_TrailingHeaders();
    public Version get_Version();
    public void set_Version(Version value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public HttpResponseMessage EnsureSuccessStatusCode();
    public virtual string ToString();
}
public enum System.Net.Http.HttpVersionPolicy : Enum {
    public int value__;
    public static HttpVersionPolicy RequestVersionOrLower;
    public static HttpVersionPolicy RequestVersionOrHigher;
    public static HttpVersionPolicy RequestVersionExact;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.Http.MessageProcessingHandler : DelegatingHandler {
    protected MessageProcessingHandler(HttpMessageHandler innerHandler);
    protected abstract virtual HttpRequestMessage ProcessRequest(HttpRequestMessage request, CancellationToken cancellationToken);
    protected abstract virtual HttpResponseMessage ProcessResponse(HttpResponseMessage response, CancellationToken cancellationToken);
    protected internal sealed virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    protected internal sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Metrics.HttpMetricsEnrichmentContext : object {
    public HttpRequestMessage Request { get; }
    [NullableAttribute("2")]
public HttpResponseMessage Response { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public HttpRequestMessage get_Request();
    [NullableContextAttribute("2")]
public HttpResponseMessage get_Response();
    [NullableContextAttribute("2")]
public Exception get_Exception();
    public void AddCustomTag(string name, object value);
    public static void AddCallback(HttpRequestMessage request, Action`1<HttpMetricsEnrichmentContext> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.MultipartContent : HttpContent {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HeaderEncodingSelector`1<HttpContent> HeaderEncodingSelector { get; public set; }
    public MultipartContent(string subtype);
    public MultipartContent(string subtype, string boundary);
    public HeaderEncodingSelector`1<HttpContent> get_HeaderEncodingSelector();
    public void set_HeaderEncodingSelector(HeaderEncodingSelector`1<HttpContent> value);
    public virtual void Add(HttpContent content);
    protected virtual Stream CreateContentReadStream(CancellationToken cancellationToken);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual Task`1<Stream> CreateContentReadStreamAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual IEnumerator`1<HttpContent> GetEnumerator();
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected internal virtual bool TryComputeLength(Int64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.MultipartFormDataContent : MultipartContent {
    public MultipartFormDataContent(string boundary);
    public virtual void Add(HttpContent content);
    public void Add(HttpContent content, string name);
    public void Add(HttpContent content, string name, string fileName);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.ReadOnlyMemoryContent : HttpContent {
    [NullableContextAttribute("0")]
public ReadOnlyMemoryContent(ReadOnlyMemory`1<byte> content);
    protected virtual Stream CreateContentReadStream(CancellationToken cancellationToken);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected internal virtual bool TryComputeLength(Int64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.SocketsHttpConnectionContext : object {
    public DnsEndPoint DnsEndPoint { get; }
    public HttpRequestMessage InitialRequestMessage { get; }
    public DnsEndPoint get_DnsEndPoint();
    public HttpRequestMessage get_InitialRequestMessage();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Net.Http.SocketsHttpHandler : HttpMessageHandler {
    public int InitialHttp2StreamWindowSize { get; public set; }
    [UnsupportedOSPlatformGuardAttribute("browser")]
public static bool IsSupported { get; }
    public bool AllowAutoRedirect { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public TimeSpan ConnectTimeout { get; public set; }
    [NullableAttribute("1")]
public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public ICredentials DefaultProxyCredentials { get; public set; }
    public TimeSpan Expect100ContinueTimeout { get; public set; }
    public TimeSpan KeepAlivePingDelay { get; public set; }
    public TimeSpan KeepAlivePingTimeout { get; public set; }
    public HttpKeepAlivePingPolicy KeepAlivePingPolicy { get; public set; }
    public int MaxAutomaticRedirections { get; public set; }
    public int MaxConnectionsPerServer { get; public set; }
    public int MaxResponseDrainSize { get; public set; }
    public int MaxResponseHeadersLength { get; public set; }
    [CLSCompliantAttribute("False")]
public IMeterFactory MeterFactory { get; public set; }
    public TimeSpan PooledConnectionIdleTimeout { get; public set; }
    public TimeSpan PooledConnectionLifetime { get; public set; }
    public bool PreAuthenticate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    public IWebProxy Proxy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HeaderEncodingSelector`1<HttpRequestMessage> RequestHeaderEncodingSelector { get; public set; }
    public TimeSpan ResponseDrainTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HeaderEncodingSelector`1<HttpRequestMessage> ResponseHeaderEncodingSelector { get; public set; }
    [NullableAttribute("1")]
public SslClientAuthenticationOptions SslOptions { get; public set; }
    public bool UseCookies { get; public set; }
    public bool UseProxy { get; public set; }
    public bool EnableMultipleHttp2Connections { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<SocketsHttpConnectionContext, CancellationToken, ValueTask`1<Stream>> ConnectCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<SocketsHttpPlaintextStreamFilterContext, CancellationToken, ValueTask`1<Stream>> PlaintextStreamFilter { get; public set; }
    [CLSCompliantAttribute("False")]
public DistributedContextPropagator ActivityHeadersPropagator { get; public set; }
    public int get_InitialHttp2StreamWindowSize();
    public void set_InitialHttp2StreamWindowSize(int value);
    public static bool get_IsSupported();
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public DecompressionMethods get_AutomaticDecompression();
    public void set_AutomaticDecompression(DecompressionMethods value);
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    [NullableContextAttribute("1")]
public CookieContainer get_CookieContainer();
    [NullableContextAttribute("1")]
public void set_CookieContainer(CookieContainer value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public ICredentials get_DefaultProxyCredentials();
    public void set_DefaultProxyCredentials(ICredentials value);
    public TimeSpan get_Expect100ContinueTimeout();
    public void set_Expect100ContinueTimeout(TimeSpan value);
    public TimeSpan get_KeepAlivePingDelay();
    public void set_KeepAlivePingDelay(TimeSpan value);
    public TimeSpan get_KeepAlivePingTimeout();
    public void set_KeepAlivePingTimeout(TimeSpan value);
    public HttpKeepAlivePingPolicy get_KeepAlivePingPolicy();
    public void set_KeepAlivePingPolicy(HttpKeepAlivePingPolicy value);
    public int get_MaxAutomaticRedirections();
    public void set_MaxAutomaticRedirections(int value);
    public int get_MaxConnectionsPerServer();
    public void set_MaxConnectionsPerServer(int value);
    public int get_MaxResponseDrainSize();
    public void set_MaxResponseDrainSize(int value);
    public int get_MaxResponseHeadersLength();
    public void set_MaxResponseHeadersLength(int value);
    public IMeterFactory get_MeterFactory();
    public void set_MeterFactory(IMeterFactory value);
    public TimeSpan get_PooledConnectionIdleTimeout();
    public void set_PooledConnectionIdleTimeout(TimeSpan value);
    public TimeSpan get_PooledConnectionLifetime();
    public void set_PooledConnectionLifetime(TimeSpan value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public IDictionary`2<string, object> get_Properties();
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public HeaderEncodingSelector`1<HttpRequestMessage> get_RequestHeaderEncodingSelector();
    public void set_RequestHeaderEncodingSelector(HeaderEncodingSelector`1<HttpRequestMessage> value);
    public TimeSpan get_ResponseDrainTimeout();
    public void set_ResponseDrainTimeout(TimeSpan value);
    public HeaderEncodingSelector`1<HttpRequestMessage> get_ResponseHeaderEncodingSelector();
    public void set_ResponseHeaderEncodingSelector(HeaderEncodingSelector`1<HttpRequestMessage> value);
    [NullableContextAttribute("1")]
public SslClientAuthenticationOptions get_SslOptions();
    [NullableContextAttribute("1")]
public void set_SslOptions(SslClientAuthenticationOptions value);
    public bool get_UseCookies();
    public void set_UseCookies(bool value);
    public bool get_UseProxy();
    public void set_UseProxy(bool value);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected internal virtual HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected internal virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public bool get_EnableMultipleHttp2Connections();
    public void set_EnableMultipleHttp2Connections(bool value);
    public Func`3<SocketsHttpConnectionContext, CancellationToken, ValueTask`1<Stream>> get_ConnectCallback();
    public void set_ConnectCallback(Func`3<SocketsHttpConnectionContext, CancellationToken, ValueTask`1<Stream>> value);
    public Func`3<SocketsHttpPlaintextStreamFilterContext, CancellationToken, ValueTask`1<Stream>> get_PlaintextStreamFilter();
    public void set_PlaintextStreamFilter(Func`3<SocketsHttpPlaintextStreamFilterContext, CancellationToken, ValueTask`1<Stream>> value);
    public DistributedContextPropagator get_ActivityHeadersPropagator();
    public void set_ActivityHeadersPropagator(DistributedContextPropagator value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.SocketsHttpPlaintextStreamFilterContext : object {
    public Stream PlaintextStream { get; }
    public Version NegotiatedHttpVersion { get; }
    public HttpRequestMessage InitialRequestMessage { get; }
    public Stream get_PlaintextStream();
    public Version get_NegotiatedHttpVersion();
    public HttpRequestMessage get_InitialRequestMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.StreamContent : HttpContent {
    public StreamContent(Stream content);
    public StreamContent(Stream content, int bufferSize);
    protected virtual Stream CreateContentReadStream(CancellationToken cancellationToken);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual void Dispose(bool disposing);
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected internal virtual bool TryComputeLength(Int64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.StringContent : ByteArrayContent {
    public StringContent(string content);
    public StringContent(string content, MediaTypeHeaderValue mediaType);
    public StringContent(string content, Encoding encoding);
    public StringContent(string content, Encoding encoding, MediaTypeHeaderValue mediaType);
    public StringContent(string content, Encoding encoding, string mediaType);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
}
