[IsReadOnlyAttribute]
public class System.Numerics.BigInteger : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public bool IsEven { get; }
    public bool IsOne { get; }
    public bool IsPowerOfTwo { get; }
    public bool IsZero { get; }
    public static BigInteger MinusOne { get; }
    public static BigInteger One { get; }
    public int Sign { get; }
    private static BigInteger System.Numerics.IAdditiveIdentity<System.Numerics.BigInteger,System.Numerics.BigInteger>.AdditiveIdentity { get; }
    private static BigInteger System.Numerics.IBinaryNumber<System.Numerics.BigInteger>.AllBitsSet { get; }
    private static BigInteger System.Numerics.IMultiplicativeIdentity<System.Numerics.BigInteger,System.Numerics.BigInteger>.MultiplicativeIdentity { get; }
    private static int System.Numerics.INumberBase<System.Numerics.BigInteger>.Radix { get; }
    private static BigInteger System.Numerics.ISignedNumber<System.Numerics.BigInteger>.NegativeOne { get; }
    public static BigInteger Zero { get; }
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public BigInteger(Byte[] value);
    public BigInteger(decimal value);
    public BigInteger(double value);
    public BigInteger(int value);
    public BigInteger(long value);
    public BigInteger(ReadOnlySpan`1<byte> value, bool isUnsigned, bool isBigEndian);
    public BigInteger(float value);
    [CLSCompliantAttribute("False")]
public BigInteger(UInt32 value);
    [CLSCompliantAttribute("False")]
public BigInteger(ulong value);
    public bool get_IsEven();
    public bool get_IsOne();
    public bool get_IsPowerOfTwo();
    public bool get_IsZero();
    public static BigInteger get_MinusOne();
    public static override BigInteger get_One();
    public int get_Sign();
    private static override BigInteger System.Numerics.IAdditiveIdentity<System.Numerics.BigInteger,System.Numerics.BigInteger>.get_AdditiveIdentity();
    private static override BigInteger System.Numerics.IBinaryNumber<System.Numerics.BigInteger>.get_AllBitsSet();
    private static override BigInteger System.Numerics.IMultiplicativeIdentity<System.Numerics.BigInteger,System.Numerics.BigInteger>.get_MultiplicativeIdentity();
    private static override int System.Numerics.INumberBase<System.Numerics.BigInteger>.get_Radix();
    private static override BigInteger System.Numerics.ISignedNumber<System.Numerics.BigInteger>.get_NegativeOne();
    public static override BigInteger get_Zero();
    public static override BigInteger Abs(BigInteger value);
    public static BigInteger Add(BigInteger left, BigInteger right);
    public static override BigInteger Clamp(BigInteger value, BigInteger min, BigInteger max);
    public static int Compare(BigInteger left, BigInteger right);
    public int CompareTo(long other);
    public sealed virtual int CompareTo(BigInteger other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [CLSCompliantAttribute("False")]
public int CompareTo(ulong other);
    public static override BigInteger CopySign(BigInteger value, BigInteger sign);
    [NullableContextAttribute("1")]
public static override BigInteger CreateChecked(TOther value);
    [NullableContextAttribute("1")]
public static override BigInteger CreateSaturating(TOther value);
    [NullableContextAttribute("1")]
public static override BigInteger CreateTruncating(TOther value);
    public static BigInteger Divide(BigInteger dividend, BigInteger divisor);
    public static override ValueTuple`2<BigInteger, BigInteger> DivRem(BigInteger left, BigInteger right);
    public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, BigInteger& remainder);
    public bool Equals(long other);
    public sealed virtual bool Equals(BigInteger other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [CLSCompliantAttribute("False")]
public bool Equals(ulong other);
    public long GetBitLength();
    public int GetByteCount(bool isUnsigned);
    public virtual int GetHashCode();
    public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right);
    public static override bool IsEvenInteger(BigInteger value);
    public static override bool IsNegative(BigInteger value);
    public static override bool IsOddInteger(BigInteger value);
    public static override bool IsPositive(BigInteger value);
    public static override bool IsPow2(BigInteger value);
    public static override BigInteger LeadingZeroCount(BigInteger value);
    public static double Log(BigInteger value);
    public static double Log(BigInteger value, double baseValue);
    public static double Log10(BigInteger value);
    public static override BigInteger Log2(BigInteger value);
    public static override BigInteger Max(BigInteger left, BigInteger right);
    public static override BigInteger MaxMagnitude(BigInteger x, BigInteger y);
    public static override BigInteger Min(BigInteger left, BigInteger right);
    public static override BigInteger MinMagnitude(BigInteger x, BigInteger y);
    public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus);
    public static BigInteger Multiply(BigInteger left, BigInteger right);
    public static BigInteger Negate(BigInteger value);
    public static override BigInteger op_Addition(BigInteger left, BigInteger right);
    public static override BigInteger op_BitwiseAnd(BigInteger left, BigInteger right);
    public static override BigInteger op_BitwiseOr(BigInteger left, BigInteger right);
    public static override BigInteger op_Decrement(BigInteger value);
    public static override BigInteger op_Division(BigInteger dividend, BigInteger divisor);
    public static bool op_Equality(long left, BigInteger right);
    public static bool op_Equality(BigInteger left, long right);
    public static override bool op_Equality(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(ulong left, BigInteger right);
    public static override BigInteger op_ExclusiveOr(BigInteger left, BigInteger right);
    public static BigInteger op_Explicit(decimal value);
    public static BigInteger op_Explicit(double value);
    public static BigInteger op_Explicit(Half value);
    public static byte op_Explicit(BigInteger value);
    public static char op_Explicit(BigInteger value);
    public static decimal op_Explicit(BigInteger value);
    public static double op_Explicit(BigInteger value);
    public static Half op_Explicit(BigInteger value);
    public static Int128 op_Explicit(BigInteger value);
    public static short op_Explicit(BigInteger value);
    public static int op_Explicit(BigInteger value);
    public static long op_Explicit(BigInteger value);
    public static IntPtr op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(BigInteger value);
    public static float op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UInt128 op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UIntPtr op_Explicit(BigInteger value);
    public static BigInteger op_Explicit(Complex value);
    public static BigInteger op_Explicit(float value);
    public static bool op_GreaterThan(long left, BigInteger right);
    public static bool op_GreaterThan(BigInteger left, long right);
    public static override bool op_GreaterThan(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(ulong left, BigInteger right);
    public static bool op_GreaterThanOrEqual(long left, BigInteger right);
    public static bool op_GreaterThanOrEqual(BigInteger left, long right);
    public static override bool op_GreaterThanOrEqual(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(ulong left, BigInteger right);
    public static BigInteger op_Implicit(byte value);
    public static BigInteger op_Implicit(char value);
    public static BigInteger op_Implicit(Int128 value);
    public static BigInteger op_Implicit(short value);
    public static BigInteger op_Implicit(int value);
    public static BigInteger op_Implicit(long value);
    public static BigInteger op_Implicit(IntPtr value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UInt128 value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ulong value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UIntPtr value);
    public static override BigInteger op_Increment(BigInteger value);
    public static bool op_Inequality(long left, BigInteger right);
    public static bool op_Inequality(BigInteger left, long right);
    public static override bool op_Inequality(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(ulong left, BigInteger right);
    public static override BigInteger op_LeftShift(BigInteger value, int shift);
    public static bool op_LessThan(long left, BigInteger right);
    public static bool op_LessThan(BigInteger left, long right);
    public static override bool op_LessThan(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(ulong left, BigInteger right);
    public static bool op_LessThanOrEqual(long left, BigInteger right);
    public static bool op_LessThanOrEqual(BigInteger left, long right);
    public static override bool op_LessThanOrEqual(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(ulong left, BigInteger right);
    public static override BigInteger op_Modulus(BigInteger dividend, BigInteger divisor);
    public static override BigInteger op_Multiply(BigInteger left, BigInteger right);
    public static override BigInteger op_OnesComplement(BigInteger value);
    public static override BigInteger op_RightShift(BigInteger value, int shift);
    public static override BigInteger op_Subtraction(BigInteger left, BigInteger right);
    public static override BigInteger op_UnaryNegation(BigInteger value);
    public static override BigInteger op_UnaryPlus(BigInteger value);
    public static override BigInteger op_UnsignedRightShift(BigInteger value, int shiftAmount);
    public static override BigInteger Parse(ReadOnlySpan`1<char> value, NumberStyles style, IFormatProvider provider);
    public static override BigInteger Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static BigInteger Parse(string value);
    [NullableContextAttribute("1")]
public static BigInteger Parse(string value, NumberStyles style);
    [NullableContextAttribute("1")]
public static override BigInteger Parse(string value, NumberStyles style, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static override BigInteger Parse(string value, IFormatProvider provider);
    public static override BigInteger PopCount(BigInteger value);
    public static BigInteger Pow(BigInteger value, int exponent);
    public static BigInteger Remainder(BigInteger dividend, BigInteger divisor);
    public static override BigInteger RotateLeft(BigInteger value, int rotateAmount);
    public static override BigInteger RotateRight(BigInteger value, int rotateAmount);
    public static BigInteger Subtract(BigInteger left, BigInteger right);
    private static override bool System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.TryReadBigEndian(ReadOnlySpan`1<byte> source, bool isUnsigned, BigInteger& value);
    private static override bool System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.TryReadLittleEndian(ReadOnlySpan`1<byte> source, bool isUnsigned, BigInteger& value);
    private sealed virtual override int System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.GetByteCount();
    private sealed virtual override int System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.GetShortestBitLength();
    private sealed virtual override bool System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.TryWriteBigEndian(Span`1<byte> destination, Int32& bytesWritten);
    private sealed virtual override bool System.Numerics.IBinaryInteger<System.Numerics.BigInteger>.TryWriteLittleEndian(Span`1<byte> destination, Int32& bytesWritten);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsCanonical(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsComplexNumber(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsFinite(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsImaginaryNumber(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsInfinity(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsInteger(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsNaN(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsNegativeInfinity(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsNormal(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsPositiveInfinity(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsRealNumber(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsSubnormal(BigInteger value);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.IsZero(BigInteger value);
    private static override BigInteger System.Numerics.INumberBase<System.Numerics.BigInteger>.MaxMagnitudeNumber(BigInteger x, BigInteger y);
    private static override BigInteger System.Numerics.INumberBase<System.Numerics.BigInteger>.MinMagnitudeNumber(BigInteger x, BigInteger y);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertFromChecked(TOther value, BigInteger& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertFromSaturating(TOther value, BigInteger& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertFromTruncating(TOther value, BigInteger& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertToChecked(BigInteger value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertToSaturating(BigInteger value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.BigInteger>.TryConvertToTruncating(BigInteger value, TOther& result);
    private static override BigInteger System.Numerics.INumber<System.Numerics.BigInteger>.MaxNumber(BigInteger x, BigInteger y);
    private static override BigInteger System.Numerics.INumber<System.Numerics.BigInteger>.MinNumber(BigInteger x, BigInteger y);
    private static override int System.Numerics.INumber<System.Numerics.BigInteger>.Sign(BigInteger value);
    [NullableContextAttribute("1")]
public Byte[] ToByteArray();
    [NullableContextAttribute("1")]
public Byte[] ToByteArray(bool isUnsigned, bool isBigEndian);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToString(string format);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider provider);
    public static override BigInteger TrailingZeroCount(BigInteger value);
    public sealed virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static override bool TryParse(ReadOnlySpan`1<char> value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    public static override bool TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, BigInteger& result);
    public static bool TryParse(ReadOnlySpan`1<char> value, BigInteger& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, IFormatProvider provider, BigInteger& result);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, BigInteger& result);
    public bool TryWriteBytes(Span`1<byte> destination, Int32& bytesWritten, bool isUnsigned, bool isBigEndian);
}
[IsReadOnlyAttribute]
public class System.Numerics.Complex : ValueType {
    private int _dummyPrimitive;
    public static Complex ImaginaryOne;
    public static Complex Infinity;
    public static Complex NaN;
    public static Complex One;
    public static Complex Zero;
    public double Imaginary { get; }
    public double Magnitude { get; }
    public double Phase { get; }
    public double Real { get; }
    private static Complex System.Numerics.IAdditiveIdentity<System.Numerics.Complex,System.Numerics.Complex>.AdditiveIdentity { get; }
    private static Complex System.Numerics.IMultiplicativeIdentity<System.Numerics.Complex,System.Numerics.Complex>.MultiplicativeIdentity { get; }
    private static Complex System.Numerics.INumberBase<System.Numerics.Complex>.One { get; }
    private static int System.Numerics.INumberBase<System.Numerics.Complex>.Radix { get; }
    private static Complex System.Numerics.INumberBase<System.Numerics.Complex>.Zero { get; }
    private static Complex System.Numerics.ISignedNumber<System.Numerics.Complex>.NegativeOne { get; }
    public Complex(double real, double imaginary);
    public double get_Imaginary();
    public double get_Magnitude();
    public double get_Phase();
    public double get_Real();
    private static override Complex System.Numerics.IAdditiveIdentity<System.Numerics.Complex,System.Numerics.Complex>.get_AdditiveIdentity();
    private static override Complex System.Numerics.IMultiplicativeIdentity<System.Numerics.Complex,System.Numerics.Complex>.get_MultiplicativeIdentity();
    private static override Complex System.Numerics.INumberBase<System.Numerics.Complex>.get_One();
    private static override int System.Numerics.INumberBase<System.Numerics.Complex>.get_Radix();
    private static override Complex System.Numerics.INumberBase<System.Numerics.Complex>.get_Zero();
    private static override Complex System.Numerics.ISignedNumber<System.Numerics.Complex>.get_NegativeOne();
    public static double Abs(Complex value);
    public static Complex Acos(Complex value);
    public static Complex Add(double left, Complex right);
    public static Complex Add(Complex left, double right);
    public static Complex Add(Complex left, Complex right);
    public static Complex Asin(Complex value);
    public static Complex Atan(Complex value);
    public static Complex Conjugate(Complex value);
    public static Complex Cos(Complex value);
    public static Complex Cosh(Complex value);
    [NullableContextAttribute("1")]
public static override Complex CreateChecked(TOther value);
    [NullableContextAttribute("1")]
public static override Complex CreateSaturating(TOther value);
    [NullableContextAttribute("1")]
public static override Complex CreateTruncating(TOther value);
    public static Complex Divide(double dividend, Complex divisor);
    public static Complex Divide(Complex dividend, double divisor);
    public static Complex Divide(Complex dividend, Complex divisor);
    public sealed virtual bool Equals(Complex value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static Complex Exp(Complex value);
    public static Complex FromPolarCoordinates(double magnitude, double phase);
    public virtual int GetHashCode();
    public static override bool IsComplexNumber(Complex value);
    public static override bool IsEvenInteger(Complex value);
    public static override bool IsFinite(Complex value);
    public static override bool IsImaginaryNumber(Complex value);
    public static override bool IsInfinity(Complex value);
    public static override bool IsInteger(Complex value);
    public static override bool IsNaN(Complex value);
    public static override bool IsNegative(Complex value);
    public static override bool IsNegativeInfinity(Complex value);
    public static override bool IsNormal(Complex value);
    public static override bool IsOddInteger(Complex value);
    public static override bool IsPositive(Complex value);
    public static override bool IsPositiveInfinity(Complex value);
    public static override bool IsRealNumber(Complex value);
    public static override bool IsSubnormal(Complex value);
    public static Complex Log(Complex value);
    public static Complex Log(Complex value, double baseValue);
    public static Complex Log10(Complex value);
    public static override Complex MaxMagnitude(Complex x, Complex y);
    public static override Complex MinMagnitude(Complex x, Complex y);
    public static Complex Multiply(double left, Complex right);
    public static Complex Multiply(Complex left, double right);
    public static Complex Multiply(Complex left, Complex right);
    public static Complex Negate(Complex value);
    public static Complex op_Addition(double left, Complex right);
    public static Complex op_Addition(Complex left, double right);
    public static override Complex op_Addition(Complex left, Complex right);
    public static override Complex op_Decrement(Complex value);
    public static Complex op_Division(double left, Complex right);
    public static Complex op_Division(Complex left, double right);
    public static override Complex op_Division(Complex left, Complex right);
    public static override bool op_Equality(Complex left, Complex right);
    public static Complex op_Explicit(decimal value);
    public static Complex op_Explicit(Int128 value);
    public static Complex op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static Complex op_Explicit(UInt128 value);
    public static Complex op_Implicit(byte value);
    public static Complex op_Implicit(char value);
    public static Complex op_Implicit(double value);
    public static Complex op_Implicit(Half value);
    public static Complex op_Implicit(short value);
    public static Complex op_Implicit(int value);
    public static Complex op_Implicit(long value);
    public static Complex op_Implicit(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(sbyte value);
    public static Complex op_Implicit(float value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ulong value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(UIntPtr value);
    public static override Complex op_Increment(Complex value);
    public static override bool op_Inequality(Complex left, Complex right);
    public static Complex op_Multiply(double left, Complex right);
    public static Complex op_Multiply(Complex left, double right);
    public static override Complex op_Multiply(Complex left, Complex right);
    public static Complex op_Subtraction(double left, Complex right);
    public static Complex op_Subtraction(Complex left, double right);
    public static override Complex op_Subtraction(Complex left, Complex right);
    public static override Complex op_UnaryNegation(Complex value);
    public static override Complex op_UnaryPlus(Complex value);
    public static override Complex Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
    public static override Complex Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static override Complex Parse(string s, NumberStyles style, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static override Complex Parse(string s, IFormatProvider provider);
    public static Complex Pow(Complex value, double power);
    public static Complex Pow(Complex value, Complex power);
    public static Complex Reciprocal(Complex value);
    public static Complex Sin(Complex value);
    public static Complex Sinh(Complex value);
    public static Complex Sqrt(Complex value);
    public static Complex Subtract(double left, Complex right);
    public static Complex Subtract(Complex left, double right);
    public static Complex Subtract(Complex left, Complex right);
    private static override Complex System.Numerics.INumberBase<System.Numerics.Complex>.Abs(Complex value);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.IsCanonical(Complex value);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.IsZero(Complex value);
    private static override Complex System.Numerics.INumberBase<System.Numerics.Complex>.MaxMagnitudeNumber(Complex x, Complex y);
    private static override Complex System.Numerics.INumberBase<System.Numerics.Complex>.MinMagnitudeNumber(Complex x, Complex y);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertFromChecked(TOther value, Complex& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertFromSaturating(TOther value, Complex& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertFromTruncating(TOther value, Complex& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertToChecked(Complex value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertToSaturating(Complex value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Numerics.Complex>.TryConvertToTruncating(Complex value, TOther& result);
    public static Complex Tan(Complex value);
    public static Complex Tanh(Complex value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToString(string format);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider provider);
    public sealed virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public sealed virtual bool TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static override bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Complex& result);
    public static override bool TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, Complex& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, NumberStyles style, IFormatProvider provider, Complex& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, IFormatProvider provider, Complex& result);
}
