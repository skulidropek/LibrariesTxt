[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Win32.SafeHandles.SafeAccessTokenHandle : SafeHandle {
    public static SafeAccessTokenHandle InvalidHandle { get; }
    public bool IsInvalid { get; }
    public SafeAccessTokenHandle(IntPtr handle);
    public static SafeAccessTokenHandle get_InvalidHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Principal.IdentityNotMappedException : SystemException {
    public IdentityReferenceCollection UnmappedIdentities { get; }
    [NullableContextAttribute("2")]
public IdentityNotMappedException(string message);
    [NullableContextAttribute("2")]
public IdentityNotMappedException(string message, Exception inner);
    public IdentityReferenceCollection get_UnmappedIdentities();
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Security.Principal.IdentityReference : object {
    public string Value { get; }
    public abstract virtual string get_Value();
    [NullableContextAttribute("2")]
public abstract virtual bool Equals(object o);
    public abstract virtual int GetHashCode();
    public abstract virtual bool IsValidTargetType(Type targetType);
    [NullableContextAttribute("2")]
public static bool op_Equality(IdentityReference left, IdentityReference right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(IdentityReference left, IdentityReference right);
    public abstract virtual string ToString();
    public abstract virtual IdentityReference Translate(Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Security.Principal.IdentityReferenceCollection : object {
    public int Count { get; }
    public IdentityReference Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly { get; }
    public IdentityReferenceCollection(int capacity);
    public sealed virtual int get_Count();
    public IdentityReference get_Item(int index);
    public void set_Item(int index, IdentityReference value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.get_IsReadOnly();
    public sealed virtual void Add(IdentityReference identity);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IdentityReference identity);
    public sealed virtual void CopyTo(IdentityReference[] array, int offset);
    public sealed virtual IEnumerator`1<IdentityReference> GetEnumerator();
    public sealed virtual bool Remove(IdentityReference identity);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IdentityReferenceCollection Translate(Type targetType);
    public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Principal.NTAccount : IdentityReference {
    public string Value { get; }
    public NTAccount(string name);
    public NTAccount(string domainName, string accountName);
    public virtual string get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual bool IsValidTargetType(Type targetType);
    [NullableContextAttribute("2")]
public static bool op_Equality(NTAccount left, NTAccount right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(NTAccount left, NTAccount right);
    public virtual string ToString();
    public virtual IdentityReference Translate(Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Principal.SecurityIdentifier : IdentityReference {
    public static int MaxBinaryLength;
    public static int MinBinaryLength;
    [NullableAttribute("2")]
public SecurityIdentifier AccountDomainSid { get; }
    public int BinaryLength { get; }
    public string Value { get; }
    public SecurityIdentifier(Byte[] binaryForm, int offset);
    public SecurityIdentifier(IntPtr binaryForm);
    [NullableContextAttribute("2")]
public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid);
    public SecurityIdentifier(string sddlForm);
    [NullableContextAttribute("2")]
public SecurityIdentifier get_AccountDomainSid();
    public int get_BinaryLength();
    public virtual string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(SecurityIdentifier sid);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public bool Equals(SecurityIdentifier sid);
    public void GetBinaryForm(Byte[] binaryForm, int offset);
    public virtual int GetHashCode();
    public bool IsAccountSid();
    public bool IsEqualDomainSid(SecurityIdentifier sid);
    public virtual bool IsValidTargetType(Type targetType);
    public bool IsWellKnown(WellKnownSidType type);
    [NullableContextAttribute("2")]
public static bool op_Equality(SecurityIdentifier left, SecurityIdentifier right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(SecurityIdentifier left, SecurityIdentifier right);
    public virtual string ToString();
    public virtual IdentityReference Translate(Type targetType);
}
[FlagsAttribute]
public enum System.Security.Principal.TokenAccessLevels : Enum {
    public int value__;
    public static TokenAccessLevels AssignPrimary;
    public static TokenAccessLevels Duplicate;
    public static TokenAccessLevels Impersonate;
    public static TokenAccessLevels Query;
    public static TokenAccessLevels QuerySource;
    public static TokenAccessLevels AdjustPrivileges;
    public static TokenAccessLevels AdjustGroups;
    public static TokenAccessLevels AdjustDefault;
    public static TokenAccessLevels AdjustSessionId;
    public static TokenAccessLevels Read;
    public static TokenAccessLevels Write;
    public static TokenAccessLevels AllAccess;
    public static TokenAccessLevels MaximumAllowed;
}
public enum System.Security.Principal.WellKnownSidType : Enum {
    public int value__;
    public static WellKnownSidType NullSid;
    public static WellKnownSidType WorldSid;
    public static WellKnownSidType LocalSid;
    public static WellKnownSidType CreatorOwnerSid;
    public static WellKnownSidType CreatorGroupSid;
    public static WellKnownSidType CreatorOwnerServerSid;
    public static WellKnownSidType CreatorGroupServerSid;
    public static WellKnownSidType NTAuthoritySid;
    public static WellKnownSidType DialupSid;
    public static WellKnownSidType NetworkSid;
    public static WellKnownSidType BatchSid;
    public static WellKnownSidType InteractiveSid;
    public static WellKnownSidType ServiceSid;
    public static WellKnownSidType AnonymousSid;
    public static WellKnownSidType ProxySid;
    public static WellKnownSidType EnterpriseControllersSid;
    public static WellKnownSidType SelfSid;
    public static WellKnownSidType AuthenticatedUserSid;
    public static WellKnownSidType RestrictedCodeSid;
    public static WellKnownSidType TerminalServerSid;
    public static WellKnownSidType RemoteLogonIdSid;
    public static WellKnownSidType LogonIdsSid;
    public static WellKnownSidType LocalSystemSid;
    public static WellKnownSidType LocalServiceSid;
    public static WellKnownSidType NetworkServiceSid;
    public static WellKnownSidType BuiltinDomainSid;
    public static WellKnownSidType BuiltinAdministratorsSid;
    public static WellKnownSidType BuiltinUsersSid;
    public static WellKnownSidType BuiltinGuestsSid;
    public static WellKnownSidType BuiltinPowerUsersSid;
    public static WellKnownSidType BuiltinAccountOperatorsSid;
    public static WellKnownSidType BuiltinSystemOperatorsSid;
    public static WellKnownSidType BuiltinPrintOperatorsSid;
    public static WellKnownSidType BuiltinBackupOperatorsSid;
    public static WellKnownSidType BuiltinReplicatorSid;
    public static WellKnownSidType BuiltinPreWindows2000CompatibleAccessSid;
    public static WellKnownSidType BuiltinRemoteDesktopUsersSid;
    public static WellKnownSidType BuiltinNetworkConfigurationOperatorsSid;
    public static WellKnownSidType AccountAdministratorSid;
    public static WellKnownSidType AccountGuestSid;
    public static WellKnownSidType AccountKrbtgtSid;
    public static WellKnownSidType AccountDomainAdminsSid;
    public static WellKnownSidType AccountDomainUsersSid;
    public static WellKnownSidType AccountDomainGuestsSid;
    public static WellKnownSidType AccountComputersSid;
    public static WellKnownSidType AccountControllersSid;
    public static WellKnownSidType AccountCertAdminsSid;
    public static WellKnownSidType AccountSchemaAdminsSid;
    public static WellKnownSidType AccountEnterpriseAdminsSid;
    public static WellKnownSidType AccountPolicyAdminsSid;
    public static WellKnownSidType AccountRasAndIasServersSid;
    public static WellKnownSidType NtlmAuthenticationSid;
    public static WellKnownSidType DigestAuthenticationSid;
    public static WellKnownSidType SChannelAuthenticationSid;
    public static WellKnownSidType ThisOrganizationSid;
    public static WellKnownSidType OtherOrganizationSid;
    public static WellKnownSidType BuiltinIncomingForestTrustBuildersSid;
    public static WellKnownSidType BuiltinPerformanceMonitoringUsersSid;
    public static WellKnownSidType BuiltinPerformanceLoggingUsersSid;
    public static WellKnownSidType BuiltinAuthorizationAccessSid;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This member has been deprecated and is only maintained for backwards compatability. WellKnownSidType values greater than MaxDefined may be defined in future releases.")]
public static WellKnownSidType MaxDefined;
    public static WellKnownSidType WinBuiltinTerminalServerLicenseServersSid;
    public static WellKnownSidType WinBuiltinDCOMUsersSid;
    public static WellKnownSidType WinBuiltinIUsersSid;
    public static WellKnownSidType WinIUserSid;
    public static WellKnownSidType WinBuiltinCryptoOperatorsSid;
    public static WellKnownSidType WinUntrustedLabelSid;
    public static WellKnownSidType WinLowLabelSid;
    public static WellKnownSidType WinMediumLabelSid;
    public static WellKnownSidType WinHighLabelSid;
    public static WellKnownSidType WinSystemLabelSid;
    public static WellKnownSidType WinWriteRestrictedCodeSid;
    public static WellKnownSidType WinCreatorOwnerRightsSid;
    public static WellKnownSidType WinCacheablePrincipalsGroupSid;
    public static WellKnownSidType WinNonCacheablePrincipalsGroupSid;
    public static WellKnownSidType WinEnterpriseReadonlyControllersSid;
    public static WellKnownSidType WinAccountReadonlyControllersSid;
    public static WellKnownSidType WinBuiltinEventLogReadersGroup;
    public static WellKnownSidType WinNewEnterpriseReadonlyControllersSid;
    public static WellKnownSidType WinBuiltinCertSvcDComAccessGroup;
    public static WellKnownSidType WinMediumPlusLabelSid;
    public static WellKnownSidType WinLocalLogonSid;
    public static WellKnownSidType WinConsoleLogonSid;
    public static WellKnownSidType WinThisOrganizationCertificateSid;
    public static WellKnownSidType WinApplicationPackageAuthoritySid;
    public static WellKnownSidType WinBuiltinAnyPackageSid;
    public static WellKnownSidType WinCapabilityInternetClientSid;
    public static WellKnownSidType WinCapabilityInternetClientServerSid;
    public static WellKnownSidType WinCapabilityPrivateNetworkClientServerSid;
    public static WellKnownSidType WinCapabilityPicturesLibrarySid;
    public static WellKnownSidType WinCapabilityVideosLibrarySid;
    public static WellKnownSidType WinCapabilityMusicLibrarySid;
    public static WellKnownSidType WinCapabilityDocumentsLibrarySid;
    public static WellKnownSidType WinCapabilitySharedUserCertificatesSid;
    public static WellKnownSidType WinCapabilityEnterpriseAuthenticationSid;
    public static WellKnownSidType WinCapabilityRemovableStorageSid;
}
public enum System.Security.Principal.WindowsAccountType : Enum {
    public int value__;
    public static WindowsAccountType Normal;
    public static WindowsAccountType Guest;
    public static WindowsAccountType System;
    public static WindowsAccountType Anonymous;
}
public enum System.Security.Principal.WindowsBuiltInRole : Enum {
    public int value__;
    public static WindowsBuiltInRole Administrator;
    public static WindowsBuiltInRole User;
    public static WindowsBuiltInRole Guest;
    public static WindowsBuiltInRole PowerUser;
    public static WindowsBuiltInRole AccountOperator;
    public static WindowsBuiltInRole SystemOperator;
    public static WindowsBuiltInRole PrintOperator;
    public static WindowsBuiltInRole BackupOperator;
    public static WindowsBuiltInRole Replicator;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Principal.WindowsIdentity : ClaimsIdentity {
    public static string DefaultIssuer;
    public SafeAccessTokenHandle AccessToken { get; }
    [NullableAttribute("2")]
public string AuthenticationType { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public IEnumerable`1<Claim> DeviceClaims { get; }
    [NullableAttribute("2")]
public IdentityReferenceCollection Groups { get; }
    public TokenImpersonationLevel ImpersonationLevel { get; }
    public bool IsAnonymous { get; }
    public bool IsAuthenticated { get; }
    public bool IsGuest { get; }
    public bool IsSystem { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public SecurityIdentifier Owner { get; }
    public IntPtr Token { get; }
    [NullableAttribute("2")]
public SecurityIdentifier User { get; }
    public IEnumerable`1<Claim> UserClaims { get; }
    public WindowsIdentity(IntPtr userToken);
    public WindowsIdentity(IntPtr userToken, string type);
    public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType);
    public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public WindowsIdentity(SerializationInfo info, StreamingContext context);
    protected WindowsIdentity(WindowsIdentity identity);
    public WindowsIdentity(string sUserPrincipalName);
    public SafeAccessTokenHandle get_AccessToken();
    [NullableContextAttribute("2")]
public sealed virtual string get_AuthenticationType();
    public virtual IEnumerable`1<Claim> get_Claims();
    public virtual IEnumerable`1<Claim> get_DeviceClaims();
    [NullableContextAttribute("2")]
public IdentityReferenceCollection get_Groups();
    public TokenImpersonationLevel get_ImpersonationLevel();
    public virtual bool get_IsAnonymous();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsGuest();
    public virtual bool get_IsSystem();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public SecurityIdentifier get_Owner();
    public virtual IntPtr get_Token();
    [NullableContextAttribute("2")]
public SecurityIdentifier get_User();
    public virtual IEnumerable`1<Claim> get_UserClaims();
    public virtual ClaimsIdentity Clone();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static WindowsIdentity GetAnonymous();
    public static WindowsIdentity GetCurrent();
    [NullableContextAttribute("2")]
public static WindowsIdentity GetCurrent(bool ifImpersonating);
    public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess);
    public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action);
    public static Task RunImpersonatedAsync(SafeAccessTokenHandle safeAccessTokenHandle, Func`1<Task> func);
    public static Task`1<T> RunImpersonatedAsync(SafeAccessTokenHandle safeAccessTokenHandle, Func`1<Task`1<T>> func);
    public static T RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Func`1<T> func);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Principal.WindowsPrincipal : ClaimsPrincipal {
    public IEnumerable`1<Claim> DeviceClaims { get; }
    public IIdentity Identity { get; }
    public IEnumerable`1<Claim> UserClaims { get; }
    public WindowsPrincipal(WindowsIdentity ntIdentity);
    public virtual IEnumerable`1<Claim> get_DeviceClaims();
    public virtual IIdentity get_Identity();
    public virtual IEnumerable`1<Claim> get_UserClaims();
    public virtual bool IsInRole(int rid);
    public virtual bool IsInRole(SecurityIdentifier sid);
    public virtual bool IsInRole(WindowsBuiltInRole role);
    public virtual bool IsInRole(string role);
}
