internal static class Interop : object {
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
public enum System.Speech.AudioFormat.AudioBitsPerSample : Enum {
    public int value__;
    public static AudioBitsPerSample Eight;
    public static AudioBitsPerSample Sixteen;
}
public enum System.Speech.AudioFormat.AudioChannel : Enum {
    public int value__;
    public static AudioChannel Mono;
    public static AudioChannel Stereo;
}
public enum System.Speech.AudioFormat.EncodingFormat : Enum {
    public int value__;
    public static EncodingFormat Pcm;
    public static EncodingFormat ALaw;
    public static EncodingFormat ULaw;
}
public class System.Speech.AudioFormat.SpeechAudioFormatInfo : object {
    private int _averageBytesPerSecond;
    private short _bitsPerSample;
    private short _blockAlign;
    private EncodingFormat _encodingFormat;
    private short _channelCount;
    private int _samplesPerSecond;
    private Byte[] _formatSpecificData;
    [EditorBrowsableAttribute("2")]
public int AverageBytesPerSecond { get; }
    [EditorBrowsableAttribute("2")]
public int BitsPerSample { get; }
    [EditorBrowsableAttribute("2")]
public int BlockAlign { get; }
    public EncodingFormat EncodingFormat { get; }
    public int ChannelCount { get; }
    public int SamplesPerSecond { get; }
    internal Byte[] WaveFormat { get; }
    private SpeechAudioFormatInfo(EncodingFormat encodingFormat, int samplesPerSecond, short bitsPerSample, short channelCount, Byte[] formatSpecificData);
    [EditorBrowsableAttribute("1")]
public SpeechAudioFormatInfo(EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, Byte[] formatSpecificData);
    public SpeechAudioFormatInfo(int samplesPerSecond, AudioBitsPerSample bitsPerSample, AudioChannel channel);
    public int get_AverageBytesPerSecond();
    public int get_BitsPerSample();
    public int get_BlockAlign();
    public EncodingFormat get_EncodingFormat();
    public int get_ChannelCount();
    public int get_SamplesPerSecond();
    public Byte[] FormatSpecificData();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal Byte[] get_WaveFormat();
}
internal class System.Speech.Internal.AlphabetConverter : object {
    private int _currentLangId;
    private PhoneMapData _phoneMap;
    private static Int32[] s_langIds;
    private static String[] s_resourceNames;
    private static PhoneMapData[] s_phoneMaps;
    private static object s_staticLock;
    internal AlphabetConverter(int langId);
    private static AlphabetConverter();
    internal Char[] SapiToIpa(Char[] phonemes);
    internal Char[] IpaToSapi(Char[] phonemes);
    internal bool IsPrefix(string phonemes, bool isSapi);
    internal bool IsConvertibleUnit(string phonemes, bool isSapi);
    internal int SetLanguageId(int langId);
    private Char[] Convert(Char[] phonemes, bool isSapi);
    private PhoneMapData CreateMap(string resourceName);
}
internal enum System.Speech.Internal.AlphabetType : Enum {
    public int value__;
    public static AlphabetType Sapi;
    public static AlphabetType Ipa;
    public static AlphabetType Ups;
}
internal class System.Speech.Internal.AsyncSerializedWorker : object {
    [CompilerGeneratedAttribute]
private WaitCallback WorkItemPending;
    private SynchronizationContext _syncContext;
    private SendOrPostCallback _workerPostCallback;
    private Queue _queue;
    private bool _hasPendingPost;
    private bool _isAsyncMode;
    private WaitCallback _workerCallback;
    private WaitCallback _defaultCallback;
    private bool _isEnabled;
    internal bool Enabled { get; internal set; }
    internal WaitCallback DefaultCallback { get; }
    internal bool AsyncMode { get; internal set; }
    internal AsyncSerializedWorker(WaitCallback defaultCallback, SynchronizationContext syncContext);
    private void Initialize(WaitCallback defaultCallback);
    public sealed virtual void Post(object evt);
    public sealed virtual void Post(Object[] evt);
    public sealed virtual void PostOperation(Delegate callback, Object[] parameters);
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal void Purge();
    internal WaitCallback get_DefaultCallback();
    internal AsyncWorkItem NextWorkItem();
    internal void ConsumeQueue();
    internal bool get_AsyncMode();
    internal void set_AsyncMode(bool value);
    [CompilerGeneratedAttribute]
internal void add_WorkItemPending(WaitCallback value);
    [CompilerGeneratedAttribute]
internal void remove_WorkItemPending(WaitCallback value);
    private void AddItem(AsyncWorkItem item);
    private void WorkerProc(object ignored);
    private void OnWorkItemPending();
}
internal class System.Speech.Internal.AsyncWorkItem : object {
    private Delegate _dynamicCallback;
    private Object[] _postData;
    internal AsyncWorkItem(Delegate dynamicCallback, Object[] postData);
    internal void Invoke();
}
internal static class System.Speech.Internal.AudioFormatConverter : object {
    internal static SpeechAudioFormatInfo ToSpeechAudioFormatInfo(IntPtr waveFormatPtr);
    internal static SpeechAudioFormatInfo ToSpeechAudioFormatInfo(string formatString);
    private static SpeechAudioFormatInfo ConvertFormat(StreamFormat eFormat);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal abstract class System.Speech.Internal.GrammarBuilding.BuilderElements : GrammarBuilderBase {
    private List`1<GrammarBuilderBase> _items;
    internal List`1<GrammarBuilderBase> Items { get; }
    internal string DebugSummary { get; }
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected void Optimize(Collection`1<RuleElement> newRules);
    internal void Add(string phrase);
    internal void Add(GrammarBuilder builder);
    internal void Add(GrammarBuilderBase item);
    internal void CloneItems(BuilderElements builders);
    internal void CreateChildrenElements(IElementFactory elementFactory, IRule parent, IdentifierCollection ruleIds);
    internal void CreateChildrenElements(IElementFactory elementFactory, IItem parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual int CalcCount(BuilderElements parent);
    internal List`1<GrammarBuilderBase> get_Items();
    internal virtual string get_DebugSummary();
    private void GetDictionaryElements(SortedDictionary`2<int, Collection`1<BuilderElements>> dict);
    private void RemoveDictionaryElements(SortedDictionary`2<int, Collection`1<BuilderElements>> dict);
}
internal abstract class System.Speech.Internal.GrammarBuilding.GrammarBuilderBase : object {
    private int _count;
    private bool _marker;
    private BuilderElements _parent;
    internal int Count { get; internal set; }
    internal bool Marked { get; internal set; }
    internal BuilderElements Parent { get; internal set; }
    internal string DebugSummary { get; }
    internal abstract virtual GrammarBuilderBase Clone();
    internal abstract virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual int CalcCount(BuilderElements parent);
    internal virtual int get_Count();
    internal virtual void set_Count(int value);
    internal virtual bool get_Marked();
    internal virtual void set_Marked(bool value);
    internal virtual BuilderElements get_Parent();
    internal virtual void set_Parent(BuilderElements value);
    internal abstract virtual string get_DebugSummary();
}
internal class System.Speech.Internal.GrammarBuilding.GrammarBuilderDictation : GrammarBuilderBase {
    private string _category;
    internal string DebugSummary { get; }
    internal GrammarBuilderDictation(string category);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
    private IRuleRef CreateRuleRefToDictation(IElementFactory elementFactory, IElement parent);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal class System.Speech.Internal.GrammarBuilding.GrammarBuilderPhrase : GrammarBuilderBase {
    private string _phrase;
    private bool _subsetMatching;
    private MatchMode _matchMode;
    internal string DebugSummary { get; }
    internal GrammarBuilderPhrase(string phrase);
    internal GrammarBuilderPhrase(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    private GrammarBuilderPhrase(string phrase, bool subsetMatching, SubsetMatchingMode subsetMatchingCriteria);
    private GrammarBuilderPhrase(string phrase, bool subsetMatching, MatchMode matchMode);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
    private IElement CreatePhraseElement(IElementFactory elementFactory, IElement parent);
}
internal class System.Speech.Internal.GrammarBuilding.GrammarBuilderRuleRef : GrammarBuilderBase {
    private string _uri;
    internal string DebugSummary { get; }
    internal GrammarBuilderRuleRef(Uri uri, string rule);
    private GrammarBuilderRuleRef(string sgrsUri);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
}
internal class System.Speech.Internal.GrammarBuilding.GrammarBuilderWildcard : GrammarBuilderBase {
    internal string DebugSummary { get; }
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
}
internal class System.Speech.Internal.GrammarBuilding.IdentifierCollection : object {
    protected List`1<string> _identifiers;
    internal string CreateNewIdentifier(string id);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal class System.Speech.Internal.GrammarBuilding.ItemElement : BuilderElements {
    private int _minRepeat;
    private int _maxRepeat;
    internal ItemElement(GrammarBuilderBase builder);
    internal ItemElement(int minRepeat, int maxRepeat);
    internal ItemElement(GrammarBuilderBase builder, int minRepeat, int maxRepeat);
    internal ItemElement(List`1<GrammarBuilderBase> builders, int minRepeat, int maxRepeat);
    internal ItemElement(GrammarBuilder builders);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal class System.Speech.Internal.GrammarBuilding.OneOfElement : BuilderElements {
    internal string DebugSummary { get; }
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
}
internal class System.Speech.Internal.GrammarBuilding.RuleElement : BuilderElements {
    private string _name;
    private string _ruleName;
    private IRule _rule;
    internal string DebugSummary { get; }
    internal string Name { get; }
    internal string RuleName { get; }
    internal RuleElement(string name);
    internal RuleElement(GrammarBuilderBase builder, string name);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual int CalcCount(BuilderElements parent);
    internal virtual string get_DebugSummary();
    internal string get_Name();
    internal string get_RuleName();
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal class System.Speech.Internal.GrammarBuilding.RuleRefElement : GrammarBuilderBase {
    private RuleElement _rule;
    private string _semanticKey;
    internal RuleElement Rule { get; }
    internal string DebugSummary { get; }
    internal RuleRefElement(RuleElement rule);
    internal RuleRefElement(RuleElement rule, string semanticKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void Add(GrammarBuilderBase item);
    internal virtual GrammarBuilderBase Clone();
    internal void CloneItems(RuleRefElement builders);
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal RuleElement get_Rule();
    internal virtual string get_DebugSummary();
}
internal class System.Speech.Internal.GrammarBuilding.SemanticKeyElement : BuilderElements {
    private string _semanticKey;
    private RuleRefElement _ruleRef;
    internal string DebugSummary { get; }
    internal SemanticKeyElement(string semanticKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void Add(string phrase);
    internal void Add(GrammarBuilder builder);
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
}
[DebuggerDisplayAttribute("{DebugSummary}")]
internal class System.Speech.Internal.GrammarBuilding.TagElement : BuilderElements {
    private object _value;
    internal string DebugSummary { get; }
    internal TagElement(object value);
    internal TagElement(GrammarBuilderBase builder, object value);
    internal TagElement(GrammarBuilder builder, object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual GrammarBuilderBase Clone();
    internal virtual IElement CreateElement(IElementFactory elementFactory, IElement parent, IRule rule, IdentifierCollection ruleIds);
    internal virtual string get_DebugSummary();
}
internal static class System.Speech.Internal.Helpers : object {
    internal static Char[] _achTrimChars;
    internal static int _sizeOfChar;
    private static Helpers();
    internal static void ThrowIfEmptyOrNull(string s, string paramName);
    internal static void ThrowIfNull(object value, string paramName);
    internal static bool CompareInvariantCulture(CultureInfo culture1, CultureInfo culture2);
    internal static void CopyStream(Stream inputStream, Stream outputStream, int bytesToCopy);
    internal static Byte[] ReadStreamToByteArray(Stream inputStream, int bytesToCopy);
    internal static void BlockingRead(Stream stream, Byte[] buffer, int offset, int count);
}
internal class System.Speech.Internal.HGlobalSafeHandle : SafeHandle {
    private int _bufferSize;
    public bool IsInvalid { get; }
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    internal IntPtr Buffer(int size);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal interface System.Speech.Internal.IAsyncDispatch {
    public abstract virtual void Post(object evt);
    public abstract virtual void Post(Object[] evt);
    public abstract virtual void PostOperation(Delegate callback, Object[] parameters);
}
[DebuggerDisplayAttribute("{Name}")]
internal class System.Speech.Internal.ObjectTokens.ObjectToken : RegistryDataKey {
    private ISpObjectToken _sapiObjectToken;
    private bool _disposeSapiObjectToken;
    private RegistryDataKey _attributes;
    internal RegistryDataKey Attributes { get; }
    internal ISpObjectToken SAPIToken { get; }
    internal string Age { get; }
    internal string Gender { get; }
    internal CultureInfo Culture { get; }
    internal string Description { get; }
    protected ObjectToken(ISpObjectToken sapiObjectToken, bool disposeSapiToken);
    internal static ObjectToken Open(ISpObjectToken sapiObjectToken);
    internal static ObjectToken Open(string sCategoryId, string sTokenId, bool fCreateIfNotExist);
    protected virtual void Dispose(bool disposing);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal RegistryDataKey get_Attributes();
    internal ISpObjectToken get_SAPIToken();
    internal string get_Age();
    internal string get_Gender();
    internal string TokenName();
    internal CultureInfo get_Culture();
    internal string get_Description();
    public sealed virtual void SetId(string pszCategoryId, string pszTokenId, bool fCreateIfNotExist);
    public sealed virtual void GetId(IntPtr& ppszCoMemTokenId);
    public sealed virtual void Slot15();
    public sealed virtual void Slot16();
    public sealed virtual void Slot17();
    public sealed virtual void Slot18();
    public sealed virtual void Slot19();
    public sealed virtual void Slot20();
    public sealed virtual void Slot21();
    public sealed virtual void MatchesAttributes(string pszAttributes, Boolean& pfMatches);
    internal bool MatchesAttributes(String[] sAttributes);
    internal T CreateObjectFromToken(string name);
}
internal class System.Speech.Internal.ObjectTokens.ObjectTokenCategory : RegistryDataKey {
    protected ObjectTokenCategory(string keyId, RegistryDataKey key);
    internal static ObjectTokenCategory Create(string sCategoryId);
    internal ObjectToken OpenToken(string keyName);
    internal List`1<ObjectToken> FindMatchingTokens(string requiredAttributes, string optionalAttributes);
    [IteratorStateMachineAttribute("System.Speech.Internal.ObjectTokens.ObjectTokenCategory/<System-Collections-Generic-IEnumerable<System-Speech-Internal-ObjectTokens-ObjectToken>-GetEnumerator>d__4")]
private sealed virtual override IEnumerator`1<ObjectToken> System.Collections.Generic.IEnumerable<System.Speech.Internal.ObjectTokens.ObjectToken>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerDisplayAttribute("{Name}")]
internal class System.Speech.Internal.ObjectTokens.RegistryDataKey : object {
    internal string _sKeyId;
    internal ISpDataKey _sapiRegKey;
    internal bool _disposeSapiKey;
    internal string Id { get; }
    internal string Name { get; }
    protected RegistryDataKey(string fullPath, SafeRegistryHandle regHandle);
    protected RegistryDataKey(string fullPath, RegistryKey managedRegKey);
    protected RegistryDataKey(string fullPath, RegistryDataKey copyKey);
    protected RegistryDataKey(string fullPath, ISpDataKey copyKey, bool shouldDispose);
    protected RegistryDataKey(ISpObjectToken sapiToken);
    internal static RegistryDataKey Open(string registryPath, bool fCreateIfNotExist);
    internal static RegistryDataKey Create(string keyId, RegistryKey hkey);
    private static RegistryDataKey OpenSubKey(RegistryDataKey baseKey, string registryPath, bool createIfNotExist);
    private static string GetTokenIdFromToken(ISpObjectToken sapiToken);
    public sealed virtual void Dispose();
    public sealed virtual int SetData(string valueName, UInt32 cbData, Byte[] data);
    public sealed virtual int GetData(string valueName, UInt32& pcbData, Byte[] data);
    public sealed virtual int SetStringValue(string valueName, string value);
    public sealed virtual int GetStringValue(string valueName, String& value);
    public sealed virtual int SetDWORD(string valueName, UInt32 value);
    public sealed virtual int GetDWORD(string valueName, UInt32& pdwValue);
    public sealed virtual int OpenKey(string subKeyName, ISpDataKey& ppSubKey);
    public sealed virtual int CreateKey(string subKeyName, ISpDataKey& ppSubKey);
    public sealed virtual int DeleteKey(string subKeyName);
    public sealed virtual int DeleteValue(string valueName);
    public sealed virtual int EnumKeys(UInt32 index, String& ppszSubKeyName);
    public sealed virtual int EnumValues(UInt32 index, String& valueName);
    internal string get_Id();
    internal string get_Name();
    internal bool TryGetString(string valueName, String& value);
    internal bool HasValue(string valueName);
    internal bool TryGetDWORD(string valueName, UInt32& value);
    internal RegistryDataKey OpenKey(string keyName);
    internal RegistryDataKey CreateKey(string keyName);
    internal String[] GetValueNames();
    [IteratorStateMachineAttribute("System.Speech.Internal.ObjectTokens.RegistryDataKey/<System-Collections-Generic-IEnumerable<System-Speech-Internal-ObjectTokens-RegistryDataKey>-GetEnumerator>d__32")]
private sealed virtual override IEnumerator`1<RegistryDataKey> System.Collections.Generic.IEnumerable<System.Speech.Internal.ObjectTokens.RegistryDataKey>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void Dispose(bool disposing);
    private static SafeRegistryHandle RootHKEYFromRegPath(string rootPath);
    private static string GetFirstKeyAndParseRemainder(String& registryPath);
    private static RegistryKey RegKeyFromRootPath(string rootPath);
}
internal static class System.Speech.Internal.ObjectTokens.SAPICategories : object {
    private static string SpeechRegistryKey;
    internal static string CurrentUserVoices;
    internal static string Recognizers;
    internal static string Voices;
    internal static string AudioIn;
    private static string _defaultTokenIdValueName;
    private static String[] s_asVersionDefault;
    private static SAPICategories();
    internal static ObjectToken DefaultToken(string category);
    internal static int DefaultDeviceOut();
    private static ObjectToken DefaultToken(string category, string defaultTokenIdValueName);
    private static ObjectToken GetPreference(string category, string defaultLocation);
    private static int CompareTokenVersions(ObjectToken token1, ObjectToken token2, Boolean& pfDidCompare);
    private static int CompareVersions(string sV1, string sV2);
    private static bool ParseVersion(string s, UInt16[] Version);
    private static ObjectToken GetHighestTokenVersion(ObjectToken token, ObjectToken tokenSeed, String[] criterias);
}
internal class System.Speech.Internal.PhonemeConverter : object {
    private PhoneMap _phoneMap;
    private static PhoneMapCompressed[] s_phoneMapsCompressed;
    private static PhoneMap[] s_phoneMaps;
    private static Char[] s_updIds;
    private static PhonemeConverter s_upsConverter;
    internal static PhonemeConverter UpsConverter { get; }
    private PhonemeConverter(PhoneMap phoneMap);
    private static PhonemeConverter();
    internal static PhonemeConverter get_UpsConverter();
    internal static string ConvertPronToId(string pronunciation, int lcid);
    internal string ConvertPronToId(string sPhone);
    internal static void ValidateUpsIds(string ids);
    internal static void ValidateUpsIds(Char[] ids);
    private static PhoneMap[] DecompressPhoneMaps(PhoneMapCompressed[] pmComps);
}
internal abstract class System.Speech.Internal.RBList : object {
    private TreeNode _root;
    internal bool IsEmpty { get; }
    internal bool CountIsOne { get; }
    internal bool ContainsMoreThanOneItem { get; }
    internal object First { get; }
    internal void Add(object key);
    internal void Remove(object key);
    public sealed virtual IEnumerator GetEnumerator();
    internal bool get_IsEmpty();
    internal bool get_CountIsOne();
    internal bool get_ContainsMoreThanOneItem();
    internal object get_First();
    protected abstract virtual int CompareTo(object object1, object object2);
    private static TreeNode GetUncle(TreeNode node);
    private static TreeNode GetSibling(TreeNode node, TreeNode parent);
    private static NodeColor GetColor(TreeNode node);
    private static void SetColor(TreeNode node, NodeColor color);
    private static void TakeParent(TreeNode node, TreeNode newNode);
    private static TreeNode RotateLeft(TreeNode node);
    private static TreeNode RotateRight(TreeNode node);
    private static TreeNode FindMinSubTree(TreeNode node);
    private static TreeNode FindSuccessor(TreeNode node);
    private static TreeNode DeleteNode(TreeNode node);
    private TreeNode InsertNode(TreeNode node, TreeNode newNode);
    private TreeNode FindItem(TreeNode node, object key);
    private TreeNode FindRoot(TreeNode node);
    private void FixUpInsertion(TreeNode node);
    private void FixInsertCase1(TreeNode node);
    private void FixInsertCase2(TreeNode node);
    private void FixInsertCase3(TreeNode node);
    private void FixInsertCase4(TreeNode node);
    private static void FixUpRemoval(TreeNode node);
    private static void FixRemovalCase1(TreeNode node);
    private static void FixRemovalCase2(TreeNode sibling);
    private static void FixRemovalCase3(TreeNode sibling);
    private static void FixRemovalCase4(TreeNode sibling);
    private static void FixRemovalCase5(TreeNode sibling);
    private static void FixRemovalCase6(TreeNode sibling);
}
internal class System.Speech.Internal.ResourceLoader : object {
    internal Stream LoadFile(Uri uri, String& mimeType, Uri& baseUri, String& localPath);
    internal void UnloadFile(string localPath);
    internal Stream LoadFile(Uri uri, String& localPath, Uri& redirectedUri);
    private static MemoryStream DownloadData(Uri uri, Uri& redirectedUri);
}
internal static class System.Speech.Internal.SapiAttributeParser : object {
    internal static CultureInfo GetCultureInfoFromLanguageString(string valueString);
    internal static List`1<SpeechAudioFormatInfo> GetAudioFormatsFromString(string valueString);
}
internal class System.Speech.Internal.SapiInterop.EventNotify : object {
    private IAsyncDispatch _dispatcher;
    private WeakReference _sapiEventSourceReference;
    private bool _additionalSapiFeatures;
    private SpeechAudioFormatInfo _audioFormat;
    private ISpNotifySink _notifySink;
    unknown SpeechAudioFormatInfo AudioFormat {internal set; }
    internal EventNotify(ISpEventSource sapiEventSource, IAsyncDispatch dispatcher, bool additionalSapiFeatures);
    internal void Dispose();
    internal void SendNotification(object ignored);
    internal void set_AudioFormat(SpeechAudioFormatInfo value);
}
internal class System.Speech.Internal.SapiInterop.FILETIME : ValueType {
    internal UInt32 dwLowDateTime;
    internal UInt32 dwHighDateTime;
}
[GuidAttribute("06B64F9E-7FDA-11D2-B4F2-00C04F797396")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.IEnumSpObjectTokens {
    public abstract virtual void Slot1();
    public abstract virtual void Slot2();
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Item(UInt32 Index, ISpObjectToken& ppToken);
    public abstract virtual void GetCount(UInt32& pCount);
}
[GuidAttribute("14056581-E16C-11D2-BB90-00C04F8EE6C0")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpDataKey {
    public abstract virtual int SetData(string valueName, UInt32 cbData, Byte[] data);
    public abstract virtual int GetData(string valueName, UInt32& pcbData, Byte[] data);
    public abstract virtual int SetStringValue(string valueName, string value);
    public abstract virtual int GetStringValue(string valueName, String& value);
    public abstract virtual int SetDWORD(string valueName, UInt32 dwValue);
    public abstract virtual int GetDWORD(string valueName, UInt32& pdwValue);
    public abstract virtual int OpenKey(string subKeyName, ISpDataKey& ppSubKey);
    public abstract virtual int CreateKey(string subKey, ISpDataKey& ppSubKey);
    public abstract virtual int DeleteKey(string subKey);
    public abstract virtual int DeleteValue(string valueName);
    public abstract virtual int EnumKeys(UInt32 index, String& ppszSubKeyName);
    public abstract virtual int EnumValues(UInt32 index, String& valueName);
}
[GuidAttribute("C8D7C7E2-0DDE-44b7-AFE3-B0C991FBEB5E")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpDisplayAlternates {
    public abstract virtual void GetDisplayAlternates(IntPtr pPhrase, UInt32 cRequestCount, IntPtr[] ppCoMemPhrases, UInt32& pcPhrasesReturned);
}
[GuidAttribute("2D5F1C0C-BD75-4b08-9478-3B11FEA2586C")]
internal interface System.Speech.Internal.SapiInterop.ISpeechRecognizer {
    public object Slot1 { get; public set; }
    public object Slot2 { get; public set; }
    public object Slot3 { get; public set; }
    public object Slot4 { get; public set; }
    public object Slot5 { get; }
    public object Slot6 { get; public set; }
    public object Slot7 { get; public set; }
    public object Slot8 { get; }
    public abstract virtual object get_Slot1();
    public abstract virtual void set_Slot1(object value);
    public abstract virtual object get_Slot2();
    public abstract virtual void set_Slot2(object value);
    public abstract virtual object get_Slot3();
    public abstract virtual void set_Slot3(object value);
    public abstract virtual object get_Slot4();
    public abstract virtual void set_Slot4(object value);
    public abstract virtual object get_Slot5();
    public abstract virtual object get_Slot6();
    public abstract virtual void set_Slot6(object value);
    public abstract virtual object get_Slot7();
    public abstract virtual void set_Slot7(object value);
    public abstract virtual object get_Slot8();
    [DispIdAttribute("9")]
public abstract virtual int EmulateRecognition(object TextElements, Object& ElementDisplayAttributes, int LanguageId);
    public abstract virtual void Slot10();
    public abstract virtual void Slot11();
    public abstract virtual void Slot12();
    public abstract virtual void Slot13();
    public abstract virtual void Slot14();
    public abstract virtual void Slot15();
    public abstract virtual void Slot16();
    public abstract virtual void Slot17();
    public abstract virtual void Slot18();
    public abstract virtual void Slot19();
    public abstract virtual void Slot20();
}
[GuidAttribute("BE7A9CCE-5F9E-11D2-960F-00C04F8EE628")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpEventSource {
    public abstract virtual void SetNotifySink(ISpNotifySink pNotifySink);
    public abstract virtual void SetNotifyWindowMessage(UInt32 hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual int WaitForNotifyEvent(UInt32 dwMilliseconds);
    public abstract virtual void Slot7();
    public abstract virtual void SetInterest(ulong ullEventInterest, ulong ullQueuedInterest);
    public abstract virtual void GetEvents(UInt32 ulCount, SPEVENT& pEventArray, UInt32& pulFetched);
    public abstract virtual void Slot10();
}
[GuidAttribute("2373A435-6A4B-429e-A6AC-D4231A61975B")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpEventSource2 {
    public abstract virtual void SetNotifySink(ISpNotifySink pNotifySink);
    public abstract virtual void SetNotifyWindowMessage(UInt32 hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual int WaitForNotifyEvent(UInt32 dwMilliseconds);
    public abstract virtual void Slot7();
    public abstract virtual void SetInterest(ulong ullEventInterest, ulong ullQueuedInterest);
    public abstract virtual void GetEvents(UInt32 ulCount, SPEVENT& pEventArray, UInt32& pulFetched);
    public abstract virtual void Slot10();
    public abstract virtual void GetEventsEx(UInt32 ulCount, SPEVENTEX& pEventArray, UInt32& pulFetched);
}
[GuidAttribute("8137828F-591A-4A42-BE58-49EA7EBAAC68")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpGrammarBuilder {
    public abstract virtual void Slot1();
    public abstract virtual void Slot2();
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual void Slot6();
    public abstract virtual void Slot7();
    public abstract virtual void Slot8();
}
[GuidAttribute("B9AC5783-FCD0-4b21-B119-B4F8DA8FD2C3")]
internal interface System.Speech.Internal.SapiInterop.ISpGrammarResourceLoader {
    public abstract virtual int LoadResource(string bstrResourceUri, bool fAlwaysReload, IStream& pStream, String& pbstrMIMEType, Int16& pfModified, String& pbstrRedirectUrl);
    public abstract virtual string GetLocalCopy(Uri resourcePath, String& mimeType, Uri& redirectUrl);
    public abstract virtual void ReleaseLocalCopy(string path);
}
[GuidAttribute("259684DC-37C3-11D2-9603-00C04F8EE628")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpNotifySink {
    public abstract virtual void Notify();
}
[GuidAttribute("5EFF4AEF-8487-11D2-961C-00C04F8EE628")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpNotifySource {
    public abstract virtual void SetNotifySink(ISpNotifySink pNotifySink);
    public abstract virtual void SetNotifyWindowMessage(UInt32 hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual int WaitForNotifyEvent(UInt32 dwMilliseconds);
    public abstract virtual void Slot7();
}
[GuidAttribute("14056589-E16C-11D2-BB90-00C04F8EE6C0")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpObjectToken {
    public abstract virtual int SetData(string pszValueName, UInt32 cbData, Byte[] pData);
    public abstract virtual int GetData(string pszValueName, UInt32& pcbData, Byte[] pData);
    public abstract virtual int SetStringValue(string pszValueName, string pszValue);
    public abstract virtual int GetStringValue(string pszValueName, String& ppszValue);
    public abstract virtual int SetDWORD(string pszValueName, UInt32 dwValue);
    public abstract virtual int GetDWORD(string pszValueName, UInt32& pdwValue);
    public abstract virtual int OpenKey(string pszSubKeyName, ISpDataKey& ppSubKey);
    public abstract virtual int CreateKey(string pszSubKey, ISpDataKey& ppSubKey);
    public abstract virtual int DeleteKey(string pszSubKey);
    public abstract virtual int DeleteValue(string pszValueName);
    public abstract virtual int EnumKeys(UInt32 Index, String& ppszSubKeyName);
    public abstract virtual int EnumValues(UInt32 Index, String& ppszValueName);
    public abstract virtual void SetId(string pszCategoryId, string pszTokenId, bool fCreateIfNotExist);
    public abstract virtual void GetId(IntPtr& ppszCoMemTokenId);
    public abstract virtual void Slot15();
    public abstract virtual void Slot16();
    public abstract virtual void Slot17();
    public abstract virtual void Slot18();
    public abstract virtual void Slot19();
    public abstract virtual void Slot20();
    public abstract virtual void Slot21();
    public abstract virtual void MatchesAttributes(string pszAttributes, Boolean& pfMatches);
}
[GuidAttribute("2D3D3845-39AF-4850-BBF9-40B49780011D")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpObjectTokenCategory {
    public abstract virtual int SetData(string valueName, UInt32 cbData, Byte[] data);
    public abstract virtual int GetData(string valueName, UInt32& pcbData, Byte[] data);
    public abstract virtual int SetStringValue(string valueName, string value);
    public abstract virtual void GetStringValue(string pszValueName, String& ppszValue);
    public abstract virtual int SetDWORD(string valueName, UInt32 dwValue);
    public abstract virtual int GetDWORD(string pszValueName, UInt32& pdwValue);
    public abstract virtual int OpenKey(string pszSubKeyName, ISpDataKey& ppSubKey);
    public abstract virtual int CreateKey(string subKey, ISpDataKey& ppSubKey);
    public abstract virtual int DeleteKey(string subKey);
    public abstract virtual int DeleteValue(string valueName);
    public abstract virtual int EnumKeys(UInt32 index, String& ppszSubKeyName);
    public abstract virtual int EnumValues(UInt32 Index, String& ppszValueName);
    public abstract virtual void SetId(string pszCategoryId, bool fCreateIfNotExist);
    public abstract virtual void GetId(String& ppszCoMemCategoryId);
    public abstract virtual void Slot14();
    public abstract virtual void EnumTokens(string pzsReqAttribs, string pszOptAttribs, IEnumSpObjectTokens& ppEnum);
    public abstract virtual void Slot16();
    public abstract virtual void GetDefaultTokenId(String& ppszCoMemTokenId);
}
[GuidAttribute("5B559F40-E952-11D2-BB91-00C04F8EE6C0")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpObjectWithToken {
    public abstract virtual int SetObjectToken(ISpObjectToken pToken);
    public abstract virtual int GetObjectToken(ISpObjectToken& ppToken);
}
[GuidAttribute("B2745EFD-42CE-48CA-81F1-A96E02538A90")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpPhoneticAlphabetSelection {
    public abstract virtual void IsAlphabetUPS(Boolean& pfIsUPS);
    public abstract virtual void SetAlphabetToUPS(bool fForceUPS);
}
[GuidAttribute("1A5C0354-B621-4b5a-8791-D306ED379E53")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpPhrase {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
}
[GuidAttribute("8FCEBC98-4E49-4067-9C6C-D86A0E092E3D")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpPhraseAlt {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void GetAltInfo(ISpPhrase& ppParent, UInt32& pulStartElementInParent, UInt32& pcElementsInParent, UInt32& pcElementsInAlt);
    public abstract virtual void Commit();
}
[GuidAttribute("88A3342A-0BED-4834-922B-88D43173162F")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpPhraseBuilder {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void InitFromPhrase(SPPHRASE pPhrase);
    public abstract virtual void Slot6();
    public abstract virtual void Slot7();
    public abstract virtual void Slot8();
    public abstract virtual void Slot9();
    public abstract virtual void Slot10();
}
[GuidAttribute("F264DA52-E457-4696-B856-A737B717AF79")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpPhraseEx {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void GetXMLResult(String& ppszCoMemXMLResult, SPXMLRESULTOPTIONS Options);
    public abstract virtual void GetXMLErrorInfo(SPSEMANTICERRORINFO& pSemanticErrorInfo);
    public abstract virtual void Slot7();
}
[GuidAttribute("5B4FB971-B115-4DE1-AD97-E482E3BF6EE4")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpProperties {
    public abstract virtual int SetPropertyNum(string pName, int lValue);
    public abstract virtual int GetPropertyNum(string pName, Int32& plValue);
    public abstract virtual int SetPropertyString(string pName, string pValue);
    public abstract virtual int GetPropertyString(string pName, String& ppCoMemValue);
}
[GuidAttribute("F740A62F-7C15-489E-8234-940A33D9272D")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoContext {
    public abstract virtual void SetNotifySink(ISpNotifySink pNotifySink);
    public abstract virtual void SetNotifyWindowMessage(UInt32 hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual int WaitForNotifyEvent(UInt32 dwMilliseconds);
    public abstract virtual void Slot7();
    public abstract virtual void SetInterest(ulong ullEventInterest, ulong ullQueuedInterest);
    public abstract virtual void GetEvents(UInt32 ulCount, SPEVENT& pEventArray, UInt32& pulFetched);
    public abstract virtual void Slot10();
    public abstract virtual void GetRecognizer(ISpRecognizer& ppRecognizer);
    public abstract virtual void CreateGrammar(ulong ullGrammarID, ISpRecoGrammar& ppGrammar);
    public abstract virtual void GetStatus(SPRECOCONTEXTSTATUS& pStatus);
    public abstract virtual void GetMaxAlternates(UInt32& pcAlternates);
    public abstract virtual void SetMaxAlternates(UInt32 cAlternates);
    public abstract virtual void SetAudioOptions(SPAUDIOOPTIONS Options, IntPtr pAudioFormatId, IntPtr pWaveFormatEx);
    public abstract virtual void Slot17();
    public abstract virtual void Slot18();
    public abstract virtual void Bookmark(SPBOOKMARKOPTIONS Options, ulong ullStreamPosition, IntPtr lparamEvent);
    public abstract virtual void Slot20();
    public abstract virtual void Pause(UInt32 dwReserved);
    public abstract virtual void Resume(UInt32 dwReserved);
    public abstract virtual void Slot23();
    public abstract virtual void Slot24();
    public abstract virtual void Slot25();
    public abstract virtual void Slot26();
    public abstract virtual void SetContextState(SPCONTEXTSTATE eContextState);
    public abstract virtual void Slot28();
}
[GuidAttribute("BEAD311C-52FF-437f-9464-6B21054CA73D")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoContext2 {
    public abstract virtual void SetGrammarOptions(SPGRAMMAROPTIONS eGrammarOptions);
    public abstract virtual void Slot2();
    public abstract virtual void SetAdaptationData2(string pAdaptationData, UInt32 cch, string pTopicName, SPADAPTATIONSETTINGS eSettings, SPADAPTATIONRELEVANCE eRelevance);
}
[GuidAttribute("C2B5F241-DAA0-4507-9E16-5A1EAA2B7A5C")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecognizer {
    public abstract virtual int SetPropertyNum(string pName, int lValue);
    public abstract virtual int GetPropertyNum(string pName, Int32& plValue);
    public abstract virtual int SetPropertyString(string pName, string pValue);
    public abstract virtual int GetPropertyString(string pName, String& ppCoMemValue);
    public abstract virtual void SetRecognizer(ISpObjectToken pRecognizer);
    public abstract virtual void GetRecognizer(ISpObjectToken& ppRecognizer);
    public abstract virtual void SetInput(object pUnkInput, bool fAllowFormatChanges);
    public abstract virtual void Slot8();
    public abstract virtual void Slot9();
    public abstract virtual void CreateRecoContext(ISpRecoContext& ppNewCtxt);
    public abstract virtual void Slot11();
    public abstract virtual void Slot12();
    public abstract virtual void Slot13();
    public abstract virtual void GetRecoState(SPRECOSTATE& pState);
    public abstract virtual void SetRecoState(SPRECOSTATE NewState);
    public abstract virtual void GetStatus(SPRECOGNIZERSTATUS& pStatus);
    public abstract virtual void GetFormat(SPSTREAMFORMATTYPE WaveFormatType, Guid& pFormatId, IntPtr& ppCoMemWFEX);
    public abstract virtual void IsUISupported(string pszTypeOfUI, IntPtr pvExtraData, UInt32 cbExtraData, Boolean& pfSupported);
    public abstract virtual int DisplayUI(IntPtr hWndParent, string pszTitle, string pszTypeOfUI, IntPtr pvExtraData, UInt32 cbExtraData);
    public abstract virtual int EmulateRecognition(ISpPhrase pPhrase);
}
[GuidAttribute("8FC6D974-C81E-4098-93C5-0147F61ED4D3")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecognizer2 {
    public abstract virtual int EmulateRecognitionEx(ISpPhrase pPhrase, UInt32 dwCompareFlags);
    public abstract virtual void SetTrainingState(bool fDoingTraining, bool fAdaptFromTrainingData);
    public abstract virtual void ResetAcousticModelAdaptation();
}
[GuidAttribute("2177DB29-7F45-47D0-8554-067E91C80502")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoGrammar {
    public abstract virtual void Slot1();
    public abstract virtual void Slot2();
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Slot5();
    public abstract virtual void Slot6();
    public abstract virtual void Slot7();
    public abstract virtual void Slot8();
    public abstract virtual void Slot9();
    public abstract virtual void Slot10();
    public abstract virtual void LoadCmdFromFile(string pszFileName, SPLOADOPTIONS Options);
    public abstract virtual void Slot12();
    public abstract virtual void Slot13();
    public abstract virtual void LoadCmdFromMemory(IntPtr pGrammar, SPLOADOPTIONS Options);
    public abstract virtual void Slot15();
    public abstract virtual int SetRuleState(string pszName, IntPtr pReserved, SPRULESTATE NewState);
    public abstract virtual void Slot17();
    public abstract virtual void LoadDictation(string pszTopicName, SPLOADOPTIONS Options);
    public abstract virtual void Slot19();
    public abstract virtual int SetDictationState(SPRULESTATE NewState);
    public abstract virtual void SetWordSequenceData(string pText, UInt32 cchText, SPTEXTSELECTIONINFO& pInfo);
    public abstract virtual void SetTextSelection(SPTEXTSELECTIONINFO& pInfo);
    public abstract virtual void Slot23();
    public abstract virtual void SetGrammarState(SPGRAMMARSTATE eGrammarState);
    public abstract virtual void Slot25();
    public abstract virtual void Slot26();
}
[GuidAttribute("4B37BC9E-9ED6-44a3-93D3-18F022B79EC3")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoGrammar2 {
    public abstract virtual void GetRules(IntPtr& ppCoMemRules, UInt32& puNumRules);
    public abstract virtual void LoadCmdFromFile2(string pszFileName, SPLOADOPTIONS Options, string pszSharingUri, string pszBaseUri);
    public abstract virtual void LoadCmdFromMemory2(IntPtr pGrammar, SPLOADOPTIONS Options, string pszSharingUri, string pszBaseUri);
    public abstract virtual void SetRulePriority(string pszRuleName, UInt32 ulRuleId, int nRulePriority);
    public abstract virtual void SetRuleWeight(string pszRuleName, UInt32 ulRuleId, float flWeight);
    public abstract virtual void SetDictationWeight(float flWeight);
    public abstract virtual void SetGrammarLoader(ISpGrammarResourceLoader pLoader);
    public abstract virtual void Slot2();
}
[GuidAttribute("20B053BE-E235-43cd-9A2A-8D17A48B7842")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoResult {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void Slot5();
    public abstract virtual void GetAlternates(int ulStartElement, int cElements, int ulRequestCount, IntPtr[] ppPhrases, Int32& pcPhrasesReturned);
    public abstract virtual void GetAudio(UInt32 ulStartElement, UInt32 cElements, ISpStreamFormat& ppStream);
    public abstract virtual void Slot8();
    public abstract virtual void Serialize(IntPtr& ppCoMemSerializedResult);
    public abstract virtual void Slot10();
    public abstract virtual void Slot11();
}
[GuidAttribute("27CAC6C4-88F2-41f2-8817-0C95E59F1E6E")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRecoResult2 {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void Slot5();
    public abstract virtual void GetAlternates(int ulStartElement, int cElements, int ulRequestCount, IntPtr[] ppPhrases, Int32& pcPhrasesReturned);
    public abstract virtual void GetAudio(UInt32 ulStartElement, UInt32 cElements, ISpStreamFormat& ppStream);
    public abstract virtual void Slot8();
    public abstract virtual void Serialize(IntPtr& ppCoMemSerializedResult);
    public abstract virtual void Slot10();
    public abstract virtual void Slot11();
    public abstract virtual void CommitAlternate(ISpPhraseAlt pPhraseAlt, ISpRecoResult& ppNewResult);
    public abstract virtual void CommitText(UInt32 ulStartElement, UInt32 ulCountOfElements, string pszCorrectedData, SPCOMMITFLAGS commitFlags);
    public abstract virtual void SetTextFeedback(string pszFeedback, bool fSuccessful);
}
[GuidAttribute("92A66E2B-C830-4149-83DF-6FC2BA1E7A5B")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpRegDataKey {
    public abstract virtual int SetData(string valueName, UInt32 cbData, Byte[] data);
    public abstract virtual int GetData(string valueName, UInt32& pcbData, Byte[] data);
    public abstract virtual int SetStringValue(string valueName, string value);
    public abstract virtual int GetStringValue(string pszValueName, String& ppszValue);
    public abstract virtual int SetDWORD(string valueName, UInt32 dwValue);
    public abstract virtual int GetDWORD(string pszValueName, UInt32& pdwValue);
    public abstract virtual int OpenKey(string pszSubKeyName, ISpDataKey& ppSubKey);
    public abstract virtual int CreateKey(string subKey, ISpDataKey& ppSubKey);
    public abstract virtual int DeleteKey(string subKey);
    public abstract virtual int DeleteValue(string valueName);
    public abstract virtual int EnumKeys(UInt32 index, String& ppszSubKeyName);
    public abstract virtual int EnumValues(UInt32 Index, String& ppszValueName);
    public abstract virtual int SetKey(SafeRegistryHandle hkey, bool fReadOnly);
}
[GuidAttribute("BED530BE-2606-4F4D-A1C0-54C5CDA5566F")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpStream {
    public abstract virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public abstract virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public abstract virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public abstract virtual void SetSize(long libNewSize);
    public abstract virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public abstract virtual void Commit(int grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public abstract virtual void Clone(IStream& ppstm);
    public abstract virtual void GetFormat(Guid& pguidFormatId, IntPtr& ppCoMemWaveFormatEx);
    public abstract virtual void SetBaseStream(IStream pStream, Guid& rguidFormat, IntPtr pWaveFormatEx);
    public abstract virtual void Slot14();
    public abstract virtual void BindToFile(string pszFileName, SPFILEMODE eMode, Guid& pFormatId, IntPtr pWaveFormatEx, ulong ullEventInterest);
    public abstract virtual void Close();
}
[GuidAttribute("BED530BE-2606-4F4D-A1C0-54C5CDA5566F")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpStreamFormat {
    public abstract virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public abstract virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public abstract virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public abstract virtual void SetSize(long libNewSize);
    public abstract virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public abstract virtual void Commit(int grfCommitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public abstract virtual void Clone(IStream& ppstm);
    public abstract virtual void GetFormat(Guid& pguidFormatId, IntPtr& ppCoMemWaveFormatEx);
}
[GuidAttribute("AE39362B-45A8-4074-9B9E-CCF49AA2D0B6")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.SapiInterop.ISpXMLRecoResult {
    public abstract virtual void GetPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetSerializedPhrase(IntPtr& ppCoMemPhrase);
    public abstract virtual void GetText(UInt32 ulStart, UInt32 ulCount, bool fUseTextReplacements, String& ppszCoMemText, Byte& pbDisplayAttributes);
    public abstract virtual void Discard(UInt32 dwValueTypes);
    public abstract virtual void Slot5();
    public abstract virtual void GetAlternates(int ulStartElement, int cElements, int ulRequestCount, IntPtr[] ppPhrases, Int32& pcPhrasesReturned);
    public abstract virtual void GetAudio(UInt32 ulStartElement, UInt32 cElements, ISpStreamFormat& ppStream);
    public abstract virtual void Slot8();
    public abstract virtual void Serialize(IntPtr& ppCoMemSerializedResult);
    public abstract virtual void Slot10();
    public abstract virtual void Slot11();
    public abstract virtual void GetXMLResult(String& ppszCoMemXMLResult, SPXMLRESULTOPTIONS Options);
    public abstract virtual void GetXMLErrorInfo(SPSEMANTICERRORINFO& pSemanticErrorInfo);
}
internal static class System.Speech.Internal.SapiInterop.SapiConstants : object {
    internal static string SPPROP_RESPONSE_SPEED;
    internal static string SPPROP_COMPLEX_RESPONSE_SPEED;
    internal static string SPPROP_CFG_CONFIDENCE_REJECTION_THRESHOLD;
    internal static UInt32 SPDF_ALL;
    internal static SRID SapiErrorCode2SRID(SAPIErrorCodes code);
}
internal enum System.Speech.Internal.SapiInterop.SAPIErrorCodes : Enum {
    public int value__;
    public static SAPIErrorCodes S_OK;
    public static SAPIErrorCodes S_FALSE;
    public static SAPIErrorCodes SP_NO_RULE_ACTIVE;
    public static SAPIErrorCodes SP_NO_RULES_TO_ACTIVATE;
    public static SAPIErrorCodes S_LIMIT_REACHED;
    public static SAPIErrorCodes E_FAIL;
    public static SAPIErrorCodes SP_NO_PARSE_FOUND;
    public static SAPIErrorCodes SP_WORD_EXISTS_WITHOUT_PRONUNCIATION;
    public static SAPIErrorCodes SPERR_FIRST;
    public static SAPIErrorCodes SPERR_LAST;
    public static SAPIErrorCodes STG_E_FILENOTFOUND;
    public static SAPIErrorCodes CLASS_E_CLASSNOTAVAILABLE;
    public static SAPIErrorCodes REGDB_E_CLASSNOTREG;
    public static SAPIErrorCodes SPERR_UNSUPPORTED_FORMAT;
    public static SAPIErrorCodes SPERR_UNSUPPORTED_PHONEME;
    public static SAPIErrorCodes SPERR_VOICE_NOT_FOUND;
    public static SAPIErrorCodes SPERR_NOT_IN_LEX;
    public static SAPIErrorCodes SPERR_TOO_MANY_GRAMMARS;
    public static SAPIErrorCodes SPERR_INVALID_IMPORT;
    public static SAPIErrorCodes SPERR_STREAM_CLOSED;
    public static SAPIErrorCodes SPERR_NO_MORE_ITEMS;
    public static SAPIErrorCodes SPERR_NOT_FOUND;
    public static SAPIErrorCodes SPERR_NOT_TOPLEVEL_RULE;
    public static SAPIErrorCodes SPERR_SHARED_ENGINE_DISABLED;
    public static SAPIErrorCodes SPERR_RECOGNIZER_NOT_FOUND;
    public static SAPIErrorCodes SPERR_AUDIO_NOT_FOUND;
    public static SAPIErrorCodes SPERR_NOT_SUPPORTED_FOR_INPROC_RECOGNIZER;
    public static SAPIErrorCodes SPERR_LEX_INVALID_DATA;
    public static SAPIErrorCodes SPERR_CFG_INVALID_DATA;
}
internal class System.Speech.Internal.SapiInterop.SapiGrammar : object {
    private ISpRecoGrammar2 _sapiGrammar2;
    private ISpRecoGrammar _sapiGrammar;
    private SapiProxy _sapiProxy;
    private bool _disposed;
    internal ISpRecoGrammar2 SpRecoGrammar2 { get; }
    internal SapiGrammar(ISpRecoGrammar sapiGrammar, SapiProxy thread);
    public sealed virtual void Dispose();
    internal void SetGrammarState(SPGRAMMARSTATE state);
    internal void SetWordSequenceData(string text, SPTEXTSELECTIONINFO info);
    internal void LoadCmdFromMemory(IntPtr grammar, SPLOADOPTIONS options);
    internal void LoadDictation(string pszTopicName, SPLOADOPTIONS options);
    internal SAPIErrorCodes SetDictationState(SPRULESTATE state);
    internal SAPIErrorCodes SetRuleState(string name, SPRULESTATE state);
    internal void SetGrammarLoader(ISpGrammarResourceLoader resourceLoader);
    internal void LoadCmdFromMemory2(IntPtr grammar, SPLOADOPTIONS options, string sharingUri, string baseUri);
    internal void SetRulePriority(string name, UInt32 id, int priority);
    internal void SetRuleWeight(string name, UInt32 id, float weight);
    internal void SetDictationWeight(float weight);
    internal ISpRecoGrammar2 get_SpRecoGrammar2();
}
internal static class System.Speech.Internal.SapiInterop.SAPIGuids : object {
    internal static Guid SPDFID_WaveFormatEx;
    internal static Guid SPDFID_Text;
    private static SAPIGuids();
}
internal abstract class System.Speech.Internal.SapiInterop.SapiProxy : object {
    protected ISpeechRecognizer _speechRecognizer;
    protected ISpRecognizer2 _recognizer2;
    protected ISpRecognizer _recognizer;
    internal ISpRecognizer Recognizer { get; }
    internal ISpRecognizer2 Recognizer2 { get; }
    internal ISpeechRecognizer SapiSpeechRecognizer { get; }
    public virtual void Dispose();
    internal abstract virtual object Invoke(ObjectDelegate pfn);
    internal abstract virtual void Invoke2(VoidDelegate pfn);
    internal ISpRecognizer get_Recognizer();
    internal ISpRecognizer2 get_Recognizer2();
    internal ISpeechRecognizer get_SapiSpeechRecognizer();
}
internal class System.Speech.Internal.SapiInterop.SapiRecoContext : object {
    private ISpRecoContext _recoContext;
    private SapiProxy _proxy;
    private bool _disposed;
    internal SapiRecoContext(ISpRecoContext recoContext, SapiProxy proxy);
    public sealed virtual void Dispose();
    internal void SetInterest(ulong eventInterest, ulong queuedInterest);
    internal SapiGrammar CreateGrammar(ulong id);
    internal void SetMaxAlternates(UInt32 count);
    internal void SetAudioOptions(SPAUDIOOPTIONS options, IntPtr audioFormatId, IntPtr waveFormatEx);
    internal void Bookmark(SPBOOKMARKOPTIONS options, ulong position, IntPtr lparam);
    internal void Resume();
    internal void SetContextState(SPCONTEXTSTATE state);
    internal EventNotify CreateEventNotify(AsyncSerializedWorker asyncWorker, bool supportsSapi53);
    internal void DisposeEventNotify(EventNotify eventNotify);
    internal void SetGrammarOptions(SPGRAMMAROPTIONS options);
    [CompilerGeneratedAttribute]
private void <Dispose>b__1_0();
    [CompilerGeneratedAttribute]
private void <Resume>b__7_0();
}
internal class System.Speech.Internal.SapiInterop.SapiRecognizer : object {
    private SapiProxy _proxy;
    private bool _disposed;
    private bool _isSap53;
    internal bool IsSapi53 { get; }
    internal SapiRecognizer(RecognizerType type);
    public sealed virtual void Dispose();
    internal void SetPropertyNum(string name, int value);
    internal int GetPropertyNum(string name);
    internal void SetPropertyString(string name, string value);
    internal string GetPropertyString(string name);
    internal void SetRecognizer(ISpObjectToken recognizer);
    internal RecognizerInfo GetRecognizerInfo();
    internal void SetInput(object input, bool allowFormatChanges);
    internal SapiRecoContext CreateRecoContext();
    internal SPRECOSTATE GetRecoState();
    internal void SetRecoState(SPRECOSTATE state);
    internal SPRECOGNIZERSTATUS GetStatus();
    internal IntPtr GetFormat(SPSTREAMFORMATTYPE WaveFormatType);
    internal SAPIErrorCodes EmulateRecognition(string phrase);
    internal SAPIErrorCodes EmulateRecognition(ISpPhrase iSpPhrase, UInt32 dwCompareFlags);
    internal bool get_IsSapi53();
    private static void SetProperty(ISpRecognizer sapiRecognizer, string name, object value);
    private static object GetProperty(ISpRecognizer sapiRecognizer, string name, bool integer);
}
internal enum System.Speech.Internal.SapiInterop.SPADAPTATIONRELEVANCE : Enum {
    public int value__;
    public static SPADAPTATIONRELEVANCE SPAR_Unknown;
    public static SPADAPTATIONRELEVANCE SPAR_Low;
    public static SPADAPTATIONRELEVANCE SPAR_Medium;
    public static SPADAPTATIONRELEVANCE SPAR_High;
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPADAPTATIONSETTINGS : Enum {
    public int value__;
    public static SPADAPTATIONSETTINGS SPADS_Default;
    public static SPADAPTATIONSETTINGS SPADS_CurrentRecognizer;
    public static SPADAPTATIONSETTINGS SPADS_RecoProfile;
    public static SPADAPTATIONSETTINGS SPADS_Immediate;
    public static SPADAPTATIONSETTINGS SPADS_Reset;
}
internal enum System.Speech.Internal.SapiInterop.SPAUDIOOPTIONS : Enum {
    public int value__;
    public static SPAUDIOOPTIONS SPAO_NONE;
    public static SPAUDIOOPTIONS SPAO_RETAIN_AUDIO;
}
internal enum System.Speech.Internal.SapiInterop.SPAUDIOSTATE : Enum {
    public int value__;
    public static SPAUDIOSTATE SPAS_CLOSED;
    public static SPAUDIOSTATE SPAS_STOP;
    public static SPAUDIOSTATE SPAS_PAUSE;
    public static SPAUDIOSTATE SPAS_RUN;
}
internal class System.Speech.Internal.SapiInterop.SPAUDIOSTATUS : ValueType {
    internal int cbFreeBuffSpace;
    internal UInt32 cbNonBlockingIO;
    internal SPAUDIOSTATE State;
    internal ulong CurSeekPos;
    internal ulong CurDevicePos;
    internal UInt32 dwAudioLevel;
    internal UInt32 dwReserved2;
}
internal class System.Speech.Internal.SapiInterop.SpAudioStreamWrapper : SpStreamWrapper {
    private static UInt32 RIFF_MARKER;
    private static UInt32 WAVE_MARKER;
    private static UInt32 FMT_MARKER;
    private static UInt32 DATA_MARKER;
    private Byte[] _wfx;
    private Guid _formatType;
    internal SpAudioStreamWrapper(Stream stream, SpeechAudioFormatInfo audioFormat);
    private sealed virtual override void System.Speech.Internal.SapiInterop.ISpStreamFormat.GetFormat(Guid& guid, IntPtr& format);
    internal void GetStreamOffsets(Stream stream);
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPBOOKMARKOPTIONS : Enum {
    public int value__;
    public static SPBOOKMARKOPTIONS SPBO_NONE;
    public static SPBOOKMARKOPTIONS SPBO_PAUSE;
    public static SPBOOKMARKOPTIONS SPBO_AHEAD;
    public static SPBOOKMARKOPTIONS SPBO_TIME_UNITS;
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPCOMMITFLAGS : Enum {
    public int value__;
    public static SPCOMMITFLAGS SPCF_NONE;
    public static SPCOMMITFLAGS SPCF_ADD_TO_USER_LEXICON;
    public static SPCOMMITFLAGS SPCF_DEFINITE_CORRECTION;
}
internal enum System.Speech.Internal.SapiInterop.SPCONTEXTSTATE : Enum {
    public int value__;
    public static SPCONTEXTSTATE SPCS_DISABLED;
    public static SPCONTEXTSTATE SPCS_ENABLED;
}
[GuidAttribute("D9F6EE60-58C9-458B-88E1-2F908FD7F87C")]
internal class System.Speech.Internal.SapiInterop.SpDataKey : object {
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SpeechEmulationCompareFlags : Enum {
    public int value__;
    public static SpeechEmulationCompareFlags SECFIgnoreCase;
    public static SpeechEmulationCompareFlags SECFIgnoreKanaType;
    public static SpeechEmulationCompareFlags SECFIgnoreWidth;
    public static SpeechEmulationCompareFlags SECFNoSpecialChars;
    public static SpeechEmulationCompareFlags SECFEmulateResult;
    public static SpeechEmulationCompareFlags SECFDefault;
}
internal class System.Speech.Internal.SapiInterop.SpeechEvent : object {
    private SPEVENTENUM _eventId;
    private SPEVENTLPARAMTYPE _paramType;
    private ulong _audioStreamOffset;
    private ulong _wParam;
    private ulong _lParam;
    private TimeSpan _audioPosition;
    private int _sizeMemoryPressure;
    internal SPEVENTENUM EventId { get; }
    internal ulong AudioStreamOffset { get; }
    internal ulong WParam { get; }
    internal ulong LParam { get; }
    internal TimeSpan AudioPosition { get; }
    private SpeechEvent(SPEVENTENUM eEventId, SPEVENTLPARAMTYPE elParamType, ulong ullAudioStreamOffset, IntPtr wParam, IntPtr lParam);
    private SpeechEvent(SPEVENT sapiEvent, SpeechAudioFormatInfo audioFormat);
    private SpeechEvent(SPEVENTEX sapiEventEx);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal static SpeechEvent TryCreateSpeechEvent(ISpEventSource sapiEventSource, bool additionalSapiFeatures, SpeechAudioFormatInfo audioFormat);
    internal SPEVENTENUM get_EventId();
    internal ulong get_AudioStreamOffset();
    internal ulong get_WParam();
    internal ulong get_LParam();
    internal TimeSpan get_AudioPosition();
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPENDSRSTREAMFLAGS : Enum {
    public int value__;
    public static SPENDSRSTREAMFLAGS SPESF_NONE;
    public static SPENDSRSTREAMFLAGS SPESF_STREAM_RELEASED;
    public static SPENDSRSTREAMFLAGS SPESF_EMULATED;
}
internal class System.Speech.Internal.SapiInterop.SPEVENT : ValueType {
    public SPEVENTENUM eEventId;
    public SPEVENTLPARAMTYPE elParamType;
    public UInt32 ulStreamNum;
    public ulong ullAudioStreamOffset;
    public IntPtr wParam;
    public IntPtr lParam;
}
internal enum System.Speech.Internal.SapiInterop.SPEVENTENUM : Enum {
    public ushort value__;
    public static SPEVENTENUM SPEI_UNDEFINED;
    public static SPEVENTENUM SPEI_START_INPUT_STREAM;
    public static SPEVENTENUM SPEI_END_INPUT_STREAM;
    public static SPEVENTENUM SPEI_VOICE_CHANGE;
    public static SPEVENTENUM SPEI_TTS_BOOKMARK;
    public static SPEVENTENUM SPEI_WORD_BOUNDARY;
    public static SPEVENTENUM SPEI_PHONEME;
    public static SPEVENTENUM SPEI_SENTENCE_BOUNDARY;
    public static SPEVENTENUM SPEI_VISEME;
    public static SPEVENTENUM SPEI_TTS_AUDIO_LEVEL;
    public static SPEVENTENUM SPEI_TTS_PRIVATE;
    public static SPEVENTENUM SPEI_MIN_TTS;
    public static SPEVENTENUM SPEI_MAX_TTS;
    public static SPEVENTENUM SPEI_END_SR_STREAM;
    public static SPEVENTENUM SPEI_SOUND_START;
    public static SPEVENTENUM SPEI_SOUND_END;
    public static SPEVENTENUM SPEI_PHRASE_START;
    public static SPEVENTENUM SPEI_RECOGNITION;
    public static SPEVENTENUM SPEI_HYPOTHESIS;
    public static SPEVENTENUM SPEI_SR_BOOKMARK;
    public static SPEVENTENUM SPEI_PROPERTY_NUM_CHANGE;
    public static SPEVENTENUM SPEI_PROPERTY_STRING_CHANGE;
    public static SPEVENTENUM SPEI_FALSE_RECOGNITION;
    public static SPEVENTENUM SPEI_INTERFERENCE;
    public static SPEVENTENUM SPEI_REQUEST_UI;
    public static SPEVENTENUM SPEI_RECO_STATE_CHANGE;
    public static SPEVENTENUM SPEI_ADAPTATION;
    public static SPEVENTENUM SPEI_START_SR_STREAM;
    public static SPEVENTENUM SPEI_RECO_OTHER_CONTEXT;
    public static SPEVENTENUM SPEI_SR_AUDIO_LEVEL;
    public static SPEVENTENUM SPEI_SR_RETAINEDAUDIO;
    public static SPEVENTENUM SPEI_SR_PRIVATE;
    public static SPEVENTENUM SPEI_ACTIVE_CATEGORY_CHANGED;
    public static SPEVENTENUM SPEI_TEXTFEEDBACK;
    public static SPEVENTENUM SPEI_RECOGNITION_ALL;
    public static SPEVENTENUM SPEI_BARGE_IN;
    public static SPEVENTENUM SPEI_RESERVED1;
    public static SPEVENTENUM SPEI_RESERVED2;
    public static SPEVENTENUM SPEI_RESERVED3;
}
internal class System.Speech.Internal.SapiInterop.SPEVENTEX : ValueType {
    public SPEVENTENUM eEventId;
    public SPEVENTLPARAMTYPE elParamType;
    public UInt32 ulStreamNum;
    public ulong ullAudioStreamOffset;
    public IntPtr wParam;
    public IntPtr lParam;
    public ulong ullAudioTimeOffset;
}
internal enum System.Speech.Internal.SapiInterop.SPEVENTLPARAMTYPE : Enum {
    public ushort value__;
    public static SPEVENTLPARAMTYPE SPET_LPARAM_IS_UNDEFINED;
    public static SPEVENTLPARAMTYPE SPET_LPARAM_IS_TOKEN;
    public static SPEVENTLPARAMTYPE SPET_LPARAM_IS_OBJECT;
    public static SPEVENTLPARAMTYPE SPET_LPARAM_IS_POINTER;
    public static SPEVENTLPARAMTYPE SPET_LPARAM_IS_STRING;
}
internal enum System.Speech.Internal.SapiInterop.SPFILEMODE : Enum {
    public int value__;
    public static SPFILEMODE SPFM_OPEN_READONLY;
    public static SPFILEMODE SPFM_CREATE_ALWAYS;
}
internal enum System.Speech.Internal.SapiInterop.SPGRAMMAROPTIONS : Enum {
    public int value__;
    public static SPGRAMMAROPTIONS SPGO_SAPI;
    public static SPGRAMMAROPTIONS SPGO_SRGS;
    public static SPGRAMMAROPTIONS SPGO_UPS;
    public static SPGRAMMAROPTIONS SPGO_SRGS_MSS_SCRIPT;
    public static SPGRAMMAROPTIONS SPGO_FILE;
    public static SPGRAMMAROPTIONS SPGO_HTTP;
    public static SPGRAMMAROPTIONS SPGO_RES;
    public static SPGRAMMAROPTIONS SPGO_OBJECT;
    public static SPGRAMMAROPTIONS SPGO_SRGS_W3C_SCRIPT;
    public static SPGRAMMAROPTIONS SPGO_SRGS_STG_SCRIPT;
    public static SPGRAMMAROPTIONS SPGO_SRGS_SCRIPT;
    public static SPGRAMMAROPTIONS SPGO_DEFAULT;
    public static SPGRAMMAROPTIONS SPGO_ALL;
}
internal enum System.Speech.Internal.SapiInterop.SPGRAMMARSTATE : Enum {
    public int value__;
    public static SPGRAMMARSTATE SPGS_DISABLED;
    public static SPGRAMMARSTATE SPGS_ENABLED;
    public static SPGRAMMARSTATE SPGS_EXCLUSIVE;
}
[GuidAttribute("41B89B6B-9399-11D2-9623-00C04F8EE628")]
internal class System.Speech.Internal.SapiInterop.SpInprocRecognizer : object {
}
internal enum System.Speech.Internal.SapiInterop.SPINTERFERENCE : Enum {
    public int value__;
    public static SPINTERFERENCE SPINTERFERENCE_NONE;
    public static SPINTERFERENCE SPINTERFERENCE_NOISE;
    public static SPINTERFERENCE SPINTERFERENCE_NOSIGNAL;
    public static SPINTERFERENCE SPINTERFERENCE_TOOLOUD;
    public static SPINTERFERENCE SPINTERFERENCE_TOOQUIET;
    public static SPINTERFERENCE SPINTERFERENCE_TOOFAST;
    public static SPINTERFERENCE SPINTERFERENCE_TOOSLOW;
}
internal enum System.Speech.Internal.SapiInterop.SPLOADOPTIONS : Enum {
    public int value__;
    public static SPLOADOPTIONS SPLO_STATIC;
    public static SPLOADOPTIONS SPLO_DYNAMIC;
}
internal class System.Speech.Internal.SapiInterop.SpNotifySink : object {
    private WeakReference _eventNotifyReference;
    public SpNotifySink(EventNotify eventNotify);
    private sealed virtual override void System.Speech.Internal.SapiInterop.ISpNotifySink.Notify();
}
[GuidAttribute("EF411752-3736-4CB4-9C8C-8EF4CCB58EFE")]
internal class System.Speech.Internal.SapiInterop.SpObjectToken : object {
}
[GuidAttribute("A910187F-0C7A-45AC-92CC-59EDAFB77B53")]
internal class System.Speech.Internal.SapiInterop.SpObjectTokenCategory : object {
}
internal class System.Speech.Internal.SapiInterop.SPPHRASE : object {
    internal UInt32 cbSize;
    internal ushort LangID;
    internal ushort wReserved;
    internal ulong ullGrammarID;
    internal ulong ftStartTime;
    internal ulong ullAudioStreamPosition;
    internal UInt32 ulAudioSizeBytes;
    internal UInt32 ulRetainedSizeBytes;
    internal UInt32 ulAudioSizeTime;
    internal SPPHRASERULE Rule;
    internal IntPtr pProperties;
    internal IntPtr pElements;
    internal UInt32 cReplacements;
    internal IntPtr pReplacements;
    internal Guid SREngineID;
    internal UInt32 ulSREnginePrivateDataSize;
    internal IntPtr pSREnginePrivateData;
    internal static ISpPhrase CreatePhraseFromText(string phrase, CultureInfo culture, GCHandle[]& memHandles, IntPtr& coMem);
    internal static ISpPhrase CreatePhraseFromWordUnits(RecognizedWordUnit[] words, CultureInfo culture, GCHandle[]& memHandles, IntPtr& coMem);
}
[GuidAttribute("777B6BBD-2FF2-11D3-88FE-00C04F8EF9B5")]
internal class System.Speech.Internal.SapiInterop.SpPhraseBuilder : object {
}
internal class System.Speech.Internal.SapiInterop.SPPHRASEELEMENT : object {
    internal UInt32 ulAudioTimeOffset;
    internal UInt32 ulAudioSizeTime;
    internal UInt32 ulAudioStreamOffset;
    internal UInt32 ulAudioSizeBytes;
    internal UInt32 ulRetainedStreamOffset;
    internal UInt32 ulRetainedSizeBytes;
    internal IntPtr pszDisplayText;
    internal IntPtr pszLexicalForm;
    internal IntPtr pszPronunciation;
    internal byte bDisplayAttributes;
    internal byte RequiredConfidence;
    internal byte ActualConfidence;
    internal byte Reserved;
    internal float SREngineConfidence;
}
internal class System.Speech.Internal.SapiInterop.SPPHRASEREPLACEMENT : object {
    internal byte bDisplayAttributes;
    internal UInt32 pszReplacementText;
    internal UInt32 ulFirstElement;
    internal UInt32 ulCountOfElements;
}
internal class System.Speech.Internal.SapiInterop.SPPHRASERULE : object {
    internal string pszName;
    internal UInt32 ulId;
    internal UInt32 ulFirstElement;
    internal UInt32 ulCountOfElements;
    internal IntPtr pNextSibling;
    internal IntPtr pFirstChild;
    internal float SREngineConfidence;
    internal byte Confidence;
}
internal class System.Speech.Internal.SapiInterop.SPRECOCONTEXTSTATUS : ValueType {
    internal SPINTERFERENCE eInterference;
    internal Int16[] szRequestTypeOfUI;
    internal UInt32 dwReserved1;
    internal UInt32 dwReserved2;
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPRECOEVENTFLAGS : Enum {
    public int value__;
    public static SPRECOEVENTFLAGS SPREF_AutoPause;
    public static SPRECOEVENTFLAGS SPREF_Emulated;
    public static SPRECOEVENTFLAGS SPREF_SMLTimeout;
    public static SPRECOEVENTFLAGS SPREF_ExtendableParse;
    public static SPRECOEVENTFLAGS SPREF_ReSent;
    public static SPRECOEVENTFLAGS SPREF_Hypothesis;
    public static SPRECOEVENTFLAGS SPREF_FalseRecognition;
}
internal class System.Speech.Internal.SapiInterop.SPRECOGNIZERSTATUS : ValueType {
    internal SPAUDIOSTATUS AudioStatus;
    internal ulong ullRecognitionStreamPos;
    internal UInt32 ulStreamNumber;
    internal UInt32 ulNumActive;
    internal Guid clsidEngine;
    internal UInt32 cLangIDs;
    internal Int16[] aLangID;
    internal ulong ullRecognitionStreamTime;
}
internal class System.Speech.Internal.SapiInterop.SPRECORESULTTIMES : ValueType {
    internal FILETIME ftStreamTime;
    internal ulong ullLength;
    internal UInt32 dwTickCount;
    internal ulong ullStart;
}
internal enum System.Speech.Internal.SapiInterop.SPRECOSTATE : Enum {
    public int value__;
    public static SPRECOSTATE SPRST_INACTIVE;
    public static SPRECOSTATE SPRST_ACTIVE;
    public static SPRECOSTATE SPRST_ACTIVE_ALWAYS;
    public static SPRECOSTATE SPRST_INACTIVE_WITH_PURGE;
    public static SPRECOSTATE SPRST_NUM_STATES;
}
[FlagsAttribute]
internal enum System.Speech.Internal.SapiInterop.SPRESULTALPHABET : Enum {
    public int value__;
    public static SPRESULTALPHABET SPRA_NONE;
    public static SPRESULTALPHABET SPRA_APP_UPS;
    public static SPRESULTALPHABET SPRA_ENGINE_UPS;
}
internal class System.Speech.Internal.SapiInterop.SPRESULTHEADER : object {
    internal UInt32 ulSerializedSize;
    internal UInt32 cbHeaderSize;
    internal Guid clsidEngine;
    internal Guid clsidAlternates;
    internal UInt32 ulStreamNum;
    internal ulong ullStreamPosStart;
    internal ulong ullStreamPosEnd;
    internal UInt32 ulPhraseDataSize;
    internal UInt32 ulPhraseOffset;
    internal UInt32 ulPhraseAltDataSize;
    internal UInt32 ulPhraseAltOffset;
    internal UInt32 ulNumPhraseAlts;
    internal UInt32 ulRetainedDataSize;
    internal UInt32 ulRetainedOffset;
    internal UInt32 ulDriverDataSize;
    internal UInt32 ulDriverDataOffset;
    internal float fTimePerByte;
    internal float fInputScaleFactor;
    internal SPRECORESULTTIMES times;
    internal UInt32 fAlphabet;
    internal SPRESULTHEADER(SPRESULTHEADER_Sapi51 source);
    internal void Validate();
    private void ValidateOffsetAndLength(UInt32 offset, UInt32 length);
}
internal class System.Speech.Internal.SapiInterop.SPRESULTHEADER_Sapi51 : object {
    internal UInt32 ulSerializedSize;
    internal UInt32 cbHeaderSize;
    internal Guid clsidEngine;
    internal Guid clsidAlternates;
    internal UInt32 ulStreamNum;
    internal ulong ullStreamPosStart;
    internal ulong ullStreamPosEnd;
    internal UInt32 ulPhraseDataSize;
    internal UInt32 ulPhraseOffset;
    internal UInt32 ulPhraseAltDataSize;
    internal UInt32 ulPhraseAltOffset;
    internal UInt32 ulNumPhraseAlts;
    internal UInt32 ulRetainedDataSize;
    internal UInt32 ulRetainedOffset;
    internal UInt32 ulDriverDataSize;
    internal UInt32 ulDriverDataOffset;
    internal float fTimePerByte;
    internal float fInputScaleFactor;
    internal SPRECORESULTTIMES times;
}
internal enum System.Speech.Internal.SapiInterop.SPRULESTATE : Enum {
    public int value__;
    public static SPRULESTATE SPRS_INACTIVE;
    public static SPRULESTATE SPRS_ACTIVE;
    public static SPRULESTATE SPRS_ACTIVE_WITH_AUTO_PAUSE;
    public static SPRULESTATE SPRS_ACTIVE_USER_DELIMITED;
}
internal class System.Speech.Internal.SapiInterop.SPSEMANTICERRORINFO : object {
    internal UInt32 ulLineNumber;
    internal UInt32 pszScriptLineOffset;
    internal UInt32 pszSourceOffset;
    internal UInt32 pszDescriptionOffset;
    internal int hrResultCode;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASE : object {
    internal UInt32 ulSerializedSize;
    internal UInt32 cbSize;
    internal ushort LangID;
    internal ushort wHomophoneGroupId;
    internal ulong ullGrammarID;
    internal ulong ftStartTime;
    internal ulong ullAudioStreamPosition;
    internal UInt32 ulAudioSizeBytes;
    internal UInt32 ulRetainedSizeBytes;
    internal UInt32 ulAudioSizeTime;
    internal SPSERIALIZEDPHRASERULE Rule;
    internal UInt32 PropertiesOffset;
    internal UInt32 ElementsOffset;
    internal UInt32 cReplacements;
    internal UInt32 ReplacementsOffset;
    internal Guid SREngineID;
    internal UInt32 ulSREnginePrivateDataSize;
    internal UInt32 SREnginePrivateDataOffset;
    internal UInt32 SMLOffset;
    internal UInt32 SemanticErrorInfoOffset;
    internal SPSERIALIZEDPHRASE(SPSERIALIZEDPHRASE_Sapi51 source);
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASE_Sapi51 : object {
    internal UInt32 ulSerializedSize;
    internal UInt32 cbSize;
    internal ushort LangID;
    internal ushort wHomophoneGroupId;
    internal ulong ullGrammarID;
    internal ulong ftStartTime;
    internal ulong ullAudioStreamPosition;
    internal UInt32 ulAudioSizeBytes;
    internal UInt32 ulRetainedSizeBytes;
    internal UInt32 ulAudioSizeTime;
    internal SPSERIALIZEDPHRASERULE Rule;
    internal UInt32 PropertiesOffset;
    internal UInt32 ElementsOffset;
    internal UInt32 cReplacements;
    internal UInt32 ReplacementsOffset;
    internal Guid SREngineID;
    internal UInt32 ulSREnginePrivateDataSize;
    internal UInt32 SREnginePrivateDataOffset;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASEALT : object {
    internal UInt32 ulStartElementInParent;
    internal UInt32 cElementsInParent;
    internal UInt32 cElementsInAlternate;
    internal UInt32 cbAltExtra;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASEELEMENT : object {
    internal UInt32 ulAudioTimeOffset;
    internal UInt32 ulAudioSizeTime;
    internal UInt32 ulAudioStreamOffset;
    internal UInt32 ulAudioSizeBytes;
    internal UInt32 ulRetainedStreamOffset;
    internal UInt32 ulRetainedSizeBytes;
    internal UInt32 pszDisplayTextOffset;
    internal UInt32 pszLexicalFormOffset;
    internal UInt32 pszPronunciationOffset;
    internal byte bDisplayAttributes;
    internal char RequiredConfidence;
    internal char ActualConfidence;
    internal byte Reserved;
    internal float SREngineConfidence;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASEPROPERTY : object {
    internal UInt32 pszNameOffset;
    internal UInt32 ulId;
    internal UInt32 pszValueOffset;
    internal ushort vValue;
    internal ulong SpVariantSubset;
    internal UInt32 ulFirstElement;
    internal UInt32 ulCountOfElements;
    internal UInt32 pNextSiblingOffset;
    internal UInt32 pFirstChildOffset;
    internal float SREngineConfidence;
    internal sbyte Confidence;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDPHRASERULE : object {
    internal UInt32 pszNameOffset;
    internal UInt32 ulId;
    internal UInt32 ulFirstElement;
    internal UInt32 ulCountOfElements;
    internal UInt32 NextSiblingOffset;
    internal UInt32 FirstChildOffset;
    internal float SREngineConfidence;
    internal sbyte Confidence;
}
internal class System.Speech.Internal.SapiInterop.SPSERIALIZEDRESULT : ValueType {
    internal UInt32 ulSerializedSize;
}
[GuidAttribute("3BEE4890-4FE9-4A37-8C1E-5E7E12791C1F")]
internal class System.Speech.Internal.SapiInterop.SpSharedRecognizer : object {
}
internal enum System.Speech.Internal.SapiInterop.SPSTREAMFORMATTYPE : Enum {
    public int value__;
    public static SPSTREAMFORMATTYPE SPWF_INPUT;
    public static SPSTREAMFORMATTYPE SPWF_SRENGINE;
}
internal class System.Speech.Internal.SapiInterop.SpStreamWrapper : object {
    private Stream _stream;
    protected long _endOfStreamPosition;
    internal SpStreamWrapper(Stream stream);
    public sealed virtual void Dispose();
    public sealed virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public sealed virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public sealed virtual void Seek(long offset, int seekOrigin, IntPtr plibNewPosition);
    public sealed virtual void SetSize(long libNewSize);
    public sealed virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public sealed virtual void Commit(int grfCommitFlags);
    public sealed virtual void Revert();
    public sealed virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public sealed virtual void Clone(IStream& ppstm);
}
internal class System.Speech.Internal.SapiInterop.SPTEXTSELECTIONINFO : ValueType {
    internal UInt32 ulStartActiveOffset;
    internal UInt32 cchActiveChars;
    internal UInt32 ulStartSelection;
    internal UInt32 cchSelection;
    internal SPTEXTSELECTIONINFO(UInt32 ulStartActiveOffset, UInt32 cchActiveChars, UInt32 ulStartSelection, UInt32 cchSelection);
}
internal class System.Speech.Internal.SapiInterop.SPWAVEFORMATEX : object {
    public UInt32 cbUsed;
    public Guid Guid;
    public ushort wFormatTag;
    public ushort nChannels;
    public UInt32 nSamplesPerSec;
    public UInt32 nAvgBytesPerSec;
    public ushort nBlockAlign;
    public ushort wBitsPerSample;
    public ushort cbSize;
}
internal enum System.Speech.Internal.SapiInterop.SPXMLRESULTOPTIONS : Enum {
    public int value__;
    public static SPXMLRESULTOPTIONS SPXRO_SML;
    public static SPXMLRESULTOPTIONS SPXRO_Alternates_SML;
}
internal class System.Speech.Internal.SeekableReadStream : Stream {
    private long _virtualPosition;
    private List`1<byte> _buffer;
    private Stream _baseStream;
    private bool _cacheDataForSeeking;
    private bool _canSeek;
    unknown bool CacheDataForSeeking {internal set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SeekableReadStream(Stream baseStream);
    internal void set_CacheDataForSeeking(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
}
internal class System.Speech.Internal.SrgsCompiler.AppDomainGrammarProxy : MarshalByRefObject {
    private Grammar _grammar;
    private Assembly _assembly;
    private string _rule;
    private Type _grammarType;
    internal SrgsRule[] OnInit(string method, Object[] parameters, string onInitParameters, Exception& exceptionThrown);
    internal object OnRecognition(string method, Object[] parameters, Exception& exceptionThrown);
    internal object OnParse(string rule, string method, Object[] parameters, Exception& exceptionThrown);
    internal void OnError(string rule, string method, Object[] parameters, Exception& exceptionThrown);
    internal void Init(string rule, Byte[] il, Byte[] pdb);
    private void GetRuleInstance(string rule, string method, MethodInfo& onParse, Grammar& grammar);
    private static Type GetTypeForRule(Assembly assembly, string rule);
    private Object[] MatchInitParameters(string method, string onInitParameters, string grammar, string rule);
    private static object ParseValue(Type type, string value);
    private static string FormatConstructorParameters(MethodInfo[] cis, string method);
    private static NameValuePair[] ParseInitParams(string initParameters);
}
internal class System.Speech.Internal.SrgsCompiler.Arc : object {
    private State _start;
    private State _end;
    private int _iWord;
    private Rule _ruleRef;
    private int _specialTransitionIndex;
    private float _flWeight;
    private MatchMode _matchMode;
    private int _confidence;
    private UInt32 _iSerialize;
    private Collection`1<Tag> _startTags;
    private Collection`1<Tag> _endTags;
    private static UInt32 s_serializeToken;
    internal bool IsEpsilonTransition { get; }
    internal bool IsPropertylessTransition { get; }
    internal int SemanticTagCount { get; }
    internal State Start { get; internal set; }
    internal State End { get; internal set; }
    internal int WordId { get; }
    internal Rule RuleRef { get; internal set; }
    internal float Weight { get; internal set; }
    internal int SpecialTransitionIndex { get; }
    internal Arc(Arc arc);
    internal Arc(Arc arc, State start, State end);
    internal Arc(Arc arc, State start, State end, int wordId);
    internal Arc(string sWord, Rule ruleRef, StringBlob words, float flWeight, int confidence, Rule specialRule, MatchMode matchMode, Boolean& fNeedWeightTable);
    private Arc(string sWord, Rule ruleRef, StringBlob words, float flWeight, int confidence, Rule specialRule, UInt32 iSerialize, MatchMode matchMode, Boolean& fNeedWeightTable);
    internal Arc(int iWord, float flWeight, int confidence, int ulSpecialTransitionIndex, MatchMode matchMode, Boolean& fNeedWeightTable);
    private static Arc();
    public sealed virtual int CompareTo(Arc obj1);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Speech.Internal.SrgsCompiler.Arc>.Compare(Arc obj1, Arc obj2);
    private int Compare(Arc obj1, Arc obj2);
    internal static int CompareContent(Arc arc1, Arc arc2);
    internal static int CompareContentForKey(Arc arc1, Arc arc2);
    internal float Serialize(StreamMarshaler streamBuffer, bool isLast, UInt32 arcIndex);
    internal static float SerializeExtraEpsilonWithTag(StreamMarshaler streamBuffer, Arc arc, bool isLast, UInt32 arcIndex);
    internal void SetArcIndexForTag(int iArc, UInt32 iArcOffset, bool tagsCannotSpanOverMultipleArcs);
    internal void SetEndArcIndexForTags();
    internal static int CompareForDuplicateInputTransitions(Arc arc1, Arc arc2);
    internal static int CompareForDuplicateOutputTransitions(Arc arc1, Arc arc2);
    internal static int CompareIdenticalTransitions(Arc arc1, Arc arc2);
    internal void AddStartTag(Tag tag);
    internal void AddEndTag(Tag tag);
    internal void ClearTags();
    internal static void CopyTags(Arc src, Arc dest, Direction move);
    internal void CloneTags(Arc arc, List`1<Tag> _tags, Dictionary`2<Tag, Tag> endArcs, Backend be);
    internal bool SameTags(Arc arc);
    internal void ConnectStates();
    internal bool get_IsEpsilonTransition();
    internal bool get_IsPropertylessTransition();
    internal int get_SemanticTagCount();
    internal State get_Start();
    internal void set_Start(State value);
    internal State get_End();
    internal void set_End(State value);
    internal int get_WordId();
    internal Rule get_RuleRef();
    internal void set_RuleRef(Rule value);
    internal float get_Weight();
    internal void set_Weight(float value);
    internal int get_SpecialTransitionIndex();
    private int SortRank();
}
internal class System.Speech.Internal.SrgsCompiler.ArcList : RBList {
    internal Arc First { get; }
    internal List`1<Arc> ToList();
    protected virtual int CompareTo(object arc1, object arc2);
    internal Arc get_First();
}
internal class System.Speech.Internal.SrgsCompiler.Backend : object {
    private int _langId;
    private StringBlob _words;
    private StringBlob _symbols;
    private Guid _guid;
    private bool _fNeedWeightTable;
    private Graph _states;
    private List`1<Rule> _rules;
    private int _ruleIndex;
    private Dictionary`2<int, Rule> _nameOffsetRules;
    private Rule _rootRule;
    private GrammarOptions _grammarOptions;
    private int _ulRecursiveDepth;
    private string _basePath;
    private List`1<Tag> _tags;
    private GrammarType _grammarMode;
    private AlphabetType _alphabet;
    private Collection`1<string> _globalTags;
    private static Byte[] s_abZero3;
    private static Char[] s_achZero;
    private int _cImportedRules;
    private Collection`1<ScriptRef> _scriptRefs;
    private bool _fLoadedFromBinary;
    internal StringBlob Words { get; }
    internal StringBlob Symbols { get; }
    internal int LangId { get; internal set; }
    internal GrammarOptions GrammarOptions { get; internal set; }
    unknown GrammarType GrammarMode {internal set; }
    internal AlphabetType Alphabet { get; internal set; }
    internal Collection`1<string> GlobalTags { get; internal set; }
    unknown Collection`1<ScriptRef> ScriptRefs {internal set; }
    internal Backend(StreamMarshaler streamHelper);
    private static Backend();
    internal void Optimize();
    internal void Commit(StreamMarshaler streamBuffer);
    internal static Backend CombineGrammar(string ruleName, Backend org, Backend extra);
    internal State CreateNewState(Rule rule);
    internal void DeleteState(State state);
    internal void MoveInputTransitionsAndDeleteState(State from, State to);
    internal void MoveOutputTransitionsAndDeleteState(State from, State to);
    internal Rule CreateRule(string name, SPCFGRULEATTRIBUTES attributes);
    internal Rule FindRule(string sRule);
    internal Arc WordTransition(string sWord, float flWeight, int requiredConfidence);
    internal Arc SubsetTransition(string text, MatchMode matchMode);
    internal Arc RuleTransition(Rule rule, Rule parentRule, float flWeight);
    internal Arc EpsilonTransition(float flWeight);
    internal void AddSemanticInterpretationTag(Arc arc, CfgProperty propertyInfo);
    internal void AddPropertyTag(Arc start, Arc end, CfgProperty propertyInfo);
    internal State CloneSubGraph(State srcFromState, State srcEndState, State destFromState);
    internal void CloneSubGraph(Rule rule, Backend org, Backend extra, Dictionary`2<State, State> srcToDestHash, bool fromOrg);
    internal void DeleteSubGraph(State state);
    internal void SetRuleAttributes(Rule rule, SPCFGRULEATTRIBUTES dwAttributes);
    internal void SetBasePath(string sBasePath);
    internal static string NormalizeTokenWhiteSpace(string sToken);
    internal StringBlob get_Words();
    internal StringBlob get_Symbols();
    internal void InitFromBinaryGrammar(StreamMarshaler streamHelper);
    private Arc CreateTransition(string sWord, float flWeight, int requiredConfidence);
    private CfgSerializedHeader BuildHeader(List`1<State> sortedStates, int cBasePath, ushort iSemanticGlobals, Int32& cArcs, Single[]& pWeights);
    private CfgHeader BuildRulesFromBinaryGrammar(CfgHeader header, State[] apStateTable, SortedDictionary`2<int, Rule> ruleFirstArcs, int previousCfgLastRules);
    private Rule CloneState(State srcToState, List`1<State> CloneStack, Dictionary`2<State, State> srcToDestHash);
    private Rule FindInRules(string ruleName);
    private static void LogError(string rule, SRID srid, Object[] args);
    private static void AddArc(Arc arc);
    private void ValidateAndTagRules();
    private void CheckLeftRecursion(List`1<State> states);
    private Arc AddSingleWordTransition(string s, float flWeight, int requiredConfidence);
    internal void AddState(State state);
    internal int get_LangId();
    internal void set_LangId(int value);
    internal GrammarOptions get_GrammarOptions();
    internal void set_GrammarOptions(GrammarOptions value);
    internal void set_GrammarMode(GrammarType value);
    internal AlphabetType get_Alphabet();
    internal void set_Alphabet(AlphabetType value);
    internal Collection`1<string> get_GlobalTags();
    internal void set_GlobalTags(Collection`1<string> value);
    internal void set_ScriptRefs(Collection`1<ScriptRef> value);
}
internal class System.Speech.Internal.SrgsCompiler.CfgArc : ValueType {
    private UInt32 _flag1;
    private UInt32 _flag2;
    internal bool RuleRef { get; internal set; }
    internal bool LastArc { get; internal set; }
    internal bool HasSemanticTag { get; internal set; }
    internal bool LowConfRequired { get; internal set; }
    internal bool HighConfRequired { get; internal set; }
    internal UInt32 TransitionIndex { get; internal set; }
    internal UInt32 MatchMode { get; internal set; }
    internal UInt32 NextStartArcIndex { get; internal set; }
    internal CfgArc(CfgArc arc);
    internal bool get_RuleRef();
    internal void set_RuleRef(bool value);
    internal bool get_LastArc();
    internal void set_LastArc(bool value);
    internal bool get_HasSemanticTag();
    internal void set_HasSemanticTag(bool value);
    internal bool get_LowConfRequired();
    internal void set_LowConfRequired(bool value);
    internal bool get_HighConfRequired();
    internal void set_HighConfRequired(bool value);
    internal UInt32 get_TransitionIndex();
    internal void set_TransitionIndex(UInt32 value);
    internal UInt32 get_MatchMode();
    internal void set_MatchMode(UInt32 value);
    internal UInt32 get_NextStartArcIndex();
    internal void set_NextStartArcIndex(UInt32 value);
}
internal class System.Speech.Internal.SrgsCompiler.CfgGrammar : object {
    internal static Guid _SPGDF_ContextFree;
    internal static int INFINITE;
    internal static Rule SPRULETRANS_TEXTBUFFER;
    internal static Rule SPRULETRANS_WILDCARD;
    internal static Rule SPRULETRANS_DICTATION;
    internal static int SPTEXTBUFFERTRANSITION;
    internal static int SPWILDCARDTRANSITION;
    internal static int SPDICTATIONTRANSITION;
    internal static int MAX_TRANSITIONS_COUNT;
    internal static float DEFAULT_WEIGHT;
    internal static int SP_LOW_CONFIDENCE;
    internal static int SP_NORMAL_CONFIDENCE;
    internal static int SP_HIGH_CONFIDENCE;
    private static int SP_SPCFGSERIALIZEDHEADER_500;
    private static UInt32 s_lastHandle;
    internal static UInt32 NextHandle { get; }
    private static CfgGrammar();
    internal static CfgHeader ConvertCfgHeader(StreamMarshaler streamHelper);
    internal static CfgHeader ConvertCfgHeader(StreamMarshaler streamHelper, bool includeAllGrammarData, bool loadSymbols, CfgSerializedHeader& cfgSerializedHeader);
    internal static ScriptRef[] LoadScriptRefs(StreamMarshaler streamHelper, CfgSerializedHeader pFH);
    internal static ScriptRef[] LoadIL(Stream stream);
    internal static bool LoadIL(Stream stream, Byte[]& assemblyContent, Byte[]& assemblyDebugSymbols, ScriptRef[]& scripts);
    private static void CheckValidCfgFormat(CfgSerializedHeader pFH, CfgHeader header, bool includeAllGrammarData);
    private static void CheckSetOffsets(UInt32 offset, int size, Int32& start, UInt32 max);
    private static StringBlob LoadStringBlob(StreamMarshaler streamHelper, UInt32 iPos, int c);
    private static T[] Load(StreamMarshaler streamHelper, UInt32 iPos, int c);
    internal static UInt32 get_NextHandle();
}
internal class System.Speech.Internal.SrgsCompiler.CfgRule : ValueType {
    internal UInt32 _flag;
    internal int _nameOffset;
    internal int _id;
    internal bool TopLevel { get; internal set; }
    unknown bool DefaultActive {internal set; }
    unknown bool PropRule {internal set; }
    internal bool Import { get; internal set; }
    internal bool Export { get; internal set; }
    internal bool HasResources { get; }
    internal bool Dynamic { get; internal set; }
    internal bool HasDynamicRef { get; internal set; }
    internal UInt32 FirstArcIndex { get; internal set; }
    unknown bool DirtyRule {internal set; }
    internal CfgRule(int id, int nameOffset, UInt32 flag);
    internal CfgRule(int id, int nameOffset, SPCFGRULEATTRIBUTES attributes);
    internal bool get_TopLevel();
    internal void set_TopLevel(bool value);
    internal void set_DefaultActive(bool value);
    internal void set_PropRule(bool value);
    internal bool get_Import();
    internal void set_Import(bool value);
    internal bool get_Export();
    internal void set_Export(bool value);
    internal bool get_HasResources();
    internal bool get_Dynamic();
    internal void set_Dynamic(bool value);
    internal bool get_HasDynamicRef();
    internal void set_HasDynamicRef(bool value);
    internal UInt32 get_FirstArcIndex();
    internal void set_FirstArcIndex(UInt32 value);
    internal void set_DirtyRule(bool value);
}
internal class System.Speech.Internal.SrgsCompiler.CfgScriptRef : ValueType {
    internal int _idRule;
    internal int _idMethod;
    internal RuleMethodScript _method;
}
internal class System.Speech.Internal.SrgsCompiler.CfgSemanticTag : ValueType {
    private UInt32 _flag1;
    private UInt32 _flag2;
    private UInt32 _flag3;
    internal int _nameOffset;
    internal UInt32 _propId;
    internal int _valueOffset;
    internal int _varInt;
    internal double _varDouble;
    internal UInt32 StartArcIndex { get; internal set; }
    internal UInt32 EndArcIndex { get; internal set; }
    internal VarEnum PropVariantType { get; internal set; }
    internal UInt32 ArcIndex { get; internal set; }
    internal CfgSemanticTag(CfgSemanticTag cfgTag);
    internal CfgSemanticTag(StringBlob symbols, CfgProperty property);
    internal UInt32 get_StartArcIndex();
    internal void set_StartArcIndex(UInt32 value);
    internal UInt32 get_EndArcIndex();
    internal void set_EndArcIndex(UInt32 value);
    internal VarEnum get_PropVariantType();
    internal void set_PropVariantType(VarEnum value);
    internal UInt32 get_ArcIndex();
    internal void set_ArcIndex(UInt32 value);
}
internal class System.Speech.Internal.SrgsCompiler.CustomGrammar : object {
    internal string _language;
    internal string _namespace;
    internal List`1<Rule> _rules;
    internal Collection`1<string> _codebehind;
    internal bool _fDebugScript;
    internal Collection`1<string> _assemblyReferences;
    internal Collection`1<string> _importNamespaces;
    internal string _keyFile;
    internal Collection`1<ScriptRef> _scriptRefs;
    internal List`1<string> _types;
    internal StringBuilder _script;
    internal bool HasScript { get; }
    internal void Combine(CustomGrammar cg, string innerCode);
    internal bool get_HasScript();
}
internal enum System.Speech.Internal.SrgsCompiler.Direction : Enum {
    public int value__;
    public static Direction Right;
    public static Direction Left;
}
internal class System.Speech.Internal.SrgsCompiler.GrammarElement : ParseElement {
    private Backend _backend;
    private List`1<Rule> _undefRules;
    private CustomGrammar _cg;
    private string _sRoot;
    private bool _hasRoot;
    private string System.Speech.Internal.SrgsParser.IGrammar.Root { get; private set; }
    unknown Uri System.Speech.Internal.SrgsParser.IGrammar.XmlBase {private set; }
    unknown CultureInfo System.Speech.Internal.SrgsParser.IGrammar.Culture {private set; }
    unknown GrammarType System.Speech.Internal.SrgsParser.IGrammar.Mode {private set; }
    unknown AlphabetType System.Speech.Internal.SrgsParser.IGrammar.PhoneticAlphabet {private set; }
    private SrgsTagFormat System.Speech.Internal.SrgsParser.IGrammar.TagFormat { get; private set; }
    private Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.GlobalTags { get; private set; }
    internal List`1<Rule> UndefRules { get; }
    internal Backend Backend { get; }
    private string System.Speech.Internal.SrgsParser.IGrammar.Language { get; private set; }
    private string System.Speech.Internal.SrgsParser.IGrammar.Namespace { get; private set; }
    private Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.CodeBehind { get; private set; }
    unknown bool System.Speech.Internal.SrgsParser.IGrammar.Debug {private set; }
    private Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.ImportNamespaces { get; private set; }
    private Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.AssemblyReferences { get; private set; }
    internal CustomGrammar CustomGrammar { get; }
    internal GrammarElement(Backend backend, CustomGrammar cg);
    private sealed virtual override string System.Speech.Internal.SrgsParser.IGrammar.get_Root();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Root(string value);
    private sealed virtual override IRule System.Speech.Internal.SrgsParser.IGrammar.CreateRule(string id, RulePublic publicRule, RuleDynamic dynamic, bool hasScript);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parent);
    internal void AddScript(string name, string code);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_XmlBase(Uri value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Culture(CultureInfo value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Mode(GrammarType value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_PhoneticAlphabet(AlphabetType value);
    private sealed virtual override SrgsTagFormat System.Speech.Internal.SrgsParser.IGrammar.get_TagFormat();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_TagFormat(SrgsTagFormat value);
    private sealed virtual override Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.get_GlobalTags();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_GlobalTags(Collection`1<string> value);
    internal List`1<Rule> get_UndefRules();
    internal Backend get_Backend();
    private sealed virtual override string System.Speech.Internal.SrgsParser.IGrammar.get_Language();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Language(string value);
    private sealed virtual override string System.Speech.Internal.SrgsParser.IGrammar.get_Namespace();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Namespace(string value);
    private sealed virtual override Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.get_CodeBehind();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_CodeBehind(Collection`1<string> value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Debug(bool value);
    private sealed virtual override Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.get_ImportNamespaces();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_ImportNamespaces(Collection`1<string> value);
    private sealed virtual override Collection`1<string> System.Speech.Internal.SrgsParser.IGrammar.get_AssemblyReferences();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_AssemblyReferences(Collection`1<string> value);
    internal CustomGrammar get_CustomGrammar();
    private Rule GetRule(string sRuleId, SPCFGRULEATTRIBUTES dwAttributes);
}
[FlagsAttribute]
internal enum System.Speech.Internal.SrgsCompiler.GrammarOptions : Enum {
    public int value__;
    public static GrammarOptions KeyValuePairs;
    public static GrammarOptions MssV1;
    public static GrammarOptions KeyValuePairSrgs;
    public static GrammarOptions IpaPhoneme;
    public static GrammarOptions W3cV1;
    public static GrammarOptions STG;
    public static GrammarOptions TagFormat;
    public static GrammarOptions SemanticInterpretation;
}
internal class System.Speech.Internal.SrgsCompiler.Graph : object {
    private State _startState;
    private State _curState;
    internal void Add(State state);
    internal void Remove(State state);
    [IteratorStateMachineAttribute("System.Speech.Internal.SrgsCompiler.Graph/<System-Collections-IEnumerable-GetEnumerator>d__2")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("System.Speech.Internal.SrgsCompiler.Graph/<System-Collections-Generic-IEnumerable<System-Speech-Internal-SrgsCompiler-State>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<State> System.Collections.Generic.IEnumerable<System.Speech.Internal.SrgsCompiler.State>.GetEnumerator();
    internal State CreateNewState(Rule rule);
    internal void DeleteState(State state);
    internal void Optimize();
    internal void MoveInputTransitionsAndDeleteState(State srcState, State destState);
    internal void MoveOutputTransitionsAndDeleteState(State srcState, State destState);
    private void MergeDuplicateTransitions();
    private void RecursiveMergeDuplicatedInputTransition(Stack`1<State> mergeStates);
    private void RecursiveMergeDuplicatedOutputTransition(Stack`1<State> mergeStates);
    private void MergeDuplicateInputTransitions(ArcList arcs, Stack`1<State> mergeStates);
    private void MergeDuplicateOutputTransitions(ArcList arcs, Stack`1<State> mergeStates);
    private static void AddToMergeStateList(Stack`1<State> mergeStates, State commonEndState);
    internal static bool MoveSemanticTagLeft(Arc arc);
    internal static bool MoveSemanticTagRight(Arc arc);
    internal static bool CanTagsBeMoved(Arc start, Arc end);
    private static void DeleteTransition(Arc arc);
    private static void MergeIdenticalTransitions(ArcList arcs, List`1<Arc> identicalWords);
    private static void MergeIdenticalTransitions(List`1<Arc> identicalWords);
    private static void NormalizeTransitionWeights(State state);
}
internal class System.Speech.Internal.SrgsCompiler.Item : ParseElementCollection {
    private float _repeatProbability;
    private int _minRepeat;
    private int _maxRepeat;
    private static int NotSet;
    internal Item(Backend backend, Rule rule, int minRepeat, int maxRepeat, float repeatProbability, float weight);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parentElement);
    private void AddEpsilonTransition(State start, State end, float weight);
}
internal class System.Speech.Internal.SrgsCompiler.OneOf : ParseElementCollection {
    private State _startState;
    private State _endState;
    public OneOf(Rule rule, Backend backend);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parentElement);
    internal virtual void AddArc(Arc start, Arc end);
}
internal abstract class System.Speech.Internal.SrgsCompiler.ParseElement : object {
    internal int _confidence;
    internal Rule _rule;
    internal ParseElement(Rule rule);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parent);
}
internal abstract class System.Speech.Internal.SrgsCompiler.ParseElementCollection : ParseElement {
    protected Backend _backend;
    protected Arc _startArc;
    protected Arc _endArc;
    protected ParseElementCollection(Backend backend, Rule rule);
    internal void AddSemanticInterpretationTag(CfgProperty propertyInfo);
    internal void AddSementicPropertyTag(CfgProperty propertyInfo);
    protected Arc InsertState(Arc arc, float weight, Position position);
    protected static Arc TrimStart(Arc start, Backend backend);
    protected static Arc TrimEnd(Arc end, Backend backend);
    protected void PostParse(ParseElementCollection parent);
    internal void AddArc(Arc arc);
    internal virtual void AddArc(Arc start, Arc end);
}
internal class System.Speech.Internal.SrgsCompiler.PropertyTag : ParseElement {
    private CfgProperty _propInfo;
    internal PropertyTag(ParseElement parent, Backend backend);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IPropertyTag.NameValue(IElement parent, string name, object value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parentElement);
}
[DebuggerDisplayAttribute("{Name}")]
internal class System.Speech.Internal.SrgsCompiler.Rule : ParseElementCollection {
    internal CfgRule _cfgRule;
    internal State _firstState;
    internal bool _fHasExitPath;
    internal bool _fHasDynamicRef;
    internal bool _fIsEpsilonRule;
    internal int _iSerialize;
    internal int _iSerialize2;
    internal List`1<Rule> _listRules;
    internal bool _fStaticRule;
    private string _id;
    private string _baseclass;
    private StringBuilder _script;
    private StringBuilder _constructors;
    internal string Name { get; }
    private string System.Speech.Internal.SrgsParser.IRule.BaseClass { get; private set; }
    internal string BaseClass { get; }
    internal StringBuilder Script { get; }
    internal StringBuilder Constructors { get; }
    internal Rule(int iSerialize);
    internal Rule(Backend backend, string name, CfgRule cfgRule, int iSerialize, GrammarOptions SemanticFormat, Int32& cImportedRules);
    internal Rule(Backend backend, string name, int offsetName, SPCFGRULEATTRIBUTES attributes, int id, int iSerialize, GrammarOptions SemanticFormat, Int32& cImportedRules);
    private sealed virtual override int System.IComparable<System.Speech.Internal.SrgsCompiler.Rule>.CompareTo(Rule rule2);
    internal void Validate();
    internal void PopulateDynamicRef(Int32& iRecursiveDepth);
    internal Rule Clone(StringBlob symbol, string ruleName);
    internal void Serialize(StreamMarshaler streamBuffer);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement grammar);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IRule.CreateScript(IGrammar grammar, string rule, string method, RuleMethodScript type);
    internal string get_Name();
    private sealed virtual override string System.Speech.Internal.SrgsParser.IRule.get_BaseClass();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IRule.set_BaseClass(string value);
    internal string get_BaseClass();
    internal StringBuilder get_Script();
    internal StringBuilder get_Constructors();
    private void Init(string id, CfgRule cfgRule, int iSerialize, GrammarOptions SemanticFormat, Int32& cImportedRules);
    private static void TrimEndEpsilons(Arc end, Backend backend);
}
internal class System.Speech.Internal.SrgsCompiler.RuleRef : ParseElement {
    private SpecialRuleRefType _type;
    private static string szSpecialVoid;
    internal static IRuleRef Null { get; }
    internal static IRuleRef Void { get; }
    internal static IRuleRef Garbage { get; }
    private RuleRef(SpecialRuleRefType type, Rule rule);
    internal RuleRef(ParseElementCollection parent, Backend backend, Uri uri, List`1<Rule> undefRules, string semanticKey, string initParameters);
    internal void InitSpecialRuleRef(Backend backend, ParseElementCollection parent);
    private static Rule GetRuleRef(Backend backend, string sRuleId, List`1<Rule> undefRules);
    internal static IRuleRef get_Null();
    internal static IRuleRef get_Void();
    internal static IRuleRef get_Garbage();
}
internal enum System.Speech.Internal.SrgsCompiler.RuleScope : Enum {
    public int value__;
    public static RuleScope PublicRule;
    public static RuleScope PrivateRule;
}
[DebuggerDisplayAttribute("rule = "{_rule}", method = "{_sMethod}", operation = "{_method.ToString ()}"")]
internal class System.Speech.Internal.SrgsCompiler.ScriptRef : object {
    internal string _rule;
    internal string _sMethod;
    internal RuleMethodScript _method;
    internal int _idSymbol;
    internal ScriptRef(string rule, string sMethod, RuleMethodScript method);
    internal void Serialize(StringBlob symbols, StreamMarshaler streamBuffer);
    internal static string OnInitMethod(ScriptRef[] scriptRefs, string rule);
}
internal class System.Speech.Internal.SrgsCompiler.SemanticTag : ParseElement {
    private CfgProperty _propInfo;
    internal SemanticTag(ParseElement parent, Backend backend);
    private sealed virtual override void System.Speech.Internal.SrgsParser.ISemanticTag.Content(IElement parentElement, string sTag, int iLine);
}
[FlagsAttribute]
internal enum System.Speech.Internal.SrgsCompiler.SPCFGRULEATTRIBUTES : Enum {
    public int value__;
    public static SPCFGRULEATTRIBUTES SPRAF_TopLevel;
    public static SPCFGRULEATTRIBUTES SPRAF_Active;
    public static SPCFGRULEATTRIBUTES SPRAF_Export;
    public static SPCFGRULEATTRIBUTES SPRAF_Import;
    public static SPCFGRULEATTRIBUTES SPRAF_Interpreter;
    public static SPCFGRULEATTRIBUTES SPRAF_Dynamic;
    public static SPCFGRULEATTRIBUTES SPRAF_Root;
    public static SPCFGRULEATTRIBUTES SPRAF_AutoPause;
    public static SPCFGRULEATTRIBUTES SPRAF_UserDelimited;
}
internal static class System.Speech.Internal.SrgsCompiler.SrgsCompiler : object {
    internal static void CompileStream(XmlReader[] xmlReaders, string filename, Stream stream, bool fOutputCfg, Uri originalUri, String[] referencedAssemblies, string keyFile);
    internal static void CompileStream(SrgsDocument srgsGrammar, string filename, Stream stream, bool fOutputCfg, String[] referencedAssemblies, string keyFile);
    private static CustomGrammar CompileStream(int iCfg, ISrgsParser srgsParser, string srgsPath, string filename, Stream stream, bool fOutputCfg, StringBuilder innerCode, object cfgResources, CultureInfo& culture, String[] referencedAssemblies, string keyFile);
    private static void CreateAssembly(Backend backend, CustomGrammar cg);
}
internal class System.Speech.Internal.SrgsCompiler.SrgsElementCompilerFactory : object {
    private Backend _backend;
    private GrammarElement _grammar;
    private CustomGrammar _cg;
    private IGrammar System.Speech.Internal.SrgsParser.IElementFactory.Grammar { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Null { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Void { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Garbage { get; }
    internal SrgsElementCompilerFactory(Backend backend, CustomGrammar cg);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.RemoveAllRules();
    private sealed virtual override IPropertyTag System.Speech.Internal.SrgsParser.IElementFactory.CreatePropertyTag(IElement parent);
    private sealed virtual override ISemanticTag System.Speech.Internal.SrgsParser.IElementFactory.CreateSemanticTag(IElement parent);
    private sealed virtual override IElementText System.Speech.Internal.SrgsParser.IElementFactory.CreateText(IElement parent, string value);
    private sealed virtual override IToken System.Speech.Internal.SrgsParser.IElementFactory.CreateToken(IElement parent, string content, string pronunciation, string display, float reqConfidence);
    private sealed virtual override IItem System.Speech.Internal.SrgsParser.IElementFactory.CreateItem(IElement parent, IRule rule, int minRepeat, int maxRepeat, float repeatProbability, float weight);
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.CreateRuleRef(IElement parent, Uri srgsUri);
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.CreateRuleRef(IElement parent, Uri srgsUri, string semanticKey, string parameters);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.InitSpecialRuleRef(IElement parent, IRuleRef specialRule);
    private sealed virtual override IOneOf System.Speech.Internal.SrgsParser.IElementFactory.CreateOneOf(IElement parent, IRule rule);
    private sealed virtual override ISubset System.Speech.Internal.SrgsParser.IElementFactory.CreateSubset(IElement parent, string text, MatchMode mode);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string rule, string code);
    private sealed virtual override string System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string rule, string code, string filename, int line);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string script, string filename, int line);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddItem(IOneOf oneOf, IItem item);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddElement(IRule rule, IElement value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddElement(IItem item, IElement value);
    private sealed virtual override IGrammar System.Speech.Internal.SrgsParser.IElementFactory.get_Grammar();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Null();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Void();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Garbage();
    private void ParseToken(ParseElementCollection parent, string sToken, string pronunciation, string display, float reqConfidence);
    private static string EscapeToken(string sToken);
}
internal class System.Speech.Internal.SrgsCompiler.State : object {
    private ArcList _outArcs;
    private ArcList _inArcs;
    private int _iSerialize;
    private UInt32 _id;
    private Rule _rule;
    private State _next;
    private State _prev;
    private RecurFlag _recurseFlag;
    internal State Next { get; }
    internal State Prev { get; }
    internal int NumArcs { get; }
    internal int NumSemanticTags { get; }
    internal Rule Rule { get; }
    internal UInt32 Id { get; }
    internal ArcList OutArcs { get; }
    internal ArcList InArcs { get; }
    internal int SerializeId { get; internal set; }
    internal State(Rule rule, UInt32 hState, int iSerialize);
    internal State(Rule rule, UInt32 hState);
    private sealed virtual override int System.IComparable<System.Speech.Internal.SrgsCompiler.State>.CompareTo(State state2);
    internal void SerializeStateEntries(StreamMarshaler streamBuffer, bool tagsCannotSpanOverMultipleArcs, Single[] pWeights, UInt32& iArcOffset, Int32& iOffset);
    internal void SetEndArcIndexForTags();
    internal void Init();
    internal State Add(State state);
    internal void Remove();
    internal State get_Next();
    internal State get_Prev();
    internal void CheckLeftRecursion(Boolean& fReachedEndState);
    internal int get_NumArcs();
    internal int get_NumSemanticTags();
    internal Rule get_Rule();
    internal UInt32 get_Id();
    internal ArcList get_OutArcs();
    internal ArcList get_InArcs();
    internal int get_SerializeId();
    internal void set_SerializeId(int value);
    private static int Compare(State state1, State state2);
}
internal class System.Speech.Internal.SrgsCompiler.Subset : ParseElement {
    public Subset(ParseElementCollection parent, Backend backend, string text, MatchMode mode);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parentElement);
}
internal class System.Speech.Internal.SrgsCompiler.Tag : object {
    internal CfgSemanticTag _cfgTag;
    internal Backend _be;
    internal Tag(Tag tag);
    internal Tag(Backend be, CfgSemanticTag cfgTag);
    internal Tag(Backend be, CfgProperty property);
    private sealed virtual override int System.IComparable<System.Speech.Internal.SrgsCompiler.Tag>.CompareTo(Tag tag);
    internal void Serialize(StreamMarshaler streamBuffer);
}
internal class System.Speech.Internal.SrgsParser.CreateTokenCallback : MulticastDelegate {
    public CreateTokenCallback(object object, IntPtr method);
    public virtual IToken Invoke(IElement parent, string content, string pronumciation, string display, float reqConfidence);
    public virtual IAsyncResult BeginInvoke(IElement parent, string content, string pronumciation, string display, float reqConfidence, AsyncCallback callback, object object);
    public virtual IToken EndInvoke(IAsyncResult result);
}
internal enum System.Speech.Internal.SrgsParser.GrammarType : Enum {
    public int value__;
    public static GrammarType VoiceGrammar;
    public static GrammarType DtmfGrammar;
}
internal interface System.Speech.Internal.SrgsParser.IElement {
    public abstract virtual void PostParse(IElement parent);
}
internal interface System.Speech.Internal.SrgsParser.IElementFactory {
    public IGrammar Grammar { get; }
    public IRuleRef Null { get; }
    public IRuleRef Void { get; }
    public IRuleRef Garbage { get; }
    public abstract virtual void RemoveAllRules();
    public abstract virtual IElementText CreateText(IElement parent, string value);
    public abstract virtual IToken CreateToken(IElement parent, string content, string pronumciation, string display, float reqConfidence);
    public abstract virtual IPropertyTag CreatePropertyTag(IElement parent);
    public abstract virtual ISemanticTag CreateSemanticTag(IElement parent);
    public abstract virtual IItem CreateItem(IElement parent, IRule rule, int minRepeat, int maxRepeat, float repeatProbability, float weight);
    public abstract virtual IRuleRef CreateRuleRef(IElement parent, Uri srgsUri);
    public abstract virtual IRuleRef CreateRuleRef(IElement parent, Uri srgsUri, string semanticKey, string parameters);
    public abstract virtual void InitSpecialRuleRef(IElement parent, IRuleRef special);
    public abstract virtual IOneOf CreateOneOf(IElement parent, IRule rule);
    public abstract virtual ISubset CreateSubset(IElement parent, string text, MatchMode matchMode);
    public abstract virtual IGrammar get_Grammar();
    public abstract virtual IRuleRef get_Null();
    public abstract virtual IRuleRef get_Void();
    public abstract virtual IRuleRef get_Garbage();
    public abstract virtual string AddScript(IGrammar grammar, string rule, string code, string filename, int line);
    public abstract virtual void AddScript(IGrammar grammar, string script, string filename, int line);
    public abstract virtual void AddScript(IGrammar grammar, string rule, string code);
    public abstract virtual void AddItem(IOneOf oneOf, IItem value);
    public abstract virtual void AddElement(IRule rule, IElement value);
    public abstract virtual void AddElement(IItem item, IElement value);
}
internal interface System.Speech.Internal.SrgsParser.IElementText {
}
internal interface System.Speech.Internal.SrgsParser.IGrammar {
    public string Root { get; public set; }
    public SrgsTagFormat TagFormat { get; public set; }
    public Collection`1<string> GlobalTags { get; public set; }
    unknown GrammarType Mode {public set; }
    unknown CultureInfo Culture {public set; }
    unknown Uri XmlBase {public set; }
    unknown AlphabetType PhoneticAlphabet {public set; }
    public string Language { get; public set; }
    public string Namespace { get; public set; }
    unknown bool Debug {public set; }
    public Collection`1<string> CodeBehind { get; public set; }
    public Collection`1<string> ImportNamespaces { get; public set; }
    public Collection`1<string> AssemblyReferences { get; public set; }
    public abstract virtual IRule CreateRule(string id, RulePublic publicRule, RuleDynamic dynamic, bool hasSCript);
    public abstract virtual string get_Root();
    public abstract virtual void set_Root(string value);
    public abstract virtual SrgsTagFormat get_TagFormat();
    public abstract virtual void set_TagFormat(SrgsTagFormat value);
    public abstract virtual Collection`1<string> get_GlobalTags();
    public abstract virtual void set_GlobalTags(Collection`1<string> value);
    public abstract virtual void set_Mode(GrammarType value);
    public abstract virtual void set_Culture(CultureInfo value);
    public abstract virtual void set_XmlBase(Uri value);
    public abstract virtual void set_PhoneticAlphabet(AlphabetType value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_Namespace();
    public abstract virtual void set_Namespace(string value);
    public abstract virtual void set_Debug(bool value);
    public abstract virtual Collection`1<string> get_CodeBehind();
    public abstract virtual void set_CodeBehind(Collection`1<string> value);
    public abstract virtual Collection`1<string> get_ImportNamespaces();
    public abstract virtual void set_ImportNamespaces(Collection`1<string> value);
    public abstract virtual Collection`1<string> get_AssemblyReferences();
    public abstract virtual void set_AssemblyReferences(Collection`1<string> value);
}
internal interface System.Speech.Internal.SrgsParser.IItem {
}
internal interface System.Speech.Internal.SrgsParser.IOneOf {
}
internal interface System.Speech.Internal.SrgsParser.IPropertyTag {
    public abstract virtual void NameValue(IElement parent, string name, object value);
}
internal interface System.Speech.Internal.SrgsParser.IRule {
    public string BaseClass { get; public set; }
    public abstract virtual string get_BaseClass();
    public abstract virtual void set_BaseClass(string value);
    public abstract virtual void CreateScript(IGrammar grammar, string rule, string method, RuleMethodScript type);
}
internal interface System.Speech.Internal.SrgsParser.IRuleRef {
}
internal interface System.Speech.Internal.SrgsParser.IScript {
    public abstract virtual IScript Create(string rule, RuleMethodScript onInit);
}
internal interface System.Speech.Internal.SrgsParser.ISemanticTag {
    public abstract virtual void Content(IElement parent, string value, int line);
}
internal interface System.Speech.Internal.SrgsParser.ISrgsParser {
    unknown IElementFactory ElementFactory {public set; }
    public abstract virtual void Parse();
    public abstract virtual void set_ElementFactory(IElementFactory value);
}
internal interface System.Speech.Internal.SrgsParser.ISubset {
}
internal interface System.Speech.Internal.SrgsParser.IToken {
    unknown string Text {public set; }
    unknown string Display {public set; }
    unknown string Pronunciation {public set; }
    public abstract virtual void set_Text(string value);
    public abstract virtual void set_Display(string value);
    public abstract virtual void set_Pronunciation(string value);
}
internal enum System.Speech.Internal.SrgsParser.MatchMode : Enum {
    public int value__;
    public static MatchMode AllWords;
    public static MatchMode Subsequence;
    public static MatchMode OrderedSubset;
    public static MatchMode SubsequenceContentRequired;
    public static MatchMode OrderedSubsetContentRequired;
}
internal enum System.Speech.Internal.SrgsParser.RuleDynamic : Enum {
    public int value__;
    public static RuleDynamic True;
    public static RuleDynamic False;
    public static RuleDynamic NotSet;
}
internal enum System.Speech.Internal.SrgsParser.RuleMethodScript : Enum {
    public int value__;
    public static RuleMethodScript onInit;
    public static RuleMethodScript onParse;
    public static RuleMethodScript onRecognition;
    public static RuleMethodScript onError;
}
internal enum System.Speech.Internal.SrgsParser.RulePublic : Enum {
    public int value__;
    public static RulePublic True;
    public static RulePublic False;
    public static RulePublic NotSet;
}
internal class System.Speech.Internal.SrgsParser.SrgsDocumentParser : object {
    private SrgsGrammar _grammar;
    private IElementFactory _parser;
    unknown IElementFactory ElementFactory {public set; }
    internal SrgsDocumentParser(SrgsGrammar grammar);
    public sealed virtual void Parse();
    public sealed virtual void set_ElementFactory(IElementFactory value);
    private void ProcessGrammarElement(SrgsGrammar source, IGrammar grammar);
    private IRule ParseRule(IGrammar grammar, SrgsRule srgsRule);
    private IRuleRef ParseRuleRef(SrgsRuleRef srgsRuleRef, IElement parent);
    private IOneOf ParseOneOf(SrgsOneOf srgsOneOf, IElement parent, IRule rule);
    private IItem ParseItem(SrgsItem srgsItem, IElement parent, IRule rule);
    private IToken ParseToken(SrgsToken srgsToken, IElement parent);
    private void ParseText(IElement parent, string sChars, string pronunciation, string display, float reqConfidence);
    private ISubset ParseSubset(SrgsSubset srgsSubset, IElement parent);
    private ISemanticTag ParseSemanticTag(SrgsSemanticInterpretationTag srgsTag, IElement parent);
    private IPropertyTag ParseNameValueTag(SrgsNameValueTag srgsTag, IElement parent);
    private void ProcessChildNodes(SrgsElement srgsElement, IElement parent, IRule rule);
    private IEnumerable`1<SrgsElement> GetSortedTagElements(Collection`1<SrgsElement> elements);
}
internal class System.Speech.Internal.SrgsParser.XmlParser : object {
    internal static string emptyNamespace;
    internal static string xmlNamespace;
    internal static string srgsNamespace;
    internal static string sapiNamespace;
    private IElementFactory _parser;
    private XmlReader _reader;
    private XmlTextReader _xmlTextReader;
    private string _filename;
    private string _shortFilename;
    private CultureInfo _langId;
    private bool _hasTagFormat;
    private List`1<string> _rules;
    private List`1<ForwardReference> _scripts;
    private static Char[] s_invalidRuleIdChars;
    private static Char[] s_slashBackSlash;
    unknown IElementFactory ElementFactory {public set; }
    internal XmlParser(XmlReader reader, Uri uri);
    private static XmlParser();
    public sealed virtual void Parse();
    internal static void ParseText(IElement parent, string sChars, string pronunciation, string display, float reqConfidence, CreateTokenCallback createTokens);
    internal static void ThrowSrgsException(SRID id, Object[] args);
    internal static void ThrowSrgsExceptionWithPosition(string filename, XmlReader xmlReader, string sError, Exception innerException);
    public sealed virtual void set_ElementFactory(IElementFactory value);
    private void ParseGrammar(XmlReader reader, IGrammar grammar);
    private IRule ParseRule(IGrammar grammar, XmlReader reader);
    private IRuleRef ParseRuleRef(IElement parent, XmlReader reader);
    private IOneOf ParseOneOf(IElement parent, IRule rule, XmlReader reader);
    private IItem ParseItem(IElement parent, IRule rule, XmlReader reader);
    private ISubset ParseSubset(IElement parent, XmlReader reader);
    private IToken ParseToken(IElement parent, XmlReader reader);
    private void ParseText(IElement parent, string sChars, string pronunciation, string display, float reqConfidence);
    private IElement ParseTag(IElement parent, XmlReader reader);
    private string GetTagContent(IElement parent, XmlReader reader);
    private static void ParseLexicon(XmlReader reader);
    private static void ParseMeta(XmlReader reader);
    private void ParseScript(XmlReader reader, IGrammar grammar);
    private static void ParseAssemblyReference(XmlReader reader, IGrammar grammar);
    private static void ParseImportNamespace(XmlReader reader, IGrammar grammar);
    private bool ProcessChildNodes(XmlReader reader, IElement parent, IRule rule, string parentName);
    private bool ParseChildNodeText(XmlReader reader, IElement parent);
    private bool ParseChildNodeElement(IElement parent, bool isInvalidNode, IElement child);
    private void ProcessRulesAndScriptsNodes(XmlReader reader, IGrammar grammar);
    private static string GetStringContent(XmlReader reader);
    private static void ParsePropertyTag(string sTag, String& name, Object& value);
    private static void SetRepeatValues(string repeat, Int32& minRepeat, Int32& maxRepeat);
    private static void CheckForDuplicates(String& dest, XmlReader reader);
    internal static void ValidateRuleId(string id);
    private void ValidateRulerefNotPointingToSelf(string uri);
    private void ValidateScripts();
}
internal class System.Speech.Internal.StreamMarshaler : object {
    private HGlobalSafeHandle _safeHMem;
    private Stream _stream;
    internal Stream Stream { get; }
    unknown UInt32 Position {internal set; }
    internal StreamMarshaler(Stream stream);
    public sealed virtual void Dispose();
    internal void ReadArray(T[] ao, int c);
    internal void WriteArray(T[] ao, int c);
    internal void ReadArrayChar(Char[] ach, int c);
    internal string ReadNullTerminatedString();
    internal void WriteArrayChar(Char[] ach, int c);
    internal void ReadStream(T o);
    internal void WriteStream(T o);
    internal Stream get_Stream();
    internal void set_Position(UInt32 value);
}
[DefaultMemberAttribute("Item")]
internal class System.Speech.Internal.StringBlob : object {
    private Dictionary`2<string, int> _strings;
    private List`1<string> _refStrings;
    private List`1<int> _offsetStrings;
    private int _cWords;
    private int _totalStringSizes;
    private static int _sizeOfChar;
    internal string Item { get; }
    internal int Count { get; }
    internal StringBlob(Char[] pszStringArray);
    internal int Add(string psz, Int32& idWord);
    internal int Find(string psz);
    internal string get_Item(int index);
    internal string FromOffset(int offset);
    internal int StringSize();
    internal int SerializeSize();
    internal Char[] SerializeData();
    internal int OffsetFromId(int index);
    internal int get_Count();
}
internal abstract class System.Speech.Internal.Synthesis.AudioBase : object {
    protected bool _aborted;
    private static UInt32 RIFF_MARKER;
    private static UInt32 WAVE_MARKER;
    private static UInt32 FMT_MARKER;
    private static UInt32 DATA_MARKER;
    internal TimeSpan Duration { get; }
    internal long Position { get; }
    internal bool IsAborted { get; internal set; }
    internal Byte[] WaveFormat { get; }
    internal abstract virtual void Begin(Byte[] wfx);
    internal abstract virtual void End();
    internal virtual void Play(IntPtr pBuff, int cb);
    internal virtual void Play(Byte[] buffer);
    internal abstract virtual void Pause();
    internal abstract virtual void Resume();
    internal abstract virtual void InjectEvent(TTSEvent ttsEvent);
    internal abstract virtual void WaitUntilDone();
    internal abstract virtual void Abort();
    internal void PlayWaveFile(AudioData audio);
    internal static Byte[] GetWaveFormat(BinaryReader br);
    internal static void WriteWaveHeader(Stream stream, WAVEFORMATEX waveEx, long position, int cData);
    internal abstract virtual TimeSpan get_Duration();
    internal virtual long get_Position();
    internal virtual bool get_IsAborted();
    internal virtual void set_IsAborted(bool value);
    internal virtual Byte[] get_WaveFormat();
}
internal enum System.Speech.Internal.Synthesis.AudioCodec : Enum {
    public int value__;
    public static AudioCodec PCM16;
    public static AudioCodec PCM8;
    public static AudioCodec G711U;
    public static AudioCodec G711A;
    public static AudioCodec Undefined;
}
internal class System.Speech.Internal.Synthesis.AudioData : object {
    internal Uri _uri;
    internal string _mimeType;
    internal Stream _stream;
    private string _localFile;
    private ResourceLoader _resourceLoader;
    internal AudioData(Uri uri, ResourceLoader resourceLoader);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
}
internal class System.Speech.Internal.Synthesis.AudioDeviceOut : AudioBase {
    private List`1<InItem> _queueIn;
    private List`1<InItem> _queueOut;
    private int _blockAlign;
    private int _bytesWritten;
    private int _nAvgBytesPerSec;
    private IntPtr _hwo;
    private int _curDevice;
    private ManualResetEvent _evt;
    private WaveOutProc _delegate;
    private IAsyncDispatch _asyncDispatch;
    private bool _deviceOpen;
    private object _noWriteOutLock;
    private bool _fPaused;
    internal TimeSpan Duration { get; }
    internal AudioDeviceOut(int curDevice, IAsyncDispatch asyncDispatch);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal virtual void Begin(Byte[] wfx);
    internal virtual void End();
    internal virtual void Play(Byte[] buffer);
    internal virtual void Pause();
    internal virtual void Resume();
    internal virtual void Abort();
    internal virtual void InjectEvent(TTSEvent ttsEvent);
    internal virtual void WaitUntilDone();
    internal static int NumDevices();
    internal static int GetDevicedId(string name);
    internal static MMSYSERR GetDeviceName(int deviceId, String& prodName);
    internal virtual TimeSpan get_Duration();
    private void CallBackProc(IntPtr hwo, MM_MSG uMsg, IntPtr dwInstance, IntPtr dwParam1, IntPtr dwParam2);
    private void ClearBuffers();
    private void CheckForAbort();
}
internal class System.Speech.Internal.Synthesis.AudioException : Exception {
    internal AudioException(MMSYSERR errorCode);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected AudioException(SerializationInfo info, StreamingContext context);
}
internal class System.Speech.Internal.Synthesis.AudioFileOut : AudioBase {
    protected ManualResetEvent _evt;
    protected bool _deviceOpen;
    protected Stream _stream;
    protected PcmConverter _pcmConverter;
    protected bool _doConversion;
    protected bool _paused;
    protected int _totalByteWrittens;
    protected int _bytesWritten;
    private IAsyncDispatch _asyncDispatch;
    private object _noWriteOutLock;
    private WAVEFORMATEX _wfxIn;
    private WAVEFORMATEX _wfxOut;
    private bool _hasHeader;
    private long _startStreamPosition;
    internal TimeSpan Duration { get; }
    internal long Position { get; }
    internal Byte[] WaveFormat { get; }
    internal AudioFileOut(Stream stream, SpeechAudioFormatInfo formatInfo, bool headerInfo, IAsyncDispatch asyncDispatch);
    public sealed virtual void Dispose();
    internal virtual void Begin(Byte[] wfx);
    internal virtual void End();
    internal virtual void Play(Byte[] buffer);
    internal virtual void Pause();
    internal virtual void Resume();
    internal virtual void Abort();
    internal virtual void InjectEvent(TTSEvent ttsEvent);
    internal virtual void WaitUntilDone();
    internal virtual TimeSpan get_Duration();
    internal virtual long get_Position();
    internal virtual Byte[] get_WaveFormat();
}
internal static class System.Speech.Internal.Synthesis.AudioFormatConverter : object {
    private static Byte[] s_uLawCompTableCached;
    private static Byte[] s_aLawCompTableCached;
    private static Int32[] s_exp_lut_linear2alaw;
    private static Int32[] s_exp_lut_linear2ulaw;
    private static Int32[] s_ULaw_exp_table;
    private static Int32[] s_ALaw_exp_table;
    private static AudioFormatConverter();
    internal static Int16[] Convert(Byte[] data, AudioCodec from, AudioCodec to);
    internal static Byte[] Convert(Int16[] data, AudioCodec from, AudioCodec to);
    internal static AudioCodec TypeOf(WAVEFORMATEX format);
    internal static Byte[] ConvertLinear2ULaw(Int16[] data, int size);
    internal static Int16[] ConvertULaw2Linear(Byte[] data, int size);
    private static Byte[] CalcLinear2ULawTable();
    internal static Byte[] ConvertLinear2ALaw(Int16[] data, int size);
    internal static Int16[] ConvertALaw2Linear(Byte[] data, int size);
    private static Byte[] CalcLinear2ALawTable();
    private static Int16[] ConvertLinear2LinearByteShort(Byte[] data, int size);
    private static Int16[] ConvertLinear8LinearByteShort(Byte[] data, int size);
    private static Byte[] ConvertLinear2LinearShortByte(Int16[] data, int size);
    private static Byte[] ConvertLinear8LinearShortByte(Int16[] data, int size);
}
internal static class System.Speech.Internal.Synthesis.ConvertTextFrag : object {
    private static String[] s_asSayAsFormat;
    private static String[] s_asContextFormat;
    private static ConvertTextFrag();
    internal static bool ToSapi(List`1<TextFragment> ssmlFrags, GCHandle& sapiFragLast);
    private static IntPtr SapiCategory(SPVTEXTFRAG sapiFrag, string interpretAs, string format);
    internal static void FreeTextSegment(GCHandle& fragment);
    private static int SapiVolume(ProsodyNumber volume);
    private static int SapiSilence(int duration, EmphasisBreak emphasis);
    private static int SapiRate(ProsodyNumber rate);
    private static int SapiPitch(ProsodyNumber pitch);
    private static int ScaleNumber(float value, int currentValue, int max);
}
internal class System.Speech.Internal.Synthesis.EngineSite : object {
    private int _eventInterest;
    private SPVESACTIONS _actions;
    private AudioBase _audio;
    private Prompt _prompt;
    private Exception _exception;
    private int _defaultRate;
    private int _volume;
    private ResourceLoader _resourceLoader;
    private TtsEventMapper _eventMapper;
    internal TtsEventMapper EventMapper { get; internal set; }
    public int EventInterest { get; }
    public int Actions { get; }
    public int Rate { get; }
    public int Volume { get; }
    internal int VoiceRate { get; internal set; }
    internal int VoiceVolume { get; internal set; }
    internal Exception LastException { get; internal set; }
    internal EngineSite(ResourceLoader resourceLoader);
    internal TtsEventMapper get_EventMapper();
    internal void set_EventMapper(TtsEventMapper value);
    public sealed virtual void AddEvents(SpeechEventInfo[] events, int ulCount);
    public sealed virtual int Write(IntPtr pBuff, int cb);
    public sealed virtual SkipInfo GetSkipInfo();
    public sealed virtual void CompleteSkip(int ulNumSkipped);
    public sealed virtual int get_EventInterest();
    public sealed virtual int get_Actions();
    public sealed virtual int get_Rate();
    public sealed virtual int get_Volume();
    public sealed virtual Stream LoadResource(Uri uri, string mediaType);
    public sealed virtual void AddEvent(TTSEvent evt);
    public sealed virtual void FlushEvent();
    internal void SetEventsInterest(int eventInterest);
    internal int get_VoiceRate();
    internal void set_VoiceRate(int value);
    internal int get_VoiceVolume();
    internal void set_VoiceVolume(int value);
    internal Exception get_LastException();
    internal void set_LastException(Exception value);
    internal void Abort();
    internal void InitRun(AudioBase audioDevice, int defaultRate, Prompt prompt);
    private TTSEvent CreateTtsEvent(SpeechEventInfo sapiEvent);
}
[ComVisibleAttribute("True")]
internal class System.Speech.Internal.Synthesis.EngineSiteSapi : object {
    private EngineSite _site;
    internal EngineSiteSapi(EngineSite site, ResourceLoader resourceLoader);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.AddEvents(SpeechEventSapi[] eventsSapi, int ulCount);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.GetEventInterest(Int64& eventInterest);
    private sealed virtual override int System.Speech.Internal.Synthesis.ISpEngineSite.GetActions();
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.Write(IntPtr pBuff, int cb, IntPtr pcbWritten);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.GetRate(Int32& pRateAdjust);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.GetVolume(Int16& pusVolume);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.GetSkipInfo(Int32& peType, Int32& plNumItems);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.CompleteSkip(int ulNumSkipped);
    private sealed virtual override void System.Speech.Internal.Synthesis.ISpEngineSite.LoadResource(string uri, String& mediaType, IStream& stream);
}
[GuidAttribute("9880499B-CCE9-11D2-B503-00C04F797396")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Internal.Synthesis.ISpEngineSite {
    public abstract virtual void AddEvents(SpeechEventSapi[] events, int count);
    public abstract virtual void GetEventInterest(Int64& eventInterest);
    public abstract virtual int GetActions();
    public abstract virtual void Write(IntPtr data, int count, IntPtr bytesWritten);
    public abstract virtual void GetRate(Int32& rate);
    public abstract virtual void GetVolume(Int16& volume);
    public abstract virtual void GetSkipInfo(Int32& type, Int32& count);
    public abstract virtual void CompleteSkip(int skipped);
    public abstract virtual void LoadResource(string resource, String& mediaType, IStream& stream);
}
internal interface System.Speech.Internal.Synthesis.ISsmlParser {
    public string Ssml { get; }
    public abstract virtual object ProcessSpeak(string sVersion, string sBaseUri, CultureInfo culture, List`1<SsmlXmlAttribute> extraNamespace);
    public abstract virtual void ProcessText(string text, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public abstract virtual void ProcessAudio(object voice, string sUri, string baseUri, bool fIgnore);
    public abstract virtual void ProcessBreak(object voice, FragmentState& fragmentState, EmphasisBreak eBreak, int time, bool fIgnore);
    public abstract virtual void ProcessDesc(CultureInfo culture);
    public abstract virtual void ProcessEmphasis(bool noLevel, EmphasisWord word);
    public abstract virtual void ProcessMark(object voice, FragmentState& fragmentState, string name, bool fIgnore);
    public abstract virtual object ProcessTextBlock(bool isParagraph, object voice, FragmentState& fragmentState, CultureInfo culture, bool newCulture, VoiceGender gender, VoiceAge age);
    public abstract virtual void EndProcessTextBlock(bool isParagraph);
    public abstract virtual void ProcessPhoneme(FragmentState& fragmentState, AlphabetType alphabet, string ph, Char[] phoneIds);
    public abstract virtual void ProcessProsody(string pitch, string range, string rate, string volume, string duration, string points);
    public abstract virtual void ProcessSayAs(string interpretAs, string format, string detail);
    public abstract virtual void ProcessSub(string alias, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public abstract virtual object ProcessVoice(string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool fNewCulture, List`1<SsmlXmlAttribute> extraNamespace);
    public abstract virtual void ProcessLexicon(Uri uri, string type);
    public abstract virtual void EndElement();
    public abstract virtual void EndSpeakElement();
    public abstract virtual void ProcessUnknownElement(object voice, FragmentState& fragmentState, XmlReader reader);
    public abstract virtual void StartProcessUnknownAttributes(object voice, FragmentState& fragmentState, string element, List`1<SsmlXmlAttribute> extraAttributes);
    public abstract virtual void EndProcessUnknownAttributes(object voice, FragmentState& fragmentState, string element, List`1<SsmlXmlAttribute> extraAttributes);
    public abstract virtual void ContainsPexml(string pexmlPrefix);
    public abstract virtual bool BeginPromptEngineOutput(object voice);
    public abstract virtual void EndPromptEngineOutput(object voice);
    public abstract virtual bool ProcessPromptEngineDatabase(object voice, string fname, string delta, string idset);
    public abstract virtual bool ProcessPromptEngineDiv(object voice);
    public abstract virtual bool ProcessPromptEngineId(object voice, string id);
    public abstract virtual bool BeginPromptEngineTts(object voice);
    public abstract virtual void EndPromptEngineTts(object voice);
    public abstract virtual bool BeginPromptEngineWithTag(object voice, string tag);
    public abstract virtual void EndPromptEngineWithTag(object voice, string tag);
    public abstract virtual bool BeginPromptEngineRule(object voice, string name);
    public abstract virtual void EndPromptEngineRule(object voice, string name);
    public abstract virtual string get_Ssml();
}
internal abstract class System.Speech.Internal.Synthesis.ITtsEngineProxy : object {
    protected AlphabetConverter _alphabetConverter;
    internal AlphabetType EngineAlphabet { get; }
    internal AlphabetConverter AlphabetConverter { get; }
    internal ITtsEngineProxy(int lcid);
    internal abstract virtual IntPtr GetOutputFormat(IntPtr targetFormat);
    internal abstract virtual void AddLexicon(Uri lexicon, string mediaType);
    internal abstract virtual void RemoveLexicon(Uri lexicon);
    internal abstract virtual void Speak(List`1<TextFragment> frags, Byte[] wfx);
    internal abstract virtual void ReleaseInterface();
    internal abstract virtual Char[] ConvertPhonemes(Char[] phones, AlphabetType alphabet);
    internal abstract virtual AlphabetType get_EngineAlphabet();
    internal AlphabetConverter get_AlphabetConverter();
}
internal interface System.Speech.Internal.Synthesis.ITtsEventSink {
    public abstract virtual void AddEvent(TTSEvent evt);
    public abstract virtual void FlushEvent();
}
internal class System.Speech.Internal.Synthesis.LexiconEntry : object {
    internal Uri _uri;
    internal string _mediaType;
    internal LexiconEntry(Uri uri, string mediaType);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Speech.Internal.Synthesis.PcmConverter : object {
    private WAVEFORMATEX _inWavFormat;
    private WAVEFORMATEX _outWavFormat;
    private AudioCodec _iInFormatType;
    private AudioCodec _iOutFormatType;
    private Block _eChunkStatus;
    private int _iUpFactor;
    private int _iFilterHalf;
    private int _iDownFactor;
    private int _iFilterLen;
    private int _iBuffLen;
    private Single[] _filterCoeff;
    private Single[] _leftMemory;
    private Single[] _rightMemory;
    private static float _dHalfFilterLen;
    private static Int32[] s_piPrimes;
    private static PcmConverter();
    internal bool PrepareConverter(WAVEFORMATEX& inWavFormat, WAVEFORMATEX& outWavFormat);
    internal Byte[] ConvertSamples(Byte[] pvInSamples);
    private Int16[] Resample(WAVEFORMATEX inWavFormat, WAVEFORMATEX outWavFormat, Int16[] pnBuff, Single[] memory);
    private static Single[] Short2Float(Int16[] inSamples);
    private static Int16[] Float2Short(Single[] inSamples);
    private static Int16[] Mono2Stereo(Int16[] inSamples);
    private static Int16[] Stereo2Mono(Int16[] inSamples);
    private static Int16[] MergeStereo(Int16[] leftSamples, Int16[] rightSamples);
    private static void SplitStereo(Int16[] inSamples, Int16[]& leftSamples, Int16[]& rightSamples);
    private void CreateResamplingFilter(int inHz, int outHz);
    private Single[] WindowedLowPass(float dCutOff, float dGain);
    private void FindResampleFactors(int inHz, int outHz);
    private Single[] Resampling(Single[] inSamples, Single[] pdMemory);
    private static Single[] Blackman(int iLength, bool bSymmetric);
}
internal class System.Speech.Internal.Synthesis.PhonemeEventMapper : TtsEventMapper {
    private PhonemeConversion _conversion;
    private StringBuilder _phonemes;
    private Queue _queue;
    private Queue _phonemeQueue;
    private AlphabetConverter _alphabetConverter;
    private int _lastComplete;
    internal PhonemeEventMapper(ITtsEventSink sink, PhonemeConversion conversion, AlphabetConverter alphabetConverter);
    public virtual void AddEvent(TTSEvent evt);
    public virtual void FlushEvent();
    private void ConvertCompleteUnit();
    private void Reset();
    private void SendToQueue(TTSEvent evt);
}
internal class System.Speech.Internal.Synthesis.SpeakInfo : object {
    private TTSVoice _ttsVoice;
    private bool _fNotInTextSeg;
    private List`1<SpeechSeg> _listSeg;
    private SpeechSeg _lastSeg;
    private VoiceSynthesis _voiceSynthesis;
    internal TTSVoice Voice { get; }
    internal SpeakInfo(VoiceSynthesis voiceSynthesis, TTSVoice ttsVoice);
    internal TTSVoice get_Voice();
    internal void SetVoice(string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant);
    internal void AddAudio(AudioData audio);
    internal void AddText(TTSVoice ttsVoice, TextFragment textFragment);
    internal SpeechSeg RemoveFirst();
    private void AddNewSeg(TTSVoice pCurrVoice, AudioData audio);
}
internal class System.Speech.Internal.Synthesis.SpeechEventSapi : ValueType {
    public short EventId;
    public short ParameterType;
    public int StreamNumber;
    public long AudioStreamOffset;
    public IntPtr Param1;
    public IntPtr Param2;
    public static bool op_Equality(SpeechEventSapi event1, SpeechEventSapi event2);
    public static bool op_Inequality(SpeechEventSapi event1, SpeechEventSapi event2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SpeechEventSapi other);
    public virtual int GetHashCode();
}
internal class System.Speech.Internal.Synthesis.SpeechSeg : object {
    private TTSVoice _voice;
    private List`1<TextFragment> _textFragments;
    private AudioData _audio;
    internal List`1<TextFragment> FragmentList { get; }
    internal AudioData Audio { get; }
    internal TTSVoice Voice { get; }
    internal bool IsText { get; }
    internal SpeechSeg(TTSVoice voice, AudioData audio);
    internal List`1<TextFragment> get_FragmentList();
    internal AudioData get_Audio();
    internal TTSVoice get_Voice();
    internal bool get_IsText();
    internal void AddFrag(TextFragment textFragment);
}
[FlagsAttribute]
internal enum System.Speech.Internal.Synthesis.SsmlElement : Enum {
    public int value__;
    public static SsmlElement Speak;
    public static SsmlElement Voice;
    public static SsmlElement Audio;
    public static SsmlElement Lexicon;
    public static SsmlElement Meta;
    public static SsmlElement MetaData;
    public static SsmlElement Sentence;
    public static SsmlElement Paragraph;
    public static SsmlElement SayAs;
    public static SsmlElement Phoneme;
    public static SsmlElement Sub;
    public static SsmlElement Emphasis;
    public static SsmlElement Break;
    public static SsmlElement Prosody;
    public static SsmlElement Mark;
    public static SsmlElement Desc;
    public static SsmlElement Text;
    public static SsmlElement PromptEngineOutput;
    public static SsmlElement PromptEngineDatabase;
    public static SsmlElement PromptEngineDiv;
    public static SsmlElement PromptEngineId;
    public static SsmlElement PromptEngineTTS;
    public static SsmlElement PromptEngineWithTag;
    public static SsmlElement PromptEngineRule;
    public static SsmlElement ParagraphOrSentence;
    public static SsmlElement AudioMarkTextWithStyle;
    public static SsmlElement PromptEngineChildren;
}
internal static class System.Speech.Internal.Synthesis.SsmlParser : object {
    private static String[] s_elementsName;
    private static ParseElementDelegates[] s_parseElements;
    private static String[] s_breakStrength;
    private static EmphasisBreak[] s_breakEmphasis;
    private static String[] s_emphasisNames;
    private static EmphasisWord[] s_emphasisWord;
    private static Int32[] s_pitchWords;
    private static String[] s_pitchNames;
    private static Int32[] s_rangeWords;
    private static String[] s_rangeNames;
    private static Int32[] s_rateWords;
    private static String[] s_rateNames;
    private static Int32[] s_volumeWords;
    private static String[] s_volumeNames;
    private static string xmlNamespace;
    private static string xmlNamespaceSsml;
    private static string xmlNamespaceXmlns;
    private static string xmlNamespacePrompt;
    private static SsmlParser();
    internal static void Parse(string ssml, ISsmlParser engine, object voice);
    internal static void Parse(XmlReader reader, ISsmlParser engine, object voice);
    private static void ProcessSpeakElement(XmlReader reader, ISsmlParser engine, object voice);
    private static void ProcessElement(XmlReader reader, ISsmlParser engine, string sElement, SsmlElement possibleElements, SsmlAttributes ssmAttributesParent, bool fIgnore, List`1<SsmlXmlAttribute> extraAttributes);
    private static void ParseAudio(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseBreak(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseDesc(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseEmphasis(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseMark(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseMetaData(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseParagraph(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseSentence(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseTextBlock(XmlReader reader, ISsmlParser engine, bool isParagraph, string sElement, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParsePhoneme(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseProsody(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseSayAs(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseSub(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseVoice(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseLexicon(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParsePromptEngine0(XmlReader reader, ISsmlParser engine, SsmlElement elementAllowed, SsmlElement element, ProcessPromptEngine0 process, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static string ParsePromptEngine1(XmlReader reader, ISsmlParser engine, SsmlElement elementAllowed, SsmlElement element, string attribute, ProcessPromptEngine1 process, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParsePromptOutput(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseDiv(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseDatabase(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseId(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseTts(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseWithTag(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void ParseRule(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmAttributesParent, bool fIgnore);
    private static void CheckForDuplicates(String& dest, XmlReader reader);
    private static int ParseCSS2Time(string time);
    private static ContourPoint[] ParseContour(string contour);
    private static int NextChar(Char[] ach, int start, char expected, bool skipDigit, Boolean& percent);
    private static bool ParseNumberHz(XmlReader reader, String& attribute, String[] attributeValues, Int32[] attributeConst, ProsodyNumber& number);
    private static bool ParseNumberRelative(XmlReader reader, String& attribute, String[] attributeValues, Int32[] attributeConst, ProsodyNumber& number);
    private static bool TryParseNumber(string sNumber, ProsodyNumber& number);
    private static bool TryParseHz(string sNumber, ProsodyNumber& number, bool acceptHzRelative, Boolean& isHz);
    private static string ValidateElement(SsmlElement possibleElements, SsmlElement currentElement, string sElement);
    private static void ThrowFormatException(SRID id, Object[] args);
    private static void ThrowFormatException(Exception innerException, SRID id, Object[] args);
    private static void NoOp(XmlReader reader, ISsmlParser engine, SsmlElement element, SsmlAttributes ssmlAttributes, bool fIgnore);
    private static SsmlElement ElementPromptEngine(SsmlAttributes ssmlAttributes);
    private static int GetColumnPosition(XmlReader reader);
}
internal static class System.Speech.Internal.Synthesis.SsmlParserHelpers : object {
    private static String[] s_genderNames;
    private static VoiceGender[] s_genders;
    private static SsmlParserHelpers();
    internal static bool TryConvertAge(string sAge, VoiceAge& age);
    internal static bool TryConvertGender(string sGender, VoiceGender& gender);
}
internal class System.Speech.Internal.Synthesis.SsmlXmlAttribute : object {
    internal string _prefix;
    internal string _name;
    internal string _value;
    internal string _ns;
    internal SsmlXmlAttribute(string prefix, string name, string value, string ns);
}
internal class System.Speech.Internal.Synthesis.TextFragmentEngine : object {
    private List`1<LexiconEntry> _lexicons;
    private SpeakInfo _speakInfo;
    private string _ssmlText;
    private bool _paragraphStarted;
    private bool _sentenceStarted;
    private ResourceLoader _resourceLoader;
    public string Ssml { get; }
    internal TextFragmentEngine(SpeakInfo speakInfo, string ssmlText, bool pexml, ResourceLoader resourceLoader, List`1<LexiconEntry> lexicons);
    public sealed virtual object ProcessSpeak(string sVersion, string sBaseUri, CultureInfo culture, List`1<SsmlXmlAttribute> extraNamespace);
    public sealed virtual void ProcessText(string text, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public sealed virtual void ProcessAudio(object voice, string sUri, string baseUri, bool fIgnore);
    public sealed virtual void ProcessBreak(object voice, FragmentState& fragmentState, EmphasisBreak eBreak, int time, bool fIgnore);
    public sealed virtual void ProcessDesc(CultureInfo culture);
    public sealed virtual void ProcessEmphasis(bool noLevel, EmphasisWord word);
    public sealed virtual void ProcessMark(object voice, FragmentState& fragmentState, string name, bool fIgnore);
    public sealed virtual object ProcessTextBlock(bool isParagraph, object voice, FragmentState& fragmentState, CultureInfo culture, bool newCulture, VoiceGender gender, VoiceAge age);
    public sealed virtual void EndProcessTextBlock(bool isParagraph);
    public sealed virtual void ProcessPhoneme(FragmentState& fragmentState, AlphabetType alphabet, string ph, Char[] phoneIds);
    public sealed virtual void ProcessProsody(string pitch, string range, string rate, string volume, string duration, string points);
    public sealed virtual void ProcessSayAs(string interpretAs, string format, string detail);
    public sealed virtual void ProcessSub(string alias, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public sealed virtual object ProcessVoice(string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool fNewCulture, List`1<SsmlXmlAttribute> extraNamespace);
    public sealed virtual void ProcessLexicon(Uri uri, string type);
    public sealed virtual void ProcessUnknownElement(object voice, FragmentState& fragmentState, XmlReader reader);
    public sealed virtual void StartProcessUnknownAttributes(object voice, FragmentState& fragmentState, string element, List`1<SsmlXmlAttribute> extraAttributes);
    public sealed virtual void EndProcessUnknownAttributes(object voice, FragmentState& fragmentState, string element, List`1<SsmlXmlAttribute> extraAttributes);
    public sealed virtual void ContainsPexml(string pexmlPrefix);
    public sealed virtual bool BeginPromptEngineOutput(object voice);
    public sealed virtual void EndPromptEngineOutput(object voice);
    public sealed virtual bool ProcessPromptEngineDatabase(object voice, string fname, string delta, string idset);
    public sealed virtual bool ProcessPromptEngineDiv(object voice);
    public sealed virtual bool ProcessPromptEngineId(object voice, string id);
    public sealed virtual bool BeginPromptEngineTts(object voice);
    public sealed virtual void EndPromptEngineTts(object voice);
    public sealed virtual bool BeginPromptEngineWithTag(object voice, string tag);
    public sealed virtual void EndPromptEngineWithTag(object voice, string tag);
    public sealed virtual bool BeginPromptEngineRule(object voice, string name);
    public sealed virtual void EndPromptEngineRule(object voice, string name);
    public sealed virtual void EndElement();
    public sealed virtual void EndSpeakElement();
    public sealed virtual string get_Ssml();
    private static TtsEngineAction ActionTextFragment(TtsEngineAction action);
    private void AddParseUnknownFragment(object voice, FragmentState& fragmentState, string text);
}
internal class System.Speech.Internal.Synthesis.TextWriterEngine : object {
    private XmlTextWriter _writer;
    private CultureInfo _culture;
    private bool _closeSpeak;
    private string _pexmlPrefix;
    private static string xmlNamespacePrompt;
    public string Ssml { get; }
    internal TextWriterEngine(XmlTextWriter writer, CultureInfo culture);
    public sealed virtual object ProcessSpeak(string sVersion, string baseUri, CultureInfo culture, List`1<SsmlXmlAttribute> extraNamespace);
    public sealed virtual void ProcessText(string text, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public sealed virtual void ProcessAudio(object voice, string uri, string baseUri, bool fIgnore);
    public sealed virtual void ProcessBreak(object voice, FragmentState& fragmentState, EmphasisBreak eBreak, int time, bool fIgnore);
    public sealed virtual void ProcessDesc(CultureInfo culture);
    public sealed virtual void ProcessEmphasis(bool noLevel, EmphasisWord word);
    public sealed virtual void ProcessMark(object voice, FragmentState& fragmentState, string name, bool fIgnore);
    public sealed virtual object ProcessTextBlock(bool isParagraph, object voice, FragmentState& fragmentState, CultureInfo culture, bool newCulture, VoiceGender gender, VoiceAge age);
    public sealed virtual void EndProcessTextBlock(bool isParagraph);
    public sealed virtual void ProcessPhoneme(FragmentState& fragmentState, AlphabetType alphabet, string ph, Char[] phoneIds);
    public sealed virtual void ProcessProsody(string pitch, string range, string rate, string volume, string duration, string points);
    public sealed virtual void ProcessSayAs(string interpretAs, string format, string detail);
    public sealed virtual void ProcessSub(string alias, object voice, FragmentState& fragmentState, int position, bool fIgnore);
    public sealed virtual object ProcessVoice(string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool fNewCulture, List`1<SsmlXmlAttribute> extraNamespace);
    public sealed virtual void ProcessLexicon(Uri uri, string type);
    public sealed virtual void EndElement();
    public sealed virtual void EndSpeakElement();
    public sealed virtual void ProcessUnknownElement(object voice, FragmentState& fragmentState, XmlReader reader);
    public sealed virtual void StartProcessUnknownAttributes(object voice, FragmentState& fragmentState, string sElement, List`1<SsmlXmlAttribute> extraAttributes);
    public sealed virtual void EndProcessUnknownAttributes(object voice, FragmentState& fragmentState, string sElement, List`1<SsmlXmlAttribute> extraAttributes);
    public sealed virtual void ContainsPexml(string pexmlPrefix);
    private bool ProcessPromptEngine(string element, KeyValuePair`2[] attributes);
    public sealed virtual bool BeginPromptEngineOutput(object voice);
    public sealed virtual bool ProcessPromptEngineDatabase(object voice, string fname, string delta, string idset);
    public sealed virtual bool ProcessPromptEngineDiv(object voice);
    public sealed virtual bool ProcessPromptEngineId(object voice, string id);
    public sealed virtual bool BeginPromptEngineTts(object voice);
    public sealed virtual void EndPromptEngineTts(object voice);
    public sealed virtual bool BeginPromptEngineWithTag(object voice, string tag);
    public sealed virtual void EndPromptEngineWithTag(object voice, string tag);
    public sealed virtual bool BeginPromptEngineRule(object voice, string name);
    public sealed virtual void EndPromptEngineRule(object voice, string name);
    public sealed virtual void EndPromptEngineOutput(object voice);
    public sealed virtual string get_Ssml();
}
internal class System.Speech.Internal.Synthesis.TTSEvent : object {
    private TtsEventId _evtId;
    private Exception _exception;
    private VoiceInfo _voice;
    private TimeSpan _audioPosition;
    private string _bookmark;
    private UInt32 _wParam;
    private IntPtr _lParam;
    private Prompt _prompt;
    private string _phoneme;
    private string _nextPhoneme;
    private TimeSpan _phonemeDuration;
    private SynthesizerEmphasis _phonemeEmphasis;
    internal TtsEventId Id { get; }
    internal Exception Exception { get; }
    internal Prompt Prompt { get; }
    internal VoiceInfo Voice { get; }
    internal TimeSpan AudioPosition { get; }
    internal string Bookmark { get; }
    internal IntPtr LParam { get; }
    internal UInt32 WParam { get; }
    internal SynthesizerEmphasis PhonemeEmphasis { get; }
    internal string Phoneme { get; }
    internal string NextPhoneme { get; internal set; }
    internal TimeSpan PhonemeDuration { get; }
    internal TTSEvent(TtsEventId id, Prompt prompt, Exception exception, VoiceInfo voice);
    internal TTSEvent(TtsEventId id, Prompt prompt, Exception exception, VoiceInfo voice, TimeSpan audioPosition, long streamPosition, string bookmark, UInt32 wParam, IntPtr lParam);
    internal static TTSEvent CreatePhonemeEvent(string phoneme, string nextPhoneme, TimeSpan duration, SynthesizerEmphasis emphasis, Prompt prompt, TimeSpan audioPosition);
    internal TtsEventId get_Id();
    internal Exception get_Exception();
    internal Prompt get_Prompt();
    internal VoiceInfo get_Voice();
    internal TimeSpan get_AudioPosition();
    internal string get_Bookmark();
    internal IntPtr get_LParam();
    internal UInt32 get_WParam();
    internal SynthesizerEmphasis get_PhonemeEmphasis();
    internal string get_Phoneme();
    internal string get_NextPhoneme();
    internal void set_NextPhoneme(string value);
    internal TimeSpan get_PhonemeDuration();
}
internal abstract class System.Speech.Internal.Synthesis.TtsEventMapper : object {
    private ITtsEventSink _sink;
    internal TtsEventMapper(ITtsEventSink sink);
    protected virtual void SendToOutput(TTSEvent evt);
    public virtual void AddEvent(TTSEvent evt);
    public virtual void FlushEvent();
}
internal class System.Speech.Internal.Synthesis.TtsProxySapi : ITtsEngineProxy {
    private ITtsEngine _sapiEngine;
    private IntPtr _iSite;
    internal AlphabetType EngineAlphabet { get; }
    internal TtsProxySapi(ITtsEngine sapiEngine, IntPtr iSite, int lcid);
    internal virtual IntPtr GetOutputFormat(IntPtr preferredFormat);
    internal virtual void AddLexicon(Uri lexicon, string mediaType);
    internal virtual void RemoveLexicon(Uri lexicon);
    internal virtual void Speak(List`1<TextFragment> frags, Byte[] wfx);
    internal virtual AlphabetType get_EngineAlphabet();
    internal virtual Char[] ConvertPhonemes(Char[] phones, AlphabetType alphabet);
    internal virtual void ReleaseInterface();
}
internal class System.Speech.Internal.Synthesis.TtsProxySsml : ITtsEngineProxy {
    private TtsEngineSsml _ssmlEngine;
    private ITtsEngineSite _site;
    internal AlphabetType EngineAlphabet { get; }
    internal TtsProxySsml(TtsEngineSsml ssmlEngine, ITtsEngineSite site, int lcid);
    internal virtual IntPtr GetOutputFormat(IntPtr targetFormat);
    internal virtual void AddLexicon(Uri lexicon, string mediaType);
    internal virtual void RemoveLexicon(Uri lexicon);
    internal virtual void Speak(List`1<TextFragment> frags, Byte[] wfx);
    internal virtual Char[] ConvertPhonemes(Char[] phones, AlphabetType alphabet);
    internal virtual AlphabetType get_EngineAlphabet();
    internal virtual void ReleaseInterface();
}
internal class System.Speech.Internal.Synthesis.TTSVoice : object {
    private ITtsEngineProxy _engine;
    private VoiceInfo _voiceId;
    private List`1<LexiconEntry> _lexicons;
    private Byte[] _waveFormat;
    internal ITtsEngineProxy TtsEngine { get; }
    internal VoiceInfo VoiceInfo { get; }
    internal TTSVoice(ITtsEngineProxy engine, VoiceInfo voiceId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void UpdateLexicons(List`1<LexiconEntry> lexicons);
    internal Byte[] WaveFormat(Byte[] targetWaveFormat);
    internal ITtsEngineProxy get_TtsEngine();
    internal VoiceInfo get_VoiceInfo();
}
internal class System.Speech.Internal.Synthesis.VoiceSynthesis : object {
    internal EventHandler`1<StateChangedEventArgs> _stateChanged;
    internal EventHandler`1<SpeakStartedEventArgs> _speakStarted;
    internal EventHandler`1<SpeakCompletedEventArgs> _speakCompleted;
    internal EventHandler`1<SpeakProgressEventArgs> _speakProgress;
    internal EventHandler`1<BookmarkReachedEventArgs> _bookmarkReached;
    internal EventHandler`1<VoiceChangeEventArgs> _voiceChange;
    internal EventHandler`1<PhonemeReachedEventArgs> _phonemeReached;
    internal EventHandler`1<VisemeReachedEventArgs> _visemeReached;
    private WaitCallback _eventStateChanged;
    private WaitCallback _signalWorkerCallback;
    private ResourceLoader _resourceLoader;
    private EngineSite _site;
    private EngineSiteSapi _siteSapi;
    private IntPtr _iSite;
    private int _ttsInterest;
    private ManualResetEvent _evtPendingSpeak;
    private ManualResetEvent _evtPendingGetProxy;
    private Exception _pendingException;
    private Queue`1<Parameters> _pendingSpeakQueue;
    private TTSVoice _pendingVoice;
    private Thread _workerThread;
    private bool _fExitWorkerThread;
    private object _processingSpeakLock;
    private Dictionary`2<VoiceInfo, TTSVoice> _voiceDictionary;
    private List`1<InstalledVoice> _installedVoices;
    private static List`1<InstalledVoice> s_allVoices;
    private object _enabledVoicesLock;
    private TTSVoice _defaultVoice;
    private TTSVoice _currentVoice;
    private bool _defaultVoiceInitialized;
    private object _defaultVoiceLock;
    private AudioBase _waveOut;
    private int _defaultRate;
    private bool _isDisposed;
    private List`1<LexiconEntry> _lexicons;
    private SynthesizerState _synthesizerState;
    private Prompt _currentPrompt;
    private static string defaultVoiceRate;
    private AsyncSerializedWorker _asyncWorker;
    private AsyncSerializedWorker _asyncWorkerUI;
    private static bool _pexml;
    private int _ttsEvents;
    private object _thisObjectLock;
    private AutoResetEvent _workerWaitHandle;
    private WeakReference _speechSyntesizer;
    private String[] _xmlEscapeStrings;
    private Char[] _xmlEscapeChars;
    internal Prompt Prompt { get; }
    internal SynthesizerState State { get; }
    internal int Rate { get; internal set; }
    internal int Volume { get; internal set; }
    unknown TTSVoice Voice {internal set; }
    private IntPtr ComEngineSite { get; }
    internal VoiceSynthesis(WeakReference speechSynthesizer);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal void Speak(Prompt prompt);
    internal void SpeakAsync(Prompt prompt);
    internal void OnSpeakStarted(SpeakStartedEventArgs e);
    internal void FireSpeakCompleted(object sender, SpeakCompletedEventArgs e);
    internal void OnSpeakCompleted(SpeakCompletedEventArgs e);
    internal void OnSpeakProgress(SpeakProgressEventArgs e);
    private string RemoveEscapeString(string text, int start, int length, Int32& newLength);
    internal void OnBookmarkReached(BookmarkReachedEventArgs e);
    internal void OnVoiceChange(VoiceChangeEventArgs e);
    internal void OnPhonemeReached(PhonemeReachedEventArgs e);
    private void OnVisemeReached(VisemeReachedEventArgs e);
    private void OnStateChanged(object o);
    internal void AddEvent(TtsEventId ttsEvent, EventHandler`1& internalEventHandler, EventHandler`1<T> eventHandler);
    internal void RemoveEvent(TtsEventId ttsEvent, EventHandler`1& internalEventHandler, EventHandler`1<T> eventHandler);
    internal void SetOutput(Stream stream, SpeechAudioFormatInfo formatInfo, bool headerInfo);
    internal void Abort();
    internal void Abort(Prompt prompt);
    internal void Pause();
    internal void Resume();
    internal void AddLexicon(Uri uri, string mediaType);
    internal void RemoveLexicon(Uri uri);
    internal TTSVoice GetEngine(string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool switchContext);
    internal ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices(CultureInfo culture);
    internal Prompt get_Prompt();
    internal SynthesizerState get_State();
    internal int get_Rate();
    internal void set_Rate(int value);
    internal int get_Volume();
    internal void set_Volume(int value);
    internal void set_Voice(TTSVoice value);
    internal TTSVoice CurrentVoice(bool switchContext);
    private void ThreadProc();
    private void AddSpeakParameters(Parameters param);
    private void SpeakText(SpeakInfo speakInfo, Prompt prompt, List`1<LexiconEntry> lexicons);
    private static UInt32 GetDefaultRate();
    private void InjectEvent(TtsEventId evtId, Prompt prompt, Exception exception, VoiceInfo voiceInfo);
    private void OnStateChanged(SynthesizerState state);
    private void ChangeStateToReady(Prompt prompt, Exception exception);
    private TTSVoice GetVoice(VoiceInfo voiceInfo, bool switchContext);
    private void ExecuteOnBackgroundThread(Action action, object parameter);
    private TTSVoice GetEngineWithVoice(TTSVoice defaultVoice, VoiceInfo defaultVoiceId, string name, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool switchContext);
    private TTSVoice MatchVoice(string name, int variant, bool switchContext);
    private TTSVoice MatchVoice(CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, bool switchContext, InstalledVoice& viDefault);
    private static InstalledVoice MatchVoice(InstalledVoice defaultTokenInfo, CultureInfo culture, VoiceGender gender, VoiceAge age, int variant, List`1<InstalledVoice> tokensInfo);
    private static int CalcMatchValue(CultureInfo culture, VoiceGender gender, VoiceAge age, VoiceInfo voiceInfo);
    private TTSVoice GetProxyEngine(VoiceInfo voiceInfo);
    private ITtsEngineProxy GetSsmlEngine(VoiceInfo voiceInfo);
    private ITtsEngineProxy GetComEngine(VoiceInfo voiceInfo);
    private TTSVoice GetVoice(bool switchContext);
    private static List`1<InstalledVoice> BuildInstalledVoices(VoiceSynthesis voiceSynthesizer);
    private void SignalWorkerThread(object ignored);
    private void ProcessPostData(object arg);
    private void DispatchEvent(TTSEvent ttsEvent);
    private void Dispose(bool disposing);
    private void QueuePrompt(Prompt prompt);
    private void Speak(string textToSpeak, Prompt prompt, bool fIsXml);
    private void SpeakStream(Uri audio, Prompt prompt);
    private void SetInterest(int ttsInterest);
    private IntPtr get_ComEngineSite();
}
[TypeLibTypeAttribute("16")]
internal class System.Speech.Internal.Synthesis.WAVEFORMATEX : ValueType {
    internal short wFormatTag;
    internal short nChannels;
    internal int nSamplesPerSec;
    internal int nAvgBytesPerSec;
    internal short nBlockAlign;
    internal short wBitsPerSample;
    internal short cbSize;
    internal static WAVEFORMATEX Default { get; }
    internal int Length { get; }
    internal static WAVEFORMATEX ToWaveHeader(Byte[] waveHeader);
    internal static void AvgBytesPerSec(Byte[] waveHeader, Int32& avgBytesPerSec, Int32& nBlockAlign);
    internal Byte[] ToBytes();
    internal static Byte[] ToBytes(IntPtr waveHeader);
    internal static WAVEFORMATEX get_Default();
    internal int get_Length();
}
internal class System.Speech.Internal.Synthesis.WaveHeader : object {
    internal static int WHDR_DONE;
    internal static int WHDR_PREPARED;
    internal static int WHDR_BEGINLOOP;
    internal static int WHDR_ENDLOOP;
    internal static int WHDR_INQUEUE;
    internal static int WAVE_FORMAT_PCM;
    private GCHandle _gcHandle;
    private GCHandle _gcHandleWaveHdr;
    private WAVEHDR _waveHdr;
    internal int _dwBufferLength;
    internal GCHandle WAVEHDR { get; }
    internal int SizeHDR { get; }
    internal WaveHeader(Byte[] buffer);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void ReleaseData();
    internal GCHandle get_WAVEHDR();
    internal int get_SizeHDR();
}
public class System.Speech.Recognition.AudioLevelUpdatedEventArgs : EventArgs {
    private int _audioLevel;
    public int AudioLevel { get; }
    internal AudioLevelUpdatedEventArgs(int audioLevel);
    public int get_AudioLevel();
}
public enum System.Speech.Recognition.AudioSignalProblem : Enum {
    public int value__;
    public static AudioSignalProblem None;
    public static AudioSignalProblem TooNoisy;
    public static AudioSignalProblem NoSignal;
    public static AudioSignalProblem TooLoud;
    public static AudioSignalProblem TooSoft;
    public static AudioSignalProblem TooFast;
    public static AudioSignalProblem TooSlow;
}
public class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs : EventArgs {
    private AudioSignalProblem _audioSignalProblem;
    private TimeSpan _recognizerPosition;
    private TimeSpan _audioPosition;
    private int _audioLevel;
    public AudioSignalProblem AudioSignalProblem { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    internal AudioSignalProblemOccurredEventArgs(AudioSignalProblem audioSignalProblem, int audioLevel, TimeSpan audioPosition, TimeSpan recognizerPosition);
    public AudioSignalProblem get_AudioSignalProblem();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_RecognizerAudioPosition();
}
public enum System.Speech.Recognition.AudioState : Enum {
    public int value__;
    public static AudioState Stopped;
    public static AudioState Silence;
    public static AudioState Speech;
}
public class System.Speech.Recognition.AudioStateChangedEventArgs : EventArgs {
    private AudioState _audioState;
    public AudioState AudioState { get; }
    internal AudioStateChangedEventArgs(AudioState audioState);
    public AudioState get_AudioState();
}
[DebuggerDisplayAttribute("{_oneOf.DebugSummary}")]
public class System.Speech.Recognition.Choices : object {
    private OneOfElement _oneOf;
    internal OneOfElement OneOf { get; }
    public Choices(String[] phrases);
    public Choices(GrammarBuilder[] alternateChoices);
    public void Add(String[] phrases);
    public void Add(GrammarBuilder[] alternateChoices);
    public GrammarBuilder ToGrammarBuilder();
    internal OneOfElement get_OneOf();
}
public class System.Speech.Recognition.DictationGrammar : Grammar {
    private static Uri s_defaultDictationUri;
    public DictationGrammar(string topic);
    private static DictationGrammar();
    public void SetDictationContext(string precedingText, string subsequentText);
}
[FlagsAttribute]
public enum System.Speech.Recognition.DisplayAttributes : Enum {
    public int value__;
    public static DisplayAttributes None;
    public static DisplayAttributes ZeroTrailingSpaces;
    public static DisplayAttributes OneTrailingSpace;
    public static DisplayAttributes TwoTrailingSpaces;
    public static DisplayAttributes ConsumeLeadingSpaces;
}
public class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    private RecognitionResult _result;
    public RecognitionResult Result { get; }
    internal EmulateRecognizeCompletedEventArgs(RecognitionResult result, Exception error, bool cancelled, object userState);
    public RecognitionResult get_Result();
}
[DebuggerDisplayAttribute("Grammar = {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")]
public class System.Speech.Recognition.Grammar : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognizedEventArgs> SpeechRecognized;
    internal GrammarOptions _semanticTag;
    internal AppDomainGrammarProxy _proxy;
    internal ScriptRef[] _scripts;
    private Byte[] _cfgData;
    private Stream _appStream;
    private bool _isSrgsDocument;
    private SrgsDocument _srgsDocument;
    private GrammarBuilder _grammarBuilder;
    private IRecognizerInternal _recognizer;
    private GrammarState _grammarState;
    private Exception _loadException;
    private Uri _uri;
    private Uri _baseUri;
    private string _ruleName;
    private string _resources;
    private Object[] _parameters;
    private string _onInitParameters;
    private bool _enabled;
    private bool _isStg;
    private bool _sapi53Only;
    private UInt32 _sapiGrammarId;
    private float _weight;
    private int _priority;
    private InternalGrammarData _internalData;
    private string _grammarName;
    private Collection`1<Grammar> _ruleRefs;
    private static ResourceLoader s_resourceLoader;
    public bool Enabled { get; public set; }
    public float Weight { get; public set; }
    public int Priority { get; public set; }
    public string Name { get; public set; }
    public string RuleName { get; }
    public bool Loaded { get; }
    internal Uri Uri { get; }
    internal IRecognizerInternal Recognizer { get; internal set; }
    internal GrammarState State { get; internal set; }
    internal Exception LoadException { get; internal set; }
    internal Byte[] CfgData { get; }
    internal Uri BaseUri { get; }
    internal bool Sapi53Only { get; }
    internal UInt32 SapiGrammarId { get; internal set; }
    protected internal bool IsStg { get; }
    internal bool IsSrgsDocument { get; }
    internal InternalGrammarData InternalData { get; internal set; }
    protected string ResourceName { get; protected set; }
    internal Grammar(Uri uri, string ruleName, Object[] parameters);
    public Grammar(string path);
    public Grammar(string path, string ruleName);
    public Grammar(string path, string ruleName, Object[] parameters);
    public Grammar(SrgsDocument srgsDocument);
    public Grammar(SrgsDocument srgsDocument, string ruleName);
    public Grammar(SrgsDocument srgsDocument, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("1")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(Stream stream);
    public Grammar(Stream stream, string ruleName);
    public Grammar(Stream stream, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public Grammar(Stream stream, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("1")]
public Grammar(Stream stream, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(GrammarBuilder builder);
    private Grammar(string onInitParameters, Stream stream, string ruleName);
    private static Grammar();
    protected void StgInit(Object[] parameters);
    public static Grammar LoadLocalizedGrammarFromType(Type type, Object[] onInitParameters);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public float get_Weight();
    public void set_Weight(float value);
    public int get_Priority();
    public void set_Priority(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_RuleName();
    public bool get_Loaded();
    internal Uri get_Uri();
    [CompilerGeneratedAttribute]
public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    internal IRecognizerInternal get_Recognizer();
    internal void set_Recognizer(IRecognizerInternal value);
    internal GrammarState get_State();
    internal void set_State(GrammarState value);
    internal Exception get_LoadException();
    internal void set_LoadException(Exception value);
    internal Byte[] get_CfgData();
    internal Uri get_BaseUri();
    internal bool get_Sapi53Only();
    internal UInt32 get_SapiGrammarId();
    internal void set_SapiGrammarId(UInt32 value);
    protected internal virtual bool get_IsStg();
    internal bool get_IsSrgsDocument();
    internal InternalGrammarData get_InternalData();
    internal void set_InternalData(InternalGrammarData value);
    internal static Grammar Create(string grammarName, string ruleName, string onInitParameter, Uri& redirectUri);
    internal void OnRecognitionInternal(SpeechRecognizedEventArgs eventArgs);
    internal static bool IsDictationGrammar(Uri uri);
    internal bool IsDictation(Uri uri);
    internal Grammar Find(long grammarId);
    internal Grammar Find(string ruleName);
    internal void AddRuleRef(Grammar ruleRef, UInt32 grammarId);
    internal MethodInfo MethodInfo(string method);
    protected string get_ResourceName();
    protected void set_ResourceName(string value);
    private void LoadAndCompileCfgData(bool isImportedGrammar, bool stgInit);
    private MemoryStream LoadCfg(bool isImportedGrammar, bool stgInit);
    private static Grammar LoadGrammarFromAssembly(Assembly assembly, string ruleName, string onInitParameters);
    private static Object[] MatchInitParameters(Type type, string onInitParameters, string grammar, string rule);
    private static object ParseValue(Type type, string value);
    private static string FormatConstructorParameters(ConstructorInfo[] cis);
    private static NameValuePair[] ParseInitParams(string initParameters);
    private void InitialGrammarLoad(string ruleName, Object[] parameters, bool isImportedGrammar);
    private void CreateSandbox(MemoryStream stream);
    private Stream LoadCfgFromResource(bool stgInit);
    private static MemoryStream CombineCfg(string rule, Stream stream, SrgsRule[] extraRules);
    private SrgsRule[] RunOnInit(bool stg);
    private static string CheckRuleName(Stream stream, string rulename, bool isImportedGrammar, bool stgInit, Boolean& sapi53Only, GrammarOptions& grammarOptions);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
public class System.Speech.Recognition.GrammarBuilder : object {
    private InternalGrammarBuilder _grammarBuilder;
    private CultureInfo _culture;
    public string DebugShowPhrases { get; }
    public CultureInfo Culture { get; public set; }
    internal string DebugSummary { get; }
    internal BuilderElements InternalBuilder { get; }
    public GrammarBuilder(string phrase);
    public GrammarBuilder(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public GrammarBuilder(string phrase, int minRepeat, int maxRepeat);
    public GrammarBuilder(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public GrammarBuilder(Choices alternateChoices);
    public GrammarBuilder(SemanticResultKey key);
    public GrammarBuilder(SemanticResultValue value);
    public void Append(string phrase);
    public void Append(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public void Append(string phrase, int minRepeat, int maxRepeat);
    public void Append(GrammarBuilder builder);
    public void Append(Choices alternateChoices);
    public void Append(SemanticResultKey key);
    public void Append(SemanticResultValue value);
    public void Append(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public void AppendDictation();
    public void AppendDictation(string category);
    public void AppendWildcard();
    public void AppendRuleReference(string path);
    public void AppendRuleReference(string path, string rule);
    public string get_DebugShowPhrases();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public static GrammarBuilder op_Addition(string phrase, GrammarBuilder builder);
    public static GrammarBuilder Add(string phrase, GrammarBuilder builder);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, string phrase);
    public static GrammarBuilder Add(GrammarBuilder builder, string phrase);
    public static GrammarBuilder op_Addition(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder Add(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder Add(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder op_Addition(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder Add(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder op_Implicit(string phrase);
    public static GrammarBuilder op_Implicit(Choices choices);
    public static GrammarBuilder op_Implicit(SemanticResultKey semanticKey);
    public static GrammarBuilder op_Implicit(SemanticResultValue semanticValue);
    internal static void ValidateRepeatArguments(int minRepeat, int maxRepeat, string minParamName, string maxParamName);
    internal static void ValidateSubsetMatchingCriteriaArgument(SubsetMatchingMode subsetMatchingCriteria, string paramName);
    internal void CreateGrammar(IElementFactory elementFactory);
    internal void Compile(Stream stream);
    internal GrammarBuilder Clone();
    internal virtual string get_DebugSummary();
    internal BuilderElements get_InternalBuilder();
    private void AddItem(GrammarBuilderBase item);
}
internal enum System.Speech.Recognition.GrammarState : Enum {
    public int value__;
    public static GrammarState Unloaded;
    public static GrammarState Loading;
    public static GrammarState Loaded;
    public static GrammarState LoadFailed;
}
[GuidAttribute("06B64F9E-7FDA-11D2-B4F2-00C04F797396")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Recognition.IEnumSpObjectTokens {
    public abstract virtual void Slot1();
    public abstract virtual void Slot2();
    public abstract virtual void Slot3();
    public abstract virtual void Slot4();
    public abstract virtual void Item(UInt32 Index, ISpObjectToken& ppToken);
    public abstract virtual void GetCount(UInt32& pCount);
}
internal class System.Speech.Recognition.InternalGrammarData : object {
    internal ulong _grammarId;
    internal SapiGrammar _sapiGrammar;
    internal bool _grammarEnabled;
    internal float _grammarWeight;
    internal int _grammarPriority;
    internal InternalGrammarData(ulong grammarId, SapiGrammar sapiGrammar, bool enabled, float weight, int priority);
}
internal interface System.Speech.Recognition.IRecognizerInternal {
    public abstract virtual void SetGrammarState(Grammar grammar, bool enabled);
    public abstract virtual void SetGrammarWeight(Grammar grammar, float weight);
    public abstract virtual void SetGrammarPriority(Grammar grammar, int priority);
    public abstract virtual Grammar GetGrammarFromId(ulong id);
    public abstract virtual void SetDictationContext(Grammar grammar, string precedingText, string subsequentText);
}
[GuidAttribute("2D3D3845-39AF-4850-BBF9-40B49780011D")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Recognition.ISpObjectTokenCategory {
    public abstract virtual int SetData(string valueName, UInt32 cbData, Byte[] data);
    public abstract virtual int GetData(string valueName, UInt32& pcbData, Byte[] data);
    public abstract virtual int SetStringValue(string valueName, string value);
    public abstract virtual void GetStringValue(string pszValueName, String& ppszValue);
    public abstract virtual int SetDWORD(string valueName, UInt32 dwValue);
    public abstract virtual int GetDWORD(string pszValueName, UInt32& pdwValue);
    public abstract virtual int OpenKey(string pszSubKeyName, ISpDataKey& ppSubKey);
    public abstract virtual int CreateKey(string subKey, ISpDataKey& ppSubKey);
    public abstract virtual int DeleteKey(string subKey);
    public abstract virtual int DeleteValue(string valueName);
    public abstract virtual int EnumKeys(UInt32 index, String& ppszSubKeyName);
    public abstract virtual int EnumValues(UInt32 Index, String& ppszValueName);
    public abstract virtual void SetId(string pszCategoryId, bool fCreateIfNotExist);
    public abstract virtual void GetId(String& ppszCoMemCategoryId);
    public abstract virtual void Slot14();
    public abstract virtual void EnumTokens(string pzsReqAttribs, string pszOptAttribs, IEnumSpObjectTokens& ppEnum);
    public abstract virtual void Slot16();
    public abstract virtual void GetDefaultTokenId(String& ppszCoMemTokenId);
}
public class System.Speech.Recognition.LoadGrammarCompletedEventArgs : AsyncCompletedEventArgs {
    private Grammar _grammar;
    public Grammar Grammar { get; }
    internal LoadGrammarCompletedEventArgs(Grammar grammar, Exception error, bool cancelled, object userState);
    public Grammar get_Grammar();
}
internal class System.Speech.Recognition.OperationLock : object {
    private ManualResetEvent _event;
    private UInt32 _operationCount;
    private object _thisObjectLock;
    public sealed virtual void Dispose();
    internal void StartOperation();
    internal void FinishOperation();
    internal void WaitForOperationsToFinish();
}
public abstract class System.Speech.Recognition.RecognitionEventArgs : EventArgs {
    private RecognitionResult _result;
    public RecognitionResult Result { get; }
    internal RecognitionEventArgs(RecognitionResult result);
    public RecognitionResult get_Result();
}
[DebuggerDisplayAttribute("{DebuggerDisplayString())}")]
public class System.Speech.Recognition.RecognitionResult : RecognizedPhrase {
    private IRecognizerInternal _recognizer;
    private int _maxAlternates;
    private AlphabetConverter _alphabetConverter;
    private Byte[] _sapiAudioBlob;
    private Byte[] _sapiAlternatesBlob;
    private Collection`1<RecognizedPhrase> _alternates;
    private SPRESULTHEADER _header;
    private RecognizedAudio _audio;
    private DateTime _startTime;
    private ISpRecoResult2 _sapiRecoResult;
    private Nullable`1<TimeSpan> _audioPosition;
    private Nullable`1<TimeSpan> _audioDuration;
    public RecognizedAudio Audio { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> Alternates { get; }
    internal IRecognizerInternal Recognizer { get; }
    internal TimeSpan AudioPosition { get; }
    internal TimeSpan AudioDuration { get; }
    internal RecognitionResult(IRecognizerInternal recognizer, ISpRecoResult recoResult, Byte[] sapiResultBlob, int maxAlternates);
    private RecognitionResult(SerializationInfo info, StreamingContext context);
    public RecognizedAudio GetAudioForWordRange(RecognizedWordUnit firstWord, RecognizedWordUnit lastWord);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal bool SetTextFeedback(string text, bool isSuccessfulAction);
    public RecognizedAudio get_Audio();
    public ReadOnlyCollection`1<RecognizedPhrase> get_Alternates();
    internal string ConvertPronunciation(string pronunciation, int langId);
    internal IRecognizerInternal get_Recognizer();
    internal TimeSpan get_AudioPosition();
    internal TimeSpan get_AudioDuration();
    private void Initialize(IRecognizerInternal recognizer, ISpRecoResult recoResult, Byte[] sapiResultBlob, int maxAlternates);
    private Collection`1<RecognizedPhrase> ExtractAlternates(int numberOfAlternates, bool isSapi53Header);
    private void ExtractDictationAlternates(ISpRecoResult recoResult, int maxAlternates);
    private Collection`1<RecognizedPhrase> GetAlternates();
    internal string DebuggerDisplayString();
}
public class System.Speech.Recognition.RecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    private RecognitionResult _result;
    private bool _initialSilenceTimeout;
    private bool _babbleTimeout;
    private bool _inputStreamEnded;
    private TimeSpan _audioPosition;
    public RecognitionResult Result { get; }
    public bool InitialSilenceTimeout { get; }
    public bool BabbleTimeout { get; }
    public bool InputStreamEnded { get; }
    public TimeSpan AudioPosition { get; }
    internal RecognizeCompletedEventArgs(RecognitionResult result, bool initialSilenceTimeout, bool babbleTimeout, bool inputStreamEnded, TimeSpan audioPosition, Exception error, bool cancelled, object userState);
    public RecognitionResult get_Result();
    public bool get_InitialSilenceTimeout();
    public bool get_BabbleTimeout();
    public bool get_InputStreamEnded();
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.RecognizedAudio : object {
    private DateTime _startTime;
    private TimeSpan _audioPosition;
    private TimeSpan _audioDuration;
    private SpeechAudioFormatInfo _audioFormat;
    private Byte[] _rawAudioData;
    public SpeechAudioFormatInfo Format { get; }
    public DateTime StartTime { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    internal RecognizedAudio(Byte[] rawAudioData, SpeechAudioFormatInfo audioFormat, DateTime startTime, TimeSpan audioPosition, TimeSpan audioDuration);
    public SpeechAudioFormatInfo get_Format();
    public DateTime get_StartTime();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public void WriteToWaveStream(Stream outputStream);
    public void WriteToAudioStream(Stream outputStream);
    public RecognizedAudio GetRange(TimeSpan audioPosition, TimeSpan duration);
    private void WriteWaveHeader(StreamMarshaler sm);
}
[DebuggerDisplayAttribute("{Text}")]
public class System.Speech.Recognition.RecognizedPhrase : object {
    internal SPSERIALIZEDPHRASE _serializedPhrase;
    internal Byte[] _phraseBuffer;
    internal bool _isSapi53Header;
    internal bool _hasIPAPronunciation;
    private RecognitionResult _recoResult;
    private GrammarOptions _grammarOptions;
    private string _text;
    private float _confidence;
    private SemanticValue _semantics;
    private ReadOnlyCollection`1<RecognizedWordUnit> _words;
    private Collection`1<ReplacementText> _replacementText;
    private ulong _grammarId;
    private Grammar _grammar;
    private int _homophoneGroupId;
    private ReadOnlyCollection`1<RecognizedPhrase> _homophones;
    private Collection`1<SemanticValue> _dupItems;
    private string _smlContent;
    private static int SpVariantSubsetOffset;
    public string Text { get; }
    public float Confidence { get; }
    public ReadOnlyCollection`1<RecognizedWordUnit> Words { get; }
    public SemanticValue Semantics { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> Homophones { get; }
    public Grammar Grammar { get; }
    public Collection`1<ReplacementText> ReplacementWordUnits { get; }
    public int HomophoneGroupId { get; }
    internal ulong GrammarId { get; }
    internal string SmlContent { get; }
    public IXPathNavigable ConstructSmlFromSemantics();
    public string get_Text();
    public float get_Confidence();
    public ReadOnlyCollection`1<RecognizedWordUnit> get_Words();
    public SemanticValue get_Semantics();
    public ReadOnlyCollection`1<RecognizedPhrase> get_Homophones();
    public Grammar get_Grammar();
    public Collection`1<ReplacementText> get_ReplacementWordUnits();
    public int get_HomophoneGroupId();
    internal static SPSERIALIZEDPHRASE GetPhraseHeader(IntPtr phraseBuffer, UInt32 expectedPhraseSize, bool isSapi53Header);
    internal void InitializeFromSerializedBuffer(RecognitionResult recoResult, SPSERIALIZEDPHRASE serializedPhrase, IntPtr phraseBuffer, int phraseLength, bool isSapi53Header, bool hasIPAPronunciation);
    internal ulong get_GrammarId();
    internal string get_SmlContent();
    private void CalcSemantics(Grammar grammar);
    private bool CalcILSemantics(IntPtr phraseBuffer);
    private static List`1<ResultPropertiesRef> BuildRecoPropertyTree(SPSERIALIZEDPHRASE serializedPhrase, IntPtr phraseBuffer, RuleNode ruleTree, IList`1<RecognizedWordUnit> words, bool isSapi53Header);
    private static SemanticValue RecursiveBuildSemanticProperties(IList`1<RecognizedWordUnit> words, List`1<ResultPropertiesRef> properties, RuleNode ruleTree, GrammarOptions semanticTag, Collection`1& dupItems);
    private static void RecursivelyExtractSemanticProperties(List`1<ResultPropertiesRef> propertyList, int semanticsOffset, IntPtr phraseBuffer, RuleNode ruleTree, IList`1<RecognizedWordUnit> words, bool isSapi53Header);
    private void RecursivelyExtractSemanticValue(IntPtr phraseBuffer, int semanticsOffset, SemanticValue semanticValue, IList`1<RecognizedWordUnit> words, bool isSapi53Header, GrammarOptions semanticTag);
    private static void InsertSemanticValueToDictionary(SemanticValue semanticValue, string propertyName, SemanticValue thisSemanticValue, GrammarOptions semanticTag, Collection`1& dupItems);
    private static SemanticValue ExtractSemanticValueInformation(int semanticsOffset, SPSERIALIZEDPHRASEPROPERTY property, IntPtr phraseBuffer, bool isSapi53Header, String& propertyName);
    private static RuleNode ExtractRules(Grammar grammar, SPSERIALIZEDPHRASERULE rule, IntPtr phraseBuffer);
    private void ThrowInvalidSemanticInterpretationError();
    private static bool TryExecuteOnParse(RuleNode ruleRef, SemanticValue value, IList`1<RecognizedWordUnit> words, Object& newValue, Exception& exceptionThrown);
    private static bool ExecuteOnParse(Grammar grammar, RuleNode ruleRef, SemanticValue value, IList`1<RecognizedWordUnit> words, Object& newValue);
    private static bool ExecuteOnError(Grammar grammar, RuleNode ruleRef, Exception e);
    private static object TryExecuteOnRecognition(Grammar grammar, RecognitionResult result, string rootRule);
    private static void GetRuleInstance(Grammar grammar, string rule, string method, MethodInfo& onParse, Grammar& ruleInstance);
    private static Type GetTypeForRule(Assembly assembly, string rule);
    private static int NextReplacementWord(Collection`1<ReplacementText> replacements, ReplacementText& replacement, Int32& posInCollection);
    private void AppendSml(XmlDocument document, int i, NumberFormatInfo nfo);
    private void AppendPropertiesSML(XmlDocument document, XmlElement alternateNode, SemanticValue semanticsNode, NumberFormatInfo nfo);
    private string RemoveTrailingNumber(string name);
    private void AppendAttributes(XmlElement propertyNode, SemanticValue semanticValue);
}
[DebuggerDisplayAttribute("Text = {Text}")]
public class System.Speech.Recognition.RecognizedWordUnit : object {
    internal TimeSpan _audioPosition;
    internal TimeSpan _audioDuration;
    private string _text;
    private string _lexicalForm;
    private float _confidence;
    private string _pronunciation;
    private DisplayAttributes _displayAttributes;
    public string Text { get; }
    public float Confidence { get; }
    public string Pronunciation { get; }
    public string LexicalForm { get; }
    public DisplayAttributes DisplayAttributes { get; }
    public RecognizedWordUnit(string text, float confidence, string pronunciation, string lexicalForm, DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    public string get_Text();
    public float get_Confidence();
    public string get_Pronunciation();
    public string get_LexicalForm();
    public DisplayAttributes get_DisplayAttributes();
    internal static byte DisplayAttributesToSapiAttributes(DisplayAttributes displayAttributes);
    internal static DisplayAttributes SapiAttributesToDisplayAttributes(byte sapiAttributes);
}
public enum System.Speech.Recognition.RecognizeMode : Enum {
    public int value__;
    public static RecognizeMode Single;
    public static RecognizeMode Multiple;
}
internal class System.Speech.Recognition.RecognizerBase : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizeCompletedEventArgs> RecognizeCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<StateChangedEventArgs> StateChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadGrammarCompletedEventArgs> LoadGrammarCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechDetectedEventArgs> SpeechDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognizedEventArgs> SpeechRecognized;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognitionRejectedEventArgs> SpeechRecognitionRejected;
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizerUpdateReachedEventArgs> RecognizerUpdateReached;
    private List`1<Grammar> _grammars;
    private ReadOnlyCollection`1<Grammar> _readOnlyGrammars;
    private RecognizerInfo _recognizerInfo;
    private bool _disposed;
    private ulong _currentGrammarId;
    private SapiRecoContext _sapiContext;
    private SapiRecognizer _sapiRecognizer;
    private bool _supportsSapi53;
    private EventNotify _eventNotify;
    private ulong _eventInterest;
    private EventHandler`1<AudioSignalProblemOccurredEventArgs> _audioSignalProblemOccurredDelegate;
    private EventHandler`1<AudioLevelUpdatedEventArgs> _audioLevelUpdatedDelegate;
    private EventHandler`1<AudioStateChangedEventArgs> _audioStateChangedDelegate;
    private EventHandler`1<SpeechHypothesizedEventArgs> _speechHypothesizedDelegate;
    private bool _enabled;
    private int _maxAlternates;
    internal AudioState _audioState;
    private SpeechAudioFormatInfo _audioFormat;
    private RecognizeMode _recognizeMode;
    private bool _isRecognizeCancelled;
    private bool _isRecognizing;
    private bool _isEmulateRecognition;
    private bool _isWaitingForRecognition;
    private RecognitionResult _lastResult;
    private Exception _lastException;
    private bool _pauseRecognizerOnRecognition;
    private bool _detectingInitialSilenceTimeout;
    private bool _detectingBabbleTimeout;
    private bool _initialSilenceTimeoutReached;
    private bool _babbleTimeoutReached;
    private TimeSpan _initialSilenceTimeout;
    private TimeSpan _babbleTimeout;
    internal bool _haveInputSource;
    private Stream _inputStream;
    private Dictionary`2<int, object> _bookmarkTable;
    private UInt32 _nextBookmarkId;
    private UInt32 _prevMaxBookmarkId;
    private OperationLock _waitForGrammarsToLoad;
    private object _grammarDataLock;
    private static UInt32 _nullBookmarkId;
    private static UInt32 _initialSilenceBookmarkId;
    private static UInt32 _babbleBookmarkId;
    private static UInt32 _firstUnusedBookmarkId;
    private AsyncSerializedWorker _asyncWorker;
    private AsyncSerializedWorker _asyncWorkerUI;
    private AutoResetEvent _handlerWaitHandle;
    private object _thisObjectLock;
    private Exception _loadException;
    private Grammar _topLevel;
    private bool _inproc;
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizeCompletedEventArgs> RecognizeCompletedSync;
    [CompilerGeneratedAttribute]
private EventHandler`1<EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompletedSync;
    private TimeSpan _defaultTimeout;
    private RecognizerBaseThunk _recoThunk;
    private static Char[] s_slashes;
    internal bool PauseRecognizerOnRecognition { get; internal set; }
    internal TimeSpan InitialSilenceTimeout { get; internal set; }
    internal TimeSpan BabbleTimeout { get; internal set; }
    internal RecognizerState State { get; }
    internal bool Enabled { get; internal set; }
    internal ReadOnlyCollection`1<Grammar> Grammars { get; }
    internal RecognizerInfo RecognizerInfo { get; }
    internal AudioState AudioState { get; internal set; }
    internal int AudioLevel { get; }
    internal TimeSpan AudioPosition { get; }
    internal TimeSpan RecognizerAudioPosition { get; }
    internal SpeechAudioFormatInfo AudioFormat { get; }
    internal int MaxAlternates { get; internal set; }
    private SapiRecoContext SapiContext { get; }
    private SapiRecognizer SapiRecognizer { get; }
    private static RecognizerBase();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal void LoadGrammar(Grammar grammar);
    internal void LoadGrammarAsync(Grammar grammar);
    internal void UnloadGrammar(Grammar grammar);
    internal void UnloadAllGrammars();
    private sealed virtual override void System.Speech.Recognition.IRecognizerInternal.SetGrammarState(Grammar grammar, bool enabled);
    private sealed virtual override void System.Speech.Recognition.IRecognizerInternal.SetGrammarWeight(Grammar grammar, float weight);
    private sealed virtual override void System.Speech.Recognition.IRecognizerInternal.SetGrammarPriority(Grammar grammar, int priority);
    private sealed virtual override Grammar System.Speech.Recognition.IRecognizerInternal.GetGrammarFromId(ulong id);
    private sealed virtual override void System.Speech.Recognition.IRecognizerInternal.SetDictationContext(Grammar grammar, string precedingText, string subsequentText);
    internal RecognitionResult EmulateRecognize(string inputText);
    internal void EmulateRecognizeAsync(string inputText);
    internal RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    internal void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    internal RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    internal void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    internal void RequestRecognizerUpdate();
    internal void RequestRecognizerUpdate(object userToken);
    internal void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    internal void Initialize(SapiRecognizer recognizer, bool inproc);
    internal void RecognizeAsync(RecognizeMode mode);
    internal RecognitionResult Recognize(TimeSpan initialSilenceTimeout);
    internal void RecognizeAsyncCancel();
    internal void RecognizeAsyncStop();
    internal bool get_PauseRecognizerOnRecognition();
    internal void set_PauseRecognizerOnRecognition(bool value);
    internal void SetInput(string path);
    internal void SetInput(Stream stream, SpeechAudioFormatInfo audioFormat);
    internal void SetInputToDefaultAudioDevice();
    internal int QueryRecognizerSettingAsInt(string settingName);
    internal object QueryRecognizerSetting(string settingName);
    internal void UpdateRecognizerSetting(string settingName, string updatedValue);
    internal void UpdateRecognizerSetting(string settingName, int updatedValue);
    internal static Exception ExceptionFromSapiCreateRecognizerError(COMException e);
    internal static Exception ExceptionFromSapiCreateRecognizerError(SAPIErrorCodes errorCode);
    internal TimeSpan get_InitialSilenceTimeout();
    internal void set_InitialSilenceTimeout(TimeSpan value);
    internal TimeSpan get_BabbleTimeout();
    internal void set_BabbleTimeout(TimeSpan value);
    internal RecognizerState get_State();
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal ReadOnlyCollection`1<Grammar> get_Grammars();
    internal RecognizerInfo get_RecognizerInfo();
    internal AudioState get_AudioState();
    internal void set_AudioState(AudioState value);
    internal int get_AudioLevel();
    internal TimeSpan get_AudioPosition();
    internal TimeSpan get_RecognizerAudioPosition();
    internal SpeechAudioFormatInfo get_AudioFormat();
    internal int get_MaxAlternates();
    internal void set_MaxAlternates(int value);
    [CompilerGeneratedAttribute]
internal void add_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    internal void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    internal void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    internal void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    internal void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    internal void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    internal void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    internal void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    internal void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    protected virtual void Dispose(bool disposing);
    private SapiRecoContext get_SapiContext();
    private SapiRecognizer get_SapiRecognizer();
    private void LoadSapiGrammar(Grammar grammar, SapiGrammar sapiGrammar, bool enabled, float weight, int priority);
    private void LoadSapiDictationGrammar(SapiGrammar sapiGrammar, Uri uri, string ruleName, bool enabled, float weight, int priority);
    private sealed virtual override int System.Speech.Internal.SapiInterop.ISpGrammarResourceLoader.LoadResource(string bstrResourceUri, bool fAlwaysReload, IStream& pStream, String& pbstrMIMEType, Int16& pfModified, String& pbstrRedirectUrl);
    private sealed virtual override string System.Speech.Internal.SapiInterop.ISpGrammarResourceLoader.GetLocalCopy(Uri resourcePath, String& mimeType, Uri& redirectUrl);
    private sealed virtual override void System.Speech.Internal.SapiInterop.ISpGrammarResourceLoader.ReleaseLocalCopy(string path);
    private void LoadSapiGrammarFromCfg(SapiGrammar sapiGrammar, Grammar grammar, Uri baseUri, bool enabled, float weight, int priority);
    private void SetSapiGrammarProperties(SapiGrammar sapiGrammar, Uri uri, string ruleName, bool enabled, float weight, int priority);
    private void LoadGrammarAsyncCallback(object grammarObject);
    private void LoadGrammarAsyncCompletedCallback(object grammarObject);
    private SapiGrammar CreateNewSapiGrammar(UInt64& grammarId);
    private void ValidateGrammar(Grammar grammar, GrammarState[] validStates);
    private RecognitionResult InternalEmulateRecognize(string phrase, SpeechEmulationCompareFlags flag, bool useReco2, RecognizedWordUnit[] wordUnits);
    private void InternalEmulateRecognizeAsync(string phrase, SpeechEmulationCompareFlags flag, bool useReco2, RecognizedWordUnit[] wordUnits);
    private void EmulateRecognizedFailReportError(SAPIErrorCodes hr);
    private void ActivateRule(SapiGrammar sapiGrammar, Uri uri, string ruleName);
    private void RecognizeAsyncWaitForGrammarsToLoad(object unused);
    private void RecognizeAsyncWaitForGrammarsToLoadFailed(object eventArgs);
    private void SignalHandlerThread(object ignored);
    private void DispatchEvents(object eventData);
    private void ProcessStartStreamEvent();
    private void ProcessPhraseStartEvent(SpeechEvent speechEvent);
    private void ProcessBookmarkEvent(SpeechEvent speechEvent);
    private void ProcessHypothesisEvent(SpeechEvent speechEvent);
    private void ProcessRecognitionEvent(SpeechEvent speechEvent);
    private void ProcessRecoOtherContextEvent();
    private void ProcessEndStreamEvent(SpeechEvent speechEvent);
    private void ProcessInterferenceEvent(UInt32 interference);
    private void ProcessAudioLevelEvent(int audioLevel);
    private void EndRecognitionWithTimeout();
    private RecognitionResult CreateRecognitionResult(SpeechEvent speechEvent);
    private void UpdateAudioFormat(SpeechAudioFormatInfo audioFormat);
    private SpeechAudioFormatInfo GetSapiAudioFormat();
    private ulong TimeSpanToStreamPosition(TimeSpan time);
    private static void ThrowIfSapiErrorCode(SAPIErrorCodes errorCode);
    private static Exception ExceptionFromSapiStreamError(SAPIErrorCodes errorCode);
    private static SpeechEmulationCompareFlags ConvertCompareOptions(CompareOptions compareOptions);
    internal void AddEventInterest(ulong interest);
    internal void RemoveEventInterest(ulong interest);
    private UInt32 AddBookmarkItem(object userToken);
    private void ResetBookmarkTable();
    private object GetBookmarkItemAndRemove(UInt32 bookmarkId);
    private void CloseCachedInputStream();
    private void FireAudioStateChangedEvent(AudioState audioState);
    private void FireSignalProblemOccurredEvent(AudioSignalProblem audioSignalProblem);
    private void FireAudioLevelUpdatedEvent(int audioLevel);
    private void FireStateChangedEvent(RecognizerState recognizerState);
    private void FireSpeechDetectedEvent(TimeSpan audioPosition);
    private void FireSpeechHypothesizedEvent(RecognitionResult result);
    private void FireSpeechRecognitionRejectedEvent(RecognitionResult result);
    private void FireSpeechRecognizedEvent(SpeechRecognizedEventArgs recognitionEventArgs);
    private void FireRecognizeCompletedEvent(RecognitionResult result, bool initialSilenceTimeoutReached, bool babbleTimeoutReached, bool isStreamReleased, TimeSpan audioPosition, Exception exception, bool isRecognizeCancelled);
    private void FireEmulateRecognizeCompletedEvent(RecognitionResult result, Exception exception, bool isRecognizeCancelled);
    private static void CheckGrammarOptionsOnSapi51(Grammar grammar);
    [CompilerGeneratedAttribute]
private void add_RecognizeCompletedSync(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_RecognizeCompletedSync(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_EmulateRecognizeCompletedSync(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_EmulateRecognizeCompletedSync(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
}
public class System.Speech.Recognition.RecognizerInfo : object {
    private ReadOnlyDictionary`2<string, string> _attributes;
    private string _id;
    private string _name;
    private string _description;
    private string _sapiObjectTokenId;
    private CultureInfo _culture;
    private ReadOnlyCollection`1<SpeechAudioFormatInfo> _supportedAudioFormats;
    private ObjectToken _objectToken;
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public CultureInfo Culture { get; }
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    public IDictionary`2<string, string> AdditionalInfo { get; }
    private RecognizerInfo(ObjectToken token, CultureInfo culture);
    internal static RecognizerInfo Create(ObjectToken token);
    internal ObjectToken GetObjectToken();
    public sealed virtual void Dispose();
    public string get_Id();
    public string get_Name();
    public string get_Description();
    public CultureInfo get_Culture();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public IDictionary`2<string, string> get_AdditionalInfo();
}
public enum System.Speech.Recognition.RecognizerState : Enum {
    public int value__;
    public static RecognizerState Stopped;
    public static RecognizerState Listening;
}
public class System.Speech.Recognition.RecognizerUpdateReachedEventArgs : EventArgs {
    private object _userToken;
    private TimeSpan _audioPosition;
    public object UserToken { get; }
    public TimeSpan AudioPosition { get; }
    internal RecognizerUpdateReachedEventArgs(object userToken, TimeSpan audioPosition);
    public object get_UserToken();
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.ReplacementText : object {
    private DisplayAttributes _displayAttributes;
    private string _text;
    private int _wordIndex;
    private int _countOfWords;
    public DisplayAttributes DisplayAttributes { get; }
    public string Text { get; }
    public int FirstWordIndex { get; }
    public int CountOfWords { get; }
    internal ReplacementText(DisplayAttributes displayAttributes, string text, int wordIndex, int countOfWords);
    public DisplayAttributes get_DisplayAttributes();
    public string get_Text();
    public int get_FirstWordIndex();
    public int get_CountOfWords();
}
[DebuggerDisplayAttribute("{_semanticKey.DebugSummary}")]
public class System.Speech.Recognition.SemanticResultKey : object {
    private SemanticKeyElement _semanticKey;
    internal SemanticKeyElement SemanticKeyElement { get; }
    private SemanticResultKey(string semanticResultKey);
    public SemanticResultKey(string semanticResultKey, String[] phrases);
    public SemanticResultKey(string semanticResultKey, GrammarBuilder[] builders);
    public GrammarBuilder ToGrammarBuilder();
    internal SemanticKeyElement get_SemanticKeyElement();
}
[DebuggerDisplayAttribute("{_tag.DebugSummary}")]
public class System.Speech.Recognition.SemanticResultValue : object {
    private TagElement _tag;
    internal TagElement Tag { get; }
    public SemanticResultValue(object value);
    public SemanticResultValue(string phrase, object value);
    public SemanticResultValue(GrammarBuilder builder, object value);
    public GrammarBuilder ToGrammarBuilder();
    internal TagElement get_Tag();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{_keyName} = {Value}, Children = {_dictionary.Count}")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay")]
public class System.Speech.Recognition.SemanticValue : object {
    internal Dictionary`2<string, SemanticValue> _dictionary;
    internal bool _valueFieldSet;
    private string _keyName;
    private float _confidence;
    private object _value;
    public object Value { get; internal set; }
    public float Confidence { get; }
    public SemanticValue Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }
    private ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }
    internal string KeyName { get; }
    public SemanticValue(string keyName, object value, float confidence);
    public SemanticValue(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public object get_Value();
    internal void set_Value(object value);
    public float get_Confidence();
    public sealed virtual SemanticValue get_Item(string key);
    public sealed virtual void set_Item(string key, SemanticValue value);
    public sealed virtual bool Contains(KeyValuePair`2<string, SemanticValue> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual int get_Count();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add(string key, SemanticValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, SemanticValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.get_IsReadOnly();
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Keys();
    private sealed virtual override ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Values();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue(string key, SemanticValue& value);
    internal string get_KeyName();
}
public class System.Speech.Recognition.SpeechDetectedEventArgs : EventArgs {
    private TimeSpan _audioPosition;
    public TimeSpan AudioPosition { get; }
    internal SpeechDetectedEventArgs(TimeSpan audioPosition);
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.SpeechHypothesizedEventArgs : RecognitionEventArgs {
    internal SpeechHypothesizedEventArgs(RecognitionResult result);
}
public class System.Speech.Recognition.SpeechRecognitionEngine : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizeCompletedEventArgs> RecognizeCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadGrammarCompletedEventArgs> LoadGrammarCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechDetectedEventArgs> SpeechDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognizedEventArgs> SpeechRecognized;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognitionRejectedEventArgs> SpeechRecognitionRejected;
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizerUpdateReachedEventArgs> RecognizerUpdateReached;
    private bool _disposed;
    private RecognizerBase _recognizerBase;
    private SapiRecognizer _sapiRecognizer;
    private EventHandler`1<AudioSignalProblemOccurredEventArgs> _audioSignalProblemOccurredDelegate;
    private EventHandler`1<AudioLevelUpdatedEventArgs> _audioLevelUpdatedDelegate;
    private EventHandler`1<AudioStateChangedEventArgs> _audioStateChangedDelegate;
    private EventHandler`1<SpeechHypothesizedEventArgs> _speechHypothesizedDelegate;
    [EditorBrowsableAttribute("2")]
public TimeSpan InitialSilenceTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan BabbleTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeoutAmbiguous { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public AudioState AudioState { get; }
    public int AudioLevel { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public TimeSpan AudioPosition { get; }
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int MaxAlternates { get; public set; }
    private RecognizerBase RecoBase { get; }
    public SpeechRecognitionEngine(CultureInfo culture);
    public SpeechRecognitionEngine(string recognizerId);
    public SpeechRecognitionEngine(RecognizerInfo recognizerInfo);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ReadOnlyCollection`1<RecognizerInfo> InstalledRecognizers();
    public TimeSpan get_InitialSilenceTimeout();
    public void set_InitialSilenceTimeout(TimeSpan value);
    public TimeSpan get_BabbleTimeout();
    public void set_BabbleTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeout();
    public void set_EndSilenceTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeoutAmbiguous();
    public void set_EndSilenceTimeoutAmbiguous(TimeSpan value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public RecognizerInfo get_RecognizerInfo();
    public AudioState get_AudioState();
    public int get_AudioLevel();
    public TimeSpan get_RecognizerAudioPosition();
    public TimeSpan get_AudioPosition();
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public void SetInputToWaveFile(string path);
    public void SetInputToWaveStream(Stream audioSource);
    public void SetInputToAudioStream(Stream audioSource, SpeechAudioFormatInfo audioFormat);
    public void SetInputToNull();
    public void SetInputToDefaultAudioDevice();
    public RecognitionResult Recognize();
    public RecognitionResult Recognize(TimeSpan initialSilenceTimeout);
    public void RecognizeAsync();
    public void RecognizeAsync(RecognizeMode mode);
    public void RecognizeAsyncCancel();
    public void RecognizeAsyncStop();
    public object QueryRecognizerSetting(string settingName);
    public void UpdateRecognizerSetting(string settingName, string updatedValue);
    public void UpdateRecognizerSetting(string settingName, int updatedValue);
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public void UnloadGrammar(Grammar grammar);
    public void UnloadAllGrammars();
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    [CompilerGeneratedAttribute]
public void add_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    private void Initialize(RecognizerInfo recognizerInfo);
    private void RecognizeCompletedProxy(object sender, RecognizeCompletedEventArgs e);
    private void EmulateRecognizeCompletedProxy(object sender, EmulateRecognizeCompletedEventArgs e);
    private void LoadGrammarCompletedProxy(object sender, LoadGrammarCompletedEventArgs e);
    private void SpeechDetectedProxy(object sender, SpeechDetectedEventArgs e);
    private void SpeechRecognizedProxy(object sender, SpeechRecognizedEventArgs e);
    private void SpeechRecognitionRejectedProxy(object sender, SpeechRecognitionRejectedEventArgs e);
    private void RecognizerUpdateReachedProxy(object sender, RecognizerUpdateReachedEventArgs e);
    private void SpeechHypothesizedProxy(object sender, SpeechHypothesizedEventArgs e);
    private void AudioSignalProblemOccurredProxy(object sender, AudioSignalProblemOccurredEventArgs e);
    private void AudioLevelUpdatedProxy(object sender, AudioLevelUpdatedEventArgs e);
    private void AudioStateChangedProxy(object sender, AudioStateChangedEventArgs e);
    private RecognizerBase get_RecoBase();
}
public class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs : RecognitionEventArgs {
    internal SpeechRecognitionRejectedEventArgs(RecognitionResult result);
}
public class System.Speech.Recognition.SpeechRecognizedEventArgs : RecognitionEventArgs {
    internal SpeechRecognizedEventArgs(RecognitionResult result);
}
public class System.Speech.Recognition.SpeechRecognizer : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<StateChangedEventArgs> StateChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadGrammarCompletedEventArgs> LoadGrammarCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechDetectedEventArgs> SpeechDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognizedEventArgs> SpeechRecognized;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpeechRecognitionRejectedEventArgs> SpeechRecognitionRejected;
    [CompilerGeneratedAttribute]
private EventHandler`1<RecognizerUpdateReachedEventArgs> RecognizerUpdateReached;
    private bool _disposed;
    private RecognizerBase _recognizerBase;
    private SapiRecognizer _sapiRecognizer;
    private EventHandler`1<AudioSignalProblemOccurredEventArgs> _audioSignalProblemOccurredDelegate;
    private EventHandler`1<AudioLevelUpdatedEventArgs> _audioLevelUpdatedDelegate;
    private EventHandler`1<AudioStateChangedEventArgs> _audioStateChangedDelegate;
    private EventHandler`1<SpeechHypothesizedEventArgs> _speechHypothesizedDelegate;
    public RecognizerState State { get; }
    public bool Enabled { get; public set; }
    public bool PauseRecognizerOnRecognition { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public AudioState AudioState { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int MaxAlternates { get; public set; }
    private RecognizerBase RecoBase { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public RecognizerState get_State();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_PauseRecognizerOnRecognition();
    public void set_PauseRecognizerOnRecognition(bool value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public RecognizerInfo get_RecognizerInfo();
    public AudioState get_AudioState();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_RecognizerAudioPosition();
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public void UnloadGrammar(Grammar grammar);
    public void UnloadAllGrammars();
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    [CompilerGeneratedAttribute]
public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    private void StateChangedProxy(object sender, StateChangedEventArgs e);
    private void EmulateRecognizeCompletedProxy(object sender, EmulateRecognizeCompletedEventArgs e);
    private void LoadGrammarCompletedProxy(object sender, LoadGrammarCompletedEventArgs e);
    private void SpeechDetectedProxy(object sender, SpeechDetectedEventArgs e);
    private void SpeechRecognizedProxy(object sender, SpeechRecognizedEventArgs e);
    private void SpeechRecognitionRejectedProxy(object sender, SpeechRecognitionRejectedEventArgs e);
    private void RecognizerUpdateReachedProxy(object sender, RecognizerUpdateReachedEventArgs e);
    private void SpeechHypothesizedProxy(object sender, SpeechHypothesizedEventArgs e);
    private void AudioSignalProblemOccurredProxy(object sender, AudioSignalProblemOccurredEventArgs e);
    private void AudioLevelUpdatedProxy(object sender, AudioLevelUpdatedEventArgs e);
    private void AudioStateChangedProxy(object sender, AudioStateChangedEventArgs e);
    private RecognizerBase get_RecoBase();
}
public class System.Speech.Recognition.SpeechUI : object {
    public static bool SendTextFeedback(RecognitionResult result, string feedback, bool isSuccessfulAction);
}
[GuidAttribute("EF411752-3736-4CB4-9C8C-8EF4CCB58EFE")]
internal class System.Speech.Recognition.SpObjectToken : object {
}
[GuidAttribute("A910187F-0C7A-45AC-92CC-59EDAFB77B53")]
internal class System.Speech.Recognition.SpObjectTokenCategory : object {
}
public class System.Speech.Recognition.SrgsGrammar.SrgsDocument : object {
    private SrgsGrammar _grammar;
    private Uri _baseUri;
    public Uri XmlBase { get; public set; }
    public CultureInfo Culture { get; public set; }
    public SrgsRule Root { get; public set; }
    public SrgsGrammarMode Mode { get; public set; }
    public SrgsPhoneticAlphabet PhoneticAlphabet { get; public set; }
    public SrgsRulesCollection Rules { get; }
    public string Language { get; public set; }
    public string Namespace { get; public set; }
    public Collection`1<string> CodeBehind { get; }
    public bool Debug { get; public set; }
    public string Script { get; public set; }
    public Collection`1<string> ImportNamespaces { get; }
    public Collection`1<string> AssemblyReferences { get; }
    unknown SrgsTagFormat TagFormat {internal set; }
    internal Uri BaseUri { get; }
    internal SrgsGrammar Grammar { get; }
    public SrgsDocument(string path);
    public SrgsDocument(XmlReader srgsGrammar);
    public SrgsDocument(GrammarBuilder builder);
    public SrgsDocument(SrgsRule grammarRootRule);
    public void WriteSrgs(XmlWriter srgsGrammar);
    public Uri get_XmlBase();
    public void set_XmlBase(Uri value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public SrgsRule get_Root();
    public void set_Root(SrgsRule value);
    public SrgsGrammarMode get_Mode();
    public void set_Mode(SrgsGrammarMode value);
    public SrgsPhoneticAlphabet get_PhoneticAlphabet();
    public void set_PhoneticAlphabet(SrgsPhoneticAlphabet value);
    public SrgsRulesCollection get_Rules();
    public string get_Language();
    public void set_Language(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public Collection`1<string> get_CodeBehind();
    public bool get_Debug();
    public void set_Debug(bool value);
    public string get_Script();
    public void set_Script(string value);
    public Collection`1<string> get_ImportNamespaces();
    public Collection`1<string> get_AssemblyReferences();
    internal void Load(XmlReader srgsGrammar);
    internal static GrammarOptions TagFormat2GrammarOptions(SrgsTagFormat value);
    internal static SrgsTagFormat GrammarOptions2TagFormat(GrammarOptions value);
    internal void set_TagFormat(SrgsTagFormat value);
    internal Uri get_BaseUri();
    internal SrgsGrammar get_Grammar();
}
[DebuggerDisplayAttribute("SrgsElement Children = [{_items.Count}]")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsElement/SrgsElementDebugDisplay")]
public abstract class System.Speech.Recognition.SrgsGrammar.SrgsElement : MarshalByRefObject {
    internal SrgsElement[] Children { get; }
    internal abstract virtual void WriteSrgs(XmlWriter writer);
    internal abstract virtual string DebuggerDisplayString();
    internal virtual void Validate(SrgsGrammar grammar);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parent);
    internal virtual SrgsElement[] get_Children();
}
internal class System.Speech.Recognition.SrgsGrammar.SrgsElementFactory : object {
    private SrgsGrammar _grammar;
    private static Char[] s_pronSeparator;
    private IGrammar System.Speech.Internal.SrgsParser.IElementFactory.Grammar { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Null { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Void { get; }
    private IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.Garbage { get; }
    internal SrgsElementFactory(SrgsGrammar grammar);
    private static SrgsElementFactory();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.RemoveAllRules();
    private sealed virtual override IPropertyTag System.Speech.Internal.SrgsParser.IElementFactory.CreatePropertyTag(IElement parent);
    private sealed virtual override ISemanticTag System.Speech.Internal.SrgsParser.IElementFactory.CreateSemanticTag(IElement parent);
    private sealed virtual override IElementText System.Speech.Internal.SrgsParser.IElementFactory.CreateText(IElement parent, string value);
    private sealed virtual override IToken System.Speech.Internal.SrgsParser.IElementFactory.CreateToken(IElement parent, string content, string pronunciation, string display, float reqConfidence);
    private sealed virtual override IItem System.Speech.Internal.SrgsParser.IElementFactory.CreateItem(IElement parent, IRule rule, int minRepeat, int maxRepeat, float repeatProbability, float weight);
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.CreateRuleRef(IElement parent, Uri srgsUri);
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.CreateRuleRef(IElement parent, Uri srgsUri, string semanticKey, string parameters);
    private sealed virtual override IOneOf System.Speech.Internal.SrgsParser.IElementFactory.CreateOneOf(IElement parent, IRule rule);
    private sealed virtual override ISubset System.Speech.Internal.SrgsParser.IElementFactory.CreateSubset(IElement parent, string text, MatchMode matchMode);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.InitSpecialRuleRef(IElement parent, IRuleRef special);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string sRule, string code);
    private sealed virtual override string System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string sRule, string code, string filename, int line);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddScript(IGrammar grammar, string script, string filename, int line);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddItem(IOneOf oneOf, IItem value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddElement(IRule rule, IElement value);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElementFactory.AddElement(IItem item, IElement value);
    private sealed virtual override IGrammar System.Speech.Internal.SrgsParser.IElementFactory.get_Grammar();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Null();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Void();
    private sealed virtual override IRuleRef System.Speech.Internal.SrgsParser.IElementFactory.get_Garbage();
}
internal class System.Speech.Recognition.SrgsGrammar.SrgsElementList : Collection`1<SrgsElement> {
    protected virtual void InsertItem(int index, SrgsElement element);
}
internal class System.Speech.Recognition.SrgsGrammar.SrgsGrammar : object {
    private bool _isSapiExtensionUsed;
    private Uri _xmlBase;
    private CultureInfo _culture;
    private SrgsGrammarMode _mode;
    private SrgsPhoneticAlphabet _phoneticAlphabet;
    private bool _hasPhoneticAlphabetBeenSet;
    private bool _hasPronunciation;
    private SrgsRule _root;
    private SrgsTagFormat _tagFormat;
    private Collection`1<string> _globalTags;
    private bool _isModeSet;
    private SrgsRulesCollection _rules;
    private string _sRoot;
    internal bool _fContainsCode;
    private string _language;
    private Collection`1<string> _codebehind;
    private string _namespace;
    internal bool _fDebug;
    private string _script;
    private List`1<ForwardReference> _scriptsForwardReference;
    private Collection`1<string> _usings;
    private Collection`1<string> _assemblyReferences;
    private string System.Speech.Internal.SrgsParser.IGrammar.Root { get; private set; }
    public Uri XmlBase { get; public set; }
    public CultureInfo Culture { get; public set; }
    public GrammarType Mode { get; public set; }
    public AlphabetType PhoneticAlphabet { get; public set; }
    public SrgsRule Root { get; public set; }
    public SrgsTagFormat TagFormat { get; public set; }
    public Collection`1<string> GlobalTags { get; public set; }
    public string Language { get; public set; }
    public string Namespace { get; public set; }
    public Collection`1<string> CodeBehind { get; public set; }
    public bool Debug { get; public set; }
    public string Script { get; public set; }
    public Collection`1<string> ImportNamespaces { get; public set; }
    public Collection`1<string> AssemblyReferences { get; public set; }
    internal SrgsRulesCollection Rules { get; }
    internal bool HasPronunciation { get; internal set; }
    unknown bool HasPhoneticAlphabetBeenSet {internal set; }
    internal bool HasSapiExtension { get; internal set; }
    internal void WriteSrgs(XmlWriter writer);
    internal void Validate();
    private sealed virtual override IRule System.Speech.Internal.SrgsParser.IGrammar.CreateRule(string id, RulePublic publicRule, RuleDynamic dynamic, bool hasScript);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement parent);
    internal void AddScript(string rule, string code);
    private sealed virtual override string System.Speech.Internal.SrgsParser.IGrammar.get_Root();
    private sealed virtual override void System.Speech.Internal.SrgsParser.IGrammar.set_Root(string value);
    public Uri get_XmlBase();
    public sealed virtual void set_XmlBase(Uri value);
    public CultureInfo get_Culture();
    public sealed virtual void set_Culture(CultureInfo value);
    public GrammarType get_Mode();
    public sealed virtual void set_Mode(GrammarType value);
    public AlphabetType get_PhoneticAlphabet();
    public sealed virtual void set_PhoneticAlphabet(AlphabetType value);
    public SrgsRule get_Root();
    public void set_Root(SrgsRule value);
    public sealed virtual SrgsTagFormat get_TagFormat();
    public sealed virtual void set_TagFormat(SrgsTagFormat value);
    public sealed virtual Collection`1<string> get_GlobalTags();
    public sealed virtual void set_GlobalTags(Collection`1<string> value);
    public sealed virtual string get_Language();
    public sealed virtual void set_Language(string value);
    public sealed virtual string get_Namespace();
    public sealed virtual void set_Namespace(string value);
    public sealed virtual Collection`1<string> get_CodeBehind();
    public sealed virtual void set_CodeBehind(Collection`1<string> value);
    public bool get_Debug();
    public sealed virtual void set_Debug(bool value);
    public string get_Script();
    public void set_Script(string value);
    public sealed virtual Collection`1<string> get_ImportNamespaces();
    public sealed virtual void set_ImportNamespaces(Collection`1<string> value);
    public sealed virtual Collection`1<string> get_AssemblyReferences();
    public sealed virtual void set_AssemblyReferences(Collection`1<string> value);
    internal SrgsRulesCollection get_Rules();
    internal bool get_HasPronunciation();
    internal void set_HasPronunciation(bool value);
    internal void set_HasPhoneticAlphabetBeenSet(bool value);
    internal bool get_HasSapiExtension();
    internal void set_HasSapiExtension(bool value);
    private void WriteSTGAttributes(XmlWriter writer);
    private void WriteGrammarElements(XmlWriter writer);
    private void WriteRules(XmlWriter writer);
    private void WriteGlobalScripts(XmlWriter writer);
}
public static class System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler : object {
    public static void Compile(string inputPath, Stream outputStream);
    public static void Compile(SrgsDocument srgsGrammar, Stream outputStream);
    public static void Compile(XmlReader reader, Stream outputStream);
    public static void CompileClassLibrary(String[] inputPaths, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(SrgsDocument srgsGrammar, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(XmlReader reader, string outputPath, String[] referencedAssemblies, string keyFile);
    private static bool CheckIfCfg(Stream stream, Int32& cfgLength);
    internal static void CompileXmlOrCopyCfg(Stream inputStream, Stream outputStream, Uri originalUri);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode : Enum {
    public int value__;
    public static SrgsGrammarMode Voice;
    public static SrgsGrammarMode Dtmf;
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsItem/SrgsItemDebugDisplay")]
public class System.Speech.Recognition.SrgsGrammar.SrgsItem : SrgsElement {
    private float _weight;
    private float _repeatProbability;
    private int _minRepeat;
    private int _maxRepeat;
    private SrgsElementList _elements;
    private static int NotSet;
    public Collection`1<SrgsElement> Elements { get; }
    public float RepeatProbability { get; public set; }
    public int MinRepeat { get; }
    public int MaxRepeat { get; }
    public float Weight { get; public set; }
    internal SrgsElement[] Children { get; }
    public SrgsItem(string text);
    public SrgsItem(SrgsElement[] elements);
    public SrgsItem(int repeatCount);
    public SrgsItem(int min, int max);
    public SrgsItem(int min, int max, string text);
    public SrgsItem(int min, int max, SrgsElement[] elements);
    public void SetRepeat(int count);
    public void SetRepeat(int minRepeat, int maxRepeat);
    public void Add(SrgsElement element);
    public Collection`1<SrgsElement> get_Elements();
    public float get_RepeatProbability();
    public void set_RepeatProbability(float value);
    public int get_MinRepeat();
    public int get_MaxRepeat();
    public float get_Weight();
    public void set_Weight(float value);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual string DebuggerDisplayString();
    internal virtual SrgsElement[] get_Children();
}
internal class System.Speech.Recognition.SrgsGrammar.SrgsItemList : Collection`1<SrgsItem> {
    protected virtual void InsertItem(int index, SrgsItem item);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag : SrgsElement {
    private string _name;
    private object _value;
    public string Name { get; public set; }
    public object Value { get; public set; }
    public SrgsNameValueTag(object value);
    public SrgsNameValueTag(string name, object value);
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual void Validate(SrgsGrammar grammar);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IPropertyTag.NameValue(IElement parent, string name, object value);
    internal virtual string DebuggerDisplayString();
    private static string GetTrimmedName(string name, string parameterName);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsOneOf/OneOfDebugDisplay")]
public class System.Speech.Recognition.SrgsGrammar.SrgsOneOf : SrgsElement {
    private SrgsItemList _items;
    public Collection`1<SrgsItem> Items { get; }
    internal SrgsElement[] Children { get; }
    public SrgsOneOf(String[] items);
    public SrgsOneOf(SrgsItem[] items);
    public void Add(SrgsItem item);
    public Collection`1<SrgsItem> get_Items();
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual string DebuggerDisplayString();
    internal virtual SrgsElement[] get_Children();
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet : Enum {
    public int value__;
    public static SrgsPhoneticAlphabet Sapi;
    public static SrgsPhoneticAlphabet Ipa;
    public static SrgsPhoneticAlphabet Ups;
}
[DebuggerDisplayAttribute("Rule = {_id.ToString()}, Scope = {_scope.ToString()}")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsRule/SrgsRuleDebugDisplay")]
public class System.Speech.Recognition.SrgsGrammar.SrgsRule : object {
    private SrgsElementList _elements;
    private string _id;
    private SrgsRuleScope _scope;
    private RuleDynamic _dynamic;
    private bool _isScopeSet;
    private string _baseclass;
    private string _script;
    private string _onInit;
    private string _onParse;
    private string _onError;
    private string _onRecognition;
    private static Char[] s_invalidChars;
    public Collection`1<SrgsElement> Elements { get; }
    public string Id { get; public set; }
    public SrgsRuleScope Scope { get; public set; }
    public string BaseClass { get; public set; }
    public string Script { get; public set; }
    public string OnInit { get; public set; }
    public string OnParse { get; public set; }
    public string OnError { get; public set; }
    public string OnRecognition { get; public set; }
    internal RuleDynamic Dynamic { get; internal set; }
    internal bool HasCode { get; }
    public SrgsRule(string id);
    public SrgsRule(string id, SrgsElement[] elements);
    private static SrgsRule();
    public void Add(SrgsElement element);
    public Collection`1<SrgsElement> get_Elements();
    public string get_Id();
    public void set_Id(string value);
    public SrgsRuleScope get_Scope();
    public void set_Scope(SrgsRuleScope value);
    public sealed virtual string get_BaseClass();
    public sealed virtual void set_BaseClass(string value);
    public string get_Script();
    public void set_Script(string value);
    public string get_OnInit();
    public void set_OnInit(string value);
    public string get_OnParse();
    public void set_OnParse(string value);
    public string get_OnError();
    public void set_OnError(string value);
    public string get_OnRecognition();
    public void set_OnRecognition(string value);
    internal void WriteSrgs(XmlWriter writer);
    internal void Validate(SrgsGrammar grammar);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IElement.PostParse(IElement grammar);
    private sealed virtual override void System.Speech.Internal.SrgsParser.IRule.CreateScript(IGrammar grammar, string rule, string method, RuleMethodScript type);
    internal RuleDynamic get_Dynamic();
    internal void set_Dynamic(RuleDynamic value);
    internal bool get_HasCode();
    private void WriteScriptElement(XmlWriter writer, string sCode);
    private void ValidateIdentifier(string s);
}
[ImmutableObjectAttribute("True")]
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsRuleRef : SrgsElement {
    public static SrgsRuleRef Null;
    public static SrgsRuleRef Void;
    public static SrgsRuleRef Garbage;
    public static SrgsRuleRef Dictation;
    public static SrgsRuleRef MnemonicSpelling;
    private Uri _uri;
    private SpecialRuleRefType _type;
    private string _semanticKey;
    private string _params;
    public Uri Uri { get; }
    public string SemanticKey { get; }
    public string Params { get; }
    public SrgsRuleRef(Uri uri);
    public SrgsRuleRef(Uri uri, string rule);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey, string parameters);
    public SrgsRuleRef(SrgsRule rule);
    public SrgsRuleRef(SrgsRule rule, string semanticKey);
    public SrgsRuleRef(SrgsRule rule, string semanticKey, string parameters);
    private SrgsRuleRef(SpecialRuleRefType type);
    internal SrgsRuleRef(string semanticKey, string parameters, Uri uri);
    private static SrgsRuleRef();
    public Uri get_Uri();
    public string get_SemanticKey();
    public string get_Params();
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual void Validate(SrgsGrammar grammar);
    internal virtual string DebuggerDisplayString();
    private void UriInit(Uri uri, string rule, string semanticKey, string initParameters);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection : KeyedCollection`2<string, SrgsRule> {
    public void Add(SrgsRule[] rules);
    protected virtual string GetKeyForItem(SrgsRule rule);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsRuleScope : Enum {
    public int value__;
    public static SrgsRuleScope Public;
    public static SrgsRuleScope Private;
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag : SrgsElement {
    private string _script;
    public string Script { get; public set; }
    public SrgsSemanticInterpretationTag(string script);
    public string get_Script();
    public void set_Script(string value);
    internal virtual void Validate(SrgsGrammar grammar);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual string DebuggerDisplayString();
    private sealed virtual override void System.Speech.Internal.SrgsParser.ISemanticTag.Content(IElement parent, string value, int line);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsSubset : SrgsElement {
    private SubsetMatchingMode _matchMode;
    private string _text;
    public SubsetMatchingMode MatchingMode { get; public set; }
    public string Text { get; public set; }
    public SrgsSubset(string text);
    public SrgsSubset(string text, SubsetMatchingMode matchingMode);
    public SubsetMatchingMode get_MatchingMode();
    public void set_MatchingMode(SubsetMatchingMode value);
    public string get_Text();
    public void set_Text(string value);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual void Validate(SrgsGrammar grammar);
    internal virtual string DebuggerDisplayString();
}
internal enum System.Speech.Recognition.SrgsGrammar.SrgsTagFormat : Enum {
    public int value__;
    public static SrgsTagFormat Default;
    public static SrgsTagFormat MssV1;
    public static SrgsTagFormat W3cV1;
    public static SrgsTagFormat KeyValuePairs;
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsText : SrgsElement {
    private string _text;
    public string Text { get; public set; }
    public SrgsText(string text);
    public string get_Text();
    public void set_Text(string value);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual string DebuggerDisplayString();
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsToken : SrgsElement {
    private string _text;
    private string _pronunciation;
    private string _display;
    public string Text { get; public set; }
    public string Pronunciation { get; public set; }
    public string Display { get; public set; }
    public SrgsToken(string text);
    public string get_Text();
    public sealed virtual void set_Text(string value);
    public string get_Pronunciation();
    public sealed virtual void set_Pronunciation(string value);
    public string get_Display();
    public sealed virtual void set_Display(string value);
    internal virtual void WriteSrgs(XmlWriter writer);
    internal virtual void Validate(SrgsGrammar grammar);
    internal virtual string DebuggerDisplayString();
}
public class System.Speech.Recognition.StateChangedEventArgs : EventArgs {
    private RecognizerState _recognizerState;
    public RecognizerState RecognizerState { get; }
    internal StateChangedEventArgs(RecognizerState recognizerState);
    public RecognizerState get_RecognizerState();
}
public enum System.Speech.Recognition.SubsetMatchingMode : Enum {
    public int value__;
    public static SubsetMatchingMode Subsequence;
    public static SubsetMatchingMode OrderedSubset;
    public static SubsetMatchingMode SubsequenceContentRequired;
    public static SubsetMatchingMode OrderedSubsetContentRequired;
}
internal static class System.Speech.SR : object {
    private static ResourceManager s_resourceManager;
    private static SR();
    internal static string Get(SRID id, Object[] args);
}
internal enum System.Speech.SRID : Enum {
    public int value__;
    public static SRID NullParamIllegal;
    public static SRID ArrayOfNullIllegal;
    public static SRID ParamsEntryNullIllegal;
    public static SRID Unavailable;
    public static SRID UnexpectedError;
    public static SRID CollectionReadOnly;
    public static SRID StringCanNotBeEmpty;
    public static SRID EnumInvalid;
    public static SRID NotSupportedWithThisVersionOfSAPI;
    public static SRID NotSupportedWithThisVersionOfSAPI2;
    public static SRID NotSupportedWithThisVersionOfSAPIBaseUri;
    public static SRID NotSupportedWithThisVersionOfSAPITagFormat;
    public static SRID NotSupportedWithThisVersionOfSAPICompareOption;
    public static SRID MustBeGreaterThanZero;
    public static SRID InvalidXml;
    public static SRID OperationAborted;
    public static SRID InvariantCultureInfo;
    public static SRID DuplicatedEntry;
    public static SRID StreamMustBeReadable;
    public static SRID StreamMustBeWriteable;
    public static SRID StreamMustBeSeekable;
    public static SRID StreamEndedUnexpectedly;
    public static SRID CannotReadFromDirectory;
    public static SRID UnknownMimeFormat;
    public static SRID CannotLoadResourceFromManifest;
    public static SRID TokenInUse;
    public static SRID TokenDeleted;
    public static SRID TokenUninitialized;
    public static SRID InvalidTokenId;
    public static SRID NotFound;
    public static SRID NoBackSlash;
    public static SRID InvalidRegistryEntry;
    public static SRID TokenCannotCreateInstance;
    public static SRID InvalidXmlFormat;
    public static SRID IncorrectAttributeValue;
    public static SRID MissingRequiredAttribute;
    public static SRID InvalidRuleRefSelf;
    public static SRID InvalidDynamicExport;
    public static SRID InvalidToken;
    public static SRID MetaNameHTTPEquiv;
    public static SRID EmptyRule;
    public static SRID InvalidTokenString;
    public static SRID InvalidQuotedString;
    public static SRID ExportDynamicRule;
    public static SRID EmptyDisplayString;
    public static SRID EmptyPronunciationString;
    public static SRID InvalidPhoneme;
    public static SRID MuliplePronunciationString;
    public static SRID MultipleDisplayString;
    public static SRID RuleRedefinition;
    public static SRID EmptyOneOf;
    public static SRID InvalidGrammarOrdering;
    public static SRID MinMaxOutOfRange;
    public static SRID InvalidExampleOrdering;
    public static SRID GrammarDefTwice;
    public static SRID UnsupportedFormat;
    public static SRID InvalidImport;
    public static SRID DuplicatedRuleName;
    public static SRID RootRuleAlreadyDefined;
    public static SRID RuleNameIdConflict;
    public static SRID RuleNotDynamic;
    public static SRID StateWithNoArcs;
    public static SRID NoTerminatingRulePath;
    public static SRID RuleRefNoUri;
    public static SRID UnavailableProperty;
    public static SRID MinGreaterThanMax;
    public static SRID ReqConfidenceNotSupported;
    public static SRID SapiPropertiesAndSemantics;
    public static SRID InvalidAttributeDefinedTwice;
    public static SRID GrammarCompilerError;
    public static SRID RuleScriptNotFound;
    public static SRID DynamicRuleNotFound;
    public static SRID RuleScriptInvalidParameters;
    public static SRID RuleScriptInvalidReturnType;
    public static SRID NoClassname;
    public static SRID EmbeddedClassLibraryFailed;
    public static SRID CannotFindClass;
    public static SRID StrongTypedGrammarNotAGrammar;
    public static SRID NoScriptsForRules;
    public static SRID ClassNotPublic;
    public static SRID MethodNotPublic;
    public static SRID IncompatibleLanguageProperties;
    public static SRID IncompatibleNamespaceProperties;
    public static SRID IncompatibleDebugProperties;
    public static SRID CannotLoadDotNetSemanticCode;
    public static SRID InvalidSemanticProcessingType;
    public static SRID InvalidScriptDefinition;
    public static SRID InvalidMethodName;
    public static SRID ConstructorNotAllowed;
    public static SRID OverloadNotAllowed;
    public static SRID OnInitOnPublicRule;
    public static SRID ArgumentMismatch;
    public static SRID CantGetPropertyFromSerializedInfo;
    public static SRID CantFindAConstructor;
    public static SRID TooManyArcs;
    public static SRID TooManyRulesWithSemanticsGlobals;
    public static SRID MaxTransitionsCount;
    public static SRID UnknownElement;
    public static SRID CircularRuleRef;
    public static SRID InvalidFlagsSet;
    public static SRID RuleDefinedMultipleTimes;
    public static SRID RuleDefinedMultipleTimes2;
    public static SRID RuleNotDefined;
    public static SRID RootNotDefined;
    public static SRID InvalidLanguage;
    public static SRID InvalidRuleId;
    public static SRID InvalidRepeatProbability;
    public static SRID InvalidConfidence;
    public static SRID InvalidMinRepeat;
    public static SRID InvalidMaxRepeat;
    public static SRID InvalidWeight;
    public static SRID InvalidName;
    public static SRID InvalidValueType;
    public static SRID TagFormatNotSet;
    public static SRID NoName;
    public static SRID NoName1;
    public static SRID InvalidSpecialRuleRef;
    public static SRID InvalidRuleRef;
    public static SRID InvalidNotEmptyElement;
    public static SRID InvalidEmptyElement;
    public static SRID InvalidEmptyRule;
    public static SRID UndefRuleRef;
    public static SRID UnsupportedLanguage;
    public static SRID UnsupportedPhoneticAlphabet;
    public static SRID UnsupportedLexicon;
    public static SRID InvalidScriptAttribute;
    public static SRID NoLanguageSet;
    public static SRID MethodAttributeDefinedMultipleTimes;
    public static SRID RuleAttributeDefinedMultipleTimes;
    public static SRID InvalidAssemblyReferenceAttribute;
    public static SRID InvalidImportNamespaceAttribute;
    public static SRID NoUriForSpecialRuleRef;
    public static SRID NoAliasForSpecialRuleRef;
    public static SRID NoSmlData;
    public static SRID InvalidNameValueProperty;
    public static SRID InvalidTagInAnEmptyItem;
    public static SRID InvalidSrgs;
    public static SRID InvalidSrgsNamespace;
    public static SRID Line;
    public static SRID Position;
    public static SRID InvalidVersion;
    public static SRID InvalidTagFormat;
    public static SRID MissingTagFormat;
    public static SRID InvalidGrammarMode;
    public static SRID InvalidGrammarAttribute;
    public static SRID InvalidRuleAttribute;
    public static SRID InvalidRulerefAttribute;
    public static SRID InvalidOneOfAttribute;
    public static SRID InvalidItemAttribute;
    public static SRID InvalidTokenAttribute;
    public static SRID InvalidItemRepeatAttribute;
    public static SRID InvalidReqConfAttribute;
    public static SRID InvalidTagAttribute;
    public static SRID InvalidLexiconAttribute;
    public static SRID InvalidMetaAttribute;
    public static SRID InvalidItemAttribute2;
    public static SRID InvalidElement;
    public static SRID InvalidRuleScope;
    public static SRID InvalidDynamicSetting;
    public static SRID InvalidSubsetAttribute;
    public static SRID InvalidVoiceElementInPromptOutput;
    public static SRID NoRuleId;
    public static SRID PromptBuilderInvalideState;
    public static SRID PromptBuilderStateEnded;
    public static SRID PromptBuilderStateSentence;
    public static SRID PromptBuilderStateParagraph;
    public static SRID PromptBuilderStateVoice;
    public static SRID PromptBuilderStateStyle;
    public static SRID PromptBuilderAgeOutOfRange;
    public static SRID PromptBuilderMismatchStyle;
    public static SRID PromptBuilderMismatchVoice;
    public static SRID PromptBuilderMismatchParagraph;
    public static SRID PromptBuilderMismatchSentence;
    public static SRID PromptBuilderNestedParagraph;
    public static SRID PromptBuilderNestedSentence;
    public static SRID PromptBuilderInvalidAttribute;
    public static SRID PromptBuilderInvalidElement;
    public static SRID PromptBuilderInvalidVariant;
    public static SRID PromptBuilderDatabaseName;
    public static SRID PromptAsyncOperationCancelled;
    public static SRID SynthesizerPauseResumeMismatched;
    public static SRID SynthesizerInvalidMediaType;
    public static SRID SynthesizerUnknownMediaType;
    public static SRID SynthesizerSpeakError;
    public static SRID SynthesizerInvalidWaveFile;
    public static SRID SynthesizerPromptInUse;
    public static SRID SynthesizerUnknownPriority;
    public static SRID SynthesizerUnknownEvent;
    public static SRID SynthesizerVoiceFailed;
    public static SRID SynthesizerSetVoiceNoMatch;
    public static SRID SynthesizerNoCulture;
    public static SRID SynthesizerSyncSpeakWhilePaused;
    public static SRID SynthesizerSyncSetOutputWhilePaused;
    public static SRID SynthesizerNoCulture2;
    public static SRID SynthesizerNoSpeak;
    public static SRID SynthesizerSetOutputSpeaking;
    public static SRID InvalidSpeakAttribute;
    public static SRID UnsupportedAlphabet;
    public static SRID GrammarInvalidWeight;
    public static SRID GrammarInvalidPriority;
    public static SRID DictationInvalidTopic;
    public static SRID DictationTopicNotFound;
    public static SRID RecognizerGrammarNotFound;
    public static SRID RecognizerRuleNotFound;
    public static SRID RecognizerInvalidBinaryGrammar;
    public static SRID RecognizerRuleNotFoundStream;
    public static SRID RecognizerNoRootRuleToActivate;
    public static SRID RecognizerNoRootRuleToActivate1;
    public static SRID RecognizerRuleActivationFailed;
    public static SRID RecognizerAlreadyRecognizing;
    public static SRID RecognizerHasNoGrammar;
    public static SRID NegativeTimesNotSupported;
    public static SRID AudioDeviceFormatError;
    public static SRID AudioDeviceError;
    public static SRID AudioDeviceInternalError;
    public static SRID RecognizerNotFound;
    public static SRID RecognizerNotEnabled;
    public static SRID RecognitionNotSupported;
    public static SRID RecognitionNotSupportedOn64bit;
    public static SRID GrammarAlreadyLoaded;
    public static SRID RecognizerNoInputSource;
    public static SRID GrammarNotLoaded;
    public static SRID GrammarLoadingInProgress;
    public static SRID GrammarLoadFailed;
    public static SRID GrammarWrongRecognizer;
    public static SRID NotSupportedOnDictationGrammars;
    public static SRID LocalFilesOnly;
    public static SRID NotValidAudioFile;
    public static SRID NotValidAudioStream;
    public static SRID FileNotFound;
    public static SRID CannotSetPriorityOnDictation;
    public static SRID RecognizerUpdateTableTooLarge;
    public static SRID MaxAlternatesInvalid;
    public static SRID RecognizerSettingGetError;
    public static SRID RecognizerSettingUpdateError;
    public static SRID RecognizerSettingNotSupported;
    public static SRID ResourceUsageOutOfRange;
    public static SRID RateOutOfRange;
    public static SRID EndSilenceOutOfRange;
    public static SRID RejectionThresholdOutOfRange;
    public static SRID ReferencedGrammarNotFound;
    public static SRID SapiErrorRuleNotFound2;
    public static SRID NoAudioAvailable;
    public static SRID ResultNotGrammarAvailable;
    public static SRID ResultInvalidFormat;
    public static SRID UnhandledVariant;
    public static SRID DupSemanticKey;
    public static SRID DupSemanticValue;
    public static SRID CannotUseCustomFormat;
    public static SRID NoPromptEngine;
    public static SRID NoPromptEngineInterface;
    public static SRID SeekNotSupported;
    public static SRID ExtraDataNotPresent;
    public static SRID BitsPerSampleInvalid;
    public static SRID DataBlockSizeInvalid;
    public static SRID NotWholeNumberBlocks;
    public static SRID BlockSignatureInvalid;
    public static SRID NumberOfSamplesInvalid;
    public static SRID SapiErrorUninitialized;
    public static SRID SapiErrorAlreadyInitialized;
    public static SRID SapiErrorNotSupportedFormat;
    public static SRID SapiErrorInvalidFlags;
    public static SRID SapiErrorEndOfStream;
    public static SRID SapiErrorDeviceBusy;
    public static SRID SapiErrorDeviceNotSupported;
    public static SRID SapiErrorDeviceNotEnabled;
    public static SRID SapiErrorNoDriver;
    public static SRID SapiErrorFileMustBeUnicode;
    public static SRID InsufficientData;
    public static SRID SapiErrorInvalidPhraseID;
    public static SRID SapiErrorBufferTooSmall;
    public static SRID SapiErrorFormatNotSpecified;
    public static SRID SapiErrorAudioStopped0;
    public static SRID AudioPaused;
    public static SRID SapiErrorRuleNotFound;
    public static SRID SapiErrorTTSEngineException;
    public static SRID SapiErrorTTSNLPException;
    public static SRID SapiErrorEngineBUSY;
    public static SRID AudioConversionEnabled;
    public static SRID NoHypothesisAvailable;
    public static SRID SapiErrorCantCreate;
    public static SRID AlreadyInLex;
    public static SRID SapiErrorNotInLex;
    public static SRID LexNothingToSync;
    public static SRID SapiErrorLexVeryOutOfSync;
    public static SRID SapiErrorUndefinedForwardRuleRef;
    public static SRID SapiErrorEmptyRule;
    public static SRID SapiErrorGrammarCompilerInternalError;
    public static SRID SapiErrorRuleNotDynamic;
    public static SRID SapiErrorDuplicateRuleName;
    public static SRID SapiErrorDuplicateResourceName;
    public static SRID SapiErrorTooManyGrammars;
    public static SRID SapiErrorCircularReference;
    public static SRID SapiErrorInvalidImport;
    public static SRID SapiErrorInvalidWAVFile;
    public static SRID RequestPending;
    public static SRID SapiErrorAllWordsOptional;
    public static SRID SapiErrorInstanceChangeInvalid;
    public static SRID SapiErrorRuleNameIdConflict;
    public static SRID SapiErrorNoRules;
    public static SRID SapiErrorCircularRuleRef;
    public static SRID NoParseFound;
    public static SRID SapiErrorInvalidHandle;
    public static SRID SapiErrorRemoteCallTimedout;
    public static SRID SapiErrorAudioBufferOverflow;
    public static SRID SapiErrorNoAudioData;
    public static SRID SapiErrorDeadAlternate;
    public static SRID SapiErrorHighLowConfidence;
    public static SRID SapiErrorInvalidFormatString;
    public static SRID SPNotSupportedOnStreamInput;
    public static SRID SapiErrorAppLexReadOnly;
    public static SRID SapiErrorNoTerminatingRulePath;
    public static SRID WordExistsWithoutPronunciation;
    public static SRID SapiErrorStreamClosed;
    public static SRID SapiErrorNoMoreItems;
    public static SRID SapiErrorNotFound;
    public static SRID SapiErrorInvalidAudioState;
    public static SRID SapiErrorGenericMMSYS;
    public static SRID SapiErrorMarshalerException;
    public static SRID SapiErrorNotDynamicGrammar;
    public static SRID SapiErrorAmbiguousProperty;
    public static SRID SapiErrorInvalidRegistrykey;
    public static SRID SapiErrorInvalidTokenId;
    public static SRID SapiErrorXMLBadSyntax;
    public static SRID SapiErrorXMLResourceNotFound;
    public static SRID SapiErrorTokenInUse;
    public static SRID SapiErrorTokenDeleted;
    public static SRID SapiErrorMultilingualNotSupported;
    public static SRID SapiErrorExportDynamicRule;
    public static SRID SapiErrorSTGF;
    public static SRID SapiErrorWordFormat;
    public static SRID SapiErrorStreamNotActive;
    public static SRID SapiErrorEngineResponseInvalid;
    public static SRID SapiErrorSREngineException;
    public static SRID SapiErrorStreamPosInvalid;
    public static SRID SapiErrorRecognizerInactive;
    public static SRID SapiErrorRemoteCallOnWrongThread;
    public static SRID SapiErrorRemoteProcessTerminated;
    public static SRID SapiErrorRemoteProcessAlreadyRunning;
    public static SRID SapiErrorLangIdMismatch;
    public static SRID SapiErrorPartialParseFound;
    public static SRID SapiErrorNotTopLevelRule;
    public static SRID SapiErrorNoRuleActive;
    public static SRID SapiErrorLexRequiresCookie;
    public static SRID SapiErrorStreamUninitialized;
    public static SRID SapiErrorUnused0;
    public static SRID SapiErrorNotSupportedLang;
    public static SRID SapiErrorVoicePaused;
    public static SRID SapiErrorAudioBufferUnderflow;
    public static SRID SapiErrorAudioStoppedUnexpectedly;
    public static SRID SapiErrorNoWordPronunciation;
    public static SRID SapiErrorAlternatesWouldBeInconsistent;
    public static SRID SapiErrorNotSupportedForSharedRecognizer;
    public static SRID SapiErrorTimeOut;
    public static SRID SapiErrorReenterSynchronize;
    public static SRID SapiErrorStateWithNoArcs;
    public static SRID SapiErrorNotActiveSession;
    public static SRID SapiErrorAlreadyDeleted;
    public static SRID SapiErrorAudioStopped;
    public static SRID SapiErrorRecoXMLGenerationFail;
    public static SRID SapiErrorSMLGenerationFail;
    public static SRID SapiErrorNotPromptVoice;
    public static SRID SapiErrorRootRuleAlreadyDefined;
    public static SRID SapiErrorUnused1;
    public static SRID SapiErrorUnused2;
    public static SRID SapiErrorUnused3;
    public static SRID SapiErrorUnused4;
    public static SRID SapiErrorUnused5;
    public static SRID SapiErrorUnused6;
    public static SRID SapiErrorScriptDisallowed;
    public static SRID SapiErrorRemoteCallTimedOutStart;
    public static SRID SapiErrorRemoteCallTimedOutConnect;
    public static SRID SapiErrorSecMgrChangeNotAllowed;
    public static SRID SapiErrorCompleteButExtendable;
    public static SRID SapiErrorFailedToDeleteFile;
    public static SRID SapiErrorSharedEngineDisabled;
    public static SRID SapiErrorRecognizerNotFound;
    public static SRID SapiErrorAudioNotFound;
    public static SRID SapiErrorNoVowel;
    public static SRID SapiErrorNotSupportedPhoneme;
    public static SRID SapiErrorNoRulesToActivate;
    public static SRID SapiErrorNoWordEntryNotification;
    public static SRID SapiErrorWordNeedsNormalization;
    public static SRID SapiErrorCannotNormalize;
    public static SRID LimitReached;
    public static SRID NotSupported;
    public static SRID SapiErrorTopicNotAdaptable;
    public static SRID SapiErrorPhonemeConversion;
    public static SRID SapiErrorNotSupportedForInprocRecognizer;
    public static SRID SapiErrorOverload;
    public static SRID SapiLexInvalidData;
    public static SRID SapiConfigInvalidData;
    public static SRID SapiLexUnexpectedFormat;
    public static SRID SapiStringTooLong;
    public static SRID SapiStringEmpty;
    public static SRID SapiErrorUnused7;
    public static SRID SapiErrorUnused8;
    public static SRID SapiErrorUnused9;
    public static SRID SapiErrorUnused10;
    public static SRID SapiErrorUnused11;
    public static SRID SapiErrorUnused12;
    public static SRID SapiNonWordTransition;
    public static SRID SapiSisrAttributesNotAllowed;
    public static SRID SapiSisrMixedNotAllowed;
    public static SRID SapiVoiceNotFound;
}
public class System.Speech.Synthesis.BookmarkReachedEventArgs : PromptEventArgs {
    private string _bookmark;
    private TimeSpan _audioPosition;
    public string Bookmark { get; }
    public TimeSpan AudioPosition { get; }
    internal BookmarkReachedEventArgs(Prompt prompt, string bookmark, TimeSpan audioPosition);
    public string get_Bookmark();
    public TimeSpan get_AudioPosition();
}
[DebuggerDisplayAttribute("{_text}")]
public class System.Speech.Synthesis.FilePrompt : Prompt {
    public FilePrompt(string path, SynthesisMediaType media);
    public FilePrompt(Uri promptFile, SynthesisMediaType media);
}
[DebuggerDisplayAttribute("{VoiceInfo.Name} = [{Enabled ? "Enabled" : "Disabled"}]")]
public class System.Speech.Synthesis.InstalledVoice : object {
    private VoiceInfo _voice;
    private bool _enabled;
    private VoiceSynthesis _voiceSynthesizer;
    public VoiceInfo VoiceInfo { get; }
    public bool Enabled { get; public set; }
    internal InstalledVoice(VoiceSynthesis voiceSynthesizer, VoiceInfo voice);
    public VoiceInfo get_VoiceInfo();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static InstalledVoice Find(List`1<InstalledVoice> list, VoiceInfo voiceId);
    internal static InstalledVoice FirstEnabled(List`1<InstalledVoice> list, CultureInfo culture);
    internal void SetEnabledFlag(bool value, bool switchContext);
}
public class System.Speech.Synthesis.PhonemeReachedEventArgs : PromptEventArgs {
    private string _currentPhoneme;
    private TimeSpan _audioPosition;
    private TimeSpan _duration;
    private SynthesizerEmphasis _emphasis;
    private string _nextPhoneme;
    public string Phoneme { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public string NextPhoneme { get; }
    internal PhonemeReachedEventArgs(Prompt prompt, string currentPhoneme, TimeSpan audioPosition, TimeSpan duration, SynthesizerEmphasis emphasis, string nextPhoneme);
    public string get_Phoneme();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public string get_NextPhoneme();
}
[DebuggerDisplayAttribute("{_text}")]
public class System.Speech.Synthesis.Prompt : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    internal string _text;
    internal Uri _audio;
    internal SynthesisMediaType _media;
    internal bool _syncSpeak;
    private bool _completed;
    private object _synthesizer;
    private static ResourceLoader s_resourceLoader;
    public bool IsCompleted { get; internal set; }
    unknown object Synthesizer {internal set; }
    internal Exception Exception { get; internal set; }
    public Prompt(string textToSpeak);
    public Prompt(PromptBuilder promptBuilder);
    public Prompt(string textToSpeak, SynthesisTextFormat media);
    internal Prompt(Uri promptFile, SynthesisMediaType media);
    private static Prompt();
    public bool get_IsCompleted();
    internal void set_IsCompleted(bool value);
    internal void set_Synthesizer(object value);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
public enum System.Speech.Synthesis.PromptBreak : Enum {
    public int value__;
    public static PromptBreak None;
    public static PromptBreak ExtraSmall;
    public static PromptBreak Small;
    public static PromptBreak Medium;
    public static PromptBreak Large;
    public static PromptBreak ExtraLarge;
}
public class System.Speech.Synthesis.PromptBuilder : object {
    private Stack`1<StackElement> _elementStack;
    private CultureInfo _culture;
    private List`1<Element> _elements;
    private static ResourceLoader s_resourceLoader;
    private static string _xmlnsDefault;
    private static String[] s_promptBuilderElementName;
    public bool IsEmpty { get; }
    public CultureInfo Culture { get; public set; }
    public PromptBuilder(CultureInfo culture);
    private static PromptBuilder();
    public void ClearContent();
    public void AppendText(string textToSpeak);
    public void AppendText(string textToSpeak, PromptRate rate);
    public void AppendText(string textToSpeak, PromptVolume volume);
    public void AppendText(string textToSpeak, PromptEmphasis emphasis);
    public void StartStyle(PromptStyle style);
    public void EndStyle();
    public void StartVoice(VoiceInfo voice);
    public void StartVoice(string name);
    public void StartVoice(VoiceGender gender);
    public void StartVoice(VoiceGender gender, VoiceAge age);
    public void StartVoice(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void StartVoice(CultureInfo culture);
    public void EndVoice();
    public void StartParagraph();
    public void StartParagraph(CultureInfo culture);
    public void EndParagraph();
    public void StartSentence();
    public void StartSentence(CultureInfo culture);
    public void EndSentence();
    public void AppendTextWithHint(string textToSpeak, SayAs sayAs);
    public void AppendTextWithHint(string textToSpeak, string sayAs);
    public void AppendTextWithPronunciation(string textToSpeak, string pronunciation);
    public void AppendTextWithAlias(string textToSpeak, string substitute);
    public void AppendBreak();
    public void AppendBreak(PromptBreak strength);
    public void AppendBreak(TimeSpan duration);
    public void AppendAudio(string path);
    public void AppendAudio(Uri audioFile);
    public void AppendAudio(Uri audioFile, string alternateText);
    public void AppendBookmark(string bookmarkName);
    public void AppendPromptBuilder(PromptBuilder promptBuilder);
    public void AppendSsml(string path);
    public void AppendSsml(Uri ssmlFile);
    public void AppendSsml(XmlReader ssmlFile);
    [EditorBrowsableAttribute("1")]
public void AppendSsmlMarkup(string ssmlMarkup);
    public string ToXml();
    public bool get_IsEmpty();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    private void WriteXml(XmlTextWriter writer);
    private static void ValidateElement(StackElement stackElement, SsmlElement currentElement);
    private void AppendSsmlInternal(XmlReader ssmlFile);
}
public enum System.Speech.Synthesis.PromptEmphasis : Enum {
    public int value__;
    public static PromptEmphasis NotSet;
    public static PromptEmphasis Strong;
    public static PromptEmphasis Moderate;
    public static PromptEmphasis None;
    public static PromptEmphasis Reduced;
}
public abstract class System.Speech.Synthesis.PromptEventArgs : AsyncCompletedEventArgs {
    private Prompt _prompt;
    public Prompt Prompt { get; }
    internal PromptEventArgs(Prompt prompt);
    public Prompt get_Prompt();
}
public enum System.Speech.Synthesis.PromptRate : Enum {
    public int value__;
    public static PromptRate NotSet;
    public static PromptRate ExtraFast;
    public static PromptRate Fast;
    public static PromptRate Medium;
    public static PromptRate Slow;
    public static PromptRate ExtraSlow;
}
public class System.Speech.Synthesis.PromptStyle : object {
    private PromptRate _rate;
    private PromptVolume _volume;
    private PromptEmphasis _emphasis;
    public PromptRate Rate { get; public set; }
    public PromptVolume Volume { get; public set; }
    public PromptEmphasis Emphasis { get; public set; }
    public PromptStyle(PromptRate rate);
    public PromptStyle(PromptVolume volume);
    public PromptStyle(PromptEmphasis emphasis);
    public PromptRate get_Rate();
    public void set_Rate(PromptRate value);
    public PromptVolume get_Volume();
    public void set_Volume(PromptVolume value);
    public PromptEmphasis get_Emphasis();
    public void set_Emphasis(PromptEmphasis value);
}
public enum System.Speech.Synthesis.PromptVolume : Enum {
    public int value__;
    public static PromptVolume NotSet;
    public static PromptVolume Silent;
    public static PromptVolume ExtraSoft;
    public static PromptVolume Soft;
    public static PromptVolume Medium;
    public static PromptVolume Loud;
    public static PromptVolume ExtraLoud;
    public static PromptVolume Default;
}
public enum System.Speech.Synthesis.SayAs : Enum {
    public int value__;
    public static SayAs SpellOut;
    public static SayAs NumberOrdinal;
    public static SayAs NumberCardinal;
    public static SayAs Date;
    public static SayAs DayMonthYear;
    public static SayAs MonthDayYear;
    public static SayAs YearMonthDay;
    public static SayAs YearMonth;
    public static SayAs MonthYear;
    public static SayAs MonthDay;
    public static SayAs DayMonth;
    public static SayAs Year;
    public static SayAs Month;
    public static SayAs Day;
    public static SayAs Time;
    public static SayAs Time24;
    public static SayAs Time12;
    public static SayAs Telephone;
    public static SayAs Text;
}
public class System.Speech.Synthesis.SpeakCompletedEventArgs : PromptEventArgs {
    internal SpeakCompletedEventArgs(Prompt prompt);
}
public class System.Speech.Synthesis.SpeakProgressEventArgs : PromptEventArgs {
    private TimeSpan _audioPosition;
    private int _iWordPos;
    private int _cWordLen;
    private string _word;
    public TimeSpan AudioPosition { get; }
    public int CharacterPosition { get; }
    public int CharacterCount { get; internal set; }
    public string Text { get; internal set; }
    internal SpeakProgressEventArgs(Prompt prompt, TimeSpan audioPosition, int iWordPos, int cWordLen);
    public TimeSpan get_AudioPosition();
    public int get_CharacterPosition();
    public int get_CharacterCount();
    internal void set_CharacterCount(int value);
    public string get_Text();
    internal void set_Text(string value);
}
public class System.Speech.Synthesis.SpeakStartedEventArgs : PromptEventArgs {
    internal SpeakStartedEventArgs(Prompt prompt);
}
public class System.Speech.Synthesis.SpeechSynthesizer : object {
    private VoiceSynthesis _voiceSynthesis;
    private bool _isDisposed;
    private bool _paused;
    private Stream _outputStream;
    private bool _closeStreamOnExit;
    public SynthesizerState State { get; }
    public int Rate { get; public set; }
    public int Volume { get; public set; }
    public VoiceInfo Voice { get; }
    private VoiceSynthesis VoiceSynthesizer { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void SelectVoice(string name);
    public void SelectVoiceByHints(VoiceGender gender);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate, CultureInfo culture);
    public Prompt SpeakAsync(string textToSpeak);
    public void SpeakAsync(Prompt prompt);
    public Prompt SpeakSsmlAsync(string textToSpeak);
    public Prompt SpeakAsync(PromptBuilder promptBuilder);
    public void Speak(string textToSpeak);
    public void Speak(Prompt prompt);
    public void Speak(PromptBuilder promptBuilder);
    public void SpeakSsml(string textToSpeak);
    public void Pause();
    public void Resume();
    public void SpeakAsyncCancel(Prompt prompt);
    public void SpeakAsyncCancelAll();
    public void SetOutputToWaveFile(string path);
    public void SetOutputToWaveFile(string path, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToWaveStream(Stream audioDestination);
    public void SetOutputToAudioStream(Stream audioDestination, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToDefaultAudioDevice();
    public void SetOutputToNull();
    public Prompt GetCurrentlySpokenPrompt();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices(CultureInfo culture);
    public void AddLexicon(Uri uri, string mediaType);
    public void RemoveLexicon(Uri uri);
    public void add_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void remove_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void add_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void remove_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void add_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void remove_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void add_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void remove_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void add_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void remove_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void add_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void remove_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void add_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void remove_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public SynthesizerState get_State();
    public int get_Rate();
    public void set_Rate(int value);
    public int get_Volume();
    public void set_Volume(int value);
    public VoiceInfo get_Voice();
    private void SetOutputStream(Stream stream, SpeechAudioFormatInfo formatInfo, bool headerInfo, bool closeStreamOnExit);
    private void Dispose(bool disposing);
    private VoiceSynthesis get_VoiceSynthesizer();
}
public class System.Speech.Synthesis.StateChangedEventArgs : EventArgs {
    private SynthesizerState _state;
    private SynthesizerState _previousState;
    public SynthesizerState State { get; }
    public SynthesizerState PreviousState { get; }
    internal StateChangedEventArgs(SynthesizerState state, SynthesizerState previousState);
    public SynthesizerState get_State();
    public SynthesizerState get_PreviousState();
}
public enum System.Speech.Synthesis.SynthesisMediaType : Enum {
    public int value__;
    public static SynthesisMediaType Text;
    public static SynthesisMediaType Ssml;
    public static SynthesisMediaType WaveAudio;
}
public enum System.Speech.Synthesis.SynthesisTextFormat : Enum {
    public int value__;
    public static SynthesisTextFormat Text;
    public static SynthesisTextFormat Ssml;
}
[FlagsAttribute]
public enum System.Speech.Synthesis.SynthesizerEmphasis : Enum {
    public int value__;
    public static SynthesizerEmphasis Stressed;
    public static SynthesizerEmphasis Emphasized;
}
public enum System.Speech.Synthesis.SynthesizerState : Enum {
    public int value__;
    public static SynthesizerState Ready;
    public static SynthesizerState Speaking;
    public static SynthesizerState Paused;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ContourPoint : ValueType {
    private float _start;
    private float _change;
    private ContourPointChangeType _changeType;
    public float Start { get; }
    public float Change { get; }
    public ContourPointChangeType ChangeType { get; }
    public ContourPoint(float start, float change, ContourPointChangeType changeType);
    public float get_Start();
    public float get_Change();
    public ContourPointChangeType get_ChangeType();
    public static bool op_Equality(ContourPoint point1, ContourPoint point2);
    public static bool op_Inequality(ContourPoint point1, ContourPoint point2);
    public sealed virtual bool Equals(ContourPoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Speech.Synthesis.TtsEngine.ContourPointChangeType : Enum {
    public int value__;
    public static ContourPointChangeType Hz;
    public static ContourPointChangeType Percentage;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisBreak : Enum {
    public int value__;
    public static EmphasisBreak None;
    public static EmphasisBreak ExtraWeak;
    public static EmphasisBreak Weak;
    public static EmphasisBreak Medium;
    public static EmphasisBreak Strong;
    public static EmphasisBreak ExtraStrong;
    public static EmphasisBreak Default;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisWord : Enum {
    public int value__;
    public static EmphasisWord Default;
    public static EmphasisWord Strong;
    public static EmphasisWord Moderate;
    public static EmphasisWord None;
    public static EmphasisWord Reduced;
}
public enum System.Speech.Synthesis.TtsEngine.EventParameterType : Enum {
    public int value__;
    public static EventParameterType Undefined;
    public static EventParameterType Token;
    public static EventParameterType Object;
    public static EventParameterType Pointer;
    public static EventParameterType String;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.FragmentState : ValueType {
    private TtsEngineAction _action;
    private int _langId;
    private int _emphasis;
    private int _duration;
    private SayAs _sayAs;
    private Prosody _prosody;
    private Char[] _phoneme;
    public TtsEngineAction Action { get; internal set; }
    public int LangId { get; internal set; }
    public int Emphasis { get; internal set; }
    public int Duration { get; internal set; }
    public SayAs SayAs { get; internal set; }
    public Prosody Prosody { get; internal set; }
    public Char[] Phoneme { get; internal set; }
    public FragmentState(TtsEngineAction action, int langId, int emphasis, int duration, SayAs sayAs, Prosody prosody, Char[] phonemes);
    public TtsEngineAction get_Action();
    internal void set_Action(TtsEngineAction value);
    public int get_LangId();
    internal void set_LangId(int value);
    public int get_Emphasis();
    internal void set_Emphasis(int value);
    public int get_Duration();
    internal void set_Duration(int value);
    public SayAs get_SayAs();
    internal void set_SayAs(SayAs value);
    public Prosody get_Prosody();
    internal void set_Prosody(Prosody value);
    public Char[] get_Phoneme();
    internal void set_Phoneme(Char[] value);
    public static bool op_Equality(FragmentState state1, FragmentState state2);
    public static bool op_Inequality(FragmentState state1, FragmentState state2);
    public sealed virtual bool Equals(FragmentState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[GuidAttribute("A74D7C8E-4CC5-4F2F-A6EB-804DEE18500E")]
[InterfaceTypeAttribute("1")]
internal interface System.Speech.Synthesis.TtsEngine.ITtsEngine {
    public abstract virtual void Speak(SPEAKFLAGS dwSpeakFlags, Guid& rguidFormatId, IntPtr pWaveFormatEx, IntPtr pTextFragList, IntPtr pOutputSite);
    public abstract virtual void GetOutputFormat(Guid& pTargetFmtId, IntPtr pTargetWaveFormatEx, Guid& pOutputFormatId, IntPtr& ppCoMemOutputWaveFormatEx);
}
public interface System.Speech.Synthesis.TtsEngine.ITtsEngineSite {
    public int EventInterest { get; }
    public int Actions { get; }
    public int Rate { get; }
    public int Volume { get; }
    public abstract virtual void AddEvents(SpeechEventInfo[] events, int count);
    public abstract virtual int Write(IntPtr data, int count);
    public abstract virtual SkipInfo GetSkipInfo();
    public abstract virtual void CompleteSkip(int skipped);
    public abstract virtual Stream LoadResource(Uri uri, string mediaType);
    public abstract virtual int get_EventInterest();
    public abstract virtual int get_Actions();
    public abstract virtual int get_Rate();
    public abstract virtual int get_Volume();
}
public class System.Speech.Synthesis.TtsEngine.Prosody : object {
    internal ProsodyNumber _pitch;
    internal ProsodyNumber _range;
    internal ProsodyNumber _rate;
    internal int _duration;
    internal ProsodyNumber _volume;
    internal ContourPoint[] _contourPoints;
    public ProsodyNumber Pitch { get; public set; }
    public ProsodyNumber Range { get; public set; }
    public ProsodyNumber Rate { get; public set; }
    public int Duration { get; public set; }
    public ProsodyNumber Volume { get; public set; }
    public ProsodyNumber get_Pitch();
    public void set_Pitch(ProsodyNumber value);
    public ProsodyNumber get_Range();
    public void set_Range(ProsodyNumber value);
    public ProsodyNumber get_Rate();
    public void set_Rate(ProsodyNumber value);
    public int get_Duration();
    public void set_Duration(int value);
    public ProsodyNumber get_Volume();
    public void set_Volume(ProsodyNumber value);
    public ContourPoint[] GetContourPoints();
    public void SetContourPoints(ContourPoint[] points);
    internal Prosody Clone();
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ProsodyNumber : ValueType {
    public static int AbsoluteNumber;
    private int _ssmlAttributeId;
    private bool _isPercent;
    private float _number;
    private ProsodyUnit _unit;
    public int SsmlAttributeId { get; internal set; }
    public bool IsNumberPercent { get; internal set; }
    public float Number { get; internal set; }
    public ProsodyUnit Unit { get; internal set; }
    public ProsodyNumber(int ssmlAttributeId);
    public ProsodyNumber(float number);
    public int get_SsmlAttributeId();
    internal void set_SsmlAttributeId(int value);
    public bool get_IsNumberPercent();
    internal void set_IsNumberPercent(bool value);
    public float get_Number();
    internal void set_Number(float value);
    public ProsodyUnit get_Unit();
    internal void set_Unit(ProsodyUnit value);
    public static bool op_Equality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
    public static bool op_Inequality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
    public sealed virtual bool Equals(ProsodyNumber other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyPitch : Enum {
    public int value__;
    public static ProsodyPitch Default;
    public static ProsodyPitch ExtraLow;
    public static ProsodyPitch Low;
    public static ProsodyPitch Medium;
    public static ProsodyPitch High;
    public static ProsodyPitch ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRange : Enum {
    public int value__;
    public static ProsodyRange Default;
    public static ProsodyRange ExtraLow;
    public static ProsodyRange Low;
    public static ProsodyRange Medium;
    public static ProsodyRange High;
    public static ProsodyRange ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRate : Enum {
    public int value__;
    public static ProsodyRate Default;
    public static ProsodyRate ExtraSlow;
    public static ProsodyRate Slow;
    public static ProsodyRate Medium;
    public static ProsodyRate Fast;
    public static ProsodyRate ExtraFast;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyUnit : Enum {
    public int value__;
    public static ProsodyUnit Default;
    public static ProsodyUnit Hz;
    public static ProsodyUnit Semitone;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyVolume : Enum {
    public int value__;
    public static ProsodyVolume Default;
    public static ProsodyVolume Silent;
    public static ProsodyVolume ExtraSoft;
    public static ProsodyVolume Soft;
    public static ProsodyVolume Medium;
    public static ProsodyVolume Loud;
    public static ProsodyVolume ExtraLoud;
}
internal static class System.Speech.Synthesis.TtsEngine.SAPIGuids : object {
    internal static Guid SPDFID_WaveFormatEx;
    private static SAPIGuids();
}
public class System.Speech.Synthesis.TtsEngine.SayAs : object {
    private string _interpretAs;
    private string _format;
    private string _detail;
    public string InterpretAs { get; public set; }
    public string Format { get; public set; }
    public string Detail { get; public set; }
    public string get_InterpretAs();
    public void set_InterpretAs(string value);
    public string get_Format();
    public void set_Format(string value);
    public string get_Detail();
    public void set_Detail(string value);
}
public class System.Speech.Synthesis.TtsEngine.SkipInfo : object {
    private int _type;
    private int _count;
    public int Type { get; public set; }
    public int Count { get; public set; }
    internal SkipInfo(int type, int count);
    public int get_Type();
    public void set_Type(int value);
    public int get_Count();
    public void set_Count(int value);
}
[FlagsAttribute]
internal enum System.Speech.Synthesis.TtsEngine.SPEAKFLAGS : Enum {
    public int value__;
    public static SPEAKFLAGS SPF_DEFAULT;
    public static SPEAKFLAGS SPF_ASYNC;
    public static SPEAKFLAGS SPF_PURGEBEFORESPEAK;
    public static SPEAKFLAGS SPF_IS_FILENAME;
    public static SPEAKFLAGS SPF_IS_XML;
    public static SPEAKFLAGS SPF_IS_NOT_XML;
    public static SPEAKFLAGS SPF_PERSIST_XML;
    public static SPEAKFLAGS SPF_NLP_SPEAK_PUNC;
    public static SPEAKFLAGS SPF_PARSE_SAPI;
    public static SPEAKFLAGS SPF_PARSE_SSML;
}
public enum System.Speech.Synthesis.TtsEngine.SpeakOutputFormat : Enum {
    public int value__;
    public static SpeakOutputFormat WaveFormat;
    public static SpeakOutputFormat Text;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.SpeechEventInfo : ValueType {
    private short _eventId;
    private short _parameterType;
    private int _param1;
    private IntPtr _param2;
    public short EventId { get; internal set; }
    public short ParameterType { get; internal set; }
    public int Param1 { get; internal set; }
    public IntPtr Param2 { get; internal set; }
    public SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);
    public short get_EventId();
    internal void set_EventId(short value);
    public short get_ParameterType();
    internal void set_ParameterType(short value);
    public int get_Param1();
    internal void set_Param1(int value);
    public IntPtr get_Param2();
    internal void set_Param2(IntPtr value);
    public static bool op_Equality(SpeechEventInfo event1, SpeechEventInfo event2);
    public static bool op_Inequality(SpeechEventInfo event1, SpeechEventInfo event2);
    public sealed virtual bool Equals(SpeechEventInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[TypeLibTypeAttribute("16")]
internal enum System.Speech.Synthesis.TtsEngine.SPPARTOFSPEECH : Enum {
    public int value__;
    public static SPPARTOFSPEECH SPPS_NotOverridden;
    public static SPPARTOFSPEECH SPPS_Unknown;
    public static SPPARTOFSPEECH SPPS_Noun;
    public static SPPARTOFSPEECH SPPS_Verb;
    public static SPPARTOFSPEECH SPPS_Modifier;
    public static SPPARTOFSPEECH SPPS_Function;
    public static SPPARTOFSPEECH SPPS_Interjection;
    public static SPPARTOFSPEECH SPPS_SuppressWord;
}
[TypeLibTypeAttribute("16")]
internal enum System.Speech.Synthesis.TtsEngine.SPVACTIONS : Enum {
    public int value__;
    public static SPVACTIONS SPVA_Speak;
    public static SPVACTIONS SPVA_Silence;
    public static SPVACTIONS SPVA_Pronounce;
    public static SPVACTIONS SPVA_Bookmark;
    public static SPVACTIONS SPVA_SpellOut;
    public static SPVACTIONS SPVA_Section;
    public static SPVACTIONS SPVA_ParseUnknownTag;
}
[TypeLibTypeAttribute("16")]
internal class System.Speech.Synthesis.TtsEngine.SPVCONTEXT : ValueType {
    public IntPtr pCategory;
    public IntPtr pBefore;
    public IntPtr pAfter;
}
[FlagsAttribute]
internal enum System.Speech.Synthesis.TtsEngine.SPVESACTIONS : Enum {
    public int value__;
    public static SPVESACTIONS SPVES_CONTINUE;
    public static SPVESACTIONS SPVES_ABORT;
    public static SPVESACTIONS SPVES_SKIP;
    public static SPVESACTIONS SPVES_RATE;
    public static SPVESACTIONS SPVES_VOLUME;
}
[TypeLibTypeAttribute("16")]
internal class System.Speech.Synthesis.TtsEngine.SPVPITCH : ValueType {
    public int MiddleAdj;
    public int RangeAdj;
}
[ComConversionLossAttribute]
[TypeLibTypeAttribute("16")]
internal class System.Speech.Synthesis.TtsEngine.SPVSTATE : ValueType {
    public SPVACTIONS eAction;
    public short LangID;
    public short wReserved;
    public int EmphAdj;
    public int RateAdj;
    public int Volume;
    public SPVPITCH PitchAdj;
    public int SilenceMSecs;
    public IntPtr pPhoneIds;
    public SPPARTOFSPEECH ePartOfSpeech;
    public SPVCONTEXT Context;
}
internal class System.Speech.Synthesis.TtsEngine.SPVTEXTFRAG : object {
    public IntPtr pNext;
    public SPVSTATE State;
    public IntPtr pTextStart;
    public int ulTextLen;
    public int ulTextSrcOffset;
    public GCHandle gcText;
    public GCHandle gcNext;
    public GCHandle gcPhoneme;
    public GCHandle gcSayAsCategory;
}
[DebuggerDisplayAttribute("{State.Action} = {TextToSpeak!=null?TextToSpeak:""}")]
public class System.Speech.Synthesis.TtsEngine.TextFragment : object {
    private FragmentState _state;
    private string _textToSpeak;
    private int _textOffset;
    private int _textLength;
    public FragmentState State { get; public set; }
    public string TextToSpeak { get; public set; }
    public int TextOffset { get; public set; }
    public int TextLength { get; public set; }
    internal TextFragment(FragmentState fragState);
    internal TextFragment(FragmentState fragState, string textToSpeak);
    internal TextFragment(FragmentState fragState, string textToSpeak, string textFrag, int offset, int length);
    public FragmentState get_State();
    public void set_State(FragmentState value);
    public string get_TextToSpeak();
    public void set_TextToSpeak(string value);
    public int get_TextOffset();
    public void set_TextOffset(int value);
    public int get_TextLength();
    public void set_TextLength(int value);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEngineAction : Enum {
    public int value__;
    public static TtsEngineAction Speak;
    public static TtsEngineAction Silence;
    public static TtsEngineAction Pronounce;
    public static TtsEngineAction Bookmark;
    public static TtsEngineAction SpellOut;
    public static TtsEngineAction StartSentence;
    public static TtsEngineAction StartParagraph;
    public static TtsEngineAction ParseUnknownTag;
}
public abstract class System.Speech.Synthesis.TtsEngine.TtsEngineSsml : object {
    protected TtsEngineSsml(string registryKey);
    public abstract virtual IntPtr GetOutputFormat(SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    public abstract virtual void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site);
    public abstract virtual void RemoveLexicon(Uri uri, ITtsEngineSite site);
    public abstract virtual void Speak(TextFragment[] fragment, IntPtr waveHeader, ITtsEngineSite site);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEventId : Enum {
    public int value__;
    public static TtsEventId StartInputStream;
    public static TtsEventId EndInputStream;
    public static TtsEventId VoiceChange;
    public static TtsEventId Bookmark;
    public static TtsEventId WordBoundary;
    public static TtsEventId Phoneme;
    public static TtsEventId SentenceBoundary;
    public static TtsEventId Viseme;
    public static TtsEventId AudioLevel;
}
public class System.Speech.Synthesis.VisemeReachedEventArgs : PromptEventArgs {
    private int _currentViseme;
    private TimeSpan _audioPosition;
    private TimeSpan _duration;
    private SynthesizerEmphasis _emphasis;
    private int _nextViseme;
    public int Viseme { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public int NextViseme { get; }
    internal VisemeReachedEventArgs(Prompt speakPrompt, int currentViseme, TimeSpan audioPosition, TimeSpan duration, SynthesizerEmphasis emphasis, int nextViseme);
    public int get_Viseme();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public int get_NextViseme();
}
public enum System.Speech.Synthesis.VoiceAge : Enum {
    public int value__;
    public static VoiceAge NotSet;
    public static VoiceAge Child;
    public static VoiceAge Teen;
    public static VoiceAge Adult;
    public static VoiceAge Senior;
}
public class System.Speech.Synthesis.VoiceChangeEventArgs : PromptEventArgs {
    private VoiceInfo _voice;
    public VoiceInfo Voice { get; }
    internal VoiceChangeEventArgs(Prompt prompt, VoiceInfo voice);
    public VoiceInfo get_Voice();
}
public enum System.Speech.Synthesis.VoiceGender : Enum {
    public int value__;
    public static VoiceGender NotSet;
    public static VoiceGender Male;
    public static VoiceGender Female;
    public static VoiceGender Neutral;
}
[DebuggerDisplayAttribute("{(_name != null ? "'" + _name + "' " : "") +  (_culture != null ? " '" + _culture.ToString () + "' " : "") + (_gender != VoiceGender.NotSet ? " '" + _gender.ToString () + "' " : "") + (_age != VoiceAge.NotSet ? " '" + _age.ToString () + "' " : "") + (_variant > 0 ? " " + _variant.ToString () : "")}")]
public class System.Speech.Synthesis.VoiceInfo : object {
    private string _name;
    private CultureInfo _culture;
    private VoiceGender _gender;
    private VoiceAge _age;
    private int _variant;
    private string _id;
    private string _registryKeyPath;
    private string _assemblyName;
    private string _clsid;
    private string _description;
    private ReadOnlyDictionary`2<string, string> _attributes;
    private ReadOnlyCollection`1<SpeechAudioFormatInfo> _audioFormats;
    public VoiceGender Gender { get; }
    public VoiceAge Age { get; }
    public string Name { get; }
    public CultureInfo Culture { get; }
    public string Id { get; }
    public string Description { get; }
    [EditorBrowsableAttribute("2")]
public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    [EditorBrowsableAttribute("2")]
public IDictionary`2<string, string> AdditionalInfo { get; }
    internal int Variant { get; }
    internal string AssemblyName { get; }
    internal string Clsid { get; }
    internal string RegistryKeyPath { get; }
    internal VoiceInfo(string name);
    internal VoiceInfo(CultureInfo culture);
    internal VoiceInfo(ObjectToken token);
    internal VoiceInfo(VoiceGender gender);
    internal VoiceInfo(VoiceGender gender, VoiceAge age);
    internal VoiceInfo(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public VoiceGender get_Gender();
    public VoiceAge get_Age();
    public string get_Name();
    public CultureInfo get_Culture();
    public string get_Id();
    public string get_Description();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public IDictionary`2<string, string> get_AdditionalInfo();
    internal static bool ValidateGender(VoiceGender gender);
    internal static bool ValidateAge(VoiceAge age);
    internal int get_Variant();
    internal string get_AssemblyName();
    internal string get_Clsid();
    internal string get_RegistryKeyPath();
}
