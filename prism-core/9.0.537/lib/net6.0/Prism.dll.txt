[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Commands.AsyncDelegateCommand : DelegateCommandBase {
    private bool _enableParallelExecution;
    private bool _isExecuting;
    private Func`2<CancellationToken, Task> _executeMethod;
    private Func`1<bool> _canExecuteMethod;
    private Func`1<CancellationToken> _getCancellationToken;
    public bool IsExecuting { get; private set; }
    public AsyncDelegateCommand(Func`1<Task> executeMethod);
    public AsyncDelegateCommand(Func`2<CancellationToken, Task> executeMethod);
    public AsyncDelegateCommand(Func`1<Task> executeMethod, Func`1<bool> canExecuteMethod);
    public AsyncDelegateCommand(Func`2<CancellationToken, Task> executeMethod, Func`1<bool> canExecuteMethod);
    public bool get_IsExecuting();
    private void set_IsExecuting(bool value);
    [AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand/<Execute>d__12")]
public Task Execute(Nullable`1<CancellationToken> cancellationToken);
    public bool CanExecute();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand/<Execute>d__14")]
protected virtual void Execute(object parameter);
    [NullableContextAttribute("2")]
protected virtual bool CanExecute(object parameter);
    public AsyncDelegateCommand EnableParallelExecution();
    public AsyncDelegateCommand CancelAfter(TimeSpan timeout);
    public AsyncDelegateCommand CancellationTokenSourceFactory(Func`1<CancellationToken> factory);
    public AsyncDelegateCommand ObservesProperty(Expression`1<Func`1<T>> propertyExpression);
    public AsyncDelegateCommand ObservesCanExecute(Expression`1<Func`1<bool>> canExecuteExpression);
    public AsyncDelegateCommand Catch(Action`1<TException> catch);
    public AsyncDelegateCommand Catch(Action`1<Exception> catch);
    private sealed virtual override Task Prism.Commands.IAsyncCommand.ExecuteAsync(object parameter);
    private sealed virtual override Task Prism.Commands.IAsyncCommand.ExecuteAsync(object parameter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Commands.AsyncDelegateCommand`1 : DelegateCommandBase {
    private bool _enableParallelExecution;
    private bool _isExecuting;
    private Func`3<T, CancellationToken, Task> _executeMethod;
    private Func`2<T, bool> _canExecuteMethod;
    private Func`1<CancellationToken> _getCancellationToken;
    public bool IsExecuting { get; private set; }
    public AsyncDelegateCommand`1(Func`2<T, Task> executeMethod);
    public AsyncDelegateCommand`1(Func`3<T, CancellationToken, Task> executeMethod);
    public AsyncDelegateCommand`1(Func`2<T, Task> executeMethod, Func`2<T, bool> canExecuteMethod);
    public AsyncDelegateCommand`1(Func`3<T, CancellationToken, Task> executeMethod, Func`2<T, bool> canExecuteMethod);
    public bool get_IsExecuting();
    private void set_IsExecuting(bool value);
    [AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand`1/<Execute>d__12")]
public Task Execute(T parameter, Nullable`1<CancellationToken> cancellationToken);
    public bool CanExecute(T parameter);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand`1/<Execute>d__14")]
protected virtual void Execute(object parameter);
    [NullableContextAttribute("2")]
protected virtual bool CanExecute(object parameter);
    public AsyncDelegateCommand`1<T> EnableParallelExecution();
    public AsyncDelegateCommand`1<T> CancelAfter(TimeSpan timeout);
    public AsyncDelegateCommand`1<T> CancellationTokenSourceFactory(Func`1<CancellationToken> factory);
    public AsyncDelegateCommand`1<T> ObservesProperty(Expression`1<Func`1<TType>> propertyExpression);
    public AsyncDelegateCommand`1<T> ObservesCanExecute(Expression`1<Func`1<bool>> canExecuteExpression);
    public AsyncDelegateCommand`1<T> Catch(Action`1<TException> catch);
    public AsyncDelegateCommand`1<T> Catch(Action`1<Exception> catch);
    [AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand`1/<Prism-Commands-IAsyncCommand-ExecuteAsync>d__23")]
private sealed virtual override Task Prism.Commands.IAsyncCommand.ExecuteAsync(object parameter);
    [AsyncStateMachineAttribute("Prism.Commands.AsyncDelegateCommand`1/<Prism-Commands-IAsyncCommand-ExecuteAsync>d__24")]
private sealed virtual override Task Prism.Commands.IAsyncCommand.ExecuteAsync(object parameter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Commands.CompositeCommand : object {
    private List`1<ICommand> _registeredCommands;
    private bool _monitorCommandActivity;
    private EventHandler _onRegisteredCommandCanExecuteChangedHandler;
    [NullableAttribute("2")]
private SynchronizationContext _synchronizationContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public IList`1<ICommand> RegisteredCommands { get; }
    public CompositeCommand(bool monitorCommandActivity);
    public virtual void RegisterCommand(ICommand command);
    public virtual void UnregisterCommand(ICommand command);
    private void OnRegisteredCommandCanExecuteChanged(object sender, EventArgs e);
    [NullableContextAttribute("2")]
public virtual bool CanExecute(object parameter);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void add_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
public virtual void Execute(object parameter);
    protected virtual bool ShouldExecute(ICommand command);
    public IList`1<ICommand> get_RegisteredCommands();
    protected virtual void OnCanExecuteChanged();
    private void Command_IsActiveChanged(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Commands.DelegateCommand : DelegateCommandBase {
    private Action _executeMethod;
    private Func`1<bool> _canExecuteMethod;
    public DelegateCommand(Action executeMethod);
    public DelegateCommand(Action executeMethod, Func`1<bool> canExecuteMethod);
    public void Execute();
    public bool CanExecute();
    [NullableContextAttribute("2")]
protected virtual void Execute(object parameter);
    [NullableContextAttribute("2")]
protected virtual bool CanExecute(object parameter);
    public DelegateCommand ObservesProperty(Expression`1<Func`1<T>> propertyExpression);
    public DelegateCommand ObservesCanExecute(Expression`1<Func`1<bool>> canExecuteExpression);
    public DelegateCommand Catch(Action`1<Exception> catch);
    public DelegateCommand Catch(Action`2<Exception, object> catch);
    public DelegateCommand Catch(Action`1<TException> catch);
    public DelegateCommand Catch(Action`2<TException, object> catch);
    public DelegateCommand Catch(Func`2<Exception, Task> catch);
    public DelegateCommand Catch(Func`3<Exception, object, Task> catch);
    public DelegateCommand Catch(Func`2<TException, Task> catch);
    public DelegateCommand Catch(Func`3<TException, object, Task> catch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Commands.DelegateCommand`1 : DelegateCommandBase {
    private Action`1<T> _executeMethod;
    private Func`2<T, bool> _canExecuteMethod;
    public DelegateCommand`1(Action`1<T> executeMethod);
    public DelegateCommand`1(Action`1<T> executeMethod, Func`2<T, bool> canExecuteMethod);
    public void Execute(T parameter);
    public bool CanExecute(T parameter);
    [NullableContextAttribute("2")]
protected virtual void Execute(object parameter);
    [NullableContextAttribute("2")]
protected virtual bool CanExecute(object parameter);
    public DelegateCommand`1<T> ObservesProperty(Expression`1<Func`1<TType>> propertyExpression);
    public DelegateCommand`1<T> ObservesCanExecute(Expression`1<Func`1<bool>> canExecuteExpression);
    public DelegateCommand`1<T> Catch(Action`1<Exception> catch);
    public DelegateCommand`1<T> Catch(Action`2<Exception, object> catch);
    public DelegateCommand`1<T> Catch(Action`1<TException> catch);
    public DelegateCommand`1<T> Catch(Action`2<TException, object> catch);
    public DelegateCommand`1<T> Catch(Func`2<Exception, Task> catch);
    public DelegateCommand`1<T> Catch(Func`3<Exception, object, Task> catch);
    public DelegateCommand`1<T> Catch(Func`2<TException, Task> catch);
    public DelegateCommand`1<T> Catch(Func`3<TException, object, Task> catch);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Prism.Commands.DelegateCommandBase : BindableBase {
    private bool _isActive;
    private SynchronizationContext _synchronizationContext;
    [NullableAttribute("1")]
private HashSet`1<string> _observedPropertiesExpressions;
    protected MulticastExceptionHandler ExceptionHandler;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    [CompilerGeneratedAttribute]
private EventHandler IsActiveChanged;
    public bool IsActive { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CanExecuteChanged(EventHandler value);
    protected virtual void OnCanExecuteChanged();
    public void RaiseCanExecuteChanged();
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    protected abstract virtual void Execute(object parameter);
    protected abstract virtual bool CanExecute(object parameter);
    [NullableContextAttribute("1")]
protected internal void ObservesPropertyInternal(Expression`1<Func`1<T>> propertyExpression);
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public virtual void add_IsActiveChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_IsActiveChanged(EventHandler value);
    protected virtual void OnIsActiveChanged();
}
[NullableContextAttribute("1")]
public interface Prism.Commands.IAsyncCommand {
    public abstract virtual Task ExecuteAsync(object parameter);
    public abstract virtual Task ExecuteAsync(object parameter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prism.Commands.PropertyObserver : object {
    private Action _action;
    private PropertyObserver(Expression propertyExpression, Action action);
    [NullableContextAttribute("2")]
private void SubscribeListeners(Expression propertyExpression);
    internal static PropertyObserver Observes(Expression`1<Func`1<T>> propertyExpression, Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prism.Commands.PropertyObserverNode : object {
    private Action _action;
    [NullableAttribute("2")]
private INotifyPropertyChanged _inpcObject;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyObserverNode <Next>k__BackingField;
    public PropertyInfo PropertyInfo { get; }
    [NullableAttribute("2")]
public PropertyObserverNode Next { get; public set; }
    public PropertyObserverNode(PropertyInfo propertyInfo, Action action);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PropertyObserverNode get_Next();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Next(PropertyObserverNode value);
    public void SubscribeListenerFor(INotifyPropertyChanged inpcObject);
    private void GenerateNextNode();
    private void UnsubscribeListener();
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Prism.Common.IParameters {
    public int Count { get; }
    public IEnumerable`1<string> Keys { get; }
    [NullableAttribute("2")]
public object Item { get; }
    public abstract virtual void Add(string key, object value);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<string> get_Keys();
    public abstract virtual T GetValue(string key);
    public abstract virtual IEnumerable`1<T> GetValues(string key);
    public abstract virtual bool TryGetValue(string key, T& value);
    public abstract virtual object get_Item(string key);
}
public interface Prism.Common.IRegistryAware {
    public IViewRegistry Registry { get; }
    public abstract virtual IViewRegistry get_Registry();
}
[DefaultMemberAttribute("Item")]
public class Prism.Common.ListDictionary`2 : object {
    private Dictionary`2<TKey, IList`1<TValue>> innerValues;
    public IList`1<TValue> Values { get; }
    public ICollection`1<TKey> Keys { get; }
    public IList`1<TValue> Item { get; public set; }
    public int Count { get; }
    private ICollection`1<IList`1<TValue>> System.Collections.Generic.IDictionary<TKey,System.Collections.Generic.IList<TValue>>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.IsReadOnly { get; }
    public void Add(TKey key);
    public void Add(TKey key, TValue value);
    private List`1<TValue> CreateNewList(TKey key);
    public sealed virtual void Clear();
    public bool ContainsValue(TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    [IteratorStateMachineAttribute("Prism.Common.ListDictionary`2/<FindAllValuesByKey>d__7")]
public IEnumerable`1<TValue> FindAllValuesByKey(Predicate`1<TKey> keyFilter);
    [IteratorStateMachineAttribute("Prism.Common.ListDictionary`2/<FindAllValues>d__8")]
public IEnumerable`1<TValue> FindAllValues(Predicate`1<TValue> valueFilter);
    public sealed virtual bool Remove(TKey key);
    public void RemoveValue(TKey key, TValue value);
    public void RemoveValue(TValue value);
    public IList`1<TValue> get_Values();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual IList`1<TValue> get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, IList`1<TValue> value);
    public sealed virtual int get_Count();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,System.Collections.Generic.IList<TValue>>.Add(TKey key, IList`1<TValue> value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,System.Collections.Generic.IList<TValue>>.TryGetValue(TKey key, IList`1& value);
    private sealed virtual override ICollection`1<IList`1<TValue>> System.Collections.Generic.IDictionary<TKey,System.Collections.Generic.IList<TValue>>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.Add(KeyValuePair`2<TKey, IList`1<TValue>> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.Contains(KeyValuePair`2<TKey, IList`1<TValue>> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.Remove(KeyValuePair`2<TKey, IList`1<TValue>> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, IList`1<TValue>>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,System.Collections.Generic.IList<TValue>>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Prism.Common.MulticastExceptionHandler : ValueType {
    private Dictionary`2<Type, MulticastDelegate> _handlers;
    public void Register(MulticastDelegate callback);
    public bool CanHandle(Exception exception);
    [AsyncStateMachineAttribute("Prism.Common.MulticastExceptionHandler/<Handle>d__4")]
public void Handle(Exception exception, object parameter);
    [AsyncStateMachineAttribute("Prism.Common.MulticastExceptionHandler/<HandleAsync>d__5")]
public Task HandleAsync(Exception exception, object parameter);
    private MulticastDelegate GetDelegate(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Prism.Common.ParametersBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, object>> _entries;
    [NullableAttribute("2")]
public object Item { get; }
    public int Count { get; }
    public IEnumerable`1<string> Keys { get; }
    protected ParametersBase(string query);
    public sealed virtual object get_Item(string key);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public sealed virtual T GetValue(string key);
    public sealed virtual IEnumerable`1<T> GetValues(string key);
    public sealed virtual bool TryGetValue(string key, T& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void FromParameters(IEnumerable`1<KeyValuePair`2<string, object>> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Prism.Common.ParametersExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static T GetValue(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string key);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static object GetValue(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string key, Type type);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static bool TryGetValue(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string key, T& value);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> GetValues(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string key);
    private static bool TryGetValueInternal(KeyValuePair`2<string, object> kvp, Type type, Object& value);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static bool ContainsKey(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string key);
    private static object GetDefault(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Prism.Common.UriParsingHelper : object {
    private static Char[] _pathDelimiter;
    private static UriParsingHelper();
    public static Queue`1<string> GetUriSegments(Uri uri);
    public static string GetSegmentName(string segment);
    public static INavigationParameters GetSegmentParameters(string segment);
    public static INavigationParameters GetSegmentParameters(string uriSegment, INavigationParameters parameters);
    public static IDialogParameters GetSegmentDialogParameters(string segment);
    public static IDialogParameters GetSegmentParameters(string uriSegment, IDialogParameters parameters);
    public static string GetQuery(Uri uri);
    public static string GetAbsolutePath(Uri uri);
    public static INavigationParameters ParseQuery(Uri uri);
    public static Uri Parse(string uri);
    public static Uri EnsureAbsolute(Uri uri);
}
public enum Prism.Dialogs.ButtonResult : Enum {
    public int value__;
    public static ButtonResult Abort;
    public static ButtonResult Cancel;
    public static ButtonResult Ignore;
    public static ButtonResult No;
    public static ButtonResult None;
    public static ButtonResult OK;
    public static ButtonResult Retry;
    public static ButtonResult Yes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Prism.Dialogs.DialogCallback : ValueType {
    private bool _empty;
    private List`1<MulticastDelegate> _callbacks;
    private MulticastExceptionHandler _errorCallbacks;
    public static DialogCallback Empty { get; }
    private DialogCallback(bool empty);
    [EditorBrowsableAttribute("1")]
public Task Invoke(Exception ex);
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogCallback/<Invoke>d__6")]
[EditorBrowsableAttribute("1")]
public Task Invoke(IDialogResult result);
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogCallback/<Process>d__7")]
private static Task Process(MulticastDelegate delegate, IDialogResult result);
    public static DialogCallback get_Empty();
    public DialogCallback OnClose(Action action);
    public DialogCallback OnClose(Action`1<IDialogResult> action);
    public DialogCallback OnError(Action action);
    public DialogCallback OnError(Action action);
    public DialogCallback OnError(Action`1<Exception> action);
    public DialogCallback OnError(Action`1<TException> action);
    public DialogCallback OnError(Action`2<TException, IDialogResult> action);
    public DialogCallback OnCloseAsync(Func`1<Task> func);
    public DialogCallback OnCloseAsync(Func`2<IDialogResult, Task> func);
    public DialogCallback OnErrorAsync(Func`1<Task> func);
    public DialogCallback OnErrorAsync(Func`1<Task> func);
    public DialogCallback OnErrorAsync(Func`2<Exception, Task> func);
    public DialogCallback OnErrorAsync(Func`2<TException, Task> func);
    public DialogCallback OnErrorAsync(Func`3<TException, IDialogResult, Task> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Dialogs.DialogCloseListener : ValueType {
    [NullableAttribute("2")]
private MulticastDelegate _callback;
    internal DialogCloseListener(Action`1<IDialogResult> callback);
    internal DialogCloseListener(Func`2<IDialogResult, Task> callback);
    public void Invoke();
    public void Invoke(ButtonResult result);
    public void Invoke(IDialogParameters parameters, ButtonResult result);
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogCloseListener/<Invoke>d__7")]
public void Invoke(IDialogResult result);
}
public class Prism.Dialogs.DialogException : Exception {
    public static string ShowDialog;
    public static string RequiresContentPage;
    public static string HostPageIsNotDialogHost;
    public static string CanCloseIsFalse;
    public static string NoViewModel;
    public static string ImplementIDialogAware;
    public static string UnableToSetTheDialogCloseListener;
    public DialogException(string message);
}
public class Prism.Dialogs.DialogParameters : ParametersBase {
    public DialogParameters(string query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Dialogs.DialogResult : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private IDialogParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonResult <Result>k__BackingField;
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    public IDialogParameters Parameters { get; public set; }
    public ButtonResult Result { get; public set; }
    public DialogResult(ButtonResult result);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual IDialogParameters get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDialogParameters value);
    [CompilerGeneratedAttribute]
public sealed virtual ButtonResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ButtonResult value);
}
[EditorBrowsableAttribute("1")]
public static class Prism.Dialogs.DialogUtilities : object {
    [EditorBrowsableAttribute("1")]
public static void InitializeListener(IDialogAware dialogAware, Func`2<IDialogResult, Task> callback);
    [EditorBrowsableAttribute("1")]
public static void InitializeListener(IDialogAware dialogAware, Action`1<IDialogResult> callback);
    private static void SetListener(IDialogAware dialogAware, DialogCloseListener listener);
    private static Action`1<DialogCloseListener> GetListenerSetter(IDialogAware dialogAware, Type type);
}
public interface Prism.Dialogs.IDialogAware {
    public DialogCloseListener RequestClose { get; }
    public abstract virtual bool CanCloseDialog();
    public abstract virtual void OnDialogClosed();
    public abstract virtual void OnDialogOpened(IDialogParameters parameters);
    public abstract virtual DialogCloseListener get_RequestClose();
}
public interface Prism.Dialogs.IDialogParameters {
}
[NullableContextAttribute("1")]
public interface Prism.Dialogs.IDialogResult {
    [NullableAttribute("2")]
public Exception Exception { get; }
    public ButtonResult Result { get; }
    public IDialogParameters Parameters { get; }
    [NullableContextAttribute("2")]
public abstract virtual Exception get_Exception();
    public abstract virtual ButtonResult get_Result();
    public abstract virtual IDialogParameters get_Parameters();
}
public interface Prism.Dialogs.IDialogService {
    public abstract virtual void ShowDialog(string name, IDialogParameters parameters, DialogCallback callback);
}
[ExtensionAttribute]
public static class Prism.Dialogs.IDialogServiceExtensions : object {
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, IDialogParameters parameters);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, DialogCallback callback);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, Action callback);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, Action`1<IDialogResult> callback);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, IDialogParameters parameters, Action callback);
    [ExtensionAttribute]
public static void ShowDialog(IDialogService dialogService, string name, IDialogParameters parameters, Action`1<IDialogResult> callback);
    [ExtensionAttribute]
public static Task`1<IDialogResult> ShowDialogAsync(IDialogService dialogService, string name);
    [ExtensionAttribute]
public static Task`1<IDialogResult> ShowDialogAsync(IDialogService dialogService, string name, IDialogParameters parameters);
}
public interface Prism.IActiveAware {
    public bool IsActive { get; public set; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_IsActiveChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IsActiveChanged(EventHandler value);
}
public class Prism.Modularity.CyclicDependencyFoundException : ModularityException {
    public CyclicDependencyFoundException(string message);
    public CyclicDependencyFoundException(string message, Exception innerException);
    public CyclicDependencyFoundException(string moduleName, string message, Exception innerException);
    protected CyclicDependencyFoundException(SerializationInfo info, StreamingContext context);
}
public class Prism.Modularity.DuplicateModuleException : ModularityException {
    public DuplicateModuleException(string message);
    public DuplicateModuleException(string message, Exception innerException);
    public DuplicateModuleException(string moduleName, string message);
    public DuplicateModuleException(string moduleName, string message, Exception innerException);
    protected DuplicateModuleException(SerializationInfo info, StreamingContext context);
}
public interface Prism.Modularity.IModule {
    public abstract virtual void RegisterTypes(IContainerRegistry containerRegistry);
    public abstract virtual void OnInitialized(IContainerProvider containerProvider);
}
public interface Prism.Modularity.IModuleCatalog {
    public IEnumerable`1<IModuleInfo> Modules { get; }
    public abstract virtual IEnumerable`1<IModuleInfo> get_Modules();
    public abstract virtual IEnumerable`1<IModuleInfo> GetDependentModules(IModuleInfo moduleInfo);
    public abstract virtual IEnumerable`1<IModuleInfo> CompleteListWithDependencies(IEnumerable`1<IModuleInfo> modules);
    public abstract virtual void Initialize();
    public abstract virtual IModuleCatalog AddModule(IModuleInfo moduleInfo);
}
[ExtensionAttribute]
public static class Prism.Modularity.IModuleCatalogCommonExtensions : object {
    [ExtensionAttribute]
public static bool Exists(IModuleCatalog catalog);
    [ExtensionAttribute]
public static bool Exists(IModuleCatalog catalog, string name);
    [ExtensionAttribute]
public static ModuleState GetModuleState(IModuleCatalog catalog);
    [ExtensionAttribute]
public static ModuleState GetModuleState(IModuleCatalog catalog, string name);
    [ExtensionAttribute]
public static bool IsInitialized(IModuleCatalog catalog);
    [ExtensionAttribute]
public static bool IsInitialized(IModuleCatalog catalog, string name);
}
public interface Prism.Modularity.IModuleCatalogItem {
}
public interface Prism.Modularity.IModuleInfo {
    public Collection`1<string> DependsOn { get; public set; }
    public InitializationMode InitializationMode { get; public set; }
    public string ModuleName { get; public set; }
    public string ModuleType { get; public set; }
    public string Ref { get; public set; }
    public ModuleState State { get; public set; }
    public abstract virtual Collection`1<string> get_DependsOn();
    public abstract virtual void set_DependsOn(Collection`1<string> value);
    public abstract virtual InitializationMode get_InitializationMode();
    public abstract virtual void set_InitializationMode(InitializationMode value);
    public abstract virtual string get_ModuleName();
    public abstract virtual void set_ModuleName(string value);
    public abstract virtual string get_ModuleType();
    public abstract virtual void set_ModuleType(string value);
    public abstract virtual string get_Ref();
    public abstract virtual void set_Ref(string value);
    public abstract virtual ModuleState get_State();
    public abstract virtual void set_State(ModuleState value);
}
public interface Prism.Modularity.IModuleInfoGroup {
    public InitializationMode InitializationMode { get; public set; }
    public string Ref { get; public set; }
    public abstract virtual InitializationMode get_InitializationMode();
    public abstract virtual void set_InitializationMode(InitializationMode value);
    public abstract virtual string get_Ref();
    public abstract virtual void set_Ref(string value);
}
public interface Prism.Modularity.IModuleInitializer {
    public abstract virtual void Initialize(IModuleInfo moduleInfo);
}
public interface Prism.Modularity.IModuleManager {
    public IEnumerable`1<IModuleInfo> Modules { get; }
    public abstract virtual IEnumerable`1<IModuleInfo> get_Modules();
    public abstract virtual void Run();
    public abstract virtual void LoadModule(string moduleName);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
}
[ExtensionAttribute]
public static class Prism.Modularity.IModuleManagerExtensions : object {
    [ExtensionAttribute]
public static bool ModuleExists(IModuleManager manager);
    [ExtensionAttribute]
public static bool ModuleExists(IModuleManager catalog, string name);
    [ExtensionAttribute]
public static ModuleState GetModuleState(IModuleManager manager);
    [ExtensionAttribute]
public static ModuleState GetModuleState(IModuleManager manager, string name);
    [ExtensionAttribute]
public static bool IsModuleInitialized(IModuleManager manager);
    [ExtensionAttribute]
public static bool IsModuleInitialized(IModuleManager manager, string name);
    [ExtensionAttribute]
public static void LoadModule(IModuleManager manager);
}
public enum Prism.Modularity.InitializationMode : Enum {
    public int value__;
    public static InitializationMode WhenAvailable;
    public static InitializationMode OnDemand;
}
public class Prism.Modularity.LoadModuleCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IModuleInfo <ModuleInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsErrorHandled>k__BackingField;
    public IModuleInfo ModuleInfo { get; private set; }
    public Exception Error { get; private set; }
    public bool IsErrorHandled { get; public set; }
    public LoadModuleCompletedEventArgs(IModuleInfo moduleInfo, Exception error);
    [CompilerGeneratedAttribute]
public IModuleInfo get_ModuleInfo();
    [CompilerGeneratedAttribute]
private void set_ModuleInfo(IModuleInfo value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public bool get_IsErrorHandled();
    [CompilerGeneratedAttribute]
public void set_IsErrorHandled(bool value);
}
public class Prism.Modularity.ModularityException : Exception {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    public string ModuleName { get; public set; }
    public ModularityException(string message);
    public ModularityException(string message, Exception innerException);
    public ModularityException(string moduleName, string message);
    public ModularityException(string moduleName, string message, Exception innerException);
    protected ModularityException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Prism.Modularity.ModuleCatalogBase : object {
    [CompilerGeneratedAttribute]
private ModuleCatalogItemCollection <_items>k__BackingField;
    private bool _isLoaded;
    [CompilerGeneratedAttribute]
private bool <Validated>k__BackingField;
    private ModuleCatalogItemCollection _items { get; }
    public Collection`1<IModuleCatalogItem> Items { get; }
    public IEnumerable`1<IModuleInfo> Modules { get; }
    public IEnumerable`1<IModuleInfoGroup> Groups { get; }
    protected bool Validated { get; protected set; }
    protected IEnumerable`1<IModuleInfo> GrouplessModules { get; }
    public ModuleCatalogBase(IEnumerable`1<IModuleInfo> modules);
    [CompilerGeneratedAttribute]
private ModuleCatalogItemCollection get__items();
    public Collection`1<IModuleCatalogItem> get_Items();
    public virtual IEnumerable`1<IModuleInfo> get_Modules();
    public IEnumerable`1<IModuleInfoGroup> get_Groups();
    [CompilerGeneratedAttribute]
protected bool get_Validated();
    [CompilerGeneratedAttribute]
protected void set_Validated(bool value);
    protected IEnumerable`1<IModuleInfo> get_GrouplessModules();
    public virtual void Load();
    public virtual IEnumerable`1<IModuleInfo> GetDependentModules(IModuleInfo moduleInfo);
    public virtual IEnumerable`1<IModuleInfo> CompleteListWithDependencies(IEnumerable`1<IModuleInfo> modules);
    public virtual void Validate();
    public virtual IModuleCatalog AddModule(IModuleInfo moduleInfo);
    public virtual void Initialize();
    protected static String[] SolveDependencies(IEnumerable`1<IModuleInfo> modules);
    protected static void ValidateDependencies(IEnumerable`1<IModuleInfo> modules);
    protected virtual void InnerLoad();
    [IteratorStateMachineAttribute("Prism.Modularity.ModuleCatalogBase/<Sort>d__27")]
protected virtual IEnumerable`1<IModuleInfo> Sort(IEnumerable`1<IModuleInfo> modules);
    protected virtual void ValidateUniqueModules();
    protected virtual void ValidateDependencyGraph();
    protected virtual void ValidateCrossGroupDependencies();
    protected virtual void ValidateDependenciesInitializationMode();
    protected virtual IEnumerable`1<IModuleInfo> GetDependentModulesInner(IModuleInfo moduleInfo);
    protected virtual void EnsureCatalogValidated();
    private void ItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <ValidateDependenciesInitializationMode>b__31_0(IModuleInfo m);
}
[AttributeUsageAttribute("4")]
public class Prism.Modularity.ModuleDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    public string ModuleName { get; }
    public ModuleDependencyAttribute(string moduleName);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
}
public class Prism.Modularity.ModuleDependencySolver : object {
    private ListDictionary`2<string, string> dependencyMatrix;
    private List`1<string> knownModules;
    public int ModuleCount { get; }
    public void AddModule(string name);
    public void AddDependency(string dependingModule, string dependentModule);
    private void AddToDependencyMatrix(string module);
    private void AddToKnownModules(string module);
    public String[] Solve();
    private string FindMissingModules(List`1<string> skip);
    public int get_ModuleCount();
    private List`1<string> FindLeaves(List`1<string> skip);
}
public class Prism.Modularity.ModuleDownloadProgressChangedEventArgs : ProgressChangedEventArgs {
    [CompilerGeneratedAttribute]
private IModuleInfo <ModuleInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesToReceive>k__BackingField;
    public IModuleInfo ModuleInfo { get; }
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    public ModuleDownloadProgressChangedEventArgs(IModuleInfo moduleInfo, long bytesReceived, long totalBytesToReceive);
    [CompilerGeneratedAttribute]
public IModuleInfo get_ModuleInfo();
    [CompilerGeneratedAttribute]
public long get_BytesReceived();
    [CompilerGeneratedAttribute]
public long get_TotalBytesToReceive();
    private static int CalculateProgressPercentage(long bytesReceived, long totalBytesToReceive);
}
public class Prism.Modularity.ModuleInitializeException : ModularityException {
    public ModuleInitializeException(string message);
    public ModuleInitializeException(string message, Exception innerException);
    public ModuleInitializeException(string moduleName, string moduleAssembly, string message);
    public ModuleInitializeException(string moduleName, string moduleAssembly, string message, Exception innerException);
    public ModuleInitializeException(string moduleName, string message, Exception innerException);
    protected ModuleInitializeException(SerializationInfo info, StreamingContext context);
}
public class Prism.Modularity.ModuleNotFoundException : ModularityException {
    public ModuleNotFoundException(string message);
    public ModuleNotFoundException(string message, Exception innerException);
    public ModuleNotFoundException(string moduleName, string message);
    public ModuleNotFoundException(string moduleName, string message, Exception innerException);
    protected ModuleNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum Prism.Modularity.ModuleState : Enum {
    public int value__;
    public static ModuleState NotStarted;
    public static ModuleState LoadingTypes;
    public static ModuleState ReadyForInitialization;
    public static ModuleState Initializing;
    public static ModuleState Initialized;
}
public class Prism.Modularity.ModuleTypeLoadingException : ModularityException {
    public ModuleTypeLoadingException(string message);
    public ModuleTypeLoadingException(string message, Exception exception);
    public ModuleTypeLoadingException(string moduleName, string message);
    public ModuleTypeLoadingException(string moduleName, string message, Exception innerException);
    protected ModuleTypeLoadingException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Prism.Mvvm.BindableBase : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("1")]
protected virtual bool SetProperty(T& storage, T value, string propertyName);
    protected virtual bool SetProperty(T& storage, T value, Action onChanged, string propertyName);
    protected void RaisePropertyChanged(string propertyName);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Mvvm.ErrorsContainer`1 : object {
    private static T[] noErrors;
    protected Action`1<string> raiseErrorsChanged;
    protected Dictionary`2<string, List`1<T>> validationResults;
    public bool HasErrors { get; }
    public ErrorsContainer`1(Action`1<string> raiseErrorsChanged);
    private static ErrorsContainer`1();
    public bool get_HasErrors();
    public Dictionary`2<string, List`1<T>> GetErrors();
    public IEnumerable`1<T> GetErrors(string propertyName);
    public void ClearErrors();
    public void ClearErrors(Expression`1<Func`1<TProperty>> propertyExpression);
    [NullableContextAttribute("2")]
public void ClearErrors(string propertyName);
    public void SetErrors(Expression`1<Func`1<TProperty>> propertyExpression, IEnumerable`1<T> propertyErrors);
    [NullableContextAttribute("2")]
public void SetErrors(string propertyName, IEnumerable`1<T> newValidationResults);
}
public interface Prism.Mvvm.IViewRegistry {
    public IEnumerable`1<ViewRegistration> Registrations { get; }
    public abstract virtual IEnumerable`1<ViewRegistration> get_Registrations();
    public abstract virtual object CreateView(IContainerProvider container, string name);
    public abstract virtual Type GetViewType(string name);
    public abstract virtual string GetViewModelNavigationKey(Type viewModelType);
    public abstract virtual IEnumerable`1<ViewRegistration> ViewsOfType(Type baseType);
    public abstract virtual bool IsRegistered(string name);
}
public static class Prism.Mvvm.PropertySupport : object {
    [NullableContextAttribute("2")]
public static string ExtractPropertyName(Expression`1<Func`1<T>> propertyExpression);
    [NullableContextAttribute("1")]
internal static string ExtractPropertyNameFromLambda(LambdaExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Mvvm.ViewCreationException : Exception {
    [CompilerGeneratedAttribute]
private ViewType <ViewType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewName>k__BackingField;
    public ViewType ViewType { get; }
    public string ViewName { get; }
    public ViewCreationException(string viewName, ViewType viewType);
    public ViewCreationException(string viewName, ViewType viewType, Exception innerException);
    [CompilerGeneratedAttribute]
public ViewType get_ViewType();
    [CompilerGeneratedAttribute]
public string get_ViewName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prism.Mvvm.ViewModelCreationException : Exception {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<object, string> _viewNameDelegate;
    [CompilerGeneratedAttribute]
private object <View>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewName>k__BackingField;
    public object View { get; }
    public string ViewName { get; }
    public ViewModelCreationException(object view, Exception innerException);
    private static string GetViewName(object view);
    [EditorBrowsableAttribute("1")]
public static void SetViewNameDelegate(Func`2<object, string> viewNameDelegate);
    [CompilerGeneratedAttribute]
public object get_View();
    [CompilerGeneratedAttribute]
public string get_ViewName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Prism.Mvvm.ViewModelLocationProvider : object {
    private static Dictionary`2<string, Func`1<object>> _factories;
    private static Dictionary`2<string, Type> _typeFactories;
    private static Func`2<Type, object> _defaultViewModelFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`3<object, Type, object> _defaultViewModelFactoryWithViewParameter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<Type, Type> _defaultViewTypeToViewModelTypeResolver;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<object, Type> _defaultViewToViewModelTypeResolver;
    private static ViewModelLocationProvider();
    [EditorBrowsableAttribute("1")]
public static void Reset();
    private static Type DefaultViewTypeToViewModel(Type viewType);
    public static void SetDefaultViewModelFactory(Func`2<Type, object> viewModelFactory);
    public static void SetDefaultViewModelFactory(Func`3<object, Type, object> viewModelFactory);
    public static void SetDefaultViewTypeToViewModelTypeResolver(Func`2<Type, Type> viewTypeToViewModelTypeResolver);
    public static void SetDefaultViewToViewModelTypeResolver(Func`2<object, Type> viewToViewModelTypeResolver);
    public static void AutoWireViewModelChanged(object view, Action`2<object, object> setDataContextCallback);
    private static object GetViewModelForView(object view);
    private static Type GetViewModelTypeForView(Type view);
    public static void Register(Func`1<object> factory);
    public static void Register(string viewTypeName, Func`1<object> factory);
    [NullableContextAttribute("2")]
public static void Register();
    public static void Register(string viewTypeName, Type viewModelType);
}
public class Prism.Mvvm.ViewRegistration : object {
    [CompilerGeneratedAttribute]
private ViewType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <View>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ViewType Type { get; public set; }
    public Type View { get; public set; }
    public Type ViewModel { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
protected ViewRegistration(ViewRegistration original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ViewType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(ViewType value);
    [CompilerGeneratedAttribute]
public Type get_View();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_View(Type value);
    [CompilerGeneratedAttribute]
public Type get_ViewModel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ViewModel(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ViewRegistration left, ViewRegistration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ViewRegistration left, ViewRegistration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ViewRegistration other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ViewRegistration <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Prism.Mvvm.ViewRegistryBase`1 : object {
    private IEnumerable`1<ViewRegistration> _registrations;
    private ViewType _registryType;
    public IEnumerable`1<ViewRegistration> Registrations { get; }
    protected ViewRegistryBase`1(ViewType registryType, IEnumerable`1<ViewRegistration> registrations);
    public sealed virtual IEnumerable`1<ViewRegistration> get_Registrations();
    public sealed virtual Type GetViewType(string name);
    public sealed virtual object CreateView(IContainerProvider container, string name);
    private IEnumerable`1<Type> GetCandidates(Type viewModelType);
    public sealed virtual string GetViewModelNavigationKey(Type viewModelType);
    public sealed virtual IEnumerable`1<ViewRegistration> ViewsOfType(Type baseType);
    public sealed virtual bool IsRegistered(string name);
    protected ViewRegistration GetRegistration(string name);
    protected abstract virtual void ConfigureView(TBaseView view, IContainerProvider container);
    [NullableContextAttribute("2")]
protected abstract virtual void Autowire(TBaseView view);
    protected abstract virtual void SetNavigationNameProperty(TBaseView view, string name);
    protected abstract virtual void SetViewModelProperty(TBaseView view, Type viewModelType);
    protected abstract virtual void SetContainerProvider(TBaseView view, IContainerProvider container);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_Registrations>b__4_0(ViewRegistration viewRegistration);
}
public enum Prism.Mvvm.ViewType : Enum {
    public int value__;
    public static ViewType Unknown;
    public static ViewType Page;
    public static ViewType Region;
    public static ViewType Dialog;
}
public interface Prism.Navigation.IDestructible {
    public abstract virtual void Destroy();
}
public interface Prism.Navigation.INavigationParameters {
}
public interface Prism.Navigation.INavigationParametersInternal {
    public abstract virtual void Add(string key, object value);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual T GetValue(string key);
}
[NullableContextAttribute("2")]
public interface Prism.Navigation.INavigationResult {
    public bool Success { get; }
    public bool Cancelled { get; }
    public Exception Exception { get; }
    public NavigationContext Context { get; }
    public abstract virtual bool get_Success();
    public abstract virtual bool get_Cancelled();
    public abstract virtual Exception get_Exception();
    public abstract virtual NavigationContext get_Context();
}
public class Prism.Navigation.NavigationException : Exception {
    public static string CannotPopApplicationMainPage;
    public static string CannotGoBackFromRoot;
    public static string GoBackRequiresNavigationPage;
    public static string GoBackToRootRequiresNavigationPage;
    public static string RelativeNavigationRequiresNavigationPage;
    public static string IConfirmNavigationReturnedFalse;
    public static string NoPageIsRegistered;
    public static string ErrorCreatingPage;
    public static string UnsupportedMauiCreation;
    public static string UnsupportedMauiNavigation;
    public static string ErrorCreatingViewModel;
    public static string MvvmPatternBreak;
    public static string UnknownException;
    [CompilerGeneratedAttribute]
private object <View>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationKey>k__BackingField;
    public object View { get; }
    public string NavigationKey { get; }
    public NavigationException(string message);
    public NavigationException(string message, object view);
    public NavigationException(string message, string navigationKey);
    public NavigationException(string message, string navigationKey, Exception innerException);
    public NavigationException(string message, object view, Exception innerException);
    public NavigationException(string message, string navigationKey, object view, Exception innerException);
    [CompilerGeneratedAttribute]
public object get_View();
    [CompilerGeneratedAttribute]
public string get_NavigationKey();
}
public class Prism.Navigation.NavigationParameters : ParametersBase {
    private Dictionary`2<string, object> _internalParameters;
    public NavigationParameters(string query);
    private sealed virtual override void Prism.Navigation.INavigationParametersInternal.Add(string key, object value);
    private sealed virtual override bool Prism.Navigation.INavigationParametersInternal.ContainsKey(string key);
    private sealed virtual override T Prism.Navigation.INavigationParametersInternal.GetValue(string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Prism.Navigation.NavigationResult : object {
    private Nullable`1<bool> _success;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationContext <Context>k__BackingField;
    public bool Success { get; }
    public bool Cancelled { get; }
    public Exception Exception { get; }
    public NavigationContext Context { get; }
    public NavigationResult(bool success);
    public NavigationResult(Exception ex);
    [NullableContextAttribute("1")]
public NavigationResult(NavigationContext context, bool success);
    [NullableContextAttribute("1")]
public NavigationResult(NavigationContext context, Exception exception);
    public sealed virtual bool get_Success();
    public sealed virtual bool get_Cancelled();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public sealed virtual NavigationContext get_Context();
}
public interface Prism.Navigation.Regions.IConfirmNavigationRequest {
    public abstract virtual void ConfirmNavigationRequest(NavigationContext navigationContext, Action`1<bool> continuationCallback);
}
public interface Prism.Navigation.Regions.IJournalAware {
    public abstract virtual bool PersistInHistory();
}
public interface Prism.Navigation.Regions.INavigateAsync {
    public abstract virtual void RequestNavigate(Uri target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
}
public interface Prism.Navigation.Regions.IRegion {
    public IViewsCollection Views { get; }
    public IViewsCollection ActiveViews { get; }
    public object Context { get; public set; }
    public string Name { get; public set; }
    public Comparison`1<object> SortComparison { get; public set; }
    public IRegionManager RegionManager { get; public set; }
    public IRegionBehaviorCollection Behaviors { get; }
    public IRegionNavigationService NavigationService { get; public set; }
    public abstract virtual IViewsCollection get_Views();
    public abstract virtual IViewsCollection get_ActiveViews();
    public abstract virtual object get_Context();
    public abstract virtual void set_Context(object value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual Comparison`1<object> get_SortComparison();
    public abstract virtual void set_SortComparison(Comparison`1<object> value);
    public abstract virtual IRegionManager Add(string viewName);
    public abstract virtual IRegionManager Add(object view);
    public abstract virtual IRegionManager Add(object view, string viewName);
    public abstract virtual IRegionManager Add(object view, string viewName, bool createRegionManagerScope);
    public abstract virtual void Remove(object view);
    public abstract virtual void RemoveAll();
    public abstract virtual void Activate(object view);
    public abstract virtual void Deactivate(object view);
    public abstract virtual object GetView(string viewName);
    public abstract virtual IRegionManager get_RegionManager();
    public abstract virtual void set_RegionManager(IRegionManager value);
    public abstract virtual IRegionBehaviorCollection get_Behaviors();
    public abstract virtual IRegionNavigationService get_NavigationService();
    public abstract virtual void set_NavigationService(IRegionNavigationService value);
}
public interface Prism.Navigation.Regions.IRegionAdapter {
    public abstract virtual IRegion Initialize(object regionTarget, string regionName);
}
public interface Prism.Navigation.Regions.IRegionAware {
    public abstract virtual void OnNavigatedTo(NavigationContext navigationContext);
    public abstract virtual bool IsNavigationTarget(NavigationContext navigationContext);
    public abstract virtual void OnNavigatedFrom(NavigationContext navigationContext);
}
public interface Prism.Navigation.Regions.IRegionBehavior {
    public IRegion Region { get; public set; }
    public abstract virtual IRegion get_Region();
    public abstract virtual void set_Region(IRegion value);
    public abstract virtual void Attach();
}
[DefaultMemberAttribute("Item")]
public interface Prism.Navigation.Regions.IRegionBehaviorCollection {
    public IRegionBehavior Item { get; }
    public abstract virtual void Add(string key, IRegionBehavior regionBehavior);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual IRegionBehavior get_Item(string key);
}
public interface Prism.Navigation.Regions.IRegionBehaviorFactory {
    public abstract virtual void AddIfMissing(string behaviorKey, Type behaviorType);
    public abstract virtual void AddOrReplace(string behaviorKey, Type behaviorType);
    public abstract virtual bool ContainsKey(string behaviorKey);
    public abstract virtual IRegionBehavior CreateFromKey(string key);
}
[ExtensionAttribute]
public static class Prism.Navigation.Regions.IRegionBehaviorFactoryExtensions : object {
    [ExtensionAttribute]
public static void AddIfMissing(IRegionBehaviorFactory regionBehaviorFactory);
    [ExtensionAttribute]
public static void AddOrReplace(IRegionBehaviorFactory regionBehaviorFactory);
    [ExtensionAttribute]
public static void AddIfMissing(IRegionBehaviorFactory regionBehaviorFactory, string behaviorKey);
    [ExtensionAttribute]
public static void AddOrReplace(IRegionBehaviorFactory regionBehaviorFactory, string behaviorKey);
}
[DefaultMemberAttribute("Item")]
public interface Prism.Navigation.Regions.IRegionCollection {
    public IRegion Item { get; }
    public abstract virtual IRegion get_Item(string regionName);
    public abstract virtual void Add(IRegion region);
    public abstract virtual bool Remove(string regionName);
    public abstract virtual bool ContainsRegionWithName(string regionName);
    public abstract virtual void Add(string regionName, IRegion region);
}
public interface Prism.Navigation.Regions.IRegionManager {
    public IRegionCollection Regions { get; }
    public abstract virtual IRegionCollection get_Regions();
    public abstract virtual IRegionManager CreateRegionManager();
    public abstract virtual IRegionManager AddToRegion(string regionName, object view);
    public abstract virtual IRegionManager AddToRegion(string regionName, string viewName);
    public abstract virtual IRegionManager RegisterViewWithRegion(string regionName, string viewName);
    public abstract virtual IRegionManager RegisterViewWithRegion(string regionName, Type viewType);
    public abstract virtual IRegionManager RegisterViewWithRegion(string regionName, Func`2<IContainerProvider, object> getContentDelegate);
    public abstract virtual void RequestNavigate(string regionName, Uri target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
}
[ExtensionAttribute]
public static class Prism.Navigation.Regions.IRegionManagerExtensions : object {
    [ExtensionAttribute]
public static IRegionManager RegisterViewWithRegion(IRegionManager regionManager, string regionName, Func`1<object> getContentDelegate);
    [ExtensionAttribute]
public static IRegionManager RegisterViewWithRegion(IRegionManager regionManager, string regionName);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, Uri source);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, Uri source, Action`1<NavigationResult> navigationCallback);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, string source, Action`1<NavigationResult> navigationCallback);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, string source);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, string target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, Uri target, INavigationParameters navigationParameters);
    [ExtensionAttribute]
public static void RequestNavigate(IRegionManager regionManager, string regionName, string target, INavigationParameters navigationParameters);
}
public interface Prism.Navigation.Regions.IRegionMemberLifetime {
    public bool KeepAlive { get; }
    public abstract virtual bool get_KeepAlive();
}
public interface Prism.Navigation.Regions.IRegionNavigationContentLoader {
    public abstract virtual object LoadContent(IRegion region, NavigationContext navigationContext);
}
public interface Prism.Navigation.Regions.IRegionNavigationJournal {
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public IRegionNavigationJournalEntry CurrentEntry { get; }
    public INavigateAsync NavigationTarget { get; public set; }
    public abstract virtual bool get_CanGoBack();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual IRegionNavigationJournalEntry get_CurrentEntry();
    public abstract virtual INavigateAsync get_NavigationTarget();
    public abstract virtual void set_NavigationTarget(INavigateAsync value);
    public abstract virtual void GoBack();
    public abstract virtual void GoForward();
    public abstract virtual void RecordNavigation(IRegionNavigationJournalEntry entry, bool persistInHistory);
    public abstract virtual void Clear();
}
public interface Prism.Navigation.Regions.IRegionNavigationJournalEntry {
    public Uri Uri { get; public set; }
    public INavigationParameters Parameters { get; public set; }
    public abstract virtual Uri get_Uri();
    public abstract virtual void set_Uri(Uri value);
    public abstract virtual INavigationParameters get_Parameters();
    public abstract virtual void set_Parameters(INavigationParameters value);
}
public interface Prism.Navigation.Regions.IRegionNavigationRegistry {
}
public interface Prism.Navigation.Regions.IRegionNavigationService {
    public IRegion Region { get; public set; }
    public IRegionNavigationJournal Journal { get; }
    public abstract virtual IRegion get_Region();
    public abstract virtual void set_Region(IRegion value);
    public abstract virtual IRegionNavigationJournal get_Journal();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Navigating(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Navigating(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Navigated(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Navigated(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationFailed(EventHandler`1<RegionNavigationFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationFailed(EventHandler`1<RegionNavigationFailedEventArgs> value);
}
public interface Prism.Navigation.Regions.IRegionViewRegistry {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContentRegistered(EventHandler`1<ViewRegisteredEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContentRegistered(EventHandler`1<ViewRegisteredEventArgs> value);
    public abstract virtual IEnumerable`1<object> GetContents(string regionName, IContainerProvider container);
    public abstract virtual void RegisterViewWithRegion(string regionName, string targetName);
    public abstract virtual void RegisterViewWithRegion(string regionName, Type viewType);
    public abstract virtual void RegisterViewWithRegion(string regionName, Func`2<IContainerProvider, object> getContentDelegate);
}
public interface Prism.Navigation.Regions.IViewsCollection {
    public abstract virtual bool Contains(object value);
}
[ExtensionAttribute]
public static class Prism.Navigation.Regions.NavigationAsyncExtensions : object {
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, Uri target, Action`1<NavigationResult> navigationCallback);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, string target);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, string target, Action`1<NavigationResult> navigationCallback);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, Uri target);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, string target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, Uri target, INavigationParameters navigationParameters);
    [ExtensionAttribute]
public static void RequestNavigate(INavigateAsync navigation, string target, INavigationParameters navigationParameters);
}
public class Prism.Navigation.Regions.NavigationContext : object {
    [CompilerGeneratedAttribute]
private IRegionNavigationService <NavigationService>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationParameters <Parameters>k__BackingField;
    public IRegionNavigationService NavigationService { get; private set; }
    public Uri Uri { get; private set; }
    public INavigationParameters Parameters { get; private set; }
    public NavigationContext(IRegionNavigationService navigationService, Uri uri);
    public NavigationContext(IRegionNavigationService navigationService, Uri uri, INavigationParameters navigationParameters);
    [CompilerGeneratedAttribute]
public IRegionNavigationService get_NavigationService();
    [CompilerGeneratedAttribute]
private void set_NavigationService(IRegionNavigationService value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public INavigationParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(INavigationParameters value);
    private void GetNavigationParameters(INavigationParameters navigationParameters);
}
[ExtensionAttribute]
public static class Prism.Navigation.Regions.NavigationContextExtensions : object {
    [ExtensionAttribute]
public static string NavigatedName(NavigationContext context);
}
public abstract class Prism.Navigation.Regions.RegionBehavior : object {
    private IRegion region;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    public IRegion Region { get; public set; }
    public bool IsAttached { get; private set; }
    public sealed virtual IRegion get_Region();
    public sealed virtual void set_Region(IRegion value);
    [CompilerGeneratedAttribute]
public bool get_IsAttached();
    [CompilerGeneratedAttribute]
private void set_IsAttached(bool value);
    public sealed virtual void Attach();
    protected abstract virtual void OnAttach();
}
[DefaultMemberAttribute("Item")]
public class Prism.Navigation.Regions.RegionBehaviorCollection : object {
    private IRegion region;
    private Dictionary`2<string, IRegionBehavior> behaviors;
    public IRegionBehavior Item { get; }
    public RegionBehaviorCollection(IRegion region);
    public sealed virtual IRegionBehavior get_Item(string key);
    public sealed virtual void Add(string key, IRegionBehavior regionBehavior);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IRegionBehavior>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Prism.Navigation.Regions.RegionBehaviorFactory : object {
    private IContainerProvider _container;
    private Dictionary`2<string, Type> _registeredBehaviors;
    public RegionBehaviorFactory(IContainerExtension container);
    public sealed virtual void AddIfMissing(string behaviorKey, Type behaviorType);
    public sealed virtual void AddOrReplace(string behaviorKey, Type behaviorType);
    public sealed virtual IRegionBehavior CreateFromKey(string key);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool ContainsKey(string behaviorKey);
}
public class Prism.Navigation.Regions.RegionCreationException : RegionException {
    public RegionCreationException(string message);
    public RegionCreationException(SerializationInfo info, StreamingContext context);
    public RegionCreationException(string message, Exception innerException);
}
public abstract class Prism.Navigation.Regions.RegionException : Exception {
    protected RegionException(string message);
    protected RegionException(SerializationInfo info, StreamingContext context);
    protected RegionException(string message, Exception innerException);
}
[AttributeUsageAttribute("1028")]
public class Prism.Navigation.Regions.RegionMemberLifetimeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    public bool KeepAlive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public void set_KeepAlive(bool value);
}
public class Prism.Navigation.Regions.RegionNavigationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private NavigationContext <NavigationContext>k__BackingField;
    public NavigationContext NavigationContext { get; }
    public Uri Uri { get; }
    public RegionNavigationEventArgs(NavigationContext navigationContext);
    [CompilerGeneratedAttribute]
public NavigationContext get_NavigationContext();
    public Uri get_Uri();
}
public class Prism.Navigation.Regions.RegionNavigationFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private NavigationContext <NavigationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public NavigationContext NavigationContext { get; }
    public Exception Error { get; }
    public Uri Uri { get; }
    public RegionNavigationFailedEventArgs(NavigationContext navigationContext);
    public RegionNavigationFailedEventArgs(NavigationContext navigationContext, Exception error);
    [CompilerGeneratedAttribute]
public NavigationContext get_NavigationContext();
    [CompilerGeneratedAttribute]
public Exception get_Error();
    public Uri get_Uri();
}
public class Prism.Navigation.Regions.RegionNavigationJournal : object {
    private Stack`1<IRegionNavigationJournalEntry> backStack;
    private Stack`1<IRegionNavigationJournalEntry> forwardStack;
    private bool isNavigatingInternal;
    [CompilerGeneratedAttribute]
private INavigateAsync <NavigationTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IRegionNavigationJournalEntry <CurrentEntry>k__BackingField;
    public INavigateAsync NavigationTarget { get; public set; }
    public IRegionNavigationJournalEntry CurrentEntry { get; private set; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    [CompilerGeneratedAttribute]
public sealed virtual INavigateAsync get_NavigationTarget();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NavigationTarget(INavigateAsync value);
    [CompilerGeneratedAttribute]
public sealed virtual IRegionNavigationJournalEntry get_CurrentEntry();
    [CompilerGeneratedAttribute]
private void set_CurrentEntry(IRegionNavigationJournalEntry value);
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool get_CanGoForward();
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
    public sealed virtual void RecordNavigation(IRegionNavigationJournalEntry entry, bool persistInHistory);
    public sealed virtual void Clear();
    private void InternalNavigate(IRegionNavigationJournalEntry entry, Action`1<bool> callback);
}
public class Prism.Navigation.Regions.RegionNavigationJournalEntry : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationParameters <Parameters>k__BackingField;
    public Uri Uri { get; public set; }
    public INavigationParameters Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual INavigationParameters get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(INavigationParameters value);
    public virtual string ToString();
}
public class Prism.Navigation.Regions.RegionViewException : RegionException {
    public RegionViewException(string message);
    public RegionViewException(SerializationInfo info, StreamingContext context);
    public RegionViewException(string message, Exception innerException);
}
[ExtensionAttribute]
public static class Prism.Navigation.Regions.RegionViewRegistryExtensions : object {
    [ExtensionAttribute]
public static void RegisterViewWithRegion(IRegionViewRegistry viewRegistry, string regionName, Func`1<object> getContentDelegate);
    [ExtensionAttribute]
public static IEnumerable`1<object> GetContents(IRegionViewRegistry viewRegistry, string regionName);
}
[AttributeUsageAttribute("4")]
public class Prism.Navigation.Regions.SyncActiveStateAttribute : Attribute {
}
public class Prism.Navigation.Regions.UpdateRegionsException : Exception {
    public UpdateRegionsException(string message);
    public UpdateRegionsException(string message, Exception inner);
    protected UpdateRegionsException(SerializationInfo info, StreamingContext context);
}
public class Prism.Navigation.Regions.ViewRegisteredEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <RegionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IContainerProvider, object> <GetView>k__BackingField;
    public string RegionName { get; private set; }
    public Func`2<IContainerProvider, object> GetView { get; private set; }
    public ViewRegisteredEventArgs(string regionName, Func`2<IContainerProvider, object> getViewDelegate);
    [CompilerGeneratedAttribute]
public string get_RegionName();
    [CompilerGeneratedAttribute]
private void set_RegionName(string value);
    [CompilerGeneratedAttribute]
public Func`2<IContainerProvider, object> get_GetView();
    [CompilerGeneratedAttribute]
private void set_GetView(Func`2<IContainerProvider, object> value);
}
public class Prism.Navigation.Regions.ViewRegistrationException : Exception {
    public ViewRegistrationException(string message);
    public ViewRegistrationException(string message, Exception inner);
    protected ViewRegistrationException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("4")]
public class Prism.Navigation.Regions.ViewSortHintAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    public string Hint { get; }
    public ViewSortHintAttribute(string hint);
    [CompilerGeneratedAttribute]
public string get_Hint();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Prism.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotRegisterCompositeCommandInItself { get; }
    internal static string CannotRegisterSameCommandTwice { get; }
    internal static string CanOnlyAddTypesThatInheritIFromRegionBehavior { get; }
    internal static string CyclicDependencyFound { get; }
    internal static string DefaultDebugLoggerPattern { get; }
    internal static string DelegateCommandDelegatesCannotBeNull { get; }
    internal static string DelegateCommandInvalidGenericPayloadType { get; }
    internal static string DependencyForUnknownModule { get; }
    internal static string DependencyOnMissingModule { get; }
    internal static string DuplicatedModule { get; }
    internal static string FailedToLoadModule { get; }
    internal static string FailedToLoadModuleNoAssemblyInfo { get; }
    internal static string FailedToRetrieveModule { get; }
    internal static string InvalidPropertyNameException { get; }
    internal static string ModuleDependenciesNotMetInGroup { get; }
    internal static string PropertySupport_ExpressionNotProperty_Exception { get; }
    internal static string PropertySupport_NotMemberAccessExpression_Exception { get; }
    internal static string PropertySupport_StaticExpression_Exception { get; }
    internal static string RegionBehaviorAttachCannotBeCallWithNullRegion { get; }
    internal static string RegionBehaviorRegionCannotBeSetAfterAttach { get; }
    internal static string StartupModuleDependsOnAnOnDemandModule { get; }
    internal static string StringCannotBeNullOrEmpty { get; }
    internal static string TypeWithKeyNotRegistered { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotRegisterCompositeCommandInItself();
    internal static string get_CannotRegisterSameCommandTwice();
    internal static string get_CanOnlyAddTypesThatInheritIFromRegionBehavior();
    internal static string get_CyclicDependencyFound();
    internal static string get_DefaultDebugLoggerPattern();
    internal static string get_DelegateCommandDelegatesCannotBeNull();
    internal static string get_DelegateCommandInvalidGenericPayloadType();
    internal static string get_DependencyForUnknownModule();
    internal static string get_DependencyOnMissingModule();
    internal static string get_DuplicatedModule();
    internal static string get_FailedToLoadModule();
    internal static string get_FailedToLoadModuleNoAssemblyInfo();
    internal static string get_FailedToRetrieveModule();
    internal static string get_InvalidPropertyNameException();
    internal static string get_ModuleDependenciesNotMetInGroup();
    internal static string get_PropertySupport_ExpressionNotProperty_Exception();
    internal static string get_PropertySupport_NotMemberAccessExpression_Exception();
    internal static string get_PropertySupport_StaticExpression_Exception();
    internal static string get_RegionBehaviorAttachCannotBeCallWithNullRegion();
    internal static string get_RegionBehaviorRegionCannotBeSetAfterAttach();
    internal static string get_StartupModuleDependsOnAnOnDemandModule();
    internal static string get_StringCannotBeNullOrEmpty();
    internal static string get_TypeWithKeyNotRegistered();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExtensionAttribute]
public static class System.Threading.Tasks.TaskExtensions : object {
    [ExtensionAttribute]
public static void Await(Task task);
    [ExtensionAttribute]
public static void Await(Task task, bool configureAwait);
    [ExtensionAttribute]
public static void Await(Task task, Action completedCallback);
    [ExtensionAttribute]
public static void Await(Task task, Action completedCallback, Action`1<Exception> errorCallback);
    [ExtensionAttribute]
public static void Await(Task task, Action`1<Exception> errorCallback);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskExtensions/<Await>d__5")]
[ExtensionAttribute]
public static void Await(Task task, Action completedCallback, Action`1<Exception> errorCallback, bool configureAwait);
}
[ExtensionAttribute]
public static class System.Threading.Tasks.TaskExtensionsT : object {
    [ExtensionAttribute]
public static void Await(Task`1<T> task);
    [ExtensionAttribute]
public static void Await(Task`1<T> task, bool configureAwait);
    [ExtensionAttribute]
public static void Await(Task`1<T> task, Action`1<T> completedCallback);
    [ExtensionAttribute]
public static void Await(Task`1<T> task, Action`1<T> completedCallback, Action`1<Exception> errorCallback);
    [ExtensionAttribute]
public static void Await(Task`1<T> task, Action`1<Exception> errorCallback);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskExtensionsT/<Await>d__5`1")]
[ExtensionAttribute]
public static void Await(Task`1<T> task, Action`1<T> completedCallback, Action`1<Exception> errorCallback, bool configureAwait);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.141.978")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
