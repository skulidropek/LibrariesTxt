[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Prism.AppModel.ApplicationStore : object {
    public IDictionary`2<string, object> Properties { get; }
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual Task SavePropertiesAsync();
}
public enum Prism.AppModel.FlowDirection : Enum {
    public int value__;
    public static FlowDirection MatchParent;
    public static FlowDirection LeftToRight;
    public static FlowDirection RightToLeft;
}
public interface Prism.AppModel.IApplicationLifecycleAware {
    public abstract virtual void OnResume();
    public abstract virtual void OnSleep();
}
public interface Prism.AppModel.IApplicationStore {
    public IDictionary`2<string, object> Properties { get; }
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual Task SavePropertiesAsync();
}
public interface Prism.AppModel.IKeyboardMapper {
    public abstract virtual Keyboard Map(KeyboardType keyboardType);
}
public interface Prism.AppModel.IPageLifecycleAware {
    public abstract virtual void OnAppearing();
    public abstract virtual void OnDisappearing();
}
public class Prism.AppModel.KeyboardMapper : object {
    public virtual Keyboard Map(KeyboardType keyboardType);
}
public enum Prism.AppModel.KeyboardType : Enum {
    public int value__;
    public static KeyboardType Chat;
    public static KeyboardType Default;
    public static KeyboardType Email;
    public static KeyboardType Numeric;
    public static KeyboardType Plain;
    public static KeyboardType Telephone;
    public static KeyboardType Text;
    public static KeyboardType Url;
}
public enum Prism.AppModel.RuntimePlatform : Enum {
    public int value__;
    public static RuntimePlatform Android;
    public static RuntimePlatform GTK;
    public static RuntimePlatform iOS;
    public static RuntimePlatform macOS;
    public static RuntimePlatform Tizen;
    public static RuntimePlatform UWP;
    public static RuntimePlatform WPF;
    public static RuntimePlatform Unknown;
}
public class Prism.Behaviors.BehaviorBase`1 : Behavior`1<T> {
    [CompilerGeneratedAttribute]
private T <AssociatedObject>k__BackingField;
    public T AssociatedObject { get; private set; }
    [CompilerGeneratedAttribute]
public T get_AssociatedObject();
    [CompilerGeneratedAttribute]
private void set_AssociatedObject(T value);
    protected virtual void OnAttachedTo(T bindable);
    protected virtual void OnDetachingFrom(T bindable);
    private void OnBindingContextChanged(object sender, EventArgs e);
    protected virtual void OnBindingContextChanged();
}
public class Prism.Behaviors.CarouselPageActiveAwareBehavior : MultiPageActiveAwareBehavior`1<ContentPage> {
}
public class Prism.Behaviors.EventToCommandBehavior : BehaviorBase`1<BindableObject> {
    public static BindableProperty EventNameProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty EventArgsConverterProperty;
    public static BindableProperty EventArgsConverterParameterProperty;
    public static BindableProperty EventArgsParameterPathProperty;
    protected EventInfo _eventInfo;
    protected Delegate _handler;
    public string EventArgsParameterPath { get; public set; }
    public string EventName { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IValueConverter EventArgsConverter { get; public set; }
    public object EventArgsConverterParameter { get; public set; }
    private static EventToCommandBehavior();
    public string get_EventArgsParameterPath();
    public void set_EventArgsParameterPath(string value);
    public string get_EventName();
    public void set_EventName(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public IValueConverter get_EventArgsConverter();
    public void set_EventArgsConverter(IValueConverter value);
    public object get_EventArgsConverterParameter();
    public void set_EventArgsConverterParameter(object value);
    protected virtual void OnAttachedTo(BindableObject bindable);
    protected virtual void OnDetachingFrom(BindableObject bindable);
    private void AddEventHandler(EventInfo eventInfo, object item, Action`2<object, EventArgs> action);
    protected virtual void OnEventRaised(object sender, EventArgs eventArgs);
}
public interface Prism.Behaviors.IPageBehaviorFactory {
    public abstract virtual void ApplyPageBehaviors(Page page);
}
public class Prism.Behaviors.MultiPageActiveAwareBehavior`1 : BehaviorBase`1<MultiPage`1<T>> {
    protected T _lastSelectedPage;
    protected virtual void OnAttachedTo(MultiPage`1<T> bindable);
    protected virtual void OnDetachingFrom(MultiPage`1<T> bindable);
    protected void CurrentPageChangedHandler(object sender, EventArgs e);
    protected void RootPageAppearingHandler(object sender, EventArgs e);
    protected void RootPageDisappearingHandler(object sender, EventArgs e);
    private void SetIsActive(object view, bool isActive);
}
public class Prism.Behaviors.NavigationPageActiveAwareBehavior : BehaviorBase`1<NavigationPage> {
    protected virtual void OnAttachedTo(NavigationPage bindable);
    protected virtual void OnDetachingFrom(NavigationPage bindable);
    private void NavigationPage_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void NavigationPage_PropertyChanging(object sender, PropertyChangingEventArgs e);
}
public class Prism.Behaviors.NavigationPageSystemGoBackBehavior : BehaviorBase`1<NavigationPage> {
    protected virtual void OnAttachedTo(NavigationPage bindable);
    protected virtual void OnDetachingFrom(NavigationPage bindable);
    private void NavigationPage_Popped(object sender, NavigationEventArgs e);
}
public class Prism.Behaviors.PageBehaviorFactory : object {
    protected virtual void ApplyCarouselPageBehaviors(CarouselPage page);
    protected virtual void ApplyContentPageBehaviors(ContentPage page);
    [ObsoleteAttribute("MasterDetailPage is obsolete, please use FlyoutPage")]
protected virtual void ApplyMasterDetailPageBehaviors(MasterDetailPage page);
    protected virtual void ApplyFlyoutPageBehaviors(FlyoutPage page);
    protected virtual void ApplyNavigationPageBehaviors(NavigationPage page);
    protected virtual void ApplyPageBehaviors(Page page);
    private sealed virtual override void Prism.Behaviors.IPageBehaviorFactory.ApplyPageBehaviors(Page page);
    protected virtual void ApplyTabbedPageBehaviors(TabbedPage page);
}
public class Prism.Behaviors.PageLifeCycleAwareBehavior : BehaviorBase`1<Page> {
    protected virtual void OnAttachedTo(Page bindable);
    protected virtual void OnDetachingFrom(Page bindable);
    private void OnAppearing(object sender, EventArgs e);
    private void OnDisappearing(object sender, EventArgs e);
}
public class Prism.Behaviors.PageScopeBehavior : BehaviorBase`1<Page> {
    protected virtual void OnAttachedTo(Page page);
    protected virtual void OnDetachingFrom(Page page);
}
public class Prism.Behaviors.TabbedPageActiveAwareBehavior : MultiPageActiveAwareBehavior`1<Page> {
}
public class Prism.Common.ApplicationProvider : object {
    public Page MainPage { get; public set; }
    public sealed virtual Page get_MainPage();
    public sealed virtual void set_MainPage(Page value);
}
public interface Prism.Common.IApplicationProvider {
    public Page MainPage { get; public set; }
    public abstract virtual Page get_MainPage();
    public abstract virtual void set_MainPage(Page value);
}
public interface Prism.Common.IPageAware {
    public Page Page { get; public set; }
    public abstract virtual Page get_Page();
    public abstract virtual void set_Page(Page value);
}
[ExtensionAttribute]
public static class Prism.Common.PageUtilities : object {
    private static Func`2<Page, Page> _getCurrentPage;
    private static PageUtilities();
    public static void InvokeViewAndViewModelAction(object view, Action`1<T> action);
    [AsyncStateMachineAttribute("Prism.Common.PageUtilities/<InvokeViewAndViewModelActionAsync>d__1`1")]
public static Task InvokeViewAndViewModelActionAsync(object view, Func`2<T, Task> action);
    public static void DestroyPage(Page page);
    private static void DestroyChildren(Page page);
    public static void DestroyWithModalStack(Page page, IList`1<Page> modalStack);
    public static Task`1<bool> CanNavigateAsync(object page, INavigationParameters parameters);
    public static bool CanNavigate(object page, INavigationParameters parameters);
    public static void OnNavigatedFrom(object page, INavigationParameters parameters);
    [AsyncStateMachineAttribute("Prism.Common.PageUtilities/<OnInitializedAsync>d__8")]
public static Task OnInitializedAsync(object page, INavigationParameters parameters);
    [ExtensionAttribute]
private static bool HasKey(IEnumerable`1<KeyValuePair`2<string, object>> parameters, string name, String& key);
    public static void OnNavigatedTo(object page, INavigationParameters parameters);
    public static Page GetOnNavigatedToTarget(Page page, Page mainPage, bool useModalNavigation);
    public static Page GetOnNavigatedToTargetFromChild(Page target);
    public static Page GetPreviousPage(Page currentPage, IReadOnlyList`1<Page> navStack);
    public static int GetCurrentPageIndex(Page currentPage, IReadOnlyList`1<Page> navStack);
    public static Page GetCurrentPage(Page mainPage);
    [EditorBrowsableAttribute("1")]
public static void SetCurrentPageDelegate(Func`2<Page, Page> getCurrentPageDelegate);
    public static void HandleSystemGoBack(Page previousPage, Page currentPage);
    internal static bool HasDirectNavigationPageParent(Page page);
    internal static bool HasNavigationPageParent(Page page);
    internal static bool HasNavigationPageParent(Page page, NavigationPage& navigationPage);
    internal static bool IsSameOrSubclassOf(Type potentialDescendant);
    [EditorBrowsableAttribute("1")]
public static void SetAutowireViewModel(VisualElement element);
}
internal class Prism.Dialogs.DialogContainer : ContentView {
    public static BindableProperty IsPageContentProperty;
    public static BindableProperty IsPopupContentProperty;
    public bool IsPageContent { get; public set; }
    public bool IsPopupContent { get; public set; }
    private static DialogContainer();
    public bool get_IsPageContent();
    public void set_IsPageContent(bool value);
    public bool get_IsPopupContent();
    public void set_IsPopupContent(bool value);
}
internal class Prism.Dialogs.DialogPage : ContentPage {
    [CompilerGeneratedAttribute]
private View <DialogView>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Dismiss>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<IDialogResult> DialogResult;
    public View DialogView { get; public set; }
    public ICommand Dismiss { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual View get_DialogView();
    [CompilerGeneratedAttribute]
public void set_DialogView(View value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Dismiss();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dismiss(ICommand value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DialogResult(EventHandler`1<IDialogResult> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DialogResult(EventHandler`1<IDialogResult> value);
    public sealed virtual void RaiseDialogResult(IDialogResult result);
}
public class Prism.Dialogs.DialogService : object {
    public static string PopupOverlayStyle;
    [CompilerGeneratedAttribute]
private IContainerProvider <_containerExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationProvider <_applicationProvider>k__BackingField;
    private IContainerProvider _containerExtension { get; }
    private IApplicationProvider _applicationProvider { get; }
    public DialogService(IApplicationProvider applicationProvider, IContainerProvider containerProvider);
    [CompilerGeneratedAttribute]
private IContainerProvider get__containerExtension();
    [CompilerGeneratedAttribute]
private IApplicationProvider get__applicationProvider();
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogService/<ShowDialog>d__8")]
public sealed virtual void ShowDialog(string name, IDialogParameters parameters, DialogCallback callback);
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogService/<CloseDialogAsync>d__9")]
private Task`1<IDialogResult> CloseDialogAsync(IDialogResult result, ContentPage currentPage, DialogPage dialogModal);
    private View CreateViewFor(string name);
    private IDialogAware GetDialogController(View view);
    private IDialogAware InitializeDialog(View view, IDialogParameters parameters);
    private ContentPage GetCurrentContentPage();
    private ContentPage TryGetModalPage(ContentPage cp);
    private ContentPage GetCurrentPage(Page page);
    [AsyncStateMachineAttribute("Prism.Dialogs.DialogService/<InsertPopupViewInCurrentPage>d__16")]
private void InsertPopupViewInCurrentPage(ContentPage currentPage, DialogPage modalPage, View popupView, bool hideOnBackgroundTapped, DialogCloseListener closeEvent);
    private static Style GetOverlayStyle(View popupView);
}
public interface Prism.Dialogs.IDialogContainer {
    public View DialogView { get; }
    public ICommand Dismiss { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DialogResult(EventHandler`1<IDialogResult> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DialogResult(EventHandler`1<IDialogResult> value);
    public abstract virtual View get_DialogView();
    public abstract virtual void RaiseDialogResult(IDialogResult result);
    public abstract virtual ICommand get_Dismiss();
    public abstract virtual void set_Dismiss(ICommand value);
}
[ExtensionAttribute]
internal static class Prism.Dialogs.IDialogContainerExtensions : object {
    [ExtensionAttribute]
public static Task`1<IDialogResult> RequestCloseAsync(IDialogContainer container);
}
public static class Prism.Dialogs.KnownDialogParameters : object {
    public static string CloseOnBackgroundTapped;
    public static string XamlParam;
}
internal class Prism.Dialogs.RelativeContentSizeConverter : object {
    private double relativeSize;
    public double RelativeSize { get; public set; }
    public double get_RelativeSize();
    public void set_RelativeSize(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public static class Prism.Dialogs.Xaml.DialogLayout : object {
    public static BindableProperty RelativeWidthRequestProperty;
    public static BindableProperty RelativeHeightRequestProperty;
    public static BindableProperty LayoutBoundsProperty;
    public static BindableProperty MaskStyleProperty;
    public static BindableProperty MaskProperty;
    public static BindableProperty UseMaskProperty;
    public static BindableProperty CloseOnBackgroundTappedProperty;
    private static DialogLayout();
    public static Nullable`1<double> GetRelativeWidthRequest(BindableObject bindable);
    public static void SetRelativeWidthRequest(BindableObject bindable, Nullable`1<double> value);
    public static Nullable`1<double> GetRelativeHeightRequest(BindableObject bindable);
    public static void SetRelativeHeightRequest(BindableObject bindable, Nullable`1<double> value);
    public static Rectangle GetLayoutBounds(BindableObject bindable);
    public static void SetLayoutBounds(BindableObject bindable, Rectangle value);
    public static Style GetMaskStyle(BindableObject bindable);
    public static void SetMaskStyle(BindableObject bindable, Style value);
    public static View GetMask(BindableObject bindable);
    public static void SetMask(BindableObject bindable, View value);
    public static Nullable`1<bool> GetUseMask(BindableObject bindable);
    public static void SetUseMask(BindableObject bindable, Nullable`1<bool> value);
    public static Nullable`1<bool> GetCloseOnBackgroundTapped(BindableObject bindable);
    public static void SetCloseOnBackgroundTapped(BindableObject bindable, Nullable`1<bool> value);
}
[ContentPropertyAttribute("Name")]
public class Prism.Dialogs.Xaml.ShowDialogExtension : ParentPageAwareExtension`1<ICommand> {
    public static Lazy`1<IDialogService> LazyDialogService;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExecuting>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public string Name { get; public set; }
    public bool IsExecuting { get; public set; }
    private static ShowDialogExtension();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExecuting();
    [CompilerGeneratedAttribute]
public void set_IsExecuting(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    private void DialogClosedCallback(IDialogResult result);
    protected virtual void OnDialogClosed(IDialogResult result);
    protected virtual ICommand ProvideValue();
}
[ExtensionAttribute]
internal static class Prism.Extensions.VisualElementExtensions : object {
    [ExtensionAttribute]
public static bool TryGetParentPage(VisualElement element, Page& page);
    private static Page GetParentPage(Element visualElement);
}
public class Prism.Ioc.ContainerProvider`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public static T op_Implicit(ContainerProvider`1<T> containerProvider);
}
[ExtensionAttribute]
public static class Prism.Ioc.IContainerRegistryExtensions : object {
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, Type viewType, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, Type viewType, Type viewModelType, string name);
    [ExtensionAttribute]
[ObsoleteAttribute("This signature of the RegisterForNavigationOnPlatform method is obsolete due to Device.OnPlatform being deprecated. Use the new IPlatform[] overload instead.")]
[EditorBrowsableAttribute("1")]
public static void RegisterForNavigationOnPlatform(IContainerRegistry containerRegistry, string name, Type androidView, Type iOSView, Type otherView, Type windowsView, Type winPhoneView);
    [ExtensionAttribute]
public static void RegisterForNavigationOnPlatform(IContainerRegistry containerRegistry, IPlatform[] platforms);
    [ExtensionAttribute]
public static void RegisterForNavigationOnPlatform(IContainerRegistry containerRegistry, string name, IPlatform[] platforms);
    [ExtensionAttribute]
public static void RegisterForNavigationOnIdiom(IContainerRegistry containerRegistry, string name, Type desktopView, Type tabletView, Type phoneView);
    [ExtensionAttribute]
private static void RegisterForNavigationWithViewModel(IContainerRegistry containerRegistry, Type viewType, string name);
    [ExtensionAttribute]
private static void RegisterForNavigationWithViewModel(IContainerRegistry containerRegistry, Type viewType, Type viewModelType, string name);
    [ExtensionAttribute]
public static IContainerRegistry RegisterDialog(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static IContainerRegistry RegisterDialog(IContainerRegistry containerRegistry, string name);
}
public interface Prism.Ioc.IResolverOverridesHelper {
    public abstract virtual IEnumerable`1<ValueTuple`2<Type, object>> GetOverrides();
}
public interface Prism.IPlatform {
    public RuntimePlatform RuntimePlatform { get; }
    public Type ViewType { get; }
    public abstract virtual RuntimePlatform get_RuntimePlatform();
    public abstract virtual Type get_ViewType();
}
public interface Prism.IPlatformInitializer {
    public abstract virtual void RegisterTypes(IContainerRegistry containerRegistry);
}
[ExtensionAttribute]
public static class Prism.Modularity.IModuleCatalogExtensions : object {
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, InitializationMode mode);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name, InitializationMode mode);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, InitializationMode mode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name, InitializationMode mode, String[] dependsOn);
}
[ContentPropertyAttribute("Items")]
public class Prism.Modularity.ModuleCatalog : ModuleCatalogBase {
}
[ContentPropertyAttribute("DependsOn")]
public class Prism.Modularity.ModuleInfo : object {
    private string _moduleName;
    private Type _moduleType;
    private Collection`1<string> _dependsOn;
    [CompilerGeneratedAttribute]
private InitializationMode <InitializationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleState <State>k__BackingField;
    public string ModuleName { get; public set; }
    private string Prism.Modularity.IModuleInfo.ModuleType { get; private set; }
    public Type ModuleType { get; public set; }
    public Collection`1<string> DependsOn { get; public set; }
    public InitializationMode InitializationMode { get; public set; }
    private string Prism.Modularity.IModuleInfo.Ref { get; private set; }
    public ModuleState State { get; private set; }
    private ModuleState Prism.Modularity.IModuleInfo.State { get; private set; }
    public ModuleInfo(string name, string type, String[] dependsOn);
    public ModuleInfo(string name, string type);
    public ModuleInfo(Type moduleType);
    public ModuleInfo(Type moduleType, string moduleName);
    public ModuleInfo(Type moduleType, string moduleName, InitializationMode initializationMode);
    public sealed virtual string get_ModuleName();
    public sealed virtual void set_ModuleName(string value);
    private sealed virtual override string Prism.Modularity.IModuleInfo.get_ModuleType();
    private sealed virtual override void Prism.Modularity.IModuleInfo.set_ModuleType(string value);
    public Type get_ModuleType();
    public void set_ModuleType(Type value);
    public sealed virtual Collection`1<string> get_DependsOn();
    public sealed virtual void set_DependsOn(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual InitializationMode get_InitializationMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InitializationMode(InitializationMode value);
    private sealed virtual override string Prism.Modularity.IModuleInfo.get_Ref();
    private sealed virtual override void Prism.Modularity.IModuleInfo.set_Ref(string value);
    [CompilerGeneratedAttribute]
public ModuleState get_State();
    [CompilerGeneratedAttribute]
private void set_State(ModuleState value);
    private sealed virtual override ModuleState Prism.Modularity.IModuleInfo.get_State();
    private sealed virtual override void Prism.Modularity.IModuleInfo.set_State(ModuleState value);
}
public class Prism.Modularity.ModuleInitializer : object {
    private IContainerExtension _container;
    public ModuleInitializer(IContainerExtension container);
    public sealed virtual void Initialize(IModuleInfo moduleInfo);
    protected virtual IModule CreateModule(Type moduleType);
}
public class Prism.Modularity.ModuleManager : object {
    [CompilerGeneratedAttribute]
private IModuleCatalog <ModuleCatalog>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadModuleCompletedEventArgs> LoadModuleCompleted;
    [CompilerGeneratedAttribute]
private IModuleInitializer <ModuleInitializer>k__BackingField;
    protected IModuleCatalog ModuleCatalog { get; }
    public IEnumerable`1<IModuleInfo> Modules { get; }
    protected IModuleInitializer ModuleInitializer { get; }
    public ModuleManager(IModuleInitializer moduleInitializer, IModuleCatalog moduleCatalog);
    [CompilerGeneratedAttribute]
protected IModuleCatalog get_ModuleCatalog();
    public sealed virtual IEnumerable`1<IModuleInfo> get_Modules();
    [CompilerGeneratedAttribute]
public sealed virtual void add_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    public sealed virtual void add_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    public sealed virtual void remove_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
protected IModuleInitializer get_ModuleInitializer();
    public sealed virtual void Run();
    public sealed virtual void LoadModule(string moduleName);
    protected void LoadModulesWhenAvailable();
    protected virtual void LoadModules(IEnumerable`1<IModuleInfo> moduleInfos);
    protected void RaiseLoadModuleCompleted(IModuleInfo moduleInfo, Exception ex);
}
public static class Prism.Mvvm.ViewModelLocator : object {
    public static BindableProperty AutowireViewModelProperty;
    private static ViewModelLocator();
    public static Nullable`1<bool> GetAutowireViewModel(BindableObject bindable);
    public static void SetAutowireViewModel(BindableObject bindable, Nullable`1<bool> value);
    private static void OnAutowireViewModelChanged(BindableObject bindable, object oldValue, object newValue);
    private static void Bind(object view, object viewModel);
}
public interface Prism.Navigation.IConfirmNavigation {
    public abstract virtual bool CanNavigate(INavigationParameters parameters);
}
public interface Prism.Navigation.IConfirmNavigationAsync {
    public abstract virtual Task`1<bool> CanNavigateAsync(INavigationParameters parameters);
}
public interface Prism.Navigation.IFlyoutPageOptions {
    public bool IsPresentedAfterNavigation { get; }
    public abstract virtual bool get_IsPresentedAfterNavigation();
}
public interface Prism.Navigation.IInitialize {
    public abstract virtual void Initialize(INavigationParameters parameters);
}
public interface Prism.Navigation.IInitializeAsync {
    public abstract virtual Task InitializeAsync(INavigationParameters parameters);
}
[ObsoleteAttribute("Xamarin.Forms now prefers use of the FlyoutPage. Please use IFlyoutPageOptions instead.")]
public interface Prism.Navigation.IMasterDetailPageOptions {
}
public interface Prism.Navigation.INavigatedAware {
    public abstract virtual void OnNavigatedFrom(INavigationParameters parameters);
    public abstract virtual void OnNavigatedTo(INavigationParameters parameters);
}
[ObsoleteAttribute("Use IInitialize, IInitializeAsync, or IAutoInitialize instead", "True")]
public interface Prism.Navigation.INavigatingAware {
    [ObsoleteAttribute("Use IInitialize, IInitializeAsync, or IAutoInitialize instead", "True")]
public abstract virtual void OnNavigatingTo(INavigationParameters parameters);
}
public interface Prism.Navigation.INavigationAware {
}
public interface Prism.Navigation.INavigationPageOptions {
    public bool ClearNavigationStackOnNavigation { get; }
    public abstract virtual bool get_ClearNavigationStackOnNavigation();
}
public interface Prism.Navigation.INavigationService {
    public abstract virtual Task`1<INavigationResult> GoBackAsync();
    public abstract virtual Task`1<INavigationResult> GoBackAsync(INavigationParameters parameters);
    public abstract virtual Task`1<INavigationResult> GoBackAsync(INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    public abstract virtual Task`1<INavigationResult> GoBackToRootAsync(INavigationParameters parameters);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(Uri uri);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(Uri uri, INavigationParameters parameters);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(string name);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(string name, INavigationParameters parameters);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(string name, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    public abstract virtual Task`1<INavigationResult> NavigateAsync(Uri uri, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
}
[ExtensionAttribute]
public static class Prism.Navigation.INavigationServiceExtensions : object {
    [ExtensionAttribute]
public static void OnNavigationError(Task`1<INavigationResult> navigationTask, Action`1<Exception> errorCallback);
    [ExtensionAttribute]
public static Task`1<INavigationResult> GoBackToRootAsync(INavigationService navigationService, INavigationParameters parameters);
    [ExtensionAttribute]
public static string GetNavigationUriPath(INavigationService navigationService);
    [ExtensionAttribute]
public static Task`1<INavigationResult> GoBackAsync(INavigationService navigationService, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [ExtensionAttribute]
public static Task`1<INavigationResult> NavigateAsync(INavigationService navigationService, string name, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [ExtensionAttribute]
public static Task`1<INavigationResult> GoBackAsync(INavigationService navigationService, ValueTuple`2[] parameters);
    [ExtensionAttribute]
public static Task`1<INavigationResult> NavigateAsync(INavigationService navigationService, string name, ValueTuple`2[] parameters);
    [ExtensionAttribute]
public static Task`1<INavigationResult> NavigateAsync(INavigationService navigationService, Uri uri, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [ExtensionAttribute]
public static Task`1<INavigationResult> NavigateAsync(INavigationService navigationService, Uri uri, ValueTuple`2[] parameters);
    private static INavigationParameters GetNavigationParameters(ValueTuple`2[] parameters);
    private static void ProcessNavigationPath(Page page, Stack`1<string> stack);
    private static void ProcessModalNavigation(Page page, Stack`1<string> stack);
    private static void ProcessMainPagePath(Page mainPage, Page previousPage, Stack`1<string> stack);
    private static void ProcessModalNavigationPagePath(NavigationPage page, Stack`1<string> stack);
    private static void ProcessModalFlyoutPagePath(FlyoutPage page, Stack`1<string> stack);
    private static Page ProcessCurrentPageNavigationPath(Page page, Stack`1<string> stack);
    private static void AddSegmentToStack(Page page, Stack`1<string> stack);
    private static void AddUseModalNavigationParameter(Stack`1<string> stack);
}
internal static class Prism.Navigation.KnownInternalParameters : object {
    public static string NavigationMode;
}
public static class Prism.Navigation.KnownNavigationParameters : object {
    public static string CreateTab;
    public static string SelectedTab;
    public static string UseModalNavigation;
    public static string XamlParam;
}
public enum Prism.Navigation.NavigationMode : Enum {
    public int value__;
    public static NavigationMode Back;
    public static NavigationMode New;
}
[ExtensionAttribute]
public static class Prism.Navigation.NavigationParametersExtensions : object {
    [ExtensionAttribute]
public static NavigationMode GetNavigationMode(INavigationParameters parameters);
    [ExtensionAttribute]
internal static INavigationParametersInternal GetNavigationParametersInternal(INavigationParameters parameters);
}
public class Prism.Navigation.PageNavigationInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public static class Prism.Navigation.PageNavigationRegistry : object {
    private static Dictionary`2<string, PageNavigationInfo> _pageRegistrationCache;
    private static PageNavigationRegistry();
    public static void Register(string name, Type pageType);
    public static PageNavigationInfo GetPageNavigationInfo(string name);
    public static PageNavigationInfo GetPageNavigationInfo(Type pageType);
    public static Type GetPageType(string name);
    [EditorBrowsableAttribute("1")]
public static void ClearRegistrationCache();
}
public class Prism.Navigation.PageNavigationService : object {
    internal static string RemovePageRelativePath;
    internal static string RemovePageInstruction;
    internal static string RemovePageSegment;
    [CompilerGeneratedAttribute]
private static PageNavigationSource <NavigationSource>k__BackingField;
    private IContainerProvider _container;
    protected IApplicationProvider _applicationProvider;
    protected IPageBehaviorFactory _pageBehaviorFactory;
    protected Page _page;
    protected internal static PageNavigationSource NavigationSource { get; protected internal set; }
    private Page Prism.Common.IPageAware.Page { get; private set; }
    public PageNavigationService(IContainerProvider container, IApplicationProvider applicationProvider, IPageBehaviorFactory pageBehaviorFactory);
    private static PageNavigationService();
    [CompilerGeneratedAttribute]
protected internal static PageNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
protected internal static void set_NavigationSource(PageNavigationSource value);
    private sealed virtual override Page Prism.Common.IPageAware.get_Page();
    private sealed virtual override void Prism.Common.IPageAware.set_Page(Page value);
    public virtual Task`1<INavigationResult> GoBackAsync();
    public virtual Task`1<INavigationResult> GoBackAsync(INavigationParameters parameters);
    public virtual Task`1<INavigationResult> GoBackAsync(INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<GoBackInternal>d__18")]
protected virtual Task`1<INavigationResult> GoBackInternal(INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    private static Exception GetGoBackException(Page currentPage, Page mainPage);
    private static bool IsOnNavigationPageRoot(NavigationPage navigationPage);
    private static bool IsMainPage(Page currentPage, Page mainPage);
    public virtual Task`1<INavigationResult> GoBackToRootAsync(INavigationParameters parameters);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<GoBackToRootInternal>d__23")]
protected virtual Task`1<INavigationResult> GoBackToRootInternal(INavigationParameters parameters);
    public virtual Task`1<INavigationResult> NavigateAsync(string name);
    public virtual Task`1<INavigationResult> NavigateAsync(string name, INavigationParameters parameters);
    public sealed virtual Task`1<INavigationResult> NavigateAsync(string name, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    protected virtual Task`1<INavigationResult> NavigateInternal(string name, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    public virtual Task`1<INavigationResult> NavigateAsync(Uri uri);
    public virtual Task`1<INavigationResult> NavigateAsync(Uri uri, INavigationParameters parameters);
    public virtual Task`1<INavigationResult> NavigateAsync(Uri uri, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<NavigateInternal>d__31")]
protected virtual Task`1<INavigationResult> NavigateInternal(Uri uri, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigation>d__32")]
protected virtual Task ProcessNavigation(Page currentPage, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    protected virtual Task ProcessNavigationForRemovePageSegments(Page currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    private bool CanRemoveAndPush(Queue`1<string> segments);
    private Task RemoveAndGoBack(Page currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<RemoveAndPush>d__36")]
private Task RemoveAndPush(Page currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    private static void RemovePagesFromNavigationPage(Page currentPage, List`1<Page> pagesToRemove);
    [ObsoleteAttribute("Renamed to 'ProcessNavigationForAbsoluteUri'")]
protected virtual Task ProcessNavigationForAbsoulteUri(Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    protected virtual Task ProcessNavigationForAbsoluteUri(Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForRootPage>d__40")]
protected virtual Task ProcessNavigationForRootPage(string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForContentPage>d__41")]
protected virtual Task ProcessNavigationForContentPage(Page currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForNavigationPage>d__42")]
protected virtual Task ProcessNavigationForNavigationPage(NavigationPage currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForTabbedPage>d__43")]
protected virtual Task ProcessNavigationForTabbedPage(TabbedPage currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForCarouselPage>d__44")]
protected virtual Task ProcessNavigationForCarouselPage(CarouselPage currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [ObsoleteAttribute("Use ProcessNavigationForFlyoutPage instead")]
protected virtual Task ProcessNavigationForMasterDetailPage(MasterDetailPage currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<ProcessNavigationForFlyoutPage>d__46")]
protected virtual Task ProcessNavigationForFlyoutPage(FlyoutPage currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    protected static bool GetFlyoutPageIsPresented(FlyoutPage page);
    [ObsoleteAttribute("Xamarin.Forms.MasterDetailPage is Obsolete. This may be removed in a future version")]
protected static bool GetMasterDetailPageIsPresented(MasterDetailPage page);
    protected static bool GetClearNavigationPageNavigationStack(NavigationPage page);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<DoNavigateAction>d__50")]
protected static Task DoNavigateAction(Page fromPage, string toSegment, Page toPage, INavigationParameters parameters, Func`1<Task> navigationAction, Action`1<INavigationParameters> onNavigationActionCompleted);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<OnInitializedAsync>d__51")]
private static Task OnInitializedAsync(Page toPage, INavigationParameters parameters);
    private static void OnNavigatedTo(Page toPage, INavigationParameters parameters);
    private static void OnNavigatedFrom(Page fromPage, INavigationParameters parameters);
    protected virtual Page CreatePage(string segmentName);
    protected virtual Page CreatePageFromSegment(string segment);
    protected Page SetNavigationServiceForPage(Page page);
    private void ConfigurePages(Page page, string segment);
    private void ConfigureTabbedPage(TabbedPage tabbedPage, string segment);
    private void ConfigureCarouselPage(CarouselPage carouselPage, string segment);
    private static void SelectPageTab(Page page, INavigationParameters parameters);
    private static void TabbedPageSelectTab(TabbedPage tabbedPage, INavigationParameters parameters);
    private static void CarouselPageSelectTab(CarouselPage carouselPage, INavigationParameters parameters);
    [AsyncStateMachineAttribute("Prism.Navigation.PageNavigationService/<UseReverseNavigation>d__63")]
protected virtual Task UseReverseNavigation(Page currentPage, string nextSegment, Queue`1<string> segments, INavigationParameters parameters, Nullable`1<bool> useModalNavigation, bool animated);
    protected virtual Task DoPush(Page currentPage, Page page, Nullable`1<bool> useModalNavigation, bool animated, bool insertBeforeLast, int navigationOffset);
    protected virtual Task InsertPageBefore(Page currentPage, Page page, int pageOffset);
    protected virtual Task`1<Page> DoPop(INavigation navigation, bool useModalNavigation, bool animated);
    protected virtual Page GetCurrentPage();
    internal static bool UseModalNavigation(Page currentPage, Nullable`1<bool> useModalNavigationDefault);
    internal bool UseModalGoBack(Page currentPage, Nullable`1<bool> useModalNavigationDefault);
    private bool GoBackModal(NavigationPage navPage);
    internal static bool UseReverseNavigation(Page currentPage, Type nextPageType);
    protected static bool IsRoot(Page mainPage, Page currentPage);
}
public enum Prism.Navigation.PageNavigationSource : Enum {
    public int value__;
    public static PageNavigationSource NavigationService;
    public static PageNavigationSource Device;
    public static PageNavigationSource DialogService;
}
[ExtensionAttribute]
public static class Prism.Navigation.TabbedPages.INavigationServiceExtensions : object {
    [AsyncStateMachineAttribute("Prism.Navigation.TabbedPages.INavigationServiceExtensions/<SelectTabAsync>d__0")]
[ExtensionAttribute]
public static Task`1<INavigationResult> SelectTabAsync(INavigationService navigationService, string name, INavigationParameters parameters);
}
[ContentPropertyAttribute("GoBackType")]
public class Prism.Navigation.Xaml.GoBackExtension : NavigationExtensionBase {
    public static BindableProperty GoBackTypeProperty;
    public GoBackType GoBackType { get; public set; }
    private static GoBackExtension();
    public GoBackType get_GoBackType();
    public void set_GoBackType(GoBackType value);
    [AsyncStateMachineAttribute("Prism.Navigation.Xaml.GoBackExtension/<HandleNavigation>d__4")]
protected virtual Task HandleNavigation(INavigationParameters parameters, INavigationService navigationService);
}
public enum Prism.Navigation.Xaml.GoBackType : Enum {
    public int value__;
    public static GoBackType Default;
    public static GoBackType ToRoot;
}
[ContentPropertyAttribute("Name")]
public class Prism.Navigation.Xaml.NavigateToExtension : NavigationExtensionBase {
    public static BindableProperty NameProperty;
    public string Name { get; public set; }
    private static NavigateToExtension();
    public string get_Name();
    public void set_Name(string value);
    [AsyncStateMachineAttribute("Prism.Navigation.Xaml.NavigateToExtension/<HandleNavigation>d__4")]
protected virtual Task HandleNavigation(INavigationParameters parameters, INavigationService navigationService);
    protected virtual void Log(Exception ex, INavigationParameters parameters);
}
public static class Prism.Navigation.Xaml.Navigation : object {
    internal static BindableProperty NavigationServiceProperty;
    internal static BindableProperty NavigationScopeProperty;
    public static BindableProperty CanNavigateProperty;
    internal static BindableProperty RaiseCanExecuteChangedInternalProperty;
    private static Navigation();
    private static void OnNavigationScopeChanged(BindableObject bindable, object oldValue, object newValue);
    public static bool GetCanNavigate(BindableObject view);
    public static void SetCanNavigate(BindableObject view, bool value);
    [EditorBrowsableAttribute("1")]
public static INavigationService GetNavigationService(Page page);
    private static INavigationService CreateNavigationService(IScopedProvider scope, Page page);
    internal static Action GetRaiseCanExecuteChangedInternal(BindableObject view);
    internal static void SetRaiseCanExecuteChangedInternal(BindableObject view, Action value);
    private static void OnCanNavigatePropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
}
public abstract class Prism.Navigation.Xaml.NavigationExtensionBase : ParentPageAwareExtension`1<ICommand> {
    public static BindableProperty AnimatedProperty;
    public static BindableProperty UseModalNavigationProperty;
    [CompilerGeneratedAttribute]
private bool <IsNavigating>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    protected internal bool IsNavigating { get; private set; }
    public bool Animated { get; public set; }
    public Nullable`1<bool> UseModalNavigation { get; public set; }
    private static NavigationExtensionBase();
    [CompilerGeneratedAttribute]
protected internal bool get_IsNavigating();
    [CompilerGeneratedAttribute]
private void set_IsNavigating(bool value);
    public bool get_Animated();
    public void set_Animated(bool value);
    public Nullable`1<bool> get_UseModalNavigation();
    public void set_UseModalNavigation(Nullable`1<bool> value);
    public sealed virtual bool CanExecute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    [AsyncStateMachineAttribute("Prism.Navigation.Xaml.NavigationExtensionBase/<Execute>d__16")]
public sealed virtual void Execute(object parameter);
    protected virtual ICommand ProvideValue();
    protected virtual void OnTargetElementChanged();
    protected virtual void Log(Exception ex, INavigationParameters parameters);
    protected abstract virtual Task HandleNavigation(INavigationParameters parameters, INavigationService navigationService);
    protected void RaiseCanExecuteChanged();
}
[ObsoleteAttribute("Use the generic Parameter class")]
public class Prism.Navigation.Xaml.NavigationParameter : Parameter {
}
[ObsoleteAttribute("Use the new Parameters class")]
public class Prism.Navigation.Xaml.NavigationParameters : Parameters {
}
[ContentPropertyAttribute("Name")]
public class Prism.Navigation.Xaml.SelectTabExtension : ParentPageAwareExtension`1<ICommand> {
    public static BindableProperty NameProperty;
    [CompilerGeneratedAttribute]
private bool <IsNavigating>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public string Name { get; public set; }
    protected internal bool IsNavigating { get; private set; }
    private static SelectTabExtension();
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsNavigating();
    [CompilerGeneratedAttribute]
private void set_IsNavigating(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    [AsyncStateMachineAttribute("Prism.Navigation.Xaml.SelectTabExtension/<Execute>d__12")]
public sealed virtual void Execute(object parameter);
    [AsyncStateMachineAttribute("Prism.Navigation.Xaml.SelectTabExtension/<HandleNavigation>d__13")]
protected Task HandleNavigation(INavigationParameters parameters, INavigationService navigationService);
    protected virtual ICommand ProvideValue();
    protected virtual void Log(Exception ex, INavigationParameters parameters);
    protected void RaiseCanExecuteChanged();
}
public class Prism.Platform`1 : object {
    [CompilerGeneratedAttribute]
private RuntimePlatform <RuntimePlatform>k__BackingField;
    public RuntimePlatform RuntimePlatform { get; }
    public Type ViewType { get; }
    public Platform`1(RuntimePlatform runtimePlatform);
    [CompilerGeneratedAttribute]
public sealed virtual RuntimePlatform get_RuntimePlatform();
    public sealed virtual Type get_ViewType();
}
public abstract class Prism.PrismApplicationBase : Application {
    public static string NavigationServiceName;
    private IContainerExtension _containerExtension;
    private IModuleCatalog _moduleCatalog;
    private Page _previousPage;
    [CompilerGeneratedAttribute]
private INavigationService <NavigationService>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformInitializer <PlatformInitializer>k__BackingField;
    public static PrismApplicationBase Current { get; }
    public IContainerProvider Container { get; }
    protected INavigationService NavigationService { get; protected set; }
    protected IPlatformInitializer PlatformInitializer { get; }
    protected PrismApplicationBase(IPlatformInitializer platformInitializer);
    [ObsoleteAttribute]
protected PrismApplicationBase(IPlatformInitializer platformInitializer, bool setFormsDependencyResolver);
    public static PrismApplicationBase get_Current();
    public IContainerProvider get_Container();
    [CompilerGeneratedAttribute]
protected INavigationService get_NavigationService();
    [CompilerGeneratedAttribute]
protected void set_NavigationService(INavigationService value);
    [CompilerGeneratedAttribute]
protected IPlatformInitializer get_PlatformInitializer();
    private void InitializeInternal();
    protected virtual void ConfigureViewModelLocator();
    private INavigationService CreateNavigationService(object view);
    protected virtual void Initialize();
    protected abstract virtual IContainerExtension CreateContainerExtension();
    protected virtual void RegisterRequiredTypes(IContainerRegistry containerRegistry);
    protected abstract virtual void RegisterTypes(IContainerRegistry containerRegistry);
    protected virtual void ConfigureModuleCatalog(IModuleCatalog moduleCatalog);
    protected virtual void InitializeModules();
    protected abstract virtual void OnInitialized();
    protected virtual void OnResume();
    protected virtual void OnSleep();
    private void PrismApplicationBase_ModalPopping(object sender, ModalPoppingEventArgs e);
    private void PrismApplicationBase_ModalPopped(object sender, ModalPoppedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private object <ConfigureViewModelLocator>b__19_0(object view, Type type);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Prism.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DuplicatedModuleInCatalog { get; }
    internal static string ModuleNotFound { get; }
    internal static string ModuleRefLocationNotSupported { get; }
    internal static string NavigationModeNotAvailable { get; }
    internal static string ServiceProviderDidNotHaveIProvideValueTarget { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DuplicatedModuleInCatalog();
    internal static string get_ModuleNotFound();
    internal static string get_ModuleRefLocationNotSupported();
    internal static string get_NavigationModeNotAvailable();
    internal static string get_ServiceProviderDidNotHaveIProvideValueTarget();
}
public class Prism.Services.ActionSheetButton : ActionSheetButtonBase {
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    public Action Action { get; protected set; }
    [CompilerGeneratedAttribute]
public Action get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(Action value);
    protected virtual void OnButtonPressed();
    public static IActionSheetButton CreateCancelButton(string text);
    public static IActionSheetButton CreateCancelButton(string text, Action action);
    public static IActionSheetButton CreateCancelButton(string text, Action`1<T> action, T parameter);
    public static IActionSheetButton CreateDestroyButton(string text);
    public static IActionSheetButton CreateDestroyButton(string text, Action action);
    public static IActionSheetButton CreateDestroyButton(string text, Action`1<T> action, T parameter);
    public static IActionSheetButton CreateButton(string text, Action action);
    public static IActionSheetButton CreateButton(string text, Action`1<T> action, T parameter);
    private static IActionSheetButton CreateButtonInternal(string text, Action action, bool isCancel, bool isDestroy);
    private static IActionSheetButton CreateButtonInternal(string text, Action`1<T> action, T parameter, bool isCancel, bool isDestroy);
}
public class Prism.Services.ActionSheetButton`1 : ActionSheetButtonBase {
    [CompilerGeneratedAttribute]
private Action`1<T> <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Parameter>k__BackingField;
    public Action`1<T> Action { get; public set; }
    public T Parameter { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<T> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Action`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(T value);
    protected virtual void OnButtonPressed();
}
public abstract class Prism.Services.ActionSheetButtonBase : object {
    [CompilerGeneratedAttribute]
private bool <_isCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isDestroy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <_text>k__BackingField;
    protected bool _isCancel { get; private set; }
    protected bool _isDestroy { get; private set; }
    protected string _text { get; private set; }
    public bool IsCancel { get; protected internal set; }
    public bool IsDestroy { get; protected internal set; }
    public string Text { get; protected internal set; }
    private bool Prism.Services.IActionSheetButton.IsCancel { get; }
    private bool Prism.Services.IActionSheetButton.IsDestroy { get; }
    private string Prism.Services.IActionSheetButton.Text { get; }
    [CompilerGeneratedAttribute]
protected bool get__isCancel();
    [CompilerGeneratedAttribute]
private void set__isCancel(bool value);
    [CompilerGeneratedAttribute]
protected bool get__isDestroy();
    [CompilerGeneratedAttribute]
private void set__isDestroy(bool value);
    [CompilerGeneratedAttribute]
protected string get__text();
    [CompilerGeneratedAttribute]
private void set__text(string value);
    public bool get_IsCancel();
    protected internal void set_IsCancel(bool value);
    public bool get_IsDestroy();
    protected internal void set_IsDestroy(bool value);
    public string get_Text();
    protected internal void set_Text(string value);
    protected abstract virtual void OnButtonPressed();
    private sealed virtual override bool Prism.Services.IActionSheetButton.get_IsCancel();
    private sealed virtual override bool Prism.Services.IActionSheetButton.get_IsDestroy();
    private sealed virtual override string Prism.Services.IActionSheetButton.get_Text();
    private sealed virtual override void Prism.Services.IActionSheetButton.PressButton();
}
public class Prism.Services.DeviceService : object {
    public static string Android;
    public static string GTK;
    public static string iOS;
    public static string macOS;
    public static string Tizen;
    public static string UWP;
    public static string WPF;
    public IReadOnlyList`1<string> Flags { get; }
    public FlowDirection FlowDirection { get; }
    public TargetIdiom Idiom { get; }
    public string DeviceRuntimePlatform { get; }
    public RuntimePlatform RuntimePlatform { get; }
    public sealed virtual IReadOnlyList`1<string> get_Flags();
    public sealed virtual FlowDirection get_FlowDirection();
    public sealed virtual TargetIdiom get_Idiom();
    public sealed virtual string get_DeviceRuntimePlatform();
    public sealed virtual RuntimePlatform get_RuntimePlatform();
    public sealed virtual void BeginInvokeOnMainThread(Action action);
    public sealed virtual Task`1<SynchronizationContext> GetMainThreadSynchronizationContextAsync();
    public sealed virtual Task InvokeOnMainThreadAsync(Action action);
    public sealed virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<T> func);
    public sealed virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<Task`1<T>> funcTask);
    public sealed virtual Task InvokeOnMainThreadAsync(Func`1<Task> funcTask);
    public sealed virtual void SetFlags(IReadOnlyList`1<string> flags);
    public sealed virtual void SetFlowDirection(FlowDirection flowDirection);
    public sealed virtual void StartTimer(TimeSpan interval, Func`1<bool> callBack);
}
public interface Prism.Services.IActionSheetButton {
    public bool IsDestroy { get; }
    public bool IsCancel { get; }
    public string Text { get; }
    public abstract virtual bool get_IsDestroy();
    public abstract virtual bool get_IsCancel();
    public abstract virtual string get_Text();
    public abstract virtual void PressButton();
}
public interface Prism.Services.IDeviceService {
    public IReadOnlyList`1<string> Flags { get; }
    public FlowDirection FlowDirection { get; }
    public TargetIdiom Idiom { get; }
    public string DeviceRuntimePlatform { get; }
    public RuntimePlatform RuntimePlatform { get; }
    public abstract virtual IReadOnlyList`1<string> get_Flags();
    public abstract virtual FlowDirection get_FlowDirection();
    public abstract virtual TargetIdiom get_Idiom();
    public abstract virtual string get_DeviceRuntimePlatform();
    public abstract virtual RuntimePlatform get_RuntimePlatform();
    public abstract virtual void BeginInvokeOnMainThread(Action action);
    public abstract virtual Task`1<SynchronizationContext> GetMainThreadSynchronizationContextAsync();
    public abstract virtual Task InvokeOnMainThreadAsync(Action action);
    public abstract virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<T> func);
    public abstract virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<Task`1<T>> funcTask);
    public abstract virtual Task InvokeOnMainThreadAsync(Func`1<Task> funcTask);
    public abstract virtual void SetFlags(IReadOnlyList`1<string> flags);
    public abstract virtual void SetFlowDirection(FlowDirection flowDirection);
    public abstract virtual void StartTimer(TimeSpan interval, Func`1<bool> callBack);
}
public interface Prism.Services.IPageDialogService {
    public abstract virtual bool CanShowDialog();
    public abstract virtual Task`1<bool> DisplayAlertAsync(string title, string message, string acceptButton, string cancelButton);
    public abstract virtual Task`1<bool> DisplayAlertAsync(string title, string message, string acceptButton, string cancelButton, FlowDirection flowDirection);
    public abstract virtual Task DisplayAlertAsync(string title, string message, string cancelButton);
    public abstract virtual Task DisplayAlertAsync(string title, string message, string cancelButton, FlowDirection flowDirection);
    public abstract virtual Task`1<string> DisplayActionSheetAsync(string title, string cancelButton, string destroyButton, String[] otherButtons);
    public abstract virtual Task`1<string> DisplayActionSheetAsync(string title, string cancelButton, string destroyButton, FlowDirection flowDirection, String[] otherButtons);
    public abstract virtual Task DisplayActionSheetAsync(string title, IActionSheetButton[] buttons);
    public abstract virtual Task DisplayActionSheetAsync(string title, FlowDirection flowDirection, IActionSheetButton[] buttons);
    public abstract virtual Task`1<string> DisplayPromptAsync(string title, string message, string accept, string cancel, string placeholder, int maxLength, KeyboardType keyboardType, string initialValue);
}
public class Prism.Services.PageDialogService : object {
    [CompilerGeneratedAttribute]
private IApplicationProvider <_applicationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyboardMapper <_keyboardMapper>k__BackingField;
    protected IApplicationProvider _applicationProvider { get; }
    protected IKeyboardMapper _keyboardMapper { get; }
    public PageDialogService(IApplicationProvider applicationProvider, IKeyboardMapper keyboardMapper);
    [CompilerGeneratedAttribute]
protected IApplicationProvider get__applicationProvider();
    [CompilerGeneratedAttribute]
protected IKeyboardMapper get__keyboardMapper();
    public virtual Task`1<bool> DisplayAlertAsync(string title, string message, string acceptButton, string cancelButton);
    public virtual Task`1<bool> DisplayAlertAsync(string title, string message, string acceptButton, string cancelButton, FlowDirection flowDirection);
    public virtual Task DisplayAlertAsync(string title, string message, string cancelButton);
    public virtual Task DisplayAlertAsync(string title, string message, string cancelButton, FlowDirection flowDirection);
    public virtual Task`1<string> DisplayActionSheetAsync(string title, string cancelButton, string destroyButton, String[] otherButtons);
    public virtual Task`1<string> DisplayActionSheetAsync(string title, string cancelButton, string destroyButton, FlowDirection flowDirection, String[] otherButtons);
    [AsyncStateMachineAttribute("Prism.Services.PageDialogService/<DisplayActionSheetAsync>d__13")]
public virtual Task DisplayActionSheetAsync(string title, IActionSheetButton[] buttons);
    [AsyncStateMachineAttribute("Prism.Services.PageDialogService/<DisplayActionSheetAsync>d__14")]
public virtual Task DisplayActionSheetAsync(string title, FlowDirection flowDirection, IActionSheetButton[] buttons);
    public virtual Task`1<string> DisplayPromptAsync(string title, string message, string accept, string cancel, string placeholder, int maxLength, KeyboardType keyboardType, string initialValue);
    public sealed virtual bool CanShowDialog();
}
public class Prism.Xaml.Parameter : BindableObject {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public static BindableProperty ValueProperty;
    public string Key { get; public set; }
    public object Value { get; public set; }
    private static Parameter();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public object get_Value();
    public void set_Value(object value);
}
public class Prism.Xaml.ParameterExtension : Parameter {
    public sealed virtual Parameter ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
internal static class Prism.Xaml.ParameterExtensions : object {
    [ExtensionAttribute]
public static INavigationParameters ToNavigationParameters(object parameter, BindableObject parent);
    [ExtensionAttribute]
public static IDialogParameters ToDialogParameters(object parameter, BindableObject parent);
}
[DefaultMemberAttribute("Item")]
public class Prism.Xaml.Parameters : BindableObject {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ParentProperty;
    private IList`1<Parameter> _list;
    public IDictionary ItemsSource { get; public set; }
    public BindableObject Parent { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Parameter Item { get; public set; }
    private static Parameters();
    private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    public IDictionary get_ItemsSource();
    public void set_ItemsSource(IDictionary value);
    public BindableObject get_Parent();
    public void set_Parent(BindableObject value);
    public sealed virtual void Add(Parameter item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Parameter item);
    public sealed virtual void CopyTo(Parameter[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Parameter> GetEnumerator();
    public sealed virtual int IndexOf(Parameter item);
    public sealed virtual void Insert(int index, Parameter item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual Parameter get_Item(int index);
    public sealed virtual void set_Item(int index, Parameter value);
    public sealed virtual bool Remove(Parameter item);
    public sealed virtual void RemoveAt(int index);
    public T ToParameters(BindableObject parent);
    private static void OnParentPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    protected virtual void OnBindingContextChanged();
}
public abstract class Prism.Xaml.ParentPageAwareExtension`1 : BindableObject {
    private IServiceProvider ServiceProvider;
    private Element _targetElement;
    [CompilerGeneratedAttribute]
private TargetBindingContext <TargetBindingContext>k__BackingField;
    private Page _sourcePage;
    protected Element TargetElement { get; protected set; }
    public TargetBindingContext TargetBindingContext { get; public set; }
    protected internal Page SourcePage { get; public set; }
    protected Element get_TargetElement();
    protected void set_TargetElement(Element value);
    [CompilerGeneratedAttribute]
public TargetBindingContext get_TargetBindingContext();
    [CompilerGeneratedAttribute]
public void set_TargetBindingContext(TargetBindingContext value);
    protected internal Page get_SourcePage();
    public void set_SourcePage(Page value);
    public sealed virtual T ProvideValue(IServiceProvider serviceProvider);
    protected abstract virtual T ProvideValue();
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
    private void Initialize();
    protected virtual void OnTargetElementChanged();
    private IEnumerable`1<Element> GetBindableStack();
}
public enum Prism.Xaml.TargetBindingContext : Enum {
    public int value__;
    public static TargetBindingContext Element;
    public static TargetBindingContext Page;
}
[AttributeUsageAttribute("28108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.141.978")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
