[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Prism.Common.MvvmHelpers : object {
    [EditorBrowsableAttribute("1")]
public static void AutowireViewModel(object viewOrViewModel);
    public static void ViewAndViewModelAction(object view, Action`1<T> action);
    public static T GetImplementerFromViewOrViewModel(object view);
}
public class Prism.Common.ObservableObject`1 : FrameworkElement {
    public static DependencyProperty ValueProperty;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public T Value { get; public set; }
    private static ObservableObject`1();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public T get_Value();
    public void set_Value(T value);
    private static void ValueChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ExtensionAttribute]
internal static class Prism.DependencyObjectExtensions : object {
    [ExtensionAttribute]
public static bool HasBinding(FrameworkElement instance, DependencyProperty property);
}
public class Prism.Dialogs.Dialog : object {
    public static DependencyProperty WindowStyleProperty;
    public static DependencyProperty WindowStartupLocationProperty;
    private static Dialog();
    public static Style GetWindowStyle(DependencyObject obj);
    public static void SetWindowStyle(DependencyObject obj, Style value);
    public static WindowStartupLocation GetWindowStartupLocation(DependencyObject obj);
    public static void SetWindowStartupLocation(DependencyObject obj, WindowStartupLocation value);
    private static void OnWindowStartupLocationChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
}
public class Prism.Dialogs.DialogService : object {
    private IContainerExtension _containerExtension;
    public DialogService(IContainerExtension containerExtension);
    public sealed virtual void ShowDialog(string name, IDialogParameters parameters, DialogCallback callback);
    protected virtual void ShowDialogWindow(IDialogWindow dialogWindow, bool isModal);
    protected virtual IDialogWindow CreateDialogWindow(string name);
    protected virtual void ConfigureDialogWindowContent(string dialogName, IDialogWindow window, IDialogParameters parameters);
    protected virtual void ConfigureDialogWindowEvents(IDialogWindow dialogWindow, DialogCallback callback);
    protected virtual void ConfigureDialogWindowProperties(IDialogWindow window, FrameworkElement dialogContent, IDialogAware viewModel);
}
public class Prism.Dialogs.DialogWindow : Window {
    [CompilerGeneratedAttribute]
private IDialogResult <Result>k__BackingField;
    private bool _contentLoaded;
    public IDialogResult Result { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IDialogResult get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Result(IDialogResult value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.7.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "8.0.7.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    private sealed virtual override object Prism.Dialogs.IDialogWindow.get_Content();
    private sealed virtual override void Prism.Dialogs.IDialogWindow.set_Content(object value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.Close();
    private sealed virtual override Window Prism.Dialogs.IDialogWindow.get_Owner();
    private sealed virtual override void Prism.Dialogs.IDialogWindow.set_Owner(Window value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.Show();
    private sealed virtual override Nullable`1<bool> Prism.Dialogs.IDialogWindow.ShowDialog();
    private sealed virtual override object Prism.Dialogs.IDialogWindow.get_DataContext();
    private sealed virtual override void Prism.Dialogs.IDialogWindow.set_DataContext(object value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.add_Loaded(RoutedEventHandler value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.remove_Loaded(RoutedEventHandler value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.add_Closed(EventHandler value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.remove_Closed(EventHandler value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.add_Closing(CancelEventHandler value);
    private sealed virtual override void Prism.Dialogs.IDialogWindow.remove_Closing(CancelEventHandler value);
    private sealed virtual override Style Prism.Dialogs.IDialogWindow.get_Style();
    private sealed virtual override void Prism.Dialogs.IDialogWindow.set_Style(Style value);
}
[ExtensionAttribute]
public static class Prism.Dialogs.IDialogServiceCompatExtensions : object {
    [ExtensionAttribute]
public static void Show(IDialogService dialogService, string name, IDialogParameters parameters, Action`1<IDialogResult> callback);
    [ExtensionAttribute]
public static void Show(IDialogService dialogService, string name, IDialogParameters parameters, Action`1<IDialogResult> callback, string windowName);
    [ExtensionAttribute]
public static void Show(IDialogService dialogService, string name);
    [ExtensionAttribute]
public static void Show(IDialogService dialogService, string name, Action`1<IDialogResult> callback);
    private static IDialogParameters EnsureShowNonModalParameter(IDialogParameters parameters);
}
public interface Prism.Dialogs.IDialogWindow {
    public object Content { get; public set; }
    public Window Owner { get; public set; }
    public object DataContext { get; public set; }
    public IDialogResult Result { get; public set; }
    public Style Style { get; public set; }
    public abstract virtual object get_Content();
    public abstract virtual void set_Content(object value);
    public abstract virtual void Close();
    public abstract virtual Window get_Owner();
    public abstract virtual void set_Owner(Window value);
    public abstract virtual void Show();
    public abstract virtual Nullable`1<bool> ShowDialog();
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Loaded(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Loaded(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(CancelEventHandler value);
    public abstract virtual IDialogResult get_Result();
    public abstract virtual void set_Result(IDialogResult value);
    public abstract virtual Style get_Style();
    public abstract virtual void set_Style(Style value);
}
[ExtensionAttribute]
internal static class Prism.Dialogs.IDialogWindowExtensions : object {
    [ExtensionAttribute]
internal static IDialogAware GetDialogViewModel(IDialogWindow dialogWindow);
}
public static class Prism.Dialogs.KnownDialogParameters : object {
    public static string WindowName;
    public static string ShowNonModal;
}
public class Prism.Interactivity.CommandBehaviorBase`1 : object {
    private ICommand _command;
    private object _commandParameter;
    private WeakReference _targetObject;
    private EventHandler _commandCanExecuteChangedHandler;
    private bool _autoEnabled;
    public bool AutoEnable { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    protected T TargetObject { get; }
    public CommandBehaviorBase`1(T targetObject);
    public bool get_AutoEnable();
    public void set_AutoEnable(bool value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    protected T get_TargetObject();
    protected virtual void UpdateEnabledState();
    private void CommandCanExecuteChanged(object sender, EventArgs e);
    protected virtual void ExecuteCommand(object parameter);
}
public class Prism.Interactivity.InvokeCommandAction : TriggerAction`1<UIElement> {
    private ExecutableCommandBehavior _commandBehavior;
    public static DependencyProperty AutoEnableProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty TriggerParameterPathProperty;
    public bool AutoEnable { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public string TriggerParameterPath { get; public set; }
    private static InvokeCommandAction();
    public bool get_AutoEnable();
    public void set_AutoEnable(bool value);
    private void OnAllowDisableChanged(bool newValue);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    private void OnCommandChanged(ICommand newValue);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    private void OnCommandParameterChanged(object newValue);
    public string get_TriggerParameterPath();
    public void set_TriggerParameterPath(string value);
    public void InvokeAction(object parameter);
    protected virtual void Invoke(object parameter);
    protected virtual void OnDetaching();
    protected virtual void OnAttached();
    private ExecutableCommandBehavior GetOrCreateBehavior();
}
public class Prism.Ioc.ContainerProviderExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; public set; }
    public string Name { get; public set; }
    public ContainerProviderExtension(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class Prism.Ioc.IContainerRegistryExtensions : object {
    [ExtensionAttribute]
public static void RegisterDialog(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterDialog(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterDialogWindow(IContainerRegistry containerRegistry);
    [ExtensionAttribute]
public static void RegisterDialogWindow(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, Type type, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
public static void RegisterForNavigation(IContainerRegistry containerRegistry, string name);
    [ExtensionAttribute]
private static void RegisterForNavigationWithViewModel(IContainerRegistry containerRegistry, Type viewType, string name);
}
public class Prism.Modularity.AssemblyResolver : object {
    private List`1<AssemblyInfo> registeredAssemblies;
    private bool _handlesAssemblyResolve;
    public sealed virtual void LoadAssemblyFrom(string assemblyFilePath);
    private static Uri GetFileUri(string filePath);
    private Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Prism.Modularity.ConfigurationModuleCatalog : ModuleCatalog {
    [CompilerGeneratedAttribute]
private IConfigurationStore <Store>k__BackingField;
    public IConfigurationStore Store { get; public set; }
    [CompilerGeneratedAttribute]
public IConfigurationStore get_Store();
    [CompilerGeneratedAttribute]
public void set_Store(IConfigurationStore value);
    protected virtual void InnerLoad();
    private void EnsureModulesDiscovered();
}
public class Prism.Modularity.ConfigurationStore : object {
    public sealed virtual ModulesConfigurationSection RetrieveModuleConfigurationSection();
}
public class Prism.Modularity.DirectoryModuleCatalog : ModuleCatalog {
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    public string ModulePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public void set_ModulePath(string value);
    protected virtual void InnerLoad();
}
public class Prism.Modularity.FileModuleTypeLoader : object {
    private static string RefFilePrefix;
    private IAssemblyResolver _assemblyResolver;
    private HashSet`1<Uri> _downloadedUris;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModuleDownloadProgressChangedEventArgs> ModuleDownloadProgressChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadModuleCompletedEventArgs> LoadModuleCompleted;
    public FileModuleTypeLoader(IAssemblyResolver assemblyResolver);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    private void RaiseModuleDownloadProgressChanged(IModuleInfo moduleInfo, long bytesReceived, long totalBytesToReceive);
    private void RaiseModuleDownloadProgressChanged(ModuleDownloadProgressChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    private void RaiseLoadModuleCompleted(IModuleInfo moduleInfo, Exception error);
    private void RaiseLoadModuleCompleted(LoadModuleCompletedEventArgs e);
    public sealed virtual bool CanLoadModuleType(IModuleInfo moduleInfo);
    public sealed virtual void LoadModuleType(IModuleInfo moduleInfo);
    private bool IsSuccessfullyDownloaded(Uri uri);
    private void RecordDownloadSuccess(Uri uri);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public interface Prism.Modularity.IAssemblyResolver {
    public abstract virtual void LoadAssemblyFrom(string assemblyFilePath);
}
public interface Prism.Modularity.IConfigurationStore {
    public abstract virtual ModulesConfigurationSection RetrieveModuleConfigurationSection();
}
[ExtensionAttribute]
public static class Prism.Modularity.IModuleCatalogExtensions : object {
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, InitializationMode mode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name, InitializationMode mode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, Type moduleType, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, Type moduleType, InitializationMode initializationMode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string moduleName, string moduleType, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string moduleName, string moduleType, InitializationMode initializationMode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string moduleName, string moduleType, string refValue, InitializationMode initializationMode, String[] dependsOn);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, InitializationMode mode);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name);
    [ExtensionAttribute]
public static IModuleCatalog AddModule(IModuleCatalog catalog, string name, InitializationMode mode);
    [ExtensionAttribute]
public static IModuleCatalog AddGroup(IModuleCatalog catalog, InitializationMode initializationMode, string refValue, ModuleInfo[] moduleInfos);
}
public interface Prism.Modularity.IModuleGroupsCatalog {
    public Collection`1<IModuleCatalogItem> Items { get; }
    public abstract virtual Collection`1<IModuleCatalogItem> get_Items();
}
public interface Prism.Modularity.IModuleTypeLoader {
    public abstract virtual bool CanLoadModuleType(IModuleInfo moduleInfo);
    public abstract virtual void LoadModuleType(IModuleInfo moduleInfo);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
}
[AttributeUsageAttribute("4")]
public class Prism.Modularity.ModuleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnDemand>k__BackingField;
    public string ModuleName { get; public set; }
    public bool OnDemand { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public bool get_OnDemand();
    [CompilerGeneratedAttribute]
public void set_OnDemand(bool value);
}
[ContentPropertyAttribute("Items")]
public class Prism.Modularity.ModuleCatalog : ModuleCatalogBase {
    public ModuleCatalog(IEnumerable`1<ModuleInfo> modules);
    protected virtual string GetFileAbsoluteUri(string filePath);
    private sealed virtual override Collection`1<IModuleCatalogItem> Prism.Modularity.IModuleGroupsCatalog.get_Items();
}
public class Prism.Modularity.ModuleConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("assemblyFile")]
public string AssemblyFile { get; public set; }
    [ConfigurationPropertyAttribute("moduleType")]
public string ModuleType { get; public set; }
    [ConfigurationPropertyAttribute("moduleName")]
public string ModuleName { get; public set; }
    [ConfigurationPropertyAttribute("startupLoaded")]
public bool StartupLoaded { get; public set; }
    [ConfigurationPropertyAttribute("dependencies")]
public ModuleDependencyCollection Dependencies { get; public set; }
    public ModuleConfigurationElement(string assemblyFile, string moduleType, string moduleName, bool startupLoaded);
    public string get_AssemblyFile();
    public void set_AssemblyFile(string value);
    public string get_ModuleType();
    public void set_ModuleType(string value);
    public string get_ModuleName();
    public void set_ModuleName(string value);
    public bool get_StartupLoaded();
    public void set_StartupLoaded(bool value);
    public ModuleDependencyCollection get_Dependencies();
    public void set_Dependencies(ModuleDependencyCollection value);
}
[DefaultMemberAttribute("Item")]
public class Prism.Modularity.ModuleConfigurationElementCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public ModuleConfigurationElement Item { get; }
    public ModuleConfigurationElementCollection(ModuleConfigurationElement[] modules);
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    public ModuleConfigurationElement get_Item(int index);
    public void Add(ModuleConfigurationElement module);
    public bool Contains(string moduleName);
    public IList`1<ModuleConfigurationElement> FindAll(Predicate`1<ModuleConfigurationElement> match);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
[DefaultMemberAttribute("Item")]
public class Prism.Modularity.ModuleDependencyCollection : ConfigurationElementCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public ModuleDependencyConfigurationElement Item { get; }
    public ModuleDependencyCollection(ModuleDependencyConfigurationElement[] dependencies);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    public ModuleDependencyConfigurationElement get_Item(int index);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class Prism.Modularity.ModuleDependencyConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("moduleName")]
public string ModuleName { get; public set; }
    public ModuleDependencyConfigurationElement(string moduleName);
    public string get_ModuleName();
    public void set_ModuleName(string value);
}
public class Prism.Modularity.ModuleInfo : object {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleType>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private InitializationMode <InitializationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleState <State>k__BackingField;
    public string ModuleName { get; public set; }
    public string ModuleType { get; public set; }
    public Collection`1<string> DependsOn { get; public set; }
    public InitializationMode InitializationMode { get; public set; }
    public string Ref { get; public set; }
    public ModuleState State { get; public set; }
    public ModuleInfo(string name, string type, String[] dependsOn);
    public ModuleInfo(string name, string type);
    public ModuleInfo(Type moduleType);
    public ModuleInfo(Type moduleType, string moduleName);
    public ModuleInfo(Type moduleType, string moduleName, InitializationMode initializationMode);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ModuleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ModuleType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ModuleType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Collection`1<string> get_DependsOn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DependsOn(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual InitializationMode get_InitializationMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InitializationMode(InitializationMode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Ref();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ref(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ModuleState get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(ModuleState value);
}
[DefaultMemberAttribute("Item")]
public class Prism.Modularity.ModuleInfoGroup : object {
    private Collection`1<IModuleInfo> _modules;
    [CompilerGeneratedAttribute]
private InitializationMode <InitializationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    public InitializationMode InitializationMode { get; public set; }
    public string Ref { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public IModuleInfo Item { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual InitializationMode get_InitializationMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InitializationMode(InitializationMode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Ref();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ref(string value);
    public sealed virtual void Add(IModuleInfo item);
    internal void UpdateModulesRef();
    protected void ForwardValues(IModuleInfo moduleInfo);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IModuleInfo item);
    public sealed virtual void CopyTo(IModuleInfo[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(IModuleInfo item);
    public sealed virtual IEnumerator`1<IModuleInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual int IndexOf(IModuleInfo item);
    public sealed virtual void Insert(int index, IModuleInfo item);
    public sealed virtual IModuleInfo get_Item(int index);
    public sealed virtual void set_Item(int index, IModuleInfo value);
}
[ExtensionAttribute]
public static class Prism.Modularity.ModuleInfoGroupExtensions : object {
    [ExtensionAttribute]
public static ModuleInfoGroup AddModule(ModuleInfoGroup moduleInfoGroup, string moduleName, Type moduleType, String[] dependsOn);
    [ExtensionAttribute]
public static ModuleInfoGroup AddModule(ModuleInfoGroup moduleInfoGroup, Type moduleType, String[] dependsOn);
}
public class Prism.Modularity.ModuleInitializer : object {
    private IContainerExtension _containerExtension;
    public ModuleInitializer(IContainerExtension containerExtension);
    public sealed virtual void Initialize(IModuleInfo moduleInfo);
    public virtual void HandleModuleInitializationError(IModuleInfo moduleInfo, string assemblyName, Exception exception);
    protected virtual IModule CreateModule(IModuleInfo moduleInfo);
    protected virtual IModule CreateModule(string typeName);
}
public class Prism.Modularity.ModuleManager : object {
    private IModuleInitializer moduleInitializer;
    private IEnumerable`1<IModuleTypeLoader> _typeLoaders;
    private HashSet`1<IModuleTypeLoader> subscribedToModuleTypeLoaders;
    [CompilerGeneratedAttribute]
private IModuleCatalog <ModuleCatalog>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModuleDownloadProgressChangedEventArgs> ModuleDownloadProgressChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadModuleCompletedEventArgs> LoadModuleCompleted;
    protected IModuleCatalog ModuleCatalog { get; }
    public IEnumerable`1<IModuleInfo> Modules { get; }
    public IEnumerable`1<IModuleTypeLoader> ModuleTypeLoaders { get; public set; }
    public ModuleManager(IModuleInitializer moduleInitializer, IModuleCatalog moduleCatalog);
    [CompilerGeneratedAttribute]
protected IModuleCatalog get_ModuleCatalog();
    public sealed virtual IEnumerable`1<IModuleInfo> get_Modules();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModuleDownloadProgressChanged(EventHandler`1<ModuleDownloadProgressChangedEventArgs> value);
    private void RaiseModuleDownloadProgressChanged(ModuleDownloadProgressChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LoadModuleCompleted(EventHandler`1<LoadModuleCompletedEventArgs> value);
    private void RaiseLoadModuleCompleted(IModuleInfo moduleInfo, Exception error);
    private void RaiseLoadModuleCompleted(LoadModuleCompletedEventArgs e);
    public sealed virtual void Run();
    public sealed virtual void LoadModule(string moduleName);
    protected virtual bool ModuleNeedsRetrieval(IModuleInfo moduleInfo);
    private void LoadModulesWhenAvailable();
    private void LoadModuleTypes(IEnumerable`1<IModuleInfo> moduleInfos);
    protected virtual void LoadModulesThatAreReadyForLoad();
    private void BeginRetrievingModule(IModuleInfo moduleInfo);
    private void IModuleTypeLoader_ModuleDownloadProgressChanged(object sender, ModuleDownloadProgressChangedEventArgs e);
    private void IModuleTypeLoader_LoadModuleCompleted(object sender, LoadModuleCompletedEventArgs e);
    protected virtual void HandleModuleTypeLoadingError(IModuleInfo moduleInfo, Exception exception);
    private bool AreDependenciesLoaded(IModuleInfo moduleInfo);
    private IModuleTypeLoader GetTypeLoaderForModule(IModuleInfo moduleInfo);
    private void InitializeModule(IModuleInfo moduleInfo);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerable`1<IModuleTypeLoader> get_ModuleTypeLoaders();
    public virtual void set_ModuleTypeLoaders(IEnumerable`1<IModuleTypeLoader> value);
}
public class Prism.Modularity.ModulesConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("")]
public ModuleConfigurationElementCollection Modules { get; public set; }
    public ModuleConfigurationElementCollection get_Modules();
    public void set_Modules(ModuleConfigurationElementCollection value);
}
public class Prism.Modularity.ModuleTypeLoaderNotFoundException : ModularityException {
    public ModuleTypeLoaderNotFoundException(string message);
    public ModuleTypeLoaderNotFoundException(string message, Exception innerException);
    public ModuleTypeLoaderNotFoundException(string moduleName, string message, Exception innerException);
    protected ModuleTypeLoaderNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Prism.Modularity.XamlModuleCatalog : ModuleCatalog {
    private Uri _resourceUri;
    private static string _refFilePrefix;
    private int _refFilePrefixLength;
    public XamlModuleCatalog(string fileName);
    public XamlModuleCatalog(Uri resourceUri);
    protected virtual void InnerLoad();
    protected virtual string GetFileAbsoluteUri(string path);
    private static ModuleCatalog CreateFromXaml(Stream xamlStream);
    private static ModuleCatalog CreateFromXaml(Uri builderResourceUri);
}
public static class Prism.Mvvm.ViewModelLocator : object {
    public static DependencyProperty AutoWireViewModelProperty;
    private static ViewModelLocator();
    public static Nullable`1<bool> GetAutoWireViewModel(DependencyObject obj);
    public static void SetAutoWireViewModel(DependencyObject obj, Nullable`1<bool> value);
    private static void AutoWireViewModelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void Bind(object view, object viewModel);
}
public class Prism.Navigation.Regions.AllActiveRegion : Region {
    public IViewsCollection ActiveViews { get; }
    public virtual IViewsCollection get_ActiveViews();
    public virtual void Deactivate(object view);
}
public class Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior : RegionBehavior {
    public static string BehaviorKey;
    private IRegionViewRegistry regionViewRegistry;
    public AutoPopulateRegionBehavior(IRegionViewRegistry regionViewRegistry);
    protected virtual void OnAttach();
    private void StartPopulatingContent();
    protected virtual IEnumerable`1<object> CreateViewsToAutoPopulate();
    protected virtual void AddViewIntoRegion(object viewToAdd);
    private void Region_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void OnViewRegistered(object sender, ViewRegisteredEventArgs e);
}
public class Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior : object {
    public static string BehaviorKey;
    [CompilerGeneratedAttribute]
private IRegion <Region>k__BackingField;
    public IRegion Region { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRegion get_Region();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Region(IRegion value);
    public sealed virtual void Attach();
    private static void SetContextToViews(IEnumerable views, object context);
    private void AttachNotifyChangeEvent(IEnumerable views);
    private void DetachNotifyChangeEvent(IEnumerable views);
    private void ViewRegionContext_OnPropertyChangedEvent(object sender, PropertyChangedEventArgs args);
    private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Region_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior : RegionBehavior {
    public static string BehaviorKey;
    public static DependencyProperty ClearChildViewsProperty;
    private static ClearChildViewsRegionBehavior();
    public static bool GetClearChildViews(DependencyObject target);
    public static void SetClearChildViews(DependencyObject target, bool value);
    protected virtual void OnAttach();
    private static void ClearChildViews(IRegion region);
    private void Region_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior : object {
    private RegionAdapterMappings _regionAdapterMappings;
    private WeakReference elementWeakReference;
    private bool regionCreated;
    private static ICollection`1<DelayedRegionCreationBehavior> _instanceTracker;
    private object _trackerLock;
    [CompilerGeneratedAttribute]
private IRegionManagerAccessor <RegionManagerAccessor>k__BackingField;
    public IRegionManagerAccessor RegionManagerAccessor { get; public set; }
    public DependencyObject TargetElement { get; public set; }
    public DelayedRegionCreationBehavior(RegionAdapterMappings regionAdapterMappings);
    private static DelayedRegionCreationBehavior();
    [CompilerGeneratedAttribute]
public IRegionManagerAccessor get_RegionManagerAccessor();
    [CompilerGeneratedAttribute]
public void set_RegionManagerAccessor(IRegionManagerAccessor value);
    public DependencyObject get_TargetElement();
    public void set_TargetElement(DependencyObject value);
    public void Attach();
    public void Detach();
    public void OnUpdatingRegions(object sender, EventArgs e);
    private void TryCreateRegion();
    protected virtual IRegion CreateRegion(DependencyObject targetElement, string regionName);
    private void ElementLoaded(object sender, RoutedEventArgs e);
    private void WireUpTargetElement();
    private void UnWireTargetElement();
    private void Track();
    private void Untrack();
}
public class Prism.Navigation.Regions.Behaviors.DestructibleRegionBehavior : RegionBehavior {
    public static string BehaviorKey;
    protected virtual void OnAttach();
    private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public interface Prism.Navigation.Regions.Behaviors.IHostAwareRegionBehavior {
    public DependencyObject HostControl { get; public set; }
    public abstract virtual DependencyObject get_HostControl();
    public abstract virtual void set_HostControl(DependencyObject value);
}
public class Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior : object {
    public static string BehaviorKey;
    [CompilerGeneratedAttribute]
private IRegion <Region>k__BackingField;
    public IRegion Region { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRegion get_Region();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Region(IRegion value);
    public sealed virtual void Attach();
    public void Detach();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void InvokeOnSynchronizedActiveAwareChildren(object item, Action`1<IActiveAware> invocation);
    private bool ShouldSyncActiveState(object view);
    private INotifyCollectionChanged GetCollection();
}
public class Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior : RegionBehavior {
    public static string BehaviorKey;
    private WeakReference attachedRegionManagerWeakReference;
    private DependencyObject hostControl;
    [CompilerGeneratedAttribute]
private IRegionManagerAccessor <RegionManagerAccessor>k__BackingField;
    public IRegionManagerAccessor RegionManagerAccessor { get; public set; }
    public DependencyObject HostControl { get; public set; }
    private static RegionManagerRegistrationBehavior();
    [CompilerGeneratedAttribute]
public IRegionManagerAccessor get_RegionManagerAccessor();
    [CompilerGeneratedAttribute]
public void set_RegionManagerAccessor(IRegionManagerAccessor value);
    public sealed virtual DependencyObject get_HostControl();
    public sealed virtual void set_HostControl(DependencyObject value);
    protected virtual void OnAttach();
    private void Region_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void StartMonitoringRegionManager();
    private void TryRegisterRegion();
    public void OnUpdatingRegions(object sender, EventArgs e);
    private IRegionManager FindRegionManager(DependencyObject dependencyObject);
    private IRegionManager GetAttachedRegionManager();
}
public class Prism.Navigation.Regions.Behaviors.RegionMemberLifetimeBehavior : RegionBehavior {
    public static string BehaviorKey;
    protected virtual void OnAttach();
    private void OnActiveViewsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static bool ShouldKeepAlive(object inactiveView);
    private static RegionMemberLifetimeAttribute GetItemOrContextLifetimeAttribute(object inactiveView);
    private static IEnumerable`1<T> GetCustomAttributes(Type type);
}
public class Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior : RegionBehavior {
    public static string BehaviorKey;
    private bool updatingActiveViewsInHostControlSelectionChanged;
    private Selector _hostControl;
    public DependencyObject HostControl { get; public set; }
    private static SelectorItemsSourceSyncBehavior();
    public sealed virtual DependencyObject get_HostControl();
    public sealed virtual void set_HostControl(DependencyObject value);
    protected virtual void OnAttach();
    private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SynchronizeItems();
    private void ActiveViews_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HostControlSelectionChanged(object sender, SelectionChangedEventArgs e);
}
public class Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior : RegionBehavior {
    private static string RegionContextPropertyName;
    private DependencyObject _hostControl;
    public static string BehaviorKey;
    private ObservableObject`1<object> HostControlRegionContext { get; }
    public DependencyObject HostControl { get; public set; }
    private static SyncRegionContextWithHostBehavior();
    private ObservableObject`1<object> get_HostControlRegionContext();
    public sealed virtual DependencyObject get_HostControl();
    public sealed virtual void set_HostControl(DependencyObject value);
    protected virtual void OnAttach();
    private void Region_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void RegionContextObservableObject_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SynchronizeRegionContext();
}
public class Prism.Navigation.Regions.ContentControlRegionAdapter : RegionAdapterBase`1<ContentControl> {
    public ContentControlRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory);
    protected virtual void Adapt(IRegion region, ContentControl regionTarget);
    protected virtual IRegion CreateRegion();
}
internal class Prism.Navigation.Regions.DefaultRegionManagerAccessor : object {
    public sealed virtual void add_UpdatingRegions(EventHandler value);
    public sealed virtual void remove_UpdatingRegions(EventHandler value);
    public sealed virtual string GetRegionName(DependencyObject element);
    public sealed virtual IRegionManager GetRegionManager(DependencyObject element);
}
public interface Prism.Navigation.Regions.INavigationAware {
}
public interface Prism.Navigation.Regions.IRegionManagerAccessor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_UpdatingRegions(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UpdatingRegions(EventHandler value);
    public abstract virtual string GetRegionName(DependencyObject element);
    public abstract virtual IRegionManager GetRegionManager(DependencyObject element);
}
public class Prism.Navigation.Regions.ItemMetadata : DependencyObject {
    public static DependencyProperty NameProperty;
    public static DependencyProperty IsActiveProperty;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler MetadataChanged;
    public object Item { get; private set; }
    public string Name { get; public set; }
    public bool IsActive { get; public set; }
    public ItemMetadata(object item);
    private static ItemMetadata();
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public void add_MetadataChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MetadataChanged(EventHandler value);
    public void InvokeMetadataChanged();
    private static void DependencyPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
}
public class Prism.Navigation.Regions.ItemsControlRegionAdapter : RegionAdapterBase`1<ItemsControl> {
    public ItemsControlRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory);
    protected virtual void Adapt(IRegion region, ItemsControl regionTarget);
    protected virtual IRegion CreateRegion();
}
public class Prism.Navigation.Regions.Region : object {
    private ObservableCollection`1<ItemMetadata> _itemMetadataCollection;
    private string _name;
    private ViewsCollection _views;
    private ViewsCollection _activeViews;
    private object _context;
    private IRegionManager _regionManager;
    private IRegionNavigationService _regionNavigationService;
    private Comparison`1<object> _sort;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private IRegionBehaviorCollection <Behaviors>k__BackingField;
    public IRegionBehaviorCollection Behaviors { get; }
    public object Context { get; public set; }
    public string Name { get; public set; }
    public IViewsCollection Views { get; }
    public IViewsCollection ActiveViews { get; }
    public Comparison`1<object> SortComparison { get; public set; }
    public IRegionManager RegionManager { get; public set; }
    public IRegionNavigationService NavigationService { get; public set; }
    protected ObservableCollection`1<ItemMetadata> ItemMetadataCollection { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual IRegionBehaviorCollection get_Behaviors();
    public sealed virtual object get_Context();
    public sealed virtual void set_Context(object value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public virtual IViewsCollection get_Views();
    public virtual IViewsCollection get_ActiveViews();
    public sealed virtual Comparison`1<object> get_SortComparison();
    public sealed virtual void set_SortComparison(Comparison`1<object> value);
    public sealed virtual IRegionManager get_RegionManager();
    public sealed virtual void set_RegionManager(IRegionManager value);
    public sealed virtual IRegionNavigationService get_NavigationService();
    public sealed virtual void set_NavigationService(IRegionNavigationService value);
    protected virtual ObservableCollection`1<ItemMetadata> get_ItemMetadataCollection();
    public sealed virtual IRegionManager Add(string viewName);
    public sealed virtual IRegionManager Add(object view);
    public sealed virtual IRegionManager Add(object view, string viewName);
    public virtual IRegionManager Add(object view, string viewName, bool createRegionManagerScope);
    public virtual void Remove(object view);
    public sealed virtual void RemoveAll();
    public virtual void Activate(object view);
    public virtual void Deactivate(object view);
    public virtual object GetView(string viewName);
    public void RequestNavigate(Uri target, Action`1<NavigationResult> navigationCallback);
    public sealed virtual void RequestNavigate(Uri target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    private void InnerAdd(object view, string viewName, IRegionManager scopedRegionManager);
    private ItemMetadata GetItemMetadataOrThrow(object view);
    private void OnPropertyChanged(string propertyName);
    public static int DefaultSortComparison(object x, object y);
    private static int ViewSortHintAttributeComparison(ViewSortHintAttribute x, ViewSortHintAttribute y);
}
public abstract class Prism.Navigation.Regions.RegionAdapterBase`1 : object {
    [CompilerGeneratedAttribute]
private IRegionBehaviorFactory <RegionBehaviorFactory>k__BackingField;
    protected IRegionBehaviorFactory RegionBehaviorFactory { get; protected set; }
    protected RegionAdapterBase`1(IRegionBehaviorFactory regionBehaviorFactory);
    [CompilerGeneratedAttribute]
protected IRegionBehaviorFactory get_RegionBehaviorFactory();
    [CompilerGeneratedAttribute]
protected void set_RegionBehaviorFactory(IRegionBehaviorFactory value);
    public IRegion Initialize(T regionTarget, string regionName);
    private sealed virtual override IRegion Prism.Navigation.Regions.IRegionAdapter.Initialize(object regionTarget, string regionName);
    protected virtual void AttachDefaultBehaviors(IRegion region, T regionTarget);
    protected virtual void AttachBehaviors(IRegion region, T regionTarget);
    protected abstract virtual void Adapt(IRegion region, T regionTarget);
    protected abstract virtual IRegion CreateRegion();
    private static T GetCastedObject(object regionTarget);
    private static void SetObservableRegionOnHostingControl(IRegion region, T regionTarget);
}
public class Prism.Navigation.Regions.RegionAdapterMappings : object {
    private Dictionary`2<Type, IRegionAdapter> mappings;
    public void RegisterMapping(Type controlType, IRegionAdapter adapter);
    public void RegisterMapping(IRegionAdapter adapter);
    public void RegisterMapping();
    public IRegionAdapter GetMapping(Type controlType);
    public IRegionAdapter GetMapping();
}
public static class Prism.Navigation.Regions.RegionContext : object {
    private static DependencyProperty ObservableRegionContextProperty;
    private static RegionContext();
    public static ObservableObject`1<object> GetObservableContext(DependencyObject view);
}
public class Prism.Navigation.Regions.RegionManager : object {
    private static WeakDelegatesManager updatingRegionsListeners;
    public static DependencyProperty RegionNameProperty;
    private static DependencyProperty ObservableRegionProperty;
    public static DependencyProperty RegionManagerProperty;
    public static DependencyProperty RegionContextProperty;
    private RegionCollection regionCollection;
    public IRegionCollection Regions { get; }
    private static RegionManager();
    public static void SetRegionName(DependencyObject regionTarget, string regionName);
    public static string GetRegionName(DependencyObject regionTarget);
    public static ObservableObject`1<IRegion> GetObservableRegion(DependencyObject view);
    private static void OnSetRegionNameCallback(DependencyObject element, DependencyPropertyChangedEventArgs args);
    private static void CreateRegion(DependencyObject element);
    public static IRegionManager GetRegionManager(DependencyObject target);
    public static void SetRegionManager(DependencyObject target, IRegionManager value);
    private static void OnRegionContextChanged(DependencyObject depObj, DependencyPropertyChangedEventArgs e);
    public static object GetRegionContext(DependencyObject target);
    public static void SetRegionContext(DependencyObject target, object value);
    public static void add_UpdatingRegions(EventHandler value);
    public static void remove_UpdatingRegions(EventHandler value);
    public static void UpdateRegions();
    private static bool IsInDesignMode(DependencyObject element);
    public sealed virtual IRegionCollection get_Regions();
    public sealed virtual IRegionManager CreateRegionManager();
    public sealed virtual IRegionManager AddToRegion(string regionName, object view);
    public sealed virtual IRegionManager AddToRegion(string regionName, string targetName);
    public sealed virtual IRegionManager RegisterViewWithRegion(string regionName, Type viewType);
    public sealed virtual IRegionManager RegisterViewWithRegion(string regionName, string targetName);
    public sealed virtual IRegionManager RegisterViewWithRegion(string regionName, Func`2<IContainerProvider, object> getContentDelegate);
    public void RequestNavigate(string regionName, Uri source, Action`1<NavigationResult> navigationCallback);
    public sealed virtual void RequestNavigate(string regionName, Uri target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    protected virtual object CreateNewRegionItem(string candidateTargetContract);
}
public class Prism.Navigation.Regions.RegionNavigationContentLoader : object {
    private IContainerExtension _container;
    public RegionNavigationContentLoader(IContainerExtension container);
    public sealed virtual object LoadContent(IRegion region, NavigationContext navigationContext);
    protected virtual void AddViewToRegion(IRegion region, object view);
    protected virtual object CreateNewRegionItem(string candidateTargetContract);
    protected virtual string GetContractFromNavigationContext(NavigationContext navigationContext);
    protected virtual IEnumerable`1<object> GetCandidatesFromRegion(IRegion region, string candidateNavigationContract);
    private IEnumerable`1<object> GetCandidatesFromRegionViews(IRegion region, string candidateNavigationContract);
    private static bool ViewIsMatch(Type viewType, string navigationSegment);
}
public class Prism.Navigation.Regions.RegionNavigationService : object {
    private IContainerProvider _container;
    private IRegionNavigationContentLoader _regionNavigationContentLoader;
    private NavigationContext _currentNavigationContext;
    [CompilerGeneratedAttribute]
private IRegion <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private IRegionNavigationJournal <Journal>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegionNavigationEventArgs> Navigating;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegionNavigationEventArgs> Navigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegionNavigationFailedEventArgs> NavigationFailed;
    public IRegion Region { get; public set; }
    public IRegionNavigationJournal Journal { get; private set; }
    public RegionNavigationService(IContainerExtension container, IRegionNavigationContentLoader regionNavigationContentLoader, IRegionNavigationJournal journal);
    [CompilerGeneratedAttribute]
public sealed virtual IRegion get_Region();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Region(IRegion value);
    [CompilerGeneratedAttribute]
public sealed virtual IRegionNavigationJournal get_Journal();
    [CompilerGeneratedAttribute]
private void set_Journal(IRegionNavigationJournal value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Navigating(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Navigating(EventHandler`1<RegionNavigationEventArgs> value);
    private void RaiseNavigating(NavigationContext navigationContext);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Navigated(EventHandler`1<RegionNavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Navigated(EventHandler`1<RegionNavigationEventArgs> value);
    private void RaiseNavigated(NavigationContext navigationContext);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NavigationFailed(EventHandler`1<RegionNavigationFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NavigationFailed(EventHandler`1<RegionNavigationFailedEventArgs> value);
    private void RaiseNavigationFailed(NavigationContext navigationContext, Exception error);
    public void RequestNavigate(Uri target, Action`1<NavigationResult> navigationCallback);
    public sealed virtual void RequestNavigate(Uri target, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    private void DoNavigate(Uri source, Action`1<NavigationResult> navigationCallback, INavigationParameters navigationParameters);
    private void RequestCanNavigateFromOnCurrentlyActiveView(NavigationContext navigationContext, Action`1<NavigationResult> navigationCallback, Object[] activeViews, int currentViewIndex);
    private void RequestCanNavigateFromOnCurrentlyActiveViewModel(NavigationContext navigationContext, Action`1<NavigationResult> navigationCallback, Object[] activeViews, int currentViewIndex);
    private void ExecuteNavigation(NavigationContext navigationContext, Object[] activeViews, Action`1<NavigationResult> navigationCallback);
    private static bool PersistInHistory(object view);
    private void NotifyNavigationFailed(NavigationContext navigationContext, Action`1<NavigationResult> navigationCallback, Exception e);
    private static void NotifyActiveViewsNavigatingFrom(NavigationContext navigationContext, Object[] activeViews);
    private static void InvokeOnNavigationAwareElements(IEnumerable`1<object> items, Action`1<IRegionAware> invocation);
}
public class Prism.Navigation.Regions.RegionViewRegistry : object {
    private IContainerProvider _container;
    private ListDictionary`2<string, Func`2<IContainerProvider, object>> _registeredContent;
    private WeakDelegatesManager _contentRegisteredListeners;
    public RegionViewRegistry(IContainerExtension container);
    public sealed virtual void add_ContentRegistered(EventHandler`1<ViewRegisteredEventArgs> value);
    public sealed virtual void remove_ContentRegistered(EventHandler`1<ViewRegisteredEventArgs> value);
    public sealed virtual IEnumerable`1<object> GetContents(string regionName, IContainerProvider container);
    public sealed virtual void RegisterViewWithRegion(string regionName, Type viewType);
    public sealed virtual void RegisterViewWithRegion(string regionName, Func`2<IContainerProvider, object> getContentDelegate);
    public sealed virtual void RegisterViewWithRegion(string regionName, string targetName);
    protected virtual object CreateInstance(Type type);
    private void OnContentRegistered(ViewRegisteredEventArgs e);
}
public class Prism.Navigation.Regions.SelectorRegionAdapter : RegionAdapterBase`1<Selector> {
    public SelectorRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory);
    protected virtual void Adapt(IRegion region, Selector regionTarget);
    protected virtual void AttachBehaviors(IRegion region, Selector regionTarget);
    protected virtual IRegion CreateRegion();
}
public class Prism.Navigation.Regions.SingleActiveRegion : Region {
    public virtual void Activate(object view);
}
public class Prism.Navigation.Regions.ViewsCollection : object {
    private ObservableCollection`1<ItemMetadata> _subjectCollection;
    private Dictionary`2<ItemMetadata, MonitorInfo> monitoredItems;
    private Predicate`1<ItemMetadata> _filter;
    private Comparison`1<object> sort;
    private List`1<object> filteredItems;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public Comparison`1<object> SortComparison { get; public set; }
    public ViewsCollection(ObservableCollection`1<ItemMetadata> list, Predicate`1<ItemMetadata> filter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public Comparison`1<object> get_SortComparison();
    public void set_SortComparison(Comparison`1<object> value);
    public sealed virtual bool Contains(object value);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void NotifyReset();
    private void ResetAllMonitors();
    private void MonitorAllMetadataItems();
    private void RemoveAllMetadataMonitors();
    private void AddMetadataMonitor(ItemMetadata itemMetadata, bool isInList);
    private void RemoveMetadataMonitor(ItemMetadata itemMetadata);
    private void OnItemMetadataChanged(object sender, EventArgs e);
    private void SourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void NotifyAdd(object item);
    private void RemoveFromFilteredList(object item);
    private void UpdateFilteredItemsList();
    private void NotifyAdd(IList items, int newStartingIndex);
    private void NotifyRemove(IList items, int originalIndex);
    [CompilerGeneratedAttribute]
private bool <UpdateFilteredItemsList>b__26_0(ItemMetadata i);
}
public abstract class Prism.PrismApplicationBase : Application {
    private IContainerExtension _containerExtension;
    private IModuleCatalog _moduleCatalog;
    public IContainerProvider Container { get; }
    public IContainerProvider get_Container();
    protected virtual void OnStartup(StartupEventArgs e);
    private void InitializeInternal();
    protected virtual void ConfigureViewModelLocator();
    protected virtual void Initialize();
    protected abstract virtual IContainerExtension CreateContainerExtension();
    protected virtual IModuleCatalog CreateModuleCatalog();
    protected virtual void RegisterRequiredTypes(IContainerRegistry containerRegistry);
    protected abstract virtual void RegisterTypes(IContainerRegistry containerRegistry);
    protected virtual void ConfigureDefaultRegionBehaviors(IRegionBehaviorFactory regionBehaviors);
    protected virtual void ConfigureRegionAdapterMappings(RegionAdapterMappings regionAdapterMappings);
    protected virtual void RegisterFrameworkExceptionTypes();
    protected abstract virtual Window CreateShell();
    protected virtual void InitializeShell(Window shell);
    protected virtual void OnInitialized();
    protected virtual void ConfigureModuleCatalog(IModuleCatalog moduleCatalog);
    protected virtual void InitializeModules();
}
public abstract class Prism.PrismBootstrapperBase : object {
    private IContainerExtension _containerExtension;
    private IModuleCatalog _moduleCatalog;
    [CompilerGeneratedAttribute]
private DependencyObject <Shell>k__BackingField;
    public IContainerProvider Container { get; }
    protected DependencyObject Shell { get; protected set; }
    public IContainerProvider get_Container();
    [CompilerGeneratedAttribute]
protected DependencyObject get_Shell();
    [CompilerGeneratedAttribute]
protected void set_Shell(DependencyObject value);
    public void Run();
    protected virtual void ConfigureViewModelLocator();
    protected virtual void Initialize();
    protected abstract virtual IContainerExtension CreateContainerExtension();
    protected virtual IModuleCatalog CreateModuleCatalog();
    protected virtual void RegisterRequiredTypes(IContainerRegistry containerRegistry);
    protected abstract virtual void RegisterTypes(IContainerRegistry containerRegistry);
    protected virtual void ConfigureDefaultRegionBehaviors(IRegionBehaviorFactory regionBehaviors);
    protected virtual void ConfigureRegionAdapterMappings(RegionAdapterMappings regionAdapterMappings);
    protected virtual void RegisterFrameworkExceptionTypes();
    protected abstract virtual DependencyObject CreateShell();
    protected virtual void InitializeShell(DependencyObject shell);
    protected virtual void OnInitialized();
    protected virtual void ConfigureModuleCatalog(IModuleCatalog moduleCatalog);
    protected virtual void InitializeModules();
}
[ExtensionAttribute]
internal static class Prism.PrismInitializationExtensions : object {
    internal static void ConfigureViewModelLocator();
    [ExtensionAttribute]
internal static void RegisterRequiredTypes(IContainerRegistry containerRegistry, IModuleCatalog moduleCatalog);
    [ExtensionAttribute]
internal static void RegisterDefaultRegionBehaviors(IRegionBehaviorFactory regionBehaviors);
    [ExtensionAttribute]
internal static void RegisterDefaultRegionAdapterMappings(RegionAdapterMappings regionAdapterMappings);
    internal static void RunModuleManager(IContainerProvider containerProvider);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Prism.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AdapterInvalidTypeException { get; }
    internal static string CannotChangeRegionNameException { get; }
    internal static string CannotCreateNavigationTarget { get; }
    internal static string CanOnlyAddTypesThatInheritIFromRegionBehavior { get; }
    internal static string ConfigurationStoreCannotBeNull { get; }
    internal static string ContentControlHasContentException { get; }
    internal static string DeactiveNotPossibleException { get; }
    internal static string DefaultTextLoggerPattern { get; }
    internal static string DelegateCommandDelegatesCannotBeNull { get; }
    internal static string DelegateCommandInvalidGenericPayloadType { get; }
    internal static string DirectoryNotFound { get; }
    internal static string DuplicatedModuleGroup { get; }
    internal static string FailedToGetType { get; }
    internal static string HostControlCannotBeNull { get; }
    internal static string HostControlCannotBeSetAfterAttach { get; }
    internal static string HostControlMustBeATabControl { get; }
    internal static string IEnumeratorObsolete { get; }
    internal static string InvalidArgumentAssemblyUri { get; }
    internal static string InvalidDelegateRerefenceTypeException { get; }
    internal static string ItemsControlHasItemsSourceException { get; }
    internal static string MappingExistsException { get; }
    internal static string ModuleNotFound { get; }
    internal static string ModulePathCannotBeNullOrEmpty { get; }
    internal static string ModuleTypeNotFound { get; }
    internal static string MustBeModuleGroupCatalog { get; }
    internal static string NavigationInProgress { get; }
    internal static string NavigationServiceHasNoRegion { get; }
    internal static string NoRegionAdapterException { get; }
    internal static string NoRetrieverCanRetrieveModule { get; }
    internal static string OnViewRegisteredException { get; }
    internal static string PropertySupport_ExpressionNotProperty_Exception { get; }
    internal static string PropertySupport_NotMemberAccessExpression_Exception { get; }
    internal static string PropertySupport_StaticExpression_Exception { get; }
    internal static string RegionBehaviorAttachCannotBeCallWithNullRegion { get; }
    internal static string RegionBehaviorRegionCannotBeSetAfterAttach { get; }
    internal static string RegionCreationException { get; }
    internal static string RegionManagerWithDifferentNameException { get; }
    internal static string RegionNameCannotBeEmptyException { get; }
    internal static string RegionNameExistsException { get; }
    internal static string RegionNotFound { get; }
    internal static string RegionNotInRegionManagerException { get; }
    internal static string RegionViewExistsException { get; }
    internal static string RegionViewNameExistsException { get; }
    internal static string StringCannotBeNullOrEmpty { get; }
    internal static string StringCannotBeNullOrEmpty1 { get; }
    internal static string TypeWithKeyNotRegistered { get; }
    internal static string UpdateRegionException { get; }
    internal static string ValueMustBeOfTypeModuleInfo { get; }
    internal static string ValueNotFound { get; }
    internal static string ViewNotInRegionException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AdapterInvalidTypeException();
    internal static string get_CannotChangeRegionNameException();
    internal static string get_CannotCreateNavigationTarget();
    internal static string get_CanOnlyAddTypesThatInheritIFromRegionBehavior();
    internal static string get_ConfigurationStoreCannotBeNull();
    internal static string get_ContentControlHasContentException();
    internal static string get_DeactiveNotPossibleException();
    internal static string get_DefaultTextLoggerPattern();
    internal static string get_DelegateCommandDelegatesCannotBeNull();
    internal static string get_DelegateCommandInvalidGenericPayloadType();
    internal static string get_DirectoryNotFound();
    internal static string get_DuplicatedModuleGroup();
    internal static string get_FailedToGetType();
    internal static string get_HostControlCannotBeNull();
    internal static string get_HostControlCannotBeSetAfterAttach();
    internal static string get_HostControlMustBeATabControl();
    internal static string get_IEnumeratorObsolete();
    internal static string get_InvalidArgumentAssemblyUri();
    internal static string get_InvalidDelegateRerefenceTypeException();
    internal static string get_ItemsControlHasItemsSourceException();
    internal static string get_MappingExistsException();
    internal static string get_ModuleNotFound();
    internal static string get_ModulePathCannotBeNullOrEmpty();
    internal static string get_ModuleTypeNotFound();
    internal static string get_MustBeModuleGroupCatalog();
    internal static string get_NavigationInProgress();
    internal static string get_NavigationServiceHasNoRegion();
    internal static string get_NoRegionAdapterException();
    internal static string get_NoRetrieverCanRetrieveModule();
    internal static string get_OnViewRegisteredException();
    internal static string get_PropertySupport_ExpressionNotProperty_Exception();
    internal static string get_PropertySupport_NotMemberAccessExpression_Exception();
    internal static string get_PropertySupport_StaticExpression_Exception();
    internal static string get_RegionBehaviorAttachCannotBeCallWithNullRegion();
    internal static string get_RegionBehaviorRegionCannotBeSetAfterAttach();
    internal static string get_RegionCreationException();
    internal static string get_RegionManagerWithDifferentNameException();
    internal static string get_RegionNameCannotBeEmptyException();
    internal static string get_RegionNameExistsException();
    internal static string get_RegionNotFound();
    internal static string get_RegionNotInRegionManagerException();
    internal static string get_RegionViewExistsException();
    internal static string get_RegionViewNameExistsException();
    internal static string get_StringCannotBeNullOrEmpty();
    internal static string get_StringCannotBeNullOrEmpty1();
    internal static string get_TypeWithKeyNotRegistered();
    internal static string get_UpdateRegionException();
    internal static string get_ValueMustBeOfTypeModuleInfo();
    internal static string get_ValueNotFound();
    internal static string get_ViewNotInRegionException();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
internal class Prism.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
[ExtensionAttribute]
public static class System.Collections.ObjectModel.CollectionExtensions : object {
    [ExtensionAttribute]
public static Collection`1<T> AddRange(Collection`1<T> collection, IEnumerable`1<T> items);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.141.978")]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
