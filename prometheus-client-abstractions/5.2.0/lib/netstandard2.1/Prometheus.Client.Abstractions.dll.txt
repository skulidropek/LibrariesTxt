[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Prometheus.Client.Collectors.CollectorConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CollectorConfiguration(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public interface Prometheus.Client.Collectors.ICollector {
    public CollectorConfiguration Configuration { get; }
    public IReadOnlyList`1<string> MetricNames { get; }
    public abstract virtual CollectorConfiguration get_Configuration();
    public abstract virtual IReadOnlyList`1<string> get_MetricNames();
    public abstract virtual void Collect(IMetricsWriter writer);
}
public interface Prometheus.Client.Collectors.ICollectorRegistry {
    public abstract virtual void Add(ICollector collector);
    public abstract virtual bool TryGet(string name, ICollector& collector);
    public abstract virtual TCollector GetOrAdd(TConfig config, Func`2<TConfig, TCollector> collectorFactory);
    public abstract virtual ICollector Remove(string name);
    public abstract virtual bool Remove(ICollector collector);
    public abstract virtual Task CollectToAsync(IMetricsWriter writer, CancellationToken ct);
}
[ExtensionAttribute]
public static class Prometheus.Client.CounterExtensions : object {
    [ExtensionAttribute]
public static void Inc(ICounter counter, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(ICounter counter, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter> metricFamily, double increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter> metricFamily, double increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter> metricFamily, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter> metricFamily, double value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter, TLabels> metricFamily, double increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter, TLabels> metricFamily, double increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter, TLabels> metricFamily, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter, TLabels> metricFamily, double value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter, TLabels> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter, TLabels> metricFamily, double value, DateTimeOffset timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.CounterInt64Extensions : object {
    [ExtensionAttribute]
public static void Inc(ICounter`1<long> counter, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(ICounter`1<long> counter, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter`1<long>> metricFamily, long increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter`1<long>> metricFamily, long increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<ICounter`1<long>> metricFamily, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter`1<long>> metricFamily, long value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter`1<long>> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<ICounter`1<long>> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<ICounter`1<long>, TLabels> metricFamily, long value, DateTimeOffset timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.GaugeExtensions : object {
    [ExtensionAttribute]
public static void Inc(IGauge gauge, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IGauge gauge, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge> metricFamily, double increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge> metricFamily, double increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge> metricFamily, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge> metricFamily, double value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IGauge gauge, double decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IGauge gauge, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge> metricFamily, double decrement);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge> metricFamily, double decrement, long timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge> metricFamily, double decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge> metricFamily, double value);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IGauge gauge, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge> metricFamily, double value);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge, TLabels> metricFamily, double increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge, TLabels> metricFamily, double increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge, TLabels> metricFamily, double increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge, TLabels> metricFamily, double decrement);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge, TLabels> metricFamily, double decrement, long timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge, TLabels> metricFamily, double decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge, TLabels> metricFamily, double value);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, long timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge, TLabels> metricFamily, double value, DateTimeOffset timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.GaugeInt64Extensions : object {
    [ExtensionAttribute]
public static void Inc(IGauge`1<long> gauge, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IGauge`1<long> gauge, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge`1<long>> metricFamily, long increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge`1<long>> metricFamily, long increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`1<IGauge`1<long>> metricFamily, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IGauge`1<long> gauge, long decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IGauge`1<long> gauge, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge`1<long>> metricFamily, long decrement);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge`1<long>> metricFamily, long decrement, long timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`1<IGauge`1<long>> metricFamily, long decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IGauge`1<long> gauge, long val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge`1<long>> metricFamily, long value);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IGauge`1<long>> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long increment);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long increment, long timestamp);
    [ExtensionAttribute]
public static void Inc(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long increment, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void IncTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long decrement);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long decrement, long timestamp);
    [ExtensionAttribute]
public static void Dec(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long decrement, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void DecTo(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, long timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IGauge`1<long>, TLabels> metricFamily, long value, DateTimeOffset timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.HistogramExtensions : object {
    [ExtensionAttribute]
public static void Observe(IHistogram observer, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<IHistogram> metricFamily, double val);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<IHistogram> metricFamily, double val, long timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<IHistogram> metricFamily, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<IHistogram, TLabels> metricFamily, double val);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<IHistogram, TLabels> metricFamily, double val, long timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<IHistogram, TLabels> metricFamily, double val, DateTimeOffset timestamp);
}
[IsReadOnlyAttribute]
public class Prometheus.Client.HistogramState : ValueType {
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KeyValuePair`2<double, long>> <Buckets>k__BackingField;
    public long Count { get; }
    public double Sum { get; }
    public IReadOnlyList`1<KeyValuePair`2<double, long>> Buckets { get; }
    public HistogramState(long count, double sum, IReadOnlyList`1<KeyValuePair`2<double, long>> buckets);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KeyValuePair`2<double, long>> get_Buckets();
}
public interface Prometheus.Client.ICounter {
}
public interface Prometheus.Client.ICounter`1 {
    public abstract virtual void Inc();
    public abstract virtual void Inc(T increment);
    public abstract virtual void Inc(T increment, Nullable`1<long> timestamp);
    public abstract virtual void IncTo(T value);
    public abstract virtual void IncTo(T value, Nullable`1<long> timestamp);
}
public interface Prometheus.Client.IGauge {
}
public interface Prometheus.Client.IGauge`1 {
    public abstract virtual void Inc();
    public abstract virtual void Inc(T increment);
    public abstract virtual void Inc(T increment, Nullable`1<long> timestamp);
    public abstract virtual void IncTo(T value);
    public abstract virtual void IncTo(T value, Nullable`1<long> timestamp);
    public abstract virtual void Set(T val);
    public abstract virtual void Set(T val, Nullable`1<long> timestamp);
    public abstract virtual void Dec();
    public abstract virtual void Dec(T decrement);
    public abstract virtual void Dec(T decrement, Nullable`1<long> timestamp);
    public abstract virtual void DecTo(T value);
    public abstract virtual void DecTo(T value, Nullable`1<long> timestamp);
}
public interface Prometheus.Client.IHistogram {
}
public interface Prometheus.Client.IMetric {
}
public interface Prometheus.Client.IMetric`1 {
    public TState Value { get; }
    public abstract virtual TState get_Value();
    public abstract virtual void Reset();
}
public interface Prometheus.Client.IMetricFactory {
    public abstract virtual ICounter CreateCounter(string name, string help, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<ICounter, ValueTuple`1<string>> CreateCounter(string name, string help, string labelName, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<ICounter, TLabels> CreateCounter(string name, string help, TLabels labelNames, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<ICounter> CreateCounter(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<ICounter> CreateCounter(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual ICounter`1<long> CreateCounterInt64(string name, string help, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<ICounter`1<long>, ValueTuple`1<string>> CreateCounterInt64(string name, string help, string labelName, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<ICounter`1<long>, TLabels> CreateCounterInt64(string name, string help, TLabels labelNames, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<ICounter`1<long>> CreateCounterInt64(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<ICounter`1<long>> CreateCounterInt64(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IGauge CreateGauge(string name, string help, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<IGauge, TLabels> CreateGauge(string name, string help, TLabels labelNames, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<IGauge> CreateGauge(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`2<IGauge, ValueTuple`1<string>> CreateGauge(string name, string help, string labelName, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<IGauge> CreateGauge(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IGauge`1<long> CreateGaugeInt64(string name, string help, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<IGauge`1<long>, ValueTuple`1<string>> CreateGaugeInt64(string name, string help, string labelName, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<IGauge`1<long>, TLabels> CreateGaugeInt64(string name, string help, TLabels labelNames, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<IGauge`1<long>> CreateGaugeInt64(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<IGauge`1<long>> CreateGaugeInt64(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IHistogram CreateHistogram(string name, string help, bool includeTimestamp, Double[] buckets);
    public abstract virtual IMetricFamily`2<IHistogram, ValueTuple`1<string>> CreateHistogram(string name, string help, string labelName, bool includeTimestamp, Double[] buckets);
    public abstract virtual IMetricFamily`2<IHistogram, TLabels> CreateHistogram(string name, string help, TLabels labelNames, bool includeTimestamp, Double[] buckets);
    public abstract virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, Double[] buckets, String[] labelNames);
    public abstract virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, bool includeTimestamp, Double[] buckets, String[] labelNames);
    public abstract virtual IUntyped CreateUntyped(string name, string help, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<IUntyped, ValueTuple`1<string>> CreateUntyped(string name, string help, string labelName, bool includeTimestamp);
    public abstract virtual IMetricFamily`2<IUntyped, TLabels> CreateUntyped(string name, string help, TLabels labelNames, bool includeTimestamp);
    public abstract virtual IMetricFamily`1<IUntyped> CreateUntyped(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<IUntyped> CreateUntyped(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames);
    public abstract virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, bool includeTimestamp, String[] labelNames);
    public abstract virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames, IReadOnlyList`1<QuantileEpsilonPair> objectives, TimeSpan maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public abstract virtual ISummary CreateSummary(string name, string help, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public abstract virtual IMetricFamily`2<ISummary, ValueTuple`1<string>> CreateSummary(string name, string help, string labelName, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public abstract virtual IMetricFamily`2<ISummary, TLabels> CreateSummary(string name, string help, TLabels labelNames, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public abstract virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public abstract virtual void Release(string name);
    public abstract virtual void Release(IMetricFamily`1<TMetric> metricFamily);
    public abstract virtual void Release(IMetricFamily`2<TMetric, TLabels> metricFamily);
}
public interface Prometheus.Client.IMetricFamily`1 {
    public string Name { get; }
    public TMetric Unlabelled { get; }
    public IEnumerable`1<KeyValuePair`2<IReadOnlyList`1<string>, TMetric>> Labelled { get; }
    public IReadOnlyList`1<string> LabelNames { get; }
    public abstract virtual string get_Name();
    public abstract virtual TMetric get_Unlabelled();
    public abstract virtual IEnumerable`1<KeyValuePair`2<IReadOnlyList`1<string>, TMetric>> get_Labelled();
    public abstract virtual TMetric WithLabels(String[] labels);
    public abstract virtual TMetric RemoveLabelled(String[] labels);
    public abstract virtual IReadOnlyList`1<string> get_LabelNames();
}
public interface Prometheus.Client.IMetricFamily`2 {
    public string Name { get; }
    public TMetric Unlabelled { get; }
    public IEnumerable`1<KeyValuePair`2<TLabels, TMetric>> Labelled { get; }
    public TLabels LabelNames { get; }
    public abstract virtual string get_Name();
    public abstract virtual TMetric get_Unlabelled();
    public abstract virtual IEnumerable`1<KeyValuePair`2<TLabels, TMetric>> get_Labelled();
    public abstract virtual TMetric WithLabels(TLabels labels);
    public abstract virtual TMetric RemoveLabelled(TLabels labels);
    public abstract virtual TLabels get_LabelNames();
}
public interface Prometheus.Client.ISummary {
}
public interface Prometheus.Client.IUntyped {
    public abstract virtual void Set(double val);
    public abstract virtual void Set(double val, Nullable`1<long> timestamp);
}
public interface Prometheus.Client.IValueObserver {
    public abstract virtual void Observe(double val);
    public abstract virtual void Observe(double val, Nullable`1<long> timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.MetricFamilyExtensions : object {
    [ExtensionAttribute]
public static TMetric WithLabels(IMetricFamily`2<TMetric, ValueTuple`1<string>> metricFamily, string label);
}
public interface Prometheus.Client.MetricsWriter.ILabelWriter {
    public abstract virtual ILabelWriter WriteLabel(string name, string value);
    public abstract virtual ISampleWriter EndLabels();
}
public interface Prometheus.Client.MetricsWriter.IMetricsWriter {
    public abstract virtual IMetricsWriter StartMetric(string metricName);
    public abstract virtual IMetricsWriter WriteHelp(string help);
    public abstract virtual IMetricsWriter WriteType(MetricType metricType);
    public abstract virtual ISampleWriter StartSample(string suffix);
    public abstract virtual IMetricsWriter EndMetric();
    public abstract virtual Task CloseWriterAsync(CancellationToken ct);
    public abstract virtual Task FlushAsync(CancellationToken ct);
}
public interface Prometheus.Client.MetricsWriter.ISampleWriter {
    public abstract virtual ILabelWriter StartLabels();
    public abstract virtual ISampleWriter WriteValue(double value);
    public abstract virtual ISampleWriter WriteTimestamp(long timestamp);
    public abstract virtual IMetricsWriter EndSample();
}
[ExtensionAttribute]
public static class Prometheus.Client.MetricsWriter.MetricsWriterExtensions : object {
    [ExtensionAttribute]
public static IMetricsWriter WriteSample(IMetricsWriter writer, double value, string suffix, IReadOnlyList`1<string> labelNames, IReadOnlyList`1<string> labelValues, Nullable`1<long> timestamp);
    [ExtensionAttribute]
public static IMetricsWriter WriteMetricHeader(IMetricsWriter writer, string metricName, MetricType metricType, string help);
    [ExtensionAttribute]
public static ILabelWriter WriteLabels(ILabelWriter labelWriter, IReadOnlyList`1<string> labelNames, IReadOnlyList`1<string> labelValues);
}
public enum Prometheus.Client.MetricType : Enum {
    public int value__;
    public static MetricType Counter;
    public static MetricType Gauge;
    public static MetricType Summary;
    public static MetricType Untyped;
    public static MetricType Histogram;
}
[IsReadOnlyAttribute]
public class Prometheus.Client.QuantileEpsilonPair : ValueType {
    [CompilerGeneratedAttribute]
private double <Quantile>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Epsilon>k__BackingField;
    public double Quantile { get; }
    public double Epsilon { get; }
    public QuantileEpsilonPair(double quantile, double epsilon);
    [CompilerGeneratedAttribute]
public double get_Quantile();
    [CompilerGeneratedAttribute]
public double get_Epsilon();
}
[ExtensionAttribute]
public static class Prometheus.Client.SummaryExtensions : object {
    [ExtensionAttribute]
public static void Observe(ISummary observer, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<ISummary> metricFamily, double val);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<ISummary> metricFamily, double val, long timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`1<ISummary> metricFamily, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<ISummary, TLabels> metricFamily, double val);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<ISummary, TLabels> metricFamily, double val, long timestamp);
    [ExtensionAttribute]
public static void Observe(IMetricFamily`2<ISummary, TLabels> metricFamily, double val, DateTimeOffset timestamp);
}
[IsReadOnlyAttribute]
public class Prometheus.Client.SummaryState : ValueType {
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KeyValuePair`2<double, double>> <Quantiles>k__BackingField;
    public long Count { get; }
    public double Sum { get; }
    public IReadOnlyList`1<KeyValuePair`2<double, double>> Quantiles { get; }
    public SummaryState(long count, double sum, IReadOnlyList`1<KeyValuePair`2<double, double>> quantiles);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KeyValuePair`2<double, double>> get_Quantiles();
}
[ExtensionAttribute]
public static class Prometheus.Client.UntypedExtensions : object {
    [ExtensionAttribute]
public static void Set(IUntyped untyped, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IUntyped> metricFamily, double val);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IUntyped> metricFamily, double val, int timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`1<IUntyped> metricFamily, double val, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IUntyped, TLabels> metricFamily, double val);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IUntyped, TLabels> metricFamily, double val, int timestamp);
    [ExtensionAttribute]
public static void Set(IMetricFamily`2<IUntyped, TLabels> metricFamily, double val, DateTimeOffset timestamp);
}
[ExtensionAttribute]
public static class Prometheus.Client.ValueObserverExtensions : object {
    [ExtensionAttribute]
public static void ObserveDuration(IValueObserver observer, Action method);
    [ExtensionAttribute]
public static T ObserveDuration(IValueObserver observer, Func`1<T> method);
    [AsyncStateMachineAttribute("Prometheus.Client.ValueObserverExtensions/<ObserveDurationAsync>d__2")]
[ExtensionAttribute]
public static Task ObserveDurationAsync(IValueObserver observer, Func`1<Task> method);
    [AsyncStateMachineAttribute("Prometheus.Client.ValueObserverExtensions/<ObserveDurationAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<T> ObserveDurationAsync(IValueObserver observer, Func`1<Task`1<T>> method);
    private static double GetDuration(long startTs);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
