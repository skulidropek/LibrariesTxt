[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Prometheus.Client.Collectors.CollectorRegistry : object {
    private static Regex _metricNameRegex;
    private ReaderWriterLockSlim _lock;
    private HashSet`1<string> _usedMetricNames;
    private Dictionary`2<string, ICollector> _collectors;
    private IEnumerable`1<ICollector> _enumerableCollectors;
    private static CollectorRegistry();
    public sealed virtual void Dispose();
    public sealed virtual void Add(ICollector collector);
    public sealed virtual bool TryGet(string name, ICollector& collector);
    public sealed virtual TCollector GetOrAdd(TConfig config, Func`2<TConfig, TCollector> collectorFactory);
    public sealed virtual ICollector Remove(string name);
    public sealed virtual bool Remove(ICollector collector);
    [AsyncStateMachineAttribute("Prometheus.Client.Collectors.CollectorRegistry/<CollectToAsync>d__12")]
public sealed virtual Task CollectToAsync(IMetricsWriter writer, CancellationToken ct);
    private void RemoveCollector(string key, ICollector collector);
    private void AddInternal(ICollector collector);
    private IEnumerable`1<ICollector> GetSortedCollectors();
    [CompilerGeneratedAttribute]
internal static bool <GetOrAdd>g__TryGetCollector|9_0(Dictionary`2<string, ICollector> dict, string name, TCollector& result);
}
[ExtensionAttribute]
public static class Prometheus.Client.Collectors.CollectorRegistryExtensions : object {
    [ExtensionAttribute]
public static void MoveTo(ICollectorRegistry registry, string collectorName, ICollectorRegistry destination);
    [ExtensionAttribute]
public static void CopyTo(ICollectorRegistry registry, string collectorName, ICollectorRegistry destination);
}
[ExtensionAttribute]
public static class Prometheus.Client.Collectors.DefaultCollectors : object {
    [ExtensionAttribute]
public static ICollectorRegistry UseDefaultCollectors(ICollectorRegistry registry);
    [ExtensionAttribute]
public static ICollectorRegistry UseDefaultCollectors(ICollectorRegistry registry, string prefixName);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseDefaultCollectors(ICollectorRegistry registry, bool addLegacyMetrics);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseDefaultCollectors(ICollectorRegistry registry, string prefixName, bool addLegacyMetrics);
}
[ExtensionAttribute]
public static class Prometheus.Client.Collectors.DotNetStats.CollectorRegistryExtensions : object {
    [ExtensionAttribute]
public static ICollectorRegistry UseDotNetStats(ICollectorRegistry registry);
    [ExtensionAttribute]
public static ICollectorRegistry UseDotNetStats(ICollectorRegistry registry, string prefixName);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseDotNetStats(ICollectorRegistry registry, bool addLegacyMetrics);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseDotNetStats(ICollectorRegistry registry, string prefixName, bool addLegacyMetrics);
}
public class Prometheus.Client.Collectors.DotNetStats.GCCollectionCountCollector : object {
    private static string _help;
    private string _name;
    private String[] _genNames;
    [CompilerGeneratedAttribute]
private CollectorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <MetricNames>k__BackingField;
    public CollectorConfiguration Configuration { get; }
    public IReadOnlyList`1<string> MetricNames { get; }
    public GCCollectionCountCollector(string prefixName);
    [CompilerGeneratedAttribute]
public sealed virtual CollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_MetricNames();
    public sealed virtual void Collect(IMetricsWriter writer);
}
public class Prometheus.Client.Collectors.DotNetStats.GCTotalMemoryCollector : object {
    private static string _help;
    private string _name;
    private string _legacyName;
    private bool _addLegacyMetrics;
    [CompilerGeneratedAttribute]
private CollectorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <MetricNames>k__BackingField;
    public CollectorConfiguration Configuration { get; }
    public IReadOnlyList`1<string> MetricNames { get; }
    public GCTotalMemoryCollector(string prefixName);
    [ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public GCTotalMemoryCollector(bool addLegacyMetrics);
    [ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public GCTotalMemoryCollector(string prefixName, bool addLegacyMetrics);
    [CompilerGeneratedAttribute]
public sealed virtual CollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_MetricNames();
    public sealed virtual void Collect(IMetricsWriter writer);
}
internal class Prometheus.Client.Collectors.MetricWriterWrapper : object {
    private IMetricsWriter _baseWriter;
    private ICollector _currentCollector;
    public MetricWriterWrapper(IMetricsWriter baseWriter);
    public void SetCurrentCollector(ICollector collector);
    public sealed virtual Task FlushAsync(CancellationToken ct);
    public sealed virtual Task CloseWriterAsync(CancellationToken ct);
    public sealed virtual void Dispose();
    public sealed virtual IMetricsWriter StartMetric(string metricName);
    public sealed virtual ISampleWriter StartSample(string suffix);
    public sealed virtual IMetricsWriter WriteHelp(string help);
    public sealed virtual IMetricsWriter WriteType(MetricType metricType);
    public sealed virtual IMetricsWriter EndMetric();
}
[ExtensionAttribute]
public static class Prometheus.Client.Collectors.ProcessStats.CollectorRegistryExtensions : object {
    [ExtensionAttribute]
public static ICollectorRegistry UseProcessStats(ICollectorRegistry registry);
    [ExtensionAttribute]
public static ICollectorRegistry UseProcessStats(ICollectorRegistry registry, string prefixName);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseProcessStats(ICollectorRegistry registry, bool addLegacyMetrics);
    [ExtensionAttribute]
[ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public static ICollectorRegistry UseProcessStats(ICollectorRegistry registry, string prefixName, bool addLegacyMetrics);
}
public class Prometheus.Client.Collectors.ProcessStats.ProcessCollector : object {
    private string _processIdName;
    private static string _processIdHelp;
    private string _cpuSecondsTotalName;
    private static string _cpuSecondsTotalHelp;
    private string _startTimeSecondsName;
    private static string _startTimeSecondsHelp;
    private string _virtualMemoryBytesName;
    private string _legacyVirtualMemoryBytesName;
    private static string _virtualMemoryBytesHelp;
    private string _workingSetBytesName;
    private string _legacyWorkingSetBytesName;
    private static string _workingSetBytesHelp;
    private string _privateMemoryBytesName;
    private string _legacyPrivateMemoryBytesName;
    private static string _privateMemoryBytesHelp;
    private string _numThreadsName;
    private static string _numThreadsHelp;
    private string _openHandlesName;
    private static string _openHandlesHelp;
    private Process _process;
    private double _processStartTime;
    private bool _addLegacyMetrics;
    [CompilerGeneratedAttribute]
private CollectorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <MetricNames>k__BackingField;
    public CollectorConfiguration Configuration { get; }
    public IReadOnlyList`1<string> MetricNames { get; }
    public ProcessCollector(Process process);
    public ProcessCollector(Process process, string prefixName);
    [ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public ProcessCollector(Process process, bool addLegacyMetricNames);
    [ObsoleteAttribute("'addLegacyMetrics' will be removed in future versions")]
public ProcessCollector(Process process, string prefixName, bool addLegacyMetrics);
    [CompilerGeneratedAttribute]
public sealed virtual CollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_MetricNames();
    public sealed virtual void Collect(IMetricsWriter writer);
}
public class Prometheus.Client.Counter : MetricBase`1<MetricConfiguration> {
    private ThreadSafeDouble _value;
    public double Value { get; }
    public Counter(MetricConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual void Inc();
    public sealed virtual void Inc(double increment);
    public sealed virtual void Inc(double increment, Nullable`1<long> timestamp);
    public sealed virtual void IncTo(double value);
    public sealed virtual void IncTo(double value, Nullable`1<long> timestamp);
    public sealed virtual double get_Value();
    public sealed virtual void Reset();
    protected internal virtual void Collect(IMetricsWriter writer);
    private void IncInternal(double increment, Nullable`1<long> timestamp);
}
public class Prometheus.Client.CounterInt64 : MetricBase`1<MetricConfiguration> {
    private ThreadSafeLong _value;
    public long Value { get; }
    public CounterInt64(MetricConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual void Inc();
    public sealed virtual void Inc(long increment);
    public sealed virtual void Inc(long increment, Nullable`1<long> timestamp);
    public sealed virtual void IncTo(long value);
    public sealed virtual void IncTo(long value, Nullable`1<long> timestamp);
    public sealed virtual long get_Value();
    public sealed virtual void Reset();
    protected internal virtual void Collect(IMetricsWriter writer);
    private void IncInternal(long increment, Nullable`1<long> timestamp);
}
public class Prometheus.Client.Gauge : MetricBase`1<MetricConfiguration> {
    private ThreadSafeDouble _value;
    public double Value { get; }
    internal Gauge(MetricConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual void Inc();
    public sealed virtual void Inc(double increment);
    public sealed virtual void Inc(double increment, Nullable`1<long> timestamp);
    public sealed virtual void IncTo(double value);
    public sealed virtual void IncTo(double value, Nullable`1<long> timestamp);
    public sealed virtual void Set(double val);
    public sealed virtual void Set(double val, Nullable`1<long> timestamp);
    public sealed virtual void Dec();
    public sealed virtual void Dec(double decrement);
    public sealed virtual void Dec(double decrement, Nullable`1<long> timestamp);
    public sealed virtual void DecTo(double value);
    public sealed virtual void DecTo(double value, Nullable`1<long> timestamp);
    public sealed virtual double get_Value();
    public sealed virtual void Reset();
    protected internal virtual void Collect(IMetricsWriter writer);
    private void IncInternal(double increment, Nullable`1<long> timestamp);
}
public class Prometheus.Client.GaugeInt64 : MetricBase`1<MetricConfiguration> {
    private ThreadSafeLong _value;
    public long Value { get; }
    internal GaugeInt64(MetricConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual void Inc();
    public sealed virtual void Inc(long increment);
    public sealed virtual void Inc(long increment, Nullable`1<long> timestamp);
    public sealed virtual void IncTo(long value);
    public sealed virtual void IncTo(long value, Nullable`1<long> timestamp);
    public sealed virtual void Set(long val);
    public sealed virtual void Set(long val, Nullable`1<long> timestamp);
    public sealed virtual void Dec();
    public sealed virtual void Dec(long decrement);
    public sealed virtual void Dec(long decrement, Nullable`1<long> timestamp);
    public sealed virtual void DecTo(long value);
    public sealed virtual void DecTo(long value, Nullable`1<long> timestamp);
    public sealed virtual long get_Value();
    public sealed virtual void Reset();
    protected internal virtual void Collect(IMetricsWriter writer);
    private void IncInternal(long increment, Nullable`1<long> timestamp);
}
public class Prometheus.Client.Histogram : MetricBase`1<HistogramConfiguration> {
    private IHistogramBucketStore _bucketsStore;
    private ThreadSafeDouble _sum;
    public HistogramState Value { get; }
    public Histogram(HistogramConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual HistogramState get_Value();
    public sealed virtual void Reset();
    public sealed virtual void Observe(double val);
    public sealed virtual void Observe(double val, Nullable`1<long> timestamp);
    protected internal virtual void Collect(IMetricsWriter writer);
    private HistogramState ForkState();
}
public class Prometheus.Client.HistogramConfiguration : MetricConfiguration {
    private static Double[] _defaultBuckets;
    private static String[] _defaultFormattedBuckets;
    private Lazy`1<String[]> _formattedBuckets;
    [CompilerGeneratedAttribute]
private Double[] <Buckets>k__BackingField;
    public Double[] Buckets { get; }
    internal String[] FormattedBuckets { get; }
    private static HistogramConfiguration();
    public HistogramConfiguration(string name, string help, String[] labels, Double[] buckets, bool includeTimestamp);
    [CompilerGeneratedAttribute]
public Double[] get_Buckets();
    internal String[] get_FormattedBuckets();
    private static String[] GetFormattedBuckets(Double[] buckets);
    [CompilerGeneratedAttribute]
private String[] <.ctor>b__4_2();
}
internal class Prometheus.Client.HistogramImpl.HistogramHighBucketsStore : object {
    private Double[] _bounds;
    [CompilerGeneratedAttribute]
private ThreadSafeLong[] <Buckets>k__BackingField;
    public ThreadSafeLong[] Buckets { get; }
    public HistogramHighBucketsStore(Double[] bucketBounds);
    public sealed virtual void Observe(double value);
    public sealed virtual void Reset();
    [CompilerGeneratedAttribute]
public sealed virtual ThreadSafeLong[] get_Buckets();
}
internal class Prometheus.Client.HistogramImpl.HistogramLowBucketsStore : object {
    private Double[] _bounds;
    [CompilerGeneratedAttribute]
private ThreadSafeLong[] <Buckets>k__BackingField;
    public ThreadSafeLong[] Buckets { get; }
    public HistogramLowBucketsStore(Double[] bucketBounds);
    public sealed virtual void Observe(double value);
    public sealed virtual void Reset();
    [CompilerGeneratedAttribute]
public sealed virtual ThreadSafeLong[] get_Buckets();
}
internal interface Prometheus.Client.HistogramImpl.IHistogramBucketStore {
    public ThreadSafeLong[] Buckets { get; }
    public abstract virtual void Observe(double value);
    public abstract virtual void Reset();
    public abstract virtual ThreadSafeLong[] get_Buckets();
}
[ExtensionAttribute]
internal static class Prometheus.Client.LabelsHelper : object {
    public static Type MakeValueTupleType(int len);
    public static int GetSize();
    public static int GetHashCode(TTuple values);
    public static int GetHashCode(IReadOnlyList`1<string> values);
    public static String[] ToArray(TTuple values);
    public static TTuple FromArray(IReadOnlyList`1<string> values);
    private static Func`4<TTuple, TAggregate, Func`4<string, int, TAggregate, TAggregate>, TAggregate> MakeReducer();
    private static Func`2<IReadOnlyList`1<string>, TTuple> GenerateParser();
    [ExtensionAttribute]
private static void Fill(IList`1<T> target, T value, int offset, int size);
    private static int HashCombine(int h1, int h2);
    private static bool Validate(Type tupleType);
    [CompilerGeneratedAttribute]
internal static int <GetSize>g__GetTupleSize|1_0(Type tupleType);
    [CompilerGeneratedAttribute]
internal static Expression <GenerateParser>g__BuildUpTuple|7_0(Type tupleType, ParameterExpression source, int offset);
}
public abstract class Prometheus.Client.MetricBase`1 : object {
    protected TConfig Configuration;
    private bool _includeTimestamp;
    private Func`1<DateTimeOffset> _currentTimeProvider;
    private long _timestamp;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <LabelValues>k__BackingField;
    protected internal IReadOnlyList`1<string> LabelValues { get; }
    protected internal Nullable`1<long> Timestamp { get; }
    protected MetricBase`1(TConfig config, IReadOnlyList`1<string> labelValues, Func`1<DateTimeOffset> currentTimeProvider);
    [CompilerGeneratedAttribute]
protected internal IReadOnlyList`1<string> get_LabelValues();
    protected internal Nullable`1<long> get_Timestamp();
    protected internal abstract virtual void Collect(IMetricsWriter writer);
    protected DateTimeOffset GetUtcNow();
    protected void TrackObservation(Nullable`1<long> timestamp);
}
public class Prometheus.Client.MetricConfiguration : CollectorConfiguration {
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <LabelNames>k__BackingField;
    public string Help { get; }
    public bool IncludeTimestamp { get; }
    public IReadOnlyList`1<string> LabelNames { get; }
    public MetricConfiguration(string name, string help, String[] labels, bool includeTimestamp);
    [CompilerGeneratedAttribute]
public string get_Help();
    [CompilerGeneratedAttribute]
public bool get_IncludeTimestamp();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_LabelNames();
    private static bool ValidateLabelName(string labelName);
}
public class Prometheus.Client.MetricFactory : object {
    private ICollectorRegistry _registry;
    private object _factoryProxyLock;
    private Func`3[] _counterFactoryProxies;
    private Func`3[] _counterInt64FactoryProxies;
    private Func`3[] _gaugeFactoryProxies;
    private Func`3[] _gaugeInt64FactoryProxies;
    private Func`3[] _untypedFactoryProxies;
    private Func`3[] _histogramFactoryProxies;
    private Func`3[] _summaryFactoryProxies;
    public MetricFactory(ICollectorRegistry registry);
    public sealed virtual ICounter CreateCounter(string name, string help, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<ICounter, ValueTuple`1<string>> CreateCounter(string name, string help, string labelName, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<ICounter, TLabels> CreateCounter(string name, string help, TLabels labelNames, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<ICounter> CreateCounter(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<ICounter> CreateCounter(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual ICounter`1<long> CreateCounterInt64(string name, string help, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<ICounter`1<long>, ValueTuple`1<string>> CreateCounterInt64(string name, string help, string labelName, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<ICounter`1<long>, TLabels> CreateCounterInt64(string name, string help, TLabels labelNames, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<ICounter`1<long>> CreateCounterInt64(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<ICounter`1<long>> CreateCounterInt64(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IGauge CreateGauge(string name, string help, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<IGauge, TLabels> CreateGauge(string name, string help, TLabels labelNames, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<IGauge> CreateGauge(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`2<IGauge, ValueTuple`1<string>> CreateGauge(string name, string help, string labelName, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<IGauge> CreateGauge(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IGauge`1<long> CreateGaugeInt64(string name, string help, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<IGauge`1<long>, ValueTuple`1<string>> CreateGaugeInt64(string name, string help, string labelName, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<IGauge`1<long>, TLabels> CreateGaugeInt64(string name, string help, TLabels labelNames, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<IGauge`1<long>> CreateGaugeInt64(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<IGauge`1<long>> CreateGaugeInt64(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IHistogram CreateHistogram(string name, string help, bool includeTimestamp, Double[] buckets);
    public sealed virtual IMetricFamily`2<IHistogram, ValueTuple`1<string>> CreateHistogram(string name, string help, string labelName, bool includeTimestamp, Double[] buckets);
    public sealed virtual IMetricFamily`2<IHistogram, TLabels> CreateHistogram(string name, string help, TLabels labelNames, bool includeTimestamp, Double[] buckets);
    public sealed virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, Double[] buckets, String[] labelNames);
    public sealed virtual IMetricFamily`1<IHistogram> CreateHistogram(string name, string help, bool includeTimestamp, Double[] buckets, String[] labelNames);
    public sealed virtual IUntyped CreateUntyped(string name, string help, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<IUntyped, ValueTuple`1<string>> CreateUntyped(string name, string help, string labelName, bool includeTimestamp);
    public sealed virtual IMetricFamily`2<IUntyped, TLabels> CreateUntyped(string name, string help, TLabels labelNames, bool includeTimestamp);
    public sealed virtual IMetricFamily`1<IUntyped> CreateUntyped(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<IUntyped> CreateUntyped(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames);
    public sealed virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, bool includeTimestamp, String[] labelNames);
    public sealed virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames, IReadOnlyList`1<QuantileEpsilonPair> objectives, TimeSpan maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public sealed virtual ISummary CreateSummary(string name, string help, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public sealed virtual IMetricFamily`2<ISummary, ValueTuple`1<string>> CreateSummary(string name, string help, string labelName, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public sealed virtual IMetricFamily`2<ISummary, TLabels> CreateSummary(string name, string help, TLabels labelNames, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public sealed virtual IMetricFamily`1<ISummary> CreateSummary(string name, string help, String[] labelNames, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    public sealed virtual void Release(string name);
    public sealed virtual void Release(IMetricFamily`1<TMetric> metricFamily);
    public sealed virtual void Release(IMetricFamily`2<TMetric, TLabels> metricFamily);
    private TCollector TryGetByName(string name);
    private static void ValidateLabelNames(IMetricFamily`2<TMetric, TLabels> metric, TLabels actualNames);
    private static void ValidateLabelNames(IMetricFamily`1<TMetric> metric, IReadOnlyList`1<string> actualNames);
    internal MetricFamily`4<ICounter, Counter, TLabels, MetricConfiguration> CreateCounterInternal(MetricConfiguration configuration);
    internal MetricFamily`4<ICounter`1<long>, CounterInt64, TLabels, MetricConfiguration> CreateCounterInt64Internal(MetricConfiguration configuration);
    internal MetricFamily`4<IGauge, Gauge, TLabels, MetricConfiguration> CreateGaugeInternal(MetricConfiguration configuration);
    internal MetricFamily`4<IGauge`1<long>, GaugeInt64, TLabels, MetricConfiguration> CreateGaugeInt64Internal(MetricConfiguration configuration);
    internal MetricFamily`4<IHistogram, Histogram, TLabels, HistogramConfiguration> CreateHistogramInternal(HistogramConfiguration configuration);
    internal MetricFamily`4<IUntyped, Untyped, TLabels, MetricConfiguration> CreateUntypedInternal(MetricConfiguration configuration);
    internal MetricFamily`4<ISummary, Summary, TLabels, SummaryConfiguration> CreateSummaryInternal(SummaryConfiguration configuration);
    internal Func`3<MetricFactory, MetricConfiguration, IMetricFamily`1<ICounter>> GetCounterFactory(int labelNamesLen);
    internal Func`3<MetricFactory, MetricConfiguration, IMetricFamily`1<ICounter`1<long>>> GetCounterInt64Factory(int labelNamesLen);
    internal Func`3<MetricFactory, MetricConfiguration, IMetricFamily`1<IGauge>> GetGaugeFactory(int labelNamesLen);
    internal Func`3<MetricFactory, MetricConfiguration, IMetricFamily`1<IGauge`1<long>>> GetGaugeInt64Factory(int labelNamesLen);
    internal Func`3<MetricFactory, MetricConfiguration, IMetricFamily`1<IUntyped>> GetUntypedFactory(int labelNamesLen);
    internal Func`3<MetricFactory, HistogramConfiguration, IMetricFamily`1<IHistogram>> GetHistogramFactory(int labelNamesLen);
    internal Func`3<MetricFactory, SummaryConfiguration, IMetricFamily`1<ISummary>> GetSummaryFactory(int labelNamesLen);
    private Func`3<MetricFactory, TConfiguration, IMetricFamily`1<TMetric>> GetFactory(Func`3[]& cache, string targetMethodName, int labelNamesLen);
}
public class Prometheus.Client.MetricFamily`4 : object {
    private MetricType _metricType;
    private TConfig _configuration;
    private IReadOnlyList`1<string> _metricNames;
    private Func`3<TConfig, IReadOnlyList`1<string>, TImplementation> _instanceFactory;
    private Lazy`1<TImplementation> _unlabelled;
    private ConcurrentDictionary`2<int, TImplementation> _labelledMetrics;
    [CompilerGeneratedAttribute]
private TLabels <LabelNames>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<KeyValuePair`2<TLabels, TMetric>> Labelled { get; }
    private CollectorConfiguration Prometheus.Client.Collectors.ICollector.Configuration { get; }
    private IReadOnlyList`1<string> Prometheus.Client.Collectors.ICollector.MetricNames { get; }
    public TMetric Unlabelled { get; }
    public TLabels LabelNames { get; }
    private TMetric Prometheus.Client.IMetricFamily<TMetric>.Unlabelled { get; }
    private IEnumerable`1<KeyValuePair`2<IReadOnlyList`1<string>, TMetric>> Prometheus.Client.IMetricFamily<TMetric>.Labelled { get; }
    private IReadOnlyList`1<string> Prometheus.Client.IMetricFamily<TMetric>.LabelNames { get; }
    public MetricFamily`4(TConfig configuration, MetricType metricType, Func`3<TConfig, IReadOnlyList`1<string>, TImplementation> instanceFactory);
    public sealed virtual string get_Name();
    public sealed virtual IEnumerable`1<KeyValuePair`2<TLabels, TMetric>> get_Labelled();
    private sealed virtual override CollectorConfiguration Prometheus.Client.Collectors.ICollector.get_Configuration();
    private sealed virtual override IReadOnlyList`1<string> Prometheus.Client.Collectors.ICollector.get_MetricNames();
    public sealed virtual TMetric get_Unlabelled();
    [CompilerGeneratedAttribute]
public sealed virtual TLabels get_LabelNames();
    private sealed virtual override TMetric Prometheus.Client.IMetricFamily<TMetric>.get_Unlabelled();
    private sealed virtual override IEnumerable`1<KeyValuePair`2<IReadOnlyList`1<string>, TMetric>> Prometheus.Client.IMetricFamily<TMetric>.get_Labelled();
    private sealed virtual override IReadOnlyList`1<string> Prometheus.Client.IMetricFamily<TMetric>.get_LabelNames();
    private sealed virtual override TMetric Prometheus.Client.IMetricFamily<TMetric>.WithLabels(String[] labels);
    private sealed virtual override TMetric Prometheus.Client.IMetricFamily<TMetric>.RemoveLabelled(String[] labels);
    public sealed virtual TMetric WithLabels(TLabels labels);
    public sealed virtual TMetric RemoveLabelled(TLabels labels);
    private sealed virtual override void Prometheus.Client.Collectors.ICollector.Collect(IMetricsWriter writer);
    [IteratorStateMachineAttribute("Prometheus.Client.MetricFamily`4/<EnumerateLabelled>d__31")]
private IEnumerable`1<KeyValuePair`2<TLabels, TMetric>> EnumerateLabelled();
    [IteratorStateMachineAttribute("Prometheus.Client.MetricFamily`4/<EnumerateLabelledAsStrings>d__32")]
private IEnumerable`1<KeyValuePair`2<IReadOnlyList`1<string>, TMetric>> EnumerateLabelledAsStrings();
    [CompilerGeneratedAttribute]
private TImplementation <.ctor>b__6_0();
}
public static class Prometheus.Client.Metrics : object {
    private static Lazy`1<ICollectorRegistry> _defaultCollectorRegistry;
    private static Lazy`1<IMetricFactory> _defaultFactory;
    public static ICollectorRegistry DefaultCollectorRegistry { get; }
    public static IMetricFactory DefaultFactory { get; }
    private static Metrics();
    public static ICollectorRegistry get_DefaultCollectorRegistry();
    public static IMetricFactory get_DefaultFactory();
}
internal class Prometheus.Client.MetricsWriter.MetricsTextWriter : object {
    private static int _defaultBufferSize;
    private static ArrayPool`1<byte> _arrayPool;
    private static Encoding _encoding;
    private static Byte[] _encodingPreamble;
    private static Byte[] _tokenSeparator;
    private static Byte[] _helpPrefix;
    private static Byte[] _typePrefix;
    private static Byte[] _labelsStart;
    private static Byte[] _labelsEnd;
    private static Byte[] _labelsEq;
    private static Byte[] _labelsSeparator;
    private static Byte[] _labelTextQualifier;
    private static Byte[] _newLine;
    private static IReadOnlyDictionary`2<MetricType, Byte[]> _metricTypesMap;
    private Stream _stream;
    private Queue`1<ArraySegment`1<byte>> _chunks;
    private Byte[] _buffer;
    private int _position;
    private string _currentMetricName;
    private ArraySegment`1<byte> _currentMetricEncoded;
    private WriterState _state;
    private static Char[] _forbidden;
    public MetricsTextWriter(Stream stream);
    private static MetricsTextWriter();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual IMetricsWriter StartMetric(string metricName);
    public sealed virtual IMetricsWriter WriteHelp(string help);
    public sealed virtual IMetricsWriter WriteType(MetricType metricType);
    public sealed virtual ISampleWriter StartSample(string suffix);
    public sealed virtual ILabelWriter StartLabels();
    public sealed virtual ILabelWriter WriteLabel(string name, string value);
    public sealed virtual ISampleWriter EndLabels();
    public sealed virtual ISampleWriter WriteValue(double value);
    public sealed virtual ISampleWriter WriteTimestamp(long timestamp);
    public sealed virtual IMetricsWriter EndSample();
    public sealed virtual IMetricsWriter EndMetric();
    public sealed virtual Task CloseWriterAsync(CancellationToken ct);
    public sealed virtual Task FlushAsync(CancellationToken ct);
    [AsyncStateMachineAttribute("Prometheus.Client.MetricsWriter.MetricsTextWriter/<FlushInternalAsync>d__37")]
private Task FlushInternalAsync(bool freeUpCurrentBuffer, CancellationToken ct);
    private static IReadOnlyDictionary`2<MetricType, Byte[]> BuildMetricTypesMap();
    private void ValidateState(string callerMethod, WriterState expectedStates);
    private string EscapeValue(string val);
    private void Write(double value);
    private ArraySegment`1<byte> Write(string value);
    private void Write(Span`1<byte> bytes);
    private void CleanUp();
    private void EnsureBufferCapacity(int requiredCapacity);
    private void RotateBuffer(int requiredCapacity);
}
public static class Prometheus.Client.ScrapeHandler : object {
    [AsyncStateMachineAttribute("Prometheus.Client.ScrapeHandler/<ProcessAsync>d__0")]
public static Task ProcessAsync(ICollectorRegistry registry, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("Prometheus.Client.ScrapeHandler/<ProcessAsync>d__1")]
public static Task`1<MemoryStream> ProcessAsync(ICollectorRegistry registry, CancellationToken ct);
}
public class Prometheus.Client.Summary : MetricBase`1<SummaryConfiguration> {
    private static ArrayPool`1<double> _arrayPool;
    private QuantileStream _quantileStream;
    private ThreadSafeDouble _sum;
    private ThreadSafeLong _count;
    public SummaryState Value { get; }
    public Summary(SummaryConfiguration configuration, IReadOnlyList`1<string> labels, Func`1<DateTimeOffset> currentTimeProvider);
    private static Summary();
    public sealed virtual SummaryState get_Value();
    public sealed virtual void Reset();
    public sealed virtual void Observe(double val);
    public sealed virtual void Observe(double val, Nullable`1<long> timestamp);
    internal void ForkState(Int64& count, Double& sum, Double[] values);
    protected internal virtual void Collect(IMetricsWriter writer);
}
public class Prometheus.Client.SummaryConfiguration : MetricConfiguration {
    private static string _quantileLabel;
    private static int _defaultAgeBuckets;
    private static int _defaultBufCap;
    public static IReadOnlyList`1<QuantileEpsilonPair> DefaultObjectives;
    private static Double[] _defaultSortedObjectives;
    private static TimeSpan _defaultMaxAge;
    private Lazy`1<String[]> _formattedObjectives;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<QuantileEpsilonPair> <Objectives>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AgeBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufCap>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <SortedObjectives>k__BackingField;
    public IReadOnlyList`1<QuantileEpsilonPair> Objectives { get; }
    public TimeSpan MaxAge { get; }
    public int AgeBuckets { get; }
    public int BufCap { get; }
    internal Double[] SortedObjectives { get; }
    internal String[] FormattedObjectives { get; }
    public SummaryConfiguration(string name, string help, String[] labelNames, bool includeTimestamp, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    private static SummaryConfiguration();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<QuantileEpsilonPair> get_Objectives();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public int get_AgeBuckets();
    [CompilerGeneratedAttribute]
public int get_BufCap();
    [CompilerGeneratedAttribute]
internal Double[] get_SortedObjectives();
    internal String[] get_FormattedObjectives();
    private static String[] GetFormattedObjectives(IReadOnlyList`1<double> objectives);
    [CompilerGeneratedAttribute]
private String[] <.ctor>b__7_0();
}
internal class Prometheus.Client.SummaryImpl.Invariant : MulticastDelegate {
    public Invariant(object object, IntPtr method);
    public virtual double Invoke(SampleStream stream, double r);
    public virtual IAsyncResult BeginInvoke(SampleStream stream, double r, AsyncCallback callback, object object);
    public virtual double EndInvoke(IAsyncResult result);
}
internal static class Prometheus.Client.SummaryImpl.Invariants : object {
    public static Invariant LowBiased(double epsilon);
    public static Invariant HighBiased(double epsilon);
    public static Invariant Targeted(IReadOnlyList`1<QuantileEpsilonPair> targets);
}
internal class Prometheus.Client.SummaryImpl.QuantileStream : object {
    private object _bufferLock;
    private TimeSpan _streamDuration;
    private ReaderWriterLockSlim _sampleStreamsLock;
    private Double[] _buffer;
    private SampleStream[] _sampleStreams;
    private Func`1<DateTimeOffset> _currentTimeProvider;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _bufferPosition;
    private int _headStreamIndex;
    private DateTimeOffset _nextStreamRotationOffset;
    public QuantileStream(int bufferSize, TimeSpan streamDuration, int ageBuckets, Invariant invariant, Func`1<DateTimeOffset> currentTimeProvider);
    public void Append(double value);
    public void Reset();
    public void FlushBuffer();
    private void FlushBuffer(Span`1<double> destination, Int32& bufferSize);
    private void PopulateSampleStreams(ReadOnlySpan`1<double> data);
    private bool ShouldFlushBuffer();
    public double Query(double q);
}
[IsReadOnlyAttribute]
internal class Prometheus.Client.SummaryImpl.Sample : ValueType {
    public static Sample Empty;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    public double Value { get; }
    public int Width { get; }
    public int Delta { get; }
    public Sample(double value, int width, int delta);
    private static Sample();
    public static bool IsEmpty(Sample sample);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Delta();
}
internal class Prometheus.Client.SummaryImpl.SampleStream : object {
    private static Predicate`1<Sample> _isEmptySample;
    private Invariant _invariant;
    private List`1<Sample> _samples;
    private int _n;
    public int Count { get; }
    public SampleStream(Invariant invariant);
    private static SampleStream();
    public int get_Count();
    public void InsertRange(ReadOnlySpan`1<double> samples);
    private void Compress();
    public void Reset();
    public double Query(double q);
}
internal class Prometheus.Client.ThreadSafeDouble : ValueType {
    private long _value;
    private bool _isNan;
    public double Value { get; public set; }
    public ThreadSafeDouble(double value);
    public double get_Value();
    public void set_Value(double value);
    public void Add(double increment);
    public void IncTo(double value);
    public void DecTo(double value);
    internal static bool IsNaN(double val);
}
internal class Prometheus.Client.ThreadSafeLong : ValueType {
    private long _value;
    public long Value { get; public set; }
    public ThreadSafeLong(long value);
    public long get_Value();
    public void set_Value(long value);
    public void Add(long increment);
    public void IncTo(long value);
    public void DecTo(long value);
}
public class Prometheus.Client.Untyped : MetricBase`1<MetricConfiguration> {
    private ThreadSafeDouble _value;
    public double Value { get; }
    internal Untyped(MetricConfiguration configuration, IReadOnlyList`1<string> labels);
    public sealed virtual void Set(double val);
    public sealed virtual void Set(double val, Nullable`1<long> timestamp);
    public sealed virtual double get_Value();
    public sealed virtual void Reset();
    protected internal virtual void Collect(IMetricsWriter writer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
