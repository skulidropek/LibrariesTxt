[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Prometheus.DotNetRuntime.CaptureLevel : Enum {
    public int value__;
    public static CaptureLevel Counters;
    public static CaptureLevel Errors;
    public static CaptureLevel Informational;
    public static CaptureLevel Verbose;
}
public interface Prometheus.DotNetRuntime.Consumes`1 {
    public TEvents Events { get; }
    public bool Enabled { get; }
    public abstract virtual TEvents get_Events();
    public abstract virtual bool get_Enabled();
}
public static class Prometheus.DotNetRuntime.DotNetRuntimeStatsBuilder : object {
    public static Builder Default();
    public static Builder Customize();
}
internal class Prometheus.DotNetRuntime.DotNetRuntimeStatsCollector : object {
    private static Dictionary`2<CollectorRegistry, DotNetRuntimeStatsCollector> Instances;
    private CollectorRegistry _metricRegistry;
    private Options _options;
    private static object LockInstance;
    private CancellationTokenSource _ctSource;
    private Task _recycleTask;
    private bool _disposed;
    private GlobalOptions _listenerGlobalOpts;
    [CompilerGeneratedAttribute]
private DotNetEventListener[] <EventListeners>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <EventListenerRecycles>k__BackingField;
    internal DotNetEventListener[] EventListeners { get; private set; }
    internal ServiceProvider ServiceProvider { get; }
    internal Counter EventListenerRecycles { get; private set; }
    internal DotNetRuntimeStatsCollector(ServiceProvider serviceProvider, CollectorRegistry metricRegistry, Options options);
    private static DotNetRuntimeStatsCollector();
    private DotNetEventListener[] CreateEventListeners();
    [CompilerGeneratedAttribute]
internal DotNetEventListener[] get_EventListeners();
    [CompilerGeneratedAttribute]
private void set_EventListeners(DotNetEventListener[] value);
    [CompilerGeneratedAttribute]
internal ServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
internal Counter get_EventListenerRecycles();
    [CompilerGeneratedAttribute]
private void set_EventListenerRecycles(Counter value);
    public void RegisterMetrics(MetricFactory metrics);
    public void UpdateMetrics();
    [AsyncStateMachineAttribute("Prometheus.DotNetRuntime.DotNetRuntimeStatsCollector/<RestartListeningEvery>d__23")]
private Task RestartListeningEvery(TimeSpan recycleEvery);
    public sealed virtual void Dispose();
    private void SetupConstantMetrics(MetricFactory metrics);
    [CompilerGeneratedAttribute]
private DotNetEventListener <CreateEventListeners>b__9_0(ListenerRegistration r);
}
internal class Prometheus.DotNetRuntime.EventConsumer`1 : object {
    [CompilerGeneratedAttribute]
private T <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public T Events { get; }
    public bool Enabled { get; public set; }
    public EventConsumer`1(T events);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Events();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
[AttributeUsageAttribute("512")]
public class Prometheus.DotNetRuntime.EventListening.CounterNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CounterNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class Prometheus.DotNetRuntime.EventListening.DotNetEventListener : EventListener {
    private GlobalOptions _globalOptions;
    private string _nameSnakeCase;
    private HashSet`1<EventSource> _enabledEventSources;
    private Stopwatch _sp;
    private HashSet`1<long> _threadIdsPublishingEvents;
    [CompilerGeneratedAttribute]
private EventLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartedReceivingEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventListener <EventListener>k__BackingField;
    public EventLevel Level { get; }
    internal bool StartedReceivingEvents { get; private set; }
    internal IEventListener EventListener { get; private set; }
    internal DotNetEventListener(IEventListener eventListener, EventLevel level, GlobalOptions globalOptions);
    [CompilerGeneratedAttribute]
public EventLevel get_Level();
    [CompilerGeneratedAttribute]
internal bool get_StartedReceivingEvents();
    [CompilerGeneratedAttribute]
private void set_StartedReceivingEvents(bool value);
    [CompilerGeneratedAttribute]
internal IEventListener get_EventListener();
    [CompilerGeneratedAttribute]
private void set_EventListener(IEventListener value);
    private void OnEventSourceCreated(object sender, EventSourceCreatedEventArgs e);
    private Dictionary`2<string, string> GetEventListenerArguments(IEventListener listener);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    public virtual void Dispose();
}
public abstract class Prometheus.DotNetRuntime.EventListening.EventCounterParserBase`1 : object {
    private Dictionary`2<string, Action`1<IDictionary`2<string, object>>> _countersToParsers;
    private long _timeSinceLastCounter;
    [CompilerGeneratedAttribute]
private EventKeywords <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshIntervalSeconds>k__BackingField;
    public string EventSourceName { get; }
    public EventKeywords Keywords { get; }
    public int RefreshIntervalSeconds { get; public set; }
    public abstract virtual string get_EventSourceName();
    [CompilerGeneratedAttribute]
public virtual EventKeywords get_Keywords();
    [CompilerGeneratedAttribute]
public virtual int get_RefreshIntervalSeconds();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshIntervalSeconds(int value);
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
    private Action`1<IDictionary`2<string, object>> GetParseFunction(EventInfo event, string counterName);
    private ValueTuple`2<bool, object> TryParseIncrementingCounter(IDictionary`2<string, object> payload);
    private ValueTuple`2<bool, object> TryParseCounter(IDictionary`2<string, object> payload);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Action`1<IDictionary`2<string, object>> <.ctor>b__2_8(ValueTuple`2<EventInfo, CounterNameAttribute> v);
}
internal static class Prometheus.DotNetRuntime.EventListening.EventParserTypes : object {
    private static ImmutableHashSet`1<Type> InterfaceTypesToIgnore;
    internal static Lazy`1<Version> CurrentRuntimeVerison;
    private static Version LowestSupportedVersion;
    private static Regex VersionRegex;
    private static EventParserTypes();
    internal static IEnumerable`1<Type> GetEventInterfaces(Type t);
    internal static IEnumerable`1<Type> GetEventInterfaces(Type t, EventLevel atLevelAndBelow);
    internal static IEnumerable`1<Type> GetEventInterfacesForCurrentRuntime(Type t, EventLevel atLevelAndBelow);
    internal static ImmutableHashSet`1<EventLevel> GetLevelsFromParser(Type type);
    private static EventLevel GetEventLevel(Type t);
    internal static IEnumerable`1<Type> GetEventParsers();
    internal static IEnumerable`1<Type> GetEventParsers(Assembly fromAssembly);
    internal static bool AreEventsSupportedByRuntime(Type type);
    private static Version GetVersionOfEvents(Type type);
}
public class Prometheus.DotNetRuntime.EventListening.EventSources.DotNetRuntimeEventSource : object {
    public static Guid Id;
    public static string Name;
    private static DotNetRuntimeEventSource();
}
public class Prometheus.DotNetRuntime.EventListening.EventSources.FrameworkEventSource : object {
    public static Guid Id;
    private static FrameworkEventSource();
}
public class Prometheus.DotNetRuntime.EventListening.EventSources.SystemRuntimeEventSource : object {
    public static Guid Id;
    public static string Name;
    private static SystemRuntimeEventSource();
}
public interface Prometheus.DotNetRuntime.EventListening.IAlwaysEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.ICounterEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.ICriticalEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.IErrorEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.IEventCounterListener {
    public int RefreshIntervalSeconds { get; public set; }
    public abstract virtual int get_RefreshIntervalSeconds();
    public abstract virtual void set_RefreshIntervalSeconds(int value);
}
public interface Prometheus.DotNetRuntime.EventListening.IEventCounterParser`1 {
}
public interface Prometheus.DotNetRuntime.EventListening.IEventListener {
    public string EventSourceName { get; }
    public EventKeywords Keywords { get; }
    public ImmutableHashSet`1<EventLevel> SupportedLevels { get; }
    public abstract virtual string get_EventSourceName();
    public abstract virtual EventKeywords get_Keywords();
    public abstract virtual ImmutableHashSet`1<EventLevel> get_SupportedLevels();
    public abstract virtual void ProcessEvent(EventWrittenEventArgs e);
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface Prometheus.DotNetRuntime.EventListening.IEventParser`1 {
    private ImmutableHashSet`1<EventLevel> Prometheus.DotNetRuntime.EventListening.IEventListener.SupportedLevels { get; }
    private sealed virtual override ImmutableHashSet`1<EventLevel> Prometheus.DotNetRuntime.EventListening.IEventListener.get_SupportedLevels();
}
public interface Prometheus.DotNetRuntime.EventListening.IEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.IInfoEvents {
}
[IsReadOnlyAttribute]
public class Prometheus.DotNetRuntime.EventListening.IncrementingCounterValue : ValueType {
    [CompilerGeneratedAttribute]
private double <IncrementedBy>k__BackingField;
    public double IncrementedBy { get; }
    public IncrementingCounterValue(double value);
    [CompilerGeneratedAttribute]
public double get_IncrementedBy();
}
public interface Prometheus.DotNetRuntime.EventListening.IVerboseEvents {
}
public interface Prometheus.DotNetRuntime.EventListening.IWarningEvents {
}
[IsReadOnlyAttribute]
public class Prometheus.DotNetRuntime.EventListening.MeanCounterValue : ValueType {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    public int Count { get; }
    public double Mean { get; }
    public double Total { get; }
    public MeanCounterValue(int count, double mean);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public double get_Mean();
    public double get_Total();
}
public class Prometheus.DotNetRuntime.EventListening.MismatchedCounterTypeException : Exception {
    public MismatchedCounterTypeException(string message);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.ContentionEventParser : object {
    private SamplingRate _samplingRate;
    private static int EventIdContentionStart;
    private static int EventIdContentionStop;
    private EventPairTimer`1<long> _eventPairTimer;
    [CompilerGeneratedAttribute]
private Action`1<ContentionStartEvent> ContentionStart;
    [CompilerGeneratedAttribute]
private Action`1<ContentionEndEvent> ContentionEnd;
    public EventKeywords Keywords { get; }
    public string EventSourceName { get; }
    public ContentionEventParser(SamplingRate samplingRate);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ContentionStart(Action`1<ContentionStartEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ContentionStart(Action`1<ContentionStartEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ContentionEnd(Action`1<ContentionEndEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ContentionEnd(Action`1<ContentionEndEvent> value);
    public sealed virtual EventKeywords get_Keywords();
    public sealed virtual string get_EventSourceName();
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
}
[ExtensionAttribute]
internal static class Prometheus.DotNetRuntime.EventListening.Parsers.DelegateExtensions : object {
    [ExtensionAttribute]
internal static void InvokeManyTimes(Action`1<T> d, int count, T payload);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.ExceptionEventParser : object {
    [CompilerGeneratedAttribute]
private Action`1<ExceptionThrownEvent> ExceptionThrown;
    public string EventSourceName { get; }
    public EventKeywords Keywords { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(Action`1<ExceptionThrownEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(Action`1<ExceptionThrownEvent> value);
    public sealed virtual string get_EventSourceName();
    public sealed virtual EventKeywords get_Keywords();
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.GcEventParser : object {
    private static int EventIdGcStart;
    private static int EventIdGcStop;
    private static int EventIdSuspendEEStart;
    private static int EventIdRestartEEStop;
    private static int EventIdHeapStats;
    private static int EventIdAllocTick;
    private EventPairTimer`2<UInt32, GcData> _gcEventTimer;
    private EventPairTimer`1<int> _gcPauseEventTimer;
    [CompilerGeneratedAttribute]
private Action`1<HeapStatsEvent> HeapStats;
    [CompilerGeneratedAttribute]
private Action`1<PauseCompleteEvent> PauseComplete;
    [CompilerGeneratedAttribute]
private Action`1<CollectionStartEvent> CollectionStart;
    [CompilerGeneratedAttribute]
private Action`1<CollectionCompleteEvent> CollectionComplete;
    [CompilerGeneratedAttribute]
private Action`1<AllocationTickEvent> AllocationTick;
    public string EventSourceName { get; }
    public EventKeywords Keywords { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_HeapStats(Action`1<HeapStatsEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HeapStats(Action`1<HeapStatsEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseComplete(Action`1<PauseCompleteEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseComplete(Action`1<PauseCompleteEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionStart(Action`1<CollectionStartEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionStart(Action`1<CollectionStartEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionComplete(Action`1<CollectionCompleteEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionComplete(Action`1<CollectionCompleteEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AllocationTick(Action`1<AllocationTickEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AllocationTick(Action`1<AllocationTickEvent> value);
    public sealed virtual string get_EventSourceName();
    public sealed virtual EventKeywords get_Keywords();
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.JitEventParser : object {
    private SamplingRate _samplingRate;
    private static int EventIdMethodJittingStarted;
    private static int EventIdMethodLoadVerbose;
    private EventPairTimer`1<ulong> _eventPairTimer;
    [CompilerGeneratedAttribute]
private Action`1<CompilationCompleteEvent> CompilationComplete;
    public EventKeywords Keywords { get; }
    public string EventSourceName { get; }
    public JitEventParser(SamplingRate samplingRate);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CompilationComplete(Action`1<CompilationCompleteEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CompilationComplete(Action`1<CompilationCompleteEvent> value);
    public sealed virtual EventKeywords get_Keywords();
    public sealed virtual string get_EventSourceName();
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Prometheus.DotNetRuntime.EventListening.Parsers.RuntimeEventParser : EventCounterParserBase`1<RuntimeEventParser> {
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> ThreadPoolThreadCount;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> ThreadPoolQueueLength;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> ThreadPoolCompletedItemsCount;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> MonitorLockContentionCount;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> ActiveTimerCount;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> ExceptionCount;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> NumAssembliesLoaded;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> IlBytesJitted;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> MethodsJittedCount;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> AllocRate;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> GcHeapSize;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> Gen0GcCount;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> Gen1GcCount;
    [CompilerGeneratedAttribute]
private Action`1<IncrementingCounterValue> Gen2GcCount;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> TimeInGc;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> Gen0Size;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> Gen1Size;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> Gen2Size;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> LohSize;
    [NullableAttribute("1")]
public string EventSourceName { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ThreadPoolThreadCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ThreadPoolThreadCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ThreadPoolQueueLength(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ThreadPoolQueueLength(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ThreadPoolCompletedItemsCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ThreadPoolCompletedItemsCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MonitorLockContentionCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MonitorLockContentionCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActiveTimerCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActiveTimerCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NumAssembliesLoaded(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NumAssembliesLoaded(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_IlBytesJitted(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IlBytesJitted(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MethodsJittedCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MethodsJittedCount(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AllocRate(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AllocRate(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_GcHeapSize(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_GcHeapSize(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen0GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen0GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen1GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen1GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen2GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen2GcCount(Action`1<IncrementingCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeInGc(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeInGc(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen0Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen0Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen1Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen1Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Gen2Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Gen2Size(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LohSize(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LohSize(Action`1<MeanCounterValue> value);
    [NullableContextAttribute("1")]
public virtual string get_EventSourceName();
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.SocketsEventParser : EventCounterParserBase`1<SocketsEventParser> {
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> OutgoingConnectionsEstablished;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> IncomingConnectionsEstablished;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> BytesSent;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> BytesReceived;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> DatagramsReceived;
    [CompilerGeneratedAttribute]
private Action`1<MeanCounterValue> DatagramsSent;
    public string EventSourceName { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_OutgoingConnectionsEstablished(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OutgoingConnectionsEstablished(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_IncomingConnectionsEstablished(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IncomingConnectionsEstablished(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BytesSent(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BytesSent(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BytesReceived(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BytesReceived(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DatagramsReceived(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DatagramsReceived(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DatagramsSent(Action`1<MeanCounterValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DatagramsSent(Action`1<MeanCounterValue> value);
    public virtual string get_EventSourceName();
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.ThreadPoolEventParser : object {
    private static int EventIdThreadPoolSample;
    private static int EventIdThreadPoolAdjustment;
    private static int EventIdIoThreadCreate;
    private static int EventIdIoThreadRetire;
    private static int EventIdIoThreadUnretire;
    private static int EventIdIoThreadTerminate;
    [CompilerGeneratedAttribute]
private Action`1<ThreadPoolAdjustedEvent> ThreadPoolAdjusted;
    [CompilerGeneratedAttribute]
private Action`1<IoThreadPoolAdjustedEvent> IoThreadPoolAdjusted;
    public string EventSourceName { get; }
    public EventKeywords Keywords { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ThreadPoolAdjusted(Action`1<ThreadPoolAdjustedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ThreadPoolAdjusted(Action`1<ThreadPoolAdjustedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_IoThreadPoolAdjusted(Action`1<IoThreadPoolAdjustedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IoThreadPoolAdjusted(Action`1<IoThreadPoolAdjustedEvent> value);
    public sealed virtual string get_EventSourceName();
    public sealed virtual EventKeywords get_Keywords();
    public sealed virtual void ProcessEvent(EventWrittenEventArgs e);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.Util.Cache`2 : object {
    private ConcurrentDictionary`2<TKey, CacheValue`1<TKey, TValue, TValue>> _cache;
    private TimeSpan _expireItemsAfter;
    private Task _cleanupTask;
    private CancellationTokenSource _cancellationSource;
    internal Cache`2(TimeSpan expireItemsAfter, int initialCapacity);
    internal void Set(TKey key, TValue value, Nullable`1<DateTime> timeStamp);
    internal bool TryGetValue(TKey key, TValue& value, DateTime& timeStamp);
    internal bool TryRemove(TKey key, TValue& value, DateTime& timeStamp);
    public sealed virtual void Dispose();
    private void CleanupExpiredValues();
}
public enum Prometheus.DotNetRuntime.EventListening.Parsers.Util.DurationResult : Enum {
    public int value__;
    public static DurationResult Unrecognized;
    public static DurationResult Start;
    public static DurationResult FinalWithoutDuration;
    public static DurationResult FinalWithDuration;
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.Util.EventPairTimer`1 : EventPairTimer`2<TId, int> {
    public EventPairTimer`1(int startEventId, int endEventId, Func`2<EventWrittenEventArgs, TId> extractEventIdFn, SamplingRate samplingRate, Cache`2<TId, int> cache);
    public DurationResult TryGetDuration(EventWrittenEventArgs e, TimeSpan& duration);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.Util.EventPairTimer`2 : object {
    private Cache`2<TId, TEventData> _eventStartedAtCache;
    private int _startEventId;
    private int _endEventId;
    private Func`2<EventWrittenEventArgs, TId> _extractEventIdFn;
    private Func`2<EventWrittenEventArgs, TEventData> _extractData;
    private SamplingRate _samplingRate;
    public EventPairTimer`2(int startEventId, int endEventId, Func`2<EventWrittenEventArgs, TId> extractEventIdFn, Func`2<EventWrittenEventArgs, TEventData> extractData, SamplingRate samplingRate, Cache`2<TId, TEventData> cache);
    public DurationResult TryGetDuration(EventWrittenEventArgs e, TimeSpan& duration, TEventData& startEventData);
}
public class Prometheus.DotNetRuntime.EventListening.Parsers.Util.SamplingRate : object {
    private long _next;
    [CompilerGeneratedAttribute]
private int <SampleEvery>k__BackingField;
    public int SampleEvery { get; }
    public SamplingRate(SampleEvery every);
    [CompilerGeneratedAttribute]
public int get_SampleEvery();
    public bool ShouldSampleEvent();
    public static SamplingRate op_Implicit(SampleEvery d);
}
[ExtensionAttribute]
internal static class Prometheus.DotNetRuntime.Extensions : object {
    [ExtensionAttribute]
internal static void AddOrReplace(ISet`1<T> s, T toAddOrReplace);
    [ExtensionAttribute]
internal static void TryAddSingletonEnumerable(IServiceCollection services);
    [ExtensionAttribute]
internal static EventLevel ToEventLevel(CaptureLevel level);
    [ExtensionAttribute]
internal static CaptureLevel ToCaptureLevel(EventLevel level);
}
internal class Prometheus.DotNetRuntime.ListenerRegistration : object {
    [CompilerGeneratedAttribute]
private EventLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, object> <Factory>k__BackingField;
    public EventLevel Level { get; public set; }
    public Type Type { get; }
    public Func`2<IServiceProvider, object> Factory { get; }
    private ListenerRegistration(EventLevel level, Type type, Func`2<IServiceProvider, object> factory);
    public static ListenerRegistration Create(CaptureLevel level, Func`2<IServiceProvider, T> factory);
    internal void RegisterServices(IServiceCollection services);
    [CompilerGeneratedAttribute]
public EventLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(EventLevel value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Func`2<IServiceProvider, object> get_Factory();
    public sealed virtual bool Equals(ListenerRegistration other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private object <RegisterServices>b__2_0(IServiceProvider sp);
    [CompilerGeneratedAttribute]
private object <RegisterServices>b__2_1(IServiceProvider sp);
}
public interface Prometheus.DotNetRuntime.Metrics.IMetricProducer {
    public abstract virtual void RegisterMetrics(MetricFactory metrics);
    public abstract virtual void UpdateMetrics();
}
[ExtensionAttribute]
internal static class Prometheus.DotNetRuntime.Metrics.MetricExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<double> CollectAllValues(Counter counter, bool excludeUnlabeled);
    [ExtensionAttribute]
internal static IEnumerable`1<double> CollectAllSumValues(Histogram histogram, bool excludeUnlabeled);
    [ExtensionAttribute]
internal static IEnumerable`1<ulong> CollectAllCountValues(Histogram histogram);
    [IteratorStateMachineAttribute("Prometheus.DotNetRuntime.Metrics.MetricExtensions/<CollectAllMetrics>d__3`4")]
private static IEnumerable`1<TResult> CollectAllMetrics(TCollector collector, Func`2<TInterface, TResult> getValue, bool excludeUnlabeled);
    private static IEnumerable`1<String[]> GetLabelValues(Collector`1<TChild> collector);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.ContentionMetricsProducer : object {
    private Consumes`1<Info> _contentionInfo;
    private Consumes`1<CountersV3_0> _runtimeCounters;
    [CompilerGeneratedAttribute]
private Counter <ContentionSecondsTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <ContentionTotal>k__BackingField;
    internal Counter ContentionSecondsTotal { get; private set; }
    internal Counter ContentionTotal { get; private set; }
    public ContentionMetricsProducer(Consumes`1<Info> contentionInfo, Consumes`1<CountersV3_0> runtimeCounters);
    [CompilerGeneratedAttribute]
internal Counter get_ContentionSecondsTotal();
    [CompilerGeneratedAttribute]
private void set_ContentionSecondsTotal(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_ContentionTotal();
    [CompilerGeneratedAttribute]
private void set_ContentionTotal(Counter value);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    public sealed virtual void UpdateMetrics();
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__11_0(IncrementingCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__11_1(ContentionEndEvent e);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.ExceptionMetricsProducer : object {
    private Consumes`1<Error> _exceptionError;
    private Consumes`1<CountersV3_0> _runtimeCounters;
    private static string LabelType;
    [CompilerGeneratedAttribute]
private Counter <ExceptionCount>k__BackingField;
    internal Counter ExceptionCount { get; private set; }
    public ExceptionMetricsProducer(Consumes`1<Error> exceptionError, Consumes`1<CountersV3_0> runtimeCounters);
    [CompilerGeneratedAttribute]
internal Counter get_ExceptionCount();
    [CompilerGeneratedAttribute]
private void set_ExceptionCount(Counter value);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    public sealed virtual void UpdateMetrics();
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__8_0(ExceptionThrownEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__8_1(IncrementingCounterValue e);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.GcMetricsProducer : object {
    private static string LabelHeap;
    private static string LabelGeneration;
    private static string LabelReason;
    private static string LabelType;
    private static Dictionary`2<GCType, string> GcTypeToLabels;
    private static Dictionary`2<GCReason, string> GcReasonToLabels;
    private Consumes`1<Info> _gcInfo;
    private Consumes`1<Verbose> _gcVerbose;
    private Consumes`1<CountersV3_0> _runtimeCounters;
    private Ratio _gcCpuRatio;
    private Ratio _gcPauseRatio;
    private Options _options;
    [CompilerGeneratedAttribute]
private Histogram <GcCollectionSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Histogram <GcPauseSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <GcCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <GcCpuRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <GcPauseRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <AllocatedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <GcHeapSizeBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <GcNumPinnedObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <GcFinalizationQueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <AvailableMemory>k__BackingField;
    internal Histogram GcCollectionSeconds { get; private set; }
    internal Histogram GcPauseSeconds { get; private set; }
    internal Counter GcCollections { get; private set; }
    internal Gauge GcCpuRatio { get; private set; }
    internal Gauge GcPauseRatio { get; private set; }
    internal Counter AllocatedBytes { get; private set; }
    internal Gauge GcHeapSizeBytes { get; private set; }
    internal Gauge GcNumPinnedObjects { get; private set; }
    internal Gauge GcFinalizationQueueLength { get; private set; }
    internal Gauge AvailableMemory { get; private set; }
    public GcMetricsProducer(Options options, Consumes`1<Info> gcInfo, Consumes`1<Verbose> gcVerbose, Consumes`1<CountersV3_0> runtimeCounters);
    private static GcMetricsProducer();
    [CompilerGeneratedAttribute]
internal Histogram get_GcCollectionSeconds();
    [CompilerGeneratedAttribute]
private void set_GcCollectionSeconds(Histogram value);
    [CompilerGeneratedAttribute]
internal Histogram get_GcPauseSeconds();
    [CompilerGeneratedAttribute]
private void set_GcPauseSeconds(Histogram value);
    [CompilerGeneratedAttribute]
internal Counter get_GcCollections();
    [CompilerGeneratedAttribute]
private void set_GcCollections(Counter value);
    [CompilerGeneratedAttribute]
internal Gauge get_GcCpuRatio();
    [CompilerGeneratedAttribute]
private void set_GcCpuRatio(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_GcPauseRatio();
    [CompilerGeneratedAttribute]
private void set_GcPauseRatio(Gauge value);
    [CompilerGeneratedAttribute]
internal Counter get_AllocatedBytes();
    [CompilerGeneratedAttribute]
private void set_AllocatedBytes(Counter value);
    [CompilerGeneratedAttribute]
internal Gauge get_GcHeapSizeBytes();
    [CompilerGeneratedAttribute]
private void set_GcHeapSizeBytes(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_GcNumPinnedObjects();
    [CompilerGeneratedAttribute]
private void set_GcNumPinnedObjects(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_GcFinalizationQueueLength();
    [CompilerGeneratedAttribute]
private void set_GcFinalizationQueueLength(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_AvailableMemory();
    [CompilerGeneratedAttribute]
private void set_AvailableMemory(Gauge value);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    public sealed virtual void UpdateMetrics();
    private static string GetGenerationToString(UInt32 generation);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_0(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_1(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_2(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_3(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_4(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_5(IncrementingCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_6(IncrementingCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_7(IncrementingCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_8(CollectionCompleteEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_9(PauseCompleteEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_10(CollectionStartEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_11(HeapStatsEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_12(AllocationTickEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__53_13(IncrementingCounterValue r);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.JitMetricsProducer : object {
    private static string DynamicLabel;
    private static string LabelValueTrue;
    private static string LabelValueFalse;
    private Consumes`1<Verbose> _jitVerbose;
    private Consumes`1<CountersV5_0> _runtimeCounters;
    private Ratio _jitCpuRatio;
    [CompilerGeneratedAttribute]
private Counter <MethodsJittedTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <MethodsJittedSecondsTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <BytesJitted>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <CpuRatio>k__BackingField;
    internal Counter MethodsJittedTotal { get; private set; }
    internal Counter MethodsJittedSecondsTotal { get; private set; }
    internal Gauge BytesJitted { get; private set; }
    internal Gauge CpuRatio { get; private set; }
    public JitMetricsProducer(Consumes`1<Verbose> jitVerbose, Consumes`1<CountersV5_0> runtimeCounters);
    [CompilerGeneratedAttribute]
internal Counter get_MethodsJittedTotal();
    [CompilerGeneratedAttribute]
private void set_MethodsJittedTotal(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_MethodsJittedSecondsTotal();
    [CompilerGeneratedAttribute]
private void set_MethodsJittedSecondsTotal(Counter value);
    [CompilerGeneratedAttribute]
internal Gauge get_BytesJitted();
    [CompilerGeneratedAttribute]
private void set_BytesJitted(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_CpuRatio();
    [CompilerGeneratedAttribute]
private void set_CpuRatio(Gauge value);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    public sealed virtual void UpdateMetrics();
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__23_0(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__23_1(CompilationCompleteEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__23_2(MeanCounterValue e);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.SocketsMetricProducer : object {
    private Consumes`1<CountersV5_0> _socketCounters;
    [CompilerGeneratedAttribute]
private Counter <BytesSent>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <BytesReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <IncomingConnectionEstablished>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <OutgoingConnectionEstablished>k__BackingField;
    internal Counter BytesSent { get; private set; }
    internal Counter BytesReceived { get; private set; }
    internal Counter IncomingConnectionEstablished { get; private set; }
    internal Counter OutgoingConnectionEstablished { get; private set; }
    public SocketsMetricProducer(Consumes`1<CountersV5_0> socketCounters);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    [CompilerGeneratedAttribute]
internal Counter get_BytesSent();
    [CompilerGeneratedAttribute]
private void set_BytesSent(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_BytesReceived();
    [CompilerGeneratedAttribute]
private void set_BytesReceived(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_IncomingConnectionEstablished();
    [CompilerGeneratedAttribute]
private void set_IncomingConnectionEstablished(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_OutgoingConnectionEstablished();
    [CompilerGeneratedAttribute]
private void set_OutgoingConnectionEstablished(Counter value);
    public sealed virtual void UpdateMetrics();
}
public class Prometheus.DotNetRuntime.Metrics.Producers.ThreadPoolMetricsProducer : object {
    private Dictionary`2<ThreadAdjustmentReason, string> _adjustmentReasonToLabel;
    private Options _options;
    private Consumes`1<Info> _threadPoolInfo;
    private Consumes`1<CountersV3_0> _runtimeCounters;
    [CompilerGeneratedAttribute]
private Gauge <NumThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <NumIocThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <AdjustmentsTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Counter <Throughput>k__BackingField;
    [CompilerGeneratedAttribute]
private Histogram <QueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Gauge <NumTimers>k__BackingField;
    internal Gauge NumThreads { get; private set; }
    internal Gauge NumIocThreads { get; private set; }
    internal Counter AdjustmentsTotal { get; private set; }
    internal Counter Throughput { get; private set; }
    internal Histogram QueueLength { get; private set; }
    internal Gauge NumTimers { get; private set; }
    public ThreadPoolMetricsProducer(Options options, Consumes`1<Info> threadPoolInfo, Consumes`1<CountersV3_0> runtimeCounters);
    [CompilerGeneratedAttribute]
internal Gauge get_NumThreads();
    [CompilerGeneratedAttribute]
private void set_NumThreads(Gauge value);
    [CompilerGeneratedAttribute]
internal Gauge get_NumIocThreads();
    [CompilerGeneratedAttribute]
private void set_NumIocThreads(Gauge value);
    [CompilerGeneratedAttribute]
internal Counter get_AdjustmentsTotal();
    [CompilerGeneratedAttribute]
private void set_AdjustmentsTotal(Counter value);
    [CompilerGeneratedAttribute]
internal Counter get_Throughput();
    [CompilerGeneratedAttribute]
private void set_Throughput(Counter value);
    [CompilerGeneratedAttribute]
internal Histogram get_QueueLength();
    [CompilerGeneratedAttribute]
private void set_QueueLength(Histogram value);
    [CompilerGeneratedAttribute]
internal Gauge get_NumTimers();
    [CompilerGeneratedAttribute]
private void set_NumTimers(Gauge value);
    public sealed virtual void RegisterMetrics(MetricFactory metrics);
    public sealed virtual void UpdateMetrics();
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_0(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_1(IncrementingCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_2(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_3(MeanCounterValue e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_4(ThreadPoolAdjustedEvent e);
    [CompilerGeneratedAttribute]
private void <RegisterMetrics>b__29_5(IoThreadPoolAdjustedEvent e);
}
internal class Prometheus.DotNetRuntime.Metrics.Producers.Util.Constants : object {
    internal static Double[] DefaultHistogramBuckets;
    private static Constants();
}
[ExtensionAttribute]
internal static class Prometheus.DotNetRuntime.Metrics.Producers.Util.LabelGenerator : object {
    internal static Dictionary`2<TEnum, string> MapEnumToLabelValues();
    [ExtensionAttribute]
internal static string ToLabel(bool b);
}
public class Prometheus.DotNetRuntime.Metrics.Producers.Util.Ratio : object {
    private Func`1<TimeSpan> _getElapsedTime;
    private TimeSpan _lastProcessTime;
    private double _lastEventTotalSeconds;
    internal Ratio(Func`1<TimeSpan> getElapsedTime);
    public static Ratio ProcessTotalCpu();
    public static Ratio ProcessTime();
    public double CalculateConsumedRatio(double eventsCpuTimeTotalSeconds);
    public double CalculateConsumedRatio(Counter eventCpuConsumedTotalSeconds);
    public double CalculateConsumedRatio(Histogram eventCpuConsumedSeconds);
}
[ExtensionAttribute]
public static class Prometheus.DotNetRuntime.Metrics.Producers.Util.StringExtensions : object {
    [ExtensionAttribute]
public static string ToSnakeCase(string str);
}
public enum Prometheus.DotNetRuntime.SampleEvery : Enum {
    public int value__;
    public static SampleEvery OneEvent;
    public static SampleEvery TwoEvents;
    public static SampleEvery FiveEvents;
    public static SampleEvery TenEvents;
    public static SampleEvery TwentyEvents;
    public static SampleEvery FiftyEvents;
    public static SampleEvery HundredEvents;
}
public class Prometheus.DotNetRuntime.UnsupportedCaptureLevelException : Exception {
    [CompilerGeneratedAttribute]
private CaptureLevel <SpecifiedLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<CaptureLevel> <SupportedLevels>k__BackingField;
    public CaptureLevel SpecifiedLevel { get; }
    public ISet`1<CaptureLevel> SupportedLevels { get; }
    public UnsupportedCaptureLevelException(CaptureLevel specifiedLevel, ISet`1<CaptureLevel> supportedLevels);
    public UnsupportedCaptureLevelException(UnsupportedEventParserLevelException ex);
    public static UnsupportedCaptureLevelException CreateWithCounterSupport(UnsupportedEventParserLevelException ex);
    [CompilerGeneratedAttribute]
public CaptureLevel get_SpecifiedLevel();
    [CompilerGeneratedAttribute]
public ISet`1<CaptureLevel> get_SupportedLevels();
}
public class Prometheus.DotNetRuntime.UnsupportedEventParserLevelException : Exception {
    [CompilerGeneratedAttribute]
private Type <EventParserType>k__BackingField;
    [CompilerGeneratedAttribute]
private CaptureLevel <SpecifiedLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<EventLevel> <SupportedLevels>k__BackingField;
    public Type EventParserType { get; }
    public CaptureLevel SpecifiedLevel { get; }
    public ISet`1<EventLevel> SupportedLevels { get; }
    public UnsupportedEventParserLevelException(Type eventParserType, CaptureLevel specifiedLevel, ISet`1<EventLevel> supportedLevels);
    [CompilerGeneratedAttribute]
public Type get_EventParserType();
    [CompilerGeneratedAttribute]
public CaptureLevel get_SpecifiedLevel();
    [CompilerGeneratedAttribute]
public ISet`1<EventLevel> get_SupportedLevels();
}
internal class Prometheus.DotNetRuntime.UnsupportedEventParserRuntimeException : Exception {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public UnsupportedEventParserRuntimeException(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
