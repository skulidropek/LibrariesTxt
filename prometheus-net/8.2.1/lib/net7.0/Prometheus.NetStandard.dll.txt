[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Prometheus.CanonicalLabel : ValueType {
    public static CanonicalLabel Empty;
    [CompilerGeneratedAttribute]
private Byte[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Prometheus>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <OpenMetrics>k__BackingField;
    public Byte[] Name { get; }
    public Byte[] Prometheus { get; }
    public Byte[] OpenMetrics { get; }
    public bool IsNotEmpty { get; }
    public CanonicalLabel(Byte[] name, Byte[] prometheus, Byte[] openMetrics);
    private static CanonicalLabel();
    [CompilerGeneratedAttribute]
public Byte[] get_Name();
    [CompilerGeneratedAttribute]
public Byte[] get_Prometheus();
    [CompilerGeneratedAttribute]
public Byte[] get_OpenMetrics();
    public bool get_IsNotEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Prometheus.ChildBase : object {
    private ExemplarBehavior _exemplarBehavior;
    [CompilerGeneratedAttribute]
private LabelSequence <InstanceLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelSequence <FlattenedLabels>k__BackingField;
    [NullableAttribute("2")]
private Byte[] _flattenedLabelsBytes;
    private static Action`1<ChildBase> _assignFlattenedLabelsBytesFunc;
    internal Collector Parent;
    private bool _publish;
    internal static Func`1<double> ExemplarRecordingTimestampProvider;
    private ThreadSafeDouble _exemplarLastRecordedTimestamp;
    [NullableAttribute("2")]
private static Counter ExemplarsRecorded;
    internal LabelSequence InstanceLabels { get; }
    internal LabelSequence FlattenedLabels { get; }
    internal Byte[] FlattenedLabelsBytes { get; }
    internal ChildBase(Collector parent, LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    private static ChildBase();
    public void Publish();
    public void Unpublish();
    public void Remove();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal LabelSequence get_InstanceLabels();
    [CompilerGeneratedAttribute]
internal LabelSequence get_FlattenedLabels();
    internal Byte[] get_FlattenedLabelsBytes();
    private static void AssignFlattenedLabelsBytes(ChildBase instance);
    internal ValueTask CollectAndSerializeAsync(IMetricsSerializer serializer, CancellationToken cancel);
    private protected abstract virtual ValueTask CollectAndSerializeImplAsync(IMetricsSerializer serializer, CancellationToken cancel);
    internal static ObservedExemplar BorrowExemplar(ObservedExemplar& storage);
    internal static void ReturnBorrowedExemplar(ObservedExemplar& storage, ObservedExemplar borrowed);
    internal void RecordExemplar(Exemplar exemplar, ObservedExemplar& storage, double observedValue);
    protected Exemplar GetDefaultExemplar(double value);
    internal static double DefaultExemplarRecordingTimestampProvider();
    protected bool IsRecordingNewExemplarAllowed();
    protected void MarkNewExemplarHasBeenRecorded();
    public virtual string ToString();
}
internal class Prometheus.ChildLifetimeInfo : object {
    public int LeaseCount;
    public long KeepaliveTimestamp;
    public bool Ended;
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Prometheus.Collector : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
private Byte[] _nameBytes;
    private static Action`1<Collector> _assignNameBytesFunc;
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [NullableAttribute("2")]
private Byte[] _helpBytes;
    private static Action`1<Collector> _assignHelpBytesFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _labelNames;
    private static Action`1<Collector> _assignLabelNamesFunc;
    internal StringSequence InstanceLabelNames;
    internal StringSequence FlattenedLabelNames;
    internal LabelSequence StaticLabels;
    [CompilerGeneratedAttribute]
private Byte[] <TypeBytes>k__BackingField;
    private static string ValidMetricNameExpression;
    private static string ValidLabelNameExpression;
    private static string ReservedLabelNameExpression;
    private static Regex MetricNameRegex;
    private static Regex LabelNameRegex;
    private static Regex ReservedLabelRegex;
    private static ObjectPool`1<HashSet`1<string>> LabelValidationHashSetPool;
    public string Name { get; }
    internal Byte[] NameBytes { get; }
    public string Help { get; }
    internal Byte[] HelpBytes { get; }
    public String[] LabelNames { get; }
    internal MetricType Type { get; }
    internal Byte[] TypeBytes { get; }
    internal int ChildCount { get; }
    internal int TimeseriesCount { get; }
    internal Collector(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels);
    private static Collector();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    internal Byte[] get_NameBytes();
    private static void AssignNameBytes(Collector instance);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Help();
    internal Byte[] get_HelpBytes();
    private static void AssignHelpBytes(Collector instance);
    public sealed virtual String[] get_LabelNames();
    private static void AssignLabelNames(Collector instance);
    internal abstract virtual MetricType get_Type();
    [CompilerGeneratedAttribute]
internal Byte[] get_TypeBytes();
    internal abstract virtual int get_ChildCount();
    internal abstract virtual int get_TimeseriesCount();
    internal abstract virtual ValueTask CollectAndSerializeAsync(IMetricsSerializer serializer, bool writeFamilyDeclaration, CancellationToken cancel);
    internal abstract virtual void RemoveLabelled(LabelSequence instanceLabels);
    internal static void ValidateLabelName(string labelName);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Prometheus.Collector`1 : Collector {
    private Dictionary`2<LabelSequence, TChild> _children;
    private ReaderWriterLockSlim _childrenLock;
    [NullableAttribute("2")]
private TChild _lazyUnlabelled;
    private Func`1<TChild> _createdUnlabelledFunc;
    private Func`2<LabelSequence, TChild> _createdLabelledChildFunc;
    private bool _suppressInitialValue;
    private ExemplarBehavior _exemplarBehavior;
    protected internal TChild Unlabelled { get; }
    private TChild Prometheus.ICollector<TChild>.Unlabelled { get; }
    internal int ChildCount { get; }
    internal Collector`1(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels, bool suppressInitialValue, ExemplarBehavior exemplarBehavior);
    protected internal TChild get_Unlabelled();
    private TChild CreateUnlabelled();
    private sealed virtual override TChild Prometheus.ICollector<TChild>.get_Unlabelled();
    [EditorBrowsableAttribute("1")]
public TChild Labels(String[] labelValues);
    public sealed virtual TChild WithLabels(String[] labelValues);
    public sealed virtual TChild WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TChild WithLabels(ReadOnlySpan`1<string> labelValues);
    public void RemoveLabelled(String[] labelValues);
    internal virtual void RemoveLabelled(LabelSequence labels);
    internal virtual int get_ChildCount();
    [IteratorStateMachineAttribute("Prometheus.Collector`1/<GetAllLabelValues>d__17")]
public IEnumerable`1<String[]> GetAllLabelValues();
    private TChild GetOrAddLabelled(LabelSequence instanceLabels);
    [NullableContextAttribute("2")]
private bool TryGetLabelled(LabelSequence instanceLabels, TChild& child);
    private TChild CreateLabelled(LabelSequence instanceLabels);
    private TChild CreateLabelledChild(LabelSequence instanceLabels);
    internal LabelSequence[] GetAllInstanceLabelsUnsafe();
    private protected abstract virtual TChild NewChild(LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    [AsyncStateMachineAttribute("Prometheus.Collector`1/<CollectAndSerializeAsync>d__26")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal virtual ValueTask CollectAndSerializeAsync(IMetricsSerializer serializer, bool writeFamilyDeclaration, CancellationToken cancel);
    private void EnsureUnlabelledMetricCreatedIfNoLabels();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.CollectorFamily : object {
    [CompilerGeneratedAttribute]
private Type <CollectorType>k__BackingField;
    private Dictionary`2<CollectorIdentity, Collector> _collectors;
    private ReaderWriterLockSlim _lock;
    private static ObjectPool`1<SerializeFamilyOperation> _serializeFamilyOperationPool;
    private Func`4<Collector, SerializeFamilyOperation, CancellationToken, ValueTask> _collectAndSerializeFunc;
    public Type CollectorType { get; }
    public CollectorFamily(Type collectorType);
    private static CollectorFamily();
    [CompilerGeneratedAttribute]
public Type get_CollectorType();
    [AsyncStateMachineAttribute("Prometheus.CollectorFamily/<CollectAndSerializeAsync>d__6")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal ValueTask CollectAndSerializeAsync(IMetricsSerializer serializer, CancellationToken cancel);
    [AsyncStateMachineAttribute("Prometheus.CollectorFamily/<CollectAndSerialize>d__10")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
private ValueTask CollectAndSerialize(Collector collector, SerializeFamilyOperation operation, CancellationToken cancel);
    internal Collector GetOrAdd(CollectorIdentity& identity, string name, string help, TConfiguration configuration, ExemplarBehavior exemplarBehavior, CollectorInitializer`2<TCollector, TConfiguration> initializer);
    internal void ForEachCollector(Action`1<Collector> action);
    [AsyncStateMachineAttribute("Prometheus.CollectorFamily/<ForEachCollectorAsync>d__14`1")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal ValueTask ForEachCollectorAsync(Func`4<Collector, TArg, CancellationToken, ValueTask> func, TArg arg, CancellationToken cancel);
}
[IsReadOnlyAttribute]
internal class Prometheus.CollectorIdentity : ValueType {
    public StringSequence InstanceLabelNames;
    public LabelSequence StaticLabels;
    private int _hashCode;
    public CollectorIdentity(StringSequence instanceLabelNames, LabelSequence staticLabels);
    public sealed virtual bool Equals(CollectorIdentity other);
    public virtual int GetHashCode();
    private static int CalculateHashCode(StringSequence instanceLabelNames, LabelSequence staticLabels);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.CollectorRegistry : object {
    private ConcurrentBag`1<Action> _beforeCollectCallbacks;
    private ConcurrentBag`1<Func`2<CancellationToken, Task>> _beforeCollectAsyncCallbacks;
    private LabelSequence _staticLabels;
    private ReaderWriterLockSlim _staticLabelsLock;
    private Dictionary`2<string, CollectorFamily> _families;
    private ReaderWriterLockSlim _familiesLock;
    [NullableAttribute("2")]
private Action _beforeFirstCollectCallback;
    private bool _hasPerformedFirstCollect;
    private object _firstCollectLock;
    private TaskCompletionSource`1<object> _startedCollectingRegistryMetrics;
    private static string MetricTypeDebugLabel;
    [NullableAttribute("2")]
private Gauge _metricFamilies;
    [NullableAttribute("2")]
private Gauge _metricInstances;
    [NullableAttribute("2")]
private Gauge _metricTimeseries;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MetricType, Child> _metricFamiliesPerType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MetricType, Child> _metricInstancesPerType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MetricType, Child> _metricTimeseriesPerType;
    internal bool PreventMeterAdapterRegistrationWithDefaultOptions;
    internal bool PreventEventCounterAdapterRegistrationWithDefaultOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> StaticLabels { get; }
    public sealed virtual void AddBeforeCollectCallback(Action callback);
    public sealed virtual void AddBeforeCollectCallback(Func`2<CancellationToken, Task> callback);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_StaticLabels();
    public sealed virtual void SetStaticLabels(IDictionary`2<string, string> labels);
    internal LabelSequence GetStaticLabels();
    public Task CollectAndExportAsTextAsync(Stream to, CancellationToken cancel);
    public sealed virtual Task CollectAndExportAsTextAsync(Stream to, ExpositionFormat format, CancellationToken cancel);
    internal TCollector GetOrAdd(string name, string help, StringSequence& instanceLabelNames, LabelSequence& staticLabels, TConfiguration configuration, ExemplarBehavior exemplarBehavior, CollectorInitializer`2& initializer);
    private CollectorFamily GetOrAddCollectorFamily(string finalName);
    internal void SetBeforeFirstCollectCallback(Action a);
    [AsyncStateMachineAttribute("Prometheus.CollectorRegistry/<CollectAndSerializeAsync>d__21")]
internal Task CollectAndSerializeAsync(IMetricsSerializer serializer, CancellationToken cancel);
    [AsyncStateMachineAttribute("Prometheus.CollectorRegistry/<RunBeforeCollectCallbacksAsync>d__22")]
private Task RunBeforeCollectCallbacksAsync(CancellationToken cancel);
    internal void StartCollectingRegistryMetrics();
    internal void OnStartCollectingRegistryMetrics(Action callback);
    private void UpdateRegistryMetrics();
    [CompilerGeneratedAttribute]
internal static CollectorFamily <GetOrAddCollectorFamily>g__ValidateFamily|14_0(CollectorFamily candidate);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Prometheus.Counter : Collector`1<Child> {
    public double Value { get; }
    internal MetricType Type { get; }
    internal int TimeseriesCount { get; }
    [NullableContextAttribute("1")]
internal Counter(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels, bool suppressInitialValue, ExemplarBehavior exemplarBehavior);
    [NullableContextAttribute("1")]
private protected virtual Child NewChild(LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    public sealed virtual void Inc(double increment);
    public sealed virtual void IncTo(double targetValue);
    public sealed virtual double get_Value();
    public void Publish();
    public void Unpublish();
    [NullableContextAttribute("2")]
public sealed virtual void Inc(Exemplar exemplar);
    [NullableContextAttribute("2")]
public sealed virtual void Inc(double increment, Exemplar exemplar);
    internal virtual MetricType get_Type();
    internal virtual int get_TimeseriesCount();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Prometheus.CounterConfiguration : MetricConfiguration {
    [NullableAttribute("1")]
internal static CounterConfiguration Default;
    [CompilerGeneratedAttribute]
private ExemplarBehavior <ExemplarBehavior>k__BackingField;
    public ExemplarBehavior ExemplarBehavior { get; public set; }
    private static CounterConfiguration();
    [CompilerGeneratedAttribute]
public ExemplarBehavior get_ExemplarBehavior();
    [CompilerGeneratedAttribute]
public void set_ExemplarBehavior(ExemplarBehavior value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Prometheus.CounterExtensions : object {
    [ExtensionAttribute]
public static void IncToCurrentTimeUtc(ICounter counter);
    [ExtensionAttribute]
public static void IncToTimeUtc(ICounter counter, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void CountExceptions(ICounter counter, Action wrapped, Func`2<Exception, bool> exceptionFilter);
    [ExtensionAttribute]
public static TResult CountExceptions(ICounter counter, Func`1<TResult> wrapped, Func`2<Exception, bool> exceptionFilter);
    [AsyncStateMachineAttribute("Prometheus.CounterExtensions/<CountExceptionsAsync>d__4")]
[ExtensionAttribute]
public static Task CountExceptionsAsync(ICounter counter, Func`1<Task> wrapped, Func`2<Exception, bool> exceptionFilter);
    [AsyncStateMachineAttribute("Prometheus.CounterExtensions/<CountExceptionsAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<TResult> CountExceptionsAsync(ICounter counter, Func`1<Task`1<TResult>> wrapped, Func`2<Exception, bool> exceptionFilter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Prometheus.DelegatingStreamInternal : Stream {
    private Stream _innerStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    protected DelegatingStreamInternal(Stream innerStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.DiagnosticSourceAdapter : object {
    private DiagnosticSourceAdapterOptions _options;
    private Counter _metric;
    private IDisposable _newListenerSubscription;
    private Dictionary`2<string, IDisposable> _newEventSubscription;
    private object _newEventSubscriptionLock;
    private DiagnosticSourceAdapter(DiagnosticSourceAdapterOptions options);
    public static IDisposable StartListening();
    public static IDisposable StartListening(DiagnosticSourceAdapterOptions options);
    private void OnNewListener(DiagnosticListener listener);
    private void OnEvent(string listenerName, string eventName, object payload);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.DiagnosticSourceAdapterOptions : object {
    internal static DiagnosticSourceAdapterOptions Default;
    public Func`2<DiagnosticListener, bool> ListenerFilterPredicate;
    public CollectorRegistry Registry;
    private static DiagnosticSourceAdapterOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.DotNetStats : object {
    private Process _process;
    private List`1<Child> _collectionCounts;
    private Gauge _totalMemory;
    private Gauge _virtualMemorySize;
    private Gauge _workingSet;
    private Gauge _privateMemorySize;
    private Counter _cpuTotal;
    private Gauge _openHandles;
    private Gauge _startTime;
    private Gauge _numThreads;
    private object _updateLock;
    private DotNetStats(IMetricFactory metricFactory);
    public static void Register(CollectorRegistry registry);
    internal static void RegisterDefault();
    private void UpdateMetrics();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.EventCounterAdapter : object {
    private EventCounterAdapterOptions _options;
    private IMetricFactory _metricFactory;
    private Listener _listener;
    private Gauge _eventSourcesConnected;
    private static string RateSuffix;
    private ConcurrentDictionary`2<string, string> _counterPrometheusName;
    private static IReadOnlyList`1<string> DefaultEventSourcePrefixes;
    public static Func`2<string, bool> DefaultEventSourceFilterPredicate;
    private EventCounterAdapter(EventCounterAdapterOptions options);
    private static EventCounterAdapter();
    public static IDisposable StartListening();
    public static IDisposable StartListening(EventCounterAdapterOptions options);
    public sealed virtual void Dispose();
    private bool ShouldUseEventSource(EventSource source);
    private EventCounterAdapterEventSourceSettings ConfigureEventSource(EventSource source);
    private void OnEventWritten(EventWrittenEventArgs args);
}
public class Prometheus.EventCounterAdapterEventSourceSettings : object {
    [CompilerGeneratedAttribute]
private EventLevel <MinimumLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventKeywords <MatchKeywords>k__BackingField;
    public EventLevel MinimumLevel { get; public set; }
    public EventKeywords MatchKeywords { get; public set; }
    [CompilerGeneratedAttribute]
public EventLevel get_MinimumLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumLevel(EventLevel value);
    [CompilerGeneratedAttribute]
public EventKeywords get_MatchKeywords();
    [CompilerGeneratedAttribute]
public void set_MatchKeywords(EventKeywords value);
}
internal static class Prometheus.EventCounterAdapterMemoryWarden : object {
    private static TimeSpan ForcedCollectionInterval;
    private static EventCounterAdapterMemoryWarden();
    public static void EnsureStarted();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.EventCounterAdapterMemoryWarden/<Execute>d__3")]
private static Task Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.EventCounterAdapterOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <EventSourceFilterPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, EventCounterAdapterEventSourceSettings> <EventSourceSettingsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpdateInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectorRegistry <Registry>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMetricFactory <MetricFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public static EventCounterAdapterOptions Default { get; }
    public Func`2<string, bool> EventSourceFilterPredicate { get; public set; }
    public Func`2<string, EventCounterAdapterEventSourceSettings> EventSourceSettingsProvider { get; public set; }
    public TimeSpan UpdateInterval { get; public set; }
    public CollectorRegistry Registry { get; public set; }
    [NullableAttribute("2")]
public IMetricFactory MetricFactory { get; public set; }
    [CompilerGeneratedAttribute]
private EventCounterAdapterOptions(EventCounterAdapterOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    public static EventCounterAdapterOptions get_Default();
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_EventSourceFilterPredicate();
    [CompilerGeneratedAttribute]
public void set_EventSourceFilterPredicate(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<string, EventCounterAdapterEventSourceSettings> get_EventSourceSettingsProvider();
    [CompilerGeneratedAttribute]
public void set_EventSourceSettingsProvider(Func`2<string, EventCounterAdapterEventSourceSettings> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpdateInterval();
    [CompilerGeneratedAttribute]
public void set_UpdateInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public CollectorRegistry get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(CollectorRegistry value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IMetricFactory get_MetricFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MetricFactory(IMetricFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EventCounterAdapterOptions left, EventCounterAdapterOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EventCounterAdapterOptions left, EventCounterAdapterOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EventCounterAdapterOptions other);
    [CompilerGeneratedAttribute]
public EventCounterAdapterOptions <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Prometheus.Exemplar : object {
    public static Exemplar None;
    private static LabelKey DefaultTraceIdKey;
    private static LabelKey DefaultSpanIdKey;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    internal LabelPair LabelPair1;
    internal LabelPair LabelPair2;
    internal LabelPair LabelPair3;
    internal LabelPair LabelPair4;
    internal LabelPair LabelPair5;
    internal LabelPair LabelPair6;
    private static ObjectPool`1<Exemplar> ExemplarPool;
    private long _consumed;
    private static long IsConsumed;
    private static long IsNotConsumed;
    internal LabelPair& Item { get; }
    internal int Length { get; private set; }
    private Exemplar(int length);
    private static Exemplar();
    public static LabelKey Key(string key);
    public static LabelPair Pair(string key, string value);
    public static Exemplar From(LabelPair& labelPair1, LabelPair& labelPair2, LabelPair& labelPair3, LabelPair& labelPair4, LabelPair& labelPair5, LabelPair& labelPair6);
    public static Exemplar From(LabelPair& labelPair1, LabelPair& labelPair2, LabelPair& labelPair3, LabelPair& labelPair4, LabelPair& labelPair5);
    public static Exemplar From(LabelPair& labelPair1, LabelPair& labelPair2, LabelPair& labelPair3, LabelPair& labelPair4);
    public static Exemplar From(LabelPair& labelPair1, LabelPair& labelPair2, LabelPair& labelPair3);
    public static Exemplar From(LabelPair& labelPair1, LabelPair& labelPair2);
    public static Exemplar From(LabelPair& labelPair1);
    internal LabelPair& get_Item(int index);
    public static Exemplar FromTraceContext();
    public static Exemplar FromTraceContext(LabelKey& traceIdKey, LabelKey& spanIdKey);
    internal void Update(int length);
    [CompilerGeneratedAttribute]
internal int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal static Exemplar AllocateFromPool(int length);
    internal void ReturnToPoolIfNotEmpty();
    internal void MarkAsConsumed();
    public Exemplar Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Prometheus.ExemplarBehavior : object {
    [CompilerGeneratedAttribute]
private ExemplarProvider <DefaultExemplarProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <NewExemplarMinInterval>k__BackingField;
    [NullableAttribute("1")]
internal static ExemplarBehavior Default;
    public ExemplarProvider DefaultExemplarProvider { get; public set; }
    public TimeSpan NewExemplarMinInterval { get; public set; }
    private static ExemplarBehavior();
    [CompilerGeneratedAttribute]
public ExemplarProvider get_DefaultExemplarProvider();
    [CompilerGeneratedAttribute]
public void set_DefaultExemplarProvider(ExemplarProvider value);
    [CompilerGeneratedAttribute]
public TimeSpan get_NewExemplarMinInterval();
    [CompilerGeneratedAttribute]
public void set_NewExemplarMinInterval(TimeSpan value);
    [NullableContextAttribute("1")]
public static ExemplarBehavior NoExemplars();
}
public class Prometheus.ExemplarProvider : MulticastDelegate {
    public ExemplarProvider(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Exemplar Invoke(Collector metric, double value);
    public virtual IAsyncResult BeginInvoke(Collector metric, double value, AsyncCallback callback, object object);
    public virtual Exemplar EndInvoke(IAsyncResult result);
}
public enum Prometheus.ExpositionFormat : Enum {
    public int value__;
    public static ExpositionFormat PrometheusText;
    public static ExpositionFormat OpenMetricsText;
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Prometheus.Gauge : Collector`1<Child> {
    public double Value { get; }
    internal MetricType Type { get; }
    internal int TimeseriesCount { get; }
    [NullableContextAttribute("1")]
internal Gauge(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels, bool suppressInitialValue, ExemplarBehavior exemplarBehavior);
    [NullableContextAttribute("1")]
private protected virtual Child NewChild(LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    public sealed virtual void Inc(double increment);
    public sealed virtual void Set(double val);
    public sealed virtual void Dec(double decrement);
    public sealed virtual void IncTo(double targetValue);
    public sealed virtual void DecTo(double targetValue);
    public sealed virtual double get_Value();
    public void Publish();
    public void Unpublish();
    internal virtual MetricType get_Type();
    internal virtual int get_TimeseriesCount();
}
public class Prometheus.GaugeConfiguration : MetricConfiguration {
    [NullableAttribute("1")]
internal static GaugeConfiguration Default;
    private static GaugeConfiguration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Prometheus.GaugeExtensions : object {
    [ExtensionAttribute]
public static void SetToCurrentTimeUtc(IGauge gauge);
    [ExtensionAttribute]
public static void SetToTimeUtc(IGauge gauge, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static void IncToCurrentTimeUtc(IGauge gauge);
    [ExtensionAttribute]
public static void IncToTimeUtc(IGauge gauge, DateTimeOffset timestamp);
    [ExtensionAttribute]
public static IDisposable TrackInProgress(IGauge gauge);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Prometheus.Histogram : Collector`1<Child> {
    private static Double[] DefaultBuckets;
    private Double[] _buckets;
    private Double[] _bucketsAlignmentBuffer;
    private int _bucketsAlignmentBufferOffset;
    private static int AvxAlignBytes;
    private CanonicalLabel[] _leLabels;
    private static Byte[] LeLabelName;
    internal MetricType Type { get; }
    public double Sum { get; }
    public long Count { get; }
    internal int TimeseriesCount { get; }
    internal Histogram(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels, bool suppressInitialValue, Double[] buckets, ExemplarBehavior exemplarBehavior);
    private static Histogram();
    private protected virtual Child NewChild(LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    internal virtual MetricType get_Type();
    public sealed virtual double get_Sum();
    public sealed virtual long get_Count();
    public sealed virtual void Observe(double val);
    public sealed virtual void Observe(double val, long count);
    [NullableContextAttribute("2")]
public sealed virtual void Observe(double val, Exemplar exemplar);
    public void Publish();
    public void Unpublish();
    public static Double[] ExponentialBuckets(double start, double factor, int count);
    public static Double[] LinearBuckets(double start, double width, int count);
    public static Double[] PowersOfTenDividedBuckets(int startPower, int endPower, int divisions);
    internal virtual int get_TimeseriesCount();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Prometheus.HistogramConfiguration : MetricConfiguration {
    [NullableAttribute("1")]
internal static HistogramConfiguration Default;
    [CompilerGeneratedAttribute]
private Double[] <Buckets>k__BackingField;
    [CompilerGeneratedAttribute]
private ExemplarBehavior <ExemplarBehavior>k__BackingField;
    public Double[] Buckets { get; public set; }
    public ExemplarBehavior ExemplarBehavior { get; public set; }
    private static HistogramConfiguration();
    [CompilerGeneratedAttribute]
public Double[] get_Buckets();
    [CompilerGeneratedAttribute]
public void set_Buckets(Double[] value);
    [CompilerGeneratedAttribute]
public ExemplarBehavior get_ExemplarBehavior();
    [CompilerGeneratedAttribute]
public void set_ExemplarBehavior(ExemplarBehavior value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Prometheus.HttpClientMetrics.HttpClientDelegatingHandlerBase`2 : DelegatingHandler {
    [CompilerGeneratedAttribute]
private MetricFactory <MetricFactory>k__BackingField;
    internal TCollector _metric;
    private HttpClientIdentity _identity;
    protected String[] DefaultLabels { get; }
    protected MetricFactory MetricFactory { get; }
    [NullableContextAttribute("2")]
protected HttpClientDelegatingHandlerBase`2(HttpClientMetricsOptionsBase options, TCollector customMetric, HttpClientIdentity identity);
    protected abstract virtual String[] get_DefaultLabels();
    [CompilerGeneratedAttribute]
protected MetricFactory get_MetricFactory();
    protected abstract virtual TCollector CreateMetricInstance(String[] labelNames);
    protected internal TChild CreateChild(HttpRequestMessage request, HttpResponseMessage response);
    private void ValidateNoUnexpectedLabelNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.HttpClientMetrics.HttpClientExporterOptions : object {
    [CompilerGeneratedAttribute]
private HttpClientInProgressOptions <InProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientRequestCountOptions <RequestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientRequestDurationOptions <RequestDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientResponseDurationOptions <ResponseDuration>k__BackingField;
    public HttpClientInProgressOptions InProgress { get; public set; }
    public HttpClientRequestCountOptions RequestCount { get; public set; }
    public HttpClientRequestDurationOptions RequestDuration { get; public set; }
    public HttpClientResponseDurationOptions ResponseDuration { get; public set; }
    [CompilerGeneratedAttribute]
public HttpClientInProgressOptions get_InProgress();
    [CompilerGeneratedAttribute]
public void set_InProgress(HttpClientInProgressOptions value);
    [CompilerGeneratedAttribute]
public HttpClientRequestCountOptions get_RequestCount();
    [CompilerGeneratedAttribute]
public void set_RequestCount(HttpClientRequestCountOptions value);
    [CompilerGeneratedAttribute]
public HttpClientRequestDurationOptions get_RequestDuration();
    [CompilerGeneratedAttribute]
public void set_RequestDuration(HttpClientRequestDurationOptions value);
    [CompilerGeneratedAttribute]
public HttpClientResponseDurationOptions get_ResponseDuration();
    [CompilerGeneratedAttribute]
public void set_ResponseDuration(HttpClientResponseDurationOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.HttpClientMetrics.HttpClientIdentity : object {
    public static HttpClientIdentity Default;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public HttpClientIdentity(string name);
    private static HttpClientIdentity();
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.HttpClientMetrics.HttpClientInProgressHandler : HttpClientDelegatingHandlerBase`2<ICollector`1<IGauge>, IGauge> {
    protected String[] DefaultLabels { get; }
    public HttpClientInProgressHandler(HttpClientInProgressOptions options, HttpClientIdentity identity);
    [AsyncStateMachineAttribute("Prometheus.HttpClientMetrics.HttpClientInProgressHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual String[] get_DefaultLabels();
    protected virtual ICollector`1<IGauge> CreateMetricInstance(String[] labelNames);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Prometheus.HttpClientMetrics.HttpClientInProgressOptions : HttpClientMetricsOptionsBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollector`1<IGauge> <Gauge>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollector`1<IGauge> Gauge { get; public set; }
    [CompilerGeneratedAttribute]
public ICollector`1<IGauge> get_Gauge();
    [CompilerGeneratedAttribute]
public void set_Gauge(ICollector`1<IGauge> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Prometheus.HttpClientMetrics.HttpClientMetricsOptionsBase : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectorRegistry <Registry>k__BackingField;
    public bool Enabled { get; public set; }
    public CollectorRegistry Registry { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public CollectorRegistry get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(CollectorRegistry value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.HttpClientMetrics.HttpClientRequestCountHandler : HttpClientDelegatingHandlerBase`2<ICollector`1<ICounter>, ICounter> {
    protected String[] DefaultLabels { get; }
    public HttpClientRequestCountHandler(HttpClientRequestCountOptions options, HttpClientIdentity identity);
    [AsyncStateMachineAttribute("Prometheus.HttpClientMetrics.HttpClientRequestCountHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual String[] get_DefaultLabels();
    protected virtual ICollector`1<ICounter> CreateMetricInstance(String[] labelNames);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Prometheus.HttpClientMetrics.HttpClientRequestCountOptions : HttpClientMetricsOptionsBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollector`1<ICounter> <Counter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollector`1<ICounter> Counter { get; public set; }
    [CompilerGeneratedAttribute]
public ICollector`1<ICounter> get_Counter();
    [CompilerGeneratedAttribute]
public void set_Counter(ICollector`1<ICounter> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.HttpClientMetrics.HttpClientRequestDurationHandler : HttpClientDelegatingHandlerBase`2<ICollector`1<IHistogram>, IHistogram> {
    protected String[] DefaultLabels { get; }
    public HttpClientRequestDurationHandler(HttpClientRequestDurationOptions options, HttpClientIdentity identity);
    [AsyncStateMachineAttribute("Prometheus.HttpClientMetrics.HttpClientRequestDurationHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual String[] get_DefaultLabels();
    protected virtual ICollector`1<IHistogram> CreateMetricInstance(String[] labelNames);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Prometheus.HttpClientMetrics.HttpClientRequestDurationOptions : HttpClientMetricsOptionsBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollector`1<IHistogram> <Histogram>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollector`1<IHistogram> Histogram { get; public set; }
    [CompilerGeneratedAttribute]
public ICollector`1<IHistogram> get_Histogram();
    [CompilerGeneratedAttribute]
public void set_Histogram(ICollector`1<IHistogram> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Prometheus.HttpClientMetrics.HttpClientRequestLabelNames : object {
    public static string Method;
    public static string Host;
    public static string Client;
    public static string Code;
    public static String[] All;
    public static String[] KnownInAdvance;
    private static HttpClientRequestLabelNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.HttpClientMetrics.HttpClientResponseDurationHandler : HttpClientDelegatingHandlerBase`2<ICollector`1<IHistogram>, IHistogram> {
    protected String[] DefaultLabels { get; }
    public HttpClientResponseDurationHandler(HttpClientResponseDurationOptions options, HttpClientIdentity identity);
    [AsyncStateMachineAttribute("Prometheus.HttpClientMetrics.HttpClientResponseDurationHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected virtual String[] get_DefaultLabels();
    protected virtual ICollector`1<IHistogram> CreateMetricInstance(String[] labelNames);
    private void Wrap(HttpResponseMessage response, Stream oldStream, Action onEndOfStream);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Prometheus.HttpClientMetrics.HttpClientResponseDurationOptions : HttpClientMetricsOptionsBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollector`1<IHistogram> <Histogram>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollector`1<IHistogram> Histogram { get; public set; }
    [CompilerGeneratedAttribute]
public ICollector`1<IHistogram> get_Histogram();
    [CompilerGeneratedAttribute]
public void set_Histogram(ICollector`1<IHistogram> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Prometheus.HttpClientMetricsExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder UseHttpClientMetrics(IHttpClientBuilder builder, Action`1<HttpClientExporterOptions> configure);
    [ExtensionAttribute]
public static IHttpClientBuilder UseHttpClientMetrics(IHttpClientBuilder builder, HttpClientExporterOptions options);
    [ExtensionAttribute]
public static HttpMessageHandlerBuilder UseHttpClientMetrics(HttpMessageHandlerBuilder builder, HttpClientExporterOptions options);
    [ExtensionAttribute]
public static IServiceCollection UseHttpClientMetrics(IServiceCollection services, HttpClientExporterOptions options);
}
[NullableContextAttribute("1")]
public interface Prometheus.ICollector {
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Help();
    public abstract virtual String[] get_LabelNames();
}
[NullableContextAttribute("1")]
public interface Prometheus.ICollector`1 {
    public TChild Unlabelled { get; }
    public abstract virtual TChild get_Unlabelled();
    public abstract virtual TChild WithLabels(String[] labelValues);
    public abstract virtual TChild WithLabels(ReadOnlyMemory`1<string> labelValues);
    public abstract virtual TChild WithLabels(ReadOnlySpan`1<string> labelValues);
}
public interface Prometheus.ICollectorChild {
}
[NullableContextAttribute("1")]
public interface Prometheus.ICollectorRegistry {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> StaticLabels { get; }
    public abstract virtual void AddBeforeCollectCallback(Action callback);
    public abstract virtual void AddBeforeCollectCallback(Func`2<CancellationToken, Task> callback);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_StaticLabels();
    public abstract virtual void SetStaticLabels(IDictionary`2<string, string> labels);
    public abstract virtual Task CollectAndExportAsTextAsync(Stream to, ExpositionFormat format, CancellationToken cancel);
}
[NullableContextAttribute("2")]
public interface Prometheus.ICounter {
    public double Value { get; }
    public abstract virtual void Inc(double increment);
    public abstract virtual void Inc(Exemplar exemplar);
    public abstract virtual void Inc(double increment, Exemplar exemplar);
    public abstract virtual void IncTo(double targetValue);
    public abstract virtual double get_Value();
}
[NullableContextAttribute("1")]
internal interface Prometheus.IDelayer {
    public abstract virtual Task Delay(TimeSpan duration);
    public abstract virtual Task Delay(TimeSpan duration, CancellationToken cancel);
}
public interface Prometheus.IGauge {
    public double Value { get; }
    public abstract virtual void Inc(double increment);
    public abstract virtual void Set(double val);
    public abstract virtual void Dec(double decrement);
    public abstract virtual void IncTo(double targetValue);
    public abstract virtual void DecTo(double targetValue);
    public abstract virtual double get_Value();
}
public interface Prometheus.IHistogram {
    public double Sum { get; }
    public long Count { get; }
    public abstract virtual void Observe(double val, long count);
    [NullableContextAttribute("2")]
public abstract virtual void Observe(double val, Exemplar exemplar);
    public abstract virtual double get_Sum();
    public abstract virtual long get_Count();
}
[NullableContextAttribute("1")]
public interface Prometheus.IManagedLifetimeMetricFactory {
    public abstract virtual IManagedLifetimeMetricHandle`1<ICounter> CreateCounter(string name, string help, String[] labelNames, CounterConfiguration configuration);
    public abstract virtual IManagedLifetimeMetricHandle`1<IGauge> CreateGauge(string name, string help, String[] labelNames, GaugeConfiguration configuration);
    public abstract virtual IManagedLifetimeMetricHandle`1<IHistogram> CreateHistogram(string name, string help, String[] labelNames, HistogramConfiguration configuration);
    public abstract virtual IManagedLifetimeMetricHandle`1<ISummary> CreateSummary(string name, string help, String[] labelNames, SummaryConfiguration configuration);
    public abstract virtual IManagedLifetimeMetricFactory WithLabels(IDictionary`2<string, string> labels);
}
[NullableContextAttribute("1")]
public interface Prometheus.IManagedLifetimeMetricHandle`1 {
    public abstract virtual IDisposable AcquireLease(TMetricInterface& metric, String[] labelValues);
    public abstract virtual RefLease AcquireRefLease(TMetricInterface& metric, String[] labelValues);
    public abstract virtual void WithLease(Action`1<TMetricInterface> action, String[] labelValues);
    public abstract virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, String[] labelValues);
    public abstract virtual Task WithLeaseAsync(Func`2<TMetricInterface, Task> func, String[] labelValues);
    public abstract virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, String[] labelValues);
    public abstract virtual Task`1<TResult> WithLeaseAsync(Func`2<TMetricInterface, Task`1<TResult>> action, String[] labelValues);
    public abstract virtual IDisposable AcquireLease(TMetricInterface& metric, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual RefLease AcquireRefLease(TMetricInterface& metric, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual void WithLease(Action`1<TMetricInterface> action, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual Task WithLeaseAsync(Func`2<TMetricInterface, Task> func, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual Task`1<TResult> WithLeaseAsync(Func`2<TMetricInterface, Task`1<TResult>> action, ReadOnlyMemory`1<string> labelValues);
    public abstract virtual IDisposable AcquireLease(TMetricInterface& metric, ReadOnlySpan`1<string> labelValues);
    public abstract virtual RefLease AcquireRefLease(TMetricInterface& metric, ReadOnlySpan`1<string> labelValues);
    public abstract virtual void WithLease(Action`1<TMetricInterface> action, ReadOnlySpan`1<string> labelValues);
    public abstract virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public abstract virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, ReadOnlySpan`1<string> labelValues);
    public abstract virtual ICollector`1<TMetricInterface> WithExtendLifetimeOnUse();
}
[NullableContextAttribute("1")]
public interface Prometheus.IMetricFactory {
    [NullableAttribute("2")]
public ExemplarBehavior ExemplarBehavior { get; public set; }
    [EditorBrowsableAttribute("1")]
public abstract virtual Counter CreateCounter(string name, string help, CounterConfiguration configuration);
    [EditorBrowsableAttribute("1")]
public abstract virtual Gauge CreateGauge(string name, string help, GaugeConfiguration configuration);
    [EditorBrowsableAttribute("1")]
public abstract virtual Histogram CreateHistogram(string name, string help, HistogramConfiguration configuration);
    [EditorBrowsableAttribute("1")]
public abstract virtual Summary CreateSummary(string name, string help, SummaryConfiguration configuration);
    public abstract virtual Counter CreateCounter(string name, string help, String[] labelNames, CounterConfiguration configuration);
    public abstract virtual Gauge CreateGauge(string name, string help, String[] labelNames, GaugeConfiguration configuration);
    public abstract virtual Histogram CreateHistogram(string name, string help, String[] labelNames, HistogramConfiguration configuration);
    public abstract virtual Summary CreateSummary(string name, string help, String[] labelNames, SummaryConfiguration configuration);
    public abstract virtual IMetricFactory WithLabels(IDictionary`2<string, string> labels);
    public abstract virtual IManagedLifetimeMetricFactory WithManagedLifetime(TimeSpan expiresAfter);
    [NullableContextAttribute("2")]
public abstract virtual ExemplarBehavior get_ExemplarBehavior();
    [NullableContextAttribute("2")]
public abstract virtual void set_ExemplarBehavior(ExemplarBehavior value);
}
[NullableContextAttribute("1")]
public interface Prometheus.IMetricServer {
    public abstract virtual IMetricServer Start();
    public abstract virtual Task StopAsync();
    public abstract virtual void Stop();
}
[NullableContextAttribute("1")]
internal interface Prometheus.IMetricsSerializer {
    public abstract virtual ValueTask WriteFamilyDeclarationAsync(string name, Byte[] nameBytes, Byte[] helpBytes, MetricType type, Byte[] typeBytes, CancellationToken cancel);
    public abstract virtual ValueTask WriteMetricPointAsync(Byte[] name, Byte[] flattenedLabels, CanonicalLabel extraLabel, double value, ObservedExemplar exemplar, Byte[] suffix, CancellationToken cancel);
    public abstract virtual ValueTask WriteMetricPointAsync(Byte[] name, Byte[] flattenedLabels, CanonicalLabel extraLabel, long value, ObservedExemplar exemplar, Byte[] suffix, CancellationToken cancel);
    public abstract virtual ValueTask WriteEnd(CancellationToken cancel);
    public abstract virtual Task FlushAsync(CancellationToken cancel);
}
[NullableContextAttribute("1")]
internal interface Prometheus.INotifyLeaseEnded {
    public abstract virtual void OnLeaseEnded(object child, ChildLifetimeInfo lifetime);
}
public interface Prometheus.IObserver {
    public abstract virtual void Observe(double val);
}
public interface Prometheus.ISummary {
}
public interface Prometheus.ITimer {
    public abstract virtual TimeSpan ObserveDuration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingAutoLeasingMetric`1 : object {
    private ICollector`1<TMetric> _inner;
    private String[] _enrichWithLabelValues;
    public TMetric Unlabelled { get; }
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public LabelEnrichingAutoLeasingMetric`1(ICollector`1<TMetric> inner, String[] enrichWithLabelValues);
    public sealed virtual TMetric get_Unlabelled();
    public sealed virtual string get_Name();
    public sealed virtual string get_Help();
    public sealed virtual String[] get_LabelNames();
    public sealed virtual TMetric WithLabels(String[] labelValues);
    public sealed virtual TMetric WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TMetric WithLabels(ReadOnlySpan`1<string> labelValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingManagedLifetimeCounter : object {
    internal IManagedLifetimeMetricHandle`1<ICounter> _inner;
    private String[] _enrichWithLabelValues;
    public LabelEnrichingManagedLifetimeCounter(IManagedLifetimeMetricHandle`1<ICounter> inner, String[] enrichWithLabelValues);
    public sealed virtual ICollector`1<ICounter> WithExtendLifetimeOnUse();
    public sealed virtual IDisposable AcquireLease(ICounter& metric, String[] labelValues);
    public sealed virtual RefLease AcquireRefLease(ICounter& metric, String[] labelValues);
    public sealed virtual void WithLease(Action`1<ICounter> action, String[] labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ICounter> action, TArg arg, String[] labelValues);
    public sealed virtual TResult WithLease(Func`2<ICounter, TResult> func, String[] labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<ICounter, Task> func, String[] labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<ICounter, Task`1<TResult>> action, String[] labelValues);
    public sealed virtual IDisposable AcquireLease(ICounter& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(ICounter& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<ICounter> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ICounter> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<ICounter, TResult> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<ICounter, Task> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<ICounter, Task`1<TResult>> action, ReadOnlyMemory`1<string> labelValues);
    private String[] WithEnrichedLabelValues(String[] instanceLabelValues);
    private String[] WithEnrichedLabelValues(ReadOnlyMemory`1<string> instanceLabelValues);
    public sealed virtual IDisposable AcquireLease(ICounter& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(ICounter& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<ICounter> action, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ICounter> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<ICounter, TResult> func, ReadOnlySpan`1<string> labelValues);
    private String[] RentBufferForEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues);
    private ReadOnlySpan`1<string> AssembleEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues, String[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingManagedLifetimeGauge : object {
    private IManagedLifetimeMetricHandle`1<IGauge> _inner;
    private String[] _enrichWithLabelValues;
    public LabelEnrichingManagedLifetimeGauge(IManagedLifetimeMetricHandle`1<IGauge> inner, String[] enrichWithLabelValues);
    public sealed virtual ICollector`1<IGauge> WithExtendLifetimeOnUse();
    public sealed virtual IDisposable AcquireLease(IGauge& metric, String[] labelValues);
    public sealed virtual RefLease AcquireRefLease(IGauge& metric, String[] labelValues);
    public sealed virtual void WithLease(Action`1<IGauge> action, String[] labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IGauge> action, TArg arg, String[] labelValues);
    public sealed virtual TResult WithLease(Func`2<IGauge, TResult> func, String[] labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<IGauge, Task> func, String[] labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<IGauge, Task`1<TResult>> action, String[] labelValues);
    public sealed virtual IDisposable AcquireLease(IGauge& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(IGauge& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<IGauge> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IGauge> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<IGauge, TResult> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<IGauge, Task> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<IGauge, Task`1<TResult>> action, ReadOnlyMemory`1<string> labelValues);
    private String[] WithEnrichedLabelValues(String[] instanceLabelValues);
    private String[] WithEnrichedLabelValues(ReadOnlyMemory`1<string> instanceLabelValues);
    public sealed virtual IDisposable AcquireLease(IGauge& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(IGauge& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<IGauge> action, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IGauge> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<IGauge, TResult> func, ReadOnlySpan`1<string> labelValues);
    private String[] RentBufferForEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues);
    private ReadOnlySpan`1<string> AssembleEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues, String[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingManagedLifetimeHistogram : object {
    private IManagedLifetimeMetricHandle`1<IHistogram> _inner;
    private String[] _enrichWithLabelValues;
    public LabelEnrichingManagedLifetimeHistogram(IManagedLifetimeMetricHandle`1<IHistogram> inner, String[] enrichWithLabelValues);
    public sealed virtual ICollector`1<IHistogram> WithExtendLifetimeOnUse();
    public sealed virtual IDisposable AcquireLease(IHistogram& metric, String[] labelValues);
    public sealed virtual RefLease AcquireRefLease(IHistogram& metric, String[] labelValues);
    public sealed virtual void WithLease(Action`1<IHistogram> action, String[] labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IHistogram> action, TArg arg, String[] labelValues);
    public sealed virtual TResult WithLease(Func`2<IHistogram, TResult> func, String[] labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<IHistogram, Task> func, String[] labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<IHistogram, Task`1<TResult>> action, String[] labelValues);
    public sealed virtual IDisposable AcquireLease(IHistogram& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(IHistogram& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<IHistogram> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IHistogram> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<IHistogram, TResult> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<IHistogram, Task> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<IHistogram, Task`1<TResult>> action, ReadOnlyMemory`1<string> labelValues);
    private String[] WithEnrichedLabelValues(String[] instanceLabelValues);
    private String[] WithEnrichedLabelValues(ReadOnlyMemory`1<string> instanceLabelValues);
    public sealed virtual IDisposable AcquireLease(IHistogram& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(IHistogram& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<IHistogram> action, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, IHistogram> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<IHistogram, TResult> func, ReadOnlySpan`1<string> labelValues);
    private String[] RentBufferForEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues);
    private ReadOnlySpan`1<string> AssembleEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues, String[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingManagedLifetimeMetricFactory : object {
    private ManagedLifetimeMetricFactory _inner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<KeyValuePair`2<string, string>> _labels;
    private String[] _enrichWithLabelNames;
    private String[] _enrichWithLabelValues;
    private Dictionary`2<IManagedLifetimeMetricHandle`1<ICounter>, LabelEnrichingManagedLifetimeCounter> _counters;
    private ReaderWriterLockSlim _countersLock;
    private Dictionary`2<IManagedLifetimeMetricHandle`1<IGauge>, LabelEnrichingManagedLifetimeGauge> _gauges;
    private ReaderWriterLockSlim _gaugesLock;
    private Dictionary`2<IManagedLifetimeMetricHandle`1<IHistogram>, LabelEnrichingManagedLifetimeHistogram> _histograms;
    private ReaderWriterLockSlim _histogramsLock;
    private Dictionary`2<IManagedLifetimeMetricHandle`1<ISummary>, LabelEnrichingManagedLifetimeSummary> _summaries;
    private ReaderWriterLockSlim _summariesLock;
    public LabelEnrichingManagedLifetimeMetricFactory(ManagedLifetimeMetricFactory inner, IDictionary`2<string, string> enrichWithLabels);
    public sealed virtual IManagedLifetimeMetricHandle`1<ICounter> CreateCounter(string name, string help, String[] instanceLabelNames, CounterConfiguration configuration);
    private LabelEnrichingManagedLifetimeCounter CreateCounterCore(IManagedLifetimeMetricHandle`1<ICounter> inner);
    public sealed virtual IManagedLifetimeMetricHandle`1<IGauge> CreateGauge(string name, string help, String[] instanceLabelNames, GaugeConfiguration configuration);
    private LabelEnrichingManagedLifetimeGauge CreateGaugeCore(IManagedLifetimeMetricHandle`1<IGauge> inner);
    public sealed virtual IManagedLifetimeMetricHandle`1<IHistogram> CreateHistogram(string name, string help, String[] instanceLabelNames, HistogramConfiguration configuration);
    private LabelEnrichingManagedLifetimeHistogram CreateHistogramCore(IManagedLifetimeMetricHandle`1<IHistogram> inner);
    public sealed virtual IManagedLifetimeMetricHandle`1<ISummary> CreateSummary(string name, string help, String[] instanceLabelNames, SummaryConfiguration configuration);
    private LabelEnrichingManagedLifetimeSummary CreateSummaryCore(IManagedLifetimeMetricHandle`1<ISummary> inner);
    public sealed virtual IManagedLifetimeMetricFactory WithLabels(IDictionary`2<string, string> labels);
    private String[] WithEnrichedLabelNames(String[] instanceLabelNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.LabelEnrichingManagedLifetimeSummary : object {
    private IManagedLifetimeMetricHandle`1<ISummary> _inner;
    private String[] _enrichWithLabelValues;
    public LabelEnrichingManagedLifetimeSummary(IManagedLifetimeMetricHandle`1<ISummary> inner, String[] enrichWithLabelValues);
    public sealed virtual ICollector`1<ISummary> WithExtendLifetimeOnUse();
    public sealed virtual IDisposable AcquireLease(ISummary& metric, String[] labelValues);
    public sealed virtual RefLease AcquireRefLease(ISummary& metric, String[] labelValues);
    public sealed virtual void WithLease(Action`1<ISummary> action, String[] labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ISummary> action, TArg arg, String[] labelValues);
    public sealed virtual TResult WithLease(Func`2<ISummary, TResult> func, String[] labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<ISummary, Task> func, String[] labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<ISummary, Task`1<TResult>> action, String[] labelValues);
    public sealed virtual IDisposable AcquireLease(ISummary& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(ISummary& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<ISummary> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ISummary> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<ISummary, TResult> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task WithLeaseAsync(Func`2<ISummary, Task> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<ISummary, Task`1<TResult>> action, ReadOnlyMemory`1<string> labelValues);
    private String[] WithEnrichedLabelValues(String[] instanceLabelValues);
    private String[] WithEnrichedLabelValues(ReadOnlyMemory`1<string> instanceLabelValues);
    public sealed virtual IDisposable AcquireLease(ISummary& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(ISummary& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<ISummary> action, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, ISummary> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<ISummary, TResult> func, ReadOnlySpan`1<string> labelValues);
    private String[] RentBufferForEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues);
    private ReadOnlySpan`1<string> AssembleEnrichedLabelValues(ReadOnlySpan`1<string> instanceLabelValues, String[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Prometheus.LabelSequence : ValueType {
    public static LabelSequence Empty;
    public StringSequence Names;
    public StringSequence Values;
    private int _hashCode;
    public int Length { get; }
    private LabelSequence(StringSequence names, StringSequence values);
    private static LabelSequence();
    public int get_Length();
    public static LabelSequence From(StringSequence names, StringSequence values);
    public static LabelSequence From(IDictionary`2<string, string> dictionary);
    public LabelSequence Concat(LabelSequence labels);
    public bool TryGetLabelValue(string labelName, String& labelValue);
    private static string EscapeLabelValue(string value);
    private static int GetEscapedLabelValueByteCount(string value);
    public Byte[] Serialize();
    public sealed virtual bool Equals(LabelSequence other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int CalculateHashCode();
    public IDictionary`2<string, string> ToDictionary();
    public virtual string ToString();
}
internal static class Prometheus.LowGranularityTimeSource : object {
    [ThreadStaticAttribute]
private static double LastUnixSeconds;
    [ThreadStaticAttribute]
private static long LastStopwatchTimestamp;
    [ThreadStaticAttribute]
private static int LastTickCount;
    public static double GetSecondsFromUnixEpoch();
    public static long GetStopwatchTimestamp();
    private static void UpdateIfRequired();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.ManagedLifetimeCounter : ManagedLifetimeMetricHandle`2<Child, ICounter> {
    [NullableAttribute("2")]
private AutoLeasingInstance _unlabelled;
    private static Action`1<ManagedLifetimeCounter> _assignUnlabelledFunc;
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public ICounter Unlabelled { get; }
    private static ManagedLifetimeCounter();
    public ManagedLifetimeCounter(Collector`1<Child> metric, TimeSpan expiresAfter);
    public virtual ICollector`1<ICounter> WithExtendLifetimeOnUse();
    public sealed virtual string get_Name();
    public sealed virtual string get_Help();
    public sealed virtual String[] get_LabelNames();
    public sealed virtual ICounter get_Unlabelled();
    private static void AssignUnlabelled(ManagedLifetimeCounter instance);
    public sealed virtual ICounter WithLabels(String[] labelValues);
    public sealed virtual ICounter WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual ICounter WithLabels(ReadOnlySpan`1<string> labelValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.ManagedLifetimeGauge : ManagedLifetimeMetricHandle`2<Child, IGauge> {
    [NullableAttribute("2")]
private AutoLeasingInstance _unlabelled;
    private static Action`1<ManagedLifetimeGauge> _assignUnlabelledFunc;
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public IGauge Unlabelled { get; }
    private static ManagedLifetimeGauge();
    public ManagedLifetimeGauge(Collector`1<Child> metric, TimeSpan expiresAfter);
    public virtual ICollector`1<IGauge> WithExtendLifetimeOnUse();
    public sealed virtual string get_Name();
    public sealed virtual string get_Help();
    public sealed virtual String[] get_LabelNames();
    public sealed virtual IGauge get_Unlabelled();
    private static void AssignUnlabelled(ManagedLifetimeGauge instance);
    public sealed virtual IGauge WithLabels(String[] labelValues);
    public sealed virtual IGauge WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual IGauge WithLabels(ReadOnlySpan`1<string> labelValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.ManagedLifetimeHistogram : ManagedLifetimeMetricHandle`2<Child, IHistogram> {
    [NullableAttribute("2")]
private AutoLeasingInstance _unlabelled;
    private static Action`1<ManagedLifetimeHistogram> _assignUnlabelledFunc;
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public IHistogram Unlabelled { get; }
    private static ManagedLifetimeHistogram();
    public ManagedLifetimeHistogram(Collector`1<Child> metric, TimeSpan expiresAfter);
    public virtual ICollector`1<IHistogram> WithExtendLifetimeOnUse();
    public sealed virtual string get_Name();
    public sealed virtual string get_Help();
    public sealed virtual String[] get_LabelNames();
    public sealed virtual IHistogram get_Unlabelled();
    private static void AssignUnlabelled(ManagedLifetimeHistogram instance);
    public sealed virtual IHistogram WithLabels(String[] labelValues);
    public sealed virtual IHistogram WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual IHistogram WithLabels(ReadOnlySpan`1<string> labelValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.ManagedLifetimeMetricFactory : object {
    private MetricFactory _inner;
    private TimeSpan _expiresAfter;
    private Dictionary`2<ManagedLifetimeMetricIdentity, ManagedLifetimeCounter> _counters;
    private ReaderWriterLockSlim _countersLock;
    private Dictionary`2<ManagedLifetimeMetricIdentity, ManagedLifetimeGauge> _gauges;
    private ReaderWriterLockSlim _gaugesLock;
    private Dictionary`2<ManagedLifetimeMetricIdentity, ManagedLifetimeHistogram> _histograms;
    private ReaderWriterLockSlim _histogramsLock;
    private Dictionary`2<ManagedLifetimeMetricIdentity, ManagedLifetimeSummary> _summaries;
    private ReaderWriterLockSlim _summariesLock;
    public ManagedLifetimeMetricFactory(MetricFactory inner, TimeSpan expiresAfter);
    public sealed virtual IManagedLifetimeMetricFactory WithLabels(IDictionary`2<string, string> labels);
    public sealed virtual IManagedLifetimeMetricHandle`1<ICounter> CreateCounter(string name, string help, String[] instanceLabelNames, CounterConfiguration configuration);
    public sealed virtual IManagedLifetimeMetricHandle`1<IGauge> CreateGauge(string name, string help, String[] instanceLabelNames, GaugeConfiguration configuration);
    public sealed virtual IManagedLifetimeMetricHandle`1<IHistogram> CreateHistogram(string name, string help, String[] instanceLabelNames, HistogramConfiguration configuration);
    public sealed virtual IManagedLifetimeMetricHandle`1<ISummary> CreateSummary(string name, string help, String[] instanceLabelNames, SummaryConfiguration configuration);
    internal StringSequence GetAllStaticLabelNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Prometheus.ManagedLifetimeMetricHandle`2 : object {
    protected Collector`1<TChild> _metric;
    protected TimeSpan _expiresAfter;
    internal IDelayer Delayer;
    private Dictionary`2<TChild, ChildLifetimeInfo> _lifetimes;
    private ReaderWriterLockSlim _lifetimesLock;
    private int _reaperActiveBool;
    private static int ReaperActive;
    private static int ReaperInactive;
    private Func`1<Task> _reaperFunc;
    internal ManagedLifetimeMetricHandle`2(Collector`1<TChild> metric, TimeSpan expiresAfter);
    public sealed virtual IDisposable AcquireLease(TMetricInterface& metric, String[] labelValues);
    public sealed virtual RefLease AcquireRefLease(TMetricInterface& metric, String[] labelValues);
    public sealed virtual void WithLease(Action`1<TMetricInterface> action, String[] labelValues);
    public sealed virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, String[] labelValues);
    [AsyncStateMachineAttribute("Prometheus.ManagedLifetimeMetricHandle`2/<WithLeaseAsync>d__7")]
public sealed virtual Task WithLeaseAsync(Func`2<TMetricInterface, Task> action, String[] labelValues);
    public sealed virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, String[] labelValues);
    [AsyncStateMachineAttribute("Prometheus.ManagedLifetimeMetricHandle`2/<WithLeaseAsync>d__9`1")]
public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<TMetricInterface, Task`1<TResult>> func, String[] labelValues);
    public sealed virtual IDisposable AcquireLease(TMetricInterface& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(TMetricInterface& metric, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<TMetricInterface> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, ReadOnlyMemory`1<string> labelValues);
    [AsyncStateMachineAttribute("Prometheus.ManagedLifetimeMetricHandle`2/<WithLeaseAsync>d__14")]
public sealed virtual Task WithLeaseAsync(Func`2<TMetricInterface, Task> action, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, ReadOnlyMemory`1<string> labelValues);
    [AsyncStateMachineAttribute("Prometheus.ManagedLifetimeMetricHandle`2/<WithLeaseAsync>d__16`1")]
public sealed virtual Task`1<TResult> WithLeaseAsync(Func`2<TMetricInterface, Task`1<TResult>> func, ReadOnlyMemory`1<string> labelValues);
    public sealed virtual IDisposable AcquireLease(TMetricInterface& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual RefLease AcquireRefLease(TMetricInterface& metric, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`1<TMetricInterface> action, ReadOnlySpan`1<string> labelValues);
    public sealed virtual void WithLease(Action`2<TArg, TMetricInterface> action, TArg arg, ReadOnlySpan`1<string> labelValues);
    public sealed virtual TResult WithLease(Func`2<TMetricInterface, TResult> func, ReadOnlySpan`1<string> labelValues);
    public abstract virtual ICollector`1<TMetricInterface> WithExtendLifetimeOnUse();
    private bool HasAnyTrackedLifetimes();
    internal void SetAllKeepaliveTimestampsToDistantPast();
    internal void DebugDumpLifetimes();
    private IDisposable TakeLease(TChild child);
    private RefLease TakeRefLease(TChild child);
    private ChildLifetimeInfo GetOrCreateLifetimeAndIncrementLeaseCount(TChild child);
    internal void OnLeaseEnded(TChild child, ChildLifetimeInfo lifetime);
    private sealed virtual override void Prometheus.INotifyLeaseEnded.OnLeaseEnded(object child, ChildLifetimeInfo lifetime);
    private void EnsureReaperActive();
    [AsyncStateMachineAttribute("Prometheus.ManagedLifetimeMetricHandle`2/<Reaper>d__39")]
private Task Reaper();
    private void CleanupReaper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Prometheus.ManagedLifetimeMetricIdentity : ValueType {
    public string MetricFamilyName;
    public StringSequence InstanceLabelNames;
    private int _hashCode;
    public ManagedLifetimeMetricIdentity(string metricFamilyName, StringSequence instanceLabelNames);
    public sealed virtual bool Equals(ManagedLifetimeMetricIdentity other);
    public virtual int GetHashCode();
    private static int CalculateHashCode(string metricFamilyName, StringSequence instanceLabelNames);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Prometheus.ManagedLifetimeSummary : ManagedLifetimeMetricHandle`2<Child, ISummary> {
    [NullableAttribute("2")]
private AutoLeasingInstance _unlabelled;
    private static Action`1<ManagedLifetimeSummary> _assignUnlabelledFunc;
    public string Name { get; }
    public string Help { get; }
    public String[] LabelNames { get; }
    public ISummary Unlabelled { get; }
    private static ManagedLifetimeSummary();
    public ManagedLifetimeSummary(Collector`1<Child> metric, TimeSpan expiresAfter);
    public virtual ICollector`1<ISummary> WithExtendLifetimeOnUse();
    public sealed virtual string get_Name();
    public sealed virtual string get_Help();
    public sealed virtual String[] get_LabelNames();
    public sealed virtual ISummary get_Unlabelled();
    private static void AssignUnlabelled(ManagedLifetimeSummary instance);
    public sealed virtual ISummary WithLabels(String[] labelValues);
    public sealed virtual ISummary WithLabels(ReadOnlyMemory`1<string> labelValues);
    public sealed virtual ISummary WithLabels(ReadOnlySpan`1<string> labelValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.MeterAdapter : object {
    private MeterAdapterOptions _options;
    private CollectorRegistry _registry;
    private ManagedLifetimeMetricFactory _factory;
    private String[] _inheritedStaticLabelNames;
    private Gauge _instrumentsConnected;
    private MeterListener _listener;
    private bool _disposed;
    private object _disposedLock;
    private static Action`2<double, IGauge> _incrementGaugeFunc;
    private static Action`2<double, IGauge> _setGaugeFunc;
    private static Action`2<double, IHistogram> _observeHistogramFunc;
    private Dictionary`2<CacheKey, MetricContext`1<IGauge>> _gaugeCache;
    private ReaderWriterLockSlim _gaugeCacheLock;
    private Dictionary`2<CacheKey, MetricContext`1<IHistogram>> _histogramCache;
    private ReaderWriterLockSlim _histogramCacheLock;
    private Func`5<Instrument, string, string, String[], IManagedLifetimeMetricHandle`1<IGauge>> _createGaugeFunc;
    private Func`5<Instrument, string, string, String[], IManagedLifetimeMetricHandle`1<IHistogram>> _createHistogramFunc;
    private static ConcurrentDictionary`2<Instrument, string> _instrumentPrometheusNames;
    private static ConcurrentDictionary`2<Instrument, string> _instrumentPrometheusHelp;
    private static ConcurrentDictionary`2<string, string> _tagPrometheusNames;
    private static Func`2<string, string> _translateTagNameToPrometheusNameFunc;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder _prometheusHelpBuilder;
    private static int PrometheusHelpBuilderReusableCapacity;
    private MeterAdapter(MeterAdapterOptions options);
    private static MeterAdapter();
    public static IDisposable StartListening();
    public static IDisposable StartListening(MeterAdapterOptions options);
    public sealed virtual void Dispose();
    private void OnInstrumentPublished(Instrument instrument, MeterListener listener);
    [NullableContextAttribute("0")]
private void OnMeasurementRecorded(Instrument instrument, TMeasurement measurement, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags, object state);
    private static void IncrementGauge(double value, IGauge gauge);
    private static void SetGauge(double value, IGauge gauge);
    private static void ObserveHistogram(double value, IHistogram histogram);
    private MetricContext`1<IGauge> GetOrCreateGaugeContext(Instrument instrument, ReadOnlySpan`1& tags);
    private MetricContext`1<IHistogram> GetOrCreateHistogramContext(Instrument instrument, ReadOnlySpan`1& tags);
    private IManagedLifetimeMetricHandle`1<IGauge> CreateGauge(Instrument instrument, string name, string help, String[] labelNames);
    private IManagedLifetimeMetricHandle`1<IHistogram> CreateHistogram(Instrument instrument, string name, string help, String[] labelNames);
    private MetricContext`1<TMetricInstance> GetOrCreateMetricContext(Instrument instrument, ReadOnlySpan`1& tags, Func`5<Instrument, string, string, String[], IManagedLifetimeMetricHandle`1<TMetricInstance>> metricFactory, ReaderWriterLockSlim cacheLock, Dictionary`2<CacheKey, MetricContext`1<TMetricInstance>> cache);
    private MetricContext`1<TMetricInstance> CreateMetricContext(Instrument instrument, ReadOnlySpan`1& tags, Func`5<Instrument, string, string, String[], IManagedLifetimeMetricHandle`1<TMetricInstance>> metricFactory, ReaderWriterLockSlim cacheLock, Dictionary`2<CacheKey, MetricContext`1<TMetricInstance>> cache);
    private void DeterminePrometheusLabels(ReadOnlySpan`1& tags, String[]& prometheusLabelNames, Int32[]& prometheusLabelValueIndexes);
    private void OnMeasurementsCompleted(Instrument instrument, object state);
    private static ReadOnlySpan`1<string> CopyTagValuesToLabelValues(Int32[] prometheusLabelValueIndexes, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags, Span`1<string> labelValues);
    private static string TranslateInstrumentNameToPrometheusName(Instrument instrument);
    private static string TranslateTagNameToPrometheusName(string tagName);
    private static string TranslateInstrumentDescriptionToPrometheusHelp(Instrument instrument);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.MeterAdapterOptions : object {
    public static Double[] DefaultHistogramBuckets;
    [CompilerGeneratedAttribute]
private Func`2<Instrument, bool> <InstrumentFilterPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MetricsExpireAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectorRegistry <Registry>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMetricFactory <MetricFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Instrument, Double[]> <ResolveHistogramBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public static MeterAdapterOptions Default { get; }
    public Func`2<Instrument, bool> InstrumentFilterPredicate { get; public set; }
    public TimeSpan MetricsExpireAfter { get; public set; }
    public CollectorRegistry Registry { get; public set; }
    [NullableAttribute("2")]
public IMetricFactory MetricFactory { get; public set; }
    public Func`2<Instrument, Double[]> ResolveHistogramBuckets { get; public set; }
    [CompilerGeneratedAttribute]
private MeterAdapterOptions(MeterAdapterOptions original);
    private static MeterAdapterOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    public static MeterAdapterOptions get_Default();
    [CompilerGeneratedAttribute]
public Func`2<Instrument, bool> get_InstrumentFilterPredicate();
    [CompilerGeneratedAttribute]
public void set_InstrumentFilterPredicate(Func`2<Instrument, bool> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MetricsExpireAfter();
    [CompilerGeneratedAttribute]
public void set_MetricsExpireAfter(TimeSpan value);
    [CompilerGeneratedAttribute]
public CollectorRegistry get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(CollectorRegistry value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IMetricFactory get_MetricFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MetricFactory(IMetricFactory value);
    [CompilerGeneratedAttribute]
public Func`2<Instrument, Double[]> get_ResolveHistogramBuckets();
    [CompilerGeneratedAttribute]
public void set_ResolveHistogramBuckets(Func`2<Instrument, Double[]> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MeterAdapterOptions left, MeterAdapterOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MeterAdapterOptions left, MeterAdapterOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MeterAdapterOptions other);
    [CompilerGeneratedAttribute]
public MeterAdapterOptions <Clone>$();
}
public abstract class Prometheus.MetricConfiguration : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <LabelNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInitialValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LabelNames { get; public set; }
    public bool SuppressInitialValue { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_LabelNames();
    [CompilerGeneratedAttribute]
public void set_LabelNames(String[] value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInitialValue();
    [CompilerGeneratedAttribute]
public void set_SuppressInitialValue(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.MetricFactory : object {
    private CollectorRegistry _registry;
    private LabelSequence _factoryLabels;
    private Lazy`1<LabelSequence> _staticLabelsLazy;
    private static CollectorInitializer`2<Counter, CounterConfiguration> _createCounterInstanceFunc;
    private static CollectorInitializer`2<Gauge, GaugeConfiguration> _createGaugeInstanceFunc;
    private static CollectorInitializer`2<Histogram, HistogramConfiguration> _createHistogramInstanceFunc;
    private static CollectorInitializer`2<Summary, SummaryConfiguration> _createSummaryInstanceFunc;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ExemplarBehavior <ExemplarBehavior>k__BackingField;
    [NullableAttribute("2")]
public ExemplarBehavior ExemplarBehavior { get; public set; }
    internal MetricFactory(CollectorRegistry registry);
    internal MetricFactory(CollectorRegistry registry, LabelSequence& withLabels);
    private static MetricFactory();
    private LabelSequence ResolveStaticLabels();
    public sealed virtual Counter CreateCounter(string name, string help, CounterConfiguration configuration);
    public sealed virtual Gauge CreateGauge(string name, string help, GaugeConfiguration configuration);
    public sealed virtual Summary CreateSummary(string name, string help, SummaryConfiguration configuration);
    public sealed virtual Histogram CreateHistogram(string name, string help, HistogramConfiguration configuration);
    public sealed virtual Counter CreateCounter(string name, string help, String[] labelNames, CounterConfiguration configuration);
    public sealed virtual Gauge CreateGauge(string name, string help, String[] labelNames, GaugeConfiguration configuration);
    public sealed virtual Histogram CreateHistogram(string name, string help, String[] labelNames, HistogramConfiguration configuration);
    public sealed virtual Summary CreateSummary(string name, string help, String[] labelNames, SummaryConfiguration configuration);
    internal Counter CreateCounter(string name, string help, StringSequence instanceLabelNames, CounterConfiguration configuration);
    internal Gauge CreateGauge(string name, string help, StringSequence instanceLabelNames, GaugeConfiguration configuration);
    internal Histogram CreateHistogram(string name, string help, StringSequence instanceLabelNames, HistogramConfiguration configuration);
    internal Summary CreateSummary(string name, string help, StringSequence instanceLabelNames, SummaryConfiguration configuration);
    private static Counter CreateCounterInstance(string Name, string Help, StringSequence& InstanceLabelNames, LabelSequence& StaticLabels, CounterConfiguration Configuration, ExemplarBehavior ExemplarBehavior);
    private static Gauge CreateGaugeInstance(string Name, string Help, StringSequence& InstanceLabelNames, LabelSequence& StaticLabels, GaugeConfiguration Configuration, ExemplarBehavior ExemplarBehavior);
    private static Histogram CreateHistogramInstance(string Name, string Help, StringSequence& InstanceLabelNames, LabelSequence& StaticLabels, HistogramConfiguration Configuration, ExemplarBehavior ExemplarBehavior);
    private static Summary CreateSummaryInstance(string name, string help, StringSequence& instanceLabelNames, LabelSequence& staticLabels, SummaryConfiguration configuration, ExemplarBehavior exemplarBehavior);
    public Counter CreateCounter(string name, string help, String[] labelNames);
    public Gauge CreateGauge(string name, string help, String[] labelNames);
    public Summary CreateSummary(string name, string help, String[] labelNames);
    public Histogram CreateHistogram(string name, string help, String[] labelNames);
    public sealed virtual IMetricFactory WithLabels(IDictionary`2<string, string> labels);
    internal StringSequence GetAllStaticLabelNames();
    public sealed virtual IManagedLifetimeMetricFactory WithManagedLifetime(TimeSpan expiresAfter);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ExemplarBehavior get_ExemplarBehavior();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ExemplarBehavior(ExemplarBehavior value);
}
public abstract class Prometheus.MetricHandler : object {
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    [NullableAttribute("2")]
private Task _task;
    [NullableContextAttribute("1")]
public sealed virtual IMetricServer Start();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.MetricHandler/<StopAsync>d__4")]
public sealed virtual Task StopAsync();
    public sealed virtual void Stop();
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
protected abstract virtual Task StartServer(CancellationToken cancel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.MetricPusher : MetricHandler {
    private TimeSpan _pushInterval;
    private HttpMethod _method;
    private Uri _targetUrl;
    private Func`1<HttpClient> _httpClientProvider;
    private static HttpClient _singletonHttpClient;
    private CollectorRegistry _registry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onError;
    public MetricPusher(string endpoint, string job, string instance, long intervalMilliseconds, IEnumerable`1<Tuple`2<string, string>> additionalLabels, CollectorRegistry registry, bool pushReplace);
    public MetricPusher(MetricPusherOptions options);
    private static MetricPusher();
    protected virtual Task StartServer(CancellationToken cancel);
    private void HandleFailedPush(Exception ex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Prometheus.MetricPusherOptions : object {
    [NullableAttribute("1")]
internal static MetricPusherOptions Default;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Job>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private long <IntervalMilliseconds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<string, string>> <AdditionalLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectorRegistry <Registry>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Exception> <OnError>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<HttpClient> <HttpClientProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceOnPush>k__BackingField;
    public string Endpoint { get; public set; }
    public string Job { get; public set; }
    public string Instance { get; public set; }
    public long IntervalMilliseconds { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<Tuple`2<string, string>> AdditionalLabels { get; public set; }
    public CollectorRegistry Registry { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Exception> OnError { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<HttpClient> HttpClientProvider { get; public set; }
    public bool ReplaceOnPush { get; public set; }
    private static MetricPusherOptions();
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
public string get_Job();
    [CompilerGeneratedAttribute]
public void set_Job(string value);
    [CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
    [CompilerGeneratedAttribute]
public long get_IntervalMilliseconds();
    [CompilerGeneratedAttribute]
public void set_IntervalMilliseconds(long value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Tuple`2<string, string>> get_AdditionalLabels();
    [CompilerGeneratedAttribute]
public void set_AdditionalLabels(IEnumerable`1<Tuple`2<string, string>> value);
    [CompilerGeneratedAttribute]
public CollectorRegistry get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(CollectorRegistry value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public Func`1<HttpClient> get_HttpClientProvider();
    [CompilerGeneratedAttribute]
public void set_HttpClientProvider(Func`1<HttpClient> value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceOnPush();
    [CompilerGeneratedAttribute]
public void set_ReplaceOnPush(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Prometheus.Metrics : object {
    [CompilerGeneratedAttribute]
private static CollectorRegistry <DefaultRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private static MetricFactory <DefaultFactory>k__BackingField;
    private static Action`1<EventCounterAdapterOptions> _configureEventCounterAdapterCallback;
    private static Action`1<MeterAdapterOptions> _configureMeterAdapterOptions;
    public static CollectorRegistry DefaultRegistry { get; private set; }
    public static MetricFactory DefaultFactory { get; private set; }
    private static Metrics();
    [CompilerGeneratedAttribute]
public static CollectorRegistry get_DefaultRegistry();
    [CompilerGeneratedAttribute]
private static void set_DefaultRegistry(CollectorRegistry value);
    [CompilerGeneratedAttribute]
public static MetricFactory get_DefaultFactory();
    [CompilerGeneratedAttribute]
private static void set_DefaultFactory(MetricFactory value);
    public static CollectorRegistry NewCustomRegistry();
    public static MetricFactory WithCustomRegistry(CollectorRegistry registry);
    public static IMetricFactory WithLabels(IDictionary`2<string, string> labels);
    public static IManagedLifetimeMetricFactory WithManagedLifetime(TimeSpan expiresAfter);
    public static Counter CreateCounter(string name, string help, CounterConfiguration configuration);
    public static Gauge CreateGauge(string name, string help, GaugeConfiguration configuration);
    public static Summary CreateSummary(string name, string help, SummaryConfiguration configuration);
    public static Histogram CreateHistogram(string name, string help, HistogramConfiguration configuration);
    public static Counter CreateCounter(string name, string help, String[] labelNames, CounterConfiguration configuration);
    public static Gauge CreateGauge(string name, string help, String[] labelNames, GaugeConfiguration configuration);
    public static Summary CreateSummary(string name, string help, String[] labelNames, SummaryConfiguration configuration);
    public static Histogram CreateHistogram(string name, string help, String[] labelNames, HistogramConfiguration configuration);
    public static Counter CreateCounter(string name, string help, String[] labelNames);
    public static Gauge CreateGauge(string name, string help, String[] labelNames);
    public static Summary CreateSummary(string name, string help, String[] labelNames);
    public static Histogram CreateHistogram(string name, string help, String[] labelNames);
    public static void SuppressDefaultMetrics();
    public static void SuppressDefaultMetrics(SuppressDefaultMetricOptions options);
    public static void ConfigureEventCounterAdapter(Action`1<EventCounterAdapterOptions> callback);
    public static void ConfigureMeterAdapter(Action`1<MeterAdapterOptions> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.MetricServer : MetricHandler {
    private HttpListener _httpListener;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpListenerRequest, bool> <RequestPredicate>k__BackingField;
    private CollectorRegistry _registry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpListenerRequest, bool> RequestPredicate { get; public set; }
    public MetricServer(int port, string url, CollectorRegistry registry, bool useHttps);
    public MetricServer(string hostname, int port, string url, CollectorRegistry registry, bool useHttps);
    [CompilerGeneratedAttribute]
public Func`2<HttpListenerRequest, bool> get_RequestPredicate();
    [CompilerGeneratedAttribute]
public void set_RequestPredicate(Func`2<HttpListenerRequest, bool> value);
    protected virtual Task StartServer(CancellationToken cancel);
}
internal enum Prometheus.MetricType : Enum {
    public int value__;
    public static MetricType Counter;
    public static MetricType Gauge;
    public static MetricType Summary;
    public static MetricType Histogram;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Prometheus.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
    [ConditionalAttribute("DEBUG")]
private static void DebugAssert(bool condition, string message);
}
internal class Prometheus.NoopDisposable : object {
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.ObservedExemplar : object {
    private static int MaxRunes;
    private static ObjectPool`1<ObservedExemplar> Pool;
    public static ObservedExemplar Empty;
    internal static Func`1<double> NowProvider;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exemplar <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Timestamp>k__BackingField;
    [NullableAttribute("2")]
public Exemplar Labels { get; private set; }
    public double Value { get; private set; }
    public double Timestamp { get; private set; }
    public bool IsValid { get; }
    private static ObservedExemplar();
    internal static double DefaultNowProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exemplar get_Labels();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Labels(Exemplar value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(double value);
    public bool get_IsValid();
    private void Update(Exemplar labels, double value);
    private static bool ByteArraysEqual(Byte[] a, Byte[] b);
    public static ObservedExemplar CreatePooled(Exemplar labels, double value);
    public static void ReturnPooledIfNotEmpty(ObservedExemplar instance);
}
internal class Prometheus.PlatformCompatibilityHelpers : object {
    public static TimeSpan StopwatchGetElapsedTime(long start, long end);
    public static long ElapsedToTimeStopwatchTicks(TimeSpan elapsedTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Prometheus.PrometheusConstants : object {
    public static string TextContentType;
    public static string OpenMetricsContentType;
    public static string TextContentTypeWithVersionAndEncoding;
    public static string OpenMetricsContentTypeWithVersionAndEncoding;
    public static MediaTypeHeaderValue ExporterContentTypeValue;
    public static MediaTypeHeaderValue ExporterOpenMetricsContentTypeValue;
    public static Encoding ExportEncoding;
    internal static Encoding ExemplarEncoding;
    private static PrometheusConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Prometheus.PrometheusNameHelpers : object {
    private static Regex NameRegex;
    private static string FirstCharacterCharset;
    private static string NonFirstCharacterCharset;
    private static PrometheusNameHelpers();
    public static string TranslateNameToPrometheusName(string inputName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.PushStreamContentInternal : HttpContent {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<Stream, HttpContent, TransportContext, Task> _onStreamAvailable;
    private static MediaTypeHeaderValue OctetStreamHeaderValue;
    public PushStreamContentInternal(Func`4<Stream, HttpContent, TransportContext, Task> onStreamAvailable, MediaTypeHeaderValue mediaType);
    private static PushStreamContentInternal();
    [AsyncStateMachineAttribute("Prometheus.PushStreamContentInternal/<SerializeToStreamAsync>d__3")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
[IsReadOnlyAttribute]
public class Prometheus.QuantileEpsilonPair : ValueType {
    [CompilerGeneratedAttribute]
private double <Quantile>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Epsilon>k__BackingField;
    public double Quantile { get; }
    public double Epsilon { get; }
    public QuantileEpsilonPair(double quantile, double epsilon);
    [CompilerGeneratedAttribute]
public double get_Quantile();
    [CompilerGeneratedAttribute]
public double get_Epsilon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.RealDelayer : object {
    public static RealDelayer Instance;
    private static RealDelayer();
    [DebuggerStepThroughAttribute]
public sealed virtual Task Delay(TimeSpan duration);
    [DebuggerStepThroughAttribute]
public sealed virtual Task Delay(TimeSpan duration, CancellationToken cancel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class Prometheus.RefLease : ValueType {
    private INotifyLeaseEnded _notifyLeaseEnded;
    private object _child;
    private ChildLifetimeInfo _lifetime;
    internal RefLease(INotifyLeaseEnded notifyLeaseEnded, object child, ChildLifetimeInfo lifetime);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.ScrapeFailedException : Exception {
    public ScrapeFailedException(string message);
    public ScrapeFailedException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Prometheus.StringSequence : ValueType {
    public static StringSequence Empty;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlyMemory`1<string> _values;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlyMemory`1[] _inheritedValueArrays;
    private int _hashCode;
    public int Length { get; }
    public bool IsEmpty { get; }
    private StringSequence(StringSequence inheritFrom, StringSequence thenFrom, ReadOnlyMemory`1& andFinallyPrepend);
    private static StringSequence();
    public Enumerator GetEnumerator();
    [CompilerGeneratedAttribute]
public int get_Length();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(StringSequence other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static StringSequence From(String[] values);
    public static StringSequence From(ReadOnlyMemory`1<string> values);
    public StringSequence InheritAndPrepend(String[] prependValues);
    public StringSequence InheritAndPrepend(StringSequence prependValues);
    public StringSequence Concat(StringSequence concatenatedValues);
    private static ReadOnlyMemory`1[] InheritFrom(StringSequence first, StringSequence second);
    private int CalculateHashCode();
    public bool Contains(string value);
    public String[] ToArray();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Prometheus.Summary : Collector`1<Child> {
    private static string QuantileLabel;
    internal static QuantileEpsilonPair[] DefObjectivesArray;
    public static TimeSpan DefMaxAge;
    public static int DefAgeBuckets;
    public static int DefBufCap;
    private IReadOnlyList`1<QuantileEpsilonPair> _objectives;
    private TimeSpan _maxAge;
    private int _ageBuckets;
    private int _bufCap;
    private Double[] _sortedObjectives;
    private CanonicalLabel[] _quantileLabels;
    private static Byte[] QuantileLabelName;
    internal MetricType Type { get; }
    internal int TimeseriesCount { get; }
    internal Summary(string name, string help, StringSequence instanceLabelNames, LabelSequence staticLabels, ExemplarBehavior exemplarBehavior, bool suppressInitialValue, IReadOnlyList`1<QuantileEpsilonPair> objectives, Nullable`1<TimeSpan> maxAge, Nullable`1<int> ageBuckets, Nullable`1<int> bufCap);
    private static Summary();
    private protected virtual Child NewChild(LabelSequence instanceLabels, LabelSequence flattenedLabels, bool publish, ExemplarBehavior exemplarBehavior);
    internal virtual MetricType get_Type();
    public sealed virtual void Observe(double val);
    public void Publish();
    public void Unpublish();
    internal virtual int get_TimeseriesCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.SummaryConfiguration : MetricConfiguration {
    internal static SummaryConfiguration Default;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<QuantileEpsilonPair> <Objectives>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AgeBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    public IReadOnlyList`1<QuantileEpsilonPair> Objectives { get; public set; }
    public TimeSpan MaxAge { get; public set; }
    public int AgeBuckets { get; public set; }
    public int BufferSize { get; public set; }
    private static SummaryConfiguration();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<QuantileEpsilonPair> get_Objectives();
    [CompilerGeneratedAttribute]
public void set_Objectives(IReadOnlyList`1<QuantileEpsilonPair> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_AgeBuckets();
    [CompilerGeneratedAttribute]
public void set_AgeBuckets(int value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
}
internal class Prometheus.SummaryImpl.Invariant : MulticastDelegate {
    public Invariant(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual double Invoke(SampleStream stream, double r);
    public virtual IAsyncResult BeginInvoke(SampleStream stream, double r, AsyncCallback callback, object object);
    public virtual double EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.SummaryImpl.QuantileStream : object {
    private SampleStream _sampleStream;
    private List`1<Sample> _samples;
    private bool _sorted;
    public int Count { get; }
    public int SamplesCount { get; }
    public bool Flushed { get; }
    private QuantileStream(SampleStream sampleStream, List`1<Sample> samples, bool sorted);
    public static QuantileStream NewStream(Invariant invariant);
    public static QuantileStream NewTargeted(IReadOnlyList`1<QuantileEpsilonPair> targets);
    public void Insert(double value);
    private void Insert(Sample sample);
    private void Flush();
    private void MaybeSort();
    private static int SampleComparison(Sample lhs, Sample rhs);
    public void Reset();
    public int get_Count();
    public int get_SamplesCount();
    public bool get_Flushed();
    public double Query(double q);
}
internal class Prometheus.SummaryImpl.Sample : ValueType {
    public double Value;
    public double Width;
    public double Delta;
}
[DefaultMemberAttribute("Item")]
internal class Prometheus.SummaryImpl.SampleBuffer : object {
    [NullableAttribute("1")]
private Double[] _buffer;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public double Item { get; }
    public int Position { get; private set; }
    public int Capacity { get; }
    public bool IsFull { get; }
    public bool IsEmpty { get; }
    public SampleBuffer(int capacity);
    public void Append(double value);
    public double get_Item(int index);
    public void Reset();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    public int get_Capacity();
    public bool get_IsFull();
    public bool get_IsEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Prometheus.SummaryImpl.SampleStream : object {
    public double N;
    private List`1<Sample> _samples;
    private Invariant _invariant;
    public int Count { get; }
    public int SampleCount { get; }
    public SampleStream(Invariant invariant);
    public void Merge(List`1<Sample> samples);
    private void Compress();
    public void Reset();
    public int get_Count();
    public double Query(double q);
    public int get_SampleCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Prometheus.SuppressDefaultMetricOptions : object {
    internal static SuppressDefaultMetricOptions SuppressAll;
    internal static SuppressDefaultMetricOptions SuppressNone;
    [CompilerGeneratedAttribute]
private bool <SuppressProcessMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDebugMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressEventCounters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressMeters>k__BackingField;
    public bool SuppressProcessMetrics { get; public set; }
    public bool SuppressDebugMetrics { get; public set; }
    public bool SuppressEventCounters { get; public set; }
    public bool SuppressMeters { get; public set; }
    private static SuppressDefaultMetricOptions();
    [CompilerGeneratedAttribute]
public bool get_SuppressProcessMetrics();
    [CompilerGeneratedAttribute]
public void set_SuppressProcessMetrics(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressDebugMetrics();
    [CompilerGeneratedAttribute]
public void set_SuppressDebugMetrics(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressEventCounters();
    [CompilerGeneratedAttribute]
public void set_SuppressEventCounters(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressMeters();
    [CompilerGeneratedAttribute]
public void set_SuppressMeters(bool value);
    internal void ApplyToDefaultRegistry(ConfigurationCallbacks configurationCallbacks);
}
internal class Prometheus.TextSerializer : object {
    [NullableAttribute("1")]
internal static Byte[] UnknownBytes;
    [NullableAttribute("1")]
internal static Byte[] EofNewLineBytes;
    [NullableAttribute("1")]
internal static Byte[] PositiveInfinityBytes;
    [NullableAttribute("1")]
internal static Dictionary`2<MetricType, Byte[]> MetricTypeToBytes;
    [NullableAttribute("1")]
private static Char[] DotEChar;
    [NullableAttribute("1")]
private Lazy`1<Stream> _stream;
    [NullableAttribute("1")]
private Char[] _stringCharsBuffer;
    [NullableAttribute("1")]
private Byte[] _stringBytesBuffer;
    private ExpositionFormat _expositionFormat;
    internal static ReadOnlySpan`1<byte> NewLine { get; }
    internal static ReadOnlySpan`1<byte> Quote { get; }
    internal static ReadOnlySpan`1<byte> Equal { get; }
    internal static ReadOnlySpan`1<byte> Comma { get; }
    internal static ReadOnlySpan`1<byte> Underscore { get; }
    internal static ReadOnlySpan`1<byte> LeftBrace { get; }
    internal static ReadOnlySpan`1<byte> RightBraceSpace { get; }
    internal static ReadOnlySpan`1<byte> Space { get; }
    internal static ReadOnlySpan`1<byte> SpaceHashSpaceLeftBrace { get; }
    internal static ReadOnlySpan`1<byte> PositiveInfinity { get; }
    internal static ReadOnlySpan`1<byte> NegativeInfinity { get; }
    internal static ReadOnlySpan`1<byte> NotANumber { get; }
    internal static ReadOnlySpan`1<byte> DotZero { get; }
    internal static ReadOnlySpan`1<byte> FloatPositiveOne { get; }
    internal static ReadOnlySpan`1<byte> FloatZero { get; }
    internal static ReadOnlySpan`1<byte> FloatNegativeOne { get; }
    internal static ReadOnlySpan`1<byte> IntPositiveOne { get; }
    internal static ReadOnlySpan`1<byte> IntZero { get; }
    internal static ReadOnlySpan`1<byte> IntNegativeOne { get; }
    internal static ReadOnlySpan`1<byte> HashHelpSpace { get; }
    internal static ReadOnlySpan`1<byte> NewlineHashTypeSpace { get; }
    [NullableContextAttribute("1")]
public TextSerializer(Stream stream, ExpositionFormat fmt);
    [NullableContextAttribute("1")]
public TextSerializer(Func`1<Stream> streamFactory, ExpositionFormat fmt);
    private static TextSerializer();
    internal static ReadOnlySpan`1<byte> get_NewLine();
    internal static ReadOnlySpan`1<byte> get_Quote();
    internal static ReadOnlySpan`1<byte> get_Equal();
    internal static ReadOnlySpan`1<byte> get_Comma();
    internal static ReadOnlySpan`1<byte> get_Underscore();
    internal static ReadOnlySpan`1<byte> get_LeftBrace();
    internal static ReadOnlySpan`1<byte> get_RightBraceSpace();
    internal static ReadOnlySpan`1<byte> get_Space();
    internal static ReadOnlySpan`1<byte> get_SpaceHashSpaceLeftBrace();
    internal static ReadOnlySpan`1<byte> get_PositiveInfinity();
    internal static ReadOnlySpan`1<byte> get_NegativeInfinity();
    internal static ReadOnlySpan`1<byte> get_NotANumber();
    internal static ReadOnlySpan`1<byte> get_DotZero();
    internal static ReadOnlySpan`1<byte> get_FloatPositiveOne();
    internal static ReadOnlySpan`1<byte> get_FloatZero();
    internal static ReadOnlySpan`1<byte> get_FloatNegativeOne();
    internal static ReadOnlySpan`1<byte> get_IntPositiveOne();
    internal static ReadOnlySpan`1<byte> get_IntZero();
    internal static ReadOnlySpan`1<byte> get_IntNegativeOne();
    internal static ReadOnlySpan`1<byte> get_HashHelpSpace();
    internal static ReadOnlySpan`1<byte> get_NewlineHashTypeSpace();
    [NullableContextAttribute("1")]
private static Stream AddStreamBuffering(Stream inner);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.TextSerializer/<FlushAsync>d__50")]
public sealed virtual Task FlushAsync(CancellationToken cancel);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.TextSerializer/<WriteFamilyDeclarationAsync>d__52")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
public sealed virtual ValueTask WriteFamilyDeclarationAsync(string name, Byte[] nameBytes, Byte[] helpBytes, MetricType type, Byte[] typeBytes, CancellationToken cancel);
    [NullableContextAttribute("1")]
public int MeasureFamilyDeclarationLength(string name, Byte[] nameBytes, Byte[] helpBytes, MetricType type, Byte[] typeBytes);
    [AsyncStateMachineAttribute("Prometheus.TextSerializer/<WriteEnd>d__54")]
public sealed virtual ValueTask WriteEnd(CancellationToken cancel);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.TextSerializer/<WriteMetricPointAsync>d__55")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
public sealed virtual ValueTask WriteMetricPointAsync(Byte[] name, Byte[] flattenedLabels, CanonicalLabel canonicalLabel, double value, ObservedExemplar exemplar, Byte[] suffix, CancellationToken cancel);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Prometheus.TextSerializer/<WriteMetricPointAsync>d__56")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
public sealed virtual ValueTask WriteMetricPointAsync(Byte[] name, Byte[] flattenedLabels, CanonicalLabel canonicalLabel, long value, ObservedExemplar exemplar, Byte[] suffix, CancellationToken cancel);
    private int WriteExemplar(Span`1<byte> buffer, ObservedExemplar exemplar);
    [NullableContextAttribute("1")]
private int MeasureExemplarMaxLength(ObservedExemplar exemplar);
    [NullableContextAttribute("1")]
private static int WriteExemplarLabel(Span`1<byte> buffer, Byte[] label, string value);
    [NullableContextAttribute("1")]
private static int MeasureExemplarLabelMaxLength(Byte[] label, string value);
    private int WriteValue(Span`1<byte> buffer, double value);
    [NullableContextAttribute("1")]
private static bool RequiresOpenMetricsDotZero(Char[] buffer, int length);
    private int MeasureValueMaxLength(double value);
    private int WriteValue(Span`1<byte> buffer, long value);
    private int MeasureValueMaxLength(long value);
    private static void AppendToBufferAndIncrementPosition(ReadOnlySpan`1<byte> from, Span`1<byte> to, Int32& position);
    private static void ValidateBufferLengthAndPosition(int bufferLength, int position);
    private static void ValidateBufferMaxLengthAndPosition(int bufferMaxLength, int position);
    [NullableContextAttribute("1")]
private int WriteIdentifierPart(Span`1<byte> buffer, Byte[] name, Byte[] flattenedLabels, CanonicalLabel extraLabel, Byte[] suffix);
    [NullableContextAttribute("1")]
private int MeasureIdentifierPartLength(Byte[] name, Byte[] flattenedLabels, CanonicalLabel extraLabel, Byte[] suffix);
    [NullableContextAttribute("1")]
internal static CanonicalLabel EncodeValueAsCanonicalLabel(Byte[] name, double value);
}
internal class Prometheus.ThreadSafeDouble : ValueType {
    private long _value;
    public double Value { get; public set; }
    public ThreadSafeDouble(double value);
    public double get_Value();
    public void set_Value(double value);
    public void Add(double increment);
    public void IncrementTo(double to);
    public void DecrementTo(double to);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Prometheus.ThreadSafeLong : ValueType {
    private long _value;
    public long Value { get; public set; }
    public ThreadSafeLong(long value);
    public long get_Value();
    public void set_Value(long value);
    public void Add(long increment);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Prometheus.TimerExtensions : object {
    [ExtensionAttribute]
public static ITimer NewTimer(IObserver observer);
    [ExtensionAttribute]
public static ITimer NewTimer(IGauge gauge);
    [ExtensionAttribute]
public static ITimer NewTimer(ICounter counter);
}
internal static class Prometheus.TimestampHelpers : object {
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1970;
    private static long UnixEpochTicks;
    private static long UnixEpochSeconds;
    public static double ToUnixTimeSecondsAsDouble(DateTimeOffset timestamp);
}
[IsReadOnlyAttribute]
internal class Prometheus.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
