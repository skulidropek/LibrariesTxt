[AttributeUsageAttribute("12")]
public class PropertyChanged.AddINotifyPropertyChangedInterfaceAttribute : Attribute {
}
[AttributeUsageAttribute("384")]
public class PropertyChanged.AlsoNotifyForAttribute : Attribute {
    public AlsoNotifyForAttribute(string property);
    public AlsoNotifyForAttribute(string property, String[] otherProperties);
}
[AttributeUsageAttribute("384")]
public class PropertyChanged.DependsOnAttribute : Attribute {
    public DependsOnAttribute(string dependency);
    public DependsOnAttribute(string dependency, String[] otherDependencies);
}
[AttributeUsageAttribute("388")]
public class PropertyChanged.DoNotCheckEqualityAttribute : Attribute {
}
[AttributeUsageAttribute("388")]
public class PropertyChanged.DoNotNotifyAttribute : Attribute {
}
[AttributeUsageAttribute("384")]
public class PropertyChanged.DoNotSetChangedAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class PropertyChanged.FilterTypeAttribute : Attribute {
    public FilterTypeAttribute(string filter);
}
[ObsoleteAttribute("This configuration option has been deprecated. The use of this attribute was to add INotifyPropertyChanged to a class with its associated event definition. After that all classes that implement INotifyPropertyChanged have their properties weaved, weather they have the ImplementPropertyChangedAttribute or not. This attribute was often incorrectly interpreted as an opt in approach to having properties weaved, which was never the intent nor how it ever operated. This attribute has been replaced by AddINotifyPropertyChangedInterfaceAttribute.", "True")]
public class PropertyChanged.ImplementPropertyChangedAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class PropertyChanged.OnChangedMethodAttribute : Attribute {
    public OnChangedMethodAttribute(string methodName);
}
[AttributeUsageAttribute("196")]
public class PropertyChanged.SuppressPropertyChangedWarningsAttribute : Attribute {
}
