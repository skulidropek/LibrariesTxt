[ExtensionAttribute]
public static class CecilExtensions : object {
    [ExtensionAttribute]
public static string GetName(PropertyDefinition propertyDefinition);
    [ExtensionAttribute]
public static bool IsCallToBaseMethod(Instruction instruction, MethodDefinition method);
    [ExtensionAttribute]
public static bool IsCallToMethod(Instruction instruction, MethodDefinition method);
    [ExtensionAttribute]
public static bool IsCallToMethod(Instruction instruction, string methodName, Int32& propertyNameIndex);
    [ExtensionAttribute]
public static bool IsCall(OpCode opCode);
    [ExtensionAttribute]
public static TypeReference GetGeneric(TypeReference reference);
    [ExtensionAttribute]
public static FieldReference GetGeneric(FieldDefinition definition);
    [ExtensionAttribute]
public static MethodReference GetGeneric(MethodReference reference);
    [ExtensionAttribute]
public static MethodReference MakeGeneric(MethodReference self, TypeReference[] arguments);
    [IteratorStateMachineAttribute("CecilExtensions/<GetAllCustomAttributes>d__9")]
[ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetAllCustomAttributes(TypeDefinition typeDefinition);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetAttributes(IEnumerable`1<CustomAttribute> attributes, string attributeName);
    [ExtensionAttribute]
public static CustomAttribute GetAttribute(IEnumerable`1<CustomAttribute> attributes, string attributeName);
    [ExtensionAttribute]
public static bool ContainsAttribute(IEnumerable`1<CustomAttribute> attributes, string attributeName);
    [IteratorStateMachineAttribute("CecilExtensions/<GetAllInterfaces>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<TypeReference> GetAllInterfaces(TypeDefinition type);
    [ExtensionAttribute]
public static bool GetBaseMethod(MethodDefinition method, MethodDefinition& baseMethod);
    [IteratorStateMachineAttribute("CecilExtensions/<GetSelfAndBaseMethods>d__15")]
[ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetSelfAndBaseMethods(MethodDefinition method);
    [ExtensionAttribute]
public static OpCode GetCallOpCode(TypeReference type);
    [ExtensionAttribute]
public static void AddConditionalBoxInstructions(ICollection`1<Instruction> instructions, TypeReference type);
}
public class DelegateHolderInjector : object {
    public TypeDefinition TargetTypeDefinition;
    public MethodReference OnPropertyChangedMethodReference;
    public ModuleWeaver ModuleWeaver;
    public MethodDefinition MethodDefinition;
    public FieldDefinition PropertyNameField;
    public FieldDefinition TargetField;
    public TypeDefinition TypeDefinition;
    public MethodDefinition ConstructorDefinition;
    public void InjectDelegateHolder();
    private void CreateFields(TypeDefinition targetTypeDefinition);
    private void CreateOnPropChanged(MethodReference onPropertyChangedMethodReference);
    private void CreateConstructor();
}
public class EqualityCheckWeaver : object {
    private PropertyData propertyData;
    private TypeDefinition typeDefinition;
    private ModuleWeaver typeEqualityFinder;
    private Collection`1<Instruction> instructions;
    public EqualityCheckWeaver(PropertyData propertyData, TypeDefinition typeDefinition, ModuleWeaver typeEqualityFinder);
    public void Execute();
    private void CheckAgainstField();
    private void CheckAgainstProperty();
    private void InjectEqualityCheck(Instruction targetInstruction, TypeReference targetType, TypeReference declaringType);
    private bool ShouldSkipEqualityCheck();
}
public class EventArgsCache : object {
    private ModuleWeaver moduleWeaver;
    private TypeDefinition cacheTypeDefinition;
    private Dictionary`2<string, FieldDefinition> properties;
    public EventArgsCache(ModuleWeaver moduleWeaver);
    public FieldReference GetEventArgsField(string propertyName);
    public void InjectType();
}
public class EventInvokerMethod : object {
    public MethodReference MethodReference;
    public InvokerTypes InvokerType;
    public bool IsVisibleFromChildren;
}
[ExtensionAttribute]
public static class HasEqualityChecker : object {
    public static bool AlreadyHasEquality(PropertyDefinition propertyDefinition, FieldReference backingFieldReference);
    [ExtensionAttribute]
private static bool IsEquality(Instruction instruction);
    [ExtensionAttribute]
private static bool IsNotNop(Instruction instruction);
}
public class IlGeneratedByDependencyReader : object {
    private TypeNode node;
    public IlGeneratedByDependencyReader(TypeNode node);
    public void Process();
    private static bool MethodComparer(MethodReference methodReference, MethodDefinition methodDefinition);
    private static bool CoreMethodComparer(MethodReference methodReference, MethodDefinition methodDefinition);
    private static bool FieldComparer(FieldReference fieldReference, FieldDefinition fieldDefinition);
    private void ProcessGet(PropertyDefinition property);
    private void ProcessInstructionForGet(PropertyDefinition property, Instruction instruction);
    public bool IsPropertyGetInstruction(Instruction instruction, PropertyDefinition& propertyDefinition);
    public bool IsFieldGetInstruction(Instruction instruction, PropertyDefinition& propertyDefinition);
}
[ExtensionAttribute]
public static class InstructionListExtensions : object {
    [ExtensionAttribute]
public static void Prepend(Collection`1<Instruction> collection, Instruction[] instructions);
    [ExtensionAttribute]
public static void Append(Collection`1<Instruction> collection, Instruction[] instructions);
    [ExtensionAttribute]
public static int Insert(Collection`1<Instruction> collection, int index, Instruction[] instructions);
}
public enum InvokerTypes : Enum {
    public int value__;
    public static InvokerTypes String;
    public static InvokerTypes BeforeAfter;
    public static InvokerTypes BeforeAfterGeneric;
    public static InvokerTypes PropertyChangedArg;
    public static InvokerTypes SenderPropertyChangedArg;
}
public class MemberMapping : object {
    public PropertyDefinition PropertyDefinition;
    public FieldDefinition FieldDefinition;
}
public class ModuleWeaver : BaseModuleWeaver {
    private HashSet`1<string> typeLevelAttributeNames;
    private HashSet`1<string> assemblyLevelAttributeNames;
    private static string AssemblyVersion;
    private static string AssemblyName;
    public bool CheckForEquality;
    public bool CheckForEqualityUsingBaseEquals;
    public bool EnableIsChangedProperty;
    public bool InjectOnPropertyNameChanged;
    public bool SuppressOnPropertyNameChangedWarning;
    public bool SuppressWarnings;
    public bool TriggerDependentProperties;
    public bool UseStaticEqualsFromBase;
    public EventArgsCache EventArgsCache;
    public List`1<string> EventInvokerNames;
    [CompilerGeneratedAttribute]
private List`1<string> <NamespaceFilters>k__BackingField;
    public bool FoundInterceptor;
    public MethodDefinition InterceptMethod;
    public InvokerTypes InterceptorType;
    private string isChangedPropertyName;
    private static string injectedEventInvokerName;
    public MethodReference PropertyChangedEventHandlerInvokeReference;
    public TypeReference PropertyChangedEventArgsReference;
    public MethodReference PropertyChangedEventConstructorReference;
    public MethodReference ActionConstructorReference;
    public MethodReference ObjectConstructor;
    public MethodReference ObjectEqualsMethod;
    public TypeReference EqualityComparerTypeReference;
    public TypeReference ActionTypeReference;
    public MethodDefinition NullableEqualsMethod;
    public TypeReference PropChangedInterfaceReference;
    public TypeReference PropChangedHandlerReference;
    public MethodReference DelegateCombineMethodRef;
    public MethodReference DelegateRemoveMethodRef;
    public GenericInstanceMethod InterlockedCompareExchangeForPropChangedHandler;
    public Lazy`1<MethodReference> Trigger;
    public MethodReference StringEquals;
    public MethodReference DebuggerNonUserCodeAttributeConstructor;
    public MethodReference GeneratedCodeAttributeConstructor;
    private Dictionary`2<string, bool> typesImplementingINotify;
    private Dictionary`2<string, MethodReference> methodCache;
    public int OrdinalStringComparison;
    private List`1<TypeDefinition> allClasses;
    public List`1<TypeNode> Nodes;
    public List`1<TypeNode> NotifyNodes;
    private Dictionary`2<string, TypeDefinition> definitions;
    public List`1<string> NamespaceFilters { get; private set; }
    public bool ShouldCleanReference { get; }
    private static ModuleWeaver();
    private void FindAllProperties(List`1<TypeNode> notifyNodes, List`1<PropertyDefinition> list);
    public void FindAllProperties();
    [IteratorStateMachineAttribute("ModuleWeaver/<GetAlreadyNotifies>d__2")]
public IEnumerable`1<string> GetAlreadyNotifies(PropertyDefinition propertyDefinition);
    private void ProcessAssembly();
    private void ProcessType(TypeDefinition type);
    private static void RemoveAttributes(ICustomAttributeProvider member, IEnumerable`1<string> attributeNames);
    public void CleanAttributes();
    private void ProcessNotifyNodes(List`1<TypeNode> notifyNodes);
    public void CleanCodeGenedTypes();
    public void MarkAsGeneratedCode(Collection`1<CustomAttribute> customAttributes);
    private void AddDebuggerNonUserCodeAttribute(Collection`1<CustomAttribute> customAttributes);
    private void AddGeneratedCodeAttribute(Collection`1<CustomAttribute> customAttributes);
    public void ResolveCheckForEqualityConfig();
    public void ResolveCheckForEqualityUsingBaseEqualsConfig();
    public void ResolveEnableIsChangedPropertyConfig();
    public void ResolveOnPropertyNameChangedConfig();
    public void ResolveSuppressOnPropertyNameChangedWarningConfig();
    public void ResolveSuppressWarningsConfig();
    public void ResolveTriggerDependentPropertiesConfig();
    public void ResolveUseStaticEqualsFromBaseConfig();
    private void ProcessDependsOnAttributes(List`1<TypeNode> notifyNodes);
    public void ProcessDependsOnAttributes(TypeNode node);
    public void ReadDependsOnData(PropertyDefinition property, TypeNode node);
    private void AddIfPropertyExists(PropertyDefinition targetProperty, string isGeneratedUsingPropertyName, TypeNode node);
    public void ProcessDependsOnAttributes();
    private void Process(List`1<TypeNode> notifyNodes);
    public void CleanDoNotNotifyTypes();
    public void InitEventArgsCache();
    public void InjectEventArgsCache();
    public void ResolveEventInvokerName();
    [CompilerGeneratedAttribute]
public List`1<string> get_NamespaceFilters();
    [CompilerGeneratedAttribute]
private void set_NamespaceFilters(List`1<string> value);
    public void ProcessFilterTypeAttributes();
    public void ReadFilterTypeData(ModuleDefinition moduleDefinition);
    public void DetectIlGeneratedByDependency();
    private void DetectIlGeneratedByDependency(List`1<TypeNode> notifyNodes);
    private void SearchForMethod(TypeDefinition typeDefinition);
    public bool IsSingleStringInterceptionMethod(MethodDefinition method);
    public bool IsBeforeAfterInterceptionMethod(MethodDefinition method);
    public void FindInterceptor();
    public void InjectINotifyPropertyChangedInterface(TypeDefinition targetType);
    private void WeaveEvent(TypeDefinition type);
    private MethodDefinition CreateEventMethod(string methodName, MethodReference delegateMethodReference, FieldReference propertyChangedField);
    private void ProcessChildNode(TypeNode node, MethodReference changedInvokerMethod);
    public MethodReference RecursiveFindMethod(TypeDefinition typeDefinition);
    private MethodReference FindEventInvokerMethodRef(TypeDefinition type);
    private bool FindIsChangedEventInvokerMethodDefinition(TypeDefinition type, MethodDefinition& methodDefinition);
    public void FindIsChangedMethod();
    private void FindMappings(List`1<TypeNode> notifyNodes);
    [IteratorStateMachineAttribute("ModuleWeaver/<GetMappings>d__69")]
public static IEnumerable`1<MemberMapping> GetMappings(TypeDefinition typeDefinition);
    private static FieldDefinition TryGetField(TypeDefinition typeDefinition, PropertyDefinition property);
    private static FieldDefinition GetSingleField(PropertyDefinition property);
    private static FieldDefinition GetSingleField(PropertyDefinition property, Code code, MethodDefinition methodDefinition);
    public void FindMappings();
    private void ProcessChildNode(TypeNode node, EventInvokerMethod eventInvoker);
    public EventInvokerMethod RecursiveFindEventInvoker(TypeDefinition typeDefinition);
    private static bool IsVisibleFromChildren(MethodDefinition method);
    private EventInvokerMethod FindEventInvokerMethod(TypeDefinition type);
    private MethodDefinition FindEventInvokerMethodDefinition(TypeDefinition type);
    private MethodReference FindExplicitImplementation(TypeDefinition type);
    private static int GetInvokerPriority(MethodReference method);
    private static InvokerTypes ClassifyInvokerMethod(MethodReference method);
    private static bool IsEventInvokerMethod(MethodReference method);
    public static bool IsSenderPropertyChangedArgMethod(MethodReference method);
    public static bool IsPropertyChangedArgMethod(MethodReference method);
    public static bool IsSingleStringMethod(MethodReference method);
    public static bool IsBeforeAfterMethod(MethodReference method);
    public static bool IsBeforeAfterGenericMethod(MethodReference method);
    public void FindMethodsForNodes();
    public MethodReference GetMethodReference(Stack`1<TypeDefinition> typeDefinitions, MethodDefinition methodDefinition);
    public static MethodReference MakeGeneric(TypeReference declaringType, MethodReference self);
    public EventInvokerMethod AddOnPropertyChangedMethod(TypeDefinition targetType);
    private MethodDefinition GetMethodDefinition(TypeDefinition targetType, InvokerTypes& invokerType);
    public FieldDefinition GetEventHandlerField(TypeDefinition targetType);
    private MethodDefinition InjectMethod(TypeDefinition targetType, InvokerTypes& invokerType);
    private MethodDefinition InjectFsharp(TypeDefinition targetType, FieldDefinition fsharpEvent);
    private MethodDefinition InjectNormal(TypeDefinition targetType, FieldReference propertyChangedField);
    private MethodDefinition InjectEventArgsMethod(TypeDefinition targetType, FieldReference propertyChangedField);
    private static MethodAttributes GetMethodAttributes(TypeDefinition targetType);
    private static bool IsPropertyChangedEventHandler(TypeReference type);
    private static bool IsFsharpEventHandler(TypeReference type);
    private MethodDefinition InjectInterceptedMethod(TypeDefinition targetType, MethodDefinition innerOnPropertyChanged);
    public virtual void Execute();
    public virtual bool get_ShouldCleanReference();
    [IteratorStateMachineAttribute("ModuleWeaver/<GetAssembliesForScanning>d__124")]
public virtual IEnumerable`1<string> GetAssembliesForScanning();
    public void FindCoreReferences();
    public bool HierarchyImplementsINotify(TypeReference typeReference);
    private static bool HasGeneratedPropertyChangedEvent(TypeDefinition typeDefinition);
    public NotifyPropertyData ReadAlsoNotifyForData(PropertyDefinition property, List`1<PropertyDefinition> allProperties);
    [IteratorStateMachineAttribute("ModuleWeaver/<GetPropertyNamesToNotify>d__130")]
private IEnumerable`1<PropertyDefinition> GetPropertyNamesToNotify(CustomAttribute notifyAttribute, PropertyDefinition property, List`1<PropertyDefinition> allProperties);
    private static PropertyDefinition GetPropertyDefinition(PropertyDefinition property, List`1<PropertyDefinition> allProperties, string argument);
    public void ProcessOnChangedMethods();
    private void ProcessOnChangedMethods(List`1<TypeNode> notifyNodes);
    private ICollection`1<OnChangedMethod> GetOnChangedMethods(TypeNode notifyNode);
    private OnChangedMethod FindOnChangedMethod(TypeNode notifyNode, string methodName);
    private OnChangedMethod CreateOnChangedMethod(TypeNode notifyNode, MethodDefinition methodDefinition, bool isDefaultMethod);
    private static OnChangedTypes GetBeforeAfterOnChangedMethodType(MethodDefinition method, String& argumentTypeFullName);
    private void ValidateOnChangedMethod(TypeNode notifyNode, OnChangedMethod onChangedMethod);
    private string GetMethodWarning(TypeNode notifyNode, OnChangedMethod onChangedMethod);
    private PropertyDefinition GetProperty(MethodReference methodRef, string propertyName);
    private void WalkPropertyData(List`1<TypeNode> notifyNodes);
    private void GetPropertyData(PropertyDefinition propertyDefinition, TypeNode node);
    private List`1<PropertyDefinition> GetFullDependencies(PropertyDefinition propertyDefinition, IEnumerable`1<PropertyDefinition> dependenciesForProperty, TypeNode node);
    private void ComputeDependenciesRecursively(PropertyDefinition propertyDefinition, HashSet`1<PropertyDefinition> fullDependencies, TypeNode node);
    public void WalkPropertyData();
    private void CheckForStackOverflow(IEnumerable`1<TypeNode> notifyNodes);
    public bool CheckIfGetterCallsSetter(PropertyDefinition propertyDefinition);
    public bool CheckIfGetterCallsVirtualBaseSetter(PropertyDefinition propertyDefinition);
    public void CheckForStackOverflow();
    public void FindComparisonMethods();
    private void FindComparisonMethods(TypeNode node);
    private MethodReference FindTypeEquality(PropertyData propertyData);
    private MethodReference GetEquality(TypeReference typeDefinition);
    private MethodReference GetStaticEquality(TypeReference typeReference);
    private TypeReference GetBaseType(TypeReference typeReference);
    public static MethodReference FindNamedMethod(TypeReference typeReference);
    private static MethodReference FindNamedMethod(TypeDefinition typeDefinition, string methodName, TypeReference parameterType);
    private static bool MatchParameter(ParameterDefinition parameter, TypeReference typeMatch);
    public void BuildTypeNodes();
    private void PopulateINotifyNodes(List`1<TypeNode> typeNodes);
    private void PopulateInjectedINotifyNodes(List`1<TypeNode> typeNodes);
    private static bool HasNotifyPropertyChangedAttribute(TypeDefinition typeDefinition);
    private TypeNode AddClass(TypeDefinition typeDefinition);
    private TypeNode FindClassNode(TypeDefinition type, IEnumerable`1<TypeNode> typeNode);
    public void ProcessTypes();
    private void ProcessTypes(List`1<TypeNode> notifyNodes);
    public TypeDefinition Resolve(TypeReference reference);
    private static TypeDefinition InnerResolve(TypeReference reference);
    private void CheckForWarnings(List`1<TypeNode> notifyNodes);
    public string CheckForWarning(PropertyData propertyData, InvokerTypes invokerType);
    public void CheckForWarnings();
    public void EmitWarning(string message);
    public void EmitConditionalWarning(ICustomAttributeProvider member, string message);
    [CompilerGeneratedAttribute]
private bool <FindIsChangedEventInvokerMethodDefinition>b__66_0(PropertyDefinition x);
    [CompilerGeneratedAttribute]
private bool <FindEventInvokerMethodDefinition>b__78_0(MethodDefinition x);
    [CompilerGeneratedAttribute]
private bool <FindEventInvokerMethodDefinition>b__78_1(MethodDefinition x);
    [CompilerGeneratedAttribute]
private IEnumerable`1<MethodDefinition> <FindExplicitImplementation>b__79_2(TypeDefinition i);
    [CompilerGeneratedAttribute]
private bool <BuildTypeNodes>b__164_0(TypeDefinition t);
}
public class NotifyPropertyData : object {
    public List`1<PropertyDefinition> AlsoNotifyFor;
}
public class OnChangedMethod : object {
    public MethodReference MethodReference;
    public MethodDefinition MethodDefinition;
    public OnChangedTypes OnChangedType;
    public string ArgumentTypeFullName;
    public bool IsDefaultMethod;
    public List`1<PropertyDefinition> Properties;
}
public enum OnChangedTypes : Enum {
    public int value__;
    public static OnChangedTypes None;
    public static OnChangedTypes NoArg;
    public static OnChangedTypes BeforeAfter;
    public static OnChangedTypes BeforeAfterTyped;
}
[ExtensionAttribute]
public static class PropertyChangedAddMethodFinder : object {
    [IteratorStateMachineAttribute("PropertyChangedAddMethodFinder/<GetPropertyChangedAddMethods>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetPropertyChangedAddMethods(TypeDefinition targetType);
}
public class PropertyData : object {
    public TypeNode ParentType;
    public FieldReference BackingFieldReference;
    public List`1<PropertyDefinition> AlsoNotifyFor;
    public PropertyDefinition PropertyDefinition;
    public MethodReference EqualsMethod;
    public List`1<string> AlreadyNotifies;
}
public class PropertyDependency : object {
    public PropertyDefinition ShouldAlsoNotifyFor;
    public PropertyDefinition WhenPropertyIsSet;
}
public class PropertyWeaver : object {
    private ModuleWeaver moduleWeaver;
    private PropertyData propertyData;
    private TypeNode typeNode;
    private TypeSystem typeSystem;
    private MethodBody setMethodBody;
    private Collection`1<Instruction> instructions;
    public PropertyWeaver(ModuleWeaver moduleWeaver, PropertyData propertyData, TypeNode typeNode, TypeSystem typeSystem);
    public void Execute();
    private List`1<int> GetIndexes();
    private void InjectAtIndex(int index);
    private List`1<OnChangedMethod> GetMethodsForProperty(TypeNode typeNode, PropertyDefinition property);
    [IteratorStateMachineAttribute("PropertyWeaver/<FindSetFieldInstructions>d__11")]
private IEnumerable`1<int> FindSetFieldInstructions();
    private int AddIsChangedSetterCall(int index);
    private int AddEventInvokeCall(int index, List`1<OnChangedMethod> onChangedMethods, PropertyDefinition property);
    private int AddOnChangedMethodCalls(int index, List`1<OnChangedMethod> onChangedMethods, PropertyDefinition propertyDefinition);
    private bool ContainsCallToMethod(string onChangingMethodName);
    private int AddSimpleInvokerCall(int index, PropertyDefinition property);
    private int AddPropertyChangedArgInvokerCall(int index, PropertyDefinition property);
    private int AddSenderPropertyChangedArgInvokerCall(int index, PropertyDefinition property);
    private int AddBeforeAfterGenericInvokerCall(int index, PropertyDefinition property);
    private int AddBeforeAfterInvokerCall(int index, PropertyDefinition property);
    private int AddSimpleOnChangedCall(int index, MethodReference methodReference);
    private int AddBeforeAfterOnChangedCall(int index, PropertyDefinition property, MethodReference methodReference, bool useTypedParameters);
    [IteratorStateMachineAttribute("PropertyWeaver/<BuildVariableAssignmentInstructions>d__23")]
private IEnumerable`1<Instruction> BuildVariableAssignmentInstructions(PropertyDefinition property, VariableDefinition variable);
    private int AddBeforeVariableAssignment(int index, PropertyDefinition property, VariableDefinition variable);
    private int InsertVariableAssignmentFromCurrentValue(int index, PropertyDefinition property, VariableDefinition variable);
    public IEnumerable`1<Instruction> CallEventInvoker(PropertyDefinition propertyDefinition);
    public Instruction CreateIsChangedInvoker();
    public Instruction CreateCall(MethodReference methodReference);
}
public class RecursiveIlFinder : object {
    private TypeDefinition typeDefinition;
    private List`1<MethodDefinition> processedMethods;
    public List`1<Instruction> Instructions;
    public RecursiveIlFinder(TypeDefinition typeDefinition);
    public void Execute(MethodDefinition getMethod);
    private static bool IsCall(OpCode opCode);
}
[ExtensionAttribute]
public static class ReturnFixer : object {
    [ExtensionAttribute]
public static void MakeLastStatementReturn(MethodBody method);
    private static Instruction GetLast(Collection`1<Instruction> instructions);
}
[ExtensionAttribute]
public static class SupportsCeqChecker : object {
    private static List`1<string> ceqStructNames;
    private static SupportsCeqChecker();
    [ExtensionAttribute]
public static bool SupportsCeq(TypeReference typeReference);
}
public class TypeNode : object {
    public TypeDefinition TypeDefinition;
    public List`1<TypeNode> Nodes;
    public List`1<PropertyDependency> PropertyDependencies;
    public List`1<MemberMapping> Mappings;
    public EventInvokerMethod EventInvoker;
    public MethodReference IsChangedInvoker;
    public List`1<PropertyData> PropertyDatas;
    public List`1<PropertyDefinition> AllProperties;
    public ICollection`1<OnChangedMethod> OnChangedMethods;
    public IEnumerable`1<PropertyDefinition> DeclaredProperties { get; }
    public IEnumerable`1<PropertyDefinition> get_DeclaredProperties();
    [CompilerGeneratedAttribute]
private bool <get_DeclaredProperties>b__11_0(PropertyDefinition prop);
}
