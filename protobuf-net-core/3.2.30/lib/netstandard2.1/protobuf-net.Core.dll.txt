[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class ProtoBuf.BclHelpers : object {
    internal static DateTime[] EpochOrigin;
    private static int MAX_DECIMAL_BYTES;
    private static BclHelpers();
    public static object GetUninitializedObject(Type type);
    public static void WriteTimeSpan(TimeSpan timeSpan, ProtoWriter dest);
    public static void WriteTimeSpan(State& state, TimeSpan value);
    private static void WriteTimeSpanImpl(State& state, TimeSpan timeSpan, DateTimeKind kind);
    public static TimeSpan ReadTimeSpan(ProtoReader source);
    public static TimeSpan ReadTimeSpan(State& state);
    public static TimeSpan ReadDuration(ProtoReader source);
    public static TimeSpan ReadDuration(State& state);
    public static void WriteDuration(TimeSpan value, ProtoWriter dest);
    public static void WriteDuration(State& state, TimeSpan value);
    public static DateTime ReadTimestamp(ProtoReader source);
    public static DateTime ReadTimestamp(State& state);
    public static void WriteTimestamp(DateTime value, ProtoWriter dest);
    public static void WriteTimestamp(State& state, DateTime value);
    public static DateTime ReadDateTime(ProtoReader source);
    public static DateTime ReadDateTime(State& state);
    public static void WriteDateTime(DateTime value, ProtoWriter dest);
    public static void WriteDateTime(State& state, DateTime value);
    public static void WriteDateTimeWithKind(DateTime value, ProtoWriter dest);
    public static void WriteDateTimeWithKind(State& state, DateTime value);
    private static void WriteDateTimeImpl(State& state, DateTime value, bool includeKind);
    public static decimal ReadDecimal(ProtoReader reader);
    public static decimal ReadDecimal(State& state);
    public static decimal ReadDecimalString(State& state);
    public static void WriteDecimal(decimal value, ProtoWriter writer);
    public static void WriteDecimal(State& state, decimal value);
    public static void WriteDecimalString(State& state, decimal value);
    public static void WriteGuid(Guid value, ProtoWriter dest);
    public static void WriteGuid(State& state, Guid value);
    public static void WriteGuidBytes(State& state, Guid value);
    public static void WriteGuidString(State& state, Guid value);
    public static Guid ReadGuid(ProtoReader source);
    public static Guid ReadGuid(State& state);
    public static Guid ReadGuidBytes(State& state);
    public static Guid ReadGuidString(State& state);
}
public class ProtoBuf.BufferExtension : object {
    private ArraySegment`1<byte> _buffer;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private BufferExtension <Tail>k__BackingField;
    internal Type Type { get; private set; }
    internal BufferExtension Tail { get; private set; }
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
internal BufferExtension get_Tail();
    [CompilerGeneratedAttribute]
private void set_Tail(BufferExtension value);
    internal void SetTail(Type type, BufferExtension tail);
    private sealed virtual override void ProtoBuf.IExtensionResettable.Reset();
    private sealed virtual override int ProtoBuf.IExtension.GetLength();
    private sealed virtual override Stream ProtoBuf.IExtension.BeginAppend();
    private sealed virtual override void ProtoBuf.IExtension.EndAppend(Stream stream, bool commit);
    private sealed virtual override Stream ProtoBuf.IExtension.BeginQuery();
    private sealed virtual override void ProtoBuf.IExtension.EndQuery(Stream stream);
}
internal static class ProtoBuf.BufferPool : object {
    private static ArrayPool`1<byte> _pool;
    internal static int BUFFER_LENGTH;
    private static int MaxByteArraySize;
    private static BufferPool();
    internal static Byte[] GetBuffer();
    internal static Byte[] GetBuffer(int minSize);
    internal static Byte[] GetCachedBuffer(int minSize);
    internal static void ResizeAndFlushLeft(Byte[]& buffer, int toFitAtLeastBytes, int copyFromIndex, int copyBytes);
    internal static void ReleaseBufferToPool(Byte[]& buffer);
}
public enum ProtoBuf.CompatibilityLevel : Enum {
    public int value__;
    public static CompatibilityLevel NotSpecified;
    public static CompatibilityLevel Level200;
    public static CompatibilityLevel Level240;
    public static CompatibilityLevel Level300;
}
[ImmutableObjectAttribute("True")]
[AttributeUsageAttribute("1423")]
public class ProtoBuf.CompatibilityLevelAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CompatibilityLevel <Level>k__BackingField;
    public CompatibilityLevel Level { get; }
    public CompatibilityLevelAttribute(CompatibilityLevel level);
    [CompilerGeneratedAttribute]
public CompatibilityLevel get_Level();
    internal static void AssertValid(CompatibilityLevel compatibilityLevel);
    [CompilerGeneratedAttribute]
internal static void <AssertValid>g__Throw|4_0(CompatibilityLevel compatibilityLevel);
}
public enum ProtoBuf.DataFormat : Enum {
    public int value__;
    public static DataFormat Default;
    public static DataFormat ZigZag;
    public static DataFormat TwosComplement;
    public static DataFormat FixedSize;
    public static DataFormat Group;
    [ObsoleteAttribute("This option is replaced with CompatibilityLevel, and is only used for Level200, where it changes this field to Level240", "False")]
public static DataFormat WellKnown;
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion128 : ValueType {
    private int _discriminator;
    public long Int64;
    public ulong UInt64;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public double Double;
    public DateTime DateTime;
    public TimeSpan TimeSpan;
    public Guid Guid;
    private long _lo;
    private long _hi;
    public int Discriminator { get; }
    private DiscriminatedUnion128(int discriminator);
    public DiscriminatedUnion128(int discriminator, long value);
    public DiscriminatedUnion128(int discriminator, int value);
    public DiscriminatedUnion128(int discriminator, ulong value);
    public DiscriminatedUnion128(int discriminator, UInt32 value);
    public DiscriminatedUnion128(int discriminator, float value);
    public DiscriminatedUnion128(int discriminator, double value);
    public DiscriminatedUnion128(int discriminator, bool value);
    public DiscriminatedUnion128(int discriminator, Nullable`1<DateTime> value);
    public DiscriminatedUnion128(int discriminator, Nullable`1<TimeSpan> value);
    public DiscriminatedUnion128(int discriminator, Nullable`1<Guid> value);
    private DiscriminatedUnion128(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion128& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion128Object : ValueType {
    private int _discriminator;
    public long Int64;
    public ulong UInt64;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public double Double;
    public DateTime DateTime;
    public TimeSpan TimeSpan;
    public Guid Guid;
    public object Object;
    private long _lo;
    private long _hi;
    public int Discriminator { get; }
    private DiscriminatedUnion128Object(int discriminator);
    public DiscriminatedUnion128Object(int discriminator, long value);
    public DiscriminatedUnion128Object(int discriminator, int value);
    public DiscriminatedUnion128Object(int discriminator, ulong value);
    public DiscriminatedUnion128Object(int discriminator, UInt32 value);
    public DiscriminatedUnion128Object(int discriminator, float value);
    public DiscriminatedUnion128Object(int discriminator, double value);
    public DiscriminatedUnion128Object(int discriminator, bool value);
    public DiscriminatedUnion128Object(int discriminator, object value);
    public DiscriminatedUnion128Object(int discriminator, Nullable`1<DateTime> value);
    public DiscriminatedUnion128Object(int discriminator, Nullable`1<TimeSpan> value);
    public DiscriminatedUnion128Object(int discriminator, Nullable`1<Guid> value);
    private DiscriminatedUnion128Object(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion128Object& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion32 : ValueType {
    private int _discriminator;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public int Discriminator { get; }
    private DiscriminatedUnion32(int discriminator);
    public DiscriminatedUnion32(int discriminator, int value);
    public DiscriminatedUnion32(int discriminator, UInt32 value);
    public DiscriminatedUnion32(int discriminator, float value);
    public DiscriminatedUnion32(int discriminator, bool value);
    private DiscriminatedUnion32(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion32& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion32Object : ValueType {
    private int _discriminator;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public object Object;
    public int Discriminator { get; }
    private DiscriminatedUnion32Object(int discriminator);
    public DiscriminatedUnion32Object(int discriminator, int value);
    public DiscriminatedUnion32Object(int discriminator, UInt32 value);
    public DiscriminatedUnion32Object(int discriminator, float value);
    public DiscriminatedUnion32Object(int discriminator, bool value);
    public DiscriminatedUnion32Object(int discriminator, object value);
    private DiscriminatedUnion32Object(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion32Object& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion64 : ValueType {
    private int _discriminator;
    public long Int64;
    public ulong UInt64;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public double Double;
    public DateTime DateTime;
    public TimeSpan TimeSpan;
    public int Discriminator { get; }
    private DiscriminatedUnion64(int discriminator);
    public DiscriminatedUnion64(int discriminator, long value);
    public DiscriminatedUnion64(int discriminator, int value);
    public DiscriminatedUnion64(int discriminator, ulong value);
    public DiscriminatedUnion64(int discriminator, UInt32 value);
    public DiscriminatedUnion64(int discriminator, float value);
    public DiscriminatedUnion64(int discriminator, double value);
    public DiscriminatedUnion64(int discriminator, bool value);
    public DiscriminatedUnion64(int discriminator, Nullable`1<DateTime> value);
    public DiscriminatedUnion64(int discriminator, Nullable`1<TimeSpan> value);
    private DiscriminatedUnion64(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion64& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnion64Object : ValueType {
    private int _discriminator;
    public long Int64;
    public ulong UInt64;
    public int Int32;
    public UInt32 UInt32;
    public bool Boolean;
    public float Single;
    public double Double;
    public DateTime DateTime;
    public TimeSpan TimeSpan;
    public object Object;
    public int Discriminator { get; }
    private DiscriminatedUnion64Object(int discriminator);
    public DiscriminatedUnion64Object(int discriminator, long value);
    public DiscriminatedUnion64Object(int discriminator, int value);
    public DiscriminatedUnion64Object(int discriminator, ulong value);
    public DiscriminatedUnion64Object(int discriminator, UInt32 value);
    public DiscriminatedUnion64Object(int discriminator, float value);
    public DiscriminatedUnion64Object(int discriminator, double value);
    public DiscriminatedUnion64Object(int discriminator, bool value);
    public DiscriminatedUnion64Object(int discriminator, object value);
    public DiscriminatedUnion64Object(int discriminator, Nullable`1<DateTime> value);
    public DiscriminatedUnion64Object(int discriminator, Nullable`1<TimeSpan> value);
    private DiscriminatedUnion64Object(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnion64Object& value, int discriminator);
    public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class ProtoBuf.DiscriminatedUnionObject : ValueType {
    public object Object;
    [CompilerGeneratedAttribute]
private int <Discriminator>k__BackingField;
    public int Discriminator { get; }
    public DiscriminatedUnionObject(int discriminator, object value);
    private DiscriminatedUnionObject(SerializationInfo info, StreamingContext context);
    public bool Is(int discriminator);
    public static void Reset(DiscriminatedUnionObject& value, int discriminator);
    [CompilerGeneratedAttribute]
public int get_Discriminator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class ProtoBuf.Extensible : object {
    private IExtension extensionObject;
    private sealed virtual override IExtension ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    private sealed virtual override IExtension ProtoBuf.ITypedExtensible.GetExtensionObject(Type type, bool createIfMissing);
    [ObsoleteAttribute("This API is considered, and may no longer be used in all scenarios (in particular when inheritance is involved); it is not recommended to rely on this API")]
protected virtual IExtension GetExtensionObject(bool createIfMissing);
    public static IExtension GetExtensionObject(IExtension& extensionObject, Type type, bool createIfMissing);
    public static IExtension GetExtensionObject(IExtension& extensionObject, bool createIfMissing);
    public static void AppendValue(IExtensible instance, int tag, TValue value);
    public static void AppendValue(IExtensible instance, int tag, DataFormat format, TValue value);
    public static void AppendValue(TypeModel model, IExtensible instance, int tag, TValue value, DataFormat format);
    public static TValue GetValue(IExtensible instance, int tag);
    public static TValue GetValue(IExtensible instance, int tag, DataFormat format);
    public static TValue GetValue(TypeModel model, IExtensible instance, int tag, DataFormat format);
    public static bool TryGetValue(IExtensible instance, int tag, TValue& value);
    public static bool TryGetValue(IExtensible instance, int tag, DataFormat format, TValue& value);
    public static bool TryGetValue(IExtensible instance, int tag, DataFormat format, bool allowDefinedTag, TValue& value);
    public static bool TryGetValue(TypeModel model, IExtensible instance, int tag, TValue& value, DataFormat format, bool allowDefinedTag);
    public static IEnumerable`1<TValue> GetValues(IExtensible instance, int tag);
    public static IEnumerable`1<TValue> GetValues(IExtensible instance, int tag, DataFormat format);
    public static IEnumerable`1<TValue> GetValues(TypeModel model, IExtensible instance, int tag, DataFormat format);
    public static bool TryGetValue(TypeModel model, Type type, IExtensible instance, int tag, DataFormat format, bool allowDefinedTag, Object& value);
    public static IEnumerable GetValues(TypeModel model, Type type, IExtensible instance, int tag, DataFormat format);
    public static void AppendValue(TypeModel model, IExtensible instance, int tag, DataFormat format, object value);
}
internal static class ProtoBuf.ExtensibleUtil : object {
    [IteratorStateMachineAttribute("ProtoBuf.ExtensibleUtil/<GetExtendedValues>d__0`1")]
internal static IEnumerable`1<TValue> GetExtendedValues(TypeModel model, IExtensible instance, int tag, DataFormat format, bool singleton, bool allowDefinedTag);
    internal static IEnumerable GetExtendedValues(TypeModel model, Type type, IExtensible instance, int tag, DataFormat format, bool singleton, bool allowDefinedTag);
    [IteratorStateMachineAttribute("ProtoBuf.ExtensibleUtil/<GetExtendedValues>d__2")]
internal static IEnumerable GetExtendedValues(TypeModel model, Type type, IExtension extn, int tag, DataFormat format, bool singleton);
    internal static void AppendExtendValue(TypeModel model, IExtensible instance, int tag, DataFormat format, object value);
    internal static void AppendExtendValue(TypeModel model, IExtension extn, int tag, DataFormat format, object value);
}
internal static class ProtoBuf.Helpers : object {
    internal static MethodInfo GetInstanceMethod(Type declaringType, string name);
    internal static MethodInfo GetStaticMethod(Type declaringType, string name);
    internal static MethodInfo GetInstanceMethod(Type declaringType, string name, Type[] types);
    internal static bool IsSubclassOf(Type type, Type baseClass);
    public static ProtoTypeCode GetTypeCode(Type type);
    internal static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic, bool allowInternal);
    internal static MethodInfo GetSetMethod(PropertyInfo property, bool nonPublic, bool allowInternal);
    internal static ConstructorInfo GetConstructor(Type type, Type[] parameterTypes, bool nonPublic);
    internal static ConstructorInfo[] GetConstructors(Type type, bool nonPublic);
    internal static void GetBuffer(MemoryStream stream, ArraySegment`1& segment);
    internal static PropertyInfo GetProperty(Type type, string name, bool nonPublic);
    internal static MemberInfo[] GetInstanceFieldsAndProperties(Type type, bool publicOnly);
    internal static Type GetMemberType(MemberInfo member);
}
public interface ProtoBuf.IExtensible {
    public abstract virtual IExtension GetExtensionObject(bool createIfMissing);
}
public interface ProtoBuf.IExtension {
    public abstract virtual Stream BeginAppend();
    public abstract virtual void EndAppend(Stream stream, bool commit);
    public abstract virtual Stream BeginQuery();
    public abstract virtual void EndQuery(Stream stream);
    public abstract virtual int GetLength();
}
public interface ProtoBuf.IExtensionResettable {
    public abstract virtual void Reset();
}
public interface ProtoBuf.IMeasuredProtoOutput`1 {
    public abstract virtual MeasureState`1<T> Measure(T value, object userState);
    public abstract virtual void Serialize(MeasureState`1<T> measured, TOutput destination);
}
public enum ProtoBuf.ImplicitFields : Enum {
    public int value__;
    public static ImplicitFields None;
    public static ImplicitFields AllPublic;
    public static ImplicitFields AllFields;
}
internal class ProtoBuf.Internal.DynamicAccess : object {
    internal static DynamicallyAccessedMemberTypes ContractType;
    internal static DynamicallyAccessedMemberTypes Serializer;
}
internal abstract class ProtoBuf.Internal.DynamicStub : object {
    private static Hashtable s_byType;
    private static DynamicStub();
    internal static bool TryDeserializeRoot(Type type, TypeModel model, State& state, Object& value, bool autoCreate);
    internal static bool TrySerializeRoot(Type type, TypeModel model, State& state, object value);
    internal static bool TryDeserialize(ObjectScope scope, Type type, TypeModel model, State& state, Object& value);
    internal static bool TrySerializeAny(int fieldNumber, SerializerFeatures features, Type type, TypeModel model, State& state, object value);
    internal static bool TryDeepClone(Type type, TypeModel model, Object& value);
    internal static bool IsKnownType(Type type, TypeModel model, CompatibilityLevel ambient);
    internal static bool CanSerialize(Type type, TypeModel model, SerializerFeatures& features);
    private static DynamicStub Get(Type type);
    private static DynamicStub SlowGet(Type type);
    protected abstract virtual bool TryDeserializeRoot(TypeModel model, State& state, Object& value, bool autoCreate);
    protected abstract virtual bool TryDeserialize(ObjectScope scope, TypeModel model, State& state, Object& value);
    protected abstract virtual bool TrySerializeRoot(TypeModel model, State& state, object value);
    protected abstract virtual bool TrySerializeAny(int fieldNumber, SerializerFeatures features, TypeModel model, State& state, object value);
    protected abstract virtual bool TryDeepClone(TypeModel model, Object& value);
    protected abstract virtual bool IsKnownType(TypeModel model, CompatibilityLevel ambient);
    protected abstract virtual bool CanSerialize(TypeModel model, SerializerFeatures& features);
    internal static bool IsTypeEquivalent(Type expected, Type actual);
    internal static Type GetEffectiveType(Type type);
    protected abstract virtual Type GetEffectiveType();
    [CompilerGeneratedAttribute]
internal static DynamicStub <SlowGet>g__TryCreateConcrete|9_0(Type typeDef, Type[] args);
    [CompilerGeneratedAttribute]
internal static Type <SlowGet>g__ResolveProxies|9_1(Type type);
}
internal class ProtoBuf.Internal.FixedMemoryManager : MemoryManager`1<byte> {
    private Byte* _pointer;
    private int _length;
    internal Memory`1<byte> Init(Byte* pointer, int length);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int elementIndex);
    public virtual void Unpin();
    protected virtual void Dispose(bool disposing);
}
internal static class ProtoBuf.Internal.GuidHelper : object {
    internal static int WRITE_BYTES_LENGTH;
    internal static int WRITE_STRING_LENGTH;
    internal static int MAX_LENGTH;
    internal static Guid Read(State& state);
    internal static void Write(State& state, Guid& value, bool asBytes);
    [CompilerGeneratedAttribute]
internal static byte <Read>g__ToHex|3_0(int value);
    [CompilerGeneratedAttribute]
internal static int <Write>g__FromHex|4_0(int value);
    [CompilerGeneratedAttribute]
internal static void <Write>g__Throw|4_1(int value);
}
internal interface ProtoBuf.Internal.IValueChecker`1 {
    public abstract virtual bool HasNonTrivialValue(T value);
    public abstract virtual bool IsNull(T value);
}
[IsReadOnlyAttribute]
internal class ProtoBuf.Internal.KeyValuePairSerializer`2 : ValueType {
    private ISerializer`1<TKey> _keySerializer;
    private ISerializer`1<TValue> _valueSerializer;
    private SerializerFeatures _keyFeatures;
    private SerializerFeatures _valueFeatures;
    public SerializerFeatures Features { get; }
    internal KeyValuePairSerializer`2(ISerializer`1<TKey> keySerializer, SerializerFeatures keyFeatures, ISerializer`1<TValue> valueSerializer, SerializerFeatures valueFeatures);
    public sealed virtual SerializerFeatures get_Features();
    public sealed virtual KeyValuePair`2<TKey, TValue> Read(State& state, KeyValuePair`2<TKey, TValue> pair);
    private static T CreateDefault(ISerializationContext context, ISerializer`1<T> serializer, SerializerFeatures features);
    public sealed virtual void Write(State& state, KeyValuePair`2<TKey, TValue> value);
}
internal class ProtoBuf.Internal.Level240DefaultSerializer : object {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime?>.Features { get; }
    private sealed virtual override Nullable`1<DateTime> ProtoBuf.Serializers.ISerializer<System.DateTime?>.Read(State& state, Nullable`1<DateTime> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.DateTime?>.Write(State& state, Nullable`1<DateTime> value);
    private sealed virtual override Nullable`1<TimeSpan> ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Read(State& state, Nullable`1<TimeSpan> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Write(State& state, Nullable`1<TimeSpan> value);
    private sealed virtual override DateTime ProtoBuf.Serializers.ISerializer<System.DateTime>.Read(State& state, DateTime value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.DateTime>.Write(State& state, DateTime value);
    private sealed virtual override TimeSpan ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Read(State& state, TimeSpan value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Write(State& state, TimeSpan value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime?>.get_Features();
}
internal class ProtoBuf.Internal.Level300DefaultSerializer : Level240DefaultSerializer {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal?>.Features { get; }
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Decimal>.HasNonTrivialValue(decimal value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Decimal>.IsNull(decimal value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Guid>.HasNonTrivialValue(Guid value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Guid>.IsNull(Guid value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.get_Features();
    private sealed virtual override Guid ProtoBuf.Serializers.ISerializer<System.Guid>.Read(State& state, Guid value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid>.Write(State& state, Guid value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal?>.get_Features();
    private sealed virtual override decimal ProtoBuf.Serializers.ISerializer<System.Decimal>.Read(State& state, decimal value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Decimal>.Write(State& state, decimal value);
    private sealed virtual override Nullable`1<decimal> ProtoBuf.Serializers.ISerializer<System.Decimal?>.Read(State& state, Nullable`1<decimal> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Decimal?>.Write(State& state, Nullable`1<decimal> value);
    private sealed virtual override Nullable`1<Guid> ProtoBuf.Serializers.ISerializer<System.Guid?>.Read(State& state, Nullable`1<Guid> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid?>.Write(State& state, Nullable`1<Guid> value);
}
internal class ProtoBuf.Internal.Level300FixedSerializer : object {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.Features { get; }
    private sealed virtual override Guid ProtoBuf.Serializers.ISerializer<System.Guid>.Read(State& state, Guid value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid>.Write(State& state, Guid value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.get_Features();
    private sealed virtual override Nullable`1<Guid> ProtoBuf.Serializers.ISerializer<System.Guid?>.Read(State& state, Nullable`1<Guid> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid?>.Write(State& state, Nullable`1<Guid> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Guid>.HasNonTrivialValue(Guid value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Guid>.IsNull(Guid value);
}
internal enum ProtoBuf.Internal.ObjectScope : Enum {
    public int value__;
    public static ObjectScope Invalid;
    public static ObjectScope NakedMessage;
    public static ObjectScope LikeRoot;
    public static ObjectScope WrappedMessage;
    public static ObjectScope Scalar;
}
internal static class ProtoBuf.Internal.Pool`1 : object {
    [ThreadStaticAttribute]
private static T ts_local;
    private static int POOL_SIZE;
    private static Queue`1<T> s_pool;
    private static Pool`1();
    internal static T TryGet();
    internal static void Put(T obj);
    private static T GetShared();
    private static void PutShared(T obj);
}
internal class ProtoBuf.Internal.PrimaryTypeProvider : object {
    private static int FieldDecimalLow;
    private static int FieldDecimalHigh;
    private static int FieldDecimalSignScale;
    private static bool s_decimalOptimized;
    private static bool s_guidOptimized;
    private static int FieldGuidLow;
    private static int FieldGuidHigh;
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal?>.Features { get; }
    internal static bool DecimalOptimized { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.Features { get; }
    internal static bool GuidOptimized { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.String>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int32>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte[]>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.ArraySegment<System.Byte>>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Memory<System.Byte>>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.ReadOnlyMemory<System.Byte>>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt16>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt32>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt64>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int64>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Boolean>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Single>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Double>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.SByte>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int16>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Uri>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Char>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int32?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int16?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int64?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.SByte?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt32?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt16?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt64?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Char?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Boolean?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Single?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Double?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Type>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.IntPtr>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UIntPtr>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.IntPtr?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UIntPtr?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.Internal.PrimaryTypeProvider.ScaledTicks>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty?>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp?>.Features { get; }
    private static PrimaryTypeProvider();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Decimal?>.get_Features();
    private sealed virtual override Nullable`1<decimal> ProtoBuf.Serializers.ISerializer<System.Decimal?>.Read(State& state, Nullable`1<decimal> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Decimal?>.Write(State& state, Nullable`1<decimal> value);
    private sealed virtual override decimal ProtoBuf.Serializers.ISerializer<System.Decimal>.Read(State& state, decimal value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Decimal>.Write(State& state, decimal value);
    internal static bool get_DecimalOptimized();
    private static bool VerifyDecimalLayout();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Guid?>.get_Features();
    internal static bool get_GuidOptimized();
    private sealed virtual override Nullable`1<Guid> ProtoBuf.Serializers.ISerializer<System.Guid?>.Read(State& state, Nullable`1<Guid> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid?>.Write(State& state, Nullable`1<Guid> value);
    private sealed virtual override Guid ProtoBuf.Serializers.ISerializer<System.Guid>.Read(State& state, Guid value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Guid>.Write(State& state, Guid value);
    private static bool VerifyGuidLayout();
    private sealed virtual override string ProtoBuf.Serializers.ISerializer<System.String>.Read(State& state, string value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.String>.Write(State& state, string value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.String>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.String>.Measure(ISerializationContext context, WireType wireType, string value);
    private sealed virtual override int ProtoBuf.Serializers.ISerializer<System.Int32>.Read(State& state, int value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int32>.Write(State& state, int value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int32>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int32>.Measure(ISerializationContext context, WireType wireType, int value);
    private sealed virtual override Byte[] ProtoBuf.Serializers.ISerializer<System.Byte[]>.Read(State& state, Byte[] value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Byte[]>.Write(State& state, Byte[] value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte[]>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Byte[]>.Measure(ISerializationContext context, WireType wireType, Byte[] value);
    private sealed virtual override ArraySegment`1<byte> ProtoBuf.Serializers.ISerializer<System.ArraySegment<System.Byte>>.Read(State& state, ArraySegment`1<byte> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.ArraySegment<System.Byte>>.Write(State& state, ArraySegment`1<byte> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.ArraySegment<System.Byte>>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.ArraySegment<System.Byte>>.Measure(ISerializationContext context, WireType wireType, ArraySegment`1<byte> value);
    private sealed virtual override Memory`1<byte> ProtoBuf.Serializers.ISerializer<System.Memory<System.Byte>>.Read(State& state, Memory`1<byte> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Memory<System.Byte>>.Write(State& state, Memory`1<byte> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Memory<System.Byte>>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Memory<System.Byte>>.Measure(ISerializationContext context, WireType wireType, Memory`1<byte> value);
    private sealed virtual override ReadOnlyMemory`1<byte> ProtoBuf.Serializers.ISerializer<System.ReadOnlyMemory<System.Byte>>.Read(State& state, ReadOnlyMemory`1<byte> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.ReadOnlyMemory<System.Byte>>.Write(State& state, ReadOnlyMemory`1<byte> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.ReadOnlyMemory<System.Byte>>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.ReadOnlyMemory<System.Byte>>.Measure(ISerializationContext context, WireType wireType, ReadOnlyMemory`1<byte> value);
    private sealed virtual override byte ProtoBuf.Serializers.ISerializer<System.Byte>.Read(State& state, byte value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Byte>.Write(State& state, byte value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Byte>.Measure(ISerializationContext context, WireType wireType, byte value);
    private sealed virtual override ushort ProtoBuf.Serializers.ISerializer<System.UInt16>.Read(State& state, ushort value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt16>.Write(State& state, ushort value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt16>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt16>.Measure(ISerializationContext context, WireType wireType, ushort value);
    private sealed virtual override UInt32 ProtoBuf.Serializers.ISerializer<System.UInt32>.Read(State& state, UInt32 value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt32>.Write(State& state, UInt32 value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt32>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt32>.Measure(ISerializationContext context, WireType wireType, UInt32 value);
    private sealed virtual override ulong ProtoBuf.Serializers.ISerializer<System.UInt64>.Read(State& state, ulong value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt64>.Write(State& state, ulong value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt64>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt64>.Measure(ISerializationContext context, WireType wireType, ulong value);
    private sealed virtual override long ProtoBuf.Serializers.ISerializer<System.Int64>.Read(State& state, long value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int64>.Write(State& state, long value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int64>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int64>.Measure(ISerializationContext context, WireType wireType, long value);
    private sealed virtual override bool ProtoBuf.Serializers.ISerializer<System.Boolean>.Read(State& state, bool value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Boolean>.Write(State& state, bool value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Boolean>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Boolean>.Measure(ISerializationContext context, WireType wireType, bool value);
    private sealed virtual override float ProtoBuf.Serializers.ISerializer<System.Single>.Read(State& state, float value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Single>.Write(State& state, float value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Single>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Single>.Measure(ISerializationContext context, WireType wireType, float value);
    private sealed virtual override double ProtoBuf.Serializers.ISerializer<System.Double>.Read(State& state, double value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Double>.Write(State& state, double value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Double>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Double>.Measure(ISerializationContext context, WireType wireType, double value);
    private sealed virtual override sbyte ProtoBuf.Serializers.ISerializer<System.SByte>.Read(State& state, sbyte value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.SByte>.Write(State& state, sbyte value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.SByte>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.SByte>.Measure(ISerializationContext context, WireType wireType, sbyte value);
    private sealed virtual override short ProtoBuf.Serializers.ISerializer<System.Int16>.Read(State& state, short value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int16>.Write(State& state, short value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int16>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int16>.Measure(ISerializationContext context, WireType wireType, short value);
    private sealed virtual override Uri ProtoBuf.Serializers.ISerializer<System.Uri>.Read(State& state, Uri value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Uri>.Write(State& state, Uri value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Uri>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Uri>.Measure(ISerializationContext context, WireType wireType, Uri value);
    private sealed virtual override char ProtoBuf.Serializers.ISerializer<System.Char>.Read(State& state, char value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Char>.Write(State& state, char value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Char>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Char>.Measure(ISerializationContext context, WireType wireType, char value);
    private sealed virtual override string ProtoBuf.Serializers.IFactory<System.String>.Create(ISerializationContext context);
    private sealed virtual override Byte[] ProtoBuf.Serializers.IFactory<System.Byte[]>.Create(ISerializationContext context);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int32?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int32?>.Write(State& state, Nullable`1<int> value);
    private sealed virtual override Nullable`1<int> ProtoBuf.Serializers.ISerializer<System.Int32?>.Read(State& state, Nullable`1<int> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int16?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int16?>.Write(State& state, Nullable`1<short> value);
    private sealed virtual override Nullable`1<short> ProtoBuf.Serializers.ISerializer<System.Int16?>.Read(State& state, Nullable`1<short> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Int64?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Int64?>.Write(State& state, Nullable`1<long> value);
    private sealed virtual override Nullable`1<long> ProtoBuf.Serializers.ISerializer<System.Int64?>.Read(State& state, Nullable`1<long> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.SByte?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.SByte?>.Write(State& state, Nullable`1<sbyte> value);
    private sealed virtual override Nullable`1<sbyte> ProtoBuf.Serializers.ISerializer<System.SByte?>.Read(State& state, Nullable`1<sbyte> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt32?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt32?>.Write(State& state, Nullable`1<UInt32> value);
    private sealed virtual override Nullable`1<UInt32> ProtoBuf.Serializers.ISerializer<System.UInt32?>.Read(State& state, Nullable`1<UInt32> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt16?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt16?>.Write(State& state, Nullable`1<ushort> value);
    private sealed virtual override Nullable`1<ushort> ProtoBuf.Serializers.ISerializer<System.UInt16?>.Read(State& state, Nullable`1<ushort> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UInt64?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UInt64?>.Write(State& state, Nullable`1<ulong> value);
    private sealed virtual override Nullable`1<ulong> ProtoBuf.Serializers.ISerializer<System.UInt64?>.Read(State& state, Nullable`1<ulong> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Byte?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Byte?>.Write(State& state, Nullable`1<byte> value);
    private sealed virtual override Nullable`1<byte> ProtoBuf.Serializers.ISerializer<System.Byte?>.Read(State& state, Nullable`1<byte> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Char?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Char?>.Write(State& state, Nullable`1<char> value);
    private sealed virtual override Nullable`1<char> ProtoBuf.Serializers.ISerializer<System.Char?>.Read(State& state, Nullable`1<char> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Boolean?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Boolean?>.Write(State& state, Nullable`1<bool> value);
    private sealed virtual override Nullable`1<bool> ProtoBuf.Serializers.ISerializer<System.Boolean?>.Read(State& state, Nullable`1<bool> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Single?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Single?>.Write(State& state, Nullable`1<float> value);
    private sealed virtual override Nullable`1<float> ProtoBuf.Serializers.ISerializer<System.Single?>.Read(State& state, Nullable`1<float> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Double?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Double?>.Write(State& state, Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> ProtoBuf.Serializers.ISerializer<System.Double?>.Read(State& state, Nullable`1<double> value);
    private sealed virtual override Type ProtoBuf.Serializers.ISerializer<System.Type>.Read(State& state, Type value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.Type>.Write(State& state, Type value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.Type>.get_Features();
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Type>.Measure(ISerializationContext context, WireType wireType, Type value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.String>.HasNonTrivialValue(string value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Uri>.HasNonTrivialValue(Uri value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Type>.HasNonTrivialValue(Type value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte[]>.HasNonTrivialValue(Byte[] value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.SByte>.HasNonTrivialValue(sbyte value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int16>.HasNonTrivialValue(short value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int32>.HasNonTrivialValue(int value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int64>.HasNonTrivialValue(long value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte>.HasNonTrivialValue(byte value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt16>.HasNonTrivialValue(ushort value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt32>.HasNonTrivialValue(UInt32 value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt64>.HasNonTrivialValue(ulong value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Char>.HasNonTrivialValue(char value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Boolean>.HasNonTrivialValue(bool value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Single>.HasNonTrivialValue(float value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Double>.HasNonTrivialValue(double value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.SByte>.IsNull(sbyte value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int16>.IsNull(short value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int32>.IsNull(int value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int64>.IsNull(long value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte>.IsNull(byte value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt16>.IsNull(ushort value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt32>.IsNull(UInt32 value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt64>.IsNull(ulong value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Char>.IsNull(char value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Boolean>.IsNull(bool value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Single>.IsNull(float value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Double>.IsNull(double value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.String>.IsNull(string value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte[]>.IsNull(Byte[] value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Uri>.IsNull(Uri value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Type>.IsNull(Type value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int32?>.HasNonTrivialValue(Nullable`1<int> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int32?>.IsNull(Nullable`1<int> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt32?>.HasNonTrivialValue(Nullable`1<UInt32> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt32?>.IsNull(Nullable`1<UInt32> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int16?>.HasNonTrivialValue(Nullable`1<short> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int16?>.IsNull(Nullable`1<short> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt16?>.HasNonTrivialValue(Nullable`1<ushort> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt16?>.IsNull(Nullable`1<ushort> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int64?>.HasNonTrivialValue(Nullable`1<long> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Int64?>.IsNull(Nullable`1<long> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt64?>.HasNonTrivialValue(Nullable`1<ulong> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UInt64?>.IsNull(Nullable`1<ulong> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Single?>.HasNonTrivialValue(Nullable`1<float> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Single?>.IsNull(Nullable`1<float> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Double?>.HasNonTrivialValue(Nullable`1<double> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Double?>.IsNull(Nullable`1<double> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte?>.HasNonTrivialValue(Nullable`1<byte> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Byte?>.IsNull(Nullable`1<byte> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.SByte?>.HasNonTrivialValue(Nullable`1<sbyte> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.SByte?>.IsNull(Nullable`1<sbyte> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Boolean?>.HasNonTrivialValue(Nullable`1<bool> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Boolean?>.IsNull(Nullable`1<bool> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Char?>.HasNonTrivialValue(Nullable`1<char> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Char?>.IsNull(Nullable`1<char> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int32?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<int> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int64?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<long> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Single?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<float> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Double?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<double> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Byte?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<byte> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt16?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<ushort> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt32?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<UInt32> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UInt64?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<ulong> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.SByte?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<sbyte> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Int16?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<short> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Char?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<char> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.Boolean?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<bool> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.IntPtr>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UIntPtr>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.IntPtr?>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.UIntPtr?>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.IntPtr?>.Write(State& state, Nullable`1<IntPtr> value);
    private sealed virtual override Nullable`1<IntPtr> ProtoBuf.Serializers.ISerializer<System.IntPtr?>.Read(State& state, Nullable`1<IntPtr> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UIntPtr?>.Write(State& state, Nullable`1<UIntPtr> value);
    private sealed virtual override Nullable`1<UIntPtr> ProtoBuf.Serializers.ISerializer<System.UIntPtr?>.Read(State& state, Nullable`1<UIntPtr> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.IntPtr>.Write(State& state, IntPtr value);
    private sealed virtual override IntPtr ProtoBuf.Serializers.ISerializer<System.IntPtr>.Read(State& state, IntPtr value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.UIntPtr>.Write(State& state, UIntPtr value);
    private sealed virtual override UIntPtr ProtoBuf.Serializers.ISerializer<System.UIntPtr>.Read(State& state, UIntPtr value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.IntPtr>.Measure(ISerializationContext context, WireType wireType, IntPtr value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UIntPtr>.Measure(ISerializationContext context, WireType wireType, UIntPtr value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.IntPtr?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<IntPtr> value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<System.UIntPtr?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<UIntPtr> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.IntPtr>.HasNonTrivialValue(IntPtr value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.IntPtr>.IsNull(IntPtr value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UIntPtr>.HasNonTrivialValue(UIntPtr value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UIntPtr>.IsNull(UIntPtr value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.IntPtr?>.HasNonTrivialValue(Nullable`1<IntPtr> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.IntPtr?>.IsNull(Nullable`1<IntPtr> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UIntPtr?>.HasNonTrivialValue(Nullable`1<UIntPtr> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.UIntPtr?>.IsNull(Nullable`1<UIntPtr> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.DateTime?>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.get_Features();
    private sealed virtual override Nullable`1<TimeSpan> ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Read(State& state, Nullable`1<TimeSpan> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.TimeSpan?>.Write(State& state, Nullable`1<TimeSpan> value);
    private sealed virtual override Nullable`1<DateTime> ProtoBuf.Serializers.ISerializer<System.DateTime?>.Read(State& state, Nullable`1<DateTime> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.DateTime?>.Write(State& state, Nullable`1<DateTime> value);
    private sealed virtual override TimeSpan ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Read(State& state, TimeSpan value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.TimeSpan>.Write(State& state, TimeSpan value);
    private sealed virtual override DateTime ProtoBuf.Serializers.ISerializer<System.DateTime>.Read(State& state, DateTime value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<System.DateTime>.Write(State& state, DateTime value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.Internal.PrimaryTypeProvider.ScaledTicks>.Write(State& state, ScaledTicks value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.Internal.PrimaryTypeProvider.ScaledTicks>.get_Features();
    private sealed virtual override ScaledTicks ProtoBuf.Serializers.ISerializer<ProtoBuf.Internal.PrimaryTypeProvider.ScaledTicks>.Read(State& state, ScaledTicks _);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration?>.get_Features();
    private sealed virtual override Nullable`1<Duration> ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration?>.Read(State& state, Nullable`1<Duration> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration?>.Write(State& state, Nullable`1<Duration> value);
    private sealed virtual override Duration ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration>.Read(State& state, Duration value);
    internal static Duration ReadDuration(State& state, Duration value);
    private static bool TryReadDurationFast(State& state, Duration& value);
    private static Duration ReadDurationFallback(State& state, Duration value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Duration>.Write(State& state, Duration value);
    internal static void WriteDuration(State& state, Duration value);
    internal static long ToDurationSeconds(long ticks, Int32& nanos, bool isTimestamp);
    internal static long ToTicks(long seconds, int nanos);
    internal static void NormalizeSecondsNanoseconds(Int64& seconds, Int32& nanos, bool isTimestamp);
    private static void WriteSecondsNanos(State& state, long seconds, int nanos, bool isTimestamp);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty?>.get_Features();
    private sealed virtual override Empty ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty>.Read(State& state, Empty value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty>.Write(State& state, Empty value);
    private sealed virtual override Nullable`1<Empty> ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty?>.Read(State& state, Nullable`1<Empty> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Empty?>.Write(State& state, Nullable`1<Empty> value);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp?>.get_Features();
    private sealed virtual override Timestamp ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp>.Read(State& state, Timestamp value);
    internal static Timestamp ReadTimestamp(State& state, Timestamp value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp>.Write(State& state, Timestamp value);
    internal static void WriteTimestamp(State& state, Timestamp value);
    private sealed virtual override Nullable`1<Timestamp> ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp?>.Read(State& state, Nullable`1<Timestamp> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<ProtoBuf.WellKnownTypes.Timestamp?>.Write(State& state, Nullable`1<Timestamp> value);
}
internal class ProtoBuf.Internal.ReadBuffer`1 : ValueType {
    private T[] _arr;
    private int _count;
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public ArraySegment`1<T> Segment { get; }
    public Span`1<T> Span { get; }
    private ReadBuffer`1(int minimumLength);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public T[] ToArray();
    public T[] ToArray(T[] prepend);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public static ReadBuffer`1<T> Create(int minimumLength);
    private static void Recyle(T[]& array);
    public bool get_IsEmpty();
    public sealed virtual int get_Count();
    public ArraySegment`1<T> get_Segment();
    public Span`1<T> get_Span();
    public sealed virtual void Dispose();
    private void Grow();
    public sealed virtual void Add(T value);
}
internal class ProtoBuf.Internal.ReferenceValueChecker : object {
    public static ReferenceValueChecker Instance;
    private static ReferenceValueChecker();
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Object>.HasNonTrivialValue(object value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<System.Object>.IsNull(object value);
}
internal class ProtoBuf.Internal.StructValueChecker`1 : object {
    public static StructValueChecker`1<T> Instance;
    private static StructValueChecker`1();
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<T?>.HasNonTrivialValue(Nullable`1<T> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<T?>.IsNull(Nullable`1<T> value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<T>.HasNonTrivialValue(T value);
    private sealed virtual override bool ProtoBuf.Internal.IValueChecker<T>.IsNull(T value);
}
internal static class ProtoBuf.Internal.ThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(string paramName);
    public static void ThrowArgumentOutOfRangeException(string paramName, string message);
    public static void ThrowArgumentNullException(string paramName);
    public static void ThrowArgumentNullException(string paramName, string message);
    public static void ThrowIndexOutOfRangeException();
    internal static void ThrowArgumentException(string message, string paramName);
    internal static void Format(string message);
    internal static void ThrowArgumentException(string message);
    internal static void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
    internal static void ThrowInvalidOperationException(string message, Exception innerException);
    internal static void NoSerializerDefined(Type type);
    internal static void ThrowNotSupportedException();
    internal static void ThrowNotSupportedException(string message);
    internal static void ThrowProtoException(string message, Exception inner);
    internal static void ThrowOverflowException();
    internal static void ThrowNotImplementedException(string message);
    internal static void ThrowNullReferenceException();
    internal static void ThrowNullRepeatedContents();
    internal static void ThrowTrackedObjects(object obj);
    internal static void ThrowNestedDataNotSupported(Type declaringType);
    internal static void ThrowInvalidPackedOperationException(WireType wireType, Type type);
}
[ExtensionAttribute]
internal static class ProtoBuf.Internal.TypeHelper : object {
    [ExtensionAttribute]
internal static string NormalizeName(Type type);
    internal static bool CanBePacked(Type type);
    internal static bool IsBytesLike(Type type);
    [ObsoleteAttribute("Prefer list provider")]
internal static bool ResolveUniqueEnumerableT(Type type, Type& t);
    internal static object GetValueTypeChecker(Type type);
    internal static object CreateNonTrivialDefault(Type type);
    [CompilerGeneratedAttribute]
internal static bool <ResolveUniqueEnumerableT>g__IsEnumerableT|3_0(Type type, Type& t);
}
internal static class ProtoBuf.Internal.TypeHelper`1 : object {
    public static bool IsReferenceType;
    public static bool CanBeNull;
    public static IValueChecker`1<T> ValueChecker;
    public static bool CanBePacked;
    public static T Default;
    public static T NonTrivialDefault;
    public static Func`2<ISerializationContext, T> Factory;
    private static TypeHelper`1();
    public static T FromObject(object value);
}
public interface ProtoBuf.IProtoInput`1 {
    public abstract virtual T Deserialize(TInput source, T value, object userState);
}
public interface ProtoBuf.IProtoOutput`1 {
    public abstract virtual void Serialize(TOutput destination, T value, object userState);
}
public interface ProtoBuf.ISerializationContext {
    public TypeModel Model { get; }
    public object UserState { get; }
    public abstract virtual TypeModel get_Model();
    public abstract virtual object get_UserState();
}
public interface ProtoBuf.ITypedExtensible {
    public abstract virtual IExtension GetExtensionObject(Type type, bool createIfMissing);
}
public class ProtoBuf.MeasureState`1 : ValueType {
    private TypeModel _model;
    private T _value;
    private object _userState;
    private ProtoWriter _writer;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public long Length { get; }
    internal MeasureState`1(TypeModel model, T& value, object userState, long abortAfter);
    public sealed virtual void Dispose();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Length();
    public long LengthOnly();
    private void SerializeCore(State state);
    internal int GetLengthHits(Int32& misses);
    public void Serialize(Stream stream);
    public void Serialize(IBufferWriter`1<byte> writer);
}
[FlagsAttribute]
public enum ProtoBuf.MemberSerializationOptions : Enum {
    public int value__;
    public static MemberSerializationOptions None;
    public static MemberSerializationOptions Packed;
    public static MemberSerializationOptions Required;
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "False")]
public static MemberSerializationOptions AsReference;
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "False")]
public static MemberSerializationOptions DynamicType;
    public static MemberSerializationOptions OverwriteList;
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "False")]
public static MemberSerializationOptions AsReferenceHasValue;
}
public enum ProtoBuf.Meta.ProtoSyntax : Enum {
    public int value__;
    public static ProtoSyntax Default;
    public static ProtoSyntax Proto2;
    public static ProtoSyntax Proto3;
}
[FlagsAttribute]
public enum ProtoBuf.Meta.SchemaGenerationFlags : Enum {
    public int value__;
    public static SchemaGenerationFlags None;
    public static SchemaGenerationFlags MultipleNamespaceSupport;
    public static SchemaGenerationFlags PreserveSubType;
}
public class ProtoBuf.Meta.SchemaGenerationOptions : object {
    internal static SchemaGenerationOptions Default;
    [CompilerGeneratedAttribute]
private ProtoSyntax <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaGenerationFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    private List`1<Service> _services;
    private List`1<Type> _types;
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    public ProtoSyntax Syntax { get; public set; }
    public SchemaGenerationFlags Flags { get; public set; }
    public string Package { get; public set; }
    public List`1<Service> Services { get; }
    public List`1<Type> Types { get; }
    internal bool HasServices { get; }
    internal bool HasTypes { get; }
    public string Origin { get; public set; }
    private static SchemaGenerationOptions();
    [CompilerGeneratedAttribute]
public ProtoSyntax get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(ProtoSyntax value);
    [CompilerGeneratedAttribute]
public SchemaGenerationFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(SchemaGenerationFlags value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    public List`1<Service> get_Services();
    public List`1<Type> get_Types();
    internal bool get_HasServices();
    internal bool get_HasTypes();
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
}
public class ProtoBuf.Meta.Service : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceMethod> <Methods>k__BackingField;
    public string Name { get; public set; }
    public List`1<ServiceMethod> Methods { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<ServiceMethod> get_Methods();
}
public class ProtoBuf.Meta.ServiceMethod : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServerStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientStreaming>k__BackingField;
    public string Name { get; public set; }
    public Type InputType { get; public set; }
    public Type OutputType { get; public set; }
    public bool ServerStreaming { get; public set; }
    public bool ClientStreaming { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(Type value);
    [CompilerGeneratedAttribute]
public Type get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(Type value);
    [CompilerGeneratedAttribute]
public bool get_ServerStreaming();
    [CompilerGeneratedAttribute]
public void set_ServerStreaming(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClientStreaming();
    [CompilerGeneratedAttribute]
public void set_ClientStreaming(bool value);
}
public class ProtoBuf.Meta.TypeFormatEventArgs : EventArgs {
    private Type type;
    private string formattedName;
    private bool typeFixed;
    public Type Type { get; public set; }
    public string FormattedName { get; public set; }
    internal TypeFormatEventArgs(string formattedName);
    internal TypeFormatEventArgs(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_FormattedName();
    public void set_FormattedName(string value);
}
public class ProtoBuf.Meta.TypeFormatEventHandler : MulticastDelegate {
    public TypeFormatEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TypeFormatEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TypeFormatEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class ProtoBuf.Meta.TypeModel : object {
    private int _bufferSize;
    private int _maxDepth;
    internal static int DefaultMaxDepth;
    internal static TypeModelOptions DefaultOptions;
    internal static SerializerFeatures FromAux;
    private static TypeModel s_defaultModel;
    [CompilerGeneratedAttribute]
private TypeFormatEventHandler DynamicTypeFormatting;
    public static int ListItemTag;
    public int BufferSize { get; public set; }
    public int MaxDepth { get; public set; }
    public TypeModelOptions Options { get; }
    internal static TypeModel DefaultModel { get; }
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    protected static ISerializer`1<T> GetSerializer();
    public virtual TypeModelOptions get_Options();
    [ObsoleteAttribute("This API is no longer required and may be removed in a future release")]
protected internal Type MapType(Type type);
    [ObsoleteAttribute("This API is no longer required and may be removed in a future release")]
protected internal Type MapType(Type type, bool demand);
    internal static WireType GetWireType(TypeModel model, DataFormat format, Type type);
    internal virtual bool IsKnownType(CompatibilityLevel ambient);
    internal bool TrySerializeAuxiliaryType(State& state, Type type, DataFormat format, int tag, object value, bool isInsideList, object parentList, bool isRoot);
    private static ObjectScope NormalizeAuxScope(SerializerFeatures features, bool isInsideList, Type type, bool isRoot);
    public void Serialize(Stream dest, object value);
    public void Serialize(Stream dest, object value, SerializationContext context);
    public void Serialize(IBufferWriter`1<byte> dest, object value, object userState);
    internal void SerializeRootFallback(State& state, object value);
    public long Serialize(Stream dest, T value, object userState);
    public long Serialize(IBufferWriter`1<byte> dest, T value, object userState);
    public MeasureState`1<T> Measure(T value, object userState, long abortAfter);
    [ObsoleteAttribute("If possible, please use the State API; a transitionary implementation is provided, but this API may be removed in a future version", "False")]
public void Serialize(ProtoWriter dest, object value);
    internal static long SerializeImpl(State& state, T value);
    public object DeserializeWithLengthPrefix(Stream source, object value, Type type, PrefixStyle style, int fieldNumber);
    public object DeserializeWithLengthPrefix(Stream source, object value, Type type, PrefixStyle style, int expectedField, TypeResolver resolver);
    public object DeserializeWithLengthPrefix(Stream source, object value, Type type, PrefixStyle style, int expectedField, TypeResolver resolver, Int32& bytesRead);
    public object DeserializeWithLengthPrefix(Stream source, object value, Type type, PrefixStyle style, int expectedField, TypeResolver resolver, Int64& bytesRead);
    private object DeserializeWithLengthPrefix(Stream source, object value, Type type, PrefixStyle style, int expectedField, TypeResolver resolver, Int64& bytesRead, Boolean& haveObject, SerializationContext context);
    public IEnumerable DeserializeItems(Stream source, Type type, PrefixStyle style, int expectedField, TypeResolver resolver);
    public IEnumerable DeserializeItems(Stream source, Type type, PrefixStyle style, int expectedField, TypeResolver resolver, SerializationContext context);
    public IEnumerable`1<T> DeserializeItems(Stream source, PrefixStyle style, int expectedField);
    public IEnumerable`1<T> DeserializeItems(Stream source, PrefixStyle style, int expectedField, SerializationContext context);
    public void SerializeWithLengthPrefix(Stream dest, object value, Type type, PrefixStyle style, int fieldNumber);
    public void SerializeWithLengthPrefix(Stream dest, object value, Type type, PrefixStyle style, int fieldNumber, SerializationContext context);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type, SerializationContext context);
    public T Deserialize(Stream source, T value, object userState);
    public sealed virtual T Deserialize(ReadOnlyMemory`1<byte> source, T value, object userState);
    public T Deserialize(ReadOnlySpan`1<byte> source, T value, object userState);
    public sealed virtual T Deserialize(ReadOnlySequence`1<byte> source, T value, object userState);
    public object Deserialize(Type type, Stream source, object value, object userState, long length);
    public object Deserialize(Type type, ReadOnlyMemory`1<byte> source, object value, object userState);
    public object Deserialize(Type type, ReadOnlySpan`1<byte> source, object value, object userState);
    public object Deserialize(Type type, ReadOnlySequence`1<byte> source, object value, object userState);
    internal static bool PrepareDeserialize(object value, Type& type);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type, int length);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type, long length);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type, int length, SerializationContext context);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Deserialize(Stream source, object value, Type type, long length, SerializationContext context);
    public object Deserialize(ReadOnlyMemory`1<byte> source, Type type, object value, object userState);
    public object Deserialize(ReadOnlySequence`1<byte> source, Type type, object value, object userState);
    [ObsoleteAttribute("If possible, please use the State API; a transitionary implementation is provided, but this API may be removed in a future version", "False")]
public object Deserialize(ProtoReader source, object value, Type type);
    internal object DeserializeRootAny(State& state, Type type, object value, bool autoCreate);
    private bool TryDeserializeList(State& state, DataFormat format, int tag, Type listType, Type itemType, Object& value, bool isRoot);
    private static object CreateListInstance(Type listType, Type itemType);
    internal bool TryDeserializeAuxiliaryType(SolidState& state, DataFormat format, int tag, Type type, Object& value, bool skipOtherFields, bool asListItem, bool autoCreate, bool insideList, object parentListOrType, bool isRoot);
    internal bool TryDeserializeAuxiliaryType(State& state, DataFormat format, int tag, Type type, Object& value, bool skipOtherFields, bool asListItem, bool autoCreate, bool insideList, object parentListOrType, bool isRoot);
    internal static TypeModel SetDefaultModel(TypeModel newValue);
    internal static void ResetDefaultModel();
    internal static TypeModel get_DefaultModel();
    [ObsoleteAttribute("Use RuntimeTypeModel.Create", "True")]
public static TypeModel Create();
    [ObsoleteAttribute("Use RuntimeTypeModel.CreateForAssembly", "True")]
public static TypeModel CreateForAssembly();
    [ObsoleteAttribute("Use RuntimeTypeModel.CreateForAssembly", "True")]
public static TypeModel CreateForAssembly(Type type);
    [ObsoleteAttribute("Use RuntimeTypeModel.CreateForAssembly", "True")]
public static TypeModel CreateForAssembly(Assembly assembly);
    public bool IsDefined(Type type);
    internal bool IsDefined(Type type, CompatibilityLevel ambient);
    protected virtual ISerializer`1<T> GetSerializer();
    internal virtual ISerializer`1<T> GetSerializerCore(CompatibilityLevel ambient);
    private static ISerializer`1<T> NoSerializer(TypeModel model);
    private static ISubTypeSerializer`1<T> NoSubTypeSerializer(TypeModel model);
    internal static T CreateInstance(ISerializationContext context, ISerializer`1<T> serializer);
    internal static T ActivatorCreate();
    internal static ISerializer`1<T> GetSerializer(TypeModel model, CompatibilityLevel ambient);
    public static ISerializer`1<T> GetInbuiltSerializer(CompatibilityLevel compatibilityLevel, DataFormat dataFormat);
    internal static IRepeatedSerializer`1<T> GetRepeatedSerializer(TypeModel model);
    internal static ISerializer`1<T> TryGetSerializer(TypeModel model);
    internal static ISubTypeSerializer`1<T> GetSubTypeSerializer(TypeModel model);
    internal object Deserialize(ObjectScope scope, State& state, Type type, object value);
    public T DeepClone(T value, object userState);
    public object DeepClone(object value);
    private object DeepCloneFallback(Type type, object value);
    protected internal static void ThrowUnexpectedSubtype(Type expected, Type actual);
    public static void ThrowUnexpectedSubtype(T value);
    public static void ThrowUnexpectedSubtype(T value);
    public static bool IsSubType(T value);
    protected internal static void ThrowUnexpectedType(Type type, TypeModel model);
    internal static void ThrowNestedListsNotSupported(Type type);
    public static void ThrowCannotCreateInstance(Type type, Exception inner);
    internal static string SerializeType(TypeModel model, Type type);
    internal static Type DeserializeType(TypeModel model, string value);
    public bool CanSerializeContractType(Type type);
    public bool CanSerialize(Type type);
    public bool CanSerializeBasicType(Type type);
    internal bool CanSerialize(Type type, bool allowBasic, bool allowContract, bool allowLists, SerializerFeatures& category);
    public string GetSchema(Type type);
    public string GetSchema(Type type, ProtoSyntax syntax);
    public virtual string GetSchema(SchemaGenerationOptions options);
    [CompilerGeneratedAttribute]
public void add_DynamicTypeFormatting(TypeFormatEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DynamicTypeFormatting(TypeFormatEventHandler value);
    public IFormatter CreateFormatter(Type type);
    internal static Type ResolveKnownType(string name, Assembly assembly);
    private sealed virtual override T ProtoBuf.IProtoInput<System.IO.Stream>.Deserialize(Stream source, T value, object userState);
    private sealed virtual override T ProtoBuf.IProtoInput<System.ArraySegment<System.Byte>>.Deserialize(ArraySegment`1<byte> source, T value, object userState);
    private sealed virtual override T ProtoBuf.IProtoInput<System.Byte[]>.Deserialize(Byte[] source, T value, object userState);
    private sealed virtual override void ProtoBuf.IProtoOutput<System.IO.Stream>.Serialize(Stream destination, T value, object userState);
    private sealed virtual override void ProtoBuf.IProtoOutput<System.Buffers.IBufferWriter<System.Byte>>.Serialize(IBufferWriter`1<byte> destination, T value, object userState);
    private sealed virtual override void ProtoBuf.IMeasuredProtoOutput<System.IO.Stream>.Serialize(MeasureState`1<T> measured, Stream destination);
    private sealed virtual override void ProtoBuf.IMeasuredProtoOutput<System.Buffers.IBufferWriter<System.Byte>>.Serialize(MeasureState`1<T> measured, IBufferWriter`1<byte> destination);
    private sealed virtual override MeasureState`1<T> ProtoBuf.IMeasuredProtoOutput<System.IO.Stream>.Measure(T value, object userState);
    private sealed virtual override MeasureState`1<T> ProtoBuf.IMeasuredProtoOutput<System.Buffers.IBufferWriter<System.Byte>>.Measure(T value, object userState);
    [CompilerGeneratedAttribute]
internal static bool <CanSerialize>g__CheckIfNullableT|106_0(Type& type);
    [CompilerGeneratedAttribute]
internal static bool <CanSerialize>g__DoCheckLists|106_1(Type type, TypeModel model, bool allowBasic, bool allowContract);
}
[ExtensionAttribute]
internal static class ProtoBuf.Meta.TypeModelExtensions : object {
    [ExtensionAttribute]
internal static bool HasOption(TypeModel model, TypeModelOptions options);
    [ExtensionAttribute]
internal static bool OmitsOption(TypeModel model, TypeModelOptions options);
}
internal class ProtoBuf.NetObjectCache : object {
    private Dictionary`2<ObjectKey, long> _knownLengths;
    private int _hit;
    private int _miss;
    internal int LengthHits { get; }
    internal int LengthMisses { get; }
    public bool TryGetKnownLength(object obj, Type subTypeLevel, Int64& length);
    public void SetKnownLength(object obj, Type subTypeLevel, long length);
    internal void Clear();
    internal int get_LengthHits();
    internal int get_LengthMisses();
    internal void InitializeFrom(NetObjectCache obj);
    internal void CopyBack(NetObjectCache obj);
}
[AttributeUsageAttribute("384")]
public class ProtoBuf.NullWrappedCollectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AsGroup>k__BackingField;
    public bool AsGroup { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AsGroup();
    [CompilerGeneratedAttribute]
public void set_AsGroup(bool value);
}
[AttributeUsageAttribute("384")]
public class ProtoBuf.NullWrappedValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AsGroup>k__BackingField;
    public bool AsGroup { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AsGroup();
    [CompilerGeneratedAttribute]
public void set_AsGroup(bool value);
}
public enum ProtoBuf.PrefixStyle : Enum {
    public int value__;
    public static PrefixStyle None;
    public static PrefixStyle Base128;
    public static PrefixStyle Fixed32;
    public static PrefixStyle Fixed32BigEndian;
}
[AttributeUsageAttribute("64")]
[ImmutableObjectAttribute("True")]
public class ProtoBuf.ProtoAfterDeserializationAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ImmutableObjectAttribute("True")]
public class ProtoBuf.ProtoAfterSerializationAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ImmutableObjectAttribute("True")]
public class ProtoBuf.ProtoBeforeDeserializationAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ImmutableObjectAttribute("True")]
public class ProtoBuf.ProtoBeforeSerializationAttribute : Attribute {
}
[AttributeUsageAttribute("1052")]
public class ProtoBuf.ProtoContractAttribute : Attribute {
    internal static string ReferenceDynamicDisabled;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    private int implicitFirstTag;
    [CompilerGeneratedAttribute]
private ImplicitFields <ImplicitFields>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataMemberOffset>k__BackingField;
    private TypeOptions flags;
    [CompilerGeneratedAttribute]
private Type <Surrogate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Serializer>k__BackingField;
    public string Name { get; public set; }
    public string Origin { get; public set; }
    public int ImplicitFirstTag { get; public set; }
    public bool UseProtoMembersOnly { get; public set; }
    public bool IgnoreListHandling { get; public set; }
    public ImplicitFields ImplicitFields { get; public set; }
    public bool InferTagFromName { get; public set; }
    internal bool InferTagFromNameHasValue { get; }
    public int DataMemberOffset { get; public set; }
    public bool SkipConstructor { get; public set; }
    public bool AsReferenceDefault { get; public set; }
    public bool IsGroup { get; public set; }
    public bool IgnoreUnknownSubTypes { get; public set; }
    [ObsoleteAttribute("Enum value maps have been deprecated and are no longer supported; all enums are now effectively pass-thru; custom maps should be applied via shadow properties; in C#, lambda-based 'switch expressions' make for very convenient shadow properties", "True")]
public bool EnumPassthru { get; public set; }
    public Type Surrogate { get; public set; }
    [DynamicallyAccessedMembersAttribute("9")]
public Type Serializer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    public int get_ImplicitFirstTag();
    public void set_ImplicitFirstTag(int value);
    public bool get_UseProtoMembersOnly();
    public void set_UseProtoMembersOnly(bool value);
    public bool get_IgnoreListHandling();
    public void set_IgnoreListHandling(bool value);
    [CompilerGeneratedAttribute]
public ImplicitFields get_ImplicitFields();
    [CompilerGeneratedAttribute]
public void set_ImplicitFields(ImplicitFields value);
    public bool get_InferTagFromName();
    public void set_InferTagFromName(bool value);
    internal bool get_InferTagFromNameHasValue();
    [CompilerGeneratedAttribute]
public int get_DataMemberOffset();
    [CompilerGeneratedAttribute]
public void set_DataMemberOffset(int value);
    public bool get_SkipConstructor();
    public void set_SkipConstructor(bool value);
    public bool get_AsReferenceDefault();
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "True")]
public void set_AsReferenceDefault(bool value);
    public bool get_IsGroup();
    public void set_IsGroup(bool value);
    public bool get_IgnoreUnknownSubTypes();
    public void set_IgnoreUnknownSubTypes(bool value);
    private bool HasFlag(TypeOptions flag);
    private void SetFlag(TypeOptions flag, bool value);
    public bool get_EnumPassthru();
    public void set_EnumPassthru(bool value);
    [CompilerGeneratedAttribute]
public Type get_Surrogate();
    [CompilerGeneratedAttribute]
public void set_Surrogate(Type value);
    [CompilerGeneratedAttribute]
public Type get_Serializer();
    [CompilerGeneratedAttribute]
public void set_Serializer(Type value);
}
[AttributeUsageAttribute("64")]
public class ProtoBuf.ProtoConverterAttribute : Attribute {
}
[AttributeUsageAttribute("256")]
public class ProtoBuf.ProtoEnumAttribute : Attribute {
    internal static string EnumValueDeprecated;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Value { get; public set; }
    public string Name { get; public set; }
    [ObsoleteAttribute("Enum value maps have been deprecated and are no longer supported; all enums are now effectively pass-thru; custom maps should be applied via shadow properties; in C#, lambda-based 'switch expressions' make for very convenient shadow properties", "False")]
public int get_Value();
    [ObsoleteAttribute("Enum value maps have been deprecated and are no longer supported; all enums are now effectively pass-thru; custom maps should be applied via shadow properties; in C#, lambda-based 'switch expressions' make for very convenient shadow properties", "True")]
public void set_Value(int value);
    [ObsoleteAttribute("Enum value maps have been deprecated and are no longer supported; all enums are now effectively pass-thru; custom maps should be applied via shadow properties; in C#, lambda-based 'switch expressions' make for very convenient shadow properties", "False")]
public bool HasValue();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class ProtoBuf.ProtoException : Exception {
    public ProtoException(string message);
    public ProtoException(string message, Exception innerException);
    protected ProtoException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("384")]
public class ProtoBuf.ProtoIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class ProtoBuf.ProtoIncludeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KnownTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    public int Tag { get; }
    [DynamicallyAccessedMembersAttribute("1663")]
public string KnownTypeName { get; }
    [DynamicallyAccessedMembersAttribute("1663")]
public Type KnownType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataFormat DataFormat { get; public set; }
    public ProtoIncludeAttribute(int tag, Type knownType);
    public ProtoIncludeAttribute(int tag, string knownTypeName);
    [CompilerGeneratedAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
public string get_KnownTypeName();
    public Type get_KnownType();
    [CompilerGeneratedAttribute]
public DataFormat get_DataFormat();
    [CompilerGeneratedAttribute]
public void set_DataFormat(DataFormat value);
}
[AttributeUsageAttribute("384")]
public class ProtoBuf.ProtoMapAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DataFormat <KeyFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <ValueFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMap>k__BackingField;
    public DataFormat KeyFormat { get; public set; }
    public DataFormat ValueFormat { get; public set; }
    public bool DisableMap { get; public set; }
    [CompilerGeneratedAttribute]
public DataFormat get_KeyFormat();
    [CompilerGeneratedAttribute]
public void set_KeyFormat(DataFormat value);
    [CompilerGeneratedAttribute]
public DataFormat get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(DataFormat value);
    [CompilerGeneratedAttribute]
public bool get_DisableMap();
    [CompilerGeneratedAttribute]
public void set_DisableMap(bool value);
}
[AttributeUsageAttribute("384")]
public class ProtoBuf.ProtoMemberAttribute : Attribute {
    internal MemberInfo Member;
    internal MemberInfo BackingMember;
    internal bool TagIsPinned;
    private string name;
    private DataFormat dataFormat;
    private int tag;
    private MemberSerializationOptions options;
    public string Name { get; public set; }
    public DataFormat DataFormat { get; public set; }
    public int Tag { get; }
    public bool IsRequired { get; public set; }
    public bool IsPacked { get; public set; }
    public bool OverwriteList { get; public set; }
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "True")]
public bool AsReference { get; public set; }
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "True")]
internal bool AsReferenceHasValue { get; internal set; }
    [ObsoleteAttribute("Reference-tracking and dynamic-type are not currently implemented in this build; they may be reinstated later; this is partly due to doubts over whether the features are adviseable, and partly over confidence in testing all the scenarios (it takes time; that time hasn't get happened); feedback is invited", "True")]
public bool DynamicType { get; public set; }
    public MemberSerializationOptions Options { get; public set; }
    public ProtoMemberAttribute(int tag);
    internal ProtoMemberAttribute(int tag, bool forced);
    public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(ProtoMemberAttribute other);
    public string get_Name();
    public void set_Name(string value);
    public DataFormat get_DataFormat();
    public void set_DataFormat(DataFormat value);
    public int get_Tag();
    internal void Rebase(int tag);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public bool get_IsPacked();
    public void set_IsPacked(bool value);
    public bool get_OverwriteList();
    public void set_OverwriteList(bool value);
    public bool get_AsReference();
    public void set_AsReference(bool value);
    internal bool get_AsReferenceHasValue();
    internal void set_AsReferenceHasValue(bool value);
    public bool get_DynamicType();
    public void set_DynamicType(bool value);
    public MemberSerializationOptions get_Options();
    public void set_Options(MemberSerializationOptions value);
}
[AttributeUsageAttribute("4")]
public class ProtoBuf.ProtoPartialIgnoreAttribute : ProtoIgnoreAttribute {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string MemberName { get; }
    public ProtoPartialIgnoreAttribute(string memberName);
    [CompilerGeneratedAttribute]
public string get_MemberName();
}
[AttributeUsageAttribute("4")]
public class ProtoBuf.ProtoPartialMemberAttribute : ProtoMemberAttribute {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string MemberName { get; private set; }
    public ProtoPartialMemberAttribute(int tag, string memberName);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
private void set_MemberName(string value);
}
public abstract class ProtoBuf.ProtoReader : object {
    internal static string PreferStateAPI;
    internal static string PreferReadMessage;
    private TypeModel _model;
    private int _fieldNumber;
    private int _depth;
    private long blockEnd64;
    private NetObjectCache netCache;
    [CompilerGeneratedAttribute]
private WireType <WireType>k__BackingField;
    internal static long TO_EOF;
    [CompilerGeneratedAttribute]
private bool <InternStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserState>k__BackingField;
    private long _longPosition;
    private Dictionary`2<string, string> stringInterner;
    private protected static UTF8Encoding UTF8;
    internal static Byte[] EmptyBlob;
    internal static MethodImplOptions HotPath;
    private static FieldInfo s_origin;
    private static FieldInfo s_buffer;
    public int FieldNumber { get; }
    public WireType WireType { get; private protected set; }
    public bool InternStrings { get; public set; }
    public object UserState { get; private set; }
    [ObsoleteAttribute("Prefer UserState")]
public SerializationContext Context { get; }
    public int Position { get; }
    public long LongPosition { get; }
    public TypeModel Model { get; internal set; }
    private static ProtoReader();
    private protected abstract virtual int ImplTryReadUInt64VarintWithoutMoving(State& state, UInt64& value);
    private protected abstract virtual UInt32 ImplReadUInt32Fixed(State& state);
    private protected abstract virtual ulong ImplReadUInt64Fixed(State& state);
    private protected abstract virtual string ImplReadString(State& state, int bytes);
    private protected abstract virtual void ImplSkipBytes(State& state, long count);
    private protected abstract virtual int ImplTryReadUInt32VarintWithoutMoving(State& state, Read32VarintMode mode, UInt32& value);
    private protected abstract virtual void ImplReadBytes(State& state, Span`1<byte> target);
    private protected virtual void ImplReadBytes(State& state, ReadOnlySequence`1<byte> target);
    private protected abstract virtual bool IsFullyConsumed(State& state);
    private bool IncrDepth();
    private void DecrDepth();
    public int get_FieldNumber();
    [CompilerGeneratedAttribute]
public WireType get_WireType();
    [CompilerGeneratedAttribute]
private protected void set_WireType(WireType value);
    [CompilerGeneratedAttribute]
public bool get_InternStrings();
    [CompilerGeneratedAttribute]
public void set_InternStrings(bool value);
    internal void Init(TypeModel model, object userState);
    [CompilerGeneratedAttribute]
public sealed virtual object get_UserState();
    [CompilerGeneratedAttribute]
private void set_UserState(object value);
    public SerializationContext get_Context();
    public virtual void Dispose();
    public int get_Position();
    public long get_LongPosition();
    internal void Advance(long count);
    public short ReadInt16();
    public ushort ReadUInt16();
    public byte ReadByte();
    public sbyte ReadSByte();
    public UInt32 ReadUInt32();
    public int ReadInt32();
    public long ReadInt64();
    private protected string Intern(string value);
    public string ReadString();
    public void ThrowEnumException(Type type, int value);
    public double ReadDouble();
    public static object ReadObject(object value, Type type, ProtoReader reader);
    public static void EndSubItem(SubItemToken token, ProtoReader reader);
    public static SubItemToken StartSubItem(ProtoReader reader);
    public int ReadFieldHeader();
    private int SetTag(UInt32 tag);
    private static void ThrowInvalidField(int fieldNumber);
    private static void ThrowUnexpectedEndGroup();
    public bool TryReadFieldHeader(int field);
    public sealed virtual TypeModel get_Model();
    internal void set_Model(TypeModel value);
    public void Hint(WireType wireType);
    public void Assert(WireType wireType);
    public void SkipField();
    public ulong ReadUInt64();
    public float ReadSingle();
    public bool ReadBoolean();
    public static Byte[] AppendBytes(Byte[] value, ProtoReader reader);
    private static int ReadByteOrThrow(Stream source);
    public static int ReadLengthPrefix(Stream source, bool expectHeader, PrefixStyle style, Int32& fieldNumber);
    public static int DirectReadLittleEndianInt32(Stream source);
    public static int DirectReadBigEndianInt32(Stream source);
    public static int DirectReadVarintInt32(Stream source);
    public static void DirectReadBytes(Stream source, Byte[] buffer, int offset, int count);
    public static Byte[] DirectReadBytes(Stream source, int count);
    public static string DirectReadString(Stream source, int length);
    public static int ReadLengthPrefix(Stream source, bool expectHeader, PrefixStyle style, Int32& fieldNumber, Int32& bytesRead);
    public static long ReadLongLengthPrefix(Stream source, bool expectHeader, PrefixStyle style, Int32& fieldNumber, Int32& bytesRead);
    private static void ThrowEoF();
    private static int TryReadUInt64Varint(Stream source, UInt64& value);
    internal static void Seek(Stream source, long count, Byte[] buffer);
    public void AppendExtensionData(IExtensible instance);
    public static bool HasSubValue(WireType wireType, ProtoReader source);
    internal Type DeserializeType(string value);
    public Type ReadType();
    public static object Merge(ProtoReader parent, object from, object to);
    protected internal abstract virtual State DefaultState();
    private static void NoContextThrowEoF();
    private static void NoContextThrowOverflow();
    [ObsoleteAttribute("If possible, please use the State API; a transitionary implementation is provided, but this API may be removed in a future version", "False")]
public static ProtoReader Create(Stream source, TypeModel model, SerializationContext context, long length);
    internal static ProtoReader Create(Stream source, TypeModel model, object userState, long length);
    private static bool ReflectionTryGetBuffer(MemoryStream ms, ArraySegment`1& buffer);
    internal static bool TryConsumeSegmentRespectingPosition(Stream source, ArraySegment`1& data, long length);
}
[AttributeUsageAttribute("28")]
public class ProtoBuf.ProtoReservedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <From>k__BackingField;
    [CompilerGeneratedAttribute]
private int <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public int From { get; }
    public int To { get; }
    public string Name { get; }
    public string Comment { get; }
    public ProtoReservedAttribute(int field, string comment);
    public ProtoReservedAttribute(int from, int to, string comment);
    public ProtoReservedAttribute(string field, string comment);
    [CompilerGeneratedAttribute]
public int get_From();
    [CompilerGeneratedAttribute]
public int get_To();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Comment();
    internal void Verify();
}
internal enum ProtoBuf.ProtoTypeCode : Enum {
    public int value__;
    public static ProtoTypeCode Empty;
    public static ProtoTypeCode Unknown;
    public static ProtoTypeCode Boolean;
    public static ProtoTypeCode Char;
    public static ProtoTypeCode SByte;
    public static ProtoTypeCode Byte;
    public static ProtoTypeCode Int16;
    public static ProtoTypeCode UInt16;
    public static ProtoTypeCode Int32;
    public static ProtoTypeCode UInt32;
    public static ProtoTypeCode Int64;
    public static ProtoTypeCode UInt64;
    public static ProtoTypeCode Single;
    public static ProtoTypeCode Double;
    public static ProtoTypeCode Decimal;
    public static ProtoTypeCode DateTime;
    public static ProtoTypeCode String;
    public static ProtoTypeCode TimeSpan;
    public static ProtoTypeCode ByteArray;
    public static ProtoTypeCode Guid;
    public static ProtoTypeCode Uri;
    public static ProtoTypeCode Type;
    public static ProtoTypeCode ByteArraySegment;
    public static ProtoTypeCode ByteMemory;
    public static ProtoTypeCode ByteReadOnlyMemory;
    public static ProtoTypeCode IntPtr;
    public static ProtoTypeCode UIntPtr;
}
public abstract class ProtoBuf.ProtoWriter : object {
    private static MethodImplOptions HotPath;
    internal static string PreferWriteMessage;
    private TypeModel model;
    private int packedFieldNumber;
    private protected NetObjectCache netCache;
    private int fieldNumber;
    [CompilerGeneratedAttribute]
private WireType <WireType>k__BackingField;
    private int _depth;
    private static int RecursionCheckDepth;
    private List`1<object> recursionStack;
    [CompilerGeneratedAttribute]
private object <UserState>k__BackingField;
    private bool _needFlush;
    private long _position64;
    protected internal static UTF8Encoding UTF8;
    internal WireType WireType { get; internal set; }
    [ObsoleteAttribute("Prefer UserState")]
public SerializationContext Context { get; }
    public object UserState { get; private set; }
    internal int Depth { get; }
    public TypeModel Model { get; internal set; }
    private protected bool ImplDemandFlushOnDispose { get; }
    [ObsoleteAttribute("Please migrate to TypeModel.BufferSize")]
public static int BufferSize { get; public set; }
    private protected ProtoWriter(NetObjectCache knownObjects);
    private static ProtoWriter();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
internal WireType get_WireType();
    [CompilerGeneratedAttribute]
internal void set_WireType(WireType value);
    public static void WriteFieldHeader(int fieldNumber, WireType wireType, ProtoWriter writer);
    public static void WriteBytes(Byte[] data, ProtoWriter writer);
    public static void WriteBytes(Byte[] data, int offset, int length, ProtoWriter writer);
    [ObsoleteAttribute("If possible, please use the WriteMessage API; this API may not work correctly with all writers", "False")]
public static SubItemToken StartSubItem(object instance, ProtoWriter writer);
    private void PreSubItem(State& state, object instance);
    private void CheckRecursionStackAndPush(object instance);
    private void PopRecursionStack();
    [ObsoleteAttribute("If possible, please use the WriteMessage API; this API may not work correctly with all writers", "False")]
public static void EndSubItem(SubItemToken token, ProtoWriter writer);
    private void PostSubItem(State& state);
    internal virtual void Init(TypeModel model, object userState, bool impactCount);
    internal WriteState ResetWriteState();
    internal void SetWriteState(WriteState state);
    public SerializationContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual object get_UserState();
    [CompilerGeneratedAttribute]
private void set_UserState(object value);
    internal virtual void Dispose();
    private protected virtual void Cleanup();
    private protected virtual void ClearKnownObjects();
    protected internal virtual void WriteMessage(State& state, T value, ISerializer`1<T> serializer, PrefixStyle style, bool recursionCheck);
    internal virtual void WriteWrappedCollection(State& state, SerializerFeatures features, TCollection values, RepeatedSerializer`2<TCollection, TItem> serializer, ISerializer`1<TItem> valueSerializer);
    internal virtual void WriteWrappedMap(State& state, SerializerFeatures features, TCollection values, MapSerializer`3<TCollection, TKey, TValue> serializer, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    internal void WriteEmptyWrappedItem(State& state);
    internal virtual void WriteWrappedItem(State& state, SerializerFeatures features, T value, ISerializer`1<T> serializer);
    protected internal virtual void WriteSubType(State& state, T value, ISubTypeSerializer`1<T> serializer);
    public void Abandon();
    internal long GetPosition(State& state);
    private protected void Advance(long count);
    internal void AdvanceAndReset(int count);
    internal void AdvanceAndReset(long count);
    public void Close();
    internal int get_Depth();
    internal void CheckClear(State& state);
    public sealed virtual TypeModel get_Model();
    internal void set_Model(TypeModel value);
    internal static UInt32 Zig(int value);
    internal static ulong Zig(long value);
    public static void WriteString(string value, ProtoWriter writer);
    private protected abstract virtual void ImplWriteString(State& state, string value, int expectedBytes);
    private protected abstract virtual int ImplWriteVarint32(State& state, UInt32 value);
    internal abstract virtual int ImplWriteVarint64(State& state, ulong value);
    private protected abstract virtual void ImplWriteFixed32(State& state, UInt32 value);
    private protected abstract virtual void ImplWriteFixed64(State& state, ulong value);
    private protected abstract virtual void ImplWriteBytes(State& state, ReadOnlySpan`1<byte> data);
    private protected abstract virtual void ImplWriteBytes(State& state, ReadOnlySequence`1<byte> data);
    private protected abstract virtual void ImplCopyRawFromStream(State& state, Stream source);
    private protected abstract virtual SubItemToken ImplStartLengthPrefixedSubItem(State& state, object instance, PrefixStyle style);
    private protected abstract virtual void ImplEndLengthPrefixedSubItem(State& state, SubItemToken token, PrefixStyle style);
    private protected abstract virtual bool get_ImplDemandFlushOnDispose();
    private protected abstract virtual bool TryFlush(State& state);
    public static void WriteUInt64(ulong value, ProtoWriter writer);
    public static void WriteInt64(long value, ProtoWriter writer);
    public static void WriteUInt32(UInt32 value, ProtoWriter writer);
    public static void WriteInt16(short value, ProtoWriter writer);
    public static void WriteUInt16(ushort value, ProtoWriter writer);
    public static void WriteByte(byte value, ProtoWriter writer);
    public static void WriteSByte(sbyte value, ProtoWriter writer);
    public static void WriteInt32(int value, ProtoWriter writer);
    public static void WriteDouble(double value, ProtoWriter writer);
    public static void WriteSingle(float value, ProtoWriter writer);
    public static void ThrowEnumException(ProtoWriter writer, object enumValue);
    public static void WriteBoolean(bool value, ProtoWriter writer);
    public static void AppendExtensionData(IExtensible instance, ProtoWriter writer);
    public static void SetPackedField(int fieldNumber, ProtoWriter writer);
    public static void ClearPackedField(int fieldNumber, ProtoWriter writer);
    public static void WritePackedPrefix(int elementCount, WireType wireType, ProtoWriter writer);
    internal string SerializeType(Type type);
    public static int get_BufferSize();
    public static void set_BufferSize(int value);
    public static void WriteType(Type value, ProtoWriter writer);
    internal static long MeasureRepeated(NullProtoWriter writer, int fieldNumber, SerializerFeatures features, TCollection values, RepeatedSerializer`2<TCollection, TItem> serializer, ISerializer`1<TItem> valueSerializer);
    internal static long MeasureMap(NullProtoWriter writer, int fieldNumber, SerializerFeatures features, TCollection values, MapSerializer`3<TCollection, TKey, TValue> serializer, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    internal static long MeasureAny(NullProtoWriter writer, int fieldNumber, SerializerFeatures features, T value, ISerializer`1<T> serializer);
    internal static long Measure(NullProtoWriter writer, T value, ISerializer`1<T> serializer);
    internal static long Measure(NullProtoWriter writer, T value, ISubTypeSerializer`1<T> serializer);
    internal static State CreateNull(TypeModel model, object userState, long abortAfter);
    internal static int MeasureInt32(int value);
    internal static int MeasureUInt32(UInt32 value);
    internal static int MeasureInt64(long value);
    internal static int MeasureUInt64(ulong value);
    protected internal abstract virtual State DefaultState();
    internal void InitializeFrom(ProtoWriter writer);
    internal void CopyBack(ProtoWriter writer);
    internal int GetLengthHits(Int32& misses);
    [ObsoleteAttribute("If possible, please use the State API; a transitionary implementation is provided, but this API may be removed in a future version", "False")]
public static ProtoWriter Create(Stream dest, TypeModel model, SerializationContext context);
}
public class ProtoBuf.SerializationContext : object {
    private bool frozen;
    private object context;
    [CompilerGeneratedAttribute]
private static SerializationContext <Default>k__BackingField;
    private StreamingContextStates state;
    public object Context { get; public set; }
    internal static SerializationContext Default { get; }
    public StreamingContextStates State { get; public set; }
    private static SerializationContext();
    internal void Freeze();
    private void ThrowIfFrozen();
    public object get_Context();
    public void set_Context(object value);
    [CompilerGeneratedAttribute]
internal static SerializationContext get_Default();
    public StreamingContextStates get_State();
    public void set_State(StreamingContextStates value);
    public static StreamingContext op_Implicit(SerializationContext ctx);
    public static SerializationContext op_Implicit(StreamingContext ctx);
    public static StreamingContext AsStreamingContext(ISerializationContext context);
    public static SerializationContext AsSerializationContext(ISerializationContext context);
}
internal class ProtoBuf.Serializers.ConcurrentBagSerializer`2 : ProducerConsumerSerializer`2<TCollection, T> {
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
}
internal class ProtoBuf.Serializers.ConcurrentDictionarySerializer`3 : MapSerializer`3<TCollection, TKey, TValue> {
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual TCollection SetValues(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, TCollection values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.ConcurrentQueueSerializer`2 : ProducerConsumerSerializer`2<TCollection, T> {
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
}
internal class ProtoBuf.Serializers.ConcurrentStackSerializer`2 : ProducerConsumerSerializer`2<TCollection, T> {
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
}
public class ProtoBuf.Serializers.DefaultMemoryConverter`1 : object {
    [CompilerGeneratedAttribute]
private static DefaultMemoryConverter`1<T> <Instance>k__BackingField;
    public static DefaultMemoryConverter`1<T> Instance { get; }
    private static DefaultMemoryConverter`1();
    internal static IMemoryConverter`2<TStorage, T> GetFor(TypeModel model);
    private static IMemoryConverter`2<TStorage, T> NotSupported();
    [CompilerGeneratedAttribute]
public static DefaultMemoryConverter`1<T> get_Instance();
    private sealed virtual override T[] ProtoBuf.Serializers.IMemoryConverter<T[],T>.NonNull(T[]& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override int ProtoBuf.Serializers.IMemoryConverter<T[],T>.GetLength(T[]& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<T[],T>.GetMemory(T[]& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<T[],T>.Expand(ISerializationContext context, T[]& value, int additionalCapacity);
    private sealed virtual override ArraySegment`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ArraySegment<T>,T>.NonNull(ArraySegment`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override int ProtoBuf.Serializers.IMemoryConverter<System.ArraySegment<T>,T>.GetLength(ArraySegment`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ArraySegment<T>,T>.GetMemory(ArraySegment`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ArraySegment<T>,T>.Expand(ISerializationContext context, ArraySegment`1& value, int additionalCapacity);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.Memory<T>,T>.NonNull(Memory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override int ProtoBuf.Serializers.IMemoryConverter<System.Memory<T>,T>.GetLength(Memory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.Memory<T>,T>.GetMemory(Memory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.Memory<T>,T>.Expand(ISerializationContext context, Memory`1& value, int additionalCapacity);
    private sealed virtual override ReadOnlyMemory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ReadOnlyMemory<T>,T>.NonNull(ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override int ProtoBuf.Serializers.IMemoryConverter<System.ReadOnlyMemory<T>,T>.GetLength(ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ReadOnlyMemory<T>,T>.GetMemory(ReadOnlyMemory`1& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override Memory`1<T> ProtoBuf.Serializers.IMemoryConverter<System.ReadOnlyMemory<T>,T>.Expand(ISerializationContext context, ReadOnlyMemory`1& value, int additionalCapacity);
}
internal class ProtoBuf.Serializers.DictionaryOfIReadOnlyDictionarySerializer`2 : MapSerializer`3<IReadOnlyDictionary`2<TKey, TValue>, TKey, TValue> {
    protected virtual IReadOnlyDictionary`2<TKey, TValue> Initialize(IReadOnlyDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual IReadOnlyDictionary`2<TKey, TValue> Clear(IReadOnlyDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual IReadOnlyDictionary`2<TKey, TValue> AddRange(IReadOnlyDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IReadOnlyDictionary`2<TKey, TValue> SetValues(IReadOnlyDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, IReadOnlyDictionary`2<TKey, TValue> values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.DictionarySerializer`2 : MapSerializer`3<Dictionary`2<TKey, TValue>, TKey, TValue> {
    protected virtual Dictionary`2<TKey, TValue> Initialize(Dictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual Dictionary`2<TKey, TValue> Clear(Dictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual Dictionary`2<TKey, TValue> AddRange(Dictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual Dictionary`2<TKey, TValue> SetValues(Dictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, Dictionary`2<TKey, TValue> values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.DictionarySerializer`3 : MapSerializer`3<TCollection, TKey, TValue> {
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual TCollection SetValues(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, TCollection values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.EnumerableSerializer`3 : RepeatedSerializer`2<TCollection, T> {
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual int TryGetCount(TCollection values);
    internal virtual long Measure(TCollection values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<T> serializer, SerializerFeatures features);
    private static void ThrowInvalidCollectionType(object collection);
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
}
public static class ProtoBuf.Serializers.EnumSerializer : object {
    public static EnumSerializer`1<T> CreateSByte();
    public static EnumSerializer`1<T> CreateInt16();
    public static EnumSerializer`1<T> CreateInt32();
    public static EnumSerializer`1<T> CreateInt64();
    public static EnumSerializer`1<T> CreateByte();
    public static EnumSerializer`1<T> CreateUInt16();
    public static EnumSerializer`1<T> CreateUInt32();
    public static EnumSerializer`1<T> CreateUInt64();
}
public abstract class ProtoBuf.Serializers.EnumSerializer`1 : object {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<TEnum>.Features { get; }
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<TEnum?>.Features { get; }
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<TEnum>.get_Features();
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<TEnum?>.get_Features();
    private sealed virtual override Nullable`1<TEnum> ProtoBuf.Serializers.ISerializer<TEnum?>.Read(State& state, Nullable`1<TEnum> value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<TEnum?>.Write(State& state, Nullable`1<TEnum> value);
    public abstract virtual TEnum Read(State& state, TEnum value);
    public abstract virtual void Write(State& state, TEnum value);
}
internal abstract class ProtoBuf.Serializers.EnumSerializer`2 : EnumSerializer`1<TEnum> {
    private protected static int NegLength;
    protected abstract virtual TRaw Read(State& state);
    protected abstract virtual void Write(State& state, TRaw value);
    public abstract virtual int MeasureVarint(TRaw value);
    public virtual int MeasureSignedVarint(TRaw value);
    public virtual TEnum Read(State& state, TEnum value);
    public virtual void Write(State& state, TEnum value);
    public sealed virtual int Measure(ISerializationContext context, WireType wireType, TEnum value);
    private sealed virtual override int ProtoBuf.Serializers.IMeasuringSerializer<TEnum?>.Measure(ISerializationContext context, WireType wireType, Nullable`1<TEnum> value);
}
internal class ProtoBuf.Serializers.EnumSerializerByte`1 : EnumSerializer`2<T, byte> {
    protected virtual byte Read(State& state);
    protected virtual void Write(State& state, byte value);
    public virtual int MeasureVarint(byte value);
}
internal class ProtoBuf.Serializers.EnumSerializerInt16`1 : EnumSerializer`2<T, short> {
    protected virtual short Read(State& state);
    protected virtual void Write(State& state, short value);
    public virtual int MeasureVarint(short value);
    public virtual int MeasureSignedVarint(short value);
}
internal class ProtoBuf.Serializers.EnumSerializerInt32`1 : EnumSerializer`2<T, int> {
    protected virtual int Read(State& state);
    protected virtual void Write(State& state, int value);
    public virtual int MeasureVarint(int value);
    public virtual int MeasureSignedVarint(int value);
}
internal class ProtoBuf.Serializers.EnumSerializerInt64`1 : EnumSerializer`2<T, long> {
    protected virtual long Read(State& state);
    protected virtual void Write(State& state, long value);
    public virtual int MeasureVarint(long value);
    public virtual int MeasureSignedVarint(long value);
}
internal class ProtoBuf.Serializers.EnumSerializerSByte`1 : EnumSerializer`2<T, sbyte> {
    protected virtual sbyte Read(State& state);
    protected virtual void Write(State& state, sbyte value);
    public virtual int MeasureVarint(sbyte value);
    public virtual int MeasureSignedVarint(sbyte value);
}
internal class ProtoBuf.Serializers.EnumSerializerUInt16`1 : EnumSerializer`2<T, ushort> {
    protected virtual ushort Read(State& state);
    protected virtual void Write(State& state, ushort value);
    public virtual int MeasureVarint(ushort value);
}
internal class ProtoBuf.Serializers.EnumSerializerUInt32`1 : EnumSerializer`2<T, UInt32> {
    protected virtual UInt32 Read(State& state);
    protected virtual void Write(State& state, UInt32 value);
    public virtual int MeasureVarint(UInt32 value);
}
internal class ProtoBuf.Serializers.EnumSerializerUInt64`1 : EnumSerializer`2<T, ulong> {
    protected virtual ulong Read(State& state);
    protected virtual void Write(State& state, ulong value);
    public virtual int MeasureVarint(ulong value);
}
public abstract class ProtoBuf.Serializers.ExternalMapSerializer`3 : MapSerializer`3<TCollection, TKey, TValue> {
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, TCollection values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
public abstract class ProtoBuf.Serializers.ExternalSerializer`2 : RepeatedSerializer`2<TCollection, T> {
    internal virtual long Measure(TCollection values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<T> serializer, SerializerFeatures features);
}
public interface ProtoBuf.Serializers.IFactory`1 {
    public abstract virtual T Create(ISerializationContext context);
}
internal interface ProtoBuf.Serializers.IMeasuringSerializer`1 {
    public abstract virtual int Measure(ISerializationContext context, WireType wireType, T value);
}
public interface ProtoBuf.Serializers.IMemoryConverter`2 {
    public abstract virtual TStorage NonNull(TStorage& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual int GetLength(TStorage& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual Memory`1<TElement> GetMemory(TStorage& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual Memory`1<TElement> Expand(ISerializationContext context, TStorage& value, int additionalCapacity);
}
internal class ProtoBuf.Serializers.ImmutableArraySerializer`1 : RepeatedSerializer`2<ImmutableArray`1<T>, T> {
    protected virtual ImmutableArray`1<T> Initialize(ImmutableArray`1<T> values, ISerializationContext context);
    protected virtual ImmutableArray`1<T> Clear(ImmutableArray`1<T> values, ISerializationContext context);
    protected virtual ImmutableArray`1<T> AddRange(ImmutableArray`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableArray`1<T> values);
    internal virtual long Measure(ImmutableArray`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, ImmutableArray`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableArray`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
}
internal class ProtoBuf.Serializers.ImmutableDictionarySerializer`2 : MapSerializer`3<ImmutableDictionary`2<TKey, TValue>, TKey, TValue> {
    protected virtual ImmutableDictionary`2<TKey, TValue> Clear(ImmutableDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual ImmutableDictionary`2<TKey, TValue> Initialize(ImmutableDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual ImmutableDictionary`2<TKey, TValue> AddRange(ImmutableDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableDictionary`2<TKey, TValue> SetValues(ImmutableDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, ImmutableDictionary`2<TKey, TValue> values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.ImmutableHashSetSerializer`1 : RepeatedSerializer`2<ImmutableHashSet`1<T>, T> {
    protected virtual ImmutableHashSet`1<T> Initialize(ImmutableHashSet`1<T> values, ISerializationContext context);
    protected virtual ImmutableHashSet`1<T> AddRange(ImmutableHashSet`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableHashSet`1<T> Clear(ImmutableHashSet`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableHashSet`1<T> values);
    internal virtual long Measure(ImmutableHashSet`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableHashSet`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, ImmutableHashSet`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableIDictionarySerializer`2 : MapSerializer`3<IImmutableDictionary`2<TKey, TValue>, TKey, TValue> {
    protected virtual IImmutableDictionary`2<TKey, TValue> Clear(IImmutableDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual IImmutableDictionary`2<TKey, TValue> Initialize(IImmutableDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual IImmutableDictionary`2<TKey, TValue> AddRange(IImmutableDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IImmutableDictionary`2<TKey, TValue> SetValues(IImmutableDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, IImmutableDictionary`2<TKey, TValue> values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.ImmutableIListSerializer`1 : RepeatedSerializer`2<IImmutableList`1<T>, T> {
    protected virtual IImmutableList`1<T> Initialize(IImmutableList`1<T> values, ISerializationContext context);
    protected virtual IImmutableList`1<T> AddRange(IImmutableList`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IImmutableList`1<T> Clear(IImmutableList`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(IImmutableList`1<T> values);
    internal virtual long Measure(IImmutableList`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, IImmutableList`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, IImmutableList`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableIQueueSerializer`1 : RepeatedSerializer`2<IImmutableQueue`1<T>, T> {
    protected virtual IImmutableQueue`1<T> Initialize(IImmutableQueue`1<T> values, ISerializationContext context);
    protected virtual IImmutableQueue`1<T> AddRange(IImmutableQueue`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IImmutableQueue`1<T> Clear(IImmutableQueue`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(IImmutableQueue`1<T> values);
    internal virtual long Measure(IImmutableQueue`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, IImmutableQueue`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, IImmutableQueue`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableISetSerializer`1 : RepeatedSerializer`2<IImmutableSet`1<T>, T> {
    protected virtual IImmutableSet`1<T> Initialize(IImmutableSet`1<T> values, ISerializationContext context);
    protected virtual IImmutableSet`1<T> AddRange(IImmutableSet`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IImmutableSet`1<T> Clear(IImmutableSet`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(IImmutableSet`1<T> values);
    internal virtual long Measure(IImmutableSet`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, IImmutableSet`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, IImmutableSet`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableIStackSerializer`1 : RepeatedSerializer`2<IImmutableStack`1<T>, T> {
    protected virtual IImmutableStack`1<T> Initialize(IImmutableStack`1<T> values, ISerializationContext context);
    protected virtual IImmutableStack`1<T> AddRange(IImmutableStack`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual IImmutableStack`1<T> Clear(IImmutableStack`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(IImmutableStack`1<T> values);
    internal virtual long Measure(IImmutableStack`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, IImmutableStack`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, IImmutableStack`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableListSerializer`1 : RepeatedSerializer`2<ImmutableList`1<T>, T> {
    protected virtual ImmutableList`1<T> Initialize(ImmutableList`1<T> values, ISerializationContext context);
    protected virtual ImmutableList`1<T> AddRange(ImmutableList`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableList`1<T> Clear(ImmutableList`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableList`1<T> values);
    internal virtual long Measure(ImmutableList`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableList`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, ImmutableList`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableQueueSerializer`1 : RepeatedSerializer`2<ImmutableQueue`1<T>, T> {
    protected virtual ImmutableQueue`1<T> Initialize(ImmutableQueue`1<T> values, ISerializationContext context);
    protected virtual ImmutableQueue`1<T> AddRange(ImmutableQueue`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableQueue`1<T> Clear(ImmutableQueue`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableQueue`1<T> values);
    internal virtual long Measure(ImmutableQueue`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableQueue`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, ImmutableQueue`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableSortedDictionarySerializer`2 : MapSerializer`3<ImmutableSortedDictionary`2<TKey, TValue>, TKey, TValue> {
    protected virtual ImmutableSortedDictionary`2<TKey, TValue> Clear(ImmutableSortedDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual ImmutableSortedDictionary`2<TKey, TValue> Initialize(ImmutableSortedDictionary`2<TKey, TValue> values, ISerializationContext context);
    protected virtual ImmutableSortedDictionary`2<TKey, TValue> AddRange(ImmutableSortedDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableSortedDictionary`2<TKey, TValue> SetValues(ImmutableSortedDictionary`2<TKey, TValue> values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual void Write(State& state, int fieldNumber, WireType wireType, ImmutableSortedDictionary`2<TKey, TValue> values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
}
internal class ProtoBuf.Serializers.ImmutableSortedSetSerializer`1 : RepeatedSerializer`2<ImmutableSortedSet`1<T>, T> {
    protected virtual ImmutableSortedSet`1<T> Initialize(ImmutableSortedSet`1<T> values, ISerializationContext context);
    protected virtual ImmutableSortedSet`1<T> AddRange(ImmutableSortedSet`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableSortedSet`1<T> Clear(ImmutableSortedSet`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableSortedSet`1<T> values);
    internal virtual long Measure(ImmutableSortedSet`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableSortedSet`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, ImmutableSortedSet`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.ImmutableStackSerializer`1 : RepeatedSerializer`2<ImmutableStack`1<T>, T> {
    protected virtual ImmutableStack`1<T> Initialize(ImmutableStack`1<T> values, ISerializationContext context);
    protected virtual ImmutableStack`1<T> AddRange(ImmutableStack`1<T> values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual ImmutableStack`1<T> Clear(ImmutableStack`1<T> values, ISerializationContext context);
    protected virtual int TryGetCount(ImmutableStack`1<T> values);
    internal virtual long Measure(ImmutableStack`1<T> values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, ImmutableStack`1<T> values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, ImmutableStack`1<T> values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
[ObsoleteAttribute("This API is deprecated and is never used; it will be removed soon", "True")]
public interface ProtoBuf.Serializers.IObjectSerializer`1 {
    public Type BaseType { get; }
    public abstract virtual Type get_BaseType();
}
public interface ProtoBuf.Serializers.IRepeatedSerializer`1 {
    public abstract virtual void WriteRepeated(State& state, int fieldNumber, SerializerFeatures features, T values);
    public abstract virtual T ReadRepeated(State& state, SerializerFeatures features, T values);
}
public interface ProtoBuf.Serializers.ISerializer`1 {
    public SerializerFeatures Features { get; }
    public abstract virtual T Read(State& state, T value);
    public abstract virtual void Write(State& state, T value);
    public abstract virtual SerializerFeatures get_Features();
}
public interface ProtoBuf.Serializers.ISerializerProxy`1 {
    public ISerializer`1<T> Serializer { get; }
    public abstract virtual ISerializer`1<T> get_Serializer();
}
public interface ProtoBuf.Serializers.ISubTypeSerializer`1 {
    public abstract virtual void WriteSubType(State& state, T value);
    public abstract virtual T ReadSubType(State& state, SubTypeState`1<T> value);
}
internal class ProtoBuf.Serializers.ListSerializer`1 : ListSerializer`2<List`1<T>, T> {
    protected virtual List`1<T> Initialize(List`1<T> values, ISerializationContext context);
}
internal class ProtoBuf.Serializers.ListSerializer`2 : RepeatedSerializer`2<TList, T> {
    protected virtual TList Initialize(TList values, ISerializationContext context);
    protected virtual TList Clear(TList values, ISerializationContext context);
    protected virtual TList AddRange(TList values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual int TryGetCount(TList values);
    internal virtual long Measure(TList values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, TList values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TList values, ISerializer`1<T> serializer, SerializerFeatures features);
}
public static class ProtoBuf.Serializers.MapSerializer : object {
    public static MapSerializer`3<TCollection, TKey, TValue> CreateConcurrentDictionary();
    public static MapSerializer`3<Dictionary`2<TKey, TValue>, TKey, TValue> CreateDictionary();
    public static MapSerializer`3<TCollection, TKey, TValue> CreateDictionary();
    public static MapSerializer`3<IReadOnlyDictionary`2<TKey, TValue>, TKey, TValue> CreateIReadOnlyDictionary();
    public static MapSerializer`3<ImmutableDictionary`2<TKey, TValue>, TKey, TValue> CreateImmutableDictionary();
    public static MapSerializer`3<ImmutableSortedDictionary`2<TKey, TValue>, TKey, TValue> CreateImmutableSortedDictionary();
    public static MapSerializer`3<IImmutableDictionary`2<TKey, TValue>, TKey, TValue> CreateIImmutableDictionary();
}
public abstract class ProtoBuf.Serializers.MapSerializer`3 : object {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<TCollection>.Features { get; }
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<TCollection>.get_Features();
    private sealed virtual override TCollection ProtoBuf.Serializers.IFactory<TCollection>.Create(ISerializationContext context);
    private sealed virtual override TCollection ProtoBuf.Serializers.ISerializer<TCollection>.Read(State& state, TCollection value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<TCollection>.Write(State& state, TCollection value);
    private sealed virtual override void ProtoBuf.Serializers.IRepeatedSerializer<TCollection>.WriteRepeated(State& state, int fieldNumber, SerializerFeatures features, TCollection values);
    private sealed virtual override TCollection ProtoBuf.Serializers.IRepeatedSerializer<TCollection>.ReadRepeated(State& state, SerializerFeatures features, TCollection values);
    private static KeyValuePairSerializer`2<TKey, TValue> GetSerializer(TypeModel model, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    public void WriteMap(State& state, int fieldNumber, SerializerFeatures features, TCollection values, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    private void WriteNullWrapped(State& state, SerializerFeatures features, int fieldNumber, TCollection values, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    internal abstract virtual void Write(State& state, int fieldNumber, WireType wireType, TCollection values, KeyValuePairSerializer`2& modreq(System.Runtime.InteropServices.InAttribute) pairSerializer);
    internal static void Write(State& state, int fieldNumber, WireType wireType, TEnumerator& enumerator, KeyValuePairSerializer`2& pairSerializer);
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected abstract virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected abstract virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    protected abstract virtual TCollection SetValues(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    public TCollection ReadMap(State& state, SerializerFeatures features, TCollection values, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
    private TCollection ReadNullWrapped(State& state, SerializerFeatures features, TCollection values, SerializerFeatures keyFeatures, SerializerFeatures valueFeatures, ISerializer`1<TKey> keySerializer, ISerializer`1<TValue> valueSerializer);
}
internal class ProtoBuf.Serializers.ProducerConsumerSerializer`2 : RepeatedSerializer`2<TCollection, T> {
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual int TryGetCount(TCollection values);
    internal virtual long Measure(TCollection values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<T> serializer, SerializerFeatures features);
    internal virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<T> serializer, WireType wireType);
}
internal class ProtoBuf.Serializers.QueueSerializer`2 : RepeatedSerializer`2<TCollection, T> {
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual int TryGetCount(TCollection values);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual long Measure(TCollection values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<T> serializer, SerializerFeatures features);
}
[ExtensionAttribute]
public static class ProtoBuf.Serializers.RepeatedSerializer : object {
    public static RepeatedSerializer`2<TCollection, T> CreateConcurrentBag();
    public static RepeatedSerializer`2<TCollection, T> CreateConcurrentStack();
    public static RepeatedSerializer`2<TCollection, T> CreateConcurrentQueue();
    public static RepeatedSerializer`2<TCollection, T> CreateIProducerConsumerCollection();
    [ObsoleteAttribute("Since this isn't supported, you probably shouldn't be doing it...", "False")]
public static RepeatedSerializer`2<TCollection, T> CreateNestedDataNotSupported();
    [ObsoleteAttribute("Since this isn't supported, you probably shouldn't be doing it...", "False")]
public static RepeatedSerializer`2<TCollection, T> CreateNotSupported();
    public static RepeatedSerializer`2<List`1<T>, T> CreateList();
    public static RepeatedSerializer`2<TList, T> CreateList();
    public static RepeatedSerializer`2<TCollection, T> CreateEnumerable();
    public static RepeatedSerializer`2<TCollection, T> CreateEnumerable();
    public static RepeatedSerializer`2<T[], T> CreateVector();
    public static RepeatedSerializer`2<TCollection, T> CreateQueue();
    public static RepeatedSerializer`2<TCollection, T> CreateStack();
    [ExtensionAttribute]
internal static void ReverseInPlace(ArraySegment`1& values);
    [ExtensionAttribute]
internal static T& Singleton(ArraySegment`1& values);
    public static RepeatedSerializer`2<ImmutableArray`1<T>, T> CreateImmutableArray();
    public static RepeatedSerializer`2<ImmutableList`1<T>, T> CreateImmutableList();
    public static RepeatedSerializer`2<IImmutableList`1<T>, T> CreateImmutableIList();
    public static RepeatedSerializer`2<ImmutableQueue`1<T>, T> CreateImmutableQueue();
    public static RepeatedSerializer`2<IImmutableQueue`1<T>, T> CreateImmutableIQueue();
    public static RepeatedSerializer`2<ImmutableStack`1<T>, T> CreateImmutableStack();
    public static RepeatedSerializer`2<IImmutableStack`1<T>, T> CreateImmutableIStack();
    public static RepeatedSerializer`2<ImmutableHashSet`1<T>, T> CreateImmutableHashSet();
    public static RepeatedSerializer`2<ImmutableSortedSet`1<T>, T> CreateImmutableSortedSet();
    public static RepeatedSerializer`2<IImmutableSet`1<T>, T> CreateImmutableISet();
}
public abstract class ProtoBuf.Serializers.RepeatedSerializer`2 : object {
    private SerializerFeatures ProtoBuf.Serializers.ISerializer<TCollection>.Features { get; }
    private sealed virtual override TCollection ProtoBuf.Serializers.IFactory<TCollection>.Create(ISerializationContext context);
    private sealed virtual override SerializerFeatures ProtoBuf.Serializers.ISerializer<TCollection>.get_Features();
    private sealed virtual override void ProtoBuf.Serializers.IRepeatedSerializer<TCollection>.WriteRepeated(State& state, int fieldNumber, SerializerFeatures features, TCollection values);
    private sealed virtual override TCollection ProtoBuf.Serializers.IRepeatedSerializer<TCollection>.ReadRepeated(State& state, SerializerFeatures features, TCollection values);
    private sealed virtual override TCollection ProtoBuf.Serializers.ISerializer<TCollection>.Read(State& state, TCollection value);
    private sealed virtual override void ProtoBuf.Serializers.ISerializer<TCollection>.Write(State& state, TCollection value);
    private void WriteNullWrapped(State& state, int fieldNumber, SerializerFeatures features, TCollection values, ISerializer`1<TItem> serializer);
    public void WriteRepeated(State& state, int fieldNumber, SerializerFeatures features, TCollection values, ISerializer`1<TItem> serializer);
    private static void WriteZeroLengthPackedHeader(State& state, int fieldNumber);
    internal abstract virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<TItem> serializer, SerializerFeatures features);
    internal static void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TEnumerator& values, ISerializer`1<TItem> serializer, SerializerFeatures features);
    internal abstract virtual long Measure(TCollection values, IMeasuringSerializer`1<TItem> serializer, ISerializationContext context, WireType wireType);
    internal static long Measure(TEnumerator& values, IMeasuringSerializer`1<TItem> serializer, ISerializationContext context, WireType wireType);
    internal abstract virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<TItem> serializer, WireType wireType);
    internal static void WritePacked(State& state, TEnumerator& values, IMeasuringSerializer`1<TItem> serializer, WireType wireType);
    private void WritePacked(State& state, int fieldNumber, WireType wireType, TCollection values, int count, IMeasuringSerializer`1<TItem> serializer);
    protected abstract virtual int TryGetCount(TCollection values);
    protected int TryGetCountDefault(TCollection values);
    private TCollection ReadNullWrapped(State& state, SerializerFeatures features, TCollection values, ISerializer`1<TItem> serializer);
    public TCollection ReadRepeated(State& state, SerializerFeatures features, TCollection values, ISerializer`1<TItem> serializer);
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected abstract virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected abstract virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
}
public static class ProtoBuf.Serializers.SerializerCache : object {
    private static void ThrowInvalidSerializer(ISerializer`1<T> serializer, string message, Exception innerException);
    internal static ISerializer`1<T> Verify(ISerializer`1<T> serializer);
    public static ISerializer`1<T> Get();
    internal static object GetInstance(Type providerType, Type type);
}
internal static class ProtoBuf.Serializers.SerializerCache`1 : object {
    internal static TProvider InstanceField;
    private static SerializerCache`1();
    public static ISerializer`1<T> GetSerializer();
}
internal static class ProtoBuf.Serializers.SerializerCache`2 : object {
    internal static ISerializer`1<T> InstanceField;
    public static ISerializer`1<T> Instance { get; }
    private static SerializerCache`2();
    public static ISerializer`1<T> get_Instance();
}
[FlagsAttribute]
public enum ProtoBuf.Serializers.SerializerFeatures : Enum {
    public int value__;
    public static SerializerFeatures WireTypeVarint;
    public static SerializerFeatures WireTypeFixed64;
    public static SerializerFeatures WireTypeString;
    public static SerializerFeatures WireTypeStartGroup;
    public static SerializerFeatures WireTypeFixed32;
    public static SerializerFeatures WireTypeSignedVarint;
    public static SerializerFeatures WireTypeSpecified;
    public static SerializerFeatures CategoryRepeated;
    public static SerializerFeatures CategoryScalar;
    public static SerializerFeatures CategoryMessage;
    public static SerializerFeatures CategoryMessageWrappedAtRoot;
    public static SerializerFeatures OptionPackedDisabled;
    public static SerializerFeatures OptionClearCollection;
    public static SerializerFeatures OptionFailOnDuplicateKey;
    public static SerializerFeatures OptionSkipRecursionCheck;
    public static SerializerFeatures OptionWrappedValue;
    public static SerializerFeatures OptionWrappedValueGroup;
    public static SerializerFeatures OptionWrappedValueFieldPresence;
    public static SerializerFeatures OptionWrappedCollection;
    public static SerializerFeatures OptionWrappedCollectionGroup;
}
[ExtensionAttribute]
internal static class ProtoBuf.Serializers.SerializerFeaturesExtensions : object {
    private static SerializerFeatures CategoryMask;
    private static SerializerFeatures WireTypeMask;
    [ExtensionAttribute]
public static SerializerFeatures AsFeatures(WireType wireType);
    [ExtensionAttribute]
public static SerializerFeatures GetCategory(SerializerFeatures features);
    [ExtensionAttribute]
public static void InheritFrom(SerializerFeatures& features, SerializerFeatures overrides);
    [ExtensionAttribute]
public static void HintIfNeeded(SerializerFeatures features, State& state);
    [ExtensionAttribute]
public static void ThrowInvalidCategory(SerializerFeatures features);
    [ExtensionAttribute]
public static bool IsPackedDisabled(SerializerFeatures features);
    [ExtensionAttribute]
public static bool IsScalar(SerializerFeatures features);
    [ExtensionAttribute]
public static bool IsRepeated(SerializerFeatures features);
    [ExtensionAttribute]
public static bool IsGroup(SerializerFeatures features);
    [ExtensionAttribute]
public static bool HasAny(SerializerFeatures features, SerializerFeatures values);
    [ExtensionAttribute]
public static T DefaultFor(SerializerFeatures features);
    private static void ThrowWireTypeNotSpecified();
    [ExtensionAttribute]
public static WireType GetWireType(SerializerFeatures features);
    [ExtensionAttribute]
public static bool ApplyRecursionCheck(SerializerFeatures features);
}
internal class ProtoBuf.Serializers.StackSerializer`2 : RepeatedSerializer`2<TCollection, T> {
    protected virtual TCollection Initialize(TCollection values, ISerializationContext context);
    protected virtual TCollection Clear(TCollection values, ISerializationContext context);
    protected virtual int TryGetCount(TCollection values);
    protected virtual TCollection AddRange(TCollection values, ArraySegment`1& newValues, ISerializationContext context);
    internal virtual long Measure(TCollection values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, TCollection values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, TCollection values, ISerializer`1<T> serializer, SerializerFeatures features);
}
public class ProtoBuf.Serializers.SubTypeState`1 : ValueType {
    private ISerializationContext _context;
    private Func`2<ISerializationContext, object> _ctor;
    private object _value;
    private Action`2<T, ISerializationContext> _onBeforeDeserialize;
    public T Value { get; public set; }
    internal object RawValue { get; }
    public bool HasValue { get; }
    private SubTypeState`1(ISerializationContext context, Func`2<ISerializationContext, object> ctor, object value, Action`2<T, ISerializationContext> onBeforeDeserialize);
    public static SubTypeState`1<T> Create(ISerializationContext context, TValue value);
    public T get_Value();
    public void set_Value(T value);
    public void CreateIfNeeded();
    internal object get_RawValue();
    public bool get_HasValue();
    private T Cast();
    public void ReadSubType(State& state, ISubTypeSerializer`1<TSubType> serializer);
    public void OnBeforeDeserialize(Action`2<T, ISerializationContext> callback);
    [CompilerGeneratedAttribute]
internal static T <Cast>g__Merge|14_0(ISerializationContext context, object value, T typed);
}
internal class ProtoBuf.Serializers.VectorSerializer`1 : RepeatedSerializer`2<T[], T> {
    protected virtual T[] Initialize(T[] values, ISerializationContext context);
    protected virtual T[] Clear(T[] values, ISerializationContext context);
    protected virtual T[] AddRange(T[] values, ArraySegment`1& newValues, ISerializationContext context);
    protected virtual int TryGetCount(T[] values);
    internal virtual long Measure(T[] values, IMeasuringSerializer`1<T> serializer, ISerializationContext context, WireType wireType);
    internal virtual void WritePacked(State& state, T[] values, IMeasuringSerializer`1<T> serializer, WireType wireType);
    internal virtual void Write(State& state, int fieldNumber, SerializerFeatures category, WireType wireType, T[] values, ISerializer`1<T> serializer, SerializerFeatures features);
}
public class ProtoBuf.StringMap : object {
}
[IsReadOnlyAttribute]
public class ProtoBuf.SubItemToken : ValueType {
    internal long value64;
    internal SubItemToken(long value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal enum ProtoBuf.TimeSpanScale : Enum {
    public int value__;
    public static TimeSpanScale Days;
    public static TimeSpanScale Hours;
    public static TimeSpanScale Minutes;
    public static TimeSpanScale Seconds;
    public static TimeSpanScale Milliseconds;
    public static TimeSpanScale Ticks;
    public static TimeSpanScale MinMax;
}
[ExtensionAttribute]
public static class ProtoBuf.TypedExtensible : object {
    [ExtensionAttribute]
public static bool TryGetValue(ITypedExtensible instance, int tag, TValue& value, Type type, DataFormat format, TypeModel model);
    [ExtensionAttribute]
public static TValue GetValue(ITypedExtensible instance, int tag, Type type, DataFormat format, TypeModel model);
    [ExtensionAttribute]
public static IEnumerable`1<TValue> GetValues(ITypedExtensible instance, int tag, Type type, DataFormat format, TypeModel model);
    [ExtensionAttribute]
public static void AppendValue(ITypedExtensible instance, int tag, TValue value, Type type, DataFormat format, TypeModel model);
    private static IExtension GetExtension(ITypedExtensible instance, Type type, bool createIfMissing, TypeModel& model);
}
public class ProtoBuf.TypeResolver : MulticastDelegate {
    public TypeResolver(object object, IntPtr method);
    public virtual Type Invoke(int fieldNumber);
    public virtual IAsyncResult BeginInvoke(int fieldNumber, AsyncCallback callback, object object);
    public virtual Type EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
[ProtoContractAttribute]
public class ProtoBuf.WellKnownTypes.Duration : ValueType {
    [CompilerGeneratedAttribute]
private long <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Nanoseconds>k__BackingField;
    [ProtoMemberAttribute("1")]
public long Seconds { get; }
    [ProtoMemberAttribute("2")]
public int Nanoseconds { get; }
    public Duration(long seconds, int nanoseconds);
    public Duration(TimeSpan value);
    internal Duration(long ticks);
    [CompilerGeneratedAttribute]
public long get_Seconds();
    [CompilerGeneratedAttribute]
public int get_Nanoseconds();
    public TimeSpan AsTimeSpan();
    internal long ToTicks();
    public static TimeSpan op_Implicit(Duration value);
    public static Duration op_Implicit(TimeSpan value);
    public Duration Normalize();
}
[IsReadOnlyAttribute]
[ProtoContractAttribute]
public class ProtoBuf.WellKnownTypes.Empty : ValueType {
}
[IsReadOnlyAttribute]
[ProtoContractAttribute]
public class ProtoBuf.WellKnownTypes.Timestamp : ValueType {
    [CompilerGeneratedAttribute]
private long <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Nanoseconds>k__BackingField;
    private static DateTime TimestampEpoch;
    [ProtoMemberAttribute("1")]
public long Seconds { get; }
    [ProtoMemberAttribute("2")]
public int Nanoseconds { get; }
    public Timestamp(long seconds, int nanoseconds);
    public Timestamp(DateTime value);
    private static Timestamp();
    [CompilerGeneratedAttribute]
public long get_Seconds();
    [CompilerGeneratedAttribute]
public int get_Nanoseconds();
    public Timestamp Normalize();
    public DateTime AsDateTime();
    public static DateTime op_Implicit(Timestamp value);
    public static Timestamp op_Implicit(DateTime value);
}
public enum ProtoBuf.WireType : Enum {
    public int value__;
    public static WireType None;
    [ObsoleteAttribute("This is an embarrassing typo... sorry; see also: Varint")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static WireType Variant;
    public static WireType Varint;
    public static WireType Fixed64;
    public static WireType String;
    public static WireType StartGroup;
    public static WireType EndGroup;
    public static WireType Fixed32;
    [ObsoleteAttribute("This is an embarrassing typo... sorry; see also: SignedVarint")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static WireType SignedVariant;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static WireType SignedVarint;
}
[AttributeUsageAttribute("27072")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes All;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.119.9565")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
