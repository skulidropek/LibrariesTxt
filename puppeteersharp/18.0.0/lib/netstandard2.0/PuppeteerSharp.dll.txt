[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class PuppeteerSharp.AddTagOptions : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    public string Url { get; public set; }
    public string Path { get; public set; }
    public string Content { get; public set; }
    public string Type { get; public set; }
    public object Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(object value);
}
internal class PuppeteerSharp.AriaQueryOption : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    public string Name { get; public set; }
    public string Role { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
}
internal class PuppeteerSharp.Binding : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <Function>k__BackingField;
    public string Name { get; }
    public Delegate Function { get; }
    public Binding(string name, Delegate fn);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Delegate get_Function();
    [AsyncStateMachineAttribute("PuppeteerSharp.Binding/<RunAsync>d__7")]
internal Task RunAsync(ExecutionContext context, int id, Object[] args, bool isTrivial);
}
internal static class PuppeteerSharp.BindingUtils : object {
    internal static string PageBindingInitString(string type, string name);
    internal static string EvaluationString(string fun, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.BindingUtils/<ExecuteBindingAsync>d__2")]
internal static Task ExecuteBindingAsync(ExecutionContext context, BindingCalledResponse e, ConcurrentDictionary`2<string, Binding> pageBindings);
    [AsyncStateMachineAttribute("PuppeteerSharp.BindingUtils/<ExecuteBindingAsync>d__3")]
internal static Task`1<object> ExecuteBindingAsync(Delegate binding, Object[] rawArgs);
    [CompilerGeneratedAttribute]
internal static string <EvaluationString>g__SerializeArgument|1_0(object arg);
}
public class PuppeteerSharp.BoundingBox : object {
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Height>k__BackingField;
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public decimal Width { get; public set; }
    public decimal Height { get; public set; }
    public BoundingBox(decimal x, decimal y, decimal width, decimal height);
    [CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(decimal value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BoundingBox obj);
    public virtual int GetHashCode();
    internal Clip ToClip();
}
public class PuppeteerSharp.BoxModel : object {
    [CompilerGeneratedAttribute]
private BoxModelPoint[] <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxModelPoint[] <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxModelPoint[] <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxModelPoint[] <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public BoxModelPoint[] Content { get; public set; }
    public BoxModelPoint[] Padding { get; public set; }
    public BoxModelPoint[] Border { get; public set; }
    public BoxModelPoint[] Margin { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public BoxModelPoint[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(BoxModelPoint[] value);
    [CompilerGeneratedAttribute]
public BoxModelPoint[] get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(BoxModelPoint[] value);
    [CompilerGeneratedAttribute]
public BoxModelPoint[] get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(BoxModelPoint[] value);
    [CompilerGeneratedAttribute]
public BoxModelPoint[] get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(BoxModelPoint[] value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PuppeteerSharp.BoxModelPoint : object {
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    [CompilerGeneratedAttribute]
protected BoxModelPoint(BoxModelPoint original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BoxModelPoint left, BoxModelPoint right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BoxModelPoint left, BoxModelPoint right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BoxModelPoint other);
    [CompilerGeneratedAttribute]
public virtual BoxModelPoint <Clone>$();
}
public abstract class PuppeteerSharp.Browser : object {
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    [CompilerGeneratedAttribute]
private EventHandler Disconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetDiscovered;
    [CompilerGeneratedAttribute]
private SupportedBrowser <BrowserType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IBrowserContext <DefaultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultWaitForTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskQueue <ScreenshotTaskQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Connection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewPortOptions <DefaultViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private LauncherBase <Launcher>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Target, bool> <IsPageTargetFunc>k__BackingField;
    public string WebSocketEndpoint { get; }
    public SupportedBrowser BrowserType { get; protected set; }
    public Process Process { get; }
    public bool IgnoreHTTPSErrors { get; public set; }
    public bool IsClosed { get; }
    public IBrowserContext DefaultContext { get; protected set; }
    public int DefaultWaitForTimeout { get; public set; }
    public bool IsConnected { get; }
    public ITarget Target { get; }
    internal TaskQueue ScreenshotTaskQueue { get; }
    internal Connection Connection { get; internal set; }
    internal ViewPortOptions DefaultViewport { get; internal set; }
    internal LauncherBase Launcher { get; internal set; }
    internal Func`2<Target, bool> IsPageTargetFunc { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    public sealed virtual string get_WebSocketEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual SupportedBrowser get_BrowserType();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BrowserType(SupportedBrowser value);
    public sealed virtual Process get_Process();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreHTTPSErrors(bool value);
    public abstract virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public sealed virtual IBrowserContext get_DefaultContext();
    [CompilerGeneratedAttribute]
protected void set_DefaultContext(IBrowserContext value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultWaitForTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultWaitForTimeout(int value);
    public sealed virtual bool get_IsConnected();
    public sealed virtual ITarget get_Target();
    [CompilerGeneratedAttribute]
internal TaskQueue get_ScreenshotTaskQueue();
    [CompilerGeneratedAttribute]
internal Connection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(Connection value);
    [CompilerGeneratedAttribute]
internal ViewPortOptions get_DefaultViewport();
    [CompilerGeneratedAttribute]
internal void set_DefaultViewport(ViewPortOptions value);
    [CompilerGeneratedAttribute]
internal LauncherBase get_Launcher();
    [CompilerGeneratedAttribute]
internal void set_Launcher(LauncherBase value);
    [CompilerGeneratedAttribute]
internal Func`2<Target, bool> get_IsPageTargetFunc();
    [CompilerGeneratedAttribute]
internal void set_IsPageTargetFunc(Func`2<Target, bool> value);
    public abstract virtual Task`1<IPage> NewPageAsync();
    public abstract virtual ITarget[] Targets();
    public abstract virtual Task`1<IBrowserContext> CreateBrowserContextAsync(BrowserContextOptions options);
    public abstract virtual IBrowserContext[] BrowserContexts();
    [AsyncStateMachineAttribute("PuppeteerSharp.Browser/<PagesAsync>d__67")]
public sealed virtual Task`1<IPage[]> PagesAsync();
    public abstract virtual Task`1<string> GetVersionAsync();
    public abstract virtual Task`1<string> GetUserAgentAsync();
    public abstract virtual void Disconnect();
    public abstract virtual Task CloseAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Browser/<WaitForTargetAsync>d__72")]
public sealed virtual Task`1<ITarget> WaitForTargetAsync(Func`2<ITarget, bool> predicate, WaitForOptions options);
    public sealed virtual void RegisterCustomQueryHandler(string name, CustomQueryHandler queryHandler);
    public sealed virtual void UnregisterCustomQueryHandler(string name);
    public sealed virtual void ClearCustomQueryHandlers();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.Browser/<DisposeAsync>d__77")]
public sealed virtual ValueTask DisposeAsync();
    internal IEnumerable`1<string> GetCustomQueryHandlerNames();
    protected virtual void Dispose(bool disposing);
    protected void OnClosed();
    protected void OnDisconnected();
    protected void OnTargetChanged(TargetChangedArgs e);
    protected void OnTargetCreated(TargetChangedArgs e);
    protected void OnTargetDestroyed(TargetChangedArgs e);
    protected void OnTargetDiscovered(TargetChangedArgs e);
    [CompilerGeneratedAttribute]
private ValueTask <Dispose>b__79_0(Task _);
}
public abstract class PuppeteerSharp.BrowserContext : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetDestroyed;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Browser <Browser>k__BackingField;
    public string Id { get; protected set; }
    public bool IsIncognito { get; }
    public bool IsClosed { get; }
    public Browser Browser { get; protected set; }
    private IBrowser PuppeteerSharp.IBrowserContext.Browser { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    public sealed virtual bool get_IsIncognito();
    public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public Browser get_Browser();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Browser(Browser value);
    private sealed virtual override IBrowser PuppeteerSharp.IBrowserContext.get_Browser();
    public abstract virtual ITarget[] Targets();
    public sealed virtual Task`1<ITarget> WaitForTargetAsync(Func`2<ITarget, bool> predicate, WaitForOptions options);
    public abstract virtual Task`1<IPage[]> PagesAsync();
    public abstract virtual Task`1<IPage> NewPageAsync();
    public abstract virtual Task CloseAsync();
    public abstract virtual Task OverridePermissionsAsync(string origin, IEnumerable`1<OverridePermission> permissions);
    public abstract virtual Task ClearPermissionOverridesAsync();
    internal void OnTargetCreated(Browser browser, TargetChangedArgs args);
    internal void OnTargetDestroyed(Browser browser, TargetChangedArgs args);
    internal void OnTargetChanged(Browser browser, TargetChangedArgs args);
}
public class PuppeteerSharp.BrowserContextOptions : object {
    [CompilerGeneratedAttribute]
private string <ProxyServer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProxyBypassList>k__BackingField;
    public string ProxyServer { get; public set; }
    public String[] ProxyBypassList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProxyServer();
    [CompilerGeneratedAttribute]
public void set_ProxyServer(string value);
    [CompilerGeneratedAttribute]
public String[] get_ProxyBypassList();
    [CompilerGeneratedAttribute]
public void set_ProxyBypassList(String[] value);
}
internal class PuppeteerSharp.BrowserData.Cache : object {
    private string _rootDir;
    public Cache(string rootDir);
    public string GetBrowserRoot(SupportedBrowser browser);
    public string GetInstallationDir(SupportedBrowser browser, Platform platform, string buildId);
    public IEnumerable`1<InstalledBrowser> GetInstalledBrowsers();
    public void Uninstall(SupportedBrowser browser, Platform platform, string buildId);
    public void Clear();
    private Nullable`1<ValueTuple`2<string, string>> ParseFolderPath(DirectoryInfo directory);
}
public static class PuppeteerSharp.BrowserData.Chrome : object {
    public static string DefaultBuildId { get; }
    public static string get_DefaultBuildId();
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserData.Chrome/<ResolveBuildIdAsync>d__2")]
internal static Task`1<string> ResolveBuildIdAsync(ChromeReleaseChannel channel);
    internal static string ResolveDownloadUrl(Platform platform, string buildId, string baseUrl);
    internal static string RelativeExecutablePath(Platform platform, string builId);
    internal static string ResolveSystemExecutablePath(Platform platform, ChromeReleaseChannel channel);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserData.Chrome/<GetLastKnownGoodReleaseForChannel>d__6")]
private static Task`1<ChromeGoodVersionsResultVersion> GetLastKnownGoodReleaseForChannel(ChromeReleaseChannel channel);
    private static String[] ResolveDownloadPath(Platform platform, string buildId);
    private static string GetFolder(Platform platform);
}
internal class PuppeteerSharp.BrowserData.ChromeGoodVersionsResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ChromeGoodVersionsResultVersion> <Channels>k__BackingField;
    public Dictionary`2<string, ChromeGoodVersionsResultVersion> Channels { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ChromeGoodVersionsResultVersion> get_Channels();
    [CompilerGeneratedAttribute]
public void set_Channels(Dictionary`2<string, ChromeGoodVersionsResultVersion> value);
}
public static class PuppeteerSharp.BrowserData.ChromeHeadlessShell : object {
    internal static string ResolveDownloadUrl(Platform platform, string buildId, string baseUrl);
    internal static string RelativeExecutablePath(Platform platform, string buildId);
    private static String[] ResolveDownloadPath(Platform platform, string buildId);
    private static string GetFolder(Platform platform);
}
public enum PuppeteerSharp.BrowserData.ChromeReleaseChannel : Enum {
    public int value__;
    public static ChromeReleaseChannel Stable;
    public static ChromeReleaseChannel Dev;
    public static ChromeReleaseChannel Canary;
    public static ChromeReleaseChannel Beta;
}
internal class PuppeteerSharp.BrowserData.Chromium : object {
    internal static Task`1<string> ResolveBuildIdAsync(Platform platform);
    internal static string ResolveDownloadUrl(Platform platform, string buildId, string baseUrl);
    internal static string RelativeExecutablePath(Platform platform, string builId);
    private static String[] ResolveDownloadPath(Platform platform, string buildId);
    private static string GetArchive(Platform platform, string buildId);
    private static string GetFolder(Platform platform);
}
public static class PuppeteerSharp.BrowserData.Firefox : object {
    public static string DefaultBuildId;
    private static Dictionary`2<string, string> _cachedBuildIds;
    private static Firefox();
    internal static Task`1<string> GetDefaultBuildIdAsync();
    internal static string ResolveDownloadUrl(Platform platform, string buildId, string baseUrl);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserData.Firefox/<ResolveBuildIdAsync>d__4")]
internal static Task`1<string> ResolveBuildIdAsync(string channel);
    internal static string RelativeExecutablePath(Platform platform, string buildId);
    internal static void CreateProfile(string tempUserDataDirectory, Dictionary`2<string, object> preferences);
    private static String[] ResolveDownloadPath(Platform platform, string buildId);
    private static string GetArchive(Platform platform, string buildId);
    private static Dictionary`2<string, object> GetDefaultPreferences(Dictionary`2<string, object> preferences);
}
public class PuppeteerSharp.BrowserData.InstalledBrowser : object {
    private static Dictionary`2<SupportedBrowser, Func`3<Platform, string, string>> _executablePathByBrowser;
    [CompilerGeneratedAttribute]
private SupportedBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildId>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Cache <Cache>k__BackingField;
    public SupportedBrowser Browser { get; public set; }
    public string BuildId { get; public set; }
    public Platform Platform { get; public set; }
    internal Cache Cache { get; internal set; }
    internal InstalledBrowser(Cache cache, SupportedBrowser browser, string buildId, Platform platform);
    private static InstalledBrowser();
    [CompilerGeneratedAttribute]
public SupportedBrowser get_Browser();
    [CompilerGeneratedAttribute]
public void set_Browser(SupportedBrowser value);
    [CompilerGeneratedAttribute]
public string get_BuildId();
    [CompilerGeneratedAttribute]
public void set_BuildId(string value);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
internal Cache get_Cache();
    [CompilerGeneratedAttribute]
internal void set_Cache(Cache value);
    public string GetExecutablePath();
}
internal class PuppeteerSharp.BrowserData.JsonUtils : object {
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserData.JsonUtils/<GetAsync>d__0`1")]
public static Task`1<T> GetAsync(string url);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserData.JsonUtils/<GetTextAsync>d__1")]
internal static Task`1<string> GetTextAsync(string url);
}
public class PuppeteerSharp.BrowserFetcher : object {
    private static string PublishSingleFileLocalApplicationDataFolderName;
    private static Dictionary`2<SupportedBrowser, Func`4<Platform, string, string, string>> _downloadsUrl;
    private CustomFileDownloadAction _customFileDownload;
    [CompilerGeneratedAttribute]
private string <CacheDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private SupportedBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <WebProxy>k__BackingField;
    public string CacheDir { get; public set; }
    public string BaseUrl { get; public set; }
    public Platform Platform { get; public set; }
    public SupportedBrowser Browser { get; public set; }
    public IWebProxy WebProxy { get; public set; }
    public BrowserFetcher(SupportedBrowser browser);
    public BrowserFetcher(BrowserFetcherOptions options);
    private static BrowserFetcher();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheDir(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BaseUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Platform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public sealed virtual SupportedBrowser get_Browser();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Browser(SupportedBrowser value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_WebProxy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebProxy(IWebProxy value);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<CanDownloadAsync>d__26")]
public sealed virtual Task`1<bool> CanDownloadAsync(string revision);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<DownloadAsync>d__27")]
public sealed virtual Task`1<InstalledBrowser> DownloadAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<DownloadAsync>d__28")]
public sealed virtual Task`1<InstalledBrowser> DownloadAsync(BrowserTag tag);
    public sealed virtual IEnumerable`1<InstalledBrowser> GetInstalledBrowsers();
    public sealed virtual void Uninstall(string buildId);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<DownloadAsync>d__31")]
public sealed virtual Task`1<InstalledBrowser> DownloadAsync(string buildId);
    public sealed virtual string GetExecutablePath(string buildId);
    internal static Platform GetCurrentPlatform();
    internal static string GetBrowsersLocation();
    private static string GetDownloadURL(SupportedBrowser product, Platform platform, string baseUrl, string buildId);
    private static void ExtractTar(string zipPath, string folderPath);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<DownloadAsync>d__37")]
private Task`1<InstalledBrowser> DownloadAsync(SupportedBrowser browser, string buildId);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<InstallDmgAsync>d__38")]
private Task InstallDmgAsync(string dmgPath, string folderPath);
    private void UnmountDmg(string dmgPath);
    private Task`1<string> ResolveBuildIdAsync(BrowserTag tag);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<UnpackArchiveAsync>d__41")]
private Task UnpackArchiveAsync(string archivePath, string outputPath, string archiveName);
    [AsyncStateMachineAttribute("PuppeteerSharp.BrowserFetcher/<DownloadFileUsingHttpClientTaskAsync>d__42")]
private Task DownloadFileUsingHttpClientTaskAsync(string address, string filename);
}
public class PuppeteerSharp.BrowserFetcherOptions : object {
    [CompilerGeneratedAttribute]
private SupportedBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Platform> <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomFileDownloadAction <CustomFileDownload>k__BackingField;
    public SupportedBrowser Browser { get; public set; }
    public Nullable`1<Platform> Platform { get; public set; }
    public string Path { get; public set; }
    public string Host { get; public set; }
    public CustomFileDownloadAction CustomFileDownload { get; public set; }
    [CompilerGeneratedAttribute]
public SupportedBrowser get_Browser();
    [CompilerGeneratedAttribute]
public void set_Browser(SupportedBrowser value);
    [CompilerGeneratedAttribute]
public Nullable`1<Platform> get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Nullable`1<Platform> value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public CustomFileDownloadAction get_CustomFileDownload();
    [CompilerGeneratedAttribute]
public void set_CustomFileDownload(CustomFileDownloadAction value);
}
public enum PuppeteerSharp.BrowserTag : Enum {
    public int value__;
    public static BrowserTag Latest;
    public static BrowserTag Beta;
    public static BrowserTag Canary;
    public static BrowserTag Dev;
    public static BrowserTag Stable;
}
internal class PuppeteerSharp.BufferException : PuppeteerException {
    public BufferException(string message);
    public BufferException(string message, Exception innerException);
    protected BufferException(SerializationInfo info, StreamingContext context);
}
public class PuppeteerSharp.Cdp.CdpBrowser : Browser {
    private static int CloseTimeout;
    private ConcurrentDictionary`2<string, CdpBrowserContext> _contexts;
    private ILogger`1<Browser> _logger;
    private Func`2<Target, bool> _targetFilterCallback;
    private Task _closeTask;
    [CompilerGeneratedAttribute]
private ITargetManager <TargetManager>k__BackingField;
    public bool IsClosed { get; }
    internal ITargetManager TargetManager { get; }
    internal CdpBrowser(SupportedBrowser browser, Connection connection, String[] contextIds, bool ignoreHTTPSErrors, ViewPortOptions defaultViewport, LauncherBase launcher, Func`2<Target, bool> targetFilter, Func`2<Target, bool> isPageTargetFunc);
    public virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
internal ITargetManager get_TargetManager();
    public virtual Task`1<IPage> NewPageAsync();
    public virtual ITarget[] Targets();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<GetVersionAsync>d__13")]
public virtual Task`1<string> GetVersionAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<GetUserAgentAsync>d__14")]
public virtual Task`1<string> GetUserAgentAsync();
    public virtual void Disconnect();
    public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<CreateBrowserContextAsync>d__17")]
public virtual Task`1<IBrowserContext> CreateBrowserContextAsync(BrowserContextOptions options);
    public virtual IBrowserContext[] BrowserContexts();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<CreateAsync>d__19")]
internal static Task`1<CdpBrowser> CreateAsync(SupportedBrowser browserToCreate, Connection connection, String[] contextIds, bool ignoreHTTPSErrors, ViewPortOptions defaultViewPort, LauncherBase launcher, Func`2<Target, bool> targetFilter, Func`2<Target, bool> isPageTargetCallback, Action`1<IBrowser> initAction);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<CreatePageInContextAsync>d__20")]
internal Task`1<IPage> CreatePageInContextAsync(string contextId);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<DisposeContextAsync>d__21")]
internal Task DisposeContextAsync(string contextId);
    private Task AttachAsync();
    private void Detach();
    private CdpTarget CreateTarget(TargetInfo targetInfo, CDPSession session, CDPSession parentSession);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<CloseCoreAsync>d__25")]
private Task CloseCoreAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<Connection_Disconnected>d__26")]
private void Connection_Disconnected(object sender, EventArgs e);
    private void TargetManager_TargetDiscovered(object sender, TargetChangedArgs e);
    private void OnTargetChanged(object sender, TargetChangedArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<OnDetachedFromTargetAsync>d__29")]
private void OnDetachedFromTargetAsync(object sender, TargetChangedArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowser/<OnAttachedToTargetAsync>d__30")]
private void OnAttachedToTargetAsync(object sender, TargetChangedArgs e);
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, CdpBrowserContext> <.ctor>b__5_2(string contextId);
}
public class PuppeteerSharp.Cdp.CdpBrowserContext : BrowserContext {
    private Connection _connection;
    private CdpBrowser _browser;
    internal CdpBrowserContext(Connection connection, CdpBrowser browser, string contextId);
    public virtual ITarget[] Targets();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpBrowserContext/<PagesAsync>d__4")]
public virtual Task`1<IPage[]> PagesAsync();
    public virtual Task`1<IPage> NewPageAsync();
    public virtual Task CloseAsync();
    public virtual Task OverridePermissionsAsync(string origin, IEnumerable`1<OverridePermission> permissions);
    public virtual Task ClearPermissionOverridesAsync();
    [CompilerGeneratedAttribute]
private bool <Targets>b__3_0(ITarget target);
    [CompilerGeneratedAttribute]
private bool <PagesAsync>b__4_0(ITarget t);
}
public class PuppeteerSharp.Cdp.CdpCDPSession : CDPSession {
    private ConcurrentDictionary`2<int, MessageTask> _callbacks;
    private string _parentSessionId;
    private TargetType _targetType;
    private int _lastId;
    private string _closeReason;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    internal CDPSession ParentSession { get; }
    internal bool IsClosed { get; private set; }
    internal CdpCDPSession(Connection connection, TargetType targetType, string sessionId, string parentSessionId);
    internal virtual CDPSession get_ParentSession();
    [CompilerGeneratedAttribute]
internal bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public virtual Task DetachAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpCDPSession/<SendAsync>d__13")]
public virtual Task`1<JObject> SendAsync(string method, object args, bool waitForCallback, CommandOptions options);
    internal bool HasPendingCallbacks();
    internal int GetMessageID();
    internal IEnumerable`1<MessageTask> GetPendingMessages();
    internal void OnMessage(ConnectionResponse obj);
    internal virtual void Close(string closeReason);
}
public class PuppeteerSharp.Cdp.CdpDevToolsTarget : CdpPageTarget {
    public TargetType Type { get; }
    internal CdpDevToolsTarget(TargetInfo targetInfo, CDPSession session, BrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory, bool ignoreHTTPSErrors, ViewPortOptions defaultViewport, TaskQueue screenshotTaskQueue);
    public virtual TargetType get_Type();
}
public class PuppeteerSharp.Cdp.CdpDialog : Dialog {
    private CDPSession _client;
    public CdpDialog(CDPSession client, DialogType type, string message, string defaultValue);
    internal virtual Task HandleAsync(bool accept, string text);
}
public class PuppeteerSharp.Cdp.CdpElementHandle : ElementHandle {
    private CdpFrame _cdpFrame;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    internal ILogger Logger { get; }
    internal CustomQuerySelectorRegistry CustomQuerySelectorRegistry { get; }
    protected Page Page { get; }
    private CDPSession Client { get; }
    private FrameManager FrameManager { get; }
    internal CdpElementHandle(IsolatedWorld world, RemoteObject remoteObject);
    [CompilerGeneratedAttribute]
internal ILogger get_Logger();
    internal virtual CustomQuerySelectorRegistry get_CustomQuerySelectorRegistry();
    protected virtual Page get_Page();
    private CDPSession get_Client();
    private FrameManager get_FrameManager();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpElementHandle/<ContentFrameAsync>d__13")]
public virtual Task`1<IFrame> ContentFrameAsync();
    public virtual Task ScrollIntoViewAsync();
    public virtual Task UploadFileAsync(bool resolveFilePaths, String[] filePaths);
    public virtual ValueTask DisposeAsync();
    public virtual string ToString();
    private void CheckForFileAccess(String[] files);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpElementHandle/<<ScrollIntoViewAsync>b__14_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <ScrollIntoViewAsync>b__14_0(CdpElementHandle handle);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
public class PuppeteerSharp.Cdp.CdpFrame : Frame {
    private static string RefererHeaderName;
    [CompilerGeneratedAttribute]
private CDPSession <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameManager <FrameManager>k__BackingField;
    public CDPSession Client { get; protected set; }
    public IPage Page { get; }
    public bool IsOopFrame { get; }
    public IReadOnlyCollection`1<IFrame> ChildFrames { get; }
    internal FrameManager FrameManager { get; }
    internal Frame ParentFrame { get; }
    internal CdpFrame(FrameManager frameManager, string frameId, string parentFrameId, CDPSession client);
    [CompilerGeneratedAttribute]
public virtual CDPSession get_Client();
    [CompilerGeneratedAttribute]
protected virtual void set_Client(CDPSession value);
    public virtual IPage get_Page();
    public virtual bool get_IsOopFrame();
    public virtual IReadOnlyCollection`1<IFrame> get_ChildFrames();
    [CompilerGeneratedAttribute]
internal FrameManager get_FrameManager();
    internal virtual Frame get_ParentFrame();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpFrame/<GoToAsync>d__17")]
public virtual Task`1<IResponse> GoToAsync(string url, NavigationOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpFrame/<WaitForNavigationAsync>d__18")]
public virtual Task`1<IResponse> WaitForNavigationAsync(NavigationOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpFrame/<SetContentAsync>d__19")]
public virtual Task SetContentAsync(string html, NavigationOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpFrame/<AddStyleTagAsync>d__20")]
public virtual Task`1<IElementHandle> AddStyleTagAsync(AddTagOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpFrame/<AddScriptTagAsync>d__21")]
public virtual Task`1<IElementHandle> AddScriptTagAsync(AddTagOptions options);
    internal void UpdateClient(CDPSession client, bool keepWorlds);
    protected internal virtual DeviceRequestPromptManager GetDeviceRequestPromptManager();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object _, EventArgs _);
}
public class PuppeteerSharp.Cdp.CdpHttpRequest : Request`1<CdpHttpResponse> {
    private CDPSession _client;
    private bool _allowInterception;
    private ILogger _logger;
    private List`1<Func`2<IRequest, Task>> _interceptHandlers;
    private Payload _continueRequestOverrides;
    private ResponseData _responseForRequest;
    private RequestAbortErrorCode _abortErrorReason;
    private InterceptResolutionState _interceptResolutionState;
    [CompilerGeneratedAttribute]
private CdpHttpResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterceptResolutionHandled>k__BackingField;
    public CdpHttpResponse Response { get; internal set; }
    internal Payload ContinueRequestOverrides { get; }
    internal ResponseData ResponseForRequest { get; }
    internal RequestAbortErrorCode AbortErrorReason { get; }
    private InterceptResolutionState InterceptResolutionState { get; }
    private bool IsInterceptResolutionHandled { get; private set; }
    internal CdpHttpRequest(CDPSession client, IFrame frame, string interceptionId, bool allowInterception, RequestWillBeSentPayload data, List`1<IRequest> redirectChain, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public virtual CdpHttpResponse get_Response();
    [CompilerGeneratedAttribute]
internal virtual void set_Response(CdpHttpResponse value);
    internal virtual Payload get_ContinueRequestOverrides();
    internal virtual ResponseData get_ResponseForRequest();
    internal virtual RequestAbortErrorCode get_AbortErrorReason();
    private InterceptResolutionState get_InterceptResolutionState();
    [CompilerGeneratedAttribute]
private bool get_IsInterceptResolutionHandled();
    [CompilerGeneratedAttribute]
private void set_IsInterceptResolutionHandled(bool value);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<ContinueAsync>d__25")]
public virtual Task ContinueAsync(Payload overrides, Nullable`1<int> priority);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<RespondAsync>d__26")]
public virtual Task RespondAsync(ResponseData response, Nullable`1<int> priority);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<AbortAsync>d__27")]
public virtual Task AbortAsync(RequestAbortErrorCode errorCode, Nullable`1<int> priority);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<FetchPostDataAsync>d__28")]
public virtual Task`1<string> FetchPostDataAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<FinalizeInterceptionsAsync>d__29")]
internal virtual Task FinalizeInterceptionsAsync();
    internal virtual void EnqueueInterceptionAction(Func`2<IRequest, Task> pendingHandler);
    private Header[] HeadersArray(Dictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<ContinueInternalAsync>d__32")]
private Task ContinueInternalAsync(Payload overrides);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<AbortInternalAsync>d__33")]
private Task AbortInternalAsync(RequestAbortErrorCode errorCode);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpRequest/<RespondInternalAsync>d__34")]
private Task RespondInternalAsync(ResponseData response);
}
public class PuppeteerSharp.Cdp.CdpHttpResponse : Response`1<CdpHttpRequest> {
    private static Regex _extraInfoLines;
    private CDPSession _client;
    private bool _fromDiskCache;
    private Byte[] _buffer;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <BodyLoadedTaskWrapper>k__BackingField;
    public bool FromCache { get; }
    internal TaskCompletionSource`1<bool> BodyLoadedTaskWrapper { get; }
    internal CdpHttpResponse(CDPSession client, CdpHttpRequest request, ResponsePayload responseMessage, ResponseReceivedExtraInfoResponse extraInfo);
    private static CdpHttpResponse();
    public virtual bool get_FromCache();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<bool> get_BodyLoadedTaskWrapper();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpHttpResponse/<BufferAsync>d__10")]
public virtual ValueTask`1<Byte[]> BufferAsync();
    private string ParseStatusTextFromExtraInfo(ResponseReceivedExtraInfoResponse extraInfo);
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.JSHandleMethodConverter")]
public class PuppeteerSharp.Cdp.CdpJSHandle : JSHandle {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ILogger Logger { get; }
    private CDPSession Client { get; }
    internal CdpJSHandle(IsolatedWorld world, RemoteObject remoteObject);
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    private CDPSession get_Client();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpJSHandle/<JsonValueAsync>d__6`1")]
public virtual Task`1<T> JsonValueAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpJSHandle/<DisposeAsync>d__7")]
public virtual ValueTask DisposeAsync();
    public virtual string ToString();
}
public class PuppeteerSharp.Cdp.CdpKeyboard : Keyboard {
    private HashSet`1<string> _pressedKeys;
    private CDPSession _client;
    internal CdpKeyboard(CDPSession client);
    public virtual Task DownAsync(string key, DownOptions options);
    public virtual Task UpAsync(string key);
    public virtual Task SendCharacterAsync(string charText);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpKeyboard/<TypeAsync>d__6")]
public virtual Task TypeAsync(string text, TypeOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpKeyboard/<PressAsync>d__7")]
public virtual Task PressAsync(string key, PressOptions options);
    internal void UpdateClient(CDPSession newSession);
    private int ModifierBit(string key);
    private KeyDefinition KeyDescriptionForString(string keyString);
}
public class PuppeteerSharp.Cdp.CdpMouse : Mouse {
    private Keyboard _keyboard;
    private MouseState _mouseState;
    private TaskQueue _actionsQueue;
    private TaskQueue _multipleActionsQueue;
    private TransactionData _inFlightTransaction;
    private CDPSession _client;
    internal CdpMouse(CDPSession client, Keyboard keyboard);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpMouse/<MoveAsync>d__7")]
public virtual Task MoveAsync(decimal x, decimal y, MoveOptions options);
    public virtual Task ClickAsync(decimal x, decimal y, ClickOptions options);
    public virtual Task DownAsync(ClickOptions options);
    public virtual Task UpAsync(ClickOptions options);
    public virtual Task WheelAsync(decimal deltaX, decimal deltaY);
    public virtual Task`1<DragData> DragAsync(decimal startX, decimal startY, decimal endX, decimal endY);
    public virtual Task DragEnterAsync(decimal x, decimal y, DragData data);
    public virtual Task DragOverAsync(decimal x, decimal y, DragData data);
    public virtual Task DropAsync(decimal x, decimal y, DragData data);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpMouse/<DragAndDropAsync>d__16")]
public virtual Task DragAndDropAsync(decimal startX, decimal startY, decimal endX, decimal endY, int delay);
    public virtual Task ResetAsync();
    internal void UpdateClient(CDPSession newSession);
    protected virtual void Dispose(bool disposing);
    private MouseTransaction CreateTransaction();
    private Task WithTransactionAsync(Func`2<Action`1<TransactionData>, Task> action);
    private MouseButton GetButtonFromPressedButtons(MouseButton buttons);
    private MouseState GetState();
    [CompilerGeneratedAttribute]
private Task <ResetAsync>b__17_0();
    [CompilerGeneratedAttribute]
private void <CreateTransaction>b__20_0(TransactionData updates);
    [CompilerGeneratedAttribute]
private void <CreateTransaction>b__20_1();
    [CompilerGeneratedAttribute]
private void <CreateTransaction>b__20_2();
}
public class PuppeteerSharp.Cdp.CdpOtherTarget : CdpTarget {
    internal CdpOtherTarget(TargetInfo targetInfo, CDPSession session, BrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory, TaskQueue screenshotTaskQueue);
}
public class PuppeteerSharp.Cdp.CdpPage : Page {
    private static Dictionary`2<string, decimal> _unitToPixels;
    private ConcurrentDictionary`2<string, CdpWebWorker> _workers;
    private ITargetManager _targetManager;
    private EmulationManager _emulationManager;
    private ILogger _logger;
    private Task _closedFinishedTask;
    private ConcurrentDictionary`2<string, Binding> _bindings;
    private ConcurrentDictionary`2<Guid, TaskCompletionSource`1<FileChooser>> _fileChooserInterceptors;
    private ConcurrentDictionary`2<string, string> _exposedFunctions;
    private TaskCompletionSource`1<bool> _sessionClosedTcs;
    [CompilerGeneratedAttribute]
private CdpCDPSession <PrimaryTargetClient>k__BackingField;
    [CompilerGeneratedAttribute]
private CdpTarget <PrimaryTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private CdpCDPSession <TabTargetClient>k__BackingField;
    [CompilerGeneratedAttribute]
private CdpTarget <TabTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameManager <FrameManager>k__BackingField;
    public CDPSession Client { get; }
    public Target Target { get; }
    public IFrame MainFrame { get; }
    public IFrame[] Frames { get; }
    public WebWorker[] Workers { get; }
    public IBrowserContext BrowserContext { get; }
    public bool IsJavaScriptEnabled { get; }
    protected Browser Browser { get; }
    private CdpCDPSession PrimaryTargetClient { get; private set; }
    private CdpTarget PrimaryTarget { get; private set; }
    private CdpCDPSession TabTargetClient { get; }
    private CdpTarget TabTarget { get; }
    private Task SessionClosedTask { get; }
    private FrameManager FrameManager { get; private set; }
    private CdpPage(CdpCDPSession client, CdpTarget target, TaskQueue screenshotTaskQueue, bool ignoreHTTPSErrors);
    private static CdpPage();
    public virtual CDPSession get_Client();
    public virtual Target get_Target();
    public virtual IFrame get_MainFrame();
    public virtual IFrame[] get_Frames();
    public virtual WebWorker[] get_Workers();
    public virtual IBrowserContext get_BrowserContext();
    public virtual bool get_IsJavaScriptEnabled();
    protected virtual Browser get_Browser();
    [CompilerGeneratedAttribute]
private CdpCDPSession get_PrimaryTargetClient();
    [CompilerGeneratedAttribute]
private void set_PrimaryTargetClient(CdpCDPSession value);
    [CompilerGeneratedAttribute]
private CdpTarget get_PrimaryTarget();
    [CompilerGeneratedAttribute]
private void set_PrimaryTarget(CdpTarget value);
    [CompilerGeneratedAttribute]
private CdpCDPSession get_TabTargetClient();
    [CompilerGeneratedAttribute]
private CdpTarget get_TabTarget();
    private Task get_SessionClosedTask();
    [CompilerGeneratedAttribute]
private FrameManager get_FrameManager();
    [CompilerGeneratedAttribute]
private void set_FrameManager(FrameManager value);
    public virtual Task SetGeolocationAsync(GeolocationOption options);
    public virtual Task SetDragInterceptionAsync(bool enabled);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<GetCookiesAsync>d__49")]
public virtual Task`1<CookieParam[]> GetCookiesAsync(String[] urls);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<SetCookieAsync>d__50")]
public virtual Task SetCookieAsync(CookieParam[] cookies);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<RemoveExposedFunctionAsync>d__51")]
public virtual Task RemoveExposedFunctionAsync(string name);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<DeleteCookieAsync>d__52")]
public virtual Task DeleteCookieAsync(CookieParam[] cookies);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<MetricsAsync>d__53")]
public virtual Task`1<Dictionary`2<string, decimal>> MetricsAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<EvaluateFunctionOnNewDocumentAsync>d__54")]
public virtual Task`1<NewDocumentScriptEvaluation> EvaluateFunctionOnNewDocumentAsync(string pageFunction, Object[] args);
    public virtual Task RemoveScriptToEvaluateOnNewDocumentAsync(string identifier);
    public virtual Task SetBypassServiceWorkerAsync(bool bypass);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<EvaluateExpressionOnNewDocumentAsync>d__57")]
public virtual Task`1<NewDocumentScriptEvaluation> EvaluateExpressionOnNewDocumentAsync(string expression);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<QueryObjectsAsync>d__58")]
public virtual Task`1<IJSHandle> QueryObjectsAsync(IJSHandle prototypeHandle);
    public virtual Task SetRequestInterceptionAsync(bool value);
    public virtual Task SetOfflineModeAsync(bool value);
    public virtual Task SetJavaScriptEnabledAsync(bool enabled);
    public virtual Task SetBypassCSPAsync(bool enabled);
    public virtual Task EmulateMediaTypeAsync(MediaType type);
    public virtual Task EmulateMediaFeaturesAsync(IEnumerable`1<MediaFeatureValue> features);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<SetViewportAsync>d__65")]
public virtual Task SetViewportAsync(ViewPortOptions viewport);
    public virtual Task EmulateNetworkConditionsAsync(NetworkConditions networkConditions);
    public virtual Task SetCacheEnabledAsync(bool enabled);
    public virtual Task SetUserAgentAsync(string userAgent, UserAgentMetadata userAgentData);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<ReloadAsync>d__69")]
public virtual Task`1<IResponse> ReloadAsync(NavigationOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<WaitForNetworkIdleAsync>d__70")]
public virtual Task WaitForNetworkIdleAsync(WaitForNetworkIdleOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<WaitForRequestAsync>d__71")]
public virtual Task`1<IRequest> WaitForRequestAsync(Func`2<IRequest, bool> predicate, WaitForOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<WaitForFrameAsync>d__72")]
public virtual Task`1<IFrame> WaitForFrameAsync(Func`2<IFrame, bool> predicate, WaitForOptions options);
    public virtual Task BringToFrontAsync();
    public virtual Task EmulateVisionDeficiencyAsync(VisionDeficiency type);
    public virtual Task EmulateTimezoneAsync(string timezoneId);
    public virtual Task EmulateIdleStateAsync(EmulateIdleOverrides overrides);
    public virtual Task EmulateCPUThrottlingAsync(Nullable`1<decimal> factor);
    public virtual Task`1<IResponse> GoBackAsync(NavigationOptions options);
    public virtual Task`1<IResponse> GoForwardAsync(NavigationOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<WaitForResponseAsync>d__80")]
public virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, Task`1<bool>> predicate, WaitForOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<WaitForFileChooserAsync>d__81")]
public virtual Task`1<FileChooser> WaitForFileChooserAsync(WaitForOptions options);
    public virtual Task SetBurstModeOffAsync();
    public virtual Task SetExtraHttpHeadersAsync(Dictionary`2<string, string> headers);
    public virtual Task AuthenticateAsync(Credentials credentials);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<CloseAsync>d__85")]
public virtual Task CloseAsync(PageCloseOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<CreateAsync>d__86")]
internal static Task`1<Page> CreateAsync(CdpCDPSession client, CdpTarget target, bool ignoreHTTPSErrors, ViewPortOptions defaultViewPort, TaskQueue screenshotTaskQueue);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<ExposeFunctionAsync>d__87")]
protected virtual Task ExposeFunctionAsync(string name, Delegate puppeteerFunction);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<PdfInternalAsync>d__88")]
protected virtual Task`1<Byte[]> PdfInternalAsync(string file, PdfOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<PerformScreenshotAsync>d__89")]
protected virtual Task`1<string> PerformScreenshotAsync(ScreenshotType type, ScreenshotOptions options);
    private void SetupPrimaryTargetListeners();
    private void OnAttachedToTarget(object sender, SessionEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<Client_MessageReceived>d__92")]
private void Client_MessageReceived(object sender, MessageEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<OnActivationAsync>d__93")]
private Task OnActivationAsync(CdpCDPSession newSession);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<OnSecondaryTargetAsync>d__94")]
private Task OnSecondaryTargetAsync(CDPSession session);
    private void OnDetachedFromTarget(object sender, TargetChangedArgs e);
    private Task OnConsoleAPIAsync(PageConsoleResponse message);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<AddConsoleMessageAsync>d__97")]
private Task AddConsoleMessageAsync(ConsoleType type, IJSHandle[] values, StackTrace stackTrace);
    private void EmitMetrics(PerformanceMetricsResponse metrics);
    private void HandleException(EvaluateExceptionResponseDetails exceptionDetails);
    private Dictionary`2<string, decimal> BuildMetricsObject(List`1<Metric> metrics);
    private string GetExceptionMessage(EvaluateExceptionResponseDetails exceptionDetails);
    private void OnTargetCrashed();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<OnLogEntryAddedAsync>d__103")]
private Task OnLogEntryAddedAsync(LogEntryAddedResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<OnBindingCalledAsync>d__104")]
private Task OnBindingCalledAsync(BindingCalledResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<OnFileChooserAsync>d__105")]
private Task OnFileChooserAsync(PageFileChooserOpenedResponse e);
    private decimal ConvertPrintParameterToInches(object parameter);
    private Clip GetIntersectionRect(Clip clip, BoundingBox viewport);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<InitializeAsync>d__108")]
private Task InitializeAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPage/<GoAsync>d__109")]
private Task`1<IResponse> GoAsync(int delta, NavigationOptions options);
    private Task ResetBackgroundColorAndViewportAsync(ScreenshotOptions options);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(object _, FrameEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(object _, FrameEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_2(object _, FrameNavigatedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_3(object _, RequestEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_4(object _, RequestEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_5(object _, ResponseCreatedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_6(object _, RequestEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_7(object _, RequestEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_8(object sender, SessionEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_9(object sender, SessionEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_10(Task _);
    [CompilerGeneratedAttribute]
private void <get_SessionClosedTask>g__ClientDisconnected|42_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private Task <PerformScreenshotAsync>b__89_0();
    [CompilerGeneratedAttribute]
private Task <AddConsoleMessageAsync>b__97_0(IJSHandle v);
}
public class PuppeteerSharp.Cdp.CdpPageTarget : CdpTarget {
    private bool _ignoreHTTPSErrors;
    private ViewPortOptions _defaultViewport;
    private TaskQueue _screenshotTaskQueue;
    [CompilerGeneratedAttribute]
private Task`1<Page> <PageTask>k__BackingField;
    internal Task`1<Page> PageTask { get; internal set; }
    internal CdpPageTarget(TargetInfo targetInfo, CDPSession session, BrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory, bool ignoreHTTPSErrors, ViewPortOptions defaultViewport, TaskQueue screenshotTaskQueue);
    [CompilerGeneratedAttribute]
internal Task`1<Page> get_PageTask();
    [CompilerGeneratedAttribute]
internal void set_PageTask(Task`1<Page> value);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPageTarget/<PageAsync>d__8")]
public virtual Task`1<IPage> PageAsync();
    internal virtual void Initialize();
    protected internal virtual void CheckIfInitialized();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpPageTarget/<<Initialize>b__9_0>d")]
[CompilerGeneratedAttribute]
private Task <Initialize>b__9_0(Task`1<InitializationStatus> initializedTask);
}
public class PuppeteerSharp.Cdp.CdpTarget : Target {
    [CompilerGeneratedAttribute]
private TaskQueue <ScreenshotTaskQueue>k__BackingField;
    public ITarget Opener { get; }
    internal CdpBrowser CdpBrowser { get; }
    internal TaskQueue ScreenshotTaskQueue { get; }
    internal CdpTarget(TargetInfo targetInfo, CdpCDPSession session, CdpBrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory, TaskQueue screenshotTaskQueue);
    public virtual ITarget get_Opener();
    internal CdpBrowser get_CdpBrowser();
    [CompilerGeneratedAttribute]
internal TaskQueue get_ScreenshotTaskQueue();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpTarget/<AsPageAsync>d__8")]
public virtual Task`1<IPage> AsPageAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpTarget/<CreateCDPSessionAsync>d__9")]
public virtual Task`1<ICDPSession> CreateCDPSessionAsync();
    internal void TargetInfoChanged(TargetInfo targetInfo);
    internal virtual void Initialize();
    protected internal virtual void CheckIfInitialized();
}
public class PuppeteerSharp.Cdp.CdpTouchscreen : Touchscreen {
    private Keyboard _keyboard;
    private CDPSession _client;
    internal CdpTouchscreen(CDPSession client, Keyboard keyboard);
    public virtual Task TouchStartAsync(decimal x, decimal y);
    public virtual Task TouchMoveAsync(decimal x, decimal y);
    public virtual Task TouchEndAsync();
    internal void UpdateClient(CDPSession newSession);
}
public class PuppeteerSharp.Cdp.CdpWebWorker : WebWorker {
    private ILogger _logger;
    private Func`4<ConsoleType, IJSHandle[], StackTrace, Task> _consoleAPICalled;
    private Action`1<EvaluateExceptionResponseDetails> _exceptionThrown;
    private string _id;
    private TargetType _targetType;
    [CompilerGeneratedAttribute]
private CDPSession <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolatedWorld <World>k__BackingField;
    public CDPSession Client { get; }
    internal IsolatedWorld World { get; }
    internal CdpWebWorker(CDPSession client, string url, string targetId, TargetType targetType, Func`4<ConsoleType, IJSHandle[], StackTrace, Task> consoleAPICalled, Action`1<EvaluateExceptionResponseDetails> exceptionThrown);
    [CompilerGeneratedAttribute]
public virtual CDPSession get_Client();
    [CompilerGeneratedAttribute]
internal virtual IsolatedWorld get_World();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpWebWorker/<CloseAsync>d__12")]
public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpWebWorker/<OnMessageReceived>d__13")]
private void OnMessageReceived(object sender, MessageEventArgs e);
    private void OnExceptionThrown(RuntimeExceptionThrownResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpWebWorker/<OnConsoleAPICalledAsync>d__15")]
private Task OnConsoleAPICalledAsync(MessageEventArgs e);
    private void OnExecutionContextCreated(RuntimeExecutionContextCreatedResponse e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Task`1<JObject> task);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(Task`1<JObject> task);
    [CompilerGeneratedAttribute]
private CdpJSHandle <OnConsoleAPICalledAsync>b__15_0(RemoteObject i);
}
public class PuppeteerSharp.Cdp.CdpWorkerTarget : CdpTarget {
    private Task`1<WebWorker> _workerTask;
    internal CdpWorkerTarget(TargetInfo targetInfo, CDPSession session, BrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory, TaskQueue screenshotTaskQueue);
    public virtual Task`1<WebWorker> WorkerAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.CdpWorkerTarget/<WorkerInternalAsync>d__3")]
private Task`1<WebWorker> WorkerInternalAsync();
}
internal class PuppeteerSharp.Cdp.ChromeTargetManager : object {
    private List`1<string> _ignoredTargets;
    private Connection _connection;
    private Func`4<TargetInfo, CDPSession, CDPSession, CdpTarget> _targetFactoryFunc;
    private Func`2<Target, bool> _targetFilterFunc;
    private ILogger`1<ChromeTargetManager> _logger;
    private AsyncDictionaryHelper`2<string, CdpTarget> _attachedTargetsByTargetId;
    private ConcurrentDictionary`2<string, CdpTarget> _attachedTargetsBySessionId;
    private ConcurrentDictionary`2<string, TargetInfo> _discoveredTargetsByTargetId;
    private ConcurrentSet`1<string> _targetsIdsForInit;
    private TaskCompletionSource`1<bool> _initializeCompletionSource;
    private Browser _browser;
    private int _targetDiscoveryTimeout;
    private TaskCompletionSource`1<bool> _targetDiscoveryCompletionSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetAvailable;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetGone;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetDiscovered;
    public ChromeTargetManager(Connection connection, Func`4<TargetInfo, CDPSession, CDPSession, CdpTarget> targetFactoryFunc, Func`2<Target, bool> targetFilterFunc, Browser browser, int targetDiscoveryTimeout);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    public sealed virtual AsyncDictionaryHelper`2<string, CdpTarget> GetAvailableTargets();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.ChromeTargetManager/<InitializeAsync>d__27")]
public sealed virtual Task InitializeAsync();
    private void StoreExistingTargetsForInit();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.ChromeTargetManager/<EnsureTargetsIdsForInitAsync>d__29")]
private Task EnsureTargetsIdsForInitAsync();
    private void OnMessageReceived(object sender, MessageEventArgs e);
    private void Connection_SessionDetached(object sender, SessionEventArgs e);
    private void OnTargetCreated(TargetCreatedResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.ChromeTargetManager/<OnTargetDestroyedAsync>d__33")]
private Task OnTargetDestroyedAsync(string messageId, TargetDestroyedResponse e);
    private void OnTargetInfoChanged(TargetCreatedResponse e);
    private bool IsPageTargetBecomingPrimary(Target target, TargetInfo newTargetInfo);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.ChromeTargetManager/<OnAttachedToTargetAsync>d__36")]
private Task OnAttachedToTargetAsync(object sender, TargetAttachedToTargetResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.ChromeTargetManager/<OnAttachedToTargetHandlingExceptionsAsync>d__37")]
private Task OnAttachedToTargetHandlingExceptionsAsync(object sender, string messageId, TargetAttachedToTargetResponse e);
    private void HandleExceptionOnMessageReceived(string messageId, Exception ex);
    private void FinishInitializationIfReady(string targetId);
    private void OnDetachedFromTarget(object sender, TargetDetachedFromTargetResponse e);
}
public class PuppeteerSharp.Cdp.Connection : object {
    internal static int DefaultCommandTimeout;
    private ILogger _logger;
    private TaskQueue _callbackQueue;
    private ConcurrentDictionary`2<int, MessageTask> _callbacks;
    private AsyncDictionaryHelper`2<string, CdpCDPSession> _sessions;
    private List`1<string> _manuallyAttached;
    private int _lastId;
    [CompilerGeneratedAttribute]
private EventHandler Disconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> SessionAttached;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> SessionDetached;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionTransport <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseReason>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncMessageQueue <MessageQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomQuerySelectorRegistry <CustomQuerySelectorRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptInjector <ScriptInjector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolTimeout>k__BackingField;
    public string Url { get; }
    public int Delay { get; }
    public IConnectionTransport Transport { get; }
    public bool IsClosed { get; internal set; }
    public string CloseReason { get; private set; }
    public ILoggerFactory LoggerFactory { get; }
    internal AsyncMessageQueue MessageQueue { get; }
    internal CustomQuerySelectorRegistry CustomQuerySelectorRegistry { get; }
    internal ScriptInjector ScriptInjector { get; }
    internal int ProtocolTimeout { get; }
    private Connection(string url, int delay, bool enqueueAsyncMessages, IConnectionTransport transport, ILoggerFactory loggerFactory, int protocolTimeout);
    [CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReceived(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReceived(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_SessionDetached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SessionDetached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public IConnectionTransport get_Transport();
    [CompilerGeneratedAttribute]
public bool get_IsClosed();
    [CompilerGeneratedAttribute]
internal void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public string get_CloseReason();
    [CompilerGeneratedAttribute]
private void set_CloseReason(string value);
    [CompilerGeneratedAttribute]
public ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
internal AsyncMessageQueue get_MessageQueue();
    [CompilerGeneratedAttribute]
internal CustomQuerySelectorRegistry get_CustomQuerySelectorRegistry();
    [CompilerGeneratedAttribute]
internal ScriptInjector get_ScriptInjector();
    [CompilerGeneratedAttribute]
internal int get_ProtocolTimeout();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<SendAsync>d__53")]
public sealed virtual Task`1<JObject> SendAsync(string method, object args, bool waitForCallback, CommandOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<SendAsync>d__54`1")]
public sealed virtual Task`1<T> SendAsync(string method, object args, CommandOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<Create>d__55")]
internal static Task`1<Connection> Create(string url, IConnectionOptions connectionOptions, ILoggerFactory loggerFactory, CancellationToken cancellationToken);
    internal static Connection FromSession(CdpCDPSession session);
    internal int GetMessageID();
    internal Task RawSendAsync(string message, CommandOptions options);
    internal string GetMessage(int id, string method, object args, string sessionId);
    internal bool IsAutoAttached(string targetId);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<CreateSessionAsync>d__61")]
internal Task`1<CDPSession> CreateSessionAsync(TargetInfo targetInfo, bool isAutoAttachEmulated);
    internal bool HasPendingCallbacks();
    internal void Close(string closeReason);
    internal CdpCDPSession GetSession(string sessionId);
    private void Dispose(bool disposing);
    private Task`1<CdpCDPSession> GetSessionAsync(string sessionId);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<Transport_MessageReceived>d__67")]
private void Transport_MessageReceived(object sender, MessageReceivedEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.Connection/<ProcessMessage>d__68")]
private Task ProcessMessage(MessageReceivedEventArgs e);
    private void ProcessIncomingMessage(ConnectionResponse obj);
    private void Transport_Closed(object sender, TransportClosedEventArgs e);
}
internal class PuppeteerSharp.Cdp.FirefoxTargetManager : object {
    private Connection _connection;
    private Func`4<TargetInfo, CDPSession, CDPSession, CdpTarget> _targetFactoryFunc;
    private Func`2<CdpTarget, bool> _targetFilterFunc;
    private ILogger`1<FirefoxTargetManager> _logger;
    private AsyncDictionaryHelper`2<string, CdpTarget> _availableTargetsByTargetId;
    private ConcurrentDictionary`2<string, CdpTarget> _availableTargetsBySessionId;
    private ConcurrentDictionary`2<string, TargetInfo> _discoveredTargetsByTargetId;
    private TaskCompletionSource`1<bool> _initializeCompletionSource;
    private List`1<string> _targetsIdsForInit;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetAvailable;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetGone;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TargetChangedArgs> TargetDiscovered;
    public FirefoxTargetManager(Connection connection, Func`4<TargetInfo, CDPSession, CDPSession, CdpTarget> targetFactoryFunc, Func`2<Target, bool> targetFilterFunc);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FirefoxTargetManager/<InitializeAsync>d__22")]
public sealed virtual Task InitializeAsync();
    public sealed virtual AsyncDictionaryHelper`2<string, CdpTarget> GetAvailableTargets();
    private void OnMessageReceived(object sender, MessageEventArgs e);
    private void Connection_SessionDetached(object sender, SessionEventArgs e);
    private void OnTargetCreated(TargetCreatedResponse e);
    private void OnTargetDestroyed(TargetDestroyedResponse e);
    private void OnAttachedToTarget(object sender, TargetAttachedToTargetResponse e);
    private void FinishInitializationIfReady(string targetId);
}
internal class PuppeteerSharp.Cdp.FrameManager : object {
    private static int TimeForWaitingForSwap;
    private static string UtilityWorldName;
    private ConcurrentDictionary`2<string, ExecutionContext> _contextIdToContext;
    private ILogger _logger;
    private List`1<string> _isolatedWorlds;
    private List`1<string> _frameNavigatedReceived;
    private TaskQueue _eventsQueue;
    private ConcurrentDictionary`2<CDPSession, DeviceRequestPromptManager> _deviceRequestPromptManagerMap;
    private TaskCompletionSource`1<bool> _frameTreeHandled;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameAttached;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameDetached;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameSwapped;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameNavigatedEventArgs> FrameNavigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameNavigatedWithinDocument;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> LifecycleEvent;
    [CompilerGeneratedAttribute]
private CDPSession <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkManager <NetworkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutSettings <TimeoutSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameTree <FrameTree>k__BackingField;
    internal CDPSession Client { get; private set; }
    internal NetworkManager NetworkManager { get; }
    internal Page Page { get; }
    internal TimeoutSettings TimeoutSettings { get; }
    internal FrameTree FrameTree { get; }
    internal Frame MainFrame { get; }
    internal FrameManager(CDPSession client, Page page, bool ignoreHTTPSErrors, TimeoutSettings timeoutSettings);
    [CompilerGeneratedAttribute]
internal void add_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_FrameSwapped(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameSwapped(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_FrameNavigatedWithinDocument(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameNavigatedWithinDocument(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_LifecycleEvent(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_LifecycleEvent(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
internal CDPSession get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(CDPSession value);
    [CompilerGeneratedAttribute]
internal NetworkManager get_NetworkManager();
    [CompilerGeneratedAttribute]
internal Page get_Page();
    [CompilerGeneratedAttribute]
internal TimeoutSettings get_TimeoutSettings();
    [CompilerGeneratedAttribute]
internal FrameTree get_FrameTree();
    internal Frame get_MainFrame();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<DisposeAsync>d__47")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual Task`1<CdpFrame> GetFrameAsync(string frameId);
    internal ExecutionContext ExecutionContextById(int contextId, CDPSession session);
    internal void OnAttachedToTarget(TargetChangedArgs e);
    internal ExecutionContext GetExecutionContextById(int contextId, CDPSession session);
    internal DeviceRequestPromptManager GetDeviceRequestPromptManager(CDPSession client);
    internal Frame[] GetFrames();
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<InitializeAsync>d__54")]
internal Task InitializeAsync(CDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<SwapFrameTreeAsync>d__55")]
internal Task SwapFrameTreeAsync(CDPSession client);
    internal Task RegisterSpeculativeSessionAsync(CDPSession client);
    private CdpFrame GetFrame(string frameId);
    private void Client_MessageReceived(object sender, MessageEventArgs e);
    private void OnFrameStartedLoading(BasicFrameResponse e);
    private void OnFrameStoppedLoading(BasicFrameResponse e);
    private void OnLifeCycleEvent(LifecycleEventResponse e);
    private void OnExecutionContextsCleared(CDPSession session);
    private void OnExecutionContextDestroyed(int contextId, CDPSession session);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<OnExecutionContextCreatedAsync>d__64")]
private Task OnExecutionContextCreatedAsync(ContextPayload contextPayload, ICDPSession session);
    private void OnFrameDetached(PageFrameDetachedResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<OnFrameNavigatedAsync>d__66")]
private Task OnFrameNavigatedAsync(FramePayload framePayload, NavigationType type);
    private void OnFrameNavigatedWithinDocument(NavigatedWithinDocumentResponse e);
    private void RemoveFramesRecursively(Frame frame);
    private void OnFrameAttached(CDPSession session, PageFrameAttachedResponse frameAttached);
    private void OnFrameAttached(CDPSession session, string frameId, string parentFrameId);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<HandleFrameTreeAsync>d__71")]
private Task HandleFrameTreeAsync(CDPSession session, PageGetFrameTree frameTree);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<CreateIsolatedWorldAsync>d__72")]
private Task CreateIsolatedWorldAsync(CDPSession session, string name);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.FrameManager/<OnClientDisconnectAsync>d__73")]
private Task OnClientDisconnectAsync();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private DeviceRequestPromptManager <GetDeviceRequestPromptManager>b__52_0(CDPSession client);
    [CompilerGeneratedAttribute]
private void <SwapFrameTreeAsync>b__55_0(object sender, EventArgs e);
}
internal class PuppeteerSharp.Cdp.FrameTree : object {
    private AsyncDictionaryHelper`2<string, CdpFrame> _frames;
    private ConcurrentDictionary`2<string, string> _parentIds;
    private ConcurrentDictionary`2<string, List`1<string>> _childIds;
    private ConcurrentDictionary`2<string, List`1<TaskCompletionSource`1<CdpFrame>>> _waitRequests;
    [CompilerGeneratedAttribute]
private CdpFrame <MainFrame>k__BackingField;
    public CdpFrame MainFrame { get; public set; }
    public CdpFrame[] Frames { get; }
    [CompilerGeneratedAttribute]
public CdpFrame get_MainFrame();
    [CompilerGeneratedAttribute]
public void set_MainFrame(CdpFrame value);
    public CdpFrame[] get_Frames();
    internal Task`1<CdpFrame> GetFrameAsync(string frameId);
    internal Task`1<CdpFrame> TryGetFrameAsync(string frameId);
    internal CdpFrame GetById(string id);
    internal Task`1<CdpFrame> WaitForFrameAsync(string frameId);
    internal void AddFrame(CdpFrame frame);
    internal void RemoveFrame(Frame frame);
    internal CdpFrame[] GetChildFrames(string frameId);
    internal Frame GetParentFrame(string frameId);
    [CompilerGeneratedAttribute]
private CdpFrame <GetChildFrames>b__16_0(string id);
}
internal interface PuppeteerSharp.Cdp.IFrameProvider {
    public abstract virtual Task`1<CdpFrame> GetFrameAsync(string frameId);
}
internal class PuppeteerSharp.Cdp.LifecycleWatcher : object {
    private static Dictionary`2<WaitUntilNavigation, string> _puppeteerToProtocolLifecycle;
    private static WaitUntilNavigation[] _defaultWaitUntil;
    private NetworkManager _networkManager;
    private CdpFrame _frame;
    private IEnumerable`1<string> _expectedLifecycle;
    private int _timeout;
    private string _initialLoaderId;
    private TaskCompletionSource`1<bool> _newDocumentNavigationTaskWrapper;
    private TaskCompletionSource`1<bool> _sameDocumentNavigationTaskWrapper;
    private TaskCompletionSource`1<bool> _lifecycleTaskWrapper;
    private TaskCompletionSource`1<bool> _terminationTaskWrapper;
    private CancellationTokenSource _terminationCancellationToken;
    private IRequest _navigationRequest;
    private bool _hasSameDocumentNavigation;
    private bool _swapped;
    public Task`1<bool> SameDocumentNavigationTask { get; }
    public Task`1<bool> NewDocumentNavigationTask { get; }
    public CdpHttpResponse NavigationResponse { get; }
    public Task TerminationTask { get; }
    public Task LifecycleTask { get; }
    public LifecycleWatcher(NetworkManager networkManager, CdpFrame frame, WaitUntilNavigation[] waitUntil, int timeout);
    private static LifecycleWatcher();
    public Task`1<bool> get_SameDocumentNavigationTask();
    public Task`1<bool> get_NewDocumentNavigationTask();
    public CdpHttpResponse get_NavigationResponse();
    public Task get_TerminationTask();
    public Task get_LifecycleTask();
    public sealed virtual void Dispose();
    private void Navigated(object sender, FrameNavigatedEventArgs e);
    private void FrameManager_LifecycleEvent(object sender, FrameEventArgs e);
    private void FrameSwapped(object sender, EventArgs e);
    private void OnFrameDetached(object sender, EventArgs e);
    private void CheckLifecycleComplete();
    private void Terminate(PuppeteerException ex);
    private void OnRequest(object sender, RequestEventArgs e);
    private void NavigatedWithinDocument(object sender, EventArgs e);
    private bool CheckLifecycle(Frame frame, IEnumerable`1<string> expectedLifecycle);
}
internal class PuppeteerSharp.Cdp.Messaging.AccessibilityGetFullAXTreeResponse : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<AXTreeNode> <Nodes>k__BackingField;
    public IEnumerable`1<AXTreeNode> Nodes { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<AXTreeNode> get_Nodes();
    [CompilerGeneratedAttribute]
public void set_Nodes(IEnumerable`1<AXTreeNode> value);
}
internal class PuppeteerSharp.Cdp.Messaging.AccessibilityQueryAXTreeRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessibleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    public string ObjectId { get; public set; }
    public string AccessibleName { get; public set; }
    public string Role { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_AccessibleName();
    [CompilerGeneratedAttribute]
public void set_AccessibleName(string value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.AccessibilityQueryAXTreeResponse : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<AXTreeNode> <Nodes>k__BackingField;
    public IEnumerable`1<AXTreeNode> Nodes { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<AXTreeNode> get_Nodes();
    [CompilerGeneratedAttribute]
public void set_Nodes(IEnumerable`1<AXTreeNode> value);
}
internal class PuppeteerSharp.Cdp.Messaging.BasicFrameResponse : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    public string FrameId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.BindingCalledResponse : object {
    private string _payloadJson;
    [CompilerGeneratedAttribute]
private int <ExecutionContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingCalledResponsePayload <BindingPayload>k__BackingField;
    public int ExecutionContextId { get; public set; }
    public BindingCalledResponsePayload BindingPayload { get; public set; }
    public string Payload { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(int value);
    [CompilerGeneratedAttribute]
public BindingCalledResponsePayload get_BindingPayload();
    [CompilerGeneratedAttribute]
public void set_BindingPayload(BindingCalledResponsePayload value);
    public string get_Payload();
    public void set_Payload(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.BrowserGetVersionResponse : object {
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    public string UserAgent { get; public set; }
    public string Product { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.BrowserGrantPermissionsRequest : object {
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private OverridePermission[] <Permissions>k__BackingField;
    public string Origin { get; public set; }
    public string BrowserContextId { get; public set; }
    public OverridePermission[] Permissions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserContextId();
    [CompilerGeneratedAttribute]
public void set_BrowserContextId(string value);
    [CompilerGeneratedAttribute]
public OverridePermission[] get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(OverridePermission[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.BrowserResetPermissionsRequest : object {
    [CompilerGeneratedAttribute]
private string <BrowserContextId>k__BackingField;
    public string BrowserContextId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BrowserContextId();
    [CompilerGeneratedAttribute]
public void set_BrowserContextId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.CertificateErrorResponse : object {
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    public int EventId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.ConnectionError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Message { get; public set; }
    public string Data { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.ConnectionRequest : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public int Id { get; public set; }
    public string Method { get; public set; }
    public object Params { get; public set; }
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public object get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(object value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.ConnectionResponse : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public Nullable`1<int> Id { get; public set; }
    public ConnectionError Error { get; public set; }
    public JObject Result { get; public set; }
    public string Method { get; public set; }
    public JToken Params { get; public set; }
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ConnectionError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ConnectionError value);
    [CompilerGeneratedAttribute]
public JObject get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(JObject value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public JToken get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(JToken value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.ConnectionResponseParams : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetInfo <TargetInfo>k__BackingField;
    public string SessionId { get; public set; }
    public string Message { get; public set; }
    public string Stream { get; public set; }
    public TargetInfo TargetInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(string value);
    [CompilerGeneratedAttribute]
public TargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
public void set_TargetInfo(TargetInfo value);
}
internal class PuppeteerSharp.Cdp.Messaging.ContinueWithAuthRequest : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinueWithAuthRequestChallengeResponse <AuthChallengeResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public string RequestId { get; public set; }
    public ContinueWithAuthRequestChallengeResponse AuthChallengeResponse { get; public set; }
    public string RawResponse { get; public set; }
    public string ErrorReason { get; public set; }
    public string Url { get; public set; }
    public string Method { get; public set; }
    public string PostData { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public ContinueWithAuthRequestChallengeResponse get_AuthChallengeResponse();
    [CompilerGeneratedAttribute]
public void set_AuthChallengeResponse(ContinueWithAuthRequestChallengeResponse value);
    [CompilerGeneratedAttribute]
public string get_RawResponse();
    [CompilerGeneratedAttribute]
public void set_RawResponse(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorReason();
    [CompilerGeneratedAttribute]
public void set_ErrorReason(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
}
internal class PuppeteerSharp.Cdp.Messaging.ContinueWithAuthRequestChallengeResponse : object {
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string Response { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.CreateBrowserContextResponse : object {
    [CompilerGeneratedAttribute]
private string <BrowserContextId>k__BackingField;
    public string BrowserContextId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BrowserContextId();
    [CompilerGeneratedAttribute]
public void set_BrowserContextId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.CssGetStyleSheetTextRequest : object {
    [CompilerGeneratedAttribute]
private string <StyleSheetId>k__BackingField;
    public string StyleSheetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StyleSheetId();
    [CompilerGeneratedAttribute]
public void set_StyleSheetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.CssGetStyleSheetTextResponse : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.CSSStopRuleUsageTrackingResponse : object {
    [CompilerGeneratedAttribute]
private CSSStopRuleUsageTrackingRuleUsage[] <RuleUsage>k__BackingField;
    public CSSStopRuleUsageTrackingRuleUsage[] RuleUsage { get; public set; }
    [CompilerGeneratedAttribute]
public CSSStopRuleUsageTrackingRuleUsage[] get_RuleUsage();
    [CompilerGeneratedAttribute]
public void set_RuleUsage(CSSStopRuleUsageTrackingRuleUsage[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.CSSStyleSheetAddedResponse : object {
    [CompilerGeneratedAttribute]
private CSSStyleSheetAddedResponseHeader <Header>k__BackingField;
    public CSSStyleSheetAddedResponseHeader Header { get; public set; }
    [CompilerGeneratedAttribute]
public CSSStyleSheetAddedResponseHeader get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(CSSStyleSheetAddedResponseHeader value);
}
internal class PuppeteerSharp.Cdp.Messaging.DebuggerGetScriptSourceRequest : object {
    [CompilerGeneratedAttribute]
private string <ScriptId>k__BackingField;
    public string ScriptId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ScriptId();
    [CompilerGeneratedAttribute]
public void set_ScriptId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DebuggerGetScriptSourceResponse : object {
    [CompilerGeneratedAttribute]
private string <ScriptSource>k__BackingField;
    public string ScriptSource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ScriptSource();
    [CompilerGeneratedAttribute]
public void set_ScriptSource(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DebuggerScriptParsedResponse : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptId>k__BackingField;
    public string Url { get; public set; }
    public string ScriptId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptId();
    [CompilerGeneratedAttribute]
public void set_ScriptId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DebuggerSetSkipAllPausesRequest : object {
    [CompilerGeneratedAttribute]
private bool <Skip>k__BackingField;
    public bool Skip { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.DeviceAccessCancelPrompt : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DeviceAccessDeviceRequestPromptedResponse : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceAccessDevice[] <Devices>k__BackingField;
    public string Id { get; public set; }
    public DeviceAccessDevice[] Devices { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DeviceAccessDevice[] get_Devices();
    [CompilerGeneratedAttribute]
public void set_Devices(DeviceAccessDevice[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.DeviceAccessSelectPrompt : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    public string RequestId { get; public set; }
    public string DeviceId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
public void set_DeviceId(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum PuppeteerSharp.Cdp.Messaging.DispatchKeyEventType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DispatchKeyEventType KeyDown;
    [EnumMemberAttribute]
public static DispatchKeyEventType RawKeyDown;
    [EnumMemberAttribute]
public static DispatchKeyEventType KeyUp;
}
internal class PuppeteerSharp.Cdp.Messaging.DomDescribeNodeRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomDescribeNodeResponse : object {
    [CompilerGeneratedAttribute]
private DomNode <Node>k__BackingField;
    public DomNode Node { get; public set; }
    [CompilerGeneratedAttribute]
public DomNode get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(DomNode value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomGetBoxModelRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BackendNodeId>k__BackingField;
    public string ObjectId { get; public set; }
    public object BackendNodeId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public object get_BackendNodeId();
    [CompilerGeneratedAttribute]
public void set_BackendNodeId(object value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomGetBoxModelResponse : object {
    [CompilerGeneratedAttribute]
private BoxModelResponseModel <Model>k__BackingField;
    public BoxModelResponseModel Model { get; public set; }
    [CompilerGeneratedAttribute]
public BoxModelResponseModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(BoxModelResponseModel value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomGetContentQuadsRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomGetFrameOwnerRequest : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    public string FrameId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomGetFrameOwnerResponse : object {
    [CompilerGeneratedAttribute]
private object <BackendNodeId>k__BackingField;
    public object BackendNodeId { get; public set; }
    [CompilerGeneratedAttribute]
public object get_BackendNodeId();
    [CompilerGeneratedAttribute]
public void set_BackendNodeId(object value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomResolveNodeRequest : object {
    [CompilerGeneratedAttribute]
private object <BackendNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionContextId>k__BackingField;
    public object BackendNodeId { get; public set; }
    public int ExecutionContextId { get; public set; }
    [CompilerGeneratedAttribute]
public object get_BackendNodeId();
    [CompilerGeneratedAttribute]
public void set_BackendNodeId(object value);
    [CompilerGeneratedAttribute]
public int get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomResolveNodeResponse : object {
    [CompilerGeneratedAttribute]
private RemoteObject <Object>k__BackingField;
    public RemoteObject Object { get; public set; }
    [CompilerGeneratedAttribute]
public RemoteObject get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(RemoteObject value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomScrollIntoViewIfNeededRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.DomSetFileInputFilesRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BackendNodeId>k__BackingField;
    public string ObjectId { get; public set; }
    public String[] Files { get; public set; }
    public object BackendNodeId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public String[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(String[] value);
    [CompilerGeneratedAttribute]
public object get_BackendNodeId();
    [CompilerGeneratedAttribute]
public void set_BackendNodeId(object value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum PuppeteerSharp.Cdp.Messaging.DragEventType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DragEventType DragEnter;
    [EnumMemberAttribute]
public static DragEventType DragOver;
    [EnumMemberAttribute]
public static DragEventType Drop;
}
internal class PuppeteerSharp.Cdp.Messaging.EmulateTimezoneRequest : object {
    [CompilerGeneratedAttribute]
private string <TimezoneId>k__BackingField;
    public string TimezoneId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TimezoneId();
    [CompilerGeneratedAttribute]
public void set_TimezoneId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetCPUThrottlingRateRequest : object {
    [CompilerGeneratedAttribute]
private decimal <Rate>k__BackingField;
    public decimal Rate { get; public set; }
    [CompilerGeneratedAttribute]
public decimal get_Rate();
    [CompilerGeneratedAttribute]
public void set_Rate(decimal value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetDefaultBackgroundColorOverrideColor : object {
    [CompilerGeneratedAttribute]
private int <R>k__BackingField;
    [CompilerGeneratedAttribute]
private int <B>k__BackingField;
    [CompilerGeneratedAttribute]
private int <A>k__BackingField;
    [CompilerGeneratedAttribute]
private int <G>k__BackingField;
    public int R { get; public set; }
    public int B { get; public set; }
    public int A { get; public set; }
    public int G { get; public set; }
    [CompilerGeneratedAttribute]
public int get_R();
    [CompilerGeneratedAttribute]
public void set_R(int value);
    [CompilerGeneratedAttribute]
public int get_B();
    [CompilerGeneratedAttribute]
public void set_B(int value);
    [CompilerGeneratedAttribute]
public int get_A();
    [CompilerGeneratedAttribute]
public void set_A(int value);
    [CompilerGeneratedAttribute]
public int get_G();
    [CompilerGeneratedAttribute]
public void set_G(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetDefaultBackgroundColorOverrideRequest : object {
    [CompilerGeneratedAttribute]
private EmulationSetDefaultBackgroundColorOverrideColor <Color>k__BackingField;
    public EmulationSetDefaultBackgroundColorOverrideColor Color { get; public set; }
    [CompilerGeneratedAttribute]
public EmulationSetDefaultBackgroundColorOverrideColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(EmulationSetDefaultBackgroundColorOverrideColor value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetDeviceMetricsOverrideRequest : object {
    [CompilerGeneratedAttribute]
private bool <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeviceScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenOrientation <ScreenOrientation>k__BackingField;
    public bool Mobile { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public double DeviceScaleFactor { get; public set; }
    public ScreenOrientation ScreenOrientation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Mobile();
    [CompilerGeneratedAttribute]
public void set_Mobile(bool value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public double get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(double value);
    [CompilerGeneratedAttribute]
public ScreenOrientation get_ScreenOrientation();
    [CompilerGeneratedAttribute]
public void set_ScreenOrientation(ScreenOrientation value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetEmulatedMediaFeatureRequest : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<MediaFeatureValue> <Features>k__BackingField;
    public IEnumerable`1<MediaFeatureValue> Features { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<MediaFeatureValue> get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(IEnumerable`1<MediaFeatureValue> value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetEmulatedMediaTypeRequest : object {
    [CompilerGeneratedAttribute]
private MediaType <Media>k__BackingField;
    public MediaType Media { get; public set; }
    [CompilerGeneratedAttribute]
public MediaType get_Media();
    [CompilerGeneratedAttribute]
public void set_Media(MediaType value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetEmulatedVisionDeficiencyRequest : object {
    [CompilerGeneratedAttribute]
private VisionDeficiency <Type>k__BackingField;
    public VisionDeficiency Type { get; public set; }
    [CompilerGeneratedAttribute]
public VisionDeficiency get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(VisionDeficiency value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetIdleOverrideRequest : object {
    [CompilerGeneratedAttribute]
private bool <IsUserActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScreenUnlocked>k__BackingField;
    public bool IsUserActive { get; public set; }
    public bool IsScreenUnlocked { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsUserActive();
    [CompilerGeneratedAttribute]
public void set_IsUserActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsScreenUnlocked();
    [CompilerGeneratedAttribute]
public void set_IsScreenUnlocked(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetScriptExecutionDisabledRequest : object {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.EmulationSetTouchEmulationEnabledRequest : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public string Configuration { get; public set; }
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.EvaluateExceptionResponseDetails : object {
    [CompilerGeneratedAttribute]
private EvaluateExceptionResponseInfo <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluateExceptionResponseStackTrace <StackTrace>k__BackingField;
    public EvaluateExceptionResponseInfo Exception { get; public set; }
    public string Text { get; public set; }
    public EvaluateExceptionResponseStackTrace StackTrace { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluateExceptionResponseInfo get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(EvaluateExceptionResponseInfo value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public EvaluateExceptionResponseStackTrace get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(EvaluateExceptionResponseStackTrace value);
}
internal class PuppeteerSharp.Cdp.Messaging.EvaluateExceptionResponseInfo : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Description { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.EvaluateExceptionResponseStackTrace : object {
    [CompilerGeneratedAttribute]
private EvaluationExceptionResponseCallFrame[] <CallFrames>k__BackingField;
    public EvaluationExceptionResponseCallFrame[] CallFrames { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluationExceptionResponseCallFrame[] get_CallFrames();
    [CompilerGeneratedAttribute]
public void set_CallFrames(EvaluationExceptionResponseCallFrame[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.EvaluateHandleResponse : object {
    [CompilerGeneratedAttribute]
private EvaluateExceptionResponseDetails <ExceptionDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteObject <Result>k__BackingField;
    public EvaluateExceptionResponseDetails ExceptionDetails { get; public set; }
    public RemoteObject Result { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluateExceptionResponseDetails get_ExceptionDetails();
    [CompilerGeneratedAttribute]
public void set_ExceptionDetails(EvaluateExceptionResponseDetails value);
    [CompilerGeneratedAttribute]
public RemoteObject get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(RemoteObject value);
}
internal class PuppeteerSharp.Cdp.Messaging.EvaluationExceptionResponseCallFrame : object {
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    public int ColumnNumber { get; public set; }
    public int LineNumber { get; public set; }
    public string Url { get; public set; }
    public string FunctionName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchAuthRequiredResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Payload <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNavigationRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <ResponseStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthChallengeData <AuthChallenge>k__BackingField;
    public string RequestId { get; public set; }
    public Payload Request { get; public set; }
    public string FrameId { get; public set; }
    public ResourceType ResourceType { get; public set; }
    public bool IsNavigationRequest { get; public set; }
    public Dictionary`2<string, object> ResponseHeaders { get; public set; }
    public HttpStatusCode ResponseStatusCode { get; public set; }
    public string RedirectUrl { get; public set; }
    public AuthChallengeData AuthChallenge { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public Payload get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Payload value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public ResourceType get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(ResourceType value);
    [CompilerGeneratedAttribute]
public bool get_IsNavigationRequest();
    [CompilerGeneratedAttribute]
public void set_IsNavigationRequest(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_ResponseStatusCode();
    [CompilerGeneratedAttribute]
public void set_ResponseStatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    [CompilerGeneratedAttribute]
public AuthChallengeData get_AuthChallenge();
    [CompilerGeneratedAttribute]
public void set_AuthChallenge(AuthChallengeData value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchContinueRequestRequest : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private Header[] <Headers>k__BackingField;
    public string RequestId { get; public set; }
    public string Url { get; public set; }
    public string Method { get; public set; }
    public string PostData { get; public set; }
    public Header[] Headers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(string value);
    [CompilerGeneratedAttribute]
public Header[] get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Header[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchEnableRequest : object {
    [CompilerGeneratedAttribute]
private bool <HandleAuthRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Pattern[] <Patterns>k__BackingField;
    public bool HandleAuthRequests { get; public set; }
    public Pattern[] Patterns { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HandleAuthRequests();
    [CompilerGeneratedAttribute]
public void set_HandleAuthRequests(bool value);
    [CompilerGeneratedAttribute]
public Pattern[] get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(Pattern[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchFailRequest : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorReason>k__BackingField;
    public string RequestId { get; public set; }
    public string ErrorReason { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorReason();
    [CompilerGeneratedAttribute]
public void set_ErrorReason(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchFulfillRequest : object {
    private static Dictionary`2<int, string> StatusTexts;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Header[] <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string RequestId { get; public set; }
    public int ResponseCode { get; public set; }
    public string ResponsePhrase { get; }
    public Header[] ResponseHeaders { get; public set; }
    public string Body { get; public set; }
    private static FetchFulfillRequest();
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public int get_ResponseCode();
    [CompilerGeneratedAttribute]
public void set_ResponseCode(int value);
    public string get_ResponsePhrase();
    [CompilerGeneratedAttribute]
public Header[] get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(Header[] value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.FetchRequestPausedResponse : RequestWillBeSentPayload {
    [CompilerGeneratedAttribute]
private Nullable`1<ResourceType> <ResourceType>k__BackingField;
    public Nullable`1<ResourceType> ResourceType { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ResourceType> get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Nullable`1<ResourceType> value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum PuppeteerSharp.Cdp.Messaging.FileChooserAction : Enum {
    public int value__;
    [EnumMemberAttribute]
public static FileChooserAction Accept;
    [EnumMemberAttribute]
public static FileChooserAction Fallback;
    [EnumMemberAttribute]
public static FileChooserAction Cancel;
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
internal enum PuppeteerSharp.Cdp.Messaging.FrameDetachedReason : Enum {
    public int value__;
    public static FrameDetachedReason Unknown;
    public static FrameDetachedReason Remove;
    public static FrameDetachedReason Swap;
}
internal class PuppeteerSharp.Cdp.Messaging.GetBrowserContextsResponse : object {
    [CompilerGeneratedAttribute]
private String[] <BrowserContextIds>k__BackingField;
    public String[] BrowserContextIds { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_BrowserContextIds();
    [CompilerGeneratedAttribute]
public void set_BrowserContextIds(String[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.GetContentQuadsResponse : object {
    [CompilerGeneratedAttribute]
private Decimal[][] <Quads>k__BackingField;
    public Decimal[][] Quads { get; public set; }
    [CompilerGeneratedAttribute]
public Decimal[][] get_Quads();
    [CompilerGeneratedAttribute]
public void set_Quads(Decimal[][] value);
}
internal class PuppeteerSharp.Cdp.Messaging.Header : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputDispatchDragEventRequest : object {
    [CompilerGeneratedAttribute]
private DragEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private DragData <Data>k__BackingField;
    public DragEventType Type { get; public set; }
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public int Modifiers { get; public set; }
    public DragData Data { get; public set; }
    [CompilerGeneratedAttribute]
public DragEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DragEventType value);
    [CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
    [CompilerGeneratedAttribute]
public int get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(int value);
    [CompilerGeneratedAttribute]
public DragData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(DragData value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputDispatchKeyEventRequest : object {
    [CompilerGeneratedAttribute]
private DispatchKeyEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WindowsVirtualKeyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnmodifiedText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRepeat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeypad>k__BackingField;
    public DispatchKeyEventType Type { get; public set; }
    public int Modifiers { get; public set; }
    public int WindowsVirtualKeyCode { get; public set; }
    public string Code { get; public set; }
    public string Key { get; public set; }
    public string Text { get; public set; }
    public string UnmodifiedText { get; public set; }
    public bool AutoRepeat { get; public set; }
    public int Location { get; public set; }
    public bool IsKeypad { get; public set; }
    [CompilerGeneratedAttribute]
public DispatchKeyEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DispatchKeyEventType value);
    [CompilerGeneratedAttribute]
public int get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(int value);
    [CompilerGeneratedAttribute]
public int get_WindowsVirtualKeyCode();
    [CompilerGeneratedAttribute]
public void set_WindowsVirtualKeyCode(int value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_UnmodifiedText();
    [CompilerGeneratedAttribute]
public void set_UnmodifiedText(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoRepeat();
    [CompilerGeneratedAttribute]
public void set_AutoRepeat(bool value);
    [CompilerGeneratedAttribute]
public int get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(int value);
    [CompilerGeneratedAttribute]
public bool get_IsKeypad();
    [CompilerGeneratedAttribute]
public void set_IsKeypad(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputDispatchMouseEventRequest : object {
    [CompilerGeneratedAttribute]
private MouseEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButton <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <DeltaX>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <DeltaY>k__BackingField;
    [CompilerGeneratedAttribute]
private PointerType <PointerType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Buttons>k__BackingField;
    public MouseEventType Type { get; public set; }
    public MouseButton Button { get; public set; }
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public int Modifiers { get; public set; }
    public int ClickCount { get; public set; }
    public decimal DeltaX { get; public set; }
    public decimal DeltaY { get; public set; }
    public PointerType PointerType { get; public set; }
    public int Buttons { get; public set; }
    [CompilerGeneratedAttribute]
public MouseEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MouseEventType value);
    [CompilerGeneratedAttribute]
public MouseButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MouseButton value);
    [CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
    [CompilerGeneratedAttribute]
public int get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(int value);
    [CompilerGeneratedAttribute]
public int get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(int value);
    [CompilerGeneratedAttribute]
public decimal get_DeltaX();
    [CompilerGeneratedAttribute]
public void set_DeltaX(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_DeltaY();
    [CompilerGeneratedAttribute]
public void set_DeltaY(decimal value);
    [CompilerGeneratedAttribute]
public PointerType get_PointerType();
    [CompilerGeneratedAttribute]
public void set_PointerType(PointerType value);
    [CompilerGeneratedAttribute]
public int get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputDispatchTouchEventRequest : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchPoint[] <TouchPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Modifiers>k__BackingField;
    public string Type { get; internal set; }
    public TouchPoint[] TouchPoints { get; public set; }
    public int Modifiers { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    [CompilerGeneratedAttribute]
public TouchPoint[] get_TouchPoints();
    [CompilerGeneratedAttribute]
public void set_TouchPoints(TouchPoint[] value);
    [CompilerGeneratedAttribute]
public int get_Modifiers();
    [CompilerGeneratedAttribute]
internal void set_Modifiers(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputInsertTextRequest : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.InputSetInterceptDragsRequest : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.IOCloseRequest : object {
    [CompilerGeneratedAttribute]
private string <Handle>k__BackingField;
    public string Handle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.IOReadRequest : object {
    [CompilerGeneratedAttribute]
private string <Handle>k__BackingField;
    public string Handle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.IOReadResponse : object {
    [CompilerGeneratedAttribute]
private bool <Eof>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64Encoded>k__BackingField;
    public bool Eof { get; public set; }
    public string Data { get; public set; }
    public bool Base64Encoded { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Eof();
    [CompilerGeneratedAttribute]
public void set_Eof(bool value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public bool get_Base64Encoded();
    [CompilerGeneratedAttribute]
public void set_Base64Encoded(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.LifecycleEventResponse : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoaderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string FrameId { get; public set; }
    public string LoaderId { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_LoaderId();
    [CompilerGeneratedAttribute]
public void set_LoaderId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.LoadingFailedEventResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    public string RequestId { get; public set; }
    public string ErrorText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.LoadingFinishedEventResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.LogEntryAddedResponse : object {
    [CompilerGeneratedAttribute]
private LogEntry <Entry>k__BackingField;
    public LogEntry Entry { get; public set; }
    [CompilerGeneratedAttribute]
public LogEntry get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(LogEntry value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum PuppeteerSharp.Cdp.Messaging.MouseEventType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static MouseEventType MouseMoved;
    [EnumMemberAttribute]
public static MouseEventType MousePressed;
    [EnumMemberAttribute]
public static MouseEventType MouseReleased;
    [EnumMemberAttribute]
public static MouseEventType MouseWheel;
}
internal class PuppeteerSharp.Cdp.Messaging.NavigatedWithinDocumentResponse : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string FrameId { get; public set; }
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.Cdp.Messaging.NavigationType : Enum {
    public int value__;
    public static NavigationType Navigation;
    public static NavigationType BackForwardCacheRestore;
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkEmulateNetworkConditionsRequest : object {
    [CompilerGeneratedAttribute]
private bool <Offline>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latency>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DownloadThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UploadThroughput>k__BackingField;
    public bool Offline { get; public set; }
    public double Latency { get; public set; }
    public double DownloadThroughput { get; public set; }
    public double UploadThroughput { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Offline();
    [CompilerGeneratedAttribute]
public void set_Offline(bool value);
    [CompilerGeneratedAttribute]
public double get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(double value);
    [CompilerGeneratedAttribute]
public double get_DownloadThroughput();
    [CompilerGeneratedAttribute]
public void set_DownloadThroughput(double value);
    [CompilerGeneratedAttribute]
public double get_UploadThroughput();
    [CompilerGeneratedAttribute]
public void set_UploadThroughput(double value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkGetCookiesRequest : object {
    [CompilerGeneratedAttribute]
private String[] <Urls>k__BackingField;
    public String[] Urls { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Urls();
    [CompilerGeneratedAttribute]
public void set_Urls(String[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkGetCookiesResponse : object {
    [CompilerGeneratedAttribute]
private CookieParam[] <Cookies>k__BackingField;
    public CookieParam[] Cookies { get; public set; }
    [CompilerGeneratedAttribute]
public CookieParam[] get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(CookieParam[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkGetResponseBodyRequest : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkGetResponseBodyResponse : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64Encoded>k__BackingField;
    public string Body { get; public set; }
    public bool Base64Encoded { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public bool get_Base64Encoded();
    [CompilerGeneratedAttribute]
public void set_Base64Encoded(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkSetCacheDisabledRequest : object {
    [CompilerGeneratedAttribute]
private bool <CacheDisabled>k__BackingField;
    public bool CacheDisabled { get; public set; }
    public NetworkSetCacheDisabledRequest(bool cacheDisabled);
    [CompilerGeneratedAttribute]
public bool get_CacheDisabled();
    [CompilerGeneratedAttribute]
public void set_CacheDisabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkSetCookiesRequest : object {
    [CompilerGeneratedAttribute]
private CookieParam[] <Cookies>k__BackingField;
    public CookieParam[] Cookies { get; public set; }
    [CompilerGeneratedAttribute]
public CookieParam[] get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(CookieParam[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkSetExtraHTTPHeadersRequest : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public Dictionary`2<string, string> Headers { get; public set; }
    public NetworkSetExtraHTTPHeadersRequest(Dictionary`2<string, string> headers);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
}
internal class PuppeteerSharp.Cdp.Messaging.NetworkSetUserAgentOverrideRequest : object {
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private UserAgentMetadata <UserAgentMetadata>k__BackingField;
    public string UserAgent { get; public set; }
    public UserAgentMetadata UserAgentMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public UserAgentMetadata get_UserAgentMetadata();
    [CompilerGeneratedAttribute]
public void set_UserAgentMetadata(UserAgentMetadata value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageAddScriptToEvaluateOnNewDocumentRequest : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorldName>k__BackingField;
    public string Source { get; public set; }
    public string WorldName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_WorldName();
    [CompilerGeneratedAttribute]
public void set_WorldName(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageAddScriptToEvaluateOnNewDocumentResponse : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageCaptureScreenshotRequest : object {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private Clip <Clip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureBeyondViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FromSurface>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptimizeForSpeed>k__BackingField;
    public string Format { get; public set; }
    public int Quality { get; public set; }
    public Clip Clip { get; public set; }
    public bool CaptureBeyondViewport { get; public set; }
    public Nullable`1<bool> FromSurface { get; public set; }
    public Nullable`1<bool> OptimizeForSpeed { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public int get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(int value);
    [CompilerGeneratedAttribute]
public Clip get_Clip();
    [CompilerGeneratedAttribute]
public void set_Clip(Clip value);
    [CompilerGeneratedAttribute]
public bool get_CaptureBeyondViewport();
    [CompilerGeneratedAttribute]
public void set_CaptureBeyondViewport(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FromSurface();
    [CompilerGeneratedAttribute]
public void set_FromSurface(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OptimizeForSpeed();
    [CompilerGeneratedAttribute]
public void set_OptimizeForSpeed(Nullable`1<bool> value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageCaptureScreenshotResponse : object {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageConsoleResponse : object {
    [CompilerGeneratedAttribute]
private ConsoleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteObject[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTrace <StackTrace>k__BackingField;
    public ConsoleType Type { get; public set; }
    public RemoteObject[] Args { get; public set; }
    public int ExecutionContextId { get; public set; }
    public StackTrace StackTrace { get; public set; }
    [CompilerGeneratedAttribute]
public ConsoleType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ConsoleType value);
    [CompilerGeneratedAttribute]
public RemoteObject[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(RemoteObject[] value);
    [CompilerGeneratedAttribute]
public int get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(int value);
    [CompilerGeneratedAttribute]
public StackTrace get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(StackTrace value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageCreateIsolatedWorldRequest : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GrantUniveralAccess>k__BackingField;
    public string FrameId { get; public set; }
    public string WorldName { get; public set; }
    public bool GrantUniveralAccess { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_WorldName();
    [CompilerGeneratedAttribute]
public void set_WorldName(string value);
    [CompilerGeneratedAttribute]
public bool get_GrantUniveralAccess();
    [CompilerGeneratedAttribute]
public void set_GrantUniveralAccess(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageFileChooserOpenedResponse : object {
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BackendNodeId>k__BackingField;
    public string Mode { get; public set; }
    public string FrameId { get; public set; }
    public object BackendNodeId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public object get_BackendNodeId();
    [CompilerGeneratedAttribute]
public void set_BackendNodeId(object value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageFrameAttachedResponse : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentFrameId>k__BackingField;
    public string FrameId { get; public set; }
    public string ParentFrameId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentFrameId();
    [CompilerGeneratedAttribute]
public void set_ParentFrameId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageFrameDetachedResponse : BasicFrameResponse {
    [CompilerGeneratedAttribute]
private FrameDetachedReason <Reason>k__BackingField;
    public FrameDetachedReason Reason { get; public set; }
    [CompilerGeneratedAttribute]
public FrameDetachedReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(FrameDetachedReason value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageFrameNavigatedResponse : object {
    [CompilerGeneratedAttribute]
private FramePayload <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationType <Type>k__BackingField;
    public FramePayload Frame { get; public set; }
    public NavigationType Type { get; public set; }
    [CompilerGeneratedAttribute]
public FramePayload get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(FramePayload value);
    [CompilerGeneratedAttribute]
public NavigationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(NavigationType value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageGetFrameTree : object {
    [CompilerGeneratedAttribute]
private FramePayload <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private PageGetFrameTree[] <ChildFrames>k__BackingField;
    public FramePayload Frame { get; public set; }
    public PageGetFrameTree[] ChildFrames { get; public set; }
    [CompilerGeneratedAttribute]
public FramePayload get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(FramePayload value);
    [CompilerGeneratedAttribute]
public PageGetFrameTree[] get_ChildFrames();
    [CompilerGeneratedAttribute]
public void set_ChildFrames(PageGetFrameTree[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageGetFrameTreeResponse : object {
    [CompilerGeneratedAttribute]
private PageGetFrameTree <FrameTree>k__BackingField;
    public PageGetFrameTree FrameTree { get; public set; }
    [CompilerGeneratedAttribute]
public PageGetFrameTree get_FrameTree();
    [CompilerGeneratedAttribute]
public void set_FrameTree(PageGetFrameTree value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageGetLayoutMetricsResponse : object {
    [CompilerGeneratedAttribute]
private Rect <ContentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <CssContentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutContentSize <CssVisualViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutContentSize <LayoutViewport>k__BackingField;
    public Rect ContentSize { get; public set; }
    public Rect CssContentSize { get; public set; }
    public LayoutContentSize CssVisualViewport { get; public set; }
    public LayoutContentSize LayoutViewport { get; public set; }
    [CompilerGeneratedAttribute]
public Rect get_ContentSize();
    [CompilerGeneratedAttribute]
public void set_ContentSize(Rect value);
    [CompilerGeneratedAttribute]
public Rect get_CssContentSize();
    [CompilerGeneratedAttribute]
public void set_CssContentSize(Rect value);
    [CompilerGeneratedAttribute]
public LayoutContentSize get_CssVisualViewport();
    [CompilerGeneratedAttribute]
public void set_CssVisualViewport(LayoutContentSize value);
    [CompilerGeneratedAttribute]
public LayoutContentSize get_LayoutViewport();
    [CompilerGeneratedAttribute]
public void set_LayoutViewport(LayoutContentSize value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageGetNavigationHistoryResponse : object {
    [CompilerGeneratedAttribute]
private int <CurrentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HistoryEntry> <Entries>k__BackingField;
    public int CurrentIndex { get; public set; }
    public List`1<HistoryEntry> Entries { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CurrentIndex();
    [CompilerGeneratedAttribute]
public void set_CurrentIndex(int value);
    [CompilerGeneratedAttribute]
public List`1<HistoryEntry> get_Entries();
    [CompilerGeneratedAttribute]
public void set_Entries(List`1<HistoryEntry> value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageHandleFileChooserRequest : object {
    [CompilerGeneratedAttribute]
private FileChooserAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Files>k__BackingField;
    public FileChooserAction Action { get; public set; }
    public IEnumerable`1<string> Files { get; public set; }
    [CompilerGeneratedAttribute]
public FileChooserAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(FileChooserAction value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<string> value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageHandleJavaScriptDialogRequest : object {
    [CompilerGeneratedAttribute]
private bool <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PromptText>k__BackingField;
    public bool Accept { get; public set; }
    public string PromptText { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(bool value);
    [CompilerGeneratedAttribute]
public string get_PromptText();
    [CompilerGeneratedAttribute]
public void set_PromptText(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageJavascriptDialogOpeningResponse : object {
    [CompilerGeneratedAttribute]
private DialogType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public DialogType Type { get; public set; }
    public string DefaultPrompt { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public DialogType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DialogType value);
    [CompilerGeneratedAttribute]
public string get_DefaultPrompt();
    [CompilerGeneratedAttribute]
public void set_DefaultPrompt(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageNavigateRequest : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Referrer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferrerPolicy>k__BackingField;
    public string Url { get; public set; }
    public string Referrer { get; public set; }
    public string FrameId { get; public set; }
    public string ReferrerPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Referrer();
    [CompilerGeneratedAttribute]
public void set_Referrer(string value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_ReferrerPolicy();
    [CompilerGeneratedAttribute]
public void set_ReferrerPolicy(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageNavigateResponse : object {
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoaderId>k__BackingField;
    public string ErrorText { get; public set; }
    public string LoaderId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public string get_LoaderId();
    [CompilerGeneratedAttribute]
public void set_LoaderId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageNavigateToHistoryEntryRequest : object {
    [CompilerGeneratedAttribute]
private int <EntryId>k__BackingField;
    public int EntryId { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_EntryId();
    [CompilerGeneratedAttribute]
internal void set_EntryId(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.PagePrintToPDFRequest : object {
    [CompilerGeneratedAttribute]
private bool <Landscape>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayHeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <PaperWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <PaperHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferCSSPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransferMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateTaggedPDF>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDocumentOutline>k__BackingField;
    public bool Landscape { get; public set; }
    public bool DisplayHeaderFooter { get; public set; }
    public string HeaderTemplate { get; public set; }
    public string FooterTemplate { get; public set; }
    public bool PrintBackground { get; public set; }
    public decimal Scale { get; public set; }
    public decimal PaperWidth { get; public set; }
    public decimal PaperHeight { get; public set; }
    public decimal MarginTop { get; public set; }
    public decimal MarginBottom { get; public set; }
    public decimal MarginLeft { get; public set; }
    public decimal MarginRight { get; public set; }
    public string PageRanges { get; public set; }
    public bool PreferCSSPageSize { get; public set; }
    public string TransferMode { get; public set; }
    public bool GenerateTaggedPDF { get; public set; }
    public bool GenerateDocumentOutline { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Landscape();
    [CompilerGeneratedAttribute]
public void set_Landscape(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayHeaderFooter();
    [CompilerGeneratedAttribute]
public void set_DisplayHeaderFooter(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_PrintBackground();
    [CompilerGeneratedAttribute]
public void set_PrintBackground(bool value);
    [CompilerGeneratedAttribute]
public decimal get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_PaperWidth();
    [CompilerGeneratedAttribute]
public void set_PaperWidth(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_PaperHeight();
    [CompilerGeneratedAttribute]
public void set_PaperHeight(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MarginTop();
    [CompilerGeneratedAttribute]
public void set_MarginTop(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MarginBottom();
    [CompilerGeneratedAttribute]
public void set_MarginBottom(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MarginLeft();
    [CompilerGeneratedAttribute]
public void set_MarginLeft(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MarginRight();
    [CompilerGeneratedAttribute]
public void set_MarginRight(decimal value);
    [CompilerGeneratedAttribute]
public string get_PageRanges();
    [CompilerGeneratedAttribute]
public void set_PageRanges(string value);
    [CompilerGeneratedAttribute]
public bool get_PreferCSSPageSize();
    [CompilerGeneratedAttribute]
public void set_PreferCSSPageSize(bool value);
    [CompilerGeneratedAttribute]
public string get_TransferMode();
    [CompilerGeneratedAttribute]
public void set_TransferMode(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateTaggedPDF();
    [CompilerGeneratedAttribute]
public void set_GenerateTaggedPDF(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDocumentOutline();
    [CompilerGeneratedAttribute]
public void set_GenerateDocumentOutline(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.PagePrintToPDFResponse : object {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stream>k__BackingField;
    public string Data { get; public set; }
    public string Stream { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public string get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageReloadRequest : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    public string FrameId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageRemoveScriptToEvaluateOnNewDocumentRequest : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageSetBypassCSPRequest : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageSetInterceptFileChooserDialog : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.PageSetLifecycleEventsEnabledRequest : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
internal void set_Enabled(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.PerformanceGetMetricsResponse : object {
    [CompilerGeneratedAttribute]
private List`1<Metric> <Metrics>k__BackingField;
    public List`1<Metric> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Metric> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(List`1<Metric> value);
}
internal class PuppeteerSharp.Cdp.Messaging.PerformanceMetricsResponse : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Metric> <Metrics>k__BackingField;
    public string Title { get; public set; }
    public List`1<Metric> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public List`1<Metric> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(List`1<Metric> value);
}
internal class PuppeteerSharp.Cdp.Messaging.ProfilerStartPreciseCoverageRequest : object {
    [CompilerGeneratedAttribute]
private bool <CallCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Detailed>k__BackingField;
    public bool CallCount { get; public set; }
    public bool Detailed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CallCount();
    [CompilerGeneratedAttribute]
public void set_CallCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_Detailed();
    [CompilerGeneratedAttribute]
public void set_Detailed(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.ProfilerTakePreciseCoverageResponse : object {
    [CompilerGeneratedAttribute]
private ScriptCoverage[] <Result>k__BackingField;
    public ScriptCoverage[] Result { get; public set; }
    [CompilerGeneratedAttribute]
public ScriptCoverage[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ScriptCoverage[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.Protocol.Network.GetRequestPostDataRequest : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string RequestId { get; public set; }
    public GetRequestPostDataRequest(string requestId);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.Protocol.Network.GetRequestPostDataResponse : object {
    [CompilerGeneratedAttribute]
private string <PostData>k__BackingField;
    public string PostData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PuppeteerSharp.Cdp.Messaging.Protocol.Network.SetBypassServiceWorkerRequest : object {
    [CompilerGeneratedAttribute]
private bool <Bypass>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool Bypass { get; public set; }
    [CompilerGeneratedAttribute]
protected SetBypassServiceWorkerRequest(SetBypassServiceWorkerRequest original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_Bypass();
    [CompilerGeneratedAttribute]
public void set_Bypass(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SetBypassServiceWorkerRequest left, SetBypassServiceWorkerRequest right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SetBypassServiceWorkerRequest left, SetBypassServiceWorkerRequest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SetBypassServiceWorkerRequest other);
    [CompilerGeneratedAttribute]
public virtual SetBypassServiceWorkerRequest <Clone>$();
}
public class PuppeteerSharp.Cdp.Messaging.RemoteObject : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteObjectType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteObjectSubtype <Subtype>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnserializableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    public string Description { get; public set; }
    public string ClassName { get; public set; }
    public RemoteObjectType Type { get; public set; }
    public RemoteObjectSubtype Subtype { get; public set; }
    public string ObjectId { get; public set; }
    public string UnserializableValue { get; public set; }
    public JToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public RemoteObjectType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RemoteObjectType value);
    [CompilerGeneratedAttribute]
public RemoteObjectSubtype get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(RemoteObjectSubtype value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_UnserializableValue();
    [CompilerGeneratedAttribute]
public void set_UnserializableValue(string value);
    [CompilerGeneratedAttribute]
public JToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(JToken value);
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.Cdp.Messaging.RemoteObjectSubtype : Enum {
    public int value__;
    public static RemoteObjectSubtype Other;
    public static RemoteObjectSubtype Array;
    public static RemoteObjectSubtype Null;
    public static RemoteObjectSubtype Node;
    public static RemoteObjectSubtype Regexp;
    public static RemoteObjectSubtype Date;
    public static RemoteObjectSubtype Map;
    public static RemoteObjectSubtype Set;
    public static RemoteObjectSubtype Weakmap;
    public static RemoteObjectSubtype Weakset;
    public static RemoteObjectSubtype Iterator;
    public static RemoteObjectSubtype Generator;
    public static RemoteObjectSubtype Error;
    public static RemoteObjectSubtype Proxy;
    public static RemoteObjectSubtype Promise;
    public static RemoteObjectSubtype Typedarray;
    public static RemoteObjectSubtype Arraybuffer;
    public static RemoteObjectSubtype Dataview;
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.Cdp.Messaging.RemoteObjectType : Enum {
    public int value__;
    public static RemoteObjectType Other;
    public static RemoteObjectType Object;
    public static RemoteObjectType Function;
    public static RemoteObjectType Undefined;
    public static RemoteObjectType String;
    public static RemoteObjectType Number;
    public static RemoteObjectType Boolean;
    public static RemoteObjectType Symbol;
    public static RemoteObjectType Bigint;
}
internal class PuppeteerSharp.Cdp.Messaging.RequestServedFromCacheResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.RequestWillBeSentPayload : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoaderId>k__BackingField;
    [CompilerGeneratedAttribute]
private Payload <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponsePayload <RedirectResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResourceType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectHasExtraInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private Initiator <Initiator>k__BackingField;
    public string RequestId { get; public set; }
    public string LoaderId { get; public set; }
    public Payload Request { get; public set; }
    public ResponsePayload RedirectResponse { get; public set; }
    public Nullable`1<ResourceType> Type { get; public set; }
    public string FrameId { get; public set; }
    public bool RedirectHasExtraInfo { get; public set; }
    public string NetworkId { get; public set; }
    public Initiator Initiator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_LoaderId();
    [CompilerGeneratedAttribute]
public void set_LoaderId(string value);
    [CompilerGeneratedAttribute]
public Payload get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Payload value);
    [CompilerGeneratedAttribute]
public ResponsePayload get_RedirectResponse();
    [CompilerGeneratedAttribute]
public void set_RedirectResponse(ResponsePayload value);
    [CompilerGeneratedAttribute]
public Nullable`1<ResourceType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ResourceType> value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public bool get_RedirectHasExtraInfo();
    [CompilerGeneratedAttribute]
public void set_RedirectHasExtraInfo(bool value);
    [CompilerGeneratedAttribute]
public string get_NetworkId();
    [CompilerGeneratedAttribute]
public void set_NetworkId(string value);
    [CompilerGeneratedAttribute]
public Initiator get_Initiator();
    [CompilerGeneratedAttribute]
public void set_Initiator(Initiator value);
}
internal class PuppeteerSharp.Cdp.Messaging.ResponsePayload : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityDetails <SecurityDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromDiskCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromServiceWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteIPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemotePort>k__BackingField;
    public string Url { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public HttpStatusCode Status { get; public set; }
    public SecurityDetails SecurityDetails { get; public set; }
    public bool FromDiskCache { get; public set; }
    public bool FromServiceWorker { get; public set; }
    public string StatusText { get; public set; }
    [JsonPropertyAttribute("remoteIPAddress")]
public string RemoteIPAddress { get; public set; }
    public int RemotePort { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public SecurityDetails get_SecurityDetails();
    [CompilerGeneratedAttribute]
public void set_SecurityDetails(SecurityDetails value);
    [CompilerGeneratedAttribute]
public bool get_FromDiskCache();
    [CompilerGeneratedAttribute]
public void set_FromDiskCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_FromServiceWorker();
    [CompilerGeneratedAttribute]
public void set_FromServiceWorker(bool value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteIPAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteIPAddress(string value);
    [CompilerGeneratedAttribute]
public int get_RemotePort();
    [CompilerGeneratedAttribute]
public void set_RemotePort(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.ResponseReceivedExtraInfoResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadersText>k__BackingField;
    public string RequestId { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public string HeadersText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_HeadersText();
    [CompilerGeneratedAttribute]
public void set_HeadersText(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.ResponseReceivedResponse : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponsePayload <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExtraInfo>k__BackingField;
    public string RequestId { get; public set; }
    public ResponsePayload Response { get; public set; }
    public bool HasExtraInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public ResponsePayload get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(ResponsePayload value);
    [CompilerGeneratedAttribute]
public bool get_HasExtraInfo();
    [CompilerGeneratedAttribute]
public void set_HasExtraInfo(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeAddBindingRequest : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExecutionContextId>k__BackingField;
    public string Name { get; public set; }
    public string ExecutionContextName { get; public set; }
    public Nullable`1<int> ExecutionContextId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(Nullable`1<int> value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeCallFunctionOnRequest : object {
    [CompilerGeneratedAttribute]
private string <FunctionDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExecutionContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnByValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AwaitPromise>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserGesture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string FunctionDeclaration { get; public set; }
    public Nullable`1<int> ExecutionContextId { get; public set; }
    public IEnumerable`1<object> Arguments { get; public set; }
    public bool ReturnByValue { get; public set; }
    public bool AwaitPromise { get; public set; }
    public bool UserGesture { get; public set; }
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionDeclaration();
    [CompilerGeneratedAttribute]
public void set_FunctionDeclaration(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_ReturnByValue();
    [CompilerGeneratedAttribute]
public void set_ReturnByValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_AwaitPromise();
    [CompilerGeneratedAttribute]
public void set_AwaitPromise(bool value);
    [CompilerGeneratedAttribute]
public bool get_UserGesture();
    [CompilerGeneratedAttribute]
public void set_UserGesture(bool value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeCallFunctionOnRequestArgument : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [JsonPropertyAttribute]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeCallFunctionOnResponse : object {
    [CompilerGeneratedAttribute]
private RemoteObject <Result>k__BackingField;
    public RemoteObject Result { get; public set; }
    [CompilerGeneratedAttribute]
public RemoteObject get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(RemoteObject value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeEvaluateRequest : object {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AwaitPromise>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnByValue>k__BackingField;
    public string Expression { get; public set; }
    public bool AwaitPromise { get; public set; }
    public bool ReturnByValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public bool get_AwaitPromise();
    [CompilerGeneratedAttribute]
public void set_AwaitPromise(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReturnByValue();
    [CompilerGeneratedAttribute]
public void set_ReturnByValue(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeExceptionThrownResponse : object {
    [CompilerGeneratedAttribute]
private EvaluateExceptionResponseDetails <ExceptionDetails>k__BackingField;
    public EvaluateExceptionResponseDetails ExceptionDetails { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluateExceptionResponseDetails get_ExceptionDetails();
    [CompilerGeneratedAttribute]
public void set_ExceptionDetails(EvaluateExceptionResponseDetails value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeExecutionContextCreatedResponse : object {
    [CompilerGeneratedAttribute]
private ContextPayload <Context>k__BackingField;
    public ContextPayload Context { get; public set; }
    [CompilerGeneratedAttribute]
public ContextPayload get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ContextPayload value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeExecutionContextDestroyedResponse : object {
    [CompilerGeneratedAttribute]
private int <ExecutionContextId>k__BackingField;
    public int ExecutionContextId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ExecutionContextId();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextId(int value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeGetPropertiesRequest : object {
    [CompilerGeneratedAttribute]
private bool <OwnProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public bool OwnProperties { get; public set; }
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OwnProperties();
    [CompilerGeneratedAttribute]
public void set_OwnProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeGetPropertiesResponse : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<RuntimeGetPropertiesResponseItem> <Result>k__BackingField;
    public IEnumerable`1<RuntimeGetPropertiesResponseItem> Result { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<RuntimeGetPropertiesResponseItem> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IEnumerable`1<RuntimeGetPropertiesResponseItem> value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeQueryObjectsRequest : object {
    [CompilerGeneratedAttribute]
private string <PrototypeObjectId>k__BackingField;
    public string PrototypeObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PrototypeObjectId();
    [CompilerGeneratedAttribute]
public void set_PrototypeObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeQueryObjectsResponse : object {
    [CompilerGeneratedAttribute]
private RemoteObject <Objects>k__BackingField;
    public RemoteObject Objects { get; public set; }
    [CompilerGeneratedAttribute]
public RemoteObject get_Objects();
    [CompilerGeneratedAttribute]
public void set_Objects(RemoteObject value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeReleaseObjectRequest : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.RuntimeRemoveBindingRequest : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.SecurityHandleCertificateErrorResponse : object {
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    public int EventId { get; public set; }
    public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.SecuritySetIgnoreCertificateErrorsRequest : object {
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public bool Ignore { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.SecuritySetOverrideCertificateErrorsRequest : object {
    [CompilerGeneratedAttribute]
private bool <Override>k__BackingField;
    public bool Override { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Override();
    [CompilerGeneratedAttribute]
public void set_Override(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.StackTrace : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleMessageLocation[] <CallFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTrace <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTraceId <ParentId>k__BackingField;
    public string Description { get; public set; }
    public ConsoleMessageLocation[] CallFrames { get; public set; }
    public StackTrace Parent { get; public set; }
    public StackTraceId ParentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ConsoleMessageLocation[] get_CallFrames();
    [CompilerGeneratedAttribute]
public void set_CallFrames(ConsoleMessageLocation[] value);
    [CompilerGeneratedAttribute]
public StackTrace get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(StackTrace value);
    [CompilerGeneratedAttribute]
public StackTraceId get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(StackTraceId value);
}
internal class PuppeteerSharp.Cdp.Messaging.StackTraceId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggerId>k__BackingField;
    public string Id { get; public set; }
    public string DebuggerId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_DebuggerId();
    [CompilerGeneratedAttribute]
public void set_DebuggerId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetActivateTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    public string TargetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetAttachedToTargetResponse : object {
    [CompilerGeneratedAttribute]
private TargetInfo <TargetInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public TargetInfo TargetInfo { get; public set; }
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public TargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
public void set_TargetInfo(TargetInfo value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetAttachToTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Flatten>k__BackingField;
    public string TargetId { get; public set; }
    public bool Flatten { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
    [CompilerGeneratedAttribute]
public bool get_Flatten();
    [CompilerGeneratedAttribute]
public void set_Flatten(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetAttachToTargetResponse : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetCloseTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    public string TargetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetCreateBrowserContextRequest : object {
    [CompilerGeneratedAttribute]
private string <ProxyServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyBypassList>k__BackingField;
    public string ProxyServer { get; public set; }
    public string ProxyBypassList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProxyServer();
    [CompilerGeneratedAttribute]
public void set_ProxyServer(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyBypassList();
    [CompilerGeneratedAttribute]
public void set_ProxyBypassList(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetCreatedResponse : object {
    [CompilerGeneratedAttribute]
private TargetInfo <TargetInfo>k__BackingField;
    public TargetInfo TargetInfo { get; public set; }
    [CompilerGeneratedAttribute]
public TargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
public void set_TargetInfo(TargetInfo value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetCreateTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BrowserContextId>k__BackingField;
    public string Url { get; public set; }
    public object BrowserContextId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public object get_BrowserContextId();
    [CompilerGeneratedAttribute]
public void set_BrowserContextId(object value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetCreateTargetResponse : object {
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    public string TargetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetDestroyedResponse : object {
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    public string TargetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetDetachedFromTargetResponse : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    public string SessionId { get; public set; }
    public string TargetId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetDetachFromTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetDisposeBrowserContextRequest : object {
    [CompilerGeneratedAttribute]
private string <BrowserContextId>k__BackingField;
    public string BrowserContextId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BrowserContextId();
    [CompilerGeneratedAttribute]
public void set_BrowserContextId(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetSendMessageToTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string SessionId { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetSetAutoAttachRequest : object {
    [CompilerGeneratedAttribute]
private bool <AutoAttach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDebuggerOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Flatten>k__BackingField;
    public bool AutoAttach { get; public set; }
    public bool WaitForDebuggerOnStart { get; public set; }
    public bool Flatten { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoAttach();
    [CompilerGeneratedAttribute]
public void set_AutoAttach(bool value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDebuggerOnStart();
    [CompilerGeneratedAttribute]
public void set_WaitForDebuggerOnStart(bool value);
    [CompilerGeneratedAttribute]
public bool get_Flatten();
    [CompilerGeneratedAttribute]
public void set_Flatten(bool value);
}
internal class PuppeteerSharp.Cdp.Messaging.TargetSetDiscoverTargetsRequest : object {
    [CompilerGeneratedAttribute]
private bool <Discover>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscoverFilter[] <Filter>k__BackingField;
    public bool Discover { get; public set; }
    public DiscoverFilter[] Filter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Discover();
    [CompilerGeneratedAttribute]
public void set_Discover(bool value);
    [CompilerGeneratedAttribute]
public DiscoverFilter[] get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(DiscoverFilter[] value);
}
internal class PuppeteerSharp.Cdp.Messaging.TracingCompleteResponse : object {
    [CompilerGeneratedAttribute]
private string <Stream>k__BackingField;
    public string Stream { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.TracingStartRequest : object {
    [CompilerGeneratedAttribute]
private string <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransferMode>k__BackingField;
    public string Categories { get; public set; }
    public string TransferMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(string value);
    [CompilerGeneratedAttribute]
public string get_TransferMode();
    [CompilerGeneratedAttribute]
public void set_TransferMode(string value);
}
internal class PuppeteerSharp.Cdp.Messaging.WSEndpointResponse : object {
    [CompilerGeneratedAttribute]
private string <WebSocketDebuggerUrl>k__BackingField;
    public string WebSocketDebuggerUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WebSocketDebuggerUrl();
    [CompilerGeneratedAttribute]
public void set_WebSocketDebuggerUrl(string value);
}
internal class PuppeteerSharp.Cdp.NetworkEventManager : object {
    private ConcurrentDictionary`2<string, RequestWillBeSentPayload> _requestWillBeSentMap;
    private ConcurrentDictionary`2<string, FetchRequestPausedResponse> _requestPausedMap;
    private ConcurrentDictionary`2<string, CdpHttpRequest> _httpRequestsMap;
    private ConcurrentDictionary`2<string, QueuedEventGroup> _queuedEventGroupMap;
    private ConcurrentDictionary`2<string, List`1<RedirectInfo>> _queuedRedirectInfoMap;
    private ConcurrentDictionary`2<string, List`1<ResponseReceivedExtraInfoResponse>> _responseReceivedExtraInfoMap;
    public int NumRequestsInProgress { get; }
    public int get_NumRequestsInProgress();
    internal void Forget(string requestId);
    internal List`1<ResponseReceivedExtraInfoResponse> ResponseExtraInfo(string networkRequestId);
    internal void QueueRedirectInfo(string fetchRequestId, RedirectInfo redirectInfo);
    internal RedirectInfo TakeQueuedRedirectInfo(string fetchRequestId);
    internal ResponseReceivedExtraInfoResponse ShiftResponseExtraInfo(string networkRequestId);
    internal void StoreRequestWillBeSent(string networkRequestId, RequestWillBeSentPayload e);
    internal RequestWillBeSentPayload GetRequestWillBeSent(string networkRequestId);
    internal void ForgetRequestWillBeSent(string networkRequestId);
    internal FetchRequestPausedResponse GetRequestPaused(string networkRequestId);
    internal void ForgetRequestPaused(string networkRequestId);
    internal void StoreRequestPaused(string networkRequestId, FetchRequestPausedResponse e);
    internal CdpHttpRequest GetRequest(string networkRequestId);
    internal void StoreRequest(string networkRequestId, CdpHttpRequest request);
    internal void ForgetRequest(string requestId);
    internal void QueuedEventGroup(string networkRequestId, QueuedEventGroup group);
    internal QueuedEventGroup GetQueuedEventGroup(string networkRequestId);
    internal void ForgetQueuedEventGroup(string networkRequestId);
    private List`1<RedirectInfo> QueuedRedirectInfo(string fetchRequestId);
}
internal class PuppeteerSharp.Cdp.NetworkManager : object {
    private bool _ignoreHTTPSErrors;
    private NetworkEventManager _networkEventManager;
    private ILogger _logger;
    private ConcurrentSet`1<string> _attemptedAuthentications;
    private ConcurrentDictionary`2<ICDPSession, DisposableActionsStack> _clients;
    private IFrameProvider _frameManager;
    private ILoggerFactory _loggerFactory;
    private InternalNetworkConditions _emulatedNetworkConditions;
    private Dictionary`2<string, string> _extraHTTPHeaders;
    private Credentials _credentials;
    private bool _userRequestInterceptionEnabled;
    private bool _protocolRequestInterceptionEnabled;
    private Nullable`1<bool> _userCacheDisabled;
    private string _userAgent;
    private UserAgentMetadata _userAgentMetadata;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResponseCreatedEventArgs> Response;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> Request;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestFinished;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestFailed;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestServedFromCache;
    internal Dictionary`2<string, string> ExtraHTTPHeaders { get; }
    internal int NumRequestsInProgress { get; }
    internal NetworkManager(bool ignoreHTTPSErrors, IFrameProvider frameManager, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal void add_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    internal Dictionary`2<string, string> get_ExtraHTTPHeaders();
    internal int get_NumRequestsInProgress();
    internal Task AddClientAsync(ICDPSession client);
    internal void RemoveClient(CDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<AuthenticateAsync>d__37")]
internal Task AuthenticateAsync(Credentials credentials);
    internal Task SetExtraHTTPHeadersAsync(Dictionary`2<string, string> extraHTTPHeaders);
    internal Task SetUserAgentAsync(string userAgent, UserAgentMetadata userAgentMetadata);
    internal Task SetCacheEnabledAsync(bool enabled);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<SetRequestInterceptionAsync>d__41")]
internal Task SetRequestInterceptionAsync(bool value);
    internal Task SetOfflineModeAsync(bool value);
    internal Task EmulateNetworkConditionsAsync(NetworkConditions networkConditions);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<Client_MessageReceived>d__44")]
private void Client_MessageReceived(object sender, MessageEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnResponseReceivedExtraInfoAsync>d__45")]
private Task OnResponseReceivedExtraInfoAsync(CDPSession client, ResponseReceivedExtraInfoResponse e);
    private void OnLoadingFailed(LoadingFailedEventResponse e);
    private void EmitLoadingFailed(LoadingFailedEventResponse e);
    private void OnLoadingFinished(LoadingFinishedEventResponse e);
    private void EmitLoadingFinished(LoadingFinishedEventResponse e);
    private void ForgetRequest(CdpHttpRequest request, bool events);
    private void OnResponseReceived(CDPSession client, ResponseReceivedResponse e);
    private void EmitResponseEvent(CDPSession client, ResponseReceivedResponse e, ResponseReceivedExtraInfoResponse extraInfo);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnAuthRequiredAsync>d__53")]
private Task OnAuthRequiredAsync(CDPSession client, FetchAuthRequiredResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnRequestPausedAsync>d__54")]
private Task OnRequestPausedAsync(CDPSession client, FetchRequestPausedResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnRequestWithoutNetworkInstrumentationAsync>d__55")]
private void OnRequestWithoutNetworkInstrumentationAsync(CDPSession client, FetchRequestPausedResponse e);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnRequestAsync>d__56")]
private Task OnRequestAsync(CDPSession client, RequestWillBeSentPayload e, string fetchRequestId);
    private void OnRequestServedFromCache(RequestServedFromCacheResponse response);
    private void HandleRequestRedirect(CDPSession client, CdpHttpRequest request, ResponsePayload responseMessage, ResponseReceivedExtraInfoResponse extraInfo);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<OnRequestWillBeSentAsync>d__59")]
private Task OnRequestWillBeSentAsync(CDPSession client, RequestWillBeSentPayload e);
    private void PatchRequestEventHeaders(RequestWillBeSentPayload requestWillBeSentEvent, FetchRequestPausedResponse requestPausedEvent);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<ApplyUserAgentAsync>d__61")]
private Task ApplyUserAgentAsync(ICDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<ApplyProtocolRequestInterceptionAsync>d__62")]
private Task ApplyProtocolRequestInterceptionAsync(ICDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<ApplyProtocolCacheDisabledAsync>d__63")]
private Task ApplyProtocolCacheDisabledAsync(ICDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<ApplyNetworkConditionsAsync>d__64")]
private Task ApplyNetworkConditionsAsync(ICDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.Cdp.NetworkManager/<ApplyExtraHTTPHeadersAsync>d__65")]
private Task ApplyExtraHTTPHeadersAsync(ICDPSession client);
    private Task ApplyToAllClientsAsync(Func`2<ICDPSession, Task> func);
}
public abstract class PuppeteerSharp.CDPSession : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler Disconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> SessionAttached;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> SessionDetached;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> Ready;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEventArgs> Swapped;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Connection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Target <Target>k__BackingField;
    public string Id { get; public set; }
    public ILoggerFactory LoggerFactory { get; }
    internal Connection Connection { get; internal set; }
    internal Target Target { get; internal set; }
    internal CDPSession ParentSession { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReceived(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReceived(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionDetached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionDetached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_Ready(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Ready(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_Swapped(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Swapped(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    public sealed virtual ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
internal Connection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(Connection value);
    [CompilerGeneratedAttribute]
internal Target get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(Target value);
    internal abstract virtual CDPSession get_ParentSession();
    [AsyncStateMachineAttribute("PuppeteerSharp.CDPSession/<SendAsync>d__34`1")]
public sealed virtual Task`1<T> SendAsync(string method, object args, CommandOptions options);
    public abstract virtual Task`1<JObject> SendAsync(string method, object args, bool waitForCallback, CommandOptions options);
    public abstract virtual Task DetachAsync();
    internal void OnSessionReady(CDPSession session);
    internal abstract virtual void Close(string closeReason);
    internal void OnSessionAttached(CDPSession session);
    internal void OnSessionDetached(CDPSession session);
    internal void OnSwapped(CDPSession session);
    protected void OnMessageReceived(MessageEventArgs e);
    protected void OnDisconnected();
}
public class PuppeteerSharp.ChromeLauncher : LauncherBase {
    private static string UserDataDirArgument;
    public ChromeLauncher(string executable, LaunchOptions options);
    public virtual Task`1<string> GetDefaultBuildIdAsync();
    public virtual string ToString();
    internal static String[] GetDefaultArgs(LaunchOptions options);
    internal static String[] GetFeatures(string flag, String[] options);
    internal static String[] RemoveMatchingFlags(String[] array, string flag);
    private static ValueTuple`2<List`1<string>, TempDirectory> PrepareChromiumArgs(LaunchOptions options);
}
[ObsoleteAttribute("ProcessException will be thrown")]
public class PuppeteerSharp.ChromiumProcessException : PuppeteerException {
    public ChromiumProcessException(string message);
    public ChromiumProcessException(string message, Exception innerException);
    protected ChromiumProcessException(SerializationInfo info, StreamingContext context);
}
public class PuppeteerSharp.CommandOptions : object {
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public int Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
}
public class PuppeteerSharp.ConnectOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserWSEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserURL>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSocketFactory <WebSocketFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewPortOptions <DefaultViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionTransport <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportFactory <TransportFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnqueueTransportMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnqueueAsyncMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Target, bool> <TargetFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IBrowser> <InitAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Target, bool> <IsPageTarget>k__BackingField;
    public bool IgnoreHTTPSErrors { get; public set; }
    [ObsoleteAttribute("No longer required and usages should be removed")]
public bool AppMode { get; public set; }
    public string BrowserWSEndpoint { get; public set; }
    public string BrowserURL { get; public set; }
    public int SlowMo { get; public set; }
    [ObsoleteAttribute("Chromium doesn't support pings yet (see: https://bugs.chromium.org/p/chromium/issues/detail?id=865002)")]
public int KeepAliveInterval { get; public set; }
    public WebSocketFactory WebSocketFactory { get; public set; }
    public ViewPortOptions DefaultViewport { get; public set; }
    [ObsoleteAttribute("Use TransportFactory instead")]
public IConnectionTransport Transport { get; public set; }
    public TransportFactory TransportFactory { get; public set; }
    public bool EnqueueTransportMessages { get; public set; }
    public bool EnqueueAsyncMessages { get; public set; }
    public Func`2<Target, bool> TargetFilter { get; public set; }
    public int ProtocolTimeout { get; public set; }
    public Action`1<IBrowser> InitAction { get; public set; }
    internal Func`2<Target, bool> IsPageTarget { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppMode();
    [CompilerGeneratedAttribute]
public void set_AppMode(bool value);
    [CompilerGeneratedAttribute]
public string get_BrowserWSEndpoint();
    [CompilerGeneratedAttribute]
public void set_BrowserWSEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserURL();
    [CompilerGeneratedAttribute]
public void set_BrowserURL(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SlowMo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SlowMo(int value);
    [CompilerGeneratedAttribute]
public int get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(int value);
    [CompilerGeneratedAttribute]
public sealed virtual WebSocketFactory get_WebSocketFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebSocketFactory(WebSocketFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual ViewPortOptions get_DefaultViewport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultViewport(ViewPortOptions value);
    [CompilerGeneratedAttribute]
public IConnectionTransport get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(IConnectionTransport value);
    [CompilerGeneratedAttribute]
public sealed virtual TransportFactory get_TransportFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransportFactory(TransportFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnqueueTransportMessages();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnqueueTransportMessages(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnqueueAsyncMessages();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnqueueAsyncMessages(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Target, bool> get_TargetFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetFilter(Func`2<Target, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProtocolTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProtocolTimeout(int value);
    [CompilerGeneratedAttribute]
public Action`1<IBrowser> get_InitAction();
    [CompilerGeneratedAttribute]
public void set_InitAction(Action`1<IBrowser> value);
    [CompilerGeneratedAttribute]
internal Func`2<Target, bool> get_IsPageTarget();
    [CompilerGeneratedAttribute]
internal void set_IsPageTarget(Func`2<Target, bool> value);
}
public class PuppeteerSharp.ConsoleEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ConsoleMessage <Message>k__BackingField;
    public ConsoleMessage Message { get; }
    public ConsoleEventArgs(ConsoleMessage message);
    [CompilerGeneratedAttribute]
public ConsoleMessage get_Message();
}
public class PuppeteerSharp.ConsoleMessage : object {
    [CompilerGeneratedAttribute]
private ConsoleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IJSHandle> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleMessageLocation <Location>k__BackingField;
    public ConsoleType Type { get; }
    public string Text { get; }
    public IList`1<IJSHandle> Args { get; }
    public ConsoleMessageLocation Location { get; }
    public ConsoleMessage(ConsoleType type, string text, IList`1<IJSHandle> args, ConsoleMessageLocation location);
    [CompilerGeneratedAttribute]
public ConsoleType get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public IList`1<IJSHandle> get_Args();
    [CompilerGeneratedAttribute]
public ConsoleMessageLocation get_Location();
}
public class PuppeteerSharp.ConsoleMessageLocation : object {
    [CompilerGeneratedAttribute]
private string <URL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnNumber>k__BackingField;
    public string URL { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> ColumnNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_URL();
    [CompilerGeneratedAttribute]
public void set_URL(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(Nullable`1<int> value);
    public static bool op_Equality(ConsoleMessageLocation location1, ConsoleMessageLocation location2);
    public static bool op_Inequality(ConsoleMessageLocation location1, ConsoleMessageLocation location2);
    public sealed virtual bool Equals(ConsoleMessageLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum PuppeteerSharp.ConsoleType : Enum {
    public int value__;
    public static ConsoleType Log;
    public static ConsoleType Debug;
    public static ConsoleType Info;
    public static ConsoleType Error;
    public static ConsoleType Warning;
    public static ConsoleType Dir;
    public static ConsoleType Dirxml;
    public static ConsoleType Table;
    public static ConsoleType Trace;
    public static ConsoleType Clear;
    public static ConsoleType StartGroup;
    public static ConsoleType StartGroupCollapsed;
    public static ConsoleType EndGroup;
    public static ConsoleType Assert;
    public static ConsoleType Profile;
    public static ConsoleType ProfileEnd;
    public static ConsoleType Count;
    public static ConsoleType TimeEnd;
    public static ConsoleType Verbose;
    [EnumMemberAttribute]
public static ConsoleType Timestamp;
}
internal class PuppeteerSharp.ContextPayload : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextPayloadAuxData <AuxData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Id { get; public set; }
    public ContextPayloadAuxData AuxData { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public ContextPayloadAuxData get_AuxData();
    [CompilerGeneratedAttribute]
public void set_AuxData(ContextPayloadAuxData value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class PuppeteerSharp.ContextPayloadAuxData : object {
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private DOMWorldType <Type>k__BackingField;
    public string FrameId { get; public set; }
    public bool IsDefault { get; public set; }
    public DOMWorldType Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public DOMWorldType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DOMWorldType value);
}
public class PuppeteerSharp.CookieParam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SameSite> <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CookiePriority> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SameParty>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CookieSourceScheme> <SourceScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PartitionKeyOpaque>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [JsonPropertyAttribute]
public string Url { get; public set; }
    [JsonPropertyAttribute]
public string Domain { get; public set; }
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> Secure { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> HttpOnly { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<SameSite> SameSite { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<double> Expires { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Size { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> Session { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<CookiePriority> Priority { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> SameParty { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<CookieSourceScheme> SourceScheme { get; public set; }
    [JsonPropertyAttribute]
public string PartitionKey { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> PartitionKeyOpaque { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SameSite> get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(Nullable`1<SameSite> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CookiePriority> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<CookiePriority> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SameParty();
    [CompilerGeneratedAttribute]
public void set_SameParty(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CookieSourceScheme> get_SourceScheme();
    [CompilerGeneratedAttribute]
public void set_SourceScheme(Nullable`1<CookieSourceScheme> value);
    [CompilerGeneratedAttribute]
public string get_PartitionKey();
    [CompilerGeneratedAttribute]
public void set_PartitionKey(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PartitionKeyOpaque();
    [CompilerGeneratedAttribute]
public void set_PartitionKeyOpaque(Nullable`1<bool> value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.CookiePriority : Enum {
    public int value__;
    public static CookiePriority Low;
    public static CookiePriority Medium;
    public static CookiePriority High;
}
public enum PuppeteerSharp.CookieSourceScheme : Enum {
    public int value__;
    public static CookieSourceScheme Unset;
    public static CookieSourceScheme NonSecure;
    public static CookieSourceScheme Secure;
}
public class PuppeteerSharp.Credentials : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class PuppeteerSharp.CustomQueryHandler : object {
    [CompilerGeneratedAttribute]
private string <QueryOne>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryAll>k__BackingField;
    public string QueryOne { get; public set; }
    public string QueryAll { get; public set; }
    [CompilerGeneratedAttribute]
public string get_QueryOne();
    [CompilerGeneratedAttribute]
public void set_QueryOne(string value);
    [CompilerGeneratedAttribute]
public string get_QueryAll();
    [CompilerGeneratedAttribute]
public void set_QueryAll(string value);
}
public class PuppeteerSharp.DeviceRequestPrompt : object {
    private string _id;
    private TimeoutSettings _timeoutSettings;
    private bool _handled;
    private ICDPSession _client;
    [CompilerGeneratedAttribute]
private EventHandler`1<DeviceRequestPromptDevice> NewDevice;
    [CompilerGeneratedAttribute]
private List`1<DeviceRequestPromptDevice> <Devices>k__BackingField;
    public List`1<DeviceRequestPromptDevice> Devices { get; }
    internal DeviceRequestPrompt(ICDPSession client, TimeoutSettings timeoutSettings, DeviceAccessDeviceRequestPromptedResponse firstEvent);
    [CompilerGeneratedAttribute]
internal void add_NewDevice(EventHandler`1<DeviceRequestPromptDevice> value);
    [CompilerGeneratedAttribute]
internal void remove_NewDevice(EventHandler`1<DeviceRequestPromptDevice> value);
    [CompilerGeneratedAttribute]
public List`1<DeviceRequestPromptDevice> get_Devices();
    public Task SelectAsync(DeviceRequestPromptDevice device);
    public Task`1<DeviceRequestPromptDevice> WaitForDeviceAsync(Func`2<DeviceRequestPromptDevice, bool> filter, WaitForOptions options);
    public Task CancelAsync();
    private void OnMessageReceived(object sender, MessageEventArgs e);
    private void UpdateDevices(DeviceAccessDeviceRequestPromptedResponse e);
}
public class PuppeteerSharp.DeviceRequestPromptDevice : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Id { get; public set; }
    public DeviceRequestPromptDevice(string Name, string Id);
    [CompilerGeneratedAttribute]
protected DeviceRequestPromptDevice(DeviceRequestPromptDevice original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DeviceRequestPromptDevice left, DeviceRequestPromptDevice right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DeviceRequestPromptDevice left, DeviceRequestPromptDevice right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DeviceRequestPromptDevice other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual DeviceRequestPromptDevice <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Id);
}
public class PuppeteerSharp.DeviceRequestPromptManager : object {
    private TimeoutSettings _timeoutSettings;
    private ICDPSession _client;
    private TaskCompletionSource`1<DeviceRequestPrompt> _deviceRequestPromptTcs;
    internal DeviceRequestPromptManager(ICDPSession client, TimeoutSettings timeoutSettings);
    [AsyncStateMachineAttribute("PuppeteerSharp.DeviceRequestPromptManager/<WaitForDevicePromptAsync>d__4")]
internal Task`1<DeviceRequestPrompt> WaitForDevicePromptAsync(WaitForOptions options);
    private void OnMessageReceived(object sender, MessageEventArgs e);
    private void OnDeviceRequestPrompted(DeviceAccessDeviceRequestPromptedResponse e);
}
public abstract class PuppeteerSharp.Dialog : object {
    private bool _handled;
    [CompilerGeneratedAttribute]
private DialogType <DialogType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public DialogType DialogType { get; public set; }
    public string DefaultValue { get; public set; }
    public string Message { get; public set; }
    public Dialog(DialogType type, string message, string defaultValue);
    [CompilerGeneratedAttribute]
public DialogType get_DialogType();
    [CompilerGeneratedAttribute]
public void set_DialogType(DialogType value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public Task Accept(string promptText);
    public Task Dismiss();
    internal abstract virtual Task HandleAsync(bool accept, string text);
}
public class PuppeteerSharp.DialogEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Dialog <Dialog>k__BackingField;
    public Dialog Dialog { get; }
    public DialogEventArgs(Dialog dialog);
    [CompilerGeneratedAttribute]
public Dialog get_Dialog();
}
public enum PuppeteerSharp.DialogType : Enum {
    public int value__;
    public static DialogType Alert;
    public static DialogType Prompt;
    public static DialogType Confirm;
    [EnumMemberAttribute]
public static DialogType BeforeUnload;
}
internal class PuppeteerSharp.DisposableActionsStack : object {
    private List`1<Action> _actions;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    public void Defer(Action action);
}
internal class PuppeteerSharp.DisposableTasksStack : object {
    private List`1<Func`1<Task>> _tasks;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void Defer(Func`1<Task> task);
    [AsyncStateMachineAttribute("PuppeteerSharp.DisposableTasksStack/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
internal enum PuppeteerSharp.DOMWorldType : Enum {
    public int value__;
    public static DOMWorldType Other;
    [EnumMemberAttribute]
public static DOMWorldType Isolated;
    [EnumMemberAttribute]
public static DOMWorldType Default;
}
public class PuppeteerSharp.DragData : object {
    [CompilerGeneratedAttribute]
private DragDataItem[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private DragOperation <DragOperationsMask>k__BackingField;
    public DragDataItem[] Items { get; public set; }
    public DragOperation DragOperationsMask { get; public set; }
    [CompilerGeneratedAttribute]
public DragDataItem[] get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(DragDataItem[] value);
    [CompilerGeneratedAttribute]
public DragOperation get_DragOperationsMask();
    [CompilerGeneratedAttribute]
public void set_DragOperationsMask(DragOperation value);
}
public class PuppeteerSharp.DragDataItem : object {
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseURL>k__BackingField;
    public string MimeType { get; public set; }
    public string Data { get; public set; }
    public string Title { get; public set; }
    public string BaseURL { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_BaseURL();
    [CompilerGeneratedAttribute]
public void set_BaseURL(string value);
}
public enum PuppeteerSharp.DragOperation : Enum {
    public int value__;
    public static DragOperation Unknown;
    public static DragOperation Copy;
    public static DragOperation Link;
    public static DragOperation Move;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public abstract class PuppeteerSharp.ElementHandle : JSHandle {
    private ElementHandle _isolatedHandle;
    [CompilerGeneratedAttribute]
private JSHandle <Handle>k__BackingField;
    private IFrame PuppeteerSharp.IElementHandle.Frame { get; }
    internal CustomQuerySelectorRegistry CustomQuerySelectorRegistry { get; }
    protected JSHandle Handle { get; protected set; }
    protected Page Page { get; }
    private string DebuggerDisplay { get; }
    internal ElementHandle(IsolatedWorld world, RemoteObject remoteObject);
    private sealed virtual override IFrame PuppeteerSharp.IElementHandle.get_Frame();
    internal abstract virtual CustomQuerySelectorRegistry get_CustomQuerySelectorRegistry();
    [CompilerGeneratedAttribute]
protected JSHandle get_Handle();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Handle(JSHandle value);
    protected abstract virtual Page get_Page();
    private string get_DebuggerDisplay();
    public sealed virtual Task ScreenshotAsync(string file);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<ScreenshotAsync>d__15")]
public sealed virtual Task ScreenshotAsync(string file, ElementScreenshotOptions options);
    public sealed virtual Task`1<Stream> ScreenshotStreamAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<ScreenshotStreamAsync>d__17")]
public sealed virtual Task`1<Stream> ScreenshotStreamAsync(ElementScreenshotOptions options);
    public sealed virtual Task`1<Byte[]> ScreenshotDataAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<WaitForSelectorAsync>d__19")]
public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<ScreenshotDataAsync>d__20")]
public sealed virtual Task`1<Byte[]> ScreenshotDataAsync(ElementScreenshotOptions options);
    public sealed virtual Task`1<string> ScreenshotBase64Async();
    public sealed virtual Task`1<string> ScreenshotBase64Async(ElementScreenshotOptions options);
    public sealed virtual Task HoverAsync();
    public sealed virtual Task ClickAsync(ClickOptions options);
    public sealed virtual Task UploadFileAsync(String[] filePaths);
    public abstract virtual Task UploadFileAsync(bool resolveFilePaths, String[] filePaths);
    public sealed virtual Task TapAsync();
    public sealed virtual Task TouchStartAsync();
    public sealed virtual Task TouchMoveAsync();
    public sealed virtual Task TouchEndAsync();
    public sealed virtual Task FocusAsync();
    public sealed virtual Task TypeAsync(string text, TypeOptions options);
    public sealed virtual Task PressAsync(string key, PressOptions options);
    public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public sealed virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<QuerySelectorAllHandleAsync>d__36")]
public sealed virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    public sealed virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public sealed virtual Task`1<BoundingBox> BoundingBoxAsync();
    public sealed virtual Task`1<BoxModel> BoxModelAsync();
    public abstract virtual Task`1<IFrame> ContentFrameAsync();
    public sealed virtual Task`1<bool> IsIntersectingViewportAsync(decimal threshold);
    public sealed virtual Task`1<String[]> SelectAsync(String[] values);
    public sealed virtual Task`1<DragData> DragAsync(decimal x, decimal y);
    public sealed virtual Task`1<DragData> DragAsync(IElementHandle target);
    public sealed virtual Task DragEnterAsync(DragData data);
    public sealed virtual Task DragOverAsync(DragData data);
    public sealed virtual Task DropAsync(DragData data);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<DropAsync>d__48")]
public sealed virtual Task DropAsync(IElementHandle target);
    public sealed virtual Task DragAndDropAsync(IElementHandle target, int delay);
    public sealed virtual Task`1<BoxModelPoint> ClickablePointAsync(Nullable`1<Offset> offset);
    public sealed virtual Task`1<bool> IsVisibleAsync();
    public sealed virtual Task`1<bool> IsHiddenAsync();
    public virtual Task`1<IJSHandle> GetPropertyAsync(string propertyName);
    public virtual Task`1<Dictionary`2<string, IJSHandle>> GetPropertiesAsync();
    public virtual Task`1<T> JsonValueAsync();
    public virtual Task ScrollIntoViewAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<AssertConnectedElementAsync>d__57")]
protected Task AssertConnectedElementAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<BindIsolatedHandleAsync>d__58`2")]
protected Task`1<TResult> BindIsolatedHandleAsync(Func`2<TElementHandle, Task`1<TResult>> action);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<NonEmptyVisibleBoundingBoxAsync>d__59")]
private Task`1<BoundingBox> NonEmptyVisibleBoundingBoxAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<AsSVGElementHandleAsync>d__60")]
private Task`1<ElementHandle> AsSVGElementHandleAsync(ElementHandle elementHandle);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<GetOwnerSVGElementAsync>d__61")]
private Task`1<ElementHandle> GetOwnerSVGElementAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<ScrollIntoViewIfNeededAsync>d__62")]
private Task ScrollIntoViewIfNeededAsync();
    private Task`1<bool> CheckVisibilityAsync(IElementHandle handle, bool visibility);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<GetTopLeftCornerOfFrameAsync>d__64")]
private Task`1<Nullable`1<Point>> GetTopLeftCornerOfFrameAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<ClickableBoxAsync>d__65")]
private Task`1<BoundingBox> ClickableBoxAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<IntersectBoundingBoxesWithFrameAsync>d__66")]
private Task IntersectBoundingBoxesWithFrameAsync(BoundingBox[] boxes);
    private void IntersectBoundingBox(BoundingBox box, decimal width, decimal height);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<<HoverAsync>b__23_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <HoverAsync>b__23_0(ElementHandle handle);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<<TapAsync>b__27_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <TapAsync>b__27_0(ElementHandle handle);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<<TouchStartAsync>b__28_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <TouchStartAsync>b__28_0(ElementHandle handle);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<<TouchMoveAsync>b__29_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <TouchMoveAsync>b__29_0(ElementHandle handle);
    [AsyncStateMachineAttribute("PuppeteerSharp.ElementHandle/<<TouchEndAsync>b__30_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IElementHandle> <TouchEndAsync>b__30_0(ElementHandle handle);
    [CompilerGeneratedAttribute]
private Task`1<bool> <IsVisibleAsync>b__51_0(ElementHandle handle);
    [CompilerGeneratedAttribute]
private Task`1<bool> <IsHiddenAsync>b__52_0(ElementHandle handle);
}
public class PuppeteerSharp.ElementScreenshotOptions : ScreenshotOptions {
    [CompilerGeneratedAttribute]
private bool <ScrollIntoView>k__BackingField;
    public bool ScrollIntoView { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ScrollIntoView();
    [CompilerGeneratedAttribute]
public void set_ScrollIntoView(bool value);
}
public class PuppeteerSharp.EmulateIdleOverrides : object {
    [CompilerGeneratedAttribute]
private bool <IsUserActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScreenUnlocked>k__BackingField;
    public bool IsUserActive { get; public set; }
    public bool IsScreenUnlocked { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsUserActive();
    [CompilerGeneratedAttribute]
public void set_IsUserActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsScreenUnlocked();
    [CompilerGeneratedAttribute]
public void set_IsScreenUnlocked(bool value);
}
internal class PuppeteerSharp.EmulationManager : object {
    private ConcurrentSet`1<CDPSession> _secondaryClients;
    private ILogger _logger;
    private CDPSession _client;
    private bool _emulatingMobile;
    private bool _hasTouch;
    private ViewPortOptions _viewport;
    [CompilerGeneratedAttribute]
private bool <JavascriptEnabled>k__BackingField;
    public bool JavascriptEnabled { get; private set; }
    public EmulationManager(CDPSession client);
    [CompilerGeneratedAttribute]
public bool get_JavascriptEnabled();
    [CompilerGeneratedAttribute]
private void set_JavascriptEnabled(bool value);
    internal void UpdateClient(CDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.EmulationManager/<RegisterSpeculativeSessionAsync>d__12")]
internal Task RegisterSpeculativeSessionAsync(CDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.EmulationManager/<EmulateTimezoneAsync>d__13")]
internal Task EmulateTimezoneAsync(string timezoneId);
    internal Task EmulateVisionDeficiencyAsync(VisionDeficiency type);
    internal Task EmulateCPUThrottlingAsync(Nullable`1<decimal> factor);
    [AsyncStateMachineAttribute("PuppeteerSharp.EmulationManager/<EmulateIdleStateAsync>d__16")]
internal Task EmulateIdleStateAsync(EmulateIdleOverrides overrides);
    [AsyncStateMachineAttribute("PuppeteerSharp.EmulationManager/<EmulateViewportAsync>d__17")]
internal Task`1<bool> EmulateViewportAsync(ViewPortOptions viewport);
    internal Task EmulateMediaTypeAsync(MediaType type);
    internal Task EmulateMediaFeaturesAsync(IEnumerable`1<MediaFeatureValue> features);
    internal Task SetGeolocationAsync(GeolocationOption options);
    internal Task ResetDefaultBackgroundColorAsync();
    internal Task SetTransparentBackgroundColorAsync();
    internal Task SetJavaScriptEnabledAsync(bool enabled);
    [AsyncStateMachineAttribute("PuppeteerSharp.EmulationManager/<ApplyViewportAsync>d__24")]
private Task ApplyViewportAsync(CDPSession client);
    [CompilerGeneratedAttribute]
private void <ApplyViewportAsync>b__24_0(Task`1<JObject> task);
}
public class PuppeteerSharp.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; }
    public ErrorEventArgs(string error);
    [CompilerGeneratedAttribute]
public string get_Error();
}
public class PuppeteerSharp.EvaluationFailedException : PuppeteerException {
    public EvaluationFailedException(string message);
    public EvaluationFailedException(string message, Exception innerException);
    protected EvaluationFailedException(SerializationInfo info, StreamingContext context);
}
public class PuppeteerSharp.ExecutionContext : object {
    internal static string EvaluationScriptUrl;
    private static string EvaluationScriptSuffix;
    private static Regex _sourceUrlRegex;
    private TaskQueue _puppeteerUtilQueue;
    private IJSHandle _puppeteerUtil;
    [CompilerGeneratedAttribute]
private int <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private CDPSession <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolatedWorld <World>k__BackingField;
    private IFrame PuppeteerSharp.IExecutionContext.Frame { get; }
    internal int ContextId { get; }
    internal string ContextName { get; }
    internal CDPSession Client { get; }
    internal IsolatedWorld World { get; }
    private Frame Frame { get; }
    internal ExecutionContext(CDPSession client, ContextPayload contextPayload, IsolatedWorld world);
    private static ExecutionContext();
    private sealed virtual override IFrame PuppeteerSharp.IExecutionContext.get_Frame();
    [CompilerGeneratedAttribute]
internal int get_ContextId();
    [CompilerGeneratedAttribute]
internal string get_ContextName();
    [CompilerGeneratedAttribute]
internal CDPSession get_Client();
    [CompilerGeneratedAttribute]
internal IsolatedWorld get_World();
    private Frame get_Frame();
    public sealed virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public sealed virtual Task`1<T> EvaluateExpressionAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<EvaluateExpressionHandleAsync>d__24")]
public sealed virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<EvaluateFunctionHandleAsync>d__25")]
public sealed virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string script, Object[] args);
    public sealed virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<DisposeAsync>d__28")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<GetPuppeteerUtilAsync>d__30")]
internal Task`1<IJSHandle> GetPuppeteerUtilAsync();
    internal IJSHandle CreateJSHandle(RemoteObject remoteObject);
    private static string GetExceptionMessage(EvaluateExceptionResponseDetails exceptionDetails);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<InstallGlobalBindingAsync>d__33")]
private Task InstallGlobalBindingAsync(Binding binding);
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<RemoteObjectTaskToObject>d__35`1")]
private Task`1<T> RemoteObjectTaskToObject(Task`1<RemoteObject> remote);
    private Task`1<RemoteObject> EvaluateExpressionInternalAsync(bool returnByValue, string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<EvaluateFunctionInternalAsync>d__37")]
private Task`1<RemoteObject> EvaluateFunctionInternalAsync(bool returnByValue, string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<ExecuteEvaluationAsync>d__38")]
private Task`1<RemoteObject> ExecuteEvaluationAsync(string method, object args);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<FormatArgumentAsync>d__39")]
private Task`1<object> FormatArgumentAsync(object arg);
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<<GetPuppeteerUtilAsync>b__30_0>d")]
[CompilerGeneratedAttribute]
private Task <GetPuppeteerUtilAsync>b__30_0();
    [AsyncStateMachineAttribute("PuppeteerSharp.ExecutionContext/<<GetPuppeteerUtilAsync>b__30_1>d")]
[CompilerGeneratedAttribute]
private Task <GetPuppeteerUtilAsync>b__30_1(string script);
}
public class PuppeteerSharp.FileChooser : object {
    private IElementHandle _element;
    private bool _handled;
    [CompilerGeneratedAttribute]
private bool <IsMultiple>k__BackingField;
    public bool IsMultiple { get; }
    internal FileChooser(IElementHandle element, PageFileChooserOpenedResponse e);
    [CompilerGeneratedAttribute]
public bool get_IsMultiple();
    public Task AcceptAsync(String[] filePaths);
    public Task CancelAsync();
}
public class PuppeteerSharp.FirefoxLauncher : LauncherBase {
    private static String[] _defaultArgs;
    public FirefoxLauncher(string executable, LaunchOptions options);
    private static FirefoxLauncher();
    public virtual Task`1<string> GetDefaultBuildIdAsync();
    public virtual string ToString();
    internal static String[] GetDefaultArgs(LaunchOptions options);
    private static ValueTuple`2<List`1<string>, TempDirectory> PrepareFirefoxArgs(LaunchOptions options);
    private static Dictionary`2<string, object> GetPreferences(Dictionary`2<string, object> optionsExtraPreferencesFirefox);
}
public abstract class PuppeteerSharp.Frame : object {
    private Task`1<ElementHandle> _documentTask;
    [CompilerGeneratedAttribute]
private EventHandler FrameSwappedByActivation;
    [CompilerGeneratedAttribute]
private EventHandler FrameDetached;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameNavigatedEventArgs> FrameNavigated;
    [CompilerGeneratedAttribute]
private EventHandler FrameNavigatedWithinDocument;
    [CompilerGeneratedAttribute]
private EventHandler LifecycleEvent;
    [CompilerGeneratedAttribute]
private EventHandler FrameSwapped;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Detached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoaderId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LifecycleEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Realm <MainRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private Realm <IsolatedRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStartedLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IReadOnlyCollection`1<IFrame> ChildFrames { get; }
    public string Name { get; private set; }
    public string Url { get; private set; }
    public bool Detached { get; private set; }
    public IPage Page { get; }
    private IFrame PuppeteerSharp.IFrame.ParentFrame { get; }
    public bool IsOopFrame { get; }
    public string Id { get; internal set; }
    public CDPSession Client { get; protected set; }
    private Realm PuppeteerSharp.IEnvironment.MainRealm { get; }
    internal string ParentId { get; internal set; }
    internal string LoaderId { get; private set; }
    internal List`1<string> LifecycleEvents { get; }
    internal Realm MainRealm { get; internal set; }
    internal Realm IsolatedRealm { get; internal set; }
    internal IsolatedWorld MainWorld { get; }
    internal IsolatedWorld PuppeteerWorld { get; }
    internal bool HasStartedLoading { get; private set; }
    internal Frame ParentFrame { get; }
    protected ILogger Logger { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameSwappedByActivation(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameSwappedByActivation(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FrameDetached(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FrameDetached(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_FrameNavigatedWithinDocument(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FrameNavigatedWithinDocument(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_LifecycleEvent(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_LifecycleEvent(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FrameSwapped(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FrameSwapped(EventHandler value);
    public abstract virtual IReadOnlyCollection`1<IFrame> get_ChildFrames();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Detached();
    [CompilerGeneratedAttribute]
private void set_Detached(bool value);
    public abstract virtual IPage get_Page();
    private sealed virtual override IFrame PuppeteerSharp.IFrame.get_ParentFrame();
    public abstract virtual bool get_IsOopFrame();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    public abstract virtual CDPSession get_Client();
    protected abstract virtual void set_Client(CDPSession value);
    private sealed virtual override Realm PuppeteerSharp.IEnvironment.get_MainRealm();
    [CompilerGeneratedAttribute]
internal string get_ParentId();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParentId(string value);
    [CompilerGeneratedAttribute]
internal string get_LoaderId();
    [CompilerGeneratedAttribute]
private void set_LoaderId(string value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_LifecycleEvents();
    [CompilerGeneratedAttribute]
internal Realm get_MainRealm();
    [CompilerGeneratedAttribute]
internal void set_MainRealm(Realm value);
    [CompilerGeneratedAttribute]
internal Realm get_IsolatedRealm();
    [CompilerGeneratedAttribute]
internal void set_IsolatedRealm(Realm value);
    internal IsolatedWorld get_MainWorld();
    internal IsolatedWorld get_PuppeteerWorld();
    [CompilerGeneratedAttribute]
internal bool get_HasStartedLoading();
    [CompilerGeneratedAttribute]
private void set_HasStartedLoading(bool value);
    internal abstract virtual Frame get_ParentFrame();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(ILogger value);
    public abstract virtual Task`1<IResponse> GoToAsync(string url, NavigationOptions options);
    public sealed virtual Task`1<IResponse> GoToAsync(string url, Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public abstract virtual Task`1<IResponse> WaitForNavigationAsync(NavigationOptions options);
    public sealed virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public sealed virtual Task`1<T> EvaluateExpressionAsync(string script);
    public sealed virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public sealed virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string function, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<WaitForSelectorAsync>d__90")]
public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    public sealed virtual Task`1<IElementHandle> WaitForXPathAsync(string xpath, WaitForSelectorOptions options);
    public sealed virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, WaitForFunctionOptions options, Object[] args);
    public sealed virtual Task`1<IJSHandle> WaitForExpressionAsync(string script, WaitForFunctionOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<SelectAsync>d__94")]
public sealed virtual Task`1<String[]> SelectAsync(string selector, String[] values);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<QuerySelectorAllHandleAsync>d__95")]
public sealed virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<QuerySelectorAsync>d__96")]
public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<QuerySelectorAllAsync>d__97")]
public sealed virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<XPathAsync>d__98")]
public sealed virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public sealed virtual Task`1<DeviceRequestPrompt> WaitForDevicePromptAsync(WaitForOptions options);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(AddTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(AddTagOptions options);
    public sealed virtual Task`1<string> GetContentAsync();
    public abstract virtual Task SetContentAsync(string html, NavigationOptions options);
    public sealed virtual Task`1<string> GetTitleAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<ClickAsync>d__105")]
public sealed virtual Task ClickAsync(string selector, ClickOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<HoverAsync>d__106")]
public sealed virtual Task HoverAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<FocusAsync>d__107")]
public sealed virtual Task FocusAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<TapAsync>d__108")]
public sealed virtual Task TapAsync(string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<TypeAsync>d__109")]
public sealed virtual Task TypeAsync(string selector, string text, TypeOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<FrameElementAsync>d__110")]
public sealed virtual Task`1<ElementHandle> FrameElementAsync();
    internal void ClearDocumentHandle();
    internal void OnLoadingStarted();
    internal void OnLoadingStopped();
    internal void OnLifecycleEvent(string loaderId, string name);
    internal void Navigated(FramePayload framePayload);
    internal void OnFrameNavigated(FrameNavigatedEventArgs e);
    internal void OnSwapped();
    internal void NavigatedWithinDocument(string url);
    internal void Detach();
    internal void OnFrameSwappedByActivation();
    protected internal abstract virtual DeviceRequestPromptManager GetDeviceRequestPromptManager();
    private Task`1<ElementHandle> GetDocumentAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Frame/<<GetDocumentAsync>g__EvaluateDocumentInContext|122_0>d")]
[CompilerGeneratedAttribute]
private Task`1<ElementHandle> <GetDocumentAsync>g__EvaluateDocumentInContext|122_0();
}
public class PuppeteerSharp.FrameEventArgs : object {
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    public IFrame Frame { get; public set; }
    public FrameEventArgs(IFrame frame);
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(IFrame value);
}
public class PuppeteerSharp.FrameNavigatedEventArgs : object {
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationType <Type>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IFrame Frame { get; public set; }
    public NavigationType Type { get; }
    internal FrameNavigatedEventArgs(IFrame frame, NavigationType type);
    [CompilerGeneratedAttribute]
protected FrameNavigatedEventArgs(FrameNavigatedEventArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public NavigationType get_Type();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FrameNavigatedEventArgs left, FrameNavigatedEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FrameNavigatedEventArgs left, FrameNavigatedEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FrameNavigatedEventArgs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual FrameNavigatedEventArgs <Clone>$();
}
internal class PuppeteerSharp.FramePayload : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlFragment>k__BackingField;
    public string Id { get; public set; }
    public string ParentId { get; public set; }
    public string Name { get; public set; }
    public string Url { get; public set; }
    public string UrlFragment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_UrlFragment();
    [CompilerGeneratedAttribute]
public void set_UrlFragment(string value);
}
public class PuppeteerSharp.GeolocationOption : object {
    [CompilerGeneratedAttribute]
private decimal <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Accuracy>k__BackingField;
    public decimal Latitude { get; public set; }
    public decimal Longitude { get; public set; }
    public decimal Accuracy { get; public set; }
    [CompilerGeneratedAttribute]
public decimal get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Accuracy();
    [CompilerGeneratedAttribute]
public void set_Accuracy(decimal value);
    public sealed virtual bool Equals(GeolocationOption other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum PuppeteerSharp.HeadlessMode : Enum {
    public int value__;
    public static HeadlessMode True;
    public static HeadlessMode False;
    public static HeadlessMode Shell;
}
internal class PuppeteerSharp.Helpers.AsyncDictionaryHelper`2 : object {
    private string _timeoutMessage;
    private MultiMap`2<TKey, TaskCompletionSource`1<TValue>> _pendingRequests;
    private ConcurrentDictionary`2<TKey, TValue> _dictionary;
    internal ICollection`1<TValue> Values { get; }
    public AsyncDictionaryHelper`2(string timeoutMessage);
    internal ICollection`1<TValue> get_Values();
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.AsyncDictionaryHelper`2/<GetItemAsync>d__6")]
internal Task`1<TValue> GetItemAsync(TKey key);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.AsyncDictionaryHelper`2/<TryGetItemAsync>d__7")]
internal Task`1<TValue> TryGetItemAsync(TKey key);
    internal void AddItem(TKey key, TValue value);
    internal bool TryRemove(TKey key, TValue& value);
    internal void Clear();
    internal TValue GetValueOrDefault(TKey key);
    internal bool TryGetValue(TKey key, TValue& value);
    internal bool ContainsKey(TKey key);
}
internal static class PuppeteerSharp.Helpers.AsyncFileHelper : object {
    public static FileStream CreateStream(string path, FileMode mode);
    public static FileStream CreateStream(string path, FileMode mode, FileAccess access);
    public static FileStream CreateStream(string path, FileMode mode, FileAccess access, FileShare share);
    public static Task`1<string> ReadAllText(string path);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.AsyncFileHelper/<ReadAllText>d__4")]
public static Task`1<string> ReadAllText(string path, Encoding encoding);
    public static FileStream OpenRead(string path);
    public static StreamReader OpenText(string path, Encoding encoding);
}
internal class PuppeteerSharp.Helpers.AsyncMessageQueue : object {
    private List`1<MessageTask> _pendingTasks;
    private bool _enqueueAsyncMessages;
    private ILogger _logger;
    private bool _disposed;
    public AsyncMessageQueue(bool enqueueAsyncMessages, ILogger logger);
    public void Enqueue(MessageTask callback, ConnectionResponse obj);
    public sealed virtual void Dispose();
    private static void HandleAsyncMessage(MessageTask callback, ConnectionResponse obj);
}
[DebuggerDisplayAttribute("Count = {Count}")]
internal class PuppeteerSharp.Helpers.ConcurrentSet`1 : object {
    private static int DefaultConcurrencyLevel;
    private static int DefaultCapacity;
    private ConcurrentDictionary`2<T, byte> _dictionary;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsReadOnly { get; }
    public ConcurrentSet`1(IEqualityComparer`1<T> equalityComparer);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Contains(T value);
    public bool Add(T value);
    public void AddRange(IEnumerable`1<T> values);
    public sealed virtual bool Remove(T value);
    public sealed virtual void Clear();
    public KeyEnumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    [IteratorStateMachineAttribute("PuppeteerSharp.Helpers.ConcurrentSet`1/<GetEnumeratorImpl>d__21")]
private IEnumerator`1<T> GetEnumeratorImpl();
}
internal class PuppeteerSharp.Helpers.DeferredTaskQueue : object {
    private List`1<Task> _pendingTasks;
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.DeferredTaskQueue/<Enqueue>d__1")]
public Task Enqueue(Func`1<Task> taskGenerator);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.DeferredTaskQueue/<DrainAsync>d__2")]
public Task DrainAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class PuppeteerSharp.Helpers.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static Dictionary`2<TKey, TValue> Clone(Dictionary`2<TKey, TValue> dic);
    [ExtensionAttribute]
internal static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
internal class PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter : StringEnumConverter {
    private Enum _fallbackValue;
    public FlexibleStringEnumConverter(Enum fallbackValue);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class PuppeteerSharp.Helpers.Json.HttpMethodConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class PuppeteerSharp.Helpers.Json.JSHandleMethodConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal static class PuppeteerSharp.Helpers.Json.JsonHelper : object {
    public static JsonSerializerSettings DefaultJsonSerializerSettings;
    private static JsonHelper();
}
[ExtensionAttribute]
internal static class PuppeteerSharp.Helpers.Json.JTokenExtensions : object {
    [ExtensionAttribute]
public static T ToObject(JToken token, bool camelCase);
    [ExtensionAttribute]
public static T ToObject(JToken token, JsonSerializerSettings jsonSerializerSettings);
}
[FlagsAttribute]
internal enum PuppeteerSharp.Helpers.Linux.FileAccessPermissions : Enum {
    public UInt32 value__;
    public static FileAccessPermissions OtherExecute;
    public static FileAccessPermissions OtherWrite;
    public static FileAccessPermissions OtherRead;
    public static FileAccessPermissions GroupExecute;
    public static FileAccessPermissions GroupWrite;
    public static FileAccessPermissions GroupRead;
    public static FileAccessPermissions UserExecute;
    public static FileAccessPermissions UserWrite;
    public static FileAccessPermissions UserRead;
    public static FileAccessPermissions OtherReadWriteExecute;
    public static FileAccessPermissions GroupReadWriteExecute;
    public static FileAccessPermissions UserReadWriteExecute;
    public static FileAccessPermissions DefaultPermissions;
    public static FileAccessPermissions AllPermissions;
}
internal static class PuppeteerSharp.Helpers.Linux.LinuxSysCall : object {
    internal static FileAccessPermissions ExecutableFilePermissions;
    internal static int Chmod(string path, FileAccessPermissions mode);
}
internal class PuppeteerSharp.Helpers.MultiMap`2 : object {
    private ConcurrentDictionary`2<TKey, ICollection`1<TValue>> _map;
    internal void Add(TKey key, TValue value);
    internal ICollection`1<TValue> Get(TKey key);
    internal bool Has(TKey key, TValue value);
    internal bool Delete(TKey key, TValue value);
    internal bool TryRemove(TKey key, ICollection`1& value);
    internal TValue FirstValue(TKey key);
    internal void Clear();
}
internal static class PuppeteerSharp.Helpers.ProtocolStreamReader : object {
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.ProtocolStreamReader/<ReadProtocolStreamStringAsync>d__0")]
internal static Task`1<string> ReadProtocolStreamStringAsync(CDPSession client, string handle, string path);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.ProtocolStreamReader/<ReadProtocolStreamByteAsync>d__1")]
internal static Task`1<Byte[]> ReadProtocolStreamByteAsync(CDPSession client, string handle, string path);
}
internal class PuppeteerSharp.Helpers.RemoteObjectHelper : object {
    internal static object ValueFromRemoteObject(RemoteObject remoteObject, bool stringify);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.RemoteObjectHelper/<ReleaseObjectAsync>d__1")]
internal static Task ReleaseObjectAsync(CDPSession client, RemoteObject remoteObject, ILogger logger);
    private static object ValueFromType(JToken value, RemoteObjectType objectType, bool stringify);
    private static object ValueFromUnserializableValue(RemoteObject remoteObject, string unserializableValue);
}
[ExtensionAttribute]
internal static class PuppeteerSharp.Helpers.StringExtensions : object {
    [ExtensionAttribute]
public static string Quote(string value);
    [ExtensionAttribute]
private static bool IsQuoted(string value);
}
[ExtensionAttribute]
public static class PuppeteerSharp.Helpers.TaskHelper : object {
    private static Func`2<TimeSpan, Exception> _defaultExceptionFactory;
    [CompilerGeneratedAttribute]
private static int <DefaultTimeout>k__BackingField;
    public static int DefaultTimeout { get; public set; }
    private static TaskHelper();
    [CompilerGeneratedAttribute]
public static int get_DefaultTimeout();
    [CompilerGeneratedAttribute]
public static void set_DefaultTimeout(int value);
    [ExtensionAttribute]
public static Task WithTimeout(Task task, Nullable`1<int> milliseconds, Func`2<TimeSpan, Exception> exceptionFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WithTimeout(Task task, TimeSpan timeout, Func`2<TimeSpan, Exception> exceptionFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WithTimeout(Task task, Func`1<Task> timeoutAction, int milliseconds, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskHelper/<WithTimeout>d__8")]
[ExtensionAttribute]
public static Task WithTimeout(Task task, Func`1<Task> timeoutAction, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, Action timeoutAction, int milliseconds);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskHelper/<WithTimeout>d__10`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, Action timeoutAction, TimeSpan timeout);
    [ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, Nullable`1<int> milliseconds, Func`2<TimeSpan, Exception> exceptionFactory);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskHelper/<WithTimeout>d__12`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeout, Func`2<TimeSpan, Exception> exceptionFactory);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskHelper/<TimeoutTask>d__13")]
private static Task`1<bool> TimeoutTask(Task task, TimeSpan timeout);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskHelper/<TimeoutTask>d__14")]
private static Task`1<bool> TimeoutTask(Task task, TimeSpan timeout, CancellationToken cancellationToken);
}
internal class PuppeteerSharp.Helpers.TaskQueue : object {
    private SemaphoreSlim _semaphore;
    private AsyncLocal`1<bool> _held;
    private int _disposed;
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskQueue/<DisposeAsync>d__5")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskQueue/<Enqueue>d__6`1")]
internal Task`1<T> Enqueue(Func`1<Task`1<T>> taskGenerator);
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TaskQueue/<Enqueue>d__7")]
internal Task Enqueue(Func`1<Task> taskGenerator);
    private void TryRelease(SemaphoreSlim semaphore);
}
internal class PuppeteerSharp.Helpers.TempDirectory : object {
    private int _disposed;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    private TempDirectory(string path);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public string get_Path();
    public sealed virtual void Dispose();
    public virtual string ToString();
    [AsyncStateMachineAttribute("PuppeteerSharp.Helpers.TempDirectory/<DeleteAsync>d__9")]
private static Task DeleteAsync(string path);
    private void DisposeCore();
}
public interface PuppeteerSharp.IBrowser {
    public IBrowserContext DefaultContext { get; }
    public SupportedBrowser BrowserType { get; }
    public int DefaultWaitForTimeout { get; public set; }
    public bool IgnoreHTTPSErrors { get; public set; }
    public bool IsClosed { get; }
    public bool IsConnected { get; }
    public Process Process { get; }
    public ITarget Target { get; }
    public string WebSocketEndpoint { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    public abstract virtual IBrowserContext get_DefaultContext();
    public abstract virtual SupportedBrowser get_BrowserType();
    public abstract virtual int get_DefaultWaitForTimeout();
    public abstract virtual void set_DefaultWaitForTimeout(int value);
    public abstract virtual bool get_IgnoreHTTPSErrors();
    public abstract virtual void set_IgnoreHTTPSErrors(bool value);
    public abstract virtual bool get_IsClosed();
    public abstract virtual bool get_IsConnected();
    public abstract virtual Process get_Process();
    public abstract virtual ITarget get_Target();
    public abstract virtual string get_WebSocketEndpoint();
    public abstract virtual IBrowserContext[] BrowserContexts();
    public abstract virtual Task CloseAsync();
    public abstract virtual Task`1<IBrowserContext> CreateBrowserContextAsync(BrowserContextOptions options);
    public abstract virtual void Disconnect();
    public abstract virtual Task`1<string> GetUserAgentAsync();
    public abstract virtual Task`1<string> GetVersionAsync();
    public abstract virtual Task`1<IPage> NewPageAsync();
    public abstract virtual Task`1<IPage[]> PagesAsync();
    public abstract virtual ITarget[] Targets();
    public abstract virtual Task`1<ITarget> WaitForTargetAsync(Func`2<ITarget, bool> predicate, WaitForOptions options);
    public abstract virtual void RegisterCustomQueryHandler(string name, CustomQueryHandler queryHandler);
    public abstract virtual void UnregisterCustomQueryHandler(string name);
    public abstract virtual void ClearCustomQueryHandlers();
}
public interface PuppeteerSharp.IBrowserContext {
    public string Id { get; }
    public IBrowser Browser { get; }
    public bool IsClosed { get; }
    [ObsoleteAttribute("In Chrome, the default browser context can also be "icognito" if configured via the arguments and in such cases this getter returns wrong results. Also, the term "incognito" is not applicable to other browsers. To migrate, check the default browser context instead: in Chrome all non-default contexts are incognito, and the default context might be incognito if you provide the `--incognito` argument when launching the browser.")]
public bool IsIncognito { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetCreated(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetDestroyed(EventHandler`1<TargetChangedArgs> value);
    public abstract virtual string get_Id();
    public abstract virtual IBrowser get_Browser();
    public abstract virtual bool get_IsClosed();
    public abstract virtual bool get_IsIncognito();
    public abstract virtual Task ClearPermissionOverridesAsync();
    public abstract virtual Task CloseAsync();
    public abstract virtual Task`1<IPage> NewPageAsync();
    public abstract virtual Task OverridePermissionsAsync(string origin, IEnumerable`1<OverridePermission> permissions);
    public abstract virtual Task`1<IPage[]> PagesAsync();
    public abstract virtual ITarget[] Targets();
    public abstract virtual Task`1<ITarget> WaitForTargetAsync(Func`2<ITarget, bool> predicate, WaitForOptions options);
}
public interface PuppeteerSharp.IBrowserFetcher {
    public string BaseUrl { get; public set; }
    public string CacheDir { get; public set; }
    public Platform Platform { get; public set; }
    public SupportedBrowser Browser { get; public set; }
    public IWebProxy WebProxy { get; public set; }
    public abstract virtual string get_BaseUrl();
    public abstract virtual void set_BaseUrl(string value);
    public abstract virtual string get_CacheDir();
    public abstract virtual void set_CacheDir(string value);
    public abstract virtual Platform get_Platform();
    public abstract virtual void set_Platform(Platform value);
    public abstract virtual SupportedBrowser get_Browser();
    public abstract virtual void set_Browser(SupportedBrowser value);
    public abstract virtual IWebProxy get_WebProxy();
    public abstract virtual void set_WebProxy(IWebProxy value);
    public abstract virtual Task`1<bool> CanDownloadAsync(string buildId);
    public abstract virtual Task`1<InstalledBrowser> DownloadAsync();
    public abstract virtual Task`1<InstalledBrowser> DownloadAsync(BrowserTag tag);
    public abstract virtual Task`1<InstalledBrowser> DownloadAsync(string revision);
    public abstract virtual IEnumerable`1<InstalledBrowser> GetInstalledBrowsers();
    public abstract virtual void Uninstall(string buildId);
    public abstract virtual string GetExecutablePath(string buildId);
}
public interface PuppeteerSharp.IBrowserOptions {
    public bool IgnoreHTTPSErrors { get; }
    public ViewPortOptions DefaultViewport { get; public set; }
    public abstract virtual bool get_IgnoreHTTPSErrors();
    public abstract virtual ViewPortOptions get_DefaultViewport();
    public abstract virtual void set_DefaultViewport(ViewPortOptions value);
}
public interface PuppeteerSharp.ICDPConnection {
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(EventHandler`1<MessageEventArgs> value);
    public abstract virtual Task`1<JObject> SendAsync(string method, object args, bool waitForCallback, CommandOptions options);
    public abstract virtual Task`1<T> SendAsync(string method, object args, CommandOptions options);
}
public interface PuppeteerSharp.ICDPSession {
    public ILoggerFactory LoggerFactory { get; }
    public string Id { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionAttached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionDetached(EventHandler`1<SessionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionDetached(EventHandler`1<SessionEventArgs> value);
    public abstract virtual ILoggerFactory get_LoggerFactory();
    public abstract virtual string get_Id();
    public abstract virtual Task DetachAsync();
}
public interface PuppeteerSharp.IConnectionOptions {
    public int SlowMo { get; public set; }
    public WebSocketFactory WebSocketFactory { get; public set; }
    public TransportFactory TransportFactory { get; public set; }
    public bool EnqueueTransportMessages { get; public set; }
    public bool EnqueueAsyncMessages { get; public set; }
    public Func`2<Target, bool> TargetFilter { get; public set; }
    public int ProtocolTimeout { get; public set; }
    public abstract virtual int get_SlowMo();
    public abstract virtual void set_SlowMo(int value);
    public abstract virtual WebSocketFactory get_WebSocketFactory();
    public abstract virtual void set_WebSocketFactory(WebSocketFactory value);
    public abstract virtual TransportFactory get_TransportFactory();
    public abstract virtual void set_TransportFactory(TransportFactory value);
    public abstract virtual bool get_EnqueueTransportMessages();
    public abstract virtual void set_EnqueueTransportMessages(bool value);
    public abstract virtual bool get_EnqueueAsyncMessages();
    public abstract virtual void set_EnqueueAsyncMessages(bool value);
    public abstract virtual Func`2<Target, bool> get_TargetFilter();
    public abstract virtual void set_TargetFilter(Func`2<Target, bool> value);
    public abstract virtual int get_ProtocolTimeout();
    public abstract virtual void set_ProtocolTimeout(int value);
}
public interface PuppeteerSharp.IElementHandle {
    public IFrame Frame { get; }
    public abstract virtual IFrame get_Frame();
    public abstract virtual Task`1<BoundingBox> BoundingBoxAsync();
    public abstract virtual Task`1<BoxModel> BoxModelAsync();
    public abstract virtual Task`1<BoxModelPoint> ClickablePointAsync(Nullable`1<Offset> offset);
    public abstract virtual Task ClickAsync(ClickOptions options);
    public abstract virtual Task`1<IFrame> ContentFrameAsync();
    public abstract virtual Task DragAndDropAsync(IElementHandle target, int delay);
    [ObsoleteAttribute("Just use DropAsync instead")]
public abstract virtual Task`1<DragData> DragAsync(decimal x, decimal y);
    [ObsoleteAttribute("Just use DropAsync instead")]
public abstract virtual Task`1<DragData> DragAsync(IElementHandle target);
    [ObsoleteAttribute("Don't useDragEnterAsync. `dragenter` will automatically be performed during dragging. ")]
public abstract virtual Task DragEnterAsync(DragData data);
    [ObsoleteAttribute("Don't useDragOverAsync. `dragover` will automatically be performed during dragging. ")]
public abstract virtual Task DragOverAsync(DragData data);
    public abstract virtual Task DropAsync(DragData data);
    public abstract virtual Task DropAsync(IElementHandle element);
    public abstract virtual Task FocusAsync();
    public abstract virtual Task HoverAsync();
    public abstract virtual Task`1<bool> IsIntersectingViewportAsync(decimal threshold);
    public abstract virtual Task PressAsync(string key, PressOptions options);
    public abstract virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    public abstract virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public abstract virtual Task ScreenshotAsync(string file);
    public abstract virtual Task ScreenshotAsync(string file, ElementScreenshotOptions options);
    public abstract virtual Task`1<string> ScreenshotBase64Async();
    public abstract virtual Task`1<string> ScreenshotBase64Async(ElementScreenshotOptions options);
    public abstract virtual Task`1<Byte[]> ScreenshotDataAsync();
    public abstract virtual Task`1<Byte[]> ScreenshotDataAsync(ElementScreenshotOptions options);
    public abstract virtual Task`1<Stream> ScreenshotStreamAsync();
    public abstract virtual Task`1<Stream> ScreenshotStreamAsync(ElementScreenshotOptions options);
    public abstract virtual Task`1<String[]> SelectAsync(String[] values);
    public abstract virtual Task TapAsync();
    public abstract virtual Task TypeAsync(string text, TypeOptions options);
    public abstract virtual Task UploadFileAsync(bool resolveFilePaths, String[] filePaths);
    public abstract virtual Task UploadFileAsync(String[] filePaths);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    [ObsoleteAttribute("Use QuerySelectorAsync instead")]
public abstract virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public abstract virtual Task`1<bool> IsVisibleAsync();
    public abstract virtual Task`1<bool> IsHiddenAsync();
    public abstract virtual Task TouchStartAsync();
    public abstract virtual Task TouchMoveAsync();
    public abstract virtual Task TouchEndAsync();
    public abstract virtual Task ScrollIntoViewAsync();
}
internal interface PuppeteerSharp.IEnvironment {
    public CDPSession Client { get; }
    public Realm MainRealm { get; }
    public abstract virtual CDPSession get_Client();
    public abstract virtual Realm get_MainRealm();
}
public interface PuppeteerSharp.IExecutionContext {
    public IFrame Frame { get; }
    public abstract virtual IFrame get_Frame();
    public abstract virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<T> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public abstract virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string pageFunction, Object[] args);
}
public interface PuppeteerSharp.IFrame {
    public IReadOnlyCollection`1<IFrame> ChildFrames { get; }
    public bool Detached { get; }
    public string Id { get; }
    [ObsoleteAttribute("Use (await frame.FrameElementAsync()).EvaluateFunctionAsync<string>("frame => frame.name") instead.")]
public string Name { get; }
    public IPage Page { get; }
    public IFrame ParentFrame { get; }
    public bool IsOopFrame { get; }
    public string Url { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameSwappedByActivation(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameSwappedByActivation(EventHandler value);
    public abstract virtual IReadOnlyCollection`1<IFrame> get_ChildFrames();
    public abstract virtual bool get_Detached();
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual IPage get_Page();
    public abstract virtual IFrame get_ParentFrame();
    public abstract virtual bool get_IsOopFrame();
    public abstract virtual string get_Url();
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(AddTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(AddTagOptions options);
    public abstract virtual Task ClickAsync(string selector, ClickOptions options);
    public abstract virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<T> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public abstract virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string func, Object[] args);
    public abstract virtual Task FocusAsync(string selector);
    public abstract virtual Task`1<string> GetContentAsync();
    public abstract virtual Task`1<string> GetTitleAsync();
    public abstract virtual Task`1<IResponse> GoToAsync(string url, Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public abstract virtual Task`1<IResponse> GoToAsync(string url, NavigationOptions options);
    public abstract virtual Task HoverAsync(string selector);
    public abstract virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    public abstract virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public abstract virtual Task`1<String[]> SelectAsync(string selector, String[] values);
    public abstract virtual Task SetContentAsync(string html, NavigationOptions options);
    public abstract virtual Task TypeAsync(string selector, string text, TypeOptions options);
    public abstract virtual Task`1<IJSHandle> WaitForExpressionAsync(string script, WaitForFunctionOptions options);
    public abstract virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, WaitForFunctionOptions options, Object[] args);
    public abstract virtual Task`1<IResponse> WaitForNavigationAsync(NavigationOptions options);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    [ObsoleteAttribute("Use WaitForSelectorAsync instead")]
public abstract virtual Task`1<IElementHandle> WaitForXPathAsync(string xpath, WaitForSelectorOptions options);
    [ObsoleteAttribute("Use QuerySelectorAsync instead")]
public abstract virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public abstract virtual Task`1<DeviceRequestPrompt> WaitForDevicePromptAsync(WaitForOptions options);
    public abstract virtual Task TapAsync(string selector);
    public abstract virtual Task`1<ElementHandle> FrameElementAsync();
}
public interface PuppeteerSharp.IJSHandle {
    public bool Disposed { get; }
    public RemoteObject RemoteObject { get; }
    public abstract virtual bool get_Disposed();
    public abstract virtual RemoteObject get_RemoteObject();
    public abstract virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string pageFunction, Object[] args);
    public abstract virtual Task`1<Dictionary`2<string, IJSHandle>> GetPropertiesAsync();
    public abstract virtual Task`1<IJSHandle> GetPropertyAsync(string propertyName);
    public abstract virtual Task`1<object> JsonValueAsync();
    public abstract virtual Task`1<T> JsonValueAsync();
}
internal enum PuppeteerSharp.InitializationStatus : Enum {
    public int value__;
    public static InitializationStatus Aborted;
    public static InitializationStatus Success;
}
public class PuppeteerSharp.Initiator : object {
    [CompilerGeneratedAttribute]
private InitiatorType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public InitiatorType Type { get; public set; }
    public string Url { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> ColumnNumber { get; public set; }
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public InitiatorType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(InitiatorType value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.InitiatorType : Enum {
    public int value__;
    public static InitiatorType Parser;
    public static InitiatorType Script;
    public static InitiatorType Preload;
    [EnumMemberAttribute]
public static InitiatorType SignedExchange;
    public static InitiatorType Preflight;
    public static InitiatorType Other;
}
public class PuppeteerSharp.Input.ClickOptions : object {
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButton <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Offset> <OffSet>k__BackingField;
    public int Delay { get; public set; }
    public int Count { get; public set; }
    public MouseButton Button { get; public set; }
    public Nullable`1<Offset> OffSet { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public MouseButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MouseButton value);
    [CompilerGeneratedAttribute]
public Nullable`1<Offset> get_OffSet();
    [CompilerGeneratedAttribute]
public void set_OffSet(Nullable`1<Offset> value);
}
public class PuppeteerSharp.Input.DownOptions : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public interface PuppeteerSharp.Input.IKeyboard {
    public abstract virtual Task DownAsync(string key, DownOptions options);
    public abstract virtual Task PressAsync(string key, PressOptions options);
    public abstract virtual Task SendCharacterAsync(string charText);
    public abstract virtual Task TypeAsync(string text, TypeOptions options);
    public abstract virtual Task UpAsync(string key);
}
public interface PuppeteerSharp.Input.IMouse {
    public abstract virtual Task ClickAsync(decimal x, decimal y, ClickOptions options);
    public abstract virtual Task DownAsync(ClickOptions options);
    public abstract virtual Task DragAndDropAsync(decimal startX, decimal startY, decimal endX, decimal endY, int delay);
    public abstract virtual Task`1<DragData> DragAsync(decimal startX, decimal startY, decimal endX, decimal endY);
    public abstract virtual Task DragEnterAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task DragOverAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task DropAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task MoveAsync(decimal x, decimal y, MoveOptions options);
    public abstract virtual Task UpAsync(ClickOptions options);
    public abstract virtual Task WheelAsync(decimal deltaX, decimal deltaY);
    public abstract virtual Task ResetAsync();
}
public interface PuppeteerSharp.Input.ITouchscreen {
    public abstract virtual Task TapAsync(decimal x, decimal y);
    public abstract virtual Task TouchStartAsync(decimal x, decimal y);
    public abstract virtual Task TouchMoveAsync(decimal x, decimal y);
    public abstract virtual Task TouchEndAsync();
}
public class PuppeteerSharp.Input.Key : object {
    public static Key Cancel;
    public static Key Help;
    public static Key Backspace;
    public static Key Tab;
    public static Key Clear;
    public static Key Enter;
    public static Key Shift;
    public static Key Control;
    public static Key Alt;
    public static Key Pause;
    public static Key CapsLock;
    public static Key Escape;
    public static Key Convert;
    public static Key NonConvert;
    public static Key Accept;
    public static Key ModeChange;
    public static Key PageUp;
    public static Key PageDown;
    public static Key End;
    public static Key Home;
    public static Key ArrowLeft;
    public static Key ArrowUp;
    public static Key ArrowRight;
    public static Key ArrowDown;
    public static Key Select;
    public static Key Print;
    public static Key Execute;
    public static Key PrintScreen;
    public static Key Insert;
    public static Key Delete;
    public static Key CloseParentheses;
    public static Key ExclamationMark;
    public static Key AtSign;
    public static Key NumberSign;
    public static Key DollarSign;
    public static Key Percent;
    public static Key Caret;
    public static Key Ampersand;
    public static Key Asterisk;
    public static Key OpenParentheses;
    public static Key Meta;
    public static Key ContextMenu;
    public static Key F1;
    public static Key F2;
    public static Key F3;
    public static Key F4;
    public static Key F5;
    public static Key F6;
    public static Key F7;
    public static Key F8;
    public static Key F9;
    public static Key F10;
    public static Key F12;
    public static Key F11;
    public static Key F13;
    public static Key F14;
    public static Key F15;
    public static Key F16;
    public static Key F17;
    public static Key F18;
    public static Key F19;
    public static Key F20;
    public static Key F21;
    public static Key F22;
    public static Key F23;
    public static Key F24;
    public static Key NumLock;
    public static Key ScrollLock;
    public static Key AudioVolumeMute;
    public static Key AudioVolumeDown;
    public static Key AudioVolumeUp;
    public static Key MediaTrackNext;
    public static Key MediaTrackPrevious;
    public static Key MediaStop;
    public static Key MediaPlayPause;
    public static Key Semicolon;
    public static Key Comma;
    public static Key EqualsSign;
    public static Key PlusSign;
    public static Key LesserThan;
    public static Key MinusSign;
    public static Key Underscore;
    public static Key Period;
    public static Key GreaterThan;
    public static Key Slash;
    public static Key QuestionMark;
    public static Key Backquote;
    public static Key Tilde;
    public static Key OpenSquareBrackets;
    public static Key OpenBrackets;
    public static Key CloseSquareBrackets;
    public static Key Pipe;
    public static Key CloseBrackets;
    public static Key Backslash;
    public static Key AltGraph;
    public static Key Attn;
    public static Key CrSel;
    public static Key ExSel;
    public static Key EraseEof;
    public static Key Play;
    public static Key ZoomOut;
    private string _value;
    private Key(string value);
    private static Key();
    public static string op_Implicit(Key key);
    public virtual string ToString();
}
public abstract class PuppeteerSharp.Input.Keyboard : object {
    [CompilerGeneratedAttribute]
private int <Modifiers>k__BackingField;
    internal int Modifiers { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Modifiers();
    [CompilerGeneratedAttribute]
internal void set_Modifiers(int value);
    public abstract virtual Task DownAsync(string key, DownOptions options);
    public abstract virtual Task UpAsync(string key);
    public abstract virtual Task SendCharacterAsync(string charText);
    public abstract virtual Task TypeAsync(string text, TypeOptions options);
    public abstract virtual Task PressAsync(string key, PressOptions options);
}
internal class PuppeteerSharp.Input.KeyDefinition : object {
    [CompilerGeneratedAttribute]
private int <KeyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShiftKeyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShiftKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShiftText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Location>k__BackingField;
    internal int KeyCode { get; internal set; }
    internal Nullable`1<int> ShiftKeyCode { get; internal set; }
    internal string Key { get; internal set; }
    internal string ShiftKey { get; internal set; }
    internal string Code { get; internal set; }
    internal string Text { get; internal set; }
    internal string ShiftText { get; internal set; }
    internal int Location { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_KeyCode();
    [CompilerGeneratedAttribute]
internal void set_KeyCode(int value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_ShiftKeyCode();
    [CompilerGeneratedAttribute]
internal void set_ShiftKeyCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
internal string get_ShiftKey();
    [CompilerGeneratedAttribute]
internal void set_ShiftKey(string value);
    [CompilerGeneratedAttribute]
internal string get_Code();
    [CompilerGeneratedAttribute]
internal void set_Code(string value);
    [CompilerGeneratedAttribute]
internal string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    [CompilerGeneratedAttribute]
internal string get_ShiftText();
    [CompilerGeneratedAttribute]
internal void set_ShiftText(string value);
    [CompilerGeneratedAttribute]
internal int get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(int value);
}
internal static class PuppeteerSharp.Input.KeyDefinitions : object {
    private static Dictionary`2<string, KeyDefinition> Definitions;
    private static KeyDefinitions();
    internal static KeyDefinition Get(string key);
    internal static bool ContainsKey(string key);
}
public abstract class PuppeteerSharp.Input.Mouse : object {
    public abstract virtual Task MoveAsync(decimal x, decimal y, MoveOptions options);
    public abstract virtual Task ClickAsync(decimal x, decimal y, ClickOptions options);
    public abstract virtual Task DownAsync(ClickOptions options);
    public abstract virtual Task UpAsync(ClickOptions options);
    public abstract virtual Task WheelAsync(decimal deltaX, decimal deltaY);
    public abstract virtual Task`1<DragData> DragAsync(decimal startX, decimal startY, decimal endX, decimal endY);
    public abstract virtual Task DragEnterAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task DragOverAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task DropAsync(decimal x, decimal y, DragData data);
    public abstract virtual Task DragAndDropAsync(decimal startX, decimal startY, decimal endX, decimal endY, int delay);
    public abstract virtual Task ResetAsync();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[FlagsAttribute]
public enum PuppeteerSharp.Input.MouseButton : Enum {
    public int value__;
    public static MouseButton None;
    public static MouseButton Left;
    public static MouseButton Right;
    public static MouseButton Middle;
    public static MouseButton Back;
    public static MouseButton Forward;
}
internal class PuppeteerSharp.Input.MouseState : object {
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButton <Buttons>k__BackingField;
    public Point Position { get; public set; }
    public MouseButton Buttons { get; public set; }
    [CompilerGeneratedAttribute]
public Point get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Point value);
    [CompilerGeneratedAttribute]
public MouseButton get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(MouseButton value);
}
internal class PuppeteerSharp.Input.MouseTransaction : object {
    [CompilerGeneratedAttribute]
private Action`1<TransactionData> <Update>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Rollback>k__BackingField;
    public Action`1<TransactionData> Update { get; public set; }
    public Action Commit { get; public set; }
    public Action Rollback { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<TransactionData> get_Update();
    [CompilerGeneratedAttribute]
public void set_Update(Action`1<TransactionData> value);
    [CompilerGeneratedAttribute]
public Action get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(Action value);
    [CompilerGeneratedAttribute]
public Action get_Rollback();
    [CompilerGeneratedAttribute]
public void set_Rollback(Action value);
}
public class PuppeteerSharp.Input.MoveOptions : object {
    [CompilerGeneratedAttribute]
private int <Steps>k__BackingField;
    public int Steps { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(int value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum PuppeteerSharp.Input.PointerType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static PointerType Mouse;
    [EnumMemberAttribute]
public static PointerType Pen;
}
public class PuppeteerSharp.Input.PressOptions : DownOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Delay>k__BackingField;
    public Nullable`1<int> Delay { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<int> value);
}
internal class PuppeteerSharp.Input.TouchPoint : object {
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Force>k__BackingField;
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public decimal RadiusX { get; public set; }
    public decimal RadiusY { get; public set; }
    public decimal Force { get; public set; }
    [CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusX(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_RadiusY();
    [CompilerGeneratedAttribute]
public void set_RadiusY(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(decimal value);
}
public abstract class PuppeteerSharp.Input.Touchscreen : object {
    [AsyncStateMachineAttribute("PuppeteerSharp.Input.Touchscreen/<TapAsync>d__0")]
public sealed virtual Task TapAsync(decimal x, decimal y);
    public abstract virtual Task TouchStartAsync(decimal x, decimal y);
    public abstract virtual Task TouchMoveAsync(decimal x, decimal y);
    public abstract virtual Task TouchEndAsync();
}
public class PuppeteerSharp.Input.TypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Delay>k__BackingField;
    public Nullable`1<int> Delay { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<int> value);
}
internal enum PuppeteerSharp.InterceptResolutionAction : Enum {
    public int value__;
    public static InterceptResolutionAction Abort;
    public static InterceptResolutionAction Respond;
    public static InterceptResolutionAction Continue;
    public static InterceptResolutionAction Disabled;
    public static InterceptResolutionAction None;
    public static InterceptResolutionAction AlreadyHandled;
}
internal class PuppeteerSharp.InterceptResolutionState : object {
    [CompilerGeneratedAttribute]
private InterceptResolutionAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Priority>k__BackingField;
    public InterceptResolutionAction Action { get; public set; }
    public Nullable`1<int> Priority { get; public set; }
    public InterceptResolutionState(InterceptResolutionAction action, Nullable`1<int> priority);
    [CompilerGeneratedAttribute]
public InterceptResolutionAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(InterceptResolutionAction value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<int> value);
}
internal class PuppeteerSharp.InternalNetworkConditions : NetworkConditions {
    [CompilerGeneratedAttribute]
private bool <Offline>k__BackingField;
    public bool Offline { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Offline();
    [CompilerGeneratedAttribute]
public void set_Offline(bool value);
}
internal class PuppeteerSharp.InvalidTargetException : PuppeteerException {
    public InvalidTargetException(string message);
    public InvalidTargetException(string message, Exception innerException);
    protected InvalidTargetException(SerializationInfo info, StreamingContext context);
}
public interface PuppeteerSharp.IPage {
    public IAccessibility Accessibility { get; }
    public IBrowser Browser { get; }
    public IBrowserContext BrowserContext { get; }
    public ICDPSession Client { get; }
    public ICoverage Coverage { get; }
    public int DefaultNavigationTimeout { get; public set; }
    public int DefaultTimeout { get; public set; }
    public IFrame[] Frames { get; }
    public bool IsClosed { get; }
    [ObsoleteAttribute("We no longer support intercepting drag payloads. Use the new drag APIs found on ElementHandle to drag (or just use the Page.Mouse)")]
public bool IsDragInterceptionEnabled { get; }
    public IKeyboard Keyboard { get; }
    public IFrame MainFrame { get; }
    public IMouse Mouse { get; }
    [ObsoleteAttribute("All the functionality provided by the Target should be already exposed by the page itself.")]
public ITarget Target { get; }
    public ITouchscreen Touchscreen { get; }
    public ITracing Tracing { get; }
    public string Url { get; }
    public ViewPortOptions Viewport { get; }
    public WebWorker[] Workers { get; }
    public bool IsJavaScriptEnabled { get; }
    public bool IsServiceWorkerBypassed { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Close(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Close(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Console(EventHandler`1<ConsoleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Console(EventHandler`1<ConsoleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dialog(EventHandler`1<DialogEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dialog(EventHandler`1<DialogEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DOMContentLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DOMContentLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Load(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Load(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Metrics(EventHandler`1<MetricEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Metrics(EventHandler`1<MetricEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PageError(EventHandler`1<PageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PageError(EventHandler`1<PageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Popup(EventHandler`1<PopupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Popup(EventHandler`1<PopupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WorkerCreated(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WorkerCreated(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WorkerDestroyed(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WorkerDestroyed(EventHandler`1<WorkerEventArgs> value);
    public abstract virtual IAccessibility get_Accessibility();
    public abstract virtual IBrowser get_Browser();
    public abstract virtual IBrowserContext get_BrowserContext();
    public abstract virtual ICDPSession get_Client();
    public abstract virtual ICoverage get_Coverage();
    public abstract virtual int get_DefaultNavigationTimeout();
    public abstract virtual void set_DefaultNavigationTimeout(int value);
    public abstract virtual int get_DefaultTimeout();
    public abstract virtual void set_DefaultTimeout(int value);
    public abstract virtual IFrame[] get_Frames();
    public abstract virtual bool get_IsClosed();
    public abstract virtual bool get_IsDragInterceptionEnabled();
    public abstract virtual IKeyboard get_Keyboard();
    public abstract virtual IFrame get_MainFrame();
    public abstract virtual IMouse get_Mouse();
    public abstract virtual ITarget get_Target();
    public abstract virtual ITouchscreen get_Touchscreen();
    public abstract virtual ITracing get_Tracing();
    public abstract virtual string get_Url();
    public abstract virtual ViewPortOptions get_Viewport();
    public abstract virtual WebWorker[] get_Workers();
    public abstract virtual bool get_IsJavaScriptEnabled();
    public abstract virtual bool get_IsServiceWorkerBypassed();
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(AddTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(string url);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(AddTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(string url);
    public abstract virtual Task AuthenticateAsync(Credentials credentials);
    public abstract virtual Task BringToFrontAsync();
    public abstract virtual Task ClickAsync(string selector, ClickOptions options);
    public abstract virtual Task CloseAsync(PageCloseOptions options);
    public abstract virtual Task DeleteCookieAsync(CookieParam[] cookies);
    public abstract virtual Task EmulateAsync(DeviceDescriptor options);
    public abstract virtual Task EmulateCPUThrottlingAsync(Nullable`1<decimal> factor);
    public abstract virtual Task EmulateIdleStateAsync(EmulateIdleOverrides idleOverrides);
    public abstract virtual Task EmulateMediaFeaturesAsync(IEnumerable`1<MediaFeatureValue> features);
    public abstract virtual Task EmulateMediaTypeAsync(MediaType type);
    public abstract virtual Task EmulateNetworkConditionsAsync(NetworkConditions networkConditions);
    public abstract virtual Task EmulateTimezoneAsync(string timezoneId);
    public abstract virtual Task EmulateVisionDeficiencyAsync(VisionDeficiency type);
    public abstract virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<T> EvaluateExpressionAsync(string script);
    public abstract virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public abstract virtual Task`1<NewDocumentScriptEvaluation> EvaluateExpressionOnNewDocumentAsync(string expression);
    public abstract virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string pageFunction, Object[] args);
    public abstract virtual Task`1<NewDocumentScriptEvaluation> EvaluateFunctionOnNewDocumentAsync(string pageFunction, Object[] args);
    public abstract virtual Task ExposeFunctionAsync(string name, Action puppeteerFunction);
    public abstract virtual Task RemoveExposedFunctionAsync(string name);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> puppeteerFunction);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> puppeteerFunction);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> puppeteerFunction);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> puppeteerFunction);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`1<TResult> puppeteerFunction);
    public abstract virtual Task FocusAsync(string selector);
    public abstract virtual Task`1<string> GetContentAsync();
    public abstract virtual Task`1<CookieParam[]> GetCookiesAsync(String[] urls);
    public abstract virtual Task`1<string> GetTitleAsync();
    public abstract virtual Task`1<IResponse> GoBackAsync(NavigationOptions options);
    public abstract virtual Task`1<IResponse> GoForwardAsync(NavigationOptions options);
    public abstract virtual Task`1<IResponse> GoToAsync(string url, Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public abstract virtual Task`1<IResponse> GoToAsync(string url, NavigationOptions options);
    public abstract virtual Task`1<IResponse> GoToAsync(string url, WaitUntilNavigation waitUntil);
    public abstract virtual Task HoverAsync(string selector);
    public abstract virtual Task`1<Dictionary`2<string, decimal>> MetricsAsync();
    public abstract virtual Task PdfAsync(string file);
    public abstract virtual Task PdfAsync(string file, PdfOptions options);
    public abstract virtual Task`1<Byte[]> PdfDataAsync();
    public abstract virtual Task`1<Byte[]> PdfDataAsync(PdfOptions options);
    public abstract virtual Task`1<Stream> PdfStreamAsync();
    public abstract virtual Task`1<Stream> PdfStreamAsync(PdfOptions options);
    public abstract virtual Task`1<IJSHandle> QueryObjectsAsync(IJSHandle prototypeHandle);
    public abstract virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    public abstract virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public abstract virtual Task`1<IResponse> ReloadAsync(Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public abstract virtual Task`1<IResponse> ReloadAsync(NavigationOptions options);
    public abstract virtual Task ScreenshotAsync(string file);
    public abstract virtual Task ScreenshotAsync(string file, ScreenshotOptions options);
    public abstract virtual Task`1<string> ScreenshotBase64Async();
    public abstract virtual Task`1<string> ScreenshotBase64Async(ScreenshotOptions options);
    public abstract virtual Task`1<Byte[]> ScreenshotDataAsync();
    public abstract virtual Task`1<Byte[]> ScreenshotDataAsync(ScreenshotOptions options);
    public abstract virtual Task`1<Stream> ScreenshotStreamAsync();
    public abstract virtual Task`1<Stream> ScreenshotStreamAsync(ScreenshotOptions options);
    public abstract virtual Task`1<String[]> SelectAsync(string selector, String[] values);
    public abstract virtual Task SetBurstModeOffAsync();
    public abstract virtual Task SetBypassCSPAsync(bool enabled);
    public abstract virtual Task SetCacheEnabledAsync(bool enabled);
    public abstract virtual Task SetContentAsync(string html, NavigationOptions options);
    public abstract virtual Task SetCookieAsync(CookieParam[] cookies);
    [ObsoleteAttribute("We no longer support intercepting drag payloads. Use the new drag APIs found on ElementHandle to drag (or just use the Page.Mouse)")]
public abstract virtual Task SetDragInterceptionAsync(bool enabled);
    public abstract virtual Task SetExtraHttpHeadersAsync(Dictionary`2<string, string> headers);
    public abstract virtual Task SetGeolocationAsync(GeolocationOption options);
    public abstract virtual Task SetJavaScriptEnabledAsync(bool enabled);
    public abstract virtual Task SetOfflineModeAsync(bool value);
    public abstract virtual Task SetRequestInterceptionAsync(bool value);
    public abstract virtual Task SetUserAgentAsync(string userAgent, UserAgentMetadata userAgentData);
    public abstract virtual Task SetViewportAsync(ViewPortOptions viewport);
    public abstract virtual Task TapAsync(string selector);
    public abstract virtual Task TypeAsync(string selector, string text, TypeOptions options);
    public abstract virtual Task`1<IJSHandle> WaitForExpressionAsync(string script, WaitForFunctionOptions options);
    public abstract virtual Task`1<IFrame> WaitForFrameAsync(string url, WaitForOptions options);
    public abstract virtual Task`1<IFrame> WaitForFrameAsync(Func`2<IFrame, bool> predicate, WaitForOptions options);
    public abstract virtual Task`1<FileChooser> WaitForFileChooserAsync(WaitForOptions options);
    public abstract virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, WaitForFunctionOptions options, Object[] args);
    public abstract virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, Object[] args);
    public abstract virtual Task`1<IResponse> WaitForNavigationAsync(NavigationOptions options);
    public abstract virtual Task WaitForNetworkIdleAsync(WaitForNetworkIdleOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(Func`2<IRequest, bool> predicate, WaitForOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(string url, WaitForOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, bool> predicate, WaitForOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, Task`1<bool>> predicate, WaitForOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(string url, WaitForOptions options);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    [ObsoleteAttribute("Use WaitForSelectorAsync instead")]
public abstract virtual Task`1<IElementHandle> WaitForXPathAsync(string xpath, WaitForSelectorOptions options);
    [ObsoleteAttribute("Use QuerySelectorAsync instead")]
public abstract virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public abstract virtual Task`1<DeviceRequestPrompt> WaitForDevicePromptAsync(WaitForOptions options);
    public abstract virtual void AddRequestInterceptor(Func`2<IRequest, Task> interceptionTask);
    public abstract virtual void RemoveRequestInterceptor(Func`2<IRequest, Task> interceptionTask);
    public abstract virtual Task`1<ICDPSession> CreateCDPSessionAsync();
    public abstract virtual Task RemoveScriptToEvaluateOnNewDocumentAsync(string identifier);
    public abstract virtual Task SetBypassServiceWorkerAsync(bool bypass);
}
public interface PuppeteerSharp.IRequest {
    public IResponse Response { get; }
    public string FailureText { get; }
    public string Id { get; }
    public string InterceptionId { get; }
    public ResourceType ResourceType { get; }
    public IFrame Frame { get; }
    public bool IsNavigationRequest { get; }
    public HttpMethod Method { get; }
    public object PostData { get; }
    public Dictionary`2<string, string> Headers { get; }
    public string Url { get; }
    public IRequest[] RedirectChain { get; }
    public Initiator Initiator { get; }
    public bool HasPostData { get; }
    public abstract virtual IResponse get_Response();
    public abstract virtual string get_FailureText();
    public abstract virtual string get_Id();
    public abstract virtual string get_InterceptionId();
    public abstract virtual ResourceType get_ResourceType();
    public abstract virtual IFrame get_Frame();
    public abstract virtual bool get_IsNavigationRequest();
    public abstract virtual HttpMethod get_Method();
    public abstract virtual object get_PostData();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual string get_Url();
    public abstract virtual IRequest[] get_RedirectChain();
    public abstract virtual Initiator get_Initiator();
    public abstract virtual bool get_HasPostData();
    public abstract virtual Task ContinueAsync(Payload payloadOverrides, Nullable`1<int> priority);
    public abstract virtual Task RespondAsync(ResponseData response, Nullable`1<int> priority);
    public abstract virtual Task AbortAsync(RequestAbortErrorCode errorCode, Nullable`1<int> priority);
    public abstract virtual Task`1<string> FetchPostDataAsync();
}
public interface PuppeteerSharp.IResponse {
    public string Url { get; }
    public Dictionary`2<string, string> Headers { get; }
    public HttpStatusCode Status { get; }
    public bool Ok { get; }
    public IRequest Request { get; }
    public bool FromCache { get; }
    public SecurityDetails SecurityDetails { get; }
    public bool FromServiceWorker { get; }
    public string StatusText { get; }
    public RemoteAddress RemoteAddress { get; }
    public IFrame Frame { get; }
    public abstract virtual string get_Url();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual HttpStatusCode get_Status();
    public abstract virtual bool get_Ok();
    public abstract virtual IRequest get_Request();
    public abstract virtual bool get_FromCache();
    public abstract virtual SecurityDetails get_SecurityDetails();
    public abstract virtual bool get_FromServiceWorker();
    public abstract virtual string get_StatusText();
    public abstract virtual RemoteAddress get_RemoteAddress();
    public abstract virtual IFrame get_Frame();
    public abstract virtual ValueTask`1<Byte[]> BufferAsync();
    public abstract virtual Task`1<string> TextAsync();
    public abstract virtual Task`1<JObject> JsonAsync();
    public abstract virtual Task`1<T> JsonAsync();
}
internal class PuppeteerSharp.IsolatedWorld : Realm {
    private ILogger _logger;
    private List`1<string> _contextBindings;
    private TaskQueue _bindingQueue;
    private bool _detached;
    private TaskCompletionSource`1<ExecutionContext> _contextResolveTaskWrapper;
    private ExecutionContext _context;
    [CompilerGeneratedAttribute]
private bool <IsMainWorld>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Binding> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private WebWorker <Worker>k__BackingField;
    internal bool IsMainWorld { get; }
    internal Frame Frame { get; }
    internal CDPSession Client { get; }
    internal bool HasContext { get; }
    internal ConcurrentDictionary`2<string, Binding> Bindings { get; }
    internal IEnvironment Environment { get; }
    private WebWorker Worker { get; }
    public IsolatedWorld(Frame frame, WebWorker worker, TimeoutSettings timeoutSettings, bool isMainWorld);
    [CompilerGeneratedAttribute]
internal bool get_IsMainWorld();
    [CompilerGeneratedAttribute]
internal Frame get_Frame();
    internal CDPSession get_Client();
    internal bool get_HasContext();
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, Binding> get_Bindings();
    internal virtual IEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private WebWorker get_Worker();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<DisposeAsync>d__26")]
public sealed virtual ValueTask DisposeAsync();
    internal void FrameUpdated();
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<AddBindingToContextAsync>d__28")]
internal Task AddBindingToContextAsync(ExecutionContext context, string name);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<AdoptBackendNodeAsync>d__29")]
internal virtual Task`1<IElementHandle> AdoptBackendNodeAsync(object backendNodeId);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<TransferHandleAsync>d__30")]
internal virtual Task`1<IJSHandle> TransferHandleAsync(IJSHandle handle);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<AdoptHandleAsync>d__31")]
internal virtual Task`1<IJSHandle> AdoptHandleAsync(IJSHandle handle);
    internal void Detach();
    internal Task`1<ExecutionContext> GetExecutionContextAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateExpressionHandleAsync>d__34")]
internal virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateFunctionHandleAsync>d__35")]
internal virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateExpressionAsync>d__36`1")]
internal virtual Task`1<T> EvaluateExpressionAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateExpressionAsync>d__37")]
internal virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateFunctionAsync>d__38`1")]
internal virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<EvaluateFunctionAsync>d__39")]
internal virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    internal void ClearContext();
    internal void SetNewContext(CDPSession client, ContextPayload contextPayload, IsolatedWorld world);
    internal void SetContext(ExecutionContext context);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<Client_MessageReceived>d__43")]
private void Client_MessageReceived(object sender, MessageEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.IsolatedWorld/<OnBindingCalledAsync>d__44")]
private Task OnBindingCalledAsync(BindingCalledResponse e);
}
public interface PuppeteerSharp.ITarget {
    public IBrowser Browser { get; }
    public IBrowserContext BrowserContext { get; }
    public ITarget Opener { get; }
    public string TargetId { get; }
    public TargetType Type { get; }
    public string Url { get; }
    public abstract virtual IBrowser get_Browser();
    public abstract virtual IBrowserContext get_BrowserContext();
    public abstract virtual ITarget get_Opener();
    public abstract virtual string get_TargetId();
    public abstract virtual TargetType get_Type();
    public abstract virtual string get_Url();
    public abstract virtual Task`1<ICDPSession> CreateCDPSessionAsync();
    public abstract virtual Task`1<IPage> PageAsync();
    public abstract virtual Task`1<WebWorker> WorkerAsync();
    public abstract virtual Task`1<IPage> AsPageAsync();
}
internal interface PuppeteerSharp.ITargetManager {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetAvailable(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetGone(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetChanged(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetDiscovered(EventHandler`1<TargetChangedArgs> value);
    public abstract virtual AsyncDictionaryHelper`2<string, CdpTarget> GetAvailableTargets();
    public abstract virtual Task InitializeAsync();
}
public interface PuppeteerSharp.ITracing {
    public abstract virtual Task StartAsync(TracingOptions options);
    public abstract virtual Task`1<string> StopAsync();
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.JSHandleMethodConverter")]
public abstract class PuppeteerSharp.JSHandle : object {
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteObject <RemoteObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <DisposeAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolatedWorld <Realm>k__BackingField;
    public bool Disposed { get; protected set; }
    public RemoteObject RemoteObject { get; }
    internal Func`1<Task> DisposeAction { get; internal set; }
    internal IsolatedWorld Realm { get; }
    internal Frame Frame { get; }
    internal string Id { get; }
    internal JSHandle(IsolatedWorld world, RemoteObject remoteObject);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Disposed();
    [CompilerGeneratedAttribute]
protected void set_Disposed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual RemoteObject get_RemoteObject();
    [CompilerGeneratedAttribute]
internal Func`1<Task> get_DisposeAction();
    [CompilerGeneratedAttribute]
internal void set_DisposeAction(Func`1<Task> value);
    [CompilerGeneratedAttribute]
internal IsolatedWorld get_Realm();
    internal Frame get_Frame();
    internal string get_Id();
    public virtual Task`1<IJSHandle> GetPropertyAsync(string propertyName);
    [AsyncStateMachineAttribute("PuppeteerSharp.JSHandle/<GetPropertiesAsync>d__20")]
public virtual Task`1<Dictionary`2<string, IJSHandle>> GetPropertiesAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.JSHandle/<JsonValueAsync>d__21")]
public sealed virtual Task`1<object> JsonValueAsync();
    public abstract virtual Task`1<T> JsonValueAsync();
    public abstract virtual ValueTask DisposeAsync();
    public sealed virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string pageFunction, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.JSHandle/<EvaluateFunctionAsync>d__25")]
public sealed virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
}
public class PuppeteerSharp.Launcher : object {
    private ILoggerFactory _loggerFactory;
    private bool _processLaunched;
    private SupportedBrowser _browser;
    [CompilerGeneratedAttribute]
private LauncherBase <Process>k__BackingField;
    public LauncherBase Process { get; private set; }
    public Launcher(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public LauncherBase get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(LauncherBase value);
    [AsyncStateMachineAttribute("PuppeteerSharp.Launcher/<LaunchAsync>d__8")]
public Task`1<IBrowser> LaunchAsync(LaunchOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Launcher/<ConnectAsync>d__9")]
public Task`1<IBrowser> ConnectAsync(ConnectOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Launcher/<GetWSEndpointAsync>d__10")]
private Task`1<string> GetWSEndpointAsync(string browserURL);
    private void EnsureSingleLaunchOrConnect();
    private string ResolveExecutablePath(HeadlessMode headlessMode, string buildId);
    private string GetExecutablePath(LaunchOptions options, string buildId);
    private string ComputeSystemExecutablePath(SupportedBrowser browser, ChromeReleaseChannel channel);
}
public abstract class PuppeteerSharp.LauncherBase : object {
    private StateManager _stateManager;
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <ExitCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<string> <StartCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private LaunchOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private TempDirectory <TempUserDataDir>k__BackingField;
    public Process Process { get; }
    public string EndPoint { get; }
    public bool IsExiting { get; }
    public bool HasExited { get; }
    internal TaskCompletionSource`1<bool> ExitCompletionSource { get; }
    internal TaskCompletionSource`1<string> StartCompletionSource { get; }
    internal LaunchOptions Options { get; }
    internal TempDirectory TempUserDataDir { get; internal set; }
    internal State CurrentState { get; }
    public LauncherBase(string executable, LaunchOptions options);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Process get_Process();
    public string get_EndPoint();
    public bool get_IsExiting();
    public bool get_HasExited();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<bool> get_ExitCompletionSource();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<string> get_StartCompletionSource();
    [CompilerGeneratedAttribute]
internal LaunchOptions get_Options();
    [CompilerGeneratedAttribute]
internal TempDirectory get_TempUserDataDir();
    [CompilerGeneratedAttribute]
internal void set_TempUserDataDir(TempDirectory value);
    internal State get_CurrentState();
    public abstract virtual Task`1<string> GetDefaultBuildIdAsync();
    public sealed virtual void Dispose();
    public Task StartAsync();
    public Task EnsureExitAsync(Nullable`1<TimeSpan> timeout);
    public Task KillAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.LauncherBase/<WaitForExitAsync>d__32")]
public Task`1<bool> WaitForExitAsync(Nullable`1<TimeSpan> timeout);
    protected static void SetEnvVariables(IDictionary`2<string, string> environment, IDictionary`2<string, string> customEnv, IDictionary realEnv);
    protected virtual void Dispose(bool disposing);
}
public class PuppeteerSharp.LaunchOptions : object {
    private String[] _ignoredDefaultArgs;
    private bool _devtools;
    [CompilerGeneratedAttribute]
private Nullable`1<ChromeReleaseChannel> <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private HeadlessMode <HeadlessMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpIO>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserDataDir>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDefaultArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSocketFactory <WebSocketFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionTransport <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportFactory <TransportFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewPortOptions <DefaultViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnqueueTransportMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private SupportedBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnqueueAsyncMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Target, bool> <TargetFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtraPrefsFirefox>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Target, bool> <IsPageTarget>k__BackingField;
    public Nullable`1<ChromeReleaseChannel> Channel { get; public set; }
    public bool IgnoreHTTPSErrors { get; public set; }
    public bool Headless { get; public set; }
    public HeadlessMode HeadlessMode { get; public set; }
    public string ExecutablePath { get; public set; }
    public int SlowMo { get; public set; }
    public String[] Args { get; public set; }
    public int Timeout { get; public set; }
    public bool DumpIO { get; public set; }
    public string UserDataDir { get; public set; }
    public IDictionary`2<string, string> Env { get; }
    public bool Devtools { get; public set; }
    [ObsoleteAttribute("Chromium doesn't support pings yet (see: https://bugs.chromium.org/p/chromium/issues/detail?id=865002)")]
public int KeepAliveInterval { get; public set; }
    public bool LogProcess { get; public set; }
    public bool IgnoreDefaultArgs { get; public set; }
    public String[] IgnoredDefaultArgs { get; public set; }
    public WebSocketFactory WebSocketFactory { get; public set; }
    [ObsoleteAttribute("Use TransportFactory instead")]
public IConnectionTransport Transport { get; public set; }
    public TransportFactory TransportFactory { get; public set; }
    public ViewPortOptions DefaultViewport { get; public set; }
    public bool EnqueueTransportMessages { get; public set; }
    public SupportedBrowser Browser { get; public set; }
    public bool EnqueueAsyncMessages { get; public set; }
    public Func`2<Target, bool> TargetFilter { get; public set; }
    public int ProtocolTimeout { get; public set; }
    public Dictionary`2<string, object> ExtraPrefsFirefox { get; public set; }
    internal Func`2<Target, bool> IsPageTarget { get; internal set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ChromeReleaseChannel> get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(Nullable`1<ChromeReleaseChannel> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(bool value);
    public bool get_Headless();
    public void set_Headless(bool value);
    [CompilerGeneratedAttribute]
public HeadlessMode get_HeadlessMode();
    [CompilerGeneratedAttribute]
public void set_HeadlessMode(HeadlessMode value);
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SlowMo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SlowMo(int value);
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public bool get_DumpIO();
    [CompilerGeneratedAttribute]
public void set_DumpIO(bool value);
    [CompilerGeneratedAttribute]
public string get_UserDataDir();
    [CompilerGeneratedAttribute]
public void set_UserDataDir(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Env();
    public bool get_Devtools();
    public void set_Devtools(bool value);
    [CompilerGeneratedAttribute]
public int get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(int value);
    [CompilerGeneratedAttribute]
public bool get_LogProcess();
    [CompilerGeneratedAttribute]
public void set_LogProcess(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDefaultArgs();
    [CompilerGeneratedAttribute]
public void set_IgnoreDefaultArgs(bool value);
    public String[] get_IgnoredDefaultArgs();
    public void set_IgnoredDefaultArgs(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual WebSocketFactory get_WebSocketFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebSocketFactory(WebSocketFactory value);
    [CompilerGeneratedAttribute]
public IConnectionTransport get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(IConnectionTransport value);
    [CompilerGeneratedAttribute]
public sealed virtual TransportFactory get_TransportFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransportFactory(TransportFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual ViewPortOptions get_DefaultViewport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultViewport(ViewPortOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnqueueTransportMessages();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnqueueTransportMessages(bool value);
    [CompilerGeneratedAttribute]
public SupportedBrowser get_Browser();
    [CompilerGeneratedAttribute]
public void set_Browser(SupportedBrowser value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnqueueAsyncMessages();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnqueueAsyncMessages(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Target, bool> get_TargetFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetFilter(Func`2<Target, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProtocolTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProtocolTimeout(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ExtraPrefsFirefox();
    [CompilerGeneratedAttribute]
public void set_ExtraPrefsFirefox(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal Func`2<Target, bool> get_IsPageTarget();
    [CompilerGeneratedAttribute]
internal void set_IsPageTarget(Func`2<Target, bool> value);
}
public class PuppeteerSharp.LazyArg : MulticastDelegate {
    public LazyArg(object object, IntPtr method);
    public virtual Task`1<object> Invoke(ExecutionContext context);
    public virtual IAsyncResult BeginInvoke(ExecutionContext context, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class PuppeteerSharp.Media.Clip : BoundingBox {
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public int Scale { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
}
public class PuppeteerSharp.Media.MarginOptions : object {
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Right>k__BackingField;
    public string Top { get; public set; }
    public string Left { get; public set; }
    public string Bottom { get; public set; }
    public string Right { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(string value);
    public static bool op_Equality(MarginOptions left, MarginOptions right);
    public static bool op_Inequality(MarginOptions left, MarginOptions right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MarginOptions options);
    public virtual int GetHashCode();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.Media.MediaType : Enum {
    public int value__;
    public static MediaType Print;
    public static MediaType Screen;
    [EnumMemberAttribute]
public static MediaType None;
}
public class PuppeteerSharp.Media.PaperFormat : object {
    [CompilerGeneratedAttribute]
private decimal <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Height>k__BackingField;
    public static PaperFormat Letter { get; }
    public static PaperFormat Legal { get; }
    public static PaperFormat Tabloid { get; }
    public static PaperFormat Ledger { get; }
    public static PaperFormat A0 { get; }
    public static PaperFormat A1 { get; }
    public static PaperFormat A2 { get; }
    public static PaperFormat A3 { get; }
    public static PaperFormat A4 { get; }
    public static PaperFormat A5 { get; }
    public static PaperFormat A6 { get; }
    public decimal Width { get; public set; }
    public decimal Height { get; public set; }
    public PaperFormat(decimal width, decimal height);
    public static PaperFormat get_Letter();
    public static PaperFormat get_Legal();
    public static PaperFormat get_Tabloid();
    public static PaperFormat get_Ledger();
    public static PaperFormat get_A0();
    public static PaperFormat get_A1();
    public static PaperFormat get_A2();
    public static PaperFormat get_A3();
    public static PaperFormat get_A4();
    public static PaperFormat get_A5();
    public static PaperFormat get_A6();
    [CompilerGeneratedAttribute]
public decimal get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(decimal value);
    public static bool op_Equality(PaperFormat left, PaperFormat right);
    public static bool op_Inequality(PaperFormat left, PaperFormat right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PaperFormat format);
    public virtual int GetHashCode();
}
internal class PuppeteerSharp.Media.ScreenOrientation : object {
    [CompilerGeneratedAttribute]
private int <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public int Angle { get; internal set; }
    public string Type { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_Angle();
    [CompilerGeneratedAttribute]
internal void set_Angle(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
}
internal class PuppeteerSharp.Media.ScreenOrientationType : object {
    internal static string LandscapePrimary { get; }
    internal static string PortraitPrimary { get; }
    internal static string get_LandscapePrimary();
    internal static string get_PortraitPrimary();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.MediaFeature : Enum {
    public int value__;
    [EnumMemberAttribute]
public static MediaFeature PrefersColorScheme;
    [EnumMemberAttribute]
public static MediaFeature PrefersReducedMotion;
}
public class PuppeteerSharp.MediaFeatureValue : object {
    [CompilerGeneratedAttribute]
private MediaFeature <MediaFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public MediaFeature MediaFeature { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public MediaFeature get_MediaFeature();
    [CompilerGeneratedAttribute]
public void set_MediaFeature(MediaFeature value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class PuppeteerSharp.MessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <MessageID>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <MessageData>k__BackingField;
    public string MessageID { get; internal set; }
    public JToken MessageData { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_MessageID();
    [CompilerGeneratedAttribute]
internal void set_MessageID(string value);
    [CompilerGeneratedAttribute]
public JToken get_MessageData();
    [CompilerGeneratedAttribute]
internal void set_MessageData(JToken value);
}
public class PuppeteerSharp.MessageException : PuppeteerException {
    public MessageException(string message);
    public MessageException(string message, Exception innerException);
    internal MessageException(MessageTask callback, ConnectionError error);
    protected MessageException(SerializationInfo info, StreamingContext context);
    internal static string GetCallbackMessage(MessageTask callback, ConnectionError connectionError);
}
internal class PuppeteerSharp.MessageTask : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<JObject> <TaskWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    internal string Message { get; internal set; }
    internal TaskCompletionSource`1<JObject> TaskWrapper { get; internal set; }
    internal string Method { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<JObject> get_TaskWrapper();
    [CompilerGeneratedAttribute]
internal void set_TaskWrapper(TaskCompletionSource`1<JObject> value);
    [CompilerGeneratedAttribute]
internal string get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(string value);
}
internal class PuppeteerSharp.Metric : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Value>k__BackingField;
    public string Name { get; public set; }
    public decimal Value { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(decimal value);
}
public class PuppeteerSharp.MetricEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, decimal> <Metrics>k__BackingField;
    public string Title { get; }
    public Dictionary`2<string, decimal> Metrics { get; }
    public MetricEventArgs(string title, Dictionary`2<string, decimal> metrics);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, decimal> get_Metrics();
}
public class PuppeteerSharp.Mobile.DeviceDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewPortOptions <ViewPort>k__BackingField;
    public string Name { get; internal set; }
    public string UserAgent { get; internal set; }
    public ViewPortOptions ViewPort { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
internal void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ViewPortOptions get_ViewPort();
    [CompilerGeneratedAttribute]
internal void set_ViewPort(ViewPortOptions value);
}
public enum PuppeteerSharp.Mobile.DeviceDescriptorName : Enum {
    public int value__;
    public static DeviceDescriptorName BlackberryPlayBook;
    public static DeviceDescriptorName BlackberryPlayBookLandscape;
    public static DeviceDescriptorName BlackBerryZ30;
    public static DeviceDescriptorName BlackBerryZ30Landscape;
    public static DeviceDescriptorName GalaxyNote3;
    public static DeviceDescriptorName GalaxyNote3Landscape;
    public static DeviceDescriptorName GalaxyNoteII;
    public static DeviceDescriptorName GalaxyNoteIILandscape;
    public static DeviceDescriptorName GalaxySIII;
    public static DeviceDescriptorName GalaxySIIILandscape;
    public static DeviceDescriptorName GalaxyS5;
    public static DeviceDescriptorName GalaxyS5Landscape;
    public static DeviceDescriptorName GalaxyS8;
    public static DeviceDescriptorName GalaxyS8Landscape;
    public static DeviceDescriptorName GalaxyS9Plus;
    public static DeviceDescriptorName GalaxyS9PlusLandscape;
    public static DeviceDescriptorName GalaxyTabS4;
    public static DeviceDescriptorName GalaxyTabS4Landscape;
    public static DeviceDescriptorName IPad;
    public static DeviceDescriptorName IPadLandscape;
    public static DeviceDescriptorName IPadMini;
    public static DeviceDescriptorName IPadMiniLandscape;
    public static DeviceDescriptorName IPadPro;
    public static DeviceDescriptorName IPadProLandscape;
    public static DeviceDescriptorName IPhone4;
    public static DeviceDescriptorName IPhone4Landscape;
    public static DeviceDescriptorName IPhone5;
    public static DeviceDescriptorName IPhone5Landscape;
    public static DeviceDescriptorName IPhone6;
    public static DeviceDescriptorName IPhone6Landscape;
    public static DeviceDescriptorName IPhone6Plus;
    public static DeviceDescriptorName IPhone6PlusLandscape;
    public static DeviceDescriptorName IPhone7;
    public static DeviceDescriptorName IPhone7Landscape;
    public static DeviceDescriptorName IPhone7Plus;
    public static DeviceDescriptorName IPhone7PlusLandscape;
    public static DeviceDescriptorName IPhone8;
    public static DeviceDescriptorName IPhone8Landscape;
    public static DeviceDescriptorName IPhone8Plus;
    public static DeviceDescriptorName IPhone8PlusLandscape;
    public static DeviceDescriptorName IPhoneSE;
    public static DeviceDescriptorName IPhoneSELandscape;
    public static DeviceDescriptorName IPhoneX;
    public static DeviceDescriptorName IPhoneXLandscape;
    public static DeviceDescriptorName IPhoneXR;
    public static DeviceDescriptorName IPhoneXRLandscape;
    public static DeviceDescriptorName IPhone11;
    public static DeviceDescriptorName IPhone11Landscape;
    public static DeviceDescriptorName IPhone11Pro;
    public static DeviceDescriptorName IPhone11ProLandscape;
    public static DeviceDescriptorName IPhone11ProMax;
    public static DeviceDescriptorName IPhone11ProMaxLandscape;
    public static DeviceDescriptorName JioPhone2;
    public static DeviceDescriptorName JioPhone2Landscape;
    public static DeviceDescriptorName KindleFireHDX;
    public static DeviceDescriptorName KindleFireHDXLandscape;
    public static DeviceDescriptorName LGOptimusL70;
    public static DeviceDescriptorName LGOptimusL70Landscape;
    public static DeviceDescriptorName MicrosoftLumia550;
    public static DeviceDescriptorName MicrosoftLumia950;
    public static DeviceDescriptorName MicrosoftLumia950Landscape;
    public static DeviceDescriptorName Nexus10;
    public static DeviceDescriptorName Nexus10Landscape;
    public static DeviceDescriptorName Nexus4;
    public static DeviceDescriptorName Nexus4Landscape;
    public static DeviceDescriptorName Nexus5;
    public static DeviceDescriptorName Nexus5Landscape;
    public static DeviceDescriptorName Nexus5X;
    public static DeviceDescriptorName Nexus5XLandscape;
    public static DeviceDescriptorName Nexus6;
    public static DeviceDescriptorName Nexus6Landscape;
    public static DeviceDescriptorName Nexus6P;
    public static DeviceDescriptorName Nexus6PLandscape;
    public static DeviceDescriptorName Nexus7;
    public static DeviceDescriptorName Nexus7Landscape;
    public static DeviceDescriptorName NokiaLumia520;
    public static DeviceDescriptorName NokiaLumia520Landscape;
    public static DeviceDescriptorName NokiaN9;
    public static DeviceDescriptorName NokiaN9Landscape;
    public static DeviceDescriptorName Pixel2;
    public static DeviceDescriptorName Pixel2Landscape;
    public static DeviceDescriptorName Pixel2XL;
    public static DeviceDescriptorName Pixel2XLLandscape;
    public static DeviceDescriptorName Pixel3;
    public static DeviceDescriptorName Pixel3Landscape;
    public static DeviceDescriptorName Pixel4;
    public static DeviceDescriptorName Pixel4Landscape;
}
public static class PuppeteerSharp.Mobile.DeviceDescriptors : object {
    private static Dictionary`2<DeviceDescriptorName, DeviceDescriptor> Devices;
    private static Lazy`1<IReadOnlyDictionary`2<DeviceDescriptorName, DeviceDescriptor>> _readOnlyDevices;
    private static DeviceDescriptors();
    [ObsoleteAttribute("Use Puppeteer.Devices instead")]
public static DeviceDescriptor Get(DeviceDescriptorName name);
    internal static IReadOnlyDictionary`2<DeviceDescriptorName, DeviceDescriptor> ToReadOnly();
}
public class PuppeteerSharp.NavigationException : PuppeteerException {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; }
    public NavigationException(string message);
    public NavigationException(string message, string url);
    public NavigationException(string message, Exception innerException);
    protected NavigationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
}
public class PuppeteerSharp.NavigationOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private WaitUntilNavigation[] <WaitUntil>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Referer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferrerPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSameDocumentNavigation>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Nullable`1<int> Timeout { get; public set; }
    public WaitUntilNavigation[] WaitUntil { get; public set; }
    public string Referer { get; public set; }
    public string ReferrerPolicy { get; public set; }
    internal bool IgnoreSameDocumentNavigation { get; internal set; }
    [CompilerGeneratedAttribute]
protected NavigationOptions(NavigationOptions original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public WaitUntilNavigation[] get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(WaitUntilNavigation[] value);
    [CompilerGeneratedAttribute]
public string get_Referer();
    [CompilerGeneratedAttribute]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public string get_ReferrerPolicy();
    [CompilerGeneratedAttribute]
public void set_ReferrerPolicy(string value);
    [CompilerGeneratedAttribute]
internal bool get_IgnoreSameDocumentNavigation();
    [CompilerGeneratedAttribute]
internal void set_IgnoreSameDocumentNavigation(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NavigationOptions left, NavigationOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NavigationOptions left, NavigationOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NavigationOptions other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NavigationOptions <Clone>$();
}
public class PuppeteerSharp.NetworkConditions : object {
    public static string Slow3G;
    public static string Fast3G;
    [CompilerGeneratedAttribute]
private double <Download>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Upload>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latency>k__BackingField;
    public double Download { get; public set; }
    public double Upload { get; public set; }
    public double Latency { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Download();
    [CompilerGeneratedAttribute]
public void set_Download(double value);
    [CompilerGeneratedAttribute]
public double get_Upload();
    [CompilerGeneratedAttribute]
public void set_Upload(double value);
    [CompilerGeneratedAttribute]
public double get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(double value);
}
public class PuppeteerSharp.NewDocumentScriptEvaluation : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; public set; }
    public NewDocumentScriptEvaluation(string documentIdentifierIdentifier);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
}
public class PuppeteerSharp.Offset : ValueType {
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public Offset(decimal x, decimal y);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.OverridePermission : Enum {
    public int value__;
    [EnumMemberAttribute]
public static OverridePermission Geolocation;
    [EnumMemberAttribute]
public static OverridePermission Midi;
    [EnumMemberAttribute]
public static OverridePermission Notifications;
    [EnumMemberAttribute]
public static OverridePermission Camera;
    [EnumMemberAttribute]
public static OverridePermission Microphone;
    [EnumMemberAttribute]
public static OverridePermission BackgroundSync;
    [EnumMemberAttribute]
public static OverridePermission Sensors;
    [EnumMemberAttribute]
public static OverridePermission AccessibilityEvents;
    [EnumMemberAttribute]
public static OverridePermission ClipboardReadWrite;
    [EnumMemberAttribute]
public static OverridePermission PaymentHandler;
    [EnumMemberAttribute]
public static OverridePermission MidiSysex;
    [EnumMemberAttribute]
public static OverridePermission IdleDetection;
    [EnumMemberAttribute]
public static OverridePermission PersistentStorage;
}
[DebuggerDisplayAttribute("Page {Url}")]
public abstract class PuppeteerSharp.Page : object {
    public static IEnumerable`1<string> SupportedMetrics;
    private TaskQueue _screenshotTaskQueue;
    private ConcurrentSet`1<Func`2<IRequest, Task>> _requestInterceptionTask;
    [CompilerGeneratedAttribute]
private EventHandler Load;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    [CompilerGeneratedAttribute]
private EventHandler`1<MetricEventArgs> Metrics;
    [CompilerGeneratedAttribute]
private EventHandler`1<DialogEventArgs> Dialog;
    [CompilerGeneratedAttribute]
private EventHandler DOMContentLoaded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConsoleEventArgs> Console;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameAttached;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameEventArgs> FrameDetached;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameNavigatedEventArgs> FrameNavigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResponseCreatedEventArgs> Response;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> Request;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestFinished;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestFailed;
    [CompilerGeneratedAttribute]
private EventHandler`1<RequestEventArgs> RequestServedFromCache;
    [CompilerGeneratedAttribute]
private EventHandler`1<PageErrorEventArgs> PageError;
    [CompilerGeneratedAttribute]
private EventHandler`1<WorkerEventArgs> WorkerCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<WorkerEventArgs> WorkerDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler Close;
    [CompilerGeneratedAttribute]
private EventHandler`1<PopupEventArgs> Popup;
    [CompilerGeneratedAttribute]
private bool <IsServiceWorkerBypassed>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewPortOptions <Viewport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDragInterceptionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Accessibility <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Keyboard <Keyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private Touchscreen <Touchscreen>k__BackingField;
    [CompilerGeneratedAttribute]
private Coverage <Coverage>k__BackingField;
    [CompilerGeneratedAttribute]
private Tracing <Tracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Mouse <Mouse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDragging>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutSettings <TimeoutSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScreenshotBurstModeOn>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenshotOptions <ScreenshotBurstModeOptions>k__BackingField;
    private ICDPSession PuppeteerSharp.IPage.Client { get; }
    public CDPSession Client { get; }
    public int DefaultNavigationTimeout { get; public set; }
    public int DefaultTimeout { get; public set; }
    public IFrame MainFrame { get; }
    public IFrame[] Frames { get; }
    public WebWorker[] Workers { get; }
    public bool IsServiceWorkerBypassed { get; protected set; }
    public string Url { get; }
    private ITarget PuppeteerSharp.IPage.Target { get; }
    public Target Target { get; }
    private IKeyboard PuppeteerSharp.IPage.Keyboard { get; }
    private ITouchscreen PuppeteerSharp.IPage.Touchscreen { get; }
    private ICoverage PuppeteerSharp.IPage.Coverage { get; }
    private ITracing PuppeteerSharp.IPage.Tracing { get; }
    private IMouse PuppeteerSharp.IPage.Mouse { get; }
    public ViewPortOptions Viewport { get; protected set; }
    private IBrowser PuppeteerSharp.IPage.Browser { get; }
    public IBrowserContext BrowserContext { get; }
    public bool IsClosed { get; protected set; }
    private IAccessibility PuppeteerSharp.IPage.Accessibility { get; }
    public bool IsJavaScriptEnabled { get; }
    public bool IsDragInterceptionEnabled { get; protected set; }
    internal Accessibility Accessibility { get; internal set; }
    internal Keyboard Keyboard { get; internal set; }
    internal Touchscreen Touchscreen { get; internal set; }
    internal Coverage Coverage { get; internal set; }
    internal Tracing Tracing { get; internal set; }
    internal Mouse Mouse { get; internal set; }
    internal bool IsDragging { get; internal set; }
    internal bool HasPopupEventListeners { get; }
    internal bool HasErrorEventListeners { get; }
    protected TimeoutSettings TimeoutSettings { get; protected set; }
    protected bool HasConsoleEventListeners { get; }
    protected Browser Browser { get; }
    protected bool ScreenshotBurstModeOn { get; protected set; }
    protected ScreenshotOptions ScreenshotBurstModeOptions { get; protected set; }
    internal Page(TaskQueue screenshotTaskQueue);
    private static Page();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Load(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Load(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Metrics(EventHandler`1<MetricEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Metrics(EventHandler`1<MetricEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Dialog(EventHandler`1<DialogEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Dialog(EventHandler`1<DialogEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DOMContentLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DOMContentLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Console(EventHandler`1<ConsoleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Console(EventHandler`1<ConsoleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameAttached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameDetached(EventHandler`1<FrameEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameNavigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Response(EventHandler`1<ResponseCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Request(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestFinished(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestFailed(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestServedFromCache(EventHandler`1<RequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PageError(EventHandler`1<PageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PageError(EventHandler`1<PageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WorkerCreated(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WorkerCreated(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WorkerDestroyed(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WorkerDestroyed(EventHandler`1<WorkerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Close(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Close(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Popup(EventHandler`1<PopupEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Popup(EventHandler`1<PopupEventArgs> value);
    private sealed virtual override ICDPSession PuppeteerSharp.IPage.get_Client();
    public abstract virtual CDPSession get_Client();
    public sealed virtual int get_DefaultNavigationTimeout();
    public sealed virtual void set_DefaultNavigationTimeout(int value);
    public sealed virtual int get_DefaultTimeout();
    public sealed virtual void set_DefaultTimeout(int value);
    public abstract virtual IFrame get_MainFrame();
    public abstract virtual IFrame[] get_Frames();
    public abstract virtual WebWorker[] get_Workers();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsServiceWorkerBypassed();
    [CompilerGeneratedAttribute]
protected void set_IsServiceWorkerBypassed(bool value);
    public sealed virtual string get_Url();
    private sealed virtual override ITarget PuppeteerSharp.IPage.get_Target();
    public abstract virtual Target get_Target();
    private sealed virtual override IKeyboard PuppeteerSharp.IPage.get_Keyboard();
    private sealed virtual override ITouchscreen PuppeteerSharp.IPage.get_Touchscreen();
    private sealed virtual override ICoverage PuppeteerSharp.IPage.get_Coverage();
    private sealed virtual override ITracing PuppeteerSharp.IPage.get_Tracing();
    private sealed virtual override IMouse PuppeteerSharp.IPage.get_Mouse();
    [CompilerGeneratedAttribute]
public sealed virtual ViewPortOptions get_Viewport();
    [CompilerGeneratedAttribute]
protected void set_Viewport(ViewPortOptions value);
    private sealed virtual override IBrowser PuppeteerSharp.IPage.get_Browser();
    public abstract virtual IBrowserContext get_BrowserContext();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
protected void set_IsClosed(bool value);
    private sealed virtual override IAccessibility PuppeteerSharp.IPage.get_Accessibility();
    public abstract virtual bool get_IsJavaScriptEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDragInterceptionEnabled();
    [CompilerGeneratedAttribute]
protected void set_IsDragInterceptionEnabled(bool value);
    [CompilerGeneratedAttribute]
internal Accessibility get_Accessibility();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Accessibility(Accessibility value);
    [CompilerGeneratedAttribute]
internal Keyboard get_Keyboard();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Keyboard(Keyboard value);
    [CompilerGeneratedAttribute]
internal Touchscreen get_Touchscreen();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Touchscreen(Touchscreen value);
    [CompilerGeneratedAttribute]
internal Coverage get_Coverage();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Coverage(Coverage value);
    [CompilerGeneratedAttribute]
internal Tracing get_Tracing();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tracing(Tracing value);
    [CompilerGeneratedAttribute]
internal Mouse get_Mouse();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mouse(Mouse value);
    [CompilerGeneratedAttribute]
internal bool get_IsDragging();
    [CompilerGeneratedAttribute]
internal void set_IsDragging(bool value);
    internal bool get_HasPopupEventListeners();
    internal bool get_HasErrorEventListeners();
    [CompilerGeneratedAttribute]
protected TimeoutSettings get_TimeoutSettings();
    [CompilerGeneratedAttribute]
protected void set_TimeoutSettings(TimeoutSettings value);
    protected bool get_HasConsoleEventListeners();
    protected abstract virtual Browser get_Browser();
    [CompilerGeneratedAttribute]
protected bool get_ScreenshotBurstModeOn();
    [CompilerGeneratedAttribute]
protected void set_ScreenshotBurstModeOn(bool value);
    [CompilerGeneratedAttribute]
protected ScreenshotOptions get_ScreenshotBurstModeOptions();
    [CompilerGeneratedAttribute]
protected void set_ScreenshotBurstModeOptions(ScreenshotOptions value);
    public abstract virtual Task SetGeolocationAsync(GeolocationOption options);
    public abstract virtual Task SetDragInterceptionAsync(bool enabled);
    public abstract virtual Task`1<Dictionary`2<string, decimal>> MetricsAsync();
    public sealed virtual Task TapAsync(string selector);
    public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public sealed virtual Task`1<IElementHandle[]> QuerySelectorAllAsync(string selector);
    public sealed virtual Task`1<IJSHandle> QuerySelectorAllHandleAsync(string selector);
    public sealed virtual Task`1<IElementHandle[]> XPathAsync(string expression);
    public sealed virtual Task`1<DeviceRequestPrompt> WaitForDevicePromptAsync(WaitForOptions options);
    public sealed virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public sealed virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string pageFunction, Object[] args);
    public abstract virtual Task`1<NewDocumentScriptEvaluation> EvaluateFunctionOnNewDocumentAsync(string pageFunction, Object[] args);
    public abstract virtual Task RemoveScriptToEvaluateOnNewDocumentAsync(string identifier);
    public abstract virtual Task`1<NewDocumentScriptEvaluation> EvaluateExpressionOnNewDocumentAsync(string expression);
    public abstract virtual Task`1<IJSHandle> QueryObjectsAsync(IJSHandle prototypeHandle);
    public abstract virtual Task SetRequestInterceptionAsync(bool value);
    public abstract virtual Task SetOfflineModeAsync(bool value);
    public abstract virtual Task EmulateNetworkConditionsAsync(NetworkConditions networkConditions);
    public abstract virtual Task`1<CookieParam[]> GetCookiesAsync(String[] urls);
    public abstract virtual Task SetCookieAsync(CookieParam[] cookies);
    public abstract virtual Task DeleteCookieAsync(CookieParam[] cookies);
    public sealed virtual Task`1<IElementHandle> AddScriptTagAsync(AddTagOptions options);
    public sealed virtual Task`1<IElementHandle> AddScriptTagAsync(string url);
    public sealed virtual Task`1<IElementHandle> AddStyleTagAsync(AddTagOptions options);
    public sealed virtual Task`1<IElementHandle> AddStyleTagAsync(string url);
    public sealed virtual Task ExposeFunctionAsync(string name, Action puppeteerFunction);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`1<TResult> puppeteerFunction);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> puppeteerFunction);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> puppeteerFunction);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> puppeteerFunction);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> puppeteerFunction);
    public abstract virtual Task RemoveExposedFunctionAsync(string name);
    public sealed virtual Task`1<string> GetContentAsync();
    public sealed virtual Task SetContentAsync(string html, NavigationOptions options);
    public sealed virtual Task`1<IResponse> GoToAsync(string url, NavigationOptions options);
    public sealed virtual Task`1<IResponse> GoToAsync(string url, Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public sealed virtual Task`1<IResponse> GoToAsync(string url, WaitUntilNavigation waitUntil);
    public sealed virtual Task PdfAsync(string file);
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<PdfAsync>d__203")]
public sealed virtual Task PdfAsync(string file, PdfOptions options);
    public sealed virtual Task`1<Stream> PdfStreamAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<PdfStreamAsync>d__205")]
public sealed virtual Task`1<Stream> PdfStreamAsync(PdfOptions options);
    public sealed virtual Task`1<Byte[]> PdfDataAsync();
    public sealed virtual Task`1<Byte[]> PdfDataAsync(PdfOptions options);
    public abstract virtual Task SetJavaScriptEnabledAsync(bool enabled);
    public abstract virtual Task SetBypassCSPAsync(bool enabled);
    public abstract virtual Task EmulateMediaTypeAsync(MediaType type);
    public abstract virtual Task EmulateMediaFeaturesAsync(IEnumerable`1<MediaFeatureValue> features);
    public abstract virtual Task SetViewportAsync(ViewPortOptions viewport);
    public sealed virtual Task EmulateAsync(DeviceDescriptor options);
    public sealed virtual Task ScreenshotAsync(string file);
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<ScreenshotAsync>d__215")]
public sealed virtual Task ScreenshotAsync(string file, ScreenshotOptions options);
    public sealed virtual Task`1<Stream> ScreenshotStreamAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<ScreenshotStreamAsync>d__217")]
public sealed virtual Task`1<Stream> ScreenshotStreamAsync(ScreenshotOptions options);
    public sealed virtual Task`1<string> ScreenshotBase64Async();
    public sealed virtual Task`1<string> ScreenshotBase64Async(ScreenshotOptions options);
    public sealed virtual Task`1<Byte[]> ScreenshotDataAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<ScreenshotDataAsync>d__221")]
public sealed virtual Task`1<Byte[]> ScreenshotDataAsync(ScreenshotOptions options);
    public sealed virtual Task`1<string> GetTitleAsync();
    public abstract virtual Task CloseAsync(PageCloseOptions options);
    public abstract virtual Task SetCacheEnabledAsync(bool enabled);
    public sealed virtual Task ClickAsync(string selector, ClickOptions options);
    public sealed virtual Task HoverAsync(string selector);
    public sealed virtual Task FocusAsync(string selector);
    public sealed virtual Task TypeAsync(string selector, string text, TypeOptions options);
    public sealed virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    public sealed virtual Task`1<T> EvaluateExpressionAsync(string script);
    public sealed virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    public abstract virtual Task SetUserAgentAsync(string userAgent, UserAgentMetadata userAgentData);
    public abstract virtual Task SetExtraHttpHeadersAsync(Dictionary`2<string, string> headers);
    public abstract virtual Task AuthenticateAsync(Credentials credentials);
    public abstract virtual Task`1<IResponse> ReloadAsync(NavigationOptions options);
    public sealed virtual Task`1<IResponse> ReloadAsync(Nullable`1<int> timeout, WaitUntilNavigation[] waitUntil);
    public sealed virtual Task`1<String[]> SelectAsync(string selector, String[] values);
    public sealed virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, WaitForFunctionOptions options, Object[] args);
    public sealed virtual Task`1<IJSHandle> WaitForFunctionAsync(string script, Object[] args);
    public sealed virtual Task`1<IJSHandle> WaitForExpressionAsync(string script, WaitForFunctionOptions options);
    public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, WaitForSelectorOptions options);
    public sealed virtual Task`1<IElementHandle> WaitForXPathAsync(string xpath, WaitForSelectorOptions options);
    public sealed virtual Task`1<IResponse> WaitForNavigationAsync(NavigationOptions options);
    public abstract virtual Task WaitForNetworkIdleAsync(WaitForNetworkIdleOptions options);
    public sealed virtual Task`1<IRequest> WaitForRequestAsync(string url, WaitForOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(Func`2<IRequest, bool> predicate, WaitForOptions options);
    public sealed virtual Task`1<IFrame> WaitForFrameAsync(string url, WaitForOptions options);
    public abstract virtual Task`1<IFrame> WaitForFrameAsync(Func`2<IFrame, bool> predicate, WaitForOptions options);
    public sealed virtual Task`1<IResponse> WaitForResponseAsync(string url, WaitForOptions options);
    public sealed virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, bool> predicate, WaitForOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, Task`1<bool>> predicate, WaitForOptions options);
    public abstract virtual Task`1<FileChooser> WaitForFileChooserAsync(WaitForOptions options);
    public abstract virtual Task`1<IResponse> GoBackAsync(NavigationOptions options);
    public abstract virtual Task`1<IResponse> GoForwardAsync(NavigationOptions options);
    public abstract virtual Task SetBurstModeOffAsync();
    public abstract virtual Task BringToFrontAsync();
    public abstract virtual Task EmulateVisionDeficiencyAsync(VisionDeficiency type);
    public abstract virtual Task EmulateTimezoneAsync(string timezoneId);
    public abstract virtual Task EmulateIdleStateAsync(EmulateIdleOverrides idleOverrides);
    public abstract virtual Task EmulateCPUThrottlingAsync(Nullable`1<decimal> factor);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.Page/<DisposeAsync>d__263")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void AddRequestInterceptor(Func`2<IRequest, Task> interceptionTask);
    public sealed virtual void RemoveRequestInterceptor(Func`2<IRequest, Task> interceptionTask);
    public sealed virtual Task`1<ICDPSession> CreateCDPSessionAsync();
    public abstract virtual Task SetBypassServiceWorkerAsync(bool bypass);
    internal void OnPopup(IPage popupPage);
    internal void OnDialog(PageJavascriptDialogOpeningResponse message);
    protected virtual void Dispose(bool disposing);
    protected void OnFrameAttached(FrameEventArgs e);
    protected void OnFrameNavigated(FrameNavigatedEventArgs e);
    protected void OnFrameDetached(FrameEventArgs e);
    protected void OnRequestFailed(RequestEventArgs e);
    protected void OnRequestFinished(RequestEventArgs e);
    protected void OnResponse(ResponseCreatedEventArgs e);
    protected void OnRequestServedFromCache(RequestEventArgs e);
    protected void OnDOMContentLoaded();
    protected void OnLoad();
    protected void OnRequest(IRequest request);
    protected void OnWorkerDestroyed(WebWorker worker);
    protected void OnWorkerCreated(WebWorker worker);
    protected void OnClose();
    protected void OnConsole(ConsoleEventArgs e);
    protected void OnMetrics(MetricEventArgs e);
    protected void OnPageError(PageErrorEventArgs e);
    protected void OnError(ErrorEventArgs e);
    protected abstract virtual Task`1<Byte[]> PdfInternalAsync(string file, PdfOptions options);
    protected abstract virtual Task`1<string> PerformScreenshotAsync(ScreenshotType type, ScreenshotOptions options);
    protected abstract virtual Task ExposeFunctionAsync(string name, Delegate puppeteerFunction);
    private Clip RoundRectangle(Clip clip);
    private Clip NormalizeRectangle(Clip clip);
}
public class PuppeteerSharp.PageAccessibility.Accessibility : object {
    private CDPSession _client;
    public Accessibility(CDPSession client);
    [AsyncStateMachineAttribute("PuppeteerSharp.PageAccessibility.Accessibility/<SnapshotAsync>d__2")]
public sealed virtual Task`1<SerializedAXNode> SnapshotAsync(AccessibilitySnapshotOptions options);
    internal void UpdateClient(CDPSession client);
    private void CollectInterestingNodes(List`1<AXNode> collection, AXNode node, bool insideControl);
    private SerializedAXNode[] SerializeTree(AXNode node, List`1<AXNode> whitelistedNodes);
}
public class PuppeteerSharp.PageAccessibility.AccessibilitySnapshotOptions : object {
    [CompilerGeneratedAttribute]
private bool <InterestingOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementHandle <Root>k__BackingField;
    public bool InterestingOnly { get; public set; }
    public IElementHandle Root { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_InterestingOnly();
    [CompilerGeneratedAttribute]
public void set_InterestingOnly(bool value);
    [CompilerGeneratedAttribute]
public IElementHandle get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(IElementHandle value);
}
internal class PuppeteerSharp.PageAccessibility.AXNode : object {
    private string _name;
    private bool _richlyEditable;
    private bool _editable;
    private bool _hidden;
    private string _role;
    private bool _ignored;
    private Nullable`1<bool> _cachedHasFocusableChild;
    [CompilerGeneratedAttribute]
private List`1<AXNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focusable>k__BackingField;
    [CompilerGeneratedAttribute]
private AXTreeNode <Payload>k__BackingField;
    public List`1<AXNode> Children { get; }
    public bool Focusable { get; public set; }
    internal AXTreeNode Payload { get; }
    private AXNode(AXTreeNode payload);
    [CompilerGeneratedAttribute]
public List`1<AXNode> get_Children();
    [CompilerGeneratedAttribute]
public bool get_Focusable();
    [CompilerGeneratedAttribute]
public void set_Focusable(bool value);
    [CompilerGeneratedAttribute]
internal AXTreeNode get_Payload();
    internal static AXNode CreateTree(IEnumerable`1<AXTreeNode> payloads);
    internal AXNode Find(Func`2<AXNode, bool> predicate);
    internal bool IsLeafNode();
    internal bool IsControl();
    internal bool IsInteresting(bool insideControl);
    internal SerializedAXNode Serialize();
    private bool IsPlainTextField();
    private bool IsTextOnlyObject();
    private bool HasFocusableChild();
    private string GetIfNotFalse(string value);
    private CheckedState GetCheckedState(string value);
}
public enum PuppeteerSharp.PageAccessibility.CheckedState : Enum {
    public int value__;
    public static CheckedState False;
    public static CheckedState True;
    public static CheckedState Mixed;
}
public interface PuppeteerSharp.PageAccessibility.IAccessibility {
    public abstract virtual Task`1<SerializedAXNode> SnapshotAsync(AccessibilitySnapshotOptions options);
}
public class PuppeteerSharp.PageAccessibility.SerializedAXNode : object {
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Modal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiselectable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readonly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckedState <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckedState <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueMin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueMax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutoComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasPopup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Invalid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializedAXNode[] <Children>k__BackingField;
    public string Role { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Description { get; public set; }
    public string KeyShortcuts { get; public set; }
    public string RoleDescription { get; public set; }
    public string ValueText { get; public set; }
    public bool Disabled { get; public set; }
    public bool Expanded { get; public set; }
    public bool Focused { get; public set; }
    public bool Modal { get; public set; }
    public bool Multiline { get; public set; }
    public bool Multiselectable { get; public set; }
    public bool Readonly { get; public set; }
    public bool Required { get; public set; }
    public bool Selected { get; public set; }
    public CheckedState Checked { get; public set; }
    public CheckedState Pressed { get; public set; }
    public int Level { get; public set; }
    public int ValueMin { get; public set; }
    public int ValueMax { get; public set; }
    public string AutoComplete { get; public set; }
    public string HasPopup { get; public set; }
    public string Invalid { get; public set; }
    public string Orientation { get; public set; }
    public SerializedAXNode[] Children { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_KeyShortcuts();
    [CompilerGeneratedAttribute]
public void set_KeyShortcuts(string value);
    [CompilerGeneratedAttribute]
public string get_RoleDescription();
    [CompilerGeneratedAttribute]
public void set_RoleDescription(string value);
    [CompilerGeneratedAttribute]
public string get_ValueText();
    [CompilerGeneratedAttribute]
public void set_ValueText(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(bool value);
    [CompilerGeneratedAttribute]
public bool get_Modal();
    [CompilerGeneratedAttribute]
public void set_Modal(bool value);
    [CompilerGeneratedAttribute]
public bool get_Multiline();
    [CompilerGeneratedAttribute]
public void set_Multiline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Multiselectable();
    [CompilerGeneratedAttribute]
public void set_Multiselectable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readonly();
    [CompilerGeneratedAttribute]
public void set_Readonly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public CheckedState get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(CheckedState value);
    [CompilerGeneratedAttribute]
public CheckedState get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(CheckedState value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public int get_ValueMin();
    [CompilerGeneratedAttribute]
public void set_ValueMin(int value);
    [CompilerGeneratedAttribute]
public int get_ValueMax();
    [CompilerGeneratedAttribute]
public void set_ValueMax(int value);
    [CompilerGeneratedAttribute]
public string get_AutoComplete();
    [CompilerGeneratedAttribute]
public void set_AutoComplete(string value);
    [CompilerGeneratedAttribute]
public string get_HasPopup();
    [CompilerGeneratedAttribute]
public void set_HasPopup(string value);
    [CompilerGeneratedAttribute]
public string get_Invalid();
    [CompilerGeneratedAttribute]
public void set_Invalid(string value);
    [CompilerGeneratedAttribute]
public string get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(string value);
    [CompilerGeneratedAttribute]
public SerializedAXNode[] get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(SerializedAXNode[] value);
    public sealed virtual bool Equals(SerializedAXNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class PuppeteerSharp.PageBinding : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <Function>k__BackingField;
    public string Name { get; public set; }
    public Delegate Function { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Delegate get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(Delegate value);
}
public class PuppeteerSharp.PageCloseOptions : object {
    [CompilerGeneratedAttribute]
private bool <RunBeforeUnload>k__BackingField;
    public bool RunBeforeUnload { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RunBeforeUnload();
    [CompilerGeneratedAttribute]
public void set_RunBeforeUnload(bool value);
}
public class PuppeteerSharp.PageCoverage.Coverage : object {
    private JSCoverage _jsCoverage;
    private CSSCoverage _cssCoverage;
    internal Coverage(CDPSession client);
    public sealed virtual Task StartJSCoverageAsync(CoverageStartOptions options);
    public sealed virtual Task`1<JSCoverageEntry[]> StopJSCoverageAsync();
    public sealed virtual Task StartCSSCoverageAsync(CoverageStartOptions options);
    public sealed virtual Task`1<CoverageEntry[]> StopCSSCoverageAsync();
    internal static CoverageEntryRange[] ConvertToDisjointRanges(List`1<CoverageRange> nestedRanges);
    internal void UpdateClient(CDPSession client);
}
public class PuppeteerSharp.PageCoverage.CoverageEntry : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageEntryRange[] <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Url { get; public set; }
    public CoverageEntryRange[] Ranges { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverageEntry(CoverageEntry original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public CoverageEntryRange[] get_Ranges();
    [CompilerGeneratedAttribute]
public void set_Ranges(CoverageEntryRange[] value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverageEntry left, CoverageEntry right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverageEntry left, CoverageEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverageEntry other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverageEntry <Clone>$();
}
internal class PuppeteerSharp.PageCoverage.CoverageEntryPoint : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageRange <Range>k__BackingField;
    public int Offset { get; internal set; }
    public int Type { get; internal set; }
    public CoverageRange Range { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(int value);
    [CompilerGeneratedAttribute]
public CoverageRange get_Range();
    [CompilerGeneratedAttribute]
internal void set_Range(CoverageRange value);
    public sealed virtual int CompareTo(CoverageEntryPoint other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PuppeteerSharp.PageCoverage.CoverageEntryRange : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Start { get; internal set; }
    public int End { get; internal set; }
    [CompilerGeneratedAttribute]
protected CoverageEntryRange(CoverageEntryRange original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
internal void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
internal void set_End(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverageEntryRange left, CoverageEntryRange right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverageEntryRange left, CoverageEntryRange right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverageEntryRange other);
    [CompilerGeneratedAttribute]
public virtual CoverageEntryRange <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PuppeteerSharp.PageCoverage.CoverageRange : object {
    [CompilerGeneratedAttribute]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int StartOffset { get; public set; }
    public int EndOffset { get; public set; }
    public int Count { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverageRange(CoverageRange original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_StartOffset();
    [CompilerGeneratedAttribute]
public void set_StartOffset(int value);
    [CompilerGeneratedAttribute]
public int get_EndOffset();
    [CompilerGeneratedAttribute]
public void set_EndOffset(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverageRange left, CoverageRange right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverageRange left, CoverageRange right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverageRange other);
    [CompilerGeneratedAttribute]
public virtual CoverageRange <Clone>$();
}
public class PuppeteerSharp.PageCoverage.CoverageStartOptions : object {
    [CompilerGeneratedAttribute]
private bool <ResetOnNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportAnonymousScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRawScriptCoverage>k__BackingField;
    public bool ResetOnNavigation { get; public set; }
    public bool ReportAnonymousScripts { get; public set; }
    public bool IncludeRawScriptCoverage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ResetOnNavigation();
    [CompilerGeneratedAttribute]
public void set_ResetOnNavigation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReportAnonymousScripts();
    [CompilerGeneratedAttribute]
public void set_ReportAnonymousScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRawScriptCoverage();
    [CompilerGeneratedAttribute]
public void set_IncludeRawScriptCoverage(bool value);
}
internal class PuppeteerSharp.PageCoverage.CSSCoverage : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<string, string>> _stylesheets;
    private DeferredTaskQueue _callbackQueue;
    private ILogger _logger;
    private CDPSession _client;
    private bool _enabled;
    private bool _resetOnNavigation;
    public CSSCoverage(CDPSession client);
    internal void UpdateClient(CDPSession client);
    internal Task StartAsync(CoverageStartOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.CSSCoverage/<StopAsync>d__9")]
internal Task`1<CoverageEntry[]> StopAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.CSSCoverage/<Client_MessageReceived>d__10")]
private void Client_MessageReceived(object sender, MessageEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.CSSCoverage/<OnStyleSheetAddedAsync>d__11")]
private Task OnStyleSheetAddedAsync(CSSStyleSheetAddedResponse styleSheetAddedResponse);
    private void OnExecutionContextsCleared();
}
public class PuppeteerSharp.PageCoverage.FunctionCoverage : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageRange[] <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlockCoverage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FunctionName { get; public set; }
    public CoverageRange[] Ranges { get; public set; }
    public bool IsBlockCoverage { get; public set; }
    [CompilerGeneratedAttribute]
protected FunctionCoverage(FunctionCoverage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public CoverageRange[] get_Ranges();
    [CompilerGeneratedAttribute]
public void set_Ranges(CoverageRange[] value);
    [CompilerGeneratedAttribute]
public bool get_IsBlockCoverage();
    [CompilerGeneratedAttribute]
public void set_IsBlockCoverage(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FunctionCoverage left, FunctionCoverage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FunctionCoverage left, FunctionCoverage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FunctionCoverage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual FunctionCoverage <Clone>$();
}
public interface PuppeteerSharp.PageCoverage.ICoverage {
    public abstract virtual Task StartCSSCoverageAsync(CoverageStartOptions options);
    public abstract virtual Task StartJSCoverageAsync(CoverageStartOptions options);
    public abstract virtual Task`1<CoverageEntry[]> StopCSSCoverageAsync();
    public abstract virtual Task`1<JSCoverageEntry[]> StopJSCoverageAsync();
}
internal class PuppeteerSharp.PageCoverage.JSCoverage : object {
    private Dictionary`2<string, string> _scriptURLs;
    private Dictionary`2<string, string> _scriptSources;
    private ILogger _logger;
    private CDPSession _client;
    private bool _enabled;
    private bool _resetOnNavigation;
    private bool _reportAnonymousScripts;
    private bool _includeRawScriptCoverage;
    public JSCoverage(CDPSession client);
    internal void UpdateClient(CDPSession client);
    internal Task StartAsync(CoverageStartOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.JSCoverage/<StopAsync>d__11")]
internal Task`1<JSCoverageEntry[]> StopAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.JSCoverage/<Client_MessageReceived>d__12")]
private void Client_MessageReceived(object sender, MessageEventArgs e);
    [AsyncStateMachineAttribute("PuppeteerSharp.PageCoverage.JSCoverage/<OnScriptParsedAsync>d__13")]
private Task OnScriptParsedAsync(DebuggerScriptParsedResponse scriptParseResponse);
    private void OnExecutionContextsCleared();
}
public class PuppeteerSharp.PageCoverage.JSCoverageEntry : CoverageEntry {
    [CompilerGeneratedAttribute]
private ScriptCoverage <RawScriptCoverage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ScriptCoverage RawScriptCoverage { get; public set; }
    [CompilerGeneratedAttribute]
protected JSCoverageEntry(JSCoverageEntry original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ScriptCoverage get_RawScriptCoverage();
    [CompilerGeneratedAttribute]
public void set_RawScriptCoverage(ScriptCoverage value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JSCoverageEntry left, JSCoverageEntry right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JSCoverageEntry left, JSCoverageEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CoverageEntry other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(JSCoverageEntry other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverageEntry <Clone>$();
}
public class PuppeteerSharp.PageCoverage.ScriptCoverage : object {
    [CompilerGeneratedAttribute]
private string <ScriptId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionCoverage[] <Functions>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ScriptId { get; public set; }
    public string Url { get; public set; }
    public FunctionCoverage[] Functions { get; public set; }
    [CompilerGeneratedAttribute]
protected ScriptCoverage(ScriptCoverage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ScriptId();
    [CompilerGeneratedAttribute]
public void set_ScriptId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public FunctionCoverage[] get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(FunctionCoverage[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ScriptCoverage left, ScriptCoverage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ScriptCoverage left, ScriptCoverage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ScriptCoverage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ScriptCoverage <Clone>$();
}
public class PuppeteerSharp.PageErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    public PageErrorEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class PuppeteerSharp.Payload : object {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasPostData>k__BackingField;
    [JsonConverterAttribute("PuppeteerSharp.Helpers.Json.HttpMethodConverter")]
public HttpMethod Method { get; public set; }
    public string PostData { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public string Url { get; public set; }
    public Nullable`1<bool> HasPostData { get; public set; }
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasPostData();
    [CompilerGeneratedAttribute]
public void set_HasPostData(Nullable`1<bool> value);
}
public class PuppeteerSharp.PdfOptions : object {
    [CompilerGeneratedAttribute]
private decimal <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayHeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Landscape>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private PaperFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private MarginOptions <MarginOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferCSSPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tagged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outline>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public decimal Scale { get; public set; }
    public bool DisplayHeaderFooter { get; public set; }
    public string HeaderTemplate { get; public set; }
    public string FooterTemplate { get; public set; }
    public bool PrintBackground { get; public set; }
    public bool Landscape { get; public set; }
    public string PageRanges { get; public set; }
    public PaperFormat Format { get; public set; }
    public object Width { get; public set; }
    public object Height { get; public set; }
    public MarginOptions MarginOptions { get; public set; }
    public bool PreferCSSPageSize { get; public set; }
    public bool OmitBackground { get; public set; }
    public bool Tagged { get; public set; }
    public bool Outline { get; public set; }
    [CompilerGeneratedAttribute]
protected PdfOptions(PdfOptions original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public decimal get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(decimal value);
    [CompilerGeneratedAttribute]
public bool get_DisplayHeaderFooter();
    [CompilerGeneratedAttribute]
public void set_DisplayHeaderFooter(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_PrintBackground();
    [CompilerGeneratedAttribute]
public void set_PrintBackground(bool value);
    [CompilerGeneratedAttribute]
public bool get_Landscape();
    [CompilerGeneratedAttribute]
public void set_Landscape(bool value);
    [CompilerGeneratedAttribute]
public string get_PageRanges();
    [CompilerGeneratedAttribute]
public void set_PageRanges(string value);
    [CompilerGeneratedAttribute]
public PaperFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(PaperFormat value);
    [CompilerGeneratedAttribute]
public object get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(object value);
    [CompilerGeneratedAttribute]
public object get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(object value);
    [CompilerGeneratedAttribute]
public MarginOptions get_MarginOptions();
    [CompilerGeneratedAttribute]
public void set_MarginOptions(MarginOptions value);
    [CompilerGeneratedAttribute]
public bool get_PreferCSSPageSize();
    [CompilerGeneratedAttribute]
public void set_PreferCSSPageSize(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitBackground();
    [CompilerGeneratedAttribute]
public void set_OmitBackground(bool value);
    [CompilerGeneratedAttribute]
public bool get_Tagged();
    [CompilerGeneratedAttribute]
public void set_Tagged(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outline();
    [CompilerGeneratedAttribute]
public void set_Outline(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PdfOptions left, PdfOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PdfOptions left, PdfOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(PdfOptions other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual PdfOptions <Clone>$();
}
public enum PuppeteerSharp.Platform : Enum {
    public int value__;
    public static Platform Unknown;
    public static Platform MacOS;
    public static Platform MacOSArm64;
    public static Platform Linux;
    public static Platform Win32;
    public static Platform Win64;
}
public class PuppeteerSharp.Point : ValueType {
    [CompilerGeneratedAttribute]
private decimal <X>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Y>k__BackingField;
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_X();
    [CompilerGeneratedAttribute]
public void set_X(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(decimal value);
}
public class PuppeteerSharp.PopupEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IPage <PopupPage>k__BackingField;
    public IPage PopupPage { get; internal set; }
    [CompilerGeneratedAttribute]
public IPage get_PopupPage();
    [CompilerGeneratedAttribute]
internal void set_PopupPage(IPage value);
}
public static class PuppeteerSharp.PredefinedNetworkConditions : object {
    private static Dictionary`2<string, NetworkConditions> Conditions;
    private static Lazy`1<IReadOnlyDictionary`2<string, NetworkConditions>> _readOnlyConditions;
    private static PredefinedNetworkConditions();
    internal static IReadOnlyDictionary`2<string, NetworkConditions> ToReadOnly();
}
public class PuppeteerSharp.ProcessException : ChromiumProcessException {
    public ProcessException(string message);
    public ProcessException(string message, Exception innerException);
    protected ProcessException(SerializationInfo info, StreamingContext context);
}
public static class PuppeteerSharp.Puppeteer : object {
    internal static int DefaultTimeout;
    public static IReadOnlyDictionary`2<DeviceDescriptorName, DeviceDescriptor> Devices { get; }
    public static IReadOnlyDictionary`2<string, NetworkConditions> NetworkConditions { get; }
    public static IReadOnlyDictionary`2<DeviceDescriptorName, DeviceDescriptor> get_Devices();
    public static IReadOnlyDictionary`2<string, NetworkConditions> get_NetworkConditions();
    public static String[] GetDefaultArgs(LaunchOptions options);
    public static Task`1<IBrowser> LaunchAsync(LaunchOptions options, ILoggerFactory loggerFactory);
    public static Task`1<IBrowser> ConnectAsync(ConnectOptions options, ILoggerFactory loggerFactory);
    public static IBrowserFetcher CreateBrowserFetcher(BrowserFetcherOptions options);
}
public class PuppeteerSharp.PuppeteerException : Exception {
    public PuppeteerException(string message);
    public PuppeteerException(string message, Exception innerException);
    protected PuppeteerException(SerializationInfo info, StreamingContext context);
    internal static string RewriteErrorMeesage(string message);
}
[ExtensionAttribute]
public static class PuppeteerSharp.PuppeteerHandleExtensions : object {
    [ExtensionAttribute]
public static Task EvaluateFunctionAsync(Task`1<IElementHandle> elementHandleTask, string pageFunction, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<EvaluateFunctionAsync>d__1`1")]
[ExtensionAttribute]
public static Task`1<T> EvaluateFunctionAsync(Task`1<IElementHandle> elementHandleTask, string pageFunction, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<EvaluateFunctionAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<T> EvaluateFunctionAsync(IElementHandle elementHandle, string pageFunction, Object[] args);
    [ExtensionAttribute]
public static Task EvaluateFunctionAsync(Task`1<IJSHandle> arrayHandleTask, string pageFunction, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<EvaluateFunctionAsync>d__4`1")]
[ExtensionAttribute]
public static Task`1<T> EvaluateFunctionAsync(Task`1<IJSHandle> arrayHandleTask, string pageFunction, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<EvaluateFunctionAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<T> EvaluateFunctionAsync(IJSHandle arrayHandle, string pageFunction, Object[] args);
    [ExtensionAttribute]
internal static object FormatArgument(IJSHandle jSHandle, ExecutionContext context);
    [AsyncIteratorStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<TransposeIterableHandleAsync>d__7")]
[ExtensionAttribute]
internal static IAsyncEnumerable`1<IElementHandle> TransposeIterableHandleAsync(IJSHandle handle);
    [AsyncIteratorStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<TransposeIteratorHandleAsync>d__8")]
[ExtensionAttribute]
internal static IAsyncEnumerable`1<IElementHandle> TransposeIteratorHandleAsync(IJSHandle iterator);
    [AsyncStateMachineAttribute("PuppeteerSharp.PuppeteerHandleExtensions/<FastTransposeIteratorHandleAsync>d__9")]
[ExtensionAttribute]
internal static Task`1<IEnumerable`1<IElementHandle>> FastTransposeIteratorHandleAsync(IJSHandle handle);
}
internal class PuppeteerSharp.QueryHandlers.AriaQueryHandler : QueryHandler {
    private static Regex _ariaSelectorAttributeRegEx;
    private static Regex _normalizedRegex;
    private static String[] _nonElementNodeRoles;
    private static AriaQueryHandler();
    [AsyncIteratorStateMachineAttribute("PuppeteerSharp.QueryHandlers.AriaQueryHandler/<QueryAllAsync>d__4")]
internal virtual IAsyncEnumerable`1<IElementHandle> QueryAllAsync(IElementHandle element, string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.QueryHandlers.AriaQueryHandler/<QueryOneAsync>d__5")]
internal virtual Task`1<IElementHandle> QueryOneAsync(IElementHandle element, string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.QueryHandlers.AriaQueryHandler/<QueryAXTreeAsync>d__6")]
private static Task`1<IEnumerable`1<AXTreeNode>> QueryAXTreeAsync(CDPSession client, IElementHandle element, string accessibleName, string role);
    private static AriaQueryOption ParseAriaSelector(string selector);
    [CompilerGeneratedAttribute]
internal static string <ParseAriaSelector>g__NormalizeValue|7_1(string value);
}
internal class PuppeteerSharp.QueryHandlers.CssQueryHandler : QueryHandler {
}
internal class PuppeteerSharp.QueryHandlers.CustomQuerySelectorRegistry : object {
    private static String[] _customQuerySeparators;
    private Dictionary`2<string, QueryHandler> _queryHandlers;
    private Regex _customQueryHandlerNameRegex;
    private QueryHandler _defaultHandler;
    internal Dictionary`2<string, QueryHandler> InternalQueryHandlers { get; }
    private static CustomQuerySelectorRegistry();
    internal Dictionary`2<string, QueryHandler> get_InternalQueryHandlers();
    internal void RegisterCustomQueryHandler(string name, CustomQueryHandler queryHandler);
    internal ValueTuple`2<string, QueryHandler> GetQueryHandlerAndSelector(string selector);
    internal IEnumerable`1<string> GetCustomQueryHandlerNames();
    internal void UnregisterCustomQueryHandler(string name);
    internal void ClearCustomQueryHandlers();
    private IEnumerable`1<string> CustomQueryHandlerNames();
}
internal class PuppeteerSharp.QueryHandlers.PierceQueryHandler : QueryHandler {
}
internal class PuppeteerSharp.QueryHandlers.QueryHandler : object {
    private string _querySelector;
    private string _querySelectorAll;
    public string QuerySelectorAll { get; public set; }
    internal string QuerySelector { get; internal set; }
    public string get_QuerySelectorAll();
    public void set_QuerySelectorAll(string value);
    internal string get_QuerySelector();
    internal void set_QuerySelector(string value);
    [AsyncStateMachineAttribute("PuppeteerSharp.QueryHandlers.QueryHandler/<QueryOneAsync>d__8")]
internal virtual Task`1<IElementHandle> QueryOneAsync(IElementHandle element, string selector);
    [AsyncStateMachineAttribute("PuppeteerSharp.QueryHandlers.QueryHandler/<WaitForAsync>d__9")]
internal Task`1<IElementHandle> WaitForAsync(Frame frame, ElementHandle element, string selector, WaitForSelectorOptions options);
    [AsyncIteratorStateMachineAttribute("PuppeteerSharp.QueryHandlers.QueryHandler/<QueryAllAsync>d__10")]
internal virtual IAsyncEnumerable`1<IElementHandle> QueryAllAsync(IElementHandle element, string selector);
}
internal class PuppeteerSharp.QueryHandlers.TextQueryHandler : QueryHandler {
}
internal class PuppeteerSharp.QueryHandlers.XPathQueryHandler : QueryHandler {
}
internal class PuppeteerSharp.QueuedEventGroup : object {
    [CompilerGeneratedAttribute]
private ResponseReceivedResponse <ResponseReceivedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadingFinishedEventResponse <LoadingFinishedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadingFailedEventResponse <LoadingFailedEvent>k__BackingField;
    public ResponseReceivedResponse ResponseReceivedEvent { get; public set; }
    public LoadingFinishedEventResponse LoadingFinishedEvent { get; public set; }
    public LoadingFailedEventResponse LoadingFailedEvent { get; public set; }
    [CompilerGeneratedAttribute]
public ResponseReceivedResponse get_ResponseReceivedEvent();
    [CompilerGeneratedAttribute]
public void set_ResponseReceivedEvent(ResponseReceivedResponse value);
    [CompilerGeneratedAttribute]
public LoadingFinishedEventResponse get_LoadingFinishedEvent();
    [CompilerGeneratedAttribute]
public void set_LoadingFinishedEvent(LoadingFinishedEventResponse value);
    [CompilerGeneratedAttribute]
public LoadingFailedEventResponse get_LoadingFailedEvent();
    [CompilerGeneratedAttribute]
public void set_LoadingFailedEvent(LoadingFailedEventResponse value);
}
internal abstract class PuppeteerSharp.Realm : object {
    [CompilerGeneratedAttribute]
private TaskManager <TaskManager>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutSettings <TimeoutSettings>k__BackingField;
    internal TaskManager TaskManager { get; internal set; }
    internal TimeoutSettings TimeoutSettings { get; }
    internal IEnvironment Environment { get; }
    public Realm(TimeoutSettings timeoutSettings);
    [CompilerGeneratedAttribute]
internal TaskManager get_TaskManager();
    [CompilerGeneratedAttribute]
internal void set_TaskManager(TaskManager value);
    [CompilerGeneratedAttribute]
internal TimeoutSettings get_TimeoutSettings();
    internal abstract virtual IEnvironment get_Environment();
    internal abstract virtual Task`1<IJSHandle> AdoptHandleAsync(IJSHandle handle);
    internal abstract virtual Task`1<IElementHandle> AdoptBackendNodeAsync(object backendNodeId);
    internal abstract virtual Task`1<IJSHandle> TransferHandleAsync(IJSHandle handle);
    internal abstract virtual Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    internal abstract virtual Task`1<IJSHandle> EvaluateFunctionHandleAsync(string script, Object[] args);
    internal abstract virtual Task`1<T> EvaluateExpressionAsync(string script);
    internal abstract virtual Task`1<JToken> EvaluateExpressionAsync(string script);
    internal abstract virtual Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    internal abstract virtual Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.Realm/<WaitForFunctionAsync>d__19")]
internal Task`1<IJSHandle> WaitForFunctionAsync(string script, WaitForFunctionOptions options, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.Realm/<WaitForExpressionAsync>d__20")]
internal Task`1<IJSHandle> WaitForExpressionAsync(string script, WaitForFunctionOptions options);
}
internal class PuppeteerSharp.RedirectInfo : object {
    [CompilerGeneratedAttribute]
private RequestWillBeSentPayload <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FetchRequestId>k__BackingField;
    public RequestWillBeSentPayload Event { get; public set; }
    public string FetchRequestId { get; public set; }
    [CompilerGeneratedAttribute]
public RequestWillBeSentPayload get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(RequestWillBeSentPayload value);
    [CompilerGeneratedAttribute]
public string get_FetchRequestId();
    [CompilerGeneratedAttribute]
public void set_FetchRequestId(string value);
}
public class PuppeteerSharp.RemoteAddress : object {
    [CompilerGeneratedAttribute]
private string <IP>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string IP { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IP();
    [CompilerGeneratedAttribute]
public void set_IP(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public abstract class PuppeteerSharp.Request`1 : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InterceptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureText>k__BackingField;
    [CompilerGeneratedAttribute]
private TResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNavigationRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Initiator <Initiator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPostData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IRequest> <RedirectChainList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromMemoryCache>k__BackingField;
    public string Id { get; internal set; }
    public string InterceptionId { get; internal set; }
    public string FailureText { get; internal set; }
    public TResponse Response { get; internal set; }
    private IResponse PuppeteerSharp.IRequest.Response { get; }
    public ResourceType ResourceType { get; internal set; }
    public IFrame Frame { get; internal set; }
    public bool IsNavigationRequest { get; internal set; }
    public HttpMethod Method { get; internal set; }
    public object PostData { get; internal set; }
    public Dictionary`2<string, string> Headers { get; internal set; }
    public string Url { get; internal set; }
    public IRequest[] RedirectChain { get; }
    public Initiator Initiator { get; internal set; }
    public bool HasPostData { get; internal set; }
    internal List`1<IRequest> RedirectChainList { get; internal set; }
    internal Payload ContinueRequestOverrides { get; }
    internal ResponseData ResponseForRequest { get; }
    internal RequestAbortErrorCode AbortErrorReason { get; }
    internal bool FromMemoryCache { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InterceptionId();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InterceptionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FailureText();
    [CompilerGeneratedAttribute]
internal void set_FailureText(string value);
    [CompilerGeneratedAttribute]
public virtual TResponse get_Response();
    [CompilerGeneratedAttribute]
internal virtual void set_Response(TResponse value);
    private sealed virtual override IResponse PuppeteerSharp.IRequest.get_Response();
    [CompilerGeneratedAttribute]
public sealed virtual ResourceType get_ResourceType();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResourceType(ResourceType value);
    [CompilerGeneratedAttribute]
public sealed virtual IFrame get_Frame();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNavigationRequest();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNavigationRequest(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpMethod get_Method();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_PostData();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PostData(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Url(string value);
    public sealed virtual IRequest[] get_RedirectChain();
    [CompilerGeneratedAttribute]
public sealed virtual Initiator get_Initiator();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Initiator(Initiator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasPostData();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HasPostData(bool value);
    [CompilerGeneratedAttribute]
internal List`1<IRequest> get_RedirectChainList();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RedirectChainList(List`1<IRequest> value);
    internal abstract virtual Payload get_ContinueRequestOverrides();
    internal abstract virtual ResponseData get_ResponseForRequest();
    internal abstract virtual RequestAbortErrorCode get_AbortErrorReason();
    [CompilerGeneratedAttribute]
internal bool get_FromMemoryCache();
    [CompilerGeneratedAttribute]
internal void set_FromMemoryCache(bool value);
    public abstract virtual Task ContinueAsync(Payload payloadOverrides, Nullable`1<int> priority);
    public abstract virtual Task RespondAsync(ResponseData response, Nullable`1<int> priority);
    public abstract virtual Task AbortAsync(RequestAbortErrorCode errorCode, Nullable`1<int> priority);
    public abstract virtual Task`1<string> FetchPostDataAsync();
    internal abstract virtual Task FinalizeInterceptionsAsync();
    internal abstract virtual void EnqueueInterceptionAction(Func`2<IRequest, Task> pendingHandler);
}
public enum PuppeteerSharp.RequestAbortErrorCode : Enum {
    public int value__;
    public static RequestAbortErrorCode Aborted;
    public static RequestAbortErrorCode AccessDenied;
    public static RequestAbortErrorCode AddressUnreachable;
    public static RequestAbortErrorCode BlockedByClient;
    public static RequestAbortErrorCode BlockedByResponse;
    public static RequestAbortErrorCode ConnectionAborted;
    public static RequestAbortErrorCode ConnectionClosed;
    public static RequestAbortErrorCode ConnectionFailed;
    public static RequestAbortErrorCode ConnectionRefused;
    public static RequestAbortErrorCode ConnectionReset;
    public static RequestAbortErrorCode InternetDisconnected;
    public static RequestAbortErrorCode NameNotResolved;
    public static RequestAbortErrorCode TimedOut;
    public static RequestAbortErrorCode Failed;
}
public class PuppeteerSharp.RequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public IRequest Request { get; }
    public RequestEventArgs(IRequest request);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.ResourceType : Enum {
    public int value__;
    public static ResourceType Unknown;
    public static ResourceType Beacon;
    public static ResourceType Document;
    [EnumMemberAttribute]
public static ResourceType StyleSheet;
    public static ResourceType Image;
    [EnumMemberAttribute]
public static ResourceType ImageSet;
    public static ResourceType Media;
    public static ResourceType Font;
    public static ResourceType Script;
    [EnumMemberAttribute]
public static ResourceType TextTrack;
    public static ResourceType Xhr;
    public static ResourceType Fetch;
    [EnumMemberAttribute]
public static ResourceType EventSource;
    [EnumMemberAttribute]
public static ResourceType WebSocket;
    public static ResourceType Manifest;
    public static ResourceType Ping;
    public static ResourceType Img;
    public static ResourceType Other;
}
public abstract class PuppeteerSharp.Response`1 : object {
    [CompilerGeneratedAttribute]
private RemoteAddress <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityDetails <SecurityDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromServiceWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private TRequest <Request>k__BackingField;
    public RemoteAddress RemoteAddress { get; protected set; }
    public string Url { get; protected set; }
    public bool Ok { get; }
    public HttpStatusCode Status { get; protected set; }
    public string StatusText { get; protected set; }
    public Dictionary`2<string, string> Headers { get; protected set; }
    private IRequest PuppeteerSharp.IResponse.Request { get; }
    public bool FromCache { get; }
    public SecurityDetails SecurityDetails { get; protected set; }
    public bool FromServiceWorker { get; protected set; }
    public IFrame Frame { get; }
    protected TRequest Request { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual RemoteAddress get_RemoteAddress();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RemoteAddress(RemoteAddress value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Url(string value);
    public sealed virtual bool get_Ok();
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_Status();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Status(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusText();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StatusText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Headers(Dictionary`2<string, string> value);
    private sealed virtual override IRequest PuppeteerSharp.IResponse.get_Request();
    public abstract virtual bool get_FromCache();
    [CompilerGeneratedAttribute]
public sealed virtual SecurityDetails get_SecurityDetails();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SecurityDetails(SecurityDetails value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FromServiceWorker();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FromServiceWorker(bool value);
    public sealed virtual IFrame get_Frame();
    [CompilerGeneratedAttribute]
protected TRequest get_Request();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Request(TRequest value);
    public abstract virtual ValueTask`1<Byte[]> BufferAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Response`1/<TextAsync>d__42")]
public sealed virtual Task`1<string> TextAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Response`1/<JsonAsync>d__43")]
public sealed virtual Task`1<JObject> JsonAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.Response`1/<JsonAsync>d__44`1")]
public sealed virtual Task`1<T> JsonAsync();
}
public class PuppeteerSharp.ResponseCreatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IResponse <Response>k__BackingField;
    public IResponse Response { get; }
    public ResponseCreatedEventArgs(IResponse response);
    [CompilerGeneratedAttribute]
public IResponse get_Response();
}
public class PuppeteerSharp.ResponseData : object {
    [CompilerGeneratedAttribute]
private Byte[] <BodyData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <Status>k__BackingField;
    public string Body { get; public set; }
    public Byte[] BodyData { get; public set; }
    public Dictionary`2<string, object> Headers { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<HttpStatusCode> Status { get; public set; }
    public string get_Body();
    public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_BodyData();
    [CompilerGeneratedAttribute]
public void set_BodyData(Byte[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<HttpStatusCode> value);
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.SameSite : Enum {
    public int value__;
    public static SameSite None;
    public static SameSite Strict;
    public static SameSite Lax;
    public static SameSite Extended;
}
public class PuppeteerSharp.ScreenshotOptions : object {
    private static Dictionary`2<string, Nullable`1<ScreenshotType>> _extensionScreenshotTypeMap;
    [CompilerGeneratedAttribute]
private Clip <Clip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BurstMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureBeyondViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FromSurface>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptimizeForSpeed>k__BackingField;
    public Clip Clip { get; public set; }
    public bool FullPage { get; public set; }
    public bool OmitBackground { get; public set; }
    public Nullable`1<ScreenshotType> Type { get; public set; }
    public Nullable`1<int> Quality { get; public set; }
    [JsonIgnoreAttribute]
public bool BurstMode { get; public set; }
    public bool CaptureBeyondViewport { get; public set; }
    public Nullable`1<bool> FromSurface { get; public set; }
    public Nullable`1<bool> OptimizeForSpeed { get; public set; }
    private static ScreenshotOptions();
    [CompilerGeneratedAttribute]
public Clip get_Clip();
    [CompilerGeneratedAttribute]
public void set_Clip(Clip value);
    [CompilerGeneratedAttribute]
public bool get_FullPage();
    [CompilerGeneratedAttribute]
public void set_FullPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitBackground();
    [CompilerGeneratedAttribute]
public void set_OmitBackground(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ScreenshotType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_BurstMode();
    [CompilerGeneratedAttribute]
public void set_BurstMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureBeyondViewport();
    [CompilerGeneratedAttribute]
public void set_CaptureBeyondViewport(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FromSurface();
    [CompilerGeneratedAttribute]
public void set_FromSurface(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OptimizeForSpeed();
    [CompilerGeneratedAttribute]
public void set_OptimizeForSpeed(Nullable`1<bool> value);
    internal static Nullable`1<ScreenshotType> GetScreenshotTypeFromFile(string file);
}
public enum PuppeteerSharp.ScreenshotType : Enum {
    public int value__;
    public static ScreenshotType Jpeg;
    public static ScreenshotType Png;
    public static ScreenshotType Webp;
}
internal class PuppeteerSharp.ScriptInjector : object {
    private static string _injectedSource;
    private List`1<string> _amendments;
    private bool _updated;
    public void Append(string statement);
    public void Pop(string statement);
    public string Get();
    [AsyncStateMachineAttribute("PuppeteerSharp.ScriptInjector/<InjectAsync>d__6")]
public Task InjectAsync(Func`2<string, Task> inject, bool force);
    private static string GetInjectedSource();
    private void Update(Action callback);
}
public class PuppeteerSharp.SecurityDetails : object {
    [CompilerGeneratedAttribute]
private string <SubjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ValidFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ValidTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [JsonPropertyAttribute]
public string SubjectName { get; internal set; }
    [JsonPropertyAttribute]
public string Issuer { get; internal set; }
    [JsonPropertyAttribute]
public long ValidFrom { get; internal set; }
    [JsonPropertyAttribute]
public long ValidTo { get; internal set; }
    [JsonPropertyAttribute]
public string Protocol { get; internal set; }
    public SecurityDetails(string subjectName, string issuer, long validFrom, long validTo, string protocol);
    [CompilerGeneratedAttribute]
public string get_SubjectName();
    [CompilerGeneratedAttribute]
internal void set_SubjectName(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
internal void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public long get_ValidFrom();
    [CompilerGeneratedAttribute]
internal void set_ValidFrom(long value);
    [CompilerGeneratedAttribute]
public long get_ValidTo();
    [CompilerGeneratedAttribute]
internal void set_ValidTo(long value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
internal void set_Protocol(string value);
}
public class PuppeteerSharp.SelectorException : PuppeteerException {
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    public string Selector { get; }
    public SelectorException(string message);
    public SelectorException(string message, string selector);
    public SelectorException(string message, Exception innerException);
    protected SelectorException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Selector();
}
public class PuppeteerSharp.SessionEventArgs : object {
    [CompilerGeneratedAttribute]
private ICDPSession <Session>k__BackingField;
    public ICDPSession Session { get; public set; }
    internal SessionEventArgs(ICDPSession session);
    [CompilerGeneratedAttribute]
public ICDPSession get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(ICDPSession value);
}
internal class PuppeteerSharp.States.DisposedState : State {
    public DisposedState(StateManager stateManager);
    public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    public virtual Task StartAsync(LauncherBase p);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
    public virtual void Dispose(LauncherBase p);
}
internal class PuppeteerSharp.States.ExitedState : State {
    public ExitedState(StateManager stateManager);
    public void EnterFrom(LauncherBase p, State fromState);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
    public virtual Task WaitForExitAsync(LauncherBase p);
}
internal class PuppeteerSharp.States.ExitingState : State {
    public ExitingState(StateManager stateManager);
    public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    [AsyncStateMachineAttribute("PuppeteerSharp.States.ExitingState/<ExitAsync>d__2")]
public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
}
internal class PuppeteerSharp.States.InitialState : State {
    public InitialState(StateManager stateManager);
    public virtual Task StartAsync(LauncherBase p);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
    public virtual Task WaitForExitAsync(LauncherBase p);
    private Exception InvalidOperation(string v);
}
internal class PuppeteerSharp.States.KillingState : State {
    public KillingState(StateManager stateManager);
    [AsyncStateMachineAttribute("PuppeteerSharp.States.KillingState/<EnterFromAsync>d__1")]
public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
}
internal class PuppeteerSharp.States.ProcessStartingState : State {
    public ProcessStartingState(StateManager stateManager);
    public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    public virtual Task StartAsync(LauncherBase p);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
    public virtual void Dispose(LauncherBase p);
    [AsyncStateMachineAttribute("PuppeteerSharp.States.ProcessStartingState/<StartCoreAsync>d__6")]
protected virtual Task StartCoreAsync(LauncherBase p);
}
internal class PuppeteerSharp.States.StartedState : State {
    public StartedState(StateManager stateManager);
    public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    public virtual Task StartAsync(LauncherBase p);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
}
internal abstract class PuppeteerSharp.States.State : object {
    [CompilerGeneratedAttribute]
private StateManager <StateManager>k__BackingField;
    public StateManager StateManager { get; public set; }
    public bool IsExiting { get; }
    public bool IsExited { get; }
    public State(StateManager stateManager);
    [CompilerGeneratedAttribute]
public StateManager get_StateManager();
    [CompilerGeneratedAttribute]
public void set_StateManager(StateManager value);
    public bool get_IsExiting();
    public bool get_IsExited();
    public virtual Task EnterFromAsync(LauncherBase p, State fromState);
    public virtual Task EnterFromAsync(LauncherBase p, State fromState, TimeSpan timeout);
    public virtual Task StartAsync(LauncherBase p);
    public virtual Task ExitAsync(LauncherBase p, TimeSpan timeout);
    public virtual Task KillAsync(LauncherBase p);
    public virtual Task WaitForExitAsync(LauncherBase p);
    public virtual void Dispose(LauncherBase p);
    public virtual string ToString();
    internal virtual void Leave(LauncherBase p);
    protected static void Kill(LauncherBase p);
    private InvalidOperationException InvalidOperation(string operationName);
}
internal class PuppeteerSharp.States.StateManager : object {
    private State _currentState;
    [CompilerGeneratedAttribute]
private State <Initial>k__BackingField;
    [CompilerGeneratedAttribute]
private State <Starting>k__BackingField;
    [CompilerGeneratedAttribute]
private StartedState <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private State <Exiting>k__BackingField;
    [CompilerGeneratedAttribute]
private State <Killing>k__BackingField;
    [CompilerGeneratedAttribute]
private ExitedState <Exited>k__BackingField;
    [CompilerGeneratedAttribute]
private State <Disposed>k__BackingField;
    public State CurrentState { get; public set; }
    internal State Initial { get; internal set; }
    internal State Starting { get; internal set; }
    internal StartedState Started { get; internal set; }
    internal State Exiting { get; internal set; }
    internal State Killing { get; internal set; }
    internal ExitedState Exited { get; internal set; }
    internal State Disposed { get; internal set; }
    public State get_CurrentState();
    public void set_CurrentState(State value);
    [CompilerGeneratedAttribute]
internal State get_Initial();
    [CompilerGeneratedAttribute]
internal void set_Initial(State value);
    [CompilerGeneratedAttribute]
internal State get_Starting();
    [CompilerGeneratedAttribute]
internal void set_Starting(State value);
    [CompilerGeneratedAttribute]
internal StartedState get_Started();
    [CompilerGeneratedAttribute]
internal void set_Started(StartedState value);
    [CompilerGeneratedAttribute]
internal State get_Exiting();
    [CompilerGeneratedAttribute]
internal void set_Exiting(State value);
    [CompilerGeneratedAttribute]
internal State get_Killing();
    [CompilerGeneratedAttribute]
internal void set_Killing(State value);
    [CompilerGeneratedAttribute]
internal ExitedState get_Exited();
    [CompilerGeneratedAttribute]
internal void set_Exited(ExitedState value);
    [CompilerGeneratedAttribute]
internal State get_Disposed();
    [CompilerGeneratedAttribute]
internal void set_Disposed(State value);
    public bool TryEnter(LauncherBase p, State fromState, State toState);
}
public enum PuppeteerSharp.SupportedBrowser : Enum {
    public int value__;
    public static SupportedBrowser Chrome;
    public static SupportedBrowser Firefox;
    public static SupportedBrowser Chromium;
    public static SupportedBrowser ChromeHeadlessShell;
}
[DebuggerDisplayAttribute("Target {Type} - {Url}")]
public abstract class PuppeteerSharp.Target : object {
    [CompilerGeneratedAttribute]
private BrowserContext <BrowserContext>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<InitializationStatus> <InitializedTaskWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <CloseTaskWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<bool, Task`1<CDPSession>> <SessionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITargetManager <TargetManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private CDPSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetInfo <TargetInfo>k__BackingField;
    public string Url { get; }
    public TargetType Type { get; }
    public string TargetId { get; }
    public ITarget Opener { get; }
    private IBrowser PuppeteerSharp.ITarget.Browser { get; }
    private IBrowserContext PuppeteerSharp.ITarget.BrowserContext { get; }
    internal BrowserContext BrowserContext { get; }
    internal Browser Browser { get; }
    internal Task`1<InitializationStatus> InitializedTask { get; }
    internal TaskCompletionSource`1<InitializationStatus> InitializedTaskWrapper { get; }
    internal Task CloseTask { get; }
    internal TaskCompletionSource`1<bool> CloseTaskWrapper { get; }
    internal Func`2<bool, Task`1<CDPSession>> SessionFactory { get; private set; }
    internal ITargetManager TargetManager { get; }
    internal bool IsInitialized { get; internal set; }
    internal CDPSession Session { get; }
    internal TargetInfo TargetInfo { get; internal set; }
    internal Target(TargetInfo targetInfo, CDPSession session, BrowserContext context, ITargetManager targetManager, Func`2<bool, Task`1<CDPSession>> sessionFactory);
    public sealed virtual string get_Url();
    public virtual TargetType get_Type();
    public sealed virtual string get_TargetId();
    public abstract virtual ITarget get_Opener();
    private sealed virtual override IBrowser PuppeteerSharp.ITarget.get_Browser();
    private sealed virtual override IBrowserContext PuppeteerSharp.ITarget.get_BrowserContext();
    [CompilerGeneratedAttribute]
internal BrowserContext get_BrowserContext();
    internal Browser get_Browser();
    internal Task`1<InitializationStatus> get_InitializedTask();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<InitializationStatus> get_InitializedTaskWrapper();
    internal Task get_CloseTask();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<bool> get_CloseTaskWrapper();
    [CompilerGeneratedAttribute]
internal Func`2<bool, Task`1<CDPSession>> get_SessionFactory();
    [CompilerGeneratedAttribute]
private void set_SessionFactory(Func`2<bool, Task`1<CDPSession>> value);
    [CompilerGeneratedAttribute]
internal ITargetManager get_TargetManager();
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
internal void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
internal CDPSession get_Session();
    [CompilerGeneratedAttribute]
internal TargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
internal void set_TargetInfo(TargetInfo value);
    public virtual Task`1<IPage> PageAsync();
    public virtual Task`1<WebWorker> WorkerAsync();
    public abstract virtual Task`1<IPage> AsPageAsync();
    public abstract virtual Task`1<ICDPSession> CreateCDPSessionAsync();
}
public class PuppeteerSharp.TargetChangedArgs : object {
    private TargetInfo _targetInfo;
    [CompilerGeneratedAttribute]
private Target <Target>k__BackingField;
    public TargetInfo TargetInfo { get; internal set; }
    public Target Target { get; internal set; }
    public TargetInfo get_TargetInfo();
    internal void set_TargetInfo(TargetInfo value);
    [CompilerGeneratedAttribute]
public Target get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(Target value);
}
public class PuppeteerSharp.TargetClosedException : PuppeteerException {
    [CompilerGeneratedAttribute]
private string <CloseReason>k__BackingField;
    public string CloseReason { get; }
    public TargetClosedException(string message);
    public TargetClosedException(string message, Exception innerException);
    public TargetClosedException(string message, string closeReason);
    protected TargetClosedException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_CloseReason();
}
internal class PuppeteerSharp.TargetCrashedException : PuppeteerException {
    public TargetCrashedException(string message);
    public TargetCrashedException(string message, Exception innerException);
    protected TargetCrashedException(SerializationInfo info, StreamingContext context);
}
public class PuppeteerSharp.TargetInfo : object {
    [CompilerGeneratedAttribute]
private TargetType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenerId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtype>k__BackingField;
    [JsonPropertyAttribute]
public TargetType Type { get; internal set; }
    [JsonPropertyAttribute]
public string Url { get; internal set; }
    [JsonPropertyAttribute]
public string TargetId { get; internal set; }
    [JsonPropertyAttribute]
public string BrowserContextId { get; internal set; }
    [JsonPropertyAttribute]
public string OpenerId { get; internal set; }
    [JsonPropertyAttribute]
public bool Attached { get; internal set; }
    [JsonPropertyAttribute]
public string Subtype { get; public set; }
    [CompilerGeneratedAttribute]
public TargetType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(TargetType value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_TargetId();
    [CompilerGeneratedAttribute]
internal void set_TargetId(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserContextId();
    [CompilerGeneratedAttribute]
internal void set_BrowserContextId(string value);
    [CompilerGeneratedAttribute]
public string get_OpenerId();
    [CompilerGeneratedAttribute]
internal void set_OpenerId(string value);
    [CompilerGeneratedAttribute]
public bool get_Attached();
    [CompilerGeneratedAttribute]
internal void set_Attached(bool value);
    [CompilerGeneratedAttribute]
public string get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(string value);
}
[JsonConverterAttribute("PuppeteerSharp.Helpers.Json.FlexibleStringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.TargetType : Enum {
    public int value__;
    public static TargetType Other;
    [EnumMemberAttribute]
public static TargetType Page;
    [EnumMemberAttribute]
public static TargetType ServiceWorker;
    [EnumMemberAttribute]
public static TargetType Browser;
    [EnumMemberAttribute]
public static TargetType BackgroundPage;
    [EnumMemberAttribute]
public static TargetType Worker;
    [EnumMemberAttribute]
public static TargetType Javascript;
    [EnumMemberAttribute]
public static TargetType Network;
    [EnumMemberAttribute]
public static TargetType Deprecation;
    [EnumMemberAttribute]
public static TargetType Security;
    [EnumMemberAttribute]
public static TargetType Recommendation;
    [EnumMemberAttribute]
public static TargetType SharedWorker;
    [EnumMemberAttribute]
public static TargetType IFrame;
    [EnumMemberAttribute]
public static TargetType Rendering;
    public static TargetType Webview;
    [EnumMemberAttribute]
public static TargetType Tab;
}
internal class PuppeteerSharp.TaskManager : object {
    [CompilerGeneratedAttribute]
private ConcurrentSet`1<WaitTask> <WaitTasks>k__BackingField;
    private ConcurrentSet`1<WaitTask> WaitTasks { get; }
    [CompilerGeneratedAttribute]
private ConcurrentSet`1<WaitTask> get_WaitTasks();
    internal void Add(WaitTask waitTask);
    internal void Delete(WaitTask waitTask);
    internal void RerunAll();
    internal void TerminateAll(Exception exception);
}
public class PuppeteerSharp.TimeoutSettings : object {
    private Nullable`1<int> _defaultNavigationTimeout;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public int NavigationTimeout { get; public set; }
    public int Timeout { get; public set; }
    public int get_NavigationTimeout();
    public void set_NavigationTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
}
public class PuppeteerSharp.Tracing : object {
    private static List`1<string> _defaultCategories;
    private ILogger _logger;
    private bool _recording;
    private string _path;
    private CDPSession _client;
    internal Tracing(CDPSession client);
    private static Tracing();
    public sealed virtual Task StartAsync(TracingOptions options);
    [AsyncStateMachineAttribute("PuppeteerSharp.Tracing/<StopAsync>d__7")]
public sealed virtual Task`1<string> StopAsync();
    internal void UpdateClient(CDPSession newSession);
}
public class PuppeteerSharp.TracingOptions : object {
    [CompilerGeneratedAttribute]
private bool <Screenshots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Categories>k__BackingField;
    public bool Screenshots { get; public set; }
    public string Path { get; public set; }
    public List`1<string> Categories { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Screenshots();
    [CompilerGeneratedAttribute]
public void set_Screenshots(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(List`1<string> value);
}
public interface PuppeteerSharp.Transport.IConnectionTransport {
    public bool IsClosed { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler`1<TransportClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler`1<TransportClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public abstract virtual bool get_IsClosed();
    public abstract virtual void StopReading();
    public abstract virtual Task SendAsync(string message);
}
public class PuppeteerSharp.Transport.MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public MessageReceivedEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
public class PuppeteerSharp.Transport.TransportClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <CloseReason>k__BackingField;
    public string CloseReason { get; public set; }
    public TransportClosedEventArgs(string closeReason);
    [CompilerGeneratedAttribute]
public string get_CloseReason();
    [CompilerGeneratedAttribute]
public void set_CloseReason(string value);
}
public class PuppeteerSharp.Transport.TransportFactory : MulticastDelegate {
    public TransportFactory(object object, IntPtr method);
    public virtual Task`1<IConnectionTransport> Invoke(Uri url, IConnectionOptions options, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(Uri url, IConnectionOptions options, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<IConnectionTransport> EndInvoke(IAsyncResult result);
}
public class PuppeteerSharp.Transport.TransportTaskScheduler : MulticastDelegate {
    public TransportTaskScheduler(object object, IntPtr method);
    public virtual void Invoke(Func`2<CancellationToken, Task> taskFactory, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(Func`2<CancellationToken, Task> taskFactory, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class PuppeteerSharp.Transport.WebSocketFactory : MulticastDelegate {
    public WebSocketFactory(object object, IntPtr method);
    public virtual Task`1<WebSocket> Invoke(Uri url, IConnectionOptions options, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(Uri url, IConnectionOptions options, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<WebSocket> EndInvoke(IAsyncResult result);
}
public class PuppeteerSharp.Transport.WebSocketTransport : object {
    public static TransportFactory DefaultTransportFactory;
    public static WebSocketFactory DefaultWebSocketFactory;
    public static TransportTaskScheduler DefaultTransportScheduler;
    private WebSocket _client;
    private bool _queueRequests;
    private TaskQueue _socketQueue;
    private CancellationTokenSource _readerCancellationSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<TransportClosedEventArgs> Closed;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public bool IsClosed { get; private set; }
    private WebSocketTransport(WebSocket client, TransportTaskScheduler scheduler, bool queueRequests);
    private static WebSocketTransport();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler`1<TransportClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler`1<TransportClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual Task SendAsync(string message);
    public sealed virtual void StopReading();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("PuppeteerSharp.Transport.WebSocketTransport/<CreateDefaultWebSocket>d__22")]
private static Task`1<WebSocket> CreateDefaultWebSocket(Uri url, IConnectionOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PuppeteerSharp.Transport.WebSocketTransport/<CreateDefaultTransport>d__23")]
private static Task`1<IConnectionTransport> CreateDefaultTransport(Uri url, IConnectionOptions connectionOptions, CancellationToken cancellationToken);
    private static void ScheduleTransportTask(Func`2<CancellationToken, Task> taskFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PuppeteerSharp.Transport.WebSocketTransport/<GetResponseAsync>d__25")]
private Task`1<object> GetResponseAsync(CancellationToken cancellationToken);
    private void OnClose(string closeReason);
}
public class PuppeteerSharp.UserAgentBrandVersion : object {
    [CompilerGeneratedAttribute]
private string <Brand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Brand { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Brand();
    [CompilerGeneratedAttribute]
public void set_Brand(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class PuppeteerSharp.UserAgentMetadata : object {
    [CompilerGeneratedAttribute]
private UserAgentBrandVersion[] <Brands>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mobile>k__BackingField;
    public UserAgentBrandVersion[] Brands { get; public set; }
    public string FullVersion { get; public set; }
    public string Platform { get; public set; }
    public string PlatformVersion { get; public set; }
    public string Architecture { get; public set; }
    public string Model { get; public set; }
    public bool Mobile { get; public set; }
    [CompilerGeneratedAttribute]
public UserAgentBrandVersion[] get_Brands();
    [CompilerGeneratedAttribute]
public void set_Brands(UserAgentBrandVersion[] value);
    [CompilerGeneratedAttribute]
public string get_FullVersion();
    [CompilerGeneratedAttribute]
public void set_FullVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformVersion();
    [CompilerGeneratedAttribute]
public void set_PlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
    [CompilerGeneratedAttribute]
public bool get_Mobile();
    [CompilerGeneratedAttribute]
public void set_Mobile(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class PuppeteerSharp.ViewPortOptions : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMobile>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeviceScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLandscape>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasTouch>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("0")]
public static ViewPortOptions Default { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public bool IsMobile { get; public set; }
    public double DeviceScaleFactor { get; public set; }
    public bool IsLandscape { get; public set; }
    public bool HasTouch { get; public set; }
    [CompilerGeneratedAttribute]
protected ViewPortOptions(ViewPortOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("0")]
public static ViewPortOptions get_Default();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public bool get_IsMobile();
    [CompilerGeneratedAttribute]
public void set_IsMobile(bool value);
    [CompilerGeneratedAttribute]
public double get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(double value);
    [CompilerGeneratedAttribute]
public bool get_IsLandscape();
    [CompilerGeneratedAttribute]
public void set_IsLandscape(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasTouch();
    [CompilerGeneratedAttribute]
public void set_HasTouch(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ViewPortOptions left, ViewPortOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ViewPortOptions left, ViewPortOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ViewPortOptions other);
    [CompilerGeneratedAttribute]
public virtual ViewPortOptions <Clone>$();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum PuppeteerSharp.VisionDeficiency : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VisionDeficiency None;
    [EnumMemberAttribute]
public static VisionDeficiency Achromatopsia;
    [EnumMemberAttribute]
public static VisionDeficiency BlurredVision;
    [EnumMemberAttribute]
public static VisionDeficiency Deuteranopia;
    [EnumMemberAttribute]
public static VisionDeficiency Protanopia;
    [EnumMemberAttribute]
public static VisionDeficiency Tritanopia;
}
public class PuppeteerSharp.WaitForFunctionOptions : WaitForOptions {
    [CompilerGeneratedAttribute]
private WaitForFunctionPollingOption <Polling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementHandle <Root>k__BackingField;
    public WaitForFunctionPollingOption Polling { get; public set; }
    public Nullable`1<int> PollingInterval { get; public set; }
    internal IElementHandle Root { get; internal set; }
    [CompilerGeneratedAttribute]
public WaitForFunctionPollingOption get_Polling();
    [CompilerGeneratedAttribute]
public void set_Polling(WaitForFunctionPollingOption value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PollingInterval();
    [CompilerGeneratedAttribute]
public void set_PollingInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal IElementHandle get_Root();
    [CompilerGeneratedAttribute]
internal void set_Root(IElementHandle value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum PuppeteerSharp.WaitForFunctionPollingOption : Enum {
    public int value__;
    public static WaitForFunctionPollingOption Raf;
    public static WaitForFunctionPollingOption Mutation;
}
public class PuppeteerSharp.WaitForNetworkIdleOptions : WaitForOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IdleTime>k__BackingField;
    public Nullable`1<int> IdleTime { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IdleTime();
    [CompilerGeneratedAttribute]
public void set_IdleTime(Nullable`1<int> value);
}
public class PuppeteerSharp.WaitForOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    public Nullable`1<int> Timeout { get; public set; }
    public WaitForOptions(int timeout);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
}
public class PuppeteerSharp.WaitForSelectorOptions : WaitForOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementHandle <Root>k__BackingField;
    public Nullable`1<bool> Visible { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public IElementHandle Root { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IElementHandle get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(IElementHandle value);
}
internal class PuppeteerSharp.WaitTask : object {
    private Realm _realm;
    private string _fn;
    private Nullable`1<WaitForFunctionPollingOption> _polling;
    private Nullable`1<int> _pollingInterval;
    private Object[] _args;
    private Task _timeoutTimer;
    private IElementHandle _root;
    private CancellationTokenSource _cts;
    private TaskCompletionSource`1<IJSHandle> _result;
    private bool _isDisposed;
    private IJSHandle _poller;
    private bool _terminated;
    internal Task`1<IJSHandle> Task { get; }
    internal WaitTask(Realm realm, string fn, bool isExpression, WaitForFunctionPollingOption polling, Nullable`1<int> pollingInterval, int timeout, IElementHandle root, Object[] args);
    internal Task`1<IJSHandle> get_Task();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("PuppeteerSharp.WaitTask/<RerunAsync>d__16")]
internal Task RerunAsync();
    [AsyncStateMachineAttribute("PuppeteerSharp.WaitTask/<TerminateAsync>d__17")]
internal Task TerminateAsync(Exception exception);
    private Exception GetBadException(Exception exception);
    private void Cleanup();
}
public class PuppeteerSharp.WaitTaskTimeoutException : PuppeteerException {
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementType>k__BackingField;
    public int Timeout { get; }
    public string ElementType { get; }
    public WaitTaskTimeoutException(string message);
    public WaitTaskTimeoutException(int timeout);
    public WaitTaskTimeoutException(int timeout, string elementType);
    public WaitTaskTimeoutException(string message, Exception innerException);
    protected WaitTaskTimeoutException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public string get_ElementType();
}
public enum PuppeteerSharp.WaitUntilNavigation : Enum {
    public int value__;
    public static WaitUntilNavigation Load;
    public static WaitUntilNavigation DOMContentLoaded;
    public static WaitUntilNavigation Networkidle0;
    public static WaitUntilNavigation Networkidle2;
}
public abstract class PuppeteerSharp.WebWorker : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public CDPSession Client { get; }
    private CDPSession PuppeteerSharp.IEnvironment.Client { get; }
    private Realm PuppeteerSharp.IEnvironment.MainRealm { get; }
    internal IsolatedWorld World { get; }
    internal WebWorker(string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    public abstract virtual CDPSession get_Client();
    private sealed virtual override CDPSession PuppeteerSharp.IEnvironment.get_Client();
    private sealed virtual override Realm PuppeteerSharp.IEnvironment.get_MainRealm();
    internal abstract virtual IsolatedWorld get_World();
    [AsyncStateMachineAttribute("PuppeteerSharp.WebWorker/<EvaluateExpressionAsync>d__12`1")]
public Task`1<T> EvaluateExpressionAsync(string script);
    [AsyncStateMachineAttribute("PuppeteerSharp.WebWorker/<EvaluateFunctionAsync>d__13")]
public Task`1<JToken> EvaluateFunctionAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.WebWorker/<EvaluateFunctionAsync>d__14`1")]
public Task`1<T> EvaluateFunctionAsync(string script, Object[] args);
    [AsyncStateMachineAttribute("PuppeteerSharp.WebWorker/<EvaluateExpressionHandleAsync>d__15")]
public Task`1<IJSHandle> EvaluateExpressionHandleAsync(string script);
    public abstract virtual Task CloseAsync();
}
public class PuppeteerSharp.WorkerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private WebWorker <Worker>k__BackingField;
    public WebWorker Worker { get; public set; }
    public WorkerEventArgs(WebWorker worker);
    [CompilerGeneratedAttribute]
public WebWorker get_Worker();
    [CompilerGeneratedAttribute]
public void set_Worker(WebWorker value);
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
