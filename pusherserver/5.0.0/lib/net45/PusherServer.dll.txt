internal class PusherServer.BatchEvent : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <channel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <socket_id>k__BackingField;
    public string name { get; public set; }
    public string data { get; public set; }
    public string channel { get; public set; }
    public string socket_id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public string get_data();
    [CompilerGeneratedAttribute]
public void set_data(string value);
    [CompilerGeneratedAttribute]
public string get_channel();
    [CompilerGeneratedAttribute]
public void set_channel(string value);
    [CompilerGeneratedAttribute]
public string get_socket_id();
    [CompilerGeneratedAttribute]
public void set_socket_id(string value);
}
internal class PusherServer.BatchTriggerBody : object {
    [CompilerGeneratedAttribute]
private BatchEvent[] <batch>k__BackingField;
    public BatchEvent[] batch { get; public set; }
    [CompilerGeneratedAttribute]
public BatchEvent[] get_batch();
    [CompilerGeneratedAttribute]
public void set_batch(BatchEvent[] value);
}
public class PusherServer.ChannelAttributes : object {
    [CompilerGeneratedAttribute]
private int <user_count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <subscription_count>k__BackingField;
    public int user_count { get; public set; }
    public int subscription_count { get; public set; }
    [CompilerGeneratedAttribute]
public int get_user_count();
    [CompilerGeneratedAttribute]
public void set_user_count(int value);
    [CompilerGeneratedAttribute]
public int get_subscription_count();
    [CompilerGeneratedAttribute]
public void set_subscription_count(int value);
}
[DataContractAttribute]
internal class PusherServer.ChannelAuthorizationResponse : object {
    private string _appKey;
    private string _appSecret;
    private string _channelName;
    private string _socketId;
    private PresenceChannelData _presenceData;
    private Byte[] _key;
    [DataMemberAttribute]
public string auth { get; }
    [DataMemberAttribute]
public string channel_data { get; }
    [DataMemberAttribute]
public string shared_secret { get; }
    public ChannelAuthorizationResponse(string appKey, string appSecret, string channelName, string socketId);
    public ChannelAuthorizationResponse(string appKey, string appSecret, string channelName, string socketId, Byte[] masterEncryptionKey);
    public ChannelAuthorizationResponse(string appKey, string appSecret, string channelName, string socketId, PresenceChannelData presenceData);
    public sealed virtual string get_auth();
    public sealed virtual string get_channel_data();
    public sealed virtual string get_shared_secret();
    public sealed virtual string ToJson();
    public virtual string ToString();
}
internal class PusherServer.ChannelDataEncrypter : object {
    private sealed virtual override EncryptedChannelData PusherServer.IChannelDataEncrypter.EncryptData(string channelName, string jsonData, Byte[] encryptionMasterKey);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class PusherServer.ChannelsList : object {
    private Dictionary`2<string, Dictionary`2<string, string>> _channelsInfo;
    public Dictionary`2<string, string> Item { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> Channels { get; public set; }
    public Dictionary`2<string, string> get_Item(string channelName);
    public void set_Item(string channelName, Dictionary`2<string, string> value);
    public Dictionary`2<string, Dictionary`2<string, string>> get_Channels();
    public void set_Channels(Dictionary`2<string, Dictionary`2<string, string>> value);
}
internal class PusherServer.CryptoHelper : object {
    internal static string GetMd5Hash(string jsonData);
    private static string BytesToHex(IEnumerable`1<byte> byteArray);
    internal static string GetHmac256(string secret, string toSign);
    internal static Byte[] GenerateSharedSecretHash(Byte[] key, string toSign);
    internal static string GenerateSharedSecret(Byte[] key, string toSign);
}
public class PusherServer.DefaultDeserializer : object {
    public sealed virtual T Deserialize(string stringToDeserialize);
}
public class PusherServer.DefaultSerializer : object {
    private static JsonSerializerSettings _settings;
    [CompilerGeneratedAttribute]
private static ISerializeObjectsToJson <Default>k__BackingField;
    public static ISerializeObjectsToJson Default { get; }
    private static DefaultSerializer();
    [CompilerGeneratedAttribute]
public static ISerializeObjectsToJson get_Default();
    public sealed virtual string Serialize(object objectToSerialize);
}
internal class PusherServer.EncryptedChannelData : object {
    [CompilerGeneratedAttribute]
private string <nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ciphertext>k__BackingField;
    public string nonce { get; public set; }
    public string ciphertext { get; public set; }
    public EncryptedChannelData(Byte[] nonceBytes, Byte[] encrypted);
    [CompilerGeneratedAttribute]
public string get_nonce();
    [CompilerGeneratedAttribute]
public void set_nonce(string value);
    [CompilerGeneratedAttribute]
public string get_ciphertext();
    [CompilerGeneratedAttribute]
public void set_ciphertext(string value);
}
public class PusherServer.Event : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SocketId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public string EventName { get; public set; }
    public string Channel { get; public set; }
    public string SocketId { get; public set; }
    public object Data { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public string get_SocketId();
    [CompilerGeneratedAttribute]
public void set_SocketId(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
}
public class PusherServer.EventIdData : object {
    private Dictionary`2<string, string> _eventIds;
    private Dictionary`2<string, ChannelAttributes> _channelStates;
    public Dictionary`2<string, string> event_ids { get; }
    public Dictionary`2<string, ChannelAttributes> channels { get; }
    public Dictionary`2<string, string> get_event_ids();
    public Dictionary`2<string, ChannelAttributes> get_channels();
}
public class PusherServer.Exceptions.ChannelNameFormatException : FormatException {
    public ChannelNameFormatException(string actualValue);
}
public class PusherServer.Exceptions.ChannelNameLengthExceededException : ArgumentOutOfRangeException {
    public ChannelNameLengthExceededException(string paramName, int actualValue);
}
public class PusherServer.Exceptions.EncryptionMasterKeyException : ArgumentOutOfRangeException {
    public EncryptionMasterKeyException(string paramName, int actualValue);
}
public class PusherServer.Exceptions.EventBatchSizeExceededException : ArgumentOutOfRangeException {
    public EventBatchSizeExceededException(string paramName, int actualValue);
}
public class PusherServer.Exceptions.EventDataSizeExceededException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private string <ChannelName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    public string ChannelName { get; public set; }
    public string EventName { get; public set; }
    public EventDataSizeExceededException(int sizeLimitInBytes, int actualValue);
    [CompilerGeneratedAttribute]
public string get_ChannelName();
    [CompilerGeneratedAttribute]
public void set_ChannelName(string value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
}
public class PusherServer.Exceptions.SocketIdFormatException : FormatException {
    public SocketIdFormatException(string actualValue);
}
public class PusherServer.Exceptions.TriggerResponseException : Exception {
    public TriggerResponseException(string message, Exception innerException);
}
public class PusherServer.GetResult`1 : RequestResult {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; }
    public GetResult`1(HttpResponseMessage response, string content);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
}
public interface PusherServer.IAuthenticationData {
}
public interface PusherServer.IChannelAuthorizationResponse {
    public string auth { get; }
    public string channel_data { get; }
    public string shared_secret { get; }
    public abstract virtual string get_auth();
    public abstract virtual string get_channel_data();
    public abstract virtual string get_shared_secret();
    public abstract virtual string ToJson();
}
internal interface PusherServer.IChannelDataEncrypter {
    public abstract virtual EncryptedChannelData EncryptData(string channelName, string jsonData, Byte[] encryptionMasterKey);
}
public interface PusherServer.IDeserializeJsonStrings {
    public abstract virtual T Deserialize(string stringToDeserialize);
}
public interface PusherServer.IGetResult`1 {
    public T Data { get; }
    public abstract virtual T get_Data();
}
public interface PusherServer.IPusher {
    public abstract virtual Task`1<ITriggerResult> TriggerAsync(string channelName, string eventName, object data, ITriggerOptions options);
    public abstract virtual Task`1<ITriggerResult> TriggerAsync(String[] channelNames, string eventName, object data, ITriggerOptions options);
    public abstract virtual Task`1<ITriggerResult> TriggerAsync(Event[] events);
    public abstract virtual IAuthenticationData Authenticate(string channelName, string socketId);
    public abstract virtual IAuthenticationData Authenticate(string channelName, string socketId, PresenceChannelData data);
    public abstract virtual IChannelAuthorizationResponse AuthorizeChannel(string channelName, string socketId);
    public abstract virtual IChannelAuthorizationResponse AuthorizeChannel(string channelName, string socketId, PresenceChannelData data);
    public abstract virtual IUserAuthenticationResponse AuthenticateUser(string socketId, UserData userData);
    public abstract virtual Task`1<IGetResult`1<T>> GetAsync(string resource, object parameters);
    public abstract virtual IWebHook ProcessWebHook(string signature, string body);
    public abstract virtual Task`1<IGetResult`1<T>> FetchUsersFromPresenceChannelAsync(string channelName);
    public abstract virtual Task`1<IGetResult`1<T>> FetchStateForChannelAsync(string channelName, object info);
    public abstract virtual Task`1<IGetResult`1<T>> FetchStateForChannelsAsync(object info);
}
public interface PusherServer.IPusherOptions {
    public bool Encrypted { get; public set; }
    public int Port { get; public set; }
    public ISerializeObjectsToJson JsonSerializer { get; public set; }
    public IDeserializeJsonStrings JsonDeserializer { get; public set; }
    public IPusherRestClient RestClient { get; public set; }
    public TimeSpan RestClientTimeout { get; public set; }
    public string HostName { get; public set; }
    public string Cluster { get; public set; }
    public Nullable`1<int> BatchEventDataSizeLimit { get; public set; }
    public ITraceLogger TraceLogger { get; public set; }
    public Byte[] EncryptionMasterKey { get; public set; }
    public abstract virtual bool get_Encrypted();
    public abstract virtual void set_Encrypted(bool value);
    public abstract virtual int get_Port();
    public abstract virtual void set_Port(int value);
    public abstract virtual ISerializeObjectsToJson get_JsonSerializer();
    public abstract virtual void set_JsonSerializer(ISerializeObjectsToJson value);
    public abstract virtual IDeserializeJsonStrings get_JsonDeserializer();
    public abstract virtual void set_JsonDeserializer(IDeserializeJsonStrings value);
    public abstract virtual IPusherRestClient get_RestClient();
    public abstract virtual void set_RestClient(IPusherRestClient value);
    public abstract virtual TimeSpan get_RestClientTimeout();
    public abstract virtual void set_RestClientTimeout(TimeSpan value);
    public abstract virtual string get_HostName();
    public abstract virtual void set_HostName(string value);
    public abstract virtual string get_Cluster();
    public abstract virtual void set_Cluster(string value);
    public abstract virtual Nullable`1<int> get_BatchEventDataSizeLimit();
    public abstract virtual void set_BatchEventDataSizeLimit(Nullable`1<int> value);
    public abstract virtual ITraceLogger get_TraceLogger();
    public abstract virtual void set_TraceLogger(ITraceLogger value);
    public abstract virtual Byte[] get_EncryptionMasterKey();
    public abstract virtual void set_EncryptionMasterKey(Byte[] value);
    public abstract virtual Uri GetBaseUrl();
}
public interface PusherServer.IRequestResult {
    public string Body { get; }
    public HttpStatusCode StatusCode { get; }
    public abstract virtual string get_Body();
    public abstract virtual HttpStatusCode get_StatusCode();
}
public interface PusherServer.ISerializeObjectsToJson {
    public abstract virtual string Serialize(object objectToSerialize);
}
public interface PusherServer.ITriggerOptions {
    public string SocketId { get; public set; }
    public List`1<string> Info { get; public set; }
    public abstract virtual string get_SocketId();
    public abstract virtual void set_SocketId(string value);
    public abstract virtual List`1<string> get_Info();
    public abstract virtual void set_Info(List`1<string> value);
}
public interface PusherServer.ITriggerResult {
    public IDictionary`2<string, string> EventIds { get; }
    public IDictionary`2<string, ChannelAttributes> ChannelAttributes { get; }
    public abstract virtual IDictionary`2<string, string> get_EventIds();
    public abstract virtual IDictionary`2<string, ChannelAttributes> get_ChannelAttributes();
}
public interface PusherServer.IUserAuthenticationResponse {
    public string auth { get; }
    public string user_data { get; }
    public abstract virtual string get_auth();
    public abstract virtual string get_user_data();
    public abstract virtual string ToJson();
}
public interface PusherServer.IWebHook {
    public bool IsValid { get; }
    public Dictionary`2[] Events { get; }
    public DateTime Time { get; }
    public String[] ValidationErrors { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual Dictionary`2[] get_Events();
    public abstract virtual DateTime get_Time();
    public abstract virtual String[] get_ValidationErrors();
}
public class PusherServer.PresenceChannelData : object {
    [CompilerGeneratedAttribute]
private string <user_id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <user_info>k__BackingField;
    public string user_id { get; public set; }
    public object user_info { get; public set; }
    [CompilerGeneratedAttribute]
public string get_user_id();
    [CompilerGeneratedAttribute]
public void set_user_id(string value);
    [CompilerGeneratedAttribute]
public object get_user_info();
    [CompilerGeneratedAttribute]
public void set_user_info(object value);
}
public class PusherServer.Pusher : object {
    private static string ChannelUsersResource;
    private static string ChannelResource;
    private static string MultipleChannelsResource;
    private string _appKey;
    private string _appSecret;
    private IPusherOptions _options;
    private IAuthenticatedRequestFactory _factory;
    private IChannelDataEncrypter _dataEncrypter;
    public static Version VERSION { get; }
    public static string LIBRARY_NAME { get; }
    public Pusher(string appId, string appKey, string appSecret, IPusherOptions options);
    public static Version get_VERSION();
    public static string get_LIBRARY_NAME();
    [AsyncStateMachineAttribute("PusherServer.Pusher/<TriggerAsync>d__13")]
public sealed virtual Task`1<ITriggerResult> TriggerAsync(string channelName, string eventName, object data, ITriggerOptions options);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<TriggerAsync>d__14")]
public sealed virtual Task`1<ITriggerResult> TriggerAsync(String[] channelNames, string eventName, object data, ITriggerOptions options);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<TriggerAsync>d__15")]
public sealed virtual Task`1<ITriggerResult> TriggerAsync(Event[] events);
    private string SerializeData(string channelName, object data);
    private TriggerBody CreateTriggerBody(String[] channelNames, string eventName, object data, ITriggerOptions options);
    private BatchTriggerBody CreateBatchTriggerBody(Event[] events);
    public sealed virtual IAuthenticationData Authenticate(string channelName, string socketId);
    public sealed virtual IAuthenticationData Authenticate(string channelName, string socketId, PresenceChannelData presenceData);
    public sealed virtual IChannelAuthorizationResponse AuthorizeChannel(string channelName, string socketId);
    public sealed virtual IChannelAuthorizationResponse AuthorizeChannel(string channelName, string socketId, PresenceChannelData presenceData);
    public sealed virtual IUserAuthenticationResponse AuthenticateUser(string socketId, UserData userData);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<GetAsync>d__24`1")]
public sealed virtual Task`1<IGetResult`1<T>> GetAsync(string resource, object parameters);
    public sealed virtual IWebHook ProcessWebHook(string signature, string body);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<FetchUsersFromPresenceChannelAsync>d__26`1")]
public sealed virtual Task`1<IGetResult`1<T>> FetchUsersFromPresenceChannelAsync(string channelName);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<FetchStateForChannelAsync>d__27`1")]
public sealed virtual Task`1<IGetResult`1<T>> FetchStateForChannelAsync(string channelName, object info);
    [AsyncStateMachineAttribute("PusherServer.Pusher/<FetchStateForChannelsAsync>d__28`1")]
public sealed virtual Task`1<IGetResult`1<T>> FetchStateForChannelsAsync(object info);
    internal static bool IsPrivateEncryptedChannel(string channelName);
    private void DebugTriggerRequest(IPusherRestRequest request);
    private void DebugTriggerResponse(TriggerResult response);
    private static void ThrowArgumentExceptionIfNullOrEmpty(string value, string argumentName);
}
public class PusherServer.PusherOptions : object {
    public static string DEFAULT_REST_API_HOST;
    public static int DEFAULT_BATCH_EVENT_DATA_SIZE_LIMIT;
    private static int DEFAULT_HTTPS_PORT;
    private static int DEFAULT_HTTP_PORT;
    private IPusherRestClient _pusherClient;
    private bool _encrypted;
    private bool _portModified;
    private bool _hostSet;
    private int _port;
    private string _hostName;
    private string _cluster;
    private ISerializeObjectsToJson _jsonSerializer;
    private IDeserializeJsonStrings _jsonDeserializer;
    [CompilerGeneratedAttribute]
private TimeSpan <RestClientTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BatchEventDataSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceLogger <TraceLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptionMasterKey>k__BackingField;
    public bool Encrypted { get; public set; }
    public int Port { get; public set; }
    public string Cluster { get; public set; }
    public IPusherRestClient RestClient { get; public set; }
    public TimeSpan RestClientTimeout { get; public set; }
    public string HostName { get; public set; }
    public ISerializeObjectsToJson JsonSerializer { get; public set; }
    public IDeserializeJsonStrings JsonDeserializer { get; public set; }
    public Nullable`1<int> BatchEventDataSizeLimit { get; public set; }
    public ITraceLogger TraceLogger { get; public set; }
    public Byte[] EncryptionMasterKey { get; public set; }
    public sealed virtual bool get_Encrypted();
    public sealed virtual void set_Encrypted(bool value);
    public sealed virtual int get_Port();
    public sealed virtual void set_Port(int value);
    public sealed virtual string get_Cluster();
    public sealed virtual void set_Cluster(string value);
    public sealed virtual IPusherRestClient get_RestClient();
    public sealed virtual void set_RestClient(IPusherRestClient value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_RestClientTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RestClientTimeout(TimeSpan value);
    public sealed virtual string get_HostName();
    public sealed virtual void set_HostName(string value);
    public sealed virtual ISerializeObjectsToJson get_JsonSerializer();
    public sealed virtual void set_JsonSerializer(ISerializeObjectsToJson value);
    public sealed virtual IDeserializeJsonStrings get_JsonDeserializer();
    public sealed virtual void set_JsonDeserializer(IDeserializeJsonStrings value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_BatchEventDataSizeLimit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BatchEventDataSizeLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITraceLogger get_TraceLogger();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TraceLogger(ITraceLogger value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_EncryptionMasterKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EncryptionMasterKey(Byte[] value);
    public sealed virtual Uri GetBaseUrl();
    private string GetPort();
}
public class PusherServer.RawBodySerializer : object {
    public sealed virtual string Serialize(object body);
}
public abstract class PusherServer.RequestResult : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpStatusCode StatusCode { get; protected set; }
    public string Body { get; protected set; }
    public HttpContent OriginalContent { get; }
    public HttpResponseMessage Response { get; private set; }
    protected RequestResult(HttpResponseMessage response, string originalContent);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
protected void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    public HttpContent get_OriginalContent();
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
}
public class PusherServer.RestfulClient.AuthenticatedRequestFactory : object {
    private string _appKey;
    private string _appId;
    private string _appSecret;
    public AuthenticatedRequestFactory(string appKey, string appId, string appSecret);
    public sealed virtual IPusherRestRequest Build(PusherMethod requestType, string resource, object requestParameters, object requestBody);
    private SortedDictionary`2<string, string> GetQueryString(object requestParameters, object requestBody);
    private static SortedDictionary`2<string, string> GetStringBuilderfromSourceObject(object sourceObject);
}
public interface PusherServer.RestfulClient.IAuthenticatedRequestFactory {
    public abstract virtual IPusherRestRequest Build(PusherMethod requestType, string resource, object requestParameters, object requestBody);
}
public interface PusherServer.RestfulClient.IPusherRestClient {
    public Uri BaseUrl { get; }
    public TimeSpan Timeout { get; public set; }
    public abstract virtual Task`1<GetResult`1<T>> ExecuteGetAsync(IPusherRestRequest pusherRestRequest);
    public abstract virtual Task`1<TriggerResult> ExecutePostAsync(IPusherRestRequest pusherRestRequest);
    public abstract virtual Uri get_BaseUrl();
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual void set_Timeout(TimeSpan value);
}
public interface PusherServer.RestfulClient.IPusherRestRequest {
    public PusherMethod Method { get; public set; }
    public string ResourceUri { get; }
    public object Body { get; public set; }
    public abstract virtual PusherMethod get_Method();
    public abstract virtual void set_Method(PusherMethod value);
    public abstract virtual string get_ResourceUri();
    public abstract virtual object get_Body();
    public abstract virtual void set_Body(object value);
    public abstract virtual string GetContentAsJsonString();
}
public enum PusherServer.RestfulClient.PusherMethod : Enum {
    public int value__;
    public static PusherMethod GET;
    public static PusherMethod POST;
}
public class PusherServer.RestfulClient.PusherRestClient : object {
    private string _libraryName;
    private string _version;
    private HttpClient _httpClient;
    public Uri BaseUrl { get; }
    public TimeSpan Timeout { get; public set; }
    public PusherRestClient(string baseAddress, string libraryName, Version version);
    public PusherRestClient(Uri baseAddress, string libraryName, Version version);
    public PusherRestClient(HttpClient httpClient, string libraryName, Version version);
    private static HttpClient CreateDefaultHttpClient(Uri baseAddress);
    public sealed virtual Uri get_BaseUrl();
    public sealed virtual TimeSpan get_Timeout();
    public sealed virtual void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("PusherServer.RestfulClient.PusherRestClient/<ExecuteGetAsync>d__12`1")]
public sealed virtual Task`1<GetResult`1<T>> ExecuteGetAsync(IPusherRestRequest pusherRestRequest);
    [AsyncStateMachineAttribute("PusherServer.RestfulClient.PusherRestClient/<ExecutePostAsync>d__13")]
public sealed virtual Task`1<TriggerResult> ExecutePostAsync(IPusherRestRequest pusherRestRequest);
}
public class PusherServer.RestfulClient.PusherRestRequest : object {
    [CompilerGeneratedAttribute]
private PusherMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    public PusherMethod Method { get; public set; }
    public string ResourceUri { get; }
    public object Body { get; public set; }
    public PusherRestRequest(string resourceUri);
    [CompilerGeneratedAttribute]
public sealed virtual PusherMethod get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(PusherMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceUri();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(object value);
    public sealed virtual string GetContentAsJsonString();
}
internal class PusherServer.TriggerBody : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <data>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <channels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <socket_id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <info>k__BackingField;
    public string name { get; public set; }
    public string data { get; public set; }
    public String[] channels { get; public set; }
    public string socket_id { get; public set; }
    public string info { get; public set; }
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public string get_data();
    [CompilerGeneratedAttribute]
public void set_data(string value);
    [CompilerGeneratedAttribute]
public String[] get_channels();
    [CompilerGeneratedAttribute]
public void set_channels(String[] value);
    [CompilerGeneratedAttribute]
public string get_socket_id();
    [CompilerGeneratedAttribute]
public void set_socket_id(string value);
    [CompilerGeneratedAttribute]
public string get_info();
    [CompilerGeneratedAttribute]
public void set_info(string value);
}
public class PusherServer.TriggerOptions : object {
    [CompilerGeneratedAttribute]
private string <SocketId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Info>k__BackingField;
    public string SocketId { get; public set; }
    public List`1<string> Info { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SocketId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SocketId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Info(List`1<string> value);
}
public class PusherServer.TriggerResult : RequestResult {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EventIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ChannelAttributes> <ChannelAttributes>k__BackingField;
    public IDictionary`2<string, string> EventIds { get; }
    public IDictionary`2<string, ChannelAttributes> ChannelAttributes { get; }
    public TriggerResult(HttpResponseMessage response, string responseContent);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_EventIds();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, ChannelAttributes> get_ChannelAttributes();
}
[DataContractAttribute]
internal class PusherServer.UserAuthenticationResponse : object {
    private string _appKey;
    private string _appSecret;
    private string _socketId;
    private UserData _userData;
    [DataMemberAttribute]
public string auth { get; }
    [DataMemberAttribute]
public string user_data { get; }
    public UserAuthenticationResponse(string appKey, string appSecret, string socketId, UserData userData);
    public sealed virtual string get_auth();
    public sealed virtual string get_user_data();
    public sealed virtual string ToJson();
    public virtual string ToString();
}
public class PusherServer.UserData : object {
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <watchlist>k__BackingField;
    [CompilerGeneratedAttribute]
private object <user_info>k__BackingField;
    public string id { get; public set; }
    public String[] watchlist { get; public set; }
    public object user_info { get; public set; }
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public String[] get_watchlist();
    [CompilerGeneratedAttribute]
public void set_watchlist(String[] value);
    [CompilerGeneratedAttribute]
public object get_user_info();
    [CompilerGeneratedAttribute]
public void set_user_info(object value);
}
public class PusherServer.Util.DebugTraceLogger : object {
    public sealed virtual void Trace(string message);
}
public interface PusherServer.Util.ITraceLogger {
    public abstract virtual void Trace(string message);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[ComVisibleAttribute("False")]
[DebuggerTypeProxyAttribute("PusherServer.Util.ReadOnlyDictionaryDebugView`2")]
public class PusherServer.Util.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> source;
    private object syncRoot;
    public int Count { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public TValue Item { get; public set; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> dictionaryToWrap);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private static void ThrowNotSupportedException();
}
internal class PusherServer.Util.ReadOnlyDictionaryDebugView`2 : object {
    private IDictionary`2<TKey, TValue> dict;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public ReadOnlyDictionaryDebugView`2(ReadOnlyDictionary`2<TKey, TValue> dictionary);
    public KeyValuePair`2[] get_Items();
}
public static class PusherServer.ValidationHelper : object {
    public static Regex CHANNEL_NAME_REGEX;
    public static int CHANNEL_NAME_MAX_LENGTH;
    public static Regex SOCKET_ID_REGEX;
    public static int MAX_BATCH_SIZE;
    public static int ENCRYPTION_MASTER_KEY_LENGTH;
    private static ValidationHelper();
    internal static void ValidateSocketId(string socketId);
    internal static void ValidateChannelName(string channelName);
    internal static void ValidateChannelNames(IEnumerable`1<string> channelNames);
    internal static void ValidateBatchEvents(Event[] events);
    internal static void ValidateBatchEventData(string data, string channelName, string eventName, IPusherOptions options);
    internal static void ValidateEncryptionMasterKey(Byte[] encryptionMasterKey);
}
internal class PusherServer.WebHook : object {
    private WebHookData _webHookData;
    private List`1<string> _validationErrors;
    private IDeserializeJsonStrings _jsonDeserializer;
    public bool IsValid { get; }
    public Dictionary`2[] Events { get; }
    public DateTime Time { get; }
    public String[] ValidationErrors { get; }
    public IDeserializeJsonStrings JsonDeserializer { get; public set; }
    internal WebHook(string secret, string signature, string body);
    private WebHookData ValidateWebHook(string secret, string signature, string body);
    public sealed virtual bool get_IsValid();
    public sealed virtual Dictionary`2[] get_Events();
    public sealed virtual DateTime get_Time();
    public sealed virtual String[] get_ValidationErrors();
    public IDeserializeJsonStrings get_JsonDeserializer();
    public void set_JsonDeserializer(IDeserializeJsonStrings value);
}
public class PusherServer.WebHookData : object {
    private DateTime _time;
    [CompilerGeneratedAttribute]
private Dictionary`2[] <events>k__BackingField;
    private static DateTime UnixEpoch;
    public string time_ms { get; public set; }
    public Dictionary`2[] events { get; public set; }
    public DateTime Time { get; }
    private static WebHookData();
    public string get_time_ms();
    public void set_time_ms(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2[] get_events();
    [CompilerGeneratedAttribute]
public void set_events(Dictionary`2[] value);
    public DateTime get_Time();
    private static long GetUnixTimestampMillis(DateTime dateTime);
    private static DateTime DateTimeFromUnixTimestampMillis(long millis);
}
public class PusherServer.WebHookEvent : object {
}
