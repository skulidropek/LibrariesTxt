[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class QRCoder.AbstractQRCode : object {
    [CompilerGeneratedAttribute]
private QRCodeData <QrCodeData>k__BackingField;
    protected QRCodeData QrCodeData { get; protected set; }
    protected AbstractQRCode(QRCodeData data);
    [CompilerGeneratedAttribute]
protected QRCodeData get_QrCodeData();
    [CompilerGeneratedAttribute]
protected void set_QrCodeData(QRCodeData value);
    public virtual void SetQRCodeData(QRCodeData data);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.AsciiQRCode : AbstractQRCode {
    public AsciiQRCode(QRCodeData data);
    public string GetGraphic(int repeatPerModule, string darkColorString, string whiteSpaceString, bool drawQuietZones, string endOfLine);
    public String[] GetLineByLineGraphic(int repeatPerModule, string darkColorString, string whiteSpaceString, bool drawQuietZones);
    public string GetGraphicSmall(bool drawQuietZones, bool invert, string endOfLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class QRCoder.AsciiQRCodeHelper : object {
    public static string GetQRCode(string plainText, int pixelsPerModule, string darkColorString, string whiteSpaceString, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion, string endOfLine, bool drawQuietZones);
    public static string GetQRCode(string plainText, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion, string endOfLine, bool drawQuietZones, bool invert);
}
[ExtensionAttribute]
internal static class QRCoder.BitArrayExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int CopyTo(BitArray source, BitArray destination, int sourceOffset, int destinationOffset, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.BitmapByteQRCode : AbstractQRCode {
    private static Byte[] _bitmapHeaderPart1;
    private static Byte[] _bitmapHeaderPart2;
    private static Byte[] _bitmapHeaderPartEnd;
    public BitmapByteQRCode(QRCodeData data);
    private static BitmapByteQRCode();
    public Byte[] GetGraphic(int pixelsPerModule);
    public Byte[] GetGraphic(int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex);
    public Byte[] GetGraphic(int pixelsPerModule, Byte[] darkColorRgb, Byte[] lightColorRgb);
    private Byte[] HexColorToByteArray(string colorString);
    private void CopyIntAs4ByteToArray(int inp, int destinationIndex, Byte[] destinationArray);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class QRCoder.BitmapByteQRCodeHelper : object {
    public static Byte[] GetQRCode(string plainText, int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion);
    public static Byte[] GetQRCode(string txt, ECCLevel eccLevel, int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.Exceptions.DataTooLongException : Exception {
    public DataTooLongException(string eccLevel, string encodingMode, int maxSizeByte);
    public DataTooLongException(string eccLevel, string encodingMode, int version, int maxSizeByte);
}
[ExtensionAttribute]
[ObsoleteAttribute("This class will be removed in a future version of QRCoder.")]
public static class QRCoder.Extensions.CustomExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetStringValue(Enum value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This attribute will be removed in a future version of QRCoder.")]
public class QRCoder.Extensions.StringValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    public string StringValue { get; protected set; }
    public StringValueAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
protected void set_StringValue(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class QRCoder.PayloadGenerator : object {
    private static bool IsValidIban(string iban);
    private static bool IsValidQRIban(string iban);
    private static bool IsValidBic(string bic);
    private static string ConvertStringToEncoding(string message, string encoding);
    private static string EscapeInput(string inp, bool simple);
    public static bool ChecksumMod10(string digits);
    private static bool isHexStyle(string inp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.PngByteQRCode : AbstractQRCode {
    public PngByteQRCode(QRCodeData data);
    public Byte[] GetGraphic(int pixelsPerModule, bool drawQuietZones);
    public Byte[] GetGraphic(int pixelsPerModule, Byte[] darkColorRgba, Byte[] lightColorRgba, bool drawQuietZones);
    private Byte[] DrawScanlines(int pixelsPerModule, bool drawQuietZones);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class QRCoder.PngByteQRCodeHelper : object {
    public static Byte[] GetQRCode(string plainText, int pixelsPerModule, Byte[] darkColorRgba, Byte[] lightColorRgba, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion, bool drawQuietZones);
    public static Byte[] GetQRCode(string txt, ECCLevel eccLevel, int size, bool drawQuietZones);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.QRCodeData : object {
    [CompilerGeneratedAttribute]
private List`1<BitArray> <ModuleMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public List`1<BitArray> ModuleMatrix { get; public set; }
    public int Version { get; private set; }
    public QRCodeData(int version);
    public QRCodeData(int version, bool addPadding);
    public QRCodeData(string pathToRawData, Compression compressMode);
    public QRCodeData(Byte[] rawData, Compression compressMode);
    [CompilerGeneratedAttribute]
public List`1<BitArray> get_ModuleMatrix();
    [CompilerGeneratedAttribute]
public void set_ModuleMatrix(List`1<BitArray> value);
    public Byte[] GetRawData(Compression compressMode);
    public void SaveRawData(string filePath, Compression compressMode);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    private static int ModulesPerSideFromVersion(int version);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class QRCoder.QRCodeGenerator : object {
    private static Char[] _alphanumEncTable;
    private static Int32[] _capacityBaseValues;
    private static Int32[] _capacityECCBaseValues;
    private static Int32[] _alignmentPatternBaseValues;
    private static Int32[] _remainderBits;
    private static Dictionary`2<int, AlignmentPattern> _alignmentPatternTable;
    private static List`1<ECCInfo> _capacityECCTable;
    private static List`1<VersionInfo> _capacityTable;
    private static Int32[] _galoisFieldByExponentAlpha;
    private static Int32[] _galoisFieldByIntegerValue;
    private static Dictionary`2<char, int> _alphanumEncDict;
    private static BitArray _repeatingPattern;
    private static BitArray _getFormatGenerator;
    private static BitArray _getFormatMask;
    private static BitArray _getVersionGenerator;
    private static Encoding _iso88591ExceptionFallback;
    private static BitArray _emptyBitArray;
    private static Encoding _iso8859_1;
    [NullableAttribute("2")]
private static Encoding _iso8859_2;
    private static QRCodeGenerator();
    public QRCodeData CreateQrCode(Payload payload);
    public QRCodeData CreateQrCode(Payload payload, ECCLevel eccLevel);
    public QRCodeData CreateQrCode(string plainText, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion);
    public QRCodeData CreateQrCode(Byte[] binaryData, ECCLevel eccLevel);
    public static QRCodeData GenerateQrCode(Payload payload);
    public static QRCodeData GenerateQrCode(Payload payload, ECCLevel eccLevel);
    public static QRCodeData GenerateQrCode(string plainText, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion);
    public static QRCodeData GenerateQrCode(Byte[] binaryData, ECCLevel eccLevel);
    private static ECCLevel ValidateECCLevel(ECCLevel eccLevel);
    private static QRCodeData GenerateQrCode(BitArray bitArray, ECCLevel eccLevel, int version);
    private static void GetFormatString(BitArray fStrEcc, ECCLevel level, int maskVersion);
    private static void TrimLeadingZeros(BitArray fStrEcc, Int32& index, Int32& count);
    private static void ShiftTowardsBit0(BitArray fStrEcc, int num);
    private static void ShiftAwayFromBit0(BitArray fStrEcc, int num);
    private static void GetVersionString(BitArray vStr, int version);
    private static Byte[] CalculateECCWords(BitArray bitArray, int offset, int count, ECCInfo eccInfo, Polynom generatorPolynomBase);
    private static void ConvertToDecNotationInPlace(Polynom poly);
    private static int GetVersion(int length, EncodingMode encMode, ECCLevel eccLevel);
    private static EncodingMode GetEncodingFromPlaintext(string plainText, bool forceUtf8);
    private static bool IsInRange(char c, char min, char max);
    private static Polynom CalculateMessagePolynom(BitArray bitArray, int offset, int count);
    private static Polynom CalculateGeneratorPolynom(int numEccWords);
    private static int BinToDec(BitArray bitArray, int offset, int count);
    private static int DecToBin(int decNum, int bits, BitArray bitList, int index);
    private static int GetCountIndicatorLength(int version, EncodingMode encMode);
    private static int GetDataLength(EncodingMode encoding, string plainText, BitArray codedText, bool forceUtf8);
    private static bool IsValidISO(string input);
    private static BitArray PlainTextToBinary(string plainText, EncodingMode encMode, EciMode eciMode, bool utf8BOM, bool forceUtf8);
    private static BitArray PlainTextToBinaryNumeric(string plainText);
    private static BitArray PlainTextToBinaryAlphanumeric(string plainText);
    private static BitArray PlainTextToBinaryByte(string plainText, EciMode eciMode, bool utf8BOM, bool forceUtf8);
    private static BitArray ToBitArray(Byte[] byteArray, int prefixZeros);
    private static Polynom XORPolynoms(Polynom messagePolynom, Polynom resPolynom);
    private static Polynom MultiplyGeneratorPolynomByLeadterm(Polynom genPolynom, PolynomItem leadTerm, int lowerExponentBy);
    private static Polynom MultiplyAlphaPolynoms(Polynom polynomBase, Polynom polynomMultiplier);
    private static int GetIntValFromAlphaExp(int exp);
    private static int GetAlphaExpFromIntVal(int intVal);
    private static int ShrinkAlphaExp(int alphaExp);
    private static Dictionary`2<char, int> CreateAlphanumEncDict();
    private static Dictionary`2<int, AlignmentPattern> CreateAlignmentPatternTable();
    private static List`1<ECCInfo> CreateCapacityECCTable();
    private static List`1<VersionInfo> CreateCapacityTable();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static void <GetFormatString>g__WriteEccLevelAndVersion|25_0(<>c__DisplayClass25_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetDataLength>g__IsUtf8|41_0(<>c__DisplayClass41_0& );
    [CompilerGeneratedAttribute]
internal static Int32[] <MultiplyAlphaPolynoms>g__GetNotUniqueExponents|54_1(Polynom list);
    [CompilerGeneratedAttribute]
internal static void <GetAlphaExpFromIntVal>g__ThrowIntValOutOfRangeException|56_0();
}
[ExtensionAttribute]
internal static class QRCoder.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
