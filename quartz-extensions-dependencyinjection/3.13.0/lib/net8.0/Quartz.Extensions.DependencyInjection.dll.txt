[ExtensionAttribute]
public static class Quartz.AdoProviderOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseDataSourceConnectionProvider(AdoProviderOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.CalendarConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICalendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateTriggers>k__BackingField;
    public string Name { get; }
    public ICalendar Calendar { get; }
    public bool Replace { get; }
    public bool UpdateTriggers { get; }
    public CalendarConfiguration(string name, ICalendar calendar, bool replace, bool updateTriggers);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ICalendar get_Calendar();
    [CompilerGeneratedAttribute]
public bool get_Replace();
    [CompilerGeneratedAttribute]
public bool get_UpdateTriggers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.ContainerConfigurationProcessor : XMLSchedulingDataProcessor {
    private IOptions`1<QuartzOptions> options;
    public bool OverWriteExistingData { get; }
    public bool IgnoreDuplicates { get; }
    public bool ScheduleTriggerRelativeToReplacedTrigger { get; }
    protected IReadOnlyList`1<IJobDetail> LoadedJobs { get; }
    protected IReadOnlyList`1<ITrigger> LoadedTriggers { get; }
    public ContainerConfigurationProcessor(ITypeLoadHelper typeLoadHelper, IOptions`1<QuartzOptions> options);
    public virtual bool get_OverWriteExistingData();
    public virtual bool get_IgnoreDuplicates();
    public virtual bool get_ScheduleTriggerRelativeToReplacedTrigger();
    protected virtual IReadOnlyList`1<IJobDetail> get_LoadedJobs();
    protected virtual IReadOnlyList`1<ITrigger> get_LoadedTriggers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Impl.AdoJobStore.Common.DataSourceDbProvider : DbProvider {
    private DbDataSource source;
    public DataSourceDbProvider(IOptions`1<QuartzOptions> options, DbDataSource source);
    private static string GetDbProviderName(IOptions`1<QuartzOptions> options);
    public virtual DbConnection CreateConnection();
}
[NullableContextAttribute("1")]
public interface Quartz.IServiceCollectionQuartzConfigurator {
    internal IServiceCollection Services { get; }
    unknown string SchedulerId {public set; }
    unknown string SchedulerName {public set; }
    unknown TimeSpan MisfireThreshold {public set; }
    unknown bool InterruptJobsOnShutdown {public set; }
    unknown bool InterruptJobsOnShutdownWithWait {public set; }
    unknown int MaxBatchSize {public set; }
    unknown TimeSpan BatchTriggerAcquisitionFireAheadTimeWindow {public set; }
    unknown bool CheckConfiguration {public set; }
    internal abstract virtual IServiceCollection get_Services();
    [NullableContextAttribute("0")]
public abstract virtual void UseTypeLoader();
    public abstract virtual void UseSimpleTypeLoader();
    public abstract virtual void set_SchedulerId(string value);
    public abstract virtual void set_SchedulerName(string value);
    public abstract virtual void set_MisfireThreshold(TimeSpan value);
    public abstract virtual void set_InterruptJobsOnShutdown(bool value);
    public abstract virtual void set_InterruptJobsOnShutdownWithWait(bool value);
    public abstract virtual void set_MaxBatchSize(int value);
    public abstract virtual void set_BatchTriggerAcquisitionFireAheadTimeWindow(TimeSpan value);
    public abstract virtual void set_CheckConfiguration(bool value);
    public abstract virtual void UseJobFactory(Action`1<JobFactoryOptions> configure);
    [ObsoleteAttribute("MicrosoftDependencyInjectionJobFactory is the default for DI configuration, this method will be removed later on")]
public abstract virtual void UseMicrosoftDependencyInjectionJobFactory(Action`1<JobFactoryOptions> configure);
    public abstract virtual void UseInMemoryStore(Action`1<InMemoryStoreOptions> configure);
    public abstract virtual void UsePersistentStore(Action`1<PersistentStoreOptions> configure);
    public abstract virtual void UsePersistentStore(Action`1<PersistentStoreOptions> configure);
    public abstract virtual void UseThreadPool(Action`1<ThreadPoolOptions> configure);
    public abstract virtual void UseDefaultThreadPool(int maxConcurrency, Action`1<ThreadPoolOptions> configure);
    public abstract virtual void UseDefaultThreadPool(Action`1<ThreadPoolOptions> configure);
    public abstract virtual void UseZeroSizeThreadPool(Action`1<ThreadPoolOptions> configure);
    public abstract virtual void UseDedicatedThreadPool(int maxConcurrency, Action`1<ThreadPoolOptions> configure);
    public abstract virtual void UseDedicatedThreadPool(Action`1<ThreadPoolOptions> configure);
    public abstract virtual void AddSchedulerListener();
    public abstract virtual void AddSchedulerListener(T implementationInstance);
    public abstract virtual void AddSchedulerListener(Func`2<IServiceProvider, T> implementationFactory);
    public abstract virtual void AddJobListener(IMatcher`1[] matchers);
    public abstract virtual void AddJobListener(T implementationInstance, IMatcher`1[] matchers);
    public abstract virtual void AddJobListener(Func`2<IServiceProvider, T> implementationFactory, IMatcher`1[] matchers);
    public abstract virtual void AddTriggerListener(IMatcher`1[] matchers);
    public abstract virtual void AddTriggerListener(T implementationInstance, IMatcher`1[] matchers);
    public abstract virtual void AddTriggerListener(Func`2<IServiceProvider, T> implementationFactory, IMatcher`1[] matchers);
}
[NullableContextAttribute("1")]
public interface Quartz.ITriggerConfigurator {
    public abstract virtual ITriggerConfigurator WithIdentity(string name);
    public abstract virtual ITriggerConfigurator WithIdentity(string name, string group);
    public abstract virtual ITriggerConfigurator WithIdentity(TriggerKey key);
    public abstract virtual ITriggerConfigurator WithDescription(string description);
    public abstract virtual ITriggerConfigurator WithPriority(int priority);
    public abstract virtual ITriggerConfigurator ModifiedByCalendar(string calendarName);
    public abstract virtual ITriggerConfigurator StartAt(DateTimeOffset startTimeUtc);
    public abstract virtual ITriggerConfigurator StartNow();
    public abstract virtual ITriggerConfigurator EndAt(Nullable`1<DateTimeOffset> endTimeUtc);
    public abstract virtual ITriggerConfigurator WithSchedule(IScheduleBuilder scheduleBuilder);
    public abstract virtual ITriggerConfigurator ForJob(JobKey jobKey);
    public abstract virtual ITriggerConfigurator ForJob(string jobName);
    public abstract virtual ITriggerConfigurator ForJob(string jobName, string jobGroup);
    public abstract virtual ITriggerConfigurator ForJob(IJobDetail jobDetail);
    public abstract virtual ITriggerConfigurator UsingJobData(JobDataMap newJobDataMap);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, string value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, int value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, long value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, float value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, double value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, decimal value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, bool value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, Guid value);
    public abstract virtual ITriggerConfigurator UsingJobData(string key, char value);
}
internal class Quartz.JobConfigurator : JobBuilder {
}
public class Quartz.JobFactoryOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowDefaultConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateScope>k__BackingField;
    [ObsoleteAttribute("The value is ignored as all jobs are created with ActivatorUtilities.CreateInstance (see https://github.com/quartznet/quartznet/issues/1120) or via lookup from DI.")]
public bool AllowDefaultConstructor { get; public set; }
    [ObsoleteAttribute("The value is ignored as all jobs are created with scope now.")]
public bool CreateScope { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowDefaultConstructor();
    [CompilerGeneratedAttribute]
public void set_AllowDefaultConstructor(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateScope();
    [CompilerGeneratedAttribute]
public void set_CreateScope(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.JobListenerConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ListenerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatcher`1[] <Matchers>k__BackingField;
    public Type ListenerType { get; }
    public IMatcher`1[] Matchers { get; }
    public JobListenerConfiguration(Type listenerType, IMatcher`1[] matchers);
    [CompilerGeneratedAttribute]
public Type get_ListenerType();
    [CompilerGeneratedAttribute]
public IMatcher`1[] get_Matchers();
}
internal class Quartz.QuartzConfiguration : object {
    [NullableContextAttribute("1")]
public sealed virtual void PostConfigure(string name, QuartzOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.QuartzOptions : Dictionary`2<string, string> {
    internal List`1<IJobDetail> jobDetails;
    internal List`1<ITrigger> triggers;
    [CompilerGeneratedAttribute]
private SchedulingOptions <Scheduling>k__BackingField;
    [CompilerGeneratedAttribute]
private JobFactoryOptions <JobFactory>k__BackingField;
    [NullableAttribute("2")]
public string SchedulerId { get; public set; }
    [NullableAttribute("2")]
public string SchedulerName { get; public set; }
    public Nullable`1<TimeSpan> MisfireThreshold { get; public set; }
    public SchedulingOptions Scheduling { get; public set; }
    public JobFactoryOptions JobFactory { get; public set; }
    public IReadOnlyList`1<IJobDetail> JobDetails { get; }
    public IReadOnlyList`1<ITrigger> Triggers { get; }
    [NullableContextAttribute("2")]
public string get_SchedulerId();
    [NullableContextAttribute("2")]
public void set_SchedulerId(string value);
    [NullableContextAttribute("2")]
public string get_SchedulerName();
    [NullableContextAttribute("2")]
public void set_SchedulerName(string value);
    public Nullable`1<TimeSpan> get_MisfireThreshold();
    public void set_MisfireThreshold(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public SchedulingOptions get_Scheduling();
    [CompilerGeneratedAttribute]
public void set_Scheduling(SchedulingOptions value);
    [CompilerGeneratedAttribute]
public JobFactoryOptions get_JobFactory();
    [CompilerGeneratedAttribute]
public void set_JobFactory(JobFactoryOptions value);
    public IReadOnlyList`1<IJobDetail> get_JobDetails();
    public IReadOnlyList`1<ITrigger> get_Triggers();
    public QuartzOptions AddJob(Type jobType, Action`1<JobBuilder> configure);
    public QuartzOptions AddJob(Action`1<JobBuilder> configure);
    public QuartzOptions AddTrigger(Action`1<TriggerBuilder> configure);
    public NameValueCollection ToNameValueCollection();
}
public class Quartz.SchedulingOptions : object {
    [CompilerGeneratedAttribute]
private bool <OverWriteExistingData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScheduleTriggerRelativeToReplacedTrigger>k__BackingField;
    public bool OverWriteExistingData { get; public set; }
    public bool IgnoreDuplicates { get; public set; }
    public bool ScheduleTriggerRelativeToReplacedTrigger { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OverWriteExistingData();
    [CompilerGeneratedAttribute]
public void set_OverWriteExistingData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDuplicates();
    [CompilerGeneratedAttribute]
public void set_IgnoreDuplicates(bool value);
    [CompilerGeneratedAttribute]
public bool get_ScheduleTriggerRelativeToReplacedTrigger();
    [CompilerGeneratedAttribute]
public void set_ScheduleTriggerRelativeToReplacedTrigger(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddQuartz(IServiceCollection services, Action`1<IServiceCollectionQuartzConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollection AddQuartz(IServiceCollection services, NameValueCollection properties, Action`1<IServiceCollectionQuartzConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddJob(IServiceCollectionQuartzConfigurator options, Action`1<IJobConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddJob(IServiceCollectionQuartzConfigurator options, JobKey jobKey, Action`1<IJobConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddJob(IServiceCollectionQuartzConfigurator options, Type jobType, JobKey jobKey, Action`1<IJobConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddTrigger(IServiceCollectionQuartzConfigurator options, Action`1<ITriggerConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator ScheduleJob(IServiceCollectionQuartzConfigurator options, Action`1<ITriggerConfigurator> trigger, Action`1<IJobConfigurator> job);
    private static IJobDetail ConfigureAndBuildJobDetail(Type type, JobConfigurator builder, Action`1<IJobConfigurator> configure, Boolean& hasCustomKey);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddCalendar(IServiceCollectionQuartzConfigurator configurator, string name, bool replace, bool updateTriggers, Action`1<T> configure);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddCalendar(IServiceCollectionQuartzConfigurator configurator, string name, ICalendar calendar, bool replace, bool updateTriggers);
    [ExtensionAttribute]
public static IServiceCollectionQuartzConfigurator AddDataSourceProvider(IServiceCollectionQuartzConfigurator configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.ServiceCollectionQuartzConfigurator : object {
    private IServiceCollection services;
    private SchedulerBuilder schedulerBuilder;
    private IServiceCollection Quartz.IServiceCollectionQuartzConfigurator.Services { get; }
    public NameValueCollection Properties { get; }
    unknown string SchedulerId {public set; }
    unknown string SchedulerName {public set; }
    unknown bool InterruptJobsOnShutdown {public set; }
    unknown bool InterruptJobsOnShutdownWithWait {public set; }
    unknown int MaxBatchSize {public set; }
    unknown TimeSpan BatchTriggerAcquisitionFireAheadTimeWindow {public set; }
    unknown bool CheckConfiguration {public set; }
    unknown TimeSpan MisfireThreshold {public set; }
    internal ServiceCollectionQuartzConfigurator(IServiceCollection collection, SchedulerBuilder schedulerBuilder);
    private sealed virtual override IServiceCollection Quartz.IServiceCollectionQuartzConfigurator.get_Services();
    public sealed virtual void UseSimpleTypeLoader();
    public sealed virtual void SetProperty(string name, string value);
    public sealed virtual NameValueCollection get_Properties();
    public sealed virtual void set_SchedulerId(string value);
    public sealed virtual void set_SchedulerName(string value);
    public sealed virtual void set_InterruptJobsOnShutdown(bool value);
    public sealed virtual void set_InterruptJobsOnShutdownWithWait(bool value);
    public sealed virtual void set_MaxBatchSize(int value);
    public sealed virtual void set_BatchTriggerAcquisitionFireAheadTimeWindow(TimeSpan value);
    public sealed virtual void set_CheckConfiguration(bool value);
    public sealed virtual void UseInMemoryStore(Action`1<InMemoryStoreOptions> configure);
    public sealed virtual void UsePersistentStore(Action`1<PersistentStoreOptions> configure);
    public sealed virtual void UsePersistentStore(Action`1<PersistentStoreOptions> configure);
    [ObsoleteAttribute("MicrosoftDependencyInjectionJobFactory is the default for DI configuration, this method will be removed later on")]
public sealed virtual void UseMicrosoftDependencyInjectionJobFactory(Action`1<JobFactoryOptions> configure);
    public sealed virtual void UseJobFactory(Action`1<JobFactoryOptions> configure);
    [NullableContextAttribute("0")]
public sealed virtual void UseTypeLoader();
    public sealed virtual void UseThreadPool(Action`1<ThreadPoolOptions> configure);
    public sealed virtual void UseDefaultThreadPool(int maxConcurrency, Action`1<ThreadPoolOptions> configure);
    public sealed virtual void UseDefaultThreadPool(Action`1<ThreadPoolOptions> configure);
    public sealed virtual void UseZeroSizeThreadPool(Action`1<ThreadPoolOptions> configure);
    public sealed virtual void UseDedicatedThreadPool(int maxConcurrency, Action`1<ThreadPoolOptions> configure);
    public sealed virtual void UseDedicatedThreadPool(Action`1<ThreadPoolOptions> configure);
    public sealed virtual void set_MisfireThreshold(TimeSpan value);
    public sealed virtual void AddSchedulerListener();
    public sealed virtual void AddSchedulerListener(T implementationInstance);
    public sealed virtual void AddSchedulerListener(Func`2<IServiceProvider, T> implementationFactory);
    public sealed virtual void AddJobListener(IMatcher`1[] matchers);
    public sealed virtual void AddJobListener(T implementationInstance, IMatcher`1[] matchers);
    public sealed virtual void AddJobListener(Func`2<IServiceProvider, T> implementationFactory, IMatcher`1[] matchers);
    public sealed virtual void AddTriggerListener(IMatcher`1[] matchers);
    public sealed virtual void AddTriggerListener(T implementationInstance, IMatcher`1[] matchers);
    public sealed virtual void AddTriggerListener(Func`2<IServiceProvider, T> implementationFactory, IMatcher`1[] matchers);
    public sealed virtual void RegisterSingleton();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.ServiceCollectionSchedulerFactory : StdSchedulerFactory {
    private IServiceProvider serviceProvider;
    private IOptions`1<QuartzOptions> options;
    private ContainerConfigurationProcessor processor;
    private SemaphoreSlim semaphore;
    [NullableAttribute("2")]
private IScheduler initializedScheduler;
    public ServiceCollectionSchedulerFactory(IServiceProvider serviceProvider, IOptions`1<QuartzOptions> options, ContainerConfigurationProcessor processor);
    [AsyncStateMachineAttribute("Quartz.ServiceCollectionSchedulerFactory/<GetScheduler>d__6")]
public virtual Task`1<IScheduler> GetScheduler(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.ServiceCollectionSchedulerFactory/<InitializeScheduler>d__7")]
private Task InitializeScheduler(IScheduler scheduler, CancellationToken cancellationToken);
    protected virtual ISchedulerRepository GetSchedulerRepository();
    protected virtual IDbConnectionManager GetDBConnectionManager();
    protected virtual string GetNamedConnectionString(string connectionStringName);
    [NullableContextAttribute("2")]
protected virtual T InstantiateType(Type implementationType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IScheduler> <>n__0(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Simpl.JobActivatorCache : object {
    private ConcurrentDictionary`2<Type, ObjectFactory> activatorCache;
    private Func`2<Type, ObjectFactory> createFactory;
    public IJob CreateInstance(IServiceProvider serviceProvider, Type jobType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.MicrosoftDependencyInjectionJobFactory : PropertySettingJobFactory {
    private IServiceProvider serviceProvider;
    private IOptions`1<QuartzOptions> options;
    private JobActivatorCache activatorCache;
    public MicrosoftDependencyInjectionJobFactory(IServiceProvider serviceProvider, IOptions`1<QuartzOptions> options);
    protected virtual IJob InstantiateJob(TriggerFiredBundle bundle, IScheduler scheduler);
    protected virtual void ConfigureScope(IServiceScope scope, TriggerFiredBundle bundle, IScheduler scheduler);
    private ValueTuple`2<IJob, bool> CreateJob(TriggerFiredBundle bundle, IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.TriggerConfigurator : object {
    private TriggerBuilder triggerBuilder;
    public sealed virtual ITriggerConfigurator WithIdentity(string name);
    public sealed virtual ITriggerConfigurator WithIdentity(string name, string group);
    public sealed virtual ITriggerConfigurator WithIdentity(TriggerKey key);
    public sealed virtual ITriggerConfigurator WithDescription(string description);
    public sealed virtual ITriggerConfigurator WithPriority(int priority);
    public sealed virtual ITriggerConfigurator ModifiedByCalendar(string calendarName);
    public sealed virtual ITriggerConfigurator StartAt(DateTimeOffset startTimeUtc);
    public sealed virtual ITriggerConfigurator StartNow();
    public sealed virtual ITriggerConfigurator EndAt(Nullable`1<DateTimeOffset> endTimeUtc);
    public sealed virtual ITriggerConfigurator WithSchedule(IScheduleBuilder scheduleBuilder);
    public sealed virtual ITriggerConfigurator ForJob(JobKey jobKey);
    public sealed virtual ITriggerConfigurator ForJob(string jobName);
    public sealed virtual ITriggerConfigurator ForJob(string jobName, string jobGroup);
    public sealed virtual ITriggerConfigurator ForJob(IJobDetail jobDetail);
    public sealed virtual ITriggerConfigurator UsingJobData(JobDataMap newJobDataMap);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, string value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, int value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, long value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, float value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, double value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, decimal value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, bool value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, Guid value);
    public sealed virtual ITriggerConfigurator UsingJobData(string key, char value);
    internal ITrigger Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.TriggerExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Prefer overload taking explicit interval and interval unit before configure action")]
public static ITriggerConfigurator WithDailyTimeIntervalSchedule(ITriggerConfigurator triggerBuilder, Action`1<DailyTimeIntervalScheduleBuilder> action);
    [ExtensionAttribute]
public static ITriggerConfigurator WithDailyTimeIntervalSchedule(ITriggerConfigurator triggerBuilder, int interval, IntervalUnit intervalUnit, Action`1<DailyTimeIntervalScheduleBuilder> action);
    [ExtensionAttribute]
public static ITriggerConfigurator WithDailyTimeIntervalSchedule(ITriggerConfigurator triggerBuilder, DailyTimeIntervalScheduleBuilder schedule);
    [ExtensionAttribute]
public static ITriggerConfigurator WithCalendarIntervalSchedule(ITriggerConfigurator triggerBuilder, Action`1<CalendarIntervalScheduleBuilder> action);
    [ExtensionAttribute]
public static ITriggerConfigurator WithCalendarIntervalSchedule(ITriggerConfigurator triggerBuilder, CalendarIntervalScheduleBuilder schedule);
    [ExtensionAttribute]
public static ITriggerConfigurator WithCronSchedule(ITriggerConfigurator triggerBuilder, string cronExpression, Action`1<CronScheduleBuilder> action);
    [ExtensionAttribute]
public static ITriggerConfigurator WithCronSchedule(ITriggerConfigurator triggerBuilder, CronScheduleBuilder schedule);
    [ExtensionAttribute]
public static ITriggerConfigurator WithSimpleSchedule(ITriggerConfigurator triggerBuilder, Action`1<SimpleScheduleBuilder> action);
    [ExtensionAttribute]
public static ITriggerConfigurator WithSimpleSchedule(ITriggerConfigurator triggerBuilder, SimpleScheduleBuilder schedule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.TriggerListenerConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ListenerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatcher`1[] <Matchers>k__BackingField;
    public Type ListenerType { get; }
    public IMatcher`1[] Matchers { get; }
    public TriggerListenerConfiguration(Type listenerType, IMatcher`1[] matchers);
    [CompilerGeneratedAttribute]
public Type get_ListenerType();
    [CompilerGeneratedAttribute]
public IMatcher`1[] get_Matchers();
}
