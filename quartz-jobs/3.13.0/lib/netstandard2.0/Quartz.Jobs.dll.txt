[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DisallowConcurrentExecutionAttribute]
[PersistJobDataAfterExecutionAttribute]
public class Quartz.Job.DirectoryScanJob : object {
    public static string DirectoryName;
    public static string DirectoryNames;
    public static string DirectoryProviderName;
    public static string DirectoryScanListenerName;
    public static string MinimumUpdateAge;
    internal static string LastModifiedTime;
    internal static string SearchPattern;
    internal static string IncludeSubDirectories;
    internal static string CurrentFileList;
    private ILog log;
    public sealed virtual Task Execute(IJobExecutionContext context);
    protected void GetUpdatedOrNewFiles(string dirName, DateTime lastModifiedDate, DateTime maxAgeDate, List`1<FileInfo> currentFileList, List`1& allFiles, List`1& updatedFiles, List`1& deletedFiles, string searchPattern, bool includeSubDirectories);
    private static void AddToList(List`1<FileInfo> fileList, List`1<FileInfo> updatedFileList);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Job.DirectoryScanJobModel : object {
    [CompilerGeneratedAttribute]
private List`1<string> <DirectoriesToScan>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileInfo> <CurrentFileList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDirectoryScanListener <DirectoryScanListener>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MinUpdateAge>k__BackingField;
    [CompilerGeneratedAttribute]
private JobDataMap <JobDetailJobDataMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDirectories>k__BackingField;
    internal List`1<string> DirectoriesToScan { get; private set; }
    internal List`1<FileInfo> CurrentFileList { get; private set; }
    internal IDirectoryScanListener DirectoryScanListener { get; private set; }
    internal DateTime LastModTime { get; private set; }
    internal DateTime MaxAgeDate { get; }
    private TimeSpan MinUpdateAge { get; private set; }
    private JobDataMap JobDetailJobDataMap { get; private set; }
    public string SearchPattern { get; internal set; }
    public bool IncludeSubDirectories { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<string> get_DirectoriesToScan();
    [CompilerGeneratedAttribute]
private void set_DirectoriesToScan(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<FileInfo> get_CurrentFileList();
    [CompilerGeneratedAttribute]
private void set_CurrentFileList(List`1<FileInfo> value);
    [CompilerGeneratedAttribute]
internal IDirectoryScanListener get_DirectoryScanListener();
    [CompilerGeneratedAttribute]
private void set_DirectoryScanListener(IDirectoryScanListener value);
    [CompilerGeneratedAttribute]
internal DateTime get_LastModTime();
    [CompilerGeneratedAttribute]
private void set_LastModTime(DateTime value);
    internal DateTime get_MaxAgeDate();
    [CompilerGeneratedAttribute]
private TimeSpan get_MinUpdateAge();
    [CompilerGeneratedAttribute]
private void set_MinUpdateAge(TimeSpan value);
    [CompilerGeneratedAttribute]
private JobDataMap get_JobDetailJobDataMap();
    [CompilerGeneratedAttribute]
private void set_JobDetailJobDataMap(JobDataMap value);
    [CompilerGeneratedAttribute]
public string get_SearchPattern();
    [CompilerGeneratedAttribute]
internal void set_SearchPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDirectories();
    [CompilerGeneratedAttribute]
internal void set_IncludeSubDirectories(bool value);
    internal static DirectoryScanJobModel GetInstance(IJobExecutionContext context);
    internal void UpdateLastModifiedDate(DateTime lastWriteTimeFromFiles);
    internal void UpdateFileList(List`1<FileInfo> fileList);
    private static List`1<string> GetDirectoriesToScan(SchedulerContext schedCtxt, JobDataMap mergedJobDataMap);
    private static IDirectoryScanListener GetListener(JobDataMap mergedJobDataMap, SchedulerContext schedCtxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DisallowConcurrentExecutionAttribute]
[PersistJobDataAfterExecutionAttribute]
public class Quartz.Job.FileScanJob : object {
    public static string FileName;
    public static string FileScanListenerName;
    public static string MinimumUpdateAge;
    private static string LastModifiedTime;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    private ILog Log { get; }
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [AsyncStateMachineAttribute("Quartz.Job.FileScanJob/<Execute>d__8")]
public virtual Task Execute(IJobExecutionContext context);
    protected virtual DateTime GetLastModifiedDate(string fileName);
}
[NullableContextAttribute("1")]
public interface Quartz.Job.IDirectoryScanListener {
    public abstract virtual void FilesUpdatedOrAdded(IReadOnlyCollection`1<FileInfo> updatedFiles);
    public abstract virtual void FilesDeleted(IReadOnlyCollection`1<FileInfo> deletedFiles);
}
[NullableContextAttribute("1")]
public interface Quartz.Job.IFileScanListener {
    public abstract virtual Task FileUpdated(string fileName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Job.NativeJob : object {
    public static string PropertyCommand;
    public static string PropertyParameters;
    public static string PropertyWaitForProcess;
    public static string PropertyConsumeStreams;
    public static string PropertyWorkingDirectory;
    private static string StreamTypeStandardOutput;
    private static string StreamTypeError;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    private ILog Log { get; }
    [CompilerGeneratedAttribute]
private ILog get_Log();
    public virtual Task Execute(IJobExecutionContext context);
    private int RunNativeCommand(string command, string parameters, string workingDirectory, bool wait, bool consumeStreams);
}
public class Quartz.Job.NoOpJob : object {
    [NullableContextAttribute("1")]
public sealed virtual Task Execute(IJobExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Job.SendMailJob : object {
    private ILog log;
    public static string PropertySmtpHost;
    public static string PropertySmtpPort;
    public static string PropertyUsername;
    public static string PropertyPassword;
    public static string PropertyRecipient;
    public static string PropertyCcRecipient;
    public static string PropertySender;
    public static string PropertyReplyTo;
    public static string PropertySubject;
    public static string PropertyMessage;
    public static string PropertyEncoding;
    public virtual Task Execute(IJobExecutionContext context);
    protected virtual MailMessage BuildMessageFromParameters(JobDataMap data);
    protected virtual string GetRequiredParameter(JobDataMap data, string propertyName);
    protected virtual string GetOptionalParameter(JobDataMap data, string propertyName);
    protected virtual void Send(MailInfo mailInfo);
    private static string GetMessageDescription(MailMessage message);
}
internal class Quartz.Simpl.DefaultDirectoryProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<string> GetDirectoriesToScan(JobDataMap mergedJobDataMap);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IDirectoryProvider {
    public abstract virtual IReadOnlyList`1<string> GetDirectoriesToScan(JobDataMap mergedJobDataMap);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
