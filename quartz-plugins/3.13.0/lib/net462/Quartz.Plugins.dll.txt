[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Quartz.JobAutoInterruptOptions : PropertiesSetter {
    unknown TimeSpan DefaultMaxRunTime {public set; }
    [NullableContextAttribute("1")]
public JobAutoInterruptOptions(IPropertySetter parent);
    public void set_DefaultMaxRunTime(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Plugin.History.LoggingJobHistoryPlugin : object {
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobSuccessMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobFailedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobToBeFiredMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobWasVetoedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private ILog Log { get; private set; }
    public string JobSuccessMessage { get; public set; }
    public string JobFailedMessage { get; public set; }
    public string JobToBeFiredMessage { get; public set; }
    public string JobWasVetoedMessage { get; public set; }
    public string Name { get; public set; }
    protected bool IsInfoEnabled { get; }
    protected bool IsWarnEnabled { get; }
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(ILog value);
    [CompilerGeneratedAttribute]
public virtual string get_JobSuccessMessage();
    [CompilerGeneratedAttribute]
public virtual void set_JobSuccessMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JobFailedMessage();
    [CompilerGeneratedAttribute]
public virtual void set_JobFailedMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JobToBeFiredMessage();
    [CompilerGeneratedAttribute]
public virtual void set_JobToBeFiredMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JobWasVetoedMessage();
    [CompilerGeneratedAttribute]
public virtual void set_JobWasVetoedMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual Task Initialize(string pluginName, IScheduler scheduler, CancellationToken cancellationToken);
    public virtual Task Start(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
    public virtual Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken);
    protected virtual bool get_IsInfoEnabled();
    protected virtual void WriteInfo(string message);
    protected virtual bool get_IsWarnEnabled();
    protected virtual void WriteWarning(string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Plugin.History.LoggingTriggerHistoryPlugin : object {
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerCompleteMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerFiredMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerMisfiredMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private ILog Log { get; }
    public string TriggerCompleteMessage { get; public set; }
    public string TriggerFiredMessage { get; public set; }
    public string TriggerMisfiredMessage { get; public set; }
    public string Name { get; public set; }
    protected bool IsInfoEnabled { get; }
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [CompilerGeneratedAttribute]
public virtual string get_TriggerCompleteMessage();
    [CompilerGeneratedAttribute]
public virtual void set_TriggerCompleteMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TriggerFiredMessage();
    [CompilerGeneratedAttribute]
public virtual void set_TriggerFiredMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TriggerMisfiredMessage();
    [CompilerGeneratedAttribute]
public virtual void set_TriggerMisfiredMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual Task Initialize(string pluginName, IScheduler scheduler, CancellationToken cancellationToken);
    public virtual Task Start(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task TriggerMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken);
    public virtual Task`1<bool> VetoJobExecution(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    protected virtual bool get_IsInfoEnabled();
    protected virtual void WriteInfo(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Plugin.Interrupt.JobInterruptMonitorPlugin : TriggerListenerSupport {
    private static string JobInterruptMonitorKey;
    private static TimeSpan defaultMaxRunTime;
    public static string JobDataMapKeyAutoInterruptable;
    public static string JobDataMapKeyMaxRunTime;
    private ILog log;
    private IScheduler scheduler;
    private string name;
    private QueuedTaskScheduler taskScheduler;
    private ConcurrentDictionary`2<string, InterruptMonitor> interruptMonitors;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultMaxRunTime>k__BackingField;
    [TimeSpanParseRuleAttribute]
public TimeSpan DefaultMaxRunTime { get; public set; }
    public string Name { get; }
    private static JobInterruptMonitorPlugin();
    public sealed virtual Task Start(CancellationToken cancellationToken);
    public sealed virtual Task Shutdown(CancellationToken cancellationToken);
    private void ScheduleJobInterruptMonitor(string fireInstanceId, JobKey jobkey, TimeSpan delay);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultMaxRunTime();
    [CompilerGeneratedAttribute]
public void set_DefaultMaxRunTime(TimeSpan value);
    public virtual string get_Name();
    public virtual Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken);
    public sealed virtual Task Initialize(string name, IScheduler scheduler, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Plugin.Management.ShutdownHookPlugin : object {
    private ILog log;
    [CompilerGeneratedAttribute]
private bool <CleanShutdown>k__BackingField;
    public bool CleanShutdown { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CleanShutdown();
    [CompilerGeneratedAttribute]
public void set_CleanShutdown(bool value);
    public virtual Task Initialize(string pluginName, IScheduler scheduler, CancellationToken cancellationToken);
    public virtual Task Start(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin : object {
    private static int MaxJobTriggerNameLength;
    private static string JobInitializationPluginName;
    private static char FileNameDelimiter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, JobFile>> jobFiles;
    private bool started;
    private HashSet`1<string> jobTriggerNameSet;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeLoadHelper <TypeLoadHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileNames>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ScanInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnFileNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnSchedulingError>k__BackingField;
    private ILog Log { get; }
    public string Name { get; private set; }
    public IScheduler Scheduler { get; private set; }
    protected ITypeLoadHelper TypeLoadHelper { get; private set; }
    public string FileNames { get; public set; }
    [TimeSpanParseRuleAttribute]
public TimeSpan ScanInterval { get; public set; }
    public bool FailOnFileNotFound { get; public set; }
    public bool FailOnSchedulingError { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<KeyValuePair`2<string, JobFile>> JobFiles { get; }
    public XMLSchedulingDataProcessorPlugin(ITypeLoadHelper typeLoadHelper);
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
private void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
protected ITypeLoadHelper get_TypeLoadHelper();
    [CompilerGeneratedAttribute]
private void set_TypeLoadHelper(ITypeLoadHelper value);
    [CompilerGeneratedAttribute]
public string get_FileNames();
    [CompilerGeneratedAttribute]
public void set_FileNames(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ScanInterval();
    [CompilerGeneratedAttribute]
public void set_ScanInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_FailOnFileNotFound();
    [CompilerGeneratedAttribute]
public void set_FailOnFileNotFound(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_FailOnSchedulingError();
    [CompilerGeneratedAttribute]
public virtual void set_FailOnSchedulingError(bool value);
    public IReadOnlyCollection`1<KeyValuePair`2<string, JobFile>> get_JobFiles();
    public virtual Task FileUpdated(string fName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin/<Initialize>d__42")]
public virtual Task Initialize(string pluginName, IScheduler scheduler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin/<Start>d__43")]
public virtual Task Start(CancellationToken cancellationToken);
    private string BuildJobTriggerName(string fileBasename);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin/<ProcessFile>d__46")]
private Task ProcessFile(JobFile jobFile, CancellationToken cancellationToken);
    public Task ProcessFile(string filePath, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.PluginConfigurationExtensions : object {
    [ExtensionAttribute]
public static T UseXmlSchedulingConfiguration(T configurer, Action`1<XmlSchedulingOptions> configure);
    [ExtensionAttribute]
public static T UseJobAutoInterrupt(T configurer, Action`1<JobAutoInterruptOptions> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.XmlSchedulingOptions : PropertiesSetter {
    unknown String[] Files {public set; }
    unknown bool FailOnFileNotFound {public set; }
    unknown bool FailOnSchedulingError {public set; }
    unknown TimeSpan ScanInterval {public set; }
    internal XmlSchedulingOptions(IPropertySetter parent);
    public void set_Files(String[] value);
    public void set_FailOnFileNotFound(bool value);
    public void set_FailOnSchedulingError(bool value);
    public void set_ScanInterval(TimeSpan value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
