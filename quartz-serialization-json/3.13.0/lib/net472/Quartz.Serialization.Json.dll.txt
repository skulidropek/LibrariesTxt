[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.AnnualCalendarSerializer : CalendarSerializer`1<AnnualCalendar> {
    protected virtual AnnualCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, AnnualCalendar calendar);
    protected virtual void DeserializeFields(AnnualCalendar calendar, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.BaseCalendarSerializer : CalendarSerializer`1<BaseCalendar> {
    protected virtual BaseCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, BaseCalendar calendar);
    protected virtual void DeserializeFields(BaseCalendar calendar, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.CronCalendarSerializer : CalendarSerializer`1<CronCalendar> {
    protected virtual CronCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, CronCalendar calendar);
    protected virtual void DeserializeFields(CronCalendar value, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.DailyCalendarSerializer : CalendarSerializer`1<DailyCalendar> {
    protected virtual DailyCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, DailyCalendar calendar);
    protected virtual void DeserializeFields(DailyCalendar calendar, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.HolidayCalendarSerializer : CalendarSerializer`1<HolidayCalendar> {
    protected virtual HolidayCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, HolidayCalendar calendar);
    protected virtual void DeserializeFields(HolidayCalendar calendar, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.MonthlyCalendarSerializer : CalendarSerializer`1<MonthlyCalendar> {
    protected virtual MonthlyCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, MonthlyCalendar calendar);
    protected virtual void DeserializeFields(MonthlyCalendar value, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Quartz.Calendars.WeeklyCalendarSerializer : CalendarSerializer`1<WeeklyCalendar> {
    protected virtual WeeklyCalendar Create(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, WeeklyCalendar calendar);
    protected virtual void DeserializeFields(WeeklyCalendar calendar, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.CalendarSerializer`1 : object {
    private sealed virtual override ICalendar Quartz.ICalendarSerializer.Create(JObject source);
    private sealed virtual override void Quartz.ICalendarSerializer.SerializeFields(JsonWriter writer, ICalendar value);
    private sealed virtual override void Quartz.ICalendarSerializer.DeserializeFields(ICalendar value, JObject source);
    protected abstract virtual void SerializeFields(JsonWriter writer, TCalendar calendar);
    protected abstract virtual void DeserializeFields(TCalendar calendar, JObject source);
    protected abstract virtual TCalendar Create(JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Converters.CalendarConverter : JsonConverter {
    private static Dictionary`2<string, ICalendarSerializer> converters;
    private static CalendarConverter();
    private ICalendarSerializer GetCalendarConverter(string typeName);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    internal static void AddCalendarConverter(ICalendarSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Converters.CronExpressionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Converters.NameValueCollectionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Converters.StringKeyDirtyFlagMapConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Converters.TriggerConverter : JsonConverter {
    private static Dictionary`2<string, ITriggerSerializer> converters;
    private static TriggerConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private static ITriggerSerializer GetTriggerSerializer(string typeName);
    public static void AddTriggerSerializer(ITriggerSerializer serializer);
}
[NullableContextAttribute("1")]
public interface Quartz.ICalendarSerializer {
    public abstract virtual ICalendar Create(JObject source);
    public abstract virtual void SerializeFields(JsonWriter writer, ICalendar value);
    public abstract virtual void DeserializeFields(ICalendar value, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.JsonConfigurationExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseNewtonsoftJsonSerializer instead")]
public static void UseJsonSerializer(PersistentStoreOptions persistentStoreOptions, Action`1<JsonSerializerOptions> configure);
    [ExtensionAttribute]
public static void UseNewtonsoftJsonSerializer(PersistentStoreOptions persistentStoreOptions, Action`1<NewtonsoftJsonSerializerOptions> configure);
}
[ObsoleteAttribute("Use NewtonsoftJsonSerializerOptions instead")]
public class Quartz.JsonSerializerOptions : object {
    [NullableContextAttribute("1")]
public void AddCalendarSerializer(ICalendarSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.NewtonsoftJsonSerializerOptions : object {
    [CompilerGeneratedAttribute]
private bool <RegisterTriggerConverters>k__BackingField;
    public bool RegisterTriggerConverters { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RegisterTriggerConverters();
    [CompilerGeneratedAttribute]
public void set_RegisterTriggerConverters(bool value);
    public NewtonsoftJsonSerializerOptions AddTriggerSerializer(ITriggerSerializer serializer);
    public NewtonsoftJsonSerializerOptions AddCalendarSerializer(ICalendarSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Serialization.Json.Triggers.CalendarIntervalTriggerSerializer : TriggerSerializer`1<ICalendarIntervalTrigger> {
    public string TriggerTypeForJson { get; }
    public virtual string get_TriggerTypeForJson();
    public virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, ICalendarIntervalTrigger trigger);
    protected virtual void DeserializeFields(ICalendarIntervalTrigger trigger, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Serialization.Json.Triggers.CronTriggerSerializer : TriggerSerializer`1<ICronTrigger> {
    public string TriggerTypeForJson { get; }
    public virtual string get_TriggerTypeForJson();
    public virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, ICronTrigger trigger);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Serialization.Json.Triggers.DailyTimeIntervalTriggerSerializer : TriggerSerializer`1<IDailyTimeIntervalTrigger> {
    public string TriggerTypeForJson { get; }
    public virtual string get_TriggerTypeForJson();
    public virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, IDailyTimeIntervalTrigger trigger);
    protected virtual void DeserializeFields(IDailyTimeIntervalTrigger trigger, JObject source);
}
[NullableContextAttribute("1")]
public interface Quartz.Serialization.Json.Triggers.ITriggerSerializer {
    public string TriggerTypeForJson { get; }
    public abstract virtual string get_TriggerTypeForJson();
    public abstract virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    public abstract virtual void SerializeFields(JsonWriter writer, ITrigger trigger);
    public abstract virtual void DeserializeFields(ITrigger trigger, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Serialization.Json.Triggers.SimpleTriggerSerializer : TriggerSerializer`1<ISimpleTrigger> {
    public string TriggerTypeForJson { get; }
    public virtual string get_TriggerTypeForJson();
    public virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    protected virtual void SerializeFields(JsonWriter writer, ISimpleTrigger trigger);
    protected virtual void DeserializeFields(ISimpleTrigger trigger, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Serialization.Json.Triggers.TriggerSerializer`1 : object {
    public string TriggerTypeForJson { get; }
    public abstract virtual string get_TriggerTypeForJson();
    public abstract virtual IScheduleBuilder CreateScheduleBuilder(JObject source);
    private sealed virtual override void Quartz.Serialization.Json.Triggers.ITriggerSerializer.SerializeFields(JsonWriter writer, ITrigger trigger);
    protected abstract virtual void SerializeFields(JsonWriter writer, TTrigger trigger);
    private sealed virtual override void Quartz.Serialization.Json.Triggers.ITriggerSerializer.DeserializeFields(ITrigger trigger, JObject source);
    protected virtual void DeserializeFields(TTrigger trigger, JObject source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.JsonObjectSerializer : object {
    private JsonSerializer serializer;
    [CompilerGeneratedAttribute]
private bool <RegisterTriggerConverters>k__BackingField;
    public bool RegisterTriggerConverters { get; public set; }
    public sealed virtual void Initialize();
    [CompilerGeneratedAttribute]
public bool get_RegisterTriggerConverters();
    [CompilerGeneratedAttribute]
public void set_RegisterTriggerConverters(bool value);
    protected virtual JsonSerializerSettings CreateSerializerSettings();
    public sealed virtual Byte[] Serialize(T obj);
    public sealed virtual T DeSerialize(Byte[] obj);
    public static void AddCalendarSerializer(ICalendarSerializer serializer);
    public static void AddTriggerSerializer(ITriggerSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Quartz.Util.Utf8JsonWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteTimeOfDay(JsonWriter writer, string propertyName, TimeOfDay value);
    [ExtensionAttribute]
public static TimeOfDay GetTimeOfDay(JObject source);
    [ExtensionAttribute]
public static void WriteArray(JsonWriter writer, string propertyName, IEnumerable`1<T> values, Action`2<JsonWriter, T> valueWriter);
    [ExtensionAttribute]
public static void WriteKey(JsonWriter writer, string propertyName, Key`1<T> key);
    [ExtensionAttribute]
public static TriggerKey GetTriggerKey(JObject jsonElement, string propertyName);
    [ExtensionAttribute]
public static JobKey GetJobKey(JObject jsonElement, string propertyName);
    [ExtensionAttribute]
public static void WriteJobDataMapValue(JsonWriter writer, T jobDataMap);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static JobDataMap GetJobDataMap(JObject jsonElement);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
