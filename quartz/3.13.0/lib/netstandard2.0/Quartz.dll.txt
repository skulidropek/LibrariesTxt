[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.AdoProviderExtensions : object {
    [ExtensionAttribute]
public static void UseSqlServer(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseSqlServer(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UsePostgres(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UsePostgres(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseMySql(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseMySql(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseMySqlConnector(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
internal static void UseMySqlInternal(PersistentStoreOptions options, string provider, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseFirebird(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseFirebird(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseOracle(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseOracle(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseSQLite(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseSQLite(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
public static void UseMicrosoftSQLite(PersistentStoreOptions options, string connectionString);
    [ExtensionAttribute]
public static void UseMicrosoftSQLite(PersistentStoreOptions options, Action`1<AdoProviderOptions> configurer, string dataSourceName);
    [ExtensionAttribute]
private static void UseSQLite(PersistentStoreOptions options, string provider, Action`1<AdoProviderOptions> configurer, string dataSourceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.CalendarIntervalScheduleBuilder : ScheduleBuilder`1<ICalendarIntervalTrigger> {
    private int interval;
    private IntervalUnit intervalUnit;
    private int misfireInstruction;
    [NullableAttribute("2")]
private TimeZoneInfo timeZone;
    private bool preserveHourOfDayAcrossDaylightSavings;
    private bool skipDayIfHourDoesNotExist;
    public static CalendarIntervalScheduleBuilder Create();
    public virtual IMutableTrigger Build();
    public CalendarIntervalScheduleBuilder WithInterval(int interval, IntervalUnit unit);
    public CalendarIntervalScheduleBuilder WithIntervalInSeconds(int intervalInSeconds);
    public CalendarIntervalScheduleBuilder WithIntervalInMinutes(int intervalInMinutes);
    public CalendarIntervalScheduleBuilder WithIntervalInHours(int intervalInHours);
    public CalendarIntervalScheduleBuilder WithIntervalInDays(int intervalInDays);
    public CalendarIntervalScheduleBuilder WithIntervalInWeeks(int intervalInWeeks);
    public CalendarIntervalScheduleBuilder WithIntervalInMonths(int intervalInMonths);
    public CalendarIntervalScheduleBuilder WithIntervalInYears(int intervalInYears);
    public CalendarIntervalScheduleBuilder WithMisfireHandlingInstructionIgnoreMisfires();
    public CalendarIntervalScheduleBuilder WithMisfireHandlingInstructionDoNothing();
    public CalendarIntervalScheduleBuilder WithMisfireHandlingInstructionFireAndProceed();
    public CalendarIntervalScheduleBuilder InTimeZone(TimeZoneInfo timezone);
    public CalendarIntervalScheduleBuilder PreserveHourOfDayAcrossDaylightSavings(bool preserveHourOfDay);
    public CalendarIntervalScheduleBuilder SkipDayIfHourDoesNotExist(bool skipDay);
    private static void ValidateInterval(int interval);
    internal CalendarIntervalScheduleBuilder WithMisfireHandlingInstruction(int readMisfireInstructionFromString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.CalendarIntervalTriggerBuilderExtensions : object {
    [ExtensionAttribute]
public static TriggerBuilder WithCalendarIntervalSchedule(TriggerBuilder triggerBuilder);
    [ExtensionAttribute]
public static TriggerBuilder WithCalendarIntervalSchedule(TriggerBuilder triggerBuilder, Action`1<CalendarIntervalScheduleBuilder> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Collections.DictionaryKeyCollectionDebugView`2 : object {
    private ICollection`1<TKey> _collection;
    [DebuggerBrowsableAttribute("3")]
public TKey[] Items { get; }
    public DictionaryKeyCollectionDebugView`2(ICollection`1<TKey> collection);
    public TKey[] get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Collections.DictionaryValueCollectionDebugView`2 : object {
    private ICollection`1<TValue> _collection;
    [DebuggerBrowsableAttribute("3")]
public TValue[] Items { get; }
    public DictionaryValueCollectionDebugView`2(ICollection`1<TValue> collection);
    public TValue[] get_Items();
}
internal class Quartz.Collections.EmptyEnumerator`1 : object {
    [NullableAttribute("1")]
public static EmptyEnumerator`1<T> Instance;
    [NullableAttribute("1")]
public T Current { get; }
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    private static EmptyEnumerator`1();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    [NullableContextAttribute("1")]
public sealed virtual T get_Current();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Collections.EmptyReadOnlyCollection`1 : object {
    public static IReadOnlyCollection`1<T> Instance;
    public int Count { get; }
    private static EmptyReadOnlyCollection`1();
    public EmptyEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Quartz.Collections.HashHelpers : object {
    internal static Int32[] SizeOneIntArray;
    public static int HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    public static Int32[] primes;
    private static HashHelpers();
    internal static int PowerOf2(int v);
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Collections.IDictionaryDebugView`2 : object {
    private IDictionary`2<K, V> _dict;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public IDictionaryDebugView`2(IDictionary`2<K, V> dictionary);
    public KeyValuePair`2[] get_Items();
}
internal enum Quartz.Collections.InsertionBehavior : Enum {
    public int value__;
    public static InsertionBehavior None;
    public static InsertionBehavior OverwriteExisting;
    public static InsertionBehavior ThrowOnExisting;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Quartz.Collections.IDictionaryDebugView`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Quartz.Collections.OrderedDictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Entry[] InitialEntries;
    private Int32[] _buckets;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Entry[] _entries;
    private int _count;
    private int _version;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEqualityComparer`1<TKey> _comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyCollection<TKey, TValue> _keys;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueCollection<TKey, TValue> _values;
    public int Count { get; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyCollection<TKey, TValue> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueCollection<TKey, TValue> Values { get; }
    public TValue Item { get; public set; }
    public TValue Item { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Item { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<TKey, TValue> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Item { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public OrderedDictionary`2(int capacity);
    public OrderedDictionary`2(IEqualityComparer`1<TKey> comparer);
    public OrderedDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public OrderedDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public OrderedDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    private static OrderedDictionary`2();
    public sealed virtual int get_Count();
    public IEqualityComparer`1<TKey> get_Comparer();
    public KeyCollection<TKey, TValue> get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public TValue get_Item(int index);
    public void set_Item(int index, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    public int EnsureCapacity(int capacity);
    [NullableContextAttribute("0")]
public Enumerator<TKey, TValue> GetEnumerator();
    public TValue GetOrAdd(TKey key, TValue value);
    public TValue GetOrAdd(TKey key, Func`1<TValue> valueFactory);
    public int IndexOf(TKey key);
    public void Insert(int index, TKey key, TValue value);
    public void Move(int fromIndex, int toIndex);
    public void MoveRange(int fromIndex, int toIndex, int count);
    public sealed virtual bool Remove(TKey key);
    public bool Remove(TKey key, TValue& value);
    public sealed virtual void RemoveAt(int index);
    public void TrimExcess();
    public void TrimExcess(int capacity);
    public bool TryAdd(TKey key, TValue value);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.set_Item(int index, KeyValuePair`2<TKey, TValue> value);
    private sealed virtual override KeyValuePair`2<TKey, TValue> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Item(int index);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override int System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IndexOf(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Insert(int index, KeyValuePair`2<TKey, TValue> item);
    private Entry[] Resize(int newSize);
    private int IndexOf(TKey key, UInt32& hashCode);
    private bool TryInsert(Nullable`1<int> index, TKey key, TValue value, InsertionBehavior behavior);
    private int AddInternal(Nullable`1<int> index, TKey key, TValue value, UInt32 hashCode);
    [NullableContextAttribute("0")]
private void AddEntryToBucket(Entry& entry, int entryIndex, Int32[] buckets);
    private void RemoveEntryFromBucket(int entryIndex);
    private void UpdateBucketIndex(int entryIndex, int incrementAmount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Collections.ReadOnlyCollectionWrapper`1 : object {
    private ICollection`1<T> values;
    public int Count { get; }
    public ReadOnlyCollectionWrapper`1(ICollection`1<T> values);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
internal static class Quartz.Collections.ThrowHelper : object {
    internal static void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
    internal static void ThrowKeyArgumentNullException();
    internal static void ThrowCapacityArgumentOutOfRangeException();
    internal static bool ThrowNotSupportedException_ReadOnly_Modification();
    internal static bool ThrowNotSupportedException();
}
internal static class Quartz.Core.Context : object {
    [NullableAttribute("1")]
public static AsyncLocal`1<Nullable`1<Guid>> CallerId;
    private static Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Core.ErrorLogger : SchedulerListenerSupport {
    private ILog log;
    public virtual Task SchedulerError(string msg, SchedulerException cause, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Core.ExecutingJobsManager : object {
    private ConcurrentDictionary`2<string, IJobExecutionContext> executingJobs;
    private int numJobsFired;
    public string Name { get; }
    public int NumJobsCurrentlyExecuting { get; }
    public int NumJobsFired { get; }
    public IReadOnlyCollection`1<IJobExecutionContext> ExecutingJobs { get; }
    public sealed virtual string get_Name();
    public int get_NumJobsCurrentlyExecuting();
    public int get_NumJobsFired();
    public IReadOnlyCollection`1<IJobExecutionContext> get_ExecutingJobs();
    public sealed virtual Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken);
    public sealed virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
    public sealed virtual Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.Core.IJobRunShellFactory {
    public abstract virtual void Initialize(IScheduler sched);
    public abstract virtual JobRunShell CreateJobRunShell(TriggerFiredBundle bndle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.JobRunShell : SchedulerListenerSupport {
    private ILog log;
    private JobDiagnosticsWriter jobExecutionJobDiagnostics;
    [NullableAttribute("2")]
private JobExecutionContextImpl jec;
    [NullableAttribute("2")]
private QuartzScheduler qs;
    private IScheduler scheduler;
    private TriggerFiredBundle firedTriggerBundle;
    public JobRunShell(IScheduler scheduler, TriggerFiredBundle bundle);
    public virtual Task SchedulerShuttingdown(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.JobRunShell/<Initialize>d__8")]
public virtual Task Initialize(QuartzScheduler sched, CancellationToken cancellationToken);
    public virtual void RequestShutdown();
    [AsyncStateMachineAttribute("Quartz.Core.JobRunShell/<Run>d__10")]
public virtual Task Run(CancellationToken cancellationToken);
    protected virtual void Begin();
    protected virtual void Complete(bool successfulExecution);
    public virtual void Passivate();
    [AsyncStateMachineAttribute("Quartz.Core.JobRunShell/<NotifyListenersBeginning>d__14")]
private Task`1<bool> NotifyListenersBeginning(IJobExecutionContext ctx, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.JobRunShell/<NotifyJobListenersComplete>d__15")]
private Task`1<bool> NotifyJobListenersComplete(IJobExecutionContext ctx, JobExecutionException jobExEx, CancellationToken cancellationToken);
    private Task`1<bool> NotifyTriggerListenersComplete(IJobExecutionContext ctx, SchedulerInstruction instCode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.ListenerManagerImpl : object {
    private OrderedDictionary`2<string, IJobListener> globalJobListeners;
    private OrderedDictionary`2<string, ITriggerListener> globalTriggerListeners;
    private Dictionary`2<string, List`1<IMatcher`1<JobKey>>> globalJobListenersMatchers;
    private Dictionary`2<string, List`1<IMatcher`1<TriggerKey>>> globalTriggerListenersMatchers;
    private List`1<ISchedulerListener> schedulerListeners;
    public sealed virtual void AddJobListener(IJobListener jobListener, IMatcher`1[] matchers);
    public sealed virtual void AddJobListener(IJobListener jobListener, IReadOnlyCollection`1<IMatcher`1<JobKey>> matchers);
    public sealed virtual bool AddJobListenerMatcher(string listenerName, IMatcher`1<JobKey> matcher);
    public sealed virtual bool RemoveJobListenerMatcher(string listenerName, IMatcher`1<JobKey> matcher);
    public sealed virtual IReadOnlyCollection`1<IMatcher`1<JobKey>> GetJobListenerMatchers(string listenerName);
    public sealed virtual bool SetJobListenerMatchers(string listenerName, IReadOnlyCollection`1<IMatcher`1<JobKey>> matchers);
    public sealed virtual bool RemoveJobListener(string name);
    public sealed virtual IReadOnlyCollection`1<IJobListener> GetJobListeners();
    public sealed virtual IJobListener GetJobListener(string name);
    public sealed virtual void AddTriggerListener(ITriggerListener triggerListener, IMatcher`1[] matchers);
    public sealed virtual void AddTriggerListener(ITriggerListener triggerListener, IReadOnlyCollection`1<IMatcher`1<TriggerKey>> matchers);
    public void AddTriggerListener(ITriggerListener triggerListener, IMatcher`1<TriggerKey> matcher);
    public sealed virtual bool AddTriggerListenerMatcher(string listenerName, IMatcher`1<TriggerKey> matcher);
    public sealed virtual bool RemoveTriggerListenerMatcher(string listenerName, IMatcher`1<TriggerKey> matcher);
    public sealed virtual IReadOnlyCollection`1<IMatcher`1<TriggerKey>> GetTriggerListenerMatchers(string listenerName);
    public sealed virtual bool SetTriggerListenerMatchers(string listenerName, IReadOnlyCollection`1<IMatcher`1<TriggerKey>> matchers);
    public sealed virtual bool RemoveTriggerListener(string name);
    public sealed virtual IReadOnlyCollection`1<ITriggerListener> GetTriggerListeners();
    public sealed virtual ITriggerListener GetTriggerListener(string name);
    public sealed virtual void AddSchedulerListener(ISchedulerListener schedulerListener);
    public sealed virtual bool RemoveSchedulerListener(ISchedulerListener schedulerListener);
    public sealed virtual IReadOnlyCollection`1<ISchedulerListener> GetSchedulerListeners();
}
public class Quartz.Core.QuartzRandom : object {
    [NullableAttribute("1")]
private RNGCryptoServiceProvider random;
    private double NextDouble();
    public int Next(int maxValue);
    public int Next();
    public int Next(int minValue, int maxValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.QuartzScheduler : object {
    private ILog log;
    private static Version version;
    private QuartzSchedulerResources resources;
    private QuartzSchedulerThread schedThread;
    private ConcurrentDictionary`2<string, IJobListener> internalJobListeners;
    private ConcurrentDictionary`2<string, ITriggerListener> internalTriggerListeners;
    private List`1<ISchedulerListener> internalSchedulerListeners;
    private IJobFactory jobFactory;
    private ExecutingJobsManager jobMgr;
    private QuartzRandom random;
    private List`1<object> holdToPreventGc;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) closed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shuttingDown;
    private Nullable`1<DateTimeOffset> initialStart;
    private bool boundRemotely;
    [CompilerGeneratedAttribute]
private ISchedulerSignaler <SchedulerSignaler>k__BackingField;
    [CompilerGeneratedAttribute]
private SchedulerContext <SchedulerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SignalOnSchedulingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private IListenerManager <ListenerManager>k__BackingField;
    public string Version { get; }
    public static string VersionMajor { get; }
    public static string VersionMinor { get; }
    public static string VersionIteration { get; }
    public ISchedulerSignaler SchedulerSignaler { get; }
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public SchedulerContext SchedulerContext { get; }
    public bool SignalOnSchedulingChange { get; public set; }
    public bool InStandbyMode { get; }
    public Type JobStoreClass { get; }
    public Type ThreadPoolClass { get; }
    public int ThreadPoolSize { get; }
    public bool IsShutdown { get; }
    public bool IsShuttingDown { get; }
    public bool IsStarted { get; }
    public IReadOnlyCollection`1<IJobExecutionContext> CurrentlyExecutingJobs { get; }
    public IReadOnlyList`1<ISchedulerListener> InternalSchedulerListeners { get; }
    public IJobFactory JobFactory { get; public set; }
    public Nullable`1<DateTimeOffset> RunningSince { get; }
    public int NumJobsExecuted { get; }
    public bool SupportsPersistence { get; }
    public bool Clustered { get; }
    public IListenerManager ListenerManager { get; }
    public IReadOnlyList`1<IJobListener> InternalJobListeners { get; }
    public IReadOnlyCollection`1<ITriggerListener> InternalTriggerListeners { get; }
    private static QuartzScheduler();
    internal QuartzScheduler(QuartzSchedulerResources resources, TimeSpan idleWaitTime);
    public sealed virtual string get_Version();
    public static string get_VersionMajor();
    public static string get_VersionMinor();
    public static string get_VersionIteration();
    [CompilerGeneratedAttribute]
public virtual ISchedulerSignaler get_SchedulerSignaler();
    public virtual string get_SchedulerName();
    public virtual string get_SchedulerInstanceId();
    [CompilerGeneratedAttribute]
public virtual SchedulerContext get_SchedulerContext();
    [CompilerGeneratedAttribute]
public virtual bool get_SignalOnSchedulingChange();
    [CompilerGeneratedAttribute]
public virtual void set_SignalOnSchedulingChange(bool value);
    public virtual bool get_InStandbyMode();
    public virtual Type get_JobStoreClass();
    public virtual Type get_ThreadPoolClass();
    public virtual int get_ThreadPoolSize();
    public virtual bool get_IsShutdown();
    public virtual bool get_IsShuttingDown();
    public virtual bool get_IsStarted();
    public virtual IReadOnlyCollection`1<IJobExecutionContext> get_CurrentlyExecutingJobs();
    public void AddInternalSchedulerListener(ISchedulerListener schedulerListener);
    public bool RemoveInternalSchedulerListener(ISchedulerListener schedulerListener);
    public IReadOnlyList`1<ISchedulerListener> get_InternalSchedulerListeners();
    public virtual IJobFactory get_JobFactory();
    public virtual void set_JobFactory(IJobFactory value);
    public void Initialize();
    private void Bind();
    private void UnBind();
    public virtual void AddNoGCObject(object obj);
    public virtual bool RemoveNoGCObject(object obj);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<Start>d__68")]
public virtual Task Start(CancellationToken cancellationToken);
    public virtual Task StartDelayed(TimeSpan delay, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<Standby>d__70")]
public virtual Task Standby(CancellationToken cancellationToken);
    public virtual Nullable`1<DateTimeOffset> get_RunningSince();
    public virtual int get_NumJobsExecuted();
    public virtual bool get_SupportsPersistence();
    public virtual bool get_Clustered();
    public virtual Task Shutdown(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<Shutdown>d__80")]
public virtual Task Shutdown(bool waitForJobsToComplete, CancellationToken cancellationToken);
    public virtual void ValidateState();
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ScheduleJob>d__82")]
public virtual Task`1<DateTimeOffset> ScheduleJob(IJobDetail jobDetail, ITrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ScheduleJob>d__83")]
public virtual Task`1<DateTimeOffset> ScheduleJob(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task AddJob(IJobDetail jobDetail, bool replace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<AddJob>d__85")]
public virtual Task AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<DeleteJob>d__86")]
public virtual Task`1<bool> DeleteJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<DeleteJobs>d__87")]
public virtual Task`1<bool> DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ScheduleJobs>d__88")]
public virtual Task ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public virtual Task ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<UnscheduleJobs>d__90")]
public virtual Task`1<bool> UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<UnscheduleJob>d__91")]
public virtual Task`1<bool> UnscheduleJob(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<RescheduleJob>d__92")]
public virtual Task`1<Nullable`1<DateTimeOffset>> RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger, CancellationToken cancellationToken);
    private string NewTriggerId();
    public static long NextLong(QuartzRandom random);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<TriggerJob>d__95")]
public virtual Task TriggerJob(JobKey jobKey, JobDataMap data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<TriggerJob>d__96")]
public virtual Task TriggerJob(IOperableTrigger trig, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<PauseTrigger>d__97")]
public virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<PauseTriggers>d__98")]
public virtual Task PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<PauseJob>d__99")]
public virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<PauseJobs>d__100")]
public virtual Task PauseJobs(GroupMatcher`1<JobKey> groupMatcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ResumeTrigger>d__101")]
public virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ResumeTriggers>d__102")]
public virtual Task ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ResumeJob>d__104")]
public virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ResumeJobs>d__105")]
public virtual Task ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<PauseAll>d__106")]
public virtual Task PauseAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ResumeAll>d__107")]
public virtual Task ResumeAll(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<GetTriggersOfJob>d__110")]
public virtual Task`1<IReadOnlyCollection`1<ITrigger>> GetTriggersOfJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IJobDetail> GetJobDetail(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<GetTrigger>d__114")]
public virtual Task`1<ITrigger> GetTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<Clear>d__117")]
public virtual Task Clear(CancellationToken cancellationToken);
    public virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteCalendar(string calName, CancellationToken cancellationToken);
    public virtual Task`1<ICalendar> GetCalendar(string calName, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IListenerManager get_ListenerManager();
    public void AddInternalJobListener(IJobListener jobListener);
    public bool RemoveInternalJobListener(string name);
    public IReadOnlyList`1<IJobListener> get_InternalJobListeners();
    public IJobListener GetInternalJobListener(string name);
    public void AddInternalTriggerListener(ITriggerListener triggerListener);
    public bool RemoveinternalTriggerListener(string name);
    public IReadOnlyCollection`1<ITriggerListener> get_InternalTriggerListeners();
    public ITriggerListener GetInternalTriggerListener(string name);
    public virtual Task NotifyJobStoreJobVetoed(IOperableTrigger trigger, IJobDetail detail, SchedulerInstruction instCode, CancellationToken cancellationToken);
    public virtual Task NotifyJobStoreJobComplete(IOperableTrigger trigger, IJobDetail detail, SchedulerInstruction instCode, CancellationToken cancellationToken);
    protected virtual void NotifySchedulerThread(Nullable`1<DateTimeOffset> candidateNewNextFireTimeUtc);
    private IEnumerable`1<ITriggerListener> BuildTriggerListenerList();
    private ValueTuple`2<IJobListener, IEnumerable`1<IJobListener>> BuildJobListenerList();
    private IEnumerable`1<ISchedulerListener> BuildSchedulerListenerList();
    private bool MatchJobListener(IJobListener listener, JobKey key);
    private bool MatchTriggerListener(ITriggerListener listener, TriggerKey key);
    public virtual Task`1<bool> NotifyTriggerListenersFired(IJobExecutionContext jec, CancellationToken cancellationToken);
    public virtual Task NotifyTriggerListenersMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task NotifyTriggerListenersComplete(IJobExecutionContext jec, SchedulerInstruction instCode, CancellationToken cancellationToken);
    public virtual Task NotifyJobListenersToBeExecuted(IJobExecutionContext jec, CancellationToken cancellationToken);
    public virtual Task NotifyJobListenersWasVetoed(IJobExecutionContext jec, CancellationToken cancellationToken);
    public virtual Task NotifyJobListenersWasExecuted(IJobExecutionContext jec, JobExecutionException je, CancellationToken cancellationToken);
    private Task NotifyJobListeners(Func`2<IJobListener, Task> notifyAction, IJobExecutionContext jec, JobExecutionException je);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersError>d__152")]
public virtual Task NotifySchedulerListenersError(string msg, SchedulerException se, CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersScheduled(ITrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersUnscheduled>d__154")]
public virtual Task NotifySchedulerListenersUnscheduled(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersFinalized(ITrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersPausedTriggers>d__156")]
public virtual Task NotifySchedulerListenersPausedTriggers(string group, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersPausedTrigger>d__157")]
public virtual Task NotifySchedulerListenersPausedTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersResumedTriggers(string group, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersResumedTrigger>d__159")]
public virtual Task NotifySchedulerListenersResumedTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual void NotifySchedulerListenersPausedJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersPausedJobs>d__161")]
public virtual Task NotifySchedulerListenersPausedJobs(string group, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersResumedJob>d__162")]
public virtual Task NotifySchedulerListenersResumedJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListenersResumedJobs>d__163")]
public virtual Task NotifySchedulerListenersResumedJobs(string group, CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersInStandbyMode(CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersStarted(CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersStarting(CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersShutdown(CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersShuttingdown(CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersJobAdded(IJobDetail jobDetail, CancellationToken cancellationToken);
    public virtual Task NotifySchedulerListenersJobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<NotifySchedulerListeners>d__171")]
protected virtual Task NotifySchedulerListeners(Func`2<ISchedulerListener, Task> notifier, string action);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<Interrupt>d__172")]
public virtual Task`1<bool> Interrupt(JobKey jobKey, CancellationToken cancellationToken);
    public Task`1<bool> Interrupt(string fireInstanceId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<ShutdownPlugins>d__174")]
private Task ShutdownPlugins(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<StartPlugins>d__175")]
private Task StartPlugins(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.Clear();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.Start();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.StartDelayed(TimeSpan delay);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.Standby();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.Shutdown();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.Shutdown(bool waitForJobsToComplete);
    private sealed virtual override DateTimeOffset Quartz.Simpl.IRemotableQuartzScheduler.ScheduleJob(IJobDetail jobDetail, ITrigger trigger);
    private sealed virtual override DateTimeOffset Quartz.Simpl.IRemotableQuartzScheduler.ScheduleJob(ITrigger trigger);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.AddJob(IJobDetail jobDetail, bool replace);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.IsJobGroupPaused(string groupName);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.IsTriggerGroupPaused(string groupName);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.DeleteJob(JobKey jobKey);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.UnscheduleJob(TriggerKey triggerKey);
    private sealed virtual override Nullable`1<DateTimeOffset> Quartz.Simpl.IRemotableQuartzScheduler.RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.TriggerJob(JobKey jobKey, JobDataMap data);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.TriggerJob(IOperableTrigger trig);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.PauseTrigger(TriggerKey triggerKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.PauseTriggers(GroupMatcher`1<TriggerKey> matcher);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.PauseJob(JobKey jobKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.PauseJobs(GroupMatcher`1<JobKey> matcher);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResumeTrigger(TriggerKey triggerKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResumeTriggers(GroupMatcher`1<TriggerKey> matcher);
    private sealed virtual override IReadOnlyCollection`1<string> Quartz.Simpl.IRemotableQuartzScheduler.GetPausedTriggerGroups();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResumeJob(JobKey jobKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResumeJobs(GroupMatcher`1<JobKey> matcher);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.PauseAll();
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResumeAll();
    private sealed virtual override IReadOnlyCollection`1<string> Quartz.Simpl.IRemotableQuartzScheduler.GetJobGroupNames();
    private sealed virtual override IReadOnlyCollection`1<JobKey> Quartz.Simpl.IRemotableQuartzScheduler.GetJobKeys(GroupMatcher`1<JobKey> matcher);
    private sealed virtual override IReadOnlyCollection`1<ITrigger> Quartz.Simpl.IRemotableQuartzScheduler.GetTriggersOfJob(JobKey jobKey);
    private sealed virtual override IReadOnlyCollection`1<string> Quartz.Simpl.IRemotableQuartzScheduler.GetTriggerGroupNames();
    private sealed virtual override IReadOnlyCollection`1<TriggerKey> Quartz.Simpl.IRemotableQuartzScheduler.GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher);
    private sealed virtual override IJobDetail Quartz.Simpl.IRemotableQuartzScheduler.GetJobDetail(JobKey jobKey);
    private sealed virtual override ITrigger Quartz.Simpl.IRemotableQuartzScheduler.GetTrigger(TriggerKey triggerKey);
    private sealed virtual override TriggerState Quartz.Simpl.IRemotableQuartzScheduler.GetTriggerState(TriggerKey triggerKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ResetTriggerFromErrorState(TriggerKey triggerKey);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.DeleteCalendar(string calName);
    private sealed virtual override ICalendar Quartz.Simpl.IRemotableQuartzScheduler.GetCalendar(string calName);
    private sealed virtual override IReadOnlyCollection`1<string> Quartz.Simpl.IRemotableQuartzScheduler.GetCalendarNames();
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.Interrupt(JobKey jobKey);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.Interrupt(string fireInstanceId);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.CheckExists(JobKey jobKey);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.CheckExists(TriggerKey triggerKey);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace);
    private sealed virtual override void Quartz.Simpl.IRemotableQuartzScheduler.ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace);
    private sealed virtual override bool Quartz.Simpl.IRemotableQuartzScheduler.UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzScheduler/<<NotifyJobListeners>g__NotifySingle|151_1>d")]
[CompilerGeneratedAttribute]
internal static Task <NotifyJobListeners>g__NotifySingle|151_1(Task t, IJobListener jl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.QuartzSchedulerResources : object {
    private string name;
    private string instanceId;
    private string threadName;
    private IThreadPool threadPool;
    private IJobStore jobStore;
    private IJobRunShellFactory jobRunShellFactory;
    [CompilerGeneratedAttribute]
private IList`1<ISchedulerPlugin> <SchedulerPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeSchedulerThreadDaemon>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISchedulerExporter <SchedulerExporter>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BatchTimeWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InterruptJobsOnShutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InterruptJobsOnShutdownWithWait>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchedulerRepository <SchedulerRepository>k__BackingField;
    public string Name { get; public set; }
    public string InstanceId { get; public set; }
    public string ThreadName { get; public set; }
    public IThreadPool ThreadPool { get; public set; }
    public IJobStore JobStore { get; public set; }
    public IJobRunShellFactory JobRunShellFactory { get; public set; }
    public IList`1<ISchedulerPlugin> SchedulerPlugins { get; }
    public bool MakeSchedulerThreadDaemon { get; public set; }
    [NullableAttribute("2")]
public ISchedulerExporter SchedulerExporter { get; public set; }
    public TimeSpan BatchTimeWindow { get; public set; }
    public int MaxBatchSize { get; public set; }
    public bool InterruptJobsOnShutdown { get; public set; }
    public bool InterruptJobsOnShutdownWithWait { get; public set; }
    internal ISchedulerRepository SchedulerRepository { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_InstanceId();
    public void set_InstanceId(string value);
    public string get_ThreadName();
    public void set_ThreadName(string value);
    public IThreadPool get_ThreadPool();
    public void set_ThreadPool(IThreadPool value);
    public IJobStore get_JobStore();
    public void set_JobStore(IJobStore value);
    public IJobRunShellFactory get_JobRunShellFactory();
    public void set_JobRunShellFactory(IJobRunShellFactory value);
    public static string GetUniqueIdentifier(string schedName, string schedInstId);
    public string GetUniqueIdentifier();
    public void AddSchedulerPlugin(ISchedulerPlugin plugin);
    [CompilerGeneratedAttribute]
public IList`1<ISchedulerPlugin> get_SchedulerPlugins();
    [CompilerGeneratedAttribute]
public bool get_MakeSchedulerThreadDaemon();
    [CompilerGeneratedAttribute]
public void set_MakeSchedulerThreadDaemon(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISchedulerExporter get_SchedulerExporter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SchedulerExporter(ISchedulerExporter value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BatchTimeWindow();
    [CompilerGeneratedAttribute]
public void set_BatchTimeWindow(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxBatchSize();
    [CompilerGeneratedAttribute]
public void set_MaxBatchSize(int value);
    [CompilerGeneratedAttribute]
public bool get_InterruptJobsOnShutdown();
    [CompilerGeneratedAttribute]
public void set_InterruptJobsOnShutdown(bool value);
    [CompilerGeneratedAttribute]
public bool get_InterruptJobsOnShutdownWithWait();
    [CompilerGeneratedAttribute]
public void set_InterruptJobsOnShutdownWithWait(bool value);
    [CompilerGeneratedAttribute]
internal ISchedulerRepository get_SchedulerRepository();
    [CompilerGeneratedAttribute]
internal void set_SchedulerRepository(ISchedulerRepository value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.QuartzSchedulerThread : object {
    private QuartzScheduler qs;
    private QuartzSchedulerResources qsRsrcs;
    private object sigLock;
    private bool signaled;
    private Nullable`1<DateTimeOffset> signaledNextFireTimeUtc;
    private bool paused;
    private bool halted;
    private QuartzRandom random;
    private static TimeSpan DefaultIdleWaitTime;
    private TimeSpan idleWaitTime;
    private int idleWaitVariableness;
    private CancellationTokenSource cancellationTokenSource;
    private Task task;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    private static TimeSpan minDelay;
    private static TimeSpan maxDelay;
    internal ILog Log { get; }
    [TimeSpanParseRuleAttribute("0")]
unknown TimeSpan IdleWaitTime {internal set; }
    internal bool Paused { get; }
    internal QuartzSchedulerThread(QuartzScheduler qs, QuartzSchedulerResources qsRsrcs);
    private static QuartzSchedulerThread();
    [CompilerGeneratedAttribute]
internal ILog get_Log();
    internal virtual void set_IdleWaitTime(TimeSpan value);
    private TimeSpan GetRandomizedIdleWaitTime();
    internal virtual bool get_Paused();
    internal virtual void TogglePause(bool pause);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzSchedulerThread/<Halt>d__23")]
internal virtual Task Halt(bool wait);
    public void SignalSchedulingChange(Nullable`1<DateTimeOffset> candidateNewNextFireTimeUtc);
    public void ClearSignaledSchedulingChange();
    public bool IsScheduleChanged();
    public Nullable`1<DateTimeOffset> GetSignaledNextFireTimeUtc();
    [AsyncStateMachineAttribute("Quartz.Core.QuartzSchedulerThread/<Run>d__28")]
public Task Run();
    private static TimeSpan ComputeDelayForRepeatedErrors(IJobStore jobStore, int acquiresFailed);
    [AsyncStateMachineAttribute("Quartz.Core.QuartzSchedulerThread/<ReleaseIfScheduleChangedSignificantly>d__32")]
private Task`1<bool> ReleaseIfScheduleChangedSignificantly(List`1<IOperableTrigger> triggers, DateTimeOffset triggerTime);
    private bool IsCandidateNewTimeEarlierWithinReason(DateTimeOffset oldTimeUtc, bool clearSignal);
    public void Start();
    [AsyncStateMachineAttribute("Quartz.Core.QuartzSchedulerThread/<Shutdown>d__35")]
public Task Shutdown();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Core.SchedulerSignalerImpl : object {
    private ILog log;
    protected QuartzScheduler sched;
    protected QuartzSchedulerThread schedThread;
    public SchedulerSignalerImpl(QuartzScheduler sched, QuartzSchedulerThread schedThread);
    [AsyncStateMachineAttribute("Quartz.Core.SchedulerSignalerImpl/<NotifyTriggerListenersMisfired>d__4")]
public virtual Task NotifyTriggerListenersMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public sealed virtual Task NotifySchedulerListenersFinalized(ITrigger trigger, CancellationToken cancellationToken);
    public sealed virtual void SignalSchedulingChange(Nullable`1<DateTimeOffset> candidateNewNextFireTime, CancellationToken cancellationToken);
    public sealed virtual Task NotifySchedulerListenersJobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task NotifySchedulerListenersError(string message, SchedulerException jpe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.CronExpression : object {
    protected static int Second;
    protected static int Minute;
    protected static int Hour;
    protected static int DayOfMonth;
    protected static int Month;
    protected static int DayOfWeek;
    protected static int Year;
    protected static int AllSpecInt;
    protected static int NoSpecInt;
    protected static int AllSpec;
    protected static int NoSpec;
    private static Dictionary`2<string, int> monthMap;
    private static Dictionary`2<string, int> dayMap;
    [NullableAttribute("2")]
private TimeZoneInfo timeZone;
    protected SortedSet`1<int> seconds;
    protected SortedSet`1<int> minutes;
    protected SortedSet`1<int> hours;
    protected SortedSet`1<int> daysOfMonth;
    protected SortedSet`1<int> months;
    protected SortedSet`1<int> daysOfWeek;
    protected SortedSet`1<int> years;
    protected bool lastdayOfWeek;
    protected int everyNthWeek;
    protected int nthdayOfWeek;
    protected bool lastdayOfMonth;
    protected bool nearestWeekday;
    protected int lastdayOffset;
    protected bool calendardayOfWeek;
    protected bool calendardayOfMonth;
    protected bool expressionParsed;
    public static int MaxYear;
    private static Char[] splitSeparators;
    private static Char[] commaSeparator;
    private static Regex regex;
    [CompilerGeneratedAttribute]
private string <CronExpressionString>k__BackingField;
    public TimeZoneInfo TimeZone { get; public set; }
    public string CronExpressionString { get; }
    private static CronExpression();
    public CronExpression(string cronExpression);
    protected CronExpression(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsSatisfiedBy(DateTimeOffset dateUtc);
    public virtual Nullable`1<DateTimeOffset> GetNextValidTimeAfter(DateTimeOffset date);
    public virtual Nullable`1<DateTimeOffset> GetNextInvalidTimeAfter(DateTimeOffset date);
    public void set_TimeZone(TimeZoneInfo value);
    public TimeZoneInfo get_TimeZone();
    public virtual string ToString();
    public static bool IsValidExpression(string cronExpression);
    public static void ValidateExpression(string cronExpression);
    protected void BuildExpression(string expression);
    protected virtual int StoreExpressionVals(int pos, string s, int type);
    private static void CheckIncrementRange(int incr, int type);
    protected virtual int CheckNext(int pos, string s, int val, int type);
    [CompilerGeneratedAttribute]
public string get_CronExpressionString();
    public virtual string GetExpressionSummary();
    protected virtual string GetExpressionSetSummary(ICollection`1<int> data);
    protected virtual int SkipWhiteSpace(int i, string s);
    protected virtual int FindNextWhiteSpace(int i, string s);
    protected virtual void AddToSet(int val, int end, int incr, int type);
    protected virtual ISet`1<int> GetSet(int type);
    protected virtual ValueSet GetValue(int v, string s, int i);
    protected virtual int GetNumericValue(string s, int i);
    protected virtual int GetMonthNumber(string s);
    protected virtual int GetDayOfWeekNumber(string s);
    protected virtual Nullable`1<DateTimeOffset> GetTime(int sc, int mn, int hr, int dayofmn, int mon);
    public virtual Nullable`1<DateTimeOffset> GetTimeAfter(DateTimeOffset afterTimeUtc);
    protected static DateTimeOffset CreateDateTimeWithoutMillis(DateTimeOffset time);
    protected static DateTimeOffset SetCalendarHour(DateTimeOffset date, int hour);
    public virtual Nullable`1<DateTimeOffset> GetTimeBefore(Nullable`1<DateTimeOffset> endTime);
    public virtual Nullable`1<DateTimeOffset> GetFinalFireTime();
    protected virtual bool IsLeapYear(int year);
    protected virtual int GetLastDayOfMonth(int monthNum, int year);
    public object Clone();
    [NullableContextAttribute("2")]
public sealed virtual void OnDeserialization(object sender);
    public bool Equals(CronExpression other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.CronScheduleBuilder : ScheduleBuilder`1<ICronTrigger> {
    private CronExpression cronExpression;
    private int misfireInstruction;
    protected CronScheduleBuilder(CronExpression cronExpression);
    public virtual IMutableTrigger Build();
    public static CronScheduleBuilder CronSchedule(string cronExpression);
    private static CronScheduleBuilder CronScheduleNoParseException(string presumedValidCronExpression);
    public static CronScheduleBuilder CronSchedule(CronExpression cronExpression);
    public static CronScheduleBuilder DailyAtHourAndMinute(int hour, int minute);
    public static CronScheduleBuilder AtHourAndMinuteOnGivenDaysOfWeek(int hour, int minute, DayOfWeek[] daysOfWeek);
    public static CronScheduleBuilder WeeklyOnDayAndHourAndMinute(DayOfWeek dayOfWeek, int hour, int minute);
    public static CronScheduleBuilder MonthlyOnDayAndHourAndMinute(int dayOfMonth, int hour, int minute);
    public CronScheduleBuilder InTimeZone(TimeZoneInfo tz);
    public CronScheduleBuilder WithMisfireHandlingInstructionIgnoreMisfires();
    public CronScheduleBuilder WithMisfireHandlingInstructionDoNothing();
    public CronScheduleBuilder WithMisfireHandlingInstructionFireAndProceed();
    internal CronScheduleBuilder WithMisfireHandlingInstruction(int readMisfireInstructionFromString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.CronScheduleTriggerBuilderExtensions : object {
    [ExtensionAttribute]
public static TriggerBuilder WithCronSchedule(TriggerBuilder triggerBuilder, string cronExpression);
    [ExtensionAttribute]
public static TriggerBuilder WithCronSchedule(TriggerBuilder triggerBuilder, string cronExpression, Action`1<CronScheduleBuilder> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.DailyTimeIntervalScheduleBuilder : ScheduleBuilder`1<IDailyTimeIntervalTrigger> {
    private int interval;
    private IntervalUnit intervalUnit;
    [NullableAttribute("2")]
private HashSet`1<DayOfWeek> daysOfWeek;
    [NullableAttribute("2")]
private TimeOfDay startTimeOfDayUtc;
    [NullableAttribute("2")]
private TimeOfDay endTimeOfDayUtc;
    private int repeatCount;
    [NullableAttribute("2")]
private TimeZoneInfo timeZone;
    private int misfireInstruction;
    public static IReadOnlyCollection`1<DayOfWeek> AllDaysOfTheWeek;
    public static IReadOnlyCollection`1<DayOfWeek> MondayThroughFriday;
    public static IReadOnlyCollection`1<DayOfWeek> SaturdayAndSunday;
    private static DailyTimeIntervalScheduleBuilder();
    public static DailyTimeIntervalScheduleBuilder Create();
    public virtual IMutableTrigger Build();
    public DailyTimeIntervalScheduleBuilder WithInterval(int interval, IntervalUnit unit);
    public DailyTimeIntervalScheduleBuilder WithIntervalInSeconds(int intervalInSeconds);
    public DailyTimeIntervalScheduleBuilder WithIntervalInMinutes(int intervalInMinutes);
    public DailyTimeIntervalScheduleBuilder WithIntervalInHours(int intervalInHours);
    public DailyTimeIntervalScheduleBuilder OnDaysOfTheWeek(IReadOnlyCollection`1<DayOfWeek> onDaysOfWeek);
    public DailyTimeIntervalScheduleBuilder OnDaysOfTheWeek(DayOfWeek[] onDaysOfWeek);
    public DailyTimeIntervalScheduleBuilder OnMondayThroughFriday();
    public DailyTimeIntervalScheduleBuilder OnSaturdayAndSunday();
    public DailyTimeIntervalScheduleBuilder OnEveryDay();
    public DailyTimeIntervalScheduleBuilder StartingDailyAt(TimeOfDay timeOfDayUtc);
    public DailyTimeIntervalScheduleBuilder EndingDailyAt(TimeOfDay timeOfDayUtc);
    public DailyTimeIntervalScheduleBuilder EndingDailyAfterCount(int count);
    public DailyTimeIntervalScheduleBuilder WithMisfireHandlingInstructionIgnoreMisfires();
    public DailyTimeIntervalScheduleBuilder WithMisfireHandlingInstructionDoNothing();
    public DailyTimeIntervalScheduleBuilder WithMisfireHandlingInstructionFireAndProceed();
    public DailyTimeIntervalScheduleBuilder WithRepeatCount(int repeatCount);
    public DailyTimeIntervalScheduleBuilder InTimeZone(TimeZoneInfo timezone);
    private static void ValidateInterval(int interval);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.DailyTimeIntervalTriggerBuilderExtensions : object {
    [ExtensionAttribute]
public static TriggerBuilder WithDailyTimeIntervalSchedule(TriggerBuilder triggerBuilder);
    [ExtensionAttribute]
public static TriggerBuilder WithDailyTimeIntervalSchedule(TriggerBuilder triggerBuilder, Action`1<DailyTimeIntervalScheduleBuilder> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.DateBuilder : object {
    private int month;
    private int day;
    private int year;
    private int hour;
    private int minute;
    private int second;
    [NullableAttribute("2")]
private TimeZoneInfo tz;
    private DateBuilder(TimeZoneInfo tz);
    public static DateBuilder NewDate();
    public static DateBuilder NewDateInTimeZone(TimeZoneInfo tz);
    public DateTimeOffset Build();
    public DateBuilder AtHourOfDay(int hour);
    public DateBuilder AtMinute(int minute);
    public DateBuilder AtSecond(int second);
    public DateBuilder AtHourMinuteAndSecond(int hour, int minute, int second);
    public DateBuilder OnDay(int day);
    public DateBuilder InMonth(int month);
    public DateBuilder InMonthOnDay(int month, int day);
    public DateBuilder InYear(int year);
    public DateBuilder InTimeZone(TimeZoneInfo tz);
    public static DateTimeOffset FutureDate(int interval, IntervalUnit unit);
    public static DateTimeOffset TomorrowAt(int hour, int minute, int second);
    public static DateTimeOffset TodayAt(int hour, int minute, int second);
    private static DateTimeOffset TranslatedAdd(DateTimeOffset date, IntervalUnit unit, int amountToAdd);
    public static DateTimeOffset DateOf(int hour, int minute, int second);
    public static DateTimeOffset DateOf(int hour, int minute, int second, int dayOfMonth, int month);
    public static DateTimeOffset DateOf(int hour, int minute, int second, int dayOfMonth, int month, int year);
    public static DateTimeOffset EvenHourDateAfterNow();
    public static DateTimeOffset EvenHourDate(Nullable`1<DateTimeOffset> date);
    public static DateTimeOffset EvenHourDateBefore(Nullable`1<DateTimeOffset> date);
    public static DateTimeOffset EvenMinuteDateAfterNow();
    public static DateTimeOffset EvenMinuteDate(Nullable`1<DateTimeOffset> date);
    public static DateTimeOffset EvenMinuteDateBefore(Nullable`1<DateTimeOffset> date);
    public static DateTimeOffset EvenSecondDateAfterNow();
    public static DateTimeOffset EvenSecondDate(DateTimeOffset date);
    public static DateTimeOffset EvenSecondDateBefore(DateTimeOffset date);
    public static DateTimeOffset NextGivenMinuteDate(Nullable`1<DateTimeOffset> date, int minuteBase);
    public static DateTimeOffset NextGivenSecondDate(Nullable`1<DateTimeOffset> date, int secondBase);
    public static void ValidateHour(int hour);
    public static void ValidateMinute(int minute);
    public static void ValidateSecond(int second);
    public static void ValidateDayOfMonth(int day);
    public static void ValidateMonth(int month);
    public static void ValidateYear(int year);
}
[AttributeUsageAttribute("1028")]
public class Quartz.DisallowConcurrentExecutionAttribute : Attribute {
}
internal static class Quartz.ExceptionHelper : object {
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string paramName, string message);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, string paramName);
}
[NullableContextAttribute("2")]
public interface Quartz.ICalendar {
    public string Description { get; public set; }
    public ICalendar CalendarBase { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual void set_CalendarBase(ICalendar value);
    public abstract virtual ICalendar get_CalendarBase();
    public abstract virtual bool IsTimeIncluded(DateTimeOffset timeUtc);
    public abstract virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    [NullableContextAttribute("1")]
public abstract virtual ICalendar Clone();
}
[NullableContextAttribute("1")]
public interface Quartz.ICalendarIntervalTrigger {
    public IntervalUnit RepeatIntervalUnit { get; public set; }
    public int RepeatInterval { get; public set; }
    public int TimesTriggered { get; public set; }
    public TimeZoneInfo TimeZone { get; }
    public bool PreserveHourOfDayAcrossDaylightSavings { get; }
    public bool SkipDayIfHourDoesNotExist { get; }
    public abstract virtual IntervalUnit get_RepeatIntervalUnit();
    public abstract virtual void set_RepeatIntervalUnit(IntervalUnit value);
    public abstract virtual int get_RepeatInterval();
    public abstract virtual void set_RepeatInterval(int value);
    public abstract virtual int get_TimesTriggered();
    public abstract virtual void set_TimesTriggered(int value);
    public abstract virtual TimeZoneInfo get_TimeZone();
    public abstract virtual bool get_PreserveHourOfDayAcrossDaylightSavings();
    public abstract virtual bool get_SkipDayIfHourDoesNotExist();
}
public interface Quartz.ICancellableJobExecutionContext {
    public abstract virtual void Cancel();
}
internal interface Quartz.IContainerConfigurationSupport {
    [NullableContextAttribute("1")]
public abstract virtual void RegisterSingleton();
}
[NullableContextAttribute("2")]
public interface Quartz.ICronTrigger {
    public string CronExpressionString { get; public set; }
    [NullableAttribute("1")]
public TimeZoneInfo TimeZone { get; public set; }
    public abstract virtual void set_CronExpressionString(string value);
    public abstract virtual string get_CronExpressionString();
    [NullableContextAttribute("1")]
public abstract virtual TimeZoneInfo get_TimeZone();
    [NullableContextAttribute("1")]
public abstract virtual void set_TimeZone(TimeZoneInfo value);
    public abstract virtual string GetExpressionSummary();
}
[NullableContextAttribute("1")]
public interface Quartz.IDailyTimeIntervalTrigger {
    public int RepeatCount { get; }
    public IntervalUnit RepeatIntervalUnit { get; }
    public int RepeatInterval { get; }
    public TimeOfDay StartTimeOfDay { get; }
    public TimeOfDay EndTimeOfDay { get; }
    public IReadOnlyCollection`1<DayOfWeek> DaysOfWeek { get; public set; }
    public int TimesTriggered { get; public set; }
    public TimeZoneInfo TimeZone { get; }
    public abstract virtual int get_RepeatCount();
    public abstract virtual IntervalUnit get_RepeatIntervalUnit();
    public abstract virtual int get_RepeatInterval();
    public abstract virtual TimeOfDay get_StartTimeOfDay();
    public abstract virtual TimeOfDay get_EndTimeOfDay();
    public abstract virtual IReadOnlyCollection`1<DayOfWeek> get_DaysOfWeek();
    public abstract virtual void set_DaysOfWeek(IReadOnlyCollection`1<DayOfWeek> value);
    public abstract virtual int get_TimesTriggered();
    public abstract virtual void set_TimesTriggered(int value);
    public abstract virtual TimeZoneInfo get_TimeZone();
}
[NullableContextAttribute("1")]
public interface Quartz.IJob {
    public abstract virtual Task Execute(IJobExecutionContext context);
}
[NullableContextAttribute("1")]
public interface Quartz.IJobConfigurator {
    public abstract virtual JobBuilder WithIdentity(string name);
    public abstract virtual JobBuilder WithIdentity(string name, string group);
    public abstract virtual JobBuilder WithIdentity(JobKey key);
    public abstract virtual JobBuilder WithDescription(string description);
    public abstract virtual JobBuilder RequestRecovery(bool shouldRecover);
    public abstract virtual JobBuilder StoreDurably(bool durability);
    public abstract virtual JobBuilder UsingJobData(string key, string value);
    public abstract virtual JobBuilder UsingJobData(string key, int value);
    public abstract virtual JobBuilder UsingJobData(string key, long value);
    public abstract virtual JobBuilder UsingJobData(string key, float value);
    public abstract virtual JobBuilder UsingJobData(string key, double value);
    public abstract virtual JobBuilder UsingJobData(string key, bool value);
    public abstract virtual JobBuilder UsingJobData(string key, Guid value);
    public abstract virtual JobBuilder UsingJobData(string key, char value);
    public abstract virtual JobBuilder UsingJobData(JobDataMap newJobDataMap);
    public abstract virtual JobBuilder SetJobData(JobDataMap newJobDataMap);
    public abstract virtual JobBuilder DisallowConcurrentExecution(bool concurrentExecutionDisallowed);
    public abstract virtual JobBuilder PersistJobDataAfterExecution(bool persistJobDataAfterExecution);
}
[NullableContextAttribute("1")]
public interface Quartz.IJobDetail {
    public JobKey Key { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public Type JobType { get; }
    public JobDataMap JobDataMap { get; }
    public bool Durable { get; }
    public bool PersistJobDataAfterExecution { get; }
    public bool ConcurrentExecutionDisallowed { get; }
    public bool RequestsRecovery { get; }
    public abstract virtual JobKey get_Key();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
    public abstract virtual Type get_JobType();
    public abstract virtual JobDataMap get_JobDataMap();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_PersistJobDataAfterExecution();
    public abstract virtual bool get_ConcurrentExecutionDisallowed();
    public abstract virtual bool get_RequestsRecovery();
    public abstract virtual JobBuilder GetJobBuilder();
    public abstract virtual IJobDetail Clone();
}
[NullableContextAttribute("1")]
public interface Quartz.IJobExecutionContext {
    public IScheduler Scheduler { get; }
    public ITrigger Trigger { get; }
    [NullableAttribute("2")]
public ICalendar Calendar { get; }
    public bool Recovering { get; }
    public TriggerKey RecoveringTriggerKey { get; }
    public int RefireCount { get; }
    public JobDataMap MergedJobDataMap { get; }
    public IJobDetail JobDetail { get; }
    public IJob JobInstance { get; }
    public DateTimeOffset FireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> ScheduledFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> PreviousFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    public string FireInstanceId { get; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    public TimeSpan JobRunTime { get; }
    public CancellationToken CancellationToken { get; }
    public abstract virtual IScheduler get_Scheduler();
    public abstract virtual ITrigger get_Trigger();
    [NullableContextAttribute("2")]
public abstract virtual ICalendar get_Calendar();
    public abstract virtual bool get_Recovering();
    public abstract virtual TriggerKey get_RecoveringTriggerKey();
    public abstract virtual int get_RefireCount();
    public abstract virtual JobDataMap get_MergedJobDataMap();
    public abstract virtual IJobDetail get_JobDetail();
    public abstract virtual IJob get_JobInstance();
    public abstract virtual DateTimeOffset get_FireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_ScheduledFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_PreviousFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    public abstract virtual string get_FireInstanceId();
    [NullableContextAttribute("2")]
public abstract virtual object get_Result();
    [NullableContextAttribute("2")]
public abstract virtual void set_Result(object value);
    public abstract virtual TimeSpan get_JobRunTime();
    public abstract virtual void Put(object key, object objectValue);
    public abstract virtual object Get(object key);
    public abstract virtual CancellationToken get_CancellationToken();
}
[NullableContextAttribute("1")]
public interface Quartz.IJobListener {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken);
    public abstract virtual Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken);
    public abstract virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.IJobWrapper {
    public IJob Target { get; }
    public abstract virtual IJob get_Target();
}
[NullableContextAttribute("1")]
public interface Quartz.IListenerManager {
    public abstract virtual void AddJobListener(IJobListener jobListener, IMatcher`1[] matchers);
    public abstract virtual void AddJobListener(IJobListener jobListener, IReadOnlyCollection`1<IMatcher`1<JobKey>> matchers);
    public abstract virtual bool AddJobListenerMatcher(string listenerName, IMatcher`1<JobKey> matcher);
    public abstract virtual bool RemoveJobListenerMatcher(string listenerName, IMatcher`1<JobKey> matcher);
    public abstract virtual bool SetJobListenerMatchers(string listenerName, IReadOnlyCollection`1<IMatcher`1<JobKey>> matchers);
    public abstract virtual IReadOnlyCollection`1<IMatcher`1<JobKey>> GetJobListenerMatchers(string listenerName);
    public abstract virtual bool RemoveJobListener(string name);
    public abstract virtual IReadOnlyCollection`1<IJobListener> GetJobListeners();
    public abstract virtual IJobListener GetJobListener(string name);
    public abstract virtual void AddTriggerListener(ITriggerListener triggerListener, IMatcher`1[] matchers);
    public abstract virtual void AddTriggerListener(ITriggerListener triggerListener, IReadOnlyCollection`1<IMatcher`1<TriggerKey>> matchers);
    public abstract virtual bool AddTriggerListenerMatcher(string listenerName, IMatcher`1<TriggerKey> matcher);
    public abstract virtual bool RemoveTriggerListenerMatcher(string listenerName, IMatcher`1<TriggerKey> matcher);
    public abstract virtual bool SetTriggerListenerMatchers(string listenerName, IReadOnlyCollection`1<IMatcher`1<TriggerKey>> matchers);
    public abstract virtual IReadOnlyCollection`1<IMatcher`1<TriggerKey>> GetTriggerListenerMatchers(string listenerName);
    public abstract virtual bool RemoveTriggerListener(string name);
    public abstract virtual IReadOnlyCollection`1<ITriggerListener> GetTriggerListeners();
    public abstract virtual ITriggerListener GetTriggerListener(string name);
    public abstract virtual void AddSchedulerListener(ISchedulerListener schedulerListener);
    public abstract virtual bool RemoveSchedulerListener(ISchedulerListener schedulerListener);
    public abstract virtual IReadOnlyCollection`1<ISchedulerListener> GetSchedulerListeners();
}
[NullableContextAttribute("1")]
public interface Quartz.IMatcher`1 {
    public abstract virtual bool IsMatch(T key);
    public abstract virtual int GetHashCode();
    public abstract virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.AdoConstants : object {
    internal static String[] AllTableNames;
    public static string TableJobDetails;
    public static string TableTriggers;
    public static string TableSimpleTriggers;
    public static string TableCronTriggers;
    public static string TableBlobTriggers;
    public static string TableFiredTriggers;
    public static string TableCalendars;
    public static string TablePausedTriggers;
    public static string TableLocks;
    public static string TableSchedulerState;
    public static string ColumnSchedulerName;
    public static string ColumnJobName;
    public static string ColumnJobGroup;
    public static string ColumnIsDurable;
    public static string ColumnIsNonConcurrent;
    public static string ColumnIsUpdateData;
    public static string ColumnRequestsRecovery;
    public static string ColumnJobDataMap;
    public static string ColumnJobClass;
    public static string ColumnDescription;
    public static string ColumnTriggerName;
    public static string ColumnTriggerGroup;
    public static string ColumnNextFireTime;
    public static string ColumnPreviousFireTime;
    public static string ColumnTriggerState;
    public static string ColumnTriggerType;
    public static string ColumnStartTime;
    public static string ColumnEndTime;
    public static string ColumnMifireInstruction;
    public static string ColumnPriority;
    public static string AliasColumnNextFireTime;
    public static string ColumnRepeatCount;
    public static string ColumnRepeatInterval;
    public static string ColumnTimesTriggered;
    public static string ColumnCronExpression;
    public static string ColumnBlob;
    public static string ColumnTimeZoneId;
    public static string ColumnInstanceName;
    public static string ColumnFiredTime;
    public static string ColumnScheduledTime;
    public static string ColumnEntryId;
    public static string ColumnEntryState;
    public static string ColumnCalendarName;
    public static string ColumnCalendar;
    public static string ColumnLockName;
    public static string ColumnLastCheckinTime;
    public static string ColumnCheckinInterval;
    public static string DefaultTablePrefix;
    public static string StateWaiting;
    public static string StateAcquired;
    public static string StateExecuting;
    public static string StateComplete;
    public static string StateBlocked;
    public static string StateError;
    public static string StatePaused;
    public static string StatePausedBlocked;
    public static string StateDeleted;
    public static string AllGroupsPaused;
    public static string TriggerTypeSimple;
    public static string TriggerTypeCron;
    public static string TriggerTypeCalendarInterval;
    public static string TriggerTypeDailyTimeInterval;
    public static string TriggerTypeBlob;
    private static AdoConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.Impl.AdoJobStore.AdoJobStoreUtil : object {
    [ObsoleteAttribute("Use overload with schedNameLiteral, scheduler name is now a sql parameter")]
public static string ReplaceTablePrefix(string query, string tablePrefix, string schedNameLiteral);
    public static string ReplaceTablePrefix(string query, string tablePrefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.AdoUtil : object {
    private ILog log;
    private IDbProvider dbProvider;
    public AdoUtil(IDbProvider dbProvider);
    public void AddCommandParameter(IDbCommand cmd, string paramName, object paramValue);
    public void AddCommandParameter(IDbCommand cmd, string paramName, object paramValue, Enum dataType, Nullable`1<int> size);
    private void SetDataTypeToCommandParameter(IDbDataParameter param, object parameterType);
    public DbCommand PrepareCommand(ConnectionAndTransactionHolder cth, string commandText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.CalendarIntervalTriggerPersistenceDelegate : SimplePropertiesTriggerPersistenceDelegateSupport {
    public virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    public virtual string GetHandledTriggerTypeDiscriminator();
    protected virtual SimplePropertiesTriggerProperties GetTriggerProperties(IOperableTrigger trigger);
    protected virtual TriggerPropertyBundle GetTriggerPropertyBundle(SimplePropertiesTriggerProperties props);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Impl.AdoJobStore.ClusterManager : object {
    private ILog log;
    private Guid requestorId;
    private JobStoreSupport jobStoreSupport;
    private QueuedTaskScheduler taskScheduler;
    private CancellationTokenSource cancellationTokenSource;
    private Task task;
    private int numFails;
    internal ClusterManager(JobStoreSupport jobStoreSupport);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.ClusterManager/<Initialize>d__8")]
public Task Initialize();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.ClusterManager/<Shutdown>d__9")]
public Task Shutdown();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.ClusterManager/<Manage>d__10")]
private Task`1<bool> Manage();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.ClusterManager/<Run>d__11")]
private Task Run(CancellationToken token);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task <Initialize>b__8_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.Common.ConfigurationBasedDbMetadataFactory : DbMetadataFactory {
    private string propertyGroupName;
    private NameValueCollection properties;
    public ConfigurationBasedDbMetadataFactory(NameValueCollection properties, string propertyGroupName);
    protected virtual PropertiesParser GetPropertiesParser();
    public virtual IReadOnlyCollection`1<string> GetProviderNames();
    public virtual DbMetadata GetDbMetadata(string providerName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.Common.DbMetadata : object {
    [NullableAttribute("1")]
private string parameterDbTypePropertyName;
    private string dbBinaryTypeName;
    private Enum dbBinaryType;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindByName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <ParameterDbTypeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <ParameterIsNullableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParameterNamePrefixInParameterCollection>k__BackingField;
    public string AssemblyName { get; public set; }
    public string ProductName { get; public set; }
    public Type ConnectionType { get; public set; }
    public Type CommandType { get; public set; }
    public Type ParameterType { get; public set; }
    public string ParameterNamePrefix { get; public set; }
    public Type ExceptionType { get; public set; }
    public bool BindByName { get; public set; }
    public Type ParameterDbType { get; public set; }
    public PropertyInfo ParameterDbTypeProperty { get; public set; }
    public PropertyInfo ParameterIsNullableProperty { get; public set; }
    [NullableAttribute("1")]
unknown string DbBinaryTypeName {public set; }
    public Enum DbBinaryType { get; }
    [NullableAttribute("1")]
unknown string ParameterDbTypePropertyName {public set; }
    public bool UseParameterNamePrefixInParameterCollection { get; public set; }
    public void Init();
    [CompilerGeneratedAttribute]
public virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public virtual void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductName();
    [CompilerGeneratedAttribute]
public virtual void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionType(Type value);
    [CompilerGeneratedAttribute]
public virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(Type value);
    [CompilerGeneratedAttribute]
public virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterType(Type value);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterNamePrefix();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterNamePrefix(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ExceptionType();
    [CompilerGeneratedAttribute]
public virtual void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public virtual bool get_BindByName();
    [CompilerGeneratedAttribute]
public virtual void set_BindByName(bool value);
    [CompilerGeneratedAttribute]
public virtual Type get_ParameterDbType();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterDbType(Type value);
    [CompilerGeneratedAttribute]
public virtual PropertyInfo get_ParameterDbTypeProperty();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterDbTypeProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public virtual PropertyInfo get_ParameterIsNullableProperty();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterIsNullableProperty(PropertyInfo value);
    [NullableContextAttribute("1")]
public virtual void set_DbBinaryTypeName(string value);
    public virtual Enum get_DbBinaryType();
    [NullableContextAttribute("1")]
public virtual void set_ParameterDbTypePropertyName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseParameterNamePrefixInParameterCollection();
    [CompilerGeneratedAttribute]
public virtual void set_UseParameterNamePrefixInParameterCollection(bool value);
    [NullableContextAttribute("1")]
public virtual string GetParameterName(string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.AdoJobStore.Common.DbMetadataFactory : object {
    public abstract virtual IReadOnlyCollection`1<string> GetProviderNames();
    public abstract virtual DbMetadata GetDbMetadata(string providerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.Common.DbProvider : object {
    protected static string PropertyDbProvider;
    protected static string DbProviderSectionName;
    protected static string DbProviderResourceName;
    [NullableAttribute("2")]
private MethodInfo commandBindByNamePropertySetter;
    private static List`1<DbMetadataFactory> dbMetadataFactories;
    private static ConcurrentDictionary`2<string, DbMetadata> dbMetadataLookup;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private DbMetadata <Metadata>k__BackingField;
    public string ConnectionString { get; public set; }
    public DbMetadata Metadata { get; }
    private static DbProvider();
    public DbProvider(string dbProviderName, string connectionString);
    public sealed virtual void Initialize();
    public static void RegisterDbMetadata(string dbProviderName, DbMetadata metadata);
    private static DbMetadata GetDbMetadata(string providerName);
    protected static string GenerateValidProviderNamesInfo();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DbMetadata get_Metadata();
    public virtual void Shutdown();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.Common.EmbeddedAssemblyResourceDbMetadataFactory : DbMetadataFactory {
    private string resourceName;
    private string propertyGroupName;
    public EmbeddedAssemblyResourceDbMetadataFactory(string resourceName, string propertyGroupName);
    public virtual IReadOnlyCollection`1<string> GetProviderNames();
    public virtual DbMetadata GetDbMetadata(string providerName);
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.Common.IDbProvider {
    public string ConnectionString { get; public set; }
    public DbMetadata Metadata { get; }
    public abstract virtual void Initialize();
    public abstract virtual DbCommand CreateCommand();
    public abstract virtual DbConnection CreateConnection();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual string get_ConnectionString();
    public abstract virtual DbMetadata get_Metadata();
    public abstract virtual void Shutdown();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder : object {
    private Nullable`1<DateTimeOffset> sigChangeForTxCompletion;
    private DbConnection connection;
    [NullableAttribute("2")]
private DbTransaction transaction;
    public DbConnection Connection { get; }
    [NullableAttribute("2")]
public DbTransaction Transaction { get; }
    internal Nullable`1<DateTimeOffset> SignalSchedulingChangeOnTxCompletion { get; internal set; }
    public ConnectionAndTransactionHolder(DbConnection connection, DbTransaction transaction);
    public DbConnection get_Connection();
    [NullableContextAttribute("2")]
public DbTransaction get_Transaction();
    public void Attach(DbCommand cmd);
    public void Commit(bool openNewTransaction);
    public void Close();
    public sealed virtual void Dispose();
    internal virtual Nullable`1<DateTimeOffset> get_SignalSchedulingChangeOnTxCompletion();
    internal virtual void set_SignalSchedulingChangeOnTxCompletion(Nullable`1<DateTimeOffset> value);
    public void Rollback(bool transientError);
    private void CheckNotZombied();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.CronTriggerPersistenceDelegate : object {
    [CompilerGeneratedAttribute]
private string <TablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbAccessor <DbAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedNameLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedName>k__BackingField;
    protected string TablePrefix { get; private set; }
    protected IDbAccessor DbAccessor { get; private set; }
    [ObsoleteAttribute("Scheduler name is now added to queries as a parameter")]
protected string SchedNameLiteral { get; private set; }
    protected string SchedName { get; private set; }
    public sealed virtual void Initialize(string tablePrefix, string schedName, IDbAccessor dbAccessor);
    [CompilerGeneratedAttribute]
protected string get_TablePrefix();
    [CompilerGeneratedAttribute]
private void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
protected IDbAccessor get_DbAccessor();
    [CompilerGeneratedAttribute]
private void set_DbAccessor(IDbAccessor value);
    [CompilerGeneratedAttribute]
protected string get_SchedNameLiteral();
    [CompilerGeneratedAttribute]
private void set_SchedNameLiteral(string value);
    [CompilerGeneratedAttribute]
protected string get_SchedName();
    [CompilerGeneratedAttribute]
private void set_SchedName(string value);
    public sealed virtual string GetHandledTriggerTypeDiscriminator();
    public sealed virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.CronTriggerPersistenceDelegate/<DeleteExtendedTriggerProperties>d__19")]
public sealed virtual Task`1<int> DeleteExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.CronTriggerPersistenceDelegate/<InsertExtendedTriggerProperties>d__20")]
public sealed virtual Task`1<int> InsertExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.CronTriggerPersistenceDelegate/<LoadExtendedTriggerProperties>d__21")]
public sealed virtual Task`1<TriggerPropertyBundle> LoadExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual TriggerPropertyBundle ReadTriggerPropertyBundle(DbDataReader rs);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.CronTriggerPersistenceDelegate/<UpdateExtendedTriggerProperties>d__23")]
public sealed virtual Task`1<int> UpdateExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.DailyTimeIntervalTriggerPersistenceDelegate : SimplePropertiesTriggerPersistenceDelegateSupport {
    public virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    public virtual string GetHandledTriggerTypeDiscriminator();
    protected virtual SimplePropertiesTriggerProperties GetTriggerProperties(IOperableTrigger trigger);
    protected virtual TriggerPropertyBundle GetTriggerPropertyBundle(SimplePropertiesTriggerProperties props);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.AdoJobStore.DBSemaphore : StdAdoConstants {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ThreadLockKey, object> locks;
    private string sql;
    private string insertSql;
    private string tablePrefix;
    [NullableAttribute("2")]
private string schedName;
    private string expandedSQL;
    private string expandedInsertSQL;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [NullableAttribute("2")]
private string schedNameLiteral;
    [CompilerGeneratedAttribute]
private AdoUtil <AdoUtil>k__BackingField;
    internal ILog Log { get; }
    public bool RequiresConnection { get; }
    protected string SQL { get; protected set; }
    unknown string InsertSQL {protected set; }
    [ObsoleteAttribute("SchedName is now a sql parameter")]
protected string SchedulerNameLiteral { get; }
    [NullableAttribute("2")]
public string SchedName { get; public set; }
    public string TablePrefix { get; public set; }
    protected AdoUtil AdoUtil { get; }
    protected DBSemaphore(string tablePrefix, string schedName, string defaultSQL, string defaultInsertSQL, IDbProvider dbProvider);
    [CompilerGeneratedAttribute]
internal ILog get_Log();
    protected abstract virtual Task ExecuteSQL(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, string expandedSql, string expandedInsertSql, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.DBSemaphore/<ObtainLock>d__12")]
public sealed virtual Task`1<bool> ObtainLock(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, CancellationToken cancellationToken);
    public sealed virtual Task ReleaseLock(Guid requestorId, string lockName, CancellationToken cancellationToken);
    private bool IsLockOwner(ThreadLockKey& key);
    public sealed virtual bool get_RequiresConnection();
    protected string get_SQL();
    protected void set_SQL(string value);
    protected void set_InsertSQL(string value);
    private void SetExpandedSql();
    protected string get_SchedulerNameLiteral();
    [NullableContextAttribute("2")]
public string get_SchedName();
    [NullableContextAttribute("2")]
public sealed virtual void set_SchedName(string value);
    public string get_TablePrefix();
    public sealed virtual void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
protected AdoUtil get_AdoUtil();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.DelegateInitializationArgs : object {
    [CompilerGeneratedAttribute]
private bool <UseProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbProvider <DbProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeLoadHelper <TypeLoadHelper>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectSerializer <ObjectSerializer>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <InitString>k__BackingField;
    public bool UseProperties { get; public set; }
    public string TablePrefix { get; public set; }
    public string InstanceName { get; public set; }
    public string InstanceId { get; public set; }
    public IDbProvider DbProvider { get; public set; }
    public ITypeLoadHelper TypeLoadHelper { get; public set; }
    [NullableAttribute("2")]
public IObjectSerializer ObjectSerializer { get; public set; }
    [NullableAttribute("2")]
public string InitString { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseProperties();
    [CompilerGeneratedAttribute]
public void set_UseProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_TablePrefix();
    [CompilerGeneratedAttribute]
public void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public IDbProvider get_DbProvider();
    [CompilerGeneratedAttribute]
public void set_DbProvider(IDbProvider value);
    [CompilerGeneratedAttribute]
public ITypeLoadHelper get_TypeLoadHelper();
    [CompilerGeneratedAttribute]
public void set_TypeLoadHelper(ITypeLoadHelper value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IObjectSerializer get_ObjectSerializer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ObjectSerializer(IObjectSerializer value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_InitString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InitString(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.FirebirdDelegate : StdAdoDelegate {
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.FiredTriggerRecord : object {
    [CompilerGeneratedAttribute]
private string <FireInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FireTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ScheduleTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JobDisallowsConcurrentExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private JobKey <JobKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedulerInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerKey <TriggerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FireInstanceState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JobRequestsRecovery>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string FireInstanceId { get; public set; }
    public DateTimeOffset FireTimestamp { get; public set; }
    public DateTimeOffset ScheduleTimestamp { get; public set; }
    public bool JobDisallowsConcurrentExecution { get; public set; }
    public JobKey JobKey { get; public set; }
    public string SchedulerInstanceId { get; public set; }
    public TriggerKey TriggerKey { get; public set; }
    public string FireInstanceState { get; public set; }
    public bool JobRequestsRecovery { get; public set; }
    public int Priority { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_FireInstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_FireInstanceId(string value);
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_FireTimestamp();
    [CompilerGeneratedAttribute]
public virtual void set_FireTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_ScheduleTimestamp();
    [CompilerGeneratedAttribute]
public virtual void set_ScheduleTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public virtual bool get_JobDisallowsConcurrentExecution();
    [CompilerGeneratedAttribute]
public virtual void set_JobDisallowsConcurrentExecution(bool value);
    [CompilerGeneratedAttribute]
public virtual JobKey get_JobKey();
    [CompilerGeneratedAttribute]
public virtual void set_JobKey(JobKey value);
    [CompilerGeneratedAttribute]
public virtual string get_SchedulerInstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_SchedulerInstanceId(string value);
    [CompilerGeneratedAttribute]
public virtual TriggerKey get_TriggerKey();
    [CompilerGeneratedAttribute]
public virtual void set_TriggerKey(TriggerKey value);
    [CompilerGeneratedAttribute]
public virtual string get_FireInstanceState();
    [CompilerGeneratedAttribute]
public virtual void set_FireInstanceState(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_JobRequestsRecovery();
    [CompilerGeneratedAttribute]
public virtual void set_JobRequestsRecovery(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Priority();
    [CompilerGeneratedAttribute]
public virtual void set_Priority(int value);
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.IDbAccessor {
    public abstract virtual DbCommand PrepareCommand(ConnectionAndTransactionHolder cth, string commandText);
    public abstract virtual void AddCommandParameter(DbCommand cmd, string paramName, object paramValue, Enum dataType, Nullable`1<int> size);
    public abstract virtual object GetDbBooleanValue(bool booleanValue);
    public abstract virtual bool GetBooleanFromDbValue(object columnValue);
    [NullableContextAttribute("2")]
public abstract virtual object GetDbDateTimeValue(Nullable`1<DateTimeOffset> dateTimeValue);
    public abstract virtual Nullable`1<DateTimeOffset> GetDateTimeFromDbValue(object columnValue);
    [NullableContextAttribute("2")]
public abstract virtual object GetDbTimeSpanValue(Nullable`1<TimeSpan> timeSpanValue);
    public abstract virtual Nullable`1<TimeSpan> GetTimeSpanFromDbValue(object columnValue);
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.IDriverDelegate {
    public abstract virtual void Initialize(DelegateInitializationArgs args);
    public abstract virtual Task`1<int> UpdateTriggerStatesFromOtherStates(ConnectionAndTransactionHolder conn, string newState, string oldState1, string oldState2, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectMisfiredTriggers(ConnectionAndTransactionHolder conn, DateTimeOffset timestamp, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> HasMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state, DateTimeOffset ts, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectMisfiredTriggersInGroupInState(ConnectionAndTransactionHolder conn, string groupName, string state, DateTimeOffset ts, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForRecoveringJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteFiredTriggers(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteFiredTriggers(ConnectionAndTransactionHolder conn, string instanceId, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertJobDetail(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateJobDetail(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggerNamesForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> JobExists(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateJobData(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    public abstract virtual Task`1<IJobDetail> SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper classLoadHelper, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SelectNumJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectJobGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<JobKey>> SelectJobsInGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertBlobTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateBlobTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TriggerExists(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string state, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerStateFromOtherState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerStateFromOtherStates(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState1, string oldState2, string oldState3, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerStateFromOtherStateWithNextFireTime(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState, DateTimeOffset nextFireTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerGroupStateFromOtherStates(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, string newState, string oldState1, string oldState2, string oldState3, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerGroupStateFromOtherState(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, string newState, string oldState, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerStatesForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, string state, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateTriggerStatesForJobFromOtherState(ConnectionAndTransactionHolder conn, JobKey jobKey, string state, string oldState, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteBlobTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SelectNumTriggersForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IJobDetail> SelectJobForTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken);
    public abstract virtual Task`1<IJobDetail> SelectJobForTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, ITypeLoadHelper loadHelper, bool loadJobType, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForCalendar(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IOperableTrigger> SelectTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<JobDataMap> SelectTriggerJobDataMap(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> SelectTriggerState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerStatus> SelectTriggerStatus(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SelectNumTriggers(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectTriggerGroups(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggersInGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggersInState(ConnectionAndTransactionHolder conn, string state, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertPausedTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeletePausedTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeletePausedTriggerGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteAllPausedTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsTriggerGroupPaused(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectPausedTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsExistingTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertCalendar(ConnectionAndTransactionHolder conn, string calendarName, ICalendar calendar, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateCalendar(ConnectionAndTransactionHolder conn, string calendarName, ICalendar calendar, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CalendarExists(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ICalendar> SelectCalendar(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CalendarIsReferenced(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteCalendar(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SelectNumCalendars(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectCalendars(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerKey> SelectTriggerForFireTime(ConnectionAndTransactionHolder conn, DateTimeOffset fireTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertFiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectFiredTriggerRecords(ConnectionAndTransactionHolder conn, string triggerName, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectFiredTriggerRecordsByJob(ConnectionAndTransactionHolder conn, string jobName, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectInstancesFiredTriggerRecords(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteFiredTrigger(ConnectionAndTransactionHolder conn, string entryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SelectJobExecutionCount(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertSchedulerState(ConnectionAndTransactionHolder conn, string instanceId, DateTimeOffset checkInTime, TimeSpan interval, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteSchedulerState(ConnectionAndTransactionHolder conn, string instanceId, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateSchedulerState(ConnectionAndTransactionHolder conn, string instanceId, DateTimeOffset checkInTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<SchedulerStateRecord>> SelectSchedulerStateRecords(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerAcquireResult>> SelectTriggerToAcquire(ConnectionAndTransactionHolder conn, DateTimeOffset noLaterThan, DateTimeOffset noEarlierThan, int maxCount, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> SelectFiredTriggerInstanceNames(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state1, DateTimeOffset ts, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> HasMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state1, DateTimeOffset ts, int count, ICollection`1<TriggerKey> resultList, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateFiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail job, CancellationToken cancellationToken);
    public abstract virtual Task ClearData(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
}
public class Quartz.Impl.AdoJobStore.InvalidConfigurationException : SchedulerException {
    [NullableContextAttribute("1")]
public InvalidConfigurationException(string msg);
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.ISemaphore {
    public bool RequiresConnection { get; }
    public abstract virtual Task`1<bool> ObtainLock(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, CancellationToken cancellationToken);
    public abstract virtual Task ReleaseLock(Guid requestorId, string lockName, CancellationToken cancellationToken);
    public abstract virtual bool get_RequiresConnection();
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.ITablePrefixAware {
    unknown string TablePrefix {public set; }
    [NullableAttribute("2")]
unknown string SchedName {public set; }
    public abstract virtual void set_TablePrefix(string value);
    [NullableContextAttribute("2")]
public abstract virtual void set_SchedName(string value);
}
[NullableContextAttribute("1")]
public interface Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate {
    public abstract virtual void Initialize(string tablePrefix, string schedulerName, IDbAccessor dbAccessor);
    public abstract virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    public abstract virtual string GetHandledTriggerTypeDiscriminator();
    public abstract virtual Task`1<int> InsertExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> UpdateExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerPropertyBundle> LoadExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual TriggerPropertyBundle ReadTriggerPropertyBundle(DbDataReader rs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.JobStoreCMT : JobStoreSupport {
    [CompilerGeneratedAttribute]
private bool <OpenConnection>k__BackingField;
    protected bool OpenConnection { get; public set; }
    [CompilerGeneratedAttribute]
protected virtual bool get_OpenConnection();
    [CompilerGeneratedAttribute]
public virtual void set_OpenConnection(bool value);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreCMT/<Initialize>d__4")]
public virtual Task Initialize(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreCMT/<Shutdown>d__5")]
public virtual Task Shutdown(CancellationToken cancellationToken);
    protected virtual ConnectionAndTransactionHolder GetNonManagedTXConnection();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreCMT/<ExecuteInLock>d__7`1")]
protected virtual Task`1<T> ExecuteInLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.AdoJobStore.JobStoreSupport : AdoConstants {
    protected internal static string LockTriggerAccess;
    protected internal static string LockStateAccess;
    private string tablePrefix;
    private bool useProperties;
    protected Type delegateType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, ICalendar> calendarCache;
    private IDriverDelegate driverDelegate;
    private TimeSpan misfireThreshold;
    private Nullable`1<TimeSpan> misfirehandlerFrequence;
    [NullableAttribute("2")]
private ClusterManager clusterManager;
    [NullableAttribute("2")]
private MisfireHandler misfireHandler;
    private ITypeLoadHelper typeLoadHelper;
    private ISchedulerSignaler schedSignaler;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) schedulerRunning;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shutdown;
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbConnectionManager <ConnectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryableActionErrorLogThreshold>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectSerializer <ObjectSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EstimatedTimeToReleaseAndAcquireTrigger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clustered>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClusterCheckinInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClusterCheckinMisfireThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxMisfiresToHandleAtATime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DbRetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDBLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockOnInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontSetAutoCommitFalse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TxIsolationLevelSerializable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcquireTriggersWithinLock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DriverDelegateType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DriverDelegateInitString>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SelectWithLockSQL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeThreadsDaemons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoubleCheckLockMisfireHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformSchemaValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISemaphore <LockHandler>k__BackingField;
    private static long ftrCtr;
    protected bool firstCheckIn;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastCheckin>k__BackingField;
    public string DataSource { get; public set; }
    public IDbConnectionManager ConnectionManager { get; public set; }
    internal ILog Log { get; }
    public string TablePrefix { get; public set; }
    unknown string UseProperties {public set; }
    public string InstanceId { get; public set; }
    public string InstanceName { get; public set; }
    unknown int ThreadPoolSize {public set; }
    public int RetryableActionErrorLogThreshold { get; public set; }
    [NullableAttribute("2")]
public IObjectSerializer ObjectSerializer { get; public set; }
    public long EstimatedTimeToReleaseAndAcquireTrigger { get; }
    public bool Clustered { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan ClusterCheckinInterval { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan ClusterCheckinMisfireThreshold { get; public set; }
    public int MaxMisfiresToHandleAtATime { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan DbRetryInterval { get; public set; }
    public bool UseDBLocks { get; public set; }
    public bool LockOnInsert { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan MisfireThreshold { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan MisfireHandlerFrequency { get; public set; }
    public bool DontSetAutoCommitFalse { get; public set; }
    public bool TxIsolationLevelSerializable { get; public set; }
    public bool AcquireTriggersWithinLock { get; public set; }
    public string DriverDelegateType { get; public set; }
    [NullableAttribute("2")]
public string DriverDelegateInitString { get; public set; }
    [NullableAttribute("2")]
public string SelectWithLockSQL { get; public set; }
    protected ITypeLoadHelper TypeLoadHelper { get; }
    public bool MakeThreadsDaemons { get; public set; }
    public bool DoubleCheckLockMisfireHandler { get; public set; }
    public bool PerformSchemaValidation { get; public set; }
    protected DbMetadata DbMetadata { get; }
    protected DateTimeOffset MisfireTime { get; }
    protected IDriverDelegate Delegate { get; }
    private IDbProvider DbProvider { get; }
    protected internal ISemaphore LockHandler { get; protected internal set; }
    public bool CanUseProperties { get; }
    public bool SupportsPersistence { get; }
    protected internal DateTimeOffset LastCheckin { get; protected internal set; }
    private static JobStoreSupport();
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public IDbConnectionManager get_ConnectionManager();
    [CompilerGeneratedAttribute]
public void set_ConnectionManager(IDbConnectionManager value);
    [CompilerGeneratedAttribute]
internal ILog get_Log();
    public string get_TablePrefix();
    public void set_TablePrefix(string value);
    public void set_UseProperties(string value);
    [CompilerGeneratedAttribute]
public virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_InstanceName();
    [CompilerGeneratedAttribute]
public virtual void set_InstanceName(string value);
    public sealed virtual void set_ThreadPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_RetryableActionErrorLogThreshold();
    [CompilerGeneratedAttribute]
public void set_RetryableActionErrorLogThreshold(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IObjectSerializer get_ObjectSerializer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ObjectSerializer(IObjectSerializer value);
    [CompilerGeneratedAttribute]
public virtual long get_EstimatedTimeToReleaseAndAcquireTrigger();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Clustered();
    [CompilerGeneratedAttribute]
public void set_Clustered(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClusterCheckinInterval();
    [CompilerGeneratedAttribute]
public void set_ClusterCheckinInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClusterCheckinMisfireThreshold();
    [CompilerGeneratedAttribute]
public void set_ClusterCheckinMisfireThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxMisfiresToHandleAtATime();
    [CompilerGeneratedAttribute]
public void set_MaxMisfiresToHandleAtATime(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DbRetryInterval();
    [CompilerGeneratedAttribute]
public void set_DbRetryInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseDBLocks();
    [CompilerGeneratedAttribute]
public void set_UseDBLocks(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LockOnInsert();
    [CompilerGeneratedAttribute]
public virtual void set_LockOnInsert(bool value);
    public virtual TimeSpan get_MisfireThreshold();
    public virtual void set_MisfireThreshold(TimeSpan value);
    public virtual TimeSpan get_MisfireHandlerFrequency();
    public virtual void set_MisfireHandlerFrequency(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual bool get_DontSetAutoCommitFalse();
    [CompilerGeneratedAttribute]
public virtual void set_DontSetAutoCommitFalse(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_TxIsolationLevelSerializable();
    [CompilerGeneratedAttribute]
public virtual void set_TxIsolationLevelSerializable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcquireTriggersWithinLock();
    [CompilerGeneratedAttribute]
public void set_AcquireTriggersWithinLock(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DriverDelegateType();
    [CompilerGeneratedAttribute]
public virtual void set_DriverDelegateType(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DriverDelegateInitString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DriverDelegateInitString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_SelectWithLockSQL();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_SelectWithLockSQL(string value);
    protected virtual ITypeLoadHelper get_TypeLoadHelper();
    [CompilerGeneratedAttribute]
public bool get_MakeThreadsDaemons();
    [CompilerGeneratedAttribute]
public void set_MakeThreadsDaemons(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoubleCheckLockMisfireHandler();
    [CompilerGeneratedAttribute]
public void set_DoubleCheckLockMisfireHandler(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformSchemaValidation();
    [CompilerGeneratedAttribute]
public void set_PerformSchemaValidation(bool value);
    public virtual TimeSpan GetAcquireRetryDelay(int failureCount);
    protected DbMetadata get_DbMetadata();
    protected abstract virtual ConnectionAndTransactionHolder GetNonManagedTXConnection();
    protected virtual ConnectionAndTransactionHolder GetConnection();
    protected virtual DateTimeOffset get_MisfireTime();
    protected virtual string GetFiredTriggerRecordId();
    protected virtual IDriverDelegate get_Delegate();
    private IDbProvider get_DbProvider();
    [CompilerGeneratedAttribute]
protected internal virtual ISemaphore get_LockHandler();
    [CompilerGeneratedAttribute]
protected internal virtual void set_LockHandler(ISemaphore value);
    public virtual bool get_CanUseProperties();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<Initialize>d__143")]
public virtual Task Initialize(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<SchedulerStarted>d__144")]
public virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerPaused(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerResumed(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<Shutdown>d__147")]
public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual bool get_SupportsPersistence();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ReleaseLock>d__150")]
protected virtual Task ReleaseLock(Guid requestorId, string lockName, bool doIt, CancellationToken cancellationToken);
    protected virtual Task RecoverJobs(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RecoverJobs>d__152")]
protected virtual Task RecoverJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RecoverMisfiredJobs>d__153")]
public virtual Task`1<RecoverMisfiredJobsResult> RecoverMisfiredJobs(ConnectionAndTransactionHolder conn, bool recovering, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<UpdateMisfiredTrigger>d__154")]
protected virtual Task`1<bool> UpdateMisfiredTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newStateIfNotComplete, bool forceState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<DoUpdateOfMisfiredTrigger>d__155")]
private Task DoUpdateOfMisfiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trig, bool forceState, string newStateIfNotComplete, bool recovering);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<StoreJobAndTrigger>d__156")]
public sealed virtual Task StoreJobAndTrigger(IJobDetail newJob, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public sealed virtual Task StoreJob(IJobDetail newJob, bool replaceExisting, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<StoreJob>d__160")]
protected virtual Task StoreJob(ConnectionAndTransactionHolder conn, IJobDetail newJob, bool replaceExisting, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<JobExists>d__161")]
protected virtual Task`1<bool> JobExists(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task StoreTrigger(IOperableTrigger newTrigger, bool replaceExisting, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<StoreTrigger>d__163")]
protected virtual Task StoreTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger newTrigger, IJobDetail job, bool replaceExisting, string state, bool forceState, bool recovering, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<TriggerExists>d__164")]
protected virtual Task`1<bool> TriggerExists(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RemoveJob>d__166")]
protected virtual Task`1<bool> RemoveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, bool activeDeleteSafe, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveTriggers(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public sealed virtual Task StoreJobsAndTriggers(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<DeleteJobAndChildren>d__170")]
private Task`1<bool> DeleteJobAndChildren(ConnectionAndTransactionHolder conn, JobKey key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<DeleteTriggerAndChildren>d__171")]
private Task`1<bool> DeleteTriggerAndChildren(ConnectionAndTransactionHolder conn, TriggerKey key, CancellationToken cancellationToken);
    public sealed virtual Task`1<IJobDetail> RetrieveJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RetrieveJob>d__173")]
protected virtual Task`1<IJobDetail> RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    protected virtual Task`1<bool> RemoveTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RemoveTrigger>d__176")]
protected virtual Task`1<bool> RemoveTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, IJobDetail job, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ReplaceTrigger(TriggerKey triggerKey, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ReplaceTrigger>d__179")]
protected virtual Task`1<bool> ReplaceTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public sealed virtual Task`1<IOperableTrigger> RetrieveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RetrieveTrigger>d__181")]
protected virtual Task`1<IOperableTrigger> RetrieveTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetTriggerState>d__183")]
protected virtual Task`1<TriggerState> GetTriggerState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ResetTriggerFromErrorState>d__185")]
private Task ResetTriggerFromErrorState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task StoreCalendar(string calName, ICalendar calendar, bool replaceExisting, bool updateTriggers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<StoreCalendar>d__187")]
protected virtual Task StoreCalendar(ConnectionAndTransactionHolder conn, string calName, ICalendar calendar, bool replaceExisting, bool updateTriggers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<CalendarExists>d__188")]
protected virtual Task`1<bool> CalendarExists(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveCalendar(string calName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RemoveCalendar>d__190")]
protected virtual Task`1<bool> RemoveCalendar(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<ICalendar> RetrieveCalendar(string calName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RetrieveCalendar>d__192")]
protected virtual Task`1<ICalendar> RetrieveCalendar(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> GetNumberOfJobs(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetNumberOfJobs>d__194")]
protected virtual Task`1<int> GetNumberOfJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> GetNumberOfTriggers(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetNumberOfTriggers>d__196")]
protected virtual Task`1<int> GetNumberOfTriggers(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> GetNumberOfCalendars(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetNumberOfCalendars>d__198")]
protected virtual Task`1<int> GetNumberOfCalendars(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetJobNames>d__200")]
protected virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobNames(ConnectionAndTransactionHolder conn, GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CalendarExists(string calName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<CheckExists>d__202")]
protected Task`1<bool> CheckExists(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<CheckExists>d__204")]
protected Task`1<bool> CheckExists(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<CheckExists>d__206")]
protected Task`1<bool> CheckExists(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task ClearAllSchedulingData(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ClearAllSchedulingData>d__208")]
protected Task ClearAllSchedulingData(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetTriggerNames>d__210")]
protected virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerNames(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetJobGroupNames>d__212")]
protected virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetTriggerGroupNames>d__214")]
protected virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetCalendarNames>d__216")]
protected virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> GetTriggersForJob(JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetTriggersForJob>d__218")]
protected virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> GetTriggersForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<PauseTrigger>d__220")]
public virtual Task PauseTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<CheckBlockedState>d__223")]
protected virtual Task`1<string> CheckBlockedState(ConnectionAndTransactionHolder conn, JobKey jobKey, string currentState, CancellationToken cancellationToken);
    public virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ResumeTrigger>d__225")]
public virtual Task ResumeTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<PauseTriggerGroup>d__229")]
public virtual Task`1<IReadOnlyCollection`1<string>> PauseTriggerGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<GetPausedTriggerGroups>d__231")]
public virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ResumeTriggers>d__233")]
public virtual Task`1<IReadOnlyCollection`1<string>> ResumeTriggers(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<PauseAll>d__235")]
public virtual Task PauseAll(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public virtual Task ResumeAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ResumeAll>d__237")]
public virtual Task ResumeAll(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> AcquireNextTriggers(DateTimeOffset noLaterThan, int maxCount, TimeSpan timeWindow, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<AcquireNextTrigger>d__240")]
protected virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> AcquireNextTrigger(ConnectionAndTransactionHolder conn, DateTimeOffset noLaterThan, int maxCount, TimeSpan timeWindow, CancellationToken cancellationToken);
    public sealed virtual Task ReleaseAcquiredTrigger(IOperableTrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ReleaseAcquiredTrigger>d__242")]
protected virtual Task ReleaseAcquiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerFiredResult>> TriggersFired(IReadOnlyCollection`1<IOperableTrigger> triggers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<TriggerFired>d__244")]
protected virtual Task`1<TriggerFiredBundle> TriggerFired(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    public virtual Task TriggeredJobComplete(IOperableTrigger trigger, IJobDetail jobDetail, SchedulerInstruction triggerInstCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<TriggeredJobComplete>d__246")]
protected virtual Task TriggeredJobComplete(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, IJobDetail jobDetail, SchedulerInstruction triggerInstCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<DoRecoverMisfires>d__247")]
protected internal Task`1<RecoverMisfiredJobsResult> DoRecoverMisfires(Guid requestorId, CancellationToken cancellationToken);
    protected internal virtual void SignalSchedulingChangeImmediately(Nullable`1<DateTimeOffset> candidateNewNextFireTime);
    [CompilerGeneratedAttribute]
protected internal DateTimeOffset get_LastCheckin();
    [CompilerGeneratedAttribute]
protected internal void set_LastCheckin(DateTimeOffset value);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<DoCheckin>d__254")]
protected internal virtual Task`1<bool> DoCheckin(Guid requestorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<FindFailedInstances>d__255")]
protected virtual Task`1<IReadOnlyList`1<SchedulerStateRecord>> FindFailedInstances(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<FindOrphanedFailedInstances>d__256")]
private Task`1<IReadOnlyList`1<SchedulerStateRecord>> FindOrphanedFailedInstances(ConnectionAndTransactionHolder conn, IReadOnlyCollection`1<SchedulerStateRecord> schedulerStateRecords, CancellationToken cancellationToken);
    protected DateTimeOffset CalcFailedIfAfter(SchedulerStateRecord rec);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ClusterCheckIn>d__258")]
protected virtual Task`1<IReadOnlyList`1<SchedulerStateRecord>> ClusterCheckIn(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ClusterRecover>d__259")]
protected virtual Task ClusterRecover(ConnectionAndTransactionHolder conn, IReadOnlyList`1<SchedulerStateRecord> failedInstances, CancellationToken cancellationToken);
    protected virtual void LogWarnIfNonZero(int val, string warning);
    [NullableContextAttribute("2")]
protected virtual void CleanupConnection(ConnectionAndTransactionHolder conn);
    protected virtual void CloseConnection(ConnectionAndTransactionHolder cth);
    protected virtual void RollbackConnection(ConnectionAndTransactionHolder cth, Exception cause);
    protected virtual bool IsTransient(Exception ex);
    private static bool InspectSqlException(Exception ex);
    protected virtual void CommitConnection(ConnectionAndTransactionHolder cth, bool openNewTransaction);
    protected Task`1<T> ExecuteWithoutLock(Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, CancellationToken cancellationToken);
    protected Task ExecuteInLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task> txCallback, CancellationToken cancellationToken);
    protected abstract virtual Task`1<T> ExecuteInLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, CancellationToken cancellationToken);
    protected virtual Task RetryExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task> txCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<RetryExecuteInNonManagedTXLock>d__271`1")]
protected virtual Task`1<T> RetryExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, Nullable`1<Guid> requestorId, CancellationToken cancellationToken);
    protected Task ExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task> txCallback, CancellationToken cancellationToken);
    protected Task`1<T> ExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, CancellationToken cancellationToken);
    protected Task`1<T> ExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, Func`3<ConnectionAndTransactionHolder, T, Task`1<bool>> txValidator, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreSupport/<ExecuteInNonManagedTXLock>d__275`1")]
protected Task`1<T> ExecuteInNonManagedTXLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, Func`3<ConnectionAndTransactionHolder, T, Task`1<bool>> txValidator, Nullable`1<Guid> requestorId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.JobStoreTX : JobStoreSupport {
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.JobStoreTX/<Initialize>d__0")]
public virtual Task Initialize(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    protected virtual ConnectionAndTransactionHolder GetNonManagedTXConnection();
    protected virtual Task`1<T> ExecuteInLock(string lockName, Func`2<ConnectionAndTransactionHolder, Task`1<T>> txCallback, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.LockException : JobPersistenceException {
    public LockException(string msg);
    public LockException(string msg, Exception cause);
    protected LockException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Impl.AdoJobStore.MisfireHandler : object {
    private ILog log;
    private Guid requestorId;
    private JobStoreSupport jobStoreSupport;
    private int numFails;
    private CancellationTokenSource cancellationTokenSource;
    private QueuedTaskScheduler taskScheduler;
    private Task task;
    internal MisfireHandler(JobStoreSupport jobStoreSupport);
    public void Initialize();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.MisfireHandler/<Run>d__9")]
private Task Run();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.MisfireHandler/<Shutdown>d__10")]
public Task Shutdown();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.MisfireHandler/<Manage>d__11")]
private Task`1<RecoverMisfiredJobsResult> Manage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.MySQLDelegate : StdAdoDelegate {
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.NoSuchDelegateException : JobPersistenceException {
    public NoSuchDelegateException(string msg, Exception cause);
    public NoSuchDelegateException(string msg);
    protected NoSuchDelegateException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.OracleDelegate : StdAdoDelegate {
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
    public virtual object GetDbBooleanValue(bool booleanValue);
    public virtual bool GetBooleanFromDbValue(object columnValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.PostgreSQLDelegate : StdAdoDelegate {
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
}
public class Quartz.Impl.AdoJobStore.RecoverMisfiredJobsResult : object {
    [NullableAttribute("1")]
public static RecoverMisfiredJobsResult NoOp;
    [CompilerGeneratedAttribute]
private bool <HasMoreMisfiredTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessedMisfiredTriggerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EarliestNewTime>k__BackingField;
    public bool HasMoreMisfiredTriggers { get; }
    public int ProcessedMisfiredTriggerCount { get; }
    public DateTimeOffset EarliestNewTime { get; }
    public RecoverMisfiredJobsResult(bool hasMoreMisfiredTriggers, int processedMisfiredTriggerCount, DateTimeOffset earliestNewTimeUtc);
    private static RecoverMisfiredJobsResult();
    [CompilerGeneratedAttribute]
public bool get_HasMoreMisfiredTriggers();
    [CompilerGeneratedAttribute]
public int get_ProcessedMisfiredTriggerCount();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EarliestNewTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SchedulerStateRecord : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CheckinInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CheckinTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedulerInstanceId>k__BackingField;
    public TimeSpan CheckinInterval { get; public set; }
    public DateTimeOffset CheckinTimestamp { get; public set; }
    public string SchedulerInstanceId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_CheckinInterval();
    [CompilerGeneratedAttribute]
public virtual void set_CheckinInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_CheckinTimestamp();
    [CompilerGeneratedAttribute]
public virtual void set_CheckinTimestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public virtual string get_SchedulerInstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_SchedulerInstanceId(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport : object {
    protected static string TableSimplePropertiesTriggers;
    protected static string ColumnStrProp1;
    protected static string ColumnStrProp2;
    protected static string ColumnStrProp3;
    protected static string ColumnIntProp1;
    protected static string ColumnIntProp2;
    protected static string ColumnLongProp1;
    protected static string ColumnLongProp2;
    protected static string ColumnDecProp1;
    protected static string ColumnDecProp2;
    protected static string ColumnBoolProp1;
    protected static string ColumnBoolProp2;
    protected static string ColumnTimeZoneId;
    protected static string SelectSimplePropsTrigger;
    protected static string DeleteSimplePropsTrigger;
    protected static string InsertSimplePropsTrigger;
    protected static string UpdateSimplePropsTrigger;
    [CompilerGeneratedAttribute]
private string <TablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedNameLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbAccessor <DbAccessor>k__BackingField;
    protected string TablePrefix { get; private set; }
    [ObsoleteAttribute("Scheduler name is now added to queries as a parameter")]
protected string SchedNameLiteral { get; private set; }
    protected string SchedName { get; private set; }
    protected IDbAccessor DbAccessor { get; private set; }
    public sealed virtual void Initialize(string tablePrefix, string schedName, IDbAccessor dbAccessor);
    public abstract virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    public abstract virtual string GetHandledTriggerTypeDiscriminator();
    protected abstract virtual SimplePropertiesTriggerProperties GetTriggerProperties(IOperableTrigger trigger);
    protected abstract virtual TriggerPropertyBundle GetTriggerPropertyBundle(SimplePropertiesTriggerProperties properties);
    [CompilerGeneratedAttribute]
protected string get_TablePrefix();
    [CompilerGeneratedAttribute]
private void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
protected string get_SchedNameLiteral();
    [CompilerGeneratedAttribute]
private void set_SchedNameLiteral(string value);
    [CompilerGeneratedAttribute]
protected string get_SchedName();
    [CompilerGeneratedAttribute]
private void set_SchedName(string value);
    [CompilerGeneratedAttribute]
protected IDbAccessor get_DbAccessor();
    [CompilerGeneratedAttribute]
private void set_DbAccessor(IDbAccessor value);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport/<DeleteExtendedTriggerProperties>d__38")]
public sealed virtual Task`1<int> DeleteExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport/<InsertExtendedTriggerProperties>d__39")]
public sealed virtual Task`1<int> InsertExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport/<LoadExtendedTriggerProperties>d__40")]
public sealed virtual Task`1<TriggerPropertyBundle> LoadExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual TriggerPropertyBundle ReadTriggerPropertyBundle(DbDataReader rs);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport/<UpdateExtendedTriggerProperties>d__42")]
public sealed virtual Task`1<int> UpdateExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SimplePropertiesTriggerProperties : object {
    [CompilerGeneratedAttribute]
private string <String1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <String2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <String3>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Int1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Int2>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Long1>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Long2>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Decimal1>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Decimal2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Boolean1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Boolean2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZoneId>k__BackingField;
    public string String1 { get; public set; }
    public string String2 { get; public set; }
    public string String3 { get; public set; }
    public int Int1 { get; public set; }
    public int Int2 { get; public set; }
    public long Long1 { get; public set; }
    public long Long2 { get; public set; }
    public decimal Decimal1 { get; public set; }
    public decimal Decimal2 { get; public set; }
    public bool Boolean1 { get; public set; }
    public bool Boolean2 { get; public set; }
    public string TimeZoneId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_String1();
    [CompilerGeneratedAttribute]
public void set_String1(string value);
    [CompilerGeneratedAttribute]
public string get_String2();
    [CompilerGeneratedAttribute]
public void set_String2(string value);
    [CompilerGeneratedAttribute]
public string get_String3();
    [CompilerGeneratedAttribute]
public void set_String3(string value);
    [CompilerGeneratedAttribute]
public int get_Int1();
    [CompilerGeneratedAttribute]
public void set_Int1(int value);
    [CompilerGeneratedAttribute]
public int get_Int2();
    [CompilerGeneratedAttribute]
public void set_Int2(int value);
    [CompilerGeneratedAttribute]
public long get_Long1();
    [CompilerGeneratedAttribute]
public void set_Long1(long value);
    [CompilerGeneratedAttribute]
public long get_Long2();
    [CompilerGeneratedAttribute]
public void set_Long2(long value);
    [CompilerGeneratedAttribute]
public decimal get_Decimal1();
    [CompilerGeneratedAttribute]
public void set_Decimal1(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Decimal2();
    [CompilerGeneratedAttribute]
public void set_Decimal2(decimal value);
    [CompilerGeneratedAttribute]
public bool get_Boolean1();
    [CompilerGeneratedAttribute]
public void set_Boolean1(bool value);
    [CompilerGeneratedAttribute]
public bool get_Boolean2();
    [CompilerGeneratedAttribute]
public void set_Boolean2(bool value);
    [CompilerGeneratedAttribute]
public string get_TimeZoneId();
    [CompilerGeneratedAttribute]
public void set_TimeZoneId(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SimpleSemaphore : object {
    private ResourceLock triggerLock;
    private ResourceLock stateLock;
    private ILog log;
    public bool RequiresConnection { get; }
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimpleSemaphore/<ObtainLock>d__4")]
public virtual Task`1<bool> ObtainLock(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, CancellationToken cancellationToken);
    public virtual Task ReleaseLock(Guid requestorId, string lockName, CancellationToken cancellationToken);
    public sealed virtual bool get_RequiresConnection();
    private ResourceLock GetLock(string lockName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SimpleTriggerPersistenceDelegate : object {
    [CompilerGeneratedAttribute]
private IDbAccessor <DbAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedNameLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedName>k__BackingField;
    protected IDbAccessor DbAccessor { get; private set; }
    protected string TablePrefix { get; private set; }
    [ObsoleteAttribute("Scheduler name is now added to queries as a parameter")]
protected string SchedNameLiteral { get; private set; }
    protected string SchedName { get; private set; }
    [CompilerGeneratedAttribute]
protected IDbAccessor get_DbAccessor();
    [CompilerGeneratedAttribute]
private void set_DbAccessor(IDbAccessor value);
    [CompilerGeneratedAttribute]
protected string get_TablePrefix();
    [CompilerGeneratedAttribute]
private void set_TablePrefix(string value);
    [CompilerGeneratedAttribute]
protected string get_SchedNameLiteral();
    [CompilerGeneratedAttribute]
private void set_SchedNameLiteral(string value);
    [CompilerGeneratedAttribute]
protected string get_SchedName();
    [CompilerGeneratedAttribute]
private void set_SchedName(string value);
    public sealed virtual void Initialize(string tablePrefix, string schedName, IDbAccessor dbAccessor);
    public sealed virtual string GetHandledTriggerTypeDiscriminator();
    public sealed virtual bool CanHandleTriggerType(IOperableTrigger trigger);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimpleTriggerPersistenceDelegate/<DeleteExtendedTriggerProperties>d__19")]
public sealed virtual Task`1<int> DeleteExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimpleTriggerPersistenceDelegate/<InsertExtendedTriggerProperties>d__20")]
public sealed virtual Task`1<int> InsertExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimpleTriggerPersistenceDelegate/<LoadExtendedTriggerProperties>d__21")]
public sealed virtual Task`1<TriggerPropertyBundle> LoadExtendedTriggerProperties(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual TriggerPropertyBundle ReadTriggerPropertyBundle(DbDataReader rs);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.SimpleTriggerPersistenceDelegate/<UpdateExtendedTriggerProperties>d__23")]
public sealed virtual Task`1<int> UpdateExtendedTriggerProperties(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SQLiteDelegate : StdAdoDelegate {
    [NullableAttribute("2")]
private MethodInfo getFieldValueMethod;
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual Task`1<Byte[]> ReadBytesFromBlob(IDataReader dr, int colIndex, CancellationToken cancellationToken);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.SqlServerDelegate : StdAdoDelegate {
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
    public virtual void AddCommandParameter(DbCommand cmd, string paramName, object paramValue, Enum dataType, Nullable`1<int> size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.StdAdoConstants : AdoConstants {
    public static string TablePrefixSubst;
    public static string SqlDeleteBlobTrigger;
    public static string SqlDeleteCalendar;
    public static string SqlDeleteCronTrigger;
    public static string SqlDeleteFiredTrigger;
    public static string SqlDeleteFiredTriggers;
    public static string SqlDeleteInstancesFiredTriggers;
    public static string SqlDeleteJobDetail;
    public static string SqlDeletePausedTriggerGroup;
    public static string SqlDeletePausedTriggerGroups;
    public static string SqlDeleteSchedulerState;
    public static string SqlDeleteSimpleTrigger;
    public static string SqlDeleteTrigger;
    public static string SqlDeleteAllSimpleTriggers;
    public static string SqlDeleteAllSimpropTriggers;
    public static string SqlDeleteAllCronTriggers;
    public static string SqlDeleteAllBlobTriggers;
    public static string SqlDeleteAllTriggers;
    public static string SqlDeleteAllJobDetails;
    public static string SqlDeleteAllCalendars;
    public static string SqlDeleteAllPausedTriggerGrps;
    public static string SqlInsertBlobTrigger;
    public static string SqlInsertCalendar;
    public static string SqlInsertCronTrigger;
    public static string SqlInsertFiredTrigger;
    public static string SqlInsertJobDetail;
    public static string SqlInsertPausedTriggerGroup;
    public static string SqlInsertSchedulerState;
    public static string SqlInsertSimpleTrigger;
    public static string SqlInsertTrigger;
    public static string SqlSelectBlobTrigger;
    public static string SqlSelectCalendar;
    public static string SqlSelectCalendarExistence;
    public static string SqlSelectCalendars;
    public static string SqlSelectCronTriggers;
    public static string SqlSelectFiredTrigger;
    public static string SqlSelectFiredTriggerGroup;
    public static string SqlSelectFiredTriggerInstanceNames;
    public static string SqlSelectFiredTriggersOfJob;
    public static string SqlSelectFiredTriggersOfJobGroup;
    public static string SqlSelectInstancesFiredTriggers;
    public static string SqlSelectInstancesRecoverableFiredTriggers;
    public static string SqlSelectJobDetail;
    public static string SqlSelectJobExecutionCount;
    public static string SqlSelectJobExistence;
    public static string SqlSelectJobForTrigger;
    public static string SqlSelectJobGroups;
    public static string SqlSelectJobsInGroupLike;
    public static string SqlSelectJobsInGroup;
    public static string SqlSelectMisfiredTriggers;
    public static string SqlSelectMisfiredTriggersInGroupInState;
    public static string SqlSelectMisfiredTriggersInState;
    public static string SqlCountMisfiredTriggersInStates;
    public static string SqlSelectHasMisfiredTriggersInState;
    public static string SqlSelectNextTriggerToAcquire;
    public static string SqlSelectNumCalendars;
    public static string SqlSelectNumJobs;
    public static string SqlSelectNumTriggers;
    public static string SqlSelectNumTriggersForJob;
    public static string SqlSelectNumTriggersInGroup;
    public static string SqlSelectPausedTriggerGroup;
    public static string SqlSelectPausedTriggerGroups;
    public static string SqlSelectReferencedCalendar;
    public static string SqlSelectSchedulerState;
    public static string SqlSelectSchedulerStates;
    public static string SqlSelectSimpleTrigger;
    public static string SqlSelectTrigger;
    public static string SqlSelectTriggerData;
    public static string SqlSelectTriggerExistence;
    public static string SqlSelectTriggerForFireTime;
    public static string SqlSelectTriggerGroups;
    public static string SqlSelectTriggerGroupsFiltered;
    public static string SqlSelectTriggerState;
    public static string SqlSelectTriggerStatus;
    public static string SqlSelectTriggersForCalendar;
    public static string SqlSelectTriggersForJob;
    public static string SqlSelectTriggersInGroupLike;
    public static string SqlSelectTriggersInGroup;
    public static string SqlSelectTriggersInState;
    public static string SqlSelectTriggerType;
    public static string SqlUpdateBlobTrigger;
    public static string SqlUpdateCalendar;
    public static string SqlUpdateCronTrigger;
    public static string SqlUpdateJobData;
    public static string SqlUpdateJobDetail;
    public static string SqlUpdateJobTriggerStates;
    public static string SqlUpdateJobTriggerStatesFromOtherState;
    public static string SqlUpdateSchedulerState;
    public static string SqlUpdateSimpleTrigger;
    public static string SqlUpdateTrigger;
    public static string SqlUpdateFiredTrigger;
    public static string SqlUpdateTriggerGroupStateFromState;
    public static string SqlUpdateTriggerGroupStateFromStates;
    public static string SqlUpdateTriggerSkipData;
    public static string SqlUpdateTriggerState;
    public static string SqlUpdateTriggerStateFromState;
    public static string SqlUpdateTriggerStateFromStates;
    public static string SqlUpdateTriggerStateFromStateWithNextFireTime;
    public static string SqlUpdateTriggerStatesFromOtherStates;
    private static StdAdoConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.StdAdoDelegate : StdAdoConstants {
    private static string FileScanListenerName;
    private static string DirectoryScanListenerName;
    private ILog logger;
    private string tablePrefix;
    private string instanceId;
    private string schedName;
    private bool useProperties;
    private ITypeLoadHelper typeLoadHelper;
    private AdoUtil adoUtil;
    private List`1<ITriggerPersistenceDelegate> triggerPersistenceDelegates;
    private string schedNameLiteral;
    private IObjectSerializer objectSerializer;
    private ConcurrentDictionary`2<string, string> cachedQueries;
    [CompilerGeneratedAttribute]
private IDbProvider <DbProvider>k__BackingField;
    protected IDbProvider DbProvider { get; private set; }
    protected bool CanUseProperties { get; }
    [ObsoleteAttribute("Scheduler name is now added to queries as a parameter")]
protected string SchedulerNameLiteral { get; }
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertCalendar>d__0")]
public virtual Task`1<int> InsertCalendar(ConnectionAndTransactionHolder conn, string calendarName, ICalendar calendar, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateCalendar>d__1")]
public virtual Task`1<int> UpdateCalendar(ConnectionAndTransactionHolder conn, string calendarName, ICalendar calendar, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<CalendarExists>d__2")]
public virtual Task`1<bool> CalendarExists(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectCalendar>d__3")]
public virtual Task`1<ICalendar> SelectCalendar(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<CalendarIsReferenced>d__4")]
public virtual Task`1<bool> CalendarIsReferenced(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteCalendar>d__5")]
public virtual Task`1<int> DeleteCalendar(ConnectionAndTransactionHolder conn, string calendarName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectNumCalendars>d__6")]
public virtual Task`1<int> SelectNumCalendars(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectCalendars>d__7")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectCalendars(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
protected IDbProvider get_DbProvider();
    [CompilerGeneratedAttribute]
private void set_DbProvider(IDbProvider value);
    public virtual void Initialize(DelegateInitializationArgs args);
    protected virtual void AddDefaultTriggerPersistenceDelegates();
    protected virtual bool get_CanUseProperties();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<ClearData>d__29")]
public virtual Task ClearData(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public virtual object GetDbBooleanValue(bool booleanValue);
    public virtual bool GetBooleanFromDbValue(object columnValue);
    [NullableContextAttribute("2")]
public virtual object GetDbDateTimeValue(Nullable`1<DateTimeOffset> dateTimeValue);
    public virtual Nullable`1<DateTimeOffset> GetDateTimeFromDbValue(object columnValue);
    [NullableContextAttribute("2")]
public virtual object GetDbTimeSpanValue(Nullable`1<TimeSpan> timeSpanValue);
    public virtual Nullable`1<TimeSpan> GetTimeSpanFromDbValue(object columnValue);
    private Task`1<IDictionary> ReadMapFromReader(DbDataReader rs, int colIndex);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<GetMapFromProperties>d__37")]
private Task`1<IDictionary> GetMapFromProperties(DbDataReader rs, int idx);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectJobsInGroup>d__38")]
public virtual Task`1<IReadOnlyCollection`1<JobKey>> SelectJobsInGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    protected bool IsMatcherEquals(GroupMatcher`1<T> matcher);
    protected string ToSqlEqualsClause(GroupMatcher`1<T> matcher);
    protected virtual string ToSqlLikeClause(GroupMatcher`1<T> matcher);
    protected string ReplaceTablePrefix(string query);
    protected string get_SchedulerNameLiteral();
    [NullableContextAttribute("2")]
protected virtual Byte[] SerializeObject(object obj);
    protected object GetKeyOfNonSerializableValue(IDictionary data);
    private Byte[] SerializeProperties(JobDataMap data);
    protected virtual IDictionary ConvertFromProperty(NameValueCollection properties);
    protected virtual NameValueCollection ConvertToProperty(IDictionary`2<string, object> data);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<GetObjectFromBlob>d__50`1")]
protected virtual Task`1<T> GetObjectFromBlob(DbDataReader rs, int colIndex, CancellationToken cancellationToken);
    protected virtual Task`1<Byte[]> ReadBytesFromBlob(IDataReader dr, int colIndex, CancellationToken cancellationToken);
    public virtual DbCommand PrepareCommand(ConnectionAndTransactionHolder cth, string commandText);
    public virtual void AddCommandParameter(DbCommand cmd, string paramName, object paramValue, Enum dataType, Nullable`1<int> size);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<ValidateSchema>d__54")]
public virtual Task`1<int> ValidateSchema(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    protected virtual string GetStorableJobTypeName(Type jobType);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateJobDetail>d__56")]
public virtual Task`1<int> UpdateJobDetail(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerNamesForJob>d__57")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggerNamesForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteJobDetail>d__58")]
public virtual Task`1<int> DeleteJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<JobExists>d__59")]
public virtual Task`1<bool> JobExists(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateJobData>d__60")]
public virtual Task`1<int> UpdateJobData(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectJobDetail>d__61")]
public virtual Task`1<IJobDetail> SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectNumJobs>d__62")]
public virtual Task`1<int> SelectNumJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectJobGroups>d__63")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectJobGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    public virtual Task`1<IJobDetail> SelectJobForTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectJobForTrigger>d__65")]
public virtual Task`1<IJobDetail> SelectJobForTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, ITypeLoadHelper loadHelper, bool loadJobType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectJobExecutionCount>d__66")]
public virtual Task`1<int> SelectJobExecutionCount(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    public virtual Byte[] SerializeJobData(JobDataMap data);
    protected virtual Task`1<T> GetJobDataFromBlob(DbDataReader rs, int colIndex);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertJobDetail>d__69")]
public virtual Task`1<int> InsertJobDetail(ConnectionAndTransactionHolder conn, IJobDetail job, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertSchedulerState>d__70")]
public virtual Task`1<int> InsertSchedulerState(ConnectionAndTransactionHolder conn, string instanceName, DateTimeOffset checkInTime, TimeSpan interval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteSchedulerState>d__71")]
public virtual Task`1<int> DeleteSchedulerState(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateSchedulerState>d__72")]
public virtual Task`1<int> UpdateSchedulerState(ConnectionAndTransactionHolder conn, string instanceName, DateTimeOffset checkInTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectSchedulerStateRecords>d__73")]
public virtual Task`1<IReadOnlyCollection`1<SchedulerStateRecord>> SelectSchedulerStateRecords(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStatesFromOtherStates>d__74")]
public virtual Task`1<int> UpdateTriggerStatesFromOtherStates(ConnectionAndTransactionHolder conn, string newState, string oldState1, string oldState2, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectMisfiredTriggers>d__75")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectMisfiredTriggers(ConnectionAndTransactionHolder conn, DateTimeOffset ts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggersInState>d__76")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggersInState(ConnectionAndTransactionHolder conn, string state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<HasMisfiredTriggersInState>d__77")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> HasMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state, DateTimeOffset ts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<HasMisfiredTriggersInState>d__78")]
public virtual Task`1<bool> HasMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state1, DateTimeOffset ts, int count, ICollection`1<TriggerKey> resultList, CancellationToken cancellationToken);
    protected virtual string GetSelectNextMisfiredTriggersInStateToAcquireSql(int count);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<CountMisfiredTriggersInState>d__80")]
public virtual Task`1<int> CountMisfiredTriggersInState(ConnectionAndTransactionHolder conn, string state1, DateTimeOffset ts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectMisfiredTriggersInGroupInState>d__81")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectMisfiredTriggersInGroupInState(ConnectionAndTransactionHolder conn, string groupName, string state, DateTimeOffset ts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggersForRecoveringJobs>d__82")]
public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForRecoveringJobs(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteFiredTriggers>d__83")]
public virtual Task`1<int> DeleteFiredTriggers(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteFiredTriggers>d__84")]
public virtual Task`1<int> DeleteFiredTriggers(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertTrigger>d__85")]
public virtual Task`1<int> InsertTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertBlobTrigger>d__86")]
public virtual Task`1<int> InsertBlobTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTrigger>d__87")]
public virtual Task`1<int> UpdateTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail jobDetail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateBlobTrigger>d__88")]
public virtual Task`1<int> UpdateBlobTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerState>d__89")]
public virtual Task`1<int> UpdateTriggerState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStateFromOtherStates>d__90")]
public virtual Task`1<int> UpdateTriggerStateFromOtherStates(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState1, string oldState2, string oldState3, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerGroupStateFromOtherStates>d__91")]
public virtual Task`1<int> UpdateTriggerGroupStateFromOtherStates(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, string newState, string oldState1, string oldState2, string oldState3, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStateFromOtherState>d__92")]
public virtual Task`1<int> UpdateTriggerStateFromOtherState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStateFromOtherStateWithNextFireTime>d__93")]
public sealed virtual Task`1<int> UpdateTriggerStateFromOtherStateWithNextFireTime(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, string newState, string oldState, DateTimeOffset nextFireTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerGroupStateFromOtherState>d__94")]
public virtual Task`1<int> UpdateTriggerGroupStateFromOtherState(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, string newState, string oldState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStatesForJob>d__95")]
public virtual Task`1<int> UpdateTriggerStatesForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, string state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<UpdateTriggerStatesForJobFromOtherState>d__96")]
public virtual Task`1<int> UpdateTriggerStatesForJobFromOtherState(ConnectionAndTransactionHolder conn, JobKey jobKey, string state, string oldState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteBlobTrigger>d__97")]
public virtual Task`1<int> DeleteBlobTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteTrigger>d__98")]
public virtual Task`1<int> DeleteTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteTriggerExtension>d__99")]
protected virtual Task DeleteTriggerExtension(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTrigger>d__100")]
public virtual Task`1<IOperableTrigger> SelectTrigger(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<IsTriggerStillPresent>d__101")]
private Task`1<bool> IsTriggerStillPresent(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    private static void SetTriggerStateProperties(IOperableTrigger trigger, TriggerPropertyBundle props);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerJobDataMap>d__103")]
public virtual Task`1<JobDataMap> SelectTriggerJobDataMap(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerState>d__104")]
public virtual Task`1<string> SelectTriggerState(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerStatus>d__105")]
public virtual Task`1<TriggerStatus> SelectTriggerStatus(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerType>d__106")]
private Task`1<string> SelectTriggerType(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectNumTriggers>d__107")]
public virtual Task`1<int> SelectNumTriggers(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerGroups>d__108")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerGroups>d__109")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectTriggerGroups(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggersInGroup>d__110")]
public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> SelectTriggersInGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertPausedTriggerGroup>d__111")]
public virtual Task`1<int> InsertPausedTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeletePausedTriggerGroup>d__112")]
public virtual Task`1<int> DeletePausedTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeletePausedTriggerGroup>d__113")]
public virtual Task`1<int> DeletePausedTriggerGroup(ConnectionAndTransactionHolder conn, GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteAllPausedTriggerGroups>d__114")]
public virtual Task`1<int> DeleteAllPausedTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<IsTriggerGroupPaused>d__115")]
public virtual Task`1<bool> IsTriggerGroupPaused(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<IsExistingTriggerGroup>d__116")]
public virtual Task`1<bool> IsExistingTriggerGroup(ConnectionAndTransactionHolder conn, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerForFireTime>d__117")]
public virtual Task`1<TriggerKey> SelectTriggerForFireTime(ConnectionAndTransactionHolder conn, DateTimeOffset fireTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggerToAcquire>d__118")]
public virtual Task`1<IReadOnlyCollection`1<TriggerAcquireResult>> SelectTriggerToAcquire(ConnectionAndTransactionHolder conn, DateTimeOffset noLaterThan, DateTimeOffset noEarlierThan, int maxCount, CancellationToken cancellationToken);
    protected virtual string GetSelectNextTriggerToAcquireSql(int maxCount);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<InsertFiredTrigger>d__120")]
public virtual Task`1<int> InsertFiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail job, CancellationToken cancellationToken);
    public virtual Task`1<int> UpdateFiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trigger, string state, IJobDetail job, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectFiredTriggerRecords>d__122")]
public virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectFiredTriggerRecords(ConnectionAndTransactionHolder conn, string triggerName, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectFiredTriggerRecordsByJob>d__123")]
public virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectFiredTriggerRecordsByJob(ConnectionAndTransactionHolder conn, string jobName, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectInstancesFiredTriggerRecords>d__124")]
public virtual Task`1<IReadOnlyCollection`1<FiredTriggerRecord>> SelectInstancesFiredTriggerRecords(ConnectionAndTransactionHolder conn, string instanceName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectFiredTriggerInstanceNames>d__125")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectFiredTriggerInstanceNames(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<DeleteFiredTrigger>d__126")]
public virtual Task`1<int> DeleteFiredTrigger(ConnectionAndTransactionHolder conn, string entryId, CancellationToken cancellationToken);
    public virtual void AddTriggerPersistenceDelegate(ITriggerPersistenceDelegate del);
    protected virtual ITriggerPersistenceDelegate FindTriggerPersistenceDelegate(IOperableTrigger trigger);
    protected virtual ITriggerPersistenceDelegate FindTriggerPersistenceDelegate(string discriminator);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<TriggerExists>d__130")]
public virtual Task`1<bool> TriggerExists(ConnectionAndTransactionHolder conn, TriggerKey triggerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectNumTriggersForJob>d__131")]
public virtual Task`1<int> SelectNumTriggersForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggersForJob>d__132")]
public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectTriggersForCalendar>d__133")]
public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> SelectTriggersForCalendar(ConnectionAndTransactionHolder conn, string calName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdAdoDelegate/<SelectPausedTriggerGroups>d__134")]
public virtual Task`1<IReadOnlyCollection`1<string>> SelectPausedTriggerGroups(ConnectionAndTransactionHolder conn, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private string <ReplaceTablePrefix>b__42_0(string q);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.StdRowLockSemaphore : DBSemaphore {
    public static string SelectForLock;
    public static string InsertLock;
    [CompilerGeneratedAttribute]
private int <MaxRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryPeriod>k__BackingField;
    public int MaxRetry { get; public set; }
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan RetryPeriod { get; public set; }
    public StdRowLockSemaphore(IDbProvider dbProvider);
    public StdRowLockSemaphore(string tablePrefix, string schedName, string selectWithLockSQL, IDbProvider dbProvider);
    private static StdRowLockSemaphore();
    [CompilerGeneratedAttribute]
public int get_MaxRetry();
    [CompilerGeneratedAttribute]
public void set_MaxRetry(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryPeriod();
    [CompilerGeneratedAttribute]
public void set_RetryPeriod(TimeSpan value);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.StdRowLockSemaphore/<ExecuteSQL>d__12")]
protected virtual Task ExecuteSQL(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, string expandedSql, string expandedInsertSql, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.TriggerAcquireResult : object {
    [CompilerGeneratedAttribute]
private string <TriggerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobType>k__BackingField;
    public string TriggerName { get; }
    public string TriggerGroup { get; }
    public string JobType { get; }
    public TriggerAcquireResult(string triggerName, string triggerGroup, string jobType);
    [CompilerGeneratedAttribute]
public string get_TriggerName();
    [CompilerGeneratedAttribute]
public string get_TriggerGroup();
    [CompilerGeneratedAttribute]
public string get_JobType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.TriggerPropertyBundle : object {
    [CompilerGeneratedAttribute]
private IScheduleBuilder <ScheduleBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StatePropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <StatePropertyValues>k__BackingField;
    public IScheduleBuilder ScheduleBuilder { get; }
    public String[] StatePropertyNames { get; }
    public Object[] StatePropertyValues { get; }
    public TriggerPropertyBundle(IScheduleBuilder sb);
    public TriggerPropertyBundle(IScheduleBuilder sb, String[] statePropertyNames, Object[] statePropertyValues);
    [CompilerGeneratedAttribute]
public IScheduleBuilder get_ScheduleBuilder();
    [CompilerGeneratedAttribute]
public String[] get_StatePropertyNames();
    [CompilerGeneratedAttribute]
public Object[] get_StatePropertyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.TriggerStatus : object {
    [CompilerGeneratedAttribute]
private JobKey <JobKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NextFireTimeUtc>k__BackingField;
    public JobKey JobKey { get; public set; }
    public TriggerKey Key { get; public set; }
    public string Status { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    public TriggerStatus(string status, Nullable`1<DateTimeOffset> nextFireTime, TriggerKey triggerKey, JobKey jobKey);
    [CompilerGeneratedAttribute]
public JobKey get_JobKey();
    [CompilerGeneratedAttribute]
public void set_JobKey(JobKey value);
    [CompilerGeneratedAttribute]
public TriggerKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TriggerKey value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore : DBSemaphore {
    public static string SqlUpdateForLock;
    public static string SqlInsertLock;
    protected int RetryCount { get; }
    public UpdateLockRowSemaphore(IDbProvider provider);
    protected UpdateLockRowSemaphore(string tablePrefix, string schedName, string defaultSQL, string defaultInsertSQL, IDbProvider dbProvider);
    private static UpdateLockRowSemaphore();
    protected virtual int get_RetryCount();
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore/<ExecuteSQL>d__6")]
protected virtual Task ExecuteSQL(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, string expandedSql, string expandedInsertSql, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore/<LockViaUpdate>d__7")]
private Task`1<bool> LockViaUpdate(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, string sql, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore/<LockViaInsert>d__8")]
private Task LockViaInsert(Guid requestorId, ConnectionAndTransactionHolder conn, string lockName, string sql, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.AdoJobStore.UpdateLockRowSemaphoreMOT : UpdateLockRowSemaphore {
    private static string SqlUpdateForLockMOT;
    private static string SqlInsertLockMOT;
    protected int RetryCount { get; }
    public UpdateLockRowSemaphoreMOT(IDbProvider provider);
    private static UpdateLockRowSemaphoreMOT();
    protected virtual int get_RetryCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.AnnualCalendar : BaseCalendar {
    private SortedSet`1<DateTime> excludeDays;
    private static int FixedYear;
    public IReadOnlyCollection`1<DateTime> DaysExcluded { get; public set; }
    public AnnualCalendar(ICalendar baseCalendar);
    protected AnnualCalendar(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual IReadOnlyCollection`1<DateTime> get_DaysExcluded();
    public virtual void set_DaysExcluded(IReadOnlyCollection`1<DateTime> value);
    public virtual bool IsDayExcluded(DateTimeOffset day);
    private bool IsDateTimeExcluded(DateTimeOffset day, bool checkBaseCalendar);
    public virtual void SetDayExcluded(DateTime day, bool exclude);
    public virtual bool IsTimeIncluded(DateTimeOffset dateUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeStampUtc);
    public virtual int GetHashCode();
    public bool Equals(AnnualCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual ICalendar Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.BaseCalendar : object {
    private TimeZoneInfo timeZone;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ICalendar <CalendarBase>k__BackingField;
    [NullableAttribute("1")]
public TimeZoneInfo TimeZone { get; public set; }
    public string Description { get; public set; }
    public ICalendar CalendarBase { get; public set; }
    public BaseCalendar(ICalendar baseCalendar);
    [NullableContextAttribute("1")]
public BaseCalendar(TimeZoneInfo timeZone);
    public BaseCalendar(ICalendar baseCalendar, TimeZoneInfo timeZone);
    [NullableContextAttribute("1")]
protected BaseCalendar(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
[SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual TimeZoneInfo get_TimeZone();
    [NullableContextAttribute("1")]
public virtual void set_TimeZone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void set_CalendarBase(ICalendar value);
    [CompilerGeneratedAttribute]
public sealed virtual ICalendar get_CalendarBase();
    public virtual bool IsTimeIncluded(DateTimeOffset timeStampUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    [NullableContextAttribute("1")]
public virtual ICalendar Clone();
    [NullableContextAttribute("1")]
protected BaseCalendar CloneFields(BaseCalendar clone);
    public sealed virtual bool Equals(BaseCalendar other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.CronCalendar : BaseCalendar {
    private CronExpression cronExpression;
    public TimeZoneInfo TimeZone { get; public set; }
    public CronExpression CronExpression { get; public set; }
    public CronCalendar(string expression);
    public CronCalendar(ICalendar baseCalendar, string expression);
    [NullableContextAttribute("2")]
public CronCalendar(ICalendar baseCalendar, string expression, TimeZoneInfo timeZone);
    protected CronCalendar(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual TimeZoneInfo get_TimeZone();
    public virtual void set_TimeZone(TimeZoneInfo value);
    public virtual bool IsTimeIncluded(DateTimeOffset timeUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    public virtual ICalendar Clone();
    public virtual string ToString();
    public CronExpression get_CronExpression();
    public void set_CronExpression(CronExpression value);
    public void SetCronExpressionString(string expression);
    public virtual int GetHashCode();
    public bool Equals(CronCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.DailyCalendar : BaseCalendar {
    private static string InvalidHourOfDay;
    private static string InvalidMinute;
    private static string InvalidSecond;
    private static string InvalidMillis;
    private static string InvalidTimeRange;
    private static string Separator;
    private static char Colon;
    private static string TwoDigitFormat;
    private static string ThreeDigitFormat;
    private int rangeStartingHourOfDay;
    private int rangeStartingMinute;
    private int rangeStartingSecond;
    private int rangeStartingMillis;
    private int rangeEndingHourOfDay;
    private int rangeEndingMinute;
    private int rangeEndingSecond;
    private int rangeEndingMillis;
    private int precisionStepMillis;
    [CompilerGeneratedAttribute]
private bool <InvertTimeRange>k__BackingField;
    public bool InvertTimeRange { get; public set; }
    public string RangeStartingTime { get; }
    public string RangeEndingTime { get; }
    public DailyCalendar(string rangeStartingTime, string rangeEndingTime);
    public DailyCalendar(ICalendar baseCalendar, string rangeStartingTime, string rangeEndingTime);
    public DailyCalendar(int rangeStartingHourOfDay, int rangeStartingMinute, int rangeStartingSecond, int rangeStartingMillis, int rangeEndingHourOfDay, int rangeEndingMinute, int rangeEndingSecond, int rangeEndingMillis);
    public DailyCalendar(ICalendar baseCalendar, int rangeStartingHourOfDay, int rangeStartingMinute, int rangeStartingSecond, int rangeStartingMillis, int rangeEndingHourOfDay, int rangeEndingMinute, int rangeEndingSecond, int rangeEndingMillis);
    public DailyCalendar(DateTime rangeStartingCalendarUtc, DateTime rangeEndingCalendarUtc);
    public DailyCalendar(ICalendar baseCalendar, DateTime rangeStartingCalendarUtc, DateTime rangeEndingCalendarUtc);
    public DailyCalendar(long rangeStartingTimeInMillis, long rangeEndingTimeInMillis);
    public DailyCalendar(ICalendar baseCalendar, long rangeStartingTimeInMillis, long rangeEndingTimeInMillis);
    protected DailyCalendar(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsTimeIncluded(DateTimeOffset timeUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    public virtual ICalendar Clone();
    public DateTimeOffset GetTimeRangeStartingTimeUtc(DateTimeOffset timeUtc);
    public DateTimeOffset GetTimeRangeEndingTimeUtc(DateTimeOffset timeUtc);
    [CompilerGeneratedAttribute]
public bool get_InvertTimeRange();
    [CompilerGeneratedAttribute]
public void set_InvertTimeRange(bool value);
    public string get_RangeStartingTime();
    public string get_RangeEndingTime();
    private static string FormatTimeRange(int hourOfDay, int minute, int seconds, int milliseconds);
    public virtual string ToString();
    public void SetTimeRange(string rangeStartingTimeString, string rangeEndingTimeString);
    public void SetTimeRange(int rangeStartingHourOfDay, int rangeStartingMinute, int rangeStartingSecond, int rangeStartingMillis, int rangeEndingHourOfDay, int rangeEndingMinute, int rangeEndingSecond, int rangeEndingMillis);
    private void CalculationPrecisionStep();
    public void SetTimeRange(DateTime rangeStartingCalendarUtc, DateTime rangeEndingCalendarUtc);
    public void SetTimeRange(long rangeStartingTime, long rangeEndingTime);
    private static DateTimeOffset GetStartOfDay(DateTimeOffset time);
    private static DateTimeOffset GetEndOfDay(DateTimeOffset time);
    private static void Validate(int hourOfDay, int minute, int second, int millis);
    public virtual int GetHashCode();
    public bool Equals(DailyCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.HolidayCalendar : BaseCalendar {
    private SortedSet`1<DateTime> dates;
    public IReadOnlyCollection`1<DateTime> ExcludedDates { get; internal set; }
    public HolidayCalendar(ICalendar baseCalendar);
    protected HolidayCalendar(SerializationInfo info, StreamingContext context);
    public virtual IReadOnlyCollection`1<DateTime> get_ExcludedDates();
    internal virtual void set_ExcludedDates(IReadOnlyCollection`1<DateTime> value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsTimeIncluded(DateTimeOffset timeStampUtc);
    private bool IsTimeIncludedThisCalendar(DateTimeOffset timeStampUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    public virtual ICalendar Clone();
    public virtual void AddExcludedDate(DateTime excludedDateUtc);
    public virtual void RemoveExcludedDate(DateTime dateToRemoveUtc);
    public virtual int GetHashCode();
    public bool Equals(HolidayCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.MonthlyCalendar : BaseCalendar {
    private static int MaxDaysInMonth;
    private Boolean[] excludeDays;
    private bool excludeAll;
    public Boolean[] DaysExcluded { get; public set; }
    public MonthlyCalendar(ICalendar baseCalendar);
    protected MonthlyCalendar(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual Boolean[] get_DaysExcluded();
    public virtual void set_DaysExcluded(Boolean[] value);
    public virtual bool IsDayExcluded(int day);
    public virtual void SetDayExcluded(int day, bool exclude);
    public virtual bool AreAllDaysExcluded();
    public virtual bool IsTimeIncluded(DateTimeOffset timeStampUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    public virtual ICalendar Clone();
    public virtual int GetHashCode();
    public bool Equals(MonthlyCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Calendar.WeeklyCalendar : BaseCalendar {
    private Boolean[] excludeDays;
    private bool excludeAll;
    public Boolean[] DaysExcluded { get; public set; }
    public WeeklyCalendar(ICalendar baseCalendar);
    protected WeeklyCalendar(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual Boolean[] get_DaysExcluded();
    public virtual void set_DaysExcluded(Boolean[] value);
    public virtual bool IsDayExcluded(DayOfWeek wday);
    public virtual void SetDayExcluded(DayOfWeek wday, bool exclude);
    public virtual bool AreAllDaysExcluded();
    public virtual bool IsTimeIncluded(DateTimeOffset timeUtc);
    public virtual DateTimeOffset GetNextIncludedTimeUtc(DateTimeOffset timeUtc);
    public virtual ICalendar Clone();
    public virtual int GetHashCode();
    public bool Equals(WeeklyCalendar obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.DirectSchedulerFactory : object {
    public static string DefaultInstanceId;
    public static string DefaultSchedulerName;
    private static int DefaultBatchMaxSize;
    private TimeSpan DefaultBatchTimeWindow;
    private bool initialized;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectSchedulerFactory <Instance>k__BackingField;
    private ILog Log { get; }
    public static DirectSchedulerFactory Instance { get; }
    private static DirectSchedulerFactory();
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [CompilerGeneratedAttribute]
public static DirectSchedulerFactory get_Instance();
    public virtual Task`1<IReadOnlyList`1<IScheduler>> GetAllSchedulers(CancellationToken cancellationToken);
    public virtual void CreateVolatileScheduler(int maxConcurrency);
    public virtual void CreateRemoteScheduler(string proxyAddress);
    protected virtual void CreateRemoteScheduler(string schedulerName, string schedulerInstanceId, string proxyAddress);
    public virtual void CreateScheduler(IThreadPool threadPool, IJobStore jobStore);
    public virtual void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore);
    public virtual void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore, TimeSpan idleWaitTime);
    public virtual void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore, IDictionary`2<string, ISchedulerPlugin> schedulerPluginMap, TimeSpan idleWaitTime);
    public virtual void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore, IDictionary`2<string, ISchedulerPlugin> schedulerPluginMap, TimeSpan idleWaitTime, int maxBatchSize, TimeSpan batchTimeWindow);
    public virtual void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore, IDictionary`2<string, ISchedulerPlugin> schedulerPluginMap, TimeSpan idleWaitTime, int maxBatchSize, TimeSpan batchTimeWindow, ISchedulerExporter schedulerExporter);
    public virtual Task`1<IScheduler> GetScheduler(CancellationToken cancellationToken);
    public virtual Task`1<IScheduler> GetScheduler(string schedName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.JobDetailImpl : object {
    private string name;
    private string group;
    [NullableAttribute("2")]
private string description;
    private JobDataMap jobDataMap;
    private Type jobType;
    private Nullable`1<bool> disallowConcurrentExecution;
    private Nullable`1<bool> persistJobDataAfterExecution;
    private JobKey key;
    [CompilerGeneratedAttribute]
private bool <RequestsRecovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    public string Name { get; public set; }
    public string Group { get; public set; }
    public string FullName { get; }
    public JobKey Key { get; internal set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Type JobType { get; public set; }
    public JobDataMap JobDataMap { get; public set; }
    public bool RequestsRecovery { get; public set; }
    public bool Durable { get; public set; }
    public bool PersistJobDataAfterExecution { get; }
    public bool ConcurrentExecutionDisallowed { get; }
    public JobDetailImpl(string name, Type jobType);
    public JobDetailImpl(string name, string group, Type jobType);
    public JobDetailImpl(string name, string group, Type jobType, bool isDurable, bool requestsRecovery);
    [NullableContextAttribute("2")]
internal JobDetailImpl(JobKey key, Type jobType, string description, bool isDurable, bool requestsRecovery, JobDataMap jobDataMap, Nullable`1<bool> disallowConcurrentExecution, Nullable`1<bool> persistJobDataAfterExecution);
    public string get_Name();
    public void set_Name(string value);
    public string get_Group();
    public void set_Group(string value);
    public string get_FullName();
    public sealed virtual JobKey get_Key();
    internal void set_Key(JobKey value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
public void set_Description(string value);
    public virtual Type get_JobType();
    public virtual void set_JobType(Type value);
    public virtual JobDataMap get_JobDataMap();
    public virtual void set_JobDataMap(JobDataMap value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequestsRecovery();
    [CompilerGeneratedAttribute]
public void set_RequestsRecovery(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public void set_Durable(bool value);
    public virtual bool get_PersistJobDataAfterExecution();
    public virtual bool get_ConcurrentExecutionDisallowed();
    public virtual void Validate();
    public virtual string ToString();
    public virtual IJobDetail Clone();
    protected virtual bool IsEqual(JobDetailImpl detail);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual bool Equals(JobDetailImpl detail);
    public virtual int GetHashCode();
    public virtual JobBuilder GetJobBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.JobExecutionContextImpl : object {
    private ITrigger trigger;
    private IJobDetail jobDetail;
    private JobDataMap jobDataMap;
    private IScheduler scheduler;
    private CancellationToken cancellationToken;
    private int numRefires;
    private Nullable`1<TimeSpan> jobRunTime;
    private Dictionary`2<object, object> data;
    private CancellationTokenSource cancellationTokenSource;
    internal IJob jobInstance;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICalendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recovering>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ScheduledFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PreviousFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NextFireTimeUtc>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public IScheduler Scheduler { get; }
    public ITrigger Trigger { get; }
    [NullableAttribute("2")]
public ICalendar Calendar { get; }
    public bool Recovering { get; }
    public TriggerKey RecoveringTriggerKey { get; }
    public int RefireCount { get; }
    public JobDataMap MergedJobDataMap { get; }
    public IJobDetail JobDetail { get; }
    public IJob JobInstance { get; }
    public DateTimeOffset FireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> ScheduledFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> PreviousFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    public TimeSpan JobRunTime { get; public set; }
    public string FireInstanceId { get; }
    public CancellationToken CancellationToken { get; }
    public JobExecutionContextImpl(IScheduler scheduler, TriggerFiredBundle firedBundle, IJob job);
    public virtual IScheduler get_Scheduler();
    public virtual ITrigger get_Trigger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ICalendar get_Calendar();
    [CompilerGeneratedAttribute]
public virtual bool get_Recovering();
    public sealed virtual TriggerKey get_RecoveringTriggerKey();
    public virtual int get_RefireCount();
    public virtual JobDataMap get_MergedJobDataMap();
    public virtual IJobDetail get_JobDetail();
    public virtual IJob get_JobInstance();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_FireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_ScheduledFireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_PreviousFireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Result();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Result(object value);
    public virtual TimeSpan get_JobRunTime();
    public virtual void set_JobRunTime(TimeSpan value);
    public virtual void IncrementRefireCount();
    public virtual string ToString();
    public virtual void Put(object key, object objectValue);
    public virtual object Get(object key);
    public virtual void Cancel();
    public sealed virtual string get_FireInstanceId();
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Impl.JobTypeInformation : object {
    private static ConcurrentDictionary`2<Type, JobTypeInformation> jobTypeCache;
    [CompilerGeneratedAttribute]
private bool <ConcurrentExecutionDisallowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistJobDataAfterExecution>k__BackingField;
    public bool ConcurrentExecutionDisallowed { get; }
    public bool PersistJobDataAfterExecution { get; }
    public JobTypeInformation(bool concurrentExecutionDisallowed, bool persistJobDataAfterExecution);
    private static JobTypeInformation();
    public static JobTypeInformation GetOrCreate(Type jobType);
    private static JobTypeInformation Create(Type jobType);
    [CompilerGeneratedAttribute]
public bool get_ConcurrentExecutionDisallowed();
    [CompilerGeneratedAttribute]
public bool get_PersistJobDataAfterExecution();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Matchers.AndMatcher`1 : object {
    [CompilerGeneratedAttribute]
private IMatcher`1<TKey> <LeftOperand>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatcher`1<TKey> <RightOperand>k__BackingField;
    public IMatcher`1<TKey> LeftOperand { get; private set; }
    public IMatcher`1<TKey> RightOperand { get; private set; }
    protected AndMatcher`1(IMatcher`1<TKey> leftOperand, IMatcher`1<TKey> rightOperand);
    public static AndMatcher`1<T> And(IMatcher`1<T> leftOperand, IMatcher`1<T> rightOperand);
    public sealed virtual bool IsMatch(TKey key);
    [CompilerGeneratedAttribute]
public IMatcher`1<TKey> get_LeftOperand();
    [CompilerGeneratedAttribute]
private void set_LeftOperand(IMatcher`1<TKey> value);
    [CompilerGeneratedAttribute]
public IMatcher`1<TKey> get_RightOperand();
    [CompilerGeneratedAttribute]
private void set_RightOperand(IMatcher`1<TKey> value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Matchers.EverythingMatcher`1 : object {
    public static EverythingMatcher`1<JobKey> AllJobs();
    public static EverythingMatcher`1<TriggerKey> AllTriggers();
    public sealed virtual bool IsMatch(TKey key);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Impl.Matchers.GroupMatcher`1 : StringMatcher`1<TKey> {
    protected GroupMatcher`1(string compareTo, StringOperator compareWith);
    public static GroupMatcher`1<TKey> GroupEquals(string compareTo);
    public static GroupMatcher`1<TKey> GroupStartsWith(string compareTo);
    public static GroupMatcher`1<TKey> GroupEndsWith(string compareTo);
    public static GroupMatcher`1<TKey> GroupContains(string compareTo);
    public static GroupMatcher`1<TKey> AnyGroup();
    protected virtual string GetValue(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Matchers.KeyMatcher`1 : object {
    [CompilerGeneratedAttribute]
private TKey <CompareToValue>k__BackingField;
    public TKey CompareToValue { get; private set; }
    protected KeyMatcher`1(TKey compareTo);
    public static KeyMatcher`1<T> KeyEquals(T compareTo);
    public sealed virtual bool IsMatch(TKey key);
    [CompilerGeneratedAttribute]
public TKey get_CompareToValue();
    [CompilerGeneratedAttribute]
private void set_CompareToValue(TKey value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Impl.Matchers.NameMatcher`1 : StringMatcher`1<TKey> {
    protected NameMatcher`1(string compareTo, StringOperator compareWith);
    public static NameMatcher`1<TKey> NameEquals(string compareTo);
    public static NameMatcher`1<TKey> NameStartsWith(string compareTo);
    public static NameMatcher`1<TKey> NameEndsWith(string compareTo);
    public static NameMatcher`1<TKey> NameContains(string compareTo);
    protected virtual string GetValue(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Matchers.NotMatcher`1 : object {
    [CompilerGeneratedAttribute]
private IMatcher`1<TKey> <Operand>k__BackingField;
    public IMatcher`1<TKey> Operand { get; private set; }
    protected NotMatcher`1(IMatcher`1<TKey> operand);
    public static NotMatcher`1<T> Not(IMatcher`1<T> operand);
    public sealed virtual bool IsMatch(TKey key);
    [CompilerGeneratedAttribute]
public IMatcher`1<TKey> get_Operand();
    [CompilerGeneratedAttribute]
private void set_Operand(IMatcher`1<TKey> value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Matchers.OrMatcher`1 : object {
    [CompilerGeneratedAttribute]
private IMatcher`1<TKey> <LeftOperand>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatcher`1<TKey> <RightOperand>k__BackingField;
    public IMatcher`1<TKey> LeftOperand { get; private set; }
    public IMatcher`1<TKey> RightOperand { get; private set; }
    protected OrMatcher`1(IMatcher`1<TKey> leftOperand, IMatcher`1<TKey> rightOperand);
    public static OrMatcher`1<T> Or(IMatcher`1<T> leftOperand, IMatcher`1<T> rightOperand);
    public sealed virtual bool IsMatch(TKey key);
    [CompilerGeneratedAttribute]
public IMatcher`1<TKey> get_LeftOperand();
    [CompilerGeneratedAttribute]
private void set_LeftOperand(IMatcher`1<TKey> value);
    [CompilerGeneratedAttribute]
public IMatcher`1<TKey> get_RightOperand();
    [CompilerGeneratedAttribute]
private void set_RightOperand(IMatcher`1<TKey> value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.Matchers.StringMatcher`1 : object {
    [CompilerGeneratedAttribute]
private string <CompareToValue>k__BackingField;
    [CompilerGeneratedAttribute]
private StringOperator <CompareWithOperator>k__BackingField;
    public string CompareToValue { get; private set; }
    public StringOperator CompareWithOperator { get; private set; }
    protected StringMatcher`1(string compareTo, StringOperator compareWith);
    protected abstract virtual string GetValue(TKey key);
    public sealed virtual bool IsMatch(TKey key);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public string get_CompareToValue();
    [CompilerGeneratedAttribute]
private void set_CompareToValue(string value);
    [CompilerGeneratedAttribute]
public StringOperator get_CompareWithOperator();
    [CompilerGeneratedAttribute]
private void set_CompareWithOperator(StringOperator value);
}
public abstract class Quartz.Impl.Matchers.StringOperator : object {
    [NullableAttribute("1")]
public static StringOperator Equality;
    [NullableAttribute("1")]
public static StringOperator StartsWith;
    [NullableAttribute("1")]
public static StringOperator EndsWith;
    [NullableAttribute("1")]
public static StringOperator Contains;
    [NullableAttribute("1")]
public static StringOperator Anything;
    private static StringOperator();
    [NullableContextAttribute("1")]
public abstract virtual bool Evaluate(string value, string compareTo);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(StringOperator other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.RemoteScheduler : object {
    [NullableAttribute("2")]
private IRemotableQuartzScheduler rsched;
    private string schedId;
    private IRemotableSchedulerProxyFactory proxyFactory;
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public SchedulerContext Context { get; }
    public bool InStandbyMode { get; }
    public bool IsShutdown { get; }
    unknown IJobFactory JobFactory {public set; }
    public bool IsStarted { get; }
    public IListenerManager ListenerManager { get; }
    public RemoteScheduler(string schedId, IRemotableSchedulerProxyFactory proxyFactory);
    public virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual string get_SchedulerName();
    public virtual string get_SchedulerInstanceId();
    public virtual Task`1<SchedulerMetaData> GetMetaData(CancellationToken cancellationToken);
    public virtual SchedulerContext get_Context();
    public virtual bool get_InStandbyMode();
    public virtual bool get_IsShutdown();
    public virtual Task`1<IReadOnlyCollection`1<IJobExecutionContext>> GetCurrentlyExecutingJobs(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    public virtual void set_JobFactory(IJobFactory value);
    public virtual Task Start(CancellationToken cancellationToken);
    public sealed virtual Task StartDelayed(TimeSpan delay, CancellationToken cancellationToken);
    public virtual bool get_IsStarted();
    public virtual Task Standby(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual Task Shutdown(bool waitForJobsToComplete, CancellationToken cancellationToken);
    public virtual Task`1<DateTimeOffset> ScheduleJob(IJobDetail jobDetail, ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task`1<DateTimeOffset> ScheduleJob(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task AddJob(IJobDetail jobDetail, bool replace, CancellationToken cancellationToken);
    public virtual Task AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public virtual Task ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public sealed virtual Task ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace, CancellationToken cancellationToken);
    public virtual Task`1<bool> UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> UnscheduleJob(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger, CancellationToken cancellationToken);
    public virtual Task TriggerJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task TriggerJob(JobKey jobKey, JobDataMap data, CancellationToken cancellationToken);
    public virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseAll(CancellationToken cancellationToken);
    public virtual Task ResumeAll(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<ITrigger>> GetTriggersOfJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IJobDetail> GetJobDetail(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task Clear(CancellationToken cancellationToken);
    public virtual Task`1<ITrigger> GetTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteCalendar(string calName, CancellationToken cancellationToken);
    public virtual Task`1<ICalendar> GetCalendar(string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    public sealed virtual IListenerManager get_ListenerManager();
    public virtual Task`1<bool> Interrupt(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> Interrupt(string fireInstanceId, CancellationToken cancellationToken);
    protected virtual Task CallInGuard(Action`1<IRemotableQuartzScheduler> action);
    protected virtual Task`1<T> CallInGuard(Func`2<IRemotableQuartzScheduler, T> func);
    protected virtual T ReadPropertyInGuard(Func`2<IRemotableQuartzScheduler, T> action);
    protected virtual IRemotableQuartzScheduler GetRemoteScheduler();
    protected virtual SchedulerException InvalidateHandleCreateException(string msg, Exception cause);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SchedulerMetaData <GetMetaData>b__10_0(IRemotableQuartzScheduler x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Quartz.Impl.SchedulerDetailsSetter : object {
    internal static void SetDetails(object target, string schedulerName, string schedulerId);
    private static void Set(object target, string propertyName, string propertyValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.SchedulerRepository : object {
    private Dictionary`2<string, IScheduler> schedulers;
    private object syncRoot;
    [CompilerGeneratedAttribute]
private static SchedulerRepository <Instance>k__BackingField;
    public static SchedulerRepository Instance { get; }
    private static SchedulerRepository();
    [CompilerGeneratedAttribute]
public static SchedulerRepository get_Instance();
    public sealed virtual void Bind(IScheduler schedulerName);
    public sealed virtual void Remove(string schedulerName);
    public sealed virtual IScheduler Lookup(string schedulerName);
    public sealed virtual List`1<IScheduler> LookupAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.StdJobRunShellFactory : object {
    private IScheduler scheduler;
    public virtual void Initialize(IScheduler sched);
    public virtual JobRunShell CreateJobRunShell(TriggerFiredBundle bndle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.StdScheduler : object {
    internal QuartzScheduler sched;
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public SchedulerContext Context { get; }
    public bool IsStarted { get; }
    public bool InStandbyMode { get; }
    public bool IsShutdown { get; }
    public IListenerManager ListenerManager { get; }
    unknown IJobFactory JobFactory {public set; }
    public StdScheduler(QuartzScheduler sched);
    public sealed virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual string get_SchedulerName();
    public virtual string get_SchedulerInstanceId();
    public sealed virtual Task`1<SchedulerMetaData> GetMetaData(CancellationToken cancellationToken);
    public virtual SchedulerContext get_Context();
    public sealed virtual bool get_IsStarted();
    public virtual bool get_InStandbyMode();
    public virtual bool get_IsShutdown();
    public sealed virtual Task`1<IReadOnlyCollection`1<IJobExecutionContext>> GetCurrentlyExecutingJobs(CancellationToken cancellationToken);
    public sealed virtual Task Clear(CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    public sealed virtual IListenerManager get_ListenerManager();
    public virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public virtual void set_JobFactory(IJobFactory value);
    public virtual Task Start(CancellationToken cancellationToken);
    public sealed virtual Task StartDelayed(TimeSpan delay, CancellationToken cancellationToken);
    public virtual Task Standby(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual Task Shutdown(bool waitForJobsToComplete, CancellationToken cancellationToken);
    public virtual Task`1<DateTimeOffset> ScheduleJob(IJobDetail jobDetail, ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task`1<DateTimeOffset> ScheduleJob(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling, CancellationToken cancellationToken);
    public virtual Task AddJob(IJobDetail jobDetail, bool replace, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public sealed virtual Task ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public sealed virtual Task ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> UnscheduleJob(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger, CancellationToken cancellationToken);
    public virtual Task TriggerJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task TriggerJob(JobKey jobKey, JobDataMap data, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseAll(CancellationToken cancellationToken);
    public virtual Task ResumeAll(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<ITrigger>> GetTriggersOfJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public virtual Task`1<IJobDetail> GetJobDetail(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<ITrigger> GetTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteCalendar(string calName, CancellationToken cancellationToken);
    public virtual Task`1<ICalendar> GetCalendar(string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    public virtual Task`1<bool> Interrupt(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> Interrupt(string fireInstanceId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.StdSchedulerFactory : object {
    private static string ConfigurationKeyPrefix;
    private static string ConfigurationKeyPrefixServer;
    public static string ConfigurationSectionName;
    public static string PropertiesFile;
    public static string PropertySchedulerInstanceName;
    public static string PropertySchedulerInstanceId;
    public static string PropertySchedulerInstanceIdGeneratorPrefix;
    public static string PropertySchedulerInstanceIdGeneratorType;
    public static string PropertySchedulerThreadName;
    public static string PropertySchedulerBatchTimeWindow;
    public static string PropertySchedulerMaxBatchSize;
    public static string PropertySchedulerExporterPrefix;
    public static string PropertySchedulerExporterType;
    public static string PropertySchedulerProxy;
    public static string PropertySchedulerProxyType;
    public static string PropertySchedulerIdleWaitTime;
    public static string PropertySchedulerMakeSchedulerThreadDaemon;
    public static string PropertySchedulerTypeLoadHelperType;
    public static string PropertySchedulerJobFactoryType;
    public static string PropertySchedulerJobFactoryPrefix;
    public static string PropertySchedulerInterruptJobsOnShutdown;
    public static string PropertySchedulerInterruptJobsOnShutdownWithWait;
    public static string PropertySchedulerContextPrefix;
    public static string PropertyThreadPoolPrefix;
    public static string PropertyThreadPoolType;
    public static string PropertyJobStoreDbRetryInterval;
    public static string PropertyJobStorePrefix;
    public static string PropertyJobStoreLockHandlerPrefix;
    public static string PropertyJobStoreLockHandlerType;
    public static string PropertyTablePrefix;
    public static string PropertySchedulerName;
    public static string PropertyJobStoreType;
    public static string PropertyDataSourcePrefix;
    public static string PropertyDbProvider;
    public static string PropertyDbProviderType;
    public static string PropertyDataSourceProvider;
    public static string PropertyDataSourceConnectionString;
    public static string PropertyDataSourceConnectionStringName;
    public static string PropertyPluginPrefix;
    public static string PropertyPluginType;
    public static string PropertyJobListenerPrefix;
    public static string PropertyTriggerListenerPrefix;
    public static string PropertyListenerType;
    public static string PropertyCheckConfiguration;
    public static string PropertyThreadExecutor;
    public static string PropertyThreadExecutorType;
    public static string PropertyObjectSerializer;
    private static String[] supportedKeys;
    public static string DefaultInstanceId;
    public static string AutoGenerateInstanceId;
    public static string SystemPropertyAsInstanceId;
    private SemaphoreSlim semaphore;
    [NullableAttribute("2")]
private SchedulerException initException;
    private PropertiesParser cfg;
    private ILog log;
    private string SchedulerName { get; }
    public StdSchedulerFactory(NameValueCollection props);
    private static StdSchedulerFactory();
    private string get_SchedulerName();
    public static Task`1<IScheduler> GetDefaultScheduler(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyList`1<IScheduler>> GetAllSchedulers(CancellationToken cancellationToken);
    protected virtual ISchedulerRepository GetSchedulerRepository();
    protected virtual IDbConnectionManager GetDBConnectionManager();
    public virtual void Initialize();
    internal static NameValueCollection InitializeProperties(ILog logger, bool throwOnProblem);
    [NullableContextAttribute("2")]
private static NameValueCollection ReadConfigurationSection();
    private static NameValueCollection OverrideWithSysProps(NameValueCollection props);
    public virtual void Initialize(NameValueCollection props);
    protected virtual void ValidateConfiguration();
    protected virtual bool IsSupportedConfigurationKey(string configurationKey);
    [AsyncStateMachineAttribute("Quartz.Impl.StdSchedulerFactory/<Instantiate>d__70")]
private Task`1<IScheduler> Instantiate();
    protected virtual string GetNamedConnectionString(string connectionStringName);
    [NullableContextAttribute("2")]
protected virtual T InstantiateType(Type implementationType);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Quartz.Impl.StdSchedulerFactory/<ShutdownFromInstantiateException>d__73")]
private Task ShutdownFromInstantiateException(IThreadPool tp, QuartzScheduler qs, bool tpInited, bool qsInited);
    protected virtual IScheduler Instantiate(QuartzSchedulerResources rsrcs, QuartzScheduler qs);
    [NullableContextAttribute("2")]
protected virtual Type LoadType(string typeName);
    [AsyncStateMachineAttribute("Quartz.Impl.StdSchedulerFactory/<GetScheduler>d__76")]
public virtual Task`1<IScheduler> GetScheduler(CancellationToken cancellationToken);
    public virtual Task`1<IScheduler> GetScheduler(string schedName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Impl.Triggers.AbstractTrigger : object {
    private string name;
    private string group;
    private string jobName;
    private string jobGroup;
    private JobDataMap jobDataMap;
    private int misfireInstruction;
    private Nullable`1<DateTimeOffset> endTimeUtc;
    private DateTimeOffset startTimeUtc;
    [NullableAttribute("2")]
private TriggerKey key;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CalendarName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FireInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string Name { get; public set; }
    public string Group { get; public set; }
    public string JobName { get; public set; }
    public string JobGroup { get; public set; }
    public string FullName { get; }
    public TriggerKey Key { get; public set; }
    public JobKey JobKey { get; public set; }
    public string FullJobName { get; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public string CalendarName { get; public set; }
    public JobDataMap JobDataMap { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public int MisfireInstruction { get; public set; }
    public string FireInstanceId { get; public set; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; public set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public bool HasMillisecondPrecision { get; }
    public int Priority { get; public set; }
    public bool HasAdditionalProperties { get; }
    protected AbstractTrigger(string name);
    protected AbstractTrigger(string name, string group);
    protected AbstractTrigger(string name, string group, string jobName, string jobGroup);
    public string get_Name();
    public void set_Name(string value);
    public string get_Group();
    public void set_Group(string value);
    public string get_JobName();
    public void set_JobName(string value);
    public string get_JobGroup();
    public void set_JobGroup(string value);
    public virtual string get_FullName();
    public virtual TriggerKey get_Key();
    public virtual void set_Key(TriggerKey value);
    public sealed virtual void set_JobKey(JobKey value);
    public sealed virtual JobKey get_JobKey();
    public virtual string get_FullJobName();
    public sealed virtual TriggerBuilder GetTriggerBuilder();
    public abstract virtual IScheduleBuilder GetScheduleBuilder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_CalendarName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_CalendarName(string value);
    public virtual JobDataMap get_JobDataMap();
    public virtual void set_JobDataMap(JobDataMap value);
    public abstract virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public virtual int get_MisfireInstruction();
    public virtual void set_MisfireInstruction(int value);
    [CompilerGeneratedAttribute]
public virtual string get_FireInstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_FireInstanceId(string value);
    public abstract virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> nextFireTime);
    public abstract virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> previousFireTime);
    public abstract virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public virtual void set_EndTimeUtc(Nullable`1<DateTimeOffset> value);
    public virtual DateTimeOffset get_StartTimeUtc();
    public virtual void set_StartTimeUtc(DateTimeOffset value);
    public abstract virtual bool get_HasMillisecondPrecision();
    [CompilerGeneratedAttribute]
public virtual int get_Priority();
    [CompilerGeneratedAttribute]
public virtual void set_Priority(int value);
    [NullableContextAttribute("2")]
public abstract virtual void Triggered(ICalendar cal);
    [NullableContextAttribute("2")]
public abstract virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar cal);
    public virtual SchedulerInstruction ExecutionComplete(IJobExecutionContext context, JobExecutionException result);
    public abstract virtual bool GetMayFireAgain();
    public abstract virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTime);
    protected abstract virtual bool ValidateMisfireInstruction(int misfireInstruction);
    [NullableContextAttribute("2")]
public abstract virtual void UpdateAfterMisfire(ICalendar cal);
    public abstract virtual void UpdateWithNewCalendar(ICalendar cal, TimeSpan misfireThreshold);
    public virtual void Validate();
    public virtual bool get_HasAdditionalProperties();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual int CompareTo(ITrigger other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(AbstractTrigger trigger);
    public virtual int GetHashCode();
    public virtual ITrigger Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Triggers.CalendarIntervalTriggerImpl : AbstractTrigger {
    private static int YearToGiveupSchedulingAt;
    private DateTimeOffset startTime;
    private Nullable`1<DateTimeOffset> endTime;
    private Nullable`1<DateTimeOffset> nextFireTimeUtc;
    private Nullable`1<DateTimeOffset> previousFireTimeUtc;
    private int repeatInterval;
    [NullableAttribute("2")]
internal TimeZoneInfo timeZone;
    [CompilerGeneratedAttribute]
private IntervalUnit <RepeatIntervalUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveHourOfDayAcrossDaylightSavings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDayIfHourDoesNotExist>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimesTriggered>k__BackingField;
    [NullableAttribute("2")]
private string timeZoneInfoId { get; private set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public bool HasMillisecondPrecision { get; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; public set; }
    public IntervalUnit RepeatIntervalUnit { get; public set; }
    public int RepeatInterval { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public bool PreserveHourOfDayAcrossDaylightSavings { get; public set; }
    public bool SkipDayIfHourDoesNotExist { get; public set; }
    public int TimesTriggered { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public CalendarIntervalTriggerImpl(string name, IntervalUnit intervalUnit, int repeatInterval);
    public CalendarIntervalTriggerImpl(string name, string group, IntervalUnit intervalUnit, int repeatInterval);
    public CalendarIntervalTriggerImpl(string name, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, IntervalUnit intervalUnit, int repeatInterval);
    public CalendarIntervalTriggerImpl(string name, string group, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, IntervalUnit intervalUnit, int repeatInterval);
    public CalendarIntervalTriggerImpl(string name, string group, string jobName, string jobGroup, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, IntervalUnit intervalUnit, int repeatInterval);
    private static CalendarIntervalTriggerImpl();
    [NullableContextAttribute("2")]
private string get_timeZoneInfoId();
    [NullableContextAttribute("2")]
private void set_timeZoneInfoId(string value);
    public virtual DateTimeOffset get_StartTimeUtc();
    public virtual void set_StartTimeUtc(DateTimeOffset value);
    public virtual bool get_HasMillisecondPrecision();
    public virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public virtual void set_EndTimeUtc(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual IntervalUnit get_RepeatIntervalUnit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RepeatIntervalUnit(IntervalUnit value);
    public sealed virtual int get_RepeatInterval();
    public sealed virtual void set_RepeatInterval(int value);
    public sealed virtual TimeZoneInfo get_TimeZone();
    public void set_TimeZone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreserveHourOfDayAcrossDaylightSavings();
    [CompilerGeneratedAttribute]
public void set_PreserveHourOfDayAcrossDaylightSavings(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipDayIfHourDoesNotExist();
    [CompilerGeneratedAttribute]
public void set_SkipDayIfHourDoesNotExist(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TimesTriggered();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimesTriggered(int value);
    protected virtual bool ValidateMisfireInstruction(int misfireInstruction);
    [NullableContextAttribute("2")]
public virtual void UpdateAfterMisfire(ICalendar cal);
    [NullableContextAttribute("2")]
public virtual void Triggered(ICalendar calendar);
    public virtual void UpdateWithNewCalendar(ICalendar calendar, TimeSpan misfireThreshold);
    [NullableContextAttribute("2")]
public virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar calendar);
    public virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> value);
    public virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> previousFireTimeUtc);
    public virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTime);
    protected Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTime, bool ignoreEndTime);
    private bool DaylightSavingHourShiftOccurredAndAdvanceNeeded(DateTimeOffset& newTime, int initialHourOfDay);
    private void MakeHourAdjustmentIfNeeded(DateTimeOffset& sTime, int initialHourOfDay);
    public virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public virtual bool GetMayFireAgain();
    public virtual void Validate();
    public virtual IScheduleBuilder GetScheduleBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Triggers.CronTriggerImpl : AbstractTrigger {
    protected static int YearToGiveupSchedulingAt;
    [NullableAttribute("2")]
private CronExpression cronEx;
    private DateTimeOffset startTimeUtc;
    private Nullable`1<DateTimeOffset> endTimeUtc;
    private Nullable`1<DateTimeOffset> nextFireTimeUtc;
    private Nullable`1<DateTimeOffset> previousFireTimeUtc;
    [NullableAttribute("2")]
private TimeZoneInfo timeZone;
    [NullableAttribute("2")]
private string timeZoneInfoId { get; private set; }
    [NullableAttribute("2")]
public string CronExpressionString { get; public set; }
    unknown CronExpression CronExpression {public set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public bool HasMillisecondPrecision { get; }
    public CronTriggerImpl(string name);
    public CronTriggerImpl(string name, string group);
    public CronTriggerImpl(string name, string group, string cronExpression);
    public CronTriggerImpl(string name, string group, string jobName, string jobGroup);
    public CronTriggerImpl(string name, string group, string jobName, string jobGroup, string cronExpression);
    public CronTriggerImpl(string name, string group, string jobName, string jobGroup, string cronExpression, TimeZoneInfo timeZone);
    public CronTriggerImpl(string name, string group, string jobName, string jobGroup, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTime, string cronExpression);
    public CronTriggerImpl(string name, string group, string jobName, string jobGroup, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTime, string cronExpression, TimeZoneInfo timeZone);
    [NullableContextAttribute("2")]
private string get_timeZoneInfoId();
    [NullableContextAttribute("2")]
private void set_timeZoneInfoId(string value);
    public virtual ITrigger Clone();
    [NullableContextAttribute("2")]
public sealed virtual void set_CronExpressionString(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_CronExpressionString();
    public void set_CronExpression(CronExpression value);
    public virtual DateTimeOffset get_StartTimeUtc();
    public virtual void set_StartTimeUtc(DateTimeOffset value);
    public virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public virtual void set_EndTimeUtc(Nullable`1<DateTimeOffset> value);
    public virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> fireTime);
    public virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> fireTime);
    public sealed virtual TimeZoneInfo get_TimeZone();
    public sealed virtual void set_TimeZone(TimeZoneInfo value);
    public virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTimeUtc);
    public virtual IScheduleBuilder GetScheduleBuilder();
    public virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public virtual bool get_HasMillisecondPrecision();
    public virtual bool GetMayFireAgain();
    protected virtual bool ValidateMisfireInstruction(int misfireInstruction);
    [NullableContextAttribute("2")]
public virtual void UpdateAfterMisfire(ICalendar cal);
    public bool WillFireOn(DateTimeOffset test);
    public bool WillFireOn(DateTimeOffset test, bool dayOnly);
    [NullableContextAttribute("2")]
public virtual void Triggered(ICalendar cal);
    public virtual void UpdateWithNewCalendar(ICalendar calendar, TimeSpan misfireThreshold);
    [NullableContextAttribute("2")]
public virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar cal);
    [NullableContextAttribute("2")]
public sealed virtual string GetExpressionSummary();
    protected Nullable`1<DateTimeOffset> GetTimeAfter(DateTimeOffset afterTime);
    protected Nullable`1<DateTimeOffset> GetTimeBefore(Nullable`1<DateTimeOffset> date);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl : AbstractTrigger {
    public static int RepeatIndefinitely;
    private static int YearToGiveupSchedulingAt;
    private DateTimeOffset startTimeUtc;
    private Nullable`1<DateTimeOffset> endTimeUtc;
    private Nullable`1<DateTimeOffset> nextFireTimeUtc;
    private Nullable`1<DateTimeOffset> previousFireTimeUtc;
    private int repeatInterval;
    private IntervalUnit repeatIntervalUnit;
    private HashSet`1<DayOfWeek> daysOfWeek;
    private TimeOfDay startTimeOfDay;
    private TimeOfDay endTimeOfDay;
    private bool complete;
    private int repeatCount;
    [NullableAttribute("2")]
internal TimeZoneInfo timeZone;
    [CompilerGeneratedAttribute]
private int <TimesTriggered>k__BackingField;
    [NullableAttribute("2")]
private string timeZoneInfoId { get; private set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; public set; }
    public int RepeatCount { get; public set; }
    public IntervalUnit RepeatIntervalUnit { get; public set; }
    public int RepeatInterval { get; public set; }
    public int TimesTriggered { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public IReadOnlyCollection`1<DayOfWeek> DaysOfWeek { get; public set; }
    public TimeOfDay StartTimeOfDay { get; public set; }
    public TimeOfDay EndTimeOfDay { get; public set; }
    public bool HasMillisecondPrecision { get; }
    public DailyTimeIntervalTriggerImpl(string name, TimeOfDay startTimeOfDayUtc, TimeOfDay endTimeOfDayUtc, IntervalUnit intervalUnit, int repeatInterval);
    public DailyTimeIntervalTriggerImpl(string name, string group, TimeOfDay startTimeOfDayUtc, TimeOfDay endTimeOfDayUtc, IntervalUnit intervalUnit, int repeatInterval);
    public DailyTimeIntervalTriggerImpl(string name, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, TimeOfDay startTimeOfDayUtc, TimeOfDay endTimeOfDayUtc, IntervalUnit intervalUnit, int repeatInterval);
    public DailyTimeIntervalTriggerImpl(string name, string group, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, TimeOfDay startTimeOfDayUtc, TimeOfDay endTimeOfDayUtc, IntervalUnit intervalUnit, int repeatInterval);
    public DailyTimeIntervalTriggerImpl(string name, string group, string jobName, string jobGroup, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, TimeOfDay startTimeOfDayUtc, TimeOfDay endTimeOfDayUtc, IntervalUnit intervalUnit, int repeatInterval);
    private static DailyTimeIntervalTriggerImpl();
    [NullableContextAttribute("2")]
private string get_timeZoneInfoId();
    [NullableContextAttribute("2")]
private void set_timeZoneInfoId(string value);
    public virtual DateTimeOffset get_StartTimeUtc();
    public virtual void set_StartTimeUtc(DateTimeOffset value);
    public virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public virtual void set_EndTimeUtc(Nullable`1<DateTimeOffset> value);
    public sealed virtual int get_RepeatCount();
    public void set_RepeatCount(int value);
    public sealed virtual IntervalUnit get_RepeatIntervalUnit();
    public void set_RepeatIntervalUnit(IntervalUnit value);
    public sealed virtual int get_RepeatInterval();
    public void set_RepeatInterval(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TimesTriggered();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimesTriggered(int value);
    public sealed virtual TimeZoneInfo get_TimeZone();
    public void set_TimeZone(TimeZoneInfo value);
    protected virtual bool ValidateMisfireInstruction(int misfireInstruction);
    [NullableContextAttribute("2")]
public virtual void UpdateAfterMisfire(ICalendar cal);
    [NullableContextAttribute("2")]
public virtual void Triggered(ICalendar calendar);
    public virtual void UpdateWithNewCalendar(ICalendar calendar, TimeSpan misfireThreshold);
    [NullableContextAttribute("2")]
public virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar calendar);
    private DateTimeOffset CreateCalendarTime(DateTimeOffset dateTime);
    public virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> value);
    public virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> previousFireTimeUtc);
    public virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTime);
    private bool IsSameDay(DateTimeOffset d1, DateTimeOffset d2);
    private Nullable`1<DateTimeOffset> AdvanceToNextDayOfWeekIfNecessary(DateTimeOffset fireTime, bool forceToAdvanceNextDay);
    public virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public virtual bool GetMayFireAgain();
    public virtual void Validate();
    public sealed virtual IReadOnlyCollection`1<DayOfWeek> get_DaysOfWeek();
    public sealed virtual void set_DaysOfWeek(IReadOnlyCollection`1<DayOfWeek> value);
    public sealed virtual TimeOfDay get_StartTimeOfDay();
    public void set_StartTimeOfDay(TimeOfDay value);
    public sealed virtual TimeOfDay get_EndTimeOfDay();
    public void set_EndTimeOfDay(TimeOfDay value);
    public virtual IScheduleBuilder GetScheduleBuilder();
    public virtual bool get_HasMillisecondPrecision();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Impl.Triggers.SimpleTriggerImpl : AbstractTrigger {
    public static int RepeatIndefinitely;
    private static int YearToGiveupSchedulingAt;
    private Nullable`1<DateTimeOffset> nextFireTimeUtc;
    private Nullable`1<DateTimeOffset> previousFireTimeUtc;
    private int repeatCount;
    private TimeSpan repeatInterval;
    private int timesTriggered;
    public int RepeatCount { get; public set; }
    public TimeSpan RepeatInterval { get; public set; }
    public int TimesTriggered { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public bool HasMillisecondPrecision { get; }
    public SimpleTriggerImpl(string name);
    public SimpleTriggerImpl(string name, string group);
    public SimpleTriggerImpl(string name, int repeatCount, TimeSpan repeatInterval);
    public SimpleTriggerImpl(string name, string group, int repeatCount, TimeSpan repeatInterval);
    public SimpleTriggerImpl(string name, DateTimeOffset startTimeUtc);
    public SimpleTriggerImpl(string name, string group, DateTimeOffset startTimeUtc);
    public SimpleTriggerImpl(string name, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, int repeatCount, TimeSpan repeatInterval);
    public SimpleTriggerImpl(string name, string group, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, int repeatCount, TimeSpan repeatInterval);
    public SimpleTriggerImpl(string name, string group, string jobName, string jobGroup, DateTimeOffset startTimeUtc, Nullable`1<DateTimeOffset> endTimeUtc, int repeatCount, TimeSpan repeatInterval);
    public sealed virtual int get_RepeatCount();
    public sealed virtual void set_RepeatCount(int value);
    public sealed virtual TimeSpan get_RepeatInterval();
    public sealed virtual void set_RepeatInterval(TimeSpan value);
    public virtual int get_TimesTriggered();
    public virtual void set_TimesTriggered(int value);
    public virtual IScheduleBuilder GetScheduleBuilder();
    public virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public virtual bool get_HasMillisecondPrecision();
    protected virtual bool ValidateMisfireInstruction(int misfireInstruction);
    [NullableContextAttribute("2")]
public virtual void UpdateAfterMisfire(ICalendar cal);
    [NullableContextAttribute("2")]
public virtual void Triggered(ICalendar cal);
    public virtual void UpdateWithNewCalendar(ICalendar calendar, TimeSpan misfireThreshold);
    [NullableContextAttribute("2")]
public virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar cal);
    public virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> nextFireTime);
    public virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> previousFireTime);
    public virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTimeUtc);
    public virtual Nullable`1<DateTimeOffset> GetFireTimeBefore(Nullable`1<DateTimeOffset> endUtc);
    public virtual int ComputeNumTimesFiredBetween(DateTimeOffset startTimeUtc, DateTimeOffset endTimeUtc);
    public virtual bool GetMayFireAgain();
    public virtual void Validate();
}
public enum Quartz.IntervalUnit : Enum {
    public int value__;
    public static IntervalUnit Millisecond;
    public static IntervalUnit Second;
    public static IntervalUnit Minute;
    public static IntervalUnit Hour;
    public static IntervalUnit Day;
    public static IntervalUnit Week;
    public static IntervalUnit Month;
    public static IntervalUnit Year;
}
public interface Quartz.IPropertyConfigurationRoot {
}
[NullableContextAttribute("1")]
public interface Quartz.IPropertyConfigurer {
    public NameValueCollection Properties { get; }
    public abstract virtual NameValueCollection get_Properties();
}
[NullableContextAttribute("1")]
public interface Quartz.IPropertySetter {
    public abstract virtual void SetProperty(string name, string value);
}
[NullableContextAttribute("1")]
public interface Quartz.IScheduleBuilder {
    public abstract virtual IMutableTrigger Build();
}
[NullableContextAttribute("1")]
public interface Quartz.IScheduler {
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public SchedulerContext Context { get; }
    public bool InStandbyMode { get; }
    public bool IsShutdown { get; }
    unknown IJobFactory JobFactory {public set; }
    public IListenerManager ListenerManager { get; }
    public bool IsStarted { get; }
    public abstract virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public abstract virtual string get_SchedulerName();
    public abstract virtual string get_SchedulerInstanceId();
    public abstract virtual SchedulerContext get_Context();
    public abstract virtual bool get_InStandbyMode();
    public abstract virtual bool get_IsShutdown();
    public abstract virtual Task`1<SchedulerMetaData> GetMetaData(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IJobExecutionContext>> GetCurrentlyExecutingJobs(CancellationToken cancellationToken);
    public abstract virtual void set_JobFactory(IJobFactory value);
    public abstract virtual IListenerManager get_ListenerManager();
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    public abstract virtual Task Start(CancellationToken cancellationToken);
    public abstract virtual Task StartDelayed(TimeSpan delay, CancellationToken cancellationToken);
    public abstract virtual bool get_IsStarted();
    public abstract virtual Task Standby(CancellationToken cancellationToken);
    public abstract virtual Task Shutdown(CancellationToken cancellationToken);
    public abstract virtual Task Shutdown(bool waitForJobsToComplete, CancellationToken cancellationToken);
    public abstract virtual Task`1<DateTimeOffset> ScheduleJob(IJobDetail jobDetail, ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<DateTimeOffset> ScheduleJob(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public abstract virtual Task ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UnscheduleJob(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<DateTimeOffset>> RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger, CancellationToken cancellationToken);
    public abstract virtual Task AddJob(IJobDetail jobDetail, bool replace, CancellationToken cancellationToken);
    public abstract virtual Task AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public abstract virtual Task TriggerJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task TriggerJob(JobKey jobKey, JobDataMap data, CancellationToken cancellationToken);
    public abstract virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task PauseAll(CancellationToken cancellationToken);
    public abstract virtual Task ResumeAll(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<ITrigger>> GetTriggersOfJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IJobDetail> GetJobDetail(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<ITrigger> GetTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteCalendar(string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ICalendar> GetCalendar(string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Interrupt(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Interrupt(string fireInstanceId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task Clear(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.ISchedulerFactory {
    public abstract virtual Task`1<IReadOnlyList`1<IScheduler>> GetAllSchedulers(CancellationToken cancellationToken);
    public abstract virtual Task`1<IScheduler> GetScheduler(CancellationToken cancellationToken);
    public abstract virtual Task`1<IScheduler> GetScheduler(string schedName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.ISchedulerListener {
    public abstract virtual Task JobScheduled(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task JobUnscheduled(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task TriggerFinalized(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task TriggerPaused(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task TriggersPaused(string triggerGroup, CancellationToken cancellationToken);
    public abstract virtual Task TriggerResumed(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task TriggersResumed(string triggerGroup, CancellationToken cancellationToken);
    public abstract virtual Task JobAdded(IJobDetail jobDetail, CancellationToken cancellationToken);
    public abstract virtual Task JobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task JobPaused(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task JobInterrupted(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task JobsPaused(string jobGroup, CancellationToken cancellationToken);
    public abstract virtual Task JobResumed(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task JobsResumed(string jobGroup, CancellationToken cancellationToken);
    public abstract virtual Task SchedulerError(string msg, SchedulerException cause, CancellationToken cancellationToken);
    public abstract virtual Task SchedulerInStandbyMode(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerStarting(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerShutdown(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerShuttingdown(CancellationToken cancellationToken);
    public abstract virtual Task SchedulingDataCleared(CancellationToken cancellationToken);
}
public interface Quartz.ISimpleTrigger {
    public int RepeatCount { get; public set; }
    public TimeSpan RepeatInterval { get; public set; }
    public int TimesTriggered { get; public set; }
    public abstract virtual int get_RepeatCount();
    public abstract virtual void set_RepeatCount(int value);
    public abstract virtual TimeSpan get_RepeatInterval();
    public abstract virtual void set_RepeatInterval(TimeSpan value);
    public abstract virtual int get_TimesTriggered();
    public abstract virtual void set_TimesTriggered(int value);
}
[NullableContextAttribute("1")]
public interface Quartz.ITrigger {
    public TriggerKey Key { get; }
    public JobKey JobKey { get; }
    [NullableAttribute("2")]
public string Description { get; }
    [NullableAttribute("2")]
public string CalendarName { get; }
    public JobDataMap JobDataMap { get; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public int MisfireInstruction { get; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; }
    public DateTimeOffset StartTimeUtc { get; }
    public int Priority { get; public set; }
    public bool HasMillisecondPrecision { get; }
    public abstract virtual TriggerKey get_Key();
    public abstract virtual JobKey get_JobKey();
    public abstract virtual TriggerBuilder GetTriggerBuilder();
    public abstract virtual IScheduleBuilder GetScheduleBuilder();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
    [NullableContextAttribute("2")]
public abstract virtual string get_CalendarName();
    public abstract virtual JobDataMap get_JobDataMap();
    public abstract virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
    public abstract virtual int get_MisfireInstruction();
    public abstract virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public abstract virtual DateTimeOffset get_StartTimeUtc();
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual bool GetMayFireAgain();
    public abstract virtual Nullable`1<DateTimeOffset> GetNextFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> GetPreviousFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> GetFireTimeAfter(Nullable`1<DateTimeOffset> afterTime);
    public abstract virtual bool get_HasMillisecondPrecision();
    public abstract virtual ITrigger Clone();
}
[NullableContextAttribute("1")]
public interface Quartz.ITriggerListener {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> VetoJobExecution(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public abstract virtual Task TriggerMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.JobBuilder : object {
    [NullableAttribute("2")]
private JobKey key;
    [NullableAttribute("2")]
private string description;
    [NullableAttribute("2")]
private Type jobType;
    private bool durability;
    private bool shouldRecover;
    private Nullable`1<bool> _concurrentExecutionDisallowed;
    private Nullable`1<bool> _persistJobDataAfterExecution;
    private JobDataMap jobDataMap;
    [NullableAttribute("2")]
internal JobKey Key { get; }
    [NullableContextAttribute("2")]
internal JobKey get_Key();
    public static JobBuilder Create();
    public static JobBuilder Create(Type jobType);
    public static JobBuilder Create();
    [ObsoleteAttribute]
public static JobBuilder CreateForAsync();
    public IJobDetail Build();
    public sealed virtual JobBuilder DisallowConcurrentExecution(bool concurrentExecutionDisallowed);
    public sealed virtual JobBuilder PersistJobDataAfterExecution(bool persistJobDataAfterExecution);
    public sealed virtual JobBuilder WithIdentity(string name);
    public sealed virtual JobBuilder WithIdentity(string name, string group);
    public sealed virtual JobBuilder WithIdentity(JobKey key);
    public sealed virtual JobBuilder WithDescription(string description);
    public JobBuilder OfType();
    public JobBuilder OfType(Type type);
    public sealed virtual JobBuilder RequestRecovery(bool shouldRecover);
    public sealed virtual JobBuilder StoreDurably(bool durability);
    public sealed virtual JobBuilder UsingJobData(string key, string value);
    public sealed virtual JobBuilder UsingJobData(string key, int value);
    public sealed virtual JobBuilder UsingJobData(string key, long value);
    public sealed virtual JobBuilder UsingJobData(string key, float value);
    public sealed virtual JobBuilder UsingJobData(string key, double value);
    public sealed virtual JobBuilder UsingJobData(string key, bool value);
    public sealed virtual JobBuilder UsingJobData(string key, Guid value);
    public sealed virtual JobBuilder UsingJobData(string key, char value);
    public sealed virtual JobBuilder UsingJobData(JobDataMap newJobDataMap);
    public sealed virtual JobBuilder SetJobData(JobDataMap newJobDataMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.JobDataMap : StringKeyDirtyFlagMap {
    public JobDataMap(int initialCapacity);
    public JobDataMap(IDictionary`2<string, object> map);
    public JobDataMap(IDictionary map);
    protected JobDataMap(SerializationInfo info, StreamingContext context);
    public virtual void PutAsString(string key, bool value);
    public virtual void PutAsString(string key, char value);
    public virtual void PutAsString(string key, double value);
    public virtual void PutAsString(string key, float value);
    public virtual void PutAsString(string key, int value);
    public virtual void PutAsString(string key, long value);
    public virtual void PutAsString(string key, DateTime value);
    public virtual void PutAsString(string key, DateTimeOffset value);
    public virtual void PutAsString(string key, TimeSpan value);
    public virtual void PutAsString(string key, Guid value);
    public virtual void PutAsString(string key, Nullable`1<Guid> value);
    public virtual int GetIntValueFromString(string key);
    public virtual int GetIntValue(string key);
    public virtual bool GetBooleanValueFromString(string key);
    public virtual bool GetBooleanValue(string key);
    public virtual char GetCharFromString(string key);
    public virtual double GetDoubleValueFromString(string key);
    public virtual double GetDoubleValue(string key);
    public virtual float GetFloatValueFromString(string key);
    public virtual float GetFloatValue(string key);
    public virtual long GetLongValueFromString(string key);
    public virtual DateTime GetDateTimeValueFromString(string key);
    public virtual DateTimeOffset GetDateTimeOffsetValueFromString(string key);
    public virtual TimeSpan GetTimeSpanValueFromString(string key);
    public virtual long GetLongValue(string key);
    public virtual DateTime GetDateTimeValue(string key);
    public virtual DateTimeOffset GetDateTimeOffsetValue(string key);
    public virtual TimeSpan GetTimeSpanValue(string key);
    public virtual Guid GetGuidValueFromString(string key);
    public virtual Guid GetGuidValue(string key);
    public virtual Nullable`1<Guid> GetNullableGuidValue(string key);
    public virtual bool TryGetIntValueFromString(string key, Int32& value);
    public virtual bool TryGetBooleanValueFromString(string key, Boolean& value);
    public virtual bool TryGetDoubleValueFromString(string key, Double& value);
    public virtual bool TryGetFloatValueFromString(string key, Single& value);
    public virtual bool TryGetLongValueFromString(string key, Int64& value);
    public virtual bool TryGetDateTimeValueFromString(string key, DateTime& value);
    public virtual bool TryGetDateTimeOffsetValueFromString(string key, DateTimeOffset& value);
    public virtual bool TryGetTimeSpanValueFromString(string key, TimeSpan& value);
    public virtual bool TryGetGuidValueFromString(string key, Guid& value);
    public virtual bool TryGetIntValue(string key, Int32& value);
    public virtual bool TryGetBooleanValue(string key, Boolean& value);
    public virtual bool TryGetDoubleValue(string key, Double& value);
    public virtual bool TryGetFloatValue(string key, Single& value);
    public virtual bool TryGetLongValue(string key, Int64& value);
    public virtual bool TryGetDateTimeValue(string key, DateTime& value);
    public virtual bool TryGetDateTimeOffsetValue(string key, DateTimeOffset& value);
    public virtual bool TryGetTimeSpanValue(string key, TimeSpan& value);
    public virtual bool TryGetGuidValue(string key, Guid& value);
    public virtual bool TryGetCharFromString(string key, Char& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.JobExecutionException : SchedulerException {
    [CompilerGeneratedAttribute]
private bool <UnscheduleFiringTrigger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnscheduleAllTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefireImmediately>k__BackingField;
    public bool UnscheduleFiringTrigger { get; public set; }
    public bool UnscheduleAllTriggers { get; public set; }
    public bool RefireImmediately { get; public set; }
    public JobExecutionException(Exception cause);
    public JobExecutionException(string msg);
    public JobExecutionException(string msg, Exception cause);
    public JobExecutionException(bool refireImmediately);
    public JobExecutionException(Exception cause, bool refireImmediately);
    public JobExecutionException(string msg, Exception cause, bool refireImmediately);
    protected JobExecutionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public virtual void set_UnscheduleFiringTrigger(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UnscheduleFiringTrigger();
    [CompilerGeneratedAttribute]
public virtual void set_UnscheduleAllTriggers(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UnscheduleAllTriggers();
    [CompilerGeneratedAttribute]
public bool get_RefireImmediately();
    [CompilerGeneratedAttribute]
public void set_RefireImmediately(bool value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.JobKey : Key`1<JobKey> {
    public JobKey(string name);
    public JobKey(string name, string group);
    public static JobKey Create(string name);
    public static JobKey Create(string name, string group);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.JobPersistenceException : SchedulerException {
    public JobPersistenceException(string msg);
    protected JobPersistenceException(SerializationInfo info, StreamingContext context);
    public JobPersistenceException(string msg, Exception cause);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Listener.BroadcastJobListener : object {
    private List`1<IJobListener> listeners;
    private ILog log;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<IJobListener> Listeners { get; }
    public BroadcastJobListener(string name);
    public BroadcastJobListener(string name, List`1<IJobListener> listeners);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public void AddListener(IJobListener listener);
    public bool RemoveListener(IJobListener listener);
    public bool RemoveListener(string listenerName);
    public IReadOnlyList`1<IJobListener> get_Listeners();
    public sealed virtual Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken);
    public sealed virtual Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken);
    public sealed virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Listener.BroadcastJobListener/<IterateListenersInGuard>d__15")]
private Task IterateListenersInGuard(Func`2<IJobListener, Task> action, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Listener.BroadcastSchedulerListener : object {
    private List`1<ISchedulerListener> listeners;
    private ILog log;
    public BroadcastSchedulerListener(IEnumerable`1<ISchedulerListener> listeners);
    public void AddListener(ISchedulerListener listener);
    public bool RemoveListener(ISchedulerListener listener);
    public IReadOnlyList`1<ISchedulerListener> GetListeners();
    public sealed virtual Task JobAdded(IJobDetail jobDetail, CancellationToken cancellationToken);
    public sealed virtual Task JobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task JobScheduled(ITrigger trigger, CancellationToken cancellationToken);
    public sealed virtual Task JobUnscheduled(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task TriggerFinalized(ITrigger trigger, CancellationToken cancellationToken);
    public sealed virtual Task TriggersPaused(string triggerGroup, CancellationToken cancellationToken);
    public sealed virtual Task TriggerPaused(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task TriggersResumed(string triggerGroup, CancellationToken cancellationToken);
    public sealed virtual Task SchedulingDataCleared(CancellationToken cancellationToken);
    public sealed virtual Task TriggerResumed(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task JobInterrupted(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task JobsPaused(string jobGroup, CancellationToken cancellationToken);
    public sealed virtual Task JobPaused(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task JobsResumed(string jobGroup, CancellationToken cancellationToken);
    public sealed virtual Task JobResumed(JobKey jobKey, CancellationToken cancellationToken);
    public sealed virtual Task SchedulerError(string msg, SchedulerException cause, CancellationToken cancellationToken);
    public sealed virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerStarting(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerInStandbyMode(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerShutdown(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerShuttingdown(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Listener.BroadcastSchedulerListener/<IterateListenersInGuard>d__28")]
private Task IterateListenersInGuard(Func`2<ISchedulerListener, Task> action, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Listener.BroadcastTriggerListener : object {
    private List`1<ITriggerListener> listeners;
    private ILog log;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<ITriggerListener> Listeners { get; }
    public BroadcastTriggerListener(string name);
    public BroadcastTriggerListener(string name, IReadOnlyCollection`1<ITriggerListener> listeners);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public void AddListener(ITriggerListener listener);
    public bool RemoveListener(ITriggerListener listener);
    public bool RemoveListener(string listenerName);
    public IReadOnlyList`1<ITriggerListener> get_Listeners();
    public sealed virtual Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Listener.BroadcastTriggerListener/<VetoJobExecution>d__13")]
public sealed virtual Task`1<bool> VetoJobExecution(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public sealed virtual Task TriggerMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public sealed virtual Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Listener.BroadcastTriggerListener/<IterateListenersInGuard>d__16")]
private Task IterateListenersInGuard(Func`2<ITriggerListener, Task> action, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Listener.JobChainingJobListener : JobListenerSupport {
    private Dictionary`2<JobKey, JobKey> chainLinks;
    private ILog log;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public JobChainingJobListener(string name);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public void AddJobChainLink(JobKey firstJob, JobKey secondJob);
    [AsyncStateMachineAttribute("Quartz.Listener.JobChainingJobListener/<JobWasExecuted>d__7")]
public virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Listener.JobListenerSupport : object {
    public string Name { get; }
    public abstract virtual string get_Name();
    public virtual Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Listener.SchedulerListenerSupport : object {
    public virtual Task JobScheduled(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task JobUnscheduled(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task TriggerFinalized(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task TriggersPaused(string triggerGroup, CancellationToken cancellationToken);
    public virtual Task TriggerPaused(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task TriggersResumed(string triggerGroup, CancellationToken cancellationToken);
    public virtual Task TriggerResumed(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task JobAdded(IJobDetail jobDetail, CancellationToken cancellationToken);
    public virtual Task JobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task JobInterrupted(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task JobsPaused(string jobGroup, CancellationToken cancellationToken);
    public virtual Task JobPaused(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task JobsResumed(string jobGroup, CancellationToken cancellationToken);
    public virtual Task JobResumed(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task SchedulerError(string msg, SchedulerException cause, CancellationToken cancellationToken);
    public virtual Task SchedulerInStandbyMode(CancellationToken cancellationToken);
    public virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public virtual Task SchedulerStarting(CancellationToken cancellationToken);
    public virtual Task SchedulerShutdown(CancellationToken cancellationToken);
    public virtual Task SchedulerShuttingdown(CancellationToken cancellationToken);
    public virtual Task SchedulingDataCleared(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Listener.TriggerListenerSupport : object {
    public string Name { get; }
    public abstract virtual string get_Name();
    public virtual Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task`1<bool> VetoJobExecution(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken);
    public virtual Task TriggerMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public virtual Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.Logging.DiagnosticHeaders : object {
    public static string DefaultListenerName;
    public static string SchedulerName;
    public static string SchedulerId;
    public static string FireInstanceId;
    public static string TriggerGroup;
    public static string TriggerName;
    public static string JobType;
    public static string JobGroup;
    public static string JobName;
}
[NullableContextAttribute("1")]
public interface Quartz.Logging.IJobDiagnosticData {
    public ITrigger Trigger { get; }
    public bool Recovering { get; }
    [NullableAttribute("2")]
public TriggerKey RecoveringTriggerKey { get; }
    public int RefireCount { get; }
    public JobDataMap MergedJobDataMap { get; }
    public IJobDetail JobDetail { get; }
    public DateTimeOffset FireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> ScheduledFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> PreviousFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    public string FireInstanceId { get; }
    [NullableAttribute("2")]
public object Result { get; }
    public TimeSpan JobRunTime { get; }
    public abstract virtual ITrigger get_Trigger();
    public abstract virtual bool get_Recovering();
    [NullableContextAttribute("2")]
public abstract virtual TriggerKey get_RecoveringTriggerKey();
    public abstract virtual int get_RefireCount();
    public abstract virtual JobDataMap get_MergedJobDataMap();
    public abstract virtual IJobDetail get_JobDetail();
    public abstract virtual DateTimeOffset get_FireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_ScheduledFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_PreviousFireTimeUtc();
    public abstract virtual Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    public abstract virtual string get_FireInstanceId();
    [NullableContextAttribute("2")]
public abstract virtual object get_Result();
    public abstract virtual TimeSpan get_JobRunTime();
}
internal interface Quartz.Logging.ILog {
    public abstract virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public interface Quartz.Logging.ILogProvider {
    public abstract virtual Logger GetLogger(string name);
    public abstract virtual IDisposable OpenNestedContext(string message);
    public abstract virtual IDisposable OpenMappedContext(string key, object value, bool destructure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Logging.JobDiagnosticData : object {
    [CompilerGeneratedAttribute]
private ITrigger <Trigger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recovering>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TriggerKey <RecoveringTriggerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefireCount>k__BackingField;
    [CompilerGeneratedAttribute]
private JobDataMap <MergedJobDataMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IJobDetail <JobDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ScheduledFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PreviousFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NextFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FireInstanceId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <JobRunTime>k__BackingField;
    public ITrigger Trigger { get; }
    public bool Recovering { get; }
    [NullableAttribute("2")]
public TriggerKey RecoveringTriggerKey { get; }
    public int RefireCount { get; }
    public JobDataMap MergedJobDataMap { get; }
    public IJobDetail JobDetail { get; }
    public DateTimeOffset FireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> ScheduledFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> PreviousFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    public string FireInstanceId { get; }
    [NullableAttribute("2")]
public object Result { get; }
    public TimeSpan JobRunTime { get; }
    public JobDiagnosticData(IJobExecutionContext context);
    [CompilerGeneratedAttribute]
public sealed virtual ITrigger get_Trigger();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Recovering();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual TriggerKey get_RecoveringTriggerKey();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RefireCount();
    [CompilerGeneratedAttribute]
public sealed virtual JobDataMap get_MergedJobDataMap();
    [CompilerGeneratedAttribute]
public sealed virtual IJobDetail get_JobDetail();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_FireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_ScheduledFireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_PreviousFireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FireInstanceId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_JobRunTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Logging.JobDiagnosticsWriter : object {
    private DiagnosticListener diagnosticListener;
    private static string name;
    internal Activity WriteStarted(IJobExecutionContext context, DateTimeOffset startTimeUtc);
    internal void WriteStopped(Activity activity, DateTimeOffset endTimeUtc, IJobExecutionContext context);
    public void WriteException(Activity activity, JobExecutionException exception);
}
public static class Quartz.Logging.LogContext : object {
    [NullableContextAttribute("1")]
public static void SetCurrentLogProvider(ILoggerFactory loggerFactory);
}
[ExtensionAttribute]
internal static class Quartz.Logging.LogExtensions : object {
    internal static Object[] EmptyParams;
    private static LogExtensions();
    [ExtensionAttribute]
public static bool IsDebugEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsErrorEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsFatalEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsInfoEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsWarnEnabled(ILog logger);
    [ExtensionAttribute]
public static void Debug(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Debug(ILog logger, string message);
    [ExtensionAttribute]
public static void Debug(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Debug(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Error(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Error(ILog logger, string message);
    [ExtensionAttribute]
public static void Error(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Error(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void ErrorFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void ErrorException(ILog logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Fatal(ILog logger, string message);
    [ExtensionAttribute]
public static void Fatal(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void FatalFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void FatalException(ILog logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Info(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Info(ILog logger, string message);
    [ExtensionAttribute]
public static void Info(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Info(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void InfoFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void InfoException(ILog logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Trace(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Trace(ILog logger, string message);
    [ExtensionAttribute]
public static void Trace(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Trace(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void TraceFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void TraceException(ILog logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Warn(ILog logger, string message);
    [ExtensionAttribute]
public static void Warn(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void WarnFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void WarnException(ILog logger, string message, Exception exception, Object[] args);
    private static void GuardAgainstNullLogger(ILog logger);
    [ExtensionAttribute]
private static void LogFormat(ILog logger, LogLevel logLevel, string message, Object[] args);
    [ExtensionAttribute]
private static Func`1<T> AsFunc(T value);
    [ExtensionAttribute]
private static T Return(T value);
    internal static Func`1<string> WrapLogSafeInternal(LoggerExecutionWrapper logger, Func`1<string> messageFunc);
    private static Func`1<string> WrapLogInternal(Func`1<string> messageFunc);
}
public class Quartz.Logging.Logger : MulticastDelegate {
    public Logger(object object, IntPtr method);
    public virtual bool Invoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
    public virtual IAsyncResult BeginInvoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Quartz.Logging.LoggerExecutionWrapper : object {
    internal static string FailedToGenerateLogMessage;
    private ICallSiteExtension _callsiteLogger;
    private Func`1<bool> _getIsDisabled;
    private Func`1<string> _lastExtensionMethod;
    [CompilerGeneratedAttribute]
private Logger <WrappedLogger>k__BackingField;
    internal Logger WrappedLogger { get; }
    internal LoggerExecutionWrapper(Logger logger, Func`1<bool> getIsDisabled);
    [CompilerGeneratedAttribute]
internal Logger get_WrappedLogger();
    public sealed virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public enum Quartz.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
public static class Quartz.Logging.LogProvider : object {
    private static Lazy`1<ILogProvider> ResolvedLogProvider;
    private static ILogProvider s_currentLogProvider;
    private static Action`1<ILogProvider> s_onCurrentLogProviderSet;
    [CompilerGeneratedAttribute]
private static bool <IsDisabled>k__BackingField;
    internal static List`1<Tuple`2<IsLoggerAvailable, CreateLogProvider>> LogProviderResolvers;
    public static bool IsDisabled { get; public set; }
    unknown static Action`1<ILogProvider> OnCurrentLogProviderSet {internal set; }
    internal static ILogProvider CurrentLogProvider { get; }
    private static LogProvider();
    public static void SetCurrentLogProvider(ILogProvider logProvider);
    [CompilerGeneratedAttribute]
public static bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public static void set_IsDisabled(bool value);
    internal static void set_OnCurrentLogProviderSet(Action`1<ILogProvider> value);
    internal static ILogProvider get_CurrentLogProvider();
    internal static ILog For();
    internal static ILog GetCurrentClassLogger();
    internal static ILog GetLogger(Type type, string fallbackTypeName);
    internal static ILog GetLogger(string name);
    internal static IDisposable OpenNestedContext(string message);
    internal static IDisposable OpenMappedContext(string key, object value, bool destructure);
    private static void RaiseOnCurrentLogProviderSet();
    internal static ILogProvider ResolveLogProvider();
    internal static ILogProvider ForceResolveLogProvider();
}
internal class Quartz.Logging.LogProviders.DisposableAction : object {
    private Action _onDispose;
    public DisposableAction(Action onDispose);
    public sealed virtual void Dispose();
}
public class Quartz.Logging.LogProviders.LibLogException : Exception {
    public LibLogException(string message);
    public LibLogException(string message, Exception inner);
}
internal class Quartz.Logging.LogProviders.Log4NetLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    [CompilerGeneratedAttribute]
private static bool <ProviderIsAvailableOverride>k__BackingField;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static Log4NetLogProvider();
    [CompilerGeneratedAttribute]
public static bool get_ProviderIsAvailableOverride();
    [CompilerGeneratedAttribute]
public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal static class Quartz.Logging.LogProviders.LogMessageFormatter : object {
    private static Regex Pattern;
    private static LogMessageFormatter();
    public static Func`1<string> SimulateStructuredLogging(Func`1<string> messageBuilder, Object[] formatParameters);
    private static string ReplaceFirst(string text, string search, string replace);
    public static string FormatStructuredMessage(string targetMessage, Object[] formatParameters, IEnumerable`1& patternMatches);
}
internal abstract class Quartz.Logging.LogProviders.LogProviderBase : object {
    private static IDisposable NoopDisposableInstance;
    private Lazy`1<OpenMdc> _lazyOpenMdcMethod;
    protected static string ErrorInitializingProvider;
    private Lazy`1<OpenNdc> _lazyOpenNdcMethod;
    private static LogProviderBase();
    public abstract virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, object value, bool destructure);
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    protected static Type FindType(string typeName, string assemblyName);
    protected static Type FindType(string typeName, IReadOnlyList`1<string> assemblyNames);
}
internal class Quartz.Logging.LogProviders.LoupeLogProvider : LogProviderBase {
    private WriteDelegate _logWriteDelegate;
    private static string LoupeAgentNetCoreDll;
    private static string LoupeAgentNetFrameworkDll;
    [CompilerGeneratedAttribute]
private static bool <ProviderIsAvailableOverride>k__BackingField;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static LoupeLogProvider();
    [CompilerGeneratedAttribute]
public static bool get_ProviderIsAvailableOverride();
    [CompilerGeneratedAttribute]
public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    private static Type GetTypeFromCoreOrFrameworkDll(string typeName);
    private static Type GetLogManagerType();
    private static WriteDelegate GetLogWriteDelegate();
}
internal class Quartz.Logging.LogProviders.NLogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    [CompilerGeneratedAttribute]
private static bool <ProviderIsAvailableOverride>k__BackingField;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static NLogLogProvider();
    [CompilerGeneratedAttribute]
public static bool get_ProviderIsAvailableOverride();
    [CompilerGeneratedAttribute]
public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal class Quartz.Logging.LogProviders.SerilogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static Func`4<string, object, bool, IDisposable> s_pushProperty;
    [CompilerGeneratedAttribute]
private static bool <ProviderIsAvailableOverride>k__BackingField;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static SerilogLogProvider();
    [CompilerGeneratedAttribute]
public static bool get_ProviderIsAvailableOverride();
    [CompilerGeneratedAttribute]
public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Func`4<string, object, bool, IDisposable> GetPushProperty();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetForContextMethodCall();
}
internal static class Quartz.Logging.LogProviders.TraceEventTypeValues : object {
    internal static Type Type;
    internal static int Verbose;
    internal static int Information;
    internal static int Warning;
    internal static int Error;
    internal static int Critical;
    private static TraceEventTypeValues();
}
[ExtensionAttribute]
internal static class Quartz.Logging.LogProviders.TypeExtensions : object {
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructorPortable(Type type, Type[] types);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string name, Type[] types);
}
public static class Quartz.Logging.OperationName : object {
}
public class Quartz.MisfireInstruction : ValueType {
    public static int InstructionNotSet;
    public static int SmartPolicy;
    public static int IgnoreMisfirePolicy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.ObjectAlreadyExistsException : JobPersistenceException {
    public ObjectAlreadyExistsException(string msg);
    protected ObjectAlreadyExistsException(SerializationInfo info, StreamingContext context);
    public ObjectAlreadyExistsException(IJobDetail offendingJob);
    public ObjectAlreadyExistsException(ITrigger offendingTrigger);
}
[AttributeUsageAttribute("1028")]
public class Quartz.PersistJobDataAfterExecutionAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.PropertiesHolder : object {
    private string prefix;
    private NameValueCollection properties;
    public NameValueCollection Properties { get; }
    protected PropertiesHolder(NameValueCollection properties, string prefix);
    protected PropertiesHolder(PropertiesHolder parent, string prefix);
    protected PropertiesHolder(IPropertyConfigurer parent, string prefix);
    public sealed virtual void SetProperty(string name, string value);
    public sealed virtual NameValueCollection get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.PropertiesSetter : object {
    private string prefix;
    private IPropertySetter parent;
    protected PropertiesSetter(IPropertySetter parent, string prefix);
    public sealed virtual void SetProperty(string name, string value);
}
public abstract class Quartz.ScheduleBuilder`1 : object {
    [NullableContextAttribute("1")]
public abstract virtual IMutableTrigger Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerBuilder : PropertiesHolder {
    unknown string SchedulerId {public set; }
    unknown string SchedulerName {public set; }
    unknown TimeSpan MisfireThreshold {public set; }
    unknown int MaxBatchSize {public set; }
    unknown TimeSpan BatchTriggerAcquisitionFireAheadTimeWindow {public set; }
    unknown bool CheckConfiguration {public set; }
    unknown bool InterruptJobsOnShutdown {public set; }
    unknown bool InterruptJobsOnShutdownWithWait {public set; }
    [NullableContextAttribute("2")]
protected SchedulerBuilder(NameValueCollection properties);
    public static SchedulerBuilder Create(NameValueCollection properties);
    [NullableContextAttribute("2")]
public static SchedulerBuilder Create(string id, string name);
    public SchedulerBuilder WithId(string id);
    public SchedulerBuilder WithName(string name);
    public void set_SchedulerId(string value);
    public void set_SchedulerName(string value);
    public SchedulerBuilder UseInMemoryStore(Action`1<InMemoryStoreOptions> options);
    public SchedulerBuilder UsePersistentStore(Action`1<PersistentStoreOptions> options);
    public SchedulerBuilder UsePersistentStore(Action`1<PersistentStoreOptions> options);
    public virtual SchedulerBuilder UseJobFactory();
    public virtual SchedulerBuilder UseTypeLoader();
    public StdSchedulerFactory Build();
    public Task`1<IScheduler> BuildScheduler();
    public SchedulerBuilder UseThreadPool(Action`1<ThreadPoolOptions> configure);
    public SchedulerBuilder UseZeroSizeThreadPool(Action`1<ThreadPoolOptions> configure);
    public SchedulerBuilder UseDefaultThreadPool(Action`1<ThreadPoolOptions> configure);
    public SchedulerBuilder UseDefaultThreadPool(int maxConcurrency, Action`1<ThreadPoolOptions> configure);
    public SchedulerBuilder UseDedicatedThreadPool(Action`1<ThreadPoolOptions> configure);
    public SchedulerBuilder ProxyToRemoteScheduler(string address);
    public SchedulerBuilder ProxyToRemoteScheduler(string address);
    public SchedulerBuilder WithMisfireThreshold(TimeSpan threshold);
    public void set_MisfireThreshold(TimeSpan value);
    public SchedulerBuilder WithMaxBatchSize(int batchSize);
    public void set_MaxBatchSize(int value);
    public SchedulerBuilder WithBatchTriggerAcquisitionFireAheadTimeWindow(TimeSpan timeWindow);
    public void set_BatchTriggerAcquisitionFireAheadTimeWindow(TimeSpan value);
    public void set_CheckConfiguration(bool value);
    public SchedulerBuilder WithInterruptJobsOnShutdown(bool interrupt);
    public void set_InterruptJobsOnShutdown(bool value);
    public SchedulerBuilder WithInterruptJobsOnShutdownWithWait(bool interruptWithWait);
    public void set_InterruptJobsOnShutdownWithWait(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerConfigException : SchedulerException {
    public SchedulerConfigException(string msg);
    public SchedulerConfigException(string msg, Exception cause);
    public SchedulerConfigException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerConstants : ValueType {
    public static string DefaultGroup;
    public static string DefaultRecoveryGroup;
    public static string DefaultFailOverGroup;
    public static string FailedJobOriginalTriggerName;
    public static string FailedJobOriginalTriggerGroup;
    public static string FailedJobOriginalTriggerFiretime;
    public static string FailedJobOriginalTriggerScheduledFiretime;
    internal static Nullable`1<DateTimeOffset> SchedulingSignalDateTime;
    public static string ForceJobDataMapDirty;
    private static SchedulerConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerContext : StringKeyDirtyFlagMap {
    public SchedulerContext(IDictionary`2<string, object> map);
    protected SchedulerContext(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerException : Exception {
    public SchedulerException(string msg);
    protected SchedulerException(SerializationInfo info, StreamingContext context);
    public SchedulerException(Exception cause);
    public SchedulerException(string msg, Exception cause);
    public virtual string ToString();
}
public enum Quartz.SchedulerInstruction : Enum {
    public int value__;
    public static SchedulerInstruction NoInstruction;
    public static SchedulerInstruction ReExecuteJob;
    public static SchedulerInstruction SetTriggerComplete;
    public static SchedulerInstruction DeleteTrigger;
    public static SchedulerInstruction SetAllJobTriggersComplete;
    public static SchedulerInstruction SetAllJobTriggersError;
    public static SchedulerInstruction SetTriggerError;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.SchedulerMetaData : object {
    [CompilerGeneratedAttribute]
private string <SchedulerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchedulerInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SchedulerType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SchedulerRemote>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InStandbyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <JobStoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ThreadPoolType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <RunningSince>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfJobsExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JobStoreSupportsPersistence>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JobStoreClustered>k__BackingField;
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public Type SchedulerType { get; }
    public bool SchedulerRemote { get; }
    public bool Started { get; }
    public bool InStandbyMode { get; }
    public bool Shutdown { get; }
    public Type JobStoreType { get; }
    public Type ThreadPoolType { get; }
    public int ThreadPoolSize { get; }
    public string Version { get; }
    public Nullable`1<DateTimeOffset> RunningSince { get; }
    public int NumberOfJobsExecuted { get; }
    public bool JobStoreSupportsPersistence { get; }
    public bool JobStoreClustered { get; }
    public SchedulerMetaData(string schedName, string schedInst, Type schedType, bool isRemote, bool started, bool isInStandbyMode, bool shutdown, Nullable`1<DateTimeOffset> startTime, int numberOfJobsExec, Type jsType, bool jsPersistent, bool jsClustered, Type tpType, int tpSize, string version);
    [CompilerGeneratedAttribute]
public virtual string get_SchedulerName();
    [CompilerGeneratedAttribute]
public virtual string get_SchedulerInstanceId();
    [CompilerGeneratedAttribute]
public virtual Type get_SchedulerType();
    [CompilerGeneratedAttribute]
public virtual bool get_SchedulerRemote();
    [CompilerGeneratedAttribute]
public virtual bool get_Started();
    [CompilerGeneratedAttribute]
public virtual bool get_InStandbyMode();
    [CompilerGeneratedAttribute]
public virtual bool get_Shutdown();
    [CompilerGeneratedAttribute]
public virtual Type get_JobStoreType();
    [CompilerGeneratedAttribute]
public virtual Type get_ThreadPoolType();
    [CompilerGeneratedAttribute]
public virtual int get_ThreadPoolSize();
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    public string GetSummary();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_RunningSince();
    [CompilerGeneratedAttribute]
public virtual int get_NumberOfJobsExecuted();
    [CompilerGeneratedAttribute]
public virtual bool get_JobStoreSupportsPersistence();
    [CompilerGeneratedAttribute]
public virtual bool get_JobStoreClustered();
    public virtual string ToString();
}
public class Quartz.Simpl.BinaryObjectSerializer : object {
    public sealed virtual void Initialize();
    [NullableContextAttribute("1")]
public sealed virtual Byte[] Serialize(T obj);
    [NullableContextAttribute("1")]
public sealed virtual T DeSerialize(Byte[] data);
}
public class Quartz.Simpl.DedicatedThreadPool : TaskSchedulingThreadPool {
    [NullableContextAttribute("1")]
protected virtual TaskScheduler GetDefaultScheduler();
}
public class Quartz.Simpl.DefaultThreadPool : TaskSchedulingThreadPool {
    [NullableContextAttribute("1")]
protected virtual TaskScheduler GetDefaultScheduler();
}
public abstract class Quartz.Simpl.HostNameBasedIdGenerator : object {
    protected static int IdMaxLength;
    [NullableAttribute("1")]
private ILog logger;
    public abstract virtual Task`1<string> GenerateInstanceId(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Simpl.HostNameBasedIdGenerator/<GetHostName>d__4")]
protected Task`1<string> GetHostName(int maxLength, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected virtual Task`1<IPHostEntry> GetHostAddress(CancellationToken cancellationToken);
}
public class Quartz.Simpl.HostnameInstanceIdGenerator : HostNameBasedIdGenerator {
    public virtual Task`1<string> GenerateInstanceId(CancellationToken cancellationToken);
}
public enum Quartz.Simpl.InternalTriggerState : Enum {
    public int value__;
    public static InternalTriggerState Waiting;
    public static InternalTriggerState Acquired;
    public static InternalTriggerState Executing;
    public static InternalTriggerState Complete;
    public static InternalTriggerState Paused;
    public static InternalTriggerState Blocked;
    public static InternalTriggerState PausedAndBlocked;
    public static InternalTriggerState Error;
}
[NullableContextAttribute("1")]
public interface Quartz.Simpl.IRemotableQuartzScheduler {
    public string SchedulerName { get; }
    public string SchedulerInstanceId { get; }
    public SchedulerContext SchedulerContext { get; }
    public bool InStandbyMode { get; }
    public bool IsShutdown { get; }
    public string Version { get; }
    public Type JobStoreClass { get; }
    public Type ThreadPoolClass { get; }
    public int ThreadPoolSize { get; }
    public IReadOnlyCollection`1<IJobExecutionContext> CurrentlyExecutingJobs { get; }
    public Nullable`1<DateTimeOffset> RunningSince { get; }
    public int NumJobsExecuted { get; }
    public bool SupportsPersistence { get; }
    public bool Clustered { get; }
    public abstract virtual string get_SchedulerName();
    public abstract virtual string get_SchedulerInstanceId();
    public abstract virtual SchedulerContext get_SchedulerContext();
    public abstract virtual bool get_InStandbyMode();
    public abstract virtual bool get_IsShutdown();
    public abstract virtual string get_Version();
    public abstract virtual Type get_JobStoreClass();
    public abstract virtual Type get_ThreadPoolClass();
    public abstract virtual int get_ThreadPoolSize();
    public abstract virtual void Clear();
    public abstract virtual IReadOnlyCollection`1<IJobExecutionContext> get_CurrentlyExecutingJobs();
    public abstract virtual void Start();
    public abstract virtual void StartDelayed(TimeSpan delay);
    public abstract virtual void Standby();
    public abstract virtual void Shutdown();
    public abstract virtual void Shutdown(bool waitForJobsToComplete);
    public abstract virtual Nullable`1<DateTimeOffset> get_RunningSince();
    public abstract virtual int get_NumJobsExecuted();
    public abstract virtual bool get_SupportsPersistence();
    public abstract virtual bool get_Clustered();
    public abstract virtual DateTimeOffset ScheduleJob(IJobDetail jobDetail, ITrigger trigger);
    public abstract virtual DateTimeOffset ScheduleJob(ITrigger trigger);
    public abstract virtual void AddJob(IJobDetail jobDetail, bool replace);
    public abstract virtual void AddJob(IJobDetail jobDetail, bool replace, bool storeNonDurableWhileAwaitingScheduling);
    public abstract virtual bool IsJobGroupPaused(string groupName);
    public abstract virtual bool IsTriggerGroupPaused(string groupName);
    public abstract virtual bool DeleteJob(JobKey jobKey);
    public abstract virtual bool UnscheduleJob(TriggerKey triggerKey);
    public abstract virtual Nullable`1<DateTimeOffset> RescheduleJob(TriggerKey triggerKey, ITrigger newTrigger);
    public abstract virtual void TriggerJob(JobKey jobKey, JobDataMap data);
    public abstract virtual void TriggerJob(IOperableTrigger trig);
    public abstract virtual void PauseTrigger(TriggerKey triggerKey);
    public abstract virtual void PauseTriggers(GroupMatcher`1<TriggerKey> matcher);
    public abstract virtual void PauseJob(JobKey jobKey);
    public abstract virtual void PauseJobs(GroupMatcher`1<JobKey> matcher);
    public abstract virtual void ResumeTrigger(TriggerKey triggerKey);
    public abstract virtual void ResumeTriggers(GroupMatcher`1<TriggerKey> matcher);
    public abstract virtual IReadOnlyCollection`1<string> GetPausedTriggerGroups();
    public abstract virtual void ResumeJob(JobKey jobKey);
    public abstract virtual void ResumeJobs(GroupMatcher`1<JobKey> matcher);
    public abstract virtual void PauseAll();
    public abstract virtual void ResumeAll();
    public abstract virtual IReadOnlyCollection`1<string> GetJobGroupNames();
    public abstract virtual IReadOnlyCollection`1<JobKey> GetJobKeys(GroupMatcher`1<JobKey> matcher);
    public abstract virtual IReadOnlyCollection`1<ITrigger> GetTriggersOfJob(JobKey jobKey);
    public abstract virtual IReadOnlyCollection`1<string> GetTriggerGroupNames();
    public abstract virtual IReadOnlyCollection`1<TriggerKey> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher);
    public abstract virtual IJobDetail GetJobDetail(JobKey jobKey);
    public abstract virtual ITrigger GetTrigger(TriggerKey triggerKey);
    public abstract virtual TriggerState GetTriggerState(TriggerKey triggerKey);
    public abstract virtual void ResetTriggerFromErrorState(TriggerKey triggerKey);
    public abstract virtual void AddCalendar(string calName, ICalendar calendar, bool replace, bool updateTriggers);
    public abstract virtual bool DeleteCalendar(string calName);
    public abstract virtual ICalendar GetCalendar(string calName);
    public abstract virtual IReadOnlyCollection`1<string> GetCalendarNames();
    public abstract virtual bool Interrupt(JobKey jobKey);
    public abstract virtual bool Interrupt(string fireInstanceId);
    public abstract virtual bool CheckExists(JobKey jobKey);
    public abstract virtual bool CheckExists(TriggerKey triggerKey);
    public abstract virtual bool DeleteJobs(IReadOnlyCollection`1<JobKey> jobKeys);
    public abstract virtual void ScheduleJobs(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace);
    public abstract virtual void ScheduleJob(IJobDetail jobDetail, IReadOnlyCollection`1<ITrigger> triggersForJob, bool replace);
    public abstract virtual bool UnscheduleJobs(IReadOnlyCollection`1<TriggerKey> triggerKeys);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Simpl.JobWrapper : object {
    [CompilerGeneratedAttribute]
private JobKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IJobDetail <JobDetail>k__BackingField;
    public JobKey Key { get; }
    public IJobDetail JobDetail { get; public set; }
    internal JobWrapper(IJobDetail jobDetail);
    [CompilerGeneratedAttribute]
public JobKey get_Key();
    [CompilerGeneratedAttribute]
public IJobDetail get_JobDetail();
    [CompilerGeneratedAttribute]
public void set_JobDetail(IJobDetail value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Quartz.Simpl.MicrosoftLoggingProvider : object {
    private ILoggerFactory loggerFactory;
    public MicrosoftLoggingProvider(ILoggerFactory loggerFactory);
    public sealed virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, object value, bool destructure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.PropertySettingJobFactory : SimpleJobFactory {
    private ILog log;
    [CompilerGeneratedAttribute]
private bool <ThrowIfPropertyNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WarnIfPropertyNotFound>k__BackingField;
    public bool ThrowIfPropertyNotFound { get; public set; }
    public bool WarnIfPropertyNotFound { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_ThrowIfPropertyNotFound();
    [CompilerGeneratedAttribute]
public virtual void set_ThrowIfPropertyNotFound(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_WarnIfPropertyNotFound();
    [CompilerGeneratedAttribute]
public virtual void set_WarnIfPropertyNotFound(bool value);
    public virtual IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler);
    protected virtual JobDataMap BuildJobDataMap(TriggerFiredBundle bundle, IScheduler scheduler);
    protected virtual IJob InstantiateJob(TriggerFiredBundle bundle, IScheduler scheduler);
    public virtual void SetObjectProperties(object obj, JobDataMap data);
    protected virtual void SetObjectProperty(object job, string name, object value);
    [NullableContextAttribute("2")]
protected virtual object ConvertValueIfNecessary(Type requiredType, object newValue);
    private void HandleError(string message, Exception e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.RAMJobStore : object {
    private object lockObject;
    private Dictionary`2<JobKey, JobWrapper> jobsByKey;
    private ConcurrentDictionary`2<TriggerKey, TriggerWrapper> triggersByKey;
    private Dictionary`2<string, Dictionary`2<JobKey, JobWrapper>> jobsByGroup;
    private Dictionary`2<string, Dictionary`2<TriggerKey, TriggerWrapper>> triggersByGroup;
    private SortedSet`1<TriggerWrapper> timeTriggers;
    private Dictionary`2<string, ICalendar> calendarsByName;
    private Dictionary`2<JobKey, List`1<TriggerWrapper>> triggersByJob;
    private HashSet`1<string> pausedTriggerGroups;
    private HashSet`1<string> pausedJobGroups;
    private HashSet`1<JobKey> blockedJobs;
    private TimeSpan misfireThreshold;
    private ISchedulerSignaler signaler;
    private static long ftrCtr;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [TimeSpanParseRuleAttribute("0")]
public TimeSpan MisfireThreshold { get; public set; }
    public bool SupportsPersistence { get; }
    private ILog Log { get; }
    unknown string InstanceId {public set; }
    unknown string InstanceName {public set; }
    unknown int ThreadPoolSize {public set; }
    public long EstimatedTimeToReleaseAndAcquireTrigger { get; }
    public bool Clustered { get; }
    private static RAMJobStore();
    public virtual TimeSpan get_MisfireThreshold();
    public virtual void set_MisfireThreshold(TimeSpan value);
    protected virtual string GetFiredTriggerRecordId();
    public virtual Task Initialize(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    public virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerPaused(CancellationToken cancellationToken);
    public sealed virtual Task SchedulerResumed(CancellationToken cancellationToken);
    public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual bool get_SupportsPersistence();
    public sealed virtual Task ClearAllSchedulingData(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private ILog get_Log();
    public virtual Task StoreJobAndTrigger(IJobDetail newJob, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public virtual Task StoreJob(IJobDetail newJob, bool replaceExisting, CancellationToken cancellationToken);
    private void StoreJobInternal(IJobDetail newJob, bool replaceExisting);
    public virtual Task`1<bool> RemoveJob(JobKey jobKey, CancellationToken cancellationToken);
    private bool RemoveJobInternal(JobKey jobKey);
    public sealed virtual Task`1<bool> RemoveJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RemoveTriggers(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public sealed virtual Task StoreJobsAndTriggers(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public virtual Task`1<bool> RemoveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task StoreTrigger(IOperableTrigger newTrigger, bool replaceExisting, CancellationToken cancellationToken);
    private void StoreTriggerInternal(IOperableTrigger newTrigger, bool replaceExisting);
    protected virtual Task`1<bool> RemoveTrigger(TriggerKey key, bool removeOrphanedJob);
    private bool RemoveTriggerInternal(TriggerKey key, bool removeOrphanedJob);
    public virtual Task`1<bool> ReplaceTrigger(TriggerKey triggerKey, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public virtual Task`1<IJobDetail> RetrieveJob(JobKey jobKey, CancellationToken cancellationToken);
    private IJobDetail RetrieveJobInternal(JobKey jobKey);
    public virtual Task`1<IOperableTrigger> RetrieveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CalendarExists(string calName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    private bool CheckExistsInternal(JobKey jobKey);
    public sealed virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public sealed virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public virtual Task StoreCalendar(string name, ICalendar calendar, bool replaceExisting, bool updateTriggers, CancellationToken cancellationToken);
    public virtual Task`1<bool> RemoveCalendar(string calName, CancellationToken cancellationToken);
    private bool RemoveCalendarInternal(string calName);
    public virtual Task`1<ICalendar> RetrieveCalendar(string calName, CancellationToken cancellationToken);
    public virtual Task`1<int> GetNumberOfJobs(CancellationToken cancellationToken);
    public virtual Task`1<int> GetNumberOfTriggers(CancellationToken cancellationToken);
    public virtual Task`1<int> GetNumberOfCalendars(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    private HashSet`1<JobKey> GetJobKeysInternal(GroupMatcher`1<JobKey> matcher);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    private IReadOnlyCollection`1<TriggerKey> GetTriggerKeysInternal(GroupMatcher`1<TriggerKey> matcher);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> GetTriggersForJob(JobKey jobKey, CancellationToken cancellationToken);
    private IOperableTrigger[] GetTriggersForJobInternal(JobKey jobKey);
    protected virtual IEnumerable`1<TriggerWrapper> GetTriggerWrappersForJob(JobKey jobKey);
    private List`1<TriggerWrapper> GetTriggerWrappersForJobInternal(JobKey jobKey);
    [IteratorStateMachineAttribute("Quartz.Simpl.RAMJobStore/<GetTriggerWrappersForCalendar>d__73")]
protected virtual IEnumerable`1<TriggerWrapper> GetTriggerWrappersForCalendar(string calName);
    public virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    private void PauseTriggerInternal(TriggerKey triggerKey);
    public virtual Task`1<IReadOnlyCollection`1<string>> PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    private IReadOnlyCollection`1<string> PauseTriggersInternal(GroupMatcher`1<TriggerKey> matcher);
    public virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    private void ResumeTriggerInternal(TriggerKey triggerKey);
    public virtual Task`1<IReadOnlyCollection`1<string>> ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    private IReadOnlyCollection`1<string> ResumeTriggersInternal(GroupMatcher`1<TriggerKey> matcher);
    public virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<string>> ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public virtual Task PauseAll(CancellationToken cancellationToken);
    public virtual Task ResumeAll(CancellationToken cancellationToken);
    protected virtual bool ApplyMisfire(TriggerWrapper tw);
    public virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> AcquireNextTriggers(DateTimeOffset noLaterThan, int maxCount, TimeSpan timeWindow, CancellationToken cancellationToken);
    public virtual Task ReleaseAcquiredTrigger(IOperableTrigger trigger, CancellationToken cancellationToken);
    public virtual Task`1<IReadOnlyCollection`1<TriggerFiredResult>> TriggersFired(IReadOnlyCollection`1<IOperableTrigger> triggers, CancellationToken cancellationToken);
    public virtual Task TriggeredJobComplete(IOperableTrigger trigger, IJobDetail jobDetail, SchedulerInstruction triggerInstCode, CancellationToken cancellationToken);
    public virtual void set_InstanceId(string value);
    public virtual void set_InstanceName(string value);
    public sealed virtual void set_ThreadPoolSize(int value);
    public sealed virtual long get_EstimatedTimeToReleaseAndAcquireTrigger();
    public sealed virtual bool get_Clustered();
    public virtual TimeSpan GetAcquireRetryDelay(int failureCount);
    protected virtual void SetAllTriggersOfJobToState(JobKey jobKey, InternalTriggerState state);
    protected internal virtual Task`1<string> PeekTriggers();
    public virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Simpl.RemotingSchedulerProxyFactory : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    private string Address { get; public set; }
    [CompilerGeneratedAttribute]
private string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    public sealed virtual IRemotableQuartzScheduler GetProxy();
}
public class Quartz.Simpl.SimpleInstanceIdGenerator : HostNameBasedIdGenerator {
    private static int HostNameMaxLength;
    [AsyncStateMachineAttribute("Quartz.Simpl.SimpleInstanceIdGenerator/<GenerateInstanceId>d__1")]
public virtual Task`1<string> GenerateInstanceId(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.SimpleJobFactory : object {
    private ILog log;
    public virtual IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler);
    public virtual void ReturnJob(IJob job);
}
public class Quartz.Simpl.SimpleTypeLoadHelper : object {
    [NullableAttribute("1")]
private static string QuartzAssemblyTypePostfix;
    [NullableAttribute("1")]
private static string QuartzJobsAssemblyTypePostfix;
    public virtual void Initialize();
    [NullableContextAttribute("2")]
public virtual Type LoadType(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Simpl.SystemPropertyInstanceIdGenerator : object {
    [NullableAttribute("1")]
public static string SystemProperty;
    private string prepend;
    private string postpend;
    [NullableAttribute("1")]
private string systemPropertyName;
    public string Prepend { get; public set; }
    public string Postpend { get; public set; }
    [NullableAttribute("1")]
public string SystemPropertyName { get; public set; }
    public sealed virtual Task`1<string> GenerateInstanceId(CancellationToken cancellationToken);
    public string get_Prepend();
    public void set_Prepend(string value);
    public string get_Postpend();
    public void set_Postpend(string value);
    [NullableContextAttribute("1")]
public string get_SystemPropertyName();
    [NullableContextAttribute("1")]
public void set_SystemPropertyName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Quartz.Simpl.TaskSchedulingThreadPool : object {
    private ILog log;
    private CancellationTokenSource shutdownCancellation;
    private List`1<Task> runningTasks;
    private object taskListLock;
    private SemaphoreSlim concurrencySemaphore;
    private int maxConcurrency;
    protected internal static int DefaultMaxConcurrency;
    private TaskScheduler scheduler;
    private bool isInitialized;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    public TaskScheduler Scheduler { get; public set; }
    public int MaxConcurrency { get; public set; }
    public int ThreadCount { get; public set; }
    unknown string ThreadPriority {public set; }
    public int PoolSize { get; }
    public string InstanceId { get; public set; }
    public string InstanceName { get; public set; }
    public TaskSchedulingThreadPool(int maxConcurrency);
    public TaskScheduler get_Scheduler();
    public void set_Scheduler(TaskScheduler value);
    protected abstract virtual TaskScheduler GetDefaultScheduler();
    public int get_MaxConcurrency();
    public void set_MaxConcurrency(int value);
    public int get_ThreadCount();
    public void set_ThreadCount(int value);
    public void set_ThreadPriority(string value);
    public virtual int get_PoolSize();
    [CompilerGeneratedAttribute]
public virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public virtual void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_InstanceName();
    [CompilerGeneratedAttribute]
public virtual void set_InstanceName(string value);
    public virtual void Initialize();
    public sealed virtual int BlockForAvailableThreads();
    public sealed virtual bool RunInThread(Func`1<Task> runnable);
    private void RemoveTaskFromRunningList(Task completedTask);
    public sealed virtual void Shutdown(bool waitForJobsToComplete);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.TriggerWrapper : object {
    [CompilerGeneratedAttribute]
private TriggerKey <TriggerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private JobKey <JobKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperableTrigger <Trigger>k__BackingField;
    public InternalTriggerState state;
    public TriggerKey TriggerKey { get; }
    public JobKey JobKey { get; }
    public IOperableTrigger Trigger { get; }
    internal TriggerWrapper(IOperableTrigger trigger);
    [CompilerGeneratedAttribute]
public TriggerKey get_TriggerKey();
    [CompilerGeneratedAttribute]
public JobKey get_JobKey();
    [CompilerGeneratedAttribute]
public IOperableTrigger get_Trigger();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TriggerWrapper other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Quartz.Simpl.TriggerWrapperComparator : object {
    [NullableAttribute("1")]
private TriggerTimeComparator ttc;
    public sealed virtual int Compare(TriggerWrapper trig1, TriggerWrapper trig2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TriggerWrapperComparator other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Simpl.ZeroSizeThreadPool : object {
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    private ILog Log { get; }
    public int PoolSize { get; }
    public int AvailableThreadCount { get; }
    unknown string InstanceId {public set; }
    unknown string InstanceName {public set; }
    [CompilerGeneratedAttribute]
private ILog get_Log();
    public virtual int get_PoolSize();
    public int get_AvailableThreadCount();
    public virtual void set_InstanceId(string value);
    public virtual void set_InstanceName(string value);
    public virtual void Initialize();
    public virtual void Shutdown(bool waitForJobsToComplete);
    public sealed virtual bool RunInThread(Func`1<Task> runnable);
    public virtual int BlockForAvailableThreads();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.SimpleScheduleBuilder : ScheduleBuilder`1<ISimpleTrigger> {
    private TimeSpan interval;
    private int repeatCount;
    private int misfireInstruction;
    public static SimpleScheduleBuilder Create();
    public static SimpleScheduleBuilder RepeatMinutelyForever();
    public static SimpleScheduleBuilder RepeatMinutelyForever(int minutes);
    public static SimpleScheduleBuilder RepeatSecondlyForever();
    public static SimpleScheduleBuilder RepeatSecondlyForever(int seconds);
    public static SimpleScheduleBuilder RepeatHourlyForever();
    public static SimpleScheduleBuilder RepeatHourlyForever(int hours);
    public static SimpleScheduleBuilder RepeatMinutelyForTotalCount(int count);
    public static SimpleScheduleBuilder RepeatMinutelyForTotalCount(int count, int minutes);
    public static SimpleScheduleBuilder RepeatSecondlyForTotalCount(int count);
    public static SimpleScheduleBuilder RepeatSecondlyForTotalCount(int count, int seconds);
    public static SimpleScheduleBuilder RepeatHourlyForTotalCount(int count);
    public static SimpleScheduleBuilder RepeatHourlyForTotalCount(int count, int hours);
    public virtual IMutableTrigger Build();
    public SimpleScheduleBuilder WithInterval(TimeSpan timeSpan);
    public SimpleScheduleBuilder WithIntervalInSeconds(int seconds);
    public SimpleScheduleBuilder WithRepeatCount(int repeatCount);
    public SimpleScheduleBuilder RepeatForever();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionIgnoreMisfires();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionFireNow();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionNextWithExistingCount();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionNextWithRemainingCount();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionNowWithExistingCount();
    public SimpleScheduleBuilder WithMisfireHandlingInstructionNowWithRemainingCount();
    internal SimpleScheduleBuilder WithMisfireHandlingInstruction(int readMisfireInstructionFromString);
    public SimpleScheduleBuilder WithIntervalInMinutes(int minutes);
    public SimpleScheduleBuilder WithIntervalInHours(int hours);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.SimpleScheduleTriggerBuilderExtensions : object {
    [ExtensionAttribute]
public static TriggerBuilder WithSimpleSchedule(TriggerBuilder triggerBuilder);
    [ExtensionAttribute]
public static TriggerBuilder WithSimpleSchedule(TriggerBuilder triggerBuilder, Action`1<SimpleScheduleBuilder> action);
}
public interface Quartz.Spi.IInstanceIdGenerator {
    public abstract virtual Task`1<string> GenerateInstanceId(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IJobFactory {
    public abstract virtual IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler);
    public abstract virtual void ReturnJob(IJob job);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IJobStore {
    public bool SupportsPersistence { get; }
    public long EstimatedTimeToReleaseAndAcquireTrigger { get; }
    public bool Clustered { get; }
    unknown string InstanceId {public set; }
    unknown string InstanceName {public set; }
    unknown int ThreadPoolSize {public set; }
    public abstract virtual Task Initialize(ITypeLoadHelper loadHelper, ISchedulerSignaler signaler, CancellationToken cancellationToken);
    public abstract virtual Task SchedulerStarted(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerPaused(CancellationToken cancellationToken);
    public abstract virtual Task SchedulerResumed(CancellationToken cancellationToken);
    public abstract virtual Task Shutdown(CancellationToken cancellationToken);
    public abstract virtual bool get_SupportsPersistence();
    public abstract virtual long get_EstimatedTimeToReleaseAndAcquireTrigger();
    public abstract virtual bool get_Clustered();
    public abstract virtual Task StoreJobAndTrigger(IJobDetail newJob, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsJobGroupPaused(string groupName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsTriggerGroupPaused(string groupName, CancellationToken cancellationToken);
    public abstract virtual Task StoreJob(IJobDetail newJob, bool replaceExisting, CancellationToken cancellationToken);
    public abstract virtual Task StoreJobsAndTriggers(IReadOnlyDictionary`2<IJobDetail, IReadOnlyCollection`1<ITrigger>> triggersAndJobs, bool replace, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveJobs(IReadOnlyCollection`1<JobKey> jobKeys, CancellationToken cancellationToken);
    public abstract virtual Task`1<IJobDetail> RetrieveJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task StoreTrigger(IOperableTrigger newTrigger, bool replaceExisting, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveTriggers(IReadOnlyCollection`1<TriggerKey> triggerKeys, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ReplaceTrigger(TriggerKey triggerKey, IOperableTrigger newTrigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<IOperableTrigger> RetrieveTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CalendarExists(string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExists(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CheckExists(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task ClearAllSchedulingData(CancellationToken cancellationToken);
    public abstract virtual Task StoreCalendar(string name, ICalendar calendar, bool replaceExisting, bool updateTriggers, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RemoveCalendar(string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ICalendar> RetrieveCalendar(string calName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetNumberOfJobs(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetNumberOfTriggers(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetNumberOfCalendars(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<JobKey>> GetJobKeys(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerKey>> GetTriggerKeys(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetJobGroupNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetTriggerGroupNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetCalendarNames(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> GetTriggersForJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerState> GetTriggerState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task ResetTriggerFromErrorState(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task PauseTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> PauseTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task PauseJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> PauseJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task ResumeTrigger(TriggerKey triggerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> ResumeTriggers(GroupMatcher`1<TriggerKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> GetPausedTriggerGroups(CancellationToken cancellationToken);
    public abstract virtual Task ResumeJob(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<string>> ResumeJobs(GroupMatcher`1<JobKey> matcher, CancellationToken cancellationToken);
    public abstract virtual Task PauseAll(CancellationToken cancellationToken);
    public abstract virtual Task ResumeAll(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<IOperableTrigger>> AcquireNextTriggers(DateTimeOffset noLaterThan, int maxCount, TimeSpan timeWindow, CancellationToken cancellationToken);
    public abstract virtual Task ReleaseAcquiredTrigger(IOperableTrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<TriggerFiredResult>> TriggersFired(IReadOnlyCollection`1<IOperableTrigger> triggers, CancellationToken cancellationToken);
    public abstract virtual Task TriggeredJobComplete(IOperableTrigger trigger, IJobDetail jobDetail, SchedulerInstruction triggerInstCode, CancellationToken cancellationToken);
    public abstract virtual void set_InstanceId(string value);
    public abstract virtual void set_InstanceName(string value);
    public abstract virtual void set_ThreadPoolSize(int value);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IMutableTrigger {
    public TriggerKey Key { get; public set; }
    public JobKey JobKey { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public string CalendarName { get; public set; }
    public JobDataMap JobDataMap { get; public set; }
    public int Priority { get; public set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> EndTimeUtc { get; public set; }
    public int MisfireInstruction { get; public set; }
    public abstract virtual void set_Key(TriggerKey value);
    public abstract virtual TriggerKey get_Key();
    public abstract virtual void set_JobKey(JobKey value);
    public abstract virtual JobKey get_JobKey();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
    [NullableContextAttribute("2")]
public abstract virtual void set_Description(string value);
    [NullableContextAttribute("2")]
public abstract virtual void set_CalendarName(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_CalendarName();
    public abstract virtual JobDataMap get_JobDataMap();
    public abstract virtual void set_JobDataMap(JobDataMap value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual DateTimeOffset get_StartTimeUtc();
    public abstract virtual void set_StartTimeUtc(DateTimeOffset value);
    public abstract virtual Nullable`1<DateTimeOffset> get_EndTimeUtc();
    public abstract virtual void set_EndTimeUtc(Nullable`1<DateTimeOffset> value);
    public abstract virtual int get_MisfireInstruction();
    public abstract virtual void set_MisfireInstruction(int value);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IObjectSerializer {
    public abstract virtual void Initialize();
    public abstract virtual Byte[] Serialize(T obj);
    public abstract virtual T DeSerialize(Byte[] data);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IOperableTrigger {
    public string FireInstanceId { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual void Triggered(ICalendar calendar);
    [NullableContextAttribute("2")]
public abstract virtual Nullable`1<DateTimeOffset> ComputeFirstFireTimeUtc(ICalendar calendar);
    public abstract virtual SchedulerInstruction ExecutionComplete(IJobExecutionContext context, JobExecutionException result);
    [NullableContextAttribute("2")]
public abstract virtual void UpdateAfterMisfire(ICalendar cal);
    public abstract virtual void UpdateWithNewCalendar(ICalendar cal, TimeSpan misfireThreshold);
    public abstract virtual void Validate();
    public abstract virtual string get_FireInstanceId();
    public abstract virtual void set_FireInstanceId(string value);
    public abstract virtual void SetNextFireTimeUtc(Nullable`1<DateTimeOffset> value);
    public abstract virtual void SetPreviousFireTimeUtc(Nullable`1<DateTimeOffset> value);
}
[NullableContextAttribute("2")]
public interface Quartz.Spi.IRemotableSchedulerProxyFactory {
    public abstract virtual IRemotableQuartzScheduler GetProxy();
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.ISchedulerExporter {
    public abstract virtual void Bind(IRemotableQuartzScheduler scheduler);
    public abstract virtual void UnBind(IRemotableQuartzScheduler scheduler);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.ISchedulerPlugin {
    public abstract virtual Task Initialize(string pluginName, IScheduler scheduler, CancellationToken cancellationToken);
    public abstract virtual Task Start(CancellationToken cancellationToken);
    public abstract virtual Task Shutdown(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.ISchedulerRepository {
    public abstract virtual void Bind(IScheduler schedulerName);
    public abstract virtual void Remove(string schedulerName);
    public abstract virtual IScheduler Lookup(string schedulerName);
    public abstract virtual List`1<IScheduler> LookupAll();
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.ISchedulerSignaler {
    public abstract virtual Task NotifyTriggerListenersMisfired(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task NotifySchedulerListenersFinalized(ITrigger trigger, CancellationToken cancellationToken);
    public abstract virtual Task NotifySchedulerListenersJobDeleted(JobKey jobKey, CancellationToken cancellationToken);
    public abstract virtual void SignalSchedulingChange(Nullable`1<DateTimeOffset> candidateNewNextFireTimeUtc, CancellationToken cancellationToken);
    public abstract virtual Task NotifySchedulerListenersError(string message, SchedulerException jpe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Quartz.Spi.IThreadPool {
    public int PoolSize { get; }
    unknown string InstanceId {public set; }
    unknown string InstanceName {public set; }
    public abstract virtual bool RunInThread(Func`1<Task> runnable);
    public abstract virtual int BlockForAvailableThreads();
    public abstract virtual void Initialize();
    public abstract virtual void Shutdown(bool waitForJobsToComplete);
    public abstract virtual int get_PoolSize();
    public abstract virtual void set_InstanceId(string value);
    public abstract virtual void set_InstanceName(string value);
}
[NullableContextAttribute("2")]
public interface Quartz.Spi.ITypeLoadHelper {
    public abstract virtual void Initialize();
    public abstract virtual Type LoadType(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Spi.TriggerFiredBundle : object {
    [CompilerGeneratedAttribute]
private IJobDetail <JobDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperableTrigger <Trigger>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICalendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recovering>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NextFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PrevFireTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ScheduledFireTimeUtc>k__BackingField;
    public IJobDetail JobDetail { get; }
    public IOperableTrigger Trigger { get; }
    [NullableAttribute("2")]
public ICalendar Calendar { get; }
    public bool Recovering { get; }
    public DateTimeOffset FireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> NextFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> PrevFireTimeUtc { get; }
    public Nullable`1<DateTimeOffset> ScheduledFireTimeUtc { get; }
    public TriggerFiredBundle(IJobDetail job, IOperableTrigger trigger, ICalendar cal, bool jobIsRecovering, DateTimeOffset fireTimeUtc, Nullable`1<DateTimeOffset> scheduledFireTimeUtc, Nullable`1<DateTimeOffset> prevFireTimeUtc, Nullable`1<DateTimeOffset> nextFireTimeUtc);
    [CompilerGeneratedAttribute]
public virtual IJobDetail get_JobDetail();
    [CompilerGeneratedAttribute]
public virtual IOperableTrigger get_Trigger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ICalendar get_Calendar();
    [CompilerGeneratedAttribute]
public virtual bool get_Recovering();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_FireTimeUtc();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_NextFireTimeUtc();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_PrevFireTimeUtc();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_ScheduledFireTimeUtc();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Quartz.Spi.TriggerFiredResult : object {
    [CompilerGeneratedAttribute]
private TriggerFiredBundle <TriggerFiredBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public TriggerFiredBundle TriggerFiredBundle { get; }
    public Exception Exception { get; }
    public TriggerFiredResult(TriggerFiredBundle triggerFiredBundle);
    [NullableContextAttribute("1")]
public TriggerFiredResult(Exception exception);
    [CompilerGeneratedAttribute]
public TriggerFiredBundle get_TriggerFiredBundle();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.SystemTime : object {
    public static Func`1<DateTimeOffset> UtcNow;
    public static Func`1<DateTimeOffset> Now;
    private static SystemTime();
}
[ExtensionAttribute]
internal static class Quartz.TaskExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsCompletedSuccessfully(Task t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.TimeOfDay : object {
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public TimeOfDay(int hour, int minute, int second);
    public TimeOfDay(int hour, int minute);
    private void Validate();
    public static TimeOfDay HourMinuteAndSecondOfDay(int hour, int minute, int second);
    public static TimeOfDay HourAndMinuteOfDay(int hour, int minute);
    [CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
public int get_Second();
    public bool Before(TimeOfDay timeOfDay);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Nullable`1<DateTimeOffset> GetTimeOfDayForDate(Nullable`1<DateTimeOffset> dateTime);
    public DateTimeOffset GetTimeOfDayForDate(DateTimeOffset dateTime);
    public virtual string ToString();
}
public enum Quartz.TimeSpanParseRule : Enum {
    public int value__;
    public static TimeSpanParseRule Milliseconds;
    public static TimeSpanParseRule Seconds;
    public static TimeSpanParseRule Minutes;
    public static TimeSpanParseRule Hours;
}
public class Quartz.TimeSpanParseRuleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TimeSpanParseRule <Rule>k__BackingField;
    public TimeSpanParseRule Rule { get; }
    public TimeSpanParseRuleAttribute(TimeSpanParseRule rule);
    [CompilerGeneratedAttribute]
public TimeSpanParseRule get_Rule();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.TriggerBuilder : object {
    [NullableAttribute("2")]
private TriggerKey key;
    [NullableAttribute("2")]
private string description;
    private DateTimeOffset startTime;
    private Nullable`1<DateTimeOffset> endTime;
    private int priority;
    [NullableAttribute("2")]
private string calendarName;
    [NullableAttribute("2")]
private JobKey jobKey;
    private JobDataMap jobDataMap;
    [NullableAttribute("2")]
private IScheduleBuilder scheduleBuilder;
    public static TriggerBuilder Create();
    public ITrigger Build();
    public TriggerBuilder WithIdentity(string name);
    public TriggerBuilder WithIdentity(string name, string group);
    public TriggerBuilder WithIdentity(TriggerKey key);
    public TriggerBuilder WithDescription(string description);
    public TriggerBuilder WithPriority(int priority);
    public TriggerBuilder ModifiedByCalendar(string calendarName);
    public TriggerBuilder StartAt(DateTimeOffset startTimeUtc);
    public TriggerBuilder StartNow();
    public TriggerBuilder EndAt(Nullable`1<DateTimeOffset> endTimeUtc);
    public TriggerBuilder WithSchedule(IScheduleBuilder scheduleBuilder);
    public TriggerBuilder ForJob(JobKey jobKey);
    public TriggerBuilder ForJob(string jobName);
    public TriggerBuilder ForJob(string jobName, string jobGroup);
    public TriggerBuilder ForJob(IJobDetail jobDetail);
    public TriggerBuilder UsingJobData(string key, string value);
    public TriggerBuilder UsingJobData(string key, int value);
    public TriggerBuilder UsingJobData(string key, long value);
    public TriggerBuilder UsingJobData(string key, float value);
    public TriggerBuilder UsingJobData(string key, double value);
    public TriggerBuilder UsingJobData(string key, decimal value);
    public TriggerBuilder UsingJobData(string key, bool value);
    public TriggerBuilder UsingJobData(string key, Guid value);
    public TriggerBuilder UsingJobData(string key, char value);
    public TriggerBuilder UsingJobData(JobDataMap newJobDataMap);
    internal void ClearDirty();
}
public static class Quartz.TriggerConstants : object {
    public static int DefaultPriority;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.TriggerKey : Key`1<TriggerKey> {
    public TriggerKey(string name);
    public TriggerKey(string name, string group);
}
public enum Quartz.TriggerState : Enum {
    public int value__;
    public static TriggerState Normal;
    public static TriggerState Paused;
    public static TriggerState Complete;
    public static TriggerState Error;
    public static TriggerState Blocked;
    public static TriggerState None;
}
public class Quartz.TriggerTimeComparator : object {
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ITrigger trig1, ITrigger trig2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.TriggerUtils : object {
    public static IReadOnlyList`1<DateTimeOffset> ComputeFireTimes(IOperableTrigger trigg, ICalendar cal, int numTimes);
    public static Nullable`1<DateTimeOffset> ComputeEndTimeToAllowParticularNumberOfFirings(IOperableTrigger trigger, ICalendar calendar, int numberOfTimes);
    public static IReadOnlyList`1<DateTimeOffset> ComputeFireTimesBetween(IOperableTrigger trigg, ICalendar cal, DateTimeOffset from, DateTimeOffset to);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.UnableToInterruptJobException : SchedulerException {
    public UnableToInterruptJobException(string msg);
    public UnableToInterruptJobException(Exception cause);
    public UnableToInterruptJobException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.Util.DataReaderExtensions : object {
    [ExtensionAttribute]
public static string GetString(IDataReader reader, string columnName);
    [ExtensionAttribute]
public static int GetInt32(IDataReader reader, string columnName);
    [ExtensionAttribute]
public static long GetInt64(IDataReader reader, string columnName);
    [ExtensionAttribute]
public static Nullable`1<long> GetNullableInt64(IDataReader reader, string columnName);
    [ExtensionAttribute]
public static decimal GetDecimal(IDataReader reader, string columnName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Util.DBConnectionManager : object {
    private static DBConnectionManager instance;
    private ILog log;
    private ConcurrentDictionary`2<string, IDbProvider> providers;
    public static IDbConnectionManager Instance { get; }
    public DBConnectionManager(ILoggerFactory loggerFactory);
    private static DBConnectionManager();
    public static IDbConnectionManager get_Instance();
    public virtual void AddConnectionProvider(string dataSourceName, IDbProvider provider);
    public virtual DbConnection GetConnection(string dataSourceName);
    public virtual void Shutdown(string dataSourceName);
    public sealed virtual DbMetadata GetDbMetadata(string dataSourceName);
    public sealed virtual IDbProvider GetDbProvider(string dataSourceName);
}
[ExtensionAttribute]
public static class Quartz.Util.DictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TValue TryGetAndReturn(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Quartz.Util.DirtyFlagMap`2 : object {
    private bool dirty;
    private Dictionary`2<TKey, TValue> map;
    [CompilerGeneratedAttribute]
private object <SyncRoot>k__BackingField;
    public bool Dirty { get; }
    public IDictionary`2<TKey, TValue> WrappedMap { get; }
    public bool IsEmpty { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public ICollection`1<TValue> Values { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    public ICollection`1<TKey> Keys { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public DirtyFlagMap`2(int initialCapacity);
    protected DirtyFlagMap`2(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool get_Dirty();
    public virtual IDictionary`2<TKey, TValue> get_WrappedMap();
    public virtual bool get_IsEmpty();
    public virtual DirtyFlagMap`2<TKey, TValue> Clone();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public virtual TValue Get(TKey key);
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public virtual int get_Count();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public virtual ICollection`1<TValue> get_Values();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Contains(object key);
    public sealed virtual void Add(object key, object value);
    public virtual void Clear();
    public sealed virtual void Remove(object key);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual bool ContainsKey(TKey key);
    public virtual bool Remove(TKey key);
    public Enumerator<TKey, TValue> GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    public virtual void Add(TKey key, TValue value);
    public virtual void CopyTo(Array array, int index);
    public virtual ICollection`1<TKey> get_Keys();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    [CompilerGeneratedAttribute]
public virtual object get_SyncRoot();
    public virtual bool get_IsSynchronized();
    public virtual void ClearDirtyFlag();
    public virtual bool ContainsValue(TValue obj);
    public virtual Enumerator<TKey, TValue> EntrySet();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual ICollection`1<TKey> KeySet();
    public virtual object Put(TKey key, TValue val);
    public virtual void PutAll(IDictionary`2<TKey, TValue> t);
}
public class Quartz.Util.FileUtil : object {
    [NullableContextAttribute("2")]
public static string ResolveFile(string fName);
}
[NullableContextAttribute("1")]
public interface Quartz.Util.IDbConnectionManager {
    public abstract virtual void Shutdown(string dataSourceName);
    public abstract virtual DbConnection GetConnection(string dataSourceName);
    public abstract virtual DbMetadata GetDbMetadata(string dataSourceName);
    public abstract virtual IDbProvider GetDbProvider(string dataSourceName);
    public abstract virtual void AddConnectionProvider(string dataSourceName, IDbProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Util.Key`1 : object {
    public static string DefaultGroup;
    private string name;
    private string group;
    public string Name { get; public set; }
    public string Group { get; public set; }
    public Key`1(string name);
    public Key`1(string name, string group);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Group();
    public virtual void set_Group(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(Key`1<T> o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.Util.ObjectExtensions : object {
    private static ConcurrentDictionary`2<Type, string> assemblyQualifiedNameCache;
    private static Regex cleanup;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static string AssemblyQualifiedNameWithoutVersion(Type type);
    public static string GetTypeString(Type type);
    [NullableContextAttribute("2")]
public static string GenericTypeString(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.Util.ObjectUtils : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, string>, PropertyInfo> propertyResolutionCache;
    private static ObjectUtils();
    [NullableContextAttribute("2")]
public static object ConvertValueIfNecessary(Type requiredType, object newValue);
    [NullableContextAttribute("2")]
public static T InstantiateType(Type type);
    public static void SetObjectProperties(object obj, String[] propertyNames, Object[] propertyValues);
    public static void SetObjectProperties(object obj, NameValueCollection props);
    public static void SetPropertyValue(object target, string propertyName, object value);
    public static TimeSpan GetTimeSpanValueForProperty(PropertyInfo pi, object value);
    public static bool IsAttributePresent(Type typeToExamine, Type attributeType);
    public static bool IsAnyInterfaceAttributePresent(Type typeToExamine, Type attributeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Util.PropertiesParser : object {
    internal NameValueCollection props;
    public NameValueCollection UnderlyingProperties { get; }
    public PropertiesParser(NameValueCollection props);
    public virtual NameValueCollection get_UnderlyingProperties();
    [NullableContextAttribute("2")]
public virtual string GetStringProperty(string name);
    [NullableContextAttribute("2")]
public virtual string GetStringProperty(string name, string defaultValue);
    public virtual IList`1<string> GetStringArrayProperty(string name);
    public virtual IList`1<string> GetStringArrayProperty(string name, String[] defaultValue);
    public virtual bool GetBooleanProperty(string name);
    public virtual bool GetBooleanProperty(string name, bool defaultValue);
    public virtual byte GetByteProperty(string name);
    public virtual byte GetByteProperty(string name, byte defaultValue);
    public virtual char GetCharProperty(string name);
    public virtual char GetCharProperty(string name, char defaultValue);
    public virtual double GetDoubleProperty(string name);
    public virtual double GetDoubleProperty(string name, double defaultValue);
    public virtual float GetFloatProperty(string name);
    public virtual float GetFloatProperty(string name, float defaultValue);
    public virtual int GetIntProperty(string name);
    public virtual int GetIntProperty(string name, int defaultValue);
    public virtual IList`1<int> GetIntArrayProperty(string name);
    [NullableContextAttribute("2")]
public virtual IList`1<int> GetIntArrayProperty(string name, IList`1<int> defaultValue);
    public virtual long GetLongProperty(string name);
    public virtual long GetLongProperty(string name, long def);
    public virtual TimeSpan GetTimeSpanProperty(string name, TimeSpan def);
    public virtual short GetShortProperty(string name);
    public virtual short GetShortProperty(string name, short defaultValue);
    public virtual IReadOnlyList`1<string> GetPropertyGroups(string prefix);
    public virtual NameValueCollection GetPropertyGroup(string prefix);
    public virtual NameValueCollection GetPropertyGroup(string prefix, bool stripPrefix);
    public virtual NameValueCollection GetPropertyGroup(string prefix, bool stripPrefix, String[] excludedPrefixes);
    public static PropertiesParser ReadFromEmbeddedAssemblyResource(string resourceName);
    public static PropertiesParser ReadFromFileResource(string fileName);
    private static PropertiesParser ReadFromStream(Stream stream);
}
public static class Quartz.Util.QuartzEnvironment : object {
    [CompilerGeneratedAttribute]
private static bool <IsRunningOnMono>k__BackingField;
    public static bool IsRunningOnMono { get; }
    private static QuartzEnvironment();
    [CompilerGeneratedAttribute]
public static bool get_IsRunningOnMono();
    [NullableContextAttribute("1")]
public static string GetEnvironmentVariable(string key);
    public static IDictionary`2<string, string> GetEnvironmentVariables();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Quartz.Util.QueuedTaskScheduler/QueuedTaskSchedulerDebugView")]
[DebuggerDisplayAttribute("Id={Id}, ScheduledTasks = {DebugTaskCount}")]
internal class Quartz.Util.QueuedTaskScheduler : TaskScheduler {
    private CancellationTokenSource _disposeCancellation;
    private int _concurrencyLevel;
    private static ThreadLocal`1<bool> _taskProcessingThread;
    private Thread[] _threads;
    private BlockingCollection`1<Task> _blockingTaskQueue;
    private int DebugTaskCount { get; }
    public int MaximumConcurrencyLevel { get; }
    public QueuedTaskScheduler(int threadCount);
    public QueuedTaskScheduler(int threadCount, string threadName, bool useForegroundThreads, ThreadPriority threadPriority);
    private static QueuedTaskScheduler();
    private void ThreadBasedDispatchLoop();
    private int get_DebugTaskCount();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    public virtual int get_MaximumConcurrencyLevel();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
[ExtensionAttribute]
internal static class Quartz.Util.SortedSetExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static SortedSet`1<int> TailSet(SortedSet`1<int> set, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Quartz.Util.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string NullSafeTrim(string s);
    [ExtensionAttribute]
public static string TrimEmptyToNull(string s);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string s);
    [ExtensionAttribute]
public static string FormatInvariant(string s, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Quartz.Util.StringKeyDirtyFlagMap : DirtyFlagMap`2<string, object> {
    public StringKeyDirtyFlagMap(int initialCapacity);
    protected StringKeyDirtyFlagMap(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IList`1<string> GetKeys();
    public virtual void PutAll(IDictionary`2<string, object> map);
    public virtual void Put(string key, int value);
    public virtual void Put(string key, long value);
    public virtual void Put(string key, float value);
    public virtual void Put(string key, double value);
    public virtual void Put(string key, bool value);
    public virtual void Put(string key, char value);
    public virtual void Put(string key, string value);
    public virtual void Put(string key, Guid value);
    public virtual int GetInt(string key);
    public virtual long GetLong(string key);
    public virtual float GetFloat(string key);
    public virtual double GetDouble(string key);
    public virtual bool GetBoolean(string key);
    public virtual char GetChar(string key);
    public virtual string GetString(string key);
    public virtual DateTime GetDateTime(string key);
    public virtual DateTimeOffset GetDateTimeOffset(string key);
    public virtual TimeSpan GetTimeSpan(string key);
    public virtual Guid GetGuid(string key);
    public virtual Nullable`1<Guid> GetNullableGuid(string key);
    public virtual bool TryGetInt(string key, Int32& value);
    public virtual bool TryGetBoolean(string key, Boolean& value);
    public virtual bool TryGetDouble(string key, Double& value);
    public virtual bool TryGetFloat(string key, Single& value);
    public virtual bool TryGetLong(string key, Int64& value);
    public virtual bool TryGetDateTime(string key, DateTime& value);
    public virtual bool TryGetDateTimeOffset(string key, DateTimeOffset& value);
    public virtual bool TryGetTimeSpan(string key, TimeSpan& value);
    public virtual bool TryGetGuid(string key, Guid& value);
    public virtual bool TryGetNullableGuid(string key, Nullable`1& value);
    public virtual bool TryGetString(string key, String& value);
    public virtual bool TryGetChar(string key, Char& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Quartz.Util.TimeZoneUtil : object {
    private static Dictionary`2<string, string> timeZoneIdAliases;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`2<string, TimeZoneInfo> CustomResolver;
    private static TimeZoneUtil();
    public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo timeZoneInfo);
    public static TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset, TimeZoneInfo timeZoneInfo);
    public static TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfo timeZoneInfo);
    public static TimeZoneInfo FindTimeZoneById(string id);
}
public class Quartz.ValueSet : object {
    public int theValue;
    public int pos;
}
[XmlIncludeAttribute("Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType")]
[XmlIncludeAttribute("Quartz.Xml.JobSchedulingData20.cronTriggerType")]
[XmlIncludeAttribute("Quartz.Xml.JobSchedulingData20.simpleTriggerType")]
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public abstract class Quartz.Xml.JobSchedulingData20.abstractTriggerType : object {
    private string nameField;
    private string groupField;
    private string descriptionField;
    private string jobnameField;
    private string jobgroupField;
    private string priorityField;
    private string calendarnameField;
    private jobdatamapType jobdatamapField;
    private object itemField;
    private DateTime endtimeField;
    private bool endtimeFieldSpecified;
    public string name { get; public set; }
    public string group { get; public set; }
    public string description { get; public set; }
    [XmlElementAttribute("job-name")]
public string jobname { get; public set; }
    [XmlElementAttribute("job-group")]
public string jobgroup { get; public set; }
    [XmlElementAttribute]
public string priority { get; public set; }
    [XmlElementAttribute("calendar-name")]
public string calendarname { get; public set; }
    [XmlElementAttribute("job-data-map")]
public jobdatamapType jobdatamap { get; public set; }
    [XmlElementAttribute("start-time", "System.DateTime")]
[XmlElementAttribute("start-time-seconds-in-future", "System.String")]
public object Item { get; public set; }
    [XmlElementAttribute("end-time")]
public DateTime endtime { get; public set; }
    [XmlIgnoreAttribute]
public bool endtimeSpecified { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_group();
    public void set_group(string value);
    public string get_description();
    public void set_description(string value);
    public string get_jobname();
    public void set_jobname(string value);
    public string get_jobgroup();
    public void set_jobgroup(string value);
    public string get_priority();
    public void set_priority(string value);
    public string get_calendarname();
    public void set_calendarname(string value);
    public jobdatamapType get_jobdatamap();
    public void set_jobdatamap(jobdatamapType value);
    public object get_Item();
    public void set_Item(object value);
    public DateTime get_endtime();
    public void set_endtime(DateTime value);
    public bool get_endtimeSpecified();
    public void set_endtimeSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType : abstractTriggerType {
    private string misfireinstructionField;
    private string repeatintervalField;
    private string repeatintervalunitField;
    [XmlElementAttribute("misfire-instruction")]
public string misfireinstruction { get; public set; }
    [XmlElementAttribute("repeat-interval")]
public string repeatinterval { get; public set; }
    [XmlElementAttribute("repeat-interval-unit")]
public string repeatintervalunit { get; public set; }
    public string get_misfireinstruction();
    public void set_misfireinstruction(string value);
    public string get_repeatinterval();
    public void set_repeatinterval(string value);
    public string get_repeatintervalunit();
    public void set_repeatintervalunit(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.cronTriggerType : abstractTriggerType {
    private string misfireinstructionField;
    private string cronexpressionField;
    private string timezoneField;
    [XmlElementAttribute("misfire-instruction")]
public string misfireinstruction { get; public set; }
    [XmlElementAttribute("cron-expression")]
public string cronexpression { get; public set; }
    [XmlElementAttribute("time-zone")]
public string timezone { get; public set; }
    public string get_misfireinstruction();
    public void set_misfireinstruction(string value);
    public string get_cronexpression();
    public void set_cronexpression(string value);
    public string get_timezone();
    public void set_timezone(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.entryType : object {
    private string keyField;
    private string valueField;
    public string key { get; public set; }
    public string value { get; public set; }
    public string get_key();
    public void set_key(string value);
    public string get_value();
    public void set_value(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.jobdatamapType : object {
    private entryType[] entryField;
    [XmlElementAttribute("entry")]
public entryType[] entry { get; public set; }
    public entryType[] get_entry();
    public void set_entry(entryType[] value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.jobdetailType : object {
    private string nameField;
    private string groupField;
    private string descriptionField;
    private string jobtypeField;
    private bool durableField;
    private bool recoverField;
    private jobdatamapType jobdatamapField;
    public string name { get; public set; }
    public string group { get; public set; }
    public string description { get; public set; }
    [XmlElementAttribute("job-type")]
public string jobtype { get; public set; }
    public bool durable { get; public set; }
    public bool recover { get; public set; }
    [XmlElementAttribute("job-data-map")]
public jobdatamapType jobdatamap { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_group();
    public void set_group(string value);
    public string get_description();
    public void set_description(string value);
    public string get_jobtype();
    public void set_jobtype(string value);
    public bool get_durable();
    public void set_durable(bool value);
    public bool get_recover();
    public void set_recover(bool value);
    public jobdatamapType get_jobdatamap();
    public void set_jobdatamap(jobdatamapType value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.jobschedulingdataSchedule : object {
    private jobdetailType[] jobField;
    private triggerType[] triggerField;
    [XmlElementAttribute("job")]
public jobdetailType[] job { get; public set; }
    [XmlElementAttribute("trigger")]
public triggerType[] trigger { get; public set; }
    public jobdetailType[] get_job();
    public void set_job(jobdetailType[] value);
    public triggerType[] get_trigger();
    public void set_trigger(triggerType[] value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.preprocessingcommandsType : object {
    private String[] deletejobsingroupField;
    private String[] deletetriggersingroupField;
    private preprocessingcommandsTypeDeletejob[] deletejobField;
    private preprocessingcommandsTypeDeletetrigger[] deletetriggerField;
    [XmlElementAttribute("delete-jobs-in-group")]
public String[] deletejobsingroup { get; public set; }
    [XmlElementAttribute("delete-triggers-in-group")]
public String[] deletetriggersingroup { get; public set; }
    [XmlElementAttribute("delete-job")]
public preprocessingcommandsTypeDeletejob[] deletejob { get; public set; }
    [XmlElementAttribute("delete-trigger")]
public preprocessingcommandsTypeDeletetrigger[] deletetrigger { get; public set; }
    public String[] get_deletejobsingroup();
    public void set_deletejobsingroup(String[] value);
    public String[] get_deletetriggersingroup();
    public void set_deletetriggersingroup(String[] value);
    public preprocessingcommandsTypeDeletejob[] get_deletejob();
    public void set_deletejob(preprocessingcommandsTypeDeletejob[] value);
    public preprocessingcommandsTypeDeletetrigger[] get_deletetrigger();
    public void set_deletetrigger(preprocessingcommandsTypeDeletetrigger[] value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletejob : object {
    private string nameField;
    private string groupField;
    public string name { get; public set; }
    public string group { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_group();
    public void set_group(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletetrigger : object {
    private string nameField;
    private string groupField;
    public string name { get; public set; }
    public string group { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_group();
    public void set_group(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.processingdirectivesType : object {
    private bool overwriteexistingdataField;
    private bool ignoreduplicatesField;
    private bool scheduletriggerrelativetoreplacedtriggerField;
    [XmlElementAttribute("overwrite-existing-data")]
[DefaultValueAttribute("True")]
public bool overwriteexistingdata { get; public set; }
    [XmlElementAttribute("ignore-duplicates")]
[DefaultValueAttribute("False")]
public bool ignoreduplicates { get; public set; }
    [XmlElementAttribute("schedule-trigger-relative-to-replaced-trigger")]
[DefaultValueAttribute("False")]
public bool scheduletriggerrelativetoreplacedtrigger { get; public set; }
    public bool get_overwriteexistingdata();
    public void set_overwriteexistingdata(bool value);
    public bool get_ignoreduplicates();
    public void set_ignoreduplicates(bool value);
    public bool get_scheduletriggerrelativetoreplacedtrigger();
    public void set_scheduletriggerrelativetoreplacedtrigger(bool value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
[XmlRootAttribute("job-scheduling-data")]
public class Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20 : object {
    private preprocessingcommandsType[] preprocessingcommandsField;
    private processingdirectivesType[] processingdirectivesField;
    private jobschedulingdataSchedule[] scheduleField;
    private string versionField;
    [XmlElementAttribute("pre-processing-commands")]
public preprocessingcommandsType[] preprocessingcommands { get; public set; }
    [XmlElementAttribute("processing-directives")]
public processingdirectivesType[] processingdirectives { get; public set; }
    [XmlElementAttribute("schedule")]
public jobschedulingdataSchedule[] schedule { get; public set; }
    [XmlAttributeAttribute]
public string version { get; public set; }
    public preprocessingcommandsType[] get_preprocessingcommands();
    public void set_preprocessingcommands(preprocessingcommandsType[] value);
    public processingdirectivesType[] get_processingdirectives();
    public void set_processingdirectives(processingdirectivesType[] value);
    public jobschedulingdataSchedule[] get_schedule();
    public void set_schedule(jobschedulingdataSchedule[] value);
    public string get_version();
    public void set_version(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.simpleTriggerType : abstractTriggerType {
    private string misfireinstructionField;
    private string repeatcountField;
    private string repeatintervalField;
    [XmlElementAttribute("misfire-instruction")]
public string misfireinstruction { get; public set; }
    [XmlElementAttribute("repeat-count")]
public string repeatcount { get; public set; }
    [XmlElementAttribute("repeat-interval")]
public string repeatinterval { get; public set; }
    public string get_misfireinstruction();
    public void set_misfireinstruction(string value);
    public string get_repeatcount();
    public void set_repeatcount(string value);
    public string get_repeatinterval();
    public void set_repeatinterval(string value);
}
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Quartz.Xml.JobSchedulingData20.triggerType : object {
    private abstractTriggerType itemField;
    [XmlElementAttribute("calendar-interval", "Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType")]
[XmlElementAttribute("cron", "Quartz.Xml.JobSchedulingData20.cronTriggerType")]
[XmlElementAttribute("simple", "Quartz.Xml.JobSchedulingData20.simpleTriggerType")]
public abstractTriggerType Item { get; public set; }
    public abstractTriggerType get_Item();
    public void set_Item(abstractTriggerType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Xml.ValidationException : Exception {
    [CompilerGeneratedAttribute]
private ICollection`1<Exception> <ValidationExceptions>k__BackingField;
    public ICollection`1<Exception> ValidationExceptions { get; }
    public string Message { get; }
    public ValidationException(string message);
    public ValidationException(IEnumerable`1<Exception> errors);
    protected ValidationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<Exception> get_ValidationExceptions();
    public virtual string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Quartz.Xml.XMLSchedulingDataProcessor : object {
    public static string QuartzXmlFileName;
    public static string QuartzXsdResourceName;
    private List`1<string> jobGroupsToDelete;
    private List`1<string> triggerGroupsToDelete;
    private List`1<JobKey> jobsToDelete;
    private List`1<TriggerKey> triggersToDelete;
    private List`1<IJobDetail> loadedJobs;
    private List`1<ITrigger> loadedTriggers;
    private List`1<Exception> validationExceptions;
    private List`1<string> jobGroupsToNeverDelete;
    private List`1<string> triggerGroupsToNeverDelete;
    [CompilerGeneratedAttribute]
private bool <OverWriteExistingData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScheduleTriggerRelativeToReplacedTrigger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeLoadHelper <TypeLoadHelper>k__BackingField;
    public bool OverWriteExistingData { get; public set; }
    public bool IgnoreDuplicates { get; public set; }
    public bool ScheduleTriggerRelativeToReplacedTrigger { get; public set; }
    private ILog Log { get; }
    protected IReadOnlyList`1<IJobDetail> LoadedJobs { get; }
    protected IReadOnlyList`1<ITrigger> LoadedTriggers { get; }
    protected ITypeLoadHelper TypeLoadHelper { get; }
    public XMLSchedulingDataProcessor(ITypeLoadHelper typeLoadHelper);
    [CompilerGeneratedAttribute]
public virtual bool get_OverWriteExistingData();
    [CompilerGeneratedAttribute]
public virtual void set_OverWriteExistingData(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreDuplicates();
    [CompilerGeneratedAttribute]
public virtual void set_IgnoreDuplicates(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ScheduleTriggerRelativeToReplacedTrigger();
    [CompilerGeneratedAttribute]
public virtual void set_ScheduleTriggerRelativeToReplacedTrigger(bool value);
    [CompilerGeneratedAttribute]
private ILog get_Log();
    protected virtual IReadOnlyList`1<IJobDetail> get_LoadedJobs();
    protected virtual IReadOnlyList`1<ITrigger> get_LoadedTriggers();
    [CompilerGeneratedAttribute]
protected ITypeLoadHelper get_TypeLoadHelper();
    public virtual Task ProcessFile(CancellationToken cancellationToken);
    public virtual Task ProcessFile(string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ProcessFile>d__36")]
public virtual Task ProcessFile(string fileName, string systemId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ProcessStream>d__37")]
public virtual Task ProcessStream(Stream stream, string systemId, CancellationToken cancellationToken);
    protected virtual void PrepForProcessing();
    protected virtual void ProcessInternal(string xml);
    protected virtual void AddJobToSchedule(IJobDetail job);
    protected virtual void AddTriggerToSchedule(IMutableTrigger trigger);
    protected virtual int ParseSimpleTriggerRepeatCount(string repeatcount);
    protected virtual int ReadMisfireInstructionFromString(string misfireinstruction);
    [NullableContextAttribute("2")]
protected virtual IntervalUnit ParseDateIntervalTriggerIntervalUnit(string intervalUnit);
    [NullableContextAttribute("0")]
protected virtual bool TryParseEnum(string str, T& value);
    private void ValidateXml(string xml);
    private void XmlValidationCallBack(object sender, ValidationEventArgs e);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ProcessFileAndScheduleJobs>d__48")]
public Task ProcessFileAndScheduleJobs(IScheduler sched, bool overWriteExistingJobs, CancellationToken cancellationToken);
    public virtual Task ProcessFileAndScheduleJobs(IScheduler sched, CancellationToken cancellationToken);
    public virtual Task ProcessFileAndScheduleJobs(string fileName, IScheduler sched, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ProcessFileAndScheduleJobs>d__51")]
public virtual Task ProcessFileAndScheduleJobs(string fileName, string systemId, IScheduler sched, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ProcessStreamAndScheduleJobs>d__52")]
public virtual Task ProcessStreamAndScheduleJobs(Stream stream, IScheduler sched, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ScheduleJobs>d__53")]
public virtual Task ScheduleJobs(IScheduler sched, CancellationToken cancellationToken);
    private void ReportDuplicateTrigger(IMutableTrigger trigger);
    private Task DoRescheduleJob(IScheduler sched, IMutableTrigger trigger, ITrigger oldTrigger, CancellationToken cancellationToken);
    protected virtual IDictionary`2<JobKey, List`1<IMutableTrigger>> BuildTriggersByFQJobNameMap(List`1<ITrigger> triggers);
    [AsyncStateMachineAttribute("Quartz.Xml.XMLSchedulingDataProcessor/<ExecutePreProcessCommands>d__57")]
protected Task ExecutePreProcessCommands(IScheduler scheduler, CancellationToken cancellationToken);
    protected virtual void AddValidationException(XmlException e);
    protected virtual void ClearValidationExceptions();
    protected virtual void MaybeThrowValidationException();
    public void AddJobGroupToNeverDelete(string jobGroupName);
    public void AddTriggerGroupToNeverDelete(string triggerGroupName);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5212")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.AsyncMethodBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    public Type BuilderType { get; }
    public AsyncMethodBuilderAttribute(Type builderType);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
