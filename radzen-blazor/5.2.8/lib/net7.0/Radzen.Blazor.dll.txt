internal static class __Blazor.Radzen.Blazor.RadzenAccordion.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenArcGauge.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenArcGaugeScale.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenAreaSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateMarkers_1(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, IChartSeries __arg1, int __seq2, IEnumerable`1<Point`1<TItem>> __arg2, int __seq3, MarkerType __arg3, int __seq4, string __arg4, int __seq5, string __arg5, int __seq6, double __arg6, int __seq7, double __arg7);
}
internal static class __Blazor.Radzen.Blazor.RadzenBarSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenBreadCrumb.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenCategoryAxis.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenChart.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenCheckBoxList.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenColorPicker.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenColumnSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataFilter.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateRadzenSelectBar_1(RenderTreeBuilder __builder, int seq, int __seq0, EventCallback`1<TValue> __arg0, int __seq1, ButtonSize __arg1, int __seq2, object __arg2, int __seq3, TValue __arg3, int __seq4, EventCallback`1<TValue> __arg4, int __seq5, Expression`1<Func`1<TValue>> __arg5, int __seq6, RenderFragment __arg6);
    public static void CreateRadzenDataFilterItem_2(RenderTreeBuilder __builder, int seq, int __seq0, RadzenDataFilter`1<TItem> __arg0, int __seq1, CompositeFilterDescriptor __arg1, int __seq2, object __arg2);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataFilterItem.TypeInference : object {
    public static void CreateRadzenSelectBar_0(RenderTreeBuilder __builder, int seq, int __seq0, EventCallback`1<TValue> __arg0, int __seq1, ButtonSize __arg1, int __seq2, TValue __arg2, int __seq3, EventCallback`1<TValue> __arg3, int __seq4, Expression`1<Func`1<TValue>> __arg4, int __seq5, RenderFragment __arg5);
    public static void CreateRadzenDataFilterItem_1(RenderTreeBuilder __builder, int seq, int __seq0, RadzenDataFilter`1<TItem> __arg0, int __seq1, CompositeFilterDescriptor __arg1, int __seq2, RadzenDataFilterItem`1<TItem> __arg2);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGrid.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateRadzenDropDown_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, bool __arg1, int __seq2, int __arg2, int __seq3, IReadOnlyDictionary`2<string, object> __arg3, int __seq4, string __arg4, int __seq5, EventCallback`1<object> __arg5, int __seq6, FilterCaseSensitivity __arg6, int __seq7, bool __arg7, int __seq8, bool __arg8, int __seq9, string __arg9, int __seq10, IEnumerable __arg10, int __seq11, string __arg11, int __seq12, object __arg12, int __seq13, EventCallback`1<TValue> __arg13, int __seq14, Expression`1<Func`1<TValue>> __arg14);
    public static void CreateRadzenDataGridHeaderCell_2(RenderTreeBuilder __builder, int seq, int __seq0, int __arg0, int __seq1, RadzenDataGrid`1<TItem> __arg1, int __seq2, RadzenDataGridColumn`1<TItem> __arg2, int __seq3, int __arg3, int __seq4, string __arg4, int __seq5, IReadOnlyDictionary`2<string, object> __arg5);
    public static void CreateRadzenDataGridFilterMenu_3(RenderTreeBuilder __builder, int seq, int __seq0, RadzenDataGrid`1<TItem> __arg0, int __seq1, RadzenDataGridColumn`1<TItem> __arg1);
    public static void CreateRadzenDataGridFilterMenu_4(RenderTreeBuilder __builder, int seq, int __seq0, RadzenDataGrid`1<TItem> __arg0, int __seq1, RadzenDataGridColumn`1<TItem> __arg1);
    public static void CreateRadzenDataGridFilterMenu_5(RenderTreeBuilder __builder, int seq, int __seq0, RadzenDataGrid`1<TItem> __arg0, int __seq1, RadzenDataGridColumn`1<TItem> __arg1);
    public static void CreateRadzenDataGridFooterCell_6(RenderTreeBuilder __builder, int seq, int __seq0, int __arg0, int __seq1, RadzenDataGrid`1<TItem> __arg1, int __seq2, RadzenDataGridColumn`1<TItem> __arg2, int __seq3, string __arg3, int __seq4, IReadOnlyDictionary`2<string, object> __arg4);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridColumn.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridFooterCell.TypeInference : object {
    public static void CreateRadzenDataGridFooterCell_0(RenderTreeBuilder __builder, int seq, int __seq0, int __arg0, int __seq1, RadzenDataGrid`1<TItem> __arg1, int __seq2, RadzenDataGridColumn`1<TItem> __arg2, int __seq3, string __arg3, int __seq4, string __arg4, int __seq5, IReadOnlyDictionary`2<string, object> __arg5);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridGroupFooterCell.TypeInference : object {
    public static void CreateRadzenDataGridGroupFooterCell_0(RenderTreeBuilder __builder, int seq, int __seq0, Group __arg0, int __seq1, int __arg1, int __seq2, RadzenDataGrid`1<TItem> __arg2, int __seq3, RadzenDataGridColumn`1<TItem> __arg3, int __seq4, string __arg4, int __seq5, string __arg5, int __seq6, IReadOnlyDictionary`2<string, object> __arg6);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridGroupFooterRow.TypeInference : object {
    public static void CreateRadzenDataGridGroupFooterCell_0(RenderTreeBuilder __builder, int seq, int __seq0, Group __arg0, int __seq1, int __arg1, int __seq2, RadzenDataGrid`1<TItem> __arg2, int __seq3, RadzenDataGridColumn`1<TItem> __arg3, int __seq4, string __arg4);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridHeaderCell.TypeInference : object {
    public static void CreateRadzenDataGridHeaderCell_0(RenderTreeBuilder __builder, int seq, int __seq0, int __arg0, int __seq1, RadzenDataGrid`1<TItem> __arg1, int __seq2, RadzenDataGridColumn`1<TItem> __arg2, int __seq3, string __arg3, int __seq4, int __arg4, int __seq5, string __arg5);
}
internal static class __Blazor.Radzen.Blazor.RadzenDataGridRow.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_2(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_3(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDayView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDonutSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDropZone.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenDropZoneContainer.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenFormField.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenGoogleMap.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenGridRow.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenHtmlEditor.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenHtmlEditorFontName.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenHtmlEditorImage.TypeInference : object {
    public static void CreateRadzenFileInput_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, string __arg1, int __seq2, object __arg2, int __seq3, TValue __arg3, int __seq4, EventCallback`1<TValue> __arg4, int __seq5, Expression`1<Func`1<TValue>> __arg5);
}
internal static class __Blazor.Radzen.Blazor.RadzenHtmlEditorLink.TypeInference : object {
    public static void CreateRadzenCheckBox_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, EventCallback`1<TValue> __arg1, int __seq2, Expression`1<Func`1<TValue>> __arg2);
}
internal static class __Blazor.Radzen.Blazor.RadzenLayout.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenLineSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateMarkers_1(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, IChartSeries __arg1, int __seq2, IEnumerable`1<Point`1<TItem>> __arg2, int __seq3, MarkerType __arg3, int __seq4, string __arg4, int __seq5, string __arg5, int __seq6, double __arg6, int __seq7, double __arg7);
}
internal static class __Blazor.Radzen.Blazor.RadzenMenu.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenMenuItem.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenMonthView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenPanelMenu.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenPanelMenuItem.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenPickList.TypeInference : object {
    public static void CreateRadzenListBox_0(RenderTreeBuilder __builder, int seq, int __seq0, IEnumerable __arg0, int __seq1, bool __arg1, int __seq2, bool __arg2, int __seq3, FilterCaseSensitivity __arg3, int __seq4, string __arg4, int __seq5, bool __arg5, int __seq6, RenderFragment`1<object> __arg6, int __seq7, bool __arg7, int __seq8, object __arg8, int __seq9, EventCallback`1<TValue> __arg9, int __seq10, Expression`1<Func`1<TValue>> __arg10, int __seq11, string __arg11, int __seq12, EventCallback`1<string> __arg12);
    public static void CreateRadzenListBox_1(RenderTreeBuilder __builder, int seq, int __seq0, IEnumerable __arg0, int __seq1, bool __arg1, int __seq2, bool __arg2, int __seq3, FilterCaseSensitivity __arg3, int __seq4, string __arg4, int __seq5, bool __arg5, int __seq6, RenderFragment`1<object> __arg6, int __seq7, bool __arg7, int __seq8, object __arg8, int __seq9, EventCallback`1<TValue> __arg9, int __seq10, Expression`1<Func`1<TValue>> __arg10, int __seq11, string __arg11, int __seq12, EventCallback`1<string> __arg12);
}
internal static class __Blazor.Radzen.Blazor.RadzenPieSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenProfileMenu.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenRadialGauge.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenRadialGaugeScale.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenRadioButtonList.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenScheduler.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenSelectBar.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenSplitButton.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenSplitter.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenSSRSViewer.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenStackedAreaSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateMarkers_1(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, IChartSeries __arg1, int __seq2, IEnumerable`1<Point`1<TItem>> __arg2, int __seq3, MarkerType __arg3, int __seq4, string __arg4, int __seq5, string __arg5, int __seq6, double __arg6, int __seq7, double __arg7);
}
internal static class __Blazor.Radzen.Blazor.RadzenStackedBarSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenStackedColumnSeries.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenSteps.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenTabs.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenTree.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenTreeItem.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenUpload.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenValueAxis.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenWeekView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenYearPlannerView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenYearTimelineView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.RadzenYearView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.Rendering.EditorDropDown.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.Rendering.MonthView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.Rendering.YearPlannerView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.Rendering.YearTimelineView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.Radzen.Blazor.Rendering.YearView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Radzen.AlertOptions : DialogOptions {
    [CompilerGeneratedAttribute]
private string <OkButtonText>k__BackingField;
    public string OkButtonText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OkButtonText();
    [CompilerGeneratedAttribute]
public void set_OkButtonText(string value);
}
public enum Radzen.AlertSize : Enum {
    public int value__;
    public static AlertSize ExtraSmall;
    public static AlertSize Small;
    public static AlertSize Medium;
    public static AlertSize Large;
}
public enum Radzen.AlertStyle : Enum {
    public int value__;
    public static AlertStyle Primary;
    public static AlertStyle Secondary;
    public static AlertStyle Light;
    public static AlertStyle Base;
    public static AlertStyle Dark;
    public static AlertStyle Success;
    public static AlertStyle Danger;
    public static AlertStyle Warning;
    public static AlertStyle Info;
}
public enum Radzen.AlignItems : Enum {
    public int value__;
    public static AlignItems Normal;
    public static AlignItems Center;
    public static AlignItems Start;
    public static AlignItems End;
    public static AlignItems Stretch;
}
public enum Radzen.BadgeStyle : Enum {
    public int value__;
    public static BadgeStyle Primary;
    public static BadgeStyle Secondary;
    public static BadgeStyle Light;
    public static BadgeStyle Base;
    public static BadgeStyle Dark;
    public static BadgeStyle Success;
    public static BadgeStyle Danger;
    public static BadgeStyle Warning;
    public static BadgeStyle Info;
}
public class Radzen.Blazor._Imports : ComponentBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.AppointmentData : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public string Text { get; public set; }
    public object Data { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Radzen.Blazor.AutoCompleteType : Enum {
    public int value__;
    public static AutoCompleteType Off;
    public static AutoCompleteType On;
    public static AutoCompleteType Name;
    public static AutoCompleteType HonorificPrefix;
    public static AutoCompleteType GivenName;
    public static AutoCompleteType AdditionalName;
    public static AutoCompleteType FamilyName;
    public static AutoCompleteType HonorificSuffix;
    public static AutoCompleteType Nickname;
    public static AutoCompleteType Email;
    public static AutoCompleteType Username;
    public static AutoCompleteType NewPassword;
    public static AutoCompleteType CurrentPassword;
    public static AutoCompleteType OneTimeCode;
    public static AutoCompleteType OrganizationTitle;
    public static AutoCompleteType Organization;
    public static AutoCompleteType StreetAddress;
    public static AutoCompleteType AddressLine1;
    public static AutoCompleteType AddressLine2;
    public static AutoCompleteType AddressLine3;
    public static AutoCompleteType AddressLevel1;
    public static AutoCompleteType AddressLevel2;
    public static AutoCompleteType AddressLevel3;
    public static AutoCompleteType AddressLevel4;
    public static AutoCompleteType Country;
    public static AutoCompleteType CountryName;
    public static AutoCompleteType PostalCode;
    public static AutoCompleteType CcName;
    public static AutoCompleteType CcGivenName;
    public static AutoCompleteType CcAdditionalName;
    public static AutoCompleteType CcFamilyName;
    public static AutoCompleteType CcNumber;
    public static AutoCompleteType CcExp;
    public static AutoCompleteType CcExpMonth;
    public static AutoCompleteType CcExpYear;
    public static AutoCompleteType CcCsc;
    public static AutoCompleteType CcType;
    public static AutoCompleteType TransactionCurrency;
    public static AutoCompleteType TransactionAmount;
    public static AutoCompleteType Language;
    public static AutoCompleteType Bday;
    public static AutoCompleteType BdayDay;
    public static AutoCompleteType BdayMonth;
    public static AutoCompleteType BdayYear;
    public static AutoCompleteType Sex;
    public static AutoCompleteType Tel;
    public static AutoCompleteType TelCountryCode;
    public static AutoCompleteType TelNational;
    public static AutoCompleteType TelAreaCode;
    public static AutoCompleteType TelLocal;
    public static AutoCompleteType TelExtension;
    public static AutoCompleteType Impp;
    public static AutoCompleteType Url;
    public static AutoCompleteType Photo;
    public static AutoCompleteType State;
    public static AutoCompleteType Province;
    public static AutoCompleteType ZipCode;
    public static AutoCompleteType FirstName;
    public static AutoCompleteType MiddleName;
    public static AutoCompleteType LastName;
}
public abstract class Radzen.Blazor.AxisBase : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenGridLines <GridLines>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenAxisTitle <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTicks <Ticks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TickDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public Func`2<object, string> Formatter { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    public RadzenGridLines GridLines { get; public set; }
    public RadzenAxisTitle Title { get; public set; }
    public RadzenTicks Ticks { get; public set; }
    [ParameterAttribute]
public int TickDistance { get; public set; }
    [ParameterAttribute]
public object Min { get; public set; }
    [ParameterAttribute]
public object Max { get; public set; }
    [ParameterAttribute]
public object Step { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    internal double Size { get; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public sealed virtual RadzenGridLines get_GridLines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GridLines(RadzenGridLines value);
    [CompilerGeneratedAttribute]
public RadzenAxisTitle get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(RadzenAxisTitle value);
    [CompilerGeneratedAttribute]
public RadzenTicks get_Ticks();
    [CompilerGeneratedAttribute]
public void set_Ticks(RadzenTicks value);
    [CompilerGeneratedAttribute]
public int get_TickDistance();
    [CompilerGeneratedAttribute]
public void set_TickDistance(int value);
    [CompilerGeneratedAttribute]
public object get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(object value);
    [CompilerGeneratedAttribute]
public object get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(object value);
    [CompilerGeneratedAttribute]
public object get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(object value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
    internal string Format(ScaleBase scale, double idx);
    internal string Format(ScaleBase scale, object value);
    internal abstract virtual double get_Size();
}
public abstract class Radzen.Blazor.CartesianSeries`1 : RadzenChartComponentBase {
    private Func`2<TItem, double> categoryPropertyCache;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <TooltipTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IChartSeriesOverlay> <Overlays>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RenderingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenMarkers <Markers>k__BackingField;
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> TooltipTemplate { get; public set; }
    public IList`1<IChartSeriesOverlay> Overlays { get; }
    public CoordinateSystem CoordinateSystem { get; }
    [ParameterAttribute]
public string CategoryProperty { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public bool Hidden { get; public set; }
    private bool IsVisible { get; private set; }
    private bool Radzen.Blazor.IChartSeries.Visible { get; }
    public bool ShowInLegend { get; }
    [ParameterAttribute]
public string ValueProperty { get; public set; }
    [ParameterAttribute]
public int RenderingOrder { get; public set; }
    internal Func`2<TItem, double> Value { get; }
    [ParameterAttribute]
public IEnumerable`1<TItem> Data { get; public set; }
    protected IList`1<TItem> Items { get; protected set; }
    public RadzenMarkers Markers { get; public set; }
    public MarkerType MarkerType { get; }
    public string Color { get; }
    public double MarkerSize { get; }
    internal Func`2<TItem, double> Category(ScaleBase scale);
    protected Func`2<TItem, double> ComposeCategory(ScaleBase scale);
    protected Func`2<TItem, double> ComposeValue(ScaleBase scale);
    protected bool IsDate(string propertyName);
    protected bool IsNumeric(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_TooltipTemplate();
    [CompilerGeneratedAttribute]
public void set_TooltipTemplate(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IChartSeriesOverlay> get_Overlays();
    public virtual CoordinateSystem get_CoordinateSystem();
    [CompilerGeneratedAttribute]
public string get_CategoryProperty();
    [CompilerGeneratedAttribute]
public void set_CategoryProperty(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsVisible();
    [CompilerGeneratedAttribute]
private void set_IsVisible(bool value);
    private sealed virtual override bool Radzen.Blazor.IChartSeries.get_Visible();
    public sealed virtual bool get_ShowInLegend();
    [CompilerGeneratedAttribute]
public string get_ValueProperty();
    [CompilerGeneratedAttribute]
public void set_ValueProperty(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RenderingOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderingOrder(int value);
    internal Func`2<TItem, double> get_Value();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<TItem> value);
    [CompilerGeneratedAttribute]
protected IList`1<TItem> get_Items();
    [CompilerGeneratedAttribute]
protected void set_Items(IList`1<TItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual RadzenMarkers get_Markers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Markers(RadzenMarkers value);
    public virtual MarkerType get_MarkerType();
    protected virtual IList`1<object> GetCategories();
    public virtual ScaleBase TransformCategoryScale(ScaleBase scale);
    public virtual ScaleBase TransformValueScale(ScaleBase scale);
    public abstract virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    public sealed virtual RenderFragment RenderOverlays(ScaleBase categoryScale, ScaleBase valueScale);
    public abstract virtual string get_Color();
    [AsyncStateMachineAttribute("Radzen.Blazor.CartesianSeries`1/<SetParametersAsync>d__74")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void Initialize();
    public virtual bool Contains(double x, double y, double tolerance);
    public virtual double MeasureLegend();
    protected bool InsidePolygon(Point point, Point[] polygon);
    public virtual RenderFragment RenderTooltip(object data, double marginLeft, double marginTop, double chartHeight);
    private RenderFragment RenderSharedTooltipItems(object category);
    public virtual RenderFragment RenderSharedTooltipItem(object category);
    protected virtual string TooltipStyle(TItem item);
    protected virtual string TooltipClass(TItem item);
    public virtual RenderFragment RenderLegendItem();
    protected virtual RenderFragment RenderLegendItem(bool clickable);
    public sealed virtual double get_MarkerSize();
    public sealed virtual double GetMedian();
    public sealed virtual double GetMean();
    public sealed virtual double GetMode();
    public sealed virtual ValueTuple`2<double, double> GetTrend();
    [AsyncStateMachineAttribute("Radzen.Blazor.CartesianSeries`1/<OnLegendItemClick>d__92")]
private Task OnLegendItemClick();
    public sealed virtual string GetTitle();
    protected virtual string TooltipLabel(TItem item);
    protected virtual string TooltipTitle(TItem item);
    protected virtual string TooltipValue(TItem item);
    internal virtual double TooltipX(TItem item);
    internal virtual double TooltipY(TItem item);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    protected string PickColor(int index, IEnumerable`1<string> colors, string defaultValue, IList`1<SeriesColorRange> colorRange, double value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.CartesianSeries`1/<InvokeClick>d__103")]
public sealed virtual Task InvokeClick(EventCallback`1<SeriesClickEventArgs> handler, object data);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private double <GetMedian>b__88_0(TItem e);
    [CompilerGeneratedAttribute]
private double <GetMean>b__89_0(TItem e);
    [CompilerGeneratedAttribute]
private double <GetMode>b__90_0(TItem e);
    [CompilerGeneratedAttribute]
private double <GetTrend>b__91_0(TItem e);
    [CompilerGeneratedAttribute]
private double <GetTrend>b__91_1(TItem e);
    [CompilerGeneratedAttribute]
private double <GetTrend>b__91_2(TItem e);
    [CompilerGeneratedAttribute]
private double <GetTrend>b__91_3(TItem e);
}
public enum Radzen.Blazor.ColorScheme : Enum {
    public int value__;
    public static ColorScheme Pastel;
    public static ColorScheme Palette;
    public static ColorScheme Divergent;
    public static ColorScheme Monochrome;
}
public enum Radzen.Blazor.CompareOperator : Enum {
    public int value__;
    public static CompareOperator Equal;
    public static CompareOperator GreaterThan;
    public static CompareOperator GreaterThanEqual;
    public static CompareOperator LessThan;
    public static CompareOperator LessThanEqual;
    public static CompareOperator NotEqual;
}
internal class Radzen.Blazor.DateScale : LinearScale {
    public virtual ValueTuple`3<double, double, double> Ticks(int distance);
    public virtual object Value(double value);
    public virtual void Resize(object min, object max);
    private DateTime FromTicks(double value);
    public virtual string FormatTick(string format, object value);
    public virtual void Fit(int distance);
}
internal class Radzen.Blazor.DynamicLinqCustomTypeProvider : object {
    private static HashSet`1<Type> empty;
    public static ParsingConfig ParsingConfig;
    private static DynamicLinqCustomTypeProvider();
    public sealed virtual HashSet`1<Type> GetCustomTypes();
    public sealed virtual Dictionary`2<Type, List`1<MethodInfo>> GetExtensionMethods();
    public sealed virtual Type ResolveType(string typeName);
    public sealed virtual Type ResolveTypeBySimpleName(string simpleTypeName);
}
[ExtensionAttribute]
public static class Radzen.Blazor.EnumExtensions : object {
    [ExtensionAttribute]
public static string GetDisplayDescription(Enum enumValue, Func`2<string, string> translationFunction);
    public static IEnumerable`1<object> EnumAsKeyValuePair(Type enumType, Func`2<string, string> translationFunction);
    [ExtensionAttribute]
public static string GetAutoCompleteValue(AutoCompleteType typeValue);
}
public class Radzen.Blazor.FormFieldContext : object {
    [CompilerGeneratedAttribute]
private Action`1<bool> <DisabledChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFloatingLabel>k__BackingField;
    public Action`1<bool> DisabledChanged { get; public set; }
    public bool AllowFloatingLabel { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<bool> get_DisabledChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisabledChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowFloatingLabel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowFloatingLabel(bool value);
}
public abstract class Radzen.Blazor.GaugeBase : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    private bool widthAndHeightAreSet;
    private bool firstRender;
    private bool visibleChanged;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    public Nullable`1<double> Height { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<double> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.GaugeBase/<OnAfterRenderAsync>d__14")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnInitialized();
    [JSInvokableAttribute]
public void Resize(double width, double height);
    private void Initialize();
    [AsyncStateMachineAttribute("Radzen.Blazor.GaugeBase/<SetParametersAsync>d__19")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public virtual void Dispose();
    public void Reload();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public enum Radzen.Blazor.GaugeTickPosition : Enum {
    public int value__;
    public static GaugeTickPosition Inside;
    public static GaugeTickPosition Outside;
    public static GaugeTickPosition None;
}
public interface Radzen.Blazor.IChartAxis {
    public RadzenGridLines GridLines { get; public set; }
    public abstract virtual RadzenGridLines get_GridLines();
    public abstract virtual void set_GridLines(RadzenGridLines value);
}
public interface Radzen.Blazor.IChartBarSeries {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface Radzen.Blazor.IChartColumnSeries {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface Radzen.Blazor.IChartDonutSeries {
    public abstract virtual RenderFragment RenderTitle(double x, double y);
}
public interface Radzen.Blazor.IChartSeries {
    public RadzenMarkers Markers { get; public set; }
    public MarkerType MarkerType { get; }
    public double MarkerSize { get; }
    public string Color { get; }
    public bool Visible { get; }
    public bool ShowInLegend { get; }
    public int RenderingOrder { get; public set; }
    public CoordinateSystem CoordinateSystem { get; }
    public IList`1<IChartSeriesOverlay> Overlays { get; }
    public string Title { get; public set; }
    public abstract virtual ScaleBase TransformCategoryScale(ScaleBase scale);
    public abstract virtual ScaleBase TransformValueScale(ScaleBase scale);
    public abstract virtual RadzenMarkers get_Markers();
    public abstract virtual void set_Markers(RadzenMarkers value);
    public abstract virtual MarkerType get_MarkerType();
    public abstract virtual double get_MarkerSize();
    public abstract virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    public abstract virtual RenderFragment RenderOverlays(ScaleBase categoryScale, ScaleBase valueScale);
    public abstract virtual RenderFragment RenderTooltip(object data, double marginLeft, double marginTop, double chartHeight);
    public abstract virtual RenderFragment RenderSharedTooltipItem(object category);
    public abstract virtual RenderFragment RenderLegendItem();
    public abstract virtual string get_Color();
    public abstract virtual bool get_Visible();
    public abstract virtual bool get_ShowInLegend();
    public abstract virtual int get_RenderingOrder();
    public abstract virtual void set_RenderingOrder(int value);
    public abstract virtual bool Contains(double x, double y, double tolerance);
    public abstract virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    public abstract virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    public abstract virtual double GetMedian();
    public abstract virtual double GetMean();
    public abstract virtual double GetMode();
    public abstract virtual ValueTuple`2<double, double> GetTrend();
    public abstract virtual CoordinateSystem get_CoordinateSystem();
    public abstract virtual IList`1<IChartSeriesOverlay> get_Overlays();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string GetTitle();
    public abstract virtual double MeasureLegend();
    public abstract virtual Task InvokeClick(EventCallback`1<SeriesClickEventArgs> handler, object data);
}
public interface Radzen.Blazor.IChartSeriesOverlay {
    public bool Visible { get; }
    public abstract virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    public abstract virtual bool get_Visible();
    public abstract virtual bool Contains(double mouseX, double mouseY, int tolerance);
    public abstract virtual RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop);
}
public interface Radzen.Blazor.IChartStackedAreaSeries {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<double> ValuesForCategory(double category);
    public abstract virtual double ValueAt(int index);
}
public interface Radzen.Blazor.IChartStackedBarSeries {
    public abstract virtual double ValueAt(int index);
    public abstract virtual IEnumerable`1<double> ValuesForCategory(double category);
    public abstract virtual IEnumerable`1<object> ItemsForCategory(double category);
}
public interface Radzen.Blazor.IChartStackedColumnSeries {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<double> ValuesForCategory(double category);
    public abstract virtual IEnumerable`1<object> ItemsForCategory(double category);
    public abstract virtual double ValueAt(int index);
}
public interface Radzen.Blazor.IFormFieldContext {
    public Action`1<bool> DisabledChanged { get; public set; }
    public bool AllowFloatingLabel { get; public set; }
    public abstract virtual Action`1<bool> get_DisabledChanged();
    public abstract virtual void set_DisabledChanged(Action`1<bool> value);
    public abstract virtual bool get_AllowFloatingLabel();
    public abstract virtual void set_AllowFloatingLabel(bool value);
}
public enum Radzen.Blazor.Interpolation : Enum {
    public int value__;
    public static Interpolation Line;
    public static Interpolation Spline;
    public static Interpolation Step;
}
public interface Radzen.Blazor.IScheduler {
    public EventCallback`1<SchedulerAppointmentMoveEventArgs> AppointmentMove { get; public set; }
    public DateTime CurrentDate { get; public set; }
    public double Height { get; }
    public CultureInfo Culture { get; public set; }
    public abstract virtual EventCallback`1<SchedulerAppointmentMoveEventArgs> get_AppointmentMove();
    public abstract virtual void set_AppointmentMove(EventCallback`1<SchedulerAppointmentMoveEventArgs> value);
    public abstract virtual IEnumerable`1<AppointmentData> GetAppointmentsInRange(DateTime start, DateTime end);
    public abstract virtual bool IsAppointmentInRange(AppointmentData item, DateTime start, DateTime end);
    public abstract virtual Task AddView(ISchedulerView view);
    public abstract virtual void RemoveView(ISchedulerView view);
    public abstract virtual bool IsSelected(ISchedulerView view);
    public abstract virtual DateTime get_CurrentDate();
    public abstract virtual void set_CurrentDate(DateTime value);
    public abstract virtual Task SelectAppointment(AppointmentData data);
    public abstract virtual Task SelectSlot(DateTime start, DateTime end);
    public abstract virtual Task`1<bool> SelectSlot(DateTime start, DateTime end, IEnumerable`1<AppointmentData> appointments);
    public abstract virtual Task SelectMonth(DateTime monthStart, IEnumerable`1<AppointmentData> appointments);
    public abstract virtual Task`1<bool> SelectMore(DateTime start, DateTime end, IEnumerable`1<AppointmentData> appointments);
    public abstract virtual IDictionary`2<string, object> GetAppointmentAttributes(AppointmentData item);
    public abstract virtual IDictionary`2<string, object> GetSlotAttributes(DateTime start, DateTime end);
    public abstract virtual RenderFragment RenderAppointment(AppointmentData item);
    public abstract virtual Task MouseEnterAppointment(ElementReference reference, AppointmentData data);
    public abstract virtual bool HasMouseEnterAppointmentDelegate();
    public abstract virtual bool HasAppointmentMoveDelegate();
    public abstract virtual Task MouseLeaveAppointment(ElementReference reference, AppointmentData data);
    public abstract virtual Task Reload();
    public abstract virtual double get_Height();
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual void set_Culture(CultureInfo value);
}
public interface Radzen.Blazor.ISchedulerView {
    public string Icon { get; }
    public string Title { get; }
    public string Text { get; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public abstract virtual string get_Icon();
    public abstract virtual string get_Title();
    public abstract virtual string get_Text();
    public abstract virtual DateTime Next();
    public abstract virtual DateTime Prev();
    public abstract virtual RenderFragment Render();
    public abstract virtual DateTime get_StartDate();
    public abstract virtual DateTime get_EndDate();
    public abstract virtual Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs data);
}
public enum Radzen.Blazor.LegendPosition : Enum {
    public int value__;
    public static LegendPosition Right;
    public static LegendPosition Left;
    public static LegendPosition Top;
    public static LegendPosition Bottom;
}
internal class Radzen.Blazor.LinearScale : ScaleBase {
    public virtual object Value(double value);
    public virtual string FormatTick(string format, object value);
    public virtual double Scale(double value, bool padding);
    protected virtual double CalculateTickCount(int distance);
    public virtual ValueTuple`3<double, double, double> Ticks(int distance);
}
public enum Radzen.Blazor.LineType : Enum {
    public int value__;
    public static LineType Solid;
    public static LineType Dashed;
    public static LineType Dotted;
}
public enum Radzen.Blazor.MarkerType : Enum {
    public int value__;
    public static MarkerType None;
    public static MarkerType Auto;
    public static MarkerType Circle;
    public static MarkerType Triangle;
    public static MarkerType Square;
    public static MarkerType Diamond;
}
internal class Radzen.Blazor.OrdinalScale : LinearScale {
    [CompilerGeneratedAttribute]
private IList`1<object> <Data>k__BackingField;
    public IList`1<object> Data { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IList`1<object> value);
    public virtual object Value(double value);
    public virtual ValueTuple`3<double, double, double> Ticks(int distance);
}
public class Radzen.Blazor.Point : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public string Render();
    public Point ToCartesian(double radius, double angle);
}
public class Radzen.Blazor.Point`1 : Point {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
}
public class Radzen.Blazor.RadzenAccordion : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Items>k__BackingField;
    private List`1<RadzenAccordionItem> items;
    internal int focusedIndex;
    private bool preventKeyPress;
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public int SelectedIndex { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> SelectedIndexChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> Expand { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> Collapse { get; public set; }
    [ParameterAttribute]
public RenderFragment Items { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public int get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedIndexChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedIndexChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(RenderFragment value);
    public void AddItem(RadzenAccordionItem item);
    public void RemoveItem(RadzenAccordionItem item);
    internal void Refresh();
    protected bool IsSelected(int index, RadzenAccordionItem item);
    protected string ItemTitle(int index, RadzenAccordionItem item);
    protected string ItemAriaLabel(int index, RadzenAccordionItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAccordion/<SelectItem>d__32")]
internal Task SelectItem(RadzenAccordionItem item, Nullable`1<bool> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAccordion/<CollapseAll>d__33")]
private Task CollapseAll(RadzenAccordionItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAccordion/<OnKeyPress>d__36")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenAccordionItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAccordion/<SetParametersAsync>d__38")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__39_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_2(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_3(ElementReference __value);
}
public class Radzen.Blazor.RadzenAccordionItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Template>k__BackingField;
    private bool _visible;
    private RadzenAccordion _accordion;
    private Nullable`1<bool> selected;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public string ExpandTitle { get; public set; }
    [ParameterAttribute]
public string CollapseTitle { get; public set; }
    [ParameterAttribute]
public string ExpandAriaLabel { get; public set; }
    [ParameterAttribute]
public string CollapseAriaLabel { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment Template { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [CascadingParameterAttribute]
public RadzenAccordion Accordion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public string get_ExpandTitle();
    [CompilerGeneratedAttribute]
public void set_ExpandTitle(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseTitle();
    [CompilerGeneratedAttribute]
public void set_CollapseTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ExpandAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ExpandAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseAriaLabel();
    [CompilerGeneratedAttribute]
public void set_CollapseAriaLabel(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public RadzenAccordion get_Accordion();
    public void set_Accordion(RadzenAccordion value);
    internal bool GetSelected();
    internal void SetSelected(Nullable`1<bool> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAccordionItem/<SetParametersAsync>d__51")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public virtual void Dispose();
    internal string GetItemId();
    internal string GetItemCssClass();
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenAlert : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private bool <AllowClose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private AlertStyle <AlertStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private AlertSize <Size>k__BackingField;
    private bool visible;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <VisibleChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Close>k__BackingField;
    [ParameterAttribute]
public bool AllowClose { get; public set; }
    [ParameterAttribute]
public bool ShowIcon { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public AlertStyle AlertStyle { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public Shade Shade { get; public set; }
    [ParameterAttribute]
public AlertSize Size { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> VisibleChanged { get; public set; }
    [ParameterAttribute]
public EventCallback Close { get; public set; }
    private string GetAlertSize();
    [CompilerGeneratedAttribute]
public bool get_AllowClose();
    [CompilerGeneratedAttribute]
public void set_AllowClose(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowIcon();
    [CompilerGeneratedAttribute]
public void set_ShowIcon(bool value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public AlertStyle get_AlertStyle();
    [CompilerGeneratedAttribute]
public void set_AlertStyle(AlertStyle value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Shade get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(Shade value);
    [CompilerGeneratedAttribute]
public AlertSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(AlertSize value);
    private ButtonSize GetCloseButtonSize();
    private Shade GetCloseButtonShade();
    private ButtonStyle GetCloseButtonStyle();
    protected virtual void OnInitialized();
    protected virtual string GetComponentCssClass();
    private string GetIcon();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAlert/<OnClose>d__48")]
private Task OnClose();
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_VisibleChanged();
    [CompilerGeneratedAttribute]
public void set_VisibleChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(EventCallback value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAlert/<SetParametersAsync>d__57")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenAppearanceToggle : RadzenComponent {
    [CompilerGeneratedAttribute]
private ThemeService <ThemeService>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <ToggleShade>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ToggleButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LightTheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DarkTheme>k__BackingField;
    private bool value;
    [InjectAttribute]
private ThemeService ThemeService { get; private set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public ButtonStyle ButtonStyle { get; public set; }
    [ParameterAttribute]
public Shade ToggleShade { get; public set; }
    [ParameterAttribute]
public ButtonStyle ToggleButtonStyle { get; public set; }
    [ParameterAttribute]
public string LightTheme { get; public set; }
    [ParameterAttribute]
public string DarkTheme { get; public set; }
    private string CurrentLightTheme { get; }
    private string CurrentDarkTheme { get; }
    private string Icon { get; }
    [CompilerGeneratedAttribute]
private ThemeService get_ThemeService();
    [CompilerGeneratedAttribute]
private void set_ThemeService(ThemeService value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public ButtonStyle get_ButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public Shade get_ToggleShade();
    [CompilerGeneratedAttribute]
public void set_ToggleShade(Shade value);
    [CompilerGeneratedAttribute]
public ButtonStyle get_ToggleButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ToggleButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public string get_LightTheme();
    [CompilerGeneratedAttribute]
public void set_LightTheme(string value);
    [CompilerGeneratedAttribute]
public string get_DarkTheme();
    [CompilerGeneratedAttribute]
public void set_DarkTheme(string value);
    private string get_CurrentLightTheme();
    private string get_CurrentDarkTheme();
    protected virtual void OnInitialized();
    private void OnThemeChanged();
    private void OnChange(bool value);
    private string get_Icon();
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenArcGauge : GaugeBase {
    [CompilerGeneratedAttribute]
private IList`1<RadzenArcGaugeScaleValue> <Values>k__BackingField;
    private IList`1<RadzenArcGaugeScaleValue> Values { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private IList`1<RadzenArcGaugeScaleValue> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<RadzenArcGaugeScaleValue> value);
    private string ValueStyle(RadzenArcGaugeScaleValue value);
    internal void AddValue(RadzenArcGaugeScaleValue value);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenArcGaugeScale : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenArcGauge <Gauge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorTickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLabelOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, string> <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private GaugeTickPosition <TickPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTickLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Margin>k__BackingField;
    [CascadingParameterAttribute]
public RadzenArcGauge Gauge { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public double TickLength { get; public set; }
    [ParameterAttribute]
public double MinorTickLength { get; public set; }
    [ParameterAttribute]
public double TickLabelOffset { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double Height { get; public set; }
    [ParameterAttribute]
public Func`2<double, string> Formatter { get; public set; }
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public GaugeTickPosition TickPosition { get; public set; }
    [ParameterAttribute]
public double EndAngle { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public bool ShowFirstTick { get; public set; }
    [ParameterAttribute]
public bool ShowLastTick { get; public set; }
    [ParameterAttribute]
public bool ShowTickLabels { get; public set; }
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public double Step { get; public set; }
    [ParameterAttribute]
public double MinorStep { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public double Margin { get; public set; }
    public double CurrentStrokeWidth { get; }
    public double CurrentRadius { get; }
    private double CurrentScaleRadius { get; }
    public double CurrentSize { get; }
    public Point CurrentCenter { get; }
    [CompilerGeneratedAttribute]
public RadzenArcGauge get_Gauge();
    [CompilerGeneratedAttribute]
public void set_Gauge(RadzenArcGauge value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public double get_TickLength();
    [CompilerGeneratedAttribute]
public void set_TickLength(double value);
    [CompilerGeneratedAttribute]
public double get_MinorTickLength();
    [CompilerGeneratedAttribute]
public void set_MinorTickLength(double value);
    [CompilerGeneratedAttribute]
public double get_TickLabelOffset();
    [CompilerGeneratedAttribute]
public void set_TickLabelOffset(double value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public Func`2<double, string> get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(Func`2<double, string> value);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public GaugeTickPosition get_TickPosition();
    [CompilerGeneratedAttribute]
public void set_TickPosition(GaugeTickPosition value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public bool get_ShowFirstTick();
    [CompilerGeneratedAttribute]
public void set_ShowFirstTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLastTick();
    [CompilerGeneratedAttribute]
public void set_ShowLastTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTickLabels();
    [CompilerGeneratedAttribute]
public void set_ShowTickLabels(bool value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(double value);
    [CompilerGeneratedAttribute]
public double get_MinorStep();
    [CompilerGeneratedAttribute]
public void set_MinorStep(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(double value);
    public double get_CurrentStrokeWidth();
    public double get_CurrentRadius();
    private double get_CurrentScaleRadius();
    public double get_CurrentSize();
    public Point get_CurrentCenter();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__110_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenArcGaugeScaleValue : ComponentBase {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenArcGaugeScale <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenArcGaugeScaleValue> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenArcGauge <Gauge>k__BackingField;
    [ParameterAttribute]
public double Value { get; public set; }
    [CascadingParameterAttribute]
public RadzenArcGaugeScale Scale { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public bool ShowValue { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenArcGaugeScaleValue> Template { get; public set; }
    [CascadingParameterAttribute]
public RadzenArcGauge Gauge { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public RadzenArcGaugeScale get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(RadzenArcGaugeScale value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowValue();
    [CompilerGeneratedAttribute]
public void set_ShowValue(bool value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenArcGaugeScaleValue> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenArcGaugeScaleValue> value);
    [CompilerGeneratedAttribute]
public RadzenArcGauge get_Gauge();
    [CompilerGeneratedAttribute]
public void set_Gauge(RadzenArcGauge value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenArcGaugeScaleValue/<SetParametersAsync>d__37")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenAreaSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private Interpolation <Interpolation>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public bool Smooth { get; public set; }
    [ParameterAttribute]
public Interpolation Interpolation { get; public set; }
    public string Color { get; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    public bool get_Smooth();
    public void set_Smooth(bool value);
    [CompilerGeneratedAttribute]
public Interpolation get_Interpolation();
    [CompilerGeneratedAttribute]
public void set_Interpolation(Interpolation value);
    public virtual string get_Color();
    protected virtual string TooltipStyle(TItem item);
    public virtual bool Contains(double x, double y, double tolerance);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    private IPathGenerator GetPathGenerator();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenAutoComplete : DataBoundFormComponent`1<string> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopupStyle>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<object> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilterDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxLength>k__BackingField;
    protected ElementReference search;
    protected ElementReference list;
    private string customSearchText;
    private int selectedIndex;
    private bool firstRender;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public bool Multiline { get; public set; }
    [ParameterAttribute]
public bool OpenOnFocus { get; public set; }
    [ParameterAttribute]
public string PopupStyle { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<object> Template { get; public set; }
    [ParameterAttribute]
public int MinLength { get; public set; }
    [ParameterAttribute]
public int FilterDelay { get; public set; }
    [ParameterAttribute]
public string InputType { get; public set; }
    [ParameterAttribute]
public Nullable`1<long> MaxLength { get; public set; }
    private string PopupID { get; }
    protected IQueryable Query { get; }
    protected IEnumerable View { get; }
    private ClassList InputClassList { get; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_Multiline();
    [CompilerGeneratedAttribute]
public void set_Multiline(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenOnFocus();
    [CompilerGeneratedAttribute]
public void set_OpenOnFocus(bool value);
    [CompilerGeneratedAttribute]
public string get_PopupStyle();
    [CompilerGeneratedAttribute]
public void set_PopupStyle(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<object> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<object> value);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
public void set_MinLength(int value);
    [CompilerGeneratedAttribute]
public int get_FilterDelay();
    [CompilerGeneratedAttribute]
public void set_FilterDelay(int value);
    [CompilerGeneratedAttribute]
public string get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<long> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<OnFilterKeyPress>d__40")]
protected Task OnFilterKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<DebounceFilter>d__41")]
private Task DebounceFilter();
    private string get_PopupID();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<OnSelectItem>d__44")]
private Task OnSelectItem(object item);
    protected virtual IQueryable get_Query();
    protected virtual IEnumerable get_View();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<OnChange>d__49")]
protected Task OnChange(ChangeEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<SelectItem>d__50")]
private Task SelectItem(object item);
    private ClassList get_InputClassList();
    private string OpenScript();
    protected virtual string GetComponentCssClass();
    public virtual void Dispose();
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<SetParametersAsync>d__58")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenAutoComplete/<FocusAsync>d__59")]
public virtual ValueTask FocusAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <DebounceFilter>b__41_0();
    [CompilerGeneratedAttribute]
private void <DebounceFilter>b__41_1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_3(ElementReference __value);
}
public class Radzen.Blazor.RadzenAxisTitle : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [CascadingParameterAttribute]
unknown AxisBase Axis {public set; }
    internal double Size { get; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public void set_Axis(AxisBase value);
    internal double get_Size();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenBadge : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private BadgeStyle <BadgeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPill>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public BadgeStyle BadgeStyle { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public Shade Shade { get; public set; }
    [ParameterAttribute]
public bool IsPill { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public BadgeStyle get_BadgeStyle();
    [CompilerGeneratedAttribute]
public void set_BadgeStyle(BadgeStyle value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Shade get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(Shade value);
    [CompilerGeneratedAttribute]
public bool get_IsPill();
    [CompilerGeneratedAttribute]
public void set_IsPill(bool value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__25_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenBarOptions : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public double Margin { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Height { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public double get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<double> value);
    protected virtual void Initialize();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenBarSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Fills>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <FillRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <StrokeRange>k__BackingField;
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Fills { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Strokes { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> FillRange { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> StrokeRange { get; public set; }
    public string Color { get; }
    private IList`1<IChartSeries> BarSeries { get; }
    private IList`1<IChartSeries> VisibleBarSeries { get; }
    private double BandHeight { get; }
    private int Radzen.Blazor.IChartBarSeries.Count { get; }
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fills();
    [CompilerGeneratedAttribute]
public void set_Fills(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_FillRange();
    [CompilerGeneratedAttribute]
public void set_FillRange(IList`1<SeriesColorRange> value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_StrokeRange();
    [CompilerGeneratedAttribute]
public void set_StrokeRange(IList`1<SeriesColorRange> value);
    public virtual string get_Color();
    public virtual ScaleBase TransformCategoryScale(ScaleBase scale);
    public virtual ScaleBase TransformValueScale(ScaleBase scale);
    protected virtual IList`1<object> GetCategories();
    private IList`1<IChartSeries> get_BarSeries();
    private IList`1<IChartSeries> get_VisibleBarSeries();
    protected virtual string TooltipStyle(TItem item);
    private double get_BandHeight();
    private sealed virtual override int Radzen.Blazor.IChartBarSeries.get_Count();
    public virtual bool Contains(double x, double y, double tolerance);
    internal virtual double TooltipX(TItem item);
    protected virtual string TooltipValue(TItem item);
    protected virtual string TooltipTitle(TItem item);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    internal virtual double TooltipY(TItem item);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__53_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenBody : RadzenComponentWithChildren {
    private static string DefaultStyle;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenLayout <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    [ParameterAttribute]
public string Style { get; public set; }
    [CascadingParameterAttribute]
public RadzenLayout Layout { get; public set; }
    [ParameterAttribute]
public bool Expanded { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [CompilerGeneratedAttribute]
public virtual string get_Style();
    [CompilerGeneratedAttribute]
public virtual void set_Style(string value);
    protected virtual string GetComponentCssClass();
    public void Toggle();
    [CompilerGeneratedAttribute]
public RadzenLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(RadzenLayout value);
    protected string GetStyle();
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    protected virtual Task OnInitializedAsync();
    private void OnLocationChanged(object sender, LocationChangedEventArgs e);
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__27_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenBreadCrumb : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenBreadCrumbItem> <Template>k__BackingField;
    [ParameterAttribute]
public RenderFragment`1<RadzenBreadCrumbItem> Template { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenBreadCrumbItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenBreadCrumbItem> value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenBreadCrumbItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenBreadCrumbItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CascadingParameterAttribute]
public RenderFragment`1<RadzenBreadCrumbItem> Template { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenBreadCrumbItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenBreadCrumbItem> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenButton : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonType <ButtonType>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BusyText>k__BackingField;
    private bool clicking;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public int TabIndex { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public ButtonStyle ButtonStyle { get; public set; }
    [ParameterAttribute]
public ButtonType ButtonType { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public Shade Shade { get; public set; }
    [ParameterAttribute]
public ButtonSize Size { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> Click { get; public set; }
    [ParameterAttribute]
public bool IsBusy { get; public set; }
    [ParameterAttribute]
public string BusyText { get; public set; }
    public bool IsDisabled { get; }
    internal string getButtonSize();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public int get_TabIndex();
    [CompilerGeneratedAttribute]
public void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public ButtonStyle get_ButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public ButtonType get_ButtonType();
    [CompilerGeneratedAttribute]
public void set_ButtonType(ButtonType value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Shade get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(Shade value);
    [CompilerGeneratedAttribute]
public ButtonSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ButtonSize value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_IsBusy();
    [CompilerGeneratedAttribute]
public void set_IsBusy(bool value);
    [CompilerGeneratedAttribute]
public string get_BusyText();
    [CompilerGeneratedAttribute]
public void set_BusyText(string value);
    public bool get_IsDisabled();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenButton/<OnClick>d__68")]
public virtual Task OnClick(MouseEventArgs args);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenCard : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [ParameterAttribute]
public Variant Variant { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenCategoryAxis : AxisBase {
    [CompilerGeneratedAttribute]
private double <Padding>k__BackingField;
    [ParameterAttribute]
public double Padding { get; public set; }
    internal double Size { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal double Measure(RadzenChart chart);
    [CompilerGeneratedAttribute]
public double get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(double value);
    internal virtual double get_Size();
    protected virtual void Initialize();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenChart : RadzenComponent {
    [CompilerGeneratedAttribute]
private ColorScheme <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SeriesClickEventArgs> <SeriesClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<LegendClickEventArgs> <LegendClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private ScaleBase <CategoryScale>k__BackingField;
    [CompilerGeneratedAttribute]
private ScaleBase <ValueScale>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IChartSeries> <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenColumnOptions <ColumnOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenBarOptions <BarOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenLegend <Legend>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenCategoryAxis <CategoryAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenValueAxis <ValueAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenChartTooltipOptions <Tooltip>k__BackingField;
    private ChartTooltipContainer chartTooltipContainer;
    private RenderFragment tooltip;
    private object tooltipData;
    private double mouseX;
    private double mouseY;
    [CompilerGeneratedAttribute]
private int <ClickTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TooltipTolerance>k__BackingField;
    private bool widthAndHeightAreSet;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private string <ClipPath>k__BackingField;
    private bool visibleChanged;
    [ParameterAttribute]
public ColorScheme ColorScheme { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SeriesClickEventArgs> SeriesClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<LegendClickEventArgs> LegendClick { get; public set; }
    protected Nullable`1<double> Width { get; protected set; }
    protected Nullable`1<double> Height { get; protected set; }
    protected double MarginTop { get; protected set; }
    protected double MarginLeft { get; protected set; }
    protected double MarginRight { get; protected set; }
    protected double MarginBottom { get; protected set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    internal ScaleBase CategoryScale { get; internal set; }
    internal ScaleBase ValueScale { get; internal set; }
    internal IList`1<IChartSeries> Series { get; internal set; }
    internal RadzenColumnOptions ColumnOptions { get; internal set; }
    internal RadzenBarOptions BarOptions { get; internal set; }
    internal RadzenLegend Legend { get; internal set; }
    internal RadzenCategoryAxis CategoryAxis { get; internal set; }
    internal RadzenValueAxis ValueAxis { get; internal set; }
    internal RadzenChartTooltipOptions Tooltip { get; internal set; }
    [ParameterAttribute]
public int ClickTolerance { get; public set; }
    [ParameterAttribute]
public int TooltipTolerance { get; public set; }
    internal string ClipPath { get; internal set; }
    [CompilerGeneratedAttribute]
public ColorScheme get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(ColorScheme value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SeriesClickEventArgs> get_SeriesClick();
    [CompilerGeneratedAttribute]
public void set_SeriesClick(EventCallback`1<SeriesClickEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<LegendClickEventArgs> get_LegendClick();
    [CompilerGeneratedAttribute]
public void set_LegendClick(EventCallback`1<LegendClickEventArgs> value);
    [CompilerGeneratedAttribute]
protected Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
protected void set_Width(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
protected Nullable`1<double> get_Height();
    [CompilerGeneratedAttribute]
protected void set_Height(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
protected double get_MarginTop();
    [CompilerGeneratedAttribute]
protected void set_MarginTop(double value);
    [CompilerGeneratedAttribute]
protected double get_MarginLeft();
    [CompilerGeneratedAttribute]
protected void set_MarginLeft(double value);
    [CompilerGeneratedAttribute]
protected double get_MarginRight();
    [CompilerGeneratedAttribute]
protected void set_MarginRight(double value);
    [CompilerGeneratedAttribute]
protected double get_MarginBottom();
    [CompilerGeneratedAttribute]
protected void set_MarginBottom(double value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
internal ScaleBase get_CategoryScale();
    [CompilerGeneratedAttribute]
internal void set_CategoryScale(ScaleBase value);
    [CompilerGeneratedAttribute]
internal ScaleBase get_ValueScale();
    [CompilerGeneratedAttribute]
internal void set_ValueScale(ScaleBase value);
    [CompilerGeneratedAttribute]
internal IList`1<IChartSeries> get_Series();
    [CompilerGeneratedAttribute]
internal void set_Series(IList`1<IChartSeries> value);
    [CompilerGeneratedAttribute]
internal RadzenColumnOptions get_ColumnOptions();
    [CompilerGeneratedAttribute]
internal void set_ColumnOptions(RadzenColumnOptions value);
    [CompilerGeneratedAttribute]
internal RadzenBarOptions get_BarOptions();
    [CompilerGeneratedAttribute]
internal void set_BarOptions(RadzenBarOptions value);
    [CompilerGeneratedAttribute]
internal RadzenLegend get_Legend();
    [CompilerGeneratedAttribute]
internal void set_Legend(RadzenLegend value);
    [CompilerGeneratedAttribute]
internal RadzenCategoryAxis get_CategoryAxis();
    [CompilerGeneratedAttribute]
internal void set_CategoryAxis(RadzenCategoryAxis value);
    [CompilerGeneratedAttribute]
internal RadzenValueAxis get_ValueAxis();
    [CompilerGeneratedAttribute]
internal void set_ValueAxis(RadzenValueAxis value);
    [CompilerGeneratedAttribute]
internal RadzenChartTooltipOptions get_Tooltip();
    [CompilerGeneratedAttribute]
internal void set_Tooltip(RadzenChartTooltipOptions value);
    internal void AddSeries(IChartSeries series);
    internal void RemoveSeries(IChartSeries series);
    protected bool ShouldRenderAxes();
    internal bool ShouldInvertAxes();
    protected virtual bool UpdateScales();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<Resize>d__81")]
[JSInvokableAttribute]
public Task Resize(double width, double height);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<MouseMove>d__87")]
[JSInvokableAttribute]
public Task MouseMove(double x, double y);
    [CompilerGeneratedAttribute]
public int get_ClickTolerance();
    [CompilerGeneratedAttribute]
public void set_ClickTolerance(int value);
    [CompilerGeneratedAttribute]
public int get_TooltipTolerance();
    [CompilerGeneratedAttribute]
public void set_TooltipTolerance(int value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<Click>d__96")]
[JSInvokableAttribute]
public Task Click(double x, double y);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<DisplayTooltip>d__97")]
internal Task DisplayTooltip();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<OnAfterRenderAsync>d__100")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [CompilerGeneratedAttribute]
internal string get_ClipPath();
    [CompilerGeneratedAttribute]
internal void set_ClipPath(string value);
    protected virtual void OnInitialized();
    private void Initialize();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<SetParametersAsync>d__108")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<Refresh>d__109")]
internal Task Refresh(bool force);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChart/<Reload>d__110")]
public Task Reload();
    public virtual void Dispose();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__113_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__113_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__113_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__113_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__113_4(object __value);
}
public abstract class Radzen.Blazor.RadzenChartComponentBase : ComponentBase {
    private RadzenChart chart;
    [CascadingParameterAttribute]
public RadzenChart Chart { get; public set; }
    public RadzenChart get_Chart();
    public void set_Chart(RadzenChart value);
    protected virtual void Initialize();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenChartComponentBase/<SetParametersAsync>d__6")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void ValidateParameters();
    protected bool DidParameterChange(ParameterView parameters, string parameterName, T parameterValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenChartTooltipOptions : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shared>k__BackingField;
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public bool Shared { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public bool get_Shared();
    [CompilerGeneratedAttribute]
public void set_Shared(bool value);
    protected virtual void Initialize();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenCheckBox`1 : FormComponent`1<TValue> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public bool TriState { get; public set; }
    private ClassList BoxClassList { get; }
    private ClassList IconClassList { get; }
    private string CheckBoxValue { get; }
    private bool CheckBoxChecked { get; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_TriState();
    [CompilerGeneratedAttribute]
public void set_TriState(bool value);
    private ClassList get_BoxClassList();
    private ClassList get_IconClassList();
    private string get_CheckBoxValue();
    private bool get_CheckBoxChecked();
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCheckBox`1/<OnKeyPress>d__17")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCheckBox`1/<Toggle>d__22")]
private Task Toggle();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__23_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenCheckBoxList`1 : FormComponent`1<IEnumerable`1<TValue>> {
    [CompilerGeneratedAttribute]
private string <ValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadOnlyProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSelectAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectAllText>k__BackingField;
    private IEnumerable _data;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Items>k__BackingField;
    private List`1<RadzenCheckBoxListItem`1<TValue>> items;
    private bool preventKeyPress;
    [ParameterAttribute]
public string ValueProperty { get; public set; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public string DisabledProperty { get; public set; }
    [ParameterAttribute]
public string ReadOnlyProperty { get; public set; }
    private IEnumerable`1<RadzenCheckBoxListItem`1<TValue>> allItems { get; }
    [ParameterAttribute]
public bool AllowSelectAll { get; public set; }
    [ParameterAttribute]
public string SelectAllText { get; public set; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    public bool HasValue { get; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
public RenderFragment Items { get; public set; }
    private ClassList ItemClassList(RadzenCheckBoxListItem`1<TValue> item);
    private ClassList IconClassList(RadzenCheckBoxListItem`1<TValue> item);
    [CompilerGeneratedAttribute]
public string get_ValueProperty();
    [CompilerGeneratedAttribute]
public void set_ValueProperty(string value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public string get_DisabledProperty();
    [CompilerGeneratedAttribute]
public void set_DisabledProperty(string value);
    [CompilerGeneratedAttribute]
public string get_ReadOnlyProperty();
    [CompilerGeneratedAttribute]
public void set_ReadOnlyProperty(string value);
    private IEnumerable`1<RadzenCheckBoxListItem`1<TValue>> get_allItems();
    [CompilerGeneratedAttribute]
public bool get_AllowSelectAll();
    [CompilerGeneratedAttribute]
public void set_AllowSelectAll(bool value);
    [CompilerGeneratedAttribute]
public string get_SelectAllText();
    [CompilerGeneratedAttribute]
public void set_SelectAllText(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCheckBoxList`1/<SelectAll>d__28")]
private Task SelectAll(Nullable`1<bool> value);
    private Nullable`1<bool> IsAllSelected();
    public virtual IEnumerable get_Data();
    public virtual void set_Data(IEnumerable value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    protected virtual string GetComponentCssClass();
    public virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(RenderFragment value);
    public void AddItem(RadzenCheckBoxListItem`1<TValue> item);
    public void RemoveItem(RadzenCheckBoxListItem`1<TValue> item);
    protected bool IsSelected(RadzenCheckBoxListItem`1<TValue> item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCheckBoxList`1/<SelectItem>d__53")]
protected Task SelectItem(RadzenCheckBoxListItem`1<TValue> item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCheckBoxList`1/<OnKeyPress>d__55")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private RadzenCheckBoxListItem`1<TValue> <get_allItems>b__19_0(object i);
    [CompilerGeneratedAttribute]
private bool <IsAllSelected>b__29_0(RadzenCheckBoxListItem`1<TValue> i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__56_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__56_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenCheckBoxListItem`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenCheckBoxListItem`1<TValue>> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    private RadzenCheckBoxList`1<TValue> _checkBoxList;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenCheckBoxListItem`1<TValue>> Template { get; public set; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [CascadingParameterAttribute]
public RadzenCheckBoxList`1<TValue> CheckBoxList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenCheckBoxListItem`1<TValue>> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenCheckBoxListItem`1<TValue>> value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public virtual bool get_Disabled();
    [CompilerGeneratedAttribute]
public virtual void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    public RadzenCheckBoxList`1<TValue> get_CheckBoxList();
    public void set_CheckBoxList(RadzenCheckBoxList`1<TValue> value);
    public virtual void Dispose();
    internal void SetText(string value);
    internal void SetValue(TValue value);
    internal void SetDisabled(bool value);
    internal void SetReadOnly(bool value);
    internal string GetItemId();
    internal string GetItemCssClass();
    protected virtual string GetComponentCssClass();
}
public class Radzen.Blazor.RadzenColorPicker : FormComponent`1<string> {
    [CompilerGeneratedAttribute]
private string <ToggleAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreenText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlueText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlphaText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private Popup <Popup>k__BackingField;
    private Rect lastHslRect;
    private Rect lastAlphaRect;
    private Rect lastHueRect;
    [CompilerGeneratedAttribute]
private bool <ShowButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHSV>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRGBA>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColors>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupRenderMode <PopupRenderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SaturationHandleLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SaturationHandleTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HueHandleLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AlphaHandleLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public string ToggleAriaLabel { get; public set; }
    [ParameterAttribute]
public EventCallback Open { get; public set; }
    [ParameterAttribute]
public EventCallback Close { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string HexText { get; public set; }
    [ParameterAttribute]
public string RedText { get; public set; }
    [ParameterAttribute]
public string GreenText { get; public set; }
    [ParameterAttribute]
public string BlueText { get; public set; }
    [ParameterAttribute]
public string AlphaText { get; public set; }
    [ParameterAttribute]
public string ButtonText { get; public set; }
    private Popup Popup { get; private set; }
    private string AlphaGradientStart { get; }
    private string AlphaGradientEnd { get; }
    private string Hex { get; }
    private double Red { get; }
    private double Alpha { get; }
    private double Green { get; }
    private double Blue { get; }
    [ParameterAttribute]
public bool ShowButton { get; public set; }
    [ParameterAttribute]
public bool ShowHSV { get; public set; }
    [ParameterAttribute]
public bool ShowRGBA { get; public set; }
    [ParameterAttribute]
public bool ShowColors { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public PopupRenderMode PopupRenderMode { get; public set; }
    private double SaturationHandleLeft { get; private set; }
    private double SaturationHandleTop { get; private set; }
    private double HueHandleLeft { get; private set; }
    private double AlphaHandleLeft { get; private set; }
    private string Color { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ToggleAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ToggleAriaLabel(string value);
    [CompilerGeneratedAttribute]
public EventCallback get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(EventCallback value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_HexText();
    [CompilerGeneratedAttribute]
public void set_HexText(string value);
    [CompilerGeneratedAttribute]
public string get_RedText();
    [CompilerGeneratedAttribute]
public void set_RedText(string value);
    [CompilerGeneratedAttribute]
public string get_GreenText();
    [CompilerGeneratedAttribute]
public void set_GreenText(string value);
    [CompilerGeneratedAttribute]
public string get_BlueText();
    [CompilerGeneratedAttribute]
public void set_BlueText(string value);
    [CompilerGeneratedAttribute]
public string get_AlphaText();
    [CompilerGeneratedAttribute]
public void set_AlphaText(string value);
    [CompilerGeneratedAttribute]
public string get_ButtonText();
    [CompilerGeneratedAttribute]
public void set_ButtonText(string value);
    [CompilerGeneratedAttribute]
private Popup get_Popup();
    [CompilerGeneratedAttribute]
private void set_Popup(Popup value);
    private string get_AlphaGradientStart();
    private string get_AlphaGradientEnd();
    private string get_Hex();
    private double get_Red();
    private double get_Alpha();
    private double get_Green();
    private double get_Blue();
    private void UpdateColorUsingHsvHandles();
    private void OnSaturationMove(DraggableEventArgs args);
    private void TriggerChange();
    private void ChangeRGB(object value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<SelectColor>d__67")]
internal Task SelectColor(string value);
    private void UpdateColor(RGB rgb);
    private void ChangeAlpha(double value);
    private void ChangeAlpha(object alpha);
    private void ChangeColor(double value, Action`2<RGB, double> update);
    private void ChangeColor(object color, Action`2<RGB, double> update);
    private void OnAlphaMove(DraggableEventArgs args);
    private void OnHueMove(DraggableEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnClick>d__77")]
private Task OnClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnClosePopup>d__78")]
private Task OnClosePopup();
    [CompilerGeneratedAttribute]
public bool get_ShowButton();
    [CompilerGeneratedAttribute]
public void set_ShowButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowHSV();
    [CompilerGeneratedAttribute]
public void set_ShowHSV(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowRGBA();
    [CompilerGeneratedAttribute]
public void set_ShowRGBA(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowColors();
    [CompilerGeneratedAttribute]
public void set_ShowColors(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public PopupRenderMode get_PopupRenderMode();
    [CompilerGeneratedAttribute]
public void set_PopupRenderMode(PopupRenderMode value);
    [CompilerGeneratedAttribute]
private double get_SaturationHandleLeft();
    [CompilerGeneratedAttribute]
private void set_SaturationHandleLeft(double value);
    [CompilerGeneratedAttribute]
private double get_SaturationHandleTop();
    [CompilerGeneratedAttribute]
private void set_SaturationHandleTop(double value);
    [CompilerGeneratedAttribute]
private double get_HueHandleLeft();
    [CompilerGeneratedAttribute]
private void set_HueHandleLeft(double value);
    [CompilerGeneratedAttribute]
private double get_AlphaHandleLeft();
    [CompilerGeneratedAttribute]
private void set_AlphaHandleLeft(double value);
    [CompilerGeneratedAttribute]
private string get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<Toggle>d__123")]
private Task Toggle();
    protected virtual string GetComponentCssClass();
    protected virtual void OnInitialized();
    private void SetInitialValue();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<SetParametersAsync>d__127")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnHueKeyPress>d__128")]
private Task OnHueKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnAlphaKeyPress>d__129")]
private Task OnAlphaKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnHslKeyPress>d__130")]
private Task OnHslKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<OnKeyPress>d__132")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPicker/<ClosePopup>d__133")]
internal Task ClosePopup();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__134_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_2(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__134_4(KeyboardEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_5(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__134_6(KeyboardEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_7(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__134_8(KeyboardEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_9(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_10(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_11(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_12(double red);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_13(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_14(double green);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_15(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_16(double blue);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_17(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_18(double alpha);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_19(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__134_3(object __value);
}
public class Radzen.Blazor.RadzenColorPickerItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenColorPicker <ColorPicker>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public string Value { get; public set; }
    private string Background { get; }
    [CascadingParameterAttribute]
public RadzenColorPicker ColorPicker { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    private string get_Background();
    [CompilerGeneratedAttribute]
public RadzenColorPicker get_ColorPicker();
    [CompilerGeneratedAttribute]
public void set_ColorPicker(RadzenColorPicker value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPickerItem/<OnClick>d__10")]
private Task OnClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenColorPickerItem/<OnKeyPress>d__12")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__13_0(KeyboardEventArgs args);
}
public class Radzen.Blazor.RadzenColumn : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeXS>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeSM>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeMD>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeLG>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeXL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SizeXX>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetXS>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetSM>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetMD>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetLG>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetXL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetXX>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderXS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderSM>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderMD>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderLG>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderXL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderXX>k__BackingField;
    [ParameterAttribute]
public Nullable`1<int> Size { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeXS { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeSM { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeMD { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeLG { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeXL { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> SizeXX { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> Offset { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetXS { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetSM { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetMD { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetLG { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetXL { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OffsetXX { get; public set; }
    [ParameterAttribute]
public string Order { get; public set; }
    [ParameterAttribute]
public string OrderXS { get; public set; }
    [ParameterAttribute]
public string OrderSM { get; public set; }
    [ParameterAttribute]
public string OrderMD { get; public set; }
    [ParameterAttribute]
public string OrderLG { get; public set; }
    [ParameterAttribute]
public string OrderXL { get; public set; }
    [ParameterAttribute]
public string OrderXX { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeXS();
    [CompilerGeneratedAttribute]
public void set_SizeXS(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeSM();
    [CompilerGeneratedAttribute]
public void set_SizeSM(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeMD();
    [CompilerGeneratedAttribute]
public void set_SizeMD(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeLG();
    [CompilerGeneratedAttribute]
public void set_SizeLG(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeXL();
    [CompilerGeneratedAttribute]
public void set_SizeXL(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SizeXX();
    [CompilerGeneratedAttribute]
public void set_SizeXX(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetXS();
    [CompilerGeneratedAttribute]
public void set_OffsetXS(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetSM();
    [CompilerGeneratedAttribute]
public void set_OffsetSM(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetMD();
    [CompilerGeneratedAttribute]
public void set_OffsetMD(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetLG();
    [CompilerGeneratedAttribute]
public void set_OffsetLG(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetXL();
    [CompilerGeneratedAttribute]
public void set_OffsetXL(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OffsetXX();
    [CompilerGeneratedAttribute]
public void set_OffsetXX(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(string value);
    [CompilerGeneratedAttribute]
public string get_OrderXS();
    [CompilerGeneratedAttribute]
public void set_OrderXS(string value);
    [CompilerGeneratedAttribute]
public string get_OrderSM();
    [CompilerGeneratedAttribute]
public void set_OrderSM(string value);
    [CompilerGeneratedAttribute]
public string get_OrderMD();
    [CompilerGeneratedAttribute]
public void set_OrderMD(string value);
    [CompilerGeneratedAttribute]
public string get_OrderLG();
    [CompilerGeneratedAttribute]
public void set_OrderLG(string value);
    [CompilerGeneratedAttribute]
public string get_OrderXL();
    [CompilerGeneratedAttribute]
public void set_OrderXL(string value);
    [CompilerGeneratedAttribute]
public string get_OrderXX();
    [CompilerGeneratedAttribute]
public void set_OrderXX(string value);
    protected string GetStyle();
    protected string GetComponentStyle();
    protected virtual string GetComponentCssClass();
    private string GetColumnValue(string name, object value);
    private string GetOrderValue(string name, string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__89_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenColumnOptions : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public double Margin { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Width { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public double get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    protected virtual void Initialize();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenColumnSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Fills>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <FillRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <StrokeRange>k__BackingField;
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Fills { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Strokes { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> FillRange { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> StrokeRange { get; public set; }
    public string Color { get; }
    private int Radzen.Blazor.IChartColumnSeries.Count { get; }
    private IList`1<IChartSeries> ColumnSeries { get; }
    private IList`1<IChartSeries> VisibleColumnSeries { get; }
    private double BandWidth { get; }
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fills();
    [CompilerGeneratedAttribute]
public void set_Fills(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_FillRange();
    [CompilerGeneratedAttribute]
public void set_FillRange(IList`1<SeriesColorRange> value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_StrokeRange();
    [CompilerGeneratedAttribute]
public void set_StrokeRange(IList`1<SeriesColorRange> value);
    public virtual string get_Color();
    private sealed virtual override int Radzen.Blazor.IChartColumnSeries.get_Count();
    private IList`1<IChartSeries> get_ColumnSeries();
    private IList`1<IChartSeries> get_VisibleColumnSeries();
    protected virtual string TooltipStyle(TItem item);
    private double get_BandWidth();
    public virtual bool Contains(double x, double y, double tolerance);
    internal virtual double TooltipX(TItem item);
    internal virtual double TooltipY(TItem item);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenCompareValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private CompareOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnComponentValueChange>k__BackingField;
    private bool firstRender;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public CompareOperator Operator { get; public set; }
    [ParameterAttribute]
public bool ValidateOnComponentValueChange { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public CompareOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(CompareOperator value);
    [CompilerGeneratedAttribute]
public virtual bool get_ValidateOnComponentValueChange();
    [CompilerGeneratedAttribute]
public virtual void set_ValidateOnComponentValueChange(bool value);
    private int Compare(object componentValue);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenCompareValidator/<SetParametersAsync>d__17")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual bool Validate(IRadzenFormComponent component);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenComponents : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
}
public class Radzen.Blazor.RadzenContent : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    [ParameterAttribute]
public string Container { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(string value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenContentContainer : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ParameterAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenContextMenu : ComponentBase {
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextMenuService <Service>k__BackingField;
    private List`1<ContextMenu> menus;
    [CompilerGeneratedAttribute]
private bool <IsJSRuntimeAvailable>k__BackingField;
    private DotNetObjectReference`1<RadzenContextMenu> reference;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    public string UniqueID { get; public set; }
    [InjectAttribute]
private ContextMenuService Service { get; private set; }
    private bool IsJSRuntimeAvailable { get; private set; }
    protected DotNetObjectReference`1<RadzenContextMenu> Reference { get; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(string value);
    [CompilerGeneratedAttribute]
private ContextMenuService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(ContextMenuService value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenContextMenu/<Open>d__9")]
public Task Open(MouseEventArgs args, ContextMenuOptions options);
    [CompilerGeneratedAttribute]
private bool get_IsJSRuntimeAvailable();
    [CompilerGeneratedAttribute]
private void set_IsJSRuntimeAvailable(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenContextMenu/<OnAfterRenderAsync>d__14")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected DotNetObjectReference`1<RadzenContextMenu> get_Reference();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenContextMenu/<Close>d__18")]
public Task Close();
    [JSInvokableAttribute("RadzenContextMenu.CloseMenu")]
public void CloseMenu();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenContextMenu/<DisposeAsync>d__20")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void OnInitialized();
    private void OnOpen(MouseEventArgs args, ContextMenuOptions options);
    private void OnClose();
    private void OnNavigate();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private void <Open>b__9_0();
    [CompilerGeneratedAttribute]
private void <Close>b__18_0();
}
public class Radzen.Blazor.RadzenCustomValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <Validator>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public Func`1<bool> Validator { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(Func`1<bool> value);
    protected virtual bool Validate(IRadzenFormComponent component);
}
public class Radzen.Blazor.RadzenDataAnnotationValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageSeparator>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string MessageSeparator { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_MessageSeparator();
    [CompilerGeneratedAttribute]
public void set_MessageSeparator(string value);
    protected virtual bool Validate(IRadzenFormComponent component);
}
[CascadingTypeParameterAttribute("TItem")]
public class Radzen.Blazor.RadzenDataFilter`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <Properties>k__BackingField;
    private IEnumerable`1<TItem> _data;
    private IQueryable`1<TItem> _view;
    [CompilerGeneratedAttribute]
private bool <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CompositeFilterDescriptor> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCaseSensitivity <FilterCaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumFilterSelectText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndOperatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrOperatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplyFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoveFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddFilterGroupText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LessThanText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LessThanOrEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreaterThanText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreaterThanOrEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndsWithText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DoesNotContainText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartsWithText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNotNullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsEmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNotEmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowColumnFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueFilters>k__BackingField;
    internal List`1<RadzenDataFilterProperty`1<TItem>> properties;
    [CompilerGeneratedAttribute]
private EventCallback`1<IQueryable`1<TItem>> <ViewChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterDateFormat>k__BackingField;
    [ParameterAttribute]
public RenderFragment Properties { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<TItem> Data { get; public set; }
    public IQueryable`1<TItem> View { get; }
    [ParameterAttribute]
public bool Auto { get; public set; }
    public IEnumerable`1<CompositeFilterDescriptor> Filters { get; public set; }
    [ParameterAttribute]
public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    [ParameterAttribute]
public FilterCaseSensitivity FilterCaseSensitivity { get; public set; }
    [ParameterAttribute]
public string FilterText { get; public set; }
    [ParameterAttribute]
public string EnumFilterSelectText { get; public set; }
    [ParameterAttribute]
public string AndOperatorText { get; public set; }
    [ParameterAttribute]
public string OrOperatorText { get; public set; }
    [ParameterAttribute]
public string ApplyFilterText { get; public set; }
    [ParameterAttribute]
public string ClearFilterText { get; public set; }
    [ParameterAttribute]
public string AddFilterText { get; public set; }
    [ParameterAttribute]
public string RemoveFilterText { get; public set; }
    [ParameterAttribute]
public string AddFilterGroupText { get; public set; }
    [ParameterAttribute]
public string EqualsText { get; public set; }
    [ParameterAttribute]
public string NotEqualsText { get; public set; }
    [ParameterAttribute]
public string LessThanText { get; public set; }
    [ParameterAttribute]
public string LessThanOrEqualsText { get; public set; }
    [ParameterAttribute]
public string GreaterThanText { get; public set; }
    [ParameterAttribute]
public string GreaterThanOrEqualsText { get; public set; }
    [ParameterAttribute]
public string EndsWithText { get; public set; }
    [ParameterAttribute]
public string ContainsText { get; public set; }
    [ParameterAttribute]
public string DoesNotContainText { get; public set; }
    [ParameterAttribute]
public string StartsWithText { get; public set; }
    [ParameterAttribute]
public string IsNotNullText { get; public set; }
    [ParameterAttribute]
public string IsNullText { get; public set; }
    [ParameterAttribute]
public string IsEmptyText { get; public set; }
    [ParameterAttribute]
public string IsNotEmptyText { get; public set; }
    [ParameterAttribute]
public bool AllowColumnFiltering { get; public set; }
    [ParameterAttribute]
public bool UniqueFilters { get; public set; }
    public IList`1<RadzenDataFilterProperty`1<TItem>> PropertiesCollection { get; }
    [ParameterAttribute]
public EventCallback`1<IQueryable`1<TItem>> ViewChanged { get; public set; }
    [ParameterAttribute]
public string FilterDateFormat { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public RenderFragment get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(RenderFragment value);
    public IEnumerable`1<TItem> get_Data();
    public void set_Data(IEnumerable`1<TItem> value);
    public virtual IQueryable`1<TItem> get_View();
    [CompilerGeneratedAttribute]
public bool get_Auto();
    [CompilerGeneratedAttribute]
public void set_Auto(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CompositeFilterDescriptor> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IEnumerable`1<CompositeFilterDescriptor> value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
    [CompilerGeneratedAttribute]
public FilterCaseSensitivity get_FilterCaseSensitivity();
    [CompilerGeneratedAttribute]
public void set_FilterCaseSensitivity(FilterCaseSensitivity value);
    [CompilerGeneratedAttribute]
public string get_FilterText();
    [CompilerGeneratedAttribute]
public void set_FilterText(string value);
    [CompilerGeneratedAttribute]
public string get_EnumFilterSelectText();
    [CompilerGeneratedAttribute]
public void set_EnumFilterSelectText(string value);
    [CompilerGeneratedAttribute]
public string get_AndOperatorText();
    [CompilerGeneratedAttribute]
public void set_AndOperatorText(string value);
    [CompilerGeneratedAttribute]
public string get_OrOperatorText();
    [CompilerGeneratedAttribute]
public void set_OrOperatorText(string value);
    [CompilerGeneratedAttribute]
public string get_ApplyFilterText();
    [CompilerGeneratedAttribute]
public void set_ApplyFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_ClearFilterText();
    [CompilerGeneratedAttribute]
public void set_ClearFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_AddFilterText();
    [CompilerGeneratedAttribute]
public void set_AddFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_RemoveFilterText();
    [CompilerGeneratedAttribute]
public void set_RemoveFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_AddFilterGroupText();
    [CompilerGeneratedAttribute]
public void set_AddFilterGroupText(string value);
    [CompilerGeneratedAttribute]
public string get_EqualsText();
    [CompilerGeneratedAttribute]
public void set_EqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_NotEqualsText();
    [CompilerGeneratedAttribute]
public void set_NotEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_LessThanText();
    [CompilerGeneratedAttribute]
public void set_LessThanText(string value);
    [CompilerGeneratedAttribute]
public string get_LessThanOrEqualsText();
    [CompilerGeneratedAttribute]
public void set_LessThanOrEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_GreaterThanText();
    [CompilerGeneratedAttribute]
public void set_GreaterThanText(string value);
    [CompilerGeneratedAttribute]
public string get_GreaterThanOrEqualsText();
    [CompilerGeneratedAttribute]
public void set_GreaterThanOrEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_EndsWithText();
    [CompilerGeneratedAttribute]
public void set_EndsWithText(string value);
    [CompilerGeneratedAttribute]
public string get_ContainsText();
    [CompilerGeneratedAttribute]
public void set_ContainsText(string value);
    [CompilerGeneratedAttribute]
public string get_DoesNotContainText();
    [CompilerGeneratedAttribute]
public void set_DoesNotContainText(string value);
    [CompilerGeneratedAttribute]
public string get_StartsWithText();
    [CompilerGeneratedAttribute]
public void set_StartsWithText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNotNullText();
    [CompilerGeneratedAttribute]
public void set_IsNotNullText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNullText();
    [CompilerGeneratedAttribute]
public void set_IsNullText(string value);
    [CompilerGeneratedAttribute]
public string get_IsEmptyText();
    [CompilerGeneratedAttribute]
public void set_IsEmptyText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNotEmptyText();
    [CompilerGeneratedAttribute]
public void set_IsNotEmptyText(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowColumnFiltering();
    [CompilerGeneratedAttribute]
public void set_AllowColumnFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueFilters();
    [CompilerGeneratedAttribute]
public void set_UniqueFilters(bool value);
    public IList`1<RadzenDataFilterProperty`1<TItem>> get_PropertiesCollection();
    internal void AddProperty(RadzenDataFilterProperty`1<TItem> property);
    internal void RemoveProperty(RadzenDataFilterProperty`1<TItem> property);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<Filter>d__133")]
public Task Filter();
    [CompilerGeneratedAttribute]
public EventCallback`1<IQueryable`1<TItem>> get_ViewChanged();
    [CompilerGeneratedAttribute]
public void set_ViewChanged(EventCallback`1<IQueryable`1<TItem>> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<ChangeState>d__138")]
internal Task ChangeState();
    [CompilerGeneratedAttribute]
public string get_FilterDateFormat();
    [CompilerGeneratedAttribute]
public void set_FilterDateFormat(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<AddFilter>d__143")]
internal Task AddFilter(bool isGroup);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<ClearFilters>d__144")]
public Task ClearFilters();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<AddFilter>d__145")]
public Task AddFilter(CompositeFilterDescriptor filter);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilter`1/<RemoveFilter>d__146")]
public Task RemoveFilter(CompositeFilterDescriptor filter);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_2(LogicalFilterOperator args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_3(LogicalFilterOperator __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_5(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__147_6(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__147_7(RadzenSplitButtonItem args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__147_8(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenDataFilterItem`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenDataFilter`1<TItem> <DataFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataFilterItem`1<TItem> <Parent>k__BackingField;
    private CompositeFilterDescriptor _filter;
    private RadzenDataFilterProperty`1<TItem> property;
    [ParameterAttribute]
public RadzenDataFilter`1<TItem> DataFilter { get; public set; }
    [ParameterAttribute]
public RadzenDataFilterItem`1<TItem> Parent { get; public set; }
    [ParameterAttribute]
public CompositeFilterDescriptor Filter { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenDataFilter`1<TItem> get_DataFilter();
    [CompilerGeneratedAttribute]
public void set_DataFilter(RadzenDataFilter`1<TItem> value);
    [CompilerGeneratedAttribute]
public RadzenDataFilterItem`1<TItem> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(RadzenDataFilterItem`1<TItem> value);
    public CompositeFilterDescriptor get_Filter();
    public void set_Filter(CompositeFilterDescriptor value);
    private void OnFilterValueChange(object value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<ApplyFilter>d__15")]
private Task ApplyFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<OnPropertyChange>d__16")]
private Task OnPropertyChange(object p);
    private bool IsOperatorNullOrEmpty();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<OnOperatorChange>d__18")]
private Task OnOperatorChange(object p);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<AddFilter>d__19")]
private Task AddFilter(bool isGroup);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<RemoveFilter>d__20")]
private Task RemoveFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterItem`1/<ChangeState>d__21")]
internal Task ChangeState();
    private RenderFragment DrawNumericFilter();
    internal string getFilterDateFormat();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(LogicalFilterOperator args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(LogicalFilterOperator __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_3(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_4(RadzenSplitButtonItem args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_5(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_6(string __value);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType6`2<string, FilterOperator> <BuildRenderTree>b__0_9(FilterOperator t);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_10(Nullable`1<FilterOperator> __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_12(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_13(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_15(Nullable`1<DateTime> args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_16(object __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_18(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_19(object __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_21(string args);
    [CompilerGeneratedAttribute]
private bool <set_Filter>b__12_0(RadzenDataFilterProperty`1<TItem> f);
    [CompilerGeneratedAttribute]
private bool <RemoveFilter>b__20_0(CompositeFilterDescriptor f);
    [CompilerGeneratedAttribute]
private bool <RemoveFilter>b__20_1(CompositeFilterDescriptor f);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <DrawNumericFilter>b__22_0(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private void <DrawNumericFilter>b__22_1(object args);
}
public class Radzen.Blazor.RadzenDataFilterProperty`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private Action`1<object> FilterValueChange;
    [CompilerGeneratedAttribute]
private RadzenDataFilter`1<TItem> <DataFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    private Nullable`1<bool> _visible;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<CompositeFilterDescriptor> <FilterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    private Func`2<TItem, object> propertyValueGetter;
    private Type _filterPropertyType;
    private object filterValue;
    private Nullable`1<FilterOperator> filterOperator;
    [CompilerGeneratedAttribute]
private FilterOperator <FilterOperator>k__BackingField;
    [CascadingParameterAttribute]
public RadzenDataFilter`1<TItem> DataFilter { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Property { get; public set; }
    [ParameterAttribute]
public bool IsSelected { get; public set; }
    [ParameterAttribute]
public object FilterValue { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<CompositeFilterDescriptor> FilterTemplate { get; public set; }
    [ParameterAttribute]
public Type Type { get; public set; }
    public Type FilterPropertyType { get; }
    [ParameterAttribute]
public FilterOperator FilterOperator { get; public set; }
    [CompilerGeneratedAttribute]
internal void add_FilterValueChange(Action`1<object> value);
    [CompilerGeneratedAttribute]
internal void remove_FilterValueChange(Action`1<object> value);
    [CompilerGeneratedAttribute]
public RadzenDataFilter`1<TItem> get_DataFilter();
    [CompilerGeneratedAttribute]
public void set_DataFilter(RadzenDataFilter`1<TItem> value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    internal void RemoveColumn(RadzenDataFilterProperty`1<TItem> property);
    protected virtual void OnInitialized();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    public bool GetVisible();
    internal void SetVisible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<CompositeFilterDescriptor> get_FilterTemplate();
    [CompilerGeneratedAttribute]
public void set_FilterTemplate(RenderFragment`1<CompositeFilterDescriptor> value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    internal object GetHeader();
    public string GetFilterProperty();
    public Type get_FilterPropertyType();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataFilterProperty`1/<SetParametersAsync>d__52")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public object GetFilterValue();
    public FilterOperator GetFilterOperator();
    public void SetFilterValue(object value);
    internal bool CanSetFilterValue();
    public void ClearFilters();
    [CompilerGeneratedAttribute]
public FilterOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(FilterOperator value);
    public void SetFilterOperator(Nullable`1<FilterOperator> value);
    public virtual IEnumerable`1<FilterOperator> GetFilterOperators();
    internal string GetFilterOperatorText(FilterOperator filterOperator);
    internal string GetFilterOperatorSymbol(FilterOperator filterOperator);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private bool <GetFilterOperators>b__63_1(FilterOperator o);
}
[CascadingTypeParameterAttribute("TItem")]
public class Radzen.Blazor.RadzenDataGrid`1 : PagedDataBoundComponent`1<TItem> {
    [CompilerGeneratedAttribute]
private bool <AllowVirtualization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirtualizationOverscanCount>k__BackingField;
    internal Virtualize`1<TItem> virtualize;
    internal Virtualize`1<GroupResult> groupVirtualize;
    private List`1<TItem> virtualDataItems;
    private string lastLoadDataArgs;
    private Task lastLoadDataTask;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridLoadColumnFilterDataEventArgs`1<TItem>> <LoadColumnFilterData>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridLoadChildDataEventArgs`1<TItem>> <LoadChildData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandChildItemAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandGroupAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterToggleAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCompositeDataCells>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowEmptyMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Responsive>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <EnumFilterTranslationFunc>k__BackingField;
    private IEnumerable`1<GroupResult> _groupedPagedView;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnGroupEventArgs`1<TItem>> <Group>k__BackingField;
    private bool preventKeyDown;
    private int focusedIndex;
    private int focusedCellIndex;
    [CompilerGeneratedAttribute]
private EventCallback`1<KeyboardEventArgs> <KeyDown>k__BackingField;
    private List`1<RadzenDataGridColumn`1<TItem>> columns;
    internal List`1<RadzenDataGridColumn`1<TItem>> childColumns;
    internal List`1<RadzenDataGridColumn`1<TItem>> allColumns;
    private List`1<RadzenDataGridColumn`1<TItem>> allPickableColumns;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterTemplate>k__BackingField;
    internal object selectedColumns;
    [CompilerGeneratedAttribute]
private RenderFragment <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridPickedColumnsChangedEventArgs`1<TItem>> <PickedColumnsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnSortEventArgs`1<TItem>> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> <FilterCleared>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupRenderMode <FilterPopupRenderMode>k__BackingField;
    internal Dictionary`2<int, int> rowSpans;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterMode <FilterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridExpandMode <ExpandMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowExpandColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridEditMode <EditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumFilterSelectText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumNullFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndOperatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrOperatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplyFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearFilterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LessThanText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LessThanOrEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreaterThanText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreaterThanOrEqualsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndsWithText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DoesNotContainText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartsWithText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNotNullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsEmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNotEmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCaseSensitivity <FilterCaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilterDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterDateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFilterDateInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnWidth>k__BackingField;
    private string _emptyText;
    [CompilerGeneratedAttribute]
private RenderFragment <EmptyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <EditTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSorting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiColumnSorting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMultiColumnSortingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowColumnResize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowColumnReorder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowColumnPicking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCellDataAsTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColumnTitleAsTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnsShowingText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnsPickerMaxSelectedLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllColumnsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoveGroupAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectVisibleColumnsAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalOperatorAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterOperatorAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondFilterOperatorAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterValueAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondFilterValueAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPickAllColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ColumnsPickerAllowFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideGroupedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GroupFootersAlwaysVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<Group> <GroupHeaderTemplate>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<ValueTuple`2<Group, RadzenDataGridGroupRow`1<TItem>>> <GroupHeaderToggleTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupPanelText>k__BackingField;
    private Nullable`1<int> indexOfColumnToReoder;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnResizedEventArgs`1<TItem>> <ColumnResized>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnReorderingEventArgs`1<TItem>> <ColumnReordering>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridColumnReorderedEventArgs`1<TItem>> <ColumnReordered>k__BackingField;
    private IList`1<TItem> _value;
    [CompilerGeneratedAttribute]
private EventCallback`1<IList`1<TItem>> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowDeselect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> <RowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> <RowDoubleClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> <CellClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> <CellDoubleClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> <CellContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Group> <GroupRowExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowCollapse>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Group> <GroupRowCollapse>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RowRenderEventArgs`1<TItem>> <RowRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<GroupRowRenderEventArgs> <GroupRowRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridCellRenderEventArgs`1<TItem>> <CellRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridCellRenderEventArgs`1<TItem>> <HeaderCellRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridCellRenderEventArgs`1<TItem>> <FooterCellRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridRenderEventArgs`1<TItem>> <Render>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DataGridRenderEventArgs`1<TItem>, Task> <RenderAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridLoadSettingsEventArgs> <LoadSettings>k__BackingField;
    private IEnumerable`1<FilterDescriptor> filters;
    internal Dictionary`2<RadzenDataGridGroupRow`1<TItem>, bool> collapsedGroupItems;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllGroupsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<bool>> <AllGroupsExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyProperty>k__BackingField;
    internal Func`2<TItem, object> keyPropertyGetter;
    internal Nullable`1<bool> allGroupsExpanded;
    internal Dictionary`2<TItem, bool> expandedItems;
    internal Dictionary`2<TItem, bool> selectedItems;
    private bool settingsChanged;
    private bool visibleChanged;
    internal bool firstRender;
    internal Dictionary`2<TItem, DataGridChildData`1<TItem>> childData;
    [CompilerGeneratedAttribute]
private bool <AllowRowSelectOnRowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAlternatingRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGroupExpandColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridGridLines <GridLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GotoFirstPageOnSort>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridSelectionMode <SelectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <RowCreate>k__BackingField;
    internal Dictionary`2<TItem, bool> editedItems;
    internal Dictionary`2<TItem, EditContext> editContexts;
    private IList`1<TItem> itemsToInsert;
    private Nullable`1<bool> isOData;
    internal List`1<SortDescriptor> sorts;
    private List`1<RadzenDataGridColumn`1<TItem>> groupedColumns;
    private ObservableCollection`1<GroupDescriptor> groups;
    private ObservableCollection`1<SortDescriptor> sortDescriptors;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    internal int deepestChildColumnLevel;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <PageSizeChanged>k__BackingField;
    private bool canSaveSettings;
    private DataGridSettings settings;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridSettings> <SettingsChanged>k__BackingField;
    private bool clicking;
    [ParameterAttribute]
public bool AllowVirtualization { get; public set; }
    [ParameterAttribute]
public int VirtualizationOverscanCount { get; public set; }
    public Virtualize`1<TItem> Virtualize { get; }
    [ParameterAttribute]
public EventCallback`1<DataGridLoadColumnFilterDataEventArgs`1<TItem>> LoadColumnFilterData { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridLoadChildDataEventArgs`1<TItem>> LoadChildData { get; public set; }
    [ParameterAttribute]
public string ExpandChildItemAriaLabel { get; public set; }
    [ParameterAttribute]
public string ExpandGroupAriaLabel { get; public set; }
    [ParameterAttribute]
public string FilterToggleAriaLabel { get; public set; }
    [ParameterAttribute]
public bool AllowCompositeDataCells { get; public set; }
    [ParameterAttribute]
public bool ShowEmptyMessage { get; public set; }
    [ParameterAttribute]
public bool Responsive { get; public set; }
    [ParameterAttribute]
public Func`2<string, string> EnumFilterTranslationFunc { get; public set; }
    public IEnumerable`1<GroupResult> GroupedPagedView { get; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnGroupEventArgs`1<TItem>> Group { get; public set; }
    [ParameterAttribute]
public EventCallback`1<KeyboardEventArgs> KeyDown { get; public set; }
    [ParameterAttribute]
public RenderFragment HeaderTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment FooterTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment Columns { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridPickedColumnsChangedEventArgs`1<TItem>> PickedColumnsChanged { get; public set; }
    public IList`1<RadzenDataGridColumn`1<TItem>> ColumnsCollection { get; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnSortEventArgs`1<TItem>> Sort { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> Filter { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> FilterCleared { get; public set; }
    [ParameterAttribute]
public PopupRenderMode FilterPopupRenderMode { get; public set; }
    [ParameterAttribute]
public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    [ParameterAttribute]
public FilterMode FilterMode { get; public set; }
    [ParameterAttribute]
public DataGridExpandMode ExpandMode { get; public set; }
    [ParameterAttribute]
public bool ShowExpandColumn { get; public set; }
    [ParameterAttribute]
public DataGridEditMode EditMode { get; public set; }
    [ParameterAttribute]
public string FilterIcon { get; public set; }
    [ParameterAttribute]
public string FilterText { get; public set; }
    [ParameterAttribute]
public string EnumFilterSelectText { get; public set; }
    [ParameterAttribute]
public string EnumNullFilterText { get; public set; }
    [ParameterAttribute]
public string AndOperatorText { get; public set; }
    [ParameterAttribute]
public string OrOperatorText { get; public set; }
    [ParameterAttribute]
public string ApplyFilterText { get; public set; }
    [ParameterAttribute]
public string ClearFilterText { get; public set; }
    [ParameterAttribute]
public string EqualsText { get; public set; }
    [ParameterAttribute]
public string NotEqualsText { get; public set; }
    [ParameterAttribute]
public string LessThanText { get; public set; }
    [ParameterAttribute]
public string LessThanOrEqualsText { get; public set; }
    [ParameterAttribute]
public string GreaterThanText { get; public set; }
    [ParameterAttribute]
public string GreaterThanOrEqualsText { get; public set; }
    [ParameterAttribute]
public string EndsWithText { get; public set; }
    [ParameterAttribute]
public string ContainsText { get; public set; }
    [ParameterAttribute]
public string DoesNotContainText { get; public set; }
    [ParameterAttribute]
public string StartsWithText { get; public set; }
    [ParameterAttribute]
public string IsNotNullText { get; public set; }
    [ParameterAttribute]
public string IsNullText { get; public set; }
    [ParameterAttribute]
public string IsEmptyText { get; public set; }
    [ParameterAttribute]
public string IsNotEmptyText { get; public set; }
    [ParameterAttribute]
public FilterCaseSensitivity FilterCaseSensitivity { get; public set; }
    [ParameterAttribute]
public int FilterDelay { get; public set; }
    [ParameterAttribute]
public string FilterDateFormat { get; public set; }
    [ParameterAttribute]
public bool AllowFilterDateInput { get; public set; }
    [ParameterAttribute]
public string ColumnWidth { get; public set; }
    [ParameterAttribute]
public string EmptyText { get; public set; }
    [ParameterAttribute]
public RenderFragment EmptyTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> EditTemplate { get; public set; }
    [ParameterAttribute]
public bool IsLoading { get; public set; }
    [ParameterAttribute]
public bool AllowSorting { get; public set; }
    [ParameterAttribute]
public bool AllowMultiColumnSorting { get; public set; }
    [ParameterAttribute]
public bool ShowMultiColumnSortingIndex { get; public set; }
    [ParameterAttribute]
public bool AllowFiltering { get; public set; }
    [ParameterAttribute]
public bool AllowColumnResize { get; public set; }
    [ParameterAttribute]
public bool AllowColumnReorder { get; public set; }
    [ParameterAttribute]
public bool AllowColumnPicking { get; public set; }
    [ParameterAttribute]
public bool ShowCellDataAsTooltip { get; public set; }
    [ParameterAttribute]
public bool ShowColumnTitleAsTooltip { get; public set; }
    [ParameterAttribute]
public string ColumnsShowingText { get; public set; }
    [ParameterAttribute]
public int ColumnsPickerMaxSelectedLabels { get; public set; }
    [ParameterAttribute]
public string AllColumnsText { get; public set; }
    [ParameterAttribute]
public string ColumnsText { get; public set; }
    [ParameterAttribute]
public string RemoveGroupAriaLabel { get; public set; }
    [ParameterAttribute]
public string SelectVisibleColumnsAriaLabel { get; public set; }
    [ParameterAttribute]
public string LogicalOperatorAriaLabel { get; public set; }
    [ParameterAttribute]
public string FilterOperatorAriaLabel { get; public set; }
    [ParameterAttribute]
public string SecondFilterOperatorAriaLabel { get; public set; }
    [ParameterAttribute]
public string FilterValueAriaLabel { get; public set; }
    [ParameterAttribute]
public string SecondFilterValueAriaLabel { get; public set; }
    [ParameterAttribute]
public bool AllowPickAllColumns { get; public set; }
    [ParameterAttribute]
public bool ColumnsPickerAllowFiltering { get; public set; }
    [ParameterAttribute]
public bool AllowGrouping { get; public set; }
    [ParameterAttribute]
public bool HideGroupedColumn { get; public set; }
    [ParameterAttribute]
public bool GroupFootersAlwaysVisible { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<Group> GroupHeaderTemplate { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<ValueTuple`2<Group, RadzenDataGridGroupRow`1<TItem>>> GroupHeaderToggleTemplate { get; public set; }
    [ParameterAttribute]
public string GroupPanelText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnResizedEventArgs`1<TItem>> ColumnResized { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnReorderingEventArgs`1<TItem>> ColumnReordering { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridColumnReorderedEventArgs`1<TItem>> ColumnReordered { get; public set; }
    public IQueryable`1<TItem> View { get; }
    [ParameterAttribute]
public IList`1<TItem> Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<IList`1<TItem>> ValueChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowSelect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowDeselect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> RowClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> RowDoubleClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> CellClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> CellDoubleClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> CellContextMenu { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowExpand { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Group> GroupRowExpand { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowCollapse { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Group> GroupRowCollapse { get; public set; }
    [ParameterAttribute]
public Action`1<RowRenderEventArgs`1<TItem>> RowRender { get; public set; }
    [ParameterAttribute]
public Action`1<GroupRowRenderEventArgs> GroupRowRender { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> CellRender { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> HeaderCellRender { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> FooterCellRender { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridRenderEventArgs`1<TItem>> Render { get; public set; }
    [ParameterAttribute]
public Func`2<DataGridRenderEventArgs`1<TItem>, Task> RenderAsync { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridLoadSettingsEventArgs> LoadSettings { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> AllGroupsExpanded { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<bool>> AllGroupsExpandedChanged { get; public set; }
    [ParameterAttribute]
public string KeyProperty { get; public set; }
    [ParameterAttribute]
public bool AllowRowSelectOnRowClick { get; public set; }
    [ParameterAttribute]
public bool AllowAlternatingRows { get; public set; }
    [ParameterAttribute]
public bool ShowGroupExpandColumn { get; public set; }
    [ParameterAttribute]
public DataGridGridLines GridLines { get; public set; }
    [ParameterAttribute]
public bool GotoFirstPageOnSort { get; public set; }
    [ParameterAttribute]
public DataGridSelectionMode SelectionMode { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowEdit { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowUpdate { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> RowCreate { get; public set; }
    public ObservableCollection`1<GroupDescriptor> Groups { get; public set; }
    public ObservableCollection`1<SortDescriptor> Sorts { get; public set; }
    public Query Query { get; private set; }
    internal string PopupID { get; }
    [ParameterAttribute]
public EventCallback`1<int> PageSizeChanged { get; public set; }
    [ParameterAttribute]
public DataGridSettings Settings { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridSettings> SettingsChanged { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowVirtualization();
    [CompilerGeneratedAttribute]
public void set_AllowVirtualization(bool value);
    [CompilerGeneratedAttribute]
public int get_VirtualizationOverscanCount();
    [CompilerGeneratedAttribute]
public void set_VirtualizationOverscanCount(int value);
    internal void SetAllowVirtualization(bool allowVirtualization);
    public Virtualize`1<TItem> get_Virtualize();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<RefreshDataAsync>d__14")]
public Task RefreshDataAsync();
    public void ResetLoadData();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<LoadItems>d__18")]
private ValueTask`1<ItemsProviderResult`1<TItem>> LoadItems(ItemsProviderRequest request);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<LoadGroups>d__19")]
private ValueTask`1<ItemsProviderResult`1<GroupResult>> LoadGroups(ItemsProviderRequest request);
    private RenderFragment DrawRows(IList`1<RadzenDataGridColumn`1<TItem>> visibleColumns);
    internal void DrawGroupOrDataRows(RenderTreeBuilder builder, IList`1<RadzenDataGridColumn`1<TItem>> visibleColumns);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridLoadColumnFilterDataEventArgs`1<TItem>> get_LoadColumnFilterData();
    [CompilerGeneratedAttribute]
public void set_LoadColumnFilterData(EventCallback`1<DataGridLoadColumnFilterDataEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridLoadChildDataEventArgs`1<TItem>> get_LoadChildData();
    [CompilerGeneratedAttribute]
public void set_LoadChildData(EventCallback`1<DataGridLoadChildDataEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public string get_ExpandChildItemAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ExpandChildItemAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ExpandGroupAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ExpandGroupAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_FilterToggleAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FilterToggleAriaLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowCompositeDataCells();
    [CompilerGeneratedAttribute]
public void set_AllowCompositeDataCells(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowEmptyMessage();
    [CompilerGeneratedAttribute]
public void set_ShowEmptyMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Responsive();
    [CompilerGeneratedAttribute]
public void set_Responsive(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_EnumFilterTranslationFunc();
    [CompilerGeneratedAttribute]
public void set_EnumFilterTranslationFunc(Func`2<string, string> value);
    public IEnumerable`1<GroupResult> get_GroupedPagedView();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<RemoveGroupAsync>d__61")]
internal Task RemoveGroupAsync(GroupDescriptor gd);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnGroupEventArgs`1<TItem>> get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(EventCallback`1<DataGridColumnGroupEventArgs`1<TItem>> value);
    internal string getFrozenColumnClass(RadzenDataGridColumn`1<TItem> column, IList`1<RadzenDataGridColumn`1<TItem>> visibleColumns);
    internal string getColumnAlignClass(RadzenDataGridColumn`1<TItem> column);
    protected string DateFilterOperatorStyle(RadzenDataGridColumn`1<TItem> column, FilterOperator value);
    internal string GridId();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<FocusRow>d__73")]
private Task FocusRow(string key);
    [CompilerGeneratedAttribute]
public EventCallback`1<KeyboardEventArgs> get_KeyDown();
    [CompilerGeneratedAttribute]
public void set_KeyDown(EventCallback`1<KeyboardEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnKeyDown>d__78")]
protected virtual Task OnKeyDown(KeyboardEventArgs args);
    protected virtual void OnFilterKeyPress(EventArgs args, RadzenDataGridColumn`1<TItem> column);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<DebounceFilter>d__80")]
private Task DebounceFilter(RadzenDataGridColumn`1<TItem> column);
    protected void ApplyDateFilterByFilterOperator(RadzenDataGridColumn`1<TItem> column, FilterOperator filterOperator);
    internal IJSRuntime GetJSRuntime();
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(RenderFragment value);
    internal void UpdateColumnsOrder();
    internal void AddColumn(RadzenDataGridColumn`1<TItem> column);
    internal void UpdatePickableColumn(RadzenDataGridColumn`1<TItem> column, bool visible);
    public void UpdatePickableColumns();
    internal void RemoveColumn(RadzenDataGridColumn`1<TItem> column);
    private void ToggleColumns();
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridPickedColumnsChangedEventArgs`1<TItem>> get_PickedColumnsChanged();
    [CompilerGeneratedAttribute]
public void set_PickedColumnsChanged(EventCallback`1<DataGridPickedColumnsChangedEventArgs`1<TItem>> value);
    private string getFilterInputId(RadzenDataGridColumn`1<TItem> column);
    internal string getFilterDateFormat(RadzenDataGridColumn`1<TItem> column);
    internal RenderFragment DrawNumericFilter(RadzenDataGridColumn`1<TItem> column, bool force, bool isFirst);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnFilter>d__113")]
protected virtual Task OnFilter(ChangeEventArgs args, RadzenDataGridColumn`1<TItem> column, bool force, bool isFirst);
    public IList`1<RadzenDataGridColumn`1<TItem>> get_ColumnsCollection();
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnSortEventArgs`1<TItem>> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(EventCallback`1<DataGridColumnSortEventArgs`1<TItem>> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnSort>d__120")]
internal Task OnSort(EventArgs args, RadzenDataGridColumn`1<TItem> column);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> get_FilterCleared();
    [CompilerGeneratedAttribute]
public void set_FilterCleared(EventCallback`1<DataGridColumnFilterEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public PopupRenderMode get_FilterPopupRenderMode();
    [CompilerGeneratedAttribute]
public void set_FilterPopupRenderMode(PopupRenderMode value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ClearFilter>d__133")]
public Task ClearFilter(RadzenDataGridColumn`1<TItem> column, bool closePopup, bool shouldReload);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ApplyFilter>d__134")]
public Task ApplyFilter(RadzenDataGridColumn`1<TItem> column, bool closePopup);
    internal IReadOnlyDictionary`2<string, object> CellAttributes(TItem item, RadzenDataGridColumn`1<TItem> column);
    internal IReadOnlyDictionary`2<string, object> HeaderCellAttributes(RadzenDataGridColumn`1<TItem> column);
    internal IReadOnlyDictionary`2<string, object> FooterCellAttributes(RadzenDataGridColumn`1<TItem> column);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
    [CompilerGeneratedAttribute]
public FilterMode get_FilterMode();
    [CompilerGeneratedAttribute]
public void set_FilterMode(FilterMode value);
    [CompilerGeneratedAttribute]
public DataGridExpandMode get_ExpandMode();
    [CompilerGeneratedAttribute]
public void set_ExpandMode(DataGridExpandMode value);
    [CompilerGeneratedAttribute]
public bool get_ShowExpandColumn();
    [CompilerGeneratedAttribute]
public void set_ShowExpandColumn(bool value);
    [CompilerGeneratedAttribute]
public DataGridEditMode get_EditMode();
    [CompilerGeneratedAttribute]
public void set_EditMode(DataGridEditMode value);
    [CompilerGeneratedAttribute]
public string get_FilterIcon();
    [CompilerGeneratedAttribute]
public void set_FilterIcon(string value);
    [CompilerGeneratedAttribute]
public string get_FilterText();
    [CompilerGeneratedAttribute]
public void set_FilterText(string value);
    [CompilerGeneratedAttribute]
public string get_EnumFilterSelectText();
    [CompilerGeneratedAttribute]
public void set_EnumFilterSelectText(string value);
    [CompilerGeneratedAttribute]
public string get_EnumNullFilterText();
    [CompilerGeneratedAttribute]
public void set_EnumNullFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_AndOperatorText();
    [CompilerGeneratedAttribute]
public void set_AndOperatorText(string value);
    [CompilerGeneratedAttribute]
public string get_OrOperatorText();
    [CompilerGeneratedAttribute]
public void set_OrOperatorText(string value);
    [CompilerGeneratedAttribute]
public string get_ApplyFilterText();
    [CompilerGeneratedAttribute]
public void set_ApplyFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_ClearFilterText();
    [CompilerGeneratedAttribute]
public void set_ClearFilterText(string value);
    [CompilerGeneratedAttribute]
public string get_EqualsText();
    [CompilerGeneratedAttribute]
public void set_EqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_NotEqualsText();
    [CompilerGeneratedAttribute]
public void set_NotEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_LessThanText();
    [CompilerGeneratedAttribute]
public void set_LessThanText(string value);
    [CompilerGeneratedAttribute]
public string get_LessThanOrEqualsText();
    [CompilerGeneratedAttribute]
public void set_LessThanOrEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_GreaterThanText();
    [CompilerGeneratedAttribute]
public void set_GreaterThanText(string value);
    [CompilerGeneratedAttribute]
public string get_GreaterThanOrEqualsText();
    [CompilerGeneratedAttribute]
public void set_GreaterThanOrEqualsText(string value);
    [CompilerGeneratedAttribute]
public string get_EndsWithText();
    [CompilerGeneratedAttribute]
public void set_EndsWithText(string value);
    [CompilerGeneratedAttribute]
public string get_ContainsText();
    [CompilerGeneratedAttribute]
public void set_ContainsText(string value);
    [CompilerGeneratedAttribute]
public string get_DoesNotContainText();
    [CompilerGeneratedAttribute]
public void set_DoesNotContainText(string value);
    [CompilerGeneratedAttribute]
public string get_StartsWithText();
    [CompilerGeneratedAttribute]
public void set_StartsWithText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNotNullText();
    [CompilerGeneratedAttribute]
public void set_IsNotNullText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNullText();
    [CompilerGeneratedAttribute]
public void set_IsNullText(string value);
    [CompilerGeneratedAttribute]
public string get_IsEmptyText();
    [CompilerGeneratedAttribute]
public void set_IsEmptyText(string value);
    [CompilerGeneratedAttribute]
public string get_IsNotEmptyText();
    [CompilerGeneratedAttribute]
public void set_IsNotEmptyText(string value);
    [CompilerGeneratedAttribute]
public FilterCaseSensitivity get_FilterCaseSensitivity();
    [CompilerGeneratedAttribute]
public void set_FilterCaseSensitivity(FilterCaseSensitivity value);
    [CompilerGeneratedAttribute]
public int get_FilterDelay();
    [CompilerGeneratedAttribute]
public void set_FilterDelay(int value);
    [CompilerGeneratedAttribute]
public string get_FilterDateFormat();
    [CompilerGeneratedAttribute]
public void set_FilterDateFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowFilterDateInput();
    [CompilerGeneratedAttribute]
public void set_AllowFilterDateInput(bool value);
    [CompilerGeneratedAttribute]
public string get_ColumnWidth();
    [CompilerGeneratedAttribute]
public void set_ColumnWidth(string value);
    public string get_EmptyText();
    public void set_EmptyText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_EmptyTemplate();
    [CompilerGeneratedAttribute]
public void set_EmptyTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_EditTemplate();
    [CompilerGeneratedAttribute]
public void set_EditTemplate(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public bool get_IsLoading();
    [CompilerGeneratedAttribute]
public void set_IsLoading(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowSorting();
    [CompilerGeneratedAttribute]
public void set_AllowSorting(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiColumnSorting();
    [CompilerGeneratedAttribute]
public void set_AllowMultiColumnSorting(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowMultiColumnSortingIndex();
    [CompilerGeneratedAttribute]
public void set_ShowMultiColumnSortingIndex(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowFiltering();
    [CompilerGeneratedAttribute]
public void set_AllowFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowColumnResize();
    [CompilerGeneratedAttribute]
public void set_AllowColumnResize(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowColumnReorder();
    [CompilerGeneratedAttribute]
public void set_AllowColumnReorder(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowColumnPicking();
    [CompilerGeneratedAttribute]
public void set_AllowColumnPicking(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCellDataAsTooltip();
    [CompilerGeneratedAttribute]
public void set_ShowCellDataAsTooltip(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowColumnTitleAsTooltip();
    [CompilerGeneratedAttribute]
public void set_ShowColumnTitleAsTooltip(bool value);
    [CompilerGeneratedAttribute]
public string get_ColumnsShowingText();
    [CompilerGeneratedAttribute]
public void set_ColumnsShowingText(string value);
    [CompilerGeneratedAttribute]
public int get_ColumnsPickerMaxSelectedLabels();
    [CompilerGeneratedAttribute]
public void set_ColumnsPickerMaxSelectedLabels(int value);
    [CompilerGeneratedAttribute]
public string get_AllColumnsText();
    [CompilerGeneratedAttribute]
public void set_AllColumnsText(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnsText();
    [CompilerGeneratedAttribute]
public void set_ColumnsText(string value);
    [CompilerGeneratedAttribute]
public string get_RemoveGroupAriaLabel();
    [CompilerGeneratedAttribute]
public void set_RemoveGroupAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_SelectVisibleColumnsAriaLabel();
    [CompilerGeneratedAttribute]
public void set_SelectVisibleColumnsAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_LogicalOperatorAriaLabel();
    [CompilerGeneratedAttribute]
public void set_LogicalOperatorAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_FilterOperatorAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FilterOperatorAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_SecondFilterOperatorAriaLabel();
    [CompilerGeneratedAttribute]
public void set_SecondFilterOperatorAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_FilterValueAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FilterValueAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_SecondFilterValueAriaLabel();
    [CompilerGeneratedAttribute]
public void set_SecondFilterValueAriaLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowPickAllColumns();
    [CompilerGeneratedAttribute]
public void set_AllowPickAllColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_ColumnsPickerAllowFiltering();
    [CompilerGeneratedAttribute]
public void set_ColumnsPickerAllowFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowGrouping();
    [CompilerGeneratedAttribute]
public void set_AllowGrouping(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideGroupedColumn();
    [CompilerGeneratedAttribute]
public void set_HideGroupedColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_GroupFootersAlwaysVisible();
    [CompilerGeneratedAttribute]
public void set_GroupFootersAlwaysVisible(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<Group> get_GroupHeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderTemplate(RenderFragment`1<Group> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<ValueTuple`2<Group, RadzenDataGridGroupRow`1<TItem>>> get_GroupHeaderToggleTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderToggleTemplate(RenderFragment`1<ValueTuple`2<Group, RadzenDataGridGroupRow`1<TItem>>> value);
    [CompilerGeneratedAttribute]
public string get_GroupPanelText();
    [CompilerGeneratedAttribute]
public void set_GroupPanelText(string value);
    internal string getColumnUniqueId(int columnIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<StartColumnResize>d__397")]
internal Task StartColumnResize(MouseEventArgs args, int columnIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<StopColumnResize>d__398")]
internal Task StopColumnResize(MouseEventArgs args, int columnIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<StartColumnReorder>d__400")]
internal Task StartColumnReorder(MouseEventArgs args, int columnIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<EndColumnReorder>d__401")]
internal Task EndColumnReorder(MouseEventArgs args, int columnIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnColumnResized>d__402")]
[JSInvokableAttribute("RadzenGrid.OnColumnResized")]
public Task OnColumnResized(int columnIndex, double value);
    internal string GetOrderBy();
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnResizedEventArgs`1<TItem>> get_ColumnResized();
    [CompilerGeneratedAttribute]
public void set_ColumnResized(EventCallback`1<DataGridColumnResizedEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnReorderingEventArgs`1<TItem>> get_ColumnReordering();
    [CompilerGeneratedAttribute]
public void set_ColumnReordering(EventCallback`1<DataGridColumnReorderingEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridColumnReorderedEventArgs`1<TItem>> get_ColumnReordered();
    [CompilerGeneratedAttribute]
public void set_ColumnReordered(EventCallback`1<DataGridColumnReorderedEventArgs`1<TItem>> value);
    private IQueryable`1<TItem> GetSelfRefView(IQueryable`1<TItem> view, string orderBy);
    public virtual IQueryable`1<TItem> get_View();
    internal bool IsVirtualizationAllowed();
    public IList`1<TItem> get_Value();
    public void set_Value(IList`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IList`1<TItem>> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<IList`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowSelect();
    [CompilerGeneratedAttribute]
public void set_RowSelect(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowDeselect();
    [CompilerGeneratedAttribute]
public void set_RowDeselect(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> get_RowClick();
    [CompilerGeneratedAttribute]
public void set_RowClick(EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> get_RowDoubleClick();
    [CompilerGeneratedAttribute]
public void set_RowDoubleClick(EventCallback`1<DataGridRowMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> get_CellClick();
    [CompilerGeneratedAttribute]
public void set_CellClick(EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> get_CellDoubleClick();
    [CompilerGeneratedAttribute]
public void set_CellDoubleClick(EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> get_CellContextMenu();
    [CompilerGeneratedAttribute]
public void set_CellContextMenu(EventCallback`1<DataGridCellMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowExpand();
    [CompilerGeneratedAttribute]
public void set_RowExpand(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Group> get_GroupRowExpand();
    [CompilerGeneratedAttribute]
public void set_GroupRowExpand(EventCallback`1<Group> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowCollapse();
    [CompilerGeneratedAttribute]
public void set_RowCollapse(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Group> get_GroupRowCollapse();
    [CompilerGeneratedAttribute]
public void set_GroupRowCollapse(EventCallback`1<Group> value);
    [CompilerGeneratedAttribute]
public Action`1<RowRenderEventArgs`1<TItem>> get_RowRender();
    [CompilerGeneratedAttribute]
public void set_RowRender(Action`1<RowRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Action`1<GroupRowRenderEventArgs> get_GroupRowRender();
    [CompilerGeneratedAttribute]
public void set_GroupRowRender(Action`1<GroupRowRenderEventArgs> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> get_CellRender();
    [CompilerGeneratedAttribute]
public void set_CellRender(Action`1<DataGridCellRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> get_HeaderCellRender();
    [CompilerGeneratedAttribute]
public void set_HeaderCellRender(Action`1<DataGridCellRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridCellRenderEventArgs`1<TItem>> get_FooterCellRender();
    [CompilerGeneratedAttribute]
public void set_FooterCellRender(Action`1<DataGridCellRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridRenderEventArgs`1<TItem>> get_Render();
    [CompilerGeneratedAttribute]
public void set_Render(Action`1<DataGridRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Func`2<DataGridRenderEventArgs`1<TItem>, Task> get_RenderAsync();
    [CompilerGeneratedAttribute]
public void set_RenderAsync(Func`2<DataGridRenderEventArgs`1<TItem>, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridLoadSettingsEventArgs> get_LoadSettings();
    [CompilerGeneratedAttribute]
public void set_LoadSettings(Action`1<DataGridLoadSettingsEventArgs> value);
    protected virtual void OnDataChanged();
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    public void Reset(bool resetColumnState, bool resetRowState);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<Reload>d__507")]
public virtual Task Reload();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ReloadInternal>d__508")]
internal Task ReloadInternal();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<InvokeLoadData>d__510")]
internal Task InvokeLoadData(int start, int top);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ChangeState>d__511")]
internal Task ChangeState();
    protected virtual Task OnParametersSetAsync();
    internal string ExpandedGroupItemStyle(RadzenDataGridGroupRow`1<TItem> item, Nullable`1<bool> expandedOnLoad);
    internal bool IsGroupItemExpanded(RadzenDataGridGroupRow`1<TItem> item);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllGroupsExpanded();
    [CompilerGeneratedAttribute]
public void set_AllGroupsExpanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<bool>> get_AllGroupsExpandedChanged();
    [CompilerGeneratedAttribute]
public void set_AllGroupsExpandedChanged(EventCallback`1<Nullable`1<bool>> value);
    [CompilerGeneratedAttribute]
public string get_KeyProperty();
    [CompilerGeneratedAttribute]
public void set_KeyProperty(string value);
    protected bool ItemEquals(TItem item, TItem otherItem);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ExpandGroupItem>d__531")]
public Task ExpandGroupItem(RadzenDataGridGroupRow`1<TItem> item, Nullable`1<bool> expandedOnLoad);
    internal string ExpandedItemStyle(TItem item);
    internal string RowStyle(TItem item, int index);
    internal Tuple`2<RowRenderEventArgs`1<TItem>, IReadOnlyDictionary`2<string, object>> RowAttributes(TItem item);
    internal Tuple`2<GroupRowRenderEventArgs, IReadOnlyDictionary`2<string, object>> GroupRowAttributes(RadzenDataGridGroupRow`1<TItem> item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<SetParametersAsync>d__541")]
public virtual Task SetParametersAsync(ParameterView parameters);
    private static bool HasChanged(object newValue, T oldValue);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ReloadOnFirstRender>d__543")]
internal virtual Task ReloadOnFirstRender();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnAfterRenderAsync>d__544")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ExpandRow>d__545")]
public Task ExpandRow(TItem item);
    public bool IsRowExpanded(TItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ExpandRows>d__547")]
public Task ExpandRows(IEnumerable`1<TItem> items);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<CollapseAll>d__548")]
public Task CollapseAll();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<CollapseRows>d__549")]
public Task CollapseRows(IEnumerable`1<TItem> items);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<CollapseItem>d__550")]
private Task CollapseItem(TItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ExpandItem>d__551")]
internal Task ExpandItem(TItem item);
    [CompilerGeneratedAttribute]
public bool get_AllowRowSelectOnRowClick();
    [CompilerGeneratedAttribute]
public void set_AllowRowSelectOnRowClick(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAlternatingRows();
    [CompilerGeneratedAttribute]
public void set_AllowAlternatingRows(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowGroupExpandColumn();
    [CompilerGeneratedAttribute]
public void set_ShowGroupExpandColumn(bool value);
    [CompilerGeneratedAttribute]
public DataGridGridLines get_GridLines();
    [CompilerGeneratedAttribute]
public void set_GridLines(DataGridGridLines value);
    internal bool ShowGridLines(RadzenDataGridColumn`1<TItem> column);
    [CompilerGeneratedAttribute]
public bool get_GotoFirstPageOnSort();
    [CompilerGeneratedAttribute]
public void set_GotoFirstPageOnSort(bool value);
    internal string getCompositeCellCSSClass(RadzenDataGridColumn`1<TItem> column);
    internal string getGridLinesCSSClass();
    [CompilerGeneratedAttribute]
public DataGridSelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(DataGridSelectionMode value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnCellContextMenu>d__580")]
internal Task OnCellContextMenu(DataGridCellMouseEventArgs`1<TItem> args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnCellClick>d__581")]
internal Task OnCellClick(DataGridCellMouseEventArgs`1<TItem> args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnCellDblClick>d__582")]
internal Task OnCellDblClick(DataGridCellMouseEventArgs`1<TItem> args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnRowClick>d__583")]
internal Task OnRowClick(DataGridRowMouseEventArgs`1<TItem> args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnRowSelect>d__584")]
internal Task OnRowSelect(TItem item, bool raiseChange);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<SelectRow>d__585")]
public Task SelectRow(TItem item, bool raiseEvent);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnRowDblClick>d__586")]
internal Task OnRowDblClick(DataGridRowMouseEventArgs`1<TItem> args);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowEdit();
    [CompilerGeneratedAttribute]
public void set_RowEdit(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowUpdate();
    [CompilerGeneratedAttribute]
public void set_RowUpdate(EventCallback`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_RowCreate();
    [CompilerGeneratedAttribute]
public void set_RowCreate(EventCallback`1<TItem> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<EditRow>d__601")]
public Task EditRow(TItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<EditRowInternal>d__602")]
private Task EditRowInternal(TItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<EditRows>d__603")]
public Task EditRows(IEnumerable`1<TItem> items);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<UpdateRow>d__604")]
public Task UpdateRow(TItem item);
    public void CancelEditRow(TItem item);
    public void CancelEditRows(IEnumerable`1<TItem> items);
    public bool IsRowInEditMode(TItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<InsertRow>d__609")]
public Task InsertRow(TItem item);
    internal bool IsOData();
    internal void SetColumnSortOrder(RadzenDataGridColumn`1<TItem> column);
    private void GroupsCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    public ObservableCollection`1<GroupDescriptor> get_Groups();
    public void set_Groups(ObservableCollection`1<GroupDescriptor> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<EndColumnDropToGroup>d__620")]
internal Task EndColumnDropToGroup();
    public ObservableCollection`1<SortDescriptor> get_Sorts();
    public void set_Sorts(ObservableCollection`1<SortDescriptor> value);
    private void SortsCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    public void OrderBy(string property);
    public void OrderByDescending(string property);
    protected virtual string GetComponentCssClass();
    internal string getHeaderStyle();
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(Query value);
    internal string get_PopupID();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnPageSizeChanged>d__638")]
protected virtual Task OnPageSizeChanged(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_PageSizeChanged();
    [CompilerGeneratedAttribute]
public void set_PageSizeChanged(EventCallback`1<int> value);
    internal void SaveSettings();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<LoadSettingsInternal>d__644")]
internal Task LoadSettingsInternal(DataGridSettings settings);
    private static bool AreObjectsEqual(object object1, object object2);
    private object GetFilterValue(object value, Type type);
    public DataGridSettings get_Settings();
    public void set_Settings(DataGridSettings value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridSettings> get_SettingsChanged();
    [CompilerGeneratedAttribute]
public void set_SettingsChanged(EventCallback`1<DataGridSettings> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<ChangePage>d__656")]
private Task ChangePage(PagerEventArgs args);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal void SetAttribute(Dictionary`2<string, object> attributes, string attributeName, object attributeValue);
    internal RenderFragment RenderCell(RadzenDataGridColumn`1<TItem> column, TItem Item, IReadOnlyDictionary`2<string, object> Attributes, Tuple`2<RowRenderEventArgs`1<TItem>, IReadOnlyDictionary`2<string, object>> rowArgs, int RowIndex);
    private string GetCellStyle(RadzenDataGridColumn`1<TItem> column, IReadOnlyDictionary`2<string, object> Attributes);
    private string GetCellCssClass(RadzenDataGridColumn`1<TItem> column, TItem item, IReadOnlyDictionary`2<string, object> Attributes);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnContextMenu>d__662")]
private Task OnContextMenu(RadzenDataGridColumn`1<TItem> Column, TItem Item, MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnClick>d__664")]
private Task OnClick(RadzenDataGridColumn`1<TItem> Column, TItem Item, MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGrid`1/<OnDblClick>d__665")]
private Task OnDblClick(RadzenDataGridColumn`1<TItem> Column, TItem Item, MouseEventArgs args);
    private static string getExpandIconStyle(RadzenDataGrid`1<TItem> Grid, TItem Item, bool expandable);
    private static string getExpandIconCssClass(RadzenDataGrid`1<TItem> Grid, TItem Item);
    [CompilerGeneratedAttribute]
private void <EndColumnReorder>b__401_1(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <GetOrderBy>b__403_0(SortDescriptor d);
    [CompilerGeneratedAttribute]
private string <GetOrderBy>b__403_2(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private void <SetParametersAsync>b__541_1(TItem v);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(bool firstRender);
    [CompilerGeneratedAttribute]
private bool <CollapseRows>b__549_0(TItem x);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_2(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_3(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_4(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__657_5(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_6(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_8(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__657_16(object __value);
}
public class Radzen.Blazor.RadzenDataGridColumn`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCheckBoxListVirtualization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FilterMode> <FilterMode>k__BackingField;
    private Type _propertyType;
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    private Nullable`1<int> orderIndex;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OrderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortOrder> <SortOrder>k__BackingField;
    private bool visible;
    private Nullable`1<bool> _visible;
    [CompilerGeneratedAttribute]
private string <HeaderTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    private string _title;
    private string _columnPickerTitle;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomFilterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SecondFilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<RadzenDataGridColumn`1<TItem>, TItem, string> <CalculatedCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupFooterCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Filterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sortable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Frozen>k__BackingField;
    [CompilerGeneratedAttribute]
private FrozenColumnPosition <FrozenPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reorderable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Groupable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pickable>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlign <TextAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <EditTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, TItem, bool> <IsInEditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<Group> <GroupFooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenDataGridColumn`1<TItem>> <FilterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenDataGridColumn`1<TItem>> <FilterValueTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenDataGridColumn`1<TItem>> <SecondFilterValueTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormatProvider <FormatProvider>k__BackingField;
    private Func`2<TItem, object> propertyValueGetter;
    private Type _filterPropertyType;
    private IEnumerable`1<Nullable`1<SortOrder>> sortOrder;
    private object filterValue;
    private Nullable`1<FilterOperator> filterOperator;
    private object secondFilterValue;
    private Nullable`1<FilterOperator> secondFilterOperator;
    private Nullable`1<LogicalFilterOperator> logicalFilterOperator;
    private string customFilterExpression;
    private Nullable`1<FilterOperator> _filterOperator;
    [CompilerGeneratedAttribute]
private FilterOperator <SecondFilterOperator>k__BackingField;
    private string runtimeWidth;
    internal RadzenDataGridHeaderCell`1<TItem> headerCell;
    [CascadingParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public RenderFragment Columns { get; public set; }
    [CascadingParameterAttribute]
public RadzenDataGridColumn`1<TItem> Parent { get; public set; }
    [ParameterAttribute]
public bool AllowCheckBoxListVirtualization { get; public set; }
    [ParameterAttribute]
public Nullable`1<FilterMode> FilterMode { get; public set; }
    public IList`1<RadzenDataGridColumn`1<TItem>> ColumnsCollection { get; }
    internal Type PropertyType { get; }
    [ParameterAttribute]
public string UniqueID { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> OrderIndex { get; public set; }
    [ParameterAttribute]
public Nullable`1<SortOrder> SortOrder { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string HeaderTooltip { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string ColumnPickerTitle { get; public set; }
    [ParameterAttribute]
public string Property { get; public set; }
    [ParameterAttribute]
public string SortProperty { get; public set; }
    [ParameterAttribute]
public string GroupProperty { get; public set; }
    [ParameterAttribute]
public string FilterProperty { get; public set; }
    [ParameterAttribute]
public object FilterValue { get; public set; }
    [ParameterAttribute]
public string FilterPlaceholder { get; public set; }
    [ParameterAttribute]
public string CustomFilterExpression { get; public set; }
    [ParameterAttribute]
public object SecondFilterValue { get; public set; }
    [ParameterAttribute]
public string Width { get; public set; }
    [ParameterAttribute]
public string MinWidth { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public Func`3<RadzenDataGridColumn`1<TItem>, TItem, string> CalculatedCssClass { get; public set; }
    [ParameterAttribute]
public string HeaderCssClass { get; public set; }
    [ParameterAttribute]
public string FooterCssClass { get; public set; }
    [ParameterAttribute]
public string GroupFooterCssClass { get; public set; }
    [ParameterAttribute]
public bool Filterable { get; public set; }
    [ParameterAttribute]
public bool Sortable { get; public set; }
    [ParameterAttribute]
public bool Frozen { get; public set; }
    [ParameterAttribute]
public FrozenColumnPosition FrozenPosition { get; public set; }
    [ParameterAttribute]
public bool Resizable { get; public set; }
    [ParameterAttribute]
public bool Reorderable { get; public set; }
    [ParameterAttribute]
public bool Groupable { get; public set; }
    [ParameterAttribute]
public bool Pickable { get; public set; }
    [ParameterAttribute]
public TextAlign TextAlign { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> Template { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> EditTemplate { get; public set; }
    [ParameterAttribute]
public Func`3<string, TItem, bool> IsInEditMode { get; public set; }
    [ParameterAttribute]
public RenderFragment HeaderTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment FooterTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<Group> GroupFooterTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> FilterTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> FilterValueTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> SecondFilterValueTemplate { get; public set; }
    [ParameterAttribute]
public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    [ParameterAttribute]
public Type Type { get; public set; }
    [ParameterAttribute]
public IFormatProvider FormatProvider { get; public set; }
    public Type FilterPropertyType { get; }
    [ParameterAttribute]
public FilterOperator FilterOperator { get; public set; }
    [ParameterAttribute]
public FilterOperator SecondFilterOperator { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(RenderFragment value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<TItem> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(RadzenDataGridColumn`1<TItem> value);
    [CompilerGeneratedAttribute]
public bool get_AllowCheckBoxListVirtualization();
    [CompilerGeneratedAttribute]
public void set_AllowCheckBoxListVirtualization(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<FilterMode> get_FilterMode();
    [CompilerGeneratedAttribute]
public void set_FilterMode(Nullable`1<FilterMode> value);
    internal void RemoveColumn(RadzenDataGridColumn`1<TItem> column);
    public IList`1<RadzenDataGridColumn`1<TItem>> get_ColumnsCollection();
    internal int GetLevel();
    internal int GetColSpan(bool isDataCell);
    internal int GetRowSpan(bool isDataCell);
    internal Type get_PropertyType();
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(string value);
    protected virtual void OnInitialized();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OrderIndex();
    [CompilerGeneratedAttribute]
public void set_OrderIndex(Nullable`1<int> value);
    public Nullable`1<int> GetOrderIndex();
    internal void SetOrderIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(Nullable`1<SortOrder> value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool GetVisible();
    internal void SetVisible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_HeaderTooltip();
    [CompilerGeneratedAttribute]
public void set_HeaderTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public string GetTitle();
    public void SetTitle(string value);
    public string get_ColumnPickerTitle();
    public void set_ColumnPickerTitle(string value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public string get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(string value);
    [CompilerGeneratedAttribute]
public string get_GroupProperty();
    [CompilerGeneratedAttribute]
public void set_GroupProperty(string value);
    [CompilerGeneratedAttribute]
public string get_FilterProperty();
    [CompilerGeneratedAttribute]
public void set_FilterProperty(string value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public string get_FilterPlaceholder();
    [CompilerGeneratedAttribute]
public void set_FilterPlaceholder(string value);
    [CompilerGeneratedAttribute]
public string get_CustomFilterExpression();
    [CompilerGeneratedAttribute]
public void set_CustomFilterExpression(string value);
    public string GetFilterPlaceholder();
    [CompilerGeneratedAttribute]
public object get_SecondFilterValue();
    [CompilerGeneratedAttribute]
public void set_SecondFilterValue(object value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_MinWidth();
    [CompilerGeneratedAttribute]
public void set_MinWidth(string value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public Func`3<RadzenDataGridColumn`1<TItem>, TItem, string> get_CalculatedCssClass();
    [CompilerGeneratedAttribute]
public void set_CalculatedCssClass(Func`3<RadzenDataGridColumn`1<TItem>, TItem, string> value);
    [CompilerGeneratedAttribute]
public string get_HeaderCssClass();
    [CompilerGeneratedAttribute]
public void set_HeaderCssClass(string value);
    [CompilerGeneratedAttribute]
public string get_FooterCssClass();
    [CompilerGeneratedAttribute]
public void set_FooterCssClass(string value);
    [CompilerGeneratedAttribute]
public string get_GroupFooterCssClass();
    [CompilerGeneratedAttribute]
public void set_GroupFooterCssClass(string value);
    [CompilerGeneratedAttribute]
public bool get_Filterable();
    [CompilerGeneratedAttribute]
public void set_Filterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sortable();
    [CompilerGeneratedAttribute]
public void set_Sortable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Frozen();
    [CompilerGeneratedAttribute]
public void set_Frozen(bool value);
    [CompilerGeneratedAttribute]
public FrozenColumnPosition get_FrozenPosition();
    [CompilerGeneratedAttribute]
public void set_FrozenPosition(FrozenColumnPosition value);
    [CompilerGeneratedAttribute]
public bool get_Resizable();
    [CompilerGeneratedAttribute]
public void set_Resizable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reorderable();
    [CompilerGeneratedAttribute]
public void set_Reorderable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Groupable();
    [CompilerGeneratedAttribute]
public void set_Groupable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pickable();
    [CompilerGeneratedAttribute]
public void set_Pickable(bool value);
    [CompilerGeneratedAttribute]
public TextAlign get_TextAlign();
    [CompilerGeneratedAttribute]
public void set_TextAlign(TextAlign value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_EditTemplate();
    [CompilerGeneratedAttribute]
public void set_EditTemplate(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public Func`3<string, TItem, bool> get_IsInEditMode();
    [CompilerGeneratedAttribute]
public void set_IsInEditMode(Func`3<string, TItem, bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<Group> get_GroupFooterTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupFooterTemplate(RenderFragment`1<Group> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> get_FilterTemplate();
    [CompilerGeneratedAttribute]
public void set_FilterTemplate(RenderFragment`1<RadzenDataGridColumn`1<TItem>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> get_FilterValueTemplate();
    [CompilerGeneratedAttribute]
public void set_FilterValueTemplate(RenderFragment`1<RadzenDataGridColumn`1<TItem>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenDataGridColumn`1<TItem>> get_SecondFilterValueTemplate();
    [CompilerGeneratedAttribute]
public void set_SecondFilterValueTemplate(RenderFragment`1<RadzenDataGridColumn`1<TItem>> value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public IFormatProvider get_FormatProvider();
    [CompilerGeneratedAttribute]
public void set_FormatProvider(IFormatProvider value);
    public virtual object GetValue(TItem item);
    internal object GetHeader();
    public virtual string GetStyle(bool forCell, bool isHeaderOrFooterCell, bool isForCol);
    private string GetStackedStyleForFrozen();
    private static string GetStackedStyleForFrozen(IEnumerable`1<RadzenDataGridColumn`1<TItem>> stackColumns, string position);
    internal bool IsFrozen();
    public string GetSortProperty();
    internal string GetSortOrderAsString(bool isOData);
    internal void SetSortOrder(Nullable`1<SortOrder> order);
    internal void SetSortOrderInternal(Nullable`1<SortOrder> order);
    internal void ResetSortOrder();
    public string GetGroupProperty();
    public string GetFilterProperty();
    public Type get_FilterPropertyType();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridColumn`1/<SetParametersAsync>d__240")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public Nullable`1<SortOrder> GetSortOrder();
    public object GetFilterValue();
    internal void ClearFilterValues();
    public FilterOperator GetFilterOperator();
    public object GetSecondFilterValue();
    public FilterOperator GetSecondFilterOperator();
    public LogicalFilterOperator GetLogicalFilterOperator();
    public void SetFilterValue(object value, bool isFirst);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridColumn`1/<SetFilterValueAsync>d__249")]
public Task SetFilterValueAsync(object value, bool isFirst);
    internal bool CanSetFilterValue(bool isFirst);
    internal bool CanSetCurrentValue(object value, bool isFirst);
    internal bool HasCustomFilter();
    internal bool HasActiveFilter();
    public string GetCustomFilterExpression();
    public void SetCustomFilterExpression(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridColumn`1/<SetCustomFilterExpressionAsync>d__256")]
public Task SetCustomFilterExpressionAsync(string value);
    public void ClearFilters();
    public FilterOperator get_FilterOperator();
    public void set_FilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public FilterOperator get_SecondFilterOperator();
    [CompilerGeneratedAttribute]
public void set_SecondFilterOperator(FilterOperator value);
    public void SetFilterOperator(Nullable`1<FilterOperator> value);
    public void SetSecondFilterOperator(Nullable`1<FilterOperator> value);
    public void SetLogicalFilterOperator(LogicalFilterOperator value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridColumn`1/<CloseFilter>d__269")]
public Task CloseFilter();
    public void SetWidth(string value);
    public string GetWidth();
    internal string GetWidthOrGridSetting();
    public virtual IEnumerable`1<FilterOperator> GetFilterOperators();
    public string GetFilterOperatorText(FilterOperator filterOperator);
    internal string GetFilterOperatorSymbol(FilterOperator filterOperator);
    public virtual bool ShowTimeForDateTimeFilter();
    public virtual bool ShowUpDownForNumericFilter();
    public string GetColumnODataFilter(bool second);
    protected virtual string GetColumnODataFilter(object filterValue, FilterOperator filterOperator);
    public sealed virtual void Dispose();
    public Nullable`1<int> GetSortIndex();
    internal string getSortIndexAsString();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_ColumnsCollection>b__22_0(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private bool <SetSortOrder>b__225_0(SortDescriptor d);
    [CompilerGeneratedAttribute]
private bool <SetSortOrder>b__225_1(SortDescriptor d);
    [CompilerGeneratedAttribute]
private bool <SetSortOrder>b__225_2(SortDescriptor d);
    [CompilerGeneratedAttribute]
private bool <SetParametersAsync>b__240_0(SortDescriptor d);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <SetWidth>b__271_0();
    [CompilerGeneratedAttribute]
private bool <GetFilterOperators>b__274_0(FilterOperator o);
    [CompilerGeneratedAttribute]
private bool <GetSortIndex>b__282_0(SortDescriptor s);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__285_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__285_1(RenderTreeBuilder __builder3);
}
public class Radzen.Blazor.RadzenDataGridFilterMenu`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [ParameterAttribute]
public RadzenDataGridColumn`1<TItem> Column { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<TItem> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(RadzenDataGridColumn`1<TItem> value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    protected string FilterOperatorStyle(RadzenDataGridColumn`1<TItem> column, FilterOperator value);
    protected string FilterIconStyle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridFilterMenu`1/<ApplyFilter>d__11")]
protected Task ApplyFilter(FilterOperator value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridFilterMenu`1/<ClearFilter>d__12")]
protected Task ClearFilter();
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_1(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_2(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_3(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_4(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_5(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_6(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_7(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_8(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_9(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_10(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_11(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_12(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_13(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_14(MouseEventArgs args);
}
public class Radzen.Blazor.RadzenDataGridFooterCell`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RadzenDataGridColumn`1<TItem> Column { get; public set; }
    [ParameterAttribute]
public int RowIndex { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<TItem> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(RadzenDataGridColumn`1<TItem> value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    private string GetStyle();
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__0_0(RadzenDataGridColumn`1<TItem> c);
}
public class Radzen.Blazor.RadzenDataGridGroupFooterCell`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Group <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public Group Group { get; public set; }
    [ParameterAttribute]
public RadzenDataGridColumn`1<TItem> Column { get; public set; }
    [ParameterAttribute]
public int RowIndex { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Group get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(Group value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<TItem> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(RadzenDataGridColumn`1<TItem> value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    private string GetStyle();
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__0_0(RadzenDataGridColumn`1<TItem> c);
}
public class Radzen.Blazor.RadzenDataGridGroupFooterRow`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IList`1<RadzenDataGridColumn`1<TItem>> <Columns>k__BackingField;
    private GroupResult _groupResult;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridGroupRow`1<TItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderTreeBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Group <Group>k__BackingField;
    [ParameterAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> Columns { get; public set; }
    [ParameterAttribute]
public GroupResult GroupResult { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public RadzenDataGridGroupRow`1<TItem> Parent { get; public set; }
    [ParameterAttribute]
public RenderTreeBuilder Builder { get; public set; }
    public Group Group { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<RadzenDataGridColumn`1<TItem>> value);
    public GroupResult get_GroupResult();
    public void set_GroupResult(GroupResult value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public RadzenDataGridGroupRow`1<TItem> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(RadzenDataGridGroupRow`1<TItem> value);
    [CompilerGeneratedAttribute]
public RenderTreeBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(RenderTreeBuilder value);
    [CompilerGeneratedAttribute]
public Group get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(Group value);
    private int GetLevel();
}
public class Radzen.Blazor.RadzenDataGridGroupRow`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IList`1<RadzenDataGridColumn`1<TItem>> <Columns>k__BackingField;
    private GroupResult _groupResult;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridGroupRow`1<TItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderTreeBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Group <Group>k__BackingField;
    [ParameterAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> Columns { get; public set; }
    [ParameterAttribute]
public GroupResult GroupResult { get; public set; }
    private int TotalColumnCount { get; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public RadzenDataGridGroupRow`1<TItem> Parent { get; public set; }
    [ParameterAttribute]
public RenderTreeBuilder Builder { get; public set; }
    public Group Group { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private string GetKeyAsString();
    [CompilerGeneratedAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<RadzenDataGridColumn`1<TItem>> value);
    public GroupResult get_GroupResult();
    public void set_GroupResult(GroupResult value);
    private int get_TotalColumnCount();
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public RadzenDataGridGroupRow`1<TItem> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(RadzenDataGridGroupRow`1<TItem> value);
    [CompilerGeneratedAttribute]
public RenderTreeBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(RenderTreeBuilder value);
    private RenderFragment DrawDataRows(bool groupFootersOnly);
    [CompilerGeneratedAttribute]
public Group get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(Group value);
    private int GetLevel();
    private int CountVisibleLeafColumns(RadzenDataGridColumn`1<TItem> column);
    [CompilerGeneratedAttribute]
private int <get_TotalColumnCount>b__11_1(RadzenDataGridColumn`1<TItem> c);
}
public class Radzen.Blazor.RadzenDataGridHeaderCell`1 : ComponentBase {
    private Popup popup;
    private ElementReference filterButton;
    private int filterValuesCount;
    internal IEnumerable filterValues;
    private string loadDataArgsString;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<TItem> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RadzenDataGridColumn`1<TItem> Column { get; public set; }
    [ParameterAttribute]
public int ColumnIndex { get; public set; }
    [ParameterAttribute]
public int RowIndex { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<LoadFilterValues>d__6")]
private Task LoadFilterValues(LoadDataArgs loadDataArgs);
    private void ListBoxChange(object args);
    private string getFilterOpen();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<ToggleFilter>d__9")]
private Task ToggleFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<ClearFilter>d__10")]
private Task ClearFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<ApplyFilter>d__11")]
private Task ApplyFilter();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<TItem> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(RadzenDataGridColumn`1<TItem> value);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    private string GetStyle();
    private string getFilterIconCss(RadzenDataGridColumn`1<TItem> column);
    private Task OnSortKeyPressed(KeyboardEventArgs args);
    private string getColumnPopupID();
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<CloseFilter>d__45")]
internal Task CloseFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<StartColumnResize>d__46")]
private Task StartColumnResize(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<StopColumnResize>d__47")]
private Task StopColumnResize(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<OpenFilter>d__48")]
internal Task OpenFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataGridHeaderCell`1/<OnFilterPopupKeyPressed>d__49")]
private Task OnFilterPopupKeyPressed(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_1(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_2(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_3(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_6(EventArgs args);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType6`2<string, FilterOperator> <BuildRenderTree>b__0_7(FilterOperator t);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_8(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_9(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_10(Nullable`1<DateTime> args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_11(object args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_22();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_12(string args);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType7`2<string, LogicalFilterOperator> <BuildRenderTree>b__0_13(LogicalFilterOperator t);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_14(object args);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType6`2<string, FilterOperator> <BuildRenderTree>b__0_15(FilterOperator t);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_16(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_17(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_18(Nullable`1<DateTime> args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_19(object args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_20(string args);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__0_21(object context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_5(object __value);
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__0_24(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private bool <LoadFilterValues>b__6_0(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private bool <LoadFilterValues>b__6_1(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private bool <ToggleFilter>b__9_0(RadzenDataGridColumn`1<TItem> c);
    [CompilerGeneratedAttribute]
private void <ToggleFilter>b__9_2(RadzenDataGridHeaderCell`1<TItem> cell);
}
public class Radzen.Blazor.RadzenDataGridRow`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IList`1<RadzenDataGridColumn`1<TItem>> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<TItem> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InEditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    private List`1<IRadzenFormComponent> components;
    [ParameterAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> Columns { get; public set; }
    [ParameterAttribute]
public TItem Item { get; public set; }
    [ParameterAttribute]
public int Index { get; public set; }
    [ParameterAttribute]
public RadzenDataGrid`1<TItem> Grid { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public bool InEditMode { get; public set; }
    [ParameterAttribute]
public EditContext EditContext { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IList`1<RadzenDataGridColumn`1<TItem>> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<RadzenDataGridColumn`1<TItem>> value);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(TItem value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<TItem> get_Grid();
    [CompilerGeneratedAttribute]
public void set_Grid(RadzenDataGrid`1<TItem> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public bool get_InEditMode();
    [CompilerGeneratedAttribute]
public void set_InEditMode(bool value);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    public sealed virtual void AddComponent(IRadzenFormComponent component);
    public sealed virtual void RemoveComponent(IRadzenFormComponent component);
    public virtual Task SetParametersAsync(ParameterView parameters);
    public sealed virtual IRadzenFormComponent FindComponent(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_5(MouseEventArgs _);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_3(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_6(RenderTreeBuilder __builder5);
}
[CascadingTypeParameterAttribute("TItem")]
public class Radzen.Blazor.RadzenDataList`1 : PagedDataBoundComponent`1<TItem> {
    [CompilerGeneratedAttribute]
private bool <ShowEmptyMessage>k__BackingField;
    private string _emptyText;
    [CompilerGeneratedAttribute]
private RenderFragment <EmptyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowVirtualization>k__BackingField;
    internal Virtualize`1<TItem> virtualize;
    [CompilerGeneratedAttribute]
private bool <IsLoading>k__BackingField;
    [ParameterAttribute]
public bool ShowEmptyMessage { get; public set; }
    [ParameterAttribute]
public string EmptyText { get; public set; }
    [ParameterAttribute]
public RenderFragment EmptyTemplate { get; public set; }
    [ParameterAttribute]
public bool WrapItems { get; public set; }
    [ParameterAttribute]
public bool AllowVirtualization { get; public set; }
    public Virtualize`1<TItem> Virtualize { get; }
    [ParameterAttribute]
public bool IsLoading { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_ShowEmptyMessage();
    [CompilerGeneratedAttribute]
public void set_ShowEmptyMessage(bool value);
    public string get_EmptyText();
    public void set_EmptyText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_EmptyTemplate();
    [CompilerGeneratedAttribute]
public void set_EmptyTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_WrapItems();
    [CompilerGeneratedAttribute]
public void set_WrapItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowVirtualization();
    [CompilerGeneratedAttribute]
public void set_AllowVirtualization(bool value);
    public Virtualize`1<TItem> get_Virtualize();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataList`1/<LoadItems>d__24")]
private ValueTask`1<ItemsProviderResult`1<TItem>> LoadItems(ItemsProviderRequest request);
    private RenderFragment DrawDataListRows();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDataList`1/<Reload>d__26")]
public virtual Task Reload();
    internal void DrawRows(RenderTreeBuilder builder);
    internal void DrawRow(RenderTreeBuilder builder, TItem item);
    [CompilerGeneratedAttribute]
public bool get_IsLoading();
    [CompilerGeneratedAttribute]
public void set_IsLoading(bool value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <DrawDataListRows>b__25_0(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private RenderFragment <DrawDataListRows>b__25_1(TItem context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <DrawDataListRows>b__25_2(object c);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__33_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__33_1(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__33_2(object __value);
}
public class Radzen.Blazor.RadzenDataListRow`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenDataList`1<TItem> <DataList>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [ParameterAttribute]
public RadzenDataList`1<TItem> DataList { get; public set; }
    [ParameterAttribute]
public TItem Item { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenDataList`1<TItem> get_DataList();
    [CompilerGeneratedAttribute]
public void set_DataList(RadzenDataList`1<TItem> value);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(TItem value);
}
public class Radzen.Blazor.RadzenDatePicker`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <ShowCalendarWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CalendarWeekTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToggleAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OkAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevMonthAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextMonthAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToggleAmPmAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    private RadzenDropDown`1<int> monthDropDown;
    private RadzenDropDown`1<int> yearDropDown;
    private Nullable`1<int> hour;
    private Nullable`1<int> minutes;
    private Nullable`1<int> seconds;
    private IList`1<NameValue<TValue>> months;
    private IList`1<NameValue<TValue>> years;
    [CompilerGeneratedAttribute]
private int <YearFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <YearTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClear>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InitialViewDate>k__BackingField;
    private Nullable`1<DateTime> _dateTimeValue;
    [CompilerGeneratedAttribute]
private Action`1<DateRenderEventArgs> <DateRender>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeKind <Kind>k__BackingField;
    private object _value;
    private DateTime _currentDate;
    [CompilerGeneratedAttribute]
private EventCallback`1<DateTime> <CurrentDateChanged>k__BackingField;
    private IRadzenForm _form;
    protected ElementReference input;
    [CompilerGeneratedAttribute]
private Func`2<string, Nullable`1<DateTime>> <ParseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDays>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HoursStep>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinutesStep>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondsStep>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PadHours>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PadMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PadSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTimeOkButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YearRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HourFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<DateTime>> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TValue> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterTemplate>k__BackingField;
    private string contentStyle;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<TValue>> <ValueExpression>k__BackingField;
    private bool firstRender;
    private Popup popup;
    [CompilerGeneratedAttribute]
private PopupRenderMode <PopupRenderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FocusedDate>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public bool ShowCalendarWeek { get; public set; }
    [ParameterAttribute]
public string CalendarWeekTitle { get; public set; }
    [ParameterAttribute]
public string ToggleAriaLabel { get; public set; }
    [ParameterAttribute]
public string OkAriaLabel { get; public set; }
    [ParameterAttribute]
public string PrevMonthAriaLabel { get; public set; }
    [ParameterAttribute]
public string NextMonthAriaLabel { get; public set; }
    [ParameterAttribute]
public string ToggleAmPmAriaLabel { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    private int YearFrom { get; private set; }
    private int YearTo { get; private set; }
    [ParameterAttribute]
public bool AllowClear { get; public set; }
    [ParameterAttribute]
public int TabIndex { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string InputClass { get; public set; }
    [ParameterAttribute]
public Nullable`1<DateTime> Min { get; public set; }
    [ParameterAttribute]
public Nullable`1<DateTime> Max { get; public set; }
    [ParameterAttribute]
public Nullable`1<DateTime> InitialViewDate { get; public set; }
    private Nullable`1<DateTime> DateTimeValue { get; private set; }
    [ParameterAttribute]
public Action`1<DateRenderEventArgs> DateRender { get; public set; }
    [ParameterAttribute]
public DateTimeKind Kind { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    private DateTime CurrentDate { get; private set; }
    [ParameterAttribute]
public EventCallback`1<DateTime> CurrentDateChanged { get; public set; }
    private DateTime StartDate { get; }
    private IEnumerable`1<string> ShiftedAbbreviatedDayNames { get; }
    public bool IsBound { get; }
    public bool HasValue { get; }
    public string FormattedValue { get; }
    [CascadingParameterAttribute]
public IRadzenForm Form { get; public set; }
    [ParameterAttribute]
public Func`2<string, Nullable`1<DateTime>> ParseInput { get; public set; }
    private string ButtonClasses { get; }
    [ParameterAttribute]
public bool Inline { get; public set; }
    [ParameterAttribute]
public bool TimeOnly { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public bool AllowInput { get; public set; }
    [ParameterAttribute]
public bool ShowButton { get; public set; }
    private bool IsReadonly { get; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool ShowDays { get; public set; }
    [ParameterAttribute]
public bool ShowTime { get; public set; }
    [ParameterAttribute]
public bool ShowSeconds { get; public set; }
    [ParameterAttribute]
public string HoursStep { get; public set; }
    [ParameterAttribute]
public string MinutesStep { get; public set; }
    [ParameterAttribute]
public string SecondsStep { get; public set; }
    [ParameterAttribute]
public bool PadHours { get; public set; }
    [ParameterAttribute]
public bool PadMinutes { get; public set; }
    [ParameterAttribute]
public bool PadSeconds { get; public set; }
    [ParameterAttribute]
public bool ShowTimeOkButton { get; public set; }
    [ParameterAttribute]
public string DateFormat { get; public set; }
    [ParameterAttribute]
public string YearRange { get; public set; }
    [ParameterAttribute]
public string HourFormat { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<DateTime>> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TValue> ValueChanged { get; public set; }
    [ParameterAttribute]
public RenderFragment FooterTemplate { get; public set; }
    private string PopupStyle { get; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    public FieldIdentifier FieldIdentifier { get; private set; }
    [ParameterAttribute]
public Expression`1<Func`1<TValue>> ValueExpression { get; public set; }
    private string PopupID { get; }
    [ParameterAttribute]
public PopupRenderMode PopupRenderMode { get; public set; }
    private DateTime FocusedDate { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_ShowCalendarWeek();
    [CompilerGeneratedAttribute]
public void set_ShowCalendarWeek(bool value);
    [CompilerGeneratedAttribute]
public string get_CalendarWeekTitle();
    [CompilerGeneratedAttribute]
public void set_CalendarWeekTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ToggleAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ToggleAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_OkAriaLabel();
    [CompilerGeneratedAttribute]
public void set_OkAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevMonthAriaLabel();
    [CompilerGeneratedAttribute]
public void set_PrevMonthAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextMonthAriaLabel();
    [CompilerGeneratedAttribute]
public void set_NextMonthAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ToggleAmPmAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ToggleAmPmAriaLabel(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<ToggleAmPm>d__34")]
private Task ToggleAmPm();
    private int GetHour24FormatFrom12Format(int hour12);
    private void OnUpdateHourInput(ChangeEventArgs args);
    private void OnUpdateHourMinutes(ChangeEventArgs args);
    private void OnUpdateHourSeconds(ChangeEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<UpdateValueFromTime>d__42")]
private Task UpdateValueFromTime(DateTime newValue);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<UpdateHour>d__43")]
private Task UpdateHour(int v);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<UpdateMinutes>d__44")]
private Task UpdateMinutes(int v);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<UpdateSeconds>d__45")]
private Task UpdateSeconds(int v);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OkClick>d__46")]
private Task OkClick(bool shouldClose);
    [CompilerGeneratedAttribute]
private int get_YearFrom();
    [CompilerGeneratedAttribute]
private void set_YearFrom(int value);
    [CompilerGeneratedAttribute]
private int get_YearTo();
    [CompilerGeneratedAttribute]
private void set_YearTo(int value);
    protected virtual void OnInitialized();
    private void UpdateYearsAndMonths(Nullable`1<DateTime> min, Nullable`1<DateTime> max);
    [CompilerGeneratedAttribute]
public bool get_AllowClear();
    [CompilerGeneratedAttribute]
public void set_AllowClear(bool value);
    [CompilerGeneratedAttribute]
public int get_TabIndex();
    [CompilerGeneratedAttribute]
public void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_InputClass();
    [CompilerGeneratedAttribute]
public void set_InputClass(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InitialViewDate();
    [CompilerGeneratedAttribute]
public void set_InitialViewDate(Nullable`1<DateTime> value);
    private Nullable`1<DateTime> get_DateTimeValue();
    private void set_DateTimeValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Action`1<DateRenderEventArgs> get_DateRender();
    [CompilerGeneratedAttribute]
public void set_DateRender(Action`1<DateRenderEventArgs> value);
    private DateRenderEventArgs DateAttributes(DateTime value);
    [CompilerGeneratedAttribute]
public DateTimeKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(DateTimeKind value);
    public object get_Value();
    public void set_Value(object value);
    private static object ConvertToTValue(object value);
    private DateTime get_CurrentDate();
    private void set_CurrentDate(DateTime value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DateTime> get_CurrentDateChanged();
    [CompilerGeneratedAttribute]
public void set_CurrentDateChanged(EventCallback`1<DateTime> value);
    private DateTime get_StartDate();
    [IteratorStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<get_ShiftedAbbreviatedDayNames>d__117")]
private IEnumerable`1<string> get_ShiftedAbbreviatedDayNames();
    public sealed virtual bool get_IsBound();
    public sealed virtual bool get_HasValue();
    public string get_FormattedValue();
    public IRadzenForm get_Form();
    public void set_Form(IRadzenForm value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<ParseDate>d__129")]
protected Task ParseDate();
    [CompilerGeneratedAttribute]
public Func`2<string, Nullable`1<DateTime>> get_ParseInput();
    [CompilerGeneratedAttribute]
public void set_ParseInput(Func`2<string, Nullable`1<DateTime>> value);
    private bool TryParseInput(string inputValue, DateTime& value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<Clear>d__135")]
private Task Clear();
    private string get_ButtonClasses();
    [CompilerGeneratedAttribute]
public bool get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(bool value);
    [CompilerGeneratedAttribute]
public bool get_TimeOnly();
    [CompilerGeneratedAttribute]
public void set_TimeOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowInput();
    [CompilerGeneratedAttribute]
public void set_AllowInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowButton();
    [CompilerGeneratedAttribute]
public void set_ShowButton(bool value);
    private bool get_IsReadonly();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowDays();
    [CompilerGeneratedAttribute]
public void set_ShowDays(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTime();
    [CompilerGeneratedAttribute]
public void set_ShowTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSeconds();
    [CompilerGeneratedAttribute]
public void set_ShowSeconds(bool value);
    [CompilerGeneratedAttribute]
public string get_HoursStep();
    [CompilerGeneratedAttribute]
public void set_HoursStep(string value);
    [CompilerGeneratedAttribute]
public string get_MinutesStep();
    [CompilerGeneratedAttribute]
public void set_MinutesStep(string value);
    [CompilerGeneratedAttribute]
public string get_SecondsStep();
    [CompilerGeneratedAttribute]
public void set_SecondsStep(string value);
    [CompilerGeneratedAttribute]
public bool get_PadHours();
    [CompilerGeneratedAttribute]
public void set_PadHours(bool value);
    [CompilerGeneratedAttribute]
public bool get_PadMinutes();
    [CompilerGeneratedAttribute]
public void set_PadMinutes(bool value);
    [CompilerGeneratedAttribute]
public bool get_PadSeconds();
    [CompilerGeneratedAttribute]
public void set_PadSeconds(bool value);
    private double getStep(StepType<TValue> type);
    private double parseStep(string step);
    [CompilerGeneratedAttribute]
public bool get_ShowTimeOkButton();
    [CompilerGeneratedAttribute]
public void set_ShowTimeOkButton(bool value);
    [CompilerGeneratedAttribute]
public string get_DateFormat();
    [CompilerGeneratedAttribute]
public void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public string get_YearRange();
    [CompilerGeneratedAttribute]
public void set_YearRange(string value);
    [CompilerGeneratedAttribute]
public string get_HourFormat();
    [CompilerGeneratedAttribute]
public void set_HourFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<DateTime>> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<Nullable`1<DateTime>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TValue> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<TValue> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment value);
    private string getStyle();
    public void Close();
    private string get_PopupStyle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnChange>d__240")]
private Task OnChange();
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<SetDay>d__242")]
private Task SetDay(DateTime newValue);
    private void SetMonth(int month);
    private void SetYear(int year);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
private void set_FieldIdentifier(FieldIdentifier value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<TValue>> get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression`1<Func`1<TValue>> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<SetParametersAsync>d__257")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnAfterRenderAsync>d__259")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    public virtual void Dispose();
    public sealed virtual object GetValue();
    private string get_PopupID();
    [CompilerGeneratedAttribute]
public PopupRenderMode get_PopupRenderMode();
    [CompilerGeneratedAttribute]
public void set_PopupRenderMode(PopupRenderMode value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnToggle>d__270")]
private Task OnToggle();
    [CompilerGeneratedAttribute]
private DateTime get_FocusedDate();
    [CompilerGeneratedAttribute]
private void set_FocusedDate(DateTime value);
    private string GetDayCssClass(DateTime date, DateRenderEventArgs dateArgs, bool forCell);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnCalendarKeyPress>d__276")]
private Task OnCalendarKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnPopupKeyDown>d__277")]
private Task OnPopupKeyDown(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<OnKeyPress>d__278")]
private Task OnKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<TogglePopup>d__279")]
internal Task TogglePopup();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<ClosePopup>d__280")]
private Task ClosePopup();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<FocusAsync>d__282")]
public sealed virtual ValueTask FocusAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private NameValue<TValue> <UpdateYearsAndMonths>b__59_0(int i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <Close>b__237_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__283_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_2(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_3(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<<BuildRenderTree>b__283_5>d")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__283_5();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Radzen.Blazor.RadzenDatePicker`1/<<BuildRenderTree>b__283_6>d")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__283_6();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_7(object args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_8(object __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_9(object args);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__283_10(object context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_11(object __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__283_14(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__283_12(MouseEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__283_4(object __value);
}
public class Radzen.Blazor.RadzenDayView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    public string Icon { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
public TimeSpan StartTime { get; public set; }
    [ParameterAttribute]
public TimeSpan EndTime { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    public string Title { get; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public virtual string get_Icon();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_TimeFormat();
    [CompilerGeneratedAttribute]
public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
    public virtual string get_Title();
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.RadzenDialog : ComponentBase {
    [CompilerGeneratedAttribute]
private DialogService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseSideDialogAriaLabel>k__BackingField;
    private List`1<Dialog> dialogs;
    private bool isSideDialogOpen;
    private RenderFragment sideDialogContent;
    private SideDialogOptions sideDialogOptions;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [InjectAttribute]
private DialogService Service { get; private set; }
    [ParameterAttribute]
public string CloseSideDialogAriaLabel { get; public set; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private DialogService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(DialogService value);
    [CompilerGeneratedAttribute]
public string get_CloseSideDialogAriaLabel();
    [CompilerGeneratedAttribute]
public void set_CloseSideDialogAriaLabel(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDialog/<Open>d__13")]
public Task Open(string title, Type type, Dictionary`2<string, object> parameters, DialogOptions options);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDialog/<Close>d__14")]
public Task Close(object result);
    public sealed virtual void Dispose();
    protected virtual void OnInitialized();
    private void OnSideOpen(Type sideComponent, Dictionary`2<string, object> parameters, SideDialogOptions options);
    private void OnSideClose(object _);
    private void OnOpen(string title, Type type, Dictionary`2<string, object> parameters, DialogOptions options);
    private void OnClose(object result);
    private string GetSideDialogCssClass();
    private string GetSideDialogStyle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDialog/<OnAfterRenderAsync>d__23")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(MouseEventArgs _);
    [CompilerGeneratedAttribute]
private void <Open>b__13_0();
    [CompilerGeneratedAttribute]
private void <Close>b__14_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
public class Radzen.Blazor.RadzenDonutSeries`1 : RadzenPieSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <InnerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TitleTemplate>k__BackingField;
    [ParameterAttribute]
public Nullable`1<double> InnerRadius { get; public set; }
    [ParameterAttribute]
public RenderFragment TitleTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_InnerRadius();
    [CompilerGeneratedAttribute]
public void set_InnerRadius(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TitleTemplate();
    [CompilerGeneratedAttribute]
public void set_TitleTemplate(RenderFragment value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public sealed virtual RenderFragment RenderTitle(double x, double y);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__8_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenDropDown`1 : DropDownBase`1<TValue> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<object> <ValueTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <EmptyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearSearchAfterSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DropDownItemRenderEventArgs`1<TValue>> <ItemRender>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSelectedLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopupStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Chips>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedItemsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectAllText>k__BackingField;
    private bool visibleChanged;
    private bool disabledChanged;
    private bool firstRender;
    private bool shouldReposition;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<object> ValueTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment EmptyTemplate { get; public set; }
    [ParameterAttribute]
public bool OpenOnFocus { get; public set; }
    [ParameterAttribute]
public bool ClearSearchAfterSelection { get; public set; }
    [ParameterAttribute]
public string FilterPlaceholder { get; public set; }
    [ParameterAttribute]
public Action`1<DropDownItemRenderEventArgs`1<TValue>> ItemRender { get; public set; }
    [ParameterAttribute]
public int MaxSelectedLabels { get; public set; }
    [ParameterAttribute]
public string PopupStyle { get; public set; }
    [ParameterAttribute]
public bool Chips { get; public set; }
    [ParameterAttribute]
public string SelectedItemsText { get; public set; }
    [ParameterAttribute]
public string SelectAllText { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<object> get_ValueTemplate();
    [CompilerGeneratedAttribute]
public void set_ValueTemplate(RenderFragment`1<object> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_EmptyTemplate();
    [CompilerGeneratedAttribute]
public void set_EmptyTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_OpenOnFocus();
    [CompilerGeneratedAttribute]
public void set_OpenOnFocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearSearchAfterSelection();
    [CompilerGeneratedAttribute]
public void set_ClearSearchAfterSelection(bool value);
    [CompilerGeneratedAttribute]
public string get_FilterPlaceholder();
    [CompilerGeneratedAttribute]
public void set_FilterPlaceholder(string value);
    [CompilerGeneratedAttribute]
public Action`1<DropDownItemRenderEventArgs`1<TValue>> get_ItemRender();
    [CompilerGeneratedAttribute]
public void set_ItemRender(Action`1<DropDownItemRenderEventArgs`1<TValue>> value);
    internal DropDownItemRenderEventArgs`1<TValue> ItemAttributes(RadzenDropDownItem`1<TValue> item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OnFocus>d__33")]
private Task OnFocus(FocusEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<ClosePopup>d__34")]
internal virtual Task ClosePopup(string key);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OpenPopup>d__35")]
protected virtual Task OpenPopup(string key, bool isFilter, bool isFromClick);
    internal virtual void RenderItem(RenderTreeBuilder builder, object item);
    [CompilerGeneratedAttribute]
public int get_MaxSelectedLabels();
    [CompilerGeneratedAttribute]
public void set_MaxSelectedLabels(int value);
    [CompilerGeneratedAttribute]
public string get_PopupStyle();
    [CompilerGeneratedAttribute]
public void set_PopupStyle(string value);
    [CompilerGeneratedAttribute]
public bool get_Chips();
    [CompilerGeneratedAttribute]
public void set_Chips(bool value);
    [CompilerGeneratedAttribute]
public string get_SelectedItemsText();
    [CompilerGeneratedAttribute]
public void set_SelectedItemsText(string value);
    [CompilerGeneratedAttribute]
public string get_SelectAllText();
    [CompilerGeneratedAttribute]
public void set_SelectAllText(string value);
    protected virtual Task SelectAll();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<SetParametersAsync>d__61")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OnAfterRenderAsync>d__63")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OnSelectItem>d__64")]
protected virtual Task OnSelectItem(object item, bool isFromKey);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OnChipRemove>d__65")]
private Task OnChipRemove(object item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<OnSelectItemInternal>d__66")]
internal Task OnSelectItemInternal(object item, bool isFromKey);
    protected virtual string GetComponentCssClass();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDown`1/<PopupClose>d__69")]
internal Task PopupClose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal RenderFragment RenderFilter();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_2(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_3(ElementReference __value);
    [CompilerGeneratedAttribute]
private object <BuildRenderTree>b__70_4(object i);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_5(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_6(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_7(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_8(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_9(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__71_0(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__71_1(string args);
    [CompilerGeneratedAttribute]
private void <RenderFilter>b__71_2(ElementReference __value);
}
public class Radzen.Blazor.RadzenDropDownDataGrid`1 : DropDownBase`1<TValue> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RowRenderEventArgs`1<object>> <RowRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DataGridCellRenderEventArgs`1<object>> <CellRender>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Chips>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenOnFocus>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<object> <ValueTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Density <Density>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <EmptyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PagerAlwaysVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlign <PagerHorizontalAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowColumnResize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Responsive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageNumbersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPagingSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PagingSummaryFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTitleFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageAriaLabelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchTextPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SelectedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Columns>k__BackingField;
    private RadzenDataGrid`1<object> grid;
    private IEnumerable`1<object> pagedData;
    private int count;
    [CompilerGeneratedAttribute]
private int <MaxSelectedLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedItemsText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FocusFilterOnPopup>k__BackingField;
    protected ElementReference popup;
    private string prevSearch;
    private Nullable`1<int> skip;
    private IEnumerable _internalView;
    private string previousSearch;
    [CompilerGeneratedAttribute]
private bool <IsLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSorting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFilteringByAllStringColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFilteringByWord>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRowSelectOnRowClick>k__BackingField;
    private bool clicking;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public Action`1<RowRenderEventArgs`1<object>> RowRender { get; public set; }
    [ParameterAttribute]
public Action`1<DataGridCellRenderEventArgs`1<object>> CellRender { get; public set; }
    [ParameterAttribute]
public RenderFragment FooterTemplate { get; public set; }
    [ParameterAttribute]
public bool Chips { get; public set; }
    [ParameterAttribute]
public bool OpenOnFocus { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<object> ValueTemplate { get; public set; }
    [ParameterAttribute]
public Density Density { get; public set; }
    [ParameterAttribute]
public RenderFragment EmptyTemplate { get; public set; }
    [ParameterAttribute]
public bool PagerAlwaysVisible { get; public set; }
    [ParameterAttribute]
public HorizontalAlign PagerHorizontalAlign { get; public set; }
    [ParameterAttribute]
public bool AllowColumnResize { get; public set; }
    [ParameterAttribute]
public string ColumnWidth { get; public set; }
    [ParameterAttribute]
public bool Responsive { get; public set; }
    [ParameterAttribute]
public bool ShowSearch { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> Add { get; public set; }
    [ParameterAttribute]
public bool ShowAdd { get; public set; }
    [ParameterAttribute]
public int PageNumbersCount { get; public set; }
    [ParameterAttribute]
public bool ShowPagingSummary { get; public set; }
    [ParameterAttribute]
public string PagingSummaryFormat { get; public set; }
    [ParameterAttribute]
public string FirstPageTitle { get; public set; }
    [ParameterAttribute]
public string FirstPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PrevPageTitle { get; public set; }
    [ParameterAttribute]
public string PrevPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string LastPageTitle { get; public set; }
    [ParameterAttribute]
public string LastPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string NextPageTitle { get; public set; }
    [ParameterAttribute]
public string NextPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PageTitleFormat { get; public set; }
    [ParameterAttribute]
public string PageAriaLabelFormat { get; public set; }
    [ParameterAttribute]
public string EmptyText { get; public set; }
    [ParameterAttribute]
public string SearchTextPlaceholder { get; public set; }
    [ParameterAttribute]
public string AddAriaLabel { get; public set; }
    [ParameterAttribute]
public object SelectedValue { get; public set; }
    [ParameterAttribute]
public RenderFragment Columns { get; public set; }
    [ParameterAttribute]
public int MaxSelectedLabels { get; public set; }
    [ParameterAttribute]
public string SelectedItemsText { get; public set; }
    [ParameterAttribute]
public bool FocusFilterOnPopup { get; public set; }
    public IEnumerable View { get; }
    protected IEnumerable`1<object> Items { get; }
    [ParameterAttribute]
public bool IsLoading { get; public set; }
    [ParameterAttribute]
public bool AllowSorting { get; public set; }
    [ParameterAttribute]
public bool AllowFiltering { get; public set; }
    [ParameterAttribute]
public bool AllowFilteringByAllStringColumns { get; public set; }
    [ParameterAttribute]
public bool AllowFilteringByWord { get; public set; }
    [ParameterAttribute]
public bool AllowRowSelectOnRowClick { get; public set; }
    public RadzenDataGrid`1<object> DataGrid { get; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Action`1<RowRenderEventArgs`1<object>> get_RowRender();
    [CompilerGeneratedAttribute]
public void set_RowRender(Action`1<RowRenderEventArgs`1<object>> value);
    [CompilerGeneratedAttribute]
public Action`1<DataGridCellRenderEventArgs`1<object>> get_CellRender();
    [CompilerGeneratedAttribute]
public void set_CellRender(Action`1<DataGridCellRenderEventArgs`1<object>> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Chips();
    [CompilerGeneratedAttribute]
public void set_Chips(bool value);
    protected virtual void OnCellRender(DataGridCellRenderEventArgs`1<object> args);
    protected virtual void OnRowRender(RowRenderEventArgs`1<object> args);
    [CompilerGeneratedAttribute]
public bool get_OpenOnFocus();
    [CompilerGeneratedAttribute]
public void set_OpenOnFocus(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnFocus>d__26")]
private Task OnFocus(FocusEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OpenPopup>d__27")]
protected virtual Task OpenPopup(string key, bool isFilter, bool isFromClick);
    [CompilerGeneratedAttribute]
public RenderFragment`1<object> get_ValueTemplate();
    [CompilerGeneratedAttribute]
public void set_ValueTemplate(RenderFragment`1<object> value);
    [CompilerGeneratedAttribute]
public Density get_Density();
    [CompilerGeneratedAttribute]
public void set_Density(Density value);
    [CompilerGeneratedAttribute]
public RenderFragment get_EmptyTemplate();
    [CompilerGeneratedAttribute]
public void set_EmptyTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_PagerAlwaysVisible();
    [CompilerGeneratedAttribute]
public void set_PagerAlwaysVisible(bool value);
    [CompilerGeneratedAttribute]
public HorizontalAlign get_PagerHorizontalAlign();
    [CompilerGeneratedAttribute]
public void set_PagerHorizontalAlign(HorizontalAlign value);
    [CompilerGeneratedAttribute]
public bool get_AllowColumnResize();
    [CompilerGeneratedAttribute]
public void set_AllowColumnResize(bool value);
    [CompilerGeneratedAttribute]
public string get_ColumnWidth();
    [CompilerGeneratedAttribute]
public void set_ColumnWidth(string value);
    [CompilerGeneratedAttribute]
public bool get_Responsive();
    [CompilerGeneratedAttribute]
public void set_Responsive(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSearch();
    [CompilerGeneratedAttribute]
public void set_ShowSearch(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_Add();
    [CompilerGeneratedAttribute]
public void set_Add(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_ShowAdd();
    [CompilerGeneratedAttribute]
public void set_ShowAdd(bool value);
    [CompilerGeneratedAttribute]
public int get_PageNumbersCount();
    [CompilerGeneratedAttribute]
public void set_PageNumbersCount(int value);
    [CompilerGeneratedAttribute]
public bool get_ShowPagingSummary();
    [CompilerGeneratedAttribute]
public void set_ShowPagingSummary(bool value);
    [CompilerGeneratedAttribute]
public string get_PagingSummaryFormat();
    [CompilerGeneratedAttribute]
public void set_PagingSummaryFormat(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPageTitle();
    [CompilerGeneratedAttribute]
public void set_FirstPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FirstPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageTitle();
    [CompilerGeneratedAttribute]
public void set_PrevPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_PrevPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageTitle();
    [CompilerGeneratedAttribute]
public void set_LastPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_LastPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageTitle();
    [CompilerGeneratedAttribute]
public void set_NextPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_NextPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PageTitleFormat();
    [CompilerGeneratedAttribute]
public void set_PageTitleFormat(string value);
    [CompilerGeneratedAttribute]
public string get_PageAriaLabelFormat();
    [CompilerGeneratedAttribute]
public void set_PageAriaLabelFormat(string value);
    [CompilerGeneratedAttribute]
public string get_EmptyText();
    [CompilerGeneratedAttribute]
public void set_EmptyText(string value);
    [CompilerGeneratedAttribute]
public string get_SearchTextPlaceholder();
    [CompilerGeneratedAttribute]
public void set_SearchTextPlaceholder(string value);
    [CompilerGeneratedAttribute]
public string get_AddAriaLabel();
    [CompilerGeneratedAttribute]
public void set_AddAriaLabel(string value);
    [CompilerGeneratedAttribute]
public object get_SelectedValue();
    [CompilerGeneratedAttribute]
public void set_SelectedValue(object value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(RenderFragment value);
    [CompilerGeneratedAttribute]
public int get_MaxSelectedLabels();
    [CompilerGeneratedAttribute]
public void set_MaxSelectedLabels(int value);
    [CompilerGeneratedAttribute]
public string get_SelectedItemsText();
    [CompilerGeneratedAttribute]
public void set_SelectedItemsText(string value);
    [CompilerGeneratedAttribute]
public bool get_FocusFilterOnPopup();
    [CompilerGeneratedAttribute]
public void set_FocusFilterOnPopup(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnAfterRenderAsync>d__160")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnDataChanged>d__161")]
protected virtual Task OnDataChanged();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<SetParametersAsync>d__162")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<Reload>d__163")]
public Task Reload();
    private string GetPropertyFilterExpression(string property, string filterCaseSensitivityOperator);
    private bool IsColumnFilterPropertyTypeString(RadzenDataGridColumn`1<object> column);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnLoadData>d__168")]
private Task OnLoadData(LoadDataArgs args);
    public IEnumerable get_View();
    protected virtual IEnumerable`1<object> get_Items();
    protected virtual void SelectItemFromValue(object value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<Clear>d__175")]
private Task Clear();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<HandleKeyPress>d__177")]
protected virtual Task HandleKeyPress(KeyboardEventArgs args, bool isFilter, Nullable`1<bool> shouldSelectOnChange);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<DebounceFilter>d__178")]
private Task DebounceFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<CloseOnEscape>d__179")]
private Task CloseOnEscape(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<RefreshAfterFilter>d__180")]
private Task RefreshAfterFilter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnFilter>d__181")]
protected virtual Task OnFilter(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
public bool get_IsLoading();
    [CompilerGeneratedAttribute]
public void set_IsLoading(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowSorting();
    [CompilerGeneratedAttribute]
public void set_AllowSorting(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_AllowFiltering();
    [CompilerGeneratedAttribute]
public virtual void set_AllowFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowFilteringByAllStringColumns();
    [CompilerGeneratedAttribute]
public void set_AllowFilteringByAllStringColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowFilteringByWord();
    [CompilerGeneratedAttribute]
public void set_AllowFilteringByWord(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRowSelectOnRowClick();
    [CompilerGeneratedAttribute]
public void set_AllowRowSelectOnRowClick(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnRowSelect>d__206")]
private Task OnRowSelect(object item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<CloseAndFocus>d__207")]
private Task CloseAndFocus();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnChipRemove>d__208")]
private Task OnChipRemove(object item);
    protected virtual string GetComponentCssClass();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<OnAddClick>d__212")]
public Task OnAddClick(MouseEventArgs args);
    public RadzenDataGrid`1<object> get_DataGrid();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownDataGrid`1/<Reset>d__215")]
public Task Reset();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal RenderFragment RenderFilter();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ParameterView parameters);
    [CompilerGeneratedAttribute]
private bool <OnLoadData>b__168_2(RadzenDataGridColumn`1<object> c);
    [CompilerGeneratedAttribute]
private bool <OnLoadData>b__168_0(RadzenDataGridColumn`1<object> c);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__216_0(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__216_1(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__216_2(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_3(ElementReference __value);
    [CompilerGeneratedAttribute]
private object <BuildRenderTree>b__216_11(object i);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__216_4(MouseEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_5(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__216_13(object context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_6(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_7(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_8(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__216_10(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__217_0(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__217_1(string args);
    [CompilerGeneratedAttribute]
private void <RenderFilter>b__217_2(ElementReference __value);
}
[DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Radzen.Blazor.RadzenDropDownDataGridColumn : RadzenDataGridColumn`1<object> {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenDropDownItem`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropDown`1<TValue> <DropDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RadzenDropDown`1<TValue> DropDown { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public object Item { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RadzenDropDown`1<TValue> get_DropDown();
    [CompilerGeneratedAttribute]
public void set_DropDown(RadzenDropDown`1<TValue> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropDownItem`1/<SelectItem>d__17")]
private Task SelectItem(MouseEventArgs args, bool isclick);
    protected string GetComponentCssClass(string prefix);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_1(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_2(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_3(MouseEventArgs args);
}
public class Radzen.Blazor.RadzenDropZone`1 : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropZoneContainer`1<TItem> <Container>k__BackingField;
    private string cssClass;
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public RenderFragment Footer { get; public set; }
    [CascadingParameterAttribute]
private RadzenDropZoneContainer`1<TItem> Container { get; private set; }
    private IEnumerable`1<TItem> Items { get; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(RenderFragment value);
    [CompilerGeneratedAttribute]
private RadzenDropZoneContainer`1<TItem> get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(RadzenDropZoneContainer`1<TItem> value);
    private IEnumerable`1<TItem> get_Items();
    internal bool CanDrop();
    internal void OnDragOver(DragEventArgs args);
    private void OnDragLeave(DragEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropZone`1/<OnDrop>d__17")]
private Task OnDrop(DragEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropZone`1/<OnDropInternal>d__18")]
internal Task OnDropInternal();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropZone`1/<OnAfterRenderAsync>d__19")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual string GetComponentCssClass();
    private Tuple`2<RadzenDropZoneItemRenderEventArgs`1<TItem>, IReadOnlyDictionary`2<string, object>> ItemAttributes(TItem item);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_Items>b__13_0(TItem i);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__23_0(ElementReference __value);
}
[CascadingTypeParameterAttribute("TItem")]
public class Radzen.Blazor.RadzenDropZoneContainer`1 : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<TItem, RadzenDropZone`1<TItem>, bool> <ItemSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RadzenDropZoneItemEventArgs`1<TItem>, bool> <CanDrop>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RadzenDropZoneItemRenderEventArgs`1<TItem>> <ItemRender>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenDropZoneItemEventArgs`1<TItem>> <Drop>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropZoneItemEventArgs`1<TItem> <Payload>k__BackingField;
    [ParameterAttribute]
public IEnumerable`1<TItem> Data { get; public set; }
    [ParameterAttribute]
public Func`3<TItem, RadzenDropZone`1<TItem>, bool> ItemSelector { get; public set; }
    [ParameterAttribute]
public Func`2<RadzenDropZoneItemEventArgs`1<TItem>, bool> CanDrop { get; public set; }
    [ParameterAttribute]
public Action`1<RadzenDropZoneItemRenderEventArgs`1<TItem>> ItemRender { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> Template { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenDropZoneItemEventArgs`1<TItem>> Drop { get; public set; }
    internal RadzenDropZoneItemEventArgs`1<TItem> Payload { get; internal set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<TItem> value);
    [CompilerGeneratedAttribute]
public Func`3<TItem, RadzenDropZone`1<TItem>, bool> get_ItemSelector();
    [CompilerGeneratedAttribute]
public void set_ItemSelector(Func`3<TItem, RadzenDropZone`1<TItem>, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<RadzenDropZoneItemEventArgs`1<TItem>, bool> get_CanDrop();
    [CompilerGeneratedAttribute]
public void set_CanDrop(Func`2<RadzenDropZoneItemEventArgs`1<TItem>, bool> value);
    [CompilerGeneratedAttribute]
public Action`1<RadzenDropZoneItemRenderEventArgs`1<TItem>> get_ItemRender();
    [CompilerGeneratedAttribute]
public void set_ItemRender(Action`1<RadzenDropZoneItemRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenDropZoneItemEventArgs`1<TItem>> get_Drop();
    [CompilerGeneratedAttribute]
public void set_Drop(EventCallback`1<RadzenDropZoneItemEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
internal RadzenDropZoneItemEventArgs`1<TItem> get_Payload();
    [CompilerGeneratedAttribute]
internal void set_Payload(RadzenDropZoneItemEventArgs`1<TItem> value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenDropZoneItem`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropZone`1<TItem> <Zone>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropZoneContainer`1<TItem> <Container>k__BackingField;
    private string cssClass;
    private string dragCssClass;
    [CascadingParameterAttribute]
private TItem Item { get; private set; }
    [CascadingParameterAttribute]
private RadzenDropZone`1<TItem> Zone { get; private set; }
    [CascadingParameterAttribute]
private RadzenDropZoneContainer`1<TItem> Container { get; private set; }
    [CompilerGeneratedAttribute]
private TItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(TItem value);
    [CompilerGeneratedAttribute]
private RadzenDropZone`1<TItem> get_Zone();
    [CompilerGeneratedAttribute]
private void set_Zone(RadzenDropZone`1<TItem> value);
    [CompilerGeneratedAttribute]
private RadzenDropZoneContainer`1<TItem> get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(RadzenDropZoneContainer`1<TItem> value);
    private void OnDragStart();
    private void OnDragOver(DragEventArgs args);
    private void OnDragLeave(DragEventArgs args);
    private void OnDragEnd(DragEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenDropZoneItem`1/<OnDrop>d__16")]
private Task OnDrop(DragEventArgs args);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__20_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenEmailValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    protected virtual bool Validate(IRadzenFormComponent component);
}
public class Radzen.Blazor.RadzenFieldset : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <AllowCollapse>k__BackingField;
    private bool collapsed;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <SummaryTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Collapse>k__BackingField;
    private string contentStyle;
    private string summaryContentStyle;
    private bool preventKeyPress;
    [ParameterAttribute]
public bool AllowCollapse { get; public set; }
    [ParameterAttribute]
public bool Collapsed { get; public set; }
    [ParameterAttribute]
public string ExpandTitle { get; public set; }
    [ParameterAttribute]
public string CollapseTitle { get; public set; }
    [ParameterAttribute]
public string ExpandAriaLabel { get; public set; }
    [ParameterAttribute]
public string CollapseAriaLabel { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment HeaderTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment SummaryTemplate { get; public set; }
    [ParameterAttribute]
public EventCallback Expand { get; public set; }
    [ParameterAttribute]
public EventCallback Collapse { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_AllowCollapse();
    [CompilerGeneratedAttribute]
public void set_AllowCollapse(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public string get_ExpandTitle();
    [CompilerGeneratedAttribute]
public void set_ExpandTitle(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseTitle();
    [CompilerGeneratedAttribute]
public void set_CollapseTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ExpandAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ExpandAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseAriaLabel();
    [CompilerGeneratedAttribute]
public void set_CollapseAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_SummaryTemplate();
    [CompilerGeneratedAttribute]
public void set_SummaryTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(EventCallback value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFieldset/<Toggle>d__60")]
private Task Toggle(EventArgs args);
    protected virtual void OnInitialized();
    private string TitleAttribute();
    private string AriaLabelAttribute();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFieldset/<SetParametersAsync>d__64")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFieldset/<OnKeyPress>d__67")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__68_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__68_1(KeyboardEventArgs args);
}
public class Radzen.Blazor.RadzenFileInput`1 : FormComponent`1<TValue> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChooseText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeleteText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected ElementReference fileUpload;
    private bool visibleChanged;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadErrorEventArgs> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <ImageClick>k__BackingField;
    private bool clicking;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <FileNameChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<long>> <FileSizeChanged>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public string ChooseText { get; public set; }
    [ParameterAttribute]
public string DeleteText { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    private ClassList ChooseClassList { get; }
    private ClassList ButtonClassList { get; }
    private bool IsImage { get; }
    private string ImageValue { get; }
    [ParameterAttribute]
public EventCallback`1<UploadErrorEventArgs> Error { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> ImageClick { get; public set; }
    [ParameterAttribute]
public string Accept { get; public set; }
    [ParameterAttribute]
public int MaxFileSize { get; public set; }
    [ParameterAttribute]
public int MaxWidth { get; public set; }
    [ParameterAttribute]
public int MaxHeight { get; public set; }
    [ParameterAttribute]
public string ImageStyle { get; public set; }
    [ParameterAttribute]
public string FileName { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> FileNameChanged { get; public set; }
    [ParameterAttribute]
public Nullable`1<long> FileSize { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<long>> FileSizeChanged { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_ChooseText();
    [CompilerGeneratedAttribute]
public void set_ChooseText(string value);
    [CompilerGeneratedAttribute]
public string get_DeleteText();
    [CompilerGeneratedAttribute]
public void set_DeleteText(string value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    private ClassList get_ChooseClassList();
    private ClassList get_ButtonClassList();
    protected virtual string GetComponentCssClass();
    private bool get_IsImage();
    private string get_ImageValue();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<OnChange>d__30")]
private Task OnChange();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<OnChange>d__31")]
[JSInvokableAttribute("RadzenUpload.OnChange")]
public Task OnChange(IEnumerable`1<PreviewFileInfo> files);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<OnAfterRenderAsync>d__33")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<SetParametersAsync>d__34")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventCallback`1<UploadErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_ImageClick();
    [CompilerGeneratedAttribute]
public void set_ImageClick(EventCallback`1<MouseEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<OnImageClick>d__44")]
public Task OnImageClick(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenFileInput`1/<Remove>d__45")]
private Task Remove(EventArgs args);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
    [CompilerGeneratedAttribute]
public int get_MaxFileSize();
    [CompilerGeneratedAttribute]
public void set_MaxFileSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(int value);
    [CompilerGeneratedAttribute]
public int get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(int value);
    [CompilerGeneratedAttribute]
public string get_ImageStyle();
    [CompilerGeneratedAttribute]
public void set_ImageStyle(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_FileNameChanged();
    [CompilerGeneratedAttribute]
public void set_FileNameChanged(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileSize();
    [CompilerGeneratedAttribute]
public void set_FileSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<long>> get_FileSizeChanged();
    [CompilerGeneratedAttribute]
public void set_FileSizeChanged(EventCallback`1<Nullable`1<long>> value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__82_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__82_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenFooter : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RadzenLayout <Layout>k__BackingField;
    [CascadingParameterAttribute]
public RadzenLayout Layout { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(RadzenLayout value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenFormField : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <End>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Helper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFloatingLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    private bool disabled;
    private IFormFieldContext context;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment Start { get; public set; }
    [ParameterAttribute]
public RenderFragment End { get; public set; }
    [ParameterAttribute]
public RenderFragment Helper { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public bool AllowFloatingLabel { get; public set; }
    [ParameterAttribute]
public string Component { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_End();
    [CompilerGeneratedAttribute]
public void set_End(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Helper();
    [CompilerGeneratedAttribute]
public void set_Helper(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowFloatingLabel();
    [CompilerGeneratedAttribute]
public void set_AllowFloatingLabel(bool value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    private void DisabledChanged(bool value);
    protected virtual void OnParametersSet();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__38_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__38_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenGoogleMap : RadzenComponent {
    [CompilerGeneratedAttribute]
private IEnumerable`1<RadzenGoogleMapMarker> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<GoogleMapClickEventArgs> <MapClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenGoogleMapMarker> <MarkerClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MapId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    private double zoom;
    [CompilerGeneratedAttribute]
private bool <FitBoundsToMarkersOnUpdate>k__BackingField;
    private GoogleMapPosition center;
    [CompilerGeneratedAttribute]
private RenderFragment <Markers>k__BackingField;
    private List`1<RadzenGoogleMapMarker> markers;
    private bool firstRender;
    [ParameterAttribute]
public IEnumerable`1<RadzenGoogleMapMarker> Data { get; public set; }
    [ParameterAttribute]
public EventCallback`1<GoogleMapClickEventArgs> MapClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenGoogleMapMarker> MarkerClick { get; public set; }
    [ParameterAttribute]
public string ApiKey { get; public set; }
    [ParameterAttribute]
public string MapId { get; public set; }
    [ParameterAttribute]
public Dictionary`2<string, object> Options { get; public set; }
    [ParameterAttribute]
public double Zoom { get; public set; }
    [ParameterAttribute]
public bool FitBoundsToMarkersOnUpdate { get; public set; }
    [ParameterAttribute]
public GoogleMapPosition Center { get; public set; }
    [ParameterAttribute]
public RenderFragment Markers { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<RadzenGoogleMapMarker> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<RadzenGoogleMapMarker> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<GoogleMapClickEventArgs> get_MapClick();
    [CompilerGeneratedAttribute]
public void set_MapClick(EventCallback`1<GoogleMapClickEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenGoogleMapMarker> get_MarkerClick();
    [CompilerGeneratedAttribute]
public void set_MarkerClick(EventCallback`1<RadzenGoogleMapMarker> value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public string get_MapId();
    [CompilerGeneratedAttribute]
public void set_MapId(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
    public double get_Zoom();
    public void set_Zoom(double value);
    [CompilerGeneratedAttribute]
public bool get_FitBoundsToMarkersOnUpdate();
    [CompilerGeneratedAttribute]
public void set_FitBoundsToMarkersOnUpdate(bool value);
    public GoogleMapPosition get_Center();
    public void set_Center(GoogleMapPosition value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenGoogleMap/<UpdateMap>d__36")]
private Task UpdateMap();
    [CompilerGeneratedAttribute]
public RenderFragment get_Markers();
    [CompilerGeneratedAttribute]
public void set_Markers(RenderFragment value);
    public void AddMarker(RadzenGoogleMapMarker marker);
    public void RemoveMarker(RadzenGoogleMapMarker marker);
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenGoogleMap/<OnMapClick>d__45")]
[JSInvokableAttribute("RadzenGoogleMap.OnMapClick")]
public Task OnMapClick(GoogleMapClickEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenGoogleMap/<OnMarkerClick>d__46")]
[JSInvokableAttribute("RadzenGoogleMap.OnMarkerClick")]
public Task OnMarkerClick(RadzenGoogleMapMarker marker);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenGoogleMap/<OnAfterRenderAsync>d__48")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__50_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__50_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenGoogleMapMarker : RadzenComponent {
    [CompilerGeneratedAttribute]
private GoogleMapPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    private RadzenGoogleMap _map;
    [ParameterAttribute]
public GoogleMapPosition Position { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Label { get; public set; }
    [CascadingParameterAttribute]
public RadzenGoogleMap Map { get; public set; }
    [CompilerGeneratedAttribute]
public GoogleMapPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(GoogleMapPosition value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    public RadzenGoogleMap get_Map();
    public void set_Map(RadzenGoogleMap value);
    public virtual void Dispose();
}
public class Radzen.Blazor.RadzenGravatar : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateText>k__BackingField;
    [ParameterAttribute]
public string Email { get; public set; }
    [ParameterAttribute]
public string AlternateText { get; public set; }
    protected string Url { get; }
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_AlternateText();
    [CompilerGeneratedAttribute]
public void set_AlternateText(string value);
    protected string get_Url();
    private string GetAlternateText();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__12_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenGridLines : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [CascadingParameterAttribute]
unknown IChartAxis ChartAxis {public set; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    public void set_ChartAxis(IChartAxis value);
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenGridRow : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InEditMode>k__BackingField;
    private List`1<IRadzenFormComponent> components;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public bool InEditMode { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public bool get_InEditMode();
    [CompilerGeneratedAttribute]
public void set_InEditMode(bool value);
    public sealed virtual void AddComponent(IRadzenFormComponent component);
    public sealed virtual void RemoveComponent(IRadzenFormComponent component);
    public virtual Task SetParametersAsync(ParameterView parameters);
    public sealed virtual IRadzenFormComponent FindComponent(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenHeader : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RadzenLayout <Layout>k__BackingField;
    [CascadingParameterAttribute]
public RadzenLayout Layout { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(RadzenLayout value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenHeading : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_3(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_4(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__9_5(ElementReference __value);
}
public class Radzen.Blazor.RadzenHtml : ComponentBase {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditor : FormComponent`1<string> {
    [CompilerGeneratedAttribute]
private bool <ShowToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEditorMode <Mode>k__BackingField;
    private HtmlEditorMode mode;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <UploadHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<HtmlEditorPasteEventArgs> <Paste>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadErrorEventArgs> <UploadError>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<HtmlEditorExecuteEventArgs> <Execute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReference <ContentEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTextArea <TextArea>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenHtmlEditorCommandState <State>k__BackingField;
    private IDictionary`2<string, Func`1<Task>> shortcuts;
    private bool htmlChanged;
    private bool visibleChanged;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    private bool valueChanged;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadCompleteEventArgs> <UploadComplete>k__BackingField;
    [ParameterAttribute]
public bool ShowToolbar { get; public set; }
    [ParameterAttribute]
public HtmlEditorMode Mode { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public IDictionary`2<string, string> UploadHeaders { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> Input { get; public set; }
    [ParameterAttribute]
public EventCallback`1<HtmlEditorPasteEventArgs> Paste { get; public set; }
    [ParameterAttribute]
public EventCallback`1<UploadErrorEventArgs> UploadError { get; public set; }
    [ParameterAttribute]
public EventCallback`1<HtmlEditorExecuteEventArgs> Execute { get; public set; }
    [ParameterAttribute]
public string UploadUrl { get; public set; }
    private ElementReference ContentEditable { get; private set; }
    private RadzenTextArea TextArea { get; private set; }
    internal RadzenHtmlEditorCommandState State { get; internal set; }
    private string Html { get; private set; }
    [ParameterAttribute]
public EventCallback`1<UploadCompleteEventArgs> UploadComplete { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowToolbar();
    [CompilerGeneratedAttribute]
public void set_ShowToolbar(bool value);
    [CompilerGeneratedAttribute]
public HtmlEditorMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(HtmlEditorMode value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_UploadHeaders();
    [CompilerGeneratedAttribute]
public void set_UploadHeaders(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<HtmlEditorPasteEventArgs> get_Paste();
    [CompilerGeneratedAttribute]
public void set_Paste(EventCallback`1<HtmlEditorPasteEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadErrorEventArgs> get_UploadError();
    [CompilerGeneratedAttribute]
public void set_UploadError(EventCallback`1<UploadErrorEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnError>d__29")]
[JSInvokableAttribute("OnError")]
public Task OnError(string error);
    [CompilerGeneratedAttribute]
public EventCallback`1<HtmlEditorExecuteEventArgs> get_Execute();
    [CompilerGeneratedAttribute]
public void set_Execute(EventCallback`1<HtmlEditorExecuteEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_UploadUrl();
    [CompilerGeneratedAttribute]
public void set_UploadUrl(string value);
    [CompilerGeneratedAttribute]
private ElementReference get_ContentEditable();
    [CompilerGeneratedAttribute]
private void set_ContentEditable(ElementReference value);
    [CompilerGeneratedAttribute]
private RadzenTextArea get_TextArea();
    [CompilerGeneratedAttribute]
private void set_TextArea(RadzenTextArea value);
    public virtual ValueTask FocusAsync();
    [CompilerGeneratedAttribute]
internal RadzenHtmlEditorCommandState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(RadzenHtmlEditorCommandState value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnFocus>d__51")]
private Task OnFocus();
    public void RegisterShortcut(string key, Func`1<Task> action);
    public void UnregisterShortcut(string key);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnSelectionChange>d__55")]
[JSInvokableAttribute]
public Task OnSelectionChange();
    [JSInvokableAttribute("GetHeaders")]
public IDictionary`2<string, string> GetHeaders();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<ExecuteCommandAsync>d__57")]
public Task ExecuteCommandAsync(string name, string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<ExecuteShortcutAsync>d__58")]
[JSInvokableAttribute("ExecuteShortcutAsync")]
public Task ExecuteShortcutAsync(string shortcut);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<SourceChanged>d__59")]
private Task SourceChanged(string html);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnChange>d__60")]
private Task OnChange();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnExecuteAsync>d__61")]
internal Task OnExecuteAsync(string name);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<SaveSelectionAsync>d__62")]
public Task SaveSelectionAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<RestoreSelectionAsync>d__63")]
public Task RestoreSelectionAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<UpdateCommandState>d__64")]
private Task UpdateCommandState();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnBlur>d__65")]
private Task OnBlur();
    internal ValueTask`1<T> GetSelectionAttributes(string selector, String[] attributes);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnAfterRenderAsync>d__70")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    internal void SetMode(HtmlEditorMode value);
    public HtmlEditorMode GetMode();
    [CompilerGeneratedAttribute]
private string get_Html();
    [CompilerGeneratedAttribute]
private void set_Html(string value);
    protected virtual void OnInitialized();
    [JSInvokableAttribute]
public void OnChange(string html);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnPaste>d__79")]
[JSInvokableAttribute]
public Task`1<string> OnPaste(string html);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<SetParametersAsync>d__81")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual string GetComponentCssClass();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadCompleteEventArgs> get_UploadComplete();
    [CompilerGeneratedAttribute]
public void set_UploadComplete(EventCallback`1<UploadCompleteEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<RaiseUploadComplete>d__88")]
internal Task RaiseUploadComplete(UploadCompleteEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditor/<OnUploadComplete>d__89")]
[JSInvokableAttribute("OnUploadComplete")]
public Task OnUploadComplete(string response);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_2(object __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_3(ElementReference __value);
}
public class Radzen.Blazor.RadzenHtmlEditorAlignCenter : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorAlignLeft : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorAlignRight : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorBackground : RadzenHtmlEditorColorBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__10_0(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__10_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenHtmlEditorBackgroundItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [ParameterAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorBold : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Shortcut();
    [CompilerGeneratedAttribute]
public virtual void set_Shortcut(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public abstract class Radzen.Blazor.RadzenHtmlEditorButtonBase : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    protected string CommandName { get; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public virtual string get_Shortcut();
    [CompilerGeneratedAttribute]
public virtual void set_Shortcut(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorButtonBase/<OnClick>d__11")]
protected virtual Task OnClick();
    protected virtual void OnInitialized();
    public sealed virtual void Dispose();
}
public class Radzen.Blazor.RadzenHtmlEditorColor : RadzenHtmlEditorColorBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__10_0(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__10_1(RenderTreeBuilder __builder2);
}
public abstract class Radzen.Blazor.RadzenHtmlEditorColorBase : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private bool <ShowHSV>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRGBA>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreenText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlueText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlphaText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonText>k__BackingField;
    [ParameterAttribute]
public bool ShowHSV { get; public set; }
    [ParameterAttribute]
public bool ShowRGBA { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool ShowColors { get; public set; }
    [ParameterAttribute]
public bool ShowButton { get; public set; }
    [ParameterAttribute]
public string HexText { get; public set; }
    [ParameterAttribute]
public string RedText { get; public set; }
    [ParameterAttribute]
public string GreenText { get; public set; }
    [ParameterAttribute]
public string BlueText { get; public set; }
    [ParameterAttribute]
public string AlphaText { get; public set; }
    [ParameterAttribute]
public string ButtonText { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowHSV();
    [CompilerGeneratedAttribute]
public void set_ShowHSV(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowRGBA();
    [CompilerGeneratedAttribute]
public void set_ShowRGBA(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_ShowColors();
    [CompilerGeneratedAttribute]
public void set_ShowColors(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowButton();
    [CompilerGeneratedAttribute]
public void set_ShowButton(bool value);
    [CompilerGeneratedAttribute]
public string get_HexText();
    [CompilerGeneratedAttribute]
public void set_HexText(string value);
    [CompilerGeneratedAttribute]
public string get_RedText();
    [CompilerGeneratedAttribute]
public void set_RedText(string value);
    [CompilerGeneratedAttribute]
public string get_GreenText();
    [CompilerGeneratedAttribute]
public void set_GreenText(string value);
    [CompilerGeneratedAttribute]
public string get_BlueText();
    [CompilerGeneratedAttribute]
public void set_BlueText(string value);
    [CompilerGeneratedAttribute]
public string get_AlphaText();
    [CompilerGeneratedAttribute]
public void set_AlphaText(string value);
    [CompilerGeneratedAttribute]
public string get_ButtonText();
    [CompilerGeneratedAttribute]
public void set_ButtonText(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorColorBase/<OnChange>d__44")]
protected Task OnChange(string value);
}
public class Radzen.Blazor.RadzenHtmlEditorColorItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [ParameterAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
internal class Radzen.Blazor.RadzenHtmlEditorCommandState : object {
    [CompilerGeneratedAttribute]
private bool <Undo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Redo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrikeThrough>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Subscript>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Superscript>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustifyRight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustifyLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustifyCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustifyFull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unlink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    public bool Undo { get; public set; }
    public bool Redo { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool StrikeThrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public bool Underline { get; public set; }
    public bool JustifyRight { get; public set; }
    public bool JustifyLeft { get; public set; }
    public bool JustifyCenter { get; public set; }
    public bool JustifyFull { get; public set; }
    public string FontName { get; public set; }
    public string FontSize { get; public set; }
    public string FormatBlock { get; public set; }
    public bool Unlink { get; public set; }
    public string Html { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Undo();
    [CompilerGeneratedAttribute]
public void set_Undo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Redo();
    [CompilerGeneratedAttribute]
public void set_Redo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public bool get_StrikeThrough();
    [CompilerGeneratedAttribute]
public void set_StrikeThrough(bool value);
    [CompilerGeneratedAttribute]
public bool get_Subscript();
    [CompilerGeneratedAttribute]
public void set_Subscript(bool value);
    [CompilerGeneratedAttribute]
public bool get_Superscript();
    [CompilerGeneratedAttribute]
public void set_Superscript(bool value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public bool get_JustifyRight();
    [CompilerGeneratedAttribute]
public void set_JustifyRight(bool value);
    [CompilerGeneratedAttribute]
public bool get_JustifyLeft();
    [CompilerGeneratedAttribute]
public void set_JustifyLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_JustifyCenter();
    [CompilerGeneratedAttribute]
public void set_JustifyCenter(bool value);
    [CompilerGeneratedAttribute]
public bool get_JustifyFull();
    [CompilerGeneratedAttribute]
public void set_JustifyFull(bool value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public string get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(string value);
    [CompilerGeneratedAttribute]
public string get_FormatBlock();
    [CompilerGeneratedAttribute]
public void set_FormatBlock(string value);
    [CompilerGeneratedAttribute]
public bool get_Unlink();
    [CompilerGeneratedAttribute]
public void set_Unlink(bool value);
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
}
public class Radzen.Blazor.RadzenHtmlEditorCustomTool : ComponentBase {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEditorMode <EnabledModes>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenHtmlEditor> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public HtmlEditorMode EnabledModes { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenHtmlEditor> Template { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public string CommandName { get; public set; }
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public HtmlEditorMode get_EnabledModes();
    [CompilerGeneratedAttribute]
public void set_EnabledModes(HtmlEditorMode value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenHtmlEditor> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenHtmlEditor> value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorCustomTool/<OnClick>d__40")]
private Task OnClick();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorFontName : ComponentBase {
    private IList`1<RadzenHtmlEditorFontNameItem> fonts;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    internal void AddFont(RadzenHtmlEditorFontNameItem font);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorFontName/<OnChange>d__18")]
private Task OnChange(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__19_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__19_1(RenderTreeBuilder __builder3);
}
public class Radzen.Blazor.RadzenHtmlEditorFontNameItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenHtmlEditorFontName <Parent>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [CascadingParameterAttribute]
public RadzenHtmlEditorFontName Parent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditorFontName get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(RadzenHtmlEditorFontName value);
    protected virtual void OnInitialized();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorFontSize : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorFontSize/<OnChange>d__12")]
private Task OnChange(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorFormatBlock : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading1Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading2Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading3Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading4Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading5Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Heading6Text>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string NormalText { get; public set; }
    [ParameterAttribute]
public string Heading1Text { get; public set; }
    [ParameterAttribute]
public string Heading2Text { get; public set; }
    [ParameterAttribute]
public string Heading3Text { get; public set; }
    [ParameterAttribute]
public string Heading4Text { get; public set; }
    [ParameterAttribute]
public string Heading5Text { get; public set; }
    [ParameterAttribute]
public string Heading6Text { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_NormalText();
    [CompilerGeneratedAttribute]
public void set_NormalText(string value);
    [CompilerGeneratedAttribute]
public string get_Heading1Text();
    [CompilerGeneratedAttribute]
public void set_Heading1Text(string value);
    [CompilerGeneratedAttribute]
public string get_Heading2Text();
    [CompilerGeneratedAttribute]
public void set_Heading2Text(string value);
    [CompilerGeneratedAttribute]
public string get_Heading3Text();
    [CompilerGeneratedAttribute]
public void set_Heading3Text(string value);
    [CompilerGeneratedAttribute]
public string get_Heading4Text();
    [CompilerGeneratedAttribute]
public void set_Heading4Text(string value);
    [CompilerGeneratedAttribute]
public string get_Heading5Text();
    [CompilerGeneratedAttribute]
public void set_Heading5Text(string value);
    [CompilerGeneratedAttribute]
public string get_Heading6Text();
    [CompilerGeneratedAttribute]
public void set_Heading6Text(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorFormatBlock/<OnChange>d__40")]
private Task OnChange(string value);
    protected virtual void OnInitialized();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_0();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_1();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_2();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_3();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_4();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_5();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__41_6();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__43_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenHtmlEditorImage : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadChooseText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AltText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OkText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WidthText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeightText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAlt>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenUpload <FileUpload>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string SelectText { get; public set; }
    [ParameterAttribute]
public string UploadChooseText { get; public set; }
    [ParameterAttribute]
public string UrlText { get; public set; }
    [ParameterAttribute]
public string AltText { get; public set; }
    [ParameterAttribute]
public string OkText { get; public set; }
    [ParameterAttribute]
public string CancelText { get; public set; }
    [ParameterAttribute]
public string WidthText { get; public set; }
    [ParameterAttribute]
public string HeightText { get; public set; }
    [ParameterAttribute]
public bool ShowWidth { get; public set; }
    [ParameterAttribute]
public bool ShowHeight { get; public set; }
    [ParameterAttribute]
public bool ShowSrc { get; public set; }
    [ParameterAttribute]
public bool ShowAlt { get; public set; }
    private ImageAttributes Attributes { get; private set; }
    private RadzenUpload FileUpload { get; private set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_SelectText();
    [CompilerGeneratedAttribute]
public void set_SelectText(string value);
    [CompilerGeneratedAttribute]
public string get_UploadChooseText();
    [CompilerGeneratedAttribute]
public void set_UploadChooseText(string value);
    [CompilerGeneratedAttribute]
public string get_UrlText();
    [CompilerGeneratedAttribute]
public void set_UrlText(string value);
    [CompilerGeneratedAttribute]
public string get_AltText();
    [CompilerGeneratedAttribute]
public void set_AltText(string value);
    [CompilerGeneratedAttribute]
public string get_OkText();
    [CompilerGeneratedAttribute]
public void set_OkText(string value);
    [CompilerGeneratedAttribute]
public string get_CancelText();
    [CompilerGeneratedAttribute]
public void set_CancelText(string value);
    [CompilerGeneratedAttribute]
public string get_WidthText();
    [CompilerGeneratedAttribute]
public void set_WidthText(string value);
    [CompilerGeneratedAttribute]
public string get_HeightText();
    [CompilerGeneratedAttribute]
public void set_HeightText(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowWidth();
    [CompilerGeneratedAttribute]
public void set_ShowWidth(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowHeight();
    [CompilerGeneratedAttribute]
public void set_ShowHeight(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSrc();
    [CompilerGeneratedAttribute]
public void set_ShowSrc(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowAlt();
    [CompilerGeneratedAttribute]
public void set_ShowAlt(bool value);
    [CompilerGeneratedAttribute]
private ImageAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(ImageAttributes value);
    [CompilerGeneratedAttribute]
private RadzenUpload get_FileUpload();
    [CompilerGeneratedAttribute]
private void set_FileUpload(RadzenUpload value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorImage/<OnSubmit>d__61")]
private Task OnSubmit();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorImage/<OnUploadComplete>d__62")]
private Task OnUploadComplete(UploadCompleteEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorImage/<OnUploadError>d__63")]
private Task OnUploadError(UploadErrorEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorImage/<InsertHtml>d__64")]
private Task InsertHtml();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorImage/<OnClick>d__66")]
protected virtual Task OnClick();
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
}
public class Radzen.Blazor.RadzenHtmlEditorIndent : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorItalic : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Shortcut();
    [CompilerGeneratedAttribute]
public virtual void set_Shortcut(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorJustify : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorLink : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenInNewWindowText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OkText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string UrlText { get; public set; }
    [ParameterAttribute]
public string OpenInNewWindowText { get; public set; }
    [ParameterAttribute]
public string LinkText { get; public set; }
    [ParameterAttribute]
public string OkText { get; public set; }
    [ParameterAttribute]
public string CancelText { get; public set; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_UrlText();
    [CompilerGeneratedAttribute]
public void set_UrlText(string value);
    [CompilerGeneratedAttribute]
public string get_OpenInNewWindowText();
    [CompilerGeneratedAttribute]
public void set_OpenInNewWindowText(string value);
    [CompilerGeneratedAttribute]
public string get_LinkText();
    [CompilerGeneratedAttribute]
public void set_LinkText(string value);
    [CompilerGeneratedAttribute]
public string get_OkText();
    [CompilerGeneratedAttribute]
public void set_OkText(string value);
    [CompilerGeneratedAttribute]
public string get_CancelText();
    [CompilerGeneratedAttribute]
public void set_CancelText(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Shortcut();
    [CompilerGeneratedAttribute]
public virtual void set_Shortcut(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorLink/<OnClick>d__30")]
protected virtual Task OnClick();
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
}
public class Radzen.Blazor.RadzenHtmlEditorOrderedList : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorOutdent : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorRedo : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorRemoveFormat : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorSeparator : ComponentBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorSource : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public string Title { get; public set; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenHtmlEditorSource/<OnClick>d__5")]
protected virtual Task OnClick();
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
}
public class Radzen.Blazor.RadzenHtmlEditorStrikeThrough : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorSubscript : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorSuperscript : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorUnderline : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Shortcut();
    [CompilerGeneratedAttribute]
public virtual void set_Shortcut(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorUndo : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorUnlink : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenHtmlEditorUnorderedList : RadzenHtmlEditorButtonBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    protected string CommandName { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenIcon : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IconStyle> <IconStyle>k__BackingField;
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public Nullable`1<IconStyle> IconStyle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<IconStyle> get_IconStyle();
    [CompilerGeneratedAttribute]
public void set_IconStyle(Nullable`1<IconStyle> value);
    protected virtual string GetComponentCssClass();
    private string getStyle();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__14_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenImage : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <Click>k__BackingField;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public string AlternateText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> Click { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_AlternateText();
    [CompilerGeneratedAttribute]
public void set_AlternateText(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MouseEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenImage/<OnClick>d__12")]
protected Task OnClick(MouseEventArgs args);
    private string GetAlternateText();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__14_0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__14_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenLabel : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Component { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__13_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenLayout : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ThemeService themeService;
    [InjectAttribute]
private IServiceProvider ServiceProvider { get; private set; }
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    protected virtual void OnInitialized();
    private void OnThemeChanged();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__8_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__8_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenLegend : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private LegendPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [ParameterAttribute]
public LegendPosition Position { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [CompilerGeneratedAttribute]
public LegendPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(LegendPosition value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    internal double Measure(RadzenChart chart);
    protected virtual void Initialize();
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenLengthValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Max>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> Min { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(Nullable`1<int> value);
    protected virtual bool Validate(IRadzenFormComponent component);
}
public class Radzen.Blazor.RadzenLineSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private Interpolation <Interpolation>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public bool Smooth { get; public set; }
    [ParameterAttribute]
public Interpolation Interpolation { get; public set; }
    public string Color { get; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    public bool get_Smooth();
    public void set_Smooth(bool value);
    [CompilerGeneratedAttribute]
public Interpolation get_Interpolation();
    [CompilerGeneratedAttribute]
public void set_Interpolation(Interpolation value);
    public virtual string get_Color();
    protected virtual string TooltipStyle(TItem item);
    public virtual bool Contains(double x, double y, double tolerance);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    private IPathGenerator GetPathGenerator();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__25_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenLink : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Target { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__37_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__37_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenListBox`1 : DropDownBase`1<TValue> {
    [CompilerGeneratedAttribute]
private string <SelectAllText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ListBoxItemRenderEventArgs`1<TValue>> <ItemRender>k__BackingField;
    private bool visibleChanged;
    private bool disabledChanged;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [ParameterAttribute]
public string SelectAllText { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public Action`1<ListBoxItemRenderEventArgs`1<TValue>> ItemRender { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SelectAllText();
    [CompilerGeneratedAttribute]
public void set_SelectAllText(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Action`1<ListBoxItemRenderEventArgs`1<TValue>> get_ItemRender();
    [CompilerGeneratedAttribute]
public void set_ItemRender(Action`1<ListBoxItemRenderEventArgs`1<TValue>> value);
    internal ListBoxItemRenderEventArgs`1<TValue> ItemAttributes(RadzenListBoxItem`1<TValue> item);
    internal virtual void RenderItem(RenderTreeBuilder builder, object item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenListBox`1/<OnKeyDown>d__14")]
protected Task OnKeyDown(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenListBox`1/<SetParametersAsync>d__18")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenListBox`1/<OnAfterRenderAsync>d__19")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    protected virtual string GetComponentCssClass();
    protected virtual Task SelectAll();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal RenderFragment RenderFilter();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__26_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__26_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__27_0(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <RenderFilter>b__27_1(string args);
    [CompilerGeneratedAttribute]
private void <RenderFilter>b__27_2(ElementReference __value);
}
public class Radzen.Blazor.RadzenListBoxItem`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenListBox`1<TValue> <ListBox>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public RadzenListBox`1<TValue> ListBox { get; public set; }
    [ParameterAttribute]
public object Item { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public RadzenListBox`1<TValue> get_ListBox();
    [CompilerGeneratedAttribute]
public void set_ListBox(RadzenListBox`1<TValue> value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenListBoxItem`1/<SelectItem>d__17")]
private Task SelectItem(MouseEventArgs args);
    private string GetComponentCssClass();
}
public class Radzen.Blazor.RadzenLogin : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <AutoComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoCompleteType <UserNameAutoCompleteType>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoCompleteType <PasswordAutoCompleteType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Variant> <FormFieldVariant>k__BackingField;
    private string username;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    private string password;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    private bool rememberMe;
    [CompilerGeneratedAttribute]
private bool <RememberMe>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<LoginArgs> <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Register>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <ResetPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRememberMe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowResetPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLoginButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegisterText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RememberMeText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegisterMessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResetPasswordText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordRequired>k__BackingField;
    [ParameterAttribute]
public bool AutoComplete { get; public set; }
    [ParameterAttribute]
public AutoCompleteType UserNameAutoCompleteType { get; public set; }
    [ParameterAttribute]
public AutoCompleteType PasswordAutoCompleteType { get; public set; }
    [ParameterAttribute]
public Nullable`1<Variant> FormFieldVariant { get; public set; }
    [ParameterAttribute]
public string Username { get; public set; }
    [ParameterAttribute]
public string Password { get; public set; }
    [ParameterAttribute]
public bool RememberMe { get; public set; }
    [ParameterAttribute]
public EventCallback`1<LoginArgs> Login { get; public set; }
    [ParameterAttribute]
public EventCallback Register { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> ResetPassword { get; public set; }
    [ParameterAttribute]
public bool AllowRegister { get; public set; }
    [ParameterAttribute]
public bool AllowRememberMe { get; public set; }
    [ParameterAttribute]
public bool AllowResetPassword { get; public set; }
    [ParameterAttribute]
public bool ShowLoginButton { get; public set; }
    [ParameterAttribute]
public string LoginText { get; public set; }
    [ParameterAttribute]
public string RegisterText { get; public set; }
    [ParameterAttribute]
public string RememberMeText { get; public set; }
    [ParameterAttribute]
public string RegisterMessageText { get; public set; }
    [ParameterAttribute]
public string ResetPasswordText { get; public set; }
    [ParameterAttribute]
public string UserText { get; public set; }
    [ParameterAttribute]
public string UserRequired { get; public set; }
    [ParameterAttribute]
public string PasswordText { get; public set; }
    [ParameterAttribute]
public string PasswordRequired { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoComplete();
    [CompilerGeneratedAttribute]
public void set_AutoComplete(bool value);
    [CompilerGeneratedAttribute]
public AutoCompleteType get_UserNameAutoCompleteType();
    [CompilerGeneratedAttribute]
public void set_UserNameAutoCompleteType(AutoCompleteType value);
    [CompilerGeneratedAttribute]
public AutoCompleteType get_PasswordAutoCompleteType();
    [CompilerGeneratedAttribute]
public void set_PasswordAutoCompleteType(AutoCompleteType value);
    [CompilerGeneratedAttribute]
public Nullable`1<Variant> get_FormFieldVariant();
    [CompilerGeneratedAttribute]
public void set_FormFieldVariant(Nullable`1<Variant> value);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_RememberMe();
    [CompilerGeneratedAttribute]
public void set_RememberMe(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<LoginArgs> get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(EventCallback`1<LoginArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback get_Register();
    [CompilerGeneratedAttribute]
public void set_Register(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_ResetPassword();
    [CompilerGeneratedAttribute]
public void set_ResetPassword(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowRegister();
    [CompilerGeneratedAttribute]
public void set_AllowRegister(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRememberMe();
    [CompilerGeneratedAttribute]
public void set_AllowRememberMe(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowResetPassword();
    [CompilerGeneratedAttribute]
public void set_AllowResetPassword(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLoginButton();
    [CompilerGeneratedAttribute]
public void set_ShowLoginButton(bool value);
    [CompilerGeneratedAttribute]
public string get_LoginText();
    [CompilerGeneratedAttribute]
public void set_LoginText(string value);
    [CompilerGeneratedAttribute]
public string get_RegisterText();
    [CompilerGeneratedAttribute]
public void set_RegisterText(string value);
    [CompilerGeneratedAttribute]
public string get_RememberMeText();
    [CompilerGeneratedAttribute]
public void set_RememberMeText(string value);
    [CompilerGeneratedAttribute]
public string get_RegisterMessageText();
    [CompilerGeneratedAttribute]
public void set_RegisterMessageText(string value);
    [CompilerGeneratedAttribute]
public string get_ResetPasswordText();
    [CompilerGeneratedAttribute]
public void set_ResetPasswordText(string value);
    [CompilerGeneratedAttribute]
public string get_UserText();
    [CompilerGeneratedAttribute]
public void set_UserText(string value);
    [CompilerGeneratedAttribute]
public string get_UserRequired();
    [CompilerGeneratedAttribute]
public void set_UserRequired(string value);
    [CompilerGeneratedAttribute]
public string get_PasswordText();
    [CompilerGeneratedAttribute]
public void set_PasswordText(string value);
    [CompilerGeneratedAttribute]
public string get_PasswordRequired();
    [CompilerGeneratedAttribute]
public void set_PasswordRequired(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenLogin/<OnLogin>d__96")]
protected Task OnLogin();
    private string Id(string name);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenLogin/<SetParametersAsync>d__99")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenLogin/<OnReset>d__100")]
protected Task OnReset(EventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenLogin/<OnRegister>d__101")]
protected Task OnRegister();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_9(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_14(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_10(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_11(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_16(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_12(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_13(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_18(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_2(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_3(string __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_5(string __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_7(bool __value);
}
public class Radzen.Blazor.RadzenMarkers : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double Size { get; public set; }
    [ParameterAttribute]
public MarkerType MarkerType { get; public set; }
    [CascadingParameterAttribute]
unknown IChartSeries Series {public set; }
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    public void set_Series(IChartSeries value);
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
}
public class Radzen.Blazor.RadzenMask : FormComponentWithAutoComplete`1<string> {
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterPattern>k__BackingField;
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public Nullable`1<long> MaxLength { get; public set; }
    [ParameterAttribute]
public string Mask { get; public set; }
    [ParameterAttribute]
public string Pattern { get; public set; }
    [ParameterAttribute]
public string CharacterPattern { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public string get_CharacterPattern();
    [CompilerGeneratedAttribute]
public void set_CharacterPattern(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMask/<OnChange>d__20")]
protected Task OnChange(ChangeEventArgs args);
    protected virtual string GetComponentCssClass();
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__23_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenMediaQuery : ComponentBase {
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <Change>k__BackingField;
    private bool initialized;
    private DotNetObjectReference`1<RadzenMediaQuery> reference;
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    [ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> Change { get; public set; }
    private DotNetObjectReference`1<RadzenMediaQuery> Reference { get; }
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<bool> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMediaQuery/<OnChange>d__12")]
[JSInvokableAttribute]
public Task OnChange(bool matches);
    private DotNetObjectReference`1<RadzenMediaQuery> get_Reference();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMediaQuery/<OnAfterRenderAsync>d__17")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public sealed virtual void Dispose();
}
public class Radzen.Blazor.RadzenMenu : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private bool <Responsive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClickToOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MenuItemEventArgs> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    private bool subMenuOpen;
    internal int focusedIndex;
    private bool preventKeyPress;
    private List`1<RadzenMenuItem> currentItems;
    internal List`1<RadzenMenuItem> items;
    [CompilerGeneratedAttribute]
private string <ToggleAriaLabel>k__BackingField;
    [ParameterAttribute]
public bool Responsive { get; public set; }
    [ParameterAttribute]
public bool ClickToOpen { get; public set; }
    private bool IsOpen { get; private set; }
    [ParameterAttribute]
public EventCallback`1<MenuItemEventArgs> Click { get; public set; }
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [ParameterAttribute]
public string ToggleAriaLabel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Responsive();
    [CompilerGeneratedAttribute]
public void set_Responsive(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClickToOpen();
    [CompilerGeneratedAttribute]
public void set_ClickToOpen(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsOpen();
    [CompilerGeneratedAttribute]
private void set_IsOpen(bool value);
    protected virtual string GetComponentCssClass();
    private void OnToggle();
    [CompilerGeneratedAttribute]
public EventCallback`1<MenuItemEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MenuItemEventArgs> value);
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMenu/<OnKeyPress>d__25")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenMenuItem item);
    public void AddItem(RadzenMenuItem item);
    [CompilerGeneratedAttribute]
public string get_ToggleAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ToggleAriaLabel(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_0(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_2(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenMenuItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MenuItemEventArgs> <Click>k__BackingField;
    private RadzenMenuItem _parentItem;
    private RadzenMenu _parent;
    internal List`1<RadzenMenuItem> items;
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public string Target { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public string ImageStyle { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    [ParameterAttribute]
public RenderFragment Template { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MenuItemEventArgs> Click { get; public set; }
    [CascadingParameterAttribute]
public RadzenMenuItem ParentItem { get; public set; }
    [CascadingParameterAttribute]
public RadzenMenu Parent { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_ImageStyle();
    [CompilerGeneratedAttribute]
public void set_ImageStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MenuItemEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MenuItemEventArgs> value);
    public RadzenMenuItem get_ParentItem();
    public void set_ParentItem(RadzenMenuItem value);
    public RadzenMenu get_Parent();
    public void set_Parent(RadzenMenu value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMenuItem/<OnClick>d__65")]
public Task OnClick(MouseEventArgs args);
    private Dictionary`2<string, object> getOpenEvents();
    public void AddItem(RadzenMenuItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMenuItem/<Toggle>d__69")]
public Task Toggle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMenuItem/<Close>d__70")]
public Task Close();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenMenuItem/<Open>d__71")]
public Task Open();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__72_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__72_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__72_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__72_3(RenderTreeBuilder __builder3);
}
public class Radzen.Blazor.RadzenMenuItemWrapper : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RadzenMenuItem <Item>k__BackingField;
    [ParameterAttribute]
public RadzenMenuItem Item { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenMenuItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(RadzenMenuItem value);
}
public class Radzen.Blazor.RadzenMonthView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    public string Icon { get; }
    public string Title { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public virtual string get_Icon();
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.RadzenNotification : ComponentBase {
    [CompilerGeneratedAttribute]
private NotificationService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [InjectAttribute]
private NotificationService Service { get; private set; }
    [ParameterAttribute]
public string Style { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private NotificationService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(NotificationService value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    private RenderFragment DrawMessage(int index, NotificationMessage m);
    private void Update(object sender, NotifyCollectionChangedEventArgs args);
    public sealed virtual void Dispose();
    protected virtual void OnInitialized();
}
public class Radzen.Blazor.RadzenNotificationMessage : ComponentBase {
    [CompilerGeneratedAttribute]
private NotificationService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [InjectAttribute]
private NotificationService Service { get; private set; }
    public bool Visible { get; public set; }
    [ParameterAttribute]
public NotificationMessage Message { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private Tuple`2<string, string> GetMessageCssClasses();
    [CompilerGeneratedAttribute]
private NotificationService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(NotificationService value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public NotificationMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(NotificationMessage value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    public void Close();
    protected virtual void OnInitialized();
    private void NotificationClicked();
    [CompilerGeneratedAttribute]
private Task <OnInitialized>b__19_0(Task r);
}
public class Radzen.Blazor.RadzenNumeric`1 : FormComponentWithAutoComplete`1<TValue> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    protected ElementReference input;
    private Nullable`1<bool> isNullable;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowUpDown>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlign <TextAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, TValue> <ConvertValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Max>k__BackingField;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private string <UpAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownAriaLabel>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    private bool IsNullable { get; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    protected string FormattedValue { get; protected set; }
    public bool HasValue { get; }
    [ParameterAttribute]
public string Format { get; public set; }
    [ParameterAttribute]
public string Step { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public bool ShowUpDown { get; public set; }
    [ParameterAttribute]
public TextAlign TextAlign { get; public set; }
    [ParameterAttribute]
public Func`2<string, TValue> ConvertValue { get; public set; }
    [ParameterAttribute]
public Nullable`1<decimal> Min { get; public set; }
    [ParameterAttribute]
public Nullable`1<decimal> Max { get; public set; }
    [ParameterAttribute]
public string UpAriaLabel { get; public set; }
    [ParameterAttribute]
public string DownAriaLabel { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    protected virtual string GetComponentCssClass();
    private string GetInputCssClass();
    private string getOnInput();
    private string getOnPaste();
    private bool get_IsNullable();
    private bool IsNumericType(object value);
    private static TNum SumFloating(TNum value1, TNum value2);
    private TNum UpdateValueWithStepNumeric(TNum valueToUpdate, bool stepUp, decimal decimalStep);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<UpdateValueWithStep>d__15")]
private Task UpdateValueWithStep(bool stepUp);
    public virtual TValue get_Value();
    public virtual void set_Value(TValue value);
    protected string get_FormattedValue();
    protected void set_FormattedValue(string value);
    public virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(string value);
    private bool IsInteger();
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowUpDown();
    [CompilerGeneratedAttribute]
public void set_ShowUpDown(bool value);
    [CompilerGeneratedAttribute]
public TextAlign get_TextAlign();
    [CompilerGeneratedAttribute]
public void set_TextAlign(TextAlign value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<OnChange>d__45")]
protected Task OnChange(ChangeEventArgs args);
    private string RemoveNonNumericCharacters(object value);
    [CompilerGeneratedAttribute]
public Func`2<string, TValue> get_ConvertValue();
    [CompilerGeneratedAttribute]
public void set_ConvertValue(Func`2<string, TValue> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<InternalValueChanged>d__51")]
private Task InternalValueChanged(object value);
    private TValue ApplyMinMax(TValue newValue);
    private decimal ConvertToDecimal(TValue input);
    private TValue ConvertFromDecimal(Nullable`1<decimal> input);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(Nullable`1<decimal> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<SetParametersAsync>d__63")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<OnKeyPress>d__65")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
public string get_UpAriaLabel();
    [CompilerGeneratedAttribute]
public void set_UpAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_DownAriaLabel();
    [CompilerGeneratedAttribute]
public void set_DownAriaLabel(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenNumeric`1/<FocusAsync>d__74")]
public virtual ValueTask FocusAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private object <UpdateValueWithStep>b__15_0(object value, bool stepUp, decimal step);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__75_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__75_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__75_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__75_3(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__75_4(MouseEventArgs args);
}
public class Radzen.Blazor.RadzenNumericRangeValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparable <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparable <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNull>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public IComparable Min { get; public set; }
    [ParameterAttribute]
public IComparable Max { get; public set; }
    [ParameterAttribute]
public bool AllowNull { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public IComparable get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(IComparable value);
    [CompilerGeneratedAttribute]
public IComparable get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(IComparable value);
    [CompilerGeneratedAttribute]
public bool get_AllowNull();
    [CompilerGeneratedAttribute]
public void set_AllowNull(bool value);
    protected virtual bool Validate(IRadzenFormComponent component);
    private bool TryConvertToType(object value, Type type, Object& convertedValue);
}
public class Radzen.Blazor.RadzenPager : RadzenComponent {
    private static IDictionary`2<HorizontalAlign, string> HorizontalAlignCssClasses;
    [CompilerGeneratedAttribute]
private string <FirstPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTitleFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageAriaLabelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlign <HorizontalAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private Density <Density>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <PageSizeChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <PageSizeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageSizeText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPagingSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PagingSummaryFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageNumbersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<PagerEventArgs> <PageChanged>k__BackingField;
    protected int skip;
    protected int numberOfPageLinks;
    protected int startPage;
    protected int endPage;
    protected int numberOfPages;
    private bool preventKeyDown;
    private int focusedIndex;
    private bool shouldFocus;
    [ParameterAttribute]
public string FirstPageTitle { get; public set; }
    [ParameterAttribute]
public string FirstPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PrevPageLabel { get; public set; }
    [ParameterAttribute]
public string PrevPageTitle { get; public set; }
    [ParameterAttribute]
public string PrevPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string LastPageTitle { get; public set; }
    [ParameterAttribute]
public string LastPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string NextPageLabel { get; public set; }
    [ParameterAttribute]
public string NextPageTitle { get; public set; }
    [ParameterAttribute]
public string NextPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PageTitleFormat { get; public set; }
    [ParameterAttribute]
public string PageAriaLabelFormat { get; public set; }
    [ParameterAttribute]
public HorizontalAlign HorizontalAlign { get; public set; }
    [ParameterAttribute]
public Density Density { get; public set; }
    [ParameterAttribute]
public int PageSize { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> PageSizeChanged { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<int> PageSizeOptions { get; public set; }
    [ParameterAttribute]
public string PageSizeText { get; public set; }
    [ParameterAttribute]
public bool ShowPagingSummary { get; public set; }
    [ParameterAttribute]
public string PagingSummaryFormat { get; public set; }
    [ParameterAttribute]
public int PageNumbersCount { get; public set; }
    [ParameterAttribute]
public int Count { get; public set; }
    public int CurrentPage { get; }
    [ParameterAttribute]
public bool AlwaysVisible { get; public set; }
    [ParameterAttribute]
public EventCallback`1<PagerEventArgs> PageChanged { get; public set; }
    private static RadzenPager();
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_FirstPageTitle();
    [CompilerGeneratedAttribute]
public void set_FirstPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FirstPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageLabel();
    [CompilerGeneratedAttribute]
public void set_PrevPageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageTitle();
    [CompilerGeneratedAttribute]
public void set_PrevPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_PrevPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageTitle();
    [CompilerGeneratedAttribute]
public void set_LastPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_LastPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageLabel();
    [CompilerGeneratedAttribute]
public void set_NextPageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageTitle();
    [CompilerGeneratedAttribute]
public void set_NextPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_NextPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PageTitleFormat();
    [CompilerGeneratedAttribute]
public void set_PageTitleFormat(string value);
    [CompilerGeneratedAttribute]
public string get_PageAriaLabelFormat();
    [CompilerGeneratedAttribute]
public void set_PageAriaLabelFormat(string value);
    [CompilerGeneratedAttribute]
public HorizontalAlign get_HorizontalAlign();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlign(HorizontalAlign value);
    [CompilerGeneratedAttribute]
public Density get_Density();
    [CompilerGeneratedAttribute]
public void set_Density(Density value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_PageSizeChanged();
    [CompilerGeneratedAttribute]
public void set_PageSizeChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<int> get_PageSizeOptions();
    [CompilerGeneratedAttribute]
public void set_PageSizeOptions(IEnumerable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageSizeText();
    [CompilerGeneratedAttribute]
public void set_PageSizeText(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowPagingSummary();
    [CompilerGeneratedAttribute]
public void set_ShowPagingSummary(bool value);
    [CompilerGeneratedAttribute]
public string get_PagingSummaryFormat();
    [CompilerGeneratedAttribute]
public void set_PagingSummaryFormat(string value);
    [CompilerGeneratedAttribute]
public int get_PageNumbersCount();
    [CompilerGeneratedAttribute]
public void set_PageNumbersCount(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    public int get_CurrentPage();
    protected bool GetVisible();
    [CompilerGeneratedAttribute]
public bool get_AlwaysVisible();
    [CompilerGeneratedAttribute]
public void set_AlwaysVisible(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<PagerEventArgs> get_PageChanged();
    [CompilerGeneratedAttribute]
public void set_PageChanged(EventCallback`1<PagerEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<Reload>d__101")]
public virtual Task Reload();
    protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnPageSizeChanged>d__103")]
protected Task OnPageSizeChanged(object value);
    protected void CalculatePager();
    protected int GetPage();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<GoToPage>d__111")]
public Task GoToPage(int page, bool forceReload);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnFirstPageClick>d__112")]
private Task OnFirstPageClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnPrevPageClick>d__113")]
private Task OnPrevPageClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnPageClick>d__114")]
private Task OnPageClick(int i, int startPage);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnNextPageClick>d__115")]
private Task OnNextPageClick(int endPage);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnLastPageClick>d__116")]
private Task OnLastPageClick(int endPage);
    internal void SetCurrentPage(int page);
    internal void SetCount(int count);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<FirstPage>d__119")]
public Task FirstPage(bool forceReload);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<PrevPage>d__120")]
public Task PrevPage();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<NextPage>d__121")]
public Task NextPage();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<LastPage>d__122")]
public Task LastPage();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnKeyDown>d__125")]
protected virtual Task OnKeyDown(KeyboardEventArgs args);
    private void OnFocus(FocusEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPager/<OnAfterRenderAsync>d__128")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__129_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__129_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__129_2();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__129_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__129_4();
}
public class Radzen.Blazor.RadzenPanel : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private bool <AllowCollapse>k__BackingField;
    private bool collapsed;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <SummaryTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollapseAriaLabel>k__BackingField;
    private string contentStyle;
    private string summaryContentStyle;
    private bool preventKeyPress;
    [ParameterAttribute]
public bool AllowCollapse { get; public set; }
    [ParameterAttribute]
public bool Collapsed { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment HeaderTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment SummaryTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment FooterTemplate { get; public set; }
    [ParameterAttribute]
public EventCallback Expand { get; public set; }
    [ParameterAttribute]
public EventCallback Collapse { get; public set; }
    [ParameterAttribute]
public string ExpandTitle { get; public set; }
    [ParameterAttribute]
public string CollapseTitle { get; public set; }
    [ParameterAttribute]
public string ExpandAriaLabel { get; public set; }
    [ParameterAttribute]
public string CollapseAriaLabel { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_AllowCollapse();
    [CompilerGeneratedAttribute]
public void set_AllowCollapse(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_SummaryTemplate();
    [CompilerGeneratedAttribute]
public void set_SummaryTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(EventCallback value);
    [CompilerGeneratedAttribute]
public string get_ExpandTitle();
    [CompilerGeneratedAttribute]
public void set_ExpandTitle(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseTitle();
    [CompilerGeneratedAttribute]
public void set_CollapseTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ExpandAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ExpandAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_CollapseAriaLabel();
    [CompilerGeneratedAttribute]
public void set_CollapseAriaLabel(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanel/<Toggle>d__60")]
private Task Toggle(MouseEventArgs args);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanel/<SetParametersAsync>d__62")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanel/<OnKeyPress>d__65")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__66_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__66_1(KeyboardEventArgs args);
}
public class Radzen.Blazor.RadzenPanelMenu : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MenuItemEventArgs> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuItemDisplayStyle <DisplayStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowArrow>k__BackingField;
    internal List`1<RadzenPanelMenuItem> items;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    internal int focusedIndex;
    private List`1<RadzenPanelMenuItem> currentItems;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MenuItemEventArgs> Click { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    [ParameterAttribute]
public MenuItemDisplayStyle DisplayStyle { get; public set; }
    [ParameterAttribute]
public bool ShowArrow { get; public set; }
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [InjectAttribute]
private NavigationManager UriHelper { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MenuItemEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MenuItemEventArgs> value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
public MenuItemDisplayStyle get_DisplayStyle();
    [CompilerGeneratedAttribute]
public void set_DisplayStyle(MenuItemDisplayStyle value);
    [CompilerGeneratedAttribute]
public bool get_ShowArrow();
    [CompilerGeneratedAttribute]
public void set_ShowArrow(bool value);
    public void AddItem(RadzenPanelMenuItem item);
    protected virtual void OnInitialized();
    private void UriHelper_OnLocationChanged(object sender, LocationChangedEventArgs e);
    public virtual void Dispose();
    internal void CollapseAll(IEnumerable`1<RadzenPanelMenuItem> itemsToSkip);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenu/<SetParametersAsync>d__26")]
public virtual Task SetParametersAsync(ParameterView parameters);
    private bool ShouldMatch(RadzenPanelMenuItem item);
    private static bool EqualsHrefExactlyOrIfTrailingSlashAdded(string absoluteUrl, string currentAbsoluteUrl);
    private static bool IsSeparator(char c);
    private static bool IsStrictlyPrefixWithSeparator(string value, string prefix);
    internal void SelectItem(RadzenPanelMenuItem item);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenu/<OnKeyPress>d__40")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenPanelMenuItem item);
    internal void RemoveItem(RadzenPanelMenuItem item);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private NavigationManager get_UriHelper();
    [CompilerGeneratedAttribute]
private void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__43_0(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__43_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__43_2(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenPanelMenuItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandedInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private RadzenPanelMenu _parent;
    [CompilerGeneratedAttribute]
private EventCallback`1<MenuItemEventArgs> <Click>k__BackingField;
    private RadzenPanelMenuItem _parentItem;
    internal List`1<RadzenPanelMenuItem> items;
    [CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [ParameterAttribute]
public string Target { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public RenderFragment Template { get; public set; }
    [ParameterAttribute]
public bool Expanded { get; public set; }
    internal bool ExpandedInternal { get; internal set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MenuItemEventArgs> Click { get; public set; }
    [CascadingParameterAttribute]
public RadzenPanelMenuItem ParentItem { get; public set; }
    [CascadingParameterAttribute]
public RadzenPanelMenu Parent { get; public set; }
    [InjectAttribute]
private NavigationManager UriHelper { get; private set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExpandedInternal();
    [CompilerGeneratedAttribute]
internal void set_ExpandedInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenuItem/<Toggle>d__61")]
internal Task Toggle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenuItem/<Collapse>d__62")]
internal Task Collapse();
    private string getStyle();
    private string getIconStyle();
    private string getItemStyle();
    private void Expand();
    [CompilerGeneratedAttribute]
public EventCallback`1<MenuItemEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<MenuItemEventArgs> value);
    public RadzenPanelMenuItem get_ParentItem();
    public void set_ParentItem(RadzenPanelMenuItem value);
    public RadzenPanelMenu get_Parent();
    public void set_Parent(RadzenPanelMenu value);
    public void AddItem(RadzenPanelMenuItem item);
    public void Select(bool value);
    private void EnsureVisible();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenuItem/<SetParametersAsync>d__83")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPanelMenuItem/<OnClick>d__84")]
public Task OnClick(MouseEventArgs args);
    internal string GetItemCssClass();
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private NavigationManager get_UriHelper();
    [CompilerGeneratedAttribute]
private void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__87_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__87_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__87_2(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenPassword : FormComponentWithAutoComplete`1<string> {
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAutoCompleteAttribute>k__BackingField;
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    public string DefaultAutoCompleteAttribute { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPassword/<OnChange>d__4")]
protected Task OnChange(ChangeEventArgs args);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public virtual string get_DefaultAutoCompleteAttribute();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultAutoCompleteAttribute(string value);
    protected virtual string GetId();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__11_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenPickList`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <SourceHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TargetHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonGap>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private JustifyContent <ButtonJustifyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <ButtonVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <ButtonShade>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonSize <ButtonSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceToTargetTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedSourceToTargetTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetToSourceTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedTargetToSourceTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Source>k__BackingField;
    private IEnumerable`1<TItem> source;
    [CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<TItem>> <SourceChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Target>k__BackingField;
    private IEnumerable`1<TItem> target;
    [CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<TItem>> <TargetChanged>k__BackingField;
    private object selectedSourceItems;
    private object selectedTargetItems;
    private string sourceSearchText;
    private string targetSearchText;
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public RenderFragment SourceHeader { get; public set; }
    [ParameterAttribute]
public RenderFragment TargetHeader { get; public set; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> Template { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RenderFragment`1<object> ListBoxTemplate { get; }
    [ParameterAttribute]
public bool AllowFiltering { get; public set; }
    [ParameterAttribute]
public bool ShowHeader { get; public set; }
    [ParameterAttribute]
public string ButtonGap { get; public set; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
public JustifyContent ButtonJustifyContent { get; public set; }
    [ParameterAttribute]
public ButtonStyle ButtonStyle { get; public set; }
    [ParameterAttribute]
public Variant ButtonVariant { get; public set; }
    [ParameterAttribute]
public Shade ButtonShade { get; public set; }
    [ParameterAttribute]
public ButtonSize ButtonSize { get; public set; }
    [ParameterAttribute]
public string SourceToTargetTitle { get; public set; }
    [ParameterAttribute]
public string SelectedSourceToTargetTitle { get; public set; }
    [ParameterAttribute]
public string TargetToSourceTitle { get; public set; }
    [ParameterAttribute]
public string SelectedTargetToSourceTitle { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<TItem> Source { get; public set; }
    [ParameterAttribute]
public EventCallback`1<IEnumerable`1<TItem>> SourceChanged { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<TItem> Target { get; public set; }
    [ParameterAttribute]
public EventCallback`1<IEnumerable`1<TItem>> TargetChanged { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_SourceHeader();
    [CompilerGeneratedAttribute]
public void set_SourceHeader(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TargetHeader();
    [CompilerGeneratedAttribute]
public void set_TargetHeader(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<TItem> value);
    private RenderFragment`1<object> get_ListBoxTemplate();
    [CompilerGeneratedAttribute]
public bool get_AllowFiltering();
    [CompilerGeneratedAttribute]
public void set_AllowFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowHeader();
    [CompilerGeneratedAttribute]
public void set_ShowHeader(bool value);
    [CompilerGeneratedAttribute]
public string get_ButtonGap();
    [CompilerGeneratedAttribute]
public void set_ButtonGap(string value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public JustifyContent get_ButtonJustifyContent();
    [CompilerGeneratedAttribute]
public void set_ButtonJustifyContent(JustifyContent value);
    [CompilerGeneratedAttribute]
public ButtonStyle get_ButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public Variant get_ButtonVariant();
    [CompilerGeneratedAttribute]
public void set_ButtonVariant(Variant value);
    [CompilerGeneratedAttribute]
public Shade get_ButtonShade();
    [CompilerGeneratedAttribute]
public void set_ButtonShade(Shade value);
    [CompilerGeneratedAttribute]
public ButtonSize get_ButtonSize();
    [CompilerGeneratedAttribute]
public void set_ButtonSize(ButtonSize value);
    [CompilerGeneratedAttribute]
public string get_SourceToTargetTitle();
    [CompilerGeneratedAttribute]
public void set_SourceToTargetTitle(string value);
    [CompilerGeneratedAttribute]
public string get_SelectedSourceToTargetTitle();
    [CompilerGeneratedAttribute]
public void set_SelectedSourceToTargetTitle(string value);
    [CompilerGeneratedAttribute]
public string get_TargetToSourceTitle();
    [CompilerGeneratedAttribute]
public void set_TargetToSourceTitle(string value);
    [CompilerGeneratedAttribute]
public string get_SelectedTargetToSourceTitle();
    [CompilerGeneratedAttribute]
public void set_SelectedTargetToSourceTitle(string value);
    protected string GetStyle();
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IEnumerable`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IEnumerable`1<TItem>> get_SourceChanged();
    [CompilerGeneratedAttribute]
public void set_SourceChanged(EventCallback`1<IEnumerable`1<TItem>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(IEnumerable`1<TItem> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IEnumerable`1<TItem>> get_TargetChanged();
    [CompilerGeneratedAttribute]
public void set_TargetChanged(EventCallback`1<IEnumerable`1<TItem>> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<SetParametersAsync>d__102")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<Update>d__103")]
private Task Update(bool sourceToTarget, IEnumerable`1<TItem> items);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<SourceToTarget>d__104")]
private Task SourceToTarget();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<SelectedSourceToTarget>d__105")]
private Task SelectedSourceToTarget();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<TargetToSource>d__106")]
private Task TargetToSource();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPickList`1/<SelectedTargetToSource>d__107")]
private Task SelectedTargetToSource();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private RenderFragment <get_ListBoxTemplate>b__25_0(object item);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_2(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_5(object __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_7(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_4(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_8(object __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_10(string __value);
}
public class Radzen.Blazor.RadzenPieSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Fills>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalAngle>k__BackingField;
    [ParameterAttribute]
public Nullable`1<double> X { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Y { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Radius { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Fills { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Strokes { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public double TotalAngle { get; public set; }
    protected double CurrentRadius { get; }
    internal double CenterX { get; }
    internal double CenterY { get; }
    public string Color { get; }
    protected IList`1<TItem> PositiveItems { get; }
    public CoordinateSystem CoordinateSystem { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_X();
    [CompilerGeneratedAttribute]
public void set_X(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fills();
    [CompilerGeneratedAttribute]
public void set_Fills(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public double get_TotalAngle();
    [CompilerGeneratedAttribute]
public void set_TotalAngle(double value);
    protected double get_CurrentRadius();
    internal double get_CenterX();
    internal double get_CenterY();
    public virtual string get_Color();
    protected IList`1<TItem> get_PositiveItems();
    public virtual double MeasureLegend();
    protected virtual RenderFragment RenderLegendItem(bool clickable);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenPieSeries`1/<OnLegendClick>d__44")]
private Task OnLegendClick(object data);
    public virtual bool Contains(double x, double y, double tolerance);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    protected virtual string TooltipClass(TItem item);
    protected virtual string TooltipStyle(TItem item);
    private double TooltipAngle(TItem item);
    internal virtual double TooltipX(TItem item);
    internal virtual double TooltipY(TItem item);
    protected double DegToRad(double degrees);
    protected ValueTuple`2<double, double> ToCartesian(double x, double y, double radius, double degrees);
    protected string Segment(double x, double y, double radius, double innerRadius, double startAngle, double endAngle);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual CoordinateSystem get_CoordinateSystem();
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [CompilerGeneratedAttribute]
private bool <get_PositiveItems>b__41_0(TItem e);
    [CompilerGeneratedAttribute]
private double <MeasureLegend>b__42_0(TItem item);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__56_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenProfileMenu : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RenderFragment <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenProfileMenuItem> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowIcon>k__BackingField;
    private string contentStyle;
    private string iconStyle;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    internal int focusedIndex;
    private bool preventKeyPress;
    internal List`1<RadzenProfileMenuItem> items;
    [ParameterAttribute]
public RenderFragment Template { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenProfileMenuItem> Click { get; public set; }
    [ParameterAttribute]
public bool ShowIcon { get; public set; }
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public RenderFragment get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenProfileMenuItem> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<RadzenProfileMenuItem> value);
    [CompilerGeneratedAttribute]
public bool get_ShowIcon();
    [CompilerGeneratedAttribute]
public void set_ShowIcon(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenProfileMenu/<Toggle>d__15")]
public Task Toggle(MouseEventArgs args);
    public void Close();
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenProfileMenu/<OnKeyPress>d__23")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenProfileMenuItem item);
    public void AddItem(RadzenProfileMenuItem item);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__27_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__27_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenProfileMenuItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenProfileMenu <Menu>k__BackingField;
    private RadzenProfileMenu _parent;
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string Target { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [CascadingParameterAttribute]
public RadzenProfileMenu Menu { get; public set; }
    [CascadingParameterAttribute]
public RadzenProfileMenu Parent { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public RadzenProfileMenu get_Menu();
    [CompilerGeneratedAttribute]
public void set_Menu(RadzenProfileMenu value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenProfileMenuItem/<OnClick>d__41")]
public Task OnClick(MouseEventArgs args);
    public RadzenProfileMenu get_Parent();
    public void set_Parent(RadzenProfileMenu value);
    internal string GetItemCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenProgressBar : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressBarMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<double> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressBarStyle <ProgressBarStyle>k__BackingField;
    [ParameterAttribute]
public RenderFragment Template { get; public set; }
    [ParameterAttribute]
public ProgressBarMode Mode { get; public set; }
    [ParameterAttribute]
public string Unit { get; public set; }
    [ParameterAttribute]
public double Value { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public bool ShowValue { get; public set; }
    [ParameterAttribute]
public Action`1<double> ValueChanged { get; public set; }
    [ParameterAttribute]
public ProgressBarStyle ProgressBarStyle { get; public set; }
    protected double NormalizedValue { get; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public RenderFragment get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment value);
    [CompilerGeneratedAttribute]
public ProgressBarMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ProgressBarMode value);
    [CompilerGeneratedAttribute]
public string get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public bool get_ShowValue();
    [CompilerGeneratedAttribute]
public void set_ShowValue(bool value);
    [CompilerGeneratedAttribute]
public Action`1<double> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(Action`1<double> value);
    [CompilerGeneratedAttribute]
public ProgressBarStyle get_ProgressBarStyle();
    [CompilerGeneratedAttribute]
public void set_ProgressBarStyle(ProgressBarStyle value);
    protected double get_NormalizedValue();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenProgressBarCircular : RadzenProgressBar {
    [CompilerGeneratedAttribute]
private ProgressBarCircularSize <Size>k__BackingField;
    [ParameterAttribute]
public ProgressBarCircularSize Size { get; public set; }
    protected virtual string GetComponentCssClass();
    protected string GetCircleSize();
    [CompilerGeneratedAttribute]
public ProgressBarCircularSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ProgressBarCircularSize value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__6_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenRadialGauge : GaugeBase {
    [CompilerGeneratedAttribute]
private IList`1<RadzenRadialGaugeScalePointer> <Pointers>k__BackingField;
    private IList`1<RadzenRadialGaugeScalePointer> Pointers { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private IList`1<RadzenRadialGaugeScalePointer> get_Pointers();
    [CompilerGeneratedAttribute]
private void set_Pointers(IList`1<RadzenRadialGaugeScalePointer> value);
    private string PointerStyle(RadzenRadialGaugeScalePointer pointer);
    internal void AddPointer(RadzenRadialGaugeScalePointer pointer);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenRadialGaugeScale : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenRadialGauge <Gauge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorTickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLabelOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, string> <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private GaugeTickPosition <TickPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTickLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Margin>k__BackingField;
    [CascadingParameterAttribute]
public RadzenRadialGauge Gauge { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public double TickLength { get; public set; }
    [ParameterAttribute]
public double MinorTickLength { get; public set; }
    [ParameterAttribute]
public double TickLabelOffset { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public Func`2<double, string> Formatter { get; public set; }
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public GaugeTickPosition TickPosition { get; public set; }
    [ParameterAttribute]
public double EndAngle { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public bool ShowFirstTick { get; public set; }
    [ParameterAttribute]
public bool ShowLastTick { get; public set; }
    [ParameterAttribute]
public bool ShowTickLabels { get; public set; }
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public double Step { get; public set; }
    [ParameterAttribute]
public double MinorStep { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public double Margin { get; public set; }
    public double CurrentRadius { get; }
    public Point CurrentCenter { get; }
    [CompilerGeneratedAttribute]
public RadzenRadialGauge get_Gauge();
    [CompilerGeneratedAttribute]
public void set_Gauge(RadzenRadialGauge value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public double get_TickLength();
    [CompilerGeneratedAttribute]
public void set_TickLength(double value);
    [CompilerGeneratedAttribute]
public double get_MinorTickLength();
    [CompilerGeneratedAttribute]
public void set_MinorTickLength(double value);
    [CompilerGeneratedAttribute]
public double get_TickLabelOffset();
    [CompilerGeneratedAttribute]
public void set_TickLabelOffset(double value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public Func`2<double, string> get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(Func`2<double, string> value);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public GaugeTickPosition get_TickPosition();
    [CompilerGeneratedAttribute]
public void set_TickPosition(GaugeTickPosition value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public bool get_ShowFirstTick();
    [CompilerGeneratedAttribute]
public void set_ShowFirstTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLastTick();
    [CompilerGeneratedAttribute]
public void set_ShowLastTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTickLabels();
    [CompilerGeneratedAttribute]
public void set_ShowTickLabels(bool value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(double value);
    [CompilerGeneratedAttribute]
public double get_MinorStep();
    [CompilerGeneratedAttribute]
public void set_MinorStep(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(double value);
    public double get_CurrentRadius();
    public Point get_CurrentCenter();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRadialGaugeScale/<SetParametersAsync>d__96")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__97_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenRadialGaugeScalePointer : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenRadialGaugeScale <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenRadialGaugeScalePointer> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenRadialGauge <Gauge>k__BackingField;
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double Value { get; public set; }
    [ParameterAttribute]
public bool ShowValue { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Width { get; public set; }
    private double CurrentWidth { get; }
    [ParameterAttribute]
public double Length { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    private double CurrentLength { get; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [CascadingParameterAttribute]
public RadzenRadialGaugeScale Scale { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenRadialGaugeScalePointer> Template { get; public set; }
    [CascadingParameterAttribute]
public RadzenRadialGauge Gauge { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public bool get_ShowValue();
    [CompilerGeneratedAttribute]
public void set_ShowValue(bool value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    private double get_CurrentWidth();
    [CompilerGeneratedAttribute]
public double get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(double value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    private double get_CurrentLength();
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public RadzenRadialGaugeScale get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(RadzenRadialGaugeScale value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenRadialGaugeScalePointer> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenRadialGaugeScalePointer> value);
    [CompilerGeneratedAttribute]
public RadzenRadialGauge get_Gauge();
    [CompilerGeneratedAttribute]
public void set_Gauge(RadzenRadialGauge value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRadialGaugeScalePointer/<SetParametersAsync>d__53")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenRadialGaugeScaleRange : ComponentBase {
    [CompilerGeneratedAttribute]
private double <From>k__BackingField;
    [CompilerGeneratedAttribute]
private double <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenRadialGaugeScale <Scale>k__BackingField;
    [ParameterAttribute]
public double From { get; public set; }
    [ParameterAttribute]
public double To { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double Height { get; public set; }
    [CascadingParameterAttribute]
public RadzenRadialGaugeScale Scale { get; public set; }
    [CompilerGeneratedAttribute]
public double get_From();
    [CompilerGeneratedAttribute]
public void set_From(double value);
    [CompilerGeneratedAttribute]
public double get_To();
    [CompilerGeneratedAttribute]
public void set_To(double value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public RadzenRadialGaugeScale get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(RadzenRadialGaugeScale value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenRadioButtonList`1 : FormComponent`1<TValue> {
    [CompilerGeneratedAttribute]
private string <ValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisibleProperty>k__BackingField;
    private IEnumerable _data;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Items>k__BackingField;
    private List`1<RadzenRadioButtonListItem`1<TValue>> items;
    private bool preventKeyPress;
    [ParameterAttribute]
public string ValueProperty { get; public set; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public string DisabledProperty { get; public set; }
    [ParameterAttribute]
public string VisibleProperty { get; public set; }
    private IEnumerable`1<RadzenRadioButtonListItem`1<TValue>> allItems { get; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
public RenderFragment Items { get; public set; }
    private ClassList ItemClassList(RadzenRadioButtonListItem`1<TValue> item);
    private ClassList IconClassList(RadzenRadioButtonListItem`1<TValue> item);
    [CompilerGeneratedAttribute]
public string get_ValueProperty();
    [CompilerGeneratedAttribute]
public void set_ValueProperty(string value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public string get_DisabledProperty();
    [CompilerGeneratedAttribute]
public void set_DisabledProperty(string value);
    [CompilerGeneratedAttribute]
public string get_VisibleProperty();
    [CompilerGeneratedAttribute]
public void set_VisibleProperty(string value);
    private IEnumerable`1<RadzenRadioButtonListItem`1<TValue>> get_allItems();
    public virtual IEnumerable get_Data();
    public virtual void set_Data(IEnumerable value);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(RenderFragment value);
    public void AddItem(RadzenRadioButtonListItem`1<TValue> item);
    public void RemoveItem(RadzenRadioButtonListItem`1<TValue> item);
    protected bool IsSelected(RadzenRadioButtonListItem`1<TValue> item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRadioButtonList`1/<SelectItem>d__37")]
protected Task SelectItem(RadzenRadioButtonListItem`1<TValue> item);
    public void Refresh();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRadioButtonList`1/<OnKeyPress>d__40")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private RadzenRadioButtonListItem`1<TValue> <get_allItems>b__19_0(object i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenRadioButtonListItem`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    private string _text;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenRadioButtonListItem`1<TValue>> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    private RadzenRadioButtonList`1<TValue> _list;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenRadioButtonListItem`1<TValue>> Template { get; public set; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
public RadzenRadioButtonList`1<TValue> List { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenRadioButtonListItem`1<TValue>> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenRadioButtonListItem`1<TValue>> value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public virtual bool get_Disabled();
    [CompilerGeneratedAttribute]
public virtual void set_Disabled(bool value);
    public RadzenRadioButtonList`1<TValue> get_List();
    public void set_List(RadzenRadioButtonList`1<TValue> value);
    public virtual void Dispose();
    internal void SetText(string value);
    internal void SetValue(TValue value);
    internal void SetDisabled(bool value);
    internal void SetVisible(bool value);
    internal string GetItemId();
    internal string GetItemCssClass();
    protected virtual string GetComponentCssClass();
}
public class Radzen.Blazor.RadzenRating : FormComponent`1<int> {
    [CompilerGeneratedAttribute]
private int <Stars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RateAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public int Stars { get; public set; }
    [ParameterAttribute]
public string ClearAriaLabel { get; public set; }
    [ParameterAttribute]
public string RateAriaLabel { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public int get_Stars();
    [CompilerGeneratedAttribute]
public void set_Stars(int value);
    [CompilerGeneratedAttribute]
public string get_ClearAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ClearAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_RateAriaLabel();
    [CompilerGeneratedAttribute]
public void set_RateAriaLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRating/<SetValue>d__17")]
private Task SetValue(int value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenRating/<OnKeyPress>d__19")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__20_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__20_1(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__20_2(KeyboardEventArgs args);
}
public class Radzen.Blazor.RadzenRegexValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Pattern { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    protected virtual bool Validate(IRadzenFormComponent component);
}
public class Radzen.Blazor.RadzenRequiredValidator : ValidatorBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public object DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    protected virtual bool Validate(IRadzenFormComponent component);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
}
public class Radzen.Blazor.RadzenRow : RadzenFlexComponent {
    [CompilerGeneratedAttribute]
private string <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowGap>k__BackingField;
    [ParameterAttribute]
public string Gap { get; public set; }
    [ParameterAttribute]
public string RowGap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [CompilerGeneratedAttribute]
public string get_RowGap();
    [CompilerGeneratedAttribute]
public void set_RowGap(string value);
    protected string GetStyle();
    protected string GetComponentStyle();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__11_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenScheduler`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NavigationTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <selectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TodayText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevText>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerSlotSelectEventArgs> <SlotSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerTodaySelectEventArgs> <TodaySelect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerMonthSelectEventArgs> <MonthSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerAppointmentSelectEventArgs`1<TItem>> <AppointmentSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> <AppointmentMouseEnter>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> <AppointmentMouseLeave>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerMoreSelectEventArgs> <MoreSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SchedulerAppointmentRenderEventArgs`1<TItem>> <AppointmentRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SchedulerSlotRenderEventArgs> <SlotRender>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerLoadDataEventArgs> <LoadData>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerAppointmentMoveEventArgs> <AppointmentMove>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISchedulerView> <Views>k__BackingField;
    private IEnumerable`1<AppointmentData> appointments;
    private DateTime rangeStart;
    private DateTime rangeEnd;
    private Func`2<TItem, DateTime> startGetter;
    private Func`2<TItem, DateTime> endGetter;
    private Func`2<TItem, string> textGetter;
    private bool heightIsSet;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<TItem> Template { get; public set; }
    [ParameterAttribute]
public RenderFragment NavigationTemplate { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<TItem> Data { get; public set; }
    [ParameterAttribute]
public string StartProperty { get; public set; }
    [ParameterAttribute]
public string EndProperty { get; public set; }
    private int selectedIndex { get; private set; }
    [ParameterAttribute]
public int SelectedIndex { get; public set; }
    [ParameterAttribute]
public string TodayText { get; public set; }
    [ParameterAttribute]
public string NextText { get; public set; }
    [ParameterAttribute]
public string PrevText { get; public set; }
    [ParameterAttribute]
public DateTime Date { get; public set; }
    public DateTime CurrentDate { get; public set; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerSlotSelectEventArgs> SlotSelect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerTodaySelectEventArgs> TodaySelect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerMonthSelectEventArgs> MonthSelect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerAppointmentSelectEventArgs`1<TItem>> AppointmentSelect { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> AppointmentMouseEnter { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> AppointmentMouseLeave { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerMoreSelectEventArgs> MoreSelect { get; public set; }
    [ParameterAttribute]
public Action`1<SchedulerAppointmentRenderEventArgs`1<TItem>> AppointmentRender { get; public set; }
    [ParameterAttribute]
public Action`1<SchedulerSlotRenderEventArgs> SlotRender { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerLoadDataEventArgs> LoadData { get; public set; }
    [ParameterAttribute]
public EventCallback`1<SchedulerAppointmentMoveEventArgs> AppointmentMove { get; public set; }
    private IList`1<ISchedulerView> Views { get; private set; }
    public ISchedulerView SelectedView { get; }
    private double Height { get; private set; }
    private double Radzen.Blazor.IScheduler.Height { get; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<TItem> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NavigationTemplate();
    [CompilerGeneratedAttribute]
public void set_NavigationTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<TItem> value);
    [CompilerGeneratedAttribute]
public string get_StartProperty();
    [CompilerGeneratedAttribute]
public void set_StartProperty(string value);
    [CompilerGeneratedAttribute]
public string get_EndProperty();
    [CompilerGeneratedAttribute]
public void set_EndProperty(string value);
    [CompilerGeneratedAttribute]
private int get_selectedIndex();
    [CompilerGeneratedAttribute]
private void set_selectedIndex(int value);
    [CompilerGeneratedAttribute]
public int get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public string get_TodayText();
    [CompilerGeneratedAttribute]
public void set_TodayText(string value);
    [CompilerGeneratedAttribute]
public string get_NextText();
    [CompilerGeneratedAttribute]
public void set_NextText(string value);
    [CompilerGeneratedAttribute]
public string get_PrevText();
    [CompilerGeneratedAttribute]
public void set_PrevText(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CurrentDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerSlotSelectEventArgs> get_SlotSelect();
    [CompilerGeneratedAttribute]
public void set_SlotSelect(EventCallback`1<SchedulerSlotSelectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerTodaySelectEventArgs> get_TodaySelect();
    [CompilerGeneratedAttribute]
public void set_TodaySelect(EventCallback`1<SchedulerTodaySelectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerMonthSelectEventArgs> get_MonthSelect();
    [CompilerGeneratedAttribute]
public void set_MonthSelect(EventCallback`1<SchedulerMonthSelectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerAppointmentSelectEventArgs`1<TItem>> get_AppointmentSelect();
    [CompilerGeneratedAttribute]
public void set_AppointmentSelect(EventCallback`1<SchedulerAppointmentSelectEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> get_AppointmentMouseEnter();
    [CompilerGeneratedAttribute]
public void set_AppointmentMouseEnter(EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> get_AppointmentMouseLeave();
    [CompilerGeneratedAttribute]
public void set_AppointmentMouseLeave(EventCallback`1<SchedulerAppointmentMouseEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerMoreSelectEventArgs> get_MoreSelect();
    [CompilerGeneratedAttribute]
public void set_MoreSelect(EventCallback`1<SchedulerMoreSelectEventArgs> value);
    [CompilerGeneratedAttribute]
public Action`1<SchedulerAppointmentRenderEventArgs`1<TItem>> get_AppointmentRender();
    [CompilerGeneratedAttribute]
public void set_AppointmentRender(Action`1<SchedulerAppointmentRenderEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Action`1<SchedulerSlotRenderEventArgs> get_SlotRender();
    [CompilerGeneratedAttribute]
public void set_SlotRender(Action`1<SchedulerSlotRenderEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerLoadDataEventArgs> get_LoadData();
    [CompilerGeneratedAttribute]
public void set_LoadData(EventCallback`1<SchedulerLoadDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventCallback`1<SchedulerAppointmentMoveEventArgs> get_AppointmentMove();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AppointmentMove(EventCallback`1<SchedulerAppointmentMoveEventArgs> value);
    [CompilerGeneratedAttribute]
private IList`1<ISchedulerView> get_Views();
    [CompilerGeneratedAttribute]
private void set_Views(IList`1<ISchedulerView> value);
    public ISchedulerView get_SelectedView();
    public sealed virtual IDictionary`2<string, object> GetAppointmentAttributes(AppointmentData item);
    public sealed virtual IDictionary`2<string, object> GetSlotAttributes(DateTime start, DateTime end);
    public sealed virtual RenderFragment RenderAppointment(AppointmentData item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectSlot>d__109")]
public sealed virtual Task SelectSlot(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectSlot>d__110")]
public sealed virtual Task`1<bool> SelectSlot(DateTime start, DateTime end, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectMonth>d__111")]
public sealed virtual Task SelectMonth(DateTime monthStart, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectMore>d__112")]
public sealed virtual Task`1<bool> SelectMore(DateTime start, DateTime end, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectAppointment>d__113")]
public sealed virtual Task SelectAppointment(AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<AddView>d__114")]
public sealed virtual Task AddView(ISchedulerView view);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SelectView>d__115")]
public Task SelectView(ISchedulerView view);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<Reload>d__116")]
public sealed virtual Task Reload();
    public sealed virtual bool IsSelected(ISchedulerView view);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<OnChangeView>d__118")]
private Task OnChangeView(ISchedulerView view);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<OnPrev>d__119")]
private Task OnPrev();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<OnToday>d__120")]
private Task OnToday();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<OnNext>d__121")]
private Task OnNext();
    public sealed virtual void RemoveView(ISchedulerView view);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<SetParametersAsync>d__130")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<InvokeLoadData>d__131")]
private Task InvokeLoadData();
    public sealed virtual bool IsAppointmentInRange(AppointmentData item, DateTime start, DateTime end);
    public sealed virtual IEnumerable`1<AppointmentData> GetAppointmentsInRange(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<OnAfterRenderAsync>d__135")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [JSInvokableAttribute]
public void Resize(double width, double height);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private double get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(double value);
    private sealed virtual override double Radzen.Blazor.IScheduler.get_Height();
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<Radzen-Blazor-IScheduler-MouseEnterAppointment>d__146")]
private sealed virtual override Task Radzen.Blazor.IScheduler.MouseEnterAppointment(ElementReference reference, AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenScheduler`1/<Radzen-Blazor-IScheduler-MouseLeaveAppointment>d__147")]
private sealed virtual override Task Radzen.Blazor.IScheduler.MouseLeaveAppointment(ElementReference reference, AppointmentData data);
    private sealed virtual override bool Radzen.Blazor.IScheduler.HasMouseEnterAppointmentDelegate();
    private sealed virtual override bool Radzen.Blazor.IScheduler.HasAppointmentMoveDelegate();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private AppointmentData <GetAppointmentsInRange>b__133_0(TItem item);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__150_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__150_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenSecurityCode : FormComponent`1<string> {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityCodeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gap>k__BackingField;
    private bool firstRender;
    private bool visibleChanged;
    private bool disabledChanged;
    private bool countChanged;
    [ParameterAttribute]
public int Count { get; public set; }
    [ParameterAttribute]
public SecurityCodeType Type { get; public set; }
    [ParameterAttribute]
public string Gap { get; public set; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public SecurityCodeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SecurityCodeType value);
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSecurityCode/<SetParametersAsync>d__17")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSecurityCode/<OnAfterRenderAsync>d__18")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSecurityCode/<OnValueChange>d__20")]
[JSInvokableAttribute("RadzenSecurityCode.OnValueChange")]
public Task OnValueChange(string value);
    private string ElementAt(int index);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSecurityCode/<FocusAsync>d__22")]
public virtual ValueTask FocusAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__23_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__23_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenSelectBar`1 : FormComponent`1<TValue> {
    [CompilerGeneratedAttribute]
private ButtonSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    private IEnumerable _data;
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Items>k__BackingField;
    private List`1<RadzenSelectBarItem> items;
    private bool preventKeyPress;
    [ParameterAttribute]
public ButtonSize Size { get; public set; }
    [ParameterAttribute]
public string ValueProperty { get; public set; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    private IEnumerable`1<RadzenSelectBarItem> allItems { get; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public RenderFragment Items { get; public set; }
    public bool HasValue { get; }
    private string getButtonSize();
    [CompilerGeneratedAttribute]
public ButtonSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ButtonSize value);
    private ClassList ButtonClassList(RadzenSelectBarItem item);
    [CompilerGeneratedAttribute]
public string get_ValueProperty();
    [CompilerGeneratedAttribute]
public void set_ValueProperty(string value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    private IEnumerable`1<RadzenSelectBarItem> get_allItems();
    public virtual IEnumerable get_Data();
    public virtual void set_Data(IEnumerable value);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(RenderFragment value);
    public sealed virtual void AddItem(RadzenSelectBarItem item);
    public sealed virtual void RemoveItem(RadzenSelectBarItem item);
    protected bool IsSelected(RadzenSelectBarItem item);
    public virtual bool get_HasValue();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSelectBar`1/<SelectItem>d__35")]
protected Task SelectItem(RadzenSelectBarItem item);
    public sealed virtual void Refresh();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSelectBar`1/<OnKeyPress>d__38")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private RadzenSelectBarItem <get_allItems>b__15_0(object i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenSelectBarItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenSelectBarItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    private IRadzenSelectBar _selectBar;
    [ParameterAttribute]
public RenderFragment`1<RadzenSelectBarItem> Template { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string ImageStyle { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
public IRadzenSelectBar SelectBar { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenSelectBarItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenSelectBarItem> value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_ImageStyle();
    [CompilerGeneratedAttribute]
public void set_ImageStyle(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    public IRadzenSelectBar get_SelectBar();
    public void set_SelectBar(IRadzenSelectBar value);
    public virtual void Dispose();
    internal void SetText(string value);
    internal void SetValue(object value);
    internal string GetItemId();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSelectBarItem/<SetParametersAsync>d__44")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenSeriesAnnotation`1 : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OffsetY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    private CartesianSeries`1<TItem> series;
    [ParameterAttribute]
public TItem Data { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public double OffsetX { get; public set; }
    [ParameterAttribute]
public double OffsetY { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [CascadingParameterAttribute]
protected CartesianSeries`1<TItem> Series { get; protected set; }
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public double get_OffsetX();
    [CompilerGeneratedAttribute]
public void set_OffsetX(double value);
    [CompilerGeneratedAttribute]
public double get_OffsetY();
    [CompilerGeneratedAttribute]
public void set_OffsetY(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    protected CartesianSeries`1<TItem> get_Series();
    protected void set_Series(CartesianSeries`1<TItem> value);
    public sealed virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
    public sealed virtual bool Contains(double mouseX, double mouseY, int tolerance);
    public sealed virtual RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop);
    public sealed virtual void Dispose();
}
public class Radzen.Blazor.RadzenSeriesDataLabels : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private double <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OffsetY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    private IChartSeries series;
    [ParameterAttribute]
public double OffsetX { get; public set; }
    [ParameterAttribute]
public double OffsetY { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [CascadingParameterAttribute]
protected IChartSeries Series { get; protected set; }
    [CompilerGeneratedAttribute]
public double get_OffsetX();
    [CompilerGeneratedAttribute]
public void set_OffsetX(double value);
    [CompilerGeneratedAttribute]
public double get_OffsetY();
    [CompilerGeneratedAttribute]
public void set_OffsetY(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected IChartSeries get_Series();
    protected void set_Series(IChartSeries value);
    public sealed virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    protected virtual bool ShouldRefreshChart(ParameterView parameters);
    public sealed virtual bool Contains(double mouseX, double mouseY, int tolerance);
    public sealed virtual RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Render>b__17_0(RenderTreeBuilder builder);
}
public class Radzen.Blazor.RadzenSeriesMeanLine : RadzenSeriesValueLine {
    public double Value { get; public set; }
    protected string Name { get; }
    public virtual double get_Value();
    public virtual void set_Value(double value);
    protected virtual string get_Name();
}
public class Radzen.Blazor.RadzenSeriesMedianLine : RadzenSeriesValueLine {
    public double Value { get; public set; }
    protected string Name { get; }
    public virtual double get_Value();
    public virtual void set_Value(double value);
    protected virtual string get_Name();
}
public class Radzen.Blazor.RadzenSeriesModeLine : RadzenSeriesValueLine {
    public double Value { get; public set; }
    protected string Name { get; }
    public virtual double get_Value();
    public virtual void set_Value(double value);
    protected virtual string get_Name();
}
public class Radzen.Blazor.RadzenSeriesTrendLine : RadzenGridLines {
    private IChartSeries series;
    [CascadingParameterAttribute]
protected IChartSeries Series { get; protected set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected IChartSeries get_Series();
    protected void set_Series(IChartSeries value);
    public sealed virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    public sealed virtual bool Contains(double mouseX, double mouseY, int tolerance);
    public sealed virtual RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop);
    public sealed virtual void Dispose();
}
public class Radzen.Blazor.RadzenSeriesValueLine : RadzenGridLines {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<double> <TooltipTemplate>k__BackingField;
    private IChartSeries series;
    [ParameterAttribute]
public double Value { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<double> TooltipTemplate { get; public set; }
    [CascadingParameterAttribute]
protected IChartSeries Series { get; protected set; }
    protected string Name { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public virtual double get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(double value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<double> get_TooltipTemplate();
    [CompilerGeneratedAttribute]
public void set_TooltipTemplate(RenderFragment`1<double> value);
    protected IChartSeries get_Series();
    protected void set_Series(IChartSeries value);
    protected virtual string get_Name();
    public sealed virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    public sealed virtual bool Contains(double mouseX, double mouseY, int tolerance);
    public sealed virtual RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop);
    public sealed virtual void Dispose();
}
public class Radzen.Blazor.RadzenSidebar : RadzenComponentWithChildren {
    private static string DefaultStyle;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Responsive>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenLayout <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    private Nullable`1<bool> expanded;
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public bool Responsive { get; public set; }
    private bool IsResponsive { get; }
    [CascadingParameterAttribute]
public RadzenLayout Layout { get; public set; }
    [ParameterAttribute]
public bool Expanded { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Style();
    [CompilerGeneratedAttribute]
public virtual void set_Style(string value);
    [CompilerGeneratedAttribute]
public bool get_Responsive();
    [CompilerGeneratedAttribute]
public void set_Responsive(bool value);
    private bool get_IsResponsive();
    [CompilerGeneratedAttribute]
public RadzenLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(RadzenLayout value);
    protected virtual string GetComponentCssClass();
    public void Toggle();
    protected string GetStyle();
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSidebar/<SetParametersAsync>d__28")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSidebar/<OnChange>d__29")]
private Task OnChange(bool matches);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__30_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenSidebarToggle : RadzenComponent {
    [CompilerGeneratedAttribute]
private EventCallback`1<EventArgs> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToggleAriaLabel>k__BackingField;
    [ParameterAttribute]
public EventCallback`1<EventArgs> Click { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string ToggleAriaLabel { get; public set; }
    [CompilerGeneratedAttribute]
public EventCallback`1<EventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSidebarToggle/<OnClick>d__8")]
public Task OnClick(EventArgs args);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public string get_ToggleAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ToggleAriaLabel(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__14_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenSlider`1 : FormComponent`1<TValue> {
    private ElementReference handle;
    private ElementReference minHandle;
    private ElementReference maxHandle;
    private bool visibleChanged;
    private bool disabledChanged;
    private bool maxChanged;
    private bool minChanged;
    private bool rangeChanged;
    private bool stepChanged;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private string <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Max>k__BackingField;
    private bool preventKeyPress;
    private decimal Left { get; }
    private decimal SecondLeft { get; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    public bool HasValue { get; }
    [ParameterAttribute]
public string Step { get; public set; }
    [ParameterAttribute]
public bool Range { get; public set; }
    [ParameterAttribute]
public decimal Min { get; public set; }
    [ParameterAttribute]
public decimal Max { get; public set; }
    private decimal get_Left();
    private decimal get_SecondLeft();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSlider`1/<SetParametersAsync>d__14")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSlider`1/<OnAfterRenderAsync>d__15")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSlider`1/<OnValueChange>d__17")]
[JSInvokableAttribute("RadzenSlider.OnValueChange")]
public Task OnValueChange(decimal value, bool isMin);
    protected virtual string GetComponentCssClass();
    public virtual TValue get_Value();
    public virtual void set_Value(TValue value);
    public virtual bool get_HasValue();
    private decimal MinValue();
    private decimal MaxValue();
    [CompilerGeneratedAttribute]
public string get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(string value);
    [CompilerGeneratedAttribute]
public bool get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(bool value);
    [CompilerGeneratedAttribute]
public decimal get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(decimal value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSlider`1/<OnKeyPress>d__43")]
private Task OnKeyPress(KeyboardEventArgs args, bool isMin);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__44_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__44_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__44_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__44_3(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__44_4(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__44_5(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__44_6(ElementReference __value);
}
public class Radzen.Blazor.RadzenSparkline : RadzenChart {
    protected virtual bool UpdateScales();
}
public class Radzen.Blazor.RadzenSpeechToTextButton : RadzenComponent {
    [CompilerGeneratedAttribute]
private ButtonStyle <ButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    private bool recording;
    [ParameterAttribute]
public ButtonStyle ButtonStyle { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string StopIcon { get; public set; }
    private string CurrentIcon { get; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string StopTitle { get; public set; }
    private string CurrentTitle { get; }
    [ParameterAttribute]
public EventCallback`1<string> Change { get; public set; }
    [ParameterAttribute]
public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public ButtonStyle get_ButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_StopIcon();
    [CompilerGeneratedAttribute]
public void set_StopIcon(string value);
    private string get_CurrentIcon();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_StopTitle();
    [CompilerGeneratedAttribute]
public void set_StopTitle(string value);
    private string get_CurrentTitle();
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSpeechToTextButton/<OnSpeechToTextClicked>d__39")]
private Task OnSpeechToTextClicked();
    [JSInvokableAttribute]
public void StopRecording();
    [JSInvokableAttribute]
public void OnResult(string result);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenSplitButton : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private RenderFragment <ButtonContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BusyText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysOpenPopup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DropDownIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenSplitButtonItem> <Click>k__BackingField;
    internal int focusedIndex;
    private bool preventKeyPress;
    private List`1<RadzenSplitButtonItem> items;
    [CompilerGeneratedAttribute]
private string <ButtonAriaLabel>k__BackingField;
    [ParameterAttribute]
public RenderFragment ButtonContent { get; public set; }
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Image { get; public set; }
    [ParameterAttribute]
public ButtonStyle ButtonStyle { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public Shade Shade { get; public set; }
    [ParameterAttribute]
public ButtonSize Size { get; public set; }
    [ParameterAttribute]
public bool IsBusy { get; public set; }
    [ParameterAttribute]
public string BusyText { get; public set; }
    public bool IsDisabled { get; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool AlwaysOpenPopup { get; public set; }
    [ParameterAttribute]
public string OpenAriaLabel { get; public set; }
    [ParameterAttribute]
public string DropDownIcon { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenSplitButtonItem> Click { get; public set; }
    private string PopupID { get; }
    [ParameterAttribute]
public string ButtonAriaLabel { get; public set; }
    private string getButtonSize();
    [CompilerGeneratedAttribute]
public RenderFragment get_ButtonContent();
    [CompilerGeneratedAttribute]
public void set_ButtonContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public ButtonStyle get_ButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Shade get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(Shade value);
    [CompilerGeneratedAttribute]
public ButtonSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ButtonSize value);
    [CompilerGeneratedAttribute]
public bool get_IsBusy();
    [CompilerGeneratedAttribute]
public void set_IsBusy(bool value);
    [CompilerGeneratedAttribute]
public string get_BusyText();
    [CompilerGeneratedAttribute]
public void set_BusyText(string value);
    public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysOpenPopup();
    [CompilerGeneratedAttribute]
public void set_AlwaysOpenPopup(bool value);
    [CompilerGeneratedAttribute]
public string get_OpenAriaLabel();
    [CompilerGeneratedAttribute]
public void set_OpenAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_DropDownIcon();
    [CompilerGeneratedAttribute]
public void set_DropDownIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenSplitButtonItem> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<RadzenSplitButtonItem> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitButton/<OnClick>d__71")]
public Task OnClick(MouseEventArgs args);
    public void Close();
    private string get_PopupID();
    private string getButtonCss();
    private string getPopupButtonCss();
    private string OpenPopupScript();
    protected virtual string GetComponentCssClass();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitButton/<OnKeyPress>d__82")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenSplitButtonItem item);
    public void AddItem(RadzenSplitButtonItem item);
    public void RemoveItem(RadzenSplitButtonItem item);
    internal string SplitButtonId();
    [CompilerGeneratedAttribute]
public string get_ButtonAriaLabel();
    [CompilerGeneratedAttribute]
public void set_ButtonAriaLabel(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenSplitButtonItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    private RadzenSplitButton _splitButton;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
public RadzenSplitButton SplitButton { get; public set; }
    private ClassList ItemClassList { get; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    public RadzenSplitButton get_SplitButton();
    public void set_SplitButton(RadzenSplitButton value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitButtonItem/<OnClick>d__24")]
public Task OnClick(MouseEventArgs args);
    private ClassList get_ItemClassList();
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.RadzenSplitter : RadzenComponent {
    private int _sizeautopanes;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    internal List`1<RadzenSplitterPane> Panes;
    [CompilerGeneratedAttribute]
private bool <IsResizing>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenSplitterEventArgs> <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenSplitterEventArgs> <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<RadzenSplitterResizeEventArgs> <Resize>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    public bool IsResizing { get; private set; }
    [ParameterAttribute]
public EventCallback`1<RadzenSplitterEventArgs> Collapse { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenSplitterEventArgs> Expand { get; public set; }
    [ParameterAttribute]
public EventCallback`1<RadzenSplitterResizeEventArgs> Resize { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    public void AddPane(RadzenSplitterPane pane);
    public void RemovePane(RadzenSplitterPane pane);
    public void Refresh();
    internal Task StartResize(PointerEventArgs args, int paneIndex);
    [CompilerGeneratedAttribute]
public bool get_IsResizing();
    [CompilerGeneratedAttribute]
private void set_IsResizing(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitter/<OnPaneResizing>d__18")]
[JSInvokableAttribute("RadzenSplitter.OnPaneResizing")]
public Task OnPaneResizing();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitter/<OnPaneResized>d__19")]
[JSInvokableAttribute("RadzenSplitter.OnPaneResized")]
public Task OnPaneResized(int paneIndex, double sizeNew, Nullable`1<int> paneNextIndex, Nullable`1<double> sizeNextNew);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitter/<OnCollapse>d__20")]
internal Task OnCollapse(int paneIndex);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitter/<OnExpand>d__21")]
internal Task OnExpand(int paneIndex);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenSplitterEventArgs> get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(EventCallback`1<RadzenSplitterEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenSplitterEventArgs> get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(EventCallback`1<RadzenSplitterEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<RadzenSplitterResizeEventArgs> get_Resize();
    [CompilerGeneratedAttribute]
public void set_Resize(EventCallback`1<RadzenSplitterResizeEventArgs> value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__35_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__35_1(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenSplitterPane : RadzenComponent {
    private RadzenSplitter _splitter;
    private string _size;
    [CompilerGeneratedAttribute]
private string <SizeRuntine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SizeAuto>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collapsible>k__BackingField;
    private Nullable`1<bool> collapsed;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BarVisible>k__BackingField;
    private bool preventKeyPress;
    internal string SizeRuntine { get; internal set; }
    internal bool SizeAuto { get; internal set; }
    internal int Index { get; internal set; }
    internal bool IsLastResizable { get; }
    internal bool IsLast { get; }
    internal bool IsResizable { get; }
    internal bool IsCollapsible { get; }
    internal bool IsExpandable { get; }
    internal string ClassName { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool Collapsible { get; public set; }
    [ParameterAttribute]
public bool Collapsed { get; public set; }
    [ParameterAttribute]
public bool Resizable { get; public set; }
    [ParameterAttribute]
public string Max { get; public set; }
    [ParameterAttribute]
public string Min { get; public set; }
    [ParameterAttribute]
public string Size { get; public set; }
    [ParameterAttribute]
public bool BarVisible { get; public set; }
    [CascadingParameterAttribute]
public RadzenSplitter Splitter { get; public set; }
    [CompilerGeneratedAttribute]
internal string get_SizeRuntine();
    [CompilerGeneratedAttribute]
internal void set_SizeRuntine(string value);
    [CompilerGeneratedAttribute]
internal bool get_SizeAuto();
    [CompilerGeneratedAttribute]
internal void set_SizeAuto(bool value);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal bool get_IsLastResizable();
    internal bool get_IsLast();
    internal RadzenSplitterPane Next();
    internal bool get_IsResizable();
    internal bool get_IsCollapsible();
    internal bool get_IsExpandable();
    internal string get_ClassName();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Collapsible();
    [CompilerGeneratedAttribute]
public void set_Collapsible(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Resizable();
    [CompilerGeneratedAttribute]
public void set_Resizable(bool value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    public string get_Size();
    public void set_Size(string value);
    [CompilerGeneratedAttribute]
public bool get_BarVisible();
    [CompilerGeneratedAttribute]
public void set_BarVisible(bool value);
    public RadzenSplitter get_Splitter();
    public void set_Splitter(RadzenSplitter value);
    internal void SetCollapsed(bool value);
    internal bool GetCollapsed();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitterPane/<SetParametersAsync>d__65")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual string GetComponentCssClass();
    protected string GetComponentBarCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSplitterPane/<OnKeyPress>d__69")]
private Task OnKeyPress(KeyboardEventArgs args, Nullable`1<bool> expand);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_0(PointerEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_2(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_3(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_4(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_5(MouseEventArgs args);
}
public class Radzen.Blazor.RadzenSSRSViewer : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <UseProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportName>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Parameters>k__BackingField;
    private List`1<RadzenSSRSViewerParameter> parameters;
    [CompilerGeneratedAttribute]
private EventCallback`1<ProgressEventArgs> <Load>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <uriHelper>k__BackingField;
    [ParameterAttribute]
public bool UseProxy { get; public set; }
    [ParameterAttribute]
public string ReportServer { get; public set; }
    [ParameterAttribute]
public string LocalServer { get; public set; }
    [ParameterAttribute]
public string ReportName { get; public set; }
    [ParameterAttribute]
public RenderFragment Parameters { get; public set; }
    public string ReportUrl { get; }
    [ParameterAttribute]
public EventCallback`1<ProgressEventArgs> Load { get; public set; }
    [InjectAttribute]
private NavigationManager uriHelper { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_UseProxy();
    [CompilerGeneratedAttribute]
public void set_UseProxy(bool value);
    [CompilerGeneratedAttribute]
public string get_ReportServer();
    [CompilerGeneratedAttribute]
public void set_ReportServer(string value);
    [CompilerGeneratedAttribute]
public string get_LocalServer();
    [CompilerGeneratedAttribute]
public void set_LocalServer(string value);
    [CompilerGeneratedAttribute]
public string get_ReportName();
    [CompilerGeneratedAttribute]
public void set_ReportName(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(RenderFragment value);
    public string get_ReportUrl();
    public void Reload();
    public void AddParameter(RadzenSSRSViewerParameter parameter);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public EventCallback`1<ProgressEventArgs> get_Load();
    [CompilerGeneratedAttribute]
public void set_Load(EventCallback`1<ProgressEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSSRSViewer/<OnLoad>d__30")]
private Task OnLoad(ProgressEventArgs args);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private NavigationManager get_uriHelper();
    [CompilerGeneratedAttribute]
private void set_uriHelper(NavigationManager value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__31_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__31_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenSSRSViewerParameter : ComponentBase {
    private string _parameterName;
    private string _value;
    private RadzenSSRSViewer _viewer;
    [ParameterAttribute]
public string ParameterName { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [CascadingParameterAttribute]
public RadzenSSRSViewer Viewer { get; public set; }
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public string get_Value();
    public void set_Value(string value);
    public RadzenSSRSViewer get_Viewer();
    public void set_Viewer(RadzenSSRSViewer value);
}
public class Radzen.Blazor.RadzenStack : RadzenFlexComponent {
    [CompilerGeneratedAttribute]
private FlexWrap <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [ParameterAttribute]
public FlexWrap Wrap { get; public set; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
public string Gap { get; public set; }
    [ParameterAttribute]
public bool Reverse { get; public set; }
    [CompilerGeneratedAttribute]
public FlexWrap get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(FlexWrap value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
public void set_Reverse(bool value);
    protected string GetStyle();
    protected string GetComponentStyle();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__19_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenStackedAreaSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private Interpolation <Interpolation>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public bool Smooth { get; public set; }
    [ParameterAttribute]
public Interpolation Interpolation { get; public set; }
    public string Color { get; }
    private IList`1<IChartSeries> AreaSeries { get; }
    private IList`1<IChartSeries> VisibleColumnSeries { get; }
    private IList`1<IChartStackedAreaSeries> StackedAreaSeries { get; }
    private int Radzen.Blazor.IChartStackedAreaSeries.Count { get; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    public bool get_Smooth();
    public void set_Smooth(bool value);
    [CompilerGeneratedAttribute]
public Interpolation get_Interpolation();
    [CompilerGeneratedAttribute]
public void set_Interpolation(Interpolation value);
    public virtual string get_Color();
    protected virtual string TooltipStyle(TItem item);
    public virtual bool Contains(double x, double y, double tolerance);
    private IEnumerable`1<Point`1<TItem>> GetTopPoints(Func`2<TItem, double> category, Func`2<TItem, double> value, ScaleBase valueScale);
    private IEnumerable`1<Point`1<TItem>> GetPointsAt(int index, Func`2<TItem, double> category, Func`2<TItem, double> value, ScaleBase valueScale);
    private IEnumerable`1<Point`1<TItem>> GetBottomPoints(Func`2<TItem, double> category, Func`2<TItem, double> value, ScaleBase valueScale);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    internal virtual double TooltipY(TItem item);
    private IPathGenerator GetPathGenerator();
    private IList`1<IChartSeries> get_AreaSeries();
    private IList`1<IChartSeries> get_VisibleColumnSeries();
    private IList`1<IChartStackedAreaSeries> get_StackedAreaSeries();
    public virtual ScaleBase TransformValueScale(ScaleBase scale);
    private sealed virtual override int Radzen.Blazor.IChartStackedAreaSeries.get_Count();
    private sealed virtual override IEnumerable`1<double> Radzen.Blazor.IChartStackedAreaSeries.ValuesForCategory(double value);
    private sealed virtual override double Radzen.Blazor.IChartStackedAreaSeries.ValueAt(int index);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__44_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenStackedBarSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Fills>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <FillRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <StrokeRange>k__BackingField;
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Fills { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Strokes { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> FillRange { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> StrokeRange { get; public set; }
    public string Color { get; }
    private IList`1<IChartSeries> BarSeries { get; }
    private IList`1<IChartSeries> VisibleBarSeries { get; }
    private IList`1<IChartStackedBarSeries> StackedBarSeries { get; }
    private double BandHeight { get; }
    private double BarHeight { get; }
    private int BarIndex { get; }
    private int Radzen.Blazor.IChartBarSeries.Count { get; }
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fills();
    [CompilerGeneratedAttribute]
public void set_Fills(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_FillRange();
    [CompilerGeneratedAttribute]
public void set_FillRange(IList`1<SeriesColorRange> value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_StrokeRange();
    [CompilerGeneratedAttribute]
public void set_StrokeRange(IList`1<SeriesColorRange> value);
    public virtual string get_Color();
    public virtual ScaleBase TransformCategoryScale(ScaleBase scale);
    public virtual ScaleBase TransformValueScale(ScaleBase scale);
    protected virtual IList`1<object> GetCategories();
    private IList`1<IChartSeries> get_BarSeries();
    private IList`1<IChartSeries> get_VisibleBarSeries();
    private IList`1<IChartStackedBarSeries> get_StackedBarSeries();
    protected virtual string TooltipStyle(TItem item);
    private double get_BandHeight();
    private double get_BarHeight();
    private int get_BarIndex();
    private double GetBarTop(TItem item, Func`2<TItem, double> category);
    private static double Sum(int barIndex, IEnumerable`1<IChartStackedBarSeries> stackedBarSeries, double category);
    private double GetBarRight(TItem item, int barIndex, Func`2<TItem, double> category, IEnumerable`1<IChartStackedBarSeries> stackedBarSeries);
    private double GetBarLeft(TItem item, int barIndex, Func`2<TItem, double> category, IEnumerable`1<IChartStackedBarSeries> stackedBarSeries);
    private sealed virtual override int Radzen.Blazor.IChartBarSeries.get_Count();
    private sealed virtual override double Radzen.Blazor.IChartStackedBarSeries.ValueAt(int index);
    private sealed virtual override IEnumerable`1<double> Radzen.Blazor.IChartStackedBarSeries.ValuesForCategory(double value);
    private sealed virtual override IEnumerable`1<object> Radzen.Blazor.IChartStackedBarSeries.ItemsForCategory(double value);
    public virtual bool Contains(double x, double y, double tolerance);
    internal virtual double TooltipX(TItem item);
    protected virtual string TooltipValue(TItem item);
    protected virtual string TooltipTitle(TItem item);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    internal virtual double TooltipY(TItem item);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__66_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenStackedColumnSeries`1 : CartesianSeries`1<TItem> {
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Fills>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Strokes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <FillRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeriesColorRange> <StrokeRange>k__BackingField;
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Fills { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> Strokes { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> FillRange { get; public set; }
    [ParameterAttribute]
public IList`1<SeriesColorRange> StrokeRange { get; public set; }
    public string Color { get; }
    private int Radzen.Blazor.IChartStackedColumnSeries.Count { get; }
    private IList`1<IChartSeries> ColumnSeries { get; }
    private IList`1<IChartSeries> VisibleColumnSeries { get; }
    private IList`1<IChartStackedColumnSeries> StackedColumnSeries { get; }
    private double BandWidth { get; }
    private double ColumnWidth { get; }
    private int ColumnIndex { get; }
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fills();
    [CompilerGeneratedAttribute]
public void set_Fills(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Strokes();
    [CompilerGeneratedAttribute]
public void set_Strokes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_FillRange();
    [CompilerGeneratedAttribute]
public void set_FillRange(IList`1<SeriesColorRange> value);
    [CompilerGeneratedAttribute]
public IList`1<SeriesColorRange> get_StrokeRange();
    [CompilerGeneratedAttribute]
public void set_StrokeRange(IList`1<SeriesColorRange> value);
    public virtual string get_Color();
    private sealed virtual override int Radzen.Blazor.IChartStackedColumnSeries.get_Count();
    private sealed virtual override IEnumerable`1<double> Radzen.Blazor.IChartStackedColumnSeries.ValuesForCategory(double value);
    private sealed virtual override IEnumerable`1<object> Radzen.Blazor.IChartStackedColumnSeries.ItemsForCategory(double value);
    private sealed virtual override double Radzen.Blazor.IChartStackedColumnSeries.ValueAt(int index);
    private IList`1<IChartSeries> get_ColumnSeries();
    private IList`1<IChartSeries> get_VisibleColumnSeries();
    private IList`1<IChartStackedColumnSeries> get_StackedColumnSeries();
    protected virtual string TooltipStyle(TItem item);
    private double get_BandWidth();
    public virtual bool Contains(double x, double y, double tolerance);
    private double get_ColumnWidth();
    private double GetColumnLeft(TItem item, Func`2<TItem, double> category);
    private double GetColumnTop(TItem item, int columnIndex, Func`2<TItem, double> category, IEnumerable`1<IChartStackedColumnSeries> stackedColumnSeries);
    private static double Sum(int columnIndex, IEnumerable`1<IChartStackedColumnSeries> stackedColumnSeries, double category);
    private double GetColumnBottom(TItem item, int columnIndex, Func`2<TItem, double> category, IEnumerable`1<IChartStackedColumnSeries> stackedColumnSeries);
    private int get_ColumnIndex();
    internal virtual double TooltipX(TItem item);
    internal virtual double TooltipY(TItem item);
    public virtual ValueTuple`2<object, Point> DataAt(double x, double y);
    public virtual IEnumerable`1<ChartDataLabel> GetDataLabels(double offsetX, double offsetY);
    public virtual ScaleBase TransformValueScale(ScaleBase scale);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__62_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenSteps : RadzenComponent {
    [CompilerGeneratedAttribute]
private bool <ShowStepsButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    private int _selectedIndex;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<StepsCanChangeEventArgs> <CanChange>k__BackingField;
    private string _nextStep;
    private string _previousText;
    private string _nextTitle;
    private string _previousTitle;
    [CompilerGeneratedAttribute]
private RenderFragment <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowStepSelect>k__BackingField;
    private List`1<RadzenStepsItem> steps;
    private bool preventKeyPress;
    [ParameterAttribute]
public bool ShowStepsButtons { get; public set; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    public IList`1<RadzenStepsItem> StepsCollection { get; }
    [ParameterAttribute]
public int SelectedIndex { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> SelectedIndexChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<StepsCanChangeEventArgs> CanChange { get; public set; }
    [ParameterAttribute]
public string NextText { get; public set; }
    [ParameterAttribute]
public string PreviousText { get; public set; }
    [ParameterAttribute]
public string NextTitle { get; public set; }
    [ParameterAttribute]
public string PreviousTitle { get; public set; }
    public string NextAriaLabel { get; }
    public string PreviousAriaLabel { get; }
    [ParameterAttribute]
public RenderFragment Steps { get; public set; }
    [ParameterAttribute]
public bool AllowStepSelect { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowStepsButtons();
    [CompilerGeneratedAttribute]
public void set_ShowStepsButtons(bool value);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    public IList`1<RadzenStepsItem> get_StepsCollection();
    private bool IsFirstVisibleStep();
    private bool IsLastVisibleStep();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<NextStep>d__12")]
public Task NextStep();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<PrevStep>d__13")]
public Task PrevStep();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<SelectStepFromIndex>d__14")]
private Task SelectStepFromIndex(int index);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedIndexChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedIndexChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<StepsCanChangeEventArgs> get_CanChange();
    [CompilerGeneratedAttribute]
public void set_CanChange(EventCallback`1<StepsCanChangeEventArgs> value);
    public string get_NextText();
    public void set_NextText(string value);
    public string get_PreviousText();
    public void set_PreviousText(string value);
    public string get_NextTitle();
    public void set_NextTitle(string value);
    public string get_PreviousTitle();
    public void set_PreviousTitle(string value);
    public string get_NextAriaLabel();
    public string get_PreviousAriaLabel();
    [CompilerGeneratedAttribute]
public RenderFragment get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_AllowStepSelect();
    [CompilerGeneratedAttribute]
public void set_AllowStepSelect(bool value);
    public void AddStep(RadzenStepsItem step);
    public void RemoveStep(RadzenStepsItem item);
    internal void Refresh();
    protected bool IsSelected(int index, RadzenStepsItem step);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<SelectStep>d__64")]
internal Task SelectStep(RadzenStepsItem step, bool raiseChange);
    internal void SelectFirst();
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<SetParametersAsync>d__67")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSteps/<OnKeyPress>d__69")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_2(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__70_3(KeyboardEventArgs args);
}
public class Radzen.Blazor.RadzenStepsItem : RadzenComponent {
    private string _text;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenStepsItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    private bool _visible;
    private bool _disabled;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private RadzenSteps _steps;
    [ParameterAttribute]
public string Text { get; public set; }
    public string Title { get; public set; }
    public string AriaLabel { get; public set; }
    [ParameterAttribute]
public string NextText { get; public set; }
    public string NextTitle { get; public set; }
    public string NextAriaLabel { get; public set; }
    [ParameterAttribute]
public string PreviousText { get; public set; }
    public string PreviousTitle { get; public set; }
    public string PreviousAriaLabel { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenStepsItem> Template { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CascadingParameterAttribute]
public RadzenSteps Steps { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_AriaLabel();
    [CompilerGeneratedAttribute]
public void set_AriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextText();
    [CompilerGeneratedAttribute]
public void set_NextText(string value);
    [CompilerGeneratedAttribute]
public string get_NextTitle();
    [CompilerGeneratedAttribute]
public void set_NextTitle(string value);
    [CompilerGeneratedAttribute]
public string get_NextAriaLabel();
    [CompilerGeneratedAttribute]
public void set_NextAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousText();
    [CompilerGeneratedAttribute]
public void set_PreviousText(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousTitle();
    [CompilerGeneratedAttribute]
public void set_PreviousTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousAriaLabel();
    [CompilerGeneratedAttribute]
public void set_PreviousAriaLabel(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenStepsItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenStepsItem> value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public RadzenSteps get_Steps();
    public void set_Steps(RadzenSteps value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenStepsItem/<SetParametersAsync>d__60")]
public virtual Task SetParametersAsync(ParameterView parameters);
    internal string GetItemCssClass();
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenSwitch : FormComponent`1<bool> {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    private string ValueAsString { get; }
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    private string get_ValueAsString();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSwitch/<Toggle>d__7")]
public Task Toggle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenSwitch/<OnKeyPress>d__9")]
private Task OnKeyPress(KeyboardEventArgs args, Task task);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__10_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__10_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenTabs : RadzenComponent {
    [CompilerGeneratedAttribute]
private TabRenderMode <RenderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TabPosition <TabPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedIndex>k__BackingField;
    private int selectedIndex;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Tabs>k__BackingField;
    private List`1<RadzenTabsItem> tabs;
    private int previousSelectedIndex;
    private bool shouldRender;
    internal int focusedIndex;
    private bool preventKeyPress;
    [ParameterAttribute]
public TabRenderMode RenderMode { get; public set; }
    [ParameterAttribute]
public TabPosition TabPosition { get; public set; }
    [ParameterAttribute]
public int SelectedIndex { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> SelectedIndexChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> Change { get; public set; }
    [ParameterAttribute]
public RenderFragment Tabs { get; public set; }
    internal string Id { get; }
    public RadzenTabsItem SelectedTab { get; }
    [CompilerGeneratedAttribute]
public TabRenderMode get_RenderMode();
    [CompilerGeneratedAttribute]
public void set_RenderMode(TabRenderMode value);
    [CompilerGeneratedAttribute]
public TabPosition get_TabPosition();
    [CompilerGeneratedAttribute]
public void set_TabPosition(TabPosition value);
    [CompilerGeneratedAttribute]
public int get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedIndexChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedIndexChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Tabs();
    [CompilerGeneratedAttribute]
public void set_Tabs(RenderFragment value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<AddTab>d__26")]
public Task AddTab(RadzenTabsItem tab);
    internal string get_Id();
    public RadzenTabsItem get_SelectedTab();
    public void RemoveItem(RadzenTabsItem item);
    public void Reload();
    internal bool IsSelected(RadzenTabsItem tab);
    internal int IndexOf(RadzenTabsItem tab);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<SelectTab>d__35")]
internal Task SelectTab(RadzenTabsItem tab, bool raiseChange);
    protected virtual string GetComponentCssClass();
    protected virtual void OnInitialized();
    private void SetFocusedIndex();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<SetParametersAsync>d__39")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<OnAfterRenderAsync>d__41")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual bool ShouldRender();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<SelectTabOnClient>d__44")]
internal Task SelectTabOnClient(RadzenTabsItem tab);
    internal RadzenTabsItem FirstVisibleTab();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabs/<OnKeyPress>d__48")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenTabsItem item);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__50_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__50_1(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__50_2(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__50_3(ElementReference __value);
}
public class Radzen.Blazor.RadzenTabsItem : ComponentBase {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenTabsItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTabs <Tabs>k__BackingField;
    [ParameterAttribute]
public IDictionary`2<string, object> Attributes { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenTabsItem> Template { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    private ClassList ClassList { get; }
    public int Index { get; }
    public bool IsSelected { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CascadingParameterAttribute]
public RadzenTabs Tabs { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenTabsItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenTabsItem> value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    private ClassList get_ClassList();
    public int get_Index();
    public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RadzenTabs get_Tabs();
    [CompilerGeneratedAttribute]
public void set_Tabs(RadzenTabs value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabsItem/<OnInitializedAsync>d__50")]
protected virtual Task OnInitializedAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabsItem/<OnClick>d__51")]
internal Task OnClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabsItem/<SelectTab>d__52")]
private Task SelectTab(RadzenTabsItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTabsItem/<SetParametersAsync>d__53")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public sealed virtual void Dispose();
    private string getStyle();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
[CascadingTypeParameterAttribute("TItem")]
public class Radzen.Blazor.RadzenTemplateForm`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<EditContext> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TItem> <Submit>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<FormInvalidSubmitEventArgs> <InvalidSubmit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    private Func`1<Task> handleSubmitDelegate;
    private List`1<IRadzenFormComponent> components;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    public bool IsValid { get; }
    [ParameterAttribute]
public TItem Data { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<EditContext> ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TItem> Submit { get; public set; }
    [ParameterAttribute]
[ObsoleteAttribute]
public EventCallback`1<FormInvalidSubmitEventArgs> OnInvalidSubmit { get; public set; }
    [ParameterAttribute]
public EventCallback`1<FormInvalidSubmitEventArgs> InvalidSubmit { get; public set; }
    [ParameterAttribute]
public string Method { get; public set; }
    [ParameterAttribute]
public string Action { get; public set; }
    [ParameterAttribute]
public EditContext EditContext { get; public set; }
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<EditContext> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<EditContext> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TItem> get_Submit();
    [CompilerGeneratedAttribute]
public void set_Submit(EventCallback`1<TItem> value);
    public EventCallback`1<FormInvalidSubmitEventArgs> get_OnInvalidSubmit();
    public void set_OnInvalidSubmit(EventCallback`1<FormInvalidSubmitEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<FormInvalidSubmitEventArgs> get_InvalidSubmit();
    [CompilerGeneratedAttribute]
public void set_InvalidSubmit(EventCallback`1<FormInvalidSubmitEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTemplateForm`1/<OnSubmit>d__31")]
protected Task OnSubmit();
    public sealed virtual void AddComponent(IRadzenFormComponent component);
    public sealed virtual void RemoveComponent(IRadzenFormComponent component);
    public sealed virtual IRadzenFormComponent FindComponent(string name);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    protected virtual void OnParametersSet();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__42_0(ElementReference form);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__42_1(RenderTreeBuilder contentBuilder);
}
public class Radzen.Blazor.RadzenText : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <TextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlign <TextAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private TagName <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Anchor>k__BackingField;
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public TextStyle TextStyle { get; public set; }
    [ParameterAttribute]
public TextAlign TextAlign { get; public set; }
    [ParameterAttribute]
public TagName TagName { get; public set; }
    [ParameterAttribute]
public string Anchor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public TextStyle get_TextStyle();
    [CompilerGeneratedAttribute]
public void set_TextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public TextAlign get_TextAlign();
    [CompilerGeneratedAttribute]
public void set_TextAlign(TextAlign value);
    [CompilerGeneratedAttribute]
public TagName get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(TagName value);
    [CompilerGeneratedAttribute]
public string get_Anchor();
    [CompilerGeneratedAttribute]
public void set_Anchor(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__25_0(ElementReference capture);
}
public class Radzen.Blazor.RadzenTextArea : FormComponent`1<string> {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Cols>k__BackingField;
    [ParameterAttribute]
public Nullable`1<long> MaxLength { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public int Rows { get; public set; }
    [ParameterAttribute]
public int Cols { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public int get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(int value);
    [CompilerGeneratedAttribute]
public int get_Cols();
    [CompilerGeneratedAttribute]
public void set_Cols(int value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTextArea/<OnChange>d__16")]
protected Task OnChange(ChangeEventArgs args);
    protected virtual string GetComponentCssClass();
    protected virtual string GetId();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__19_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenTextBox : FormComponentWithAutoComplete`1<string> {
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trim>k__BackingField;
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public Nullable`1<long> MaxLength { get; public set; }
    [ParameterAttribute]
public bool Trim { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_Trim();
    [CompilerGeneratedAttribute]
public void set_Trim(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTextBox/<OnChange>d__12")]
protected Task OnChange(ChangeEventArgs args);
    protected virtual string GetComponentCssClass();
    protected virtual string GetId();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__15_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenTheme : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wcag>k__BackingField;
    private string theme;
    private bool wcag;
    private static string Version;
    private PersistingComponentStateSubscription persistingSubscription;
    [CompilerGeneratedAttribute]
private PersistentComponentState <PersistentComponentState>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeService <ThemeService>k__BackingField;
    [ParameterAttribute]
public string Theme { get; public set; }
    [ParameterAttribute]
public bool Wcag { get; public set; }
    private string Href { get; }
    private string WcagHref { get; }
    private string Path { get; }
    private bool Embedded { get; }
    [InjectAttribute]
private PersistentComponentState PersistentComponentState { get; private set; }
    [InjectAttribute]
private ThemeService ThemeService { get; private set; }
    private static RadzenTheme();
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public bool get_Wcag();
    [CompilerGeneratedAttribute]
public void set_Wcag(bool value);
    private string get_Href();
    private string get_WcagHref();
    private string get_Path();
    private bool get_Embedded();
    protected virtual void OnInitialized();
    private string GetCurrentTheme();
    private Task PersistTheme();
    private void OnThemeChanged();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private PersistentComponentState get_PersistentComponentState();
    [CompilerGeneratedAttribute]
private void set_PersistentComponentState(PersistentComponentState value);
    [CompilerGeneratedAttribute]
private ThemeService get_ThemeService();
    [CompilerGeneratedAttribute]
private void set_ThemeService(ThemeService value);
}
public class Radzen.Blazor.RadzenTicks : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TickTemplateContext> <Template>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [CascadingParameterAttribute]
unknown AxisBase ChartAxis {public set; }
    [ParameterAttribute]
public RenderFragment`1<TickTemplateContext> Template { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    public void set_ChartAxis(AxisBase value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TickTemplateContext> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<TickTemplateContext> value);
}
public class Radzen.Blazor.RadzenTimeline : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private LinePosition <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignItems <AlignItems>k__BackingField;
    [ParameterAttribute]
public RenderFragment Items { get; public set; }
    [ParameterAttribute]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
public LinePosition LinePosition { get; public set; }
    [ParameterAttribute]
public bool Reverse { get; public set; }
    [ParameterAttribute]
public AlignItems AlignItems { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(RenderFragment value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public LinePosition get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(LinePosition value);
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
public void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public AlignItems get_AlignItems();
    [CompilerGeneratedAttribute]
public void set_AlignItems(AlignItems value);
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__21_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenTimelineItem : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <LabelContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <PointContent>k__BackingField;
    [CompilerGeneratedAttribute]
private PointSize <PointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PointStyle <PointStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <PointVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointShadow>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public RenderFragment LabelContent { get; public set; }
    [ParameterAttribute]
public string Label { get; public set; }
    [ParameterAttribute]
public RenderFragment PointContent { get; public set; }
    [ParameterAttribute]
public PointSize PointSize { get; public set; }
    [ParameterAttribute]
public PointStyle PointStyle { get; public set; }
    [ParameterAttribute]
public Variant PointVariant { get; public set; }
    [ParameterAttribute]
public int PointShadow { get; public set; }
    private string PointClass { get; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_LabelContent();
    [CompilerGeneratedAttribute]
public void set_LabelContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_PointContent();
    [CompilerGeneratedAttribute]
public void set_PointContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public PointSize get_PointSize();
    [CompilerGeneratedAttribute]
public void set_PointSize(PointSize value);
    [CompilerGeneratedAttribute]
public PointStyle get_PointStyle();
    [CompilerGeneratedAttribute]
public void set_PointStyle(PointStyle value);
    [CompilerGeneratedAttribute]
public Variant get_PointVariant();
    [CompilerGeneratedAttribute]
public void set_PointVariant(Variant value);
    [CompilerGeneratedAttribute]
public int get_PointShadow();
    [CompilerGeneratedAttribute]
public void set_PointShadow(int value);
    private string get_PointClass();
    protected virtual string GetComponentCssClass();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenToggleButton : RadzenButton {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToggleIcon>k__BackingField;
    private IRadzenForm _form;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <ValueChanged>k__BackingField;
    protected bool _value;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<bool>> <ValueExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormFieldContext <FormFieldContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonStyle <ToggleButtonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Shade <ToggleShade>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public string ToggleIcon { get; public set; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    [CascadingParameterAttribute]
public IRadzenForm Form { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> ValueChanged { get; public set; }
    public bool HasValue { get; }
    public bool IsBound { get; }
    [ParameterAttribute]
public bool Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> Change { get; public set; }
    public FieldIdentifier FieldIdentifier { get; private set; }
    [ParameterAttribute]
public Expression`1<Func`1<bool>> ValueExpression { get; public set; }
    [CascadingParameterAttribute]
public IFormFieldContext FormFieldContext { get; public set; }
    protected string CurrentPlaceholder { get; }
    [ParameterAttribute]
public ButtonStyle ToggleButtonStyle { get; public set; }
    [ParameterAttribute]
public Shade ToggleShade { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_ToggleIcon();
    [CompilerGeneratedAttribute]
public void set_ToggleIcon(string value);
    private string getIcon();
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    public IRadzenForm get_Form();
    public void set_Form(IRadzenForm value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<bool> value);
    public virtual bool get_HasValue();
    public sealed virtual bool get_IsBound();
    public virtual bool get_Value();
    public virtual void set_Value(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
private void set_FieldIdentifier(FieldIdentifier value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<bool>> get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression`1<Func`1<bool>> value);
    public virtual Task SetParametersAsync(ParameterView parameters);
    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    public virtual void Dispose();
    public sealed virtual object GetValue();
    public virtual Task OnContextMenu(MouseEventArgs args);
    protected ClassList GetClassList(string className);
    [CompilerGeneratedAttribute]
public IFormFieldContext get_FormFieldContext();
    [CompilerGeneratedAttribute]
public void set_FormFieldContext(IFormFieldContext value);
    protected string get_CurrentPlaceholder();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenToggleButton/<FocusAsync>d__61")]
public virtual ValueTask FocusAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenToggleButton/<Toggle>d__62")]
private Task Toggle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenToggleButton/<OnClick>d__63")]
public virtual Task OnClick(MouseEventArgs args);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
public ButtonStyle get_ToggleButtonStyle();
    [CompilerGeneratedAttribute]
public void set_ToggleButtonStyle(ButtonStyle value);
    [CompilerGeneratedAttribute]
public Shade get_ToggleShade();
    [CompilerGeneratedAttribute]
public void set_ToggleShade(Shade value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__73_0(ElementReference __value);
}
public class Radzen.Blazor.RadzenTooltip : ComponentBase {
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private TooltipService <Service>k__BackingField;
    private List`1<Tooltip> tooltips;
    [CompilerGeneratedAttribute]
private bool <IsJSRuntimeAvailable>k__BackingField;
    private DotNetObjectReference`1<RadzenTooltip> reference;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    public string UniqueID { get; public set; }
    [InjectAttribute]
private TooltipService Service { get; private set; }
    private bool IsJSRuntimeAvailable { get; private set; }
    protected DotNetObjectReference`1<RadzenTooltip> Reference { get; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private string getCssClass(Tooltip tooltip);
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(string value);
    [CompilerGeneratedAttribute]
private TooltipService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(TooltipService value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTooltip/<Open>d__11")]
public Task Open(ElementReference element, Type type, TooltipOptions options);
    [CompilerGeneratedAttribute]
private bool get_IsJSRuntimeAvailable();
    [CompilerGeneratedAttribute]
private void set_IsJSRuntimeAvailable(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTooltip/<OnAfterRenderAsync>d__16")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected DotNetObjectReference`1<RadzenTooltip> get_Reference();
    [JSInvokableAttribute("RadzenTooltip.CloseTooltip")]
public void CloseTooltip();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTooltip/<Close>d__21")]
public Task Close();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTooltip/<DisposeAsync>d__22")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void OnInitialized();
    private void OnOpen(ElementReference element, Type type, TooltipOptions options);
    private void OnClose();
    private void OnNavigate();
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private void <Open>b__11_0();
    [CompilerGeneratedAttribute]
private void <Close>b__21_0();
}
public class Radzen.Blazor.RadzenTree : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <SelectItemAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTreeItem <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RadzenTreeLevel> <Levels>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TreeEventArgs> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TreeExpandEventArgs> <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TreeEventArgs> <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TreeItemRenderEventArgs> <ItemRender>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TreeItemContextMenuEventArgs> <ItemContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<object> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCheckBoxes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCheckChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCheckParents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <CheckedValues>k__BackingField;
    internal List`1<RadzenTreeItem> items;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <UncheckedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<object>> <CheckedValuesChanged>k__BackingField;
    internal int focusedIndex;
    private bool preventKeyPress;
    private List`1<RadzenTreeItem> _currentItems;
    [ParameterAttribute]
public string SelectItemAriaLabel { get; public set; }
    internal RadzenTreeItem SelectedItem { get; private set; }
    private IList`1<RadzenTreeLevel> Levels { get; private set; }
    [ParameterAttribute]
public EventCallback`1<TreeEventArgs> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TreeExpandEventArgs> Expand { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TreeEventArgs> Collapse { get; public set; }
    [ParameterAttribute]
public Action`1<TreeItemRenderEventArgs> ItemRender { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TreeItemContextMenuEventArgs> ItemContextMenu { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<object> ValueChanged { get; public set; }
    [ParameterAttribute]
public bool AllowCheckBoxes { get; public set; }
    [ParameterAttribute]
public bool AllowCheckChildren { get; public set; }
    [ParameterAttribute]
public bool AllowCheckParents { get; public set; }
    [ParameterAttribute]
public bool SingleExpand { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<object> CheckedValues { get; public set; }
    internal IEnumerable`1<object> UncheckedValues { get; internal set; }
    [ParameterAttribute]
public EventCallback`1<IEnumerable`1<object>> CheckedValuesChanged { get; public set; }
    internal List`1<RadzenTreeItem> CurrentItems { get; }
    [CompilerGeneratedAttribute]
public string get_SelectItemAriaLabel();
    [CompilerGeneratedAttribute]
public void set_SelectItemAriaLabel(string value);
    protected virtual string GetComponentCssClass();
    [CompilerGeneratedAttribute]
internal RadzenTreeItem get_SelectedItem();
    [CompilerGeneratedAttribute]
private void set_SelectedItem(RadzenTreeItem value);
    [CompilerGeneratedAttribute]
private IList`1<RadzenTreeLevel> get_Levels();
    [CompilerGeneratedAttribute]
private void set_Levels(IList`1<RadzenTreeLevel> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TreeEventArgs> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<TreeEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TreeExpandEventArgs> get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(EventCallback`1<TreeExpandEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TreeEventArgs> get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(EventCallback`1<TreeEventArgs> value);
    [CompilerGeneratedAttribute]
public Action`1<TreeItemRenderEventArgs> get_ItemRender();
    [CompilerGeneratedAttribute]
public void set_ItemRender(Action`1<TreeItemRenderEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TreeItemContextMenuEventArgs> get_ItemContextMenu();
    [CompilerGeneratedAttribute]
public void set_ItemContextMenu(EventCallback`1<TreeItemContextMenuEventArgs> value);
    internal Tuple`2<TreeItemRenderEventArgs, IReadOnlyDictionary`2<string, object>> ItemAttributes(RadzenTreeItem item);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public EventCallback`1<object> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_AllowCheckBoxes();
    [CompilerGeneratedAttribute]
public void set_AllowCheckBoxes(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCheckChildren();
    [CompilerGeneratedAttribute]
public void set_AllowCheckChildren(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCheckParents();
    [CompilerGeneratedAttribute]
public void set_AllowCheckParents(bool value);
    [CompilerGeneratedAttribute]
public bool get_SingleExpand();
    [CompilerGeneratedAttribute]
public void set_SingleExpand(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_CheckedValues();
    [CompilerGeneratedAttribute]
public void set_CheckedValues(IEnumerable`1<object> value);
    internal void AddItem(RadzenTreeItem item);
    internal void RemoveItem(RadzenTreeItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<SetCheckedValues>d__73")]
internal Task SetCheckedValues(IEnumerable`1<object> values);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<object> get_UncheckedValues();
    [CompilerGeneratedAttribute]
internal void set_UncheckedValues(IEnumerable`1<object> value);
    internal void SetUncheckedValues(IEnumerable`1<object> values);
    [CompilerGeneratedAttribute]
public EventCallback`1<IEnumerable`1<object>> get_CheckedValuesChanged();
    [CompilerGeneratedAttribute]
public void set_CheckedValuesChanged(EventCallback`1<IEnumerable`1<object>> value);
    private void RenderTreeItem(RenderTreeBuilder builder, object data, RenderFragment`1<RadzenTreeItem> template, Func`2<object, string> text, Func`2<object, bool> checkable, Func`2<object, bool> hasChildren, Func`2<object, bool> expanded, Func`2<object, bool> selected, IEnumerable children);
    private RenderFragment RenderChildren(IEnumerable children, int depth);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<SelectItem>d__85")]
internal Task SelectItem(RadzenTreeItem item);
    public void ClearSelection();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<Reload>d__87")]
public Task Reload(RadzenTreeItem item);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<ExpandItem>d__88")]
internal Task ExpandItem(RadzenTreeItem item);
    private Func`2<object, T> Getter(object data, string property);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<SetParametersAsync>d__90")]
public virtual Task SetParametersAsync(ParameterView parameters);
    internal void AddLevel(RadzenTreeLevel level);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTree/<OnKeyPress>d__94")]
private Task OnKeyPress(KeyboardEventArgs args);
    internal bool IsFocused(RadzenTreeItem item);
    internal void InsertInCurrentItems(int index, RadzenTreeItem item);
    internal void RemoveFromCurrentItems(int index, int count);
    internal List`1<RadzenTreeItem> get_CurrentItems();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__101_0(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__101_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__101_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__101_3(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenTreeItem : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenTreeItem> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    private bool expanded;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChildren>k__BackingField;
    private bool selected;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTree <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenTreeItem <ParentItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    internal List`1<RadzenTreeItem> items;
    private bool clientExpanded;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    private ClassList ContentClassList { get; }
    private ClassList IconClassList { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenTreeItem> Template { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public bool Checkable { get; public set; }
    [ParameterAttribute]
public bool Expanded { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public bool HasChildren { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [CascadingParameterAttribute]
public RadzenTree Tree { get; public set; }
    [CascadingParameterAttribute]
public RadzenTreeItem ParentItem { get; public set; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    private ClassList get_ContentClassList();
    private ClassList get_IconClassList();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenTreeItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenTreeItem> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_HasChildren();
    [CompilerGeneratedAttribute]
public void set_HasChildren(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public RadzenTree get_Tree();
    [CompilerGeneratedAttribute]
public void set_Tree(RadzenTree value);
    [CompilerGeneratedAttribute]
public RadzenTreeItem get_ParentItem();
    [CompilerGeneratedAttribute]
public void set_ParentItem(RadzenTreeItem value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable value);
    internal void AddItem(RadzenTreeItem item);
    internal void RemoveItem(RadzenTreeItem item);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<Toggle>d__59")]
internal Task Toggle();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<ExpandCollapse>d__60")]
internal Task ExpandCollapse(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<Expand>d__61")]
private Task Expand();
    private void Select();
    internal void Unselect();
    internal void RenderChildContent(RenderFragment content);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<OnInitializedAsync>d__65")]
protected virtual Task OnInitializedAsync();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<SetParametersAsync>d__66")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<CheckedChange>d__67")]
internal Task CheckedChange(Nullable`1<bool> value);
    internal Nullable`1<bool> IsChecked();
    private IEnumerable`1<object> GetCheckedValues();
    internal IEnumerable`1<object> GetAllChildValues(Func`2<object, bool> predicate);
    private IEnumerable`1<object> GetValueAndAllChildValues();
    private bool AreAllChildrenChecked(Func`2<object, bool> predicate);
    private bool AreAllChildrenUnchecked(Func`2<object, bool> predicate);
    private bool IsOneChildUnchecked();
    private bool IsOneChildChecked();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<UpdateCheckedValuesWithParents>d__76")]
private Task UpdateCheckedValuesWithParents(Nullable`1<bool> value);
    internal bool Contains(RadzenTreeItem child);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenTreeItem/<OnContextMenu>d__78")]
private Task OnContextMenu(MouseEventArgs args);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private bool <UpdateCheckedValuesWithParents>b__76_0(object i);
    [CompilerGeneratedAttribute]
private bool <UpdateCheckedValuesWithParents>b__76_1(object i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__79_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenTreeLevel : ComponentBase {
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildrenProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <HasChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenTreeItem> <Template>k__BackingField;
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public string CheckableProperty { get; public set; }
    [ParameterAttribute]
public string ChildrenProperty { get; public set; }
    [ParameterAttribute]
public Func`2<object, bool> HasChildren { get; public set; }
    [ParameterAttribute]
public Func`2<object, bool> Expanded { get; public set; }
    [ParameterAttribute]
public Func`2<object, bool> Selected { get; public set; }
    [ParameterAttribute]
public Func`2<object, string> Text { get; public set; }
    [ParameterAttribute]
public Func`2<object, bool> Checkable { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<RadzenTreeItem> Template { get; public set; }
    [CascadingParameterAttribute]
public RadzenTree Tree { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public string get_CheckableProperty();
    [CompilerGeneratedAttribute]
public void set_CheckableProperty(string value);
    [CompilerGeneratedAttribute]
public string get_ChildrenProperty();
    [CompilerGeneratedAttribute]
public void set_ChildrenProperty(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_HasChildren();
    [CompilerGeneratedAttribute]
public void set_HasChildren(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenTreeItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenTreeItem> value);
    public RadzenTree get_Tree();
    public void set_Tree(RadzenTree value);
}
public class Radzen.Blazor.RadzenUpload : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <ImageAlternateText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputAttributes>k__BackingField;
    protected ElementReference fileUpload;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChooseText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeleteText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFileCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private IDictionary`2<string, string> headers;
    private bool visibleChanged;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadChangeEventArgs> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadProgressArgs> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadCompleteEventArgs> <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<UploadErrorEventArgs> <Error>k__BackingField;
    private List`1<PreviewFileInfo> files;
    [ParameterAttribute]
public string ImageAlternateText { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> InputAttributes { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public bool Auto { get; public set; }
    [ParameterAttribute]
public string ChooseText { get; public set; }
    [ParameterAttribute]
public string DeleteText { get; public set; }
    [ParameterAttribute]
public string Url { get; public set; }
    [ParameterAttribute]
public string ParameterName { get; public set; }
    [ParameterAttribute]
public string Accept { get; public set; }
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public int MaxFileCount { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    private ClassList ChooseClassList { get; }
    private ClassList ButtonClassList { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<UploadChangeEventArgs> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<UploadProgressArgs> Progress { get; public set; }
    [ParameterAttribute]
public EventCallback`1<UploadCompleteEventArgs> Complete { get; public set; }
    [ParameterAttribute]
public EventCallback`1<UploadErrorEventArgs> Error { get; public set; }
    public bool HasValue { get; }
    [CompilerGeneratedAttribute]
public string get_ImageAlternateText();
    [CompilerGeneratedAttribute]
public void set_ImageAlternateText(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_InputAttributes();
    [CompilerGeneratedAttribute]
public void set_InputAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Auto();
    [CompilerGeneratedAttribute]
public void set_Auto(bool value);
    [CompilerGeneratedAttribute]
public string get_ChooseText();
    [CompilerGeneratedAttribute]
public void set_ChooseText(string value);
    [CompilerGeneratedAttribute]
public string get_DeleteText();
    [CompilerGeneratedAttribute]
public void set_DeleteText(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public int get_MaxFileCount();
    [CompilerGeneratedAttribute]
public void set_MaxFileCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    private ClassList get_ChooseClassList();
    private ClassList get_ButtonClassList();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<Upload>d__65")]
public Task Upload();
    internal void AddHeader(string name, string value);
    internal void RemoveHeader(string name);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<SetParametersAsync>d__71")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnAfterRenderAsync>d__72")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [JSInvokableAttribute("GetHeaders")]
public IDictionary`2<string, string> GetHeaders();
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadChangeEventArgs> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<UploadChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadProgressArgs> get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(EventCallback`1<UploadProgressArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadCompleteEventArgs> get_Complete();
    [CompilerGeneratedAttribute]
public void set_Complete(EventCallback`1<UploadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<UploadErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventCallback`1<UploadErrorEventArgs> value);
    public bool get_HasValue();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<ClearFiles>d__93")]
public Task ClearFiles();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<RemoveFile>d__94")]
public Task RemoveFile(string fileName, bool ignoreCase);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnRemove>d__95")]
protected Task OnRemove(PreviewFileInfo file, bool fireChangeEvent);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnChange>d__96")]
[JSInvokableAttribute("RadzenUpload.OnChange")]
public Task OnChange(IEnumerable`1<PreviewFileInfo> files);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnProgress>d__97")]
[JSInvokableAttribute("RadzenUpload.OnProgress")]
public Task`1<bool> OnProgress(int progress, long loaded, long total, IEnumerable`1<FileInfo> files, bool cancel);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnComplete>d__98")]
[JSInvokableAttribute("RadzenUpload.OnComplete")]
public Task OnComplete(string response, bool cancelled);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnError>d__99")]
[JSInvokableAttribute("RadzenUpload.OnError")]
public Task OnError(string error);
    protected virtual string GetComponentCssClass();
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUpload/<OnInputChange>d__101")]
private Task OnInputChange(InputFileChangeEventArgs args);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private RenderFragment RenderInput();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__102_1(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderInput>b__103_0(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <RenderInput>b__103_1(ElementReference __value);
}
public class Radzen.Blazor.RadzenUploadHeader : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenUpload <Upload>k__BackingField;
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [CascadingParameterAttribute]
public RadzenUpload Upload { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public RadzenUpload get_Upload();
    [CompilerGeneratedAttribute]
public void set_Upload(RadzenUpload value);
    [AsyncStateMachineAttribute("Radzen.Blazor.RadzenUploadHeader/<SetParametersAsync>d__13")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.RadzenValueAxis : AxisBase {
    internal double Size { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal double Measure(RadzenChart chart);
    internal virtual double get_Size();
    protected virtual void Initialize();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.RadzenWeekView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    public string Icon { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
public string HeaderFormat { get; public set; }
    [ParameterAttribute]
public TimeSpan StartTime { get; public set; }
    [ParameterAttribute]
public TimeSpan EndTime { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public string Title { get; }
    public virtual string get_Icon();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_TimeFormat();
    [CompilerGeneratedAttribute]
public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderFormat();
    [CompilerGeneratedAttribute]
public void set_HeaderFormat(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    public virtual string get_Title();
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.RadzenYearPlannerView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    public string Icon { get; }
    public string Title { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    public virtual string get_Icon();
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.RadzenYearTimelineView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    public string Icon { get; }
    public string Title { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    public virtual string get_Icon();
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.RadzenYearView : SchedulerViewBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoDayEventsText>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    public string Icon { get; }
    public string Title { get; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    [ParameterAttribute]
public string NoDayEventsText { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    public virtual string get_Icon();
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    [CompilerGeneratedAttribute]
public string get_NoDayEventsText();
    [CompilerGeneratedAttribute]
public void set_NoDayEventsText(string value);
    public virtual DateTime get_StartDate();
    public virtual DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    public virtual DateTime Next();
    public virtual DateTime Prev();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    public virtual RenderFragment Render();
}
public class Radzen.Blazor.Rendering.Appointment : ComponentBase {
    private ElementReference element;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<AppointmentData> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<AppointmentData> <DragStart>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private AppointmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAppointmentContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    private string Title { get; }
    private string DraggableAttribute { get; }
    private string OnDragStartAttribute { get; }
    [ParameterAttribute]
public string CssClass { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Top { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Left { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Width { get; public set; }
    [ParameterAttribute]
public Nullable`1<double> Height { get; public set; }
    [ParameterAttribute]
public EventCallback`1<AppointmentData> Click { get; public set; }
    [ParameterAttribute]
public EventCallback`1<AppointmentData> DragStart { get; public set; }
    private IDictionary`2<string, object> Attributes { get; private set; }
    [ParameterAttribute]
public AppointmentData Data { get; public set; }
    [ParameterAttribute]
public bool ShowAppointmentContent { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    private string Style { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private string get_Title();
    private string get_DraggableAttribute();
    private string get_OnDragStartAttribute();
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<AppointmentData> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<AppointmentData> get_DragStart();
    [CompilerGeneratedAttribute]
public void set_DragStart(EventCallback`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public AppointmentData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(AppointmentData value);
    [CompilerGeneratedAttribute]
public bool get_ShowAppointmentContent();
    [CompilerGeneratedAttribute]
public void set_ShowAppointmentContent(bool value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
private string get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(string value);
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Appointment/<OnClick>d__57")]
private Task OnClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Appointment/<OnMouseEnter>d__58")]
private Task OnMouseEnter();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Appointment/<OnMouseLeave>d__59")]
private Task OnMouseLeave();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Appointment/<OnDragStart>d__60")]
public Task OnDragStart(DragEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
}
public static class Radzen.Blazor.Rendering.AxisMeasurer : object {
    public static double YAxis(ScaleBase scale, AxisBase axis, RadzenAxisTitle title);
    public static double XAxis(RadzenAxisTitle title);
}
public class Radzen.Blazor.Rendering.CategoryAxis : RadzenChartComponentBase {
    private decimal start;
    private decimal end;
    private decimal step;
    private double x1;
    private double x2;
    private double y1;
    private double y2;
    [CompilerGeneratedAttribute]
private AxisBase <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisBase <YAxis>k__BackingField;
    private AxisBase XAxis { get; private set; }
    private AxisBase YAxis { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private AxisBase get_XAxis();
    [CompilerGeneratedAttribute]
private void set_XAxis(AxisBase value);
    [CompilerGeneratedAttribute]
private AxisBase get_YAxis();
    [CompilerGeneratedAttribute]
private void set_YAxis(AxisBase value);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.CategoryAxisTick : Tick {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.Rendering.CategoryAxisTitle : ComponentBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Radzen.Blazor.Rendering.ChartDataLabel : object {
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextAnchor>k__BackingField;
    public Point Position { get; public set; }
    public string Text { get; public set; }
    public string TextAnchor { get; public set; }
    [CompilerGeneratedAttribute]
public Point get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Point value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_TextAnchor();
    [CompilerGeneratedAttribute]
public void set_TextAnchor(string value);
}
public class Radzen.Blazor.Rendering.ChartSharedTooltip : ComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public string Class { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
public class Radzen.Blazor.Rendering.ChartSharedTooltipItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <LegendItem>k__BackingField;
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment LegendItem { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_LegendItem();
    [CompilerGeneratedAttribute]
public void set_LegendItem(RenderFragment value);
}
public class Radzen.Blazor.Rendering.ChartTooltip : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public string Label { get; public set; }
    [ParameterAttribute]
public string Class { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
}
public class Radzen.Blazor.Rendering.ChartTooltipContainer : ComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    internal void Refresh();
}
public class Radzen.Blazor.Rendering.ClassList : object {
    private StringBuilder builder;
    private ClassList(string className);
    public static ClassList Create(string className);
    public ClassList Add(string className, bool condition);
    public ClassList Add(IDictionary`2<string, object> attributes);
    public ClassList Add(IReadOnlyDictionary`2<string, object> attributes);
    public ClassList Add(FieldIdentifier field, EditContext context);
    public ClassList AddDisabled(bool condition);
    public virtual string ToString();
}
public class Radzen.Blazor.Rendering.ClipPath : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    private string Path { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    protected virtual void Initialize();
}
[ExtensionAttribute]
public static class Radzen.Blazor.Rendering.DateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime StartOfWeek(DateTime date);
    [ExtensionAttribute]
public static DateTime StartOfMonth(DateTime date);
    [ExtensionAttribute]
public static DateTime EndOfMonth(DateTime date);
    [ExtensionAttribute]
public static DateTime EndOfWeek(DateTime date);
}
public class Radzen.Blazor.Rendering.DaySlotEvents : ComponentBase {
    [CompilerGeneratedAttribute]
private int <CurrentAppointment>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<AppointmentData> <AppointmentDragStart>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AppointmentData> <Appointments>k__BackingField;
    [ParameterAttribute]
public int CurrentAppointment { get; public set; }
    [ParameterAttribute]
public DateTime CurrentDate { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    [ParameterAttribute]
public EventCallback`1<AppointmentData> AppointmentDragStart { get; public set; }
    [ParameterAttribute]
public IList`1<AppointmentData> Appointments { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public int get_CurrentAppointment();
    [CompilerGeneratedAttribute]
public void set_CurrentAppointment(int value);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
public void set_CurrentDate(DateTime value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<AppointmentData> get_AppointmentDragStart();
    [CompilerGeneratedAttribute]
public void set_AppointmentDragStart(EventCallback`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public IList`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IList`1<AppointmentData> value);
    private RenderedAppointment[] Layout();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DaySlotEvents/<OnAppointmentSelect>d__34")]
private Task OnAppointmentSelect(AppointmentData data);
    private RenderedAppointment[] OverlappingAppointments(RenderedAppointment[] appointments, DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DaySlotEvents/<OnAppointmentDragStart>d__36")]
public Task OnAppointmentDragStart(AppointmentData Data);
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__0_0(AppointmentData i);
    [CompilerGeneratedAttribute]
private bool <Layout>b__33_0(AppointmentData item);
}
public class Radzen.Blazor.Rendering.DayView : DropableViewBase {
    private ElementReference view;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AppointmentData> <Appointments>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    private DateTime CurrentDate;
    private int currentAppointment;
    private IEnumerable`1<AppointmentData> currentAppointments;
    private bool preventKeyPress;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public TimeSpan StartTime { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public TimeSpan EndTime { get; public set; }
    [ParameterAttribute]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    [ParameterAttribute]
public IList`1<AppointmentData> Appointments { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TimeFormat();
    [CompilerGeneratedAttribute]
public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
    [CompilerGeneratedAttribute]
public IList`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IList`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    private AppointmentData[] AppointmentsInSlot(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DayView/<OnSlotClick>d__35")]
private Task OnSlotClick(DateTime date);
    private IDictionary`2<string, object> Attributes(DateTime date);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DayView/<OnKeyPress>d__41")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(ElementReference __value);
}
public class Radzen.Blazor.Rendering.DialogContainer : ComponentBase {
    private ElementReference dialog;
    private string left;
    private string top;
    private string height;
    private string width;
    private bool shouldRender;
    [CompilerGeneratedAttribute]
private Dialog <Dialog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMask>k__BackingField;
    private object reference;
    [CompilerGeneratedAttribute]
private DialogService <Service>k__BackingField;
    private DotNetObjectReference`1<DialogContainer> dotNetReference;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [ParameterAttribute]
public Dialog Dialog { get; public set; }
    [ParameterAttribute]
public bool ShowMask { get; public set; }
    private RenderFragment ChildContent { get; }
    private string CssClass { get; }
    private string WrapperCssClass { get; }
    private string ContentCssClass { get; }
    private string Style { get; }
    [InjectAttribute]
private DialogService Service { get; private set; }
    protected DotNetObjectReference`1<DialogContainer> DotNetReference { get; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private void OnKeyPress(KeyboardEventArgs args);
    [JSInvokableAttribute("RadzenDialog.OnDrag")]
public void OnDrag(double t, double l);
    [JSInvokableAttribute("RadzenDialog.OnResize")]
public void OnResize(double w, double h);
    protected virtual bool ShouldRender();
    [CompilerGeneratedAttribute]
public Dialog get_Dialog();
    [CompilerGeneratedAttribute]
public void set_Dialog(Dialog value);
    [CompilerGeneratedAttribute]
public bool get_ShowMask();
    [CompilerGeneratedAttribute]
public void set_ShowMask(bool value);
    private RenderFragment get_ChildContent();
    private void Close();
    private string get_CssClass();
    private string get_WrapperCssClass();
    private string get_ContentCssClass();
    private string get_Style();
    [CompilerGeneratedAttribute]
private DialogService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(DialogService value);
    protected virtual void OnInitialized();
    private void OnRefresh();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DialogContainer/<OnAfterRenderAsync>d__38")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected DotNetObjectReference`1<DialogContainer> get_DotNetReference();
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_ChildContent>b__20_0(RenderTreeBuilder builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_ChildContent>b__20_1(object component);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
public class Radzen.Blazor.Rendering.Draggable : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DraggableEventArgs> <DragStart>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DraggableEventArgs> <DragEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DraggableEventArgs> <Drag>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Touch>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DraggableEventArgs> DragStart { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DraggableEventArgs> DragEnd { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DraggableEventArgs> Drag { get; public set; }
    private Rect Rect { get; private set; }
    private bool Touch { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DraggableEventArgs> get_DragStart();
    [CompilerGeneratedAttribute]
public void set_DragStart(EventCallback`1<DraggableEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DraggableEventArgs> get_DragEnd();
    [CompilerGeneratedAttribute]
public void set_DragEnd(EventCallback`1<DraggableEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DraggableEventArgs> get_Drag();
    [CompilerGeneratedAttribute]
public void set_Drag(EventCallback`1<DraggableEventArgs> value);
    [CompilerGeneratedAttribute]
private Rect get_Rect();
    [CompilerGeneratedAttribute]
private void set_Rect(Rect value);
    [CompilerGeneratedAttribute]
private bool get_Touch();
    [CompilerGeneratedAttribute]
private void set_Touch(bool value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Draggable/<OnMouseUp>d__25")]
private Task OnMouseUp(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Draggable/<OnMouseDown>d__26")]
private Task OnMouseDown(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Draggable/<OnMove>d__27")]
[JSInvokableAttribute]
public Task OnMove(MouseEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Draggable/<OnTouchStart>d__28")]
private Task OnTouchStart(TouchEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
}
public class Radzen.Blazor.Rendering.DraggableEventArgs : object {
    [CompilerGeneratedAttribute]
private double <ClientX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClientY>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Rect>k__BackingField;
    public double ClientX { get; public set; }
    public double ClientY { get; public set; }
    public Rect Rect { get; public set; }
    [CompilerGeneratedAttribute]
public double get_ClientX();
    [CompilerGeneratedAttribute]
public void set_ClientX(double value);
    [CompilerGeneratedAttribute]
public double get_ClientY();
    [CompilerGeneratedAttribute]
public void set_ClientY(double value);
    [CompilerGeneratedAttribute]
public Rect get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(Rect value);
}
public abstract class Radzen.Blazor.Rendering.DropableViewBase : ComponentBase {
    private bool dragStarted;
    private AppointmentData draggedAppointment;
    [CompilerGeneratedAttribute]
private EventCallback`1<SchedulerAppointmentMoveEventArgs> <AppointmentMove>k__BackingField;
    [ParameterAttribute]
public EventCallback`1<SchedulerAppointmentMoveEventArgs> AppointmentMove { get; public set; }
    [CompilerGeneratedAttribute]
public EventCallback`1<SchedulerAppointmentMoveEventArgs> get_AppointmentMove();
    [CompilerGeneratedAttribute]
public void set_AppointmentMove(EventCallback`1<SchedulerAppointmentMoveEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.DropableViewBase/<OnDrop>d__6")]
public Task OnDrop(DateTime slotDate);
    public void OnAppointmentDragStart(AppointmentData data);
}
public class Radzen.Blazor.Rendering.EditorButton : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventBlur>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEditorMode <EnabledModes>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Click>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Shortcut { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool PreventBlur { get; public set; }
    [ParameterAttribute]
public bool Selected { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public HtmlEditorMode EnabledModes { get; public set; }
    [ParameterAttribute]
public EventCallback Click { get; public set; }
    private string Class { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Shortcut();
    [CompilerGeneratedAttribute]
public void set_Shortcut(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreventBlur();
    [CompilerGeneratedAttribute]
public void set_PreventBlur(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public HtmlEditorMode get_EnabledModes();
    [CompilerGeneratedAttribute]
public void set_EnabledModes(HtmlEditorMode value);
    [CompilerGeneratedAttribute]
public EventCallback get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorButton/<OnClick>d__41")]
private Task OnClick();
    private string GetTitle();
    private string get_Class();
    private void Empty();
}
public class Radzen.Blazor.Rendering.EditorColorPicker : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEditorMode <EnabledModes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHSV>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRGBA>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreenText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlueText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlphaText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <ValueChanged>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public string IconColor { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public HtmlEditorMode EnabledModes { get; public set; }
    [ParameterAttribute]
public bool ShowHSV { get; public set; }
    [ParameterAttribute]
public bool ShowRGBA { get; public set; }
    [ParameterAttribute]
public bool ShowColors { get; public set; }
    [ParameterAttribute]
public bool ShowButton { get; public set; }
    [ParameterAttribute]
public string HexText { get; public set; }
    [ParameterAttribute]
public string RedText { get; public set; }
    [ParameterAttribute]
public string GreenText { get; public set; }
    [ParameterAttribute]
public string BlueText { get; public set; }
    [ParameterAttribute]
public string AlphaText { get; public set; }
    [ParameterAttribute]
public string ButtonText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> ValueChanged { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public HtmlEditorMode get_EnabledModes();
    [CompilerGeneratedAttribute]
public void set_EnabledModes(HtmlEditorMode value);
    [CompilerGeneratedAttribute]
public bool get_ShowHSV();
    [CompilerGeneratedAttribute]
public void set_ShowHSV(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowRGBA();
    [CompilerGeneratedAttribute]
public void set_ShowRGBA(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowColors();
    [CompilerGeneratedAttribute]
public void set_ShowColors(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowButton();
    [CompilerGeneratedAttribute]
public void set_ShowButton(bool value);
    [CompilerGeneratedAttribute]
public string get_HexText();
    [CompilerGeneratedAttribute]
public void set_HexText(string value);
    [CompilerGeneratedAttribute]
public string get_RedText();
    [CompilerGeneratedAttribute]
public void set_RedText(string value);
    [CompilerGeneratedAttribute]
public string get_GreenText();
    [CompilerGeneratedAttribute]
public void set_GreenText(string value);
    [CompilerGeneratedAttribute]
public string get_BlueText();
    [CompilerGeneratedAttribute]
public void set_BlueText(string value);
    [CompilerGeneratedAttribute]
public string get_AlphaText();
    [CompilerGeneratedAttribute]
public void set_AlphaText(string value);
    [CompilerGeneratedAttribute]
public string get_ButtonText();
    [CompilerGeneratedAttribute]
public void set_ButtonText(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<string> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorColorPicker/<OnChange>d__77")]
private Task OnChange(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorColorPicker/<OnOpen>d__78")]
private Task OnOpen();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorColorPicker/<OnClick>d__79")]
private Task OnClick();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(RenderTreeBuilder __builder2);
}
public class Radzen.Blazor.Rendering.EditorDropDown : RadzenComponent {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private Popup <Popup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopupStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEditorMode <EnabledModes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorDropDownItem <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <Change>k__BackingField;
    [CascadingParameterAttribute]
public RadzenHtmlEditor Editor { get; public set; }
    private Popup Popup { get; private set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string PopupStyle { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public HtmlEditorMode EnabledModes { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    internal EditorDropDownItem SelectedItem { get; internal set; }
    [ParameterAttribute]
public EventCallback`1<string> ValueChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> Change { get; public set; }
    private string Class { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
private Popup get_Popup();
    [CompilerGeneratedAttribute]
private void set_Popup(Popup value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_PopupStyle();
    [CompilerGeneratedAttribute]
public void set_PopupStyle(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public HtmlEditorMode get_EnabledModes();
    [CompilerGeneratedAttribute]
public void set_EnabledModes(HtmlEditorMode value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorDropDown/<Toggle>d__29")]
private Task Toggle();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
internal EditorDropDownItem get_SelectedItem();
    [CompilerGeneratedAttribute]
internal void set_SelectedItem(EditorDropDownItem value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<string> value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorDropDown/<Select>d__46")]
internal Task Select(EditorDropDownItem item, bool change);
    private string get_Class();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(object __value);
}
public class Radzen.Blazor.Rendering.EditorDropDownItem : ComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment`1<EditorDropDownItem> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorDropDown <DropDown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [ParameterAttribute]
public RenderFragment`1<EditorDropDownItem> ChildContent { get; public set; }
    [ParameterAttribute]
public IDictionary`2<string, object> Attributes { get; public set; }
    [CascadingParameterAttribute]
public EditorDropDown DropDown { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    private string Class { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RenderFragment`1<EditorDropDownItem> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<EditorDropDownItem> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public EditorDropDown get_DropDown();
    [CompilerGeneratedAttribute]
public void set_DropDown(EditorDropDown value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorDropDownItem/<Select>d__21")]
private Task Select();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.EditorDropDownItem/<OnParametersSetAsync>d__22")]
protected virtual Task OnParametersSetAsync();
    private string get_Class();
}
internal class Radzen.Blazor.Rendering.FontData : object {
    [CompilerGeneratedAttribute]
private double <Average>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<char, double> <Chars>k__BackingField;
    public double Average { get; public set; }
    public IDictionary`2<char, double> Chars { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Average();
    [CompilerGeneratedAttribute]
public void set_Average(double value);
    [CompilerGeneratedAttribute]
public IDictionary`2<char, double> get_Chars();
    [CompilerGeneratedAttribute]
public void set_Chars(IDictionary`2<char, double> value);
}
public class Radzen.Blazor.Rendering.GaugeBand : ComponentBase {
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <From>k__BackingField;
    [CompilerGeneratedAttribute]
private double <To>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double EndAngle { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public double From { get; public set; }
    [ParameterAttribute]
public double To { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    private string Path { get; private set; }
    [ParameterAttribute]
public Point Center { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double Size { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_From();
    [CompilerGeneratedAttribute]
public void set_From(double value);
    [CompilerGeneratedAttribute]
public double get_To();
    [CompilerGeneratedAttribute]
public void set_To(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
private string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Point get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(Point value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    private double Clip(double v);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.GaugePointer : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public double EndAngle { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public double Width { get; public set; }
    [ParameterAttribute]
public double Length { get; public set; }
    [ParameterAttribute]
public Point Center { get; public set; }
    [ParameterAttribute]
public double Value { get; public set; }
    private string Path { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(double value);
    [CompilerGeneratedAttribute]
public Point get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(Point value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
private string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    private double Clip(double v);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.GaugeScale : ComponentBase {
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorTickLength>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TickLabelOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTickLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private GaugeTickPosition <TickPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<double, string> <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinorStep>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Tick> <Ticks>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Tick> <MinorTicks>k__BackingField;
    [ParameterAttribute]
public double StartAngle { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double TickLength { get; public set; }
    [ParameterAttribute]
public double MinorTickLength { get; public set; }
    [ParameterAttribute]
public double TickLabelOffset { get; public set; }
    [ParameterAttribute]
public double EndAngle { get; public set; }
    [ParameterAttribute]
public double Radius { get; public set; }
    [ParameterAttribute]
public Point Center { get; public set; }
    [ParameterAttribute]
public double Min { get; public set; }
    [ParameterAttribute]
public double Max { get; public set; }
    [ParameterAttribute]
public bool ShowFirstTick { get; public set; }
    [ParameterAttribute]
public bool ShowLastTick { get; public set; }
    [ParameterAttribute]
public bool ShowTickLabels { get; public set; }
    [ParameterAttribute]
public GaugeTickPosition TickPosition { get; public set; }
    [ParameterAttribute]
public string FormatString { get; public set; }
    [ParameterAttribute]
public Func`2<double, string> Formatter { get; public set; }
    [ParameterAttribute]
public double Step { get; public set; }
    [ParameterAttribute]
public double MinorStep { get; public set; }
    private string Path { get; private set; }
    private IList`1<Tick> Ticks { get; private set; }
    private IList`1<Tick> MinorTicks { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_TickLength();
    [CompilerGeneratedAttribute]
public void set_TickLength(double value);
    [CompilerGeneratedAttribute]
public double get_MinorTickLength();
    [CompilerGeneratedAttribute]
public void set_MinorTickLength(double value);
    [CompilerGeneratedAttribute]
public double get_TickLabelOffset();
    [CompilerGeneratedAttribute]
public void set_TickLabelOffset(double value);
    [CompilerGeneratedAttribute]
public double get_EndAngle();
    [CompilerGeneratedAttribute]
public void set_EndAngle(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public Point get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(Point value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public bool get_ShowFirstTick();
    [CompilerGeneratedAttribute]
public void set_ShowFirstTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLastTick();
    [CompilerGeneratedAttribute]
public void set_ShowLastTick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTickLabels();
    [CompilerGeneratedAttribute]
public void set_ShowTickLabels(bool value);
    [CompilerGeneratedAttribute]
public GaugeTickPosition get_TickPosition();
    [CompilerGeneratedAttribute]
public void set_TickPosition(GaugeTickPosition value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public Func`2<double, string> get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(Func`2<double, string> value);
    [CompilerGeneratedAttribute]
public double get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(double value);
    [CompilerGeneratedAttribute]
public double get_MinorStep();
    [CompilerGeneratedAttribute]
public void set_MinorStep(double value);
    [CompilerGeneratedAttribute]
private string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
private IList`1<Tick> get_Ticks();
    [CompilerGeneratedAttribute]
private void set_Ticks(IList`1<Tick> value);
    [CompilerGeneratedAttribute]
private IList`1<Tick> get_MinorTicks();
    [CompilerGeneratedAttribute]
private void set_MinorTicks(IList`1<Tick> value);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.Hours : ComponentBase {
    [CompilerGeneratedAttribute]
private TimeSpan <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <End>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    [ParameterAttribute]
public TimeSpan Start { get; public set; }
    [ParameterAttribute]
public TimeSpan End { get; public set; }
    [ParameterAttribute]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public TimeSpan get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_End();
    [CompilerGeneratedAttribute]
public void set_End(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TimeFormat();
    [CompilerGeneratedAttribute]
public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
}
public class Radzen.Blazor.Rendering.HSV : object {
    [CompilerGeneratedAttribute]
private double <Hue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    public double Hue { get; public set; }
    public double Saturation { get; public set; }
    public double Value { get; public set; }
    public double Alpha { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Hue();
    [CompilerGeneratedAttribute]
public void set_Hue(double value);
    [CompilerGeneratedAttribute]
public double get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_Alpha();
    [CompilerGeneratedAttribute]
public void set_Alpha(double value);
    public RGB ToRGB();
}
public interface Radzen.Blazor.Rendering.IPathGenerator {
    public abstract virtual string Path(IEnumerable`1<Point> data);
}
public class Radzen.Blazor.Rendering.Legend : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenChart <Chart>k__BackingField;
    [CascadingParameterAttribute]
public RadzenChart Chart { get; public set; }
    private string Class { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenChart get_Chart();
    [CompilerGeneratedAttribute]
public void set_Chart(RadzenChart value);
    private string get_Class();
}
public class Radzen.Blazor.Rendering.LegendItem : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarkerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clickable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private bool preventKeyPress;
    [ParameterAttribute]
public string Color { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Class { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public MarkerType MarkerType { get; public set; }
    [ParameterAttribute]
public double MarkerSize { get; public set; }
    [ParameterAttribute]
public EventCallback Click { get; public set; }
    [ParameterAttribute]
public bool Clickable { get; public set; }
    [ParameterAttribute]
public int Index { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public double get_MarkerSize();
    [CompilerGeneratedAttribute]
public void set_MarkerSize(double value);
    [CompilerGeneratedAttribute]
public EventCallback get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback value);
    [CompilerGeneratedAttribute]
public bool get_Clickable();
    [CompilerGeneratedAttribute]
public void set_Clickable(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.LegendItem/<OnClick>d__38")]
private Task OnClick();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.LegendItem/<OnKeyPress>d__39")]
private Task OnKeyPress(KeyboardEventArgs args);
}
public class Radzen.Blazor.Rendering.Line : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X2>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y1>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public double X1 { get; public set; }
    [ParameterAttribute]
public double X2 { get; public set; }
    [ParameterAttribute]
public double Y1 { get; public set; }
    [ParameterAttribute]
public double Y2 { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public string Class { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public double get_X1();
    [CompilerGeneratedAttribute]
public void set_X1(double value);
    [CompilerGeneratedAttribute]
public double get_X2();
    [CompilerGeneratedAttribute]
public void set_X2(double value);
    [CompilerGeneratedAttribute]
public double get_Y1();
    [CompilerGeneratedAttribute]
public void set_Y1(double value);
    [CompilerGeneratedAttribute]
public double get_Y2();
    [CompilerGeneratedAttribute]
public void set_Y2(double value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
}
public class Radzen.Blazor.Rendering.LineGenerator : object {
    public sealed virtual string Path(IEnumerable`1<Point> data);
}
public class Radzen.Blazor.Rendering.Marker : ComponentBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Click>k__BackingField;
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public MarkerType Type { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double Size { get; public set; }
    [ParameterAttribute]
public EventCallback Click { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public MarkerType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MarkerType value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    [CompilerGeneratedAttribute]
public EventCallback get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(EventCallback value);
}
public class Radzen.Blazor.Rendering.Markers`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private RadzenChart <Chart>k__BackingField;
    [CompilerGeneratedAttribute]
private IChartSeries <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Point`1<TItem>> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    private double x1;
    private double x2;
    private double y1;
    private double y2;
    [CascadingParameterAttribute]
public RadzenChart Chart { get; public set; }
    [ParameterAttribute]
public IChartSeries Series { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<Point`1<TItem>> Data { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public MarkerType MarkerType { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public double Size { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RadzenChart get_Chart();
    [CompilerGeneratedAttribute]
public void set_Chart(RadzenChart value);
    [CompilerGeneratedAttribute]
public IChartSeries get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(IChartSeries value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Markers`1/<OnClick>d__9")]
private Task OnClick(TItem data);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Point`1<TItem>> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<Point`1<TItem>> value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    private bool InPlotArea(double x, double y);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.MonthView : DropableViewBase {
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    private ElementReference contentView;
    private DateTime CurrentDate;
    private int currentAppointment;
    private IEnumerable`1<AppointmentData> currentAppointments;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public int MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public int get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(int value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    private IDictionary`2<string, object> Attributes(DateTime start);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.MonthView/<OnSlotClick>d__26")]
private Task OnSlotClick(DateTime date);
    private double DetermineTop(HashSet`1<double> existingTops);
    private HashSet`1<double> ExistingTops(IDictionary`2<AppointmentData, double> tops, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.MonthView/<OnAppointmentClick>d__30")]
private Task OnAppointmentClick(AppointmentData data);
    private AppointmentData[] AppointmentsInSlot(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.MonthView/<OnListClick>d__32")]
private Task OnListClick(DateTime date, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.MonthView/<OnListEventClick>d__33")]
private Task OnListEventClick(AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.MonthView/<OnKeyPress>d__38")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(ElementReference __value);
}
[ExtensionAttribute]
public static class Radzen.Blazor.Rendering.NumericExtensions : object {
    [ExtensionAttribute]
public static string ToInvariantString(double value);
    [ExtensionAttribute]
public static string ToInvariantString(Nullable`1<double> value);
    [ExtensionAttribute]
public static string ToInvariantString(decimal value);
    [ExtensionAttribute]
public static string ToInvariantString(Nullable`1<decimal> value);
}
public class Radzen.Blazor.Rendering.Path : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <D>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public string D { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public string Fill { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public string Class { get; public set; }
    private string StrokeLineCap { get; }
    private string StrokeDashArray { get; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    private string CurrentStyle();
    [CompilerGeneratedAttribute]
public string get_D();
    [CompilerGeneratedAttribute]
public void set_D(string value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    private string get_StrokeLineCap();
    private string get_StrokeDashArray();
}
public static class Radzen.Blazor.Rendering.Polar : object {
    public static double ToRadian(double value);
    public static double ToDegree(double value);
    public static Point ToCartesian(double cx, double cy, double radius, double angle);
}
public class Radzen.Blazor.Rendering.Popup : RadzenComponent {
    private bool open;
    [CompilerGeneratedAttribute]
private bool <Lazy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFocusFirstElement>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <Close>k__BackingField;
    private ElementReference target;
    [ParameterAttribute]
public bool Lazy { get; public set; }
    [ParameterAttribute]
public bool AutoFocusFirstElement { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool PreventDefault { get; public set; }
    [ParameterAttribute]
public EventCallback Open { get; public set; }
    [ParameterAttribute]
public EventCallback Close { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public bool get_Lazy();
    [CompilerGeneratedAttribute]
public void set_Lazy(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoFocusFirstElement();
    [CompilerGeneratedAttribute]
public void set_AutoFocusFirstElement(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_PreventDefault();
    [CompilerGeneratedAttribute]
public void set_PreventDefault(bool value);
    [CompilerGeneratedAttribute]
public EventCallback get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(EventCallback value);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Popup/<ToggleAsync>d__26")]
public Task ToggleAsync(ElementReference target, bool disableSmartPosition);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Popup/<CloseAsync>d__27")]
public Task CloseAsync(ElementReference target);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Popup/<OnClose>d__29")]
[JSInvokableAttribute]
public Task OnClose();
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.Popup/<CloseAsync>d__30")]
public Task CloseAsync();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(ElementReference __value);
}
public class Radzen.Blazor.Rendering.Rect : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Top { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Bottom { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(double value);
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(double value);
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(double value);
    [CompilerGeneratedAttribute]
public double get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(double value);
}
public class Radzen.Blazor.Rendering.RGB : object {
    private static Dictionary`2<string, string> knownColors;
    [CompilerGeneratedAttribute]
private double <Red>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Blue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    public double Red { get; public set; }
    public double Green { get; public set; }
    public double Blue { get; public set; }
    public double Alpha { get; public set; }
    private static RGB();
    [CompilerGeneratedAttribute]
public double get_Red();
    [CompilerGeneratedAttribute]
public void set_Red(double value);
    [CompilerGeneratedAttribute]
public double get_Green();
    [CompilerGeneratedAttribute]
public void set_Green(double value);
    [CompilerGeneratedAttribute]
public double get_Blue();
    [CompilerGeneratedAttribute]
public void set_Blue(double value);
    [CompilerGeneratedAttribute]
public double get_Alpha();
    [CompilerGeneratedAttribute]
public void set_Alpha(double value);
    public static RGB Parse(string color);
    public string ToHex();
    public string ToCSS();
    public HSV ToHSV();
}
public class Radzen.Blazor.Rendering.SplineGenerator : object {
    private IList`1<PointWithTanget> CurveMonotone(IList`1<SplinePoint> points);
    public sealed virtual string Path(IEnumerable`1<Point> data);
}
public class Radzen.Blazor.Rendering.StepGenerator : object {
    public sealed virtual string Path(IEnumerable`1<Point> data);
}
public class Radzen.Blazor.Rendering.Text : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextAnchor>k__BackingField;
    [ParameterAttribute]
public string Class { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public Point Position { get; public set; }
    [ParameterAttribute]
public string TextAnchor { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public Point get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Point value);
    [CompilerGeneratedAttribute]
public string get_TextAnchor();
    [CompilerGeneratedAttribute]
public void set_TextAnchor(string value);
}
internal static class Radzen.Blazor.Rendering.TextMeasurer : object {
    private static IDictionary`2<string, FontData> fonts;
    private static TextMeasurer();
    public static double TextWidth(string text, double fontSize, string fontFamily);
}
public abstract class Radzen.Blazor.Rendering.Tick : ComponentBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string Stroke { get; public set; }
    [ParameterAttribute]
public double StrokeWidth { get; public set; }
    [ParameterAttribute]
public LineType LineType { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Radzen.Blazor.Rendering.ValueAxis : RadzenChartComponentBase {
    private double start;
    private double end;
    private double step;
    private double x1;
    private double x2;
    private double y1;
    private double y2;
    [CompilerGeneratedAttribute]
private AxisBase <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisBase <YAxis>k__BackingField;
    private AxisBase XAxis { get; private set; }
    private AxisBase YAxis { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private AxisBase get_XAxis();
    [CompilerGeneratedAttribute]
private void set_XAxis(AxisBase value);
    [CompilerGeneratedAttribute]
private AxisBase get_YAxis();
    [CompilerGeneratedAttribute]
private void set_YAxis(AxisBase value);
    protected virtual void OnParametersSet();
}
public class Radzen.Blazor.Rendering.ValueAxisTick : Tick {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class Radzen.Blazor.Rendering.ValueAxisTitle : RadzenChartComponentBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [ParameterAttribute]
public double X { get; public set; }
    [ParameterAttribute]
public double Y { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Radzen.Blazor.Rendering.WeekView : DropableViewBase {
    private ElementReference view;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinutesPerSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AppointmentData> <Appointments>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    private DateTime CurrentDate;
    private int currentAppointment;
    private IEnumerable`1<AppointmentData> currentAppointments;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public TimeSpan StartTime { get; public set; }
    [ParameterAttribute]
public TimeSpan EndTime { get; public set; }
    [ParameterAttribute]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
public string HeaderFormat { get; public set; }
    [ParameterAttribute]
public int MinutesPerSlot { get; public set; }
    [ParameterAttribute]
public IList`1<AppointmentData> Appointments { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TimeFormat();
    [CompilerGeneratedAttribute]
public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderFormat();
    [CompilerGeneratedAttribute]
public void set_HeaderFormat(string value);
    [CompilerGeneratedAttribute]
public int get_MinutesPerSlot();
    [CompilerGeneratedAttribute]
public void set_MinutesPerSlot(int value);
    [CompilerGeneratedAttribute]
public IList`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IList`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    private AppointmentData[] AppointmentsInSlot(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.WeekView/<OnSlotClick>d__39")]
private Task OnSlotClick(DateTime date);
    private IDictionary`2<string, object> Attributes(DateTime date);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.WeekView/<OnKeyPress>d__45")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(ElementReference __value);
}
public class Radzen.Blazor.Rendering.YearPlannerView : DropableViewBase {
    private ElementReference view;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    private DateTime CurrentDate;
    private int CurrentMonth;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    [ParameterAttribute]
public int MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    [CompilerGeneratedAttribute]
public int get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(int value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    private IDictionary`2<string, object> Attributes(DateTime start, string className, bool slotInMonth);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnSlotClick>d__31")]
private Task OnSlotClick(DateTime date);
    private double DetermineTop(HashSet`1<double> existingTops);
    private HashSet`1<double> ExistingTops(IDictionary`2<AppointmentData, double> tops, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnAppointmentClick>d__34")]
private Task OnAppointmentClick(AppointmentData data);
    private AppointmentData[] AppointmentsInRange(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnMonthClick>d__36")]
private Task OnMonthClick(DateTime monthStart);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnListClick>d__37")]
private Task OnListClick(DateTime date, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnListEventClick>d__38")]
private Task OnListEventClick(AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearPlannerView/<OnKeyPress>d__42")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(ElementReference __value);
}
public class Radzen.Blazor.Rendering.YearTimelineView : DropableViewBase {
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    private ElementReference view;
    private DateTime CurrentDate;
    private int CurrentMonth;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    [ParameterAttribute]
public int MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    [InjectAttribute]
private IJSRuntime JSRuntime { get; private set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    [CompilerGeneratedAttribute]
public int get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(int value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    private IDictionary`2<string, object> Attributes(DateTime start, string className, bool slotInMonth);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnSlotClick>d__30")]
private Task OnSlotClick(DateTime date);
    private double DetermineTop(HashSet`1<double> existingTops);
    private HashSet`1<double> ExistingTops(IDictionary`2<AppointmentData, double> tops, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnAppointmentClick>d__33")]
private Task OnAppointmentClick(AppointmentData data);
    private AppointmentData[] AppointmentsInRange(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnMonthClick>d__35")]
private Task OnMonthClick(DateTime monthStart);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnListClick>d__36")]
private Task OnListClick(DateTime date, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnListEventClick>d__37")]
private Task OnListEventClick(AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<OnKeyPress>d__42")]
private Task OnKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearTimelineView/<ScrollIntoView>d__43")]
private Task ScrollIntoView(string cssClasses);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(FocusEventArgs args);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(ElementReference __value);
}
public class Radzen.Blazor.Rendering.YearView : ComponentBase {
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Month <StartMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAppointmentsInSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoDayEventsText>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    private DateTime CurrentDate;
    private int CurrentMonth;
    private bool preventKeyPress;
    [CompilerGeneratedAttribute]
private DialogService <DialogService>k__BackingField;
    [ParameterAttribute]
public DateTime StartDate { get; public set; }
    [ParameterAttribute]
public DateTime EndDate { get; public set; }
    [ParameterAttribute]
public Month StartMonth { get; public set; }
    [ParameterAttribute]
public int MaxAppointmentsInSlot { get; public set; }
    [ParameterAttribute]
public string MoreText { get; public set; }
    [ParameterAttribute]
public string NoDayEventsText { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    [InjectAttribute]
private DialogService DialogService { get; private set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public Month get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Month value);
    [CompilerGeneratedAttribute]
public int get_MaxAppointmentsInSlot();
    [CompilerGeneratedAttribute]
public void set_MaxAppointmentsInSlot(int value);
    [CompilerGeneratedAttribute]
public string get_MoreText();
    [CompilerGeneratedAttribute]
public void set_MoreText(string value);
    [CompilerGeneratedAttribute]
public string get_NoDayEventsText();
    [CompilerGeneratedAttribute]
public void set_NoDayEventsText(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    private IDictionary`2<string, object> Attributes(DateTime start, string className);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearView/<OnAppointmentClick>d__34")]
private Task OnAppointmentClick(AppointmentData data);
    private AppointmentData[] AppointmentsInRange(DateTime start, DateTime end);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearView/<OnMonthClick>d__36")]
private Task OnMonthClick(DateTime monthStart);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearView/<OnListClick>d__37")]
private Task OnListClick(DateTime date, IEnumerable`1<AppointmentData> appointments);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearView/<OnListEventClick>d__38")]
private Task OnListEventClick(AppointmentData data);
    [AsyncStateMachineAttribute("Radzen.Blazor.Rendering.YearView/<OnKeyPress>d__42")]
private Task OnKeyPress(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
private DialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(DialogService value);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__0_0(KeyboardEventArgs args);
}
public abstract class Radzen.Blazor.ScaleBase : object {
    [CompilerGeneratedAttribute]
private ScaleRange <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private ScaleRange <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Round>k__BackingField;
    public ScaleRange Input { get; public set; }
    public ScaleRange Output { get; public set; }
    public double OutputSize { get; }
    public object Step { get; public set; }
    public double Padding { get; public set; }
    public bool Round { get; public set; }
    [CompilerGeneratedAttribute]
public ScaleRange get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(ScaleRange value);
    [CompilerGeneratedAttribute]
public ScaleRange get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(ScaleRange value);
    public double get_OutputSize();
    public abstract virtual ValueTuple`3<double, double, double> Ticks(int distance);
    public abstract virtual double Scale(double value, bool padding);
    public virtual Func`2<TItem, double> Compose(Func`2<TItem, double> selector);
    [CompilerGeneratedAttribute]
public object get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(object value);
    public virtual void Resize(object min, object max);
    public double NiceNumber(double range, bool round);
    [CompilerGeneratedAttribute]
public double get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(double value);
    public virtual void Fit(int distance);
    public abstract virtual object Value(double value);
    public abstract virtual string FormatTick(string format, object value);
    [CompilerGeneratedAttribute]
public bool get_Round();
    [CompilerGeneratedAttribute]
public void set_Round(bool value);
    public bool IsEqualTo(ScaleBase scale);
}
public class Radzen.Blazor.ScaleRange : object {
    [CompilerGeneratedAttribute]
private double <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private double <End>k__BackingField;
    public double Start { get; public set; }
    public double End { get; public set; }
    public double Size { get; }
    public double Mid { get; }
    [CompilerGeneratedAttribute]
public double get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(double value);
    [CompilerGeneratedAttribute]
public double get_End();
    [CompilerGeneratedAttribute]
public void set_End(double value);
    public static ScaleRange From(IEnumerable`1<T> data, Func`2<T, double> selector);
    public double Clamp(double value);
    public double get_Size();
    public double get_Mid();
    public void MergeWidth(ScaleRange range);
    public bool IsEqualTo(ScaleRange range);
}
public class Radzen.Blazor.SchedulerAppointmentMouseEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private ElementReference <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    public ElementReference Element { get; public set; }
    public TItem Data { get; public set; }
    [CompilerGeneratedAttribute]
public ElementReference get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(ElementReference value);
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
}
public abstract class Radzen.Blazor.SchedulerViewBase : ComponentBase {
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    public string Title { get; }
    public string Icon { get; }
    public string Text { get; public set; }
    [CascadingParameterAttribute]
public IScheduler Scheduler { get; public set; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Icon();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(IScheduler value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.Blazor.SchedulerViewBase/<SetParametersAsync>d__12")]
public virtual Task SetParametersAsync(ParameterView parameters);
    public abstract virtual DateTime Next();
    public abstract virtual DateTime Prev();
    public abstract virtual RenderFragment Render();
    public abstract virtual DateTime get_StartDate();
    public abstract virtual DateTime get_EndDate();
    [AsyncStateMachineAttribute("Radzen.Blazor.SchedulerViewBase/<OnAppointmentMove>d__20")]
public sealed virtual Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs data);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.Blazor.SeriesColorRange : object {
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public double Min { get; public set; }
    public double Max { get; public set; }
    public string Color { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
}
public class Radzen.Blazor.StepsCanChangeEventArgs : object {
    [CompilerGeneratedAttribute]
private int <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPrevented>k__BackingField;
    public int SelectedIndex { get; public set; }
    public int NewIndex { get; public set; }
    public bool IsDefaultPrevented { get; private set; }
    [CompilerGeneratedAttribute]
public int get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public int get_NewIndex();
    [CompilerGeneratedAttribute]
public void set_NewIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPrevented();
    [CompilerGeneratedAttribute]
private void set_IsDefaultPrevented(bool value);
    public void PreventDefault();
}
public enum Radzen.Blazor.TagName : Enum {
    public int value__;
    public static TagName Div;
    public static TagName Span;
    public static TagName P;
    public static TagName H1;
    public static TagName H2;
    public static TagName H3;
    public static TagName H4;
    public static TagName H5;
    public static TagName H6;
    public static TagName A;
    public static TagName Button;
    public static TagName Pre;
    public static TagName Auto;
}
public enum Radzen.Blazor.TextStyle : Enum {
    public int value__;
    public static TextStyle DisplayH1;
    public static TextStyle DisplayH2;
    public static TextStyle DisplayH3;
    public static TextStyle DisplayH4;
    public static TextStyle DisplayH5;
    public static TextStyle DisplayH6;
    public static TextStyle H1;
    public static TextStyle H2;
    public static TextStyle H3;
    public static TextStyle H4;
    public static TextStyle H5;
    public static TextStyle H6;
    public static TextStyle Subtitle1;
    public static TextStyle Subtitle2;
    public static TextStyle Body1;
    public static TextStyle Body2;
    public static TextStyle Button;
    public static TextStyle Caption;
    public static TextStyle Overline;
}
public class Radzen.Blazor.TickTemplateContext : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public object Value { get; public set; }
    public string Text { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
}
public abstract class Radzen.Blazor.ValidatorBase : RadzenComponent {
    [CompilerGeneratedAttribute]
private IRadzenForm <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Popup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    protected ValidationMessageStore messages;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CascadingParameterAttribute]
public IRadzenForm Form { get; public set; }
    [ParameterAttribute]
public string Component { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public bool Popup { get; public set; }
    public bool IsValid { get; protected set; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    private FieldIdentifier FieldIdentifier { get; private set; }
    [CompilerGeneratedAttribute]
public IRadzenForm get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(IRadzenForm value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Component();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Component(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_Popup();
    [CompilerGeneratedAttribute]
public void set_Popup(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
protected void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    [CompilerGeneratedAttribute]
private FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
private void set_FieldIdentifier(FieldIdentifier value);
    [AsyncStateMachineAttribute("Radzen.Blazor.ValidatorBase/<SetParametersAsync>d__28")]
public virtual Task SetParametersAsync(ParameterView parameters);
    private void Unsubscribe();
    private void RemoveFromEditContext();
    private void ValidateField(object sender, FieldChangedEventArgs args);
    private void ValidateModel(object sender, ValidationRequestedEventArgs args);
    protected virtual string GetComponentCssClass();
    protected abstract virtual bool Validate(IRadzenFormComponent component);
    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    public virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public enum Radzen.ButtonSize : Enum {
    public int value__;
    public static ButtonSize Medium;
    public static ButtonSize Large;
    public static ButtonSize Small;
    public static ButtonSize ExtraSmall;
}
public enum Radzen.ButtonStyle : Enum {
    public int value__;
    public static ButtonStyle Primary;
    public static ButtonStyle Secondary;
    public static ButtonStyle Light;
    public static ButtonStyle Base;
    public static ButtonStyle Dark;
    public static ButtonStyle Success;
    public static ButtonStyle Danger;
    public static ButtonStyle Warning;
    public static ButtonStyle Info;
}
public enum Radzen.ButtonType : Enum {
    public int value__;
    public static ButtonType Button;
    public static ButtonType Submit;
    public static ButtonType Reset;
}
public static class Radzen.Colors : object {
    public static string Primary;
    public static string PrimaryLighter;
    public static string PrimaryLight;
    public static string PrimaryDark;
    public static string PrimaryDarker;
    public static string Secondary;
    public static string SecondaryLighter;
    public static string SecondaryLight;
    public static string SecondaryDark;
    public static string SecondaryDarker;
    public static string Info;
    public static string InfoLighter;
    public static string InfoLight;
    public static string InfoDark;
    public static string InfoDarker;
    public static string Success;
    public static string SuccessLighter;
    public static string SuccessLight;
    public static string SuccessDark;
    public static string SuccessDarker;
    public static string Warning;
    public static string WarningLighter;
    public static string WarningLight;
    public static string WarningDark;
    public static string WarningDarker;
    public static string Danger;
    public static string DangerLighter;
    public static string DangerLight;
    public static string DangerDark;
    public static string DangerDarker;
    public static string White;
    public static string Black;
    public static string Base50;
    public static string Base100;
    public static string Base200;
    public static string Base300;
    public static string Base400;
    public static string Base500;
    public static string Base600;
    public static string Base700;
    public static string Base800;
    public static string Base900;
    public static string Series1;
    public static string Series2;
    public static string Series3;
    public static string Series4;
    public static string Series5;
    public static string Series6;
    public static string Series7;
    public static string Series8;
}
public class Radzen.ComplexPropertiesConverter`1 : JsonConverter`1<T> {
    private IEnumerable`1<string> complexProperties;
    public ComplexPropertiesConverter`1(IEnumerable`1<string> complexProperties);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
}
public class Radzen.CompositeFilterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FilterOperator> <FilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CompositeFilterDescriptor> <Filters>k__BackingField;
    public string Property { get; public set; }
    public object FilterValue { get; public set; }
    public Nullable`1<FilterOperator> FilterOperator { get; public set; }
    public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    public IEnumerable`1<CompositeFilterDescriptor> Filters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<FilterOperator> get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(Nullable`1<FilterOperator> value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CompositeFilterDescriptor> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IEnumerable`1<CompositeFilterDescriptor> value);
}
public class Radzen.ConfirmOptions : AlertOptions {
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    public string CancelButtonText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public void set_CancelButtonText(string value);
}
public class Radzen.ContextMenu : object {
    [CompilerGeneratedAttribute]
private ContextMenuOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseEventArgs <MouseEventArgs>k__BackingField;
    public ContextMenuOptions Options { get; public set; }
    public MouseEventArgs MouseEventArgs { get; public set; }
    [CompilerGeneratedAttribute]
public ContextMenuOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ContextMenuOptions value);
    [CompilerGeneratedAttribute]
public MouseEventArgs get_MouseEventArgs();
    [CompilerGeneratedAttribute]
public void set_MouseEventArgs(MouseEventArgs value);
}
public class Radzen.ContextMenuItem : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    public string Text { get; public set; }
    public object Value { get; public set; }
    public string Icon { get; public set; }
    public string IconColor { get; public set; }
    public string Image { get; public set; }
    public string ImageStyle { get; public set; }
    public bool Disabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_ImageStyle();
    [CompilerGeneratedAttribute]
public void set_ImageStyle(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
}
public class Radzen.ContextMenuOptions : object {
    [CompilerGeneratedAttribute]
private RenderFragment`1<ContextMenuService> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContextMenuItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<MenuItemEventArgs> <Click>k__BackingField;
    public RenderFragment`1<ContextMenuService> ChildContent { get; public set; }
    public IEnumerable`1<ContextMenuItem> Items { get; public set; }
    public Action`1<MenuItemEventArgs> Click { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment`1<ContextMenuService> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<ContextMenuService> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ContextMenuItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<ContextMenuItem> value);
    [CompilerGeneratedAttribute]
public Action`1<MenuItemEventArgs> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(Action`1<MenuItemEventArgs> value);
}
public class Radzen.ContextMenuService : object {
    [CompilerGeneratedAttribute]
private NavigationManager <navigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Action OnNavigate;
    [CompilerGeneratedAttribute]
private Action OnClose;
    [CompilerGeneratedAttribute]
private Action`2<MouseEventArgs, ContextMenuOptions> OnOpen;
    private NavigationManager navigationManager { get; private set; }
    public ContextMenuService(NavigationManager uriHelper);
    [CompilerGeneratedAttribute]
private NavigationManager get_navigationManager();
    [CompilerGeneratedAttribute]
private void set_navigationManager(NavigationManager value);
    private void UriHelper_OnLocationChanged(object sender, LocationChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_OnNavigate(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnNavigate(Action value);
    [CompilerGeneratedAttribute]
public void add_OnClose(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnClose(Action value);
    [CompilerGeneratedAttribute]
public void add_OnOpen(Action`2<MouseEventArgs, ContextMenuOptions> value);
    [CompilerGeneratedAttribute]
public void remove_OnOpen(Action`2<MouseEventArgs, ContextMenuOptions> value);
    public void Open(MouseEventArgs args, IEnumerable`1<ContextMenuItem> items, Action`1<MenuItemEventArgs> click);
    public void Open(MouseEventArgs args, RenderFragment`1<ContextMenuService> childContent);
    private void OpenTooltip(MouseEventArgs args, ContextMenuOptions options);
    public void Close();
    public sealed virtual void Dispose();
}
public static class Radzen.ConvertType : object {
    public static object ChangeType(object value, Type type);
}
public class Radzen.CookieThemeService : object {
    private CookieThemeServiceOptions options;
    private IJSRuntime jsRuntime;
    private ThemeService themeService;
    public CookieThemeService(IJSRuntime jsRuntime, ThemeService themeService, IOptions`1<CookieThemeServiceOptions> options);
    [AsyncStateMachineAttribute("Radzen.CookieThemeService/<InitializeAsync>d__4")]
private Task InitializeAsync();
    private void OnThemeChanged();
    [CompilerGeneratedAttribute]
private bool <InitializeAsync>b__4_1(ValueTuple`2<string, string> x);
}
[ExtensionAttribute]
public static class Radzen.CookieThemeServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRadzenCookieThemeService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRadzenCookieThemeService(IServiceCollection services, Action`1<CookieThemeServiceOptions> configure);
}
public class Radzen.CookieThemeServiceOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public string Name { get; public set; }
    public TimeSpan Duration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
}
public enum Radzen.CoordinateSystem : Enum {
    public int value__;
    public static CoordinateSystem Cartesian;
    public static CoordinateSystem Polar;
}
public class Radzen.DataBoundFormComponent`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCaseSensitivity <FilterCaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private StringFilterOperator <FilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<object> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<LoadDataArgs> <LoadData>k__BackingField;
    private IRadzenForm _form;
    private object _value;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    private IEnumerable _data;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <SearchTextChanged>k__BackingField;
    internal string searchText;
    protected IQueryable _view;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<T>> <ValueExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormFieldContext <FormFieldContext>k__BackingField;
    [ParameterAttribute]
public int TabIndex { get; public set; }
    [ParameterAttribute]
public FilterCaseSensitivity FilterCaseSensitivity { get; public set; }
    [ParameterAttribute]
public StringFilterOperator FilterOperator { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public EventCallback`1<object> Change { get; public set; }
    [ParameterAttribute]
public EventCallback`1<LoadDataArgs> LoadData { get; public set; }
    [CascadingParameterAttribute]
public IRadzenForm Form { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    public bool IsBound { get; }
    public bool HasValue { get; }
    [ParameterAttribute]
public string TextProperty { get; public set; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    protected IQueryable Query { get; }
    [ParameterAttribute]
public string SearchText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> SearchTextChanged { get; public set; }
    protected IEnumerable View { get; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    public FieldIdentifier FieldIdentifier { get; private set; }
    [ParameterAttribute]
public Expression`1<Func`1<T>> ValueExpression { get; public set; }
    [CascadingParameterAttribute]
public IFormFieldContext FormFieldContext { get; public set; }
    protected string CurrentPlaceholder { get; }
    [CompilerGeneratedAttribute]
public int get_TabIndex();
    [CompilerGeneratedAttribute]
public void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
public FilterCaseSensitivity get_FilterCaseSensitivity();
    [CompilerGeneratedAttribute]
public void set_FilterCaseSensitivity(FilterCaseSensitivity value);
    [CompilerGeneratedAttribute]
public StringFilterOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(StringFilterOperator value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<object> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<object> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<LoadDataArgs> get_LoadData();
    [CompilerGeneratedAttribute]
public void set_LoadData(EventCallback`1<LoadDataArgs> value);
    public IRadzenForm get_Form();
    public void set_Form(IRadzenForm value);
    public object get_Value();
    public void set_Value(object value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    public sealed virtual bool get_IsBound();
    public virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    public virtual IEnumerable get_Data();
    public virtual void set_Data(IEnumerable value);
    [AsyncStateMachineAttribute("Radzen.DataBoundFormComponent`1/<OnDataChanged>d__56")]
protected virtual Task OnDataChanged();
    protected virtual IQueryable get_Query();
    public string get_SearchText();
    public void set_SearchText(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_SearchTextChanged();
    [CompilerGeneratedAttribute]
public void set_SearchTextChanged(EventCallback`1<string> value);
    protected virtual IEnumerable get_View();
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
private void set_FieldIdentifier(FieldIdentifier value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<T>> get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression`1<Func`1<T>> value);
    [AsyncStateMachineAttribute("Radzen.DataBoundFormComponent`1/<SetParametersAsync>d__82")]
public virtual Task SetParametersAsync(ParameterView parameters);
    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    public virtual void Dispose();
    public virtual object GetValue();
    protected ClassList GetClassList(string className);
    [AsyncStateMachineAttribute("Radzen.DataBoundFormComponent`1/<FocusAsync>d__87")]
public virtual ValueTask FocusAsync();
    [CompilerGeneratedAttribute]
public IFormFieldContext get_FormFieldContext();
    [CompilerGeneratedAttribute]
public void set_FormFieldContext(IFormFieldContext value);
    protected string get_CurrentPlaceholder();
    public virtual Task OnContextMenu(MouseEventArgs args);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.DataGridCellMouseEventArgs`1 : MouseEventArgs {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    public T Data { get; internal set; }
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(T value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
}
public class Radzen.DataGridCellRenderEventArgs`1 : RowRenderEventArgs`1<T> {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
}
internal class Radzen.DataGridChildData`1 : object {
    [CompilerGeneratedAttribute]
private DataGridChildData`1<T> <ParentChildData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Data>k__BackingField;
    internal DataGridChildData`1<T> ParentChildData { get; internal set; }
    internal int Level { get; internal set; }
    internal IEnumerable`1<T> Data { get; internal set; }
    [CompilerGeneratedAttribute]
internal DataGridChildData`1<T> get_ParentChildData();
    [CompilerGeneratedAttribute]
internal void set_ParentChildData(DataGridChildData`1<T> value);
    [CompilerGeneratedAttribute]
internal int get_Level();
    [CompilerGeneratedAttribute]
internal void set_Level(int value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<T> get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(IEnumerable`1<T> value);
}
public class Radzen.DataGridColumnFilterEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SecondFilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <FilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <SecondFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public object FilterValue { get; internal set; }
    public object SecondFilterValue { get; internal set; }
    public FilterOperator FilterOperator { get; internal set; }
    public FilterOperator SecondFilterOperator { get; internal set; }
    public LogicalFilterOperator LogicalFilterOperator { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
internal void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public object get_SecondFilterValue();
    [CompilerGeneratedAttribute]
internal void set_SecondFilterValue(object value);
    [CompilerGeneratedAttribute]
public FilterOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
internal void set_FilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public FilterOperator get_SecondFilterOperator();
    [CompilerGeneratedAttribute]
internal void set_SecondFilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
internal void set_LogicalFilterOperator(LogicalFilterOperator value);
}
public class Radzen.DataGridColumnGroupEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupDescriptor <GroupDescriptor>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public GroupDescriptor GroupDescriptor { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public GroupDescriptor get_GroupDescriptor();
    [CompilerGeneratedAttribute]
internal void set_GroupDescriptor(GroupDescriptor value);
}
public class Radzen.DataGridColumnReorderedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewIndex>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public int OldIndex { get; internal set; }
    public int NewIndex { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public int get_OldIndex();
    [CompilerGeneratedAttribute]
internal void set_OldIndex(int value);
    [CompilerGeneratedAttribute]
public int get_NewIndex();
    [CompilerGeneratedAttribute]
internal void set_NewIndex(int value);
}
public class Radzen.DataGridColumnReorderingEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <ToColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public RadzenDataGridColumn`1<T> ToColumn { get; internal set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_ToColumn();
    [CompilerGeneratedAttribute]
internal void set_ToColumn(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Radzen.DataGridColumnResizedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public double Width { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
internal void set_Width(double value);
}
public class Radzen.DataGridColumnSettings : object {
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OrderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortOrder> <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SortIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <FilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SecondFilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <SecondFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomFilterExpression>k__BackingField;
    public string UniqueID { get; public set; }
    public string Property { get; public set; }
    public bool Visible { get; public set; }
    public string Width { get; public set; }
    public Nullable`1<int> OrderIndex { get; public set; }
    public Nullable`1<SortOrder> SortOrder { get; public set; }
    public Nullable`1<int> SortIndex { get; public set; }
    public object FilterValue { get; public set; }
    public FilterOperator FilterOperator { get; public set; }
    public object SecondFilterValue { get; public set; }
    public FilterOperator SecondFilterOperator { get; public set; }
    public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    public string CustomFilterExpression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(string value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OrderIndex();
    [CompilerGeneratedAttribute]
public void set_OrderIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(Nullable`1<SortOrder> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SortIndex();
    [CompilerGeneratedAttribute]
public void set_SortIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public FilterOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public object get_SecondFilterValue();
    [CompilerGeneratedAttribute]
public void set_SecondFilterValue(object value);
    [CompilerGeneratedAttribute]
public FilterOperator get_SecondFilterOperator();
    [CompilerGeneratedAttribute]
public void set_SecondFilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
    [CompilerGeneratedAttribute]
public string get_CustomFilterExpression();
    [CompilerGeneratedAttribute]
public void set_CustomFilterExpression(string value);
}
public class Radzen.DataGridColumnSortEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortOrder> <SortOrder>k__BackingField;
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    public Nullable`1<SortOrder> SortOrder { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
internal void set_SortOrder(Nullable`1<SortOrder> value);
}
public enum Radzen.DataGridEditMode : Enum {
    public int value__;
    public static DataGridEditMode Single;
    public static DataGridEditMode Multiple;
}
public enum Radzen.DataGridExpandMode : Enum {
    public int value__;
    public static DataGridExpandMode Single;
    public static DataGridExpandMode Multiple;
}
public enum Radzen.DataGridGridLines : Enum {
    public int value__;
    public static DataGridGridLines Default;
    public static DataGridGridLines Both;
    public static DataGridGridLines None;
    public static DataGridGridLines Horizontal;
    public static DataGridGridLines Vertical;
}
public class Radzen.DataGridLoadChildDataEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    public IEnumerable`1<T> Data { get; public set; }
    public T Item { get; internal set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
internal void set_Item(T value);
}
public class Radzen.DataGridLoadColumnFilterDataEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDataGridColumn`1<T> <Column>k__BackingField;
    public IEnumerable Data { get; public set; }
    public int Count { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Top { get; public set; }
    public string Filter { get; internal set; }
    public RadzenDataGridColumn`1<T> Column { get; internal set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
internal void set_Filter(string value);
    [CompilerGeneratedAttribute]
public RadzenDataGridColumn`1<T> get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(RadzenDataGridColumn`1<T> value);
}
public class Radzen.DataGridLoadSettingsEventArgs : object {
    [CompilerGeneratedAttribute]
private DataGridSettings <Settings>k__BackingField;
    public DataGridSettings Settings { get; public set; }
    [CompilerGeneratedAttribute]
public DataGridSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(DataGridSettings value);
}
public class Radzen.DataGridPickedColumnsChangedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<RadzenDataGridColumn`1<T>> <Columns>k__BackingField;
    public IEnumerable`1<RadzenDataGridColumn`1<T>> Columns { get; internal set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<RadzenDataGridColumn`1<T>> get_Columns();
    [CompilerGeneratedAttribute]
internal void set_Columns(IEnumerable`1<RadzenDataGridColumn`1<T>> value);
}
public class Radzen.DataGridRenderEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDataGrid`1<T> <Grid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstRender>k__BackingField;
    public RadzenDataGrid`1<T> Grid { get; internal set; }
    public bool FirstRender { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDataGrid`1<T> get_Grid();
    [CompilerGeneratedAttribute]
internal void set_Grid(RadzenDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_FirstRender();
    [CompilerGeneratedAttribute]
internal void set_FirstRender(bool value);
}
public class Radzen.DataGridRowMouseEventArgs`1 : MouseEventArgs {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; internal set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(T value);
}
public enum Radzen.DataGridSelectionMode : Enum {
    public int value__;
    public static DataGridSelectionMode Single;
    public static DataGridSelectionMode Multiple;
}
public class Radzen.DataGridSettings : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<DataGridColumnSettings> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GroupDescriptor> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CurrentPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    public IEnumerable`1<DataGridColumnSettings> Columns { get; public set; }
    public IEnumerable`1<GroupDescriptor> Groups { get; public set; }
    public Nullable`1<int> CurrentPage { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<DataGridColumnSettings> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<DataGridColumnSettings> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GroupDescriptor> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(IEnumerable`1<GroupDescriptor> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CurrentPage();
    [CompilerGeneratedAttribute]
public void set_CurrentPage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
}
public class Radzen.DateRenderEventArgs : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    public IDictionary`2<string, object> Attributes { get; private set; }
    public DateTime Date { get; internal set; }
    public bool Disabled { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
internal void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
}
public class Radzen.DateTimeConverterUsingDateTimeParse : JsonConverter`1<DateTime> {
    public virtual DateTime Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options);
}
internal class Radzen.Debouncer : object {
    private Timer timer;
    [CompilerGeneratedAttribute]
private DateTime <timerStarted>k__BackingField;
    private DateTime timerStarted { get; private set; }
    [CompilerGeneratedAttribute]
private DateTime get_timerStarted();
    [CompilerGeneratedAttribute]
private void set_timerStarted(DateTime value);
    public void Debounce(int interval, Func`1<Task> action);
    public void Throttle(int interval, Func`1<Task> action);
}
public enum Radzen.Density : Enum {
    public int value__;
    public static Density Default;
    public static Density Compact;
}
public class Radzen.Dialog : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogOptions <Options>k__BackingField;
    public string Title { get; public set; }
    public Type Type { get; public set; }
    public Dictionary`2<string, object> Parameters { get; public set; }
    public DialogOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public DialogOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(DialogOptions value);
}
public class Radzen.DialogOptions : DialogOptionsBase {
    [CompilerGeneratedAttribute]
private bool <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Size> <Resize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draggable>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Point> <Drag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<DialogService> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<DialogService> <TitleContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFocusFirstElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseDialogOnEsc>k__BackingField;
    public bool Resizable { get; public set; }
    public Action`1<Size> Resize { get; public set; }
    public bool Draggable { get; public set; }
    public Action`1<Point> Drag { get; public set; }
    public string Left { get; public set; }
    public string Top { get; public set; }
    public string Bottom { get; public set; }
    public RenderFragment`1<DialogService> ChildContent { get; public set; }
    public RenderFragment`1<DialogService> TitleContent { get; public set; }
    public bool AutoFocusFirstElement { get; public set; }
    public bool CloseDialogOnEsc { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Resizable();
    [CompilerGeneratedAttribute]
public void set_Resizable(bool value);
    [CompilerGeneratedAttribute]
public Action`1<Size> get_Resize();
    [CompilerGeneratedAttribute]
public void set_Resize(Action`1<Size> value);
    [CompilerGeneratedAttribute]
public bool get_Draggable();
    [CompilerGeneratedAttribute]
public void set_Draggable(bool value);
    [CompilerGeneratedAttribute]
public Action`1<Point> get_Drag();
    [CompilerGeneratedAttribute]
public void set_Drag(Action`1<Point> value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<DialogService> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<DialogService> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<DialogService> get_TitleContent();
    [CompilerGeneratedAttribute]
public void set_TitleContent(RenderFragment`1<DialogService> value);
    [CompilerGeneratedAttribute]
public bool get_AutoFocusFirstElement();
    [CompilerGeneratedAttribute]
public void set_AutoFocusFirstElement(bool value);
    [CompilerGeneratedAttribute]
public bool get_CloseDialogOnEsc();
    [CompilerGeneratedAttribute]
public void set_CloseDialogOnEsc(bool value);
}
public abstract class Radzen.DialogOptionsBase : object {
    [CompilerGeneratedAttribute]
private bool <ShowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowClose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseDialogOnOverlayClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WrapperCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CloseTabIndex>k__BackingField;
    public bool ShowTitle { get; public set; }
    public bool ShowClose { get; public set; }
    public string Width { get; public set; }
    public string Height { get; public set; }
    public string Style { get; public set; }
    public bool CloseDialogOnOverlayClick { get; public set; }
    public string CssClass { get; public set; }
    public string WrapperCssClass { get; public set; }
    public string ContentCssClass { get; public set; }
    public int CloseTabIndex { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowTitle();
    [CompilerGeneratedAttribute]
public void set_ShowTitle(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowClose();
    [CompilerGeneratedAttribute]
public void set_ShowClose(bool value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public bool get_CloseDialogOnOverlayClick();
    [CompilerGeneratedAttribute]
public void set_CloseDialogOnOverlayClick(bool value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_WrapperCssClass();
    [CompilerGeneratedAttribute]
public void set_WrapperCssClass(string value);
    [CompilerGeneratedAttribute]
public string get_ContentCssClass();
    [CompilerGeneratedAttribute]
public void set_ContentCssClass(string value);
    [CompilerGeneratedAttribute]
public int get_CloseTabIndex();
    [CompilerGeneratedAttribute]
public void set_CloseTabIndex(int value);
}
public enum Radzen.DialogPosition : Enum {
    public int value__;
    public static DialogPosition Right;
    public static DialogPosition Left;
    public static DialogPosition Top;
    public static DialogPosition Bottom;
}
public class Radzen.DialogService : object {
    private DotNetObjectReference`1<DialogService> reference;
    [CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<object> OnClose;
    [CompilerGeneratedAttribute]
private Action OnRefresh;
    [CompilerGeneratedAttribute]
private Action`4<string, Type, Dictionary`2<string, object>, DialogOptions> OnOpen;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<object> OnSideClose;
    [CompilerGeneratedAttribute]
private Action`3<Type, Dictionary`2<string, object>, SideDialogOptions> OnSideOpen;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<TaskCompletionSource`1<object>> tasks;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> _sideDialogTask;
    protected List`1<object> dialogs;
    internal DotNetObjectReference`1<DialogService> Reference { get; }
    private NavigationManager UriHelper { get; private set; }
    private IJSRuntime JSRuntime { get; private set; }
    public DialogService(NavigationManager uriHelper, IJSRuntime jsRuntime);
    internal DotNetObjectReference`1<DialogService> get_Reference();
    [CompilerGeneratedAttribute]
private NavigationManager get_UriHelper();
    [CompilerGeneratedAttribute]
private void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
private void set_JSRuntime(IJSRuntime value);
    private void UriHelper_OnLocationChanged(object sender, LocationChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_OnClose(Action`1<object> value);
    [CompilerGeneratedAttribute]
public void remove_OnClose(Action`1<object> value);
    [CompilerGeneratedAttribute]
public void add_OnRefresh(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnRefresh(Action value);
    [CompilerGeneratedAttribute]
public void add_OnOpen(Action`4<string, Type, Dictionary`2<string, object>, DialogOptions> value);
    [CompilerGeneratedAttribute]
public void remove_OnOpen(Action`4<string, Type, Dictionary`2<string, object>, DialogOptions> value);
    [CompilerGeneratedAttribute]
public void add_OnSideClose(Action`1<object> value);
    [CompilerGeneratedAttribute]
public void remove_OnSideClose(Action`1<object> value);
    [CompilerGeneratedAttribute]
public void add_OnSideOpen(Action`3<Type, Dictionary`2<string, object>, SideDialogOptions> value);
    [CompilerGeneratedAttribute]
public void remove_OnSideOpen(Action`3<Type, Dictionary`2<string, object>, SideDialogOptions> value);
    public virtual void Open(string title, Dictionary`2<string, object> parameters, DialogOptions options);
    public void Refresh();
    public virtual Task`1<object> OpenAsync(string title, Dictionary`2<string, object> parameters, DialogOptions options);
    public Task`1<object> OpenSideAsync(string title, Dictionary`2<string, object> parameters, SideDialogOptions options);
    public void CloseSide(object result);
    public virtual Task`1<object> OpenAsync(string title, RenderFragment`1<DialogService> childContent, DialogOptions options);
    public virtual Task`1<object> OpenAsync(RenderFragment`1<DialogService> titleContent, RenderFragment`1<DialogService> childContent, DialogOptions options);
    public virtual void Open(string title, RenderFragment`1<DialogService> childContent, DialogOptions options);
    private void OpenDialog(string title, Dictionary`2<string, object> parameters, DialogOptions options);
    [JSInvokableAttribute("DialogService.Close")]
public virtual void Close(object result);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Radzen.DialogService/<Confirm>d__42")]
public virtual Task`1<Nullable`1<bool>> Confirm(string message, string title, ConfirmOptions options);
    [AsyncStateMachineAttribute("Radzen.DialogService/<Alert>d__43")]
public virtual Task`1<Nullable`1<bool>> Alert(string message, string title, AlertOptions options);
}
public class Radzen.DropDownBase`1 : DataBoundFormComponent`1<T> {
    [CompilerGeneratedAttribute]
private int <VirtualizationOverscanCount>k__BackingField;
    internal Virtualize`1<object> virtualize;
    private List`1<object> virtualItems;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowVirtualization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    private HashSet`1<object> keys;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterAsYouType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClear>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSelectAll>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<object> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoveChipTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmptyAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<object> <SelectedItemChanged>k__BackingField;
    protected IList`1<object> selectedItems;
    protected object selectedItem;
    private IEnumerable _data;
    internal Func`2<object, object> valuePropertyGetter;
    internal Func`2<object, object> textPropertyGetter;
    internal Func`2<object, object> disabledPropertyGetter;
    [CompilerGeneratedAttribute]
private int <FilterDelay>k__BackingField;
    protected ElementReference search;
    protected Nullable`1<ElementReference> list;
    protected int selectedIndex;
    internal bool preventKeydown;
    private int itemIndex;
    private string previousKey;
    private bool firstRender;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    internal object internalValue;
    [ParameterAttribute]
public int VirtualizationOverscanCount { get; public set; }
    public Virtualize`1<object> Virtualize { get; }
    [ParameterAttribute]
public int Count { get; public set; }
    [ParameterAttribute]
public bool AllowVirtualization { get; public set; }
    [ParameterAttribute]
public int PageSize { get; public set; }
    public bool HasValue { get; }
    [ParameterAttribute]
public RenderFragment HeaderTemplate { get; public set; }
    [ParameterAttribute]
public bool AllowFiltering { get; public set; }
    [ParameterAttribute]
public bool FilterAsYouType { get; public set; }
    [ParameterAttribute]
public bool AllowClear { get; public set; }
    [ParameterAttribute]
public bool Multiple { get; public set; }
    [ParameterAttribute]
public bool AllowSelectAll { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<object> Template { get; public set; }
    [ParameterAttribute]
public string ValueProperty { get; public set; }
    [ParameterAttribute]
public string DisabledProperty { get; public set; }
    [ParameterAttribute]
public string RemoveChipTitle { get; public set; }
    [ParameterAttribute]
public string SearchAriaLabel { get; public set; }
    [ParameterAttribute]
public string EmptyAriaLabel { get; public set; }
    [ParameterAttribute]
public EventCallback`1<object> SelectedItemChanged { get; public set; }
    [ParameterAttribute]
public IEnumerable Data { get; public set; }
    protected string PopupID { get; }
    public string SearchID { get; }
    [ParameterAttribute]
public int FilterDelay { get; public set; }
    [ParameterAttribute]
public object SelectedItem { get; public set; }
    [ParameterAttribute]
public string Separator { get; public set; }
    protected IEnumerable`1<object> Items { get; }
    protected IEnumerable View { get; }
    [CompilerGeneratedAttribute]
public int get_VirtualizationOverscanCount();
    [CompilerGeneratedAttribute]
public void set_VirtualizationOverscanCount(int value);
    public Virtualize`1<object> get_Virtualize();
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<LoadItems>d__8")]
private ValueTask`1<ItemsProviderResult`1<object>> LoadItems(ItemsProviderRequest request);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public bool get_AllowVirtualization();
    [CompilerGeneratedAttribute]
public void set_AllowVirtualization(bool value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    internal bool IsVirtualizationAllowed();
    internal int GetVirtualizationOverscanCount();
    internal virtual RenderFragment RenderItems();
    public virtual bool get_HasValue();
    internal virtual void RenderItem(RenderTreeBuilder builder, object item);
    internal object GetKey(object item);
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public virtual bool get_AllowFiltering();
    [CompilerGeneratedAttribute]
public virtual void set_AllowFiltering(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_FilterAsYouType();
    [CompilerGeneratedAttribute]
public virtual void set_FilterAsYouType(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowClear();
    [CompilerGeneratedAttribute]
public void set_AllowClear(bool value);
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowSelectAll();
    [CompilerGeneratedAttribute]
public void set_AllowSelectAll(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<object> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<object> value);
    [CompilerGeneratedAttribute]
public string get_ValueProperty();
    [CompilerGeneratedAttribute]
public void set_ValueProperty(string value);
    [CompilerGeneratedAttribute]
public string get_DisabledProperty();
    [CompilerGeneratedAttribute]
public void set_DisabledProperty(string value);
    [CompilerGeneratedAttribute]
public string get_RemoveChipTitle();
    [CompilerGeneratedAttribute]
public void set_RemoveChipTitle(string value);
    [CompilerGeneratedAttribute]
public string get_SearchAriaLabel();
    [CompilerGeneratedAttribute]
public void set_SearchAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_EmptyAriaLabel();
    [CompilerGeneratedAttribute]
public void set_EmptyAriaLabel(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<object> get_SelectedItemChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedItemChanged(EventCallback`1<object> value);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<SelectAll>d__83")]
protected virtual Task SelectAll();
    internal bool IsAllSelected();
    public void Reset();
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<ClearAll>d__86")]
protected Task ClearAll();
    public virtual IEnumerable get_Data();
    public virtual void set_Data(IEnumerable value);
    protected virtual void OnParametersSet();
    private Func`2<object, object> GetGetter(string propertyName, Type type);
    public object GetItemOrValueFromProperty(object item, string property);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OnDataChanged>d__97")]
protected virtual Task OnDataChanged();
    protected string get_PopupID();
    public string get_SearchID();
    protected string OpenPopupScript();
    protected string OpenPopupScriptFromParent();
    [CompilerGeneratedAttribute]
public int get_FilterDelay();
    [CompilerGeneratedAttribute]
public void set_FilterDelay(int value);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OpenPopup>d__111")]
protected virtual Task OpenPopup(string key, bool isFilter, bool isFromClick);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<HandleKeyPress>d__113")]
protected virtual Task HandleKeyPress(KeyboardEventArgs args, bool isFilter, Nullable`1<bool> shouldSelectOnChange);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<ClosePopup>d__114")]
internal virtual Task ClosePopup(string key);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OnFilterKeyPress>d__117")]
protected virtual Task OnFilterKeyPress(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<DebounceFilter>d__118")]
private Task DebounceFilter();
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OnKeyPress>d__119")]
protected virtual Task OnKeyPress(KeyboardEventArgs args, Nullable`1<bool> shouldSelectOnChange);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OnSelectItem>d__120")]
protected virtual Task OnSelectItem(object item, bool isFromKey);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<OnFilter>d__121")]
protected virtual Task OnFilter(ChangeEventArgs args);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<GetLoadDataArgs>d__122")]
internal virtual Task`1<LoadDataArgs> GetLoadDataArgs();
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<SetParametersAsync>d__126")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual Task OnParametersSetAsync();
    protected void OnChange(ChangeEventArgs args);
    internal bool IsSelected(object item);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    protected virtual IEnumerable`1<object> get_Items();
    protected virtual IEnumerable get_View();
    private void SetSelectedIndexFromSelectedItem();
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<SelectItemInternal>d__142")]
internal Task SelectItemInternal(object item, bool raiseChange);
    [AsyncStateMachineAttribute("Radzen.DropDownBase`1/<SelectItem>d__144")]
public Task SelectItem(object item, bool raiseChange);
    public virtual object GetValue();
    internal void UpdateSelectedItems(object item);
    protected virtual void SelectItemFromValue(object value);
    internal bool IsItemSelectedByValue(object v);
    public virtual void Dispose();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderItems>b__23_0(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private RenderFragment <RenderItems>b__23_1(object context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <RenderItems>b__23_2(object c);
    [CompilerGeneratedAttribute]
private bool <SelectAll>b__83_0(object i);
    [CompilerGeneratedAttribute]
private bool <SelectAll>b__83_1(object i);
    [CompilerGeneratedAttribute]
private object <SelectAll>b__83_2(object i);
    [CompilerGeneratedAttribute]
private bool <IsAllSelected>b__84_0(object i);
    [CompilerGeneratedAttribute]
private bool <IsAllSelected>b__84_1(object i);
    [CompilerGeneratedAttribute]
private bool <IsAllSelected>b__84_2(object i);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
private void <DebounceFilter>b__118_0();
    [CompilerGeneratedAttribute]
private void <DebounceFilter>b__118_1();
    [CompilerGeneratedAttribute]
private void <DebounceFilter>b__118_2();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(ParameterView parameters);
    [CompilerGeneratedAttribute]
private object <OnParametersSetAsync>b__127_0(object i);
    [CompilerGeneratedAttribute]
private bool <SetSelectedIndexFromSelectedItem>b__141_1(<>f__AnonymousType2`2<object, int> itemWithIndex);
    [CompilerGeneratedAttribute]
private object <SelectItem>b__144_0(object i);
}
public class Radzen.DropDownBaseItemRenderEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    public object Item { get; internal set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
internal void set_Item(object value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
}
public class Radzen.DropDownItemRenderEventArgs`1 : DropDownBaseItemRenderEventArgs`1<TValue> {
    [CompilerGeneratedAttribute]
private RadzenDropDown`1<TValue> <DropDown>k__BackingField;
    public RadzenDropDown`1<TValue> DropDown { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDropDown`1<TValue> get_DropDown();
    [CompilerGeneratedAttribute]
internal void set_DropDown(RadzenDropDown`1<TValue> value);
}
public class Radzen.FileInfo : object {
    private IBrowserFile source;
    private string _name;
    private long _size;
    public string Name { get; public set; }
    public long Size { get; public set; }
    public IBrowserFile Source { get; }
    public DateTimeOffset LastModified { get; }
    public string ContentType { get; }
    public FileInfo(IBrowserFile source);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual long get_Size();
    public void set_Size(long value);
    public IBrowserFile get_Source();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual string get_ContentType();
    public sealed virtual Stream OpenReadStream(long maxAllowedSize, CancellationToken cancellationToken);
}
public enum Radzen.FilterCaseSensitivity : Enum {
    public int value__;
    public static FilterCaseSensitivity Default;
    public static FilterCaseSensitivity CaseInsensitive;
}
public class Radzen.FilterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <FilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SecondFilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <SecondFilterOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalFilterOperator <LogicalFilterOperator>k__BackingField;
    public string Property { get; public set; }
    public object FilterValue { get; public set; }
    public FilterOperator FilterOperator { get; public set; }
    public object SecondFilterValue { get; public set; }
    public FilterOperator SecondFilterOperator { get; public set; }
    public LogicalFilterOperator LogicalFilterOperator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public object get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(object value);
    [CompilerGeneratedAttribute]
public FilterOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public object get_SecondFilterValue();
    [CompilerGeneratedAttribute]
public void set_SecondFilterValue(object value);
    [CompilerGeneratedAttribute]
public FilterOperator get_SecondFilterOperator();
    [CompilerGeneratedAttribute]
public void set_SecondFilterOperator(FilterOperator value);
    [CompilerGeneratedAttribute]
public LogicalFilterOperator get_LogicalFilterOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalFilterOperator(LogicalFilterOperator value);
}
public enum Radzen.FilterMode : Enum {
    public int value__;
    public static FilterMode Simple;
    public static FilterMode SimpleWithMenu;
    public static FilterMode Advanced;
    public static FilterMode CheckBoxList;
}
public enum Radzen.FilterOperator : Enum {
    public int value__;
    public static FilterOperator Equals;
    public static FilterOperator NotEquals;
    public static FilterOperator LessThan;
    public static FilterOperator LessThanOrEquals;
    public static FilterOperator GreaterThan;
    public static FilterOperator GreaterThanOrEquals;
    public static FilterOperator Contains;
    public static FilterOperator StartsWith;
    public static FilterOperator EndsWith;
    public static FilterOperator DoesNotContain;
    public static FilterOperator In;
    public static FilterOperator NotIn;
    public static FilterOperator IsNull;
    public static FilterOperator IsEmpty;
    public static FilterOperator IsNotNull;
    public static FilterOperator IsNotEmpty;
    public static FilterOperator Custom;
}
public enum Radzen.FlexWrap : Enum {
    public int value__;
    public static FlexWrap NoWrap;
    public static FlexWrap Wrap;
    public static FlexWrap WrapReverse;
}
public class Radzen.FormComponent`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    private IRadzenForm _form;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    protected T _value;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<T>> <ValueExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormFieldContext <FormFieldContext>k__BackingField;
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public int TabIndex { get; public set; }
    [ParameterAttribute]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
public EditContext EditContext { get; public set; }
    [CascadingParameterAttribute]
public IRadzenForm Form { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    public bool HasValue { get; }
    public bool IsBound { get; }
    [ParameterAttribute]
public T Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> Change { get; public set; }
    public FieldIdentifier FieldIdentifier { get; private set; }
    [ParameterAttribute]
public Expression`1<Func`1<T>> ValueExpression { get; public set; }
    [CascadingParameterAttribute]
public IFormFieldContext FormFieldContext { get; public set; }
    protected string CurrentPlaceholder { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_TabIndex();
    [CompilerGeneratedAttribute]
public void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    public IRadzenForm get_Form();
    public void set_Form(IRadzenForm value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    public virtual bool get_HasValue();
    public sealed virtual bool get_IsBound();
    public virtual T get_Value();
    public virtual void set_Value(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
private void set_FieldIdentifier(FieldIdentifier value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<T>> get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression`1<Func`1<T>> value);
    public virtual Task SetParametersAsync(ParameterView parameters);
    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    public virtual void Dispose();
    public sealed virtual object GetValue();
    public virtual Task OnContextMenu(MouseEventArgs args);
    protected ClassList GetClassList(string className);
    [CompilerGeneratedAttribute]
public IFormFieldContext get_FormFieldContext();
    [CompilerGeneratedAttribute]
public void set_FormFieldContext(IFormFieldContext value);
    protected string get_CurrentPlaceholder();
    [AsyncStateMachineAttribute("Radzen.FormComponent`1/<FocusAsync>d__60")]
public virtual ValueTask FocusAsync();
}
public class Radzen.FormComponentWithAutoComplete`1 : FormComponent`1<T> {
    [CompilerGeneratedAttribute]
private AutoCompleteType <AutoCompleteType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAutoCompleteAttribute>k__BackingField;
    private object ariaAutoComplete;
    [CompilerGeneratedAttribute]
private string <DefaultAriaAutoCompleteAttribute>k__BackingField;
    [ParameterAttribute]
public AutoCompleteType AutoCompleteType { get; public set; }
    public string AutoCompleteAttribute { get; }
    public string DefaultAutoCompleteAttribute { get; public set; }
    public string DefaultAriaAutoCompleteAttribute { get; public set; }
    public string AriaAutoCompleteAttribute { get; }
    [CompilerGeneratedAttribute]
public virtual AutoCompleteType get_AutoCompleteType();
    [CompilerGeneratedAttribute]
public virtual void set_AutoCompleteType(AutoCompleteType value);
    public virtual string get_AutoCompleteAttribute();
    [CompilerGeneratedAttribute]
public virtual string get_DefaultAutoCompleteAttribute();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultAutoCompleteAttribute(string value);
    [AsyncStateMachineAttribute("Radzen.FormComponentWithAutoComplete`1/<SetParametersAsync>d__11")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultAriaAutoCompleteAttribute();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultAriaAutoCompleteAttribute(string value);
    public virtual string get_AriaAutoCompleteAttribute();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.FormInvalidSubmitEventArgs : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Errors>k__BackingField;
    public IEnumerable`1<string> Errors { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(IEnumerable`1<string> value);
}
public enum Radzen.FrozenColumnPosition : Enum {
    public int value__;
    public static FrozenColumnPosition Left;
    public static FrozenColumnPosition Right;
}
public class Radzen.GoogleMapClickEventArgs : object {
    [CompilerGeneratedAttribute]
private GoogleMapPosition <Position>k__BackingField;
    public GoogleMapPosition Position { get; public set; }
    [CompilerGeneratedAttribute]
public GoogleMapPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(GoogleMapPosition value);
}
public class Radzen.GoogleMapPosition : object {
    [CompilerGeneratedAttribute]
private double <Lat>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Lng>k__BackingField;
    public double Lat { get; public set; }
    public double Lng { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Lat();
    [CompilerGeneratedAttribute]
public void set_Lat(double value);
    [CompilerGeneratedAttribute]
public double get_Lng();
    [CompilerGeneratedAttribute]
public void set_Lng(double value);
    public sealed virtual bool Equals(GoogleMapPosition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Radzen.Group : object {
    [CompilerGeneratedAttribute]
private GroupResult <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupDescriptor <GroupDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public GroupResult Data { get; public set; }
    public GroupDescriptor GroupDescriptor { get; public set; }
    public int Level { get; public set; }
    [CompilerGeneratedAttribute]
public GroupResult get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(GroupResult value);
    [CompilerGeneratedAttribute]
public GroupDescriptor get_GroupDescriptor();
    [CompilerGeneratedAttribute]
public void set_GroupDescriptor(GroupDescriptor value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
}
public class Radzen.GroupDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortOrder> <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    public string Property { get; public set; }
    public Nullable`1<SortOrder> SortOrder { get; public set; }
    public string Title { get; public set; }
    public string FormatString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(Nullable`1<SortOrder> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    public string GetTitle();
}
public class Radzen.GroupRowRenderEventArgs : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Group <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstRender>k__BackingField;
    public IDictionary`2<string, object> Attributes { get; private set; }
    public Group Group { get; internal set; }
    public Nullable`1<bool> Expanded { get; public set; }
    public bool FirstRender { get; internal set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Group get_Group();
    [CompilerGeneratedAttribute]
internal void set_Group(Group value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_FirstRender();
    [CompilerGeneratedAttribute]
internal void set_FirstRender(bool value);
}
public enum Radzen.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign Left;
    public static HorizontalAlign Right;
    public static HorizontalAlign Center;
    public static HorizontalAlign Justify;
}
public static class Radzen.HtmlEditorCommands : object {
    public static string InsertHtml;
    public static string AlignCenter;
    public static string AlignLeft;
    public static string AlignRight;
    public static string Background;
    public static string Bold;
    public static string Color;
    public static string FontName;
    public static string FontSize;
    public static string FormatBlock;
    public static string Indent;
    public static string Italic;
    public static string Justify;
    public static string OrderedList;
    public static string Outdent;
    public static string Redo;
    public static string RemoveFormat;
    public static string StrikeThrough;
    public static string Subscript;
    public static string Superscript;
    public static string Underline;
    public static string Undo;
    public static string Unlink;
    public static string UnorderedList;
    private static HtmlEditorCommands();
}
public class Radzen.HtmlEditorExecuteEventArgs : object {
    [CompilerGeneratedAttribute]
private RadzenHtmlEditor <Editor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    public RadzenHtmlEditor Editor { get; public set; }
    public string CommandName { get; public set; }
    internal HtmlEditorExecuteEventArgs(RadzenHtmlEditor editor);
    [CompilerGeneratedAttribute]
public RadzenHtmlEditor get_Editor();
    [CompilerGeneratedAttribute]
public void set_Editor(RadzenHtmlEditor value);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
}
[FlagsAttribute]
public enum Radzen.HtmlEditorMode : Enum {
    public int value__;
    public static HtmlEditorMode Design;
    public static HtmlEditorMode Source;
}
public class Radzen.HtmlEditorPasteEventArgs : object {
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    public string Html { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
}
[ExtensionAttribute]
public static class Radzen.HttpResponseMessageExtensions : object {
    [AsyncStateMachineAttribute("Radzen.HttpResponseMessageExtensions/<ReadAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> ReadAsync(HttpResponseMessage response);
}
public enum Radzen.IconStyle : Enum {
    public int value__;
    public static IconStyle Primary;
    public static IconStyle Secondary;
    public static IconStyle Light;
    public static IconStyle Base;
    public static IconStyle Dark;
    public static IconStyle Success;
    public static IconStyle Danger;
    public static IconStyle Warning;
    public static IconStyle Info;
}
public interface Radzen.IRadzenForm {
    public abstract virtual void AddComponent(IRadzenFormComponent component);
    public abstract virtual void RemoveComponent(IRadzenFormComponent component);
    public abstract virtual IRadzenFormComponent FindComponent(string name);
}
public interface Radzen.IRadzenFormComponent {
    public bool IsBound { get; }
    public bool HasValue { get; }
    public string Name { get; public set; }
    public FieldIdentifier FieldIdentifier { get; }
    public abstract virtual bool get_IsBound();
    public abstract virtual bool get_HasValue();
    public abstract virtual object GetValue();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual FieldIdentifier get_FieldIdentifier();
    public abstract virtual ValueTask FocusAsync();
}
public interface Radzen.IRadzenFormValidator {
    public bool IsValid { get; }
    public string Component { get; public set; }
    public string Text { get; public set; }
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_Component();
    public abstract virtual void set_Component(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface Radzen.IRadzenSelectBar {
    public abstract virtual void AddItem(RadzenSelectBarItem item);
    public abstract virtual void RemoveItem(RadzenSelectBarItem item);
    public abstract virtual void Refresh();
}
public enum Radzen.JustifyContent : Enum {
    public int value__;
    public static JustifyContent Normal;
    public static JustifyContent Center;
    public static JustifyContent Start;
    public static JustifyContent End;
    public static JustifyContent Left;
    public static JustifyContent Right;
    public static JustifyContent SpaceBetween;
    public static JustifyContent SpaceAround;
    public static JustifyContent SpaceEvenly;
    public static JustifyContent Stretch;
}
public class Radzen.LegendClickEventArgs : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    public object Data { get; public set; }
    public string Title { get; public set; }
    public bool IsVisible { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
}
public enum Radzen.LinePosition : Enum {
    public int value__;
    public static LinePosition Center;
    public static LinePosition Alternate;
    public static LinePosition Start;
    public static LinePosition End;
    public static LinePosition Left;
    public static LinePosition Right;
    public static LinePosition Top;
    public static LinePosition Bottom;
}
public class Radzen.ListBoxItemRenderEventArgs`1 : DropDownBaseItemRenderEventArgs`1<TValue> {
    [CompilerGeneratedAttribute]
private RadzenListBox`1<TValue> <ListBox>k__BackingField;
    public RadzenListBox`1<TValue> ListBox { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenListBox`1<TValue> get_ListBox();
    [CompilerGeneratedAttribute]
internal void set_ListBox(RadzenListBox`1<TValue> value);
}
public class Radzen.LoadDataArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FilterDescriptor> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SortDescriptor> <Sorts>k__BackingField;
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Top { get; public set; }
    public string OrderBy { get; public set; }
    public string Filter { get; public set; }
    public IEnumerable`1<FilterDescriptor> Filters { get; public set; }
    public IEnumerable`1<SortDescriptor> Sorts { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FilterDescriptor> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IEnumerable`1<FilterDescriptor> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SortDescriptor> get_Sorts();
    [CompilerGeneratedAttribute]
public void set_Sorts(IEnumerable`1<SortDescriptor> value);
}
public enum Radzen.LogicalFilterOperator : Enum {
    public int value__;
    public static LogicalFilterOperator And;
    public static LogicalFilterOperator Or;
}
public class Radzen.LoginArgs : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberMe>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool RememberMe { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_RememberMe();
    [CompilerGeneratedAttribute]
public void set_RememberMe(bool value);
}
public class Radzen.MD5 : object {
    private static Int32[] s;
    private static UInt32[] K;
    private static MD5();
    public static UInt32 leftRotate(UInt32 x, int c);
    public static string Calculate(Byte[] input);
    private static string GetByteString(UInt32 x);
}
public enum Radzen.MenuItemDisplayStyle : Enum {
    public int value__;
    public static MenuItemDisplayStyle Text;
    public static MenuItemDisplayStyle Icon;
    public static MenuItemDisplayStyle IconAndText;
}
public class Radzen.MenuItemEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Text { get; internal set; }
    public object Value { get; internal set; }
    public string Path { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(string value);
}
public enum Radzen.Month : Enum {
    public int value__;
    public static Month January;
    public static Month February;
    public static Month March;
    public static Month April;
    public static Month May;
    public static Month June;
    public static Month July;
    public static Month August;
    public static Month September;
    public static Month October;
    public static Month November;
    public static Month December;
}
public class Radzen.NotificationMessage : object {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<NotificationMessage> <Click>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<NotificationMessage> <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<NotificationService> <DetailContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<NotificationService> <SummaryContent>k__BackingField;
    public Nullable`1<double> Duration { get; public set; }
    public NotificationSeverity Severity { get; public set; }
    public string Summary { get; public set; }
    public string Detail { get; public set; }
    public string Style { get; public set; }
    public Action`1<NotificationMessage> Click { get; public set; }
    public Action`1<NotificationMessage> Close { get; public set; }
    public bool CloseOnClick { get; public set; }
    public object Payload { get; public set; }
    public RenderFragment`1<NotificationService> DetailContent { get; public set; }
    public RenderFragment`1<NotificationService> SummaryContent { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(NotificationSeverity value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public Action`1<NotificationMessage> get_Click();
    [CompilerGeneratedAttribute]
public void set_Click(Action`1<NotificationMessage> value);
    [CompilerGeneratedAttribute]
public Action`1<NotificationMessage> get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(Action`1<NotificationMessage> value);
    [CompilerGeneratedAttribute]
public bool get_CloseOnClick();
    [CompilerGeneratedAttribute]
public void set_CloseOnClick(bool value);
    [CompilerGeneratedAttribute]
public object get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(object value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<NotificationService> get_DetailContent();
    [CompilerGeneratedAttribute]
public void set_DetailContent(RenderFragment`1<NotificationService> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<NotificationService> get_SummaryContent();
    [CompilerGeneratedAttribute]
public void set_SummaryContent(RenderFragment`1<NotificationService> value);
    public sealed virtual bool Equals(NotificationMessage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NotificationMessage message, NotificationMessage otherMessage);
    public static bool op_Inequality(NotificationMessage message, NotificationMessage otherMessage);
}
public class Radzen.NotificationService : object {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<NotificationMessage> <Messages>k__BackingField;
    public ObservableCollection`1<NotificationMessage> Messages { get; private set; }
    [CompilerGeneratedAttribute]
public ObservableCollection`1<NotificationMessage> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(ObservableCollection`1<NotificationMessage> value);
    public void Notify(NotificationMessage message);
    public void Notify(NotificationSeverity severity, string summary, string detail, double duration, Action`1<NotificationMessage> click, bool closeOnClick, object payload, Action`1<NotificationMessage> close);
}
public enum Radzen.NotificationSeverity : Enum {
    public int value__;
    public static NotificationSeverity Error;
    public static NotificationSeverity Info;
    public static NotificationSeverity Success;
    public static NotificationSeverity Warning;
}
public class Radzen.ODataEnumerable`1 : object {
    private IEnumerable`1<T> source;
    public ODataEnumerable`1(IEnumerable`1<T> source);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class Radzen.ODataExtensions : object {
    [ExtensionAttribute]
public static Uri GetODataUri(Uri uri, string filter, Nullable`1<int> top, Nullable`1<int> skip, string orderby, string expand, string select, string apply, Nullable`1<bool> count);
}
public static class Radzen.ODataJsonSerializer : object {
    private static bool IsComplex(Type type);
    private static bool IsEnumerable(Type type);
    public static string Serialize(TValue value, JsonSerializerOptions options);
}
public class Radzen.ODataServiceResult`1 : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Value>k__BackingField;
    [JsonPropertyNameAttribute("@odata.count")]
public int Count { get; public set; }
    public IEnumerable`1<T> Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IEnumerable`1<T> value);
}
public enum Radzen.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
}
public class Radzen.PagedDataBoundComponent`1 : RadzenComponent {
    [CompilerGeneratedAttribute]
private PagerPosition <PagerPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PagerAlwaysVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlign <PagerHorizontalAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private Density <Density>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPaging>k__BackingField;
    private int _PageSize;
    [CompilerGeneratedAttribute]
private int <PageNumbersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentPage>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<T> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <LoadingTemplate>k__BackingField;
    private IEnumerable`1<T> _data;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <PageSizeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageSizeText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPagingSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PagingSummaryFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTitleFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageAriaLabelFormat>k__BackingField;
    internal IQueryable`1<T> _view;
    [CompilerGeneratedAttribute]
private EventCallback`1<LoadDataArgs> <LoadData>k__BackingField;
    private bool firstRender;
    protected int skip;
    protected RadzenPager topPager;
    protected RadzenPager bottomPager;
    [CompilerGeneratedAttribute]
private EventCallback`1<PagerEventArgs> <Page>k__BackingField;
    internal Nullable`1<int> pageSize;
    [ParameterAttribute]
public PagerPosition PagerPosition { get; public set; }
    [ParameterAttribute]
public bool PagerAlwaysVisible { get; public set; }
    [ParameterAttribute]
public HorizontalAlign PagerHorizontalAlign { get; public set; }
    [ParameterAttribute]
public Density Density { get; public set; }
    [ParameterAttribute]
public bool AllowPaging { get; public set; }
    [ParameterAttribute]
public int PageSize { get; public set; }
    [ParameterAttribute]
public int PageNumbersCount { get; public set; }
    [ParameterAttribute]
public int Count { get; public set; }
    public int CurrentPage { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<T> Template { get; public set; }
    [ParameterAttribute]
public RenderFragment LoadingTemplate { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<T> Data { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<int> PageSizeOptions { get; public set; }
    [ParameterAttribute]
public string PageSizeText { get; public set; }
    [ParameterAttribute]
public bool ShowPagingSummary { get; public set; }
    [ParameterAttribute]
public string PagingSummaryFormat { get; public set; }
    [ParameterAttribute]
public string FirstPageTitle { get; public set; }
    [ParameterAttribute]
public string FirstPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PrevPageLabel { get; public set; }
    [ParameterAttribute]
public string PrevPageTitle { get; public set; }
    [ParameterAttribute]
public string PrevPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string LastPageTitle { get; public set; }
    [ParameterAttribute]
public string LastPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string NextPageLabel { get; public set; }
    [ParameterAttribute]
public string NextPageTitle { get; public set; }
    [ParameterAttribute]
public string NextPageAriaLabel { get; public set; }
    [ParameterAttribute]
public string PageTitleFormat { get; public set; }
    [ParameterAttribute]
public string PageAriaLabelFormat { get; public set; }
    public IQueryable`1<T> PagedView { get; }
    public IQueryable`1<T> View { get; }
    [ParameterAttribute]
public EventCallback`1<LoadDataArgs> LoadData { get; public set; }
    [ParameterAttribute]
public EventCallback`1<PagerEventArgs> Page { get; public set; }
    [CompilerGeneratedAttribute]
public PagerPosition get_PagerPosition();
    [CompilerGeneratedAttribute]
public void set_PagerPosition(PagerPosition value);
    [CompilerGeneratedAttribute]
public bool get_PagerAlwaysVisible();
    [CompilerGeneratedAttribute]
public void set_PagerAlwaysVisible(bool value);
    [CompilerGeneratedAttribute]
public HorizontalAlign get_PagerHorizontalAlign();
    [CompilerGeneratedAttribute]
public void set_PagerHorizontalAlign(HorizontalAlign value);
    [CompilerGeneratedAttribute]
public Density get_Density();
    [CompilerGeneratedAttribute]
public void set_Density(Density value);
    [CompilerGeneratedAttribute]
public bool get_AllowPaging();
    [CompilerGeneratedAttribute]
public void set_AllowPaging(bool value);
    public int get_PageSize();
    public void set_PageSize(int value);
    internal int GetPageSize();
    internal void SetPageSize(int value);
    [CompilerGeneratedAttribute]
public int get_PageNumbersCount();
    [CompilerGeneratedAttribute]
public void set_PageNumbersCount(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentPage();
    [CompilerGeneratedAttribute]
public void set_CurrentPage(int value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_LoadingTemplate();
    [CompilerGeneratedAttribute]
public void set_LoadingTemplate(RenderFragment value);
    public IEnumerable`1<T> get_Data();
    public void set_Data(IEnumerable`1<T> value);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public IEnumerable`1<int> get_PageSizeOptions();
    [CompilerGeneratedAttribute]
public void set_PageSizeOptions(IEnumerable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageSizeText();
    [CompilerGeneratedAttribute]
public void set_PageSizeText(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowPagingSummary();
    [CompilerGeneratedAttribute]
public void set_ShowPagingSummary(bool value);
    [CompilerGeneratedAttribute]
public string get_PagingSummaryFormat();
    [CompilerGeneratedAttribute]
public void set_PagingSummaryFormat(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPageTitle();
    [CompilerGeneratedAttribute]
public void set_FirstPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_FirstPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageLabel();
    [CompilerGeneratedAttribute]
public void set_PrevPageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageTitle();
    [CompilerGeneratedAttribute]
public void set_PrevPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PrevPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_PrevPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageTitle();
    [CompilerGeneratedAttribute]
public void set_LastPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_LastPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_LastPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageLabel();
    [CompilerGeneratedAttribute]
public void set_NextPageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageTitle();
    [CompilerGeneratedAttribute]
public void set_NextPageTitle(string value);
    [CompilerGeneratedAttribute]
public string get_NextPageAriaLabel();
    [CompilerGeneratedAttribute]
public void set_NextPageAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PageTitleFormat();
    [CompilerGeneratedAttribute]
public void set_PageTitleFormat(string value);
    [CompilerGeneratedAttribute]
public string get_PageAriaLabelFormat();
    [CompilerGeneratedAttribute]
public void set_PageAriaLabelFormat(string value);
    public virtual IQueryable`1<T> get_PagedView();
    public virtual IQueryable`1<T> get_View();
    [CompilerGeneratedAttribute]
public EventCallback`1<LoadDataArgs> get_LoadData();
    [CompilerGeneratedAttribute]
public void set_LoadData(EventCallback`1<LoadDataArgs> value);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<Reload>d__125")]
public virtual Task Reload();
    protected virtual void OnDataChanged();
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<SetParametersAsync>d__127")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<OnAfterRenderAsync>d__130")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<ReloadOnFirstRender>d__131")]
internal virtual Task ReloadOnFirstRender();
    [CompilerGeneratedAttribute]
public EventCallback`1<PagerEventArgs> get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(EventCallback`1<PagerEventArgs> value);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<OnPageChanged>d__139")]
protected Task OnPageChanged(PagerEventArgs args);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<OnPageSizeChanged>d__141")]
protected virtual Task OnPageSizeChanged(int value);
    protected void CalculatePager();
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<GoToPage>d__143")]
public Task GoToPage(int page, bool forceReload);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<FirstPage>d__144")]
public Task FirstPage(bool forceReload);
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<PrevPage>d__145")]
public Task PrevPage();
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<NextPage>d__146")]
public Task NextPage();
    [AsyncStateMachineAttribute("Radzen.PagedDataBoundComponent`1/<LastPage>d__147")]
public Task LastPage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
}
public class Radzen.PagerEventArgs : object {
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    public int Skip { get; public set; }
    public int Top { get; public set; }
    public int PageIndex { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(int value);
    [CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
}
[FlagsAttribute]
public enum Radzen.PagerPosition : Enum {
    public int value__;
    public static PagerPosition Top;
    public static PagerPosition Bottom;
    public static PagerPosition TopAndBottom;
}
[ExtensionAttribute]
public static class Radzen.ParameterViewExtensions : object {
    [ExtensionAttribute]
public static bool DidParameterChange(ParameterView parameters, string parameterName, T parameterValue);
}
public enum Radzen.PointSize : Enum {
    public int value__;
    public static PointSize ExtraSmall;
    public static PointSize Small;
    public static PointSize Medium;
    public static PointSize Large;
}
public enum Radzen.PointStyle : Enum {
    public int value__;
    public static PointStyle Primary;
    public static PointStyle Secondary;
    public static PointStyle Light;
    public static PointStyle Base;
    public static PointStyle Dark;
    public static PointStyle Success;
    public static PointStyle Danger;
    public static PointStyle Warning;
    public static PointStyle Info;
}
public enum Radzen.PopupRenderMode : Enum {
    public int value__;
    public static PopupRenderMode OnDemand;
    public static PopupRenderMode Initial;
}
public class Radzen.PreviewFileInfo : FileInfo {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public enum Radzen.ProgressBarCircularSize : Enum {
    public int value__;
    public static ProgressBarCircularSize Medium;
    public static ProgressBarCircularSize Large;
    public static ProgressBarCircularSize Small;
    public static ProgressBarCircularSize ExtraSmall;
}
public enum Radzen.ProgressBarMode : Enum {
    public int value__;
    public static ProgressBarMode Determinate;
    public static ProgressBarMode Indeterminate;
}
public enum Radzen.ProgressBarStyle : Enum {
    public int value__;
    public static ProgressBarStyle Primary;
    public static ProgressBarStyle Secondary;
    public static ProgressBarStyle Light;
    public static ProgressBarStyle Base;
    public static ProgressBarStyle Dark;
    public static ProgressBarStyle Success;
    public static ProgressBarStyle Danger;
    public static ProgressBarStyle Warning;
    public static ProgressBarStyle Info;
}
[ExtensionAttribute]
public static class Radzen.PropertyAccess : object {
    public static Func`2<TItem, TValue> Getter(string propertyName, Type type);
    public static bool IsDate(Type source);
    public static bool IsDateOnly(Type source);
    public static object DateOnlyFromDateTime(DateTime source);
    public static Type GetElementType(Type type);
    public static string GetProperty(string property);
    public static object GetValue(object value, string path);
    public static Func`2<object, T> Getter(object data, string propertyName);
    public static bool TryGetItemOrValueFromProperty(object item, string property, T& result);
    public static object GetItemOrValueFromProperty(object item, string property);
    public static bool IsNumeric(Type source);
    public static bool IsEnum(Type source);
    public static bool IsNullableEnum(Type source);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    [ExtensionAttribute]
public static string ReplaceFirst(string text, string search, string replace);
    public static Type GetPropertyType(Type type, string property);
    private static Type GetPropertyTypeIncludeInterface(Type type, string property);
    public static string GetDynamicPropertyExpression(string name, Type type);
}
public class Radzen.Query : object {
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FilterDescriptor> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SortDescriptor> <Sorts>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <FilterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    public string Filter { get; public set; }
    public IEnumerable`1<FilterDescriptor> Filters { get; public set; }
    public IEnumerable`1<SortDescriptor> Sorts { get; public set; }
    public Object[] FilterParameters { get; public set; }
    public string OrderBy { get; public set; }
    public string Expand { get; public set; }
    public string Select { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Top { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FilterDescriptor> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IEnumerable`1<FilterDescriptor> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SortDescriptor> get_Sorts();
    [CompilerGeneratedAttribute]
public void set_Sorts(IEnumerable`1<SortDescriptor> value);
    [CompilerGeneratedAttribute]
public Object[] get_FilterParameters();
    [CompilerGeneratedAttribute]
public void set_FilterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public string get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(string value);
    [CompilerGeneratedAttribute]
public string get_Select();
    [CompilerGeneratedAttribute]
public void set_Select(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    public string ToUrl(string url);
}
[ExtensionAttribute]
public static class Radzen.QueryableExtension : object {
    internal static IDictionary`2<string, string> FilterOperators;
    internal static IDictionary`2<FilterOperator, string> LinqFilterOperators;
    internal static IDictionary`2<FilterOperator, string> ODataFilterOperators;
    private static QueryableExtension();
    public static IList ToList(IQueryable query);
    [ExtensionAttribute]
public static string ToFilterString(IEnumerable`1<RadzenDataGridColumn`1<T>> columns);
    [ExtensionAttribute]
public static string ToFilterString(RadzenDataFilter`1<T> dataFilter);
    private static string CompositeFilterToFilterString(IEnumerable`1<CompositeFilterDescriptor> filters, RadzenDataFilter`1<T> Datafilter, LogicalFilterOperator filterOperator);
    private static string GetColumnFilter(RadzenDataFilter`1<T> dataFilter, CompositeFilterDescriptor column, bool caseSensitive);
    private static string GetColumnFilter(RadzenDataGridColumn`1<T> column, string value, bool second);
    internal static string GetColumnODataFilter(RadzenDataGridColumn`1<T> column, object filterValue, FilterOperator columnFilterOperator);
    [ExtensionAttribute]
public static string ToODataFilterString(IEnumerable`1<RadzenDataGridColumn`1<T>> columns);
    public static bool IsEnumerable(Type type);
    [ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, IEnumerable`1<RadzenDataGridColumn`1<T>> columns);
    [ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, RadzenDataFilter`1<T> dataFilter);
    private static void AddWhereExpression(Func`2<CompositeFilterDescriptor, bool> canFilter, CompositeFilterDescriptor filter, List`1& filterExpressions, List`1& filterValues, Int32& index, RadzenDataFilter`1<T> dataFilter);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, string property, string value, StringFilterOperator op, FilterCaseSensitivity cs);
    [ExtensionAttribute]
public static string ToODataFilterString(RadzenDataFilter`1<T> dataFilter);
    private static void AddODataExpression(Func`2<CompositeFilterDescriptor, bool> canFilter, CompositeFilterDescriptor filter, List`1& filterExpressions, RadzenDataFilter`1<T> dataFilter);
    [ExtensionAttribute]
public static ODataEnumerable`1<T> AsODataEnumerable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectManyRecursive(IEnumerable`1<T> source, Func`2<T, IEnumerable`1<T>> selector);
    private static List`1<RadzenDataGridColumn`1<T>> GetFilterableColumns(IEnumerable`1<RadzenDataGridColumn`1<T>> columns);
}
public class Radzen.QueryStringThemeService : object {
    private NavigationManager navigationManager;
    private ThemeService themeService;
    private IDisposable registration;
    private QueryStringThemeServiceOptions options;
    private PropertyInfo hasAttachedJSRuntimeProperty;
    public QueryStringThemeService(NavigationManager navigationManager, ThemeService themeService, IOptions`1<QueryStringThemeServiceOptions> options);
    private bool RequiresChange(ValueTuple`3<string, Nullable`1<bool>, Nullable`1<bool>> state);
    private ValueTask OnLocationChanging(LocationChangingContext context);
    private ValueTuple`3<string, Nullable`1<bool>, Nullable`1<bool>> GetStateFromQueryString(string uri);
    private string GetUriWithStateQueryParameters(string uri);
    private void OnThemeChanged();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Radzen.QueryStringThemeServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRadzenQueryStringThemeService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRadzenQueryStringThemeService(IServiceCollection services, Action`1<QueryStringThemeServiceOptions> configure);
}
public class Radzen.QueryStringThemeServiceOptions : object {
    [CompilerGeneratedAttribute]
private string <ThemeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WcagParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RightToLeftParameter>k__BackingField;
    public string ThemeParameter { get; public set; }
    public string WcagParameter { get; public set; }
    public string RightToLeftParameter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ThemeParameter();
    [CompilerGeneratedAttribute]
public void set_ThemeParameter(string value);
    [CompilerGeneratedAttribute]
public string get_WcagParameter();
    [CompilerGeneratedAttribute]
public void set_WcagParameter(string value);
    [CompilerGeneratedAttribute]
public string get_RightToLeftParameter();
    [CompilerGeneratedAttribute]
public void set_RightToLeftParameter(string value);
}
public class Radzen.RadzenComponent : ComponentBase {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReference <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<ElementReference> <MouseEnter>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<ElementReference> <MouseLeave>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <ContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <DefaultCulture>k__BackingField;
    private CultureInfo culture;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    private Debouncer debouncer;
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private IJSRuntime <JSRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJSRuntimeAvailable>k__BackingField;
    private bool visibleChanged;
    private bool firstRender;
    private DotNetObjectReference`1<RadzenComponent> reference;
    internal bool disposed;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> Attributes { get; public set; }
    public ElementReference Element { get; protected internal set; }
    [ParameterAttribute]
public EventCallback`1<ElementReference> MouseEnter { get; public set; }
    [ParameterAttribute]
public EventCallback`1<ElementReference> MouseLeave { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> ContextMenu { get; public set; }
    [ParameterAttribute]
public CultureInfo Culture { get; public set; }
    [CascadingParameterAttribute]
public CultureInfo DefaultCulture { get; public set; }
    [ParameterAttribute]
public string Style { get; public set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    public string UniqueID { get; public set; }
    [InjectAttribute]
protected IJSRuntime JSRuntime { get; protected set; }
    protected bool IsJSRuntimeAvailable { get; protected set; }
    protected DotNetObjectReference`1<RadzenComponent> Reference { get; }
    protected IDictionary`2<string, string> CurrentStyle { get; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ElementReference get_Element();
    [CompilerGeneratedAttribute]
protected internal void set_Element(ElementReference value);
    [CompilerGeneratedAttribute]
public EventCallback`1<ElementReference> get_MouseEnter();
    [CompilerGeneratedAttribute]
public void set_MouseEnter(EventCallback`1<ElementReference> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<ElementReference> get_MouseLeave();
    [CompilerGeneratedAttribute]
public void set_MouseLeave(EventCallback`1<ElementReference> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_ContextMenu();
    [CompilerGeneratedAttribute]
public void set_ContextMenu(EventCallback`1<MouseEventArgs> value);
    public sealed virtual CultureInfo get_Culture();
    public sealed virtual void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public CultureInfo get_DefaultCulture();
    [CompilerGeneratedAttribute]
public void set_DefaultCulture(CultureInfo value);
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<OnMouseEnter>d__28")]
public Task OnMouseEnter();
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<OnMouseLeave>d__29")]
public Task OnMouseLeave();
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<OnContextMenu>d__30")]
public virtual Task OnContextMenu(MouseEventArgs args);
    [CompilerGeneratedAttribute]
public virtual string get_Style();
    [CompilerGeneratedAttribute]
public virtual void set_Style(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public virtual void set_Visible(bool value);
    protected string GetCssClass();
    protected virtual string GetId();
    protected virtual string GetComponentCssClass();
    protected void Debounce(Func`1<Task> action, int milliseconds);
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(string value);
    [CompilerGeneratedAttribute]
protected IJSRuntime get_JSRuntime();
    [CompilerGeneratedAttribute]
protected void set_JSRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
protected bool get_IsJSRuntimeAvailable();
    [CompilerGeneratedAttribute]
protected void set_IsJSRuntimeAvailable(bool value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<SetParametersAsync>d__59")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected DotNetObjectReference`1<RadzenComponent> get_Reference();
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<OnAfterRenderAsync>d__63")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<RaiseContextMenu>d__64")]
[JSInvokableAttribute("RadzenComponent.RaiseContextMenu")]
public Task RaiseContextMenu(MouseEventArgs e);
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<RaiseMouseEnter>d__65")]
[JSInvokableAttribute("RadzenComponent.RaiseMouseEnter")]
public Task RaiseMouseEnter();
    [AsyncStateMachineAttribute("Radzen.RadzenComponent/<RaiseMouseLeave>d__66")]
[JSInvokableAttribute("RadzenComponent.RaiseMouseLeave")]
public Task RaiseMouseLeave();
    public virtual void Dispose();
    protected IDictionary`2<string, string> get_CurrentStyle();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
}
public class Radzen.RadzenComponentActivator : object {
    private Dictionary`2<Type, Type> replacedTypes;
    public void Override();
    public void Override(Type original, Type override);
    public sealed virtual IComponent CreateInstance(Type componentType);
}
public class Radzen.RadzenComponentWithChildren : RadzenComponent {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
}
public class Radzen.RadzenDropZoneItemEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDropZone`1<TItem> <FromZone>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenDropZone`1<TItem> <ToZone>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <ToItem>k__BackingField;
    public RadzenDropZone`1<TItem> FromZone { get; internal set; }
    public RadzenDropZone`1<TItem> ToZone { get; internal set; }
    public TItem Item { get; internal set; }
    public TItem ToItem { get; internal set; }
    [CompilerGeneratedAttribute]
public RadzenDropZone`1<TItem> get_FromZone();
    [CompilerGeneratedAttribute]
internal void set_FromZone(RadzenDropZone`1<TItem> value);
    [CompilerGeneratedAttribute]
public RadzenDropZone`1<TItem> get_ToZone();
    [CompilerGeneratedAttribute]
internal void set_ToZone(RadzenDropZone`1<TItem> value);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
internal void set_Item(TItem value);
    [CompilerGeneratedAttribute]
public TItem get_ToItem();
    [CompilerGeneratedAttribute]
internal void set_ToItem(TItem value);
}
public class Radzen.RadzenDropZoneItemRenderEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private RadzenDropZone`1<TItem> <Zone>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    public RadzenDropZone`1<TItem> Zone { get; internal set; }
    public TItem Item { get; internal set; }
    [ParameterAttribute]
public bool Visible { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    [CompilerGeneratedAttribute]
public RadzenDropZone`1<TItem> get_Zone();
    [CompilerGeneratedAttribute]
internal void set_Zone(RadzenDropZone`1<TItem> value);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
internal void set_Item(TItem value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
}
public class Radzen.RadzenFlexComponent : RadzenComponentWithChildren {
    [CompilerGeneratedAttribute]
private JustifyContent <JustifyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignItems <AlignItems>k__BackingField;
    [ParameterAttribute]
public JustifyContent JustifyContent { get; public set; }
    [ParameterAttribute]
public AlignItems AlignItems { get; public set; }
    [CompilerGeneratedAttribute]
public JustifyContent get_JustifyContent();
    [CompilerGeneratedAttribute]
public void set_JustifyContent(JustifyContent value);
    [CompilerGeneratedAttribute]
public AlignItems get_AlignItems();
    [CompilerGeneratedAttribute]
public void set_AlignItems(AlignItems value);
    internal string GetFlexCSSClass(Enum v);
    internal string ToDashCase(string value);
}
public class Radzen.RadzenSplitterEventArgs : object {
    [CompilerGeneratedAttribute]
private int <PaneIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private RadzenSplitterPane <Pane>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public int PaneIndex { get; public set; }
    public RadzenSplitterPane Pane { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PaneIndex();
    [CompilerGeneratedAttribute]
public void set_PaneIndex(int value);
    [CompilerGeneratedAttribute]
public RadzenSplitterPane get_Pane();
    [CompilerGeneratedAttribute]
public void set_Pane(RadzenSplitterPane value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Radzen.RadzenSplitterResizeEventArgs : RadzenSplitterEventArgs {
    [CompilerGeneratedAttribute]
private double <NewSize>k__BackingField;
    public double NewSize { get; public set; }
    [CompilerGeneratedAttribute]
public double get_NewSize();
    [CompilerGeneratedAttribute]
public void set_NewSize(double value);
}
public class Radzen.RowRenderEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expandable>k__BackingField;
    public IDictionary`2<string, object> Attributes { get; private set; }
    public T Data { get; internal set; }
    public bool Expandable { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(T value);
    [CompilerGeneratedAttribute]
public bool get_Expandable();
    [CompilerGeneratedAttribute]
public void set_Expandable(bool value);
}
public class Radzen.SchedulerAppointmentMoveEventArgs : object {
    [CompilerGeneratedAttribute]
private AppointmentData <Appointment>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeSpan>k__BackingField;
    public AppointmentData Appointment { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    [CompilerGeneratedAttribute]
public AppointmentData get_Appointment();
    [CompilerGeneratedAttribute]
public void set_Appointment(AppointmentData value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeSpan();
    [CompilerGeneratedAttribute]
public void set_TimeSpan(TimeSpan value);
}
public class Radzen.SchedulerAppointmentRenderEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TItem Data { get; public set; }
    public IDictionary`2<string, object> Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, object> value);
}
public class Radzen.SchedulerAppointmentSelectEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TItem Data { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
}
public class Radzen.SchedulerLoadDataEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
}
public class Radzen.SchedulerMonthSelectEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <MonthStart>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchedulerView <View>k__BackingField;
    public DateTime MonthStart { get; public set; }
    public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    public ISchedulerView View { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_MonthStart();
    [CompilerGeneratedAttribute]
public void set_MonthStart(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public ISchedulerView get_View();
    [CompilerGeneratedAttribute]
public void set_View(ISchedulerView value);
}
public class Radzen.SchedulerMoreSelectEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchedulerView <View>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPrevented>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    public ISchedulerView View { get; public set; }
    public bool IsDefaultPrevented { get; private set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public ISchedulerView get_View();
    [CompilerGeneratedAttribute]
public void set_View(ISchedulerView value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPrevented();
    [CompilerGeneratedAttribute]
private void set_IsDefaultPrevented(bool value);
    public void PreventDefault();
}
public class Radzen.SchedulerSlotRenderEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchedulerView <View>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public IDictionary`2<string, object> Attributes { get; public set; }
    public ISchedulerView View { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ISchedulerView get_View();
    [CompilerGeneratedAttribute]
public void set_View(ISchedulerView value);
}
public class Radzen.SchedulerSlotSelectEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AppointmentData> <Appointments>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchedulerView <View>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPrevented>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public IEnumerable`1<AppointmentData> Appointments { get; public set; }
    public ISchedulerView View { get; public set; }
    public bool IsDefaultPrevented { get; private set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AppointmentData> get_Appointments();
    [CompilerGeneratedAttribute]
public void set_Appointments(IEnumerable`1<AppointmentData> value);
    [CompilerGeneratedAttribute]
public ISchedulerView get_View();
    [CompilerGeneratedAttribute]
public void set_View(ISchedulerView value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPrevented();
    [CompilerGeneratedAttribute]
private void set_IsDefaultPrevented(bool value);
    public void PreventDefault();
}
public class Radzen.SchedulerTodaySelectEventArgs : object {
    [CompilerGeneratedAttribute]
private DateTime <Today>k__BackingField;
    public DateTime Today { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Today();
    [CompilerGeneratedAttribute]
public void set_Today(DateTime value);
}
public enum Radzen.SecurityCodeType : Enum {
    public int value__;
    public static SecurityCodeType String;
    public static SecurityCodeType Numeric;
    public static SecurityCodeType Password;
}
public class Radzen.SeriesClickEventArgs : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private SeriesPoint <Point>k__BackingField;
    public object Data { get; public set; }
    public object Value { get; public set; }
    public object Category { get; public set; }
    public string Title { get; public set; }
    public SeriesPoint Point { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public object get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(object value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public SeriesPoint get_Point();
    [CompilerGeneratedAttribute]
public void set_Point(SeriesPoint value);
}
public class Radzen.SeriesPoint : object {
    [CompilerGeneratedAttribute]
private double <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Category { get; public set; }
    public double Value { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
}
[ExtensionAttribute]
public static class Radzen.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRadzenComponents(IServiceCollection services);
}
public enum Radzen.Shade : Enum {
    public int value__;
    public static Shade Lighter;
    public static Shade Light;
    public static Shade Default;
    public static Shade Dark;
    public static Shade Darker;
}
public class Radzen.SideDialogOptions : DialogOptionsBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFocusFirstElement>k__BackingField;
    public string Title { get; public set; }
    public DialogPosition Position { get; public set; }
    public bool ShowMask { get; public set; }
    public bool AutoFocusFirstElement { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public DialogPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(DialogPosition value);
    [CompilerGeneratedAttribute]
public bool get_ShowMask();
    [CompilerGeneratedAttribute]
public void set_ShowMask(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoFocusFirstElement();
    [CompilerGeneratedAttribute]
public void set_AutoFocusFirstElement(bool value);
}
public class Radzen.SortDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortOrder> <SortOrder>k__BackingField;
    public string Property { get; public set; }
    public Nullable`1<SortOrder> SortOrder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(Nullable`1<SortOrder> value);
}
public enum Radzen.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public enum Radzen.StringFilterOperator : Enum {
    public int value__;
    public static StringFilterOperator Contains;
    public static StringFilterOperator StartsWith;
    public static StringFilterOperator EndsWith;
}
public enum Radzen.TabPosition : Enum {
    public int value__;
    public static TabPosition Top;
    public static TabPosition TopRight;
    public static TabPosition Bottom;
    public static TabPosition BottomRight;
    public static TabPosition Left;
    public static TabPosition Right;
}
public enum Radzen.TabRenderMode : Enum {
    public int value__;
    public static TabRenderMode Server;
    public static TabRenderMode Client;
}
public enum Radzen.TextAlign : Enum {
    public int value__;
    public static TextAlign Left;
    public static TextAlign Right;
    public static TextAlign Center;
    public static TextAlign Justify;
    public static TextAlign JustifyAll;
    public static TextAlign Start;
    public static TextAlign End;
}
public class Radzen.Theme : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectionText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CardRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeriesA>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeriesB>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeriesC>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Premium>k__BackingField;
    public string Text { get; public set; }
    public string Value { get; public set; }
    public string Primary { get; public set; }
    public string Secondary { get; public set; }
    public string Base { get; public set; }
    public string Content { get; public set; }
    public string TitleText { get; public set; }
    public string ContentText { get; public set; }
    public string Selection { get; public set; }
    public string SelectionText { get; public set; }
    public string ButtonRadius { get; public set; }
    public string CardRadius { get; public set; }
    public string SeriesA { get; public set; }
    public string SeriesB { get; public set; }
    public string SeriesC { get; public set; }
    public bool Premium { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(string value);
    [CompilerGeneratedAttribute]
public string get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_TitleText();
    [CompilerGeneratedAttribute]
public void set_TitleText(string value);
    [CompilerGeneratedAttribute]
public string get_ContentText();
    [CompilerGeneratedAttribute]
public void set_ContentText(string value);
    [CompilerGeneratedAttribute]
public string get_Selection();
    [CompilerGeneratedAttribute]
public void set_Selection(string value);
    [CompilerGeneratedAttribute]
public string get_SelectionText();
    [CompilerGeneratedAttribute]
public void set_SelectionText(string value);
    [CompilerGeneratedAttribute]
public string get_ButtonRadius();
    [CompilerGeneratedAttribute]
public void set_ButtonRadius(string value);
    [CompilerGeneratedAttribute]
public string get_CardRadius();
    [CompilerGeneratedAttribute]
public void set_CardRadius(string value);
    [CompilerGeneratedAttribute]
public string get_SeriesA();
    [CompilerGeneratedAttribute]
public void set_SeriesA(string value);
    [CompilerGeneratedAttribute]
public string get_SeriesB();
    [CompilerGeneratedAttribute]
public void set_SeriesB(string value);
    [CompilerGeneratedAttribute]
public string get_SeriesC();
    [CompilerGeneratedAttribute]
public void set_SeriesC(string value);
    [CompilerGeneratedAttribute]
public bool get_Premium();
    [CompilerGeneratedAttribute]
public void set_Premium(bool value);
}
public class Radzen.ThemeOptions : object {
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Wcag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggerChange>k__BackingField;
    public string Theme { get; public set; }
    public Nullable`1<bool> Wcag { get; public set; }
    public Nullable`1<bool> RightToLeft { get; public set; }
    public bool TriggerChange { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Wcag();
    [CompilerGeneratedAttribute]
public void set_Wcag(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_TriggerChange();
    [CompilerGeneratedAttribute]
public void set_TriggerChange(bool value);
}
public static class Radzen.Themes : object {
    public static Theme[] All;
    public static IEnumerable`1<Theme> Free { get; }
    public static IEnumerable`1<Theme> Premium { get; }
    private static Themes();
    public static IEnumerable`1<Theme> get_Free();
    public static IEnumerable`1<Theme> get_Premium();
}
public class Radzen.ThemeService : object {
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Wcag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Action ThemeChanged;
    public string Theme { get; private set; }
    public Nullable`1<bool> Wcag { get; private set; }
    public Nullable`1<bool> RightToLeft { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
private void set_Theme(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Wcag();
    [CompilerGeneratedAttribute]
private void set_Wcag(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RightToLeft();
    [CompilerGeneratedAttribute]
private void set_RightToLeft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public void add_ThemeChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_ThemeChanged(Action value);
    public void SetTheme(string theme, bool triggerChange);
    public void SetTheme(ThemeOptions options);
    public void SetWcag(bool wcag);
    public void SetRightToLeft(bool rightToLeft);
}
public class Radzen.Tooltip : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TooltipOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReference <Element>k__BackingField;
    public Type Type { get; public set; }
    public TooltipOptions Options { get; public set; }
    public ElementReference Element { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public TooltipOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(TooltipOptions value);
    [CompilerGeneratedAttribute]
public ElementReference get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(ElementReference value);
}
public class Radzen.TooltipOptions : object {
    [CompilerGeneratedAttribute]
private TooltipPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseTooltipOnDocumentClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<TooltipService> <ChildContent>k__BackingField;
    public TooltipPosition Position { get; public set; }
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<int> Delay { get; public set; }
    public bool CloseTooltipOnDocumentClick { get; public set; }
    public string Style { get; public set; }
    public string CssClass { get; public set; }
    public string Text { get; public set; }
    public RenderFragment`1<TooltipService> ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public TooltipPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(TooltipPosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_CloseTooltipOnDocumentClick();
    [CompilerGeneratedAttribute]
public void set_CloseTooltipOnDocumentClick(bool value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TooltipService> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<TooltipService> value);
}
public enum Radzen.TooltipPosition : Enum {
    public int value__;
    public static TooltipPosition Left;
    public static TooltipPosition Top;
    public static TooltipPosition Right;
    public static TooltipPosition Bottom;
}
public class Radzen.TooltipService : object {
    [CompilerGeneratedAttribute]
private NavigationManager <navigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Action OnNavigate;
    [CompilerGeneratedAttribute]
private Action OnClose;
    [CompilerGeneratedAttribute]
private Action`3<ElementReference, Type, TooltipOptions> OnOpen;
    private NavigationManager navigationManager { get; private set; }
    public TooltipService(NavigationManager uriHelper);
    [CompilerGeneratedAttribute]
private NavigationManager get_navigationManager();
    [CompilerGeneratedAttribute]
private void set_navigationManager(NavigationManager value);
    private void UriHelper_OnLocationChanged(object sender, LocationChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_OnNavigate(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnNavigate(Action value);
    [CompilerGeneratedAttribute]
public void add_OnClose(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnClose(Action value);
    [CompilerGeneratedAttribute]
public void add_OnOpen(Action`3<ElementReference, Type, TooltipOptions> value);
    [CompilerGeneratedAttribute]
public void remove_OnOpen(Action`3<ElementReference, Type, TooltipOptions> value);
    public void Open(ElementReference element, RenderFragment`1<TooltipService> childContent, TooltipOptions o);
    public void Open(ElementReference element, string text, TooltipOptions o);
    public void OpenOnTheTop(ElementReference element, string text, TooltipOptions o);
    public void OpenOnTheBottom(ElementReference element, string text, TooltipOptions o);
    public void OpenOnTheLeft(ElementReference element, string text, TooltipOptions o);
    public void OpenOnTheRight(ElementReference element, string text, TooltipOptions o);
    private void OpenTooltip(ElementReference element, TooltipOptions options);
    public void Close();
    public sealed virtual void Dispose();
}
public class Radzen.TreeEventArgs : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Text { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Radzen.TreeExpandEventArgs : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeItemSettings <Children>k__BackingField;
    public object Value { get; public set; }
    public string Text { get; public set; }
    public TreeItemSettings Children { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public TreeItemSettings get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(TreeItemSettings value);
}
public class Radzen.TreeItemContextMenuEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Text { get; internal set; }
    public object Value { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
}
public class Radzen.TreeItemRenderEventArgs : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    private bool _checkedSet;
    private Nullable`1<bool> _checked;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    public IDictionary`2<string, object> Attributes { get; private set; }
    public Nullable`1<bool> Checked { get; public set; }
    public object Value { get; internal set; }
    public IEnumerable Data { get; internal set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    internal bool CheckedSet();
    public Nullable`1<bool> get_Checked();
    public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(IEnumerable value);
}
public class Radzen.TreeItemSettings : object {
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <HasChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RadzenTreeItem> <Template>k__BackingField;
    public IEnumerable Data { get; public set; }
    public Func`2<object, string> Text { get; public set; }
    public Func`2<object, bool> Checkable { get; public set; }
    public string TextProperty { get; public set; }
    public string CheckableProperty { get; public set; }
    public Func`2<object, bool> HasChildren { get; public set; }
    public Func`2<object, bool> Expanded { get; public set; }
    public Func`2<object, bool> Selected { get; public set; }
    public RenderFragment`1<RadzenTreeItem> Template { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IEnumerable value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public string get_TextProperty();
    [CompilerGeneratedAttribute]
public void set_TextProperty(string value);
    [CompilerGeneratedAttribute]
public string get_CheckableProperty();
    [CompilerGeneratedAttribute]
public void set_CheckableProperty(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_HasChildren();
    [CompilerGeneratedAttribute]
public void set_HasChildren(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RadzenTreeItem> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(RenderFragment`1<RadzenTreeItem> value);
}
public class Radzen.UploadChangeEventArgs : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileInfo> <Files>k__BackingField;
    public IEnumerable`1<FileInfo> Files { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<FileInfo> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<FileInfo> value);
}
public class Radzen.UploadCompleteEventArgs : object {
    [CompilerGeneratedAttribute]
private JsonDocument <JsonResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    public JsonDocument JsonResponse { get; public set; }
    public string RawResponse { get; public set; }
    public bool Cancelled { get; public set; }
    [CompilerGeneratedAttribute]
public JsonDocument get_JsonResponse();
    [CompilerGeneratedAttribute]
public void set_JsonResponse(JsonDocument value);
    [CompilerGeneratedAttribute]
public string get_RawResponse();
    [CompilerGeneratedAttribute]
public void set_RawResponse(string value);
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
public void set_Cancelled(bool value);
}
public class Radzen.UploadErrorEventArgs : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class Radzen.UploadProgressArgs : object {
    [CompilerGeneratedAttribute]
private long <Loaded>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileInfo> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public long Loaded { get; public set; }
    public long Total { get; public set; }
    public int Progress { get; public set; }
    public IEnumerable`1<FileInfo> Files { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Loaded();
    [CompilerGeneratedAttribute]
public void set_Loaded(long value);
    [CompilerGeneratedAttribute]
public long get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(long value);
    [CompilerGeneratedAttribute]
public int get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FileInfo> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<FileInfo> value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public enum Radzen.Variant : Enum {
    public int value__;
    public static Variant Filled;
    public static Variant Flat;
    public static Variant Text;
    public static Variant Outlined;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
