[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class RamlToOpenApiConverter.Builders.IncludeNodeDeserializerBuilder : object {
    [NullableContextAttribute("1")]
public static IDeserializer Build(string directoryName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RamlToOpenApiConverter.Constants : object {
    public static string IncludeTag;
    public static string IsTag;
    public static string Traits;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class RamlToOpenApiConverter.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static string Get(IDictionary`2<object, object> source, object key);
    [ExtensionAttribute]
public static T Get(IDictionary`2<object, object> source, object key);
    [ExtensionAttribute]
public static IDictionary`2<object, object> GetAsDictionary(IDictionary`2<object, object> source, object key);
    [ExtensionAttribute]
public static void Replace(IDictionary`2<object, object> source, IDictionary`2<object, object> newValue, object key);
    [ExtensionAttribute]
public static ICollection`1<object> GetAsCollection(IDictionary`2<object, object> source, object key);
    [ExtensionAttribute]
public static string GetAsString(IDictionary`2<object, object> source, object key);
    private static T ChangeTypeEx(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RamlToOpenApiConverter.RamlConverter : object {
    private IDictionary`2<object, object> _types;
    private IDictionary`2<object, object> _uses;
    private IDeserializer _deserializer;
    private OpenApiDocument _doc;
    [NullableContextAttribute("2")]
private OpenApiComponents MapComponents(IDictionary`2<object, object> types);
    private OpenApiSchema MapSchema(IDictionary`2<object, object> properties, ICollection`1<object> required);
    private IDictionary`2<string, OpenApiSchema> MapProperties(IDictionary`2<object, object> properties, ICollection`1<object> required);
    private IDictionary`2<object, object> ReplaceUses(IDictionary`2<object, object> source, IDictionary`2<object, object> uses);
    private static IDictionary`2<object, object> ReplaceIs(IDictionary`2<object, object> source, IDictionary`2<object, object> uses);
    public string Convert(string inputPath, OpenApiSpecVersion specVersion, OpenApiFormat format);
    public void ConvertToFile(string inputPath, string outputPath, OpenApiSpecVersion specVersion, OpenApiFormat format);
    public OpenApiDocument ConvertToOpenApiDocument(string inputPath);
    private OpenApiInfo MapInfo(IDictionary`2<object, object> o);
    private IList`1<OpenApiParameter> MapParameters(IDictionary`2<object, object> values);
    private IList`1<OpenApiParameter> MapParameters(IDictionary`2<object, object> parameters, ParameterLocation parameterLocation);
    private OpenApiSchema MapParameterOrPropertyDetailsToSchema(IDictionary`2<object, object> details);
    private OpenApiPaths MapPaths(IDictionary`2<object, object> o, IDictionary`2<object, object> uses);
    private ICollection`1<ValueTuple`2<OpenApiPathItem, string>> MapPathItems(string parent, IList`1<OpenApiParameter> parentParameters, IDictionary`2<object, object> values, IDictionary`2<object, object> uses);
    private OpenApiOperation MapOperation(IDictionary`2<object, object> values);
    [NullableContextAttribute("2")]
private OpenApiResponses MapResponses(IDictionary`2<object, object> values);
    [NullableContextAttribute("2")]
private OpenApiRequestBody MapRequest(IDictionary`2<object, object> values);
    private IDictionary`2<string, OpenApiMediaType> MapContents(IDictionary`2<object, object> values);
    private static IOpenApiAny MapExample(string exampleAsJson);
    private OpenApiSchema MapMediaTypeSchema(string value);
    private OpenApiSchema CreateDummyOpenApiReferenceSchema(string referenceId, string type);
    private bool TryMapOperationType(string value, OperationType& operationType);
    private IList`1<OpenApiServer> MapServers(IDictionary`2<object, object> items);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ConvertToOpenApiDocument>b__11_0(KeyValuePair`2<object, object> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ConvertToOpenApiDocument>b__11_1(KeyValuePair`2<object, object> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ConvertToOpenApiDocument>b__11_2(KeyValuePair`2<object, object> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private OpenApiSchema <MapMediaTypeSchema>b__23_0(string o);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RamlToOpenApiConverter.Yaml.IncludeRef : Dictionary`2<object, object> {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RamlToOpenApiConverter.Yaml.YamlIncludeNodeDeserializer : object {
    private static Regex JsonExtensionRegex;
    private static Regex RamlExtensionRegex;
    private YamlIncludeNodeDeserializerOptions _options;
    public YamlIncludeNodeDeserializer(YamlIncludeNodeDeserializerOptions options);
    private static YamlIncludeNodeDeserializer();
    private sealed virtual override bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, Object& value);
    private static object ReadIncludedFile(string includePath, Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RamlToOpenApiConverter.Yaml.YamlIncludeNodeDeserializerOptions : object {
    [CompilerGeneratedAttribute]
private string <DirectoryName>k__BackingField;
    public string DirectoryName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DirectoryName();
    [CompilerGeneratedAttribute]
public void set_DirectoryName(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
