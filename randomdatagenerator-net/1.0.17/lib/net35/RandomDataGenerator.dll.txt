[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class RandomDataGenerator.Compatibility.Monitor : object {
    [NullableContextAttribute("1")]
public static void Enter(object obj, Boolean& lockTaken);
}
internal static class RandomDataGenerator.Compatibility.PlatformHelper : object {
    public static int ProcessorCount { get; }
    public static int get_ProcessorCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RandomDataGenerator.Compatibility.Volatile : object {
    public static T Read(T& location);
    public static void Write(T& location, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.CreditCardValidator.BrandInfo : object {
    [CompilerGeneratedAttribute]
private List`1<Rule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrandName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipLuhn>k__BackingField;
    public List`1<Rule> Rules { get; public set; }
    public string BrandName { get; public set; }
    public bool SkipLuhn { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Rule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<Rule> value);
    [CompilerGeneratedAttribute]
public string get_BrandName();
    [CompilerGeneratedAttribute]
public void set_BrandName(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipLuhn();
    [CompilerGeneratedAttribute]
public void set_SkipLuhn(bool value);
}
public enum RandomDataGenerator.CreditCardValidator.CardIssuer : Enum {
    public int value__;
    public static CardIssuer Any;
    public static CardIssuer AmericanExpress;
    public static CardIssuer ChinaUnionPay;
    public static CardIssuer Dankort;
    public static CardIssuer DinersClub;
    public static CardIssuer Discover;
    public static CardIssuer Hipercard;
    public static CardIssuer JCB;
    public static CardIssuer Laser;
    public static CardIssuer Maestro;
    public static CardIssuer MasterCard;
    public static CardIssuer RuPay;
    public static CardIssuer Switch;
    public static CardIssuer Visa;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RandomDataGenerator.CreditCardValidator.CreditCardData : object {
    public static IDictionary`2<CardIssuer, BrandInfo> BrandsData;
    private static CreditCardData();
    private static void LoadData();
    private static IEnumerable`1<string> GenerateRange(int start, int end);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RandomDataGenerator.CreditCardValidator.Luhn : object {
    private static Func`2<char, int> CharToInt;
    private static Func`2<int, bool> IsEven;
    private static Func`2<int, int> DoubleDigit;
    private static Luhn();
    public static string CreateCheckDigit(string number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.CreditCardValidator.Rule : object {
    [CompilerGeneratedAttribute]
private List`1<int> <Lengths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Prefixes>k__BackingField;
    public List`1<int> Lengths { get; public set; }
    public List`1<string> Prefixes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<int> get_Lengths();
    [CompilerGeneratedAttribute]
public void set_Lengths(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Prefixes();
    [CompilerGeneratedAttribute]
public void set_Prefixes(List`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RandomDataGenerator.CreditCardValidator.ValidationHelper : object {
    public static bool IsAValidNumber(string number);
    internal static List`1<Rule> GetRulesByLength(CardIssuer cardIssuer, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Data.ListData : object {
    private static char Tab;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <LastNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <MaleNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FemaleNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CityNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CountryNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Directions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <StreetTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TopLevelDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBAN> <IBANs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBAN> <BBANs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <LoremIpsum>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <LoremIpsumWords>k__BackingField;
    public IEnumerable`1<string> LastNames { get; }
    public IEnumerable`1<string> MaleNames { get; }
    public IEnumerable`1<string> FemaleNames { get; }
    public IEnumerable`1<string> CityNames { get; }
    public IEnumerable`1<string> CountryNames { get; }
    public IEnumerable`1<string> Directions { get; }
    public IEnumerable`1<string> StreetTypes { get; }
    public IEnumerable`1<string> TopLevelDomains { get; }
    public IEnumerable`1<IBAN> IBANs { get; }
    public IEnumerable`1<IBAN> BBANs { get; }
    public IEnumerable`1<string> LoremIpsum { get; }
    public IEnumerable`1<string> LoremIpsumWords { get; }
    public static ListData Instance { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_LastNames();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_MaleNames();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_FemaleNames();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_CityNames();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_CountryNames();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Directions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_StreetTypes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TopLevelDomains();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IBAN> get_IBANs();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IBAN> get_BBANs();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_LoremIpsum();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_LoremIpsumWords();
    public static ListData get_Instance();
    private static Stream GetResourceAsStream(string resourceName);
    private static IEnumerable`1<string> GetResourceAsLines(string fileName);
    private static IEnumerable`1<T> GetResourceAsItems(string fileName, Func`2<String[], T> convert);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Data.Models.IBAN : ValueType {
    [CompilerGeneratedAttribute]
private string <CountryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Xeger <Generator>k__BackingField;
    public string CountryName { get; public set; }
    public string CountryCode { get; public set; }
    public Xeger Generator { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CountryName();
    [CompilerGeneratedAttribute]
public void set_CountryName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CountryCode();
    [CompilerGeneratedAttribute]
public void set_CountryCode(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Xeger get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(Xeger value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RandomDataGenerator.Data.TheNaughtyStrings : object {
    public static IList`1<string> All;
    public static IList`1<string> ReservedStrings;
    public static IList`1<string> NumericStrings;
    public static IList`1<string> SpecialCharacters;
    public static IList`1<string> UnicodeSymbols;
    public static IList`1<string> UnicodeSubscriptSuperscriptAccents;
    public static IList`1<string> QuotationMarks;
    public static IList`1<string> TwoByteCharacters;
    public static IList`1<string> Stringswhichcontaintwobyteletters;
    public static IList`1<string> SpecialUnicodeCharactersUnion;
    public static IList`1<string> Changinglengthwhenlowercased;
    public static IList`1<string> JapaneseEmoticons;
    public static IList`1<string> Emoji;
    public static IList`1<string> UnicodeNumbers;
    public static IList`1<string> RightToLeftStrings;
    public static IList`1<string> OghamText;
    public static IList`1<string> TrickUnicode;
    public static IList`1<string> ZalgoText;
    public static IList`1<string> UnicodeUpsidedown;
    public static IList`1<string> Unicodefont;
    public static IList`1<string> ScriptInjection;
    public static IList`1<string> SQLInjection;
    public static IList`1<string> ServerCodeInjection;
    public static IList`1<string> CommandInjectionRuby;
    public static IList`1<string> UnwantedInterpolation;
    public static IList`1<string> FileInclusion;
    public static IList`1<string> KnownCVEsandVulnerabilities;
    public static IList`1<string> MSDOSWindowsSpecialFilenames;
    public static IList`1<string> ScunthorpeProblem;
    public static IList`1<string> Humaninjection;
    public static IList`1<string> Terminalescapecodes;
    public static IList`1<string> iOSVulnerabilities;
    private static TheNaughtyStrings();
}
public enum RandomDataGenerator.Enums.FieldType : Enum {
    public int value__;
    public static FieldType None;
    [DescriptionAttribute("Numbers")]
public static FieldType Numbers;
    [DescriptionAttribute("IT")]
public static FieldType IT;
    [DescriptionAttribute("Human")]
public static FieldType Human;
    [DescriptionAttribute("Location")]
public static FieldType Location;
    [DescriptionAttribute("Text")]
public static FieldType Text;
    [DescriptionAttribute("Time")]
public static FieldType Time;
    [DescriptionAttribute("Set")]
public static FieldType Set;
}
public enum RandomDataGenerator.Enums.SubFieldType : Enum {
    public int value__;
    public static SubFieldType None;
    [DescriptionAttribute("Boolean")]
public static SubFieldType Boolean;
    [DescriptionAttribute("Short")]
public static SubFieldType Short;
    [DescriptionAttribute("Integer")]
public static SubFieldType Integer;
    [DescriptionAttribute("Long")]
public static SubFieldType Long;
    [DescriptionAttribute("Float")]
public static SubFieldType Float;
    [DescriptionAttribute("Double")]
public static SubFieldType Double;
    [DescriptionAttribute("CCN")]
public static SubFieldType CCN;
    [DescriptionAttribute("IPv4 Address")]
public static SubFieldType IPv4Address;
    [DescriptionAttribute("IPv6 Address")]
public static SubFieldType IPv6Address;
    [DescriptionAttribute("MAC Address")]
public static SubFieldType MACAddress;
    [DescriptionAttribute("Guid")]
public static SubFieldType Guid;
    [DescriptionAttribute("Full Name")]
public static SubFieldType FullName;
    [DescriptionAttribute("Last Name")]
public static SubFieldType LastName;
    [DescriptionAttribute("First Name")]
public static SubFieldType FirstName;
    [DescriptionAttribute("Email Address")]
public static SubFieldType EmailAddress;
    [DescriptionAttribute("Country")]
public static SubFieldType Country;
    [DescriptionAttribute("City")]
public static SubFieldType City;
    [DescriptionAttribute("Words")]
public static SubFieldType TextWords;
    [DescriptionAttribute("Text Pattern")]
public static SubFieldType TextPattern;
    [DescriptionAttribute("Text Regex")]
public static SubFieldType TextRegex;
    [DescriptionAttribute("Text Lipsum")]
public static SubFieldType TextLipsum;
    [DescriptionAttribute("Random Text")]
public static SubFieldType Text;
    [DescriptionAttribute("Naughty Strings")]
public static SubFieldType TextNaughtyStrings;
    [DescriptionAttribute("Date / Time")]
public static SubFieldType DateTime;
    [DescriptionAttribute("String List")]
public static SubFieldType StringList;
}
[ExtensionAttribute]
internal static class RandomDataGenerator.Extensions.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToCasedInvariant(string str, bool toUpper);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string RemoveWhiteSpace(string input);
}
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsBytes")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsCCN")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsCity")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsCountry")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsDateTime")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsEmailAddress")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsFirstName")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsIBAN")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Byte>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Int16>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Int32>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Int64>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Single>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsNumber`1<System.Double>")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsFullName")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsGuid")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsInteger")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsIPv4Address")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsIPv6Address")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsLastName")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsMACAddress")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsTextPattern")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsTextRegex")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsTextNaughtyStrings")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsText")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsTextWords")]
[XmlIncludeAttribute("RandomDataGenerator.FieldOptions.FieldOptionsStringList")]
public abstract class RandomDataGenerator.FieldOptions.FieldOptionsAbstract : object {
    [CompilerGeneratedAttribute]
private bool <UseNullValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    public bool UseNullValues { get; public set; }
    public bool ValueAsString { get; public set; }
    public Nullable`1<int> Seed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseNullValues();
    [CompilerGeneratedAttribute]
public void set_UseNullValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValueAsString();
    [CompilerGeneratedAttribute]
public void set_ValueAsString(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public FieldOptionsAbstract Clone();
}
public class RandomDataGenerator.FieldOptions.FieldOptionsBoolean : FieldOptionsNumber`1<bool> {
}
public class RandomDataGenerator.FieldOptions.FieldOptionsByte : FieldOptionsNumber`1<byte> {
    [CompilerGeneratedAttribute]
private byte <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Max>k__BackingField;
    public byte Min { get; public set; }
    public byte Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual byte get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(byte value);
    [CompilerGeneratedAttribute]
public virtual byte get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(byte value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsBytes : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    public int Min { get; public set; }
    public int Max { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Min();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Min(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Max();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Max(int value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsCCN : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private CardIssuer <CardIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public CardIssuer CardIssuer { get; public set; }
    public int Length { get; public set; }
    [CompilerGeneratedAttribute]
public CardIssuer get_CardIssuer();
    [CompilerGeneratedAttribute]
public void set_CardIssuer(CardIssuer value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsCity : FieldOptionsAbstract {
}
public class RandomDataGenerator.FieldOptions.FieldOptionsCountry : FieldOptionsAbstract {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsDateTime : FieldOptionsAbstract {
    public static string DefaultFormat;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <From>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <To>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTime>k__BackingField;
    public string Format { get; public set; }
    public DateTime From { get; public set; }
    public DateTime To { get; public set; }
    public bool IncludeTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_From();
    [CompilerGeneratedAttribute]
public sealed virtual void set_From(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_To();
    [CompilerGeneratedAttribute]
public sealed virtual void set_To(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeTime(bool value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsDouble : FieldOptionsNumber`1<double> {
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    public double Min { get; public set; }
    public double Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual double get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(double value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsEmailAddress : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private bool <Male>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Female>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Left2Right>k__BackingField;
    public bool Male { get; public set; }
    public bool Female { get; public set; }
    public bool Left2Right { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Male();
    [CompilerGeneratedAttribute]
public void set_Male(bool value);
    [CompilerGeneratedAttribute]
public bool get_Female();
    [CompilerGeneratedAttribute]
public void set_Female(bool value);
    [CompilerGeneratedAttribute]
public bool get_Left2Right();
    [CompilerGeneratedAttribute]
public void set_Left2Right(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RandomDataGenerator.FieldOptions.FieldOptionsFactory : object {
    private static string Namespace;
    public static FieldOptionsAbstract GetFieldOptions(SubFieldType subFieldType);
    public static FieldOptionsAbstract GetFieldOptions(string name, Dictionary`2<string, object> properties);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsFirstName : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private bool <Male>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Female>k__BackingField;
    public bool Male { get; public set; }
    public bool Female { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Male();
    [CompilerGeneratedAttribute]
public void set_Male(bool value);
    [CompilerGeneratedAttribute]
public bool get_Female();
    [CompilerGeneratedAttribute]
public void set_Female(bool value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsFloat : FieldOptionsNumber`1<float> {
    [CompilerGeneratedAttribute]
private float <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Max>k__BackingField;
    public float Min { get; public set; }
    public float Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual float get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(float value);
    [CompilerGeneratedAttribute]
public virtual float get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(float value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsFullName : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private bool <Male>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Female>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Left2Right>k__BackingField;
    public bool Male { get; public set; }
    public bool Female { get; public set; }
    public bool Left2Right { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Male();
    [CompilerGeneratedAttribute]
public void set_Male(bool value);
    [CompilerGeneratedAttribute]
public bool get_Female();
    [CompilerGeneratedAttribute]
public void set_Female(bool value);
    [CompilerGeneratedAttribute]
public bool get_Left2Right();
    [CompilerGeneratedAttribute]
public void set_Left2Right(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsGuid : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private bool <Uppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public bool Uppercase { get; public set; }
    public string Format { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Uppercase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Uppercase(bool value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsIBAN : FieldOptionsAbstract {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("2")]
public string CountryCode { get; public set; }
    public string Type { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CountryCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CountryCode(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsInteger : FieldOptionsNumber`1<int> {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    public int Min { get; public set; }
    public int Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsIPv4Address : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    public string Min { get; public set; }
    public string Max { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsIPv6Address : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private bool <Uppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    public bool Uppercase { get; public set; }
    public string Min { get; public set; }
    public string Max { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Uppercase();
    [CompilerGeneratedAttribute]
public void set_Uppercase(bool value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsLastName : FieldOptionsAbstract {
}
public class RandomDataGenerator.FieldOptions.FieldOptionsLong : FieldOptionsNumber`1<long> {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Min { get; public set; }
    public long Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(long value);
    [CompilerGeneratedAttribute]
public virtual long get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsMACAddress : FieldOptionsAbstract {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Uppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [NullableAttribute("1")]
public string Separator { get; public set; }
    public bool Uppercase { get; public set; }
    public string Min { get; public set; }
    public string Max { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Separator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public bool get_Uppercase();
    [CompilerGeneratedAttribute]
public void set_Uppercase(bool value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
}
public abstract class RandomDataGenerator.FieldOptions.FieldOptionsNumber`1 : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private T <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Max>k__BackingField;
    public T Min { get; public set; }
    public T Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual T get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(T value);
    [CompilerGeneratedAttribute]
public virtual T get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(T value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsShort : FieldOptionsNumber`1<short> {
    [CompilerGeneratedAttribute]
private short <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Max>k__BackingField;
    public short Min { get; public set; }
    public short Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual short get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(short value);
    [CompilerGeneratedAttribute]
public virtual short get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(short value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsStringList : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    public List`1<string> Values { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<string> value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsText : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSpecial>k__BackingField;
    public int Min { get; public set; }
    public int Max { get; public set; }
    public bool UseUppercase { get; public set; }
    public bool UseLowercase { get; public set; }
    public bool UseLetter { get; public set; }
    public bool UseNumber { get; public set; }
    public bool UseSpace { get; public set; }
    public bool UseSpecial { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(int value);
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [CompilerGeneratedAttribute]
public bool get_UseUppercase();
    [CompilerGeneratedAttribute]
public void set_UseUppercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLowercase();
    [CompilerGeneratedAttribute]
public void set_UseLowercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLetter();
    [CompilerGeneratedAttribute]
public void set_UseLetter(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNumber();
    [CompilerGeneratedAttribute]
public void set_UseNumber(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSpace();
    [CompilerGeneratedAttribute]
public void set_UseSpace(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSpecial();
    [CompilerGeneratedAttribute]
public void set_UseSpecial(bool value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsTextLipsum : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private int <Paragraphs>k__BackingField;
    public int Paragraphs { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Paragraphs();
    [CompilerGeneratedAttribute]
public void set_Paragraphs(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsTextNaughtyStrings : FieldOptionsAbstract {
    internal static string All;
    [CompilerGeneratedAttribute]
private string <Categories>k__BackingField;
    public string Categories { get; public set; }
    private static FieldOptionsTextNaughtyStrings();
    [CompilerGeneratedAttribute]
public string get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use FieldOptionsTextRegex")]
public class RandomDataGenerator.FieldOptions.FieldOptionsTextPattern : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    public string Pattern { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsTextRegex : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    public string Pattern { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
}
public class RandomDataGenerator.FieldOptions.FieldOptionsTextWords : FieldOptionsAbstract {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    public int Min { get; public set; }
    public int Max { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(int value);
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RandomDataGenerator.FieldOptions.FieldOptionsTimeSpan : FieldOptionsAbstract {
    public static string DefaultFormat;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <From>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <To>k__BackingField;
    public string Format { get; public set; }
    public bool IncludeMilliseconds { get; public set; }
    public TimeSpan From { get; public set; }
    public TimeSpan To { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeMilliseconds();
    [CompilerGeneratedAttribute]
public void set_IncludeMilliseconds(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_From();
    [CompilerGeneratedAttribute]
public sealed virtual void set_From(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_To();
    [CompilerGeneratedAttribute]
public sealed virtual void set_To(TimeSpan value);
}
public interface RandomDataGenerator.FieldOptions.IFieldOptionsBytes {
    public int Min { get; public set; }
    public int Max { get; public set; }
    public abstract virtual int get_Min();
    public abstract virtual void set_Min(int value);
    public abstract virtual int get_Max();
    public abstract virtual void set_Max(int value);
}
public interface RandomDataGenerator.FieldOptions.IFieldOptionsDateTime {
    public DateTime From { get; public set; }
    public DateTime To { get; public set; }
    public bool IncludeTime { get; public set; }
    public abstract virtual DateTime get_From();
    public abstract virtual void set_From(DateTime value);
    public abstract virtual DateTime get_To();
    public abstract virtual void set_To(DateTime value);
    public abstract virtual bool get_IncludeTime();
    public abstract virtual void set_IncludeTime(bool value);
}
public interface RandomDataGenerator.FieldOptions.IFieldOptionsGuid {
    public bool Uppercase { get; public set; }
    public abstract virtual bool get_Uppercase();
    public abstract virtual void set_Uppercase(bool value);
}
public interface RandomDataGenerator.FieldOptions.IFieldOptionsNumber`1 {
}
public interface RandomDataGenerator.FieldOptions.IFieldOptionsString {
}
[NullableContextAttribute("1")]
public interface RandomDataGenerator.FieldOptions.IFieldOptionsTimeSpan {
    public string Format { get; public set; }
    public TimeSpan From { get; public set; }
    public TimeSpan To { get; public set; }
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
    public abstract virtual TimeSpan get_From();
    public abstract virtual void set_From(TimeSpan value);
    public abstract virtual TimeSpan get_To();
    public abstract virtual void set_To(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Generators.RandomItemFromListGenerator`1 : object {
    private RandomValueGenerator _randomValueGenerator;
    private T[] _list;
    public RandomItemFromListGenerator`1(Nullable`1<int> seed, IEnumerable`1<T> list, Func`2<T, bool> predicate);
    [NullableContextAttribute("2")]
public T Generate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Generators.RandomItemsFromListGenerator`1 : object {
    private RandomValueGenerator _randomValueGenerator;
    private T[] _list;
    public RandomItemsFromListGenerator`1(Nullable`1<int> seed, IEnumerable`1<T> list, Func`2<T, bool> predicate);
    public List`1<T> Generate(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RandomDataGenerator.Generators.RandomStringFromListGenerator : RandomItemFromListGenerator`1<string> {
    public RandomStringFromListGenerator(IEnumerable`1<string> list, Nullable`1<int> seed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Generators.RandomStringGenerator : object {
    [CompilerGeneratedAttribute]
private int <MinUpperCaseCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinLowerCaseCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinNumericCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSpecialCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSpaceCharacters>k__BackingField;
    private string _pattern;
    public bool RepeatCharacters;
    public bool UniqueStrings;
    private bool _useUpperCaseCharacters;
    private bool _useLowerCaseCharacters;
    private bool _useNumericCharacters;
    private bool _useSpecialCharacters;
    private bool _useSpaceCharacters;
    private bool _patternDriven;
    [NullableAttribute("2")]
private Char[] _currentUpperCaseCharacters;
    [NullableAttribute("2")]
private Char[] _currentLowerCaseCharacters;
    [NullableAttribute("2")]
private Char[] _currentNumericCharacters;
    [NullableAttribute("2")]
private Char[] _currentSpecialCharacters;
    [NullableAttribute("2")]
private Char[] _currentSpaceCharacters;
    [NullableAttribute("2")]
private Char[] _currentGeneralCharacters;
    private List`1<string> _existingStrings;
    private Random _random;
    public bool UseUpperCaseCharacters { get; public set; }
    public Char[] UpperCaseCharacters { get; public set; }
    public bool UseLowerCaseCharacters { get; public set; }
    public Char[] LowerCaseCharacters { get; public set; }
    public bool UseNumericCharacters { get; public set; }
    public bool UseSpaces { get; public set; }
    public Char[] NumericCharacters { get; public set; }
    public bool UseSpecialCharacters { get; public set; }
    public Char[] SpecialCharacters { get; public set; }
    public Char[] SpaceCharacters { get; public set; }
    public int MinUpperCaseCharacters { get; public set; }
    public int MinLowerCaseCharacters { get; public set; }
    public int MinNumericCharacters { get; public set; }
    public int MinSpecialCharacters { get; public set; }
    public int MinSpaceCharacters { get; public set; }
    private string Pattern { get; private set; }
    public RandomStringGenerator(Nullable`1<int> seed, bool useUpperCaseCharacters, bool useLowerCaseCharacters, bool useNumericCharacters, bool useSpecialCharacters, bool useSpaces);
    public bool get_UseUpperCaseCharacters();
    public void set_UseUpperCaseCharacters(bool value);
    public Char[] get_UpperCaseCharacters();
    public void set_UpperCaseCharacters(Char[] value);
    public bool get_UseLowerCaseCharacters();
    public void set_UseLowerCaseCharacters(bool value);
    public Char[] get_LowerCaseCharacters();
    public void set_LowerCaseCharacters(Char[] value);
    public bool get_UseNumericCharacters();
    public void set_UseNumericCharacters(bool value);
    public bool get_UseSpaces();
    public void set_UseSpaces(bool value);
    public Char[] get_NumericCharacters();
    public void set_NumericCharacters(Char[] value);
    public bool get_UseSpecialCharacters();
    public void set_UseSpecialCharacters(bool value);
    public Char[] get_SpecialCharacters();
    public void set_SpecialCharacters(Char[] value);
    public Char[] get_SpaceCharacters();
    public void set_SpaceCharacters(Char[] value);
    [CompilerGeneratedAttribute]
public int get_MinUpperCaseCharacters();
    [CompilerGeneratedAttribute]
public void set_MinUpperCaseCharacters(int value);
    [CompilerGeneratedAttribute]
public int get_MinLowerCaseCharacters();
    [CompilerGeneratedAttribute]
public void set_MinLowerCaseCharacters(int value);
    [CompilerGeneratedAttribute]
public int get_MinNumericCharacters();
    [CompilerGeneratedAttribute]
public void set_MinNumericCharacters(int value);
    [CompilerGeneratedAttribute]
public int get_MinSpecialCharacters();
    [CompilerGeneratedAttribute]
public void set_MinSpecialCharacters(int value);
    [CompilerGeneratedAttribute]
public int get_MinSpaceCharacters();
    [CompilerGeneratedAttribute]
public void set_MinSpaceCharacters(int value);
    private string get_Pattern();
    private void set_Pattern(string value);
    public string Generate(string pattern);
    public string Generate(int minLength, int maxLength);
    public string Generate(int fixedLength);
    private string GenerateString(int length);
    private string PatternDrivenAlgo(string pattern);
    private string SimpleGenerateAlgo(int length);
    private string GenerateAlgoWithLimits(int length);
    public void AddExistingString(string s);
    private int GetRandomInt();
    private char GetRandomCharFromArray(Char[] array, List`1<char> existentItems);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class RandomDataGenerator.Generators.RandomStringsFromListGenerator : RandomItemsFromListGenerator`1<string> {
    public RandomStringsFromListGenerator(IEnumerable`1<string> list, Nullable`1<int> seed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Generators.RandomThingsGenerator`1 : object {
    private RandomValueGenerator _randomValueGenerator;
    private T _min;
    private T _max;
    public RandomThingsGenerator`1(T min, T max, Nullable`1<int> seed);
    public T Generate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RandomDataGenerator.Generators.RandomValueGenerator : object {
    private static double Tolerance;
    private static Random _rnf;
    private static object RandomLock;
    private double _storedUniformDeviate;
    private bool _storedUniformDeviateIsGood;
    [CompilerGeneratedAttribute]
private static Type[] <SupportedTypes>k__BackingField;
    public static Type[] SupportedTypes { get; }
    public RandomValueGenerator(int seed);
    private static RandomValueGenerator();
    [CompilerGeneratedAttribute]
public static Type[] get_SupportedTypes();
    public void Reset(int seed);
    public double Next();
    public bool NextBoolean();
    public double NextDouble();
    public Byte[] NextBytes(int min, int max);
    public T Next(T min, T max);
    public byte Next(byte min, byte max);
    public short Next(short min, short max);
    public int Next(int min, int max);
    public long Next(long min, long max);
    public float Next(float min, float max);
    public double Next(double min, double max);
    public DateTime Next(DateTime min, DateTime max);
    public TimeSpan Next(TimeSpan min, TimeSpan max);
    public double NextUniform();
    public int NextEnum(Type enumType);
    public double NextExponential();
    public double NextNormal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RandomDataGenerator.Generators.RandomValueGeneratorFactory : object {
    private static RandomValueGenerator Value;
    private static RandomValueGeneratorFactory();
    public static RandomValueGenerator Create(Nullable`1<int> seed);
}
[NullableContextAttribute("1")]
public interface RandomDataGenerator.Randomizers.IRandomizerBytes {
    public abstract virtual Byte[] Generate();
    public abstract virtual string GenerateAsUTF8String();
    public abstract virtual string GenerateAsASCIIString();
    public abstract virtual string GenerateAsBase64String();
    public abstract virtual string GenerateAsString(Encoding encoding);
}
[NullableContextAttribute("2")]
public interface RandomDataGenerator.Randomizers.IRandomizerDateTime {
    public abstract virtual Nullable`1<DateTime> Generate();
    public abstract virtual string GenerateAsString();
}
[NullableContextAttribute("2")]
public interface RandomDataGenerator.Randomizers.IRandomizerGuid {
    public abstract virtual Nullable`1<Guid> Generate();
    public abstract virtual string GenerateAsString();
}
public interface RandomDataGenerator.Randomizers.IRandomizerNumber`1 {
    public abstract virtual Nullable`1<T> Generate();
}
[NullableContextAttribute("2")]
public interface RandomDataGenerator.Randomizers.IRandomizerString {
    public abstract virtual string Generate();
    public abstract virtual string Generate(bool upperCase);
}
[NullableContextAttribute("2")]
public interface RandomDataGenerator.Randomizers.IRandomizerTimeSpan {
    public abstract virtual Nullable`1<TimeSpan> Generate();
    public abstract virtual string GenerateAsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class RandomDataGenerator.Randomizers.RandomizerAbstract`1 : object {
    private RandomValueGenerator _randomValueGenerator;
    protected TOptions Options;
    protected RandomizerAbstract`1(TOptions options);
    protected virtual bool IsNull();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerBytes : RandomizerAbstract`1<FieldOptionsBytes> {
    private RandomValueGenerator _randomValueGenerator;
    public RandomizerBytes(FieldOptionsBytes options);
    public sealed virtual Byte[] Generate();
    public sealed virtual string GenerateAsString(Encoding encoding);
    public sealed virtual string GenerateAsUTF8String();
    public sealed virtual string GenerateAsASCIIString();
    public sealed virtual string GenerateAsBase64String();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerCCN : RandomizerAbstract`1<FieldOptionsCCN> {
    private RandomizerNumber`1<int> _randomizerNumberBetween0And10;
    private RandomItemFromListGenerator`1<CardIssuer> _randomizerCardIssuer;
    public RandomizerCCN(FieldOptionsCCN options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
    private string GenerateRandomCreditCardNumber(CardIssuer cardIssuer, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerCity : RandomizerAbstract`1<FieldOptionsCity> {
    private RandomStringFromListGenerator _generator;
    public RandomizerCity(FieldOptionsCity options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerCountry : RandomizerAbstract`1<FieldOptionsCountry> {
    private RandomStringFromListGenerator _generator;
    public RandomizerCountry(FieldOptionsCountry options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerDateTime : RandomizerAbstract`1<FieldOptionsDateTime> {
    private RandomThingsGenerator`1<DateTime> _generator;
    public RandomizerDateTime(FieldOptionsDateTime options);
    public sealed virtual Nullable`1<DateTime> Generate();
    [NullableContextAttribute("2")]
public sealed virtual string GenerateAsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerEmailAddress : RandomizerAbstract`1<FieldOptionsEmailAddress> {
    private RandomizerTextWords _wordGenerator;
    private RandomThingsGenerator`1<int> _numberGenerator;
    private RandomStringFromListGenerator _topLevelDomainGenerator;
    private RandomStringFromListGenerator _lastNamesGenerator;
    private List`1<RandomStringFromListGenerator> _genderSetGenerators;
    public RandomizerEmailAddress(FieldOptionsEmailAddress options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RandomDataGenerator.Randomizers.RandomizerFactory : object {
    private static ConcurrentDictionary`2<string, object> Cache;
    private static RandomizerFactory();
    public static IRandomizerBytes GetRandomizer(IFieldOptionsBytes fieldOptions);
    public static IRandomizerString GetRandomizer(IFieldOptionsString fieldOptions);
    public static IRandomizerGuid GetRandomizer(IFieldOptionsGuid fieldOptions);
    [NullableContextAttribute("0")]
public static IRandomizerNumber`1<T> GetRandomizer(IFieldOptionsNumber`1<T> fieldOptions);
    public static IRandomizerDateTime GetRandomizer(IFieldOptionsDateTime fieldOptions);
    public static IRandomizerTimeSpan GetRandomizer(IFieldOptionsTimeSpan fieldOptions);
    public static object GetRandomizerAsDynamic(FieldOptionsAbstract fieldOptions);
    private static T Create(object fieldOptions);
    private static object CreateRandomizer(object fieldOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerFirstName : RandomizerAbstract`1<FieldOptionsFirstName> {
    private RandomThingsGenerator`1<int> _numberGenerator;
    private List`1<RandomStringFromListGenerator> _genderSetGenerators;
    public RandomizerFirstName(FieldOptionsFirstName options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerFullName : RandomizerAbstract`1<FieldOptionsFullName> {
    private RandomThingsGenerator`1<int> _numberGenerator;
    private RandomStringFromListGenerator _lastNamesGenerator;
    private List`1<RandomStringFromListGenerator> _genderSetGenerators;
    public RandomizerFullName(FieldOptionsFullName options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerGuid : RandomizerAbstract`1<FieldOptionsGuid> {
    [NullableContextAttribute("1")]
public RandomizerGuid(FieldOptionsGuid options);
    public sealed virtual Nullable`1<Guid> Generate();
    [NullableContextAttribute("2")]
public sealed virtual string GenerateAsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerIBAN : RandomizerAbstract`1<FieldOptionsIBAN> {
    private RandomItemFromListGenerator`1<IBAN> _itemGenerator;
    public RandomizerIBAN(FieldOptionsIBAN options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerIPv4Address : RandomizerAbstract`1<FieldOptionsIPv4Address> {
    private RandomThingsGenerator`1[] _octetsGenerator;
    public RandomizerIPv4Address(FieldOptionsIPv4Address options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerIPv6Address : RandomizerAbstract`1<FieldOptionsIPv6Address> {
    private Int32[] _defaultMin;
    private Int32[] _defaultMax;
    private RandomThingsGenerator`1[] _hextets;
    public RandomizerIPv6Address(FieldOptionsIPv6Address options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerLastName : RandomizerAbstract`1<FieldOptionsLastName> {
    private RandomStringFromListGenerator _lastNamesGenerator;
    public RandomizerLastName(FieldOptionsLastName options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerMACAddress : RandomizerAbstract`1<FieldOptionsMACAddress> {
    private Byte[] _defaultMin;
    private Byte[] _defaultMax;
    private RandomThingsGenerator`1[] _octets;
    public RandomizerMACAddress(FieldOptionsMACAddress options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
    private string GenerateInternal();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerNumber`1 : RandomizerAbstract`1<FieldOptionsNumber`1<T>> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RandomThingsGenerator`1<T> _generator;
    public RandomizerNumber`1(FieldOptionsNumber`1<T> options);
    public sealed virtual Nullable`1<T> Generate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerStringList : RandomizerAbstract`1<FieldOptionsStringList> {
    private RandomStringFromListGenerator _generator;
    public RandomizerStringList(FieldOptionsStringList options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerText : RandomizerAbstract`1<FieldOptionsText> {
    private RandomStringGenerator _generator;
    public RandomizerText(FieldOptionsText options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTextLipsum : RandomizerAbstract`1<FieldOptionsTextLipsum> {
    private static string Newline;
    private RandomStringsFromListGenerator _generator;
    public RandomizerTextLipsum(FieldOptionsTextLipsum options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTextNaughtyStrings : RandomizerAbstract`1<FieldOptionsTextNaughtyStrings> {
    private RandomStringFromListGenerator _naughtyStringCategoryGenerator;
    public RandomizerTextNaughtyStrings(FieldOptionsTextNaughtyStrings options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTextPattern : RandomizerAbstract`1<FieldOptionsTextPattern> {
    private RandomStringGenerator _generator;
    public RandomizerTextPattern(FieldOptionsTextPattern options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTextRegex : RandomizerAbstract`1<FieldOptionsTextRegex> {
    private Xeger _generator;
    public RandomizerTextRegex(FieldOptionsTextRegex options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTextWords : RandomizerAbstract`1<FieldOptionsTextWords> {
    private RandomStringFromListGenerator _generator;
    private RandomValueGenerator _randomValueGenerator;
    public RandomizerTextWords(FieldOptionsTextWords options);
    [NullableContextAttribute("2")]
public sealed virtual string Generate();
    [NullableContextAttribute("2")]
public sealed virtual string Generate(bool upperCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class RandomDataGenerator.Randomizers.RandomizerTimeSpan : RandomizerAbstract`1<FieldOptionsTimeSpan> {
    private RandomThingsGenerator`1<TimeSpan> _generator;
    public RandomizerTimeSpan(FieldOptionsTimeSpan options);
    public sealed virtual Nullable`1<TimeSpan> Generate();
    [NullableContextAttribute("2")]
public sealed virtual string GenerateAsString();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Concurrent.ConcurrentDictionary`2 : object {
    private Tables modreq(System.Runtime.CompilerServices.IsVolatile) m_tables;
    internal IEqualityComparer`1<TKey> m_comparer;
    private bool m_growLockArray;
    private int m_keyRehashCount;
    private int m_budget;
    private static int DEFAULT_CONCURRENCY_MULTIPLIER;
    private static int DEFAULT_CAPACITY;
    private static int MAX_LOCK_NUMBER;
    private static bool s_isValueWriteAtomic;
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static int DefaultConcurrencyLevel { get; }
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public ConcurrentDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    internal ConcurrentDictionary`2(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer`1<TKey> comparer);
    private static ConcurrentDictionary`2();
    private static bool IsValueWriteAtomic();
    private void InitializeFromCollection(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public bool TryAdd(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public bool TryRemove(TKey key, TValue& value);
    private bool TryRemoveInternal(TKey key, TValue& value, bool matchValue, TValue oldValue);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    public KeyValuePair`2[] ToArray();
    private void CopyToPairs(KeyValuePair`2[] array, int index);
    private void CopyToEntries(DictionaryEntry[] array, int index);
    private void CopyToObjects(Object[] array, int index);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private bool TryAddInternal(TKey key, TValue value, bool updateIfExists, bool acquireLock, TValue& resultingValue);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual int get_Count();
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    public TValue GetOrAdd(TKey key, TValue value);
    public TValue AddOrUpdate(TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public TValue AddOrUpdate(TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public bool get_IsEmpty();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private void GrowTable(Tables<TKey, TValue> tables, IEqualityComparer`1<TKey> newComparer, bool regenerateHashKeys, int rehashCount);
    private void GetBucketAndLockNo(int hashcode, Int32& bucketNo, Int32& lockNo, int bucketCount, int lockCount);
    private static int get_DefaultConcurrencyLevel();
    private void AcquireAllLocks(Int32& locksAcquired);
    private void AcquireLocks(int fromInclusive, int toExclusive, Int32& locksAcquired);
    private void ReleaseLocks(int fromInclusive, int toExclusive);
    private ReadOnlyCollection`1<TKey> GetKeys();
    private ReadOnlyCollection`1<TValue> GetValues();
    [ConditionalAttribute("DEBUG")]
private void Assert(bool condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.CustomIntrospectionExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeInfo(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericTypeArguments(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetPublicSettableProperties(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
