public class Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private ISimpleNotificationServicePaginatorFactory _paginators;
    public ISimpleNotificationServicePaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonSimpleNotificationServiceClient(RegionEndpoint region);
    public AmazonSimpleNotificationServiceClient(AmazonSimpleNotificationServiceConfig config);
    public AmazonSimpleNotificationServiceClient(AWSCredentials credentials);
    public AmazonSimpleNotificationServiceClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonSimpleNotificationServiceClient(AWSCredentials credentials, AmazonSimpleNotificationServiceConfig clientConfig);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSimpleNotificationServiceConfig clientConfig);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonSimpleNotificationServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSimpleNotificationServiceConfig clientConfig);
    private static AmazonSimpleNotificationServiceClient();
    private static void AddSQSPermission(Policy policy, string topicArn, string sqsQueueArn);
    private static bool HasSQSPermission(Policy policy, string topicArn, string sqsQueueArn);
    private static bool TopicNameMatcher(string topicArn, string topicName);
    private static void GetNewPolicyAndStatementForTopicAttributes(Dictionary`2<string, string> attributes, string topicArn, string bucket, Policy& policy, Statement& statement);
    [AsyncStateMachineAttribute("Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient/<SubscribeQueueAsync>d__4")]
public sealed virtual Task`1<string> SubscribeQueueAsync(string topicArn, ICoreAmazonSQS sqsClient, string sqsQueueUrl);
    [AsyncStateMachineAttribute("Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient/<SubscribeQueueToTopicsAsync>d__5")]
public sealed virtual Task`1<IDictionary`2<string, string>> SubscribeQueueToTopicsAsync(IList`1<string> topicArns, ICoreAmazonSQS sqsClient, string sqsQueueUrl);
    [AsyncStateMachineAttribute("Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient/<FindTopicAsync>d__6")]
public sealed virtual Task`1<Topic> FindTopicAsync(string topicName);
    [AsyncStateMachineAttribute("Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient/<AuthorizeS3ToPublishAsync>d__7")]
public sealed virtual Task AuthorizeS3ToPublishAsync(string topicArn, string bucket);
    public sealed virtual ISimpleNotificationServicePaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AddPermissionResponse AddPermission(AddPermissionRequest request);
    public virtual Task`1<AddPermissionResponse> AddPermissionAsync(string topicArn, string label, List`1<string> awsAccountId, List`1<string> actionName, CancellationToken cancellationToken);
    public virtual Task`1<AddPermissionResponse> AddPermissionAsync(AddPermissionRequest request, CancellationToken cancellationToken);
    internal virtual CheckIfPhoneNumberIsOptedOutResponse CheckIfPhoneNumberIsOptedOut(CheckIfPhoneNumberIsOptedOutRequest request);
    public virtual Task`1<CheckIfPhoneNumberIsOptedOutResponse> CheckIfPhoneNumberIsOptedOutAsync(CheckIfPhoneNumberIsOptedOutRequest request, CancellationToken cancellationToken);
    internal virtual ConfirmSubscriptionResponse ConfirmSubscription(ConfirmSubscriptionRequest request);
    public virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(string topicArn, string token, string authenticateOnUnsubscribe, CancellationToken cancellationToken);
    public virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(string topicArn, string token, CancellationToken cancellationToken);
    public virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(ConfirmSubscriptionRequest request, CancellationToken cancellationToken);
    internal virtual CreatePlatformApplicationResponse CreatePlatformApplication(CreatePlatformApplicationRequest request);
    public virtual Task`1<CreatePlatformApplicationResponse> CreatePlatformApplicationAsync(CreatePlatformApplicationRequest request, CancellationToken cancellationToken);
    internal virtual CreatePlatformEndpointResponse CreatePlatformEndpoint(CreatePlatformEndpointRequest request);
    public virtual Task`1<CreatePlatformEndpointResponse> CreatePlatformEndpointAsync(CreatePlatformEndpointRequest request, CancellationToken cancellationToken);
    internal virtual CreateSMSSandboxPhoneNumberResponse CreateSMSSandboxPhoneNumber(CreateSMSSandboxPhoneNumberRequest request);
    public virtual Task`1<CreateSMSSandboxPhoneNumberResponse> CreateSMSSandboxPhoneNumberAsync(CreateSMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    internal virtual CreateTopicResponse CreateTopic(CreateTopicRequest request);
    public virtual Task`1<CreateTopicResponse> CreateTopicAsync(string name, CancellationToken cancellationToken);
    public virtual Task`1<CreateTopicResponse> CreateTopicAsync(CreateTopicRequest request, CancellationToken cancellationToken);
    internal virtual DeleteEndpointResponse DeleteEndpoint(DeleteEndpointRequest request);
    public virtual Task`1<DeleteEndpointResponse> DeleteEndpointAsync(DeleteEndpointRequest request, CancellationToken cancellationToken);
    internal virtual DeletePlatformApplicationResponse DeletePlatformApplication(DeletePlatformApplicationRequest request);
    public virtual Task`1<DeletePlatformApplicationResponse> DeletePlatformApplicationAsync(DeletePlatformApplicationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSMSSandboxPhoneNumberResponse DeleteSMSSandboxPhoneNumber(DeleteSMSSandboxPhoneNumberRequest request);
    public virtual Task`1<DeleteSMSSandboxPhoneNumberResponse> DeleteSMSSandboxPhoneNumberAsync(DeleteSMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTopicResponse DeleteTopic(DeleteTopicRequest request);
    public virtual Task`1<DeleteTopicResponse> DeleteTopicAsync(string topicArn, CancellationToken cancellationToken);
    public virtual Task`1<DeleteTopicResponse> DeleteTopicAsync(DeleteTopicRequest request, CancellationToken cancellationToken);
    internal virtual GetDataProtectionPolicyResponse GetDataProtectionPolicy(GetDataProtectionPolicyRequest request);
    public virtual Task`1<GetDataProtectionPolicyResponse> GetDataProtectionPolicyAsync(GetDataProtectionPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetEndpointAttributesResponse GetEndpointAttributes(GetEndpointAttributesRequest request);
    public virtual Task`1<GetEndpointAttributesResponse> GetEndpointAttributesAsync(GetEndpointAttributesRequest request, CancellationToken cancellationToken);
    internal virtual GetPlatformApplicationAttributesResponse GetPlatformApplicationAttributes(GetPlatformApplicationAttributesRequest request);
    public virtual Task`1<GetPlatformApplicationAttributesResponse> GetPlatformApplicationAttributesAsync(GetPlatformApplicationAttributesRequest request, CancellationToken cancellationToken);
    internal virtual GetSMSAttributesResponse GetSMSAttributes(GetSMSAttributesRequest request);
    public virtual Task`1<GetSMSAttributesResponse> GetSMSAttributesAsync(GetSMSAttributesRequest request, CancellationToken cancellationToken);
    internal virtual GetSMSSandboxAccountStatusResponse GetSMSSandboxAccountStatus(GetSMSSandboxAccountStatusRequest request);
    public virtual Task`1<GetSMSSandboxAccountStatusResponse> GetSMSSandboxAccountStatusAsync(GetSMSSandboxAccountStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetSubscriptionAttributesResponse GetSubscriptionAttributes(GetSubscriptionAttributesRequest request);
    public virtual Task`1<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(string subscriptionArn, CancellationToken cancellationToken);
    public virtual Task`1<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(GetSubscriptionAttributesRequest request, CancellationToken cancellationToken);
    internal virtual GetTopicAttributesResponse GetTopicAttributes(GetTopicAttributesRequest request);
    public virtual Task`1<GetTopicAttributesResponse> GetTopicAttributesAsync(string topicArn, CancellationToken cancellationToken);
    public virtual Task`1<GetTopicAttributesResponse> GetTopicAttributesAsync(GetTopicAttributesRequest request, CancellationToken cancellationToken);
    internal virtual ListEndpointsByPlatformApplicationResponse ListEndpointsByPlatformApplication(ListEndpointsByPlatformApplicationRequest request);
    public virtual Task`1<ListEndpointsByPlatformApplicationResponse> ListEndpointsByPlatformApplicationAsync(ListEndpointsByPlatformApplicationRequest request, CancellationToken cancellationToken);
    internal virtual ListOriginationNumbersResponse ListOriginationNumbers(ListOriginationNumbersRequest request);
    public virtual Task`1<ListOriginationNumbersResponse> ListOriginationNumbersAsync(ListOriginationNumbersRequest request, CancellationToken cancellationToken);
    internal virtual ListPhoneNumbersOptedOutResponse ListPhoneNumbersOptedOut(ListPhoneNumbersOptedOutRequest request);
    public virtual Task`1<ListPhoneNumbersOptedOutResponse> ListPhoneNumbersOptedOutAsync(ListPhoneNumbersOptedOutRequest request, CancellationToken cancellationToken);
    internal virtual ListPlatformApplicationsResponse ListPlatformApplications();
    internal virtual ListPlatformApplicationsResponse ListPlatformApplications(ListPlatformApplicationsRequest request);
    public virtual Task`1<ListPlatformApplicationsResponse> ListPlatformApplicationsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListPlatformApplicationsResponse> ListPlatformApplicationsAsync(ListPlatformApplicationsRequest request, CancellationToken cancellationToken);
    internal virtual ListSMSSandboxPhoneNumbersResponse ListSMSSandboxPhoneNumbers(ListSMSSandboxPhoneNumbersRequest request);
    public virtual Task`1<ListSMSSandboxPhoneNumbersResponse> ListSMSSandboxPhoneNumbersAsync(ListSMSSandboxPhoneNumbersRequest request, CancellationToken cancellationToken);
    internal virtual ListSubscriptionsResponse ListSubscriptions();
    internal virtual ListSubscriptionsResponse ListSubscriptions(ListSubscriptionsRequest request);
    public virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(string nextToken, CancellationToken cancellationToken);
    public virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(ListSubscriptionsRequest request, CancellationToken cancellationToken);
    internal virtual ListSubscriptionsByTopicResponse ListSubscriptionsByTopic(ListSubscriptionsByTopicRequest request);
    public virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn, string nextToken, CancellationToken cancellationToken);
    public virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn, CancellationToken cancellationToken);
    public virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(ListSubscriptionsByTopicRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual ListTopicsResponse ListTopics();
    internal virtual ListTopicsResponse ListTopics(ListTopicsRequest request);
    public virtual Task`1<ListTopicsResponse> ListTopicsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListTopicsResponse> ListTopicsAsync(string nextToken, CancellationToken cancellationToken);
    public virtual Task`1<ListTopicsResponse> ListTopicsAsync(ListTopicsRequest request, CancellationToken cancellationToken);
    internal virtual OptInPhoneNumberResponse OptInPhoneNumber(OptInPhoneNumberRequest request);
    public virtual Task`1<OptInPhoneNumberResponse> OptInPhoneNumberAsync(OptInPhoneNumberRequest request, CancellationToken cancellationToken);
    internal virtual PublishResponse Publish(PublishRequest request);
    public virtual Task`1<PublishResponse> PublishAsync(string topicArn, string message, CancellationToken cancellationToken);
    public virtual Task`1<PublishResponse> PublishAsync(string topicArn, string message, string subject, CancellationToken cancellationToken);
    public virtual Task`1<PublishResponse> PublishAsync(PublishRequest request, CancellationToken cancellationToken);
    internal virtual PublishBatchResponse PublishBatch(PublishBatchRequest request);
    public virtual Task`1<PublishBatchResponse> PublishBatchAsync(PublishBatchRequest request, CancellationToken cancellationToken);
    internal virtual PutDataProtectionPolicyResponse PutDataProtectionPolicy(PutDataProtectionPolicyRequest request);
    public virtual Task`1<PutDataProtectionPolicyResponse> PutDataProtectionPolicyAsync(PutDataProtectionPolicyRequest request, CancellationToken cancellationToken);
    internal virtual RemovePermissionResponse RemovePermission(RemovePermissionRequest request);
    public virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(string topicArn, string label, CancellationToken cancellationToken);
    public virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request, CancellationToken cancellationToken);
    internal virtual SetEndpointAttributesResponse SetEndpointAttributes(SetEndpointAttributesRequest request);
    public virtual Task`1<SetEndpointAttributesResponse> SetEndpointAttributesAsync(SetEndpointAttributesRequest request, CancellationToken cancellationToken);
    internal virtual SetPlatformApplicationAttributesResponse SetPlatformApplicationAttributes(SetPlatformApplicationAttributesRequest request);
    public virtual Task`1<SetPlatformApplicationAttributesResponse> SetPlatformApplicationAttributesAsync(SetPlatformApplicationAttributesRequest request, CancellationToken cancellationToken);
    internal virtual SetSMSAttributesResponse SetSMSAttributes(SetSMSAttributesRequest request);
    public virtual Task`1<SetSMSAttributesResponse> SetSMSAttributesAsync(SetSMSAttributesRequest request, CancellationToken cancellationToken);
    internal virtual SetSubscriptionAttributesResponse SetSubscriptionAttributes(SetSubscriptionAttributesRequest request);
    public virtual Task`1<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(string subscriptionArn, string attributeName, string attributeValue, CancellationToken cancellationToken);
    public virtual Task`1<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(SetSubscriptionAttributesRequest request, CancellationToken cancellationToken);
    internal virtual SetTopicAttributesResponse SetTopicAttributes(SetTopicAttributesRequest request);
    public virtual Task`1<SetTopicAttributesResponse> SetTopicAttributesAsync(string topicArn, string attributeName, string attributeValue, CancellationToken cancellationToken);
    public virtual Task`1<SetTopicAttributesResponse> SetTopicAttributesAsync(SetTopicAttributesRequest request, CancellationToken cancellationToken);
    internal virtual SubscribeResponse Subscribe(SubscribeRequest request);
    public virtual Task`1<SubscribeResponse> SubscribeAsync(string topicArn, string protocol, string endpoint, CancellationToken cancellationToken);
    public virtual Task`1<SubscribeResponse> SubscribeAsync(SubscribeRequest request, CancellationToken cancellationToken);
    internal virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UnsubscribeResponse Unsubscribe(UnsubscribeRequest request);
    public virtual Task`1<UnsubscribeResponse> UnsubscribeAsync(string subscriptionArn, CancellationToken cancellationToken);
    public virtual Task`1<UnsubscribeResponse> UnsubscribeAsync(UnsubscribeRequest request, CancellationToken cancellationToken);
    internal virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    internal virtual VerifySMSSandboxPhoneNumberResponse VerifySMSSandboxPhoneNumber(VerifySMSSandboxPhoneNumberRequest request);
    public virtual Task`1<VerifySMSSandboxPhoneNumberResponse> VerifySMSSandboxPhoneNumberAsync(VerifySMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceConfig : ClientConfig {
    private static string UserAgentString;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonSimpleNotificationServiceConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
}
public static class Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Legacy>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    public static IDefaultConfiguration Legacy { get; }
    private static AmazonSimpleNotificationServiceDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Legacy();
}
public class Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceException : AmazonServiceException {
    public AmazonSimpleNotificationServiceException(string message);
    public AmazonSimpleNotificationServiceException(string message, Exception innerException);
    public AmazonSimpleNotificationServiceException(Exception innerException);
    public AmazonSimpleNotificationServiceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonSimpleNotificationServiceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceRequest : AmazonWebServiceRequest {
}
public class Amazon.SimpleNotificationService.Endpoints.SimpleNotificationServiceEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public interface Amazon.SimpleNotificationService.IAmazonSimpleNotificationService {
    public ISimpleNotificationServicePaginatorFactory Paginators { get; }
    public abstract virtual Task`1<string> SubscribeQueueAsync(string topicArn, ICoreAmazonSQS sqsClient, string sqsQueueUrl);
    public abstract virtual Task`1<IDictionary`2<string, string>> SubscribeQueueToTopicsAsync(IList`1<string> topicArns, ICoreAmazonSQS sqsClient, string sqsQueueUrl);
    public abstract virtual Task`1<Topic> FindTopicAsync(string topicName);
    public abstract virtual Task AuthorizeS3ToPublishAsync(string topicArn, string bucket);
    public abstract virtual ISimpleNotificationServicePaginatorFactory get_Paginators();
    public abstract virtual Task`1<AddPermissionResponse> AddPermissionAsync(string topicArn, string label, List`1<string> awsAccountId, List`1<string> actionName, CancellationToken cancellationToken);
    public abstract virtual Task`1<AddPermissionResponse> AddPermissionAsync(AddPermissionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CheckIfPhoneNumberIsOptedOutResponse> CheckIfPhoneNumberIsOptedOutAsync(CheckIfPhoneNumberIsOptedOutRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(string topicArn, string token, string authenticateOnUnsubscribe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(string topicArn, string token, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConfirmSubscriptionResponse> ConfirmSubscriptionAsync(ConfirmSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreatePlatformApplicationResponse> CreatePlatformApplicationAsync(CreatePlatformApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreatePlatformEndpointResponse> CreatePlatformEndpointAsync(CreatePlatformEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSMSSandboxPhoneNumberResponse> CreateSMSSandboxPhoneNumberAsync(CreateSMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTopicResponse> CreateTopicAsync(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTopicResponse> CreateTopicAsync(CreateTopicRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteEndpointResponse> DeleteEndpointAsync(DeleteEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePlatformApplicationResponse> DeletePlatformApplicationAsync(DeletePlatformApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSMSSandboxPhoneNumberResponse> DeleteSMSSandboxPhoneNumberAsync(DeleteSMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTopicResponse> DeleteTopicAsync(string topicArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTopicResponse> DeleteTopicAsync(DeleteTopicRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetDataProtectionPolicyResponse> GetDataProtectionPolicyAsync(GetDataProtectionPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetEndpointAttributesResponse> GetEndpointAttributesAsync(GetEndpointAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetPlatformApplicationAttributesResponse> GetPlatformApplicationAttributesAsync(GetPlatformApplicationAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSMSAttributesResponse> GetSMSAttributesAsync(GetSMSAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSMSSandboxAccountStatusResponse> GetSMSSandboxAccountStatusAsync(GetSMSSandboxAccountStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(string subscriptionArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(GetSubscriptionAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTopicAttributesResponse> GetTopicAttributesAsync(string topicArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTopicAttributesResponse> GetTopicAttributesAsync(GetTopicAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListEndpointsByPlatformApplicationResponse> ListEndpointsByPlatformApplicationAsync(ListEndpointsByPlatformApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListOriginationNumbersResponse> ListOriginationNumbersAsync(ListOriginationNumbersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPhoneNumbersOptedOutResponse> ListPhoneNumbersOptedOutAsync(ListPhoneNumbersOptedOutRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPlatformApplicationsResponse> ListPlatformApplicationsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPlatformApplicationsResponse> ListPlatformApplicationsAsync(ListPlatformApplicationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSMSSandboxPhoneNumbersResponse> ListSMSSandboxPhoneNumbersAsync(ListSMSSandboxPhoneNumbersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(string nextToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsResponse> ListSubscriptionsAsync(ListSubscriptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn, string nextToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(ListSubscriptionsByTopicRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTopicsResponse> ListTopicsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTopicsResponse> ListTopicsAsync(string nextToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTopicsResponse> ListTopicsAsync(ListTopicsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<OptInPhoneNumberResponse> OptInPhoneNumberAsync(OptInPhoneNumberRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PublishResponse> PublishAsync(string topicArn, string message, CancellationToken cancellationToken);
    public abstract virtual Task`1<PublishResponse> PublishAsync(string topicArn, string message, string subject, CancellationToken cancellationToken);
    public abstract virtual Task`1<PublishResponse> PublishAsync(PublishRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PublishBatchResponse> PublishBatchAsync(PublishBatchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutDataProtectionPolicyResponse> PutDataProtectionPolicyAsync(PutDataProtectionPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(string topicArn, string label, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetEndpointAttributesResponse> SetEndpointAttributesAsync(SetEndpointAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetPlatformApplicationAttributesResponse> SetPlatformApplicationAttributesAsync(SetPlatformApplicationAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetSMSAttributesResponse> SetSMSAttributesAsync(SetSMSAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(string subscriptionArn, string attributeName, string attributeValue, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(SetSubscriptionAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetTopicAttributesResponse> SetTopicAttributesAsync(string topicArn, string attributeName, string attributeValue, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetTopicAttributesResponse> SetTopicAttributesAsync(SetTopicAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SubscribeResponse> SubscribeAsync(string topicArn, string protocol, string endpoint, CancellationToken cancellationToken);
    public abstract virtual Task`1<SubscribeResponse> SubscribeAsync(SubscribeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UnsubscribeResponse> UnsubscribeAsync(string subscriptionArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<UnsubscribeResponse> UnsubscribeAsync(UnsubscribeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<VerifySMSSandboxPhoneNumberResponse> VerifySMSSandboxPhoneNumberAsync(VerifySMSSandboxPhoneNumberRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.SimpleNotificationService.Internal.AmazonSimpleNotificationServiceEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.SimpleNotificationService.Internal.AmazonSimpleNotificationServiceEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.SimpleNotificationService.Internal.AmazonSimpleNotificationServiceMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.SimpleNotificationService.LanguageCodeString : ConstantClass {
    public static LanguageCodeString DeDE;
    public static LanguageCodeString EnGB;
    public static LanguageCodeString EnUS;
    public static LanguageCodeString Es419;
    public static LanguageCodeString EsES;
    public static LanguageCodeString FrCA;
    public static LanguageCodeString FrFR;
    public static LanguageCodeString ItIT;
    public static LanguageCodeString JaJP;
    public static LanguageCodeString KrKR;
    public static LanguageCodeString PtBR;
    public static LanguageCodeString ZhCN;
    public static LanguageCodeString ZhTW;
    public LanguageCodeString(string value);
    private static LanguageCodeString();
    public static LanguageCodeString FindValue(string value);
    public static LanguageCodeString op_Implicit(string value);
}
public class Amazon.SimpleNotificationService.Model.AddPermissionRequest : AmazonSimpleNotificationServiceRequest {
    private List`1<string> _actionName;
    private List`1<string> _awsAccountId;
    private string _label;
    private string _topicArn;
    [AWSPropertyAttribute]
public List`1<string> ActionName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> AWSAccountId { get; public set; }
    [AWSPropertyAttribute]
public string Label { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public AddPermissionRequest(string topicArn, string label, List`1<string> awsAccountId, List`1<string> actionName);
    public List`1<string> get_ActionName();
    public void set_ActionName(List`1<string> value);
    internal bool IsSetActionName();
    public List`1<string> get_AWSAccountId();
    public void set_AWSAccountId(List`1<string> value);
    internal bool IsSetAWSAccountId();
    public string get_Label();
    public void set_Label(string value);
    internal bool IsSetLabel();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.AddPermissionResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.AuthorizationErrorException : AmazonSimpleNotificationServiceException {
    public AuthorizationErrorException(string message);
    public AuthorizationErrorException(string message, Exception innerException);
    public AuthorizationErrorException(Exception innerException);
    public AuthorizationErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.BatchEntryIdsNotDistinctException : AmazonSimpleNotificationServiceException {
    public BatchEntryIdsNotDistinctException(string message);
    public BatchEntryIdsNotDistinctException(string message, Exception innerException);
    public BatchEntryIdsNotDistinctException(Exception innerException);
    public BatchEntryIdsNotDistinctException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BatchEntryIdsNotDistinctException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.BatchRequestTooLongException : AmazonSimpleNotificationServiceException {
    public BatchRequestTooLongException(string message);
    public BatchRequestTooLongException(string message, Exception innerException);
    public BatchRequestTooLongException(Exception innerException);
    public BatchRequestTooLongException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BatchRequestTooLongException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.BatchResultErrorEntry : object {
    private string _code;
    private string _id;
    private string _message;
    private Nullable`1<bool> _senderFault;
    [AWSPropertyAttribute]
public string Code { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string Message { get; public set; }
    [AWSPropertyAttribute]
public bool SenderFault { get; public set; }
    public string get_Code();
    public void set_Code(string value);
    internal bool IsSetCode();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public bool get_SenderFault();
    public void set_SenderFault(bool value);
    internal bool IsSetSenderFault();
}
public class Amazon.SimpleNotificationService.Model.CheckIfPhoneNumberIsOptedOutRequest : AmazonSimpleNotificationServiceRequest {
    private string _phoneNumber;
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
}
public class Amazon.SimpleNotificationService.Model.CheckIfPhoneNumberIsOptedOutResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isOptedOut;
    public bool IsOptedOut { get; public set; }
    public bool get_IsOptedOut();
    public void set_IsOptedOut(bool value);
    internal bool IsSetIsOptedOut();
}
public class Amazon.SimpleNotificationService.Model.ConcurrentAccessException : AmazonSimpleNotificationServiceException {
    public ConcurrentAccessException(string message);
    public ConcurrentAccessException(string message, Exception innerException);
    public ConcurrentAccessException(Exception innerException);
    public ConcurrentAccessException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConcurrentAccessException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.ConfirmSubscriptionRequest : AmazonSimpleNotificationServiceRequest {
    private string _authenticateOnUnsubscribe;
    private string _token;
    private string _topicArn;
    public string AuthenticateOnUnsubscribe { get; public set; }
    [AWSPropertyAttribute]
public string Token { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public ConfirmSubscriptionRequest(string topicArn, string token);
    public ConfirmSubscriptionRequest(string topicArn, string token, string authenticateOnUnsubscribe);
    public string get_AuthenticateOnUnsubscribe();
    public void set_AuthenticateOnUnsubscribe(string value);
    internal bool IsSetAuthenticateOnUnsubscribe();
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.ConfirmSubscriptionResponse : AmazonWebServiceResponse {
    private string _subscriptionArn;
    public string SubscriptionArn { get; public set; }
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
}
public class Amazon.SimpleNotificationService.Model.CreatePlatformApplicationRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _name;
    private string _platform;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Attributes { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Platform { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Platform();
    public void set_Platform(string value);
    internal bool IsSetPlatform();
}
public class Amazon.SimpleNotificationService.Model.CreatePlatformApplicationResponse : AmazonWebServiceResponse {
    private string _platformApplicationArn;
    public string PlatformApplicationArn { get; public set; }
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.CreatePlatformEndpointRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _customUserData;
    private string _platformApplicationArn;
    private string _token;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public string CustomUserData { get; public set; }
    [AWSPropertyAttribute]
public string PlatformApplicationArn { get; public set; }
    [AWSPropertyAttribute]
public string Token { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_CustomUserData();
    public void set_CustomUserData(string value);
    internal bool IsSetCustomUserData();
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
}
public class Amazon.SimpleNotificationService.Model.CreatePlatformEndpointResponse : AmazonWebServiceResponse {
    private string _endpointArn;
    public string EndpointArn { get; public set; }
    public string get_EndpointArn();
    public void set_EndpointArn(string value);
    internal bool IsSetEndpointArn();
}
public class Amazon.SimpleNotificationService.Model.CreateSMSSandboxPhoneNumberRequest : AmazonSimpleNotificationServiceRequest {
    private LanguageCodeString _languageCode;
    private string _phoneNumber;
    public LanguageCodeString LanguageCode { get; public set; }
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public LanguageCodeString get_LanguageCode();
    public void set_LanguageCode(LanguageCodeString value);
    internal bool IsSetLanguageCode();
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
}
public class Amazon.SimpleNotificationService.Model.CreateSMSSandboxPhoneNumberResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.CreateTopicRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _dataProtectionPolicy;
    private string _name;
    private List`1<Tag> _tags;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public string DataProtectionPolicy { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public CreateTopicRequest(string name);
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_DataProtectionPolicy();
    public void set_DataProtectionPolicy(string value);
    internal bool IsSetDataProtectionPolicy();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.SimpleNotificationService.Model.CreateTopicResponse : AmazonWebServiceResponse {
    private string _topicArn;
    public string TopicArn { get; public set; }
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.DeleteEndpointRequest : AmazonSimpleNotificationServiceRequest {
    private string _endpointArn;
    [AWSPropertyAttribute]
public string EndpointArn { get; public set; }
    public string get_EndpointArn();
    public void set_EndpointArn(string value);
    internal bool IsSetEndpointArn();
}
public class Amazon.SimpleNotificationService.Model.DeleteEndpointResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.DeletePlatformApplicationRequest : AmazonSimpleNotificationServiceRequest {
    private string _platformApplicationArn;
    [AWSPropertyAttribute]
public string PlatformApplicationArn { get; public set; }
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.DeletePlatformApplicationResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.DeleteSMSSandboxPhoneNumberRequest : AmazonSimpleNotificationServiceRequest {
    private string _phoneNumber;
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
}
public class Amazon.SimpleNotificationService.Model.DeleteSMSSandboxPhoneNumberResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.DeleteTopicRequest : AmazonSimpleNotificationServiceRequest {
    private string _topicArn;
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public DeleteTopicRequest(string topicArn);
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.DeleteTopicResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.EmptyBatchRequestException : AmazonSimpleNotificationServiceException {
    public EmptyBatchRequestException(string message);
    public EmptyBatchRequestException(string message, Exception innerException);
    public EmptyBatchRequestException(Exception innerException);
    public EmptyBatchRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EmptyBatchRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.Endpoint : object {
    private Dictionary`2<string, string> _attributes;
    private string _endpointArn;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public string EndpointArn { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_EndpointArn();
    public void set_EndpointArn(string value);
    internal bool IsSetEndpointArn();
}
public class Amazon.SimpleNotificationService.Model.EndpointDisabledException : AmazonSimpleNotificationServiceException {
    public EndpointDisabledException(string message);
    public EndpointDisabledException(string message, Exception innerException);
    public EndpointDisabledException(Exception innerException);
    public EndpointDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.FilterPolicyLimitExceededException : AmazonSimpleNotificationServiceException {
    public FilterPolicyLimitExceededException(string message);
    public FilterPolicyLimitExceededException(string message, Exception innerException);
    public FilterPolicyLimitExceededException(Exception innerException);
    public FilterPolicyLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public FilterPolicyLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.GetDataProtectionPolicyRequest : AmazonSimpleNotificationServiceRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.SimpleNotificationService.Model.GetDataProtectionPolicyResponse : AmazonWebServiceResponse {
    private string _dataProtectionPolicy;
    public string DataProtectionPolicy { get; public set; }
    public string get_DataProtectionPolicy();
    public void set_DataProtectionPolicy(string value);
    internal bool IsSetDataProtectionPolicy();
}
public class Amazon.SimpleNotificationService.Model.GetEndpointAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _endpointArn;
    [AWSPropertyAttribute]
public string EndpointArn { get; public set; }
    public string get_EndpointArn();
    public void set_EndpointArn(string value);
    internal bool IsSetEndpointArn();
}
public class Amazon.SimpleNotificationService.Model.GetEndpointAttributesResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _attributes;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.GetPlatformApplicationAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _platformApplicationArn;
    [AWSPropertyAttribute]
public string PlatformApplicationArn { get; public set; }
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.GetPlatformApplicationAttributesResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _attributes;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.GetSMSAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private List`1<string> _attributes;
    public List`1<string> Attributes { get; public set; }
    public List`1<string> get_Attributes();
    public void set_Attributes(List`1<string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.GetSMSAttributesResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _attributes;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.GetSMSSandboxAccountStatusRequest : AmazonSimpleNotificationServiceRequest {
}
public class Amazon.SimpleNotificationService.Model.GetSMSSandboxAccountStatusResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isInSandbox;
    [AWSPropertyAttribute]
public bool IsInSandbox { get; public set; }
    public bool get_IsInSandbox();
    public void set_IsInSandbox(bool value);
    internal bool IsSetIsInSandbox();
}
public class Amazon.SimpleNotificationService.Model.GetSubscriptionAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _subscriptionArn;
    [AWSPropertyAttribute]
public string SubscriptionArn { get; public set; }
    public GetSubscriptionAttributesRequest(string subscriptionArn);
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
}
public class Amazon.SimpleNotificationService.Model.GetSubscriptionAttributesResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _attributes;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.GetTopicAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _topicArn;
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public GetTopicAttributesRequest(string topicArn);
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.GetTopicAttributesResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _attributes;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public interface Amazon.SimpleNotificationService.Model.IListEndpointsByPlatformApplicationPaginator {
    public IPaginatedEnumerable`1<ListEndpointsByPlatformApplicationResponse> Responses { get; }
    public IPaginatedEnumerable`1<Endpoint> Endpoints { get; }
    public abstract virtual IPaginatedEnumerable`1<ListEndpointsByPlatformApplicationResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Endpoint> get_Endpoints();
}
public interface Amazon.SimpleNotificationService.Model.IListOriginationNumbersPaginator {
    public IPaginatedEnumerable`1<ListOriginationNumbersResponse> Responses { get; }
    public IPaginatedEnumerable`1<PhoneNumberInformation> PhoneNumbers { get; }
    public abstract virtual IPaginatedEnumerable`1<ListOriginationNumbersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PhoneNumberInformation> get_PhoneNumbers();
}
public interface Amazon.SimpleNotificationService.Model.IListPhoneNumbersOptedOutPaginator {
    public IPaginatedEnumerable`1<ListPhoneNumbersOptedOutResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PhoneNumbers { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPhoneNumbersOptedOutResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_PhoneNumbers();
}
public interface Amazon.SimpleNotificationService.Model.IListPlatformApplicationsPaginator {
    public IPaginatedEnumerable`1<ListPlatformApplicationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PlatformApplication> PlatformApplications { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPlatformApplicationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PlatformApplication> get_PlatformApplications();
}
public interface Amazon.SimpleNotificationService.Model.IListSMSSandboxPhoneNumbersPaginator {
    public IPaginatedEnumerable`1<ListSMSSandboxPhoneNumbersResponse> Responses { get; }
    public IPaginatedEnumerable`1<SMSSandboxPhoneNumber> PhoneNumbers { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSMSSandboxPhoneNumbersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<SMSSandboxPhoneNumber> get_PhoneNumbers();
}
public interface Amazon.SimpleNotificationService.Model.IListSubscriptionsByTopicPaginator {
    public IPaginatedEnumerable`1<ListSubscriptionsByTopicResponse> Responses { get; }
    public IPaginatedEnumerable`1<Subscription> Subscriptions { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSubscriptionsByTopicResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Subscription> get_Subscriptions();
}
public interface Amazon.SimpleNotificationService.Model.IListSubscriptionsPaginator {
    public IPaginatedEnumerable`1<ListSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Subscription> Subscriptions { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSubscriptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Subscription> get_Subscriptions();
}
public interface Amazon.SimpleNotificationService.Model.IListTopicsPaginator {
    public IPaginatedEnumerable`1<ListTopicsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Topic> Topics { get; }
    public abstract virtual IPaginatedEnumerable`1<ListTopicsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Topic> get_Topics();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.AddPermissionRequestMarshaller : object {
    private static AddPermissionRequestMarshaller _instance;
    public static AddPermissionRequestMarshaller Instance { get; }
    private static AddPermissionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddPermissionRequest publicRequest);
    internal static AddPermissionRequestMarshaller GetInstance();
    public static AddPermissionRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.AddPermissionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddPermissionResponseUnmarshaller _instance;
    public static AddPermissionResponseUnmarshaller Instance { get; }
    private static AddPermissionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddPermissionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddPermissionResponseUnmarshaller GetInstance();
    public static AddPermissionResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.AuthorizationErrorExceptionUnmarshaller : object {
    private static AuthorizationErrorExceptionUnmarshaller _instance;
    public static AuthorizationErrorExceptionUnmarshaller Instance { get; }
    private static AuthorizationErrorExceptionUnmarshaller();
    public sealed virtual AuthorizationErrorException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationErrorException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.BatchEntryIdsNotDistinctExceptionUnmarshaller : object {
    private static BatchEntryIdsNotDistinctExceptionUnmarshaller _instance;
    public static BatchEntryIdsNotDistinctExceptionUnmarshaller Instance { get; }
    private static BatchEntryIdsNotDistinctExceptionUnmarshaller();
    public sealed virtual BatchEntryIdsNotDistinctException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchEntryIdsNotDistinctException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BatchEntryIdsNotDistinctExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.BatchRequestTooLongExceptionUnmarshaller : object {
    private static BatchRequestTooLongExceptionUnmarshaller _instance;
    public static BatchRequestTooLongExceptionUnmarshaller Instance { get; }
    private static BatchRequestTooLongExceptionUnmarshaller();
    public sealed virtual BatchRequestTooLongException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchRequestTooLongException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BatchRequestTooLongExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.BatchResultErrorEntryUnmarshaller : object {
    private static BatchResultErrorEntryUnmarshaller _instance;
    public static BatchResultErrorEntryUnmarshaller Instance { get; }
    private static BatchResultErrorEntryUnmarshaller();
    public sealed virtual BatchResultErrorEntry Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchResultErrorEntry Unmarshall(JsonUnmarshallerContext context);
    public static BatchResultErrorEntryUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CheckIfPhoneNumberIsOptedOutRequestMarshaller : object {
    private static CheckIfPhoneNumberIsOptedOutRequestMarshaller _instance;
    public static CheckIfPhoneNumberIsOptedOutRequestMarshaller Instance { get; }
    private static CheckIfPhoneNumberIsOptedOutRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CheckIfPhoneNumberIsOptedOutRequest publicRequest);
    internal static CheckIfPhoneNumberIsOptedOutRequestMarshaller GetInstance();
    public static CheckIfPhoneNumberIsOptedOutRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CheckIfPhoneNumberIsOptedOutResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CheckIfPhoneNumberIsOptedOutResponseUnmarshaller _instance;
    public static CheckIfPhoneNumberIsOptedOutResponseUnmarshaller Instance { get; }
    private static CheckIfPhoneNumberIsOptedOutResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CheckIfPhoneNumberIsOptedOutResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CheckIfPhoneNumberIsOptedOutResponseUnmarshaller GetInstance();
    public static CheckIfPhoneNumberIsOptedOutResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ConcurrentAccessExceptionUnmarshaller : object {
    private static ConcurrentAccessExceptionUnmarshaller _instance;
    public static ConcurrentAccessExceptionUnmarshaller Instance { get; }
    private static ConcurrentAccessExceptionUnmarshaller();
    public sealed virtual ConcurrentAccessException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConcurrentAccessException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConcurrentAccessExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ConfirmSubscriptionRequestMarshaller : object {
    private static ConfirmSubscriptionRequestMarshaller _instance;
    public static ConfirmSubscriptionRequestMarshaller Instance { get; }
    private static ConfirmSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ConfirmSubscriptionRequest publicRequest);
    internal static ConfirmSubscriptionRequestMarshaller GetInstance();
    public static ConfirmSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ConfirmSubscriptionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ConfirmSubscriptionResponseUnmarshaller _instance;
    public static ConfirmSubscriptionResponseUnmarshaller Instance { get; }
    private static ConfirmSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ConfirmSubscriptionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ConfirmSubscriptionResponseUnmarshaller GetInstance();
    public static ConfirmSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreatePlatformApplicationRequestMarshaller : object {
    private static CreatePlatformApplicationRequestMarshaller _instance;
    public static CreatePlatformApplicationRequestMarshaller Instance { get; }
    private static CreatePlatformApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePlatformApplicationRequest publicRequest);
    internal static CreatePlatformApplicationRequestMarshaller GetInstance();
    public static CreatePlatformApplicationRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreatePlatformApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreatePlatformApplicationResponseUnmarshaller _instance;
    public static CreatePlatformApplicationResponseUnmarshaller Instance { get; }
    private static CreatePlatformApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreatePlatformApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePlatformApplicationResponseUnmarshaller GetInstance();
    public static CreatePlatformApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreatePlatformEndpointRequestMarshaller : object {
    private static CreatePlatformEndpointRequestMarshaller _instance;
    public static CreatePlatformEndpointRequestMarshaller Instance { get; }
    private static CreatePlatformEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePlatformEndpointRequest publicRequest);
    internal static CreatePlatformEndpointRequestMarshaller GetInstance();
    public static CreatePlatformEndpointRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreatePlatformEndpointResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreatePlatformEndpointResponseUnmarshaller _instance;
    public static CreatePlatformEndpointResponseUnmarshaller Instance { get; }
    private static CreatePlatformEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreatePlatformEndpointResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePlatformEndpointResponseUnmarshaller GetInstance();
    public static CreatePlatformEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreateSMSSandboxPhoneNumberRequestMarshaller : object {
    private static CreateSMSSandboxPhoneNumberRequestMarshaller _instance;
    public static CreateSMSSandboxPhoneNumberRequestMarshaller Instance { get; }
    private static CreateSMSSandboxPhoneNumberRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSMSSandboxPhoneNumberRequest publicRequest);
    internal static CreateSMSSandboxPhoneNumberRequestMarshaller GetInstance();
    public static CreateSMSSandboxPhoneNumberRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreateSMSSandboxPhoneNumberResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSMSSandboxPhoneNumberResponseUnmarshaller _instance;
    public static CreateSMSSandboxPhoneNumberResponseUnmarshaller Instance { get; }
    private static CreateSMSSandboxPhoneNumberResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSMSSandboxPhoneNumberResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSMSSandboxPhoneNumberResponseUnmarshaller GetInstance();
    public static CreateSMSSandboxPhoneNumberResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreateTopicRequestMarshaller : object {
    private static CreateTopicRequestMarshaller _instance;
    public static CreateTopicRequestMarshaller Instance { get; }
    private static CreateTopicRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTopicRequest publicRequest);
    internal static CreateTopicRequestMarshaller GetInstance();
    public static CreateTopicRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.CreateTopicResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateTopicResponseUnmarshaller _instance;
    public static CreateTopicResponseUnmarshaller Instance { get; }
    private static CreateTopicResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateTopicResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTopicResponseUnmarshaller GetInstance();
    public static CreateTopicResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteEndpointRequestMarshaller : object {
    private static DeleteEndpointRequestMarshaller _instance;
    public static DeleteEndpointRequestMarshaller Instance { get; }
    private static DeleteEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEndpointRequest publicRequest);
    internal static DeleteEndpointRequestMarshaller GetInstance();
    public static DeleteEndpointRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteEndpointResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteEndpointResponseUnmarshaller _instance;
    public static DeleteEndpointResponseUnmarshaller Instance { get; }
    private static DeleteEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteEndpointResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEndpointResponseUnmarshaller GetInstance();
    public static DeleteEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeletePlatformApplicationRequestMarshaller : object {
    private static DeletePlatformApplicationRequestMarshaller _instance;
    public static DeletePlatformApplicationRequestMarshaller Instance { get; }
    private static DeletePlatformApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePlatformApplicationRequest publicRequest);
    internal static DeletePlatformApplicationRequestMarshaller GetInstance();
    public static DeletePlatformApplicationRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeletePlatformApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeletePlatformApplicationResponseUnmarshaller _instance;
    public static DeletePlatformApplicationResponseUnmarshaller Instance { get; }
    private static DeletePlatformApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeletePlatformApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePlatformApplicationResponseUnmarshaller GetInstance();
    public static DeletePlatformApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteSMSSandboxPhoneNumberRequestMarshaller : object {
    private static DeleteSMSSandboxPhoneNumberRequestMarshaller _instance;
    public static DeleteSMSSandboxPhoneNumberRequestMarshaller Instance { get; }
    private static DeleteSMSSandboxPhoneNumberRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSMSSandboxPhoneNumberRequest publicRequest);
    internal static DeleteSMSSandboxPhoneNumberRequestMarshaller GetInstance();
    public static DeleteSMSSandboxPhoneNumberRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteSMSSandboxPhoneNumberResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSMSSandboxPhoneNumberResponseUnmarshaller _instance;
    public static DeleteSMSSandboxPhoneNumberResponseUnmarshaller Instance { get; }
    private static DeleteSMSSandboxPhoneNumberResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSMSSandboxPhoneNumberResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSMSSandboxPhoneNumberResponseUnmarshaller GetInstance();
    public static DeleteSMSSandboxPhoneNumberResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteTopicRequestMarshaller : object {
    private static DeleteTopicRequestMarshaller _instance;
    public static DeleteTopicRequestMarshaller Instance { get; }
    private static DeleteTopicRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTopicRequest publicRequest);
    internal static DeleteTopicRequestMarshaller GetInstance();
    public static DeleteTopicRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.DeleteTopicResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteTopicResponseUnmarshaller _instance;
    public static DeleteTopicResponseUnmarshaller Instance { get; }
    private static DeleteTopicResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteTopicResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTopicResponseUnmarshaller GetInstance();
    public static DeleteTopicResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.EmptyBatchRequestExceptionUnmarshaller : object {
    private static EmptyBatchRequestExceptionUnmarshaller _instance;
    public static EmptyBatchRequestExceptionUnmarshaller Instance { get; }
    private static EmptyBatchRequestExceptionUnmarshaller();
    public sealed virtual EmptyBatchRequestException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EmptyBatchRequestException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EmptyBatchRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.EndpointDisabledExceptionUnmarshaller : object {
    private static EndpointDisabledExceptionUnmarshaller _instance;
    public static EndpointDisabledExceptionUnmarshaller Instance { get; }
    private static EndpointDisabledExceptionUnmarshaller();
    public sealed virtual EndpointDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.EndpointUnmarshaller : object {
    private static EndpointUnmarshaller _instance;
    public static EndpointUnmarshaller Instance { get; }
    private static EndpointUnmarshaller();
    public sealed virtual Endpoint Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Endpoint Unmarshall(JsonUnmarshallerContext context);
    public static EndpointUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.FilterPolicyLimitExceededExceptionUnmarshaller : object {
    private static FilterPolicyLimitExceededExceptionUnmarshaller _instance;
    public static FilterPolicyLimitExceededExceptionUnmarshaller Instance { get; }
    private static FilterPolicyLimitExceededExceptionUnmarshaller();
    public sealed virtual FilterPolicyLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FilterPolicyLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static FilterPolicyLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetDataProtectionPolicyRequestMarshaller : object {
    private static GetDataProtectionPolicyRequestMarshaller _instance;
    public static GetDataProtectionPolicyRequestMarshaller Instance { get; }
    private static GetDataProtectionPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetDataProtectionPolicyRequest publicRequest);
    internal static GetDataProtectionPolicyRequestMarshaller GetInstance();
    public static GetDataProtectionPolicyRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetDataProtectionPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetDataProtectionPolicyResponseUnmarshaller _instance;
    public static GetDataProtectionPolicyResponseUnmarshaller Instance { get; }
    private static GetDataProtectionPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetDataProtectionPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetDataProtectionPolicyResponseUnmarshaller GetInstance();
    public static GetDataProtectionPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetEndpointAttributesRequestMarshaller : object {
    private static GetEndpointAttributesRequestMarshaller _instance;
    public static GetEndpointAttributesRequestMarshaller Instance { get; }
    private static GetEndpointAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetEndpointAttributesRequest publicRequest);
    internal static GetEndpointAttributesRequestMarshaller GetInstance();
    public static GetEndpointAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetEndpointAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetEndpointAttributesResponseUnmarshaller _instance;
    public static GetEndpointAttributesResponseUnmarshaller Instance { get; }
    private static GetEndpointAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetEndpointAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetEndpointAttributesResponseUnmarshaller GetInstance();
    public static GetEndpointAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetPlatformApplicationAttributesRequestMarshaller : object {
    private static GetPlatformApplicationAttributesRequestMarshaller _instance;
    public static GetPlatformApplicationAttributesRequestMarshaller Instance { get; }
    private static GetPlatformApplicationAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetPlatformApplicationAttributesRequest publicRequest);
    internal static GetPlatformApplicationAttributesRequestMarshaller GetInstance();
    public static GetPlatformApplicationAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetPlatformApplicationAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetPlatformApplicationAttributesResponseUnmarshaller _instance;
    public static GetPlatformApplicationAttributesResponseUnmarshaller Instance { get; }
    private static GetPlatformApplicationAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetPlatformApplicationAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetPlatformApplicationAttributesResponseUnmarshaller GetInstance();
    public static GetPlatformApplicationAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSMSAttributesRequestMarshaller : object {
    private static GetSMSAttributesRequestMarshaller _instance;
    public static GetSMSAttributesRequestMarshaller Instance { get; }
    private static GetSMSAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSMSAttributesRequest publicRequest);
    internal static GetSMSAttributesRequestMarshaller GetInstance();
    public static GetSMSAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSMSAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSMSAttributesResponseUnmarshaller _instance;
    public static GetSMSAttributesResponseUnmarshaller Instance { get; }
    private static GetSMSAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSMSAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSMSAttributesResponseUnmarshaller GetInstance();
    public static GetSMSAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSMSSandboxAccountStatusRequestMarshaller : object {
    private static GetSMSSandboxAccountStatusRequestMarshaller _instance;
    public static GetSMSSandboxAccountStatusRequestMarshaller Instance { get; }
    private static GetSMSSandboxAccountStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSMSSandboxAccountStatusRequest publicRequest);
    internal static GetSMSSandboxAccountStatusRequestMarshaller GetInstance();
    public static GetSMSSandboxAccountStatusRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSMSSandboxAccountStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSMSSandboxAccountStatusResponseUnmarshaller _instance;
    public static GetSMSSandboxAccountStatusResponseUnmarshaller Instance { get; }
    private static GetSMSSandboxAccountStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSMSSandboxAccountStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSMSSandboxAccountStatusResponseUnmarshaller GetInstance();
    public static GetSMSSandboxAccountStatusResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSubscriptionAttributesRequestMarshaller : object {
    private static GetSubscriptionAttributesRequestMarshaller _instance;
    public static GetSubscriptionAttributesRequestMarshaller Instance { get; }
    private static GetSubscriptionAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSubscriptionAttributesRequest publicRequest);
    internal static GetSubscriptionAttributesRequestMarshaller GetInstance();
    public static GetSubscriptionAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetSubscriptionAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSubscriptionAttributesResponseUnmarshaller _instance;
    public static GetSubscriptionAttributesResponseUnmarshaller Instance { get; }
    private static GetSubscriptionAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSubscriptionAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSubscriptionAttributesResponseUnmarshaller GetInstance();
    public static GetSubscriptionAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetTopicAttributesRequestMarshaller : object {
    private static GetTopicAttributesRequestMarshaller _instance;
    public static GetTopicAttributesRequestMarshaller Instance { get; }
    private static GetTopicAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetTopicAttributesRequest publicRequest);
    internal static GetTopicAttributesRequestMarshaller GetInstance();
    public static GetTopicAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.GetTopicAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetTopicAttributesResponseUnmarshaller _instance;
    public static GetTopicAttributesResponseUnmarshaller Instance { get; }
    private static GetTopicAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetTopicAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetTopicAttributesResponseUnmarshaller GetInstance();
    public static GetTopicAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InternalErrorExceptionUnmarshaller : object {
    private static InternalErrorExceptionUnmarshaller _instance;
    public static InternalErrorExceptionUnmarshaller Instance { get; }
    private static InternalErrorExceptionUnmarshaller();
    public sealed virtual InternalErrorException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InternalErrorException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InternalErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InvalidBatchEntryIdExceptionUnmarshaller : object {
    private static InvalidBatchEntryIdExceptionUnmarshaller _instance;
    public static InvalidBatchEntryIdExceptionUnmarshaller Instance { get; }
    private static InvalidBatchEntryIdExceptionUnmarshaller();
    public sealed virtual InvalidBatchEntryIdException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidBatchEntryIdException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidBatchEntryIdExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller : object {
    private static InvalidParameterExceptionUnmarshaller _instance;
    public static InvalidParameterExceptionUnmarshaller Instance { get; }
    private static InvalidParameterExceptionUnmarshaller();
    public sealed virtual InvalidParameterException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidParameterException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InvalidParameterValueExceptionUnmarshaller : object {
    private static InvalidParameterValueExceptionUnmarshaller _instance;
    public static InvalidParameterValueExceptionUnmarshaller Instance { get; }
    private static InvalidParameterValueExceptionUnmarshaller();
    public sealed virtual InvalidParameterValueException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidParameterValueException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterValueExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InvalidSecurityExceptionUnmarshaller : object {
    private static InvalidSecurityExceptionUnmarshaller _instance;
    public static InvalidSecurityExceptionUnmarshaller Instance { get; }
    private static InvalidSecurityExceptionUnmarshaller();
    public sealed virtual InvalidSecurityException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSecurityException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSecurityExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.InvalidStateExceptionUnmarshaller : object {
    private static InvalidStateExceptionUnmarshaller _instance;
    public static InvalidStateExceptionUnmarshaller Instance { get; }
    private static InvalidStateExceptionUnmarshaller();
    public sealed virtual InvalidStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSAccessDeniedExceptionUnmarshaller : object {
    private static KMSAccessDeniedExceptionUnmarshaller _instance;
    public static KMSAccessDeniedExceptionUnmarshaller Instance { get; }
    private static KMSAccessDeniedExceptionUnmarshaller();
    public sealed virtual KMSAccessDeniedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSAccessDeniedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSAccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSDisabledExceptionUnmarshaller : object {
    private static KMSDisabledExceptionUnmarshaller _instance;
    public static KMSDisabledExceptionUnmarshaller Instance { get; }
    private static KMSDisabledExceptionUnmarshaller();
    public sealed virtual KMSDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller : object {
    private static KMSInvalidStateExceptionUnmarshaller _instance;
    public static KMSInvalidStateExceptionUnmarshaller Instance { get; }
    private static KMSInvalidStateExceptionUnmarshaller();
    public sealed virtual KMSInvalidStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSInvalidStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSInvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSNotFoundExceptionUnmarshaller : object {
    private static KMSNotFoundExceptionUnmarshaller _instance;
    public static KMSNotFoundExceptionUnmarshaller Instance { get; }
    private static KMSNotFoundExceptionUnmarshaller();
    public sealed virtual KMSNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSOptInRequiredExceptionUnmarshaller : object {
    private static KMSOptInRequiredExceptionUnmarshaller _instance;
    public static KMSOptInRequiredExceptionUnmarshaller Instance { get; }
    private static KMSOptInRequiredExceptionUnmarshaller();
    public sealed virtual KMSOptInRequiredException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSOptInRequiredException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSOptInRequiredExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.KMSThrottlingExceptionUnmarshaller : object {
    private static KMSThrottlingExceptionUnmarshaller _instance;
    public static KMSThrottlingExceptionUnmarshaller Instance { get; }
    private static KMSThrottlingExceptionUnmarshaller();
    public sealed virtual KMSThrottlingException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KMSThrottlingException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListEndpointsByPlatformApplicationRequestMarshaller : object {
    private static ListEndpointsByPlatformApplicationRequestMarshaller _instance;
    public static ListEndpointsByPlatformApplicationRequestMarshaller Instance { get; }
    private static ListEndpointsByPlatformApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEndpointsByPlatformApplicationRequest publicRequest);
    internal static ListEndpointsByPlatformApplicationRequestMarshaller GetInstance();
    public static ListEndpointsByPlatformApplicationRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListEndpointsByPlatformApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListEndpointsByPlatformApplicationResponseUnmarshaller _instance;
    public static ListEndpointsByPlatformApplicationResponseUnmarshaller Instance { get; }
    private static ListEndpointsByPlatformApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListEndpointsByPlatformApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEndpointsByPlatformApplicationResponseUnmarshaller GetInstance();
    public static ListEndpointsByPlatformApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListOriginationNumbersRequestMarshaller : object {
    private static ListOriginationNumbersRequestMarshaller _instance;
    public static ListOriginationNumbersRequestMarshaller Instance { get; }
    private static ListOriginationNumbersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListOriginationNumbersRequest publicRequest);
    internal static ListOriginationNumbersRequestMarshaller GetInstance();
    public static ListOriginationNumbersRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListOriginationNumbersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListOriginationNumbersResponseUnmarshaller _instance;
    public static ListOriginationNumbersResponseUnmarshaller Instance { get; }
    private static ListOriginationNumbersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListOriginationNumbersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListOriginationNumbersResponseUnmarshaller GetInstance();
    public static ListOriginationNumbersResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListPhoneNumbersOptedOutRequestMarshaller : object {
    private static ListPhoneNumbersOptedOutRequestMarshaller _instance;
    public static ListPhoneNumbersOptedOutRequestMarshaller Instance { get; }
    private static ListPhoneNumbersOptedOutRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPhoneNumbersOptedOutRequest publicRequest);
    internal static ListPhoneNumbersOptedOutRequestMarshaller GetInstance();
    public static ListPhoneNumbersOptedOutRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListPhoneNumbersOptedOutResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPhoneNumbersOptedOutResponseUnmarshaller _instance;
    public static ListPhoneNumbersOptedOutResponseUnmarshaller Instance { get; }
    private static ListPhoneNumbersOptedOutResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPhoneNumbersOptedOutResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPhoneNumbersOptedOutResponseUnmarshaller GetInstance();
    public static ListPhoneNumbersOptedOutResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListPlatformApplicationsRequestMarshaller : object {
    private static ListPlatformApplicationsRequestMarshaller _instance;
    public static ListPlatformApplicationsRequestMarshaller Instance { get; }
    private static ListPlatformApplicationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPlatformApplicationsRequest publicRequest);
    internal static ListPlatformApplicationsRequestMarshaller GetInstance();
    public static ListPlatformApplicationsRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListPlatformApplicationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPlatformApplicationsResponseUnmarshaller _instance;
    public static ListPlatformApplicationsResponseUnmarshaller Instance { get; }
    private static ListPlatformApplicationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPlatformApplicationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPlatformApplicationsResponseUnmarshaller GetInstance();
    public static ListPlatformApplicationsResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSMSSandboxPhoneNumbersRequestMarshaller : object {
    private static ListSMSSandboxPhoneNumbersRequestMarshaller _instance;
    public static ListSMSSandboxPhoneNumbersRequestMarshaller Instance { get; }
    private static ListSMSSandboxPhoneNumbersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSMSSandboxPhoneNumbersRequest publicRequest);
    internal static ListSMSSandboxPhoneNumbersRequestMarshaller GetInstance();
    public static ListSMSSandboxPhoneNumbersRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSMSSandboxPhoneNumbersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSMSSandboxPhoneNumbersResponseUnmarshaller _instance;
    public static ListSMSSandboxPhoneNumbersResponseUnmarshaller Instance { get; }
    private static ListSMSSandboxPhoneNumbersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSMSSandboxPhoneNumbersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSMSSandboxPhoneNumbersResponseUnmarshaller GetInstance();
    public static ListSMSSandboxPhoneNumbersResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSubscriptionsByTopicRequestMarshaller : object {
    private static ListSubscriptionsByTopicRequestMarshaller _instance;
    public static ListSubscriptionsByTopicRequestMarshaller Instance { get; }
    private static ListSubscriptionsByTopicRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSubscriptionsByTopicRequest publicRequest);
    internal static ListSubscriptionsByTopicRequestMarshaller GetInstance();
    public static ListSubscriptionsByTopicRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSubscriptionsByTopicResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSubscriptionsByTopicResponseUnmarshaller _instance;
    public static ListSubscriptionsByTopicResponseUnmarshaller Instance { get; }
    private static ListSubscriptionsByTopicResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSubscriptionsByTopicResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSubscriptionsByTopicResponseUnmarshaller GetInstance();
    public static ListSubscriptionsByTopicResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSubscriptionsRequestMarshaller : object {
    private static ListSubscriptionsRequestMarshaller _instance;
    public static ListSubscriptionsRequestMarshaller Instance { get; }
    private static ListSubscriptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSubscriptionsRequest publicRequest);
    internal static ListSubscriptionsRequestMarshaller GetInstance();
    public static ListSubscriptionsRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListSubscriptionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSubscriptionsResponseUnmarshaller _instance;
    public static ListSubscriptionsResponseUnmarshaller Instance { get; }
    private static ListSubscriptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSubscriptionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSubscriptionsResponseUnmarshaller GetInstance();
    public static ListSubscriptionsResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTagsForResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListTopicsRequestMarshaller : object {
    private static ListTopicsRequestMarshaller _instance;
    public static ListTopicsRequestMarshaller Instance { get; }
    private static ListTopicsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTopicsRequest publicRequest);
    internal static ListTopicsRequestMarshaller GetInstance();
    public static ListTopicsRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ListTopicsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTopicsResponseUnmarshaller _instance;
    public static ListTopicsResponseUnmarshaller Instance { get; }
    private static ListTopicsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTopicsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTopicsResponseUnmarshaller GetInstance();
    public static ListTopicsResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller : object {
    private static NotFoundExceptionUnmarshaller _instance;
    public static NotFoundExceptionUnmarshaller Instance { get; }
    private static NotFoundExceptionUnmarshaller();
    public sealed virtual NotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.OptedOutExceptionUnmarshaller : object {
    private static OptedOutExceptionUnmarshaller _instance;
    public static OptedOutExceptionUnmarshaller Instance { get; }
    private static OptedOutExceptionUnmarshaller();
    public sealed virtual OptedOutException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OptedOutException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static OptedOutExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.OptInPhoneNumberRequestMarshaller : object {
    private static OptInPhoneNumberRequestMarshaller _instance;
    public static OptInPhoneNumberRequestMarshaller Instance { get; }
    private static OptInPhoneNumberRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(OptInPhoneNumberRequest publicRequest);
    internal static OptInPhoneNumberRequestMarshaller GetInstance();
    public static OptInPhoneNumberRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.OptInPhoneNumberResponseUnmarshaller : XmlResponseUnmarshaller {
    private static OptInPhoneNumberResponseUnmarshaller _instance;
    public static OptInPhoneNumberResponseUnmarshaller Instance { get; }
    private static OptInPhoneNumberResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, OptInPhoneNumberResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static OptInPhoneNumberResponseUnmarshaller GetInstance();
    public static OptInPhoneNumberResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PhoneNumberInformationUnmarshaller : object {
    private static PhoneNumberInformationUnmarshaller _instance;
    public static PhoneNumberInformationUnmarshaller Instance { get; }
    private static PhoneNumberInformationUnmarshaller();
    public sealed virtual PhoneNumberInformation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PhoneNumberInformation Unmarshall(JsonUnmarshallerContext context);
    public static PhoneNumberInformationUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PlatformApplicationDisabledExceptionUnmarshaller : object {
    private static PlatformApplicationDisabledExceptionUnmarshaller _instance;
    public static PlatformApplicationDisabledExceptionUnmarshaller Instance { get; }
    private static PlatformApplicationDisabledExceptionUnmarshaller();
    public sealed virtual PlatformApplicationDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlatformApplicationDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PlatformApplicationDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PlatformApplicationUnmarshaller : object {
    private static PlatformApplicationUnmarshaller _instance;
    public static PlatformApplicationUnmarshaller Instance { get; }
    private static PlatformApplicationUnmarshaller();
    public sealed virtual PlatformApplication Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlatformApplication Unmarshall(JsonUnmarshallerContext context);
    public static PlatformApplicationUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PublishBatchRequestMarshaller : object {
    private static PublishBatchRequestMarshaller _instance;
    public static PublishBatchRequestMarshaller Instance { get; }
    private static PublishBatchRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PublishBatchRequest publicRequest);
    internal static PublishBatchRequestMarshaller GetInstance();
    public static PublishBatchRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PublishBatchResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PublishBatchResponseUnmarshaller _instance;
    public static PublishBatchResponseUnmarshaller Instance { get; }
    private static PublishBatchResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PublishBatchResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PublishBatchResponseUnmarshaller GetInstance();
    public static PublishBatchResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PublishBatchResultEntryUnmarshaller : object {
    private static PublishBatchResultEntryUnmarshaller _instance;
    public static PublishBatchResultEntryUnmarshaller Instance { get; }
    private static PublishBatchResultEntryUnmarshaller();
    public sealed virtual PublishBatchResultEntry Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PublishBatchResultEntry Unmarshall(JsonUnmarshallerContext context);
    public static PublishBatchResultEntryUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PublishRequestMarshaller : object {
    private static PublishRequestMarshaller _instance;
    public static PublishRequestMarshaller Instance { get; }
    private static PublishRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PublishRequest publicRequest);
    internal static PublishRequestMarshaller GetInstance();
    public static PublishRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PublishResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PublishResponseUnmarshaller _instance;
    public static PublishResponseUnmarshaller Instance { get; }
    private static PublishResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PublishResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PublishResponseUnmarshaller GetInstance();
    public static PublishResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PutDataProtectionPolicyRequestMarshaller : object {
    private static PutDataProtectionPolicyRequestMarshaller _instance;
    public static PutDataProtectionPolicyRequestMarshaller Instance { get; }
    private static PutDataProtectionPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutDataProtectionPolicyRequest publicRequest);
    internal static PutDataProtectionPolicyRequestMarshaller GetInstance();
    public static PutDataProtectionPolicyRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.PutDataProtectionPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutDataProtectionPolicyResponseUnmarshaller _instance;
    public static PutDataProtectionPolicyResponseUnmarshaller Instance { get; }
    private static PutDataProtectionPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutDataProtectionPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutDataProtectionPolicyResponseUnmarshaller GetInstance();
    public static PutDataProtectionPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller : object {
    private static RemovePermissionRequestMarshaller _instance;
    public static RemovePermissionRequestMarshaller Instance { get; }
    private static RemovePermissionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemovePermissionRequest publicRequest);
    internal static RemovePermissionRequestMarshaller GetInstance();
    public static RemovePermissionRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemovePermissionResponseUnmarshaller _instance;
    public static RemovePermissionResponseUnmarshaller Instance { get; }
    private static RemovePermissionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemovePermissionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemovePermissionResponseUnmarshaller GetInstance();
    public static RemovePermissionResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ReplayLimitExceededExceptionUnmarshaller : object {
    private static ReplayLimitExceededExceptionUnmarshaller _instance;
    public static ReplayLimitExceededExceptionUnmarshaller Instance { get; }
    private static ReplayLimitExceededExceptionUnmarshaller();
    public sealed virtual ReplayLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplayLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReplayLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetEndpointAttributesRequestMarshaller : object {
    private static SetEndpointAttributesRequestMarshaller _instance;
    public static SetEndpointAttributesRequestMarshaller Instance { get; }
    private static SetEndpointAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetEndpointAttributesRequest publicRequest);
    internal static SetEndpointAttributesRequestMarshaller GetInstance();
    public static SetEndpointAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetEndpointAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetEndpointAttributesResponseUnmarshaller _instance;
    public static SetEndpointAttributesResponseUnmarshaller Instance { get; }
    private static SetEndpointAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetEndpointAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetEndpointAttributesResponseUnmarshaller GetInstance();
    public static SetEndpointAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetPlatformApplicationAttributesRequestMarshaller : object {
    private static SetPlatformApplicationAttributesRequestMarshaller _instance;
    public static SetPlatformApplicationAttributesRequestMarshaller Instance { get; }
    private static SetPlatformApplicationAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetPlatformApplicationAttributesRequest publicRequest);
    internal static SetPlatformApplicationAttributesRequestMarshaller GetInstance();
    public static SetPlatformApplicationAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetPlatformApplicationAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetPlatformApplicationAttributesResponseUnmarshaller _instance;
    public static SetPlatformApplicationAttributesResponseUnmarshaller Instance { get; }
    private static SetPlatformApplicationAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetPlatformApplicationAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetPlatformApplicationAttributesResponseUnmarshaller GetInstance();
    public static SetPlatformApplicationAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetSMSAttributesRequestMarshaller : object {
    private static SetSMSAttributesRequestMarshaller _instance;
    public static SetSMSAttributesRequestMarshaller Instance { get; }
    private static SetSMSAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetSMSAttributesRequest publicRequest);
    internal static SetSMSAttributesRequestMarshaller GetInstance();
    public static SetSMSAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetSMSAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetSMSAttributesResponseUnmarshaller _instance;
    public static SetSMSAttributesResponseUnmarshaller Instance { get; }
    private static SetSMSAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetSMSAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetSMSAttributesResponseUnmarshaller GetInstance();
    public static SetSMSAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetSubscriptionAttributesRequestMarshaller : object {
    private static SetSubscriptionAttributesRequestMarshaller _instance;
    public static SetSubscriptionAttributesRequestMarshaller Instance { get; }
    private static SetSubscriptionAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetSubscriptionAttributesRequest publicRequest);
    internal static SetSubscriptionAttributesRequestMarshaller GetInstance();
    public static SetSubscriptionAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetSubscriptionAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetSubscriptionAttributesResponseUnmarshaller _instance;
    public static SetSubscriptionAttributesResponseUnmarshaller Instance { get; }
    private static SetSubscriptionAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetSubscriptionAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetSubscriptionAttributesResponseUnmarshaller GetInstance();
    public static SetSubscriptionAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetTopicAttributesRequestMarshaller : object {
    private static SetTopicAttributesRequestMarshaller _instance;
    public static SetTopicAttributesRequestMarshaller Instance { get; }
    private static SetTopicAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetTopicAttributesRequest publicRequest);
    internal static SetTopicAttributesRequestMarshaller GetInstance();
    public static SetTopicAttributesRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SetTopicAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetTopicAttributesResponseUnmarshaller _instance;
    public static SetTopicAttributesResponseUnmarshaller Instance { get; }
    private static SetTopicAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetTopicAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetTopicAttributesResponseUnmarshaller GetInstance();
    public static SetTopicAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SMSSandboxPhoneNumberUnmarshaller : object {
    private static SMSSandboxPhoneNumberUnmarshaller _instance;
    public static SMSSandboxPhoneNumberUnmarshaller Instance { get; }
    private static SMSSandboxPhoneNumberUnmarshaller();
    public sealed virtual SMSSandboxPhoneNumber Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SMSSandboxPhoneNumber Unmarshall(JsonUnmarshallerContext context);
    public static SMSSandboxPhoneNumberUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.StaleTagExceptionUnmarshaller : object {
    private static StaleTagExceptionUnmarshaller _instance;
    public static StaleTagExceptionUnmarshaller Instance { get; }
    private static StaleTagExceptionUnmarshaller();
    public sealed virtual StaleTagException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual StaleTagException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static StaleTagExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SubscribeRequestMarshaller : object {
    private static SubscribeRequestMarshaller _instance;
    public static SubscribeRequestMarshaller Instance { get; }
    private static SubscribeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SubscribeRequest publicRequest);
    internal static SubscribeRequestMarshaller GetInstance();
    public static SubscribeRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SubscribeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SubscribeResponseUnmarshaller _instance;
    public static SubscribeResponseUnmarshaller Instance { get; }
    private static SubscribeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SubscribeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SubscribeResponseUnmarshaller GetInstance();
    public static SubscribeResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SubscriptionLimitExceededExceptionUnmarshaller : object {
    private static SubscriptionLimitExceededExceptionUnmarshaller _instance;
    public static SubscriptionLimitExceededExceptionUnmarshaller Instance { get; }
    private static SubscriptionLimitExceededExceptionUnmarshaller();
    public sealed virtual SubscriptionLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.SubscriptionUnmarshaller : object {
    private static SubscriptionUnmarshaller _instance;
    public static SubscriptionUnmarshaller Instance { get; }
    private static SubscriptionUnmarshaller();
    public sealed virtual Subscription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Subscription Unmarshall(JsonUnmarshallerContext context);
    public static SubscriptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TagLimitExceededExceptionUnmarshaller : object {
    private static TagLimitExceededExceptionUnmarshaller _instance;
    public static TagLimitExceededExceptionUnmarshaller Instance { get; }
    private static TagLimitExceededExceptionUnmarshaller();
    public sealed virtual TagLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TagPolicyExceptionUnmarshaller : object {
    private static TagPolicyExceptionUnmarshaller _instance;
    public static TagPolicyExceptionUnmarshaller Instance { get; }
    private static TagPolicyExceptionUnmarshaller();
    public sealed virtual TagPolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagPolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ThrottledExceptionUnmarshaller : object {
    private static ThrottledExceptionUnmarshaller _instance;
    public static ThrottledExceptionUnmarshaller Instance { get; }
    private static ThrottledExceptionUnmarshaller();
    public sealed virtual ThrottledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ThrottledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ThrottledExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TooManyEntriesInBatchRequestExceptionUnmarshaller : object {
    private static TooManyEntriesInBatchRequestExceptionUnmarshaller _instance;
    public static TooManyEntriesInBatchRequestExceptionUnmarshaller Instance { get; }
    private static TooManyEntriesInBatchRequestExceptionUnmarshaller();
    public sealed virtual TooManyEntriesInBatchRequestException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyEntriesInBatchRequestException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyEntriesInBatchRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TopicLimitExceededExceptionUnmarshaller : object {
    private static TopicLimitExceededExceptionUnmarshaller _instance;
    public static TopicLimitExceededExceptionUnmarshaller Instance { get; }
    private static TopicLimitExceededExceptionUnmarshaller();
    public sealed virtual TopicLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TopicLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TopicLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.TopicUnmarshaller : object {
    private static TopicUnmarshaller _instance;
    public static TopicUnmarshaller Instance { get; }
    private static TopicUnmarshaller();
    public sealed virtual Topic Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Topic Unmarshall(JsonUnmarshallerContext context);
    public static TopicUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.UnsubscribeRequestMarshaller : object {
    private static UnsubscribeRequestMarshaller _instance;
    public static UnsubscribeRequestMarshaller Instance { get; }
    private static UnsubscribeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UnsubscribeRequest publicRequest);
    internal static UnsubscribeRequestMarshaller GetInstance();
    public static UnsubscribeRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.UnsubscribeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UnsubscribeResponseUnmarshaller _instance;
    public static UnsubscribeResponseUnmarshaller Instance { get; }
    private static UnsubscribeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UnsubscribeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UnsubscribeResponseUnmarshaller GetInstance();
    public static UnsubscribeResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.UserErrorExceptionUnmarshaller : object {
    private static UserErrorExceptionUnmarshaller _instance;
    public static UserErrorExceptionUnmarshaller Instance { get; }
    private static UserErrorExceptionUnmarshaller();
    public sealed virtual UserErrorException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserErrorException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.ValidationExceptionUnmarshaller : object {
    private static ValidationExceptionUnmarshaller _instance;
    public static ValidationExceptionUnmarshaller Instance { get; }
    private static ValidationExceptionUnmarshaller();
    public sealed virtual ValidationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ValidationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ValidationExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.VerificationExceptionUnmarshaller : object {
    private static VerificationExceptionUnmarshaller _instance;
    public static VerificationExceptionUnmarshaller Instance { get; }
    private static VerificationExceptionUnmarshaller();
    public sealed virtual VerificationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VerificationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static VerificationExceptionUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.VerifySMSSandboxPhoneNumberRequestMarshaller : object {
    private static VerifySMSSandboxPhoneNumberRequestMarshaller _instance;
    public static VerifySMSSandboxPhoneNumberRequestMarshaller Instance { get; }
    private static VerifySMSSandboxPhoneNumberRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(VerifySMSSandboxPhoneNumberRequest publicRequest);
    internal static VerifySMSSandboxPhoneNumberRequestMarshaller GetInstance();
    public static VerifySMSSandboxPhoneNumberRequestMarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.Internal.MarshallTransformations.VerifySMSSandboxPhoneNumberResponseUnmarshaller : XmlResponseUnmarshaller {
    private static VerifySMSSandboxPhoneNumberResponseUnmarshaller _instance;
    public static VerifySMSSandboxPhoneNumberResponseUnmarshaller Instance { get; }
    private static VerifySMSSandboxPhoneNumberResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, VerifySMSSandboxPhoneNumberResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static VerifySMSSandboxPhoneNumberResponseUnmarshaller GetInstance();
    public static VerifySMSSandboxPhoneNumberResponseUnmarshaller get_Instance();
}
public class Amazon.SimpleNotificationService.Model.InternalErrorException : AmazonSimpleNotificationServiceException {
    public InternalErrorException(string message);
    public InternalErrorException(string message, Exception innerException);
    public InternalErrorException(Exception innerException);
    public InternalErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InternalErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.InvalidBatchEntryIdException : AmazonSimpleNotificationServiceException {
    public InvalidBatchEntryIdException(string message);
    public InvalidBatchEntryIdException(string message, Exception innerException);
    public InvalidBatchEntryIdException(Exception innerException);
    public InvalidBatchEntryIdException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidBatchEntryIdException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.InvalidParameterException : AmazonSimpleNotificationServiceException {
    public InvalidParameterException(string message);
    public InvalidParameterException(string message, Exception innerException);
    public InvalidParameterException(Exception innerException);
    public InvalidParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.InvalidParameterValueException : AmazonSimpleNotificationServiceException {
    public InvalidParameterValueException(string message);
    public InvalidParameterValueException(string message, Exception innerException);
    public InvalidParameterValueException(Exception innerException);
    public InvalidParameterValueException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterValueException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.InvalidSecurityException : AmazonSimpleNotificationServiceException {
    public InvalidSecurityException(string message);
    public InvalidSecurityException(string message, Exception innerException);
    public InvalidSecurityException(Exception innerException);
    public InvalidSecurityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSecurityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.InvalidStateException : AmazonSimpleNotificationServiceException {
    public InvalidStateException(string message);
    public InvalidStateException(string message, Exception innerException);
    public InvalidStateException(Exception innerException);
    public InvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.SimpleNotificationService.Model.ISimpleNotificationServicePaginatorFactory {
    public abstract virtual IListEndpointsByPlatformApplicationPaginator ListEndpointsByPlatformApplication(ListEndpointsByPlatformApplicationRequest request);
    public abstract virtual IListOriginationNumbersPaginator ListOriginationNumbers(ListOriginationNumbersRequest request);
    public abstract virtual IListPhoneNumbersOptedOutPaginator ListPhoneNumbersOptedOut(ListPhoneNumbersOptedOutRequest request);
    public abstract virtual IListPlatformApplicationsPaginator ListPlatformApplications(ListPlatformApplicationsRequest request);
    public abstract virtual IListSMSSandboxPhoneNumbersPaginator ListSMSSandboxPhoneNumbers(ListSMSSandboxPhoneNumbersRequest request);
    public abstract virtual IListSubscriptionsPaginator ListSubscriptions(ListSubscriptionsRequest request);
    public abstract virtual IListSubscriptionsByTopicPaginator ListSubscriptionsByTopic(ListSubscriptionsByTopicRequest request);
    public abstract virtual IListTopicsPaginator ListTopics(ListTopicsRequest request);
}
public class Amazon.SimpleNotificationService.Model.KMSAccessDeniedException : AmazonSimpleNotificationServiceException {
    public KMSAccessDeniedException(string message);
    public KMSAccessDeniedException(string message, Exception innerException);
    public KMSAccessDeniedException(Exception innerException);
    public KMSAccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSAccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.KMSDisabledException : AmazonSimpleNotificationServiceException {
    public KMSDisabledException(string message);
    public KMSDisabledException(string message, Exception innerException);
    public KMSDisabledException(Exception innerException);
    public KMSDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.KMSInvalidStateException : AmazonSimpleNotificationServiceException {
    public KMSInvalidStateException(string message);
    public KMSInvalidStateException(string message, Exception innerException);
    public KMSInvalidStateException(Exception innerException);
    public KMSInvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSInvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.KMSNotFoundException : AmazonSimpleNotificationServiceException {
    public KMSNotFoundException(string message);
    public KMSNotFoundException(string message, Exception innerException);
    public KMSNotFoundException(Exception innerException);
    public KMSNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.KMSOptInRequiredException : AmazonSimpleNotificationServiceException {
    public KMSOptInRequiredException(string message);
    public KMSOptInRequiredException(string message, Exception innerException);
    public KMSOptInRequiredException(Exception innerException);
    public KMSOptInRequiredException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSOptInRequiredException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.KMSThrottlingException : AmazonSimpleNotificationServiceException {
    public KMSThrottlingException(string message);
    public KMSThrottlingException(string message, Exception innerException);
    public KMSThrottlingException(Exception innerException);
    public KMSThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
internal class Amazon.SimpleNotificationService.Model.ListEndpointsByPlatformApplicationPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListEndpointsByPlatformApplicationRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListEndpointsByPlatformApplicationResponse> Responses { get; }
    public IPaginatedEnumerable`1<Endpoint> Endpoints { get; }
    internal ListEndpointsByPlatformApplicationPaginator(IAmazonSimpleNotificationService client, ListEndpointsByPlatformApplicationRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListEndpointsByPlatformApplicationResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Endpoint> get_Endpoints();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListEndpointsByPlatformApplicationPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListEndpointsByPlatformApplicationResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListEndpointsByPlatformApplicationResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListEndpointsByPlatformApplicationResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListEndpointsByPlatformApplicationRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    private string _platformApplicationArn;
    public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string PlatformApplicationArn { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.ListEndpointsByPlatformApplicationResponse : AmazonWebServiceResponse {
    private List`1<Endpoint> _endpoints;
    private string _nextToken;
    public List`1<Endpoint> Endpoints { get; public set; }
    public string NextToken { get; public set; }
    public List`1<Endpoint> get_Endpoints();
    public void set_Endpoints(List`1<Endpoint> value);
    internal bool IsSetEndpoints();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.SimpleNotificationService.Model.ListOriginationNumbersPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListOriginationNumbersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListOriginationNumbersResponse> Responses { get; }
    public IPaginatedEnumerable`1<PhoneNumberInformation> PhoneNumbers { get; }
    internal ListOriginationNumbersPaginator(IAmazonSimpleNotificationService client, ListOriginationNumbersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListOriginationNumbersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PhoneNumberInformation> get_PhoneNumbers();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListOriginationNumbersPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListOriginationNumbersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListOriginationNumbersResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListOriginationNumbersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListOriginationNumbersRequest : AmazonSimpleNotificationServiceRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListOriginationNumbersResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<PhoneNumberInformation> _phoneNumbers;
    public string NextToken { get; public set; }
    public List`1<PhoneNumberInformation> PhoneNumbers { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<PhoneNumberInformation> get_PhoneNumbers();
    public void set_PhoneNumbers(List`1<PhoneNumberInformation> value);
    internal bool IsSetPhoneNumbers();
}
internal class Amazon.SimpleNotificationService.Model.ListPhoneNumbersOptedOutPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListPhoneNumbersOptedOutRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPhoneNumbersOptedOutResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PhoneNumbers { get; }
    internal ListPhoneNumbersOptedOutPaginator(IAmazonSimpleNotificationService client, ListPhoneNumbersOptedOutRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPhoneNumbersOptedOutResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_PhoneNumbers();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListPhoneNumbersOptedOutPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListPhoneNumbersOptedOutResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPhoneNumbersOptedOutResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListPhoneNumbersOptedOutResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListPhoneNumbersOptedOutRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    public string NextToken { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListPhoneNumbersOptedOutResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _phoneNumbers;
    public string NextToken { get; public set; }
    public List`1<string> PhoneNumbers { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_PhoneNumbers();
    public void set_PhoneNumbers(List`1<string> value);
    internal bool IsSetPhoneNumbers();
}
internal class Amazon.SimpleNotificationService.Model.ListPlatformApplicationsPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListPlatformApplicationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPlatformApplicationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PlatformApplication> PlatformApplications { get; }
    internal ListPlatformApplicationsPaginator(IAmazonSimpleNotificationService client, ListPlatformApplicationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPlatformApplicationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PlatformApplication> get_PlatformApplications();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListPlatformApplicationsPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListPlatformApplicationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPlatformApplicationsResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListPlatformApplicationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListPlatformApplicationsRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    public string NextToken { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListPlatformApplicationsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<PlatformApplication> _platformApplications;
    public string NextToken { get; public set; }
    public List`1<PlatformApplication> PlatformApplications { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<PlatformApplication> get_PlatformApplications();
    public void set_PlatformApplications(List`1<PlatformApplication> value);
    internal bool IsSetPlatformApplications();
}
internal class Amazon.SimpleNotificationService.Model.ListSMSSandboxPhoneNumbersPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListSMSSandboxPhoneNumbersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSMSSandboxPhoneNumbersResponse> Responses { get; }
    public IPaginatedEnumerable`1<SMSSandboxPhoneNumber> PhoneNumbers { get; }
    internal ListSMSSandboxPhoneNumbersPaginator(IAmazonSimpleNotificationService client, ListSMSSandboxPhoneNumbersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSMSSandboxPhoneNumbersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<SMSSandboxPhoneNumber> get_PhoneNumbers();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListSMSSandboxPhoneNumbersPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListSMSSandboxPhoneNumbersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSMSSandboxPhoneNumbersResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListSMSSandboxPhoneNumbersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListSMSSandboxPhoneNumbersRequest : AmazonSimpleNotificationServiceRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListSMSSandboxPhoneNumbersResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<SMSSandboxPhoneNumber> _phoneNumbers;
    public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<SMSSandboxPhoneNumber> PhoneNumbers { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<SMSSandboxPhoneNumber> get_PhoneNumbers();
    public void set_PhoneNumbers(List`1<SMSSandboxPhoneNumber> value);
    internal bool IsSetPhoneNumbers();
}
internal class Amazon.SimpleNotificationService.Model.ListSubscriptionsByTopicPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListSubscriptionsByTopicRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSubscriptionsByTopicResponse> Responses { get; }
    public IPaginatedEnumerable`1<Subscription> Subscriptions { get; }
    internal ListSubscriptionsByTopicPaginator(IAmazonSimpleNotificationService client, ListSubscriptionsByTopicRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSubscriptionsByTopicResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Subscription> get_Subscriptions();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListSubscriptionsByTopicPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListSubscriptionsByTopicResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSubscriptionsByTopicResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListSubscriptionsByTopicResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListSubscriptionsByTopicRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    private string _topicArn;
    public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public ListSubscriptionsByTopicRequest(string topicArn);
    public ListSubscriptionsByTopicRequest(string topicArn, string nextToken);
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.ListSubscriptionsByTopicResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Subscription> _subscriptions;
    public string NextToken { get; public set; }
    public List`1<Subscription> Subscriptions { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Subscription> get_Subscriptions();
    public void set_Subscriptions(List`1<Subscription> value);
    internal bool IsSetSubscriptions();
}
internal class Amazon.SimpleNotificationService.Model.ListSubscriptionsPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListSubscriptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Subscription> Subscriptions { get; }
    internal ListSubscriptionsPaginator(IAmazonSimpleNotificationService client, ListSubscriptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSubscriptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Subscription> get_Subscriptions();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListSubscriptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListSubscriptionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSubscriptionsResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListSubscriptionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListSubscriptionsRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    public string NextToken { get; public set; }
    public ListSubscriptionsRequest(string nextToken);
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListSubscriptionsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Subscription> _subscriptions;
    public string NextToken { get; public set; }
    public List`1<Subscription> Subscriptions { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Subscription> get_Subscriptions();
    public void set_Subscriptions(List`1<Subscription> value);
    internal bool IsSetSubscriptions();
}
public class Amazon.SimpleNotificationService.Model.ListTagsForResourceRequest : AmazonSimpleNotificationServiceRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.SimpleNotificationService.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    public List`1<Tag> Tags { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.SimpleNotificationService.Model.ListTopicsPaginator : object {
    private IAmazonSimpleNotificationService _client;
    private ListTopicsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListTopicsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Topic> Topics { get; }
    internal ListTopicsPaginator(IAmazonSimpleNotificationService client, ListTopicsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListTopicsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Topic> get_Topics();
    [AsyncIteratorStateMachineAttribute("Amazon.SimpleNotificationService.Model.ListTopicsPaginator/<Amazon-Runtime-IPaginator<Amazon-SimpleNotificationService-Model-ListTopicsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListTopicsResponse> Amazon.Runtime.IPaginator<Amazon.SimpleNotificationService.Model.ListTopicsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.SimpleNotificationService.Model.ListTopicsRequest : AmazonSimpleNotificationServiceRequest {
    private string _nextToken;
    public string NextToken { get; public set; }
    public ListTopicsRequest(string nextToken);
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.SimpleNotificationService.Model.ListTopicsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Topic> _topics;
    public string NextToken { get; public set; }
    public List`1<Topic> Topics { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Topic> get_Topics();
    public void set_Topics(List`1<Topic> value);
    internal bool IsSetTopics();
}
public class Amazon.SimpleNotificationService.Model.MessageAttributeValue : object {
    private MemoryStream _binaryValue;
    private string _dataType;
    private string _stringValue;
    public MemoryStream BinaryValue { get; public set; }
    [AWSPropertyAttribute]
public string DataType { get; public set; }
    public string StringValue { get; public set; }
    public MemoryStream get_BinaryValue();
    public void set_BinaryValue(MemoryStream value);
    internal bool IsSetBinaryValue();
    public string get_DataType();
    public void set_DataType(string value);
    internal bool IsSetDataType();
    public string get_StringValue();
    public void set_StringValue(string value);
    internal bool IsSetStringValue();
}
public class Amazon.SimpleNotificationService.Model.NotFoundException : AmazonSimpleNotificationServiceException {
    public NotFoundException(string message);
    public NotFoundException(string message, Exception innerException);
    public NotFoundException(Exception innerException);
    public NotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.OptedOutException : AmazonSimpleNotificationServiceException {
    public OptedOutException(string message);
    public OptedOutException(string message, Exception innerException);
    public OptedOutException(Exception innerException);
    public OptedOutException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public OptedOutException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.OptInPhoneNumberRequest : AmazonSimpleNotificationServiceRequest {
    private string _phoneNumber;
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
}
public class Amazon.SimpleNotificationService.Model.OptInPhoneNumberResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.PhoneNumberInformation : object {
    private Nullable`1<DateTime> _createdAt;
    private string _iso2CountryCode;
    private List`1<string> _numberCapabilities;
    private string _phoneNumber;
    private RouteType _routeType;
    private string _status;
    public DateTime CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string Iso2CountryCode { get; public set; }
    public List`1<string> NumberCapabilities { get; public set; }
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public RouteType RouteType { get; public set; }
    public string Status { get; public set; }
    public DateTime get_CreatedAt();
    public void set_CreatedAt(DateTime value);
    internal bool IsSetCreatedAt();
    public string get_Iso2CountryCode();
    public void set_Iso2CountryCode(string value);
    internal bool IsSetIso2CountryCode();
    public List`1<string> get_NumberCapabilities();
    public void set_NumberCapabilities(List`1<string> value);
    internal bool IsSetNumberCapabilities();
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
    public RouteType get_RouteType();
    public void set_RouteType(RouteType value);
    internal bool IsSetRouteType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.SimpleNotificationService.Model.PlatformApplication : object {
    private Dictionary`2<string, string> _attributes;
    private string _platformApplicationArn;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public string PlatformApplicationArn { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.PlatformApplicationDisabledException : AmazonSimpleNotificationServiceException {
    public PlatformApplicationDisabledException(string message);
    public PlatformApplicationDisabledException(string message, Exception innerException);
    public PlatformApplicationDisabledException(Exception innerException);
    public PlatformApplicationDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PlatformApplicationDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.PublishBatchRequest : AmazonSimpleNotificationServiceRequest {
    private List`1<PublishBatchRequestEntry> _publishBatchRequestEntries;
    private string _topicArn;
    [AWSPropertyAttribute]
public List`1<PublishBatchRequestEntry> PublishBatchRequestEntries { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public List`1<PublishBatchRequestEntry> get_PublishBatchRequestEntries();
    public void set_PublishBatchRequestEntries(List`1<PublishBatchRequestEntry> value);
    internal bool IsSetPublishBatchRequestEntries();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.PublishBatchRequestEntry : object {
    private string _id;
    private string _message;
    private Dictionary`2<string, MessageAttributeValue> _messageAttributes;
    private string _messageDeduplicationId;
    private string _messageGroupId;
    private string _messageStructure;
    private string _subject;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    public Dictionary`2<string, MessageAttributeValue> MessageAttributes { get; public set; }
    public string MessageDeduplicationId { get; public set; }
    public string MessageGroupId { get; public set; }
    public string MessageStructure { get; public set; }
    public string Subject { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public Dictionary`2<string, MessageAttributeValue> get_MessageAttributes();
    public void set_MessageAttributes(Dictionary`2<string, MessageAttributeValue> value);
    internal bool IsSetMessageAttributes();
    public string get_MessageDeduplicationId();
    public void set_MessageDeduplicationId(string value);
    internal bool IsSetMessageDeduplicationId();
    public string get_MessageGroupId();
    public void set_MessageGroupId(string value);
    internal bool IsSetMessageGroupId();
    public string get_MessageStructure();
    public void set_MessageStructure(string value);
    internal bool IsSetMessageStructure();
    public string get_Subject();
    public void set_Subject(string value);
    internal bool IsSetSubject();
}
public class Amazon.SimpleNotificationService.Model.PublishBatchResponse : AmazonWebServiceResponse {
    private List`1<BatchResultErrorEntry> _failed;
    private List`1<PublishBatchResultEntry> _successful;
    public List`1<BatchResultErrorEntry> Failed { get; public set; }
    public List`1<PublishBatchResultEntry> Successful { get; public set; }
    public List`1<BatchResultErrorEntry> get_Failed();
    public void set_Failed(List`1<BatchResultErrorEntry> value);
    internal bool IsSetFailed();
    public List`1<PublishBatchResultEntry> get_Successful();
    public void set_Successful(List`1<PublishBatchResultEntry> value);
    internal bool IsSetSuccessful();
}
public class Amazon.SimpleNotificationService.Model.PublishBatchResultEntry : object {
    private string _id;
    private string _messageId;
    private string _sequenceNumber;
    public string Id { get; public set; }
    public string MessageId { get; public set; }
    public string SequenceNumber { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_MessageId();
    public void set_MessageId(string value);
    internal bool IsSetMessageId();
    public string get_SequenceNumber();
    public void set_SequenceNumber(string value);
    internal bool IsSetSequenceNumber();
}
public class Amazon.SimpleNotificationService.Model.PublishRequest : AmazonSimpleNotificationServiceRequest {
    private string _message;
    private Dictionary`2<string, MessageAttributeValue> _messageAttributes;
    private string _messageDeduplicationId;
    private string _messageGroupId;
    private string _messageStructure;
    private string _phoneNumber;
    private string _subject;
    private string _targetArn;
    private string _topicArn;
    [AWSPropertyAttribute]
public string Message { get; public set; }
    public Dictionary`2<string, MessageAttributeValue> MessageAttributes { get; public set; }
    public string MessageDeduplicationId { get; public set; }
    public string MessageGroupId { get; public set; }
    public string MessageStructure { get; public set; }
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public string Subject { get; public set; }
    public string TargetArn { get; public set; }
    public string TopicArn { get; public set; }
    public PublishRequest(string topicArn, string message);
    public PublishRequest(string topicArn, string message, string subject);
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public Dictionary`2<string, MessageAttributeValue> get_MessageAttributes();
    public void set_MessageAttributes(Dictionary`2<string, MessageAttributeValue> value);
    internal bool IsSetMessageAttributes();
    public string get_MessageDeduplicationId();
    public void set_MessageDeduplicationId(string value);
    internal bool IsSetMessageDeduplicationId();
    public string get_MessageGroupId();
    public void set_MessageGroupId(string value);
    internal bool IsSetMessageGroupId();
    public string get_MessageStructure();
    public void set_MessageStructure(string value);
    internal bool IsSetMessageStructure();
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
    public string get_Subject();
    public void set_Subject(string value);
    internal bool IsSetSubject();
    public string get_TargetArn();
    public void set_TargetArn(string value);
    internal bool IsSetTargetArn();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.PublishResponse : AmazonWebServiceResponse {
    private string _messageId;
    private string _sequenceNumber;
    public string MessageId { get; public set; }
    public string SequenceNumber { get; public set; }
    public string get_MessageId();
    public void set_MessageId(string value);
    internal bool IsSetMessageId();
    public string get_SequenceNumber();
    public void set_SequenceNumber(string value);
    internal bool IsSetSequenceNumber();
}
public class Amazon.SimpleNotificationService.Model.PutDataProtectionPolicyRequest : AmazonSimpleNotificationServiceRequest {
    private string _dataProtectionPolicy;
    private string _resourceArn;
    [AWSPropertyAttribute]
public string DataProtectionPolicy { get; public set; }
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_DataProtectionPolicy();
    public void set_DataProtectionPolicy(string value);
    internal bool IsSetDataProtectionPolicy();
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.SimpleNotificationService.Model.PutDataProtectionPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.RemovePermissionRequest : AmazonSimpleNotificationServiceRequest {
    private string _label;
    private string _topicArn;
    [AWSPropertyAttribute]
public string Label { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public RemovePermissionRequest(string topicArn, string label);
    public string get_Label();
    public void set_Label(string value);
    internal bool IsSetLabel();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.RemovePermissionResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.ReplayLimitExceededException : AmazonSimpleNotificationServiceException {
    public ReplayLimitExceededException(string message);
    public ReplayLimitExceededException(string message, Exception innerException);
    public ReplayLimitExceededException(Exception innerException);
    public ReplayLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReplayLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.ResourceNotFoundException : AmazonSimpleNotificationServiceException {
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.SetEndpointAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _endpointArn;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Attributes { get; public set; }
    [AWSPropertyAttribute]
public string EndpointArn { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_EndpointArn();
    public void set_EndpointArn(string value);
    internal bool IsSetEndpointArn();
}
public class Amazon.SimpleNotificationService.Model.SetEndpointAttributesResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.SetPlatformApplicationAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _platformApplicationArn;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Attributes { get; public set; }
    [AWSPropertyAttribute]
public string PlatformApplicationArn { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_PlatformApplicationArn();
    public void set_PlatformApplicationArn(string value);
    internal bool IsSetPlatformApplicationArn();
}
public class Amazon.SimpleNotificationService.Model.SetPlatformApplicationAttributesResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.SetSMSAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Attributes { get; public set; }
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
}
public class Amazon.SimpleNotificationService.Model.SetSMSAttributesResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.SetSubscriptionAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _attributeName;
    private string _attributeValue;
    private string _subscriptionArn;
    [AWSPropertyAttribute]
public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    [AWSPropertyAttribute]
public string SubscriptionArn { get; public set; }
    public SetSubscriptionAttributesRequest(string subscriptionArn, string attributeName, string attributeValue);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
}
public class Amazon.SimpleNotificationService.Model.SetSubscriptionAttributesResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.SetTopicAttributesRequest : AmazonSimpleNotificationServiceRequest {
    private string _attributeName;
    private string _attributeValue;
    private string _topicArn;
    [AWSPropertyAttribute]
public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public SetTopicAttributesRequest(string topicArn, string attributeName, string attributeValue);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.SetTopicAttributesResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.SimpleNotificationServicePaginatorFactory : object {
    private IAmazonSimpleNotificationService client;
    internal SimpleNotificationServicePaginatorFactory(IAmazonSimpleNotificationService client);
    public sealed virtual IListEndpointsByPlatformApplicationPaginator ListEndpointsByPlatformApplication(ListEndpointsByPlatformApplicationRequest request);
    public sealed virtual IListOriginationNumbersPaginator ListOriginationNumbers(ListOriginationNumbersRequest request);
    public sealed virtual IListPhoneNumbersOptedOutPaginator ListPhoneNumbersOptedOut(ListPhoneNumbersOptedOutRequest request);
    public sealed virtual IListPlatformApplicationsPaginator ListPlatformApplications(ListPlatformApplicationsRequest request);
    public sealed virtual IListSMSSandboxPhoneNumbersPaginator ListSMSSandboxPhoneNumbers(ListSMSSandboxPhoneNumbersRequest request);
    public sealed virtual IListSubscriptionsPaginator ListSubscriptions(ListSubscriptionsRequest request);
    public sealed virtual IListSubscriptionsByTopicPaginator ListSubscriptionsByTopic(ListSubscriptionsByTopicRequest request);
    public sealed virtual IListTopicsPaginator ListTopics(ListTopicsRequest request);
}
public class Amazon.SimpleNotificationService.Model.SMSSandboxPhoneNumber : object {
    private string _phoneNumber;
    private SMSSandboxPhoneNumberVerificationStatus _status;
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public SMSSandboxPhoneNumberVerificationStatus Status { get; public set; }
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
    public SMSSandboxPhoneNumberVerificationStatus get_Status();
    public void set_Status(SMSSandboxPhoneNumberVerificationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.SimpleNotificationService.Model.StaleTagException : AmazonSimpleNotificationServiceException {
    public StaleTagException(string message);
    public StaleTagException(string message, Exception innerException);
    public StaleTagException(Exception innerException);
    public StaleTagException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public StaleTagException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.SubscribeRequest : AmazonSimpleNotificationServiceRequest {
    private Dictionary`2<string, string> _attributes;
    private string _endpoint;
    private string _protocol;
    private Nullable`1<bool> _returnSubscriptionArn;
    private string _topicArn;
    public Dictionary`2<string, string> Attributes { get; public set; }
    public string Endpoint { get; public set; }
    [AWSPropertyAttribute]
public string Protocol { get; public set; }
    public bool ReturnSubscriptionArn { get; public set; }
    [AWSPropertyAttribute]
public string TopicArn { get; public set; }
    public SubscribeRequest(string topicArn, string protocol, string endpoint);
    public Dictionary`2<string, string> get_Attributes();
    public void set_Attributes(Dictionary`2<string, string> value);
    internal bool IsSetAttributes();
    public string get_Endpoint();
    public void set_Endpoint(string value);
    internal bool IsSetEndpoint();
    public string get_Protocol();
    public void set_Protocol(string value);
    internal bool IsSetProtocol();
    public bool get_ReturnSubscriptionArn();
    public void set_ReturnSubscriptionArn(bool value);
    internal bool IsSetReturnSubscriptionArn();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.SubscribeResponse : AmazonWebServiceResponse {
    private string _subscriptionArn;
    public string SubscriptionArn { get; public set; }
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
}
public class Amazon.SimpleNotificationService.Model.Subscription : object {
    private string _endpoint;
    private string _owner;
    private string _protocol;
    private string _subscriptionArn;
    private string _topicArn;
    public string Endpoint { get; public set; }
    public string Owner { get; public set; }
    public string Protocol { get; public set; }
    public string SubscriptionArn { get; public set; }
    public string TopicArn { get; public set; }
    public string get_Endpoint();
    public void set_Endpoint(string value);
    internal bool IsSetEndpoint();
    public string get_Owner();
    public void set_Owner(string value);
    internal bool IsSetOwner();
    public string get_Protocol();
    public void set_Protocol(string value);
    internal bool IsSetProtocol();
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.SubscriptionLimitExceededException : AmazonSimpleNotificationServiceException {
    public SubscriptionLimitExceededException(string message);
    public SubscriptionLimitExceededException(string message, Exception innerException);
    public SubscriptionLimitExceededException(Exception innerException);
    public SubscriptionLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.SimpleNotificationService.Model.TagLimitExceededException : AmazonSimpleNotificationServiceException {
    public TagLimitExceededException(string message);
    public TagLimitExceededException(string message, Exception innerException);
    public TagLimitExceededException(Exception innerException);
    public TagLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.TagPolicyException : AmazonSimpleNotificationServiceException {
    public TagPolicyException(string message);
    public TagPolicyException(string message, Exception innerException);
    public TagPolicyException(Exception innerException);
    public TagPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.TagResourceRequest : AmazonSimpleNotificationServiceRequest {
    private string _resourceArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.SimpleNotificationService.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.ThrottledException : AmazonSimpleNotificationServiceException {
    public ThrottledException(string message);
    public ThrottledException(string message, Exception innerException);
    public ThrottledException(Exception innerException);
    public ThrottledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ThrottledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.TooManyEntriesInBatchRequestException : AmazonSimpleNotificationServiceException {
    public TooManyEntriesInBatchRequestException(string message);
    public TooManyEntriesInBatchRequestException(string message, Exception innerException);
    public TooManyEntriesInBatchRequestException(Exception innerException);
    public TooManyEntriesInBatchRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyEntriesInBatchRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.Topic : object {
    private string _topicArn;
    public string TopicArn { get; public set; }
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
}
public class Amazon.SimpleNotificationService.Model.TopicLimitExceededException : AmazonSimpleNotificationServiceException {
    public TopicLimitExceededException(string message);
    public TopicLimitExceededException(string message, Exception innerException);
    public TopicLimitExceededException(Exception innerException);
    public TopicLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TopicLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.UnsubscribeRequest : AmazonSimpleNotificationServiceRequest {
    private string _subscriptionArn;
    [AWSPropertyAttribute]
public string SubscriptionArn { get; public set; }
    public UnsubscribeRequest(string subscriptionArn);
    public string get_SubscriptionArn();
    public void set_SubscriptionArn(string value);
    internal bool IsSetSubscriptionArn();
}
public class Amazon.SimpleNotificationService.Model.UnsubscribeResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.UntagResourceRequest : AmazonSimpleNotificationServiceRequest {
    private string _resourceArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.SimpleNotificationService.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.Model.UserErrorException : AmazonSimpleNotificationServiceException {
    public UserErrorException(string message);
    public UserErrorException(string message, Exception innerException);
    public UserErrorException(Exception innerException);
    public UserErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.ValidationException : AmazonSimpleNotificationServiceException {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    public ValidationException(Exception innerException);
    public ValidationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ValidationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SimpleNotificationService.Model.VerificationException : AmazonSimpleNotificationServiceException {
    private string _status;
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public VerificationException(string message);
    public VerificationException(string message, Exception innerException);
    public VerificationException(Exception innerException);
    public VerificationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public VerificationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.SimpleNotificationService.Model.VerifySMSSandboxPhoneNumberRequest : AmazonSimpleNotificationServiceRequest {
    private string _oneTimePassword;
    private string _phoneNumber;
    [AWSPropertyAttribute]
public string OneTimePassword { get; public set; }
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    public string get_OneTimePassword();
    public void set_OneTimePassword(string value);
    internal bool IsSetOneTimePassword();
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
}
public class Amazon.SimpleNotificationService.Model.VerifySMSSandboxPhoneNumberResponse : AmazonWebServiceResponse {
}
public class Amazon.SimpleNotificationService.NumberCapability : ConstantClass {
    public static NumberCapability MMS;
    public static NumberCapability SMS;
    public static NumberCapability VOICE;
    public NumberCapability(string value);
    private static NumberCapability();
    public static NumberCapability FindValue(string value);
    public static NumberCapability op_Implicit(string value);
}
public class Amazon.SimpleNotificationService.RouteType : ConstantClass {
    public static RouteType Premium;
    public static RouteType Promotional;
    public static RouteType Transactional;
    public RouteType(string value);
    private static RouteType();
    public static RouteType FindValue(string value);
    public static RouteType op_Implicit(string value);
}
public class Amazon.SimpleNotificationService.SMSSandboxPhoneNumberVerificationStatus : ConstantClass {
    public static SMSSandboxPhoneNumberVerificationStatus Pending;
    public static SMSSandboxPhoneNumberVerificationStatus Verified;
    public SMSSandboxPhoneNumberVerificationStatus(string value);
    private static SMSSandboxPhoneNumberVerificationStatus();
    public static SMSSandboxPhoneNumberVerificationStatus FindValue(string value);
    public static SMSSandboxPhoneNumberVerificationStatus op_Implicit(string value);
}
public class Amazon.SimpleNotificationService.Util.Message : object {
    private static int MAX_RETRIES;
    private static string SHA1_SIGNATURE_VERSION;
    private static string SHA256_SIGNATURE_VERSION;
    public static string MESSAGE_TYPE_SUBSCRIPTION_CONFIRMATION;
    public static string MESSAGE_TYPE_UNSUBSCRIPTION_CONFIRMATION;
    public static string MESSAGE_TYPE_NOTIFICATION;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignatureVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SigningCertURL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscribeURL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicArn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnsubscribeURL>k__BackingField;
    private static string CertUrlRegexPattern;
    private static Dictionary`2<string, X509Certificate2> certificateCache;
    public string MessageId { get; private set; }
    public string MessageText { get; private set; }
    public string Signature { get; private set; }
    public string SignatureVersion { get; private set; }
    public string SigningCertURL { get; private set; }
    public string Subject { get; private set; }
    public string SubscribeURL { get; private set; }
    public DateTime Timestamp { get; }
    private string TimestampString { get; private set; }
    public string Token { get; private set; }
    public string TopicArn { get; private set; }
    public string Type { get; private set; }
    public bool IsSubscriptionType { get; }
    public bool IsUnsubscriptionType { get; }
    public bool IsNotificationType { get; }
    public string UnsubscribeURL { get; private set; }
    private static Message();
    public static Message ParseMessage(string messageText);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
private void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_MessageText();
    [CompilerGeneratedAttribute]
private void set_MessageText(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_SignatureVersion();
    [CompilerGeneratedAttribute]
private void set_SignatureVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SigningCertURL();
    [CompilerGeneratedAttribute]
private void set_SigningCertURL(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
private void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_SubscribeURL();
    [CompilerGeneratedAttribute]
private void set_SubscribeURL(string value);
    public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private string get_TimestampString();
    [CompilerGeneratedAttribute]
private void set_TimestampString(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TopicArn();
    [CompilerGeneratedAttribute]
private void set_TopicArn(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    public bool get_IsSubscriptionType();
    public bool get_IsUnsubscriptionType();
    public bool get_IsNotificationType();
    [CompilerGeneratedAttribute]
public string get_UnsubscribeURL();
    [CompilerGeneratedAttribute]
private void set_UnsubscribeURL(string value);
    [GeneratedRegexAttribute("^sns\.[a-zA-Z0-9\-]{3,}\.amazonaws\.com(\.cn)?$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
private static Regex CertUrlRegex();
    private static string ValidateCertUrl(string certUrl);
    private static string ValidateSignatureVersion(string signatureVersion);
    public bool IsMessageSignatureValid();
    private Byte[] GetMessageBytesToSign();
    private string BuildSubscriptionStringToSign();
    private string BuildNotificationStringToSign();
    private X509Certificate2 GetX509Certificate();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CertUrlRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CertUrlRegex_0 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__CertUrlRegex_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.3103")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    internal static SearchValues`1<char> s_ascii_20FF03FEFFFF07FEFFFF07;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities();
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|2_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
}
