[ExtensionAttribute]
public static class Amqp.Extensions : object {
    [ExtensionAttribute]
public static T GetBody(Message message);
    [ExtensionAttribute]
public static T GetBody(Message message, AmqpSerializer serializer);
    [ExtensionAttribute]
private static T GetValue(AmqpValue value, AmqpSerializer serializer);
    private static int GetBinaryOffset(ByteBuffer buffer);
}
public class Amqp.Framing.AmqpValue`1 : AmqpValue {
    private AmqpSerializer serializer;
    public AmqpValue`1(T value);
    public AmqpValue`1(T value, AmqpSerializer serializer);
    protected virtual void WriteValue(ByteBuffer buffer, object value);
}
public class Amqp.Serialization.AmqpContract : object {
    private Type type;
    [CompilerGeneratedAttribute]
private AmqpContractAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpMember[] <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <Provides>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Serializing>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Serialized>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Deserializing>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Deserialized>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpContract <BaseContract>k__BackingField;
    public Type Type { get; }
    public AmqpContractAttribute Attribute { get; public set; }
    public AmqpMember[] Members { get; public set; }
    public Type[] Provides { get; public set; }
    public MethodInfo Serializing { get; public set; }
    public MethodInfo Serialized { get; public set; }
    public MethodInfo Deserializing { get; public set; }
    public MethodInfo Deserialized { get; public set; }
    public AmqpContract BaseContract { get; public set; }
    public AmqpContract(Type type);
    public Type get_Type();
    [CompilerGeneratedAttribute]
public AmqpContractAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(AmqpContractAttribute value);
    [CompilerGeneratedAttribute]
public AmqpMember[] get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(AmqpMember[] value);
    [CompilerGeneratedAttribute]
public Type[] get_Provides();
    [CompilerGeneratedAttribute]
public void set_Provides(Type[] value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Serializing();
    [CompilerGeneratedAttribute]
public void set_Serializing(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Serialized();
    [CompilerGeneratedAttribute]
public void set_Serialized(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Deserializing();
    [CompilerGeneratedAttribute]
public void set_Deserializing(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Deserialized();
    [CompilerGeneratedAttribute]
public void set_Deserialized(MethodInfo value);
    [CompilerGeneratedAttribute]
public AmqpContract get_BaseContract();
    [CompilerGeneratedAttribute]
public void set_BaseContract(AmqpContract value);
}
[AttributeUsageAttribute("12")]
public class Amqp.Serialization.AmqpContractAttribute : Attribute {
    private Nullable`1<ulong> internalCode;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EncodingType <Encoding>k__BackingField;
    public string Name { get; public set; }
    public long Code { get; public set; }
    public EncodingType Encoding { get; public set; }
    internal Nullable`1<ulong> InternalCode { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public long get_Code();
    public void set_Code(long value);
    [CompilerGeneratedAttribute]
public EncodingType get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(EncodingType value);
    internal Nullable`1<ulong> get_InternalCode();
}
public class Amqp.Serialization.AmqpContractResolver : object {
    private sealed virtual override AmqpContract Amqp.Serialization.IContractResolver.Resolve(Type type);
    protected virtual void OnResolved(AmqpContract contract);
}
public class Amqp.Serialization.AmqpMember : object {
    [CompilerGeneratedAttribute]
private AmqpMemberAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public AmqpMemberAttribute Attribute { get; public set; }
    public MemberInfo Info { get; public set; }
    internal string Name { get; }
    internal int Order { get; internal set; }
    [CompilerGeneratedAttribute]
public AmqpMemberAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(AmqpMemberAttribute value);
    [CompilerGeneratedAttribute]
public MemberInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(MemberInfo value);
    internal string get_Name();
    [CompilerGeneratedAttribute]
internal int get_Order();
    [CompilerGeneratedAttribute]
internal void set_Order(int value);
}
[AttributeUsageAttribute("384")]
public class Amqp.Serialization.AmqpMemberAttribute : Attribute {
    private Nullable`1<int> order;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    internal Nullable`1<int> InternalOrder { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public int get_Order();
    public void set_Order(int value);
    internal Nullable`1<int> get_InternalOrder();
}
[AttributeUsageAttribute("12")]
public class Amqp.Serialization.AmqpProvidesAttribute : Attribute {
    private Type type;
    public Type Type { get; }
    public AmqpProvidesAttribute(Type type);
    public Type get_Type();
}
public class Amqp.Serialization.AmqpSerializer : object {
    internal static AmqpSerializer instance;
    private ConcurrentDictionary`2<Type, SerializableType> typeCache;
    private IContractResolver contractResolver;
    public AmqpSerializer(IContractResolver contractResolver);
    private static AmqpSerializer();
    public static void Serialize(ByteBuffer buffer, object graph);
    public static T Deserialize(ByteBuffer buffer);
    public static TAs Deserialize(ByteBuffer buffer);
    public void WriteObject(ByteBuffer buffer, object graph);
    public T ReadObject(ByteBuffer buffer);
    public TAs ReadObject(ByteBuffer buffer);
    internal SerializableType GetType(Type type);
    private static void WriteObject(AmqpSerializer serializer, ByteBuffer buffer, object graph);
    private static TAs ReadObject(AmqpSerializer serializer, ByteBuffer buffer);
    private SerializableType GetOrCompileType(Type type, bool describedOnly, HashSet`1<Type> pendingTypes);
    private SerializableType CompileType(Type type, bool describedOnly, HashSet`1<Type> pendingTypes);
    private SerializableType CreateContractType(AmqpContract contract, HashSet`1<Type> pendingTypes);
    private SerializableType CompileNonContractTypes(Type type, HashSet`1<Type> pendingTypes);
    private SerializableType CompileEnumType(Type type);
    private SerializableType CompileCollectionTypes(Type type, HashSet`1<Type> pendingTypes);
}
public enum Amqp.Serialization.EncodingType : Enum {
    public int value__;
    public static EncodingType List;
    public static EncodingType Map;
    public static EncodingType SimpleMap;
    public static EncodingType SimpleList;
}
public interface Amqp.Serialization.IAmqpSerializable {
    public int EncodeSize { get; }
    public abstract virtual int get_EncodeSize();
    public abstract virtual void Encode(ByteBuffer buffer);
    public abstract virtual void Decode(ByteBuffer buffer);
}
public interface Amqp.Serialization.IContractResolver {
    public abstract virtual AmqpContract Resolve(Type type);
}
internal abstract class Amqp.Serialization.MemberAccessor : object {
    private Type type;
    private Func`2<object, object> getter;
    private Action`2<object, object> setter;
    public Type Type { get; }
    protected MemberAccessor(Type type);
    public Type get_Type();
    public static MemberAccessor Create(MemberInfo memberInfo, bool requiresSetter);
    public object Get(object container);
    public void Set(object container, object value);
    private static void EmitTypeConversion(ILGenerator generator, Type castType, bool isContainer);
    private static void EmitCall(ILGenerator generator, MethodInfo method);
    private static string GetAccessorName(bool isGetter, string name);
}
internal abstract class Amqp.Serialization.MethodAccessor : object {
    private static Type[] delegateParamsType;
    private bool isStatic;
    private MethodDelegate methodDelegate;
    private static MethodAccessor();
    public static MethodAccessor Create(MethodInfo methodInfo);
    public static MethodAccessor Create(ConstructorInfo constructorInfo);
    public object Invoke(Object[] parameters);
    public object Invoke(object container, Object[] parameters);
    private Type[] GetParametersType(ParameterInfo[] paramsInfo);
    private void LoadArguments(ILGenerator generator, Type[] paramsType);
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnDeserializedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnDeserializingAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnSerializedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnSerializingAttribute : Attribute {
}
internal class Amqp.Serialization.SerializableMember : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberAccessor <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializableType <Type>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    public MemberAccessor Accessor { get; public set; }
    public SerializableType Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public MemberAccessor get_Accessor();
    [CompilerGeneratedAttribute]
public void set_Accessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public SerializableType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SerializableType value);
}
internal abstract class Amqp.Serialization.SerializableType : object {
    private AmqpSerializer serializer;
    private Type type;
    private bool hasDefaultCtor;
    public EncodingType Encoding { get; }
    public bool IsResolved { get; }
    public SerializableMember[] Members { get; }
    protected SerializableType(AmqpSerializer serializer, Type type);
    public virtual EncodingType get_Encoding();
    public virtual bool get_IsResolved();
    public virtual SerializableMember[] get_Members();
    public static SerializableType CreatePrimitiveType(Type type, Encode encoder, Decode decoder);
    public static SerializableType CreateObjectType(Type type);
    public static SerializableType CreateEnumType(Type type, SerializableType underlyingType);
    public static SerializableType CreateAmqpSerializableType(AmqpSerializer serializer, Type type);
    public static SerializableType CreateArrayType(AmqpSerializer serializer, Type type, Type itemType, SerializableType listType);
    public static SerializableType CreateDelegatingType(AmqpSerializer serializer, Type type);
    public static SerializableType CreateGenericListType(AmqpSerializer serializer, Type type, SerializableType itemType, MethodAccessor addAccessor);
    public static SerializableType CreateGenericMapType(AmqpSerializer serializer, Type type, SerializableType keyType, SerializableType valueType, MemberAccessor keyAccessor, MemberAccessor valueAccessor, MethodAccessor addAccessor);
    public static SerializableType CreateDescribedListType(AmqpSerializer serializer, Type type, SerializableType baseType, string descriptorName, Nullable`1<ulong> descriptorCode, SerializableMember[] members, SerializableType[] knownTypes, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedMapType(AmqpSerializer serializer, Type type, SerializableType baseType, string descriptorName, Nullable`1<ulong> descriptorCode, SerializableMember[] members, SerializableType[] knownTypes, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedSimpleMapType(AmqpSerializer serializer, Type type, SerializableType baseType, SerializableMember[] members, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedSimpleListType(AmqpSerializer serializer, Type type, SerializableType baseType, SerializableMember[] members, MethodAccessor[] serializationCallbacks);
    public abstract virtual void WriteObject(ByteBuffer buffer, object graph);
    public abstract virtual object ReadObject(ByteBuffer buffer);
}
internal static class Amqp.Serialization.SerializationCallback : object {
    public static int OnSerializing;
    public static int OnSerialized;
    public static int OnDeserializing;
    public static int OnDeserialized;
}
[ExtensionAttribute]
internal static class Amqp.TypeExtensions : object {
    [ExtensionAttribute]
internal static Assembly Assembly(Type type);
    [ExtensionAttribute]
internal static Type BaseType(Type type);
    [ExtensionAttribute]
internal static T GetCustomAttribute(Type type, bool inherit);
    [ExtensionAttribute]
internal static IEnumerable`1<T> GetCustomAttributes(Type type, bool inherit);
    [ExtensionAttribute]
internal static bool IsValueType(Type type);
    [ExtensionAttribute]
internal static bool IsEnum(Type type);
    [ExtensionAttribute]
internal static bool IsGenericType(Type type);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(Type type, Type from);
    [ExtensionAttribute]
internal static object CreateInstance(Type type, bool hasDefaultCtor);
}
internal static class Amqp.Types.FixedWidth : object {
    public static int FormatCode;
    public static int Null;
    public static int Boolean;
    public static int BooleanVar;
    public static int Zero;
    public static int UByte;
    public static int UShort;
    public static int UInt;
    public static int ULong;
    public static int Byte;
    public static int Short;
    public static int Int;
    public static int Long;
    public static int Float;
    public static int Double;
    public static int Decimal32;
    public static int Decimal64;
    public static int Decimal128;
    public static int Char;
    public static int TimeStamp;
    public static int Uuid;
    public static int NullEncoded;
    public static int BooleanEncoded;
    public static int BooleanVarEncoded;
    public static int ZeroEncoded;
    public static int UByteEncoded;
    public static int UShortEncoded;
    public static int UIntEncoded;
    public static int ULongEncoded;
    public static int ByteEncoded;
    public static int ShortEncoded;
    public static int IntEncoded;
    public static int LongEncoded;
    public static int FloatEncoded;
    public static int DoubleEncoded;
    public static int Decimal32Encoded;
    public static int Decimal64Encoded;
    public static int Decimal128Encoded;
    public static int CharEncoded;
    public static int TimeStampEncoded;
    public static int UuidEncoded;
}
internal static class Amqp.Types.FormatCode : object {
    public static byte Described;
    public static byte Null;
    public static byte Boolean;
    public static byte BooleanTrue;
    public static byte BooleanFalse;
    public static byte UInt0;
    public static byte ULong0;
    public static byte UByte;
    public static byte UShort;
    public static byte UInt;
    public static byte ULong;
    public static byte Byte;
    public static byte Short;
    public static byte Int;
    public static byte Long;
    public static byte SmallUInt;
    public static byte SmallULong;
    public static byte SmallInt;
    public static byte SmallLong;
    public static byte Float;
    public static byte Double;
    public static byte Decimal32;
    public static byte Decimal64;
    public static byte Decimal128;
    public static byte Char;
    public static byte TimeStamp;
    public static byte Uuid;
    public static byte Binary8;
    public static byte Binary32;
    public static byte String8Utf8;
    public static byte String32Utf8;
    public static byte Symbol8;
    public static byte Symbol32;
    public static byte List0;
    public static byte List8;
    public static byte List32;
    public static byte Map8;
    public static byte Map32;
    public static byte Array8;
    public static byte Array32;
}
