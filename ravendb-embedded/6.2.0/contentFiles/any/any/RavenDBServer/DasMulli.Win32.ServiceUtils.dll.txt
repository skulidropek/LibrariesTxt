public enum DasMulli.Win32.ServiceUtils.ErrorSeverity : Enum {
    public UInt32 value__;
    public static ErrorSeverity Ignore;
    public static ErrorSeverity Normal;
    public static ErrorSeverity Severe;
    public static ErrorSeverity Crititcal;
}
[ExtensionAttribute]
internal static class DasMulli.Win32.ServiceUtils.Extensions : object {
    [ExtensionAttribute]
internal static T[] MarshalUnmananagedArrayToStruct(IntPtr unmanagedArray, int length);
}
internal class DasMulli.Win32.ServiceUtils.HashCode : ValueType {
    private int value;
    private HashCode(int value);
    public static int op_Implicit(HashCode hashCode);
    public static HashCode Of(T item);
    public HashCode And(T item);
    public HashCode AndEach(IEnumerable`1<T> items);
    private static int CombineHashCodes(int h1, int h2);
    private static int GetHashCode(T item);
}
internal interface DasMulli.Win32.ServiceUtils.INativeInterop {
    public abstract virtual bool CloseServiceHandle(IntPtr handle);
    public abstract virtual bool StartServiceCtrlDispatcherW(ServiceTableEntry[] serviceTable);
    public abstract virtual ServiceStatusHandle RegisterServiceCtrlHandlerExW(string serviceName, ServiceControlHandler serviceControlHandler, IntPtr context);
    public abstract virtual bool SetServiceStatus(ServiceStatusHandle statusHandle, ServiceStatus& pServiceStatus);
    public abstract virtual ServiceControlManager OpenSCManagerW(string machineName, string databaseName, ServiceControlManagerAccessRights dwAccess);
    public abstract virtual ServiceHandle CreateServiceW(ServiceControlManager serviceControlManager, string serviceName, string displayName, ServiceControlAccessRights desiredControlAccess, ServiceType serviceType, ServiceStartType startType, ErrorSeverity errorSeverity, string binaryPath, string loadOrderGroup, IntPtr outUIntTagId, string dependencies, string serviceUserName, string servicePassword);
    public abstract virtual bool ChangeServiceConfigW(ServiceHandle service, ServiceType serviceType, ServiceStartType startType, ErrorSeverity errorSeverity, string binaryPath, string loadOrderGroup, IntPtr outUIntTagId, string dependencies, string serviceUserName, string servicePassword, string displayName);
    public abstract virtual ServiceHandle OpenServiceW(ServiceControlManager serviceControlManager, string serviceName, ServiceControlAccessRights desiredControlAccess);
    public abstract virtual bool StartServiceW(ServiceHandle service, UInt32 argc, IntPtr wargv);
    public abstract virtual bool DeleteService(ServiceHandle service);
    public abstract virtual bool ChangeServiceConfig2W(ServiceHandle service, ServiceConfigInfoTypeLevel infoTypeLevel, IntPtr info);
}
public interface DasMulli.Win32.ServiceUtils.IWin32Service {
    public string ServiceName { get; }
    public abstract virtual string get_ServiceName();
    public abstract virtual void Start(String[] startupArguments, ServiceStoppedCallback serviceStoppedCallback);
    public abstract virtual void Stop();
}
public interface DasMulli.Win32.ServiceUtils.IWin32ServiceStateMachine {
    public abstract virtual void OnStart(String[] startupArguments, ServiceStatusReportCallback statusReportCallback);
    public abstract virtual void OnCommand(ServiceControlCommand command, UInt32 commandSpecificEventType);
}
internal static class DasMulli.Win32.ServiceUtils.KnownWin32ErrorCoes : object {
    internal static int ERROR_SERVICE_ALREADY_RUNNING;
    internal static int ERROR_SERVICE_DOES_NOT_EXIST;
}
public class DasMulli.Win32.ServiceUtils.ScAction : ValueType {
    private ScActionType _Type;
    private UInt32 _Delay;
    public ScActionType Type { get; public set; }
    public TimeSpan Delay { get; public set; }
    public ScActionType get_Type();
    public void set_Type(ScActionType value);
    public TimeSpan get_Delay();
    public void set_Delay(TimeSpan value);
    public sealed virtual bool Equals(ScAction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum DasMulli.Win32.ServiceUtils.ScActionType : Enum {
    public int value__;
    public static ScActionType ScActionNone;
    public static ScActionType ScActionRestart;
    public static ScActionType ScActionReboot;
    public static ScActionType ScActionRunCommand;
}
[FlagsAttribute]
public enum DasMulli.Win32.ServiceUtils.ServiceAcceptedControlCommandsFlags : Enum {
    public UInt32 value__;
    public static ServiceAcceptedControlCommandsFlags None;
    public static ServiceAcceptedControlCommandsFlags Stop;
    public static ServiceAcceptedControlCommandsFlags PauseContinue;
    public static ServiceAcceptedControlCommandsFlags Shutdown;
    public static ServiceAcceptedControlCommandsFlags ParamChange;
    public static ServiceAcceptedControlCommandsFlags NetBindChange;
    public static ServiceAcceptedControlCommandsFlags PreShutdown;
    public static ServiceAcceptedControlCommandsFlags HardwareProfileChange;
    public static ServiceAcceptedControlCommandsFlags PowerEvent;
    public static ServiceAcceptedControlCommandsFlags SessionChange;
    public static ServiceAcceptedControlCommandsFlags TimeChange;
    public static ServiceAcceptedControlCommandsFlags TriggerEvent;
    public static ServiceAcceptedControlCommandsFlags UserModeReboot;
}
internal enum DasMulli.Win32.ServiceUtils.ServiceConfigInfoTypeLevel : Enum {
    public UInt32 value__;
    public static ServiceConfigInfoTypeLevel ServiceDescription;
    public static ServiceConfigInfoTypeLevel FailureActions;
    public static ServiceConfigInfoTypeLevel DelayedAutoStartInfo;
    public static ServiceConfigInfoTypeLevel FailureActionsFlag;
    public static ServiceConfigInfoTypeLevel ServiceSidInfo;
    public static ServiceConfigInfoTypeLevel RequiredPrivilegesInfo;
    public static ServiceConfigInfoTypeLevel PreShutdownInfo;
    public static ServiceConfigInfoTypeLevel TriggerInfo;
    public static ServiceConfigInfoTypeLevel PreferredNode;
    public static ServiceConfigInfoTypeLevel LaunchProtected;
}
[FlagsAttribute]
internal enum DasMulli.Win32.ServiceUtils.ServiceControlAccessRights : Enum {
    public UInt32 value__;
    public static ServiceControlAccessRights QueryConfig;
    public static ServiceControlAccessRights ChangeConfig;
    public static ServiceControlAccessRights QueryStatus;
    public static ServiceControlAccessRights EnumerateDependents;
    public static ServiceControlAccessRights Start;
    public static ServiceControlAccessRights Stop;
    public static ServiceControlAccessRights PauseContinue;
    public static ServiceControlAccessRights Interrogate;
    public static ServiceControlAccessRights UserDefinedControl;
    public static ServiceControlAccessRights All;
}
public enum DasMulli.Win32.ServiceUtils.ServiceControlCommand : Enum {
    public UInt32 value__;
    public static ServiceControlCommand Stop;
    public static ServiceControlCommand Pause;
    public static ServiceControlCommand Continue;
    public static ServiceControlCommand Interrogate;
    public static ServiceControlCommand Shutdown;
    public static ServiceControlCommand Paramchange;
    public static ServiceControlCommand NetBindAdd;
    public static ServiceControlCommand NetBindRemoved;
    public static ServiceControlCommand NetBindEnable;
    public static ServiceControlCommand NetBindDisable;
    public static ServiceControlCommand DeviceEvent;
    public static ServiceControlCommand HardwareProfileChange;
    public static ServiceControlCommand PowerEvent;
    public static ServiceControlCommand SessionChange;
    public static ServiceControlCommand TimeChange;
    public static ServiceControlCommand TriggerEvent;
    public static ServiceControlCommand UserModeReboot;
}
internal class DasMulli.Win32.ServiceUtils.ServiceControlHandler : MulticastDelegate {
    public ServiceControlHandler(object object, IntPtr method);
    public virtual void Invoke(ServiceControlCommand control, UInt32 eventType, IntPtr eventData, IntPtr eventContext);
    public virtual IAsyncResult BeginInvoke(ServiceControlCommand control, UInt32 eventType, IntPtr eventData, IntPtr eventContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class DasMulli.Win32.ServiceUtils.ServiceControlManager : SafeHandle {
    [CompilerGeneratedAttribute]
private INativeInterop <NativeInterop>k__BackingField;
    internal INativeInterop NativeInterop { get; internal set; }
    public bool IsInvalid { get; }
    [CompilerGeneratedAttribute]
internal INativeInterop get_NativeInterop();
    [CompilerGeneratedAttribute]
internal void set_NativeInterop(INativeInterop value);
    protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    internal static ServiceControlManager Connect(INativeInterop nativeInterop, string machineName, string databaseName, ServiceControlManagerAccessRights desiredAccessRights);
    public ServiceHandle CreateService(string serviceName, string displayName, string binaryPath, ServiceType serviceType, ServiceStartType startupType, ErrorSeverity errorSeverity, Win32ServiceCredentials credentials);
    public ServiceHandle OpenService(string serviceName, ServiceControlAccessRights desiredControlAccess);
    public virtual bool TryOpenService(string serviceName, ServiceControlAccessRights desiredControlAccess, ServiceHandle& serviceHandle, Win32Exception& errorException);
}
[FlagsAttribute]
internal enum DasMulli.Win32.ServiceUtils.ServiceControlManagerAccessRights : Enum {
    public UInt32 value__;
    public static ServiceControlManagerAccessRights Connect;
    public static ServiceControlManagerAccessRights CreateService;
    public static ServiceControlManagerAccessRights EnumerateServices;
    public static ServiceControlManagerAccessRights LockServiceDatabase;
    public static ServiceControlManagerAccessRights QueryLockStatus;
    public static ServiceControlManagerAccessRights ModifyBootConfig;
    public static ServiceControlManagerAccessRights All;
    public static ServiceControlManagerAccessRights GenericRead;
    public static ServiceControlManagerAccessRights GenericWrite;
    public static ServiceControlManagerAccessRights GenericExecute;
    public static ServiceControlManagerAccessRights GenericAll;
}
public class DasMulli.Win32.ServiceUtils.ServiceDefinition : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinaryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Win32ServiceCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceFailureActions <FailureActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailureActionsOnNonCrashFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorSeverity <ErrorSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayedAutoStart>k__BackingField;
    public string ServiceName { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string BinaryPath { get; public set; }
    public Win32ServiceCredentials Credentials { get; public set; }
    public ServiceFailureActions FailureActions { get; public set; }
    public bool FailureActionsOnNonCrashFailures { get; public set; }
    public bool AutoStart { get; public set; }
    public ErrorSeverity ErrorSeverity { get; public set; }
    public bool DelayedAutoStart { get; public set; }
    public ServiceDefinition(string serviceName, string binPath);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_BinaryPath();
    [CompilerGeneratedAttribute]
public void set_BinaryPath(string value);
    [CompilerGeneratedAttribute]
public Win32ServiceCredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(Win32ServiceCredentials value);
    [CompilerGeneratedAttribute]
public ServiceFailureActions get_FailureActions();
    [CompilerGeneratedAttribute]
public void set_FailureActions(ServiceFailureActions value);
    [CompilerGeneratedAttribute]
public bool get_FailureActionsOnNonCrashFailures();
    [CompilerGeneratedAttribute]
public void set_FailureActionsOnNonCrashFailures(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoStart();
    [CompilerGeneratedAttribute]
public void set_AutoStart(bool value);
    [CompilerGeneratedAttribute]
public ErrorSeverity get_ErrorSeverity();
    [CompilerGeneratedAttribute]
public void set_ErrorSeverity(ErrorSeverity value);
    [CompilerGeneratedAttribute]
public bool get_DelayedAutoStart();
    [CompilerGeneratedAttribute]
public void set_DelayedAutoStart(bool value);
}
public class DasMulli.Win32.ServiceUtils.ServiceDefinitionBuilder : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinaryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Win32ServiceCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceFailureActions <FailureActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailureActionsOnNonCrashFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorSeverity <ErrorSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayedAutoStart>k__BackingField;
    public string ServiceName { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string BinaryPath { get; public set; }
    public Win32ServiceCredentials Credentials { get; public set; }
    public ServiceFailureActions FailureActions { get; public set; }
    public bool FailureActionsOnNonCrashFailures { get; public set; }
    public bool AutoStart { get; public set; }
    public ErrorSeverity ErrorSeverity { get; public set; }
    public bool DelayedAutoStart { get; public set; }
    public ServiceDefinitionBuilder(string serviceName);
    public ServiceDefinitionBuilder(ServiceDefinition definition);
    public ServiceDefinitionBuilder(ServiceDefinitionBuilder definitionBuilder);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_BinaryPath();
    [CompilerGeneratedAttribute]
public void set_BinaryPath(string value);
    [CompilerGeneratedAttribute]
public Win32ServiceCredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(Win32ServiceCredentials value);
    [CompilerGeneratedAttribute]
public ServiceFailureActions get_FailureActions();
    [CompilerGeneratedAttribute]
public void set_FailureActions(ServiceFailureActions value);
    [CompilerGeneratedAttribute]
public bool get_FailureActionsOnNonCrashFailures();
    [CompilerGeneratedAttribute]
public void set_FailureActionsOnNonCrashFailures(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoStart();
    [CompilerGeneratedAttribute]
public void set_AutoStart(bool value);
    [CompilerGeneratedAttribute]
public ErrorSeverity get_ErrorSeverity();
    [CompilerGeneratedAttribute]
public void set_ErrorSeverity(ErrorSeverity value);
    [CompilerGeneratedAttribute]
public bool get_DelayedAutoStart();
    [CompilerGeneratedAttribute]
public void set_DelayedAutoStart(bool value);
    public virtual ServiceDefinition Build();
    public ServiceDefinitionBuilder WithServiceName(string serviceName);
    public ServiceDefinitionBuilder WithDisplayName(string displayName);
    public ServiceDefinitionBuilder WithDescription(string description);
    public ServiceDefinitionBuilder WithBinaryPath(string binaryPath);
    public ServiceDefinitionBuilder WithCredentials(Win32ServiceCredentials credentials);
    public ServiceDefinitionBuilder WithFailureActions(ServiceFailureActions failureActions);
    public ServiceDefinitionBuilder WithFailureActionsOnNonCrashFailures(bool failureActionsOnNonCrashFailures);
    public ServiceDefinitionBuilder WithAutoStart(bool autoStart);
    public ServiceDefinitionBuilder WithErrorSeverity(ErrorSeverity errorSeverity);
    public ServiceDefinitionBuilder WithDelayedAutoStart(bool delayedAutoStart);
}
internal class DasMulli.Win32.ServiceUtils.ServiceDescriptionInfo : ValueType {
    private string serviceDescription;
    public string ServiceDescription { get; public set; }
    public ServiceDescriptionInfo(string serviceDescription);
    public string get_ServiceDescription();
    public void set_ServiceDescription(string value);
}
public class DasMulli.Win32.ServiceUtils.ServiceFailureActions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ResetPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RebootMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestartCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ScAction> <Actions>k__BackingField;
    public TimeSpan ResetPeriod { get; }
    public string RebootMessage { get; }
    public string RestartCommand { get; }
    public IReadOnlyCollection`1<ScAction> Actions { get; }
    public ServiceFailureActions(TimeSpan resetPeriod, string rebootMessage, string restartCommand, IReadOnlyCollection`1<ScAction> actions);
    [CompilerGeneratedAttribute]
public TimeSpan get_ResetPeriod();
    [CompilerGeneratedAttribute]
public string get_RebootMessage();
    [CompilerGeneratedAttribute]
public string get_RestartCommand();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ScAction> get_Actions();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ServiceFailureActions other);
}
internal class DasMulli.Win32.ServiceUtils.ServiceFailureActionsFlag : ValueType {
    private bool _fFailureActionsOnNonCrashFailures;
    public bool Flag { get; public set; }
    public ServiceFailureActionsFlag(bool enabled);
    public bool get_Flag();
    public void set_Flag(bool value);
}
internal class DasMulli.Win32.ServiceUtils.ServiceFailureActionsInfo : ValueType {
    private UInt32 dwResetPeriod;
    private string lpRebootMsg;
    private string lpCommand;
    private int cActions;
    private IntPtr lpsaActions;
    internal static ServiceFailureActionsInfo Default;
    public TimeSpan ResetPeriod { get; }
    public string RebootMsg { get; }
    public string Command { get; }
    public int CountActions { get; }
    public ScAction[] Actions { get; }
    internal ServiceFailureActionsInfo(TimeSpan resetPeriod, string rebootMessage, string restartCommand, IReadOnlyCollection`1<ScAction> actions);
    private static ServiceFailureActionsInfo();
    public TimeSpan get_ResetPeriod();
    public string get_RebootMsg();
    public string get_Command();
    public int get_CountActions();
    public ScAction[] get_Actions();
}
internal class DasMulli.Win32.ServiceUtils.ServiceHandle : SafeHandle {
    [CompilerGeneratedAttribute]
private INativeInterop <NativeInterop>k__BackingField;
    internal INativeInterop NativeInterop { get; internal set; }
    public bool IsInvalid { get; }
    [CompilerGeneratedAttribute]
internal INativeInterop get_NativeInterop();
    [CompilerGeneratedAttribute]
internal void set_NativeInterop(INativeInterop value);
    protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    public virtual void Start(bool throwIfAlreadyRunning);
    public virtual void Delete();
    public virtual void SetDescription(string description);
    public virtual void SetFailureActions(ServiceFailureActions serviceFailureActions);
    public virtual void SetFailureActionFlag(bool enabled);
    public virtual void ChangeConfig(string displayName, string binaryPath, ServiceType serviceType, ServiceStartType startupType, ErrorSeverity errorSeverity, Win32ServiceCredentials credentials);
    public virtual void SetDelayedAutoStartFlag(bool delayedAutoStart);
}
internal class DasMulli.Win32.ServiceUtils.ServiceMainFunction : MulticastDelegate {
    public ServiceMainFunction(object object, IntPtr method);
    public virtual void Invoke(int numArs, IntPtr argPtrPtr);
    public virtual IAsyncResult BeginInvoke(int numArs, IntPtr argPtrPtr, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum DasMulli.Win32.ServiceUtils.ServiceStartType : Enum {
    public UInt32 value__;
    public static ServiceStartType StartOnBoot;
    public static ServiceStartType StartOnSystemStart;
    public static ServiceStartType AutoStart;
    public static ServiceStartType StartOnDemand;
    public static ServiceStartType Disabled;
}
public enum DasMulli.Win32.ServiceUtils.ServiceState : Enum {
    public UInt32 value__;
    public static ServiceState Stopped;
    public static ServiceState StartPending;
    public static ServiceState StopPending;
    public static ServiceState Running;
    public static ServiceState ContinuePending;
    public static ServiceState PausePending;
    public static ServiceState Paused;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Misspelled, use 'StartPending' instead. This member will be removed in upcoming versions.", "True")]
public static ServiceState StartPening;
}
internal class DasMulli.Win32.ServiceUtils.ServiceStatus : ValueType {
    private ServiceType serviceType;
    private ServiceState state;
    private ServiceAcceptedControlCommandsFlags acceptedControlCommands;
    private int win32ExitCode;
    private UInt32 serviceSpecificExitCode;
    private UInt32 checkPoint;
    private UInt32 waitHint;
    public ServiceType ServiceType { get; public set; }
    public ServiceState State { get; public set; }
    public ServiceAcceptedControlCommandsFlags AcceptedControlCommands { get; public set; }
    public int Win32ExitCode { get; public set; }
    public UInt32 ServiceSpecificExitCode { get; public set; }
    public UInt32 CheckPoint { get; public set; }
    public UInt32 WaitHint { get; public set; }
    public ServiceStatus(ServiceType serviceType, ServiceState state, ServiceAcceptedControlCommandsFlags acceptedControlCommands, int win32ExitCode, UInt32 serviceSpecificExitCode, UInt32 checkPoint, UInt32 waitHint);
    public ServiceType get_ServiceType();
    public void set_ServiceType(ServiceType value);
    public ServiceState get_State();
    public void set_State(ServiceState value);
    public ServiceAcceptedControlCommandsFlags get_AcceptedControlCommands();
    public void set_AcceptedControlCommands(ServiceAcceptedControlCommandsFlags value);
    public int get_Win32ExitCode();
    public void set_Win32ExitCode(int value);
    public UInt32 get_ServiceSpecificExitCode();
    public void set_ServiceSpecificExitCode(UInt32 value);
    public UInt32 get_CheckPoint();
    public void set_CheckPoint(UInt32 value);
    public UInt32 get_WaitHint();
    public void set_WaitHint(UInt32 value);
}
internal class DasMulli.Win32.ServiceUtils.ServiceStatusHandle : SafeHandle {
    [CompilerGeneratedAttribute]
private INativeInterop <NativeInterop>k__BackingField;
    internal INativeInterop NativeInterop { get; internal set; }
    public bool IsInvalid { get; }
    [CompilerGeneratedAttribute]
internal INativeInterop get_NativeInterop();
    [CompilerGeneratedAttribute]
internal void set_NativeInterop(INativeInterop value);
    protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
}
public class DasMulli.Win32.ServiceUtils.ServiceStatusReportCallback : MulticastDelegate {
    public ServiceStatusReportCallback(object object, IntPtr method);
    public virtual void Invoke(ServiceState state, ServiceAcceptedControlCommandsFlags acceptedControlCommands, int win32ExitCode, UInt32 waitHint);
    public virtual IAsyncResult BeginInvoke(ServiceState state, ServiceAcceptedControlCommandsFlags acceptedControlCommands, int win32ExitCode, UInt32 waitHint, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DasMulli.Win32.ServiceUtils.ServiceStoppedCallback : MulticastDelegate {
    public ServiceStoppedCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class DasMulli.Win32.ServiceUtils.ServiceTableEntry : ValueType {
    internal string serviceName;
    internal IntPtr serviceMainFunction;
}
internal enum DasMulli.Win32.ServiceUtils.ServiceType : Enum {
    public UInt32 value__;
    public static ServiceType FileSystemDriver;
    public static ServiceType KernelDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
    public static ServiceType InteractiveProcess;
}
[FlagsAttribute]
internal enum DasMulli.Win32.ServiceUtils.ServiceTypeFilter : Enum {
    public UInt32 value__;
    public static ServiceTypeFilter FileSystemDriver;
    public static ServiceTypeFilter KernelDriver;
    public static ServiceTypeFilter Win32OwnProcess;
    public static ServiceTypeFilter Win32ShareProcess;
    public static ServiceTypeFilter InteractiveProcess;
    public static ServiceTypeFilter All;
    public static ServiceTypeFilter Win32;
    public static ServiceTypeFilter Driver;
}
public class DasMulli.Win32.ServiceUtils.SimpleServiceStateMachine : object {
    private IWin32Service serviceImplementation;
    private ServiceStatusReportCallback statusReportCallback;
    public SimpleServiceStateMachine(IWin32Service serviceImplementation);
    public sealed virtual void OnStart(String[] startupArguments, ServiceStatusReportCallback statusReportCallback);
    public sealed virtual void OnCommand(ServiceControlCommand command, UInt32 commandSpecificEventType);
    private void HandleServiceImplementationStoppedOnItsOwn();
}
[FlagsAttribute]
internal enum DasMulli.Win32.ServiceUtils.Win32AccessMask : Enum {
    public UInt32 value__;
    public static Win32AccessMask Delete;
    public static Win32AccessMask ReadControl;
    public static Win32AccessMask WriteDac;
    public static Win32AccessMask WriteOwner;
    public static Win32AccessMask Synchronize;
    public static Win32AccessMask StandardRightsRequired;
    public static Win32AccessMask StandardRightsRead;
    public static Win32AccessMask StandardRightsWrite;
    public static Win32AccessMask StandardRightsExecute;
    public static Win32AccessMask StandardRightsAll;
    public static Win32AccessMask SpecificRightsAll;
    public static Win32AccessMask AccessSystemSecurity;
    public static Win32AccessMask MaximumAllowed;
    public static Win32AccessMask GenericRead;
    public static Win32AccessMask GenericWrite;
    public static Win32AccessMask GenericExecute;
    public static Win32AccessMask GenericAll;
    public static Win32AccessMask DesktopReadobjects;
    public static Win32AccessMask DesktopCreatewindow;
    public static Win32AccessMask DesktopCreatemenu;
    public static Win32AccessMask DesktopHookcontrol;
    public static Win32AccessMask DesktopJournalrecord;
    public static Win32AccessMask DesktopJournalplayback;
    public static Win32AccessMask DesktopEnumerate;
    public static Win32AccessMask DesktopWriteobjects;
    public static Win32AccessMask DesktopSwitchdesktop;
    public static Win32AccessMask WinstaEnumdesktops;
    public static Win32AccessMask WinstaReadattributes;
    public static Win32AccessMask WinstaAccessclipboard;
    public static Win32AccessMask WinstaCreatedesktop;
    public static Win32AccessMask WinstaWriteattributes;
    public static Win32AccessMask WinstaAccessglobalatoms;
    public static Win32AccessMask WinstaExitwindows;
    public static Win32AccessMask WinstaEnumerate;
    public static Win32AccessMask WinstaReadscreen;
    public static Win32AccessMask WinstaAllAccess;
}
internal static class DasMulli.Win32.ServiceUtils.Win32Interop : object {
    internal static INativeInterop Wrapper;
    private static string DllServiceCore_L1_1_0;
    private static string DllServiceManagement_L1_1_0;
    private static string DllServiceManagement_L2_1_0;
    private static Win32Interop();
    private static bool CloseServiceHandle(IntPtr handle);
    private static bool StartServiceCtrlDispatcherW(ServiceTableEntry[] serviceTable);
    private static ServiceStatusHandle RegisterServiceCtrlHandlerExW(string serviceName, ServiceControlHandler serviceControlHandler, IntPtr context);
    private static bool SetServiceStatus(ServiceStatusHandle statusHandle, ServiceStatus& pServiceStatus);
    private static ServiceControlManager OpenSCManagerW(string machineName, string databaseName, ServiceControlManagerAccessRights dwAccess);
    private static ServiceHandle CreateServiceW(ServiceControlManager serviceControlManager, string serviceName, string displayName, ServiceControlAccessRights desiredControlAccess, ServiceType serviceType, ServiceStartType startType, ErrorSeverity errorSeverity, string binaryPath, string loadOrderGroup, IntPtr outUIntTagId, string dependencies, string serviceUserName, string servicePassword);
    private static bool ChangeServiceConfigW(ServiceHandle service, ServiceType serviceType, ServiceStartType startType, ErrorSeverity errorSeverity, string binaryPath, string loadOrderGroup, IntPtr outUIntTagId, string dependencies, string serviceUserName, string servicePassword, string displayName);
    private static ServiceHandle OpenServiceW(ServiceControlManager serviceControlManager, string serviceName, ServiceControlAccessRights desiredControlAccess);
    private static bool StartServiceW(ServiceHandle service, UInt32 argc, IntPtr wargv);
    private static bool DeleteService(ServiceHandle service);
    private static bool ChangeServiceConfig2W(ServiceHandle service, ServiceConfigInfoTypeLevel infoTypeLevel, IntPtr info);
}
public class DasMulli.Win32.ServiceUtils.Win32ServiceCredentials : ValueType {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public static Win32ServiceCredentials LocalSystem;
    public static Win32ServiceCredentials LocalService;
    public static Win32ServiceCredentials NetworkService;
    public string UserName { get; }
    public string Password { get; }
    public Win32ServiceCredentials(string userName, string password);
    private static Win32ServiceCredentials();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public string get_Password();
    public sealed virtual bool Equals(Win32ServiceCredentials other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Win32ServiceCredentials left, Win32ServiceCredentials right);
    public static bool op_Inequality(Win32ServiceCredentials left, Win32ServiceCredentials right);
}
public class DasMulli.Win32.ServiceUtils.Win32ServiceHost : object {
    private string serviceName;
    private IWin32ServiceStateMachine stateMachine;
    private INativeInterop nativeInterop;
    private ServiceMainFunction serviceMainFunctionDelegate;
    private ServiceControlHandler serviceControlHandlerDelegate;
    private ServiceStatus serviceStatus;
    private ServiceStatusHandle serviceStatusHandle;
    private int resultCode;
    private Exception resultException;
    private UInt32 checkpointCounter;
    public Win32ServiceHost(IWin32Service service);
    internal Win32ServiceHost(IWin32Service service, INativeInterop nativeInterop);
    public Win32ServiceHost(string serviceName, IWin32ServiceStateMachine stateMachine);
    internal Win32ServiceHost(string serviceName, IWin32ServiceStateMachine stateMachine, INativeInterop nativeInterop);
    [ObsoleteAttribute("Doesn't really work when used in an async continuation on a background thread due to windows API requirements. Use Run() from the main thread instead (blocking).")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Task`1<int> RunAsync();
    public int Run();
    private void ServiceMainFunction(int numArgs, IntPtr argPtrPtr);
    private void ReportServiceStatus(ServiceState state, ServiceAcceptedControlCommandsFlags acceptedControlCommands, int win32ExitCode, UInt32 waitHint);
    private void HandleServiceControlCommand(ServiceControlCommand command, UInt32 eventType, IntPtr eventData, IntPtr eventContext);
    private static String[] ParseArguments(int numArgs, IntPtr argPtrPtr);
}
public class DasMulli.Win32.ServiceUtils.Win32ServiceManager : object {
    private string machineName;
    private string databaseName;
    private INativeInterop nativeInterop;
    public Win32ServiceManager(string machineName, string databaseName);
    internal Win32ServiceManager(string machineName, string databaseName, INativeInterop nativeInterop);
    [ObsoleteAttribute("Use the CreateService() overload taking a ServiceDefinition argument instead. This method only exists for backwards compatibility.")]
public void CreateService(string serviceName, string displayName, string description, string binaryPath, Win32ServiceCredentials credentials, bool autoStart, bool startImmediately, ErrorSeverity errorSeverity);
    public void CreateService(ServiceDefinition serviceDefinition, bool startImmediately);
    private void DoCreateService(ServiceControlManager serviceControlManager, ServiceDefinition serviceDefinition, bool startImmediately);
    public void CreateOrUpdateService(ServiceDefinition serviceDefinition, bool startImmediately);
    private static void DoUpdateService(ServiceHandle existingService, ServiceDefinition serviceDefinition, bool startIfNotRunning);
    public void DeleteService(string serviceName);
}
