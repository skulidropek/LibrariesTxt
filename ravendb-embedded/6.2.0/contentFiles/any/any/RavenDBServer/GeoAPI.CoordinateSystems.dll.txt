public class GeoAPI.CoordinateSystems.AxisInfo : object {
    private string _Name;
    private AxisOrientationEnum _Orientation;
    public string Name { get; public set; }
    public AxisOrientationEnum Orientation { get; public set; }
    public string WKT { get; }
    public string XML { get; }
    public AxisInfo(string name, AxisOrientationEnum orientation);
    public string get_Name();
    public void set_Name(string value);
    public AxisOrientationEnum get_Orientation();
    public void set_Orientation(AxisOrientationEnum value);
    public string get_WKT();
    public string get_XML();
}
public enum GeoAPI.CoordinateSystems.AxisOrientationEnum : Enum {
    public short value__;
    public static AxisOrientationEnum Other;
    public static AxisOrientationEnum North;
    public static AxisOrientationEnum South;
    public static AxisOrientationEnum East;
    public static AxisOrientationEnum West;
    public static AxisOrientationEnum Up;
    public static AxisOrientationEnum Down;
}
public enum GeoAPI.CoordinateSystems.DatumType : Enum {
    public int value__;
    public static DatumType HD_Min;
    public static DatumType HD_Other;
    public static DatumType HD_Classic;
    public static DatumType HD_Geocentric;
    public static DatumType HD_Max;
    public static DatumType VD_Min;
    public static DatumType VD_Other;
    public static DatumType VD_Orthometric;
    public static DatumType VD_Ellipsoidal;
    public static DatumType VD_AltitudeBarometric;
    public static DatumType VD_Normal;
    public static DatumType VD_GeoidModelDerived;
    public static DatumType VD_Depth;
    public static DatumType VD_Max;
    public static DatumType LD_Min;
    public static DatumType LD_Max;
}
public interface GeoAPI.CoordinateSystems.IAngularUnit {
    public double RadiansPerUnit { get; public set; }
    public abstract virtual double get_RadiansPerUnit();
    public abstract virtual void set_RadiansPerUnit(double value);
}
public interface GeoAPI.CoordinateSystems.ICompoundCoordinateSystem {
    public ICoordinateSystem HeadCS { get; }
    public ICoordinateSystem TailCS { get; }
    public abstract virtual ICoordinateSystem get_HeadCS();
    public abstract virtual ICoordinateSystem get_TailCS();
}
public interface GeoAPI.CoordinateSystems.ICoordinateSystem {
    public int Dimension { get; }
    public Double[] DefaultEnvelope { get; }
    public abstract virtual int get_Dimension();
    public abstract virtual AxisInfo GetAxis(int dimension);
    public abstract virtual IUnit GetUnits(int dimension);
    public abstract virtual Double[] get_DefaultEnvelope();
}
public interface GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory {
    public string Authority { get; }
    public string DescriptionText { get; }
    public abstract virtual string get_Authority();
    public abstract virtual IProjectedCoordinateSystem CreateProjectedCoordinateSystem(long code);
    public abstract virtual IGeographicCoordinateSystem CreateGeographicCoordinateSystem(long code);
    public abstract virtual IHorizontalDatum CreateHorizontalDatum(long code);
    public abstract virtual IEllipsoid CreateEllipsoid(long code);
    public abstract virtual IPrimeMeridian CreatePrimeMeridian(long code);
    public abstract virtual ILinearUnit CreateLinearUnit(long code);
    public abstract virtual IAngularUnit CreateAngularUnit(long code);
    public abstract virtual IVerticalDatum CreateVerticalDatum(long code);
    public abstract virtual IVerticalCoordinateSystem CreateVerticalCoordinateSystem(long code);
    public abstract virtual ICompoundCoordinateSystem CreateCompoundCoordinateSystem(long code);
    public abstract virtual IHorizontalCoordinateSystem CreateHorizontalCoordinateSystem(long code);
    public abstract virtual string get_DescriptionText();
    public abstract virtual string GeoidFromWktName(string wkt);
    public abstract virtual string WktGeoidName(string geoid);
}
public interface GeoAPI.CoordinateSystems.ICoordinateSystemFactory {
    public abstract virtual ICompoundCoordinateSystem CreateCompoundCoordinateSystem(string name, ICoordinateSystem head, ICoordinateSystem tail);
    public abstract virtual IEllipsoid CreateEllipsoid(string name, double semiMajorAxis, double semiMinorAxis, ILinearUnit linearUnit);
    public abstract virtual IFittedCoordinateSystem CreateFittedCoordinateSystem(string name, ICoordinateSystem baseCoordinateSystem, string toBaseWkt, List`1<AxisInfo> arAxes);
    public abstract virtual IEllipsoid CreateFlattenedSphere(string name, double semiMajorAxis, double inverseFlattening, ILinearUnit linearUnit);
    public abstract virtual ICoordinateSystem CreateFromXml(string xml);
    public abstract virtual ICoordinateSystem CreateFromWkt(string WKT);
    public abstract virtual IGeographicCoordinateSystem CreateGeographicCoordinateSystem(string name, IAngularUnit angularUnit, IHorizontalDatum datum, IPrimeMeridian primeMeridian, AxisInfo axis0, AxisInfo axis1);
    public abstract virtual IHorizontalDatum CreateHorizontalDatum(string name, DatumType datumType, IEllipsoid ellipsoid, Wgs84ConversionInfo toWgs84);
    public abstract virtual ILocalCoordinateSystem CreateLocalCoordinateSystem(string name, ILocalDatum datum, IUnit unit, List`1<AxisInfo> axes);
    public abstract virtual ILocalDatum CreateLocalDatum(string name, DatumType datumType);
    public abstract virtual IPrimeMeridian CreatePrimeMeridian(string name, IAngularUnit angularUnit, double longitude);
    public abstract virtual IProjectedCoordinateSystem CreateProjectedCoordinateSystem(string name, IGeographicCoordinateSystem gcs, IProjection projection, ILinearUnit linearUnit, AxisInfo axis0, AxisInfo axis1);
    public abstract virtual IProjection CreateProjection(string name, string wktProjectionClass, List`1<ProjectionParameter> Parameters);
    public abstract virtual IVerticalCoordinateSystem CreateVerticalCoordinateSystem(string name, IVerticalDatum datum, ILinearUnit verticalUnit, AxisInfo axis);
    public abstract virtual IVerticalDatum CreateVerticalDatum(string name, DatumType datumType);
}
public interface GeoAPI.CoordinateSystems.IDatum {
    public DatumType DatumType { get; public set; }
    public abstract virtual DatumType get_DatumType();
    public abstract virtual void set_DatumType(DatumType value);
}
public interface GeoAPI.CoordinateSystems.IEllipsoid {
    public double SemiMajorAxis { get; public set; }
    public double SemiMinorAxis { get; public set; }
    public double InverseFlattening { get; public set; }
    public ILinearUnit AxisUnit { get; public set; }
    public bool IsIvfDefinitive { get; public set; }
    public abstract virtual double get_SemiMajorAxis();
    public abstract virtual void set_SemiMajorAxis(double value);
    public abstract virtual double get_SemiMinorAxis();
    public abstract virtual void set_SemiMinorAxis(double value);
    public abstract virtual double get_InverseFlattening();
    public abstract virtual void set_InverseFlattening(double value);
    public abstract virtual ILinearUnit get_AxisUnit();
    public abstract virtual void set_AxisUnit(ILinearUnit value);
    public abstract virtual bool get_IsIvfDefinitive();
    public abstract virtual void set_IsIvfDefinitive(bool value);
}
public interface GeoAPI.CoordinateSystems.IFittedCoordinateSystem {
    public ICoordinateSystem BaseCoordinateSystem { get; }
    public abstract virtual ICoordinateSystem get_BaseCoordinateSystem();
    public abstract virtual string ToBase();
}
public interface GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem {
    public IHorizontalDatum HorizontalDatum { get; public set; }
    public ILinearUnit LinearUnit { get; public set; }
    public IPrimeMeridian PrimeMeridian { get; public set; }
    public abstract virtual IHorizontalDatum get_HorizontalDatum();
    public abstract virtual void set_HorizontalDatum(IHorizontalDatum value);
    public abstract virtual ILinearUnit get_LinearUnit();
    public abstract virtual void set_LinearUnit(ILinearUnit value);
    public abstract virtual IPrimeMeridian get_PrimeMeridian();
    public abstract virtual void set_PrimeMeridian(IPrimeMeridian value);
}
public interface GeoAPI.CoordinateSystems.IGeodeticSpatialReference {
}
public interface GeoAPI.CoordinateSystems.IGeographicCoordinateSystem {
    public IAngularUnit AngularUnit { get; public set; }
    public IPrimeMeridian PrimeMeridian { get; public set; }
    public int NumConversionToWGS84 { get; }
    public abstract virtual IAngularUnit get_AngularUnit();
    public abstract virtual void set_AngularUnit(IAngularUnit value);
    public abstract virtual IPrimeMeridian get_PrimeMeridian();
    public abstract virtual void set_PrimeMeridian(IPrimeMeridian value);
    public abstract virtual int get_NumConversionToWGS84();
    public abstract virtual Wgs84ConversionInfo GetWgs84ConversionInfo(int index);
}
public interface GeoAPI.CoordinateSystems.IGeographicTransform {
    public IGeographicCoordinateSystem SourceGCS { get; public set; }
    public IGeographicCoordinateSystem TargetGCS { get; public set; }
    public IParameterInfo ParameterInfo { get; }
    public abstract virtual IGeographicCoordinateSystem get_SourceGCS();
    public abstract virtual void set_SourceGCS(IGeographicCoordinateSystem value);
    public abstract virtual IGeographicCoordinateSystem get_TargetGCS();
    public abstract virtual void set_TargetGCS(IGeographicCoordinateSystem value);
    public abstract virtual IParameterInfo get_ParameterInfo();
    public abstract virtual List`1<Double[]> Forward(List`1<Double[]> points);
    public abstract virtual List`1<Double[]> Inverse(List`1<Double[]> points);
}
public interface GeoAPI.CoordinateSystems.IHorizontalCoordinateSystem {
    public IHorizontalDatum HorizontalDatum { get; public set; }
    public abstract virtual IHorizontalDatum get_HorizontalDatum();
    public abstract virtual void set_HorizontalDatum(IHorizontalDatum value);
}
public interface GeoAPI.CoordinateSystems.IHorizontalDatum {
    public IEllipsoid Ellipsoid { get; public set; }
    public Wgs84ConversionInfo Wgs84Parameters { get; public set; }
    public abstract virtual IEllipsoid get_Ellipsoid();
    public abstract virtual void set_Ellipsoid(IEllipsoid value);
    public abstract virtual Wgs84ConversionInfo get_Wgs84Parameters();
    public abstract virtual void set_Wgs84Parameters(Wgs84ConversionInfo value);
}
public interface GeoAPI.CoordinateSystems.IInfo {
    public string Name { get; }
    public string Authority { get; }
    public long AuthorityCode { get; }
    public string Alias { get; }
    public string Abbreviation { get; }
    public string Remarks { get; }
    public string WKT { get; }
    public string XML { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Authority();
    public abstract virtual long get_AuthorityCode();
    public abstract virtual string get_Alias();
    public abstract virtual string get_Abbreviation();
    public abstract virtual string get_Remarks();
    public abstract virtual string get_WKT();
    public abstract virtual string get_XML();
    public abstract virtual bool EqualParams(object obj);
}
public interface GeoAPI.CoordinateSystems.ILinearUnit {
    public double MetersPerUnit { get; public set; }
    public abstract virtual double get_MetersPerUnit();
    public abstract virtual void set_MetersPerUnit(double value);
}
public interface GeoAPI.CoordinateSystems.ILocalCoordinateSystem {
    public ILocalDatum LocalDatum { get; public set; }
    public abstract virtual ILocalDatum get_LocalDatum();
    public abstract virtual void set_LocalDatum(ILocalDatum value);
}
public interface GeoAPI.CoordinateSystems.ILocalDatum {
}
public interface GeoAPI.CoordinateSystems.IParameterInfo {
    public int NumParameters { get; }
    public List`1<Parameter> Parameters { get; public set; }
    public abstract virtual int get_NumParameters();
    public abstract virtual Parameter[] DefaultParameters();
    public abstract virtual List`1<Parameter> get_Parameters();
    public abstract virtual void set_Parameters(List`1<Parameter> value);
    public abstract virtual Parameter GetParameterByName(string name);
}
public interface GeoAPI.CoordinateSystems.IPrimeMeridian {
    public double Longitude { get; public set; }
    public IAngularUnit AngularUnit { get; public set; }
    public abstract virtual double get_Longitude();
    public abstract virtual void set_Longitude(double value);
    public abstract virtual IAngularUnit get_AngularUnit();
    public abstract virtual void set_AngularUnit(IAngularUnit value);
}
public interface GeoAPI.CoordinateSystems.IProjectedCoordinateSystem {
    public IGeographicCoordinateSystem GeographicCoordinateSystem { get; public set; }
    public ILinearUnit LinearUnit { get; public set; }
    public IProjection Projection { get; public set; }
    public abstract virtual IGeographicCoordinateSystem get_GeographicCoordinateSystem();
    public abstract virtual void set_GeographicCoordinateSystem(IGeographicCoordinateSystem value);
    public abstract virtual ILinearUnit get_LinearUnit();
    public abstract virtual void set_LinearUnit(ILinearUnit value);
    public abstract virtual IProjection get_Projection();
    public abstract virtual void set_Projection(IProjection value);
}
public interface GeoAPI.CoordinateSystems.IProjection {
    public int NumParameters { get; }
    public string ClassName { get; }
    public abstract virtual int get_NumParameters();
    public abstract virtual string get_ClassName();
    public abstract virtual ProjectionParameter GetParameter(int index);
    public abstract virtual ProjectionParameter GetParameter(string name);
}
public interface GeoAPI.CoordinateSystems.IUnit {
}
public interface GeoAPI.CoordinateSystems.IVerticalCoordinateSystem {
    public IVerticalDatum VerticalDatum { get; public set; }
    public ILinearUnit VerticalUnit { get; public set; }
    public abstract virtual IVerticalDatum get_VerticalDatum();
    public abstract virtual void set_VerticalDatum(IVerticalDatum value);
    public abstract virtual ILinearUnit get_VerticalUnit();
    public abstract virtual void set_VerticalUnit(ILinearUnit value);
}
public interface GeoAPI.CoordinateSystems.IVerticalDatum {
}
public class GeoAPI.CoordinateSystems.Parameter : object {
    private string _Name;
    private double _Value;
    public string Name { get; public set; }
    public double Value { get; public set; }
    public Parameter(string name, double value);
    public string get_Name();
    public void set_Name(string value);
    public double get_Value();
    public void set_Value(double value);
}
public class GeoAPI.CoordinateSystems.ProjectionParameter : object {
    private string _Name;
    private double _Value;
    public string Name { get; public set; }
    public double Value { get; public set; }
    public string WKT { get; }
    public string XML { get; }
    public ProjectionParameter(string name, double value);
    public string get_Name();
    public void set_Name(string value);
    public double get_Value();
    public void set_Value(double value);
    public string get_WKT();
    public string get_XML();
    public virtual string ToString();
}
public enum GeoAPI.CoordinateSystems.Transformations.DomainFlags : Enum {
    public int value__;
    public static DomainFlags Inside;
    public static DomainFlags Outside;
    public static DomainFlags Discontinuous;
}
public interface GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation {
    public string AreaOfUse { get; }
    public string Authority { get; }
    public long AuthorityCode { get; }
    public IMathTransform MathTransform { get; }
    public string Name { get; }
    public string Remarks { get; }
    public ICoordinateSystem SourceCS { get; }
    public ICoordinateSystem TargetCS { get; }
    public TransformType TransformType { get; }
    public abstract virtual string get_AreaOfUse();
    public abstract virtual string get_Authority();
    public abstract virtual long get_AuthorityCode();
    public abstract virtual IMathTransform get_MathTransform();
    public abstract virtual string get_Name();
    public abstract virtual string get_Remarks();
    public abstract virtual ICoordinateSystem get_SourceCS();
    public abstract virtual ICoordinateSystem get_TargetCS();
    public abstract virtual TransformType get_TransformType();
}
public interface GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory {
    public abstract virtual ICoordinateTransformation CreateFromCoordinateSystems(ICoordinateSystem sourceCS, ICoordinateSystem targetCS);
}
public interface GeoAPI.CoordinateSystems.Transformations.IMathTransform {
    public int DimSource { get; }
    public int DimTarget { get; }
    public string WKT { get; }
    public string XML { get; }
    public abstract virtual int get_DimSource();
    public abstract virtual int get_DimTarget();
    public abstract virtual bool Identity();
    public abstract virtual string get_WKT();
    public abstract virtual string get_XML();
    public abstract virtual Double[0...,0...] Derivative(Double[] point);
    public abstract virtual List`1<double> GetCodomainConvexHull(List`1<double> points);
    public abstract virtual DomainFlags GetDomainFlags(List`1<double> points);
    public abstract virtual IMathTransform Inverse();
    public abstract virtual Double[] Transform(Double[] point);
    [ObsoleteAttribute("Use Coordinate Transform(Coordinate coordinate) instead.")]
public abstract virtual ICoordinate Transform(ICoordinate coordinate);
    public abstract virtual Coordinate Transform(Coordinate coordinate);
    public abstract virtual IList`1<Double[]> TransformList(IList`1<Double[]> points);
    public abstract virtual IList`1<Coordinate> TransformList(IList`1<Coordinate> points);
    public abstract virtual void Invert();
    public abstract virtual ICoordinateSequence Transform(ICoordinateSequence coordinateSequence);
}
public interface GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory {
    public abstract virtual IMathTransform CreateAffineTransform(Double[0...,0...] matrix);
    public abstract virtual IMathTransform CreateConcatenatedTransform(IMathTransform transform1, IMathTransform transform2);
    public abstract virtual IMathTransform CreateFromWKT(string wkt);
    public abstract virtual IMathTransform CreateFromXML(string xml);
    public abstract virtual IMathTransform CreateParameterizedTransform(string classification, List`1<Parameter> parameters);
    public abstract virtual IMathTransform CreatePassThroughTransform(int firstAffectedOrdinate, IMathTransform subTransform);
    public abstract virtual bool IsParameterAngular(string parameterName);
    public abstract virtual bool IsParameterLinear(string parameterName);
}
public enum GeoAPI.CoordinateSystems.Transformations.TransformType : Enum {
    public int value__;
    public static TransformType Other;
    public static TransformType Conversion;
    public static TransformType Transformation;
    public static TransformType ConversionAndTransformation;
}
public class GeoAPI.CoordinateSystems.Wgs84ConversionInfo : object {
    private static double SEC_TO_RAD;
    public double Dx;
    public double Dy;
    public double Dz;
    public double Ex;
    public double Ey;
    public double Ez;
    public double Ppm;
    public string AreaOfUse;
    public string WKT { get; }
    public string XML { get; }
    public bool HasZeroValuesOnly { get; }
    public Wgs84ConversionInfo(double dx, double dy, double dz, double ex, double ey, double ez, double ppm);
    public Wgs84ConversionInfo(double dx, double dy, double dz, double ex, double ey, double ez, double ppm, string areaOfUse);
    public Double[] GetAffineTransform();
    public string get_WKT();
    public string get_XML();
    public virtual string ToString();
    public bool get_HasZeroValuesOnly();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(Wgs84ConversionInfo obj);
}
public interface GeoAPI.ICoordinateSystemServices {
    public abstract virtual ICoordinateSystem GetCoordinateSystem(int srid);
    public abstract virtual ICoordinateSystem GetCoordinateSystem(string authority, long code);
    public abstract virtual Nullable`1<int> GetSRID(string authority, long authorityCode);
    public abstract virtual ICoordinateTransformation CreateTransformation(int sourceSrid, int targetSrid);
    public abstract virtual ICoordinateTransformation CreateTransformation(ICoordinateSystem source, ICoordinateSystem target);
}
