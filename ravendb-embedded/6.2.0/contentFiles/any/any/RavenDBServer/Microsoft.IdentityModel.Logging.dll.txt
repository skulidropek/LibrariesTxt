[EventSourceAttribute]
public class Microsoft.IdentityModel.Logging.IdentityModelEventSource : EventSource {
    [CompilerGeneratedAttribute]
private static IdentityModelEventSource <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ShowPII>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <LogCompleteSecurityArtifact>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HiddenPIIString>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HiddenSecurityArtifactString>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <HeaderWritten>k__BackingField;
    private static string _versionLogMessage;
    private static string _dateLogMessage;
    private static string _piiOffLogMessage;
    private static string _piiOnLogMessage;
    [CompilerGeneratedAttribute]
private EventLevel <LogLevel>k__BackingField;
    public static IdentityModelEventSource Logger { get; }
    public static bool ShowPII { get; public set; }
    public static bool LogCompleteSecurityArtifact { get; public set; }
    public static string HiddenPIIString { get; }
    public static string HiddenSecurityArtifactString { get; }
    public static bool HeaderWritten { get; public set; }
    public EventLevel LogLevel { get; public set; }
    private static IdentityModelEventSource();
    [CompilerGeneratedAttribute]
public static IdentityModelEventSource get_Logger();
    [CompilerGeneratedAttribute]
public static bool get_ShowPII();
    [CompilerGeneratedAttribute]
public static void set_ShowPII(bool value);
    [CompilerGeneratedAttribute]
public static bool get_LogCompleteSecurityArtifact();
    [CompilerGeneratedAttribute]
public static void set_LogCompleteSecurityArtifact(bool value);
    [CompilerGeneratedAttribute]
public static string get_HiddenPIIString();
    [CompilerGeneratedAttribute]
public static string get_HiddenSecurityArtifactString();
    [CompilerGeneratedAttribute]
public static bool get_HeaderWritten();
    [CompilerGeneratedAttribute]
public static void set_HeaderWritten(bool value);
    [EventAttribute("6")]
public void WriteAlways(string message);
    [NonEventAttribute]
public void WriteAlways(string message, Object[] args);
    [EventAttribute("1")]
public void WriteVerbose(string message);
    [NonEventAttribute]
public void WriteVerbose(string message, Object[] args);
    [EventAttribute("2")]
public void WriteInformation(string message);
    [NonEventAttribute]
public void WriteInformation(string message, Object[] args);
    [EventAttribute("3")]
public void WriteWarning(string message);
    [NonEventAttribute]
public void WriteWarning(string message, Object[] args);
    [EventAttribute("4")]
public void WriteError(string message);
    [NonEventAttribute]
public void WriteError(string message, Object[] args);
    [EventAttribute("5")]
public void WriteCritical(string message);
    [NonEventAttribute]
public void WriteCritical(string message, Object[] args);
    [NonEventAttribute]
public void Write(EventLevel level, Exception innerException, string message);
    [NonEventAttribute]
public void Write(EventLevel level, Exception innerException, string message, Object[] args);
    [CompilerGeneratedAttribute]
public EventLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(EventLevel value);
    private static string PrepareMessage(EventLevel level, string message, Object[] args);
}
public static class Microsoft.IdentityModel.Logging.IdentityModelTelemetryUtil : object {
    internal static string skuTelemetry;
    internal static string versionTelemetry;
    internal static List`1<string> defaultTelemetryValues;
    internal static ConcurrentDictionary`2<string, string> telemetryData;
    public static string ClientSku { get; }
    public static string ClientVer { get; }
    private static IdentityModelTelemetryUtil();
    public static string get_ClientSku();
    public static string get_ClientVer();
    public static bool AddTelemetryData(string key, string value);
    public static bool RemoveTelemetryData(string key);
    internal static void SetTelemetryData(HttpRequestMessage request, IDictionary`2<string, string> additionalHeaders);
    internal static bool UpdateDefaultTelemetryData(string key, string value);
}
public interface Microsoft.IdentityModel.Logging.ISafeLogSecurityArtifact {
    public abstract virtual string UnsafeToString();
}
public class Microsoft.IdentityModel.Logging.LoggerContext : object {
    [CompilerGeneratedAttribute]
private Guid <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <PropertyBag>k__BackingField;
    public Guid ActivityId { get; public set; }
    public bool CaptureLogs { get; public set; }
    public string DebugId { get; public set; }
    public ICollection`1<string> Logs { get; private set; }
    public IDictionary`2<string, object> PropertyBag { get; public set; }
    public LoggerContext(Guid activityId);
    [CompilerGeneratedAttribute]
public Guid get_ActivityId();
    [CompilerGeneratedAttribute]
public void set_ActivityId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_CaptureLogs();
    [CompilerGeneratedAttribute]
public void set_CaptureLogs(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DebugId();
    [CompilerGeneratedAttribute]
public virtual void set_DebugId(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Logs();
    [CompilerGeneratedAttribute]
private void set_Logs(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_PropertyBag();
    [CompilerGeneratedAttribute]
public void set_PropertyBag(IDictionary`2<string, object> value);
}
public class Microsoft.IdentityModel.Logging.LogHelper : object {
    [CompilerGeneratedAttribute]
private static IIdentityLogger <Logger>k__BackingField;
    private static bool _isHeaderWritten;
    private static string _piiOffLogMessage;
    private static string _piiOnLogMessage;
    public static IIdentityLogger Logger { get; public set; }
    internal static bool HeaderWritten { get; internal set; }
    private static LogHelper();
    [CompilerGeneratedAttribute]
public static IIdentityLogger get_Logger();
    [CompilerGeneratedAttribute]
public static void set_Logger(IIdentityLogger value);
    internal static bool get_HeaderWritten();
    internal static void set_HeaderWritten(bool value);
    public static bool IsEnabled(EventLogLevel level);
    public static ArgumentNullException LogArgumentNullException(string argument);
    public static T LogException(string message);
    public static T LogArgumentException(string argumentName, string message);
    public static T LogException(string format, Object[] args);
    public static T LogArgumentException(string argumentName, string format, Object[] args);
    public static T LogException(Exception innerException, string message);
    public static T LogArgumentException(string argumentName, Exception innerException, string message);
    public static T LogException(Exception innerException, string format, Object[] args);
    public static T LogArgumentException(string argumentName, Exception innerException, string format, Object[] args);
    public static T LogException(EventLevel eventLevel, string message);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, string message);
    public static T LogException(EventLevel eventLevel, string format, Object[] args);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, string format, Object[] args);
    public static T LogException(EventLevel eventLevel, Exception innerException, string message);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, Exception innerException, string message);
    public static T LogException(EventLevel eventLevel, Exception innerException, string format, Object[] args);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, Exception innerException, string format, Object[] args);
    public static Exception LogExceptionMessage(Exception exception);
    public static Exception LogExceptionMessage(EventLevel eventLevel, Exception exception);
    public static void LogInformation(string message, Object[] args);
    public static void LogVerbose(string message, Object[] args);
    public static void LogWarning(string message, Object[] args);
    private static T LogExceptionImpl(EventLevel eventLevel, string argumentName, Exception innerException, string format, Object[] args);
    private static EventLogLevel EventLevelToEventLogLevel(EventLevel eventLevel);
    private static EventLevel EventLogLevelToEventLevel(EventLogLevel eventLevel);
    public static string FormatInvariant(string format, Object[] args);
    private static object SanitizeSecurityArtifact(object arg);
    private static string RemovePII(object arg);
    internal static bool IsCustomException(Exception ex);
    public static object MarkAsNonPII(object arg);
    public static object MarkAsSecurityArtifact(object arg, Func`2<object, string> callback);
    public static object MarkAsSecurityArtifact(object arg, Func`2<object, string> callback, Func`2<object, string> callbackUnsafe);
    public static object MarkAsUnsafeSecurityArtifact(object arg, Func`2<object, string> callbackUnsafe);
    private static LogEntry WriteEntry(EventLogLevel eventLogLevel, Exception innerException, string message, Object[] args);
}
internal static class Microsoft.IdentityModel.Logging.LogMessages : object {
    internal static string MIML10000;
    internal static string MIML10001;
    internal static string MIML10002;
    internal static string MIML10003;
}
internal class Microsoft.IdentityModel.Logging.NonPII : ValueType {
    [CompilerGeneratedAttribute]
private object <Argument>k__BackingField;
    public object Argument { get; public set; }
    public NonPII(object argument);
    [CompilerGeneratedAttribute]
public object get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(object value);
    public virtual string ToString();
}
internal class Microsoft.IdentityModel.Logging.SecurityArtifact : ValueType {
    private static string _scrubbedArtifact;
    [CompilerGeneratedAttribute]
private object <Argument>k__BackingField;
    private Func`2<object, string> _disarmCallback;
    private Func`2<object, string> _callbackUnsafe;
    private object Argument { get; private set; }
    public SecurityArtifact(object argument, Func`2<object, string> toStringCallback);
    public SecurityArtifact(object argument, Func`2<object, string> toStringCallback, Func`2<object, string> toStringCallbackUnsafe);
    [CompilerGeneratedAttribute]
private object get_Argument();
    [CompilerGeneratedAttribute]
private void set_Argument(object value);
    public static string UnknownSafeTokenCallback(object _);
    public virtual string ToString();
    public sealed virtual string UnsafeToString();
}
public class Microsoft.IdentityModel.Logging.TextWriterEventListener : EventListener {
    private StreamWriter _streamWriter;
    private bool _disposeStreamWriter;
    public static string DefaultLogFileName;
    public TextWriterEventListener(string filePath);
    public TextWriterEventListener(StreamWriter streamWriter);
    private static TextWriterEventListener();
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    public virtual void Dispose();
}
