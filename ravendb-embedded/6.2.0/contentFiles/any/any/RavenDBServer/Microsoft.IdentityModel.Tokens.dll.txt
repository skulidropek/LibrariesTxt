[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.IdentityModel.Json.Bson.BsonArray : BsonToken {
    private List`1<BsonToken> _children;
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.IdentityModel.Json.Bson.BsonBinary : BsonValue {
    [CompilerGeneratedAttribute]
private BsonBinaryType <BinaryType>k__BackingField;
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Microsoft.IdentityModel.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Microsoft.IdentityModel.Json.Bson.BsonBinaryWriter : object {
    private static Encoding Encoding;
    private BinaryWriter _writer;
    private Byte[] _largeByteBuffer;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKindHandling>k__BackingField;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    private static BsonBinaryWriter();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    private void WriteTokenInternal(BsonToken t);
    private void WriteString(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix);
    public void WriteUtf8Bytes(string s, int byteCount);
    private int CalculateSize(int stringByteCount);
    private int CalculateSizeWithLength(int stringByteCount, bool includeSize);
    private int CalculateSize(BsonToken t);
}
internal class Microsoft.IdentityModel.Json.Bson.BsonBoolean : BsonValue {
    public static BsonBoolean False;
    public static BsonBoolean True;
    private BsonBoolean(bool value);
    private static BsonBoolean();
}
internal class Microsoft.IdentityModel.Json.Bson.BsonEmpty : BsonToken {
    public static BsonToken Null;
    public static BsonToken Undefined;
    [CompilerGeneratedAttribute]
private BsonType <Type>k__BackingField;
    public BsonType Type { get; }
    private BsonEmpty(BsonType type);
    private static BsonEmpty();
    [CompilerGeneratedAttribute]
public virtual BsonType get_Type();
}
internal class Microsoft.IdentityModel.Json.Bson.BsonObject : BsonToken {
    private List`1<BsonProperty> _children;
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.IdentityModel.Json.Bson for more details.")]
internal class Microsoft.IdentityModel.Json.Bson.BsonObjectId : object {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; }
    public BsonObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
}
internal class Microsoft.IdentityModel.Json.Bson.BsonProperty : object {
    [CompilerGeneratedAttribute]
private BsonString <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonToken <Value>k__BackingField;
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.IdentityModel.Json.Bson for more details.")]
internal class Microsoft.IdentityModel.Json.Bson.BsonReader : JsonReader {
    private static int MaxCharBytesSize;
    private static Byte[] SeqRange1;
    private static Byte[] SeqRange2;
    private static Byte[] SeqRange3;
    private static Byte[] SeqRange4;
    private BinaryReader _reader;
    private List`1<ContainerContext> _stack;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private BsonType _currentElementType;
    private BsonReaderState _bsonReaderState;
    private ContainerContext _currentContext;
    private bool _readRootValueAsArray;
    private bool _jsonNet35BinaryCompatibility;
    private DateTimeKind _dateTimeKindHandling;
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonReader(Stream stream);
    public BsonReader(BinaryReader reader);
    public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    private static BsonReader();
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    private string ReadElement();
    public virtual bool Read();
    public virtual void Close();
    private bool ReadCodeWScope();
    private bool ReadReference();
    private bool ReadNormal();
    private void PopContext();
    private void PushContext(ContainerContext newContext);
    private byte ReadByte();
    private void ReadType(BsonType type);
    private Byte[] ReadBinary(BsonBinaryType& binaryType);
    private string ReadString();
    private string ReadLengthString();
    private string GetString(int length);
    private int GetLastFullCharStop(int start);
    private int BytesInSequence(byte b);
    private void EnsureBuffers();
    private double ReadDouble();
    private int ReadInt32();
    private long ReadInt64();
    private BsonType ReadType();
    private void MovePosition(int count);
    private Byte[] ReadBytes(int count);
}
internal class Microsoft.IdentityModel.Json.Bson.BsonRegex : BsonToken {
    [CompilerGeneratedAttribute]
private BsonString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonString <Options>k__BackingField;
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Microsoft.IdentityModel.Json.Bson.BsonString : BsonValue {
    [CompilerGeneratedAttribute]
private int <ByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLength>k__BackingField;
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
}
internal abstract class Microsoft.IdentityModel.Json.Bson.BsonToken : object {
    [CompilerGeneratedAttribute]
private BsonToken <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CalculatedSize>k__BackingField;
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Microsoft.IdentityModel.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Microsoft.IdentityModel.Json.Bson.BsonValue : BsonToken {
    private object _value;
    private BsonType _type;
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.IdentityModel.Json.Bson for more details.")]
internal class Microsoft.IdentityModel.Json.Bson.BsonWriter : JsonWriter {
    private BsonBinaryWriter _writer;
    private BsonToken _root;
    private BsonToken _parent;
    private string _propertyName;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonWriter(Stream stream);
    public BsonWriter(BinaryWriter writer);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    private void AddParent(BsonToken container);
    private void RemoveParent();
    private void AddValue(object value, BsonType type);
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal enum Microsoft.IdentityModel.Json.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.BinaryConverter : JsonConverter {
    private static string BinaryTypeName;
    private static string BinaryToArrayName;
    [NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private Byte[] GetByteArray(object value);
    private static void EnsureReflectionObject(Type t);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private Byte[] ReadByteArray(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.IdentityModel.Json.Bson for more details.")]
internal class Microsoft.IdentityModel.Json.Converters.BsonObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Converters.CustomCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T Create(Type objectType);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.DataSetConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.DataTableConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void CreateRow(JsonReader reader, DataTable dt, JsonSerializer serializer);
    private static Type GetColumnDataType(JsonReader reader);
    public virtual bool CanConvert(Type valueType);
}
internal abstract class Microsoft.IdentityModel.Json.Converters.DateTimeConverterBase : JsonConverter {
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.DiscriminatedUnionConverter : JsonConverter {
    private static string CasePropertyName;
    private static string FieldsPropertyName;
    private static ThreadSafeStore`2<Type, Union> UnionCache;
    private static ThreadSafeStore`2<Type, Type> UnionTypeLookupCache;
    private static DiscriminatedUnionConverter();
    private static Type CreateUnionTypeLookup(Type t);
    private static Union CreateUnion(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.EntityKeyMemberConverter : JsonConverter {
    private static string EntityKeyMemberFullTypeName;
    private static string KeyPropertyName;
    private static string TypePropertyName;
    private static string ValuePropertyName;
    [NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void ReadAndAssertProperty(JsonReader reader, string propertyName);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void EnsureReflectionObject(Type objectType);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadValue(JsonReader reader);
    private object ReadList(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.IsoDateTimeConverter : DateTimeConverterBase {
    private static string DefaultDateTimeFormat;
    private DateTimeStyles _dateTimeStyles;
    [NullableAttribute("2")]
private string _dateTimeFormat;
    [NullableAttribute("2")]
private CultureInfo _culture;
    public DateTimeStyles DateTimeStyles { get; public set; }
    [NullableAttribute("2")]
public string DateTimeFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    [NullableContextAttribute("2")]
public string get_DateTimeFormat();
    [NullableContextAttribute("2")]
public void set_DateTimeFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("2")]
internal interface Microsoft.IdentityModel.Json.Converters.IXmlDeclaration {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Standalone();
    public abstract virtual void set_Standalone(string value);
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.Converters.IXmlDocument {
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public abstract virtual IXmlNode CreateComment(string text);
    public abstract virtual IXmlNode CreateTextNode(string text);
    public abstract virtual IXmlNode CreateCDataSection(string data);
    public abstract virtual IXmlNode CreateWhitespace(string text);
    public abstract virtual IXmlNode CreateSignificantWhitespace(string text);
    public abstract virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public abstract virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public abstract virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public abstract virtual IXmlElement CreateElement(string elementName);
    public abstract virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public abstract virtual IXmlNode CreateAttribute(string name, string value);
    public abstract virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public abstract virtual IXmlElement get_DocumentElement();
}
[NullableContextAttribute("2")]
internal interface Microsoft.IdentityModel.Json.Converters.IXmlDocumentType {
    [NullableAttribute("1")]
public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    public abstract virtual string get_System();
    public abstract virtual string get_Public();
    public abstract virtual string get_InternalSubset();
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.Converters.IXmlElement {
    public bool IsEmpty { get; }
    public abstract virtual void SetAttributeNode(IXmlNode attribute);
    public abstract virtual string GetPrefixOfNamespace(string namespaceUri);
    public abstract virtual bool get_IsEmpty();
}
[NullableContextAttribute("2")]
internal interface Microsoft.IdentityModel.Json.Converters.IXmlNode {
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public object WrappedNode { get; }
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    [NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_ChildNodes();
    [NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_Attributes();
    public abstract virtual IXmlNode get_ParentNode();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public abstract virtual IXmlNode AppendChild(IXmlNode newChild);
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_WrappedNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.JavaScriptDateTimeConverter : DateTimeConverterBase {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.KeyValuePairConverter : JsonConverter {
    private static string KeyName;
    private static string ValueName;
    private static ThreadSafeStore`2<Type, ReflectionObject> ReflectionObjectPerType;
    private static KeyValuePairConverter();
    private static ReflectionObject InitializeReflectionObject(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.RegexConverter : JsonConverter {
    private static string PatternName;
    private static string OptionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool HasFlag(RegexOptions options, RegexOptions flag);
    private void WriteBson(BsonWriter writer, Regex regex);
    private void WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadRegexString(JsonReader reader);
    private Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private bool IsRegex(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.StringEnumConverter : JsonConverter {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIntegerValues>k__BackingField;
    [ObsoleteAttribute("StringEnumConverter.CamelCaseText is obsolete. Set StringEnumConverter.NamingStrategy with CamelCaseNamingStrategy instead.")]
public bool CamelCaseText { get; public set; }
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    [ObsoleteAttribute("StringEnumConverter(bool) is obsolete. Create a converter with StringEnumConverter(NamingStrategy, bool) instead.")]
public StringEnumConverter(bool camelCaseText);
    public StringEnumConverter(NamingStrategy namingStrategy, bool allowIntegerValues);
    public StringEnumConverter(Type namingStrategyType);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters, bool allowIntegerValues);
    public bool get_CamelCaseText();
    public void set_CamelCaseText(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.UnixDateTimeConverter : DateTimeConverterBase {
    internal static DateTime UnixEpoch;
    [CompilerGeneratedAttribute]
private bool <AllowPreEpoch>k__BackingField;
    public bool AllowPreEpoch { get; public set; }
    public UnixDateTimeConverter(bool allowPreEpoch);
    private static UnixDateTimeConverter();
    [CompilerGeneratedAttribute]
public bool get_AllowPreEpoch();
    [CompilerGeneratedAttribute]
public void set_AllowPreEpoch(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.VersionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XAttributeWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XAttribute Attribute { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XAttributeWrapper(XAttribute attribute);
    [NullableContextAttribute("1")]
private XAttribute get_Attribute();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public virtual IXmlNode get_ParentNode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XCommentWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XComment Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XCommentWrapper(XComment text);
    [NullableContextAttribute("1")]
private XComment get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XContainerWrapper : XObjectWrapper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    private XContainer Container { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("2")]
public IXmlNode ParentNode { get; }
    public XContainerWrapper(XContainer container);
    private XContainer get_Container();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [NullableContextAttribute("2")]
public virtual IXmlNode get_ParentNode();
    internal static IXmlNode WrapNode(XObject node);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XDeclarationWrapper : XObjectWrapper {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private XDeclaration <Declaration>k__BackingField;
    [NullableAttribute("1")]
internal XDeclaration Declaration { get; }
    public XmlNodeType NodeType { get; }
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    [NullableContextAttribute("1")]
public XDeclarationWrapper(XDeclaration declaration);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal XDeclaration get_Declaration();
    public virtual XmlNodeType get_NodeType();
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XDocumentTypeWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XDocumentType _documentType;
    [NullableAttribute("1")]
public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    [NullableContextAttribute("1")]
public XDocumentTypeWrapper(XDocumentType documentType);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XDocumentWrapper : XContainerWrapper {
    private XDocument Document { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XDocumentWrapper(XDocument document);
    private XDocument get_Document();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    public sealed virtual IXmlNode CreateComment(string text);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XElementWrapper : XContainerWrapper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    private XElement Element { get; }
    public List`1<IXmlNode> Attributes { get; }
    [NullableAttribute("2")]
public string Value { get; public set; }
    [NullableAttribute("2")]
public string LocalName { get; }
    [NullableAttribute("2")]
public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public XElementWrapper(XElement element);
    private XElement get_Element();
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public virtual List`1<IXmlNode> get_Attributes();
    private bool HasImplicitNamespaceAttribute(string namespaceUri);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    [NullableContextAttribute("2")]
public virtual string get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public virtual string get_LocalName();
    [NullableContextAttribute("2")]
public virtual string get_NamespaceUri();
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlDeclarationWrapper : XmlNodeWrapper {
    [NullableAttribute("1")]
private XmlDeclaration _declaration;
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    [NullableContextAttribute("1")]
public XmlDeclarationWrapper(XmlDeclaration declaration);
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlDocumentTypeWrapper : XmlNodeWrapper {
    [NullableAttribute("1")]
private XmlDocumentType _documentType;
    [NullableAttribute("1")]
public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    [NullableContextAttribute("1")]
public XmlDocumentTypeWrapper(XmlDocumentType documentType);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlDocumentWrapper : XmlNodeWrapper {
    private XmlDocument _document;
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XmlDocumentWrapper(XmlDocument document);
    public sealed virtual IXmlNode CreateComment(string data);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlElementWrapper : XmlNodeWrapper {
    private XmlElement _element;
    public bool IsEmpty { get; }
    public XmlElementWrapper(XmlElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlNodeConverter : JsonConverter {
    internal static List`1<IXmlNode> EmptyChildNodes;
    private static string TextName;
    private static string CommentName;
    private static string CDataName;
    private static string WhitespaceName;
    private static string SignificantWhitespaceName;
    private static string DeclarationName;
    private static string JsonNamespaceUri;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DeserializeRootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteArrayAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitRootObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodeSpecialCharacters>k__BackingField;
    [NullableAttribute("2")]
public string DeserializeRootElementName { get; public set; }
    public bool WriteArrayAttribute { get; public set; }
    public bool OmitRootObject { get; public set; }
    public bool EncodeSpecialCharacters { get; public set; }
    private static XmlNodeConverter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DeserializeRootElementName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DeserializeRootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteArrayAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteArrayAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitRootObject();
    [CompilerGeneratedAttribute]
public void set_OmitRootObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodeSpecialCharacters();
    [CompilerGeneratedAttribute]
public void set_EncodeSpecialCharacters(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private IXmlNode WrapXml(object value);
    private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager);
    private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager);
    private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager);
    private bool IsArray(IXmlNode node);
    private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, List`1<IXmlNode> groupedNodes, string elementNames);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, IXmlNode node, string elementNames);
    private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private static bool AllSameName(IXmlNode node);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode);
    private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager);
    private void CreateElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string elementName, XmlNamespaceManager manager, string elementPrefix, Dictionary`2<string, string> attributeNameValues);
    private static void AddAttribute(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, string attributeName, XmlNamespaceManager manager, string attributePrefix);
    private static string ConvertTokenToXmlValue(JsonReader reader);
    private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager);
    private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document);
    private bool ShouldReadInto(JsonReader reader);
    private Dictionary`2<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager);
    private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName);
    private void CreateDocumentType(JsonReader reader, IXmlDocument document, IXmlNode currentNode);
    private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager);
    private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode);
    private bool IsNamespaceAttribute(string attributeName, String& prefix);
    private bool ValueAttributes(List`1<IXmlNode> c);
    public virtual bool CanConvert(Type valueType);
    private bool IsXObject(Type valueType);
    private bool IsXmlNode(Type valueType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XmlNodeWrapper : object {
    [NullableAttribute("1")]
private XmlNode _node;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    private bool HasAttributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    [NullableContextAttribute("1")]
public XmlNodeWrapper(XmlNode node);
    public sealed virtual object get_WrappedNode();
    public sealed virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [NullableContextAttribute("1")]
internal static IXmlNode WrapNode(XmlNode node);
    [NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_Attributes();
    private bool get_HasAttributes();
    public sealed virtual IXmlNode get_ParentNode();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public sealed virtual IXmlNode AppendChild(IXmlNode newChild);
    public sealed virtual string get_NamespaceUri();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XObjectWrapper : object {
    private XObject _xmlObject;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XObjectWrapper(XObject xmlObject);
    public sealed virtual object get_WrappedNode();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_ChildNodes();
    [NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_NamespaceUri();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XProcessingInstructionWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XProcessingInstruction ProcessingInstruction { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    [NullableContextAttribute("1")]
public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction);
    [NullableContextAttribute("1")]
private XProcessingInstruction get_ProcessingInstruction();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Converters.XTextWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XText Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XTextWrapper(XText text);
    [NullableContextAttribute("1")]
private XText get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal enum Microsoft.IdentityModel.Json.DateFormatHandling : Enum {
    public int value__;
    public static DateFormatHandling IsoDateFormat;
    public static DateFormatHandling MicrosoftDateFormat;
}
internal enum Microsoft.IdentityModel.Json.DateParseHandling : Enum {
    public int value__;
    public static DateParseHandling None;
    public static DateParseHandling DateTime;
    public static DateParseHandling DateTimeOffset;
}
internal enum Microsoft.IdentityModel.Json.DateTimeZoneHandling : Enum {
    public int value__;
    public static DateTimeZoneHandling Local;
    public static DateTimeZoneHandling Utc;
    public static DateTimeZoneHandling Unspecified;
    public static DateTimeZoneHandling RoundtripKind;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.DefaultJsonNameTable : JsonNameTable {
    private static int HashCodeRandomizer;
    private int _count;
    private Entry[] _entries;
    private int _mask;
    private static DefaultJsonNameTable();
    public virtual string Get(Char[] key, int start, int length);
    public string Add(string key);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
[FlagsAttribute]
internal enum Microsoft.IdentityModel.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
internal enum Microsoft.IdentityModel.Json.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
internal enum Microsoft.IdentityModel.Json.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
internal enum Microsoft.IdentityModel.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.IArrayPool`1 {
    public abstract virtual T[] Rent(int minimumLength);
    public abstract virtual void Return(T[] array);
}
internal interface Microsoft.IdentityModel.Json.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[AttributeUsageAttribute("1028")]
internal class Microsoft.IdentityModel.Json.JsonArrayAttribute : JsonContainerAttribute {
    private bool _allowNullItems;
    public bool AllowNullItems { get; public set; }
    public JsonArrayAttribute(bool allowNullItems);
    public JsonArrayAttribute(string id);
    public bool get_AllowNullItems();
    public void set_AllowNullItems(bool value);
}
[AttributeUsageAttribute("32")]
internal class Microsoft.IdentityModel.Json.JsonConstructorAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
internal abstract class Microsoft.IdentityModel.Json.JsonContainerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategyInstance>k__BackingField;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    private Type _namingStrategyType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _namingStrategyParameters;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Type ItemConverterType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    internal NamingStrategy NamingStrategyInstance { get; internal set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    [NullableContextAttribute("1")]
protected JsonContainerAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    public Type get_NamingStrategyType();
    public void set_NamingStrategyType(Type value);
    public Object[] get_NamingStrategyParameters();
    public void set_NamingStrategyParameters(Object[] value);
    [CompilerGeneratedAttribute]
internal NamingStrategy get_NamingStrategyInstance();
    [CompilerGeneratedAttribute]
internal void set_NamingStrategyInstance(NamingStrategy value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
internal enum Microsoft.IdentityModel.Json.JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
    public static JsonContainerType Constructor;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.JsonConvert : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<JsonSerializerSettings> <DefaultSettings>k__BackingField;
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    private static JsonConvert();
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, DateFormatHandling format);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    public static string ToString(long value);
    private static string ToStringInternal(BigInteger value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureFloatFormat(double value, string text, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureDecimalPlace(double value, string text);
    private static string EnsureDecimalPlace(string text);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    internal static string ToString(Guid value, char quoteChar);
    public static string ToString(TimeSpan value);
    internal static string ToString(TimeSpan value, char quoteChar);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, StringEscapeHandling stringEscapeHandling);
    public static string ToString(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    private static string SerializeObjectInternal(object value, Type type, JsonSerializer jsonSerializer);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonConverter[] converters);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    [NullableContextAttribute("2")]
public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
    public static string SerializeXmlNode(XmlNode node);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject);
    public static XmlDocument DeserializeXmlNode(string value);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
    public static string SerializeXNode(XObject node);
    public static string SerializeXNode(XObject node, Formatting formatting);
    public static string SerializeXNode(XObject node, Formatting formatting, bool omitRootObject);
    public static XDocument DeserializeXNode(string value);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type objectType, T existingValue, bool hasExistingValue, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3484")]
internal class Microsoft.IdentityModel.Json.JsonConverterAttribute : Attribute {
    private Type _converterType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ConverterParameters>k__BackingField;
    public Type ConverterType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConverterParameters { get; }
    public JsonConverterAttribute(Type converterType);
    public JsonConverterAttribute(Type converterType, Object[] converterParameters);
    public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public Object[] get_ConverterParameters();
}
internal class Microsoft.IdentityModel.Json.JsonConverterCollection : Collection`1<JsonConverter> {
}
[AttributeUsageAttribute("1028")]
internal class Microsoft.IdentityModel.Json.JsonDictionaryAttribute : JsonContainerAttribute {
    public JsonDictionaryAttribute(string id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    public JsonException(SerializationInfo info, StreamingContext context);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.IdentityModel.Json.JsonExtensionDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <WriteData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadData>k__BackingField;
    public bool WriteData { get; public set; }
    public bool ReadData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WriteData();
    [CompilerGeneratedAttribute]
public void set_WriteData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadData();
    [CompilerGeneratedAttribute]
public void set_ReadData(bool value);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.IdentityModel.Json.JsonIgnoreAttribute : Attribute {
}
internal abstract class Microsoft.IdentityModel.Json.JsonNameTable : object {
    [NullableContextAttribute("1")]
public abstract virtual string Get(Char[] key, int start, int length);
}
[AttributeUsageAttribute("1036")]
internal class Microsoft.IdentityModel.Json.JsonObjectAttribute : JsonContainerAttribute {
    private MemberSerialization _memberSerialization;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<Required> _itemRequired;
    internal Nullable`1<NullValueHandling> _itemNullValueHandling;
    public MemberSerialization MemberSerialization { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling ItemNullValueHandling { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    public JsonObjectAttribute(string id);
    public MemberSerialization get_MemberSerialization();
    public void set_MemberSerialization(MemberSerialization value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public NullValueHandling get_ItemNullValueHandling();
    public void set_ItemNullValueHandling(NullValueHandling value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonPosition : ValueType {
    private static Char[] SpecialCharacters;
    internal JsonContainerType Type;
    internal int Position;
    [NullableAttribute("2")]
internal string PropertyName;
    internal bool HasIndex;
    public JsonPosition(JsonContainerType type);
    private static JsonPosition();
    internal int CalculateLength();
    [NullableContextAttribute("2")]
internal void WriteTo(StringBuilder sb, StringWriter& writer, Char[]& buffer);
    internal static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class Microsoft.IdentityModel.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<int> _order;
    internal Nullable`1<Required> _required;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NamingStrategyType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <NamingStrategyParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type ItemConverterType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    [NullableContextAttribute("1")]
public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_NamingStrategyType();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_NamingStrategyParameters();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyParameters(Object[] value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.JsonReader : object {
    private JsonToken _tokenType;
    private object _value;
    internal char _quoteChar;
    internal State _currentState;
    private JsonPosition _currentPosition;
    private CultureInfo _culture;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private Nullable`1<int> _maxDepth;
    private bool _hasExceededMaxDepth;
    internal DateParseHandling _dateParseHandling;
    internal FloatParseHandling _floatParseHandling;
    private string _dateFormatString;
    private List`1<JsonPosition> _stack;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultipleContent>k__BackingField;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    [NullableAttribute("1")]
public string Path { get; }
    [NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    [NullableContextAttribute("1")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonReader/<SkipAsync>d__1")]
public Task SkipAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonReader/<ReaderReadAndAssertAsync>d__2")]
internal Task ReaderReadAndAssertAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonReader/<ReadArrayIntoByteArrayAsync>d__5")]
internal Task`1<Byte[]> ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonReader/<ReadAndMoveToContentAsync>d__12")]
internal Task`1<bool> ReadAndMoveToContentAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal Task`1<bool> MoveToContentAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonReader/<MoveToContentFromNonContentAsync>d__14")]
private Task`1<bool> MoveToContentFromNonContentAsync(CancellationToken cancellationToken);
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    [NullableContextAttribute("1")]
public virtual string get_Path();
    [NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    internal JsonPosition GetPosition(int depth);
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("1")]
internal Byte[] ReadArrayIntoByteArray();
    [NullableContextAttribute("1")]
private bool ReadArrayElementIntoByteArrayReportDone(List`1<byte> buffer);
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    [NullableContextAttribute("1")]
internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    protected void SetToken(JsonToken newToken, object value, bool updateIndex);
    internal void SetPostValueState(bool updateIndex);
    private void UpdateScopeWithFinishedValue();
    private void ValidateEnd(JsonToken endToken);
    protected void SetStateBasedOnCurrent();
    private void SetFinished();
    private JsonContainerType GetTypeForCloseToken(JsonToken token);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal void ReadForTypeAndAssert(JsonContract contract, bool hasConverter);
    internal bool ReadForType(JsonContract contract, bool hasConverter);
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
    private JsonToken GetContentToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonReaderException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public JsonReaderException(string message);
    public JsonReaderException(string message, Exception innerException);
    public JsonReaderException(SerializationInfo info, StreamingContext context);
    public JsonReaderException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonReaderException Create(JsonReader reader, string message);
    internal static JsonReaderException Create(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.IdentityModel.Json.JsonRequiredAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonSerializationException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(SerializationInfo info, StreamingContext context);
    public JsonSerializationException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception ex);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonSerializer : object {
    internal TypeNameHandling _typeNameHandling;
    internal TypeNameAssemblyFormatHandling _typeNameAssemblyFormatHandling;
    internal PreserveReferencesHandling _preserveReferencesHandling;
    internal ReferenceLoopHandling _referenceLoopHandling;
    internal MissingMemberHandling _missingMemberHandling;
    internal ObjectCreationHandling _objectCreationHandling;
    internal NullValueHandling _nullValueHandling;
    internal DefaultValueHandling _defaultValueHandling;
    internal ConstructorHandling _constructorHandling;
    internal MetadataPropertyHandling _metadataPropertyHandling;
    [NullableAttribute("2")]
internal JsonConverterCollection _converters;
    internal IContractResolver _contractResolver;
    [NullableAttribute("2")]
internal ITraceWriter _traceWriter;
    [NullableAttribute("2")]
internal IEqualityComparer _equalityComparer;
    internal ISerializationBinder _serializationBinder;
    internal StreamingContext _context;
    [NullableAttribute("2")]
private IReferenceResolver _referenceResolver;
    private Nullable`1<Formatting> _formatting;
    private Nullable`1<DateFormatHandling> _dateFormatHandling;
    private Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    private Nullable`1<DateParseHandling> _dateParseHandling;
    private Nullable`1<FloatFormatHandling> _floatFormatHandling;
    private Nullable`1<FloatParseHandling> _floatParseHandling;
    private Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    private CultureInfo _culture;
    private Nullable`1<int> _maxDepth;
    private bool _maxDepthSet;
    private Nullable`1<bool> _checkAdditionalContent;
    [NullableAttribute("2")]
private string _dateFormatString;
    private bool _dateFormatStringSet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    [NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public JsonConverterCollection Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    [NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual JsonConverterCollection get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal bool IsCheckAdditionalContentSet();
    public static JsonSerializer Create();
    public static JsonSerializer Create(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    private static void ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public void Populate(TextReader reader, object target);
    [DebuggerStepThroughAttribute]
public void Populate(JsonReader reader, object target);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public object Deserialize(TextReader reader, Type objectType);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public T Deserialize(JsonReader reader);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader, Type objectType);
    [NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    [NullableContextAttribute("2")]
internal void SetupReader(JsonReader reader, CultureInfo& previousCulture, Nullable`1& previousDateTimeZoneHandling, Nullable`1& previousDateParseHandling, Nullable`1& previousFloatParseHandling, Nullable`1& previousMaxDepth, String& previousDateFormatString);
    [NullableContextAttribute("2")]
private void ResetReader(JsonReader reader, CultureInfo previousCulture, Nullable`1<DateTimeZoneHandling> previousDateTimeZoneHandling, Nullable`1<DateParseHandling> previousDateParseHandling, Nullable`1<FloatParseHandling> previousFloatParseHandling, Nullable`1<int> previousMaxDepth, string previousDateFormatString);
    public void Serialize(TextWriter textWriter, object value);
    [NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    public void Serialize(TextWriter textWriter, object value, Type objectType);
    public void Serialize(JsonWriter jsonWriter, object value);
    private TraceJsonReader CreateTraceJsonReader(JsonReader reader);
    [NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type objectType);
    internal IReferenceResolver GetReferenceResolver();
    internal JsonConverter GetMatchingConverter(Type type);
    internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type objectType);
    internal void OnError(ErrorEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonSerializerSettings : object {
    internal static ReferenceLoopHandling DefaultReferenceLoopHandling;
    internal static MissingMemberHandling DefaultMissingMemberHandling;
    internal static NullValueHandling DefaultNullValueHandling;
    internal static DefaultValueHandling DefaultDefaultValueHandling;
    internal static ObjectCreationHandling DefaultObjectCreationHandling;
    internal static PreserveReferencesHandling DefaultPreserveReferencesHandling;
    internal static ConstructorHandling DefaultConstructorHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal static MetadataPropertyHandling DefaultMetadataPropertyHandling;
    internal static StreamingContext DefaultContext;
    internal static Formatting DefaultFormatting;
    internal static DateFormatHandling DefaultDateFormatHandling;
    internal static DateTimeZoneHandling DefaultDateTimeZoneHandling;
    internal static DateParseHandling DefaultDateParseHandling;
    internal static FloatParseHandling DefaultFloatParseHandling;
    internal static FloatFormatHandling DefaultFloatFormatHandling;
    internal static StringEscapeHandling DefaultStringEscapeHandling;
    internal static TypeNameAssemblyFormatHandling DefaultTypeNameAssemblyFormatHandling;
    [NullableAttribute("1")]
internal static CultureInfo DefaultCulture;
    internal static bool DefaultCheckAdditionalContent;
    [NullableAttribute("1")]
internal static string DefaultDateFormatString;
    internal static int DefaultMaxDepth;
    internal Nullable`1<Formatting> _formatting;
    internal Nullable`1<DateFormatHandling> _dateFormatHandling;
    internal Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    internal Nullable`1<DateParseHandling> _dateParseHandling;
    internal Nullable`1<FloatFormatHandling> _floatFormatHandling;
    internal Nullable`1<FloatParseHandling> _floatParseHandling;
    internal Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    internal CultureInfo _culture;
    internal Nullable`1<bool> _checkAdditionalContent;
    internal Nullable`1<int> _maxDepth;
    internal bool _maxDepthSet;
    internal string _dateFormatString;
    internal bool _dateFormatStringSet;
    internal Nullable`1<TypeNameAssemblyFormatHandling> _typeNameAssemblyFormatHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<PreserveReferencesHandling> _preserveReferencesHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<StreamingContext> _context;
    internal Nullable`1<ConstructorHandling> _constructorHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<MetadataPropertyHandling> _metadataPropertyHandling;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IReferenceResolver> <ReferenceResolverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> <Error>k__BackingField;
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    [NullableAttribute("1")]
public IList`1<JsonConverter> Converters { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    [ObsoleteAttribute("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]
public IReferenceResolver ReferenceResolver { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<ErrorEventArgs> Error { get; public set; }
    public StreamingContext Context { get; public set; }
    [NullableAttribute("1")]
public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    [NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    private static JsonSerializerSettings();
    [NullableContextAttribute("1")]
public JsonSerializerSettings(JsonSerializerSettings original);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<JsonConverter> get_Converters();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Converters(IList`1<JsonConverter> value);
    public PreserveReferencesHandling get_PreserveReferencesHandling();
    public void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public MetadataPropertyHandling get_MetadataPropertyHandling();
    public void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public ConstructorHandling get_ConstructorHandling();
    public void set_ConstructorHandling(ConstructorHandling value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    public IReferenceResolver get_ReferenceResolver();
    public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    public SerializationBinder get_Binder();
    public void set_Binder(SerializationBinder value);
    [CompilerGeneratedAttribute]
public ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public EventHandler`1<ErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventHandler`1<ErrorEventArgs> value);
    public StreamingContext get_Context();
    public void set_Context(StreamingContext value);
    [NullableContextAttribute("1")]
public string get_DateFormatString();
    [NullableContextAttribute("1")]
public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    [NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    public bool get_CheckAdditionalContent();
    public void set_CheckAdditionalContent(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonTextReader : JsonReader {
    private bool _safeAsync;
    private static char UnicodeReplacementChar;
    private static int MaximumJavascriptIntegerCharacterLength;
    private static int LargeBufferLength;
    private TextReader _reader;
    [NullableAttribute("2")]
private Char[] _chars;
    private int _charsUsed;
    private int _charPos;
    private int _lineStartPos;
    private int _lineNumber;
    private bool _isEndOfFile;
    private StringBuffer _stringBuffer;
    private StringReference _stringReference;
    [NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonNameTable <PropertyNameTable>k__BackingField;
    [NullableAttribute("2")]
public JsonNameTable PropertyNameTable { get; public set; }
    [NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal Task`1<bool> DoReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsync>d__3")]
private Task`1<bool> DoReadAsync(Task`1<bool> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParsePostValueAsync>d__4")]
private Task`1<bool> ParsePostValueAsync(bool ignoreComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadFromFinishedAsync>d__5")]
private Task`1<bool> ReadFromFinishedAsync(CancellationToken cancellationToken);
    private Task`1<int> ReadDataAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadDataAsync>d__7")]
private Task`1<int> ReadDataAsync(bool append, int charsRequired, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseValueAsync>d__8")]
private Task`1<bool> ParseValueAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadStringIntoBufferAsync>d__9")]
private Task ReadStringIntoBufferAsync(char quote, CancellationToken cancellationToken);
    private Task ProcessCarriageReturnAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ProcessCarriageReturnAsync>d__11")]
private Task ProcessCarriageReturnAsync(Task`1<bool> task);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseUnicodeAsync>d__12")]
private Task`1<char> ParseUnicodeAsync(CancellationToken cancellationToken);
    private Task`1<bool> EnsureCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadCharsAsync>d__14")]
private Task`1<bool> ReadCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseObjectAsync>d__15")]
private Task`1<bool> ParseObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseCommentAsync>d__16")]
private Task ParseCommentAsync(bool setToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<EatWhitespaceAsync>d__17")]
private Task EatWhitespaceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseStringAsync>d__18")]
private Task ParseStringAsync(char quote, ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<MatchValueAsync>d__19")]
private Task`1<bool> MatchValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<MatchValueWithTrailingSeparatorAsync>d__20")]
private Task`1<bool> MatchValueWithTrailingSeparatorAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<MatchAndSetAsync>d__21")]
private Task MatchAndSetAsync(string value, JsonToken newToken, object tokenValue, CancellationToken cancellationToken);
    private Task ParseTrueAsync(CancellationToken cancellationToken);
    private Task ParseFalseAsync(CancellationToken cancellationToken);
    private Task ParseNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseConstructorAsync>d__25")]
private Task ParseConstructorAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseNumberNaNAsync>d__26")]
private Task`1<object> ParseNumberNaNAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseNumberPositiveInfinityAsync>d__27")]
private Task`1<object> ParseNumberPositiveInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseNumberNegativeInfinityAsync>d__28")]
private Task`1<object> ParseNumberNegativeInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseNumberAsync>d__29")]
private Task ParseNumberAsync(ReadType readType, CancellationToken cancellationToken);
    private Task ParseUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParsePropertyAsync>d__31")]
private Task`1<bool> ParsePropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadNumberIntoBufferAsync>d__32")]
private Task ReadNumberIntoBufferAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ParseUnquotedPropertyAsync>d__33")]
private Task ParseUnquotedPropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadNullCharAsync>d__34")]
private Task`1<bool> ReadNullCharAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<HandleNullAsync>d__35")]
private Task HandleNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadFinishedAsync>d__36")]
private Task ReadFinishedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadStringValueAsync>d__37")]
private Task`1<object> ReadStringValueAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadNumberValueAsync>d__38")]
private Task`1<object> ReadNumberValueAsync(ReadType readType, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsBooleanAsync>d__40")]
internal Task`1<Nullable`1<bool>> DoReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsBytesAsync>d__42")]
internal Task`1<Byte[]> DoReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<ReadIntoWrappedTypeObjectAsync>d__43")]
private Task ReadIntoWrappedTypeObjectAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsDateTimeAsync>d__45")]
internal Task`1<Nullable`1<DateTime>> DoReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsDateTimeOffsetAsync>d__47")]
internal Task`1<Nullable`1<DateTimeOffset>> DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsDecimalAsync>d__49")]
internal Task`1<Nullable`1<decimal>> DoReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsDoubleAsync>d__51")]
internal Task`1<Nullable`1<double>> DoReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsInt32Async>d__53")]
internal Task`1<Nullable`1<int>> DoReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextReader/<DoReadAsStringAsync>d__55")]
internal Task`1<string> DoReadAsStringAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonNameTable get_PropertyNameTable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PropertyNameTable(JsonNameTable value);
    [NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    private void EnsureBufferNotEmpty();
    private void SetNewLine(bool hasNextChar);
    private void OnNewLine(int pos);
    private void ParseString(char quote, ReadType readType);
    private void ParseReadString(char quote, ReadType readType);
    private static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    private void ShiftBufferIfNeeded();
    private int ReadData(bool append);
    private void PrepareBufferForReadData(bool append, int charsRequired);
    private int ReadData(bool append, int charsRequired);
    private bool EnsureChars(int relativePosition, bool append);
    private bool ReadChars(int relativePosition, bool append);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    [NullableContextAttribute("2")]
public virtual string ReadAsString();
    [NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("2")]
private object ReadStringValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedStringValue(ReadType readType);
    private JsonReaderException CreateUnexpectedCharacterException(char c);
    public virtual Nullable`1<bool> ReadAsBoolean();
    private void ProcessValueComma();
    [NullableContextAttribute("2")]
private object ReadNumberValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedNumber(ReadType readType);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    private void HandleNull();
    private void ReadFinished();
    private bool ReadNullChar();
    private void EnsureBuffer();
    private void ReadStringIntoBuffer(char quote);
    private void FinishReadStringIntoBuffer(int charPos, int initialPosition, int lastWritePosition);
    private void WriteCharToBuffer(char writeChar, int lastWritePosition, int writeToPosition);
    private char ConvertUnicode(bool enoughChars);
    private char ParseUnicode();
    private void ReadNumberIntoBuffer();
    private bool ReadNumberCharIntoBuffer(char currentChar, int charPos);
    private void ClearRecentString();
    private bool ParsePostValue(bool ignoreComments);
    private bool ParseObject();
    private bool ParseProperty();
    private bool ValidIdentifierChar(char value);
    private void ParseUnquotedProperty();
    private bool ReadUnquotedPropertyReportIfDone(char currentChar, int initialPosition);
    private bool ParseValue();
    private void ProcessLineFeed();
    private void ProcessCarriageReturn(bool append);
    private void EatWhitespace();
    private void ParseConstructor();
    private void ParseNumber(ReadType readType);
    private void ParseReadNumber(ReadType readType, char firstChar, int initialPosition);
    private JsonReaderException ThrowReaderError(string message, Exception ex);
    private static object BigIntegerParse(string number, CultureInfo culture);
    private void ParseComment(bool setToken);
    private void EndComment(bool setToken, int initialPosition, int endPosition);
    private bool MatchValue(string value);
    private bool MatchValue(bool enoughChars, string value);
    private bool MatchValueWithTrailingSeparator(string value);
    private bool IsSeparator(char c);
    private void ParseTrue();
    private void ParseNull();
    private void ParseUndefined();
    private void ParseFalse();
    private object ParseNumberNegativeInfinity(ReadType readType);
    private object ParseNumberNegativeInfinity(ReadType readType, bool matched);
    private object ParseNumberPositiveInfinity(ReadType readType);
    private object ParseNumberPositiveInfinity(ReadType readType, bool matched);
    private object ParseNumberNaN(ReadType readType);
    private object ParseNumberNaN(ReadType readType, bool matched);
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonTextWriter : JsonWriter {
    private bool _safeAsync;
    private static int IndentCharBufferSize;
    private TextWriter _writer;
    [NullableAttribute("2")]
private Base64Encoder _base64Encoder;
    private char _indentChar;
    private int _indentation;
    private char _quoteChar;
    private bool _quoteName;
    [NullableAttribute("2")]
private Boolean[] _charEscapeFlags;
    [NullableAttribute("2")]
private Char[] _writeBuffer;
    [NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [NullableAttribute("2")]
private Char[] _indentChars;
    private Base64Encoder Base64Encoder { get; }
    [NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    public char IndentChar { get; public set; }
    public bool QuoteName { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    internal Task DoFlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    internal Task DoWriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    internal Task DoWriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoCloseAsync>d__8")]
internal Task DoCloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<CloseBufferAndWriterAsync>d__9")]
private Task CloseBufferAndWriterAsync();
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<WriteIndentAsync>d__13")]
private Task WriteIndentAsync(int currentIndentCount, int newLineLen, CancellationToken cancellationToken);
    private Task WriteValueInternalAsync(JsonToken token, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<WriteValueInternalAsync>d__15")]
private Task WriteValueInternalAsync(Task task, string value, CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    internal Task DoWriteNullAsync(CancellationToken cancellationToken);
    private Task WriteDigitsAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    private Task WriteIntegerValueAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<WriteIntegerValueAsync>d__24")]
private Task WriteIntegerValueAsync(Task task, ulong uvalue, bool negative, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(long value, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(ulong uvalue, CancellationToken cancellationToken);
    private Task WriteEscapedStringAsync(string value, bool quote, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    internal Task DoWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__30")]
private Task DoWritePropertyNameAsync(Task task, string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__32")]
internal Task DoWritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteStartArrayAsync>d__35")]
internal Task DoWriteStartArrayAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteStartObjectAsync>d__38")]
internal Task DoWriteStartObjectAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteStartConstructorAsync>d__40")]
internal Task DoWriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    internal Task DoWriteUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteUndefinedAsync>d__43")]
private Task DoWriteUndefinedAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task DoWriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<WriteValueNonNullAsync>d__54")]
internal Task WriteValueNonNullAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteValueAsync>d__60")]
internal Task DoWriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteValueAsync>d__64")]
internal Task DoWriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(double value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(float value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteValueAsync>d__78")]
internal Task DoWriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(BigInteger value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteValueAsync>d__97")]
private Task DoWriteValueAsync(Task task, string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteValueAsync>d__99")]
internal Task DoWriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    internal Task WriteValueNotNullAsync(Uri value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<WriteValueNotNullAsync>d__110")]
internal Task WriteValueNotNullAsync(Task task, Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteCommentAsync>d__115")]
internal Task DoWriteCommentAsync(string text, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawValueAsync(string json, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonTextWriter/<DoWriteRawValueAsync>d__121")]
private Task DoWriteRawValueAsync(Task task, string json, CancellationToken cancellationToken);
    internal Char[] EnsureWriteBuffer(int length, int copyTo);
    private Base64Encoder get_Base64Encoder();
    [NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_QuoteName();
    public void set_QuoteName(bool value);
    public virtual void Flush();
    public virtual void Close();
    private void CloseBufferAndWriter();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    internal virtual void OnStringEscapeHandlingChanged();
    private void UpdateCharEscapeFlags();
    protected virtual void WriteIndent();
    private int SetIndentChars();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void WriteValueInternal(string value, JsonToken token);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    private void WriteEscapedString(string value, bool quote);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    private int WriteValueToBuffer(DateTime value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    private int WriteValueToBuffer(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private void EnsureWriteBuffer();
    private void WriteIntegerValue(long value);
    private void WriteIntegerValue(ulong value, bool negative);
    private int WriteNumberToBuffer(ulong value, bool negative);
    private void WriteIntegerValue(int value);
    private void WriteIntegerValue(UInt32 value, bool negative);
    private int WriteNumberToBuffer(UInt32 value, bool negative);
}
internal enum Microsoft.IdentityModel.Json.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken StartConstructor;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken EndConstructor;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.JsonValidatingReader : JsonReader {
    private JsonReader _reader;
    private Stack`1<SchemaScope> _stack;
    private JsonSchema _schema;
    private JsonSchemaModel _model;
    private SchemaScope _currentScope;
    [CompilerGeneratedAttribute]
private ValidationEventHandler ValidationEventHandler;
    private static IList`1<JsonSchemaModel> EmptySchemaList;
    public object Value { get; }
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    private IList`1<JsonSchemaModel> CurrentSchemas { get; }
    private IList`1<JsonSchemaModel> CurrentMemberSchemas { get; }
    public JsonSchema Schema { get; public set; }
    public JsonReader Reader { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LinePosition { get; }
    public JsonValidatingReader(JsonReader reader);
    private static JsonValidatingReader();
    [CompilerGeneratedAttribute]
public void add_ValidationEventHandler(ValidationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual object get_Value();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual Type get_ValueType();
    private void Push(SchemaScope scope);
    private SchemaScope Pop();
    private IList`1<JsonSchemaModel> get_CurrentSchemas();
    private IList`1<JsonSchemaModel> get_CurrentMemberSchemas();
    private void RaiseError(string message, JsonSchemaModel schema);
    private void OnValidationEvent(JsonSchemaException exception);
    public JsonSchema get_Schema();
    public void set_Schema(JsonSchema value);
    public JsonReader get_Reader();
    public virtual void Close();
    private void ValidateNotDisallowed(JsonSchemaModel schema);
    private Nullable`1<JsonSchemaType> GetCurrentNodeSchemaType();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual string ReadAsString();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual bool Read();
    private void ValidateCurrentToken();
    private void WriteToken(IList`1<JsonSchemaModel> schemas);
    private void ValidateEndObject(JsonSchemaModel schema);
    private void ValidateEndArray(JsonSchemaModel schema);
    private void ValidateNull(JsonSchemaModel schema);
    private void ValidateBoolean(JsonSchemaModel schema);
    private void ValidateString(JsonSchemaModel schema);
    private void ValidateInteger(JsonSchemaModel schema);
    private void ProcessValue();
    private void ValidateFloat(JsonSchemaModel schema);
    private static double FloatingPointRemainder(double dividend, double divisor);
    private static bool IsZero(double value);
    private void ValidatePropertyName(JsonSchemaModel schema);
    private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName);
    private bool ValidateArray(JsonSchemaModel schema);
    private bool ValidateObject(JsonSchemaModel schema);
    private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType);
    private sealed virtual override bool Microsoft.IdentityModel.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.JsonWriter : object {
    private static State[][] StateArray;
    internal static State[][] StateArrayTemplate;
    [NullableAttribute("2")]
private List`1<JsonPosition> _stack;
    private JsonPosition _currentPosition;
    private State _currentState;
    private Formatting _formatting;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteOnClose>k__BackingField;
    private DateFormatHandling _dateFormatHandling;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private StringEscapeHandling _stringEscapeHandling;
    private FloatFormatHandling _floatFormatHandling;
    [NullableAttribute("2")]
private string _dateFormatString;
    [NullableAttribute("2")]
private CultureInfo _culture;
    public bool CloseOutput { get; public set; }
    public bool AutoCompleteOnClose { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    [NullableAttribute("2")]
public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    private static JsonWriter();
    internal Task AutoCompleteAsync(JsonToken tokenBeingWritten, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<AutoCompleteAsync>d__1")]
private Task AutoCompleteAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    internal Task WriteEndInternalAsync(CancellationToken cancellationToken);
    internal Task InternalWriteEndAsync(JsonContainerType type, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    internal Task InternalWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<InternalWriteStartAsync>d__20")]
internal Task InternalWriteStartAsync(JsonToken token, JsonContainerType container, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    internal Task InternalWriteCommentAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, bool writeChildren, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<WriteTokenAsync>d__30")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<WriteTokenSyncReadingAsync>d__31")]
internal Task WriteTokenSyncReadingAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<WriteConstructorDateAsync>d__32")]
private Task WriteConstructorDateAsync(JsonReader reader, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task InternalWriteValueAsync(JsonToken token, CancellationToken cancellationToken);
    protected Task SetWriteStateAsync(JsonToken token, object value, CancellationToken cancellationToken);
    internal static Task WriteValueAsync(JsonWriter writer, PrimitiveTypeCode typeCode, object value, CancellationToken cancellationToken);
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteOnClose();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteOnClose(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    internal virtual void OnStringEscapeHandlingChanged();
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    [NullableContextAttribute("2")]
public string get_DateFormatString();
    [NullableContextAttribute("2")]
public void set_DateFormatString(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal void UpdateScopeWithFinishedValue();
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    [NullableContextAttribute("2")]
public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    private bool IsWriteTokenIncomplete(JsonReader reader, bool writeChildren, int initialDepth);
    private int CalculateWriteTokenInitialDepth(JsonReader reader);
    private int CalculateWriteTokenFinalDepth(JsonReader reader);
    private void WriteConstructorDate(JsonReader reader);
    private void WriteEnd(JsonContainerType type);
    private void AutoCompleteAll();
    private JsonToken GetCloseTokenForType(JsonContainerType type);
    private void AutoCompleteClose(JsonContainerType type);
    private int CalculateLevelsToComplete(JsonContainerType type);
    private void UpdateCurrentState();
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    internal void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    private static void ResolveConvertibleValue(IConvertible convertible, PrimitiveTypeCode& typeCode, Object& value);
    private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer, object value);
    protected void SetWriteState(JsonToken token, object value);
    internal void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    internal void InternalWriteRaw();
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    internal void InternalWriteComment();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitProperty|11_0>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitProperty|11_0(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitIndent|11_1>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitIndent|11_1(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitEnd|11_2>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitEnd|11_2(Task task, int LevelsToComplete, CancellationToken CancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitRemaining|11_3>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitRemaining|11_3(int LevelsToComplete, CancellationToken CancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.JsonWriterException : JsonException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("2")]
public string Path { get; }
    public JsonWriterException(string message);
    public JsonWriterException(string message, Exception innerException);
    public JsonWriterException(SerializationInfo info, StreamingContext context);
    public JsonWriterException(string message, string path, Exception innerException);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonWriterException Create(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException Create(string path, string message, Exception ex);
}
internal enum Microsoft.IdentityModel.Json.Linq.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
internal enum Microsoft.IdentityModel.Json.Linq.DuplicatePropertyNameHandling : Enum {
    public int value__;
    public static DuplicatePropertyNameHandling Replace;
    public static DuplicatePropertyNameHandling Ignore;
    public static DuplicatePropertyNameHandling Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Linq.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.Extensions/<Values>d__11`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.Extensions/<Convert>d__14`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.IdentityModel.Json.Linq.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Linq.JArray : JContainer {
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JArray/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JArray> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JArray/<LoadAsync>d__2")]
public static Task`1<JArray> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Linq.JConstructor : JContainer {
    [NullableAttribute("2")]
private string _name;
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    public JConstructor(JConstructor other);
    public JConstructor(string name, Object[] content);
    public JConstructor(string name, object content);
    public JConstructor(string name);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JConstructor/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JConstructor> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JConstructor/<LoadAsync>d__2")]
public static Task`1<JConstructor> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    internal virtual int GetDeepHashCode();
    public static JConstructor Load(JsonReader reader);
    public static JConstructor Load(JsonReader reader, JsonLoadSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Linq.JContainer : JToken {
    [NullableAttribute("2")]
internal ListChangedEventHandler _listChanged;
    [NullableAttribute("2")]
internal AddingNewEventHandler _addingNew;
    [NullableAttribute("2")]
internal NotifyCollectionChangedEventHandler _collectionChanged;
    [NullableAttribute("2")]
private object _syncRoot;
    private bool _busy;
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    [NullableAttribute("2")]
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    internal JContainer(JContainer other);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JContainer/<ReadTokenFromAsync>d__0")]
internal Task ReadTokenFromAsync(JsonReader reader, JsonLoadSettings options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JContainer/<ReadContentFromAsync>d__1")]
private Task ReadContentFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    internal void CheckReentrancy();
    internal virtual IList`1<JToken> CreateChildrenCollection();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JContainer/<GetDescendants>d__36")]
internal IEnumerable`1<JToken> GetDescendants(bool self);
    [NullableContextAttribute("2")]
internal bool IsMultiContent(object content);
    internal JToken EnsureParentToken(JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal abstract virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    [NullableContextAttribute("2")]
public virtual void Add(object content);
    [NullableContextAttribute("2")]
internal bool TryAdd(object content);
    internal void AddAndSkipParentCheck(JToken token);
    [NullableContextAttribute("2")]
public void AddFirst(object content);
    [NullableContextAttribute("2")]
internal bool TryAddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal abstract virtual void MergeItem(object content, JsonMergeSettings settings);
    [NullableContextAttribute("2")]
public void Merge(object content);
    [NullableContextAttribute("2")]
public void Merge(object content, JsonMergeSettings settings);
    private void ValidateContent(object content);
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    internal void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    [NullableContextAttribute("2")]
private static JProperty ReadProperty(JsonReader r, JsonLoadSettings settings, IJsonLineInfo lineInfo, JContainer parent);
    internal int ContentsHashCode();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.IdentityModel.Json.Linq.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.IdentityModel.Json.Linq.JToken>.Remove(JToken item);
    [NullableContextAttribute("2")]
private JToken EnsureValue(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    [NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    internal static void MergeEnumerableContent(JContainer target, IEnumerable content, JsonMergeSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Linq.JEnumerable`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> _enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    private static JEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Linq.JObject : JContainer {
    private JPropertyKeyedCollection _properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.IdentityModel.Json.Linq.JToken>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Microsoft.IdentityModel.Json.Linq.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JObject> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JObject/<LoadAsync>d__2")]
public static Task`1<JObject> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    internal virtual bool DeepEquals(JToken node);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    private static bool IsNull(JToken token);
    internal void InternalPropertyChanged(JProperty childProperty);
    internal void InternalPropertyChanging(JProperty childProperty);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name);
    public JProperty Property(string name, StringComparison comparison);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    public sealed virtual bool ContainsKey(string propertyName);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.IdentityModel.Json.Linq.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Microsoft.IdentityModel.Json.Linq.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.IdentityModel.Json.Linq.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JObject/<GetEnumerator>d__63")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [NullableContextAttribute("2")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    [NullableContextAttribute("2")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JObject/<<WriteToAsync>g__AwaitProperties|0_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteToAsync>g__AwaitProperties|0_0(Task task, int i, JsonWriter Writer, CancellationToken CancellationToken, JsonConverter[] Converters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JProperty : JContainer {
    private JPropertyList _content;
    private string _name;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JProperty/<WriteToAsync>d__1")]
private Task WriteToAsync(Task task, JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    private Task WriteValueAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JProperty> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JProperty/<LoadAsync>d__4")]
public static Task`1<JProperty> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    protected int NameHashCode { get; }
    public JPropertyDescriptor(string name);
    private static JObject CastInstance(object instance);
    public virtual bool CanResetValue(object component);
    [NullableContextAttribute("2")]
public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    [NullableContextAttribute("2")]
public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    protected virtual int get_NameHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Linq.JPropertyKeyedCollection : Collection`1<JToken> {
    private static IEqualityComparer`1<string> Comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, JToken> _dictionary;
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    private static JPropertyKeyedCollection();
    private void AddKey(string key, JToken item);
    protected void ChangeItemKey(JToken item, string newKey);
    protected virtual void ClearItems();
    public bool Contains(string key);
    private bool ContainsItem(JToken item);
    private void EnsureDictionary();
    private string GetKeyForItem(JToken item);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    private void RemoveKey(string key);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JRaw : JValue {
    public JRaw(JRaw other);
    [NullableContextAttribute("2")]
public JRaw(object rawJson);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JRaw/<CreateAsync>d__0")]
public static Task`1<JRaw> CreateAsync(JsonReader reader, CancellationToken cancellationToken);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
internal class Microsoft.IdentityModel.Json.Linq.JsonLoadSettings : object {
    private CommentHandling _commentHandling;
    private LineInfoHandling _lineInfoHandling;
    private DuplicatePropertyNameHandling _duplicatePropertyNameHandling;
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    public DuplicatePropertyNameHandling DuplicatePropertyNameHandling { get; public set; }
    public CommentHandling get_CommentHandling();
    public void set_CommentHandling(CommentHandling value);
    public LineInfoHandling get_LineInfoHandling();
    public void set_LineInfoHandling(LineInfoHandling value);
    public DuplicatePropertyNameHandling get_DuplicatePropertyNameHandling();
    public void set_DuplicatePropertyNameHandling(DuplicatePropertyNameHandling value);
}
internal class Microsoft.IdentityModel.Json.Linq.JsonMergeSettings : object {
    private MergeArrayHandling _mergeArrayHandling;
    private MergeNullValueHandling _mergeNullValueHandling;
    private StringComparison _propertyNameComparison;
    public MergeArrayHandling MergeArrayHandling { get; public set; }
    public MergeNullValueHandling MergeNullValueHandling { get; public set; }
    public StringComparison PropertyNameComparison { get; public set; }
    public MergeArrayHandling get_MergeArrayHandling();
    public void set_MergeArrayHandling(MergeArrayHandling value);
    public MergeNullValueHandling get_MergeNullValueHandling();
    public void set_MergeNullValueHandling(MergeNullValueHandling value);
    public StringComparison get_PropertyNameComparison();
    public void set_PropertyNameComparison(StringComparison value);
}
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.ArrayIndexFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.ArrayIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.ArrayMultipleIndexFilter : PathFilter {
    internal List`1<int> Indexes;
    public ArrayMultipleIndexFilter(List`1<int> indexes);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.ArrayMultipleIndexFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.ArraySliceFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Step>k__BackingField;
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> End { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.ArraySliceFilter/<ExecuteFilter>d__12")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    private bool IsValid(int index, int stopIndex, bool positiveStep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.BooleanQueryExpression : QueryExpression {
    public object Left;
    [NullableAttribute("2")]
public object Right;
    public BooleanQueryExpression(QueryOperator operator, object left, object right);
    private IEnumerable`1<JToken> GetResult(JToken root, JToken t, object o);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
    private bool MatchTokens(JToken leftResult, JToken rightResult, JsonSelectSettings settings);
    private static bool RegexEquals(JValue input, JValue pattern, JsonSelectSettings settings);
    internal static bool EqualsWithStringCoercion(JValue value, JValue queryValue);
    internal static bool EqualsWithStrictMatch(JValue value, JValue queryValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.CompositeExpression : QueryExpression {
    [CompilerGeneratedAttribute]
private List`1<QueryExpression> <Expressions>k__BackingField;
    public List`1<QueryExpression> Expressions { get; public set; }
    public CompositeExpression(QueryOperator operator);
    [CompilerGeneratedAttribute]
public List`1<QueryExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(List`1<QueryExpression> value);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.FieldFilter : PathFilter {
    internal string Name;
    public FieldFilter(string name);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.FieldFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.FieldMultipleFilter : PathFilter {
    internal List`1<string> Names;
    public FieldMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.FieldMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.JPath : object {
    private static Char[] FloatCharacters;
    private string _expression;
    [CompilerGeneratedAttribute]
private List`1<PathFilter> <Filters>k__BackingField;
    private int _currentIndex;
    public List`1<PathFilter> Filters { get; }
    public JPath(string expression);
    private static JPath();
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Filters();
    private void ParseMain();
    private bool ParsePath(List`1<PathFilter> filters, int currentPartStartIndex, bool query);
    private static PathFilter CreatePathFilter(string member, bool scan);
    private PathFilter ParseIndexer(char indexerOpenChar, bool scan);
    private PathFilter ParseArrayIndexer(char indexerCloseChar);
    private void EatWhitespace();
    private PathFilter ParseQuery(char indexerCloseChar, bool scan);
    private bool TryParseExpression(List`1& expressionPath);
    private JsonException CreateUnexpectedCharacterException();
    private object ParseSide();
    private QueryExpression ParseExpression();
    [NullableContextAttribute("2")]
private bool TryParseValue(Object& value);
    private string ReadQuotedString();
    private string ReadRegexString();
    private bool Match(string s);
    private QueryOperator ParseOperator();
    private PathFilter ParseQuotedField(char indexerCloseChar, bool scan);
    private void EnsureLength(string message);
    internal IEnumerable`1<JToken> Evaluate(JToken root, JToken t, JsonSelectSettings settings);
    internal static IEnumerable`1<JToken> Evaluate(List`1<PathFilter> filters, JToken root, JToken t, JsonSelectSettings settings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Linq.JsonPath.PathFilter : object {
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    protected static JToken GetTokenIndex(JToken t, JsonSelectSettings settings, int index);
    protected static JToken GetNextScanValue(JToken originalParent, JToken container, JToken value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Linq.JsonPath.QueryExpression : object {
    internal QueryOperator Operator;
    public QueryExpression(QueryOperator operator);
    public bool IsMatch(JToken root, JToken t);
    public abstract virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.QueryFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.QueryFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal enum Microsoft.IdentityModel.Json.Linq.JsonPath.QueryOperator : Enum {
    public int value__;
    public static QueryOperator None;
    public static QueryOperator Equals;
    public static QueryOperator NotEquals;
    public static QueryOperator Exists;
    public static QueryOperator LessThan;
    public static QueryOperator LessThanOrEquals;
    public static QueryOperator GreaterThan;
    public static QueryOperator GreaterThanOrEquals;
    public static QueryOperator And;
    public static QueryOperator Or;
    public static QueryOperator RegexEquals;
    public static QueryOperator StrictEquals;
    public static QueryOperator StrictNotEquals;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.QueryScanFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryScanFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.QueryScanFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.RootFilter : PathFilter {
    public static RootFilter Instance;
    private static RootFilter();
    public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.ScanFilter : PathFilter {
    internal string Name;
    public ScanFilter(string name);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.ScanFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JsonPath.ScanMultipleFilter : PathFilter {
    private List`1<string> _names;
    public ScanMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JsonPath.ScanMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Microsoft.IdentityModel.Json.Linq.JsonSelectSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexMatchTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorWhenNoMatch>k__BackingField;
    public Nullable`1<TimeSpan> RegexMatchTimeout { get; public set; }
    public bool ErrorWhenNoMatch { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RegexMatchTimeout();
    [CompilerGeneratedAttribute]
public void set_RegexMatchTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_ErrorWhenNoMatch();
    [CompilerGeneratedAttribute]
public void set_ErrorWhenNoMatch(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.IdentityModel.Json.Linq.JToken : object {
    [NullableAttribute("2")]
private static JTokenEqualityComparer _equalityComparer;
    [NullableAttribute("2")]
private JContainer _parent;
    [NullableAttribute("2")]
private JToken _previous;
    [NullableAttribute("2")]
private JToken _next;
    [NullableAttribute("2")]
private object _annotations;
    private static JTokenType[] BooleanTypes;
    private static JTokenType[] NumberTypes;
    private static JTokenType[] BigIntegerTypes;
    private static JTokenType[] StringTypes;
    private static JTokenType[] GuidTypes;
    private static JTokenType[] TimeSpanTypes;
    private static JTokenType[] UriTypes;
    private static JTokenType[] CharTypes;
    private static JTokenType[] DateTimeTypes;
    private static JTokenType[] BytesTypes;
    public static JTokenEqualityComparer EqualityComparer { get; }
    [NullableAttribute("2")]
public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken Next { get; internal set; }
    [NullableAttribute("2")]
public JToken Previous { get; internal set; }
    public string Path { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private IJEnumerable`1<JToken> Microsoft.IdentityModel.Json.Linq.IJEnumerable<Microsoft.IdentityModel.Json.Linq.JToken>.Item { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LinePosition { get; }
    private static JToken();
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public Task WriteToAsync(JsonWriter writer, JsonConverter[] converters);
    public static Task`1<JToken> ReadFromAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<ReadFromAsync>d__3")]
public static Task`1<JToken> ReadFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static JTokenEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public JContainer get_Parent();
    [NullableContextAttribute("2")]
internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    [NullableContextAttribute("2")]
public static bool DeepEquals(JToken t1, JToken t2);
    [NullableContextAttribute("2")]
public JToken get_Next();
    [NullableContextAttribute("2")]
internal void set_Next(JToken value);
    [NullableContextAttribute("2")]
public JToken get_Previous();
    [NullableContextAttribute("2")]
internal void set_Previous(JToken value);
    public string get_Path();
    [NullableContextAttribute("2")]
public void AddAfterSelf(object content);
    [NullableContextAttribute("2")]
public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<GetAncestors>d__48")]
internal IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<AfterSelf>d__49")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<BeforeSelf>d__50")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    [NullableContextAttribute("2")]
public virtual T Value(object key);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("0")]
public JEnumerable`1<T> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    private static JValue EnsureValue(JToken value);
    private static string GetType(JToken token);
    private static bool ValidateToken(JToken o, JTokenType[] validTypes, bool nullable);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTime> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<decimal> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<double> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<int> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<short> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<ushort> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<byte> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<long> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static string op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Uri op_Explicit(JToken value);
    private static BigInteger ToBigInteger(JToken value);
    private static Nullable`1<BigInteger> ToBigIntegerNullable(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Json.Linq.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Microsoft.IdentityModel.Json.Linq.IJEnumerable<Microsoft.IdentityModel.Json.Linq.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer jsonSerializer);
    [NullableContextAttribute("2")]
public T ToObject();
    public object ToObject(Type objectType);
    [NullableContextAttribute("2")]
public T ToObject(JsonSerializer jsonSerializer);
    [NullableContextAttribute("2")]
public object ToObject(Type objectType, JsonSerializer jsonSerializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    [NullableContextAttribute("2")]
internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    internal void SetLineInfo(int lineNumber, int linePosition);
    private sealed virtual override bool Microsoft.IdentityModel.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LinePosition();
    public JToken SelectToken(string path);
    public JToken SelectToken(string path, bool errorWhenNoMatch);
    [NullableContextAttribute("2")]
public JToken SelectToken(string path, JsonSelectSettings settings);
    public IEnumerable`1<JToken> SelectTokens(string path);
    public IEnumerable`1<JToken> SelectTokens(string path, bool errorWhenNoMatch);
    public IEnumerable`1<JToken> SelectTokens(string path, JsonSelectSettings settings);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
    public void AddAnnotation(object annotation);
    public T Annotation();
    public object Annotation(Type type);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<Annotations>d__184`1")]
public IEnumerable`1<T> Annotations();
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Json.Linq.JToken/<Annotations>d__185")]
public IEnumerable`1<object> Annotations(Type type);
    public void RemoveAnnotations();
    public void RemoveAnnotations(Type type);
    internal void CopyAnnotations(JToken target, JToken source);
}
internal class Microsoft.IdentityModel.Json.Linq.JTokenEqualityComparer : object {
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JToken x, JToken y);
    [NullableContextAttribute("1")]
public sealed virtual int GetHashCode(JToken obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JTokenReader : JsonReader {
    private JToken _root;
    [NullableAttribute("2")]
private string _initialPath;
    [NullableAttribute("2")]
private JToken _parent;
    [NullableAttribute("2")]
private JToken _current;
    [NullableAttribute("2")]
public JToken CurrentToken { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    public JTokenReader(JToken token, string initialPath);
    [NullableContextAttribute("2")]
public JToken get_CurrentToken();
    public virtual bool Read();
    private bool ReadOver(JToken t);
    private bool ReadToEnd();
    private Nullable`1<JsonToken> GetEndToken(JContainer c);
    private bool ReadInto(JContainer c);
    private bool SetEnd(JContainer c);
    private void SetToken(JToken token);
    [NullableContextAttribute("2")]
private string SafeToString(object value);
    private sealed virtual override bool Microsoft.IdentityModel.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
internal enum Microsoft.IdentityModel.Json.Linq.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Constructor;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JTokenWriter : JsonWriter {
    private JContainer _token;
    private JContainer _parent;
    private JValue _value;
    private JToken _current;
    public JToken CurrentToken { get; }
    public JToken Token { get; }
    [NullableContextAttribute("1")]
public JTokenWriter(JContainer container);
    [NullableContextAttribute("0")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    public JToken get_CurrentToken();
    public JToken get_Token();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    [NullableContextAttribute("1")]
private void AddParent(JContainer container);
    private void RemoveParent();
    public virtual void WriteStartArray();
    [NullableContextAttribute("1")]
public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    [NullableContextAttribute("1")]
public virtual void WritePropertyName(string name);
    private void AddRawValue(object value, JTokenType type, JsonToken token);
    internal void AddJValue(JValue value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteComment(string text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    [NullableContextAttribute("1")]
internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Linq.JValue : JToken {
    private JTokenType _valueType;
    private object _value;
    public bool HasValues { get; }
    public JTokenType Type { get; }
    public object Value { get; public set; }
    internal JValue(object value, JTokenType type);
    [NullableContextAttribute("1")]
public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    [CLSCompliantAttribute("False")]
public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    public JValue(string value);
    public JValue(Guid value);
    public JValue(Uri value);
    public JValue(TimeSpan value);
    public JValue(object value);
    [NullableContextAttribute("1")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    [NullableContextAttribute("1")]
internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    [NullableContextAttribute("1")]
private static int CompareBigInteger(BigInteger i1, object i2);
    internal static int Compare(JTokenType valueType, object objA, object objB);
    [NullableContextAttribute("1")]
private static int CompareFloat(object objA, object objB);
    private static bool Operation(ExpressionType operation, object objA, object objB, Object& result);
    [NullableContextAttribute("1")]
internal virtual JToken CloneToken();
    [NullableContextAttribute("1")]
public static JValue CreateComment(string value);
    [NullableContextAttribute("1")]
public static JValue CreateString(string value);
    [NullableContextAttribute("1")]
public static JValue CreateNull();
    [NullableContextAttribute("1")]
public static JValue CreateUndefined();
    private static JTokenType GetValueType(Nullable`1<JTokenType> current, object value);
    private static JTokenType GetStringValueType(Nullable`1<JTokenType> current);
    public virtual JTokenType get_Type();
    public object get_Value();
    public void set_Value(object value);
    [NullableContextAttribute("1")]
public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    [NullableContextAttribute("1")]
private static bool ValuesEquals(JValue v1, JValue v2);
    public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(string format);
    [NullableContextAttribute("1")]
public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
internal enum Microsoft.IdentityModel.Json.Linq.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
internal enum Microsoft.IdentityModel.Json.Linq.MergeArrayHandling : Enum {
    public int value__;
    public static MergeArrayHandling Concat;
    public static MergeArrayHandling Union;
    public static MergeArrayHandling Replace;
    public static MergeArrayHandling Merge;
}
[FlagsAttribute]
internal enum Microsoft.IdentityModel.Json.Linq.MergeNullValueHandling : Enum {
    public int value__;
    public static MergeNullValueHandling Ignore;
    public static MergeNullValueHandling Merge;
}
internal enum Microsoft.IdentityModel.Json.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
internal enum Microsoft.IdentityModel.Json.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
internal enum Microsoft.IdentityModel.Json.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
internal enum Microsoft.IdentityModel.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
internal enum Microsoft.IdentityModel.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
[FlagsAttribute]
internal enum Microsoft.IdentityModel.Json.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
internal enum Microsoft.IdentityModel.Json.ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsInt64;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
internal enum Microsoft.IdentityModel.Json.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
internal enum Microsoft.IdentityModel.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
[ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Microsoft.IdentityModel.Json.Schema.Extensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema, IList`1& errorMessages);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchema : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Requires>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Disallow>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Extends>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    private string _internalId;
    [CompilerGeneratedAttribute]
private string <DeferredReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferencesResolved>k__BackingField;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<bool> Required { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Transient { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JsonSchemaType> Type { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<bool> ExclusiveMinimum { get; public set; }
    public Nullable`1<bool> ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<JsonSchema> Items { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public JsonSchema AdditionalItems { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IDictionary`2<string, JsonSchema> Properties { get; public set; }
    public JsonSchema AdditionalProperties { get; public set; }
    public IDictionary`2<string, JsonSchema> PatternProperties { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public string Requires { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public Nullable`1<JsonSchemaType> Disallow { get; public set; }
    public JToken Default { get; public set; }
    public IList`1<JsonSchema> Extends { get; public set; }
    public string Format { get; public set; }
    internal string Location { get; internal set; }
    internal string InternalId { get; }
    internal string DeferredReference { get; internal set; }
    internal bool ReferencesResolved { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchema value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchema value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Extends();
    [CompilerGeneratedAttribute]
public void set_Extends(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    internal string get_InternalId();
    [CompilerGeneratedAttribute]
internal string get_DeferredReference();
    [CompilerGeneratedAttribute]
internal void set_DeferredReference(string value);
    [CompilerGeneratedAttribute]
internal bool get_ReferencesResolved();
    [CompilerGeneratedAttribute]
internal void set_ReferencesResolved(bool value);
    public static JsonSchema Read(JsonReader reader);
    public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver);
    public static JsonSchema Parse(string json);
    public static JsonSchema Parse(string json, JsonSchemaResolver resolver);
    public void WriteTo(JsonWriter writer);
    public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver);
    public virtual string ToString();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaBuilder : object {
    private IList`1<JsonSchema> _stack;
    private JsonSchemaResolver _resolver;
    private IDictionary`2<string, JsonSchema> _documentSchemas;
    private JsonSchema _currentSchema;
    private JObject _rootSchema;
    private JsonSchema CurrentSchema { get; }
    public JsonSchemaBuilder(JsonSchemaResolver resolver);
    private void Push(JsonSchema value);
    private JsonSchema Pop();
    private JsonSchema get_CurrentSchema();
    internal JsonSchema Read(JsonReader reader);
    private string UnescapeReference(string reference);
    private JsonSchema ResolveReferences(JsonSchema schema);
    private JsonSchema BuildSchema(JToken token);
    private void ProcessSchemaProperties(JObject schemaObject);
    private void ProcessExtends(JToken token);
    private void ProcessEnum(JToken token);
    private void ProcessAdditionalProperties(JToken token);
    private void ProcessAdditionalItems(JToken token);
    private IDictionary`2<string, JsonSchema> ProcessProperties(JToken token);
    private void ProcessItems(JToken token);
    private Nullable`1<JsonSchemaType> ProcessType(JToken token);
    internal static JsonSchemaType MapType(string type);
    internal static string MapType(JsonSchemaType type);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Microsoft.IdentityModel.Json.Schema.JsonSchemaConstants : object {
    public static string TypePropertyName;
    public static string PropertiesPropertyName;
    public static string ItemsPropertyName;
    public static string AdditionalItemsPropertyName;
    public static string RequiredPropertyName;
    public static string PatternPropertiesPropertyName;
    public static string AdditionalPropertiesPropertyName;
    public static string RequiresPropertyName;
    public static string MinimumPropertyName;
    public static string MaximumPropertyName;
    public static string ExclusiveMinimumPropertyName;
    public static string ExclusiveMaximumPropertyName;
    public static string MinimumItemsPropertyName;
    public static string MaximumItemsPropertyName;
    public static string PatternPropertyName;
    public static string MaximumLengthPropertyName;
    public static string MinimumLengthPropertyName;
    public static string EnumPropertyName;
    public static string ReadOnlyPropertyName;
    public static string TitlePropertyName;
    public static string DescriptionPropertyName;
    public static string FormatPropertyName;
    public static string DefaultPropertyName;
    public static string TransientPropertyName;
    public static string DivisibleByPropertyName;
    public static string HiddenPropertyName;
    public static string DisallowPropertyName;
    public static string ExtendsPropertyName;
    public static string IdPropertyName;
    public static string UniqueItemsPropertyName;
    public static string OptionValuePropertyName;
    public static string OptionLabelPropertyName;
    public static IDictionary`2<string, JsonSchemaType> JsonSchemaTypeMapping;
    private static JsonSchemaConstants();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonSchemaException(string message);
    public JsonSchemaException(string message, Exception innerException);
    public JsonSchemaException(SerializationInfo info, StreamingContext context);
    internal JsonSchemaException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaGenerator : object {
    [CompilerGeneratedAttribute]
private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;
    private IContractResolver _contractResolver;
    private JsonSchemaResolver _resolver;
    private IList`1<TypeSchema> _stack;
    private JsonSchema _currentSchema;
    public UndefinedSchemaIdHandling UndefinedSchemaIdHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    private JsonSchema CurrentSchema { get; }
    [CompilerGeneratedAttribute]
public UndefinedSchemaIdHandling get_UndefinedSchemaIdHandling();
    [CompilerGeneratedAttribute]
public void set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    private JsonSchema get_CurrentSchema();
    private void Push(TypeSchema typeSchema);
    private TypeSchema Pop();
    public JsonSchema Generate(Type type);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver);
    public JsonSchema Generate(Type type, bool rootSchemaNullable);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable);
    private string GetTitle(Type type);
    private string GetDescription(Type type);
    private string GetTypeId(Type type, bool explicitOnly);
    private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required);
    private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private void GenerateObjectSchema(Type type, JsonObjectContract contract);
    private void GenerateISerializableContract(Type type, JsonISerializableContract contract);
    internal static bool HasFlag(Nullable`1<JsonSchemaType> value, JsonSchemaType flag);
    private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaModel : object {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Patterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchemaModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Disallow>k__BackingField;
    public bool Required { get; public set; }
    public JsonSchemaType Type { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public bool ExclusiveMinimum { get; public set; }
    public bool ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<string> Patterns { get; public set; }
    public IList`1<JsonSchemaModel> Items { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> Properties { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> PatternProperties { get; public set; }
    public JsonSchemaModel AdditionalProperties { get; public set; }
    public JsonSchemaModel AdditionalItems { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public JsonSchemaType Disallow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JsonSchemaType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchemaModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(JsonSchemaType value);
    public static JsonSchemaModel Create(IList`1<JsonSchema> schemata);
    private static void Combine(JsonSchemaModel model, JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaModelBuilder : object {
    private JsonSchemaNodeCollection _nodes;
    private Dictionary`2<JsonSchemaNode, JsonSchemaModel> _nodeModels;
    private JsonSchemaNode _node;
    public JsonSchemaModel Build(JsonSchema schema);
    public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema);
    public void AddProperties(IDictionary`2<string, JsonSchema> source, IDictionary`2<string, JsonSchemaNode> target);
    public void AddProperty(IDictionary`2<string, JsonSchemaNode> target, string propertyName, JsonSchema schema);
    public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema);
    public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema);
    public void AddAdditionalItems(JsonSchemaNode parentNode, JsonSchema schema);
    private JsonSchemaModel BuildNodeModel(JsonSchemaNode node);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaNode : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<JsonSchema> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonSchemaNode> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalItems>k__BackingField;
    public string Id { get; }
    public ReadOnlyCollection`1<JsonSchema> Schemas { get; }
    public Dictionary`2<string, JsonSchemaNode> Properties { get; }
    public Dictionary`2<string, JsonSchemaNode> PatternProperties { get; }
    public List`1<JsonSchemaNode> Items { get; }
    public JsonSchemaNode AdditionalProperties { get; public set; }
    public JsonSchemaNode AdditionalItems { get; public set; }
    public JsonSchemaNode(JsonSchema schema);
    private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<JsonSchema> get_Schemas();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_Properties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_PatternProperties();
    [CompilerGeneratedAttribute]
public List`1<JsonSchemaNode> get_Items();
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaNode value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaNode value);
    public JsonSchemaNode Combine(JsonSchema schema);
    public static string GetId(IEnumerable`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaNodeCollection : KeyedCollection`2<string, JsonSchemaNode> {
    protected virtual string GetKeyForItem(JsonSchemaNode item);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaResolver : object {
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <LoadedSchemas>k__BackingField;
    public IList`1<JsonSchema> LoadedSchemas { get; protected set; }
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_LoadedSchemas();
    [CompilerGeneratedAttribute]
protected void set_LoadedSchemas(IList`1<JsonSchema> value);
    public virtual JsonSchema GetSchema(string reference);
}
[FlagsAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Microsoft.IdentityModel.Json.Schema.JsonSchemaType : Enum {
    public int value__;
    public static JsonSchemaType None;
    public static JsonSchemaType String;
    public static JsonSchemaType Float;
    public static JsonSchemaType Integer;
    public static JsonSchemaType Boolean;
    public static JsonSchemaType Object;
    public static JsonSchemaType Array;
    public static JsonSchemaType Null;
    public static JsonSchemaType Any;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.JsonSchemaWriter : object {
    private JsonWriter _writer;
    private JsonSchemaResolver _resolver;
    public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver);
    private void ReferenceOrWriteSchema(JsonSchema schema);
    public void WriteSchema(JsonSchema schema);
    private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary`2<string, JsonSchema> properties);
    private void WriteItems(JsonSchema schema);
    private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type);
    private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Microsoft.IdentityModel.Json.Schema.UndefinedSchemaIdHandling : Enum {
    public int value__;
    public static UndefinedSchemaIdHandling None;
    public static UndefinedSchemaIdHandling UseTypeName;
    public static UndefinedSchemaIdHandling UseAssemblyQualifiedName;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.ValidationEventArgs : EventArgs {
    private JsonSchemaException _ex;
    public JsonSchemaException Exception { get; }
    public string Path { get; }
    public string Message { get; }
    internal ValidationEventArgs(JsonSchemaException ex);
    public JsonSchemaException get_Exception();
    public string get_Path();
    public string get_Message();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.IdentityModel.Json.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.IdentityModel.Json.Serialization.CachedAttributeGetter`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<object, T> TypeAttributeCache;
    private static CachedAttributeGetter`1();
    [NullableContextAttribute("1")]
public static T GetAttribute(object type);
}
internal class Microsoft.IdentityModel.Json.Serialization.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
    private static object TypeContractCacheLock;
    private static DefaultJsonNameTable NameTable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<StructMultiKey`2<Type, Type>, JsonContract> _contractCache;
    private static CamelCasePropertyNamesContractResolver();
    public virtual JsonContract ResolveContract(Type type);
    internal virtual DefaultJsonNameTable GetNameTable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.DefaultContractResolver : object {
    private static IContractResolver _instance;
    private static String[] BlacklistedTypeNames;
    private static JsonConverter[] BuiltInConverters;
    private DefaultJsonNameTable _nameTable;
    private ThreadSafeStore`2<Type, JsonContract> _contractCache;
    [CompilerGeneratedAttribute]
private BindingFlags <DefaultMembersSearchFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeCompilerGeneratedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIsSpecifiedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreShouldSerializeMembers>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    internal static IContractResolver Instance { get; }
    public bool DynamicCodeGeneration { get; }
    [ObsoleteAttribute("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]
public BindingFlags DefaultMembersSearchFlags { get; public set; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    public bool IgnoreSerializableInterface { get; public set; }
    public bool IgnoreSerializableAttribute { get; public set; }
    public bool IgnoreIsSpecifiedMembers { get; public set; }
    public bool IgnoreShouldSerializeMembers { get; public set; }
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    private static DefaultContractResolver();
    internal static IContractResolver get_Instance();
    public bool get_DynamicCodeGeneration();
    [CompilerGeneratedAttribute]
public BindingFlags get_DefaultMembersSearchFlags();
    [CompilerGeneratedAttribute]
public void set_DefaultMembersSearchFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableInterface();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableAttribute();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIsSpecifiedMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreIsSpecifiedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreShouldSerializeMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreShouldSerializeMembers(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    public virtual JsonContract ResolveContract(Type type);
    private static bool FilterMembers(MemberInfo member);
    protected virtual List`1<MemberInfo> GetSerializableMembers(Type objectType);
    private bool ShouldSerializeEntityMember(MemberInfo memberInfo);
    protected virtual JsonObjectContract CreateObjectContract(Type objectType);
    private static void ThrowUnableToSerializeError(object o, StreamingContext context);
    private MemberInfo GetExtensionDataMemberForType(Type type);
    private static void SetExtensionDataDelegates(JsonObjectContract contract, MemberInfo member);
    private ConstructorInfo GetAttributeConstructor(Type objectType);
    private ConstructorInfo GetImmutableConstructor(Type objectType, JsonPropertyCollection memberProperties);
    private ConstructorInfo GetParameterizedConstructor(Type objectType);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    private JsonProperty MatchProperty(JsonPropertyCollection properties, string name, Type type);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    private Func`1<object> GetDefaultCreator(Type createdType);
    private void InitializeContract(JsonContract contract);
    private void ResolveCallbackMethods(JsonContract contract, Type t);
    private void GetCallbackMethodsForType(Type type, List`1& onSerializing, List`1& onSerialized, List`1& onDeserializing, List`1& onDeserialized, List`1& onError);
    private static bool IsConcurrentOrObservableCollection(Type t);
    private static bool ShouldSkipDeserialized(Type t);
    private static bool ShouldSkipSerializing(Type t);
    private List`1<Type> GetClassHierarchyForType(Type type);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType);
    protected virtual JsonLinqContract CreateLinqContract(Type objectType);
    protected virtual JsonISerializableContract CreateISerializableContract(Type objectType);
    protected virtual JsonDynamicContract CreateDynamicContract(Type objectType);
    protected virtual JsonStringContract CreateStringContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    internal static bool IsJsonPrimitiveType(Type t);
    internal static bool IsIConvertible(Type t);
    internal static bool CanConvertToString(Type type);
    private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, Type& prevAttributeType);
    internal static string GetClrTypeFullName(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    internal virtual DefaultJsonNameTable GetNameTable();
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void SetPropertySettingsFromAttributes(JsonProperty property, object attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, Boolean& allowNonPublicAccess);
    private Predicate`1<object> CreateShouldSerializeTest(MemberInfo member);
    private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveExtensionDataName(string extensionDataName);
    protected virtual string ResolveDictionaryKey(string dictionaryKey);
    public string GetResolvedPropertyName(string propertyName);
}
internal class Microsoft.IdentityModel.Json.Serialization.DefaultNamingStrategy : NamingStrategy {
    protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.DefaultReferenceResolver : object {
    private int _referenceCount;
    private BidirectionalDictionary`2<string, object> GetMappings(object context);
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.DefaultSerializationBinder : SerializationBinder {
    internal static DefaultSerializationBinder Instance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<StructMultiKey`2<string, string>, Type> _typeCache;
    private static DefaultSerializationBinder();
    private Type GetTypeFromTypeNameKey(StructMultiKey`2<string, string> typeNameKey);
    private Type GetGenericTypeFromTypeName(string typeName, Assembly assembly);
    private Type GetTypeByName(StructMultiKey`2<string, string> typeNameKey);
    public virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Microsoft.IdentityModel.Json.Serialization.DiagnosticsTraceWriter : object {
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    private TraceEventType GetTraceEventType(TraceLevel level);
    [NullableContextAttribute("1")]
public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.DynamicValueProvider : object {
    private MemberInfo _memberInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> _setter;
    public DynamicValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.ErrorContext : object {
    [CompilerGeneratedAttribute]
private bool <Traced>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <OriginalObject>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    internal bool Traced { get; internal set; }
    public Exception Error { get; }
    [NullableAttribute("2")]
public object OriginalObject { get; }
    [NullableAttribute("2")]
public object Member { get; }
    public string Path { get; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, object member, string path, Exception error);
    [CompilerGeneratedAttribute]
internal bool get_Traced();
    [CompilerGeneratedAttribute]
internal void set_Traced(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_OriginalObject();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Member();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.ErrorEventArgs : EventArgs {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <CurrentObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorContext <ErrorContext>k__BackingField;
    [NullableAttribute("2")]
public object CurrentObject { get; }
    public ErrorContext ErrorContext { get; }
    public ErrorEventArgs(object currentObject, ErrorContext errorContext);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_CurrentObject();
    [CompilerGeneratedAttribute]
public ErrorContext get_ErrorContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.ExpressionValueProvider : object {
    private MemberInfo _memberInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> _setter;
    public ExpressionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Microsoft.IdentityModel.Json.Serialization.ExtensionDataGetter : MulticastDelegate {
    public ExtensionDataGetter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<KeyValuePair`2<object, object>> Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Json.Serialization.ExtensionDataSetter : MulticastDelegate {
    public ExtensionDataSetter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, string key, object value);
    public virtual IAsyncResult BeginInvoke(object o, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface Microsoft.IdentityModel.Json.Serialization.IAttributeProvider {
    public abstract virtual IList`1<Attribute> GetAttributes(bool inherit);
    public abstract virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
internal interface Microsoft.IdentityModel.Json.Serialization.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
}
internal interface Microsoft.IdentityModel.Json.Serialization.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.Serialization.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.Serialization.ITraceWriter {
    public TraceLevel LevelFilter { get; }
    public abstract virtual TraceLevel get_LevelFilter();
    public abstract virtual void Trace(TraceLevel level, string message, Exception ex);
}
[NullableContextAttribute("1")]
internal interface Microsoft.IdentityModel.Json.Serialization.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonArrayContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Type <CollectionItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultidimensionalArray>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryCollectionCreator;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDeserialize>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    public Type CollectionItemType { get; }
    public bool IsMultidimensionalArray { get; }
    internal bool IsArray { get; }
    internal bool ShouldCreateWrapper { get; }
    internal bool CanDeserialize { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [NullableContextAttribute("1")]
public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    [CompilerGeneratedAttribute]
private void set_CanDeserialize(bool value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [NullableContextAttribute("1")]
internal IWrappedCollection CreateWrapper(object list);
    [NullableContextAttribute("1")]
internal IList CreateTemporaryCollection();
    [NullableContextAttribute("1")]
private void StoreFSharpListCreatorIfNecessary(Type underlyingType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonContainerContract : JsonContract {
    private JsonContract _itemContract;
    private JsonContract _finalItemContract;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    [NullableContextAttribute("1")]
internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Serialization.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertable;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializedCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializingCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializedCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializingCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationErrorCallback> _onErrorCallbacks;
    private Type _createdType;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <InternalConverter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <DefaultCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCreatorNonPublic>k__BackingField;
    public Type UnderlyingType { get; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    [NullableAttribute("2")]
public JsonConverter Converter { get; public set; }
    [NullableAttribute("2")]
public JsonConverter InternalConverter { get; internal set; }
    public IList`1<SerializationCallback> OnDeserializedCallbacks { get; }
    public IList`1<SerializationCallback> OnDeserializingCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializedCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializingCallbacks { get; }
    public IList`1<SerializationErrorCallback> OnErrorCallbacks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_InternalConverter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_InternalConverter(JsonConverter value);
    public IList`1<SerializationCallback> get_OnDeserializedCallbacks();
    public IList`1<SerializationCallback> get_OnDeserializingCallbacks();
    public IList`1<SerializationCallback> get_OnSerializedCallbacks();
    public IList`1<SerializationCallback> get_OnSerializingCallbacks();
    public IList`1<SerializationErrorCallback> get_OnErrorCallbacks();
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
    internal void InvokeOnSerializing(object o, StreamingContext context);
    internal void InvokeOnSerialized(object o, StreamingContext context);
    internal void InvokeOnDeserializing(object o, StreamingContext context);
    internal void InvokeOnDeserialized(object o, StreamingContext context);
    internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext);
    internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo);
    internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo);
}
internal enum Microsoft.IdentityModel.Json.Serialization.JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Serializable;
    public static JsonContractType Linq;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonDictionaryContract : JsonContainerContract {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <DictionaryKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonContract <KeyContract>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryDictionaryCreator;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> DictionaryKeyResolver { get; public set; }
    public Type DictionaryKeyType { get; }
    public Type DictionaryValueType { get; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [NullableContextAttribute("1")]
public JsonDictionaryContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [NullableContextAttribute("1")]
internal IWrappedDictionary CreateWrapper(object dictionary);
    [NullableContextAttribute("1")]
internal IDictionary CreateTemporaryDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonDynamicContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <PropertyNameResolver>k__BackingField;
    private ThreadSafeStore`2<string, CallSite`1<Func`3<CallSite, object, object>>> _callSiteGetters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<string, CallSite`1<Func`4<CallSite, object, object, object>>> _callSiteSetters;
    public JsonPropertyCollection Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    private static CallSite`1<Func`3<CallSite, object, object>> CreateCallSiteGetter(string name);
    private static CallSite`1<Func`4<CallSite, object, object, object>> CreateCallSiteSetter(string name);
    internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonFormatterConverter : object {
    private JsonSerializerInternalReader _reader;
    private JsonISerializableContract _contract;
    [NullableAttribute("2")]
private JsonProperty _member;
    public JsonFormatterConverter(JsonSerializerInternalReader reader, JsonISerializableContract contract, JsonProperty member);
    private T GetTokenValue(object value);
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
internal class Microsoft.IdentityModel.Json.Serialization.JsonISerializableContract : JsonContainerContract {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <ISerializableCreator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> ISerializableCreator { get; public set; }
    [NullableContextAttribute("1")]
public JsonISerializableContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_ISerializableCreator();
    [CompilerGeneratedAttribute]
public void set_ISerializableCreator(ObjectConstructor`1<object> value);
}
internal class Microsoft.IdentityModel.Json.Serialization.JsonLinqContract : JsonContract {
    public JsonLinqContract(Type underlyingType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonObjectContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Required> <ItemRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <ItemNullValueHandling>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataSetter <ExtensionDataSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataGetter <ExtensionDataGetter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <ExtensionDataNameResolver>k__BackingField;
    internal bool ExtensionDataIsJToken;
    private Nullable`1<bool> _hasRequiredOrDefaultValueProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    private JsonPropertyCollection _creatorParameters;
    private Type _extensionDataValueType;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public Nullable`1<NullValueHandling> ItemNullValueHandling { get; public set; }
    [NullableAttribute("1")]
public JsonPropertyCollection Properties { get; }
    [NullableAttribute("1")]
public JsonPropertyCollection CreatorParameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; internal set; }
    public ExtensionDataSetter ExtensionDataSetter { get; public set; }
    public ExtensionDataGetter ExtensionDataGetter { get; public set; }
    public Type ExtensionDataValueType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> ExtensionDataNameResolver { get; public set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    [NullableContextAttribute("1")]
public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_ItemNullValueHandling();
    [CompilerGeneratedAttribute]
public void set_ItemNullValueHandling(Nullable`1<NullValueHandling> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [NullableContextAttribute("1")]
public JsonPropertyCollection get_CreatorParameters();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    internal void set_ParameterizedCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public ExtensionDataSetter get_ExtensionDataSetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSetter(ExtensionDataSetter value);
    [CompilerGeneratedAttribute]
public ExtensionDataGetter get_ExtensionDataGetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataGetter(ExtensionDataGetter value);
    public Type get_ExtensionDataValueType();
    public void set_ExtensionDataValueType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ExtensionDataNameResolver();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataNameResolver(Func`2<string, string> value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [NullableContextAttribute("1")]
[SecuritySafeCriticalAttribute]
internal object GetUninitializedObject();
}
internal class Microsoft.IdentityModel.Json.Serialization.JsonPrimitiveContract : JsonContract {
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    private static Dictionary`2<Type, ReadType> ReadTypeMap;
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    private static JsonPrimitiveContract();
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonProperty : object {
    internal Nullable`1<Required> _required;
    internal bool _hasExplicitDefaultValue;
    private object _defaultValue;
    private bool _hasGeneratedDefaultValue;
    private string _propertyName;
    internal bool _skipPropertyNameEscape;
    private Type _propertyType;
    [CompilerGeneratedAttribute]
private JsonContract <PropertyContract>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnderlyingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributeProvider <AttributeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMemberAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Predicate`1<object> <ShouldSerialize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Predicate`1<object> <ShouldDeserialize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Predicate`1<object> <GetIsSpecified>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<object, object> <SetIsSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    public Type DeclaringType { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public IAttributeProvider AttributeProvider { get; public set; }
    public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    [ObsoleteAttribute("MemberConverter is obsolete. Use Converter instead.")]
public JsonConverter MemberConverter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public bool IsRequiredSpecified { get; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldSerialize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldDeserialize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> GetIsSpecified { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> SetIsSpecified { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public IAttributeProvider get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(IAttributeProvider value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    public JsonConverter get_MemberConverter();
    public void set_MemberConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    public bool get_IsRequiredSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldSerialize();
    [CompilerGeneratedAttribute]
public void set_ShouldSerialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldDeserialize();
    [CompilerGeneratedAttribute]
public void set_ShouldDeserialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_GetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_GetIsSpecified(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_SetIsSpecified(Action`2<object, object> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [NullableContextAttribute("1")]
internal void WritePropertyName(JsonWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    private Type _type;
    private List`1<JsonProperty> _list;
    public JsonPropertyCollection(Type type);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string propertyName);
    private bool TryGetProperty(string key, JsonProperty& item);
    public JsonProperty GetProperty(string propertyName, StringComparison comparisonType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Serialization.JsonSerializerInternalBase : object {
    [NullableAttribute("2")]
private ErrorContext _currentErrorContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BidirectionalDictionary`2<string, object> _mappings;
    internal JsonSerializer Serializer;
    [NullableAttribute("2")]
internal ITraceWriter TraceWriter;
    [NullableAttribute("2")]
protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract containerContract, JsonProperty property);
    private ErrorContext GetErrorContext(object currentObject, object member, string path, Exception error);
    protected void ClearErrorContext();
    [NullableContextAttribute("2")]
protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, IJsonLineInfo lineInfo, string path, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonSerializerInternalReader : JsonSerializerInternalBase {
    public JsonSerializerInternalReader(JsonSerializer serializer);
    public void Populate(JsonReader reader, object target);
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(Type type);
    private JsonContract GetContract(Type type);
    [NullableContextAttribute("2")]
public object Deserialize(JsonReader reader, Type objectType, bool checkAdditionalContent);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private JToken CreateJToken(JsonReader reader, JsonContract contract);
    private JToken CreateJObject(JsonReader reader);
    [NullableContextAttribute("2")]
private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private static bool CoerceEmptyStringToNull(Type objectType, JsonContract contract, string s);
    internal string GetExpectedDescription(JsonContract contract);
    [NullableContextAttribute("2")]
private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private bool ReadMetadataPropertiesToken(JTokenReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private bool ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private void ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, string qualifiedTypeName);
    private JsonArrayContract EnsureArrayContract(JsonReader reader, Type objectType, JsonContract contract);
    [NullableContextAttribute("2")]
private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string id);
    [NullableContextAttribute("2")]
private bool HasNoDefinedType(JsonContract contract);
    [NullableContextAttribute("2")]
private object EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType);
    private bool SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target);
    [NullableContextAttribute("2")]
private bool CalculatePropertyDetails(JsonProperty property, JsonConverter& propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target, Boolean& useExistingValue, Object& currentValue, JsonContract& propertyContract, Boolean& gottenCurrentValue, Boolean& ignoredValue);
    private void AddReference(JsonReader reader, string id, object value);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    [NullableContextAttribute("2")]
private bool ShouldSetPropertyValue(JsonProperty property, JsonObjectContract contract, object value);
    private IList CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator);
    private IDictionary CreateNewDictionary(JsonReader reader, JsonDictionaryContract contract, Boolean& createdFromNonDefaultCreator);
    private void OnDeserializing(JsonReader reader, JsonContract contract, object value);
    private void OnDeserialized(JsonReader reader, JsonContract contract, object value);
    private object PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id);
    private object PopulateMultidimensionalArray(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private void ThrowUnexpectedEndException(JsonReader reader, JsonContract contract, object currentObject, string message);
    private object PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, JsonProperty member, string id);
    internal object CreateISerializableItem(JToken token, Type type, JsonISerializableContract contract, JsonProperty member);
    private object CreateDynamic(JsonReader reader, JsonDynamicContract contract, JsonProperty member, string id);
    private object CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1<object> creator, string id);
    private object DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, object existingValue);
    private List`1<CreatorPropertyContext> ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, string id, Boolean& createdFromNonDefaultCreator);
    private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, string id);
    private bool ShouldDeserialize(JsonReader reader, JsonProperty property, object target);
    private bool CheckPropertyName(JsonReader reader, string memberName);
    private void SetExtensionData(JsonObjectContract contract, JsonProperty member, JsonReader reader, string memberName, object o);
    private object ReadExtensionDataValue(JsonObjectContract contract, JsonProperty member, JsonReader reader);
    private void EndProcessProperty(object newObject, JsonReader reader, JsonObjectContract contract, int initialDepth, JsonProperty property, PropertyPresence presence, bool setDefaultValue);
    private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary`2<JsonProperty, PropertyPresence> requiredProperties);
    private void HandleError(JsonReader reader, bool readPastError, int initialDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonSerializerInternalWriter : JsonSerializerInternalBase {
    [NullableAttribute("2")]
private Type _rootType;
    private int _rootLevel;
    private List`1<object> _serializeStack;
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    [NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(object value);
    private JsonContract GetContract(object value);
    private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private Nullable`1<bool> ResolveIsReference(JsonContract contract, JsonProperty property, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteReference(object value, JsonProperty property, JsonContract valueContract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteProperty(object memberValue, JsonObjectContract containerContract, JsonProperty property);
    [NullableContextAttribute("2")]
private bool CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void WriteReference(JsonWriter writer, object value);
    private string GetReference(JsonWriter writer, object value);
    internal static bool TryConvertToString(object value, Type type, String& s);
    private void SerializeString(JsonWriter writer, object value, JsonStringContract contract);
    private void OnSerializing(JsonWriter writer, JsonContract contract, object value);
    private void OnSerialized(JsonWriter writer, JsonContract contract, object value);
    private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool CalculatePropertyValues(JsonWriter writer, object value, JsonContainerContract contract, JsonProperty member, JsonProperty property, JsonContract& memberContract, Object& memberValue);
    private void WriteObjectStart(JsonWriter writer, object value, JsonContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool HasCreatorParameter(JsonContainerContract contract, JsonProperty property);
    private void WriteReferenceIdProperty(JsonWriter writer, Type type, object value);
    private void WriteTypeProperty(JsonWriter writer, Type type);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag);
    private bool HasFlag(TypeNameHandling value, TypeNameHandling flag);
    private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, Int32[] indices);
    private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [SecuritySafeCriticalAttribute]
private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeDynamic(JsonWriter writer, IDynamicMetaObjectProvider value, JsonDynamicContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteDynamicProperty(object memberValue);
    [NullableContextAttribute("2")]
private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDictionary(JsonWriter writer, IDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private string GetPropertyName(JsonWriter writer, object name, JsonContract contract, Boolean& escape);
    private void HandleError(JsonWriter writer, int initialDepth);
    private bool ShouldSerialize(JsonWriter writer, JsonProperty property, object target);
    private bool IsSpecified(JsonWriter writer, JsonProperty property, object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.JsonSerializerProxy : JsonSerializer {
    [NullableAttribute("2")]
private JsonSerializerInternalReader _serializerReader;
    [NullableAttribute("2")]
private JsonSerializerInternalWriter _serializerWriter;
    internal JsonSerializer _serializer;
    [NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public JsonConverterCollection Converters { get; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    [NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual JsonConverterCollection get_Converters();
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal JsonSerializerInternalBase GetInternalSerializer();
    [NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
internal class Microsoft.IdentityModel.Json.Serialization.JsonStringContract : JsonPrimitiveContract {
    public JsonStringContract(Type underlyingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Serialization.JsonTypeReflector : object {
    private static Nullable`1<bool> _dynamicCodeGeneration;
    private static Nullable`1<bool> _fullyTrusted;
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ShouldSerializePrefix;
    public static string SpecifiedPostfix;
    public static string ConcurrentDictionaryTypeName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Func`2<Object[], object>> CreatorCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Type> AssociatedMetadataTypesCache;
    [NullableAttribute("2")]
private static ReflectionObject _metadataTypeAttributeReflectionObject;
    public static bool DynamicCodeGeneration { get; }
    public static bool FullyTrusted { get; }
    public static ReflectionDelegateFactory ReflectionDelegateFactory { get; }
    private static JsonTypeReflector();
    public static T GetCachedAttribute(object attributeProvider);
    public static bool CanTypeDescriptorConvertString(Type type, TypeConverter& typeConverter);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo);
    public static MemberSerialization GetObjectMemberSerialization(Type objectType, bool ignoreSerializableAttribute);
    public static JsonConverter GetJsonConverter(object attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType, Object[] args);
    public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType, Object[] args);
    public static NamingStrategy GetContainerNamingStrategy(JsonContainerAttribute containerAttribute);
    private static Func`2<Object[], object> GetCreator(Type type);
    private static Type GetAssociatedMetadataType(Type type);
    private static Type GetAssociateMetadataTypeFromAttribute(Type type);
    private static T GetAttribute(Type type);
    private static T GetAttribute(MemberInfo memberInfo);
    public static bool IsNonSerializable(object provider);
    public static bool IsSerializable(object provider);
    public static T GetAttribute(object provider);
    [SecuritySafeCriticalAttribute]
public static bool get_DynamicCodeGeneration();
    public static bool get_FullyTrusted();
    public static ReflectionDelegateFactory get_ReflectionDelegateFactory();
}
internal class Microsoft.IdentityModel.Json.Serialization.KebabCaseNamingStrategy : NamingStrategy {
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.MemoryTraceWriter : object {
    private Queue`1<string> _traceMessages;
    private object _lock;
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
    public IEnumerable`1<string> GetTraceMessages();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Serialization.NamingStrategy : object {
    [CompilerGeneratedAttribute]
private bool <ProcessDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessExtensionDataNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideSpecifiedNames>k__BackingField;
    public bool ProcessDictionaryKeys { get; public set; }
    public bool ProcessExtensionDataNames { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessExtensionDataNames();
    [CompilerGeneratedAttribute]
public void set_ProcessExtensionDataNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetExtensionDataName(string name);
    public virtual string GetDictionaryKey(string key);
    protected abstract virtual string ResolvePropertyName(string name);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
protected bool Equals(NamingStrategy other);
}
internal class Microsoft.IdentityModel.Json.Serialization.ObjectConstructor`1 : MulticastDelegate {
    public ObjectConstructor`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class Microsoft.IdentityModel.Json.Serialization.OnErrorAttribute : Attribute {
}
internal class Microsoft.IdentityModel.Json.Serialization.ReflectionAttributeProvider : object {
    private object _attributeProvider;
    public ReflectionAttributeProvider(object attributeProvider);
    public sealed virtual IList`1<Attribute> GetAttributes(bool inherit);
    public sealed virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.ReflectionValueProvider : object {
    private MemberInfo _memberInfo;
    public ReflectionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.SerializationBinderAdapter : object {
    public SerializationBinder SerializationBinder;
    public SerializationBinderAdapter(SerializationBinder serializationBinder);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Microsoft.IdentityModel.Json.Serialization.SerializationCallback : MulticastDelegate {
    public SerializationCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Json.Serialization.SerializationErrorCallback : MulticastDelegate {
    public SerializationErrorCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context, ErrorContext errorContext);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Json.Serialization.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.TraceJsonReader : JsonReader {
    private JsonReader _innerReader;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    [NullableAttribute("2")]
public object Value { get; }
    [NullableAttribute("2")]
public Type ValueType { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.IdentityModel.Json.IJsonLineInfo.LinePosition { get; }
    public TraceJsonReader(JsonReader innerReader);
    public string GetDeserializedJsonMessage();
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    [NullableContextAttribute("2")]
public virtual string ReadAsString();
    [NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public void WriteCurrentToken();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual Type get_ValueType();
    public virtual void Close();
    private sealed virtual override bool Microsoft.IdentityModel.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.IdentityModel.Json.IJsonLineInfo.get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Serialization.TraceJsonWriter : JsonWriter {
    private JsonWriter _innerWriter;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public TraceJsonWriter(JsonWriter innerWriter);
    public string GetSerializedJsonMessage();
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(Nullable`1<char> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteUndefined();
    public virtual void WriteNull();
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(Nullable`1<long> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(Nullable`1<short> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteWhitespace(string ws);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    [NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    public virtual void Close();
    public virtual void Flush();
}
internal enum Microsoft.IdentityModel.Json.StringEscapeHandling : Enum {
    public int value__;
    public static StringEscapeHandling Default;
    public static StringEscapeHandling EscapeNonAscii;
    public static StringEscapeHandling EscapeHtml;
}
internal enum Microsoft.IdentityModel.Json.TypeNameAssemblyFormatHandling : Enum {
    public int value__;
    public static TypeNameAssemblyFormatHandling Simple;
    public static TypeNameAssemblyFormatHandling Full;
}
[FlagsAttribute]
internal enum Microsoft.IdentityModel.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.AsyncUtils : object {
    public static Task`1<bool> False;
    public static Task`1<bool> True;
    internal static Task CompletedTask;
    private static AsyncUtils();
    [ExtensionAttribute]
internal static Task`1<bool> ToAsync(bool value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task CancelIfRequestedAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, char value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, string value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, int start, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(TextReader reader, Char[] buffer, int index, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsCompletedSuccessfully(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    private Char[] _charsLine;
    private TextWriter _writer;
    [NullableAttribute("2")]
private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    public Base64Encoder(TextWriter writer);
    private void ValidateEncode(Byte[] buffer, int index, int count);
    public void Encode(Byte[] buffer, int index, int count);
    private void StoreLeftOverBytes(Byte[] buffer, int index, Int32& count);
    private bool FulfillFromLeftover(Byte[] buffer, int index, Int32& count);
    public void Flush();
    private void WriteChars(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Utilities.Base64Encoder/<EncodeAsync>d__13")]
public Task EncodeAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    private Task WriteCharsAsync(Char[] chars, int index, int count, CancellationToken cancellationToken);
    public Task FlushAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.BidirectionalDictionary`2 : object {
    private IDictionary`2<TFirst, TSecond> _firstToSecond;
    private IDictionary`2<TSecond, TFirst> _secondToFirst;
    private string _duplicateFirstErrorMessage;
    private string _duplicateSecondErrorMessage;
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer);
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
internal static class Microsoft.IdentityModel.Json.Utilities.BoxedPrimitives : object {
    internal static object BooleanTrue;
    internal static object BooleanFalse;
    internal static object Int32_M1;
    internal static object Int32_0;
    internal static object Int32_1;
    internal static object Int32_2;
    internal static object Int32_3;
    internal static object Int32_4;
    internal static object Int32_5;
    internal static object Int32_6;
    internal static object Int32_7;
    internal static object Int32_8;
    internal static object Int64_M1;
    internal static object Int64_0;
    internal static object Int64_1;
    internal static object Int64_2;
    internal static object Int64_3;
    internal static object Int64_4;
    internal static object Int64_5;
    internal static object Int64_6;
    internal static object Int64_7;
    internal static object Int64_8;
    private static object DecimalZero;
    internal static object DoubleNaN;
    internal static object DoublePositiveInfinity;
    internal static object DoubleNegativeInfinity;
    internal static object DoubleZero;
    private static BoxedPrimitives();
    internal static object Get(bool value);
    internal static object Get(int value);
    internal static object Get(long value);
    internal static object Get(decimal value);
    internal static object Get(double value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.BufferUtils : object {
    [NullableContextAttribute("1")]
public static Char[] RentBuffer(IArrayPool`1<char> bufferPool, int minSize);
    public static void ReturnBuffer(IArrayPool`1<char> bufferPool, Char[] buffer);
    public static Char[] EnsureBufferSize(IArrayPool`1<char> bufferPool, int size, Char[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.CollectionUtils : object {
    public static bool IsNullOrEmpty(ICollection`1<T> collection);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> initial, IEnumerable`1<T> collection);
    public static bool IsDictionaryType(Type type);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool ContainsValue(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool AddRangeDistinct(IList`1<T> list, IEnumerable`1<T> values, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    [ExtensionAttribute]
public static void FastReverse(List`1<T> list);
    private static IList`1<int> GetDimensions(IList values, int dimensionsCount);
    private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, Int32[] indices);
    private static object JaggedArrayGetValue(IList values, Int32[] indices);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
    public static T[] ArrayEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.CollectionWrapper`1 : object {
    [NullableAttribute("2")]
private IList _list;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<T> _genericCollection;
    [NullableAttribute("2")]
private object _syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("2")]
private static void VerifyValueType(object value);
    [NullableContextAttribute("2")]
private static bool IsCompatibleObject(object value);
    public sealed virtual object get_UnderlyingCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.ConvertUtils : object {
    private static Dictionary`2<Type, PrimitiveTypeCode> TypeCodeMap;
    private static TypeInformation[] PrimitiveTypeCodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, Type>, Func`2<object, object>> CastConverters;
    private static ConvertUtils();
    public static PrimitiveTypeCode GetTypeCode(Type t);
    public static PrimitiveTypeCode GetTypeCode(Type t, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertable);
    public static bool IsConvertible(Type t);
    public static TimeSpan ParseTimeSpan(string input);
    [NullableContextAttribute("2")]
private static Func`2<object, object> CreateCastConverter(StructMultiKey`2<Type, Type> t);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, CultureInfo culture, Type targetType);
    private static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, Object& value);
    private static ConvertResult TryConvertInternal(object initialValue, CultureInfo culture, Type targetType, Object& value);
    public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType);
    private static object EnsureTypeAssignable(object value, Type initialType, Type targetType);
    public static bool VersionTryParse(string input, Version& result);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static ParseResult DecimalTryParse(Char[] chars, int start, int length, Decimal& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static bool TryHexTextToInt(Char[] text, int start, int end, Int32& value);
}
internal class Microsoft.IdentityModel.Json.Utilities.Creator`1 : MulticastDelegate {
    public Creator`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Json.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(Char[] text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    private static long ToUniversalTicks(DateTime dateTime);
    private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    private static long UniversalTicksToJavaScriptTicks(long universalTicks);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser dateTimeParser);
    internal static bool TryParseDateTime(StringReference s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(StringReference s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryParseMicrosoftDate(StringReference text, Int64& ticks, TimeSpan& offset, DateTimeKind& kind);
    private static bool TryParseDateTimeMicrosoft(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    private static bool TryParseDateTimeExact(string text, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    private static bool TryParseDateTimeOffsetMicrosoft(StringReference text, DateTimeOffset& dt);
    private static bool TryParseDateTimeOffsetExact(string text, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryReadOffset(StringReference offsetText, int startIndex, TimeSpan& offset);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value, DateFormatHandling format, string formatString, CultureInfo culture);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind, DateFormatHandling format);
    internal static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    private static void CopyIntToCharArray(Char[] chars, int start, int value, int digits);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset, DateFormatHandling format);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value, DateFormatHandling format, string formatString, CultureInfo culture);
    private static void GetDateValues(DateTime td, Int32& year, Int32& month, Int32& day);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Utilities.DictionaryWrapper`2 : object {
    [NullableAttribute("2")]
private IDictionary _dictionary;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<TKey, TValue> _genericDictionary;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<TKey, TValue> _readOnlyDictionary;
    [NullableAttribute("2")]
private object _syncRoot;
    internal IDictionary`2<TKey, TValue> GenericDictionary { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    internal IDictionary`2<TKey, TValue> get_GenericDictionary();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.DynamicProxyMetaObject`1 : DynamicMetaObject {
    private DynamicProxy`1<T> _proxy;
    private static Expression[] NoArgs { get; }
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy);
    private bool IsOverridden(string method);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    private static Expression[] get_NoArgs();
    private static IEnumerable`1<Expression> GetArgs(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args, DynamicMetaObject value);
    private static ConstantExpression Constant(DynamicMetaObjectBinder binder);
    private DynamicMetaObject CallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback, Fallback<T> fallbackInvoke);
    private DynamicMetaObject BuildCallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, DynamicMetaObject fallbackResult, Fallback<T> fallbackInvoke);
    private DynamicMetaObject CallMethodReturnLast(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback);
    private DynamicMetaObject CallMethodNoResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private BindingRestrictions GetRestrictions();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.DynamicReflectionDelegateFactory : ReflectionDelegateFactory {
    [CompilerGeneratedAttribute]
private static DynamicReflectionDelegateFactory <Instance>k__BackingField;
    internal static DynamicReflectionDelegateFactory Instance { get; }
    private static DynamicReflectionDelegateFactory();
    [CompilerGeneratedAttribute]
internal static DynamicReflectionDelegateFactory get_Instance();
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private void GenerateCreateMethodCallIL(MethodBase method, ILGenerator generator, int argsIndex);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    private void GenerateCreateDefaultConstructorIL(Type type, ILGenerator generator, Type delegateType);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    private void GenerateCreateGetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    private void GenerateCreateGetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    internal static void GenerateCreateSetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    internal static void GenerateCreateSetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
internal class Microsoft.IdentityModel.Json.Utilities.EnumInfo : object {
    public bool IsFlags;
    public UInt64[] Values;
    public String[] Names;
    public String[] ResolvedNames;
    public EnumInfo(bool isFlags, UInt64[] values, String[] names, String[] resolvedNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.EnumUtils : object {
    private static char EnumSeparatorChar;
    private static string EnumSeparatorString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, NamingStrategy>, EnumInfo> ValuesAndNamesPerEnum;
    private static CamelCaseNamingStrategy _camelCaseNamingStrategy;
    private static EnumUtils();
    private static EnumInfo InitializeValuesAndNames(StructMultiKey`2<Type, NamingStrategy> key);
    [NullableContextAttribute("0")]
public static IList`1<T> GetFlagsValues(T value);
    public static bool TryToString(Type enumType, object value, bool camelCase, String& name);
    public static bool TryToString(Type enumType, object value, NamingStrategy namingStrategy, String& name);
    private static string InternalFlagsFormat(EnumInfo entry, ulong result);
    public static EnumInfo GetEnumValuesAndNames(Type enumType);
    private static ulong ToUInt64(object value);
    public static object ParseEnum(Type enumType, NamingStrategy namingStrategy, string value, bool disallowNumber);
    private static Nullable`1<int> MatchName(string value, String[] enumNames, String[] resolvedNames, int valueIndex, int valueSubstringLength, StringComparison comparison);
    private static Nullable`1<int> FindIndexByName(String[] enumNames, string value, int valueIndex, int valueSubstringLength, StringComparison comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.ExpressionReflectionDelegateFactory : ReflectionDelegateFactory {
    private static ExpressionReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static ExpressionReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private Expression BuildMethodCall(MethodBase method, Type type, ParameterExpression targetParameterExpression, ParameterExpression argsParameterExpression);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    private Expression EnsureCastExpression(Expression expression, Type targetType, bool allowWidening);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.FSharpFunction : object {
    private object _instance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> _invoker;
    public FSharpFunction(object instance, MethodCall`2<object, object> invoker);
    [NullableContextAttribute("1")]
public object Invoke(Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.FSharpUtils : object {
    private static object Lock;
    [NullableAttribute("2")]
private static FSharpUtils _instance;
    private MethodInfo _ofSeq;
    private Type _mapType;
    [CompilerGeneratedAttribute]
private Assembly <FSharpCoreAssembly>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <IsUnion>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <GetUnionCases>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <PreComputeUnionTagReader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <PreComputeUnionReader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <PreComputeUnionConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoDeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoTag>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <GetUnionCaseInfoFields>k__BackingField;
    public static string FSharpSetTypeName;
    public static string FSharpListTypeName;
    public static string FSharpMapTypeName;
    public static FSharpUtils Instance { get; }
    public Assembly FSharpCoreAssembly { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> IsUnion { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCases { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionTagReader { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionReader { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionConstructor { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoDeclaringType { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoName { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoTag { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCaseInfoFields { get; private set; }
    private FSharpUtils(Assembly fsharpCoreAssembly);
    private static FSharpUtils();
    public static FSharpUtils get_Instance();
    [CompilerGeneratedAttribute]
public Assembly get_FSharpCoreAssembly();
    [CompilerGeneratedAttribute]
private void set_FSharpCoreAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_IsUnion();
    [CompilerGeneratedAttribute]
private void set_IsUnion(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCases();
    [CompilerGeneratedAttribute]
private void set_GetUnionCases(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionTagReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionTagReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionConstructor();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionConstructor(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoDeclaringType();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoDeclaringType(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoName();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoName(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoTag();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoTag(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCaseInfoFields();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoFields(MethodCall`2<object, object> value);
    public static void EnsureInitialized(Assembly fsharpCoreAssembly);
    private static MethodInfo GetMethodWithNonPublicFallback(Type type, string methodName, BindingFlags bindingFlags);
    private static MethodCall`2<object, object> CreateFSharpFuncCall(Type type, string methodName);
    public ObjectConstructor`1<object> CreateSeq(Type t);
    public ObjectConstructor`1<object> CreateMap(Type keyType, Type valueType);
    [NullableContextAttribute("2")]
public ObjectConstructor`1<object> BuildMapCreator();
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void PushArrayInstance(ILGenerator generator, int argsIndex, int arrayIndex);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.ImmutableCollectionsUtils : object {
    private static string ImmutableListGenericInterfaceTypeName;
    private static string ImmutableQueueGenericInterfaceTypeName;
    private static string ImmutableStackGenericInterfaceTypeName;
    private static string ImmutableSetGenericInterfaceTypeName;
    private static string ImmutableArrayTypeName;
    private static string ImmutableArrayGenericTypeName;
    private static string ImmutableListTypeName;
    private static string ImmutableListGenericTypeName;
    private static string ImmutableQueueTypeName;
    private static string ImmutableQueueGenericTypeName;
    private static string ImmutableStackTypeName;
    private static string ImmutableStackGenericTypeName;
    private static string ImmutableSortedSetTypeName;
    private static string ImmutableSortedSetGenericTypeName;
    private static string ImmutableHashSetTypeName;
    private static string ImmutableHashSetGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> ArrayContractImmutableCollectionDefinitions;
    private static string ImmutableDictionaryGenericInterfaceTypeName;
    private static string ImmutableDictionaryTypeName;
    private static string ImmutableDictionaryGenericTypeName;
    private static string ImmutableSortedDictionaryTypeName;
    private static string ImmutableSortedDictionaryGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> DictionaryContractImmutableCollectionDefinitions;
    private static ImmutableCollectionsUtils();
    internal static bool TryBuildImmutableForArrayContract(Type underlyingType, Type collectionItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
    internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
}
internal interface Microsoft.IdentityModel.Json.Utilities.IWrappedCollection {
    [NullableAttribute("1")]
public object UnderlyingCollection { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingCollection();
}
internal interface Microsoft.IdentityModel.Json.Utilities.IWrappedDictionary {
    [NullableAttribute("1")]
public object UnderlyingDictionary { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteCharEscapeFlags;
    internal static Boolean[] DoubleQuoteCharEscapeFlags;
    internal static Boolean[] HtmlCharEscapeFlags;
    private static int UnicodeTextLength;
    private static string EscapedUnicodeText;
    private static JavaScriptUtils();
    public static Boolean[] GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling, char quoteChar);
    public static bool ShouldEscapeJavaScriptString(string s, Boolean[] charEscapeFlags);
    [NullableContextAttribute("2")]
public static void WriteEscapedJavaScriptString(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, IArrayPool`1<char> bufferPool, Char[]& writeBuffer);
    public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters, StringEscapeHandling stringEscapeHandling);
    private static int FirstCharToEscape(string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling);
    public static Task WriteEscapedJavaScriptStringAsync(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Utilities.JavaScriptUtils/<WriteEscapedJavaScriptStringWithDelimitersAsync>d__13")]
private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(Task task, TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Utilities.JavaScriptUtils/<WriteCharAsync>d__14")]
public static Task WriteCharAsync(Task task, TextWriter writer, char c, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Json.Utilities.JavaScriptUtils/<WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync>d__16")]
private static Task WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, int lastWritePosition, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    public static bool TryGetDateFromConstructorJson(JsonReader reader, DateTime& dateTime, String& errorMessage);
    private static bool TryGetDateConstructorValue(JsonReader reader, Nullable`1& integer, String& errorMessage);
}
internal static class Microsoft.IdentityModel.Json.Utilities.JsonTokenUtils : object {
    internal static bool IsEndToken(JsonToken token);
    internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.LateBoundReflectionDelegateFactory : ReflectionDelegateFactory {
    private static LateBoundReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static LateBoundReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal static class Microsoft.IdentityModel.Json.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static Nullable`1<int> Min(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<int> Max(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<double> Max(Nullable`1<double> val1, Nullable`1<double> val2);
    public static bool ApproxEquals(double d1, double d2);
}
internal class Microsoft.IdentityModel.Json.Utilities.MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.IdentityModel.Json.Utilities.MiscellaneousUtils : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [NullableContextAttribute("2")]
public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    public static string GetPrefix(string qualifiedName);
    public static string GetLocalName(string qualifiedName);
    public static void GetQualifiedNameParts(string qualifiedName, String& prefix, String& localName);
    internal static RegexOptions GetRegexOptions(string optionsText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    private static NoThrowExpressionVisitor();
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.NoThrowGetBinderMember : GetMemberBinder {
    private GetMemberBinder _innerBinder;
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.NoThrowSetBinderMember : SetMemberBinder {
    private SetMemberBinder _innerBinder;
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum Microsoft.IdentityModel.Json.Utilities.ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum Microsoft.IdentityModel.Json.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
internal enum Microsoft.IdentityModel.Json.Utilities.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.IdentityModel.Json.Utilities.ReflectionDelegateFactory : object {
    public Func`2<T, object> CreateGet(MemberInfo memberInfo);
    public Action`2<T, object> CreateSet(MemberInfo memberInfo);
    public abstract virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public abstract virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public abstract virtual Func`1<T> CreateDefaultConstructor(Type type);
    public abstract virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public abstract virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.ReflectionMember : object {
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Getter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<object, object> <Setter>k__BackingField;
    public Type MemberType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Getter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<object, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.ReflectionObject : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ReflectionMember> <Members>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> Creator { get; }
    public IDictionary`2<string, ReflectionMember> Members { get; }
    private ReflectionObject(ObjectConstructor`1<object> creator);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_Creator();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ReflectionMember> get_Members();
    public object GetValue(object target, string member);
    public void SetValue(object target, string member, object value);
    public Type GetType(string member);
    public static ReflectionObject Create(Type t, String[] memberNames);
    public static ReflectionObject Create(Type t, MethodBase creator, String[] memberNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.ReflectionUtils : object {
    public static Type[] EmptyTypes;
    private static ReflectionUtils();
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    public static bool IsPublic(PropertyInfo property);
    [NullableContextAttribute("2")]
public static Type GetObjectType(object v);
    public static string GetTypeName(Type t, TypeNameAssemblyFormatHandling assemblyFormat, ISerializationBinder binder);
    private static string GetFullyQualifiedTypeName(Type t, ISerializationBinder binder);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    public static bool HasDefaultConstructor(Type t, bool nonPublic);
    public static ConstructorInfo GetDefaultConstructor(Type t);
    public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic);
    public static bool IsNullable(Type t);
    public static bool IsNullableType(Type t);
    public static Type EnsureNotNullableType(Type t);
    public static Type EnsureNotByRefType(Type t);
    public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, Type& implementingType);
    private static bool InheritsGenericDefinitionInternal(Type type, Type genericClassDefinition, Type& implementingType);
    public static Type GetCollectionItemType(Type type);
    [NullableContextAttribute("2")]
public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    public static Type GetMemberUnderlyingType(MemberInfo member);
    public static bool IsByRefLikeType(Type type);
    public static bool IsIndexedProperty(PropertyInfo property);
    public static object GetMemberValue(MemberInfo member, object target);
    public static void SetMemberValue(MemberInfo member, object target, object value);
    public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr);
    private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr);
    public static T GetAttribute(object attributeProvider);
    public static T GetAttribute(object attributeProvider, bool inherit);
    public static T[] GetAttributes(object attributeProvider, bool inherit);
    public static Attribute[] GetAttributes(object attributeProvider, Type attributeType, bool inherit);
    public static StructMultiKey`2<string, string> SplitFullyQualifiedTypeName(string fullyQualifiedTypeName);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo);
    public static IEnumerable`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr);
    private static void GetChildPrivateFields(IList`1<MemberInfo> initialFields, Type type, BindingFlags bindingAttr);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static BindingFlags RemoveFlag(BindingFlags bindingAttr, BindingFlags flag);
    private static void GetChildPrivateProperties(IList`1<PropertyInfo> initialProperties, Type type, BindingFlags bindingAttr);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.StringBuffer : ValueType {
    private Char[] _buffer;
    private int _position;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    public Char[] InternalBuffer { get; }
    public StringBuffer(IArrayPool`1<char> bufferPool, int initalSize);
    [NullableContextAttribute("1")]
private StringBuffer(Char[] buffer);
    public int get_Position();
    public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(IArrayPool`1<char> bufferPool, char value);
    [NullableContextAttribute("1")]
public void Append(IArrayPool`1<char> bufferPool, Char[] buffer, int startIndex, int count);
    public void Clear(IArrayPool`1<char> bufferPool);
    private void EnsureSize(IArrayPool`1<char> bufferPool, int appendLength);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(int start, int length);
    public Char[] get_InternalBuffer();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Json.Utilities.StringReference : ValueType {
    private Char[] _chars;
    private int _startIndex;
    private int _length;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    public Char[] get_Chars();
    public int get_StartIndex();
    public int get_Length();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.StringReferenceExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(StringReference s, char c, int startIndex, int length);
    [ExtensionAttribute]
public static bool StartsWith(StringReference s, string text);
    [ExtensionAttribute]
public static bool EndsWith(StringReference s, string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [NullableContextAttribute("2")]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    [ExtensionAttribute]
private static string FormatWith(string format, IFormatProvider provider, Object[] args);
    public static bool IsWhiteSpace(string s);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static TSource ForgivingCaseSensitiveFind(IEnumerable`1<TSource> source, Func`2<TSource, string> valueSelector, string testValue);
    public static string ToCamelCase(string s);
    private static char ToLower(char c);
    public static string ToSnakeCase(string s);
    public static string ToKebabCase(string s);
    private static string ToSeparatedCase(string s, char separator);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    public static int IndexOf(string s, char c);
    public static string Replace(string s, string oldValue, string newValue);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
    [ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.IdentityModel.Json.Utilities.StructMultiKey`2 : ValueType {
    public T1 Value1;
    public T2 Value2;
    public StructMultiKey`2(T1 v1, T2 v2);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StructMultiKey`2<T1, T2> other);
}
internal class Microsoft.IdentityModel.Json.Utilities.ThreadSafeStore`2 : object {
    private ConcurrentDictionary`2<TKey, TValue> _concurrentStore;
    private Func`2<TKey, TValue> _creator;
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Json.Utilities.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo Method(Delegate d);
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces, Type& match);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces);
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.IdentityModel.Json.Utilities.TypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    public Type Type { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public TypeInformation(Type type, PrimitiveTypeCode typeCode);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
}
internal static class Microsoft.IdentityModel.Json.Utilities.ValidationUtils : object {
    [NullableContextAttribute("1")]
public static void ArgumentNotNull(object value, string parameterName);
}
internal enum Microsoft.IdentityModel.Json.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Constructor;
    public static WriteState Property;
    public static WriteState Start;
}
internal static class Microsoft.IdentityModel.Tokens.AesAead : object {
    public static void CheckArgumentsForNull(Byte[] nonce, Byte[] plaintext, Byte[] ciphertext, Byte[] tag);
    public static void Decrypt(SafeKeyHandle keyHandle, Byte[] nonce, Byte[] associatedData, Byte[] ciphertext, Byte[] tag, Byte[] plaintext, bool clearPlaintextOnFailure);
    internal static void Encrypt(SafeKeyHandle keyHandle, Byte[] nonce, Byte[] associatedData, Byte[] plaintext, Byte[] ciphertext, Byte[] tag);
}
internal static class Microsoft.IdentityModel.Tokens.AesBCryptModes : object {
    internal static Lazy`1<SafeAlgorithmHandle> OpenAesAlgorithm(string cipherMode);
}
internal class Microsoft.IdentityModel.Tokens.AesGcm : object {
    public static int NonceSize;
    public static int TagSize;
    private static SafeAlgorithmHandle s_aesGcm;
    private SafeKeyHandle _keyHandle;
    private bool _disposed;
    public AesGcm(Byte[] key);
    private static AesGcm();
    private void ImportKey(Byte[] key);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Decrypt(Byte[] nonce, Byte[] ciphertext, Byte[] tag, Byte[] plaintext, Byte[] associatedData);
    internal void Encrypt(Byte[] nonce, Byte[] plaintext, Byte[] ciphertext, Byte[] tag, Byte[] associatedData);
}
public class Microsoft.IdentityModel.Tokens.AlgorithmValidator : MulticastDelegate {
    public AlgorithmValidator(object object, IntPtr method);
    public virtual bool Invoke(string algorithm, SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string algorithm, SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.AsymmetricAdapter : object {
    private bool _disposeCryptoOperators;
    private bool _disposed;
    private DecryptDelegate DecryptFunction;
    private EncryptDelegate EncryptFunction;
    private SignDelegate SignatureFunction;
    private VerifyDelegate VerifyFunction;
    private VerifyDelegateWithLength VerifyFunctionWithLength;
    [CompilerGeneratedAttribute]
private ECDsa <ECDsa>k__BackingField;
    [CompilerGeneratedAttribute]
private HashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private RSA <RSA>k__BackingField;
    [CompilerGeneratedAttribute]
private HashAlgorithmName <HashAlgorithmName>k__BackingField;
    [CompilerGeneratedAttribute]
private RSAEncryptionPadding <RSAEncryptionPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private RSASignaturePadding <RSASignaturePadding>k__BackingField;
    private ECDsa ECDsa { get; private set; }
    private HashAlgorithm HashAlgorithm { get; private set; }
    private RSA RSA { get; private set; }
    private HashAlgorithmName HashAlgorithmName { get; private set; }
    private RSAEncryptionPadding RSAEncryptionPadding { get; private set; }
    private RSASignaturePadding RSASignaturePadding { get; private set; }
    internal AsymmetricAdapter(SecurityKey key, string algorithm, bool requirePrivateKey);
    internal AsymmetricAdapter(SecurityKey key, string algorithm, HashAlgorithm hashAlgorithm, bool requirePrivateKey);
    internal AsymmetricAdapter(SecurityKey key, string algorithm, HashAlgorithm hashAlgorithm, HashAlgorithmName hashAlgorithmName, bool requirePrivateKey);
    internal Byte[] Decrypt(Byte[] data);
    internal static Byte[] DecryptFunctionNotFound(Byte[] _);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private ECDsa get_ECDsa();
    [CompilerGeneratedAttribute]
private void set_ECDsa(ECDsa value);
    internal Byte[] Encrypt(Byte[] data);
    internal static Byte[] EncryptFunctionNotFound(Byte[] _);
    [CompilerGeneratedAttribute]
private HashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
private void set_HashAlgorithm(HashAlgorithm value);
    private void InitializeUsingEcdsaSecurityKey(ECDsaSecurityKey ecdsaSecurityKey);
    private void InitializeUsingRsa(RSA rsa, string algorithm);
    private void InitializeUsingRsaSecurityKey(RsaSecurityKey rsaSecurityKey, string algorithm);
    private void InitializeUsingX509SecurityKey(X509SecurityKey x509SecurityKey, string algorithm, bool requirePrivateKey);
    [CompilerGeneratedAttribute]
private RSA get_RSA();
    [CompilerGeneratedAttribute]
private void set_RSA(RSA value);
    internal Byte[] Sign(Byte[] bytes);
    private static Byte[] SignatureFunctionNotFound(Byte[] _);
    private Byte[] SignWithECDsa(Byte[] bytes);
    internal bool Verify(Byte[] bytes, Byte[] signature);
    internal bool Verify(Byte[] bytes, int start, int length, Byte[] signature);
    private static bool VerifyFunctionNotFound(Byte[] bytes, Byte[] signature);
    private static bool VerifyFunctionWithLengthNotFound(Byte[] bytes, int start, int length, Byte[] signature);
    private bool VerifyWithECDsa(Byte[] bytes, Byte[] signature);
    private bool VerifyWithECDsaWithLength(Byte[] bytes, int start, int length, Byte[] signature);
    private Byte[] DecryptWithRsa(Byte[] bytes);
    private Byte[] EncryptWithRsa(Byte[] bytes);
    [CompilerGeneratedAttribute]
private HashAlgorithmName get_HashAlgorithmName();
    [CompilerGeneratedAttribute]
private void set_HashAlgorithmName(HashAlgorithmName value);
    [CompilerGeneratedAttribute]
private RSAEncryptionPadding get_RSAEncryptionPadding();
    [CompilerGeneratedAttribute]
private void set_RSAEncryptionPadding(RSAEncryptionPadding value);
    [CompilerGeneratedAttribute]
private RSASignaturePadding get_RSASignaturePadding();
    [CompilerGeneratedAttribute]
private void set_RSASignaturePadding(RSASignaturePadding value);
    private Byte[] SignWithRsa(Byte[] bytes);
    private bool VerifyWithRsa(Byte[] bytes, Byte[] signature);
    private bool VerifyWithRsaWithLength(Byte[] bytes, int start, int length, Byte[] signature);
}
public abstract class Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey : SecurityKey {
    [ObsoleteAttribute("HasPrivateKey method is deprecated, please use PrivateKeyStatus instead.")]
public bool HasPrivateKey { get; }
    public PrivateKeyStatus PrivateKeyStatus { get; }
    internal AsymmetricSecurityKey(SecurityKey key);
    public abstract virtual bool get_HasPrivateKey();
    public abstract virtual PrivateKeyStatus get_PrivateKeyStatus();
}
public class Microsoft.IdentityModel.Tokens.AsymmetricSignatureProvider : SignatureProvider {
    private DisposableObjectPool`1<AsymmetricAdapter> _asymmetricAdapterObjectPool;
    private CryptoProviderFactory _cryptoProviderFactory;
    private bool _disposed;
    private Lazy`1<bool> _keySizeIsValid;
    private IReadOnlyDictionary`2<string, int> _minimumAsymmetricKeySizeInBitsForSigningMap;
    private IReadOnlyDictionary`2<string, int> _minimumAsymmetricKeySizeInBitsForVerifyingMap;
    public static Dictionary`2<string, int> DefaultMinimumAsymmetricKeySizeInBitsForSigningMap;
    public static Dictionary`2<string, int> DefaultMinimumAsymmetricKeySizeInBitsForVerifyingMap;
    public IReadOnlyDictionary`2<string, int> MinimumAsymmetricKeySizeInBitsForSigningMap { get; }
    public IReadOnlyDictionary`2<string, int> MinimumAsymmetricKeySizeInBitsForVerifyingMap { get; }
    internal int ObjectPoolSize { get; }
    internal AsymmetricSignatureProvider(SecurityKey key, string algorithm, CryptoProviderFactory cryptoProviderFactory);
    internal AsymmetricSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures, CryptoProviderFactory cryptoProviderFactory);
    public AsymmetricSignatureProvider(SecurityKey key, string algorithm);
    public AsymmetricSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures);
    private static AsymmetricSignatureProvider();
    public IReadOnlyDictionary`2<string, int> get_MinimumAsymmetricKeySizeInBitsForSigningMap();
    public IReadOnlyDictionary`2<string, int> get_MinimumAsymmetricKeySizeInBitsForVerifyingMap();
    private static PrivateKeyStatus FoundPrivateKey(SecurityKey key);
    protected virtual HashAlgorithmName GetHashAlgorithmName(string algorithm);
    private AsymmetricAdapter CreateAsymmetricAdapter();
    internal bool ValidKeySize();
    internal virtual int get_ObjectPoolSize();
    public virtual Byte[] Sign(Byte[] input);
    public virtual void ValidateAsymmetricSecurityKeySize(SecurityKey key, string algorithm, bool willCreateSignatures);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual bool Verify(Byte[] input, int inputOffset, int inputLength, Byte[] signature, int signatureOffset, int signatureLength);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Tokens.AudienceValidator : MulticastDelegate {
    public AudienceValidator(object object, IntPtr method);
    public virtual bool Invoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider : object {
    private Lazy`1<AuthenticatedKeys> _authenticatedkeys;
    private DisposableObjectPool`1<AesGcm> _aesGcmObjectPool;
    private CryptoProviderFactory _cryptoProviderFactory;
    private bool _disposed;
    private Lazy`1<bool> _keySizeIsValid;
    private Lazy`1<SymmetricSignatureProvider> _symmetricSignatureProvider;
    private DecryptionDelegate DecryptFunction;
    private EncryptionDelegate EncryptFunction;
    private static string _className;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public AuthenticatedEncryptionProvider(SecurityKey key, string algorithm);
    private void InitializeUsingAesGcm();
    private void InitializeUsingAesCbc();
    internal bool ValidKeySize();
    private AuthenticatedEncryptionResult EncryptWithAesGcm(Byte[] plaintext, Byte[] authenticatedData, Byte[] iv);
    private AesGcm CreateAesGcmInstance();
    private Byte[] DecryptWithAesGcm(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag);
    private AuthenticatedEncryptionResult EncryptWithAesCbc(Byte[] plaintext, Byte[] authenticatedData, Byte[] iv);
    private Byte[] DecryptWithAesCbc(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag);
    private AuthenticatedKeys CreateAuthenticatedKeys();
    internal SymmetricSignatureProvider CreateSymmetricSignatureProvider();
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    public virtual AuthenticatedEncryptionResult Encrypt(Byte[] plaintext, Byte[] authenticatedData);
    public virtual AuthenticatedEncryptionResult Encrypt(Byte[] plaintext, Byte[] authenticatedData, Byte[] iv);
    public virtual Byte[] Decrypt(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    private AuthenticatedKeys GetAlgorithmParameters(SecurityKey key, string algorithm);
    private static string GetHmacAlgorithm(string algorithm);
    protected virtual Byte[] GetKeyBytes(SecurityKey key);
    internal static Byte[] Transform(ICryptoTransform transform, Byte[] input, int inputOffset, int inputLength);
    protected virtual void ValidateKeySize(SecurityKey key, string algorithm);
}
public class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult : object {
    [CompilerGeneratedAttribute]
private SecurityKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Ciphertext>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IV>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationTag>k__BackingField;
    public SecurityKey Key { get; private set; }
    public Byte[] Ciphertext { get; private set; }
    public Byte[] IV { get; private set; }
    public Byte[] AuthenticationTag { get; private set; }
    public AuthenticatedEncryptionResult(SecurityKey key, Byte[] ciphertext, Byte[] iv, Byte[] authenticationTag);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    [CompilerGeneratedAttribute]
public Byte[] get_Ciphertext();
    [CompilerGeneratedAttribute]
private void set_Ciphertext(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_IV();
    [CompilerGeneratedAttribute]
private void set_IV(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationTag();
    [CompilerGeneratedAttribute]
private void set_AuthenticationTag(Byte[] value);
}
public static class Microsoft.IdentityModel.Tokens.Base64UrlEncoder : object {
    private static char base64PadCharacter;
    private static char base64Character62;
    private static char base64Character63;
    private static char base64UrlCharacter62;
    private static char base64UrlCharacter63;
    internal static Char[] s_base64Table;
    private static Base64UrlEncoder();
    public static string Encode(string arg);
    public static string Encode(Byte[] inArray, int offset, int length);
    public static string Encode(Byte[] inArray);
    internal static string EncodeString(string str);
    public static Byte[] DecodeBytes(string str);
    internal static Byte[] UnsafeDecode(string str);
    internal static Byte[] UnsafeDecode(Char[] str);
    public static string Decode(string arg);
}
internal static class Microsoft.IdentityModel.Tokens.Base64UrlEncoding : object {
    private static UInt32 IntA;
    private static UInt32 IntZ;
    private static UInt32 Inta;
    private static UInt32 Intz;
    private static UInt32 Int0;
    private static UInt32 Int9;
    private static UInt32 IntEq;
    private static UInt32 IntPlus;
    private static UInt32 IntMinus;
    private static UInt32 IntSlash;
    private static UInt32 IntUnderscore;
    private static Char[] Base64Table;
    private static Base64UrlEncoding();
    public static Byte[] Decode(string inputString);
    public static Byte[] Decode(string input, int offset, int length);
    public static T Decode(string input, int offset, int length, TX argx, Func`4<Byte[], int, TX, T> action);
    public static T Decode(string input, int offset, int length, Func`3<Byte[], int, T> action);
    public static T Decode(string input, int offset, int length, TX argx, TY argy, TZ argz, Func`6<Byte[], int, TX, TY, TZ, T> action);
    private static void Decode(string input, int offset, int length, Byte[] output);
    public static string Encode(Byte[] bytes);
    public static string Encode(Byte[] input, int offset, int length);
    private static int ValidateAndGetOutputSize(string inputString, int offset, int length);
    private static void WriteEncodedOutput(Byte[] inputBytes, int offset, int length, Span`1<char> output);
}
public abstract class Microsoft.IdentityModel.Tokens.BaseConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SecurityKey> <SigningKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveTokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SecurityKey> <TokenDecryptionKeys>k__BackingField;
    public string Issuer { get; public set; }
    public ICollection`1<SecurityKey> SigningKeys { get; }
    public string TokenEndpoint { get; public set; }
    public string ActiveTokenEndpoint { get; public set; }
    [JsonIgnoreAttribute]
public ICollection`1<SecurityKey> TokenDecryptionKeys { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Issuer();
    [CompilerGeneratedAttribute]
public virtual void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<SecurityKey> get_SigningKeys();
    [CompilerGeneratedAttribute]
public virtual string get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public virtual void set_TokenEndpoint(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ActiveTokenEndpoint();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveTokenEndpoint(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<SecurityKey> get_TokenDecryptionKeys();
}
internal class Microsoft.IdentityModel.Tokens.BaseConfigurationComparer : object {
    public sealed virtual bool Equals(BaseConfiguration config1, BaseConfiguration config2);
    public sealed virtual int GetHashCode(BaseConfiguration config);
}
public abstract class Microsoft.IdentityModel.Tokens.BaseConfigurationManager : object {
    private TimeSpan _automaticRefreshInterval;
    private TimeSpan _refreshInterval;
    private TimeSpan _lastKnownGoodLifetime;
    private BaseConfiguration _lastKnownGoodConfiguration;
    private Nullable`1<DateTime> _lastKnownGoodConfigFirstUse;
    internal EventBasedLRUCache`2<BaseConfiguration, DateTime> _lastKnownGoodConfigurationCache;
    public static TimeSpan DefaultAutomaticRefreshInterval;
    public static TimeSpan DefaultLastKnownGoodConfigurationLifetime;
    public static TimeSpan DefaultRefreshInterval;
    [CompilerGeneratedAttribute]
private string <MetadataAddress>k__BackingField;
    public static TimeSpan MinimumAutomaticRefreshInterval;
    public static TimeSpan MinimumRefreshInterval;
    [CompilerGeneratedAttribute]
private bool <UseLastKnownGoodConfiguration>k__BackingField;
    public TimeSpan AutomaticRefreshInterval { get; public set; }
    public BaseConfiguration LastKnownGoodConfiguration { get; public set; }
    public TimeSpan LastKnownGoodLifetime { get; public set; }
    public string MetadataAddress { get; public set; }
    public TimeSpan RefreshInterval { get; public set; }
    public bool UseLastKnownGoodConfiguration { get; public set; }
    public bool IsLastKnownGoodValid { get; }
    public BaseConfigurationManager(LKGConfigurationCacheOptions options);
    private static BaseConfigurationManager();
    public TimeSpan get_AutomaticRefreshInterval();
    public void set_AutomaticRefreshInterval(TimeSpan value);
    public virtual Task`1<BaseConfiguration> GetBaseConfigurationAsync(CancellationToken cancel);
    internal ICollection`1<BaseConfiguration> GetValidLkgConfigurations();
    public BaseConfiguration get_LastKnownGoodConfiguration();
    public void set_LastKnownGoodConfiguration(BaseConfiguration value);
    public TimeSpan get_LastKnownGoodLifetime();
    public void set_LastKnownGoodLifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_MetadataAddress();
    [CompilerGeneratedAttribute]
public void set_MetadataAddress(string value);
    public TimeSpan get_RefreshInterval();
    public void set_RefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseLastKnownGoodConfiguration();
    [CompilerGeneratedAttribute]
public void set_UseLastKnownGoodConfiguration(bool value);
    public bool get_IsLastKnownGoodValid();
    public abstract virtual void RequestRefresh();
}
public class Microsoft.IdentityModel.Tokens.CallContext : LoggerContext {
    public CallContext(Guid activityId);
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Tokens.Cng : object {
    public static string BCRYPT_AES_ALGORITHM;
    public static string BCRYPT_CHAIN_MODE_GCM;
    public static SafeAlgorithmHandle BCryptOpenAlgorithmProvider(string pszAlgId, string pszImplementation, OpenAlgorithmProviderFlags dwFlags);
    [ExtensionAttribute]
public static void SetCipherMode(SafeAlgorithmHandle hAlg, string cipherMode);
    private static Exception CreateCryptographicException(NTSTATUS ntStatus);
}
[ExtensionAttribute]
public static class Microsoft.IdentityModel.Tokens.CollectionUtilities : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> enumerable);
}
public class Microsoft.IdentityModel.Tokens.CompressionAlgorithms : object {
    public static string Deflate;
}
public class Microsoft.IdentityModel.Tokens.CompressionProviderFactory : object {
    private static CompressionProviderFactory _default;
    [CompilerGeneratedAttribute]
private ICompressionProvider <CustomCompressionProvider>k__BackingField;
    public static CompressionProviderFactory Default { get; public set; }
    public ICompressionProvider CustomCompressionProvider { get; public set; }
    private static CompressionProviderFactory();
    public CompressionProviderFactory(CompressionProviderFactory other);
    public static CompressionProviderFactory get_Default();
    public static void set_Default(CompressionProviderFactory value);
    [CompilerGeneratedAttribute]
public ICompressionProvider get_CustomCompressionProvider();
    [CompilerGeneratedAttribute]
public void set_CustomCompressionProvider(ICompressionProvider value);
    public virtual bool IsSupportedAlgorithm(string algorithm);
    private static bool IsSupportedCompressionAlgorithm(string algorithm);
    public ICompressionProvider CreateCompressionProvider(string algorithm);
    public ICompressionProvider CreateCompressionProvider(string algorithm, int maximumDeflateSize);
}
public class Microsoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions : object {
    private IEqualityComparer`1<BaseConfiguration> _baseConfigurationComparer;
    private int _lastKnownGoodConfigurationSizeLimit;
    public static int DefaultLKGConfigurationSizeLimit;
    [CompilerGeneratedAttribute]
private TaskCreationOptions <TaskCreationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveExpiredValues>k__BackingField;
    public IEqualityComparer`1<BaseConfiguration> BaseConfigurationComparer { get; public set; }
    public int LastKnownGoodConfigurationSizeLimit { get; public set; }
    public TaskCreationOptions TaskCreationOptions { get; public set; }
    public bool RemoveExpiredValues { get; public set; }
    private static LKGConfigurationCacheOptions();
    public IEqualityComparer`1<BaseConfiguration> get_BaseConfigurationComparer();
    public void set_BaseConfigurationComparer(IEqualityComparer`1<BaseConfiguration> value);
    public int get_LastKnownGoodConfigurationSizeLimit();
    public void set_LastKnownGoodConfigurationSizeLimit(int value);
    [CompilerGeneratedAttribute]
public TaskCreationOptions get_TaskCreationOptions();
    [CompilerGeneratedAttribute]
public void set_TaskCreationOptions(TaskCreationOptions value);
    [CompilerGeneratedAttribute]
public bool get_RemoveExpiredValues();
    [CompilerGeneratedAttribute]
public void set_RemoveExpiredValues(bool value);
}
internal class Microsoft.IdentityModel.Tokens.CreateECDsaDelegate : MulticastDelegate {
    public CreateECDsaDelegate(object object, IntPtr method);
    public virtual ECDsa Invoke(JsonWebKey jsonWebKey, bool usePrivateKey);
    public virtual IAsyncResult BeginInvoke(JsonWebKey jsonWebKey, bool usePrivateKey, AsyncCallback callback, object object);
    public virtual ECDsa EndInvoke(IAsyncResult result);
}
internal static class Microsoft.IdentityModel.Tokens.CryptographicOperations : object {
    public static void ZeroMemory(Byte[] buffer);
}
public abstract class Microsoft.IdentityModel.Tokens.CryptoProviderCache : object {
    protected abstract virtual string GetCacheKey(SignatureProvider signatureProvider);
    protected abstract virtual string GetCacheKey(SecurityKey securityKey, string algorithm, string typeofProvider);
    public abstract virtual bool TryAdd(SignatureProvider signatureProvider);
    public abstract virtual bool TryGetSignatureProvider(SecurityKey securityKey, string algorithm, string typeofProvider, bool willCreateSignatures, SignatureProvider& signatureProvider);
    public abstract virtual bool TryRemove(SignatureProvider signatureProvider);
}
public class Microsoft.IdentityModel.Tokens.CryptoProviderCacheOptions : object {
    private int _sizeLimit;
    public static int DefaultSizeLimit;
    public int SizeLimit { get; public set; }
    private static CryptoProviderCacheOptions();
    public int get_SizeLimit();
    public void set_SizeLimit(int value);
}
public class Microsoft.IdentityModel.Tokens.CryptoProviderFactory : object {
    private static CryptoProviderFactory _default;
    private static ConcurrentDictionary`2<string, string> _typeToAlgorithmMap;
    private static object _cacheLock;
    private static int _defaultSignatureProviderObjectPoolCacheSize;
    private int _signatureProviderObjectPoolCacheSize;
    internal static string _skipValidationOfHmacKeySizes;
    [CompilerGeneratedAttribute]
private static bool <DefaultCacheSignatureProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptoProviderCache <CryptoProviderCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoProvider <CustomCryptoProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheSignatureProviders>k__BackingField;
    public static CryptoProviderFactory Default { get; public set; }
    [DefaultValueAttribute("True")]
public static bool DefaultCacheSignatureProviders { get; public set; }
    public static int DefaultSignatureProviderObjectPoolCacheSize { get; public set; }
    public CryptoProviderCache CryptoProviderCache { get; internal set; }
    public ICryptoProvider CustomCryptoProvider { get; public set; }
    [DefaultValueAttribute("True")]
public bool CacheSignatureProviders { get; public set; }
    public int SignatureProviderObjectPoolCacheSize { get; public set; }
    private static CryptoProviderFactory();
    public CryptoProviderFactory(CryptoProviderCache cache);
    public CryptoProviderFactory(CryptoProviderFactory other);
    public static CryptoProviderFactory get_Default();
    public static void set_Default(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultCacheSignatureProviders();
    [CompilerGeneratedAttribute]
public static void set_DefaultCacheSignatureProviders(bool value);
    public static int get_DefaultSignatureProviderObjectPoolCacheSize();
    public static void set_DefaultSignatureProviderObjectPoolCacheSize(int value);
    [CompilerGeneratedAttribute]
public CryptoProviderCache get_CryptoProviderCache();
    [CompilerGeneratedAttribute]
internal void set_CryptoProviderCache(CryptoProviderCache value);
    [CompilerGeneratedAttribute]
public ICryptoProvider get_CustomCryptoProvider();
    [CompilerGeneratedAttribute]
public void set_CustomCryptoProvider(ICryptoProvider value);
    [CompilerGeneratedAttribute]
public bool get_CacheSignatureProviders();
    [CompilerGeneratedAttribute]
public void set_CacheSignatureProviders(bool value);
    public int get_SignatureProviderObjectPoolCacheSize();
    public void set_SignatureProviderObjectPoolCacheSize(int value);
    public virtual AuthenticatedEncryptionProvider CreateAuthenticatedEncryptionProvider(SecurityKey key, string algorithm);
    public virtual KeyWrapProvider CreateKeyWrapProvider(SecurityKey key, string algorithm);
    public virtual KeyWrapProvider CreateKeyWrapProviderForUnwrap(SecurityKey key, string algorithm);
    private KeyWrapProvider CreateKeyWrapProvider(SecurityKey key, string algorithm, bool willUnwrap);
    public virtual SignatureProvider CreateForSigning(SecurityKey key, string algorithm);
    public virtual SignatureProvider CreateForSigning(SecurityKey key, string algorithm, bool cacheProvider);
    public virtual SignatureProvider CreateForVerifying(SecurityKey key, string algorithm);
    public virtual SignatureProvider CreateForVerifying(SecurityKey key, string algorithm, bool cacheProvider);
    public virtual HashAlgorithm CreateHashAlgorithm(HashAlgorithmName algorithm);
    public virtual HashAlgorithm CreateHashAlgorithm(string algorithm);
    public virtual KeyedHashAlgorithm CreateKeyedHashAlgorithm(Byte[] keyBytes, string algorithm);
    private static void ValidateKeySize(Byte[] keyBytes, string algorithm, int expectedNumberOfBytes);
    private SignatureProvider CreateSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures, bool cacheProvider);
    internal static bool ShouldCacheSignatureProvider(SignatureProvider signatureProvider);
    public virtual bool IsSupportedAlgorithm(string algorithm);
    public virtual bool IsSupportedAlgorithm(string algorithm, SecurityKey key);
    public virtual void ReleaseHashAlgorithm(HashAlgorithm hashAlgorithm);
    public virtual void ReleaseKeyWrapProvider(KeyWrapProvider provider);
    public virtual void ReleaseRsaKeyWrapProvider(RsaKeyWrapProvider provider);
    public virtual void ReleaseSignatureProvider(SignatureProvider signatureProvider);
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Tokens.CryptoThrowHelper : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(int hr);
}
public static class Microsoft.IdentityModel.Tokens.DateTimeUtil : object {
    public static DateTime Add(DateTime time, TimeSpan timespan);
    public static DateTime GetMaxValue(DateTimeKind kind);
    public static DateTime GetMinValue(DateTimeKind kind);
    public static Nullable`1<DateTime> ToUniversalTime(Nullable`1<DateTime> value);
    public static DateTime ToUniversalTime(DateTime value);
}
internal class Microsoft.IdentityModel.Tokens.DecryptDelegate : MulticastDelegate {
    public DecryptDelegate(object object, IntPtr method);
    public virtual Byte[] Invoke(Byte[] bytes);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.DecryptionDelegate : MulticastDelegate {
    public DecryptionDelegate(object object, IntPtr method);
    public virtual Byte[] Invoke(Byte[] cipherText, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag);
    public virtual IAsyncResult BeginInvoke(Byte[] cipherText, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.DeflateCompressionProvider : object {
    private int _maximumTokenSizeInBytes;
    [CompilerGeneratedAttribute]
private CompressionLevel <CompressionLevel>k__BackingField;
    public string Algorithm { get; }
    public CompressionLevel CompressionLevel { get; private set; }
    public int MaximumDeflateSize { get; public set; }
    public DeflateCompressionProvider(CompressionLevel compressionLevel);
    public sealed virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public CompressionLevel get_CompressionLevel();
    [CompilerGeneratedAttribute]
private void set_CompressionLevel(CompressionLevel value);
    public int get_MaximumDeflateSize();
    public void set_MaximumDeflateSize(int value);
    public sealed virtual Byte[] Decompress(Byte[] value);
    public sealed virtual Byte[] Compress(Byte[] value);
    public sealed virtual bool IsSupportedAlgorithm(string algorithm);
}
internal class Microsoft.IdentityModel.Tokens.DisposableObjectPool`1 : object {
    private Func`1<T> _factory;
    [CompilerGeneratedAttribute]
private Element[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    internal Element[] Items { get; }
    internal int Size { get; }
    internal DisposableObjectPool`1(Func`1<T> factory);
    internal DisposableObjectPool`1(Func`1<T> factory, int size);
    [CompilerGeneratedAttribute]
internal Element[] get_Items();
    [CompilerGeneratedAttribute]
internal int get_Size();
    private T CreateInstance();
    internal T Allocate();
    internal void Free(T obj);
}
public class Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider : object {
    [CompilerGeneratedAttribute]
private int <KeyDataLen>k__BackingField;
    private ECDiffieHellman _ecdhPublic;
    private ECDiffieHellman _ecdhPrivate;
    private ECParameters _ecParamsPublic;
    private ECParameters _ecParamsPrivate;
    private string _algorithmId;
    public int KeyDataLen { get; public set; }
    public EcdhKeyExchangeProvider(SecurityKey privateKey, SecurityKey publicKey, string alg, string enc);
    [CompilerGeneratedAttribute]
public int get_KeyDataLen();
    [CompilerGeneratedAttribute]
public void set_KeyDataLen(int value);
    public SecurityKey GenerateKdf(string apu, string apv);
    private void SetAppendBytes(string apu, string apv, Byte[]& append);
    private void SetKeyDataLenAndEncryptionAlgorithm(string alg, string enc);
    private static void ValidateAlgAndEnc(string alg, string enc);
    private void ValidateCurves(string privateKeyArgName, string publicKeyArgName);
    private static ECParameters GetECParametersFromKey(SecurityKey key, bool isPrivate, string nameOfKey);
    private static Byte[] Concat(Byte[][] arrays);
    internal string GetEncryptionAlgorithm();
}
internal class Microsoft.IdentityModel.Tokens.ECDsaAdapter : object {
    internal CreateECDsaDelegate CreateECDsaFunction;
    internal static ECDsaAdapter Instance;
    private static ECDsaAdapter();
    internal ECDsa CreateECDsa(JsonWebKey jsonWebKey, bool usePrivateKey);
    internal static ECDsa ECDsaNotSupported(JsonWebKey jsonWebKey, bool usePrivateKey);
    private static UInt32 GetKeyByteCount(string curveId);
    private static UInt32 GetMagicValue(string curveId, bool willCreateSignatures);
    private static bool SupportsCNGKey();
    private ECDsa CreateECDsaUsingECParams(JsonWebKey jsonWebKey, bool usePrivateKey);
    private static ECCurve GetNamedECCurve(string curveId);
    internal static string GetCrvParameterValue(ECCurve curve);
    internal static bool SupportsECParameters();
    private static void LoadECParametersType();
}
public class Microsoft.IdentityModel.Tokens.ECDsaSecurityKey : AsymmetricSecurityKey {
    private Nullable`1<bool> _hasPrivateKey;
    [CompilerGeneratedAttribute]
private ECDsa <ECDsa>k__BackingField;
    public ECDsa ECDsa { get; private set; }
    [ObsoleteAttribute("HasPrivateKey method is deprecated, please use FoundPrivateKey instead.")]
public bool HasPrivateKey { get; }
    public PrivateKeyStatus PrivateKeyStatus { get; }
    public int KeySize { get; }
    internal ECDsaSecurityKey(JsonWebKey webKey, bool usePrivateKey);
    public ECDsaSecurityKey(ECDsa ecdsa);
    [CompilerGeneratedAttribute]
public ECDsa get_ECDsa();
    [CompilerGeneratedAttribute]
private void set_ECDsa(ECDsa value);
    public virtual bool get_HasPrivateKey();
    public virtual PrivateKeyStatus get_PrivateKeyStatus();
    public virtual int get_KeySize();
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
}
internal static class Microsoft.IdentityModel.Tokens.EncodingUtils : object {
    internal static T PerformEncodingDependentOperation(string input, Encoding encoding, Func`3<Byte[], int, T> action);
    internal static T PerformEncodingDependentOperation(string input, int offset, int length, Encoding encoding, Func`3<Byte[], int, T> action);
    internal static T PerformEncodingDependentOperation(string input, int offset, int length, Encoding encoding, TX argx, TY argy, TZ argz, Func`6<Byte[], int, TX, TY, TZ, T> action);
    internal static T PerformEncodingDependentOperation(string input, Encoding encoding, TX parameter, Func`4<Byte[], int, TX, T> action);
    internal static T PerformEncodingDependentOperation(string input, int offset, int length, Encoding encoding, TX parameter, Func`4<Byte[], int, TX, T> action);
}
internal class Microsoft.IdentityModel.Tokens.EncryptDelegate : MulticastDelegate {
    public EncryptDelegate(object object, IntPtr method);
    public virtual Byte[] Invoke(Byte[] bytes);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.EncryptingCredentials : object {
    private string _alg;
    private string _enc;
    private SecurityKey _key;
    [CompilerGeneratedAttribute]
private SecurityKey <KeyExchangePublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetDefaultCtyClaim>k__BackingField;
    public string Alg { get; private set; }
    public string Enc { get; private set; }
    public SecurityKey KeyExchangePublicKey { get; public set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public bool SetDefaultCtyClaim { get; public set; }
    public SecurityKey Key { get; private set; }
    protected EncryptingCredentials(X509Certificate2 certificate, string alg, string enc);
    public EncryptingCredentials(SecurityKey key, string alg, string enc);
    public EncryptingCredentials(SymmetricSecurityKey key, string enc);
    public string get_Alg();
    private void set_Alg(string value);
    public string get_Enc();
    private void set_Enc(string value);
    [CompilerGeneratedAttribute]
public SecurityKey get_KeyExchangePublicKey();
    [CompilerGeneratedAttribute]
public void set_KeyExchangePublicKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public bool get_SetDefaultCtyClaim();
    [CompilerGeneratedAttribute]
public void set_SetDefaultCtyClaim(bool value);
    public SecurityKey get_Key();
    private void set_Key(SecurityKey value);
}
internal class Microsoft.IdentityModel.Tokens.EncryptionDelegate : MulticastDelegate {
    public EncryptionDelegate(object object, IntPtr method);
    public virtual AuthenticatedEncryptionResult Invoke(Byte[] plaintText, Byte[] authenticatedData, Byte[] iv);
    public virtual IAsyncResult BeginInvoke(Byte[] plaintText, Byte[] authenticatedData, Byte[] iv, AsyncCallback callback, object object);
    public virtual AuthenticatedEncryptionResult EndInvoke(IAsyncResult result);
}
public static class Microsoft.IdentityModel.Tokens.EpochTime : object {
    public static DateTime UnixEpoch;
    private static EpochTime();
    public static long GetIntDate(DateTime datetime);
    public static DateTime DateTime(long secondsSinceUnixEpoch);
}
internal class Microsoft.IdentityModel.Tokens.EventBasedLRUCache`2 : object {
    private int _capacity;
    private double _compactionPercentage;
    private LinkedList`1<LRUCacheItem`2<TKey, TValue>> _doubleLinkedList;
    private ConcurrentQueue`1<Action> _eventQueue;
    private ConcurrentDictionary`2<TKey, LRUCacheItem`2<TKey, TValue>> _map;
    private double _maxCapacityPercentage;
    private bool _removeExpiredValues;
    private int _removeExpiredValuesIntervalInSeconds;
    private bool _maintainLRU;
    private TaskCreationOptions _options;
    private DateTime _dueForExpiredValuesRemoval;
    private int _taskCount;
    private int _eventQueuePollingInterval;
    private long _eventQueueTaskIdleTimeoutInSeconds;
    private DateTime _eventQueueTaskStopTime;
    private static int EventQueueTaskStopped;
    private static int EventQueueTaskRunning;
    private static int EventQueueTaskDoNotStop;
    private int _eventQueueTaskState;
    private static int CompactionNotQueued;
    private static int CompactionQueuedOrRunning;
    private int _compactionState;
    private bool _shouldStopImmediately;
    [CompilerGeneratedAttribute]
private ItemRemoved<TKey, TValue> <OnItemRemoved>k__BackingField;
    internal ItemRemoved<TKey, TValue> OnItemRemoved { get; internal set; }
    internal long EventQueueTaskIdleTimeoutInSeconds { get; internal set; }
    private int EventQueuePollingInterval { get; private set; }
    internal LinkedList`1<LRUCacheItem`2<TKey, TValue>> LinkedList { get; }
    internal long LinkedListCount { get; }
    internal long MapCount { get; }
    internal ICollection`1<LRUCacheItem`2<TKey, TValue>> MapValues { get; }
    internal long EventQueueCount { get; }
    internal int TaskCount { get; }
    internal EventBasedLRUCache`2(int capacity, TaskCreationOptions options, IEqualityComparer`1<TKey> comparer, bool removeExpiredValues, int removeExpiredValuesIntervalInSeconds, bool maintainLRU);
    [CompilerGeneratedAttribute]
internal ItemRemoved<TKey, TValue> get_OnItemRemoved();
    [CompilerGeneratedAttribute]
internal void set_OnItemRemoved(ItemRemoved<TKey, TValue> value);
    internal long get_EventQueueTaskIdleTimeoutInSeconds();
    internal void set_EventQueueTaskIdleTimeoutInSeconds(long value);
    private int get_EventQueuePollingInterval();
    private void set_EventQueuePollingInterval(int value);
    private void DomainProcessExit(object sender, EventArgs e);
    private void DomainUnload(object sender, EventArgs e);
    internal void StopEventQueueTask();
    private void StopEventQueueTaskImmediately();
    private void AddActionToEventQueue(Action action);
    public bool Contains(TKey key);
    private void EventQueueTaskAction();
    internal int RemoveExpiredValuesLRU();
    internal int RemoveExpiredValues();
    private void CompactLRU();
    private void Compact();
    protected int CalculateNewCacheSize();
    private DateTime SetTaskEndTime();
    public void SetValue(TKey key, TValue value);
    public bool SetValue(TKey key, TValue value, DateTime expirationTime);
    private void StartEventQueueTaskIfNotRunning();
    internal KeyValuePair`2[] ToArray();
    public bool TryGetValue(TKey key, TValue& value);
    public bool TryRemove(TKey key, TValue& value);
    internal LinkedList`1<LRUCacheItem`2<TKey, TValue>> get_LinkedList();
    internal long get_LinkedListCount();
    internal long get_MapCount();
    internal ICollection`1<LRUCacheItem`2<TKey, TValue>> get_MapValues();
    internal long get_EventQueueCount();
    internal int get_TaskCount();
    internal void WaitForProcessing();
}
public interface Microsoft.IdentityModel.Tokens.ICompressionProvider {
    public string Algorithm { get; }
    public abstract virtual string get_Algorithm();
    public abstract virtual bool IsSupportedAlgorithm(string algorithm);
    public abstract virtual Byte[] Decompress(Byte[] value);
    public abstract virtual Byte[] Compress(Byte[] value);
}
public interface Microsoft.IdentityModel.Tokens.ICryptoProvider {
    public abstract virtual bool IsSupportedAlgorithm(string algorithm, Object[] args);
    public abstract virtual object Create(string algorithm, Object[] args);
    public abstract virtual void Release(object cryptoInstance);
}
public class Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache : CryptoProviderCache {
    internal CryptoProviderCacheOptions _cryptoProviderCacheOptions;
    private bool _disposed;
    private EventBasedLRUCache`2<string, SignatureProvider> _signingSignatureProviders;
    private EventBasedLRUCache`2<string, SignatureProvider> _verifyingSignatureProviders;
    [CompilerGeneratedAttribute]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    internal CryptoProviderFactory CryptoProviderFactory { get; internal set; }
    internal long TaskCount { get; }
    public InMemoryCryptoProviderCache(CryptoProviderCacheOptions cryptoProviderCacheOptions);
    internal InMemoryCryptoProviderCache(CryptoProviderCacheOptions cryptoProviderCacheOptions, TaskCreationOptions options, int tryTakeTimeout);
    [CompilerGeneratedAttribute]
internal CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
internal void set_CryptoProviderFactory(CryptoProviderFactory value);
    protected virtual string GetCacheKey(SignatureProvider signatureProvider);
    protected virtual string GetCacheKey(SecurityKey securityKey, string algorithm, string typeofProvider);
    private static string GetCacheKeyPrivate(SecurityKey securityKey, string algorithm, string typeofProvider);
    public virtual bool TryAdd(SignatureProvider signatureProvider);
    public virtual bool TryGetSignatureProvider(SecurityKey securityKey, string algorithm, string typeofProvider, bool willCreateSignatures, SignatureProvider& signatureProvider);
    public virtual bool TryRemove(SignatureProvider signatureProvider);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal long LinkedListCountSigning();
    internal long LinkedListCountVerifying();
    internal long MapCountSigning();
    internal long MapCountVerifying();
    internal long EventQueueCountSigning();
    internal long EventQueueCountVerifying();
    internal long get_TaskCount();
}
internal static class Microsoft.IdentityModel.Tokens.InternalValidators : object {
    internal static void ValidateAfterSignatureFailed(SecurityToken securityToken, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, IEnumerable`1<string> audiences, TokenValidationParameters validationParameters, BaseConfiguration configuration);
}
internal class Microsoft.IdentityModel.Tokens.Interop : object {
}
public interface Microsoft.IdentityModel.Tokens.ISecurityTokenValidator {
    public bool CanValidateToken { get; }
    public int MaximumTokenSizeInBytes { get; public set; }
    public abstract virtual bool CanReadToken(string securityToken);
    public abstract virtual bool get_CanValidateToken();
    public abstract virtual int get_MaximumTokenSizeInBytes();
    public abstract virtual void set_MaximumTokenSizeInBytes(int value);
    public abstract virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyResolver : MulticastDelegate {
    public IssuerSigningKeyResolver(object object, IntPtr method);
    public virtual IEnumerable`1<SecurityKey> Invoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SecurityKey> EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyResolverUsingConfiguration : MulticastDelegate {
    public IssuerSigningKeyResolverUsingConfiguration(object object, IntPtr method);
    public virtual IEnumerable`1<SecurityKey> Invoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, BaseConfiguration configuration, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SecurityKey> EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidator : MulticastDelegate {
    public IssuerSigningKeyValidator(object object, IntPtr method);
    public virtual bool Invoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidatorUsingConfiguration : MulticastDelegate {
    public IssuerSigningKeyValidatorUsingConfiguration(object object, IntPtr method);
    public virtual bool Invoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public virtual IAsyncResult BeginInvoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerValidator : MulticastDelegate {
    public IssuerValidator(object object, IntPtr method);
    public virtual string Invoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.IssuerValidatorAsync : MulticastDelegate {
    public IssuerValidatorAsync(object object, IntPtr method);
    public virtual Task`1<string> Invoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual Task`1<string> EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerValidatorUsingConfiguration : MulticastDelegate {
    public IssuerValidatorUsingConfiguration(object object, IntPtr method);
    public virtual string Invoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public virtual IAsyncResult BeginInvoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public interface Microsoft.IdentityModel.Tokens.ITokenReplayCache {
    public abstract virtual bool TryAdd(string securityToken, DateTime expiresOn);
    public abstract virtual bool TryFind(string securityToken);
}
public static class Microsoft.IdentityModel.Tokens.JsonWebAlgorithmsKeyTypes : object {
    public static string EllipticCurve;
    public static string RSA;
    public static string Octet;
}
[JsonObjectAttribute]
public class Microsoft.IdentityModel.Tokens.JsonWebKey : SecurityKey {
    private string _kid;
    private static string _className;
    [CompilerGeneratedAttribute]
private SecurityKey <ConvertedSecurityKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConvertKeyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Crv>k__BackingField;
    [CompilerGeneratedAttribute]
private string <D>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DQ>k__BackingField;
    [CompilerGeneratedAttribute]
private string <E>k__BackingField;
    [CompilerGeneratedAttribute]
private string <K>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <KeyOps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <N>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Oth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <P>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Q>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Use>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <X5c>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5t>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5tS256>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5u>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Y>k__BackingField;
    [JsonIgnoreAttribute]
internal SecurityKey ConvertedSecurityKey { get; internal set; }
    [JsonIgnoreAttribute]
internal string ConvertKeyInfo { get; internal set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [JsonPropertyAttribute]
public string Alg { get; public set; }
    [JsonPropertyAttribute]
public string Crv { get; public set; }
    [JsonPropertyAttribute]
public string D { get; public set; }
    [JsonPropertyAttribute]
public string DP { get; public set; }
    [JsonPropertyAttribute]
public string DQ { get; public set; }
    [JsonPropertyAttribute]
public string E { get; public set; }
    [JsonPropertyAttribute]
public string K { get; public set; }
    [JsonIgnoreAttribute]
public string KeyId { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> KeyOps { get; private set; }
    [JsonPropertyAttribute]
public string Kid { get; public set; }
    [JsonPropertyAttribute]
public string Kty { get; public set; }
    [JsonPropertyAttribute]
public string N { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> Oth { get; public set; }
    [JsonPropertyAttribute]
public string P { get; public set; }
    [JsonPropertyAttribute]
public string Q { get; public set; }
    [JsonPropertyAttribute]
public string QI { get; public set; }
    [JsonPropertyAttribute]
public string Use { get; public set; }
    [JsonPropertyAttribute]
public string X { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> X5c { get; private set; }
    [JsonPropertyAttribute]
public string X5t { get; public set; }
    [JsonPropertyAttribute]
public string X5tS256 { get; public set; }
    [JsonPropertyAttribute]
public string X5u { get; public set; }
    [JsonPropertyAttribute]
public string Y { get; public set; }
    [JsonIgnoreAttribute]
public int KeySize { get; }
    [JsonIgnoreAttribute]
public bool HasPrivateKey { get; }
    public JsonWebKey(string json);
    public static JsonWebKey Create(string json);
    [CompilerGeneratedAttribute]
internal SecurityKey get_ConvertedSecurityKey();
    [CompilerGeneratedAttribute]
internal void set_ConvertedSecurityKey(SecurityKey value);
    [CompilerGeneratedAttribute]
internal string get_ConvertKeyInfo();
    [CompilerGeneratedAttribute]
internal void set_ConvertKeyInfo(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_Crv();
    [CompilerGeneratedAttribute]
public void set_Crv(string value);
    [CompilerGeneratedAttribute]
public string get_D();
    [CompilerGeneratedAttribute]
public void set_D(string value);
    [CompilerGeneratedAttribute]
public string get_DP();
    [CompilerGeneratedAttribute]
public void set_DP(string value);
    [CompilerGeneratedAttribute]
public string get_DQ();
    [CompilerGeneratedAttribute]
public void set_DQ(string value);
    [CompilerGeneratedAttribute]
public string get_E();
    [CompilerGeneratedAttribute]
public void set_E(string value);
    [CompilerGeneratedAttribute]
public string get_K();
    [CompilerGeneratedAttribute]
public void set_K(string value);
    public virtual string get_KeyId();
    public virtual void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_KeyOps();
    [CompilerGeneratedAttribute]
private void set_KeyOps(IList`1<string> value);
    public string get_Kid();
    public void set_Kid(string value);
    [CompilerGeneratedAttribute]
public string get_Kty();
    [CompilerGeneratedAttribute]
public void set_Kty(string value);
    [CompilerGeneratedAttribute]
public string get_N();
    [CompilerGeneratedAttribute]
public void set_N(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Oth();
    [CompilerGeneratedAttribute]
public void set_Oth(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_P();
    [CompilerGeneratedAttribute]
public void set_P(string value);
    [CompilerGeneratedAttribute]
public string get_Q();
    [CompilerGeneratedAttribute]
public void set_Q(string value);
    [CompilerGeneratedAttribute]
public string get_QI();
    [CompilerGeneratedAttribute]
public void set_QI(string value);
    [CompilerGeneratedAttribute]
public string get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(string value);
    [CompilerGeneratedAttribute]
public string get_X();
    [CompilerGeneratedAttribute]
public void set_X(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_X5c();
    [CompilerGeneratedAttribute]
private void set_X5c(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_X5t();
    [CompilerGeneratedAttribute]
public void set_X5t(string value);
    [CompilerGeneratedAttribute]
public string get_X5tS256();
    [CompilerGeneratedAttribute]
public void set_X5tS256(string value);
    [CompilerGeneratedAttribute]
public string get_X5u();
    [CompilerGeneratedAttribute]
public void set_X5u(string value);
    [CompilerGeneratedAttribute]
public string get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(string value);
    public virtual int get_KeySize();
    public bool get_HasPrivateKey();
    public bool ShouldSerializeKeyOps();
    public bool ShouldSerializeX5c();
    internal RSAParameters CreateRsaParameters();
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
    private bool CanComputeOctThumbprint();
    private Byte[] ComputeOctThumbprint();
    private bool CanComputeRsaThumbprint();
    private Byte[] ComputeRsaThumbprint();
    private bool CanComputeECThumbprint();
    private Byte[] ComputeECThumbprint();
    internal string RepresentAsAsymmetricPublicJwk();
    private void PopulateWithPublicEcParams(JObject jwk);
    private void PopulateWithPublicRsaParams(JObject jwk);
    public virtual string ToString();
}
public class Microsoft.IdentityModel.Tokens.JsonWebKeyConverter : object {
    public static JsonWebKey ConvertFromSecurityKey(SecurityKey key);
    public static JsonWebKey ConvertFromRSASecurityKey(RsaSecurityKey key);
    public static JsonWebKey ConvertFromX509SecurityKey(X509SecurityKey key);
    public static JsonWebKey ConvertFromX509SecurityKey(X509SecurityKey key, bool representAsRsaKey);
    public static JsonWebKey ConvertFromSymmetricSecurityKey(SymmetricSecurityKey key);
    public static JsonWebKey ConvertFromECDsaSecurityKey(ECDsaSecurityKey key);
    internal static bool TryConvertToSecurityKey(JsonWebKey webKey, SecurityKey& key);
    internal static bool TryConvertToSymmetricSecurityKey(JsonWebKey webKey, SecurityKey& key);
    internal static bool TryConvertToX509SecurityKey(JsonWebKey webKey, SecurityKey& key);
    internal static bool TryCreateToRsaSecurityKey(JsonWebKey webKey, SecurityKey& key);
    internal static bool TryConvertToECDsaSecurityKey(JsonWebKey webKey, SecurityKey& key);
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyECTypes : object {
    public static string P256;
    public static string P384;
    public static string P512;
    public static string P521;
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames : object {
    public static string Alg;
    public static string Crv;
    public static string D;
    public static string DP;
    public static string DQ;
    public static string E;
    public static string K;
    public static string KeyOps;
    public static string Keys;
    public static string Kid;
    public static string Kty;
    public static string N;
    public static string Oth;
    public static string P;
    public static string Q;
    public static string R;
    public static string T;
    public static string QI;
    public static string Use;
    public static string X5c;
    public static string X5t;
    public static string X5tS256;
    public static string X5u;
    public static string X;
    public static string Y;
}
[JsonObjectAttribute]
public class Microsoft.IdentityModel.Tokens.JsonWebKeySet : object {
    private static string _className;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonWebKey> <Keys>k__BackingField;
    [DefaultValueAttribute("True")]
public static bool DefaultSkipUnresolvedJsonWebKeys;
    [CompilerGeneratedAttribute]
private bool <SkipUnresolvedJsonWebKeys>k__BackingField;
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [JsonPropertyAttribute]
public IList`1<JsonWebKey> Keys { get; private set; }
    [DefaultValueAttribute("True")]
public bool SkipUnresolvedJsonWebKeys { get; public set; }
    public JsonWebKeySet(string json);
    private static JsonWebKeySet();
    public static JsonWebKeySet Create(string json);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public IList`1<JsonWebKey> get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(IList`1<JsonWebKey> value);
    [CompilerGeneratedAttribute]
public bool get_SkipUnresolvedJsonWebKeys();
    [CompilerGeneratedAttribute]
public void set_SkipUnresolvedJsonWebKeys(bool value);
    public IList`1<SecurityKey> GetSigningKeys();
    private static bool IsValidX509SecurityKey(JsonWebKey webKey);
    private static bool IsValidRsaSecurityKey(JsonWebKey webKey);
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeySetParameterNames : object {
    public static string Keys;
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyUseNames : object {
    public static string Sig;
    public static string Enc;
}
public abstract class Microsoft.IdentityModel.Tokens.KeyWrapProvider : object {
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public abstract virtual string get_Algorithm();
    public abstract virtual string get_Context();
    public abstract virtual void set_Context(string value);
    public abstract virtual SecurityKey get_Key();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
    public abstract virtual Byte[] UnwrapKey(Byte[] keyBytes);
    public abstract virtual Byte[] WrapKey(Byte[] keyBytes);
}
public class Microsoft.IdentityModel.Tokens.LifetimeValidator : MulticastDelegate {
    public LifetimeValidator(object object, IntPtr method);
    public virtual bool Invoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal static class Microsoft.IdentityModel.Tokens.LogMessages : object {
    public static string IDX10101;
    public static string IDX10100;
    public static string IDX10102;
    public static string IDX10103;
    public static string IDX10104;
    public static string IDX10105;
    public static string IDX10107;
    public static string IDX10108;
    public static string IDX10109;
    public static string IDX10110;
    public static string IDX10204;
    public static string IDX10205;
    public static string IDX10206;
    public static string IDX10207;
    public static string IDX10208;
    public static string IDX10209;
    public static string IDX10211;
    public static string IDX10214;
    public static string IDX10222;
    public static string IDX10223;
    public static string IDX10224;
    public static string IDX10225;
    public static string IDX10227;
    public static string IDX10228;
    public static string IDX10229;
    public static string IDX10230;
    public static string IDX10231;
    public static string IDX10232;
    public static string IDX10233;
    public static string IDX10234;
    public static string IDX10235;
    public static string IDX10236;
    public static string IDX10237;
    public static string IDX10238;
    public static string IDX10239;
    public static string IDX10240;
    public static string IDX10241;
    public static string IDX10242;
    public static string IDX10243;
    public static string IDX10244;
    public static string IDX10245;
    public static string IDX10246;
    public static string IDX10248;
    public static string IDX10249;
    public static string IDX10250;
    public static string IDX10251;
    public static string IDX10252;
    public static string IDX10253;
    public static string IDX10254;
    public static string IDX10255;
    public static string IDX10256;
    public static string IDX10257;
    public static string IDX10258;
    public static string IDX10261;
    public static string IDX10262;
    public static string IDX10264;
    public static string IDX10265;
    public static string IDX10500;
    public static string IDX10503;
    public static string IDX10504;
    public static string IDX10505;
    public static string IDX10506;
    public static string IDX10508;
    public static string IDX10509;
    public static string IDX10510;
    public static string IDX10511;
    public static string IDX10512;
    public static string IDX10514;
    public static string IDX10603;
    public static string IDX10607;
    public static string IDX10609;
    public static string IDX10610;
    public static string IDX10611;
    public static string IDX10612;
    public static string IDX10615;
    public static string IDX10616;
    public static string IDX10617;
    public static string IDX10618;
    public static string IDX10619;
    public static string IDX10620;
    public static string IDX10904;
    public static string IDX10905;
    public static string IDX10400;
    public static string IDX10401;
    public static string IDX10621;
    public static string IDX10628;
    public static string IDX10630;
    public static string IDX10631;
    public static string IDX10634;
    public static string IDX10636;
    public static string IDX10637;
    public static string IDX10638;
    public static string IDX10640;
    public static string IDX10642;
    public static string IDX10643;
    public static string IDX10645;
    public static string IDX10646;
    public static string IDX10647;
    public static string IDX10649;
    public static string IDX10650;
    public static string IDX10652;
    public static string IDX10653;
    public static string IDX10654;
    public static string IDX10655;
    public static string IDX10657;
    public static string IDX10658;
    public static string IDX10659;
    public static string IDX10661;
    public static string IDX10662;
    public static string IDX10663;
    public static string IDX10664;
    public static string IDX10665;
    public static string IDX10666;
    public static string IDX10667;
    public static string IDX10668;
    public static string IDX10669;
    public static string IDX10674;
    public static string IDX10675;
    public static string IDX10679;
    public static string IDX10680;
    public static string IDX10682;
    public static string IDX10684;
    public static string IDX10685;
    public static string IDX10686;
    public static string IDX10687;
    public static string IDX10689;
    public static string IDX10690;
    public static string IDX10692;
    public static string IDX10693;
    public static string IDX10694;
    public static string IDX10695;
    public static string IDX10696;
    public static string IDX10697;
    public static string IDX10698;
    public static string IDX10699;
    public static string IDX10700;
    public static string IDX10703;
    public static string IDX10704;
    public static string IDX10705;
    public static string IDX10706;
    public static string IDX10707;
    public static string IDX10708;
    public static string IDX10709;
    public static string IDX10710;
    public static string IDX10711;
    public static string IDX10712;
    public static string IDX10713;
    public static string IDX10714;
    public static string IDX10715;
    public static string IDX10716;
    public static string IDX10717;
    public static string IDX10718;
    public static string IDX10719;
    public static string IDX10720;
    public static string IDX10805;
    public static string IDX10806;
    public static string IDX10808;
    public static string IDX10810;
    public static string IDX10812;
    public static string IDX10813;
    public static string IDX10814;
    public static string IDX10816;
    public static string IDX10820;
    public static string IDX10821;
    public static string IDX10900;
    public static string IDX10901;
    public static string IDX10902;
    public static string IDX11000;
    public static string IDX11001;
    public static string IDX11002;
}
internal class Microsoft.IdentityModel.Tokens.LRUCacheItem`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpirationTime>k__BackingField;
    internal TKey Key { get; }
    internal TValue Value { get; internal set; }
    internal DateTime ExpirationTime { get; internal set; }
    internal LRUCacheItem`2(TKey key, TValue value);
    internal LRUCacheItem`2(TKey key, TValue value, DateTime expirationTime);
    [CompilerGeneratedAttribute]
internal TKey get_Key();
    [CompilerGeneratedAttribute]
internal TValue get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(TValue value);
    [CompilerGeneratedAttribute]
internal DateTime get_ExpirationTime();
    [CompilerGeneratedAttribute]
internal void set_ExpirationTime(DateTime value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.IdentityModel.Tokens.PrivateKeyStatus : Enum {
    public int value__;
    public static PrivateKeyStatus Exists;
    public static PrivateKeyStatus DoesNotExist;
    public static PrivateKeyStatus Unknown;
}
public class Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider : KeyWrapProvider {
    private Lazy`1<AsymmetricAdapter> _asymmetricAdapter;
    private bool _disposed;
    private bool _willUnwrap;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public RsaKeyWrapProvider(SecurityKey key, string algorithm, bool willUnwrap);
    internal AsymmetricAdapter CreateAsymmetricAdapter();
    [CompilerGeneratedAttribute]
public virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public virtual string get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(string value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_Key();
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    public virtual Byte[] UnwrapKey(Byte[] keyBytes);
    public virtual Byte[] WrapKey(Byte[] keyBytes);
}
public class Microsoft.IdentityModel.Tokens.RsaSecurityKey : AsymmetricSecurityKey {
    private Nullable`1<bool> _hasPrivateKey;
    private bool _foundPrivateKeyDetermined;
    private PrivateKeyStatus _foundPrivateKey;
    private static string _className;
    [CompilerGeneratedAttribute]
private RSAParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private RSA <Rsa>k__BackingField;
    [ObsoleteAttribute("HasPrivateKey method is deprecated, please use FoundPrivateKey instead.")]
public bool HasPrivateKey { get; }
    public PrivateKeyStatus PrivateKeyStatus { get; }
    public int KeySize { get; }
    public RSAParameters Parameters { get; private set; }
    public RSA Rsa { get; private set; }
    internal RsaSecurityKey(JsonWebKey webKey);
    public RsaSecurityKey(RSAParameters rsaParameters);
    public RsaSecurityKey(RSA rsa);
    internal void IntializeWithRsaParameters(RSAParameters rsaParameters);
    public virtual bool get_HasPrivateKey();
    public virtual PrivateKeyStatus get_PrivateKeyStatus();
    public virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public RSAParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(RSAParameters value);
    [CompilerGeneratedAttribute]
public RSA get_Rsa();
    [CompilerGeneratedAttribute]
private void set_Rsa(RSA value);
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
}
internal class Microsoft.IdentityModel.Tokens.SafeAlgorithmHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
    private static UInt32 BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, int dwFlags);
}
internal abstract class Microsoft.IdentityModel.Tokens.SafeBCryptHandle : SafeHandle {
    public bool IsInvalid { get; }
    public sealed virtual bool get_IsInvalid();
    protected abstract virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.Tokens.SafeKeyHandle : SafeBCryptHandle {
    private SafeAlgorithmHandle _parentHandle;
    public void SetParentHandle(SafeAlgorithmHandle parentHandle);
    protected sealed virtual bool ReleaseHandle();
    private static UInt32 BCryptDestroyKey(IntPtr hKey);
}
public static class Microsoft.IdentityModel.Tokens.SecurityAlgorithms : object {
    public static string Aes128Encryption;
    public static string Aes192Encryption;
    public static string Aes256Encryption;
    public static string DesEncryption;
    public static string Aes128KeyWrap;
    public static string Aes192KeyWrap;
    public static string Aes256KeyWrap;
    public static string RsaV15KeyWrap;
    public static string Ripemd160Digest;
    public static string RsaOaepKeyWrap;
    public static string Aes128KW;
    public static string Aes192KW;
    public static string Aes256KW;
    public static string RsaPKCS1;
    public static string RsaOAEP;
    public static string ExclusiveC14n;
    public static string ExclusiveC14nWithComments;
    public static string EnvelopedSignature;
    public static string Sha256Digest;
    public static string Sha384Digest;
    public static string Sha512Digest;
    public static string Sha256;
    public static string Sha384;
    public static string Sha512;
    public static string EcdsaSha256Signature;
    public static string EcdsaSha384Signature;
    public static string EcdsaSha512Signature;
    public static string HmacSha256Signature;
    public static string HmacSha384Signature;
    public static string HmacSha512Signature;
    public static string RsaSha256Signature;
    public static string RsaSha384Signature;
    public static string RsaSha512Signature;
    public static string RsaSsaPssSha256Signature;
    public static string RsaSsaPssSha384Signature;
    public static string RsaSsaPssSha512Signature;
    public static string EcdsaSha256;
    public static string EcdsaSha384;
    public static string EcdsaSha512;
    public static string HmacSha256;
    public static string HmacSha384;
    public static string HmacSha512;
    public static string None;
    public static string RsaSha256;
    public static string RsaSha384;
    public static string RsaSha512;
    public static string RsaSsaPssSha256;
    public static string RsaSsaPssSha384;
    public static string RsaSsaPssSha512;
    public static string Aes128CbcHmacSha256;
    public static string Aes192CbcHmacSha384;
    public static string Aes256CbcHmacSha512;
    public static string Aes128Gcm;
    public static string Aes192Gcm;
    public static string Aes256Gcm;
    internal static string DefaultAsymmetricKeyWrapAlgorithm;
    internal static string DefaultSymmetricEncryptionAlgorithm;
    public static string EcdhEsA128kw;
    public static string EcdhEsA192kw;
    public static string EcdhEsA256kw;
    public static string EcdhEs;
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityKey : object {
    private CryptoProviderFactory _cryptoProviderFactory;
    private Lazy`1<string> _internalId;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [JsonIgnoreAttribute]
internal string InternalId { get; }
    public int KeySize { get; }
    [JsonIgnoreAttribute]
public string KeyId { get; public set; }
    [JsonIgnoreAttribute]
public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    internal SecurityKey(SecurityKey key);
    internal virtual string get_InternalId();
    public abstract virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public virtual string get_KeyId();
    [CompilerGeneratedAttribute]
public virtual void set_KeyId(string value);
    public CryptoProviderFactory get_CryptoProviderFactory();
    public void set_CryptoProviderFactory(CryptoProviderFactory value);
    public virtual string ToString();
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
    public virtual bool IsSupportedAlgorithm(string algorithm);
    private void SetInternalId();
    [CompilerGeneratedAttribute]
private string <SetInternalId>b__19_0();
}
public class Microsoft.IdentityModel.Tokens.SecurityKeyIdentifierClause : object {
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityToken : object {
    public string Id { get; }
    public string Issuer { get; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    internal virtual IEnumerable`1<Claim> CreateClaims(string issuer);
    public virtual string UnsafeToString();
    public abstract virtual string get_Id();
    public abstract virtual string get_Issuer();
    public abstract virtual SecurityKey get_SecurityKey();
    public abstract virtual SecurityKey get_SigningKey();
    public abstract virtual void set_SigningKey(SecurityKey value);
    public abstract virtual DateTime get_ValidFrom();
    public abstract virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenArgumentException : ArgumentException {
    public SecurityTokenArgumentException(string message);
    public SecurityTokenArgumentException(string message, Exception innerException);
    protected SecurityTokenArgumentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenCompressionFailedException : SecurityTokenException {
    public SecurityTokenCompressionFailedException(string message);
    public SecurityTokenCompressionFailedException(string message, Exception inner);
    protected SecurityTokenCompressionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDecompressionFailedException : SecurityTokenException {
    public SecurityTokenDecompressionFailedException(string message);
    public SecurityTokenDecompressionFailedException(string message, Exception inner);
    protected SecurityTokenDecompressionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDecryptionFailedException : SecurityTokenException {
    public SecurityTokenDecryptionFailedException(string message);
    public SecurityTokenDecryptionFailedException(string message, Exception innerException);
    protected SecurityTokenDecryptionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompressionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptingCredentials <EncryptingCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <IssuedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalHeaderClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalInnerHeaderClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private SigningCredentials <SigningCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Subject>k__BackingField;
    public string Audience { get; public set; }
    public string CompressionAlgorithm { get; public set; }
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public string Issuer { get; public set; }
    public Nullable`1<DateTime> IssuedAt { get; public set; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public string TokenType { get; public set; }
    public IDictionary`2<string, object> Claims { get; public set; }
    public IDictionary`2<string, object> AdditionalHeaderClaims { get; public set; }
    public IDictionary`2<string, object> AdditionalInnerHeaderClaims { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public ClaimsIdentity Subject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_CompressionAlgorithm();
    [CompilerGeneratedAttribute]
public void set_CompressionAlgorithm(string value);
    [CompilerGeneratedAttribute]
public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
public void set_EncryptingCredentials(EncryptingCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_IssuedAt();
    [CompilerGeneratedAttribute]
public void set_IssuedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalHeaderClaims();
    [CompilerGeneratedAttribute]
public void set_AdditionalHeaderClaims(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalInnerHeaderClaims();
    [CompilerGeneratedAttribute]
public void set_AdditionalInnerHeaderClaims(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
public void set_SigningCredentials(SigningCredentials value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsIdentity value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException : SecurityTokenException {
    public SecurityTokenEncryptionFailedException(string message);
    public SecurityTokenEncryptionFailedException(string message, Exception innerException);
    protected SecurityTokenEncryptionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionKeyNotFoundException : SecurityTokenDecryptionFailedException {
    public SecurityTokenEncryptionKeyNotFoundException(string message);
    public SecurityTokenEncryptionKeyNotFoundException(string message, Exception innerException);
    protected SecurityTokenEncryptionKeyNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenException : Exception {
    public SecurityTokenException(string message);
    public SecurityTokenException(string message, Exception innerException);
    protected SecurityTokenException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _ExpiresKey;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    public DateTime Expires { get; public set; }
    public SecurityTokenExpiredException(string message);
    public SecurityTokenExpiredException(string message, Exception inner);
    protected SecurityTokenExpiredException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(DateTime value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityTokenHandler : TokenHandler {
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public abstract virtual Type get_TokenType();
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool CanReadToken(string tokenString);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual string WriteToken(SecurityToken token);
    public abstract virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public abstract virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    public virtual ClaimsPrincipal ValidateToken(XmlReader reader, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAlgorithmException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _InvalidAlgorithmKey;
    [CompilerGeneratedAttribute]
private string <InvalidAlgorithm>k__BackingField;
    public string InvalidAlgorithm { get; public set; }
    public SecurityTokenInvalidAlgorithmException(string message);
    public SecurityTokenInvalidAlgorithmException(string message, Exception innerException);
    protected SecurityTokenInvalidAlgorithmException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_InvalidAlgorithm();
    [CompilerGeneratedAttribute]
public void set_InvalidAlgorithm(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _InvalidAudienceKey;
    [CompilerGeneratedAttribute]
private string <InvalidAudience>k__BackingField;
    public string InvalidAudience { get; public set; }
    public SecurityTokenInvalidAudienceException(string message);
    public SecurityTokenInvalidAudienceException(string message, Exception innerException);
    protected SecurityTokenInvalidAudienceException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_InvalidAudience();
    [CompilerGeneratedAttribute]
public void set_InvalidAudience(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidIssuerException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _InvalidIssuerKey;
    [CompilerGeneratedAttribute]
private string <InvalidIssuer>k__BackingField;
    public string InvalidIssuer { get; public set; }
    public SecurityTokenInvalidIssuerException(string message);
    public SecurityTokenInvalidIssuerException(string message, Exception innerException);
    protected SecurityTokenInvalidIssuerException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_InvalidIssuer();
    [CompilerGeneratedAttribute]
public void set_InvalidIssuer(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _NotBeforeKey;
    private static string _ExpiresKey;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public SecurityTokenInvalidLifetimeException(string message);
    public SecurityTokenInvalidLifetimeException(string message, Exception innerException);
    protected SecurityTokenInvalidLifetimeException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSignatureException : SecurityTokenValidationException {
    public SecurityTokenInvalidSignatureException(string message);
    public SecurityTokenInvalidSignatureException(string message, Exception innerException);
    protected SecurityTokenInvalidSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSigningKeyException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    public SecurityKey SigningKey { get; public set; }
    public SecurityTokenInvalidSigningKeyException(string message);
    public SecurityTokenInvalidSigningKeyException(string message, Exception inner);
    protected SecurityTokenInvalidSigningKeyException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public void set_SigningKey(SecurityKey value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidTypeException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _InvalidTypeKey;
    [CompilerGeneratedAttribute]
private string <InvalidType>k__BackingField;
    public string InvalidType { get; public set; }
    public SecurityTokenInvalidTypeException(string message);
    public SecurityTokenInvalidTypeException(string message, Exception innerException);
    protected SecurityTokenInvalidTypeException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_InvalidType();
    [CompilerGeneratedAttribute]
public void set_InvalidType(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenKeyWrapException : SecurityTokenException {
    public SecurityTokenKeyWrapException(string message);
    public SecurityTokenKeyWrapException(string message, Exception innerException);
    protected SecurityTokenKeyWrapException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException : SecurityTokenArgumentException {
    public SecurityTokenMalformedException(string message);
    public SecurityTokenMalformedException(string message, Exception innerException);
    protected SecurityTokenMalformedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenNoExpirationException : SecurityTokenValidationException {
    public SecurityTokenNoExpirationException(string message);
    public SecurityTokenNoExpirationException(string message, Exception innerException);
    protected SecurityTokenNoExpirationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenNotYetValidException : SecurityTokenValidationException {
    private static string _Prefix;
    private static string _NotBeforeKey;
    [CompilerGeneratedAttribute]
private DateTime <NotBefore>k__BackingField;
    public DateTime NotBefore { get; public set; }
    public SecurityTokenNotYetValidException(string message);
    public SecurityTokenNotYetValidException(string message, Exception inner);
    protected SecurityTokenNotYetValidException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public DateTime get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(DateTime value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenReplayAddFailedException : SecurityTokenValidationException {
    public SecurityTokenReplayAddFailedException(string message);
    public SecurityTokenReplayAddFailedException(string message, Exception innerException);
    protected SecurityTokenReplayAddFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException : SecurityTokenValidationException {
    public SecurityTokenReplayDetectedException(string message);
    public SecurityTokenReplayDetectedException(string message, Exception inner);
    protected SecurityTokenReplayDetectedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException : SecurityTokenInvalidSignatureException {
    public SecurityTokenSignatureKeyNotFoundException(string message);
    public SecurityTokenSignatureKeyNotFoundException(string message, Exception innerException);
    protected SecurityTokenSignatureKeyNotFoundException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("This expception is no longer being thrown by Microsoft.IdentityModel and will be removed in the next major version see: https://aka.ms/SecurityTokenUnableToValidateException", "False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.IdentityModel.Tokens.SecurityTokenUnableToValidateException : SecurityTokenInvalidSignatureException {
    private static string _Prefix;
    private static string _ValidationFailureKey;
    [CompilerGeneratedAttribute]
private ValidationFailure <ValidationFailure>k__BackingField;
    public ValidationFailure ValidationFailure { get; public set; }
    public SecurityTokenUnableToValidateException(ValidationFailure validationFailure, string message);
    public SecurityTokenUnableToValidateException(string message);
    public SecurityTokenUnableToValidateException(string message, Exception innerException);
    protected SecurityTokenUnableToValidateException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public ValidationFailure get_ValidationFailure();
    [CompilerGeneratedAttribute]
public void set_ValidationFailure(ValidationFailure value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenValidationException : SecurityTokenException {
    public SecurityTokenValidationException(string message);
    public SecurityTokenValidationException(string message, Exception innerException);
    protected SecurityTokenValidationException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.Tokens.SignatureProvider : object {
    private int _referenceCount;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptoProviderCache <CryptoProviderCache>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WillCreateSignatures>k__BackingField;
    public string Algorithm { get; private set; }
    public string Context { get; public set; }
    public CryptoProviderCache CryptoProviderCache { get; public set; }
    public SecurityKey Key { get; private set; }
    internal int ObjectPoolSize { get; }
    internal int RefCount { get; }
    public bool WillCreateSignatures { get; protected set; }
    protected SignatureProvider(SecurityKey key, string algorithm);
    internal int AddRef();
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public CryptoProviderCache get_CryptoProviderCache();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderCache(CryptoProviderCache value);
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    internal virtual int get_ObjectPoolSize();
    internal int get_RefCount();
    internal int Release();
    public abstract virtual Byte[] Sign(Byte[] input);
    public abstract virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual bool Verify(Byte[] input, int inputOffset, int inputLength, Byte[] signature, int signatureOffset, int signatureLength);
    [CompilerGeneratedAttribute]
public bool get_WillCreateSignatures();
    [CompilerGeneratedAttribute]
protected void set_WillCreateSignatures(bool value);
}
public class Microsoft.IdentityModel.Tokens.SignatureValidator : MulticastDelegate {
    public SignatureValidator(object object, IntPtr method);
    public virtual SecurityToken Invoke(string token, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual SecurityToken EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.SignatureValidatorUsingConfiguration : MulticastDelegate {
    public SignatureValidatorUsingConfiguration(object object, IntPtr method);
    public virtual SecurityToken Invoke(string token, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public virtual IAsyncResult BeginInvoke(string token, TokenValidationParameters validationParameters, BaseConfiguration configuration, AsyncCallback callback, object object);
    public virtual SecurityToken EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.SignDelegate : MulticastDelegate {
    public SignDelegate(object object, IntPtr method);
    public virtual Byte[] Invoke(Byte[] bytes);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.SigningCredentials : object {
    private string _algorithm;
    private string _digest;
    private SecurityKey _key;
    [CompilerGeneratedAttribute]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    public string Algorithm { get; private set; }
    public string Digest { get; private set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public SecurityKey Key { get; private set; }
    public string Kid { get; }
    protected SigningCredentials(X509Certificate2 certificate);
    protected SigningCredentials(X509Certificate2 certificate, string algorithm);
    public SigningCredentials(SecurityKey key, string algorithm);
    public SigningCredentials(SecurityKey key, string algorithm, string digest);
    public string get_Algorithm();
    private void set_Algorithm(string value);
    public string get_Digest();
    private void set_Digest(string value);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    public SecurityKey get_Key();
    private void set_Key(SecurityKey value);
    public string get_Kid();
}
internal static class Microsoft.IdentityModel.Tokens.SupportedAlgorithms : object {
    private static int RsaMinKeySize;
    internal static ICollection`1<string> EcdsaSigningAlgorithms;
    internal static ICollection`1<string> HashAlgorithms;
    internal static ICollection`1<string> RsaEncryptionAlgorithms;
    internal static ICollection`1<string> RsaSigningAlgorithms;
    internal static ICollection`1<string> RsaPssSigningAlgorithms;
    internal static ICollection`1<string> SymmetricEncryptionAlgorithms;
    internal static ICollection`1<string> SymmetricKeyWrapAlgorithms;
    internal static ICollection`1<string> SymmetricSigningAlgorithms;
    internal static ICollection`1<string> EcdsaWrapAlgorithms;
    private static SupportedAlgorithms();
    internal static HashAlgorithmName GetHashAlgorithmName(string algorithm);
    internal static string GetDigestFromSignatureAlgorithm(string algorithm);
    public static bool IsSupportedAlgorithm(string algorithm, SecurityKey key);
    internal static bool IsSupportedEncryptionAlgorithm(string algorithm, SecurityKey key);
    internal static bool IsAesGcm(string algorithm);
    internal static bool IsAesCbc(string algorithm);
    private static bool IsSupportedEcdsaAlgorithm(string algorithm);
    internal static bool IsSupportedHashAlgorithm(string algorithm);
    internal static bool IsSupportedRsaKeyWrap(string algorithm, SecurityKey key);
    internal static bool IsSupportedSymmetricKeyWrap(string algorithm, SecurityKey key);
    internal static bool IsSupportedRsaAlgorithm(string algorithm, SecurityKey key);
    private static bool IsSupportedRsaPss(SecurityKey key);
    internal static bool IsSupportedSymmetricAlgorithm(string algorithm);
}
public class Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider : KeyWrapProvider {
    private static Byte[] _defaultIV;
    private static int _blockSizeInBits;
    private static int _blockSizeInBytes;
    private static object _encryptorLock;
    private static object _decryptorLock;
    private Lazy`1<SymmetricAlgorithm> _symmetricAlgorithm;
    private ICryptoTransform _symmetricAlgorithmEncryptor;
    private ICryptoTransform _symmetricAlgorithmDecryptor;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public SymmetricKeyWrapProvider(SecurityKey key, string algorithm);
    private static SymmetricKeyWrapProvider();
    [CompilerGeneratedAttribute]
public virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public virtual string get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(string value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_Key();
    private SymmetricAlgorithm CreateSymmetricAlgorithm();
    protected virtual void Dispose(bool disposing);
    private static Byte[] GetBytes(ulong i);
    protected virtual SymmetricAlgorithm GetSymmetricAlgorithm(SecurityKey key, string algorithm);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    public virtual Byte[] UnwrapKey(Byte[] keyBytes);
    private Byte[] UnwrapKeyPrivate(Byte[] inputBuffer, int inputOffset, int inputCount);
    private void ValidateKeySize(Byte[] key, string algorithm);
    public virtual Byte[] WrapKey(Byte[] keyBytes);
    private Byte[] WrapKeyPrivate(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public class Microsoft.IdentityModel.Tokens.SymmetricSecurityKey : SecurityKey {
    private int _keySize;
    private Byte[] _key;
    public int KeySize { get; }
    public Byte[] Key { get; }
    internal SymmetricSecurityKey(JsonWebKey webKey);
    public SymmetricSecurityKey(Byte[] key);
    public virtual int get_KeySize();
    public virtual Byte[] get_Key();
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
}
public class Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider : SignatureProvider {
    private bool _disposed;
    private DisposableObjectPool`1<KeyedHashAlgorithm> _keyedHashObjectPool;
    private static Dictionary`2<string, int> _expectedSignatureSizeInBytes;
    public static int DefaultMinimumSymmetricKeySizeInBits;
    private int _minimumSymmetricKeySizeInBits;
    public int MinimumSymmetricKeySizeInBits { get; public set; }
    internal int ObjectPoolSize { get; }
    public SymmetricSignatureProvider(SecurityKey key, string algorithm);
    public SymmetricSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures);
    private static SymmetricSignatureProvider();
    public int get_MinimumSymmetricKeySizeInBits();
    public void set_MinimumSymmetricKeySizeInBits(int value);
    protected virtual Byte[] GetKeyBytes(SecurityKey key);
    protected virtual KeyedHashAlgorithm GetKeyedHashAlgorithm(Byte[] keyBytes, string algorithm);
    private KeyedHashAlgorithm CreateKeyedHashAlgorithm();
    internal virtual int get_ObjectPoolSize();
    protected virtual void ReleaseKeyedHashAlgorithm(KeyedHashAlgorithm keyedHashAlgorithm);
    public virtual Byte[] Sign(Byte[] input);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public bool Verify(Byte[] input, Byte[] signature, int length);
    public virtual bool Verify(Byte[] input, int inputOffset, int inputLength, Byte[] signature, int signatureOffset, int signatureLength);
    internal bool Verify(Byte[] input, int inputOffset, int inputLength, Byte[] signature, int signatureOffset, int signatureLength, string algorithm);
    protected virtual void Dispose(bool disposing);
}
[ObsoleteAttribute("The 'TokenContext' property is obsolete. Please use 'CallContext' instead.")]
public class Microsoft.IdentityModel.Tokens.TokenContext : CallContext {
    public TokenContext(Guid activityId);
}
public class Microsoft.IdentityModel.Tokens.TokenDecryptionKeyResolver : MulticastDelegate {
    public TokenDecryptionKeyResolver(object object, IntPtr method);
    public virtual IEnumerable`1<SecurityKey> Invoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SecurityKey> EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.IdentityModel.Tokens.TokenHandler : object {
    private int _defaultTokenLifetimeInMinutes;
    private int _maximumTokenSizeInBytes;
    public static int DefaultTokenLifetimeInMinutes;
    [CompilerGeneratedAttribute]
private bool <SetDefaultTimesOnTokenCreation>k__BackingField;
    public int MaximumTokenSizeInBytes { get; public set; }
    [DefaultValueAttribute("True")]
public bool SetDefaultTimesOnTokenCreation { get; public set; }
    public int TokenLifetimeInMinutes { get; public set; }
    private static TokenHandler();
    public virtual int get_MaximumTokenSizeInBytes();
    public virtual void set_MaximumTokenSizeInBytes(int value);
    [CompilerGeneratedAttribute]
public bool get_SetDefaultTimesOnTokenCreation();
    [CompilerGeneratedAttribute]
public void set_SetDefaultTimesOnTokenCreation(bool value);
    public int get_TokenLifetimeInMinutes();
    public void set_TokenLifetimeInMinutes(int value);
    public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
    public virtual Task`1<TokenValidationResult> ValidateTokenAsync(SecurityToken token, TokenValidationParameters validationParameters);
    public virtual SecurityToken ReadToken(string token);
    internal virtual ClaimsIdentity CreateClaimsIdentityInternal(SecurityToken securityToken, TokenValidationParameters tokenValidationParameters, string issuer);
}
public class Microsoft.IdentityModel.Tokens.TokenReader : MulticastDelegate {
    public TokenReader(object object, IntPtr method);
    public virtual SecurityToken Invoke(string token, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual SecurityToken EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.TokenReplayValidator : MulticastDelegate {
    public TokenReplayValidator(object object, IntPtr method);
    public virtual bool Invoke(Nullable`1<DateTime> expirationTime, string securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(Nullable`1<DateTime> expirationTime, string securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.TokenUtilities : object {
    internal static string Json;
    internal static string JsonArray;
    internal static string JsonNull;
    internal static IDictionary`2<string, object> CreateDictionaryFromClaims(IEnumerable`1<Claim> claims);
    internal static object GetClaimValueUsingValueType(Claim claim);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Tokens.TokenUtilities/<GetAllSigningKeys>d__5")]
internal static IEnumerable`1<SecurityKey> GetAllSigningKeys(TokenValidationParameters validationParameters);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.Tokens.TokenUtilities/<GetAllSigningKeys>d__6")]
internal static IEnumerable`1<SecurityKey> GetAllSigningKeys(BaseConfiguration configuration);
    internal static IEnumerable`1<SecurityKey> GetAllSigningKeys(TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static IEnumerable`1<Claim> MergeClaims(IEnumerable`1<Claim> claims, IEnumerable`1<Claim> subjectClaims);
    internal static bool IsRecoverableException(Exception exception);
    internal static bool IsRecoverableConfiguration(string kid, BaseConfiguration currentConfiguration, BaseConfiguration lkgConfiguration, Exception currentException);
}
public class Microsoft.IdentityModel.Tokens.TokenValidationParameters : object {
    private string _authenticationType;
    private TimeSpan _clockSkew;
    private string _nameClaimType;
    private string _roleClaimType;
    public static string DefaultAuthenticationType;
    public static TimeSpan DefaultClockSkew;
    public static int DefaultMaximumTokenSizeInBytes;
    [CompilerGeneratedAttribute]
private TokenValidationParameters <ActorValidationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private AlgorithmValidator <AlgorithmValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private AudienceValidator <AudienceValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseConfigurationManager <ConfigurationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTrailingSlashWhenValidatingAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTokenOnFailedValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyValidator <IssuerSigningKeyValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyValidatorUsingConfiguration <IssuerSigningKeyValidatorUsingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <InstancePropertyBag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClone>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <IssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyResolver <IssuerSigningKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyResolverUsingConfiguration <IssuerSigningKeyResolverUsingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <IssuerSigningKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerValidator <IssuerValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerValidatorAsync <IssuerValidatorAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerValidatorUsingConfiguration <IssuerValidatorUsingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformBeforeSignatureValidation <TransformBeforeSignatureValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeValidator <LifetimeValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogTokenId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogValidationExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<SecurityToken, string, string> <NameClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <PropertyBag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshBeforeValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSignedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<SecurityToken, string, string> <RoleClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveSigninToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SignatureValidator <SignatureValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private SignatureValidatorUsingConfiguration <SignatureValidatorUsingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <TokenDecryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenDecryptionKeyResolver <TokenDecryptionKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <TokenDecryptionKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenReader <TokenReader>k__BackingField;
    [CompilerGeneratedAttribute]
private ITokenReplayCache <TokenReplayCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenReplayValidator <TokenReplayValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryAllIssuerSigningKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeValidator <TypeValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateActor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateWithLKG>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateIssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateSignatureLast>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateTokenReplay>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidAudiences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidIssuers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidTypes>k__BackingField;
    public TokenValidationParameters ActorValidationParameters { get; public set; }
    public AlgorithmValidator AlgorithmValidator { get; public set; }
    public AudienceValidator AudienceValidator { get; public set; }
    public string AuthenticationType { get; public set; }
    [DefaultValueAttribute("300")]
public TimeSpan ClockSkew { get; public set; }
    public BaseConfigurationManager ConfigurationManager { get; public set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public string DebugId { get; public set; }
    [DefaultValueAttribute("True")]
public bool IgnoreTrailingSlashWhenValidatingAudience { get; public set; }
    public bool IncludeTokenOnFailedValidation { get; public set; }
    public IssuerSigningKeyValidator IssuerSigningKeyValidator { get; public set; }
    public IssuerSigningKeyValidatorUsingConfiguration IssuerSigningKeyValidatorUsingConfiguration { get; public set; }
    public IDictionary`2<string, object> InstancePropertyBag { get; }
    public bool IsClone { get; protected set; }
    public SecurityKey IssuerSigningKey { get; public set; }
    public IssuerSigningKeyResolver IssuerSigningKeyResolver { get; public set; }
    public IssuerSigningKeyResolverUsingConfiguration IssuerSigningKeyResolverUsingConfiguration { get; public set; }
    public IEnumerable`1<SecurityKey> IssuerSigningKeys { get; public set; }
    public IssuerValidator IssuerValidator { get; public set; }
    internal IssuerValidatorAsync IssuerValidatorAsync { get; internal set; }
    public IssuerValidatorUsingConfiguration IssuerValidatorUsingConfiguration { get; public set; }
    public TransformBeforeSignatureValidation TransformBeforeSignatureValidation { get; public set; }
    public LifetimeValidator LifetimeValidator { get; public set; }
    [DefaultValueAttribute("True")]
public bool LogTokenId { get; public set; }
    [DefaultValueAttribute("True")]
public bool LogValidationExceptions { get; public set; }
    public string NameClaimType { get; public set; }
    public Func`3<SecurityToken, string, string> NameClaimTypeRetriever { get; public set; }
    public IDictionary`2<string, object> PropertyBag { get; public set; }
    [DefaultValueAttribute("False")]
public bool RefreshBeforeValidation { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireAudience { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireExpirationTime { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireSignedTokens { get; public set; }
    public string RoleClaimType { get; public set; }
    public Func`3<SecurityToken, string, string> RoleClaimTypeRetriever { get; public set; }
    [DefaultValueAttribute("False")]
public bool SaveSigninToken { get; public set; }
    public SignatureValidator SignatureValidator { get; public set; }
    public SignatureValidatorUsingConfiguration SignatureValidatorUsingConfiguration { get; public set; }
    public SecurityKey TokenDecryptionKey { get; public set; }
    public TokenDecryptionKeyResolver TokenDecryptionKeyResolver { get; public set; }
    public IEnumerable`1<SecurityKey> TokenDecryptionKeys { get; public set; }
    public TokenReader TokenReader { get; public set; }
    public ITokenReplayCache TokenReplayCache { get; public set; }
    public TokenReplayValidator TokenReplayValidator { get; public set; }
    [DefaultValueAttribute("True")]
public bool TryAllIssuerSigningKeys { get; public set; }
    public TypeValidator TypeValidator { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateActor { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateAudience { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateIssuer { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateWithLKG { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateIssuerSigningKey { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateLifetime { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateSignatureLast { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateTokenReplay { get; public set; }
    public IEnumerable`1<string> ValidAlgorithms { get; public set; }
    public string ValidAudience { get; public set; }
    public IEnumerable`1<string> ValidAudiences { get; public set; }
    public string ValidIssuer { get; public set; }
    public IEnumerable`1<string> ValidIssuers { get; public set; }
    public IEnumerable`1<string> ValidTypes { get; public set; }
    protected TokenValidationParameters(TokenValidationParameters other);
    private static TokenValidationParameters();
    [CompilerGeneratedAttribute]
public TokenValidationParameters get_ActorValidationParameters();
    [CompilerGeneratedAttribute]
public void set_ActorValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public AlgorithmValidator get_AlgorithmValidator();
    [CompilerGeneratedAttribute]
public void set_AlgorithmValidator(AlgorithmValidator value);
    [CompilerGeneratedAttribute]
public AudienceValidator get_AudienceValidator();
    [CompilerGeneratedAttribute]
public void set_AudienceValidator(AudienceValidator value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public TimeSpan get_ClockSkew();
    public void set_ClockSkew(TimeSpan value);
    public virtual TokenValidationParameters Clone();
    public virtual ClaimsIdentity CreateClaimsIdentity(SecurityToken securityToken, string issuer);
    [CompilerGeneratedAttribute]
public BaseConfigurationManager get_ConfigurationManager();
    [CompilerGeneratedAttribute]
public void set_ConfigurationManager(BaseConfigurationManager value);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public string get_DebugId();
    [CompilerGeneratedAttribute]
public void set_DebugId(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTrailingSlashWhenValidatingAudience();
    [CompilerGeneratedAttribute]
public void set_IgnoreTrailingSlashWhenValidatingAudience(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTokenOnFailedValidation();
    [CompilerGeneratedAttribute]
public void set_IncludeTokenOnFailedValidation(bool value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyValidator get_IssuerSigningKeyValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyValidator(IssuerSigningKeyValidator value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyValidatorUsingConfiguration get_IssuerSigningKeyValidatorUsingConfiguration();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyValidatorUsingConfiguration(IssuerSigningKeyValidatorUsingConfiguration value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_InstancePropertyBag();
    [CompilerGeneratedAttribute]
public bool get_IsClone();
    [CompilerGeneratedAttribute]
protected void set_IsClone(bool value);
    [CompilerGeneratedAttribute]
public SecurityKey get_IssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyResolver get_IssuerSigningKeyResolver();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyResolver(IssuerSigningKeyResolver value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyResolverUsingConfiguration get_IssuerSigningKeyResolverUsingConfiguration();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyResolverUsingConfiguration(IssuerSigningKeyResolverUsingConfiguration value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_IssuerSigningKeys();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public IssuerValidator get_IssuerValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerValidator(IssuerValidator value);
    [CompilerGeneratedAttribute]
internal IssuerValidatorAsync get_IssuerValidatorAsync();
    [CompilerGeneratedAttribute]
internal void set_IssuerValidatorAsync(IssuerValidatorAsync value);
    [CompilerGeneratedAttribute]
public IssuerValidatorUsingConfiguration get_IssuerValidatorUsingConfiguration();
    [CompilerGeneratedAttribute]
public void set_IssuerValidatorUsingConfiguration(IssuerValidatorUsingConfiguration value);
    [CompilerGeneratedAttribute]
public TransformBeforeSignatureValidation get_TransformBeforeSignatureValidation();
    [CompilerGeneratedAttribute]
public void set_TransformBeforeSignatureValidation(TransformBeforeSignatureValidation value);
    [CompilerGeneratedAttribute]
public LifetimeValidator get_LifetimeValidator();
    [CompilerGeneratedAttribute]
public void set_LifetimeValidator(LifetimeValidator value);
    [CompilerGeneratedAttribute]
public bool get_LogTokenId();
    [CompilerGeneratedAttribute]
public void set_LogTokenId(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogValidationExceptions();
    [CompilerGeneratedAttribute]
public void set_LogValidationExceptions(bool value);
    public string get_NameClaimType();
    public void set_NameClaimType(string value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_NameClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_NameClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_PropertyBag();
    [CompilerGeneratedAttribute]
public void set_PropertyBag(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_RefreshBeforeValidation();
    [CompilerGeneratedAttribute]
public void set_RefreshBeforeValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireAudience();
    [CompilerGeneratedAttribute]
public void set_RequireAudience(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireExpirationTime();
    [CompilerGeneratedAttribute]
public void set_RequireExpirationTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireSignedTokens();
    [CompilerGeneratedAttribute]
public void set_RequireSignedTokens(bool value);
    public string get_RoleClaimType();
    public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_RoleClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_RoleClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public bool get_SaveSigninToken();
    [CompilerGeneratedAttribute]
public void set_SaveSigninToken(bool value);
    [CompilerGeneratedAttribute]
public SignatureValidator get_SignatureValidator();
    [CompilerGeneratedAttribute]
public void set_SignatureValidator(SignatureValidator value);
    [CompilerGeneratedAttribute]
public SignatureValidatorUsingConfiguration get_SignatureValidatorUsingConfiguration();
    [CompilerGeneratedAttribute]
public void set_SignatureValidatorUsingConfiguration(SignatureValidatorUsingConfiguration value);
    [CompilerGeneratedAttribute]
public SecurityKey get_TokenDecryptionKey();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public TokenDecryptionKeyResolver get_TokenDecryptionKeyResolver();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKeyResolver(TokenDecryptionKeyResolver value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_TokenDecryptionKeys();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKeys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public TokenReader get_TokenReader();
    [CompilerGeneratedAttribute]
public void set_TokenReader(TokenReader value);
    [CompilerGeneratedAttribute]
public ITokenReplayCache get_TokenReplayCache();
    [CompilerGeneratedAttribute]
public void set_TokenReplayCache(ITokenReplayCache value);
    [CompilerGeneratedAttribute]
public TokenReplayValidator get_TokenReplayValidator();
    [CompilerGeneratedAttribute]
public void set_TokenReplayValidator(TokenReplayValidator value);
    [CompilerGeneratedAttribute]
public bool get_TryAllIssuerSigningKeys();
    [CompilerGeneratedAttribute]
public void set_TryAllIssuerSigningKeys(bool value);
    [CompilerGeneratedAttribute]
public TypeValidator get_TypeValidator();
    [CompilerGeneratedAttribute]
public void set_TypeValidator(TypeValidator value);
    [CompilerGeneratedAttribute]
public bool get_ValidateActor();
    [CompilerGeneratedAttribute]
public void set_ValidateActor(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAudience();
    [CompilerGeneratedAttribute]
public void set_ValidateAudience(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuer(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateWithLKG();
    [CompilerGeneratedAttribute]
public void set_ValidateWithLKG(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuerSigningKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateLifetime();
    [CompilerGeneratedAttribute]
public void set_ValidateLifetime(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateSignatureLast();
    [CompilerGeneratedAttribute]
public void set_ValidateSignatureLast(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateTokenReplay();
    [CompilerGeneratedAttribute]
public void set_ValidateTokenReplay(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidAlgorithms();
    [CompilerGeneratedAttribute]
public void set_ValidAlgorithms(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ValidAudience();
    [CompilerGeneratedAttribute]
public void set_ValidAudience(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidAudiences();
    [CompilerGeneratedAttribute]
public void set_ValidAudiences(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ValidIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidIssuer(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidIssuers();
    [CompilerGeneratedAttribute]
public void set_ValidIssuers(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidTypes();
    [CompilerGeneratedAttribute]
public void set_ValidTypes(IEnumerable`1<string> value);
}
public class Microsoft.IdentityModel.Tokens.TokenValidationResult : object {
    private Lazy`1<IDictionary`2<string, object>> _claims;
    private ClaimsIdentity _claimsIdentity;
    private Exception _exception;
    private bool _hasIsValidOrExceptionBeenRead;
    private bool _isValid;
    private TokenValidationParameters _validationParameters;
    private TokenHandler _tokenHandler;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <PropertyBag>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityToken <SecurityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityToken <TokenOnFailedValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private CallContext <TokenContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    public IDictionary`2<string, object> Claims { get; }
    public ClaimsIdentity ClaimsIdentity { get; public set; }
    public Exception Exception { get; public set; }
    public string Issuer { get; public set; }
    public bool IsValid { get; public set; }
    public IDictionary`2<string, object> PropertyBag { get; }
    public SecurityToken SecurityToken { get; public set; }
    public SecurityToken TokenOnFailedValidation { get; internal set; }
    public CallContext TokenContext { get; public set; }
    public string TokenType { get; public set; }
    internal TokenValidationResult(SecurityToken securityToken, TokenHandler tokenHandler, TokenValidationParameters validationParameters, string issuer);
    public IDictionary`2<string, object> get_Claims();
    public ClaimsIdentity get_ClaimsIdentity();
    public void set_ClaimsIdentity(ClaimsIdentity value);
    private ClaimsIdentity CreateClaimsIdentity();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    private void Initialize();
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_PropertyBag();
    [CompilerGeneratedAttribute]
public SecurityToken get_SecurityToken();
    [CompilerGeneratedAttribute]
public void set_SecurityToken(SecurityToken value);
    [CompilerGeneratedAttribute]
public SecurityToken get_TokenOnFailedValidation();
    [CompilerGeneratedAttribute]
internal void set_TokenOnFailedValidation(SecurityToken value);
    [CompilerGeneratedAttribute]
public CallContext get_TokenContext();
    [CompilerGeneratedAttribute]
public void set_TokenContext(CallContext value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Initialize>b__18_0();
}
public class Microsoft.IdentityModel.Tokens.TransformBeforeSignatureValidation : MulticastDelegate {
    public TransformBeforeSignatureValidation(object object, IntPtr method);
    public virtual SecurityToken Invoke(SecurityToken token, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(SecurityToken token, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual SecurityToken EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.TypeValidator : MulticastDelegate {
    public TypeValidator(object object, IntPtr method);
    public virtual string Invoke(string type, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string type, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public static class Microsoft.IdentityModel.Tokens.UniqueId : object {
    private static int RandomSaltSize;
    private static string NcNamePrefix;
    private static string UuidUriPrefix;
    private static string reusableUuid;
    private static string optimizedNcNamePrefix;
    private static UniqueId();
    public static string CreateUniqueId();
    public static string CreateUniqueId(string prefix);
    public static string CreateRandomId();
    public static string CreateRandomId(string prefix);
    public static Uri CreateRandomUri();
    private static string GetNextId();
    private static string GetRandomUuid();
}
[ExtensionAttribute]
public static class Microsoft.IdentityModel.Tokens.Utility : object {
    public static string Empty;
    public static string Null;
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
    internal static string SerializeAsSingleCommaDelimitedString(IEnumerable`1<string> strings);
    public static bool IsHttps(string address);
    public static bool IsHttps(Uri uri);
    public static bool AreEqual(Byte[] a, Byte[] b);
    internal static bool AreEqual(Byte[] a, Byte[] b, int length);
    internal static Byte[] ConvertToBigEndian(long i);
    internal static Byte[] Xor(Byte[] a, Byte[] b, int offset, bool inPlace);
    internal static void Zero(Byte[] byteArray);
    internal static Byte[] GenerateSha256Hash(string input);
}
public enum Microsoft.IdentityModel.Tokens.ValidationFailure : Enum {
    public int value__;
    public static ValidationFailure None;
    public static ValidationFailure InvalidLifetime;
    public static ValidationFailure InvalidIssuer;
}
public static class Microsoft.IdentityModel.Tokens.Validators : object {
    public static void ValidateAlgorithm(string algorithm, SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    private static bool AudienceIsValid(IEnumerable`1<string> audiences, TokenValidationParameters validationParameters, IEnumerable`1<string> validationParametersAudiences);
    private static bool AudiencesMatch(TokenValidationParameters validationParameters, string tokenAudience, string validAudience);
    private static bool AudiencesMatchIgnoringTrailingSlash(string tokenAudience, string validAudience);
    public static string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    internal static string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Tokens.Validators/<ValidateIssuerAsync>d__7")]
internal static Task`1<string> ValidateIssuerAsync(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public static void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    internal static void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static void ValidateIssuerSigningKeyLifeTime(SecurityKey securityKey, TokenValidationParameters validationParameters);
    public static void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateTokenReplay(Nullable`1<DateTime> expirationTime, string securityToken, TokenValidationParameters validationParameters);
    public static void ValidateTokenReplay(string securityToken, Nullable`1<DateTime> expirationTime, TokenValidationParameters validationParameters);
    public static string ValidateTokenType(string type, SecurityToken securityToken, TokenValidationParameters validationParameters);
}
internal class Microsoft.IdentityModel.Tokens.VerifyDelegate : MulticastDelegate {
    public VerifyDelegate(object object, IntPtr method);
    public virtual bool Invoke(Byte[] bytes, Byte[] signature);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, Byte[] signature, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.IdentityModel.Tokens.VerifyDelegateWithLength : MulticastDelegate {
    public VerifyDelegateWithLength(object object, IntPtr method);
    public virtual bool Invoke(Byte[] bytes, int start, int length, Byte[] signature);
    public virtual IAsyncResult BeginInvoke(Byte[] bytes, int start, int length, Byte[] signature, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.X509EncryptingCredentials : EncryptingCredentials {
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public X509Certificate2 Certificate { get; private set; }
    public X509EncryptingCredentials(X509Certificate2 certificate);
    public X509EncryptingCredentials(X509Certificate2 certificate, string keyWrapAlgorithm, string dataEncryptionAlgorithm);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(X509Certificate2 value);
}
public class Microsoft.IdentityModel.Tokens.X509SecurityKey : AsymmetricSecurityKey {
    private AsymmetricAlgorithm _privateKey;
    private bool _privateKeyAvailabilityDetermined;
    private AsymmetricAlgorithm _publicKey;
    private object _thisLock;
    [CompilerGeneratedAttribute]
private string <X5t>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public int KeySize { get; }
    public string X5t { get; }
    public AsymmetricAlgorithm PrivateKey { get; }
    public AsymmetricAlgorithm PublicKey { get; }
    private object ThisLock { get; }
    [ObsoleteAttribute("HasPrivateKey method is deprecated, please use PrivateKeyStatus.")]
public bool HasPrivateKey { get; }
    public PrivateKeyStatus PrivateKeyStatus { get; }
    public X509Certificate2 Certificate { get; private set; }
    internal string InternalId { get; }
    internal X509SecurityKey(JsonWebKey webKey);
    public X509SecurityKey(X509Certificate2 certificate);
    public X509SecurityKey(X509Certificate2 certificate, string keyId);
    public virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public string get_X5t();
    public AsymmetricAlgorithm get_PrivateKey();
    public AsymmetricAlgorithm get_PublicKey();
    private object get_ThisLock();
    public virtual bool get_HasPrivateKey();
    public virtual PrivateKeyStatus get_PrivateKeyStatus();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(X509Certificate2 value);
    internal virtual string get_InternalId();
    public virtual bool CanComputeJwkThumbprint();
    public virtual Byte[] ComputeJwkThumbprint();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.IdentityModel.Tokens.X509SigningCredentials : SigningCredentials {
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public X509Certificate2 Certificate { get; private set; }
    public X509SigningCredentials(X509Certificate2 certificate);
    public X509SigningCredentials(X509Certificate2 certificate, string algorithm);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(X509Certificate2 value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
