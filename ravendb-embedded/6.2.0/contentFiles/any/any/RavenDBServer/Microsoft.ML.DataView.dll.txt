[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.ML.AnnotationsDebuggerProxy : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KeyValuePair`2<string, object>> <Values>k__BackingField;
    [DebuggerBrowsableAttribute("3")]
public IReadOnlyList`1<KeyValuePair`2<string, object>> Values { get; }
    public AnnotationsDebuggerProxy(Annotations annotations);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KeyValuePair`2<string, object>> get_Values();
    private static List`1<KeyValuePair`2<string, object>> BuildValues(Annotations annotations);
    private static object GetValue(Annotations annotations, Column column);
}
public class Microsoft.ML.Data.BooleanDataViewType : PrimitiveDataViewType {
    private static BooleanDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static BooleanDataViewType Instance { get; }
    public static BooleanDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Microsoft.ML.Data.DataViewRowId : ValueType {
    public ulong Low;
    public ulong High;
    private static ulong _c1;
    private static ulong _c2;
    public DataViewRowId(ulong low, ulong high);
    public virtual string ToString();
    public sealed virtual int CompareTo(DataViewRowId other);
    public sealed virtual bool Equals(DataViewRowId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static void RotL(UInt64& x, int r);
    private static ulong RotL(ulong x, int r);
    private static void FMix(UInt64& k);
    private static void FinalMix(UInt64& h1, UInt64& h2, int len);
    public DataViewRowId Fork();
    public DataViewRowId Next();
    public DataViewRowId Combine(DataViewRowId other);
}
public abstract class Microsoft.ML.Data.DataViewType : object {
    [CompilerGeneratedAttribute]
private Type <RawType>k__BackingField;
    public Type RawType { get; }
    private protected DataViewType(Type rawType);
    [CompilerGeneratedAttribute]
public Type get_RawType();
    public abstract virtual bool Equals(DataViewType other);
}
[AttributeUsageAttribute("384")]
public abstract class Microsoft.ML.Data.DataViewTypeAttribute : Attribute {
    public abstract virtual void Register();
    public abstract virtual bool Equals(DataViewTypeAttribute other);
}
public class Microsoft.ML.Data.DateTimeDataViewType : PrimitiveDataViewType {
    private static DateTimeDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static DateTimeDataViewType Instance { get; }
    public static DateTimeDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
public class Microsoft.ML.Data.DateTimeOffsetDataViewType : PrimitiveDataViewType {
    private static DateTimeOffsetDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static DateTimeOffsetDataViewType Instance { get; }
    public static DateTimeOffsetDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
internal static class Microsoft.ML.Data.Hashing : object {
    public static UInt32 CombineHash(UInt32 u1, UInt32 u2);
    public static int CombineHash(int n1, int n2);
}
public class Microsoft.ML.Data.KeyDataViewType : PrimitiveDataViewType {
    [CompilerGeneratedAttribute]
private ulong <Count>k__BackingField;
    public ulong Count { get; }
    public KeyDataViewType(Type type, ulong count);
    public KeyDataViewType(Type type, int count);
    public static bool IsValidDataType(Type type);
    private static ulong GetMaxInt(Type type);
    private string GetRawTypeName();
    [CompilerGeneratedAttribute]
public ulong get_Count();
    public virtual bool Equals(DataViewType other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.ML.Data.NumberDataViewType : PrimitiveDataViewType {
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instSByte;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instByte;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instInt16;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instUInt16;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instInt32;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instUInt32;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instInt64;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instUInt64;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instSingle;
    private static NumberDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instDouble;
    public static NumberDataViewType SByte { get; }
    public static NumberDataViewType Byte { get; }
    public static NumberDataViewType Int16 { get; }
    public static NumberDataViewType UInt16 { get; }
    public static NumberDataViewType Int32 { get; }
    public static NumberDataViewType UInt32 { get; }
    public static NumberDataViewType Int64 { get; }
    public static NumberDataViewType UInt64 { get; }
    public static NumberDataViewType Single { get; }
    public static NumberDataViewType Double { get; }
    private NumberDataViewType(Type rawType);
    public static NumberDataViewType get_SByte();
    public static NumberDataViewType get_Byte();
    public static NumberDataViewType get_Int16();
    public static NumberDataViewType get_UInt16();
    public static NumberDataViewType get_Int32();
    public static NumberDataViewType get_UInt32();
    public static NumberDataViewType get_Int64();
    public static NumberDataViewType get_UInt64();
    public static NumberDataViewType get_Single();
    public static NumberDataViewType get_Double();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
public abstract class Microsoft.ML.Data.PrimitiveDataViewType : DataViewType {
    protected PrimitiveDataViewType(Type rawType);
}
public class Microsoft.ML.Data.RowIdDataViewType : PrimitiveDataViewType {
    private static RowIdDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static RowIdDataViewType Instance { get; }
    public static RowIdDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
public abstract class Microsoft.ML.Data.StructuredDataViewType : DataViewType {
    protected StructuredDataViewType(Type rawType);
}
public class Microsoft.ML.Data.TextDataViewType : PrimitiveDataViewType {
    private static TextDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static TextDataViewType Instance { get; }
    public static TextDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
public class Microsoft.ML.Data.TimeSpanDataViewType : PrimitiveDataViewType {
    private static TimeSpanDataViewType modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    public static TimeSpanDataViewType Instance { get; }
    public static TimeSpanDataViewType get_Instance();
    public virtual bool Equals(DataViewType other);
    public virtual string ToString();
}
internal static class Microsoft.ML.Data.Utils : object {
    public static void MarshalActionInvoke(Action`1<TArg1> act, Type genArg, TArg1 arg1);
    public static void MarshalActionInvoke(Action`4<TArg1, TArg2, TArg3, TArg4> act, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);
    public static TRet MarshalInvoke(Func`3<TArg1, TArg2, TRet> func, Type genArg, TArg1 arg1, TArg2 arg2);
    private static MethodInfo MarshalInvokeCheckAndCreate(Type genArg, Delegate func);
    private static MethodInfo MarshalActionInvokeCheckAndCreate(Type genArg, Delegate func);
}
[IsReadOnlyAttribute]
public class Microsoft.ML.Data.VBuffer`1 : ValueType {
    private T[] _values;
    private Int32[] _indices;
    private int _count;
    public int Length;
    public bool IsDense { get; }
    public VBuffer`1(int length, T[] values, Int32[] indices);
    public VBuffer`1(int length, int count, T[] values, Int32[] indices);
    public ReadOnlySpan`1<T> GetValues();
    public ReadOnlySpan`1<int> GetIndices();
    public bool get_IsDense();
    public void CopyToDense(VBuffer`1& destination);
    public void CopyTo(VBuffer`1& destination);
    public void CopyTo(VBuffer`1& destination, int sourceIndex, int length);
    public void CopyTo(Span`1<T> destination);
    public void CopyTo(Span`1<T> destination, int destinationIndex, T defaultValue);
    public static void Copy(T[] source, int sourceIndex, VBuffer`1& destination, int length);
    public IEnumerable`1<KeyValuePair`2<int, T>> Items(bool all);
    public IEnumerable`1<T> DenseValues();
    public void GetItemOrDefault(int index, T& destination);
    public T GetItemOrDefault(int index);
    public virtual string ToString();
    public sealed virtual IEnumerator GetEnumerator();
    internal VBufferEditor`1<T> GetEditor();
    internal VBufferEditor`1<T> GetEditor(int newLogicalLength, Nullable`1<int> valuesCount, Nullable`1<int> maxValuesCapacity, bool keepOldOnResize, bool requireIndicesOnDense);
    [IteratorStateMachineAttribute("Microsoft.ML.Data.VBuffer`1/<Items>d__24")]
private static IEnumerable`1<KeyValuePair`2<int, T>> Items(T[] values, Int32[] indices, int length, int count, bool all);
    [IteratorStateMachineAttribute("Microsoft.ML.Data.VBuffer`1/<DenseValues>d__25")]
private static IEnumerable`1<T> DenseValues(T[] values, Int32[] indices, int length, int count);
}
public static class Microsoft.ML.Data.VBufferEditor : object {
    public static VBufferEditor`1<T> CreateFromBuffer(VBuffer`1& destination);
    public static VBufferEditor`1<T> Create(VBuffer`1& destination, int newLogicalLength, Nullable`1<int> valuesCount, Nullable`1<int> maxValuesCapacity, bool keepOldOnResize, bool requireIndicesOnDense);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
public class Microsoft.ML.Data.VBufferEditor`1 : ValueType {
    private int _logicalLength;
    private T[] _values;
    private Int32[] _indices;
    public Span`1<T> Values;
    public Span`1<int> Indices;
    [CompilerGeneratedAttribute]
private bool <CreatedNewValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatedNewIndices>k__BackingField;
    public bool CreatedNewValues { get; }
    public bool CreatedNewIndices { get; }
    internal VBufferEditor`1(int logicalLength, int physicalValuesCount, T[] values, Int32[] indices, bool requireIndicesOnDense, bool createdNewValues, bool createdNewIndices);
    [CompilerGeneratedAttribute]
public bool get_CreatedNewValues();
    [CompilerGeneratedAttribute]
public bool get_CreatedNewIndices();
    public VBuffer`1<T> Commit();
    public VBuffer`1<T> CommitTruncated(int physicalValuesCount);
}
public class Microsoft.ML.Data.VectorDataViewType : StructuredDataViewType {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <Dimensions>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveDataViewType <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public ImmutableArray`1<int> Dimensions { get; }
    public bool IsKnownSize { get; }
    public PrimitiveDataViewType ItemType { get; }
    public int Size { get; }
    public VectorDataViewType(PrimitiveDataViewType itemType, int size);
    public VectorDataViewType(PrimitiveDataViewType itemType, Int32[] dimensions);
    public VectorDataViewType(PrimitiveDataViewType itemType, ImmutableArray`1<int> dimensions);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_Dimensions();
    private static Type GetRawType(PrimitiveDataViewType itemType);
    private static int ComputeSize(ImmutableArray`1<int> dims);
    public bool get_IsKnownSize();
    [CompilerGeneratedAttribute]
public PrimitiveDataViewType get_ItemType();
    [CompilerGeneratedAttribute]
public int get_Size();
    public virtual bool Equals(DataViewType other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class Microsoft.ML.DataViewRow : object {
    public long Position { get; }
    public long Batch { get; }
    public DataViewSchema Schema { get; }
    public abstract virtual long get_Position();
    public abstract virtual long get_Batch();
    public abstract virtual ValueGetter`1<DataViewRowId> GetIdGetter();
    public abstract virtual bool IsColumnActive(Column column);
    public abstract virtual ValueGetter`1<TValue> GetGetter(Column column);
    public abstract virtual DataViewSchema get_Schema();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Microsoft.ML.DataViewRowCursor : DataViewRow {
    public abstract virtual bool MoveNext();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.ML.SchemaDebuggerProxy")]
public class Microsoft.ML.DataViewSchema : object {
    private Column[] _columns;
    private Dictionary`2<string, int> _nameMap;
    public int Count { get; }
    public Column Item { get; }
    public Column Item { get; }
    private DataViewSchema(Column[] columns);
    public sealed virtual int get_Count();
    public Column get_Item(string name);
    public sealed virtual Column get_Item(int columnIndex);
    public Nullable`1<Column> GetColumnOrNull(string name);
    public sealed virtual IEnumerator`1<Column> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public interface Microsoft.ML.IDataView {
    public bool CanShuffle { get; }
    public DataViewSchema Schema { get; }
    public abstract virtual bool get_CanShuffle();
    public abstract virtual Nullable`1<long> GetRowCount();
    public abstract virtual DataViewRowCursor GetRowCursor(IEnumerable`1<Column> columnsNeeded, Random rand);
    public abstract virtual DataViewRowCursor[] GetRowCursorSet(IEnumerable`1<Column> columnsNeeded, int n, Random rand);
    public abstract virtual DataViewSchema get_Schema();
}
internal static class Microsoft.ML.Internal.DataView.Contracts : object {
    private static string GetMsg(string msg, Object[] args);
    public static Exception Except(string msg);
    public static Exception ExceptParam(string paramName);
    public static Exception ExceptParam(string paramName, string msg);
    public static Exception ExceptParam(string paramName, string msg, Object[] args);
    public static Exception ExceptValue(string paramName);
    public static void Check(bool f, string msg);
    public static void CheckParam(bool f, string paramName);
    public static void CheckParam(bool f, string paramName, string msg);
    public static void CheckParam(bool f, string paramName, string msg, Object[] args);
    public static void CheckValue(T val, string paramName);
}
internal static class Microsoft.ML.Internal.Utilities.ArrayUtils : object {
    public static int ArrayMaxSize;
    public static int Size(T[] x);
    public static bool TryFindIndexSorted(Int32[] input, int min, int lim, int value, Int32& index);
    public static int FindIndexSorted(Int32[] input, int min, int lim, int value);
    public static int FindIndexSorted(ReadOnlySpan`1<int> input, int min, int lim, int value);
    public static int EnsureSize(T[]& array, int min, int max, bool keepOld, Boolean& resized);
}
internal class Microsoft.ML.SchemaDebuggerProxy : object {
    [CompilerGeneratedAttribute]
private Column[] <Columns>k__BackingField;
    [DebuggerBrowsableAttribute("3")]
public Column[] Columns { get; }
    public SchemaDebuggerProxy(DataViewSchema schema);
    [CompilerGeneratedAttribute]
public Column[] get_Columns();
}
public class Microsoft.ML.ValueGetter`1 : MulticastDelegate {
    public ValueGetter`1(object object, IntPtr method);
    public virtual void Invoke(TValue& value);
    public virtual IAsyncResult BeginInvoke(TValue& value, AsyncCallback callback, object object);
    public virtual void EndInvoke(TValue& value, IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.ScopedRefAttribute : Attribute {
}
