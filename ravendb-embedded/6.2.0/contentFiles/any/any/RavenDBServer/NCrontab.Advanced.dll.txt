public static class NCrontab.Advanced.Constants : object {
    public static Dictionary`2<CrontabFieldKind, int> MaximumDateTimeValues;
    public static Dictionary`2<CrontabFieldKind, int> MinimumDateTimeValues;
    public static Dictionary`2<CronStringFormat, int> ExpectedFieldCounts;
    public static Dictionary`2<DayOfWeek, int> CronDays;
    public static Dictionary`2<string, int> Days;
    public static Dictionary`2<string, int> Months;
    private static Constants();
}
public class NCrontab.Advanced.CrontabSchedule : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CronStringFormat <Format>k__BackingField;
    public Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> Filters { get; public set; }
    public CronStringFormat Format { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> value);
    [CompilerGeneratedAttribute]
public CronStringFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(CronStringFormat value);
    public virtual string ToString();
    public DateTime GetNextOccurrence(DateTime baseValue);
    public DateTime GetNextOccurrence(DateTime baseValue, DateTime endValue);
    [IteratorStateMachineAttribute("NCrontab.Advanced.CrontabSchedule/<GetNextOccurrences>d__12")]
public IEnumerable`1<DateTime> GetNextOccurrences(DateTime baseTime, DateTime endTime);
    private int Increment(IEnumerable`1<ITimeFilter> filters, int value, int defaultValue, Boolean& overflow);
    private DateTime MinDate(DateTime newValue, DateTime endValue);
    private DateTime InternalGetNextOccurence(DateTime baseValue, DateTime endValue);
    public bool IsMatch(DateTime value);
    public bool IsMatch(DateTime value, CrontabFieldKind kind);
    private void JoinFilters(List`1<string> paramList, CrontabFieldKind kind);
    public static CrontabSchedule Parse(string expression, CronStringFormat format);
    public static CrontabSchedule TryParse(string expression, CronStringFormat format);
    public static void CheckForIllegalFilters(Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> filters);
    private static List`1<SpecificFilter> GetSpecificFilters(Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> filters, CrontabFieldKind kind);
    private static Dictionary`2<CrontabFieldKind, List`1<ICronFilter>> ParseToDictionary(string cron, CronStringFormat format);
    private static List`1<ICronFilter> ParseField(string field, CrontabFieldKind kind);
    private static ICronFilter ParseFilter(string filter, CrontabFieldKind kind);
    private static int GetValue(String& filter, CrontabFieldKind kind);
}
public enum NCrontab.Advanced.Enumerations.CronStringFormat : Enum {
    public int value__;
    public static CronStringFormat Default;
    public static CronStringFormat WithYears;
    public static CronStringFormat WithSeconds;
    public static CronStringFormat WithSecondsAndYears;
}
public enum NCrontab.Advanced.Enumerations.CrontabFieldKind : Enum {
    public int value__;
    public static CrontabFieldKind Second;
    public static CrontabFieldKind Minute;
    public static CrontabFieldKind Hour;
    public static CrontabFieldKind Day;
    public static CrontabFieldKind Month;
    public static CrontabFieldKind DayOfWeek;
    public static CrontabFieldKind Year;
}
public class NCrontab.Advanced.Exceptions.CrontabException : Exception {
    public CrontabException(string message);
    public CrontabException(string message, Exception innerException);
}
[ExtensionAttribute]
internal static class NCrontab.Advanced.Extensions.DayOfWeekExtensions : object {
    [ExtensionAttribute]
internal static int ToCronDayOfWeek(DayOfWeek value);
    [ExtensionAttribute]
internal static DayOfWeek ToDayOfWeek(int value);
    [ExtensionAttribute]
internal static int LastDayOfMonth(DayOfWeek dayOfWeek, int year, int month);
}
[ExtensionAttribute]
public static class NCrontab.Advanced.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
public class NCrontab.Advanced.Filters.AnyFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public AnyFilter(CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    public sealed virtual bool IsMatch(DateTime value);
    public sealed virtual Nullable`1<int> Next(int value);
    public sealed virtual int First();
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.BlankDayOfMonthOrWeekFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public BlankDayOfMonthOrWeekFilter(CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    public sealed virtual bool IsMatch(DateTime value);
    public Nullable`1<int> Next(int value);
    public int First();
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.LastDayOfMonthFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public LastDayOfMonthFilter(CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    public sealed virtual bool IsMatch(DateTime value);
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.LastDayOfWeekInMonthFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DayOfWeek <DateTimeDayOfWeek>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int DayOfWeek { get; }
    private DayOfWeek DateTimeDayOfWeek { get; }
    public LastDayOfWeekInMonthFilter(int dayOfWeek, CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_DayOfWeek();
    [CompilerGeneratedAttribute]
private DayOfWeek get_DateTimeDayOfWeek();
    public sealed virtual bool IsMatch(DateTime value);
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.LastWeekdayOfMonthFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public LastWeekdayOfMonthFilter(CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    public sealed virtual bool IsMatch(DateTime value);
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.NearestWeekdayFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SpecificValue>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int SpecificValue { get; }
    public NearestWeekdayFilter(int specificValue, CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_SpecificValue();
    public sealed virtual bool IsMatch(DateTime value);
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.RangeFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FirstCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SpecificFilter> <SpecificFilters>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int Start { get; }
    public int End { get; }
    public Nullable`1<int> Steps { get; }
    private Nullable`1<int> FirstCache { get; private set; }
    public IEnumerable`1<SpecificFilter> SpecificFilters { get; }
    public RangeFilter(int start, int end, Nullable`1<int> steps, CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Steps();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_FirstCache();
    [CompilerGeneratedAttribute]
private void set_FirstCache(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SpecificFilter> get_SpecificFilters();
    public sealed virtual bool IsMatch(DateTime value);
    private bool IsMatch(int evalValue);
    public sealed virtual Nullable`1<int> Next(int value);
    public sealed virtual int First();
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.SpecificDayOfWeekInMonthFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <WeekNumber>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DayOfWeek <DateTimeDayOfWeek>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int DayOfWeek { get; }
    public int WeekNumber { get; }
    private DayOfWeek DateTimeDayOfWeek { get; }
    public SpecificDayOfWeekInMonthFilter(int dayOfWeek, int weekNumber, CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_DayOfWeek();
    [CompilerGeneratedAttribute]
public int get_WeekNumber();
    [CompilerGeneratedAttribute]
private DayOfWeek get_DateTimeDayOfWeek();
    public sealed virtual bool IsMatch(DateTime value);
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.SpecificFilter : object {
    private static int MinYear;
    private static int MaxYear;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SpecificValue>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int SpecificValue { get; private set; }
    public SpecificFilter(int specificValue, CrontabFieldKind kind);
    private static SpecificFilter();
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_SpecificValue();
    [CompilerGeneratedAttribute]
private void set_SpecificValue(int value);
    private void ValidateBounds(int specificValue);
    public sealed virtual bool IsMatch(DateTime value);
    public virtual Nullable`1<int> Next(int value);
    public sealed virtual int First();
    public virtual string ToString();
}
public class NCrontab.Advanced.Filters.SpecificYearFilter : SpecificFilter {
    public SpecificYearFilter(int specificValue, CrontabFieldKind kind);
    public virtual Nullable`1<int> Next(int value);
}
public class NCrontab.Advanced.Filters.StepFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Step>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FirstCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SpecificFilter> <SpecificFilters>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int Start { get; }
    public int Step { get; }
    private Nullable`1<int> FirstCache { get; private set; }
    public IEnumerable`1<SpecificFilter> SpecificFilters { get; }
    public StepFilter(int start, int step, CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_Step();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_FirstCache();
    [CompilerGeneratedAttribute]
private void set_FirstCache(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SpecificFilter> get_SpecificFilters();
    public sealed virtual bool IsMatch(DateTime value);
    private bool IsMatch(int evalValue);
    public sealed virtual Nullable`1<int> Next(int value);
    public sealed virtual int First();
    public virtual string ToString();
}
public interface NCrontab.Advanced.Interfaces.ICronFilter {
    public CrontabFieldKind Kind { get; }
    public abstract virtual CrontabFieldKind get_Kind();
    public abstract virtual bool IsMatch(DateTime value);
}
internal interface NCrontab.Advanced.Interfaces.ITimeFilter {
    public abstract virtual Nullable`1<int> Next(int value);
    public abstract virtual int First();
}
