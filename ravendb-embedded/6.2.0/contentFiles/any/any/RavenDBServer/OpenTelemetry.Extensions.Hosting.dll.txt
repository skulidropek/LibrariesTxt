[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static OpenTelemetryBuilder AddOpenTelemetry(IServiceCollection services);
}
[EventSourceAttribute]
internal class OpenTelemetry.Extensions.Hosting.Implementation.HostingExtensionsEventSource : EventSource {
    [NullableAttribute("1")]
public static HostingExtensionsEventSource Log;
    private static HostingExtensionsEventSource();
    [EventAttribute("1")]
public void TracerProviderNotRegistered();
    [EventAttribute("2")]
public void MeterProviderNotRegistered();
    [EventAttribute("3")]
public void LoggerProviderNotRegistered();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class OpenTelemetry.Extensions.Hosting.Implementation.TelemetryHostedService : object {
    private IServiceProvider serviceProvider;
    public TelemetryHostedService(IServiceProvider serviceProvider);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    internal static void Initialize(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.OpenTelemetryBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    internal OpenTelemetryBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    public OpenTelemetryBuilder ConfigureResource(Action`1<ResourceBuilder> configure);
    public OpenTelemetryBuilder WithMetrics();
    public OpenTelemetryBuilder WithMetrics(Action`1<MeterProviderBuilder> configure);
    public OpenTelemetryBuilder WithTracing();
    public OpenTelemetryBuilder WithTracing(Action`1<TracerProviderBuilder> configure);
    public OpenTelemetryBuilder WithLogging();
    public OpenTelemetryBuilder WithLogging(Action`1<LoggerProviderBuilder> configure);
    public OpenTelemetryBuilder WithLogging(Action`1<LoggerProviderBuilder> configureBuilder, Action`1<OpenTelemetryLoggerOptions> configureOptions);
}
