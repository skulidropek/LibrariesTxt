internal class Lextm.SharpSnmpLib.Objects.IfAdminStatus : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfAdminStatus(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfDescr : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfDescr(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfIndex : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfIndex(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInDiscards : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInDiscards(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInErrors : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInErrors(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInNUcastPkts : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInNUcastPkts(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInOctets : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInOctets(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInUcastPkts : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInUcastPkts(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfInUnknownProtos : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfInUnknownProtos(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfLastChange : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfLastChange(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfMtu : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfMtu(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.IfNumber : ScalarObject {
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOperStatus : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOperStatus(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutDiscards : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutDiscards(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutErrors : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutErrors(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutNUcastPkts : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutNUcastPkts(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutOctets : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutOctets(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutQLen : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutQLen(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfOutUcastPkts : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfOutUcastPkts(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfPhysAddress : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfPhysAddress(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfSpecific : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfSpecific(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.IfSpeed : ScalarObject {
    private NetworkInterface _networkInterface;
    public ISnmpData Data { get; public set; }
    public IfSpeed(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.IfTable : TableObject {
    private IList`1<ScalarObject> _elements;
    protected IEnumerable`1<ScalarObject> Objects { get; }
    private void LoadElements();
    protected virtual IEnumerable`1<ScalarObject> get_Objects();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, EventArgs args);
}
internal class Lextm.SharpSnmpLib.Objects.IfType : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public IfType(int index, NetworkInterface networkInterface);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysContact : ScalarObject {
    private OctetString _contact;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysDescr : ScalarObject {
    private OctetString _description;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysLocation : ScalarObject {
    private OctetString _location;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysName : ScalarObject {
    private OctetString _name;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysObjectId : ScalarObject {
    private ObjectIdentifier _objectId;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.SysORDescr : ScalarObject {
    private OctetString _data;
    public ISnmpData Data { get; public set; }
    public SysORDescr(int index, OctetString description);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.SysORID : ScalarObject {
    private ObjectIdentifier _data;
    public ISnmpData Data { get; public set; }
    public SysORID(int index, ObjectIdentifier dots);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
internal class Lextm.SharpSnmpLib.Objects.SysORIndex : ScalarObject {
    private ISnmpData _data;
    public ISnmpData Data { get; public set; }
    public SysORIndex(int index);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysORLastChange : ScalarObject {
    private ISnmpData _value;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysORTable : TableObject {
    private IList`1<ScalarObject> _elements;
    protected IEnumerable`1<ScalarObject> Objects { get; }
    protected virtual IEnumerable`1<ScalarObject> get_Objects();
}
internal class Lextm.SharpSnmpLib.Objects.SysORUpTime : ScalarObject {
    private TimeTicks _data;
    public ISnmpData Data { get; public set; }
    public SysORUpTime(int index, TimeTicks time);
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysServices : ScalarObject {
    private Integer32 _value;
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
public class Lextm.SharpSnmpLib.Objects.SysUpTime : ScalarObject {
    public ISnmpData Data { get; public set; }
    public virtual ISnmpData get_Data();
    public virtual void set_Data(ISnmpData value);
}
[DataContractAttribute]
public class Lextm.SharpSnmpLib.Pipeline.AccessFailureException : Exception {
    public AccessFailureException(string message);
    public AccessFailureException(string message, Exception inner);
    public virtual string ToString();
}
public class Lextm.SharpSnmpLib.Pipeline.ComposedMembershipProvider : object {
    private IMembershipProvider[] _providers;
    public ComposedMembershipProvider(IMembershipProvider[] providers);
    public sealed virtual bool AuthenticateRequest(ISnmpContext context);
}
public class Lextm.SharpSnmpLib.Pipeline.DefaultTypeResolver : object {
    public sealed virtual Type Load(string assembly, string name);
    public sealed virtual Assembly[] GetAssemblies();
}
public class Lextm.SharpSnmpLib.Pipeline.EngineGroup : object {
    private OctetString _engineId;
    private DateTime _start;
    private UInt32 _counterNotInTimeWindow;
    private UInt32 _counterUnknownEngineId;
    private UInt32 _counterUnknownUserName;
    private UInt32 _counterDecryptionError;
    private UInt32 _counterUnknownSecurityLevel;
    private UInt32 _counterAuthenticationFailure;
    private Nullable`1<int> _engineBoots;
    private Func`4<Int32[], int, int, bool> _isInTime;
    [CompilerGeneratedAttribute]
private int <EngineBoots>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EngineTime>k__BackingField;
    public OctetString EngineId { get; public set; }
    [ObsoleteAttribute("Please use EngineTimeData")]
internal int EngineBoots { get; internal set; }
    [ObsoleteAttribute("Please use EngineTimeData")]
public int EngineTime { get; public set; }
    public Int32[] EngineTimeData { get; }
    public Variable NotInTimeWindow { get; }
    public Variable UnknownEngineId { get; }
    public Variable UnknownSecurityName { get; }
    public Variable DecryptionError { get; }
    public Variable UnsupportedSecurityLevel { get; }
    public Variable AuthenticationFailure { get; }
    public EngineGroup(int engineBoots, Func`4<Int32[], int, int, bool> isInTime);
    public OctetString get_EngineId();
    public void set_EngineId(OctetString value);
    [CompilerGeneratedAttribute]
internal int get_EngineBoots();
    [CompilerGeneratedAttribute]
internal void set_EngineBoots(int value);
    [CompilerGeneratedAttribute]
public int get_EngineTime();
    [CompilerGeneratedAttribute]
public void set_EngineTime(int value);
    public Int32[] get_EngineTimeData();
    public bool IsInTime(Int32[] currentTimeData, int pastReboots, int pastTime);
    public static bool IsInTimeDefault(Int32[] currentTimeData, int pastReboots, int pastTime);
    public Variable get_NotInTimeWindow();
    public Variable get_UnknownEngineId();
    public Variable get_UnknownSecurityName();
    public Variable get_DecryptionError();
    public Variable get_UnsupportedSecurityLevel();
    public Variable get_AuthenticationFailure();
}
public class Lextm.SharpSnmpLib.Pipeline.GetBulkMessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.GetMessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.GetNextMessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.GetNextV1MessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.GetV1MessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.HandlerMapping : object {
    [CompilerGeneratedAttribute]
private static ITypeResolver <TypeResolver>k__BackingField;
    private String[] _version;
    private bool _catchAll;
    private string _command;
    private IMessageHandler _handler;
    public static ITypeResolver TypeResolver { get; public set; }
    public IMessageHandler Handler { get; }
    public HandlerMapping(string version, string command, IMessageHandler handler);
    public HandlerMapping(string version, string command, string type, string assembly);
    private static HandlerMapping();
    [CompilerGeneratedAttribute]
public static ITypeResolver get_TypeResolver();
    [CompilerGeneratedAttribute]
public static void set_TypeResolver(ITypeResolver value);
    private static IMessageHandler CreateMessageHandler(string assemblyName, string type);
    public IMessageHandler get_Handler();
    public bool CanHandle(ISnmpMessage message);
    private bool CommandMatched(ISnmpMessage message);
    private bool VersionMatched(ISnmpMessage message);
    private static bool StringEquals(string left, string right);
}
public interface Lextm.SharpSnmpLib.Pipeline.IListenerBinding {
    public IPEndPoint Endpoint { get; }
    public abstract virtual void SendResponse(ISnmpMessage response, EndPoint receiver);
    public abstract virtual Task SendResponseAsync(ISnmpMessage response, EndPoint receiver);
    public abstract virtual IPEndPoint get_Endpoint();
}
public interface Lextm.SharpSnmpLib.Pipeline.ILogger {
    public abstract virtual void Log(ISnmpContext context);
}
public interface Lextm.SharpSnmpLib.Pipeline.IMembershipProvider {
    public abstract virtual bool AuthenticateRequest(ISnmpContext context);
}
public interface Lextm.SharpSnmpLib.Pipeline.IMessageHandler {
    public abstract virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.InformRequestMessageHandler : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<InformRequestMessageReceivedEventArgs> MessageReceived;
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<InformRequestMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<InformRequestMessageReceivedEventArgs> value);
    private void InvokeMessageReceived(InformRequestMessageReceivedEventArgs e);
}
public class Lextm.SharpSnmpLib.Pipeline.InformRequestMessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IPEndPoint <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private InformRequestMessage <InformRequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IListenerBinding <Binding>k__BackingField;
    public IPEndPoint Sender { get; private set; }
    public InformRequestMessage InformRequestMessage { get; private set; }
    public IListenerBinding Binding { get; private set; }
    public InformRequestMessageReceivedEventArgs(IPEndPoint sender, InformRequestMessage request, IListenerBinding binding);
    [CompilerGeneratedAttribute]
public IPEndPoint get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(IPEndPoint value);
    [CompilerGeneratedAttribute]
public InformRequestMessage get_InformRequestMessage();
    [CompilerGeneratedAttribute]
private void set_InformRequestMessage(InformRequestMessage value);
    [CompilerGeneratedAttribute]
public IListenerBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(IListenerBinding value);
}
public interface Lextm.SharpSnmpLib.Pipeline.ISnmpContext {
    public IListenerBinding Binding { get; }
    public DateTime CreatedTime { get; }
    public ISnmpMessage Request { get; }
    public ISnmpMessage Response { get; }
    public IPEndPoint Sender { get; }
    public bool TooBig { get; }
    public abstract virtual void GenerateResponse(List`1<Variable> variables);
    public abstract virtual void CopyRequest(ErrorCode status, int index);
    public abstract virtual IListenerBinding get_Binding();
    public abstract virtual DateTime get_CreatedTime();
    public abstract virtual ISnmpMessage get_Request();
    public abstract virtual ISnmpMessage get_Response();
    public abstract virtual IPEndPoint get_Sender();
    public abstract virtual bool get_TooBig();
    public abstract virtual void SendResponse();
    public abstract virtual bool HandleMembership();
    public abstract virtual void GenerateTooBig();
}
public interface Lextm.SharpSnmpLib.Pipeline.ISnmpObject {
    public abstract virtual ScalarObject MatchGetNext(ObjectIdentifier id);
    public abstract virtual ScalarObject MatchGet(ObjectIdentifier id);
}
public interface Lextm.SharpSnmpLib.Pipeline.ITypeResolver {
    public abstract virtual Type Load(string assembly, string name);
    public abstract virtual Assembly[] GetAssemblies();
}
public class Lextm.SharpSnmpLib.Pipeline.Listener : object {
    private UserRegistry _users;
    private bool _disposed;
    public static string ErrorIPv4NotSupported;
    public static string ErrorIPv6NotSupported;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ListenerBinding> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionRaisedEventArgs> ExceptionRaised;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEventArgs> MessageReceived;
    public UserRegistry Users { get; public set; }
    public bool Active { get; private set; }
    internal IList`1<ListenerBinding> Bindings { get; internal set; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public UserRegistry get_Users();
    public void set_Users(UserRegistry value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    public void Stop();
    public void Start();
    [AsyncStateMachineAttribute("Lextm.SharpSnmpLib.Pipeline.Listener/<StartAsync>d__17")]
public Task StartAsync();
    [CompilerGeneratedAttribute]
internal IList`1<ListenerBinding> get_Bindings();
    [CompilerGeneratedAttribute]
internal void set_Bindings(IList`1<ListenerBinding> value);
    [CompilerGeneratedAttribute]
public void add_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public void AddBinding(IPEndPoint endpoint);
    public void RemoveBinding(IPEndPoint endpoint);
    public void ClearBindings();
    [CompilerGeneratedAttribute]
private void <AddBinding>b__28_0(object o, ExceptionRaisedEventArgs args);
    [CompilerGeneratedAttribute]
private void <AddBinding>b__28_1(object o, MessageReceivedEventArgs args);
}
public class Lextm.SharpSnmpLib.Pipeline.ListenerBinding : object {
    private UserRegistry _users;
    private Socket _socket;
    private int _bufferSize;
    private int _active;
    private bool _disposed;
    private static int Active;
    private static int Inactive;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionRaisedEventArgs> ExceptionRaised;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private IPEndPoint <Endpoint>k__BackingField;
    public IPEndPoint Endpoint { get; }
    public ListenerBinding(UserRegistry users, IPEndPoint endpoint);
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public sealed virtual void SendResponse(ISnmpMessage response, EndPoint receiver);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_Endpoint();
    public void Start();
    public void Stop();
    private void AsyncReceive();
    private void HandleException(Exception exception);
    private void HandleMessage(Byte[] buffer, int count, IPEndPoint remote);
    [AsyncStateMachineAttribute("Lextm.SharpSnmpLib.Pipeline.ListenerBinding/<SendResponseAsync>d__26")]
public sealed virtual Task SendResponseAsync(ISnmpMessage response, EndPoint receiver);
    [AsyncStateMachineAttribute("Lextm.SharpSnmpLib.Pipeline.ListenerBinding/<StartAsync>d__27")]
public Task StartAsync();
    [AsyncStateMachineAttribute("Lextm.SharpSnmpLib.Pipeline.ListenerBinding/<ReceiveAsync>d__28")]
private Task ReceiveAsync();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <Start>b__21_0();
}
public class Lextm.SharpSnmpLib.Pipeline.MessageHandlerFactory : object {
    private HandlerMapping[] _mappings;
    private NullMessageHandler _nullHandler;
    public MessageHandlerFactory(HandlerMapping[] mappings);
    public IMessageHandler GetHandler(ISnmpMessage message);
}
public class Lextm.SharpSnmpLib.Pipeline.MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ISnmpMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private IListenerBinding <Binding>k__BackingField;
    public ISnmpMessage Message { get; private set; }
    public IPEndPoint Sender { get; private set; }
    public IListenerBinding Binding { get; private set; }
    public MessageReceivedEventArgs(IPEndPoint sender, ISnmpMessage message, IListenerBinding binding);
    [CompilerGeneratedAttribute]
public ISnmpMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(ISnmpMessage value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IListenerBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(IListenerBinding value);
    public virtual string ToString();
}
internal class Lextm.SharpSnmpLib.Pipeline.NormalSnmpContext : SnmpContextBase {
    public NormalSnmpContext(ISnmpMessage request, IPEndPoint sender, UserRegistry users, IListenerBinding binding);
    public virtual void CopyRequest(ErrorCode status, int index);
    public virtual void GenerateTooBig();
    public virtual bool HandleMembership();
    public virtual void GenerateResponse(List`1<Variable> variables);
}
internal class Lextm.SharpSnmpLib.Pipeline.NullMessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.ObjectStore : object {
    protected IList`1<ISnmpObject> List;
    public virtual ScalarObject GetObject(ObjectIdentifier id);
    public virtual ScalarObject GetNextObject(ObjectIdentifier id);
    public virtual void Add(ISnmpObject newObject);
}
public abstract class Lextm.SharpSnmpLib.Pipeline.ScalarObject : SnmpObjectBase {
    [CompilerGeneratedAttribute]
private ObjectIdentifier <Id>k__BackingField;
    public Variable Variable { get; }
    public ISnmpData Data { get; public set; }
    private ObjectIdentifier Id { get; private set; }
    protected ScalarObject(ObjectIdentifier id);
    protected ScalarObject(string dots);
    protected ScalarObject(string dots, int index);
    public Variable get_Variable();
    public abstract virtual ISnmpData get_Data();
    public abstract virtual void set_Data(ISnmpData value);
    [CompilerGeneratedAttribute]
private ObjectIdentifier get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(ObjectIdentifier value);
    public virtual ScalarObject MatchGetNext(ObjectIdentifier id);
    public virtual ScalarObject MatchGet(ObjectIdentifier id);
}
internal class Lextm.SharpSnmpLib.Pipeline.SecureSnmpContext : SnmpContextBase {
    private static Nullable`1<bool> _timeIncluded;
    private static bool TimeIncluded { get; }
    public SecureSnmpContext(ISnmpMessage request, IPEndPoint sender, UserRegistry users, EngineGroup group, IListenerBinding binding);
    private void HandleFailure(Variable failure);
    public virtual void CopyRequest(ErrorCode status, int index);
    public virtual void GenerateTooBig();
    public virtual bool HandleMembership();
    private static bool get_TimeIncluded();
    private void HandleDiscovery();
    public virtual void GenerateResponse(List`1<Variable> variables);
}
public class Lextm.SharpSnmpLib.Pipeline.SetMessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.SetV1MessageHandler : object {
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
}
public class Lextm.SharpSnmpLib.Pipeline.SnmpApplication : ValueType {
    private ILogger _logger;
    private IMembershipProvider _provider;
    private MessageHandlerFactory _factory;
    private ObjectStore _store;
    private SnmpApplicationFactory _owner;
    private IMessageHandler _handler;
    [CompilerGeneratedAttribute]
private ISnmpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessingFinished>k__BackingField;
    public ISnmpContext Context { get; private set; }
    public bool ProcessingFinished { get; private set; }
    public SnmpApplication(SnmpApplicationFactory owner, ILogger logger, ObjectStore store, IMembershipProvider provider, MessageHandlerFactory factory);
    public void Init(ISnmpContext context);
    [CompilerGeneratedAttribute]
public ISnmpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ISnmpContext value);
    [CompilerGeneratedAttribute]
public bool get_ProcessingFinished();
    [CompilerGeneratedAttribute]
private void set_ProcessingFinished(bool value);
    public void Process();
    private void OnRequestHandlerExecute();
    private void OnMapRequestHandler();
    private void OnAuthenticateRequest();
    private void OnLogRequest();
    public void CompleteProcessing();
}
public class Lextm.SharpSnmpLib.Pipeline.SnmpApplicationFactory : object {
    private ILogger _logger;
    private ObjectStore _store;
    private IMembershipProvider _membershipProvider;
    private MessageHandlerFactory _factory;
    private object _root;
    public SnmpApplicationFactory(ILogger logger, ObjectStore store, IMembershipProvider membershipProvider, MessageHandlerFactory factory);
    public SnmpApplicationFactory(ObjectStore store, IMembershipProvider membershipProvider, MessageHandlerFactory factory);
    public SnmpApplication Create(ISnmpContext context);
}
internal abstract class Lextm.SharpSnmpLib.Pipeline.SnmpContextBase : object {
    [CompilerGeneratedAttribute]
private IListenerBinding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISnmpMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private UserRegistry <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private ISnmpMessage <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineGroup <Group>k__BackingField;
    public IListenerBinding Binding { get; private set; }
    public DateTime CreatedTime { get; private set; }
    public ISnmpMessage Request { get; private set; }
    protected UserRegistry Users { get; private set; }
    public ISnmpMessage Response { get; protected set; }
    public IPEndPoint Sender { get; private set; }
    protected EngineGroup Group { get; private set; }
    public bool TooBig { get; }
    protected SnmpContextBase(ISnmpMessage request, IPEndPoint sender, UserRegistry users, EngineGroup group, IListenerBinding binding);
    [CompilerGeneratedAttribute]
public sealed virtual IListenerBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(IListenerBinding value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedTime();
    [CompilerGeneratedAttribute]
private void set_CreatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual ISnmpMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(ISnmpMessage value);
    [CompilerGeneratedAttribute]
protected UserRegistry get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(UserRegistry value);
    [CompilerGeneratedAttribute]
public sealed virtual ISnmpMessage get_Response();
    [CompilerGeneratedAttribute]
protected void set_Response(ISnmpMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(IPEndPoint value);
    [CompilerGeneratedAttribute]
protected EngineGroup get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(EngineGroup value);
    public sealed virtual bool get_TooBig();
    public sealed virtual void SendResponse();
    public abstract virtual void GenerateResponse(List`1<Variable> variables);
    public abstract virtual void CopyRequest(ErrorCode status, int index);
    public abstract virtual bool HandleMembership();
    public abstract virtual void GenerateTooBig();
}
internal static class Lextm.SharpSnmpLib.Pipeline.SnmpContextFactory : object {
    public static ISnmpContext Create(ISnmpMessage request, IPEndPoint sender, UserRegistry users, EngineGroup group, IListenerBinding binding);
}
public class Lextm.SharpSnmpLib.Pipeline.SnmpEngine : object {
    private SnmpApplicationFactory _factory;
    private EngineGroup _group;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Listener <Listener>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionRaisedEventArgs> ExceptionRaised;
    public Listener Listener { get; private set; }
    public bool Active { get; }
    public SnmpEngine(SnmpApplicationFactory factory, Listener listener, EngineGroup group);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public Listener get_Listener();
    [CompilerGeneratedAttribute]
private void set_Listener(Listener value);
    private void ListenerMessageReceived(object sender, MessageReceivedEventArgs e);
    public void Start();
    public void Stop();
    public bool get_Active();
    private void ListenerExceptionRaised(object sender, ExceptionRaisedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionRaised(EventHandler`1<ExceptionRaisedEventArgs> value);
}
public abstract class Lextm.SharpSnmpLib.Pipeline.SnmpObjectBase : object {
    public abstract virtual ScalarObject MatchGetNext(ObjectIdentifier id);
    public abstract virtual ScalarObject MatchGet(ObjectIdentifier id);
}
public class Lextm.SharpSnmpLib.Pipeline.SocketAsyncEventArgsFactory : object {
    internal static string DisposedMessage;
    private object _root;
    private Queue`1<SocketAsyncEventArgs> _queue;
    public SocketAsyncEventArgs Create();
    internal void Reuse(SocketAsyncEventArgs args);
}
internal class Lextm.SharpSnmpLib.Pipeline.SocketAwaitable : object {
    private static Action SENTINEL;
    internal bool m_wasCompleted;
    internal Action m_continuation;
    internal SocketAsyncEventArgs m_eventArgs;
    private bool _disposed;
    public bool IsCompleted { get; }
    public SocketAwaitable(SocketAsyncEventArgs eventArgs);
    private static SocketAwaitable();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    private void Completed(object sender, SocketAsyncEventArgs e);
    internal void Reset();
    public SocketAwaitable GetAwaiter();
    public bool get_IsCompleted();
    public sealed virtual void OnCompleted(Action continuation);
    public int GetResult();
}
[ExtensionAttribute]
internal static class Lextm.SharpSnmpLib.Pipeline.SocketExtension : object {
    internal static SocketAsyncEventArgsFactory EventArgsFactory;
    private static SocketExtension();
    [ExtensionAttribute]
public static SocketAwaitable ReceiveMessageFromAsync(Socket socket, SocketAwaitable awaitable);
    [ExtensionAttribute]
public static SocketAwaitable SendToAsync(Socket socket, SocketAwaitable awaitable);
}
public abstract class Lextm.SharpSnmpLib.Pipeline.TableObject : SnmpObjectBase {
    protected IEnumerable`1<ScalarObject> Objects { get; }
    protected abstract virtual IEnumerable`1<ScalarObject> get_Objects();
    public virtual ScalarObject MatchGetNext(ObjectIdentifier id);
    public virtual ScalarObject MatchGet(ObjectIdentifier id);
}
public class Lextm.SharpSnmpLib.Pipeline.TrapV1MessageHandler : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<TrapV1MessageReceivedEventArgs> MessageReceived;
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<TrapV1MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<TrapV1MessageReceivedEventArgs> value);
    private void InvokeMessageReceived(TrapV1MessageReceivedEventArgs e);
}
public class Lextm.SharpSnmpLib.Pipeline.TrapV1MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IPEndPoint <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private TrapV1Message <TrapV1Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IListenerBinding <Binding>k__BackingField;
    public IPEndPoint Sender { get; private set; }
    public TrapV1Message TrapV1Message { get; private set; }
    public IListenerBinding Binding { get; private set; }
    public TrapV1MessageReceivedEventArgs(IPEndPoint sender, TrapV1Message request, IListenerBinding binding);
    [CompilerGeneratedAttribute]
public IPEndPoint get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(IPEndPoint value);
    [CompilerGeneratedAttribute]
public TrapV1Message get_TrapV1Message();
    [CompilerGeneratedAttribute]
private void set_TrapV1Message(TrapV1Message value);
    [CompilerGeneratedAttribute]
public IListenerBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(IListenerBinding value);
}
public class Lextm.SharpSnmpLib.Pipeline.TrapV2MessageHandler : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<TrapV2MessageReceivedEventArgs> MessageReceived;
    public sealed virtual void Handle(ISnmpContext context, ObjectStore store);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<TrapV2MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<TrapV2MessageReceivedEventArgs> value);
    private void InvokeMessageReceived(TrapV2MessageReceivedEventArgs e);
}
public class Lextm.SharpSnmpLib.Pipeline.TrapV2MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IPEndPoint <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private TrapV2Message <TrapV2Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IListenerBinding <Binding>k__BackingField;
    public IPEndPoint Sender { get; private set; }
    public TrapV2Message TrapV2Message { get; private set; }
    public IListenerBinding Binding { get; private set; }
    public TrapV2MessageReceivedEventArgs(IPEndPoint sender, TrapV2Message request, IListenerBinding binding);
    [CompilerGeneratedAttribute]
public IPEndPoint get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(IPEndPoint value);
    [CompilerGeneratedAttribute]
public TrapV2Message get_TrapV2Message();
    [CompilerGeneratedAttribute]
private void set_TrapV2Message(TrapV2Message value);
    [CompilerGeneratedAttribute]
public IListenerBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(IListenerBinding value);
}
public class Lextm.SharpSnmpLib.Pipeline.Version1MembershipProvider : object {
    private static VersionCode Version;
    private OctetString _get;
    private OctetString _set;
    public Version1MembershipProvider(OctetString getCommunity, OctetString setCommunity);
    public sealed virtual bool AuthenticateRequest(ISnmpContext context);
}
public class Lextm.SharpSnmpLib.Pipeline.Version2MembershipProvider : object {
    private static VersionCode Version;
    private OctetString _get;
    private OctetString _set;
    public Version2MembershipProvider(OctetString getCommunity, OctetString setCommunity);
    public sealed virtual bool AuthenticateRequest(ISnmpContext context);
}
public class Lextm.SharpSnmpLib.Pipeline.Version3MembershipProvider : object {
    private static VersionCode Version;
    public sealed virtual bool AuthenticateRequest(ISnmpContext context);
}
